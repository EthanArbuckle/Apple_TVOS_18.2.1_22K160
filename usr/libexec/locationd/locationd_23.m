void sub_100AFA6EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AFA73C(id a1)
{
  qword_101934488 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100AFA80C(id a1)
{
  qword_10199A8D8 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLOutdoorServiceSilo");
}

void sub_100AFA94C(id a1)
{
  if (sub_1001B9A1C() && (sub_1004F97F4() & 0x400000000000000LL) != 0
    || (sub_1004F2598(), sub_1004F7000()))
  {
    if (sub_1008FA690()) {
      byte_10199A8E8 = 1;
    }
  }

void sub_100AFACE8(_Unwind_Exception *a1)
{
}

id sub_100AFAD00(uint64_t a1, void *a2)
{
  return [a2 onOutdoorUpdate:a1];
}

id sub_100AFAD0C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onDaemonStatusNotification:a2 data:a3];
}

id sub_100AFAD1C(uint64_t a1, void *a2)
{
  return _[a2 onAmbientLightSensorData:a1];
}

id sub_100AFAD28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onLocationNotification:a2 data:a3];
}

id sub_100AFAD38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onFitnessTrackingNotification:a2 data:a3];
}

void sub_100AFAD48(id a1, BPSCompletion *a2)
{
  if (-[BPSCompletion state](a2, "state"))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186F738);
    }
    v3 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      id v12 = objc_msgSend(objc_msgSend(-[BPSCompletion error](a2, "error"), "description"), "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Registering for Biome stream UserFocus.SleepMode with error: %s\n",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186F738);
    }
    uint64_t v4 = qword_1019344B8;
    int v9 = 136315138;
    id v10 = objc_msgSend(objc_msgSend(-[BPSCompletion error](a2, "error"), "description"), "UTF8String");
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  1LL,  "Registering for Biome stream UserFocus.SleepMode with error: %s\n",  (const char *)&v9);
    v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLOutdoorService beginService]_block_invoke", "%s\n", v5);
    if (v6 == buf) {
      return;
    }
LABEL_20:
    free(v6);
    return;
  }

  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10186F738);
  }
  v7 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Registering for Biome stream UserFocus.SleepMode",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186F738);
    }
    LOWORD(v9) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for Biome stream UserFocus.SleepMode",  &v9,  2);
    v6 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLOutdoorService beginService]_block_invoke", "%s\n", v8);
    if (v6 != buf) {
      goto LABEL_20;
    }
  }

id sub_100AFB03C(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onBiomeUserFocusSleepModeEvent:", objc_msgSend(a2, "eventBody"));
}

void sub_100AFB1DC(void ***a1, void **a2)
{
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = sub_1005D0AC0(v3);
    operator delete(v4);
  }

void sub_100AFB25C(_Unwind_Exception *a1)
{
}

uint64_t sub_100AFB270()
{
  if (qword_10199A8F8 != -1) {
    dispatch_once(&qword_10199A8F8, &stru_10186F778);
  }
  if (!qword_10199A900 || !off_10198F6E8[0]() || !off_10198F6F0()) {
    return 1LL;
  }
  v0 = (const __CFString *)off_10198F6F0();
  v1 = (const __CFString *)off_10198F6E8[0]();
  v2 = (const __CFBoolean *)CFPreferencesCopyValue(v0, v1, @"mobile", kCFPreferencesAnyHost);
  if (!v2)
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F758);
    }
    v7 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Daylight time using default", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_10186F758);
      }
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  0LL,  "Daylight time using default",  v13,  2);
      id v12 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL getHKPrivacyPreferencesEnableDaylightTime()", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    return 1LL;
  }

  v3 = v2;
  int Value = CFBooleanGetValue(v2);
  BOOL v5 = Value != 0;
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10186F758);
  }
  v6 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    BOOL v15 = Value != 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Daylight time setting update, enabled %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F758);
    }
    v13[0] = 67240192;
    v13[1] = Value != 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  0LL,  "Daylight time setting update, enabled %{public}d",  v13,  8);
    id v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL getHKPrivacyPreferencesEnableDaylightTime()", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  CFRelease(v3);
  return v5;
}

void sub_100AFBAC4(_Unwind_Exception *a1)
{
}

id sub_100AFBADC(uint64_t a1, void *a2)
{
  return _[a2 onMotionStateCoprocessorData:a1];
}

id sub_100AFBAE8(uint64_t a1, void *a2)
{
  return _[a2 onOldMotionCoprocessorData:a1];
}

id sub_100AFBAF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onBacklightStateNotification:a2 data:a3];
}

id sub_100AFBB04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStepCountNotification:a2 data:a3];
}

id sub_100AFBB14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onOdometerNotification:a2 data:a3];
}

id sub_100AFBB24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onMotionStateMediatorNotification:a2 data:a3];
}

id sub_100AFBB34(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onWifiNotification:a2 data:a3];
}

id sub_100AFBB44(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onSignalEnvironmentNotification:a2 data:a3];
}

id sub_100AFBB54(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onGnssAvailabilityPredictorNotification:a2 data:a3];
}

id sub_100AFBB64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onGnssLeechLocationNotification:a2 data:a3];
}

id sub_100AFC488(uint64_t a1, void *a2)
{
  id v3 = [a2 isAuthorizedForServiceTypeMask:16];
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10186F758);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v10 = (int)v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Motion calibration service authorization update, enabled %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F758);
    }
    v8[0] = 67240192;
    v8[1] = (_DWORD)v3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  0LL,  "Motion calibration service authorization update, enabled %{public}d",  v8,  8);
    v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLOutdoorService updateLocationAuthorization]_block_invoke", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return [*(id *)(a1 + 32) toggleManagerBySettingFlag:*(void *)(a1 + 32) + 154 toState:v3];
}

void sub_100AFCAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_100AFCCDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100AFD394(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100AFB270();
  return _[a2 onHKPrivacyPreferencesEnableDaylightTime:v3];
}

uint64_t sub_100AFD9EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

void sub_100AFD9FC(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100AFDA28(id a1)
{
  qword_101934948 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

uint64_t sub_100AFDA54(uint64_t a1)
{
  v2 = *(void **)(a1 + 6352);
  *(void *)(a1 + 6352) = 0LL;
  if (v2) {
    sub_100AF63F0(a1 + 6352, v2);
  }
  uint64_t v3 = *(void *)(a1 + 6344);
  *(void *)(a1 + 6344) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100EA75D0(a1 + 6064);
  uint64_t v4 = *(void **)(a1 + 5704);
  if (v4)
  {
    *(void *)(a1 + 5712) = v4;
    operator delete(v4);
  }

  BOOL v5 = *(void **)(a1 + 5632);
  if (v5)
  {
    *(void *)(a1 + 5640) = v5;
    operator delete(v5);
  }

  sub_10031CBC8(a1 + 5504);
  sub_1004752FC((void *)(a1 + 16));
  return a1;
}

void sub_100AFDB30(id a1)
{
  qword_10199A900 = (uint64_t)dlopen("/System/Library/Frameworks/HealthKit.framework/HealthKit", 2);
}

uint64_t sub_100AFDB58()
{
  if (qword_10199A8F8 != -1) {
    dispatch_once(&qword_10199A8F8, &stru_10186F778);
  }
  v0 = (uint64_t *)dlsym((void *)qword_10199A900, "kHKNanoLifestylePrivacyPreferencesChangedNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10199A908 = result;
  }

  else
  {
    uint64_t result = qword_10199A908;
  }

  off_10198F6E0[0] = sub_100AFDBD0;
  return result;
}

uint64_t sub_100AFDBD0()
{
  return qword_10199A908;
}

uint64_t sub_100AFDBDC()
{
  if (qword_10199A8F8 != -1) {
    dispatch_once(&qword_10199A8F8, &stru_10186F778);
  }
  v0 = (uint64_t *)dlsym((void *)qword_10199A900, "kHKPrivacyPreferencesDomain");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10199A910 = result;
  }

  else
  {
    uint64_t result = qword_10199A910;
  }

  off_10198F6E8[0] = sub_100AFDC54;
  return result;
}

uint64_t sub_100AFDC54()
{
  return qword_10199A910;
}

uint64_t sub_100AFDC60()
{
  if (qword_10199A8F8 != -1) {
    dispatch_once(&qword_10199A8F8, &stru_10186F778);
  }
  v0 = (uint64_t *)dlsym((void *)qword_10199A900, "kHKPrivacyPreferencesKeyEnableDaylightTime");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10199A918 = result;
  }

  else
  {
    uint64_t result = qword_10199A918;
  }

  off_10198F6F0 = sub_100AFDCD8;
  return result;
}

uint64_t sub_100AFDCD8()
{
  return qword_10199A918;
}

__n128 sub_100AFDCE4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a1 + 80);
  return result;
}

void sub_100AFDD00()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100AFDD64()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100AFDDD8(_Unwind_Exception *a1)
{
}

uint64_t sub_100AFDDF0()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199A8C0, (void *)&_mh_execute_header);
}

void *sub_100AFDEB8(void *a1, int a2)
{
  if (byte_10199A937 >= 0) {
    uint64_t v4 = (char *)&xmmword_10199A920;
  }
  else {
    uint64_t v4 = (char *)xmmword_10199A920;
  }
  sub_1010DDBC0(__p, "");
  sub_100AFDFB0((uint64_t)a1, v4, a2, (uint64_t)__p, 1, 30.0);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10186F7C8;
  a1[9] = off_10186F880;
  sub_100B14CF0(a1 + 41, 0LL, 0LL);
  sub_100B14CF0(a1 + 43, 0LL, 0LL);
  (*(void (**)(void *))(*a1 + 112LL))(a1);
  return a1;
}

void sub_100AFDF84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AFDFB0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  id v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  *id v12 = &off_101826EF8;
  *(void *)a1 = off_10186FA00;
  *(void *)(a1 + 72) = off_10186FAA8;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10186FA00;
  *(void *)(a1 + 72) = off_10186FAA8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 248) = 12000;
  v13 = (int *)(a1 + 248);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 256) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 264));
  *(void *)(a1 + 264) = &off_101826EF8;
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v14 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = sub_1006E27E8();
  sub_100413284(v15, buf);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 248));
  v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    int *v13 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10186FAE8);
  }
  v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v13;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186FAE8);
    }
    int v24 = *v13;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLElevationGrade Entry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100AFE360( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[32] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_100210A00(v26);
  sub_100D8A88C(a12);
  *int v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100AFE404()
{
}

void *sub_100AFE40C(void *a1)
{
  a1[9] = off_10186FAA8;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_10186FA00;
  a1[32] = off_101826EC8;
  sub_1001B9C98(a1 + 33);
  sub_100210A00(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100AFE48C(uint64_t a1)
{
  return sub_100AFE40C((void *)(a1 - 72));
}

void sub_100AFE494(void *a1)
{
  v1 = sub_100AFE40C(a1);
  operator delete(v1);
}

void sub_100AFE4A8(uint64_t a1)
{
  v1 = sub_100AFE40C((void *)(a1 - 72));
  operator delete(v1);
}

uint64_t sub_100AFE4C0(uint64_t *a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100B14CF8(a1 + 41, &v13);
  BOOL v5 = (sqlite3_stmt *)sub_100019240(v13);
  if (sub_1003B7480(v5, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
  {
    uint64_t v6 = a1[10];
    char v7 = (sqlite3_stmt *)sub_100019240(v13);
    sub_1003BB2BC(v6, v7);
    uint64_t v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }

  else
  {
    uint64_t v8 = -1LL;
  }

  sub_1003C05BC(a1[10]);
  uint64_t v9 = a1[10];
  else {
    uint64_t v10 = *(void *)(v9 + 88);
  }
  sub_1003C1EC0(v9, v10);
  uint64_t v11 = v13;
  uint64_t v13 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  return v8;
}

void sub_100AFE5C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AFE5EC(uint64_t a1, uint64_t a2)
{
  return sub_100AFE4C0((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100AFE5F4(uint64_t a1, char **a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from ElevationGradeHistory ORDER BY startTime ASC", &v19);
    uint64_t v5 = v19;
    uint64_t v21 = v19;
    sub_1003C0454(*(void *)(a1 + 80));
    __int128 v19 = 0uLL;
    uint64_t v20 = 0LL;
    while (!sub_100AFE7E0(&v21, (uint64_t)&v19))
    {
      unint64_t v7 = (unint64_t)a2[1];
      unint64_t v6 = (unint64_t)a2[2];
      if (v7 >= v6)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a2) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)*a2) >> 3);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x555555555555555LL) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_10000701C((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0LL;
        }
        uint64_t v14 = &v13[24 * v9];
        *(_OWORD *)uint64_t v14 = v19;
        *((void *)v14 + 2) = v20;
        char v16 = *a2;
        uint64_t v15 = a2[1];
        v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            __int128 v18 = *(_OWORD *)(v15 - 24);
            *((void *)v17 - 1) = *((void *)v15 - 1);
            *(_OWORD *)(v17 - 24) = v18;
            v17 -= 24;
            v15 -= 24;
          }

          while (v15 != v16);
          uint64_t v15 = *a2;
        }

        uint64_t v8 = v14 + 24;
        *a2 = v17;
        a2[1] = v14 + 24;
        a2[2] = &v13[24 * v12];
        if (v15) {
          operator delete(v15);
        }
      }

      else
      {
        *(_OWORD *)unint64_t v7 = v19;
        *(void *)(v7 + 16) = v20;
        uint64_t v8 = (char *)(v7 + 24);
      }

      a2[1] = v8;
    }

    uint64_t result = sub_1003C05BC(*(void *)(a1 + 80));
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100AFE7B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AFE7E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  unint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  unint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
  double v9 = sqlite3_column_double(v8, 2);
  uint64_t result = 0LL;
  *(double *)(a2 + 16) = v9;
  return result;
}

uint64_t sub_100AFE870(uint64_t a1)
{
  uint64_t v3 = v8;
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(v8);
  int v5 = sqlite3_step(v4);
  if (v5 == 100)
  {
    unint64_t v6 = (sqlite3_stmt *)sub_100019240(v3);
    uint64_t v1 = sqlite3_column_int(v6, 0);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (v5 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100AFE910(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AFE934(uint64_t a1)
{
  return sub_100AFE870(a1 - 72);
}

void *sub_100AFE93C@<X0>(uint64_t a1@<X8>)
{
  if (byte_10199A937 < 0) {
    return sub_1010DD48C((_BYTE *)a1, (void *)xmmword_10199A920, *((unint64_t *)&xmmword_10199A920 + 1));
  }
  *(_OWORD *)a1 = xmmword_10199A920;
  *(void *)(a1 + 16) = unk_10199A930;
  return result;
}

void *sub_100AFE978@<X0>(uint64_t a1@<X8>)
{
  if (byte_10199A937 < 0) {
    return sub_1010DD48C((_BYTE *)a1, (void *)xmmword_10199A920, *((unint64_t *)&xmmword_10199A920 + 1));
  }
  *(_OWORD *)a1 = xmmword_10199A920;
  *(void *)(a1 + 16) = unk_10199A930;
  return result;
}

uint64_t sub_100AFE9B4(uint64_t a1, int a2, char **a3, double a4, double a5)
{
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v10 = a1 + 112;
  uint64_t v12 = v10 - 40;
  uint64_t v39 = v10;
  (*(void (**)(void))(v11 + 16))();
  __int16 v41 = 256;
  if ((sub_100D8A92C(v12) & 1) == 0)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10186F910);
    }
    v30 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "ElevationGradeHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10186F910);
      }
      LOWORD(v38) = 0;
      v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "ElevationGradeHistory, DB not accessible",  &v38,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLElevationGradeRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, int, std::vecto r<CLElevationGradeEntry> &) const",  "%s\n",  v35);
    }

    uint64_t v31 = 109LL;
    goto LABEL_37;
  }

  a3[1] = *a3;
  sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM ElevationGradeHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?",  buf);
  uint64_t v13 = *(void *)buf;
  uint64_t v38 = *(void *)buf;
  if (!*(void *)buf)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10186F910);
    }
    v32 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_FAULT,  "CLElevationGradeRecorderDb: failed to prepare queryInTimeRange #InvalidPreparedSQLStatement",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10186F910);
      }
      v37[0] = 0;
      v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  17LL,  "CLElevationGradeRecorderDb: failed to prepare queryInTimeRange #InvalidPreparedSQLStatement",  v37,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLElevationGradeRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, int, std::vecto r<CLElevationGradeEntry> &) const",  "%s\n",  v36);
    }

    uint64_t v31 = 112LL;
    goto LABEL_37;
  }

  memset(buf, 0, sizeof(buf));
  uint64_t v43 = 0LL;
  uint64_t v14 = (sqlite3_stmt *)sub_100019240(v13);
  if (!sub_1003B7480(v14, 1, a4)
    || (uint64_t v15 = (sqlite3_stmt *)sub_100019240(v13), !sub_1003B7480(v15, 2, a5))
    || (char v16 = (sqlite3_stmt *)sub_100019240(v13), !sub_1003C28BC(v16, 3, a2)))
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    uint64_t v31 = 100LL;
LABEL_37:
    if ((_BYTE)v41) {
      pthread_mutex_unlock(v40);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v39 + 24LL))(v39);
    }
    return v31;
  }

  while (!sub_100AFE7E0(&v38, (uint64_t)buf))
  {
    unint64_t v18 = (unint64_t)a3[1];
    unint64_t v17 = (unint64_t)a3[2];
    if (v18 >= v17)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)*a3) >> 3);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)*a3) >> 3);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x555555555555555LL) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23) {
        int v24 = (char *)sub_10000701C((uint64_t)(a3 + 2), v23);
      }
      else {
        int v24 = 0LL;
      }
      v25 = &v24[24 * v20];
      *(_OWORD *)v25 = *(_OWORD *)buf;
      *((void *)v25 + 2) = v43;
      v27 = *a3;
      v26 = a3[1];
      uint64_t v28 = v25;
      if (v26 != *a3)
      {
        do
        {
          __int128 v29 = *(_OWORD *)(v26 - 24);
          *((void *)v28 - 1) = *((void *)v26 - 1);
          *(_OWORD *)(v28 - 24) = v29;
          v28 -= 24;
          v26 -= 24;
        }

        while (v26 != v27);
        v26 = *a3;
      }

      __int128 v19 = v25 + 24;
      *a3 = v28;
      a3[1] = v25 + 24;
      a3[2] = &v24[24 * v23];
      if (v26) {
        operator delete(v26);
      }
    }

    else
    {
      *(_OWORD *)unint64_t v18 = *(_OWORD *)buf;
      *(void *)(v18 + 16) = v43;
      __int128 v19 = (char *)(v18 + 24);
    }

    a3[1] = v19;
  }

  int v34 = HIBYTE(v41);
  (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  uint64_t v31 = 100LL;
  if (v34) {
    goto LABEL_37;
  }
  return v31;
}

void sub_100AFEEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_100AFEF1C(uint64_t *a1)
{
  uint64_t result = sub_1003C1048(a1[10]);
  if ((_DWORD)result)
  {
    sub_100AFEF98((uint64_t)a1);
    sub_1003B59A0( a1[10],  "ElevationGradeHistory",  (const char **)&off_10186F930,  (const std::string::value_type **)&off_10198F6F8,  0);
    a1[41] = sub_1003BF158(a1[10], "DELETE FROM ElevationGradeHistory WHERE startTime < ?");
    a1[42] = v3;
    uint64_t result = sub_1003BF158(a1[10], "INSERT INTO ElevationGradeHistory (startTime, fractionalGrade) VALUES (?, ?)");
    a1[43] = result;
    a1[44] = v4;
  }

  return result;
}

uint64_t sub_100AFEF98(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "ElevationGradeHistory");
  if ((_DWORD)result)
  {
    uint64_t result = sub_100AFF574( a1,  "ElevationGradeHistory",  (const char **)&off_10186F930,  (const std::string::value_type **)&off_10198F6F8);
    if ((_DWORD)result) {
      return sub_1003BF200(*(void *)(a1 + 80), "ElevationGradeHistory");
    }
  }

  return result;
}

uint64_t sub_100AFF004(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM ElevationGradeHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    int v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_100AFF098(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AFF0B8(uint64_t a1)
{
  return sub_100AFF004(a1 - 72);
}

uint64_t sub_100AFF0C0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1LL);
    sub_1003C0D54(a1[10], "DELETE FROM ElevationGradeHistory WHERE startTime > ?", &v11);
    uint64_t v5 = v11;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v11);
    if (sub_1003B7480(v6, 1, *(double *)(a2 + 8)))
    {
      uint64_t v7 = a1[10];
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
      sub_1003BB2BC(v7, v8);
    }

    uint64_t v9 = a1[10];
    else {
      uint64_t v10 = *(void *)(v9 + 88);
    }
    uint64_t result = sub_1003C1EC0(v9, v10);
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100AFF188(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AFF1A8(uint64_t a1, double a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "UPDATE ElevationGradeHistory SET startTime = startTime + ?", &v9);
    uint64_t v5 = v9;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v9);
    uint64_t result = sub_1003B7480(v6, 1, a2);
    if ((_DWORD)result)
    {
      uint64_t v7 = *(void *)(a1 + 80);
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003BB2BC(v7, v8);
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100AFF240(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

id *sub_100AFF260(uint64_t a1, uint64_t a2)
{
  v15[0] = (id)os_transaction_create("CLElevationGradeRecorderDb::insertRecordUL");
  v15[1] = 0LL;
  if (sub_100D8A92C(a1 + 72))
  {
    sub_100B14CF8((uint64_t *)(a1 + 344), &v14);
    if (v14 && sub_100019240(v14))
    {
      uint64_t v4 = (sqlite3_stmt *)sub_100019240(v14);
      if (sub_1003B7480(v4, 1, *(double *)(a2 + 8)))
      {
        uint64_t v5 = (sqlite3_stmt *)sub_100019240(v14);
        if (sub_1003B7480(v5, 2, *(double *)(a2 + 16)))
        {
          uint64_t v6 = *(void *)(a1 + 80);
          uint64_t v7 = (sqlite3_stmt *)sub_100019240(v14);
          sub_1003BB2BC(v6, v7);
        }
      }
    }

    else
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10186F910);
      }
      uint64_t v8 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "ElevationGradeHistory, insert statement is NULL",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_10186F910);
        }
        __int16 v13 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "ElevationGradeHistory, insert statement is NULL",  &v13,  2);
        uint64_t v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLElevationGradeRecorderDb::insertRecordUL(const CLElevationGradeEntry &, BOOL)",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }
    }

    uint64_t v9 = v14;
    uint64_t v14 = 0LL;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
  }

  return sub_1001BA1BC(v15);
}

void sub_100AFF490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  if (a5) {
    (*(void (**)(uint64_t))(*(void *)a5 + 8LL))(a5);
  }
  sub_1001BA1BC((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100AFF4CC()
{
  return 0LL;
}

uint64_t sub_100AFF4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v7;
  uint64_t v8 = v7;
  uint64_t v5 = sub_100AFE7E0(&v8, a2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return v5;
}

void sub_100AFF554(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AFF574(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186FAE8);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186FAE8);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints (const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLElevationGradeEntry, DataProtectionPo licy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    uint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      char v16 = v143;
    }
    else {
      char v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    unint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      unint64_t v21 = &__p;
    }
    else {
      unint64_t v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    unint64_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v27 = &__p;
      }
      else {
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      uint64_t v28 = v143;
    }
    else {
      uint64_t v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v34 = &v139;
    }
    else {
      int v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v41 = &__p;
    }
    else {
      __int16 v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v47 = &__p;
      }
      else {
        v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      v48 = v143;
    }
    else {
      v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v54 = buf;
    }
    else {
      v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v60 = buf;
    }
    else {
      v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v69 = &__p;
    }
    else {
      v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v75 = &__p;
      }
      else {
        v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      v79 = &__p;
    }
    else {
      v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v85 = &__p;
      }
      else {
        v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      v86 = v143;
    }
    else {
      v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v95 = &__p;
    }
    else {
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v103 = &__p;
        }
        else {
          v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        v104 = v141;
      }
      else {
        v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v114 = buf;
      }
      else {
        v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v121 = &__p;
      }
      else {
        v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186FAE8);
      }
      v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186FAE8);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstrain ts(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLElevationGradeEntry, DataProtecti onPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186FAE8);
      }
      v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186FAE8);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstrain ts(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLElevationGradeEntry, DataProtecti onPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100B0070C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B00A2C(void *a1, void **a2, double a3, double a4)
{
  __int128 v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v40);
  if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    if (HIBYTE(v41)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_10125EA50(v10);
    goto LABEL_41;
  }

  uint64_t v4 = (std::stringbuf *)v40[1];
  operator delete(v40[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v40);
  uint64_t v11 = sub_10000CF44(&v41, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = sub_10000CF44(v11, (uint64_t)p_p, size);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  uint64_t v15 = a1[10];
  uint64_t v4 = &v42;
  std::stringbuf::str(&__p, &v42);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v16 = &__p;
  }
  else {
    char v16 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v15, (char *)v16, &v37);
  uint64_t v5 = v37;
  uint64_t v37 = 0LL;
  uint64_t v38 = v5;
  std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    unint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      memset(&__p, 0, sizeof(__p));
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v38, (uint64_t)&__p);
        if ((_DWORD)v19) {
          break;
        }
        unint64_t v21 = (char *)a2[1];
        signed __int8 v20 = (char *)a2[2];
        if (v21 >= v20)
        {
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (_BYTE *)*a2) >> 3);
          unint64_t v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_100007008();
          }
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)*a2) >> 3);
          if (2 * v26 > v25) {
            unint64_t v25 = 2 * v26;
          }
          if (v26 >= 0x555555555555555LL) {
            unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27) {
            uint64_t v28 = (char *)sub_10000701C((uint64_t)(a2 + 2), v27);
          }
          else {
            uint64_t v28 = 0LL;
          }
          std::string::size_type v29 = &v28[24 * v24];
          __int128 v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((void *)v29 + 2) = __p.__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string::size_type v29 = v30;
          v32 = (char *)*a2;
          __int128 v31 = (char *)a2[1];
          __int128 v33 = v29;
          if (v31 != *a2)
          {
            do
            {
              __int128 v34 = *(_OWORD *)(v31 - 24);
              *((void *)v33 - 1) = *((void *)v31 - 1);
              *(_OWORD *)(v33 - 24) = v34;
              v33 -= 24;
              v31 -= 24;
            }

            while (v31 != v32);
            __int128 v31 = (char *)*a2;
          }

          int v23 = v29 + 24;
          *a2 = v33;
          a2[1] = v29 + 24;
          a2[2] = &v28[24 * v27];
          if (v31) {
            operator delete(v31);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((void *)v21 + 2) = __p.__r_.__value_.__l.__cap_;
          *(_OWORD *)unint64_t v21 = v22;
          int v23 = v21 + 24;
        }

        a2[1] = v23;
      }

      uint64_t v5 = v38;
      goto LABEL_43;
    }
  }

void sub_100B00D74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100B00DDC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186FAE8);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186FAE8);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)buf = 134349056;
        *(void *)std::string::size_type v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186FAE8);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        uint64_t v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::setDatabas eAccessible() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186FAE8);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    char v16 = (void *)(v14 + 8 * (v13 / 0xAA));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 24 * (v13 % 0xAA);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0xAA)) + 24 * (v22 % 0xAA);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186FB08);
      }
      unint64_t v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186FB08);
        }
        LOWORD(v41) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::setDatabas eAccessible() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 24LL;
      if (v17 - *v16 == 4080)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186FAE8);
    }
    unint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186FAE8);
      }
    }

    signed __int8 v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v21 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  uint64_t v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      uint64_t v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 85LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 170LL;
  }

  *(void *)(a1 + 208) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100B01508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

id *sub_100B0153C(uint64_t a1, __int128 *a2, char a3)
{
  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v35);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  uint64_t v32 = 0LL;
  double v33 = 0.0;
  uint64_t v34 = 0LL;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104LL))(a1, &v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186FAE8);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186FAE8);
        }
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v36,  2);
        char v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAn dStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *((double *)a2 + 1);
    double v8 = v33;
    double v9 = v7 - v33;
    if (v7 - v33 < 0.0) {
      double v9 = -(v7 - v33);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186FAE8);
      }
      __int128 v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        double v41 = v33;
        __int16 v42 = 2050;
        uint64_t v43 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186FAE8);
        }
        uint64_t v23 = *((void *)a2 + 1);
        int v36 = 134349312;
        double v37 = v33;
        __int16 v38 = 2050;
        uint64_t v39 = v23;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v36,  22);
        unint64_t v25 = (uint8_t *)v24;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAn dStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v24);
        if (v25 != buf) {
          free(v25);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *((double *)a2 + 1);
      double v8 = v33;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186FAE8);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          double v41 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186FAE8);
          }
          double v26 = *((double *)a2 + 1);
          int v36 = 134217984;
          double v37 = v26;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v36));
          uint64_t v28 = (uint8_t *)v27;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitize AndStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_10186FAE8);
        double v18 = v31;
      }

      double v19 = v17 - v18;
      signed __int8 v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v41 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186FAE8);
        }
        int v36 = 134217984;
        double v37 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v36));
        unint64_t v30 = (uint8_t *)v29;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAn dStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v29);
        if (v30 != buf) {
          free(v30);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, uint64_t *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, &v32, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100B01C88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100B01CB4(uint64_t a1)
{
  return sub_100B00DDC(a1 - 72);
}

void sub_100B01CBC(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100B01CE8(uint64_t *a1, char **a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v34);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if (HIBYTE(v35)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10125EBBC(v4);
LABEL_44:
    sub_100007008();
  }

  unint64_t v30 = v34[1];
  operator delete(v34[0]);
  if (!v30) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v34);
    int v6 = sub_10000CF44(&v35, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, uint64_t *))(*a1 + 64))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v36);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v31);
    uint64_t v12 = v31;
    uint64_t v31 = 0LL;
    uint64_t v32 = v12;
    sub_1003C0454(a1[10]);
    memset(&__p, 0, sizeof(__p));
    while (!sub_1001BA11C((uint64_t)a1, &v32, (uint64_t)&__p))
    {
      unint64_t v14 = (unint64_t)a2[1];
      unint64_t v13 = (unint64_t)a2[2];
      if (v14 >= v13)
      {
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a2) >> 3);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_44;
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)*a2) >> 3);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x555555555555555LL) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20) {
          __int128 v21 = (char *)sub_10000701C((uint64_t)(a2 + 2), v20);
        }
        else {
          __int128 v21 = 0LL;
        }
        unint64_t v22 = &v21[24 * v17];
        __int128 v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v22 + 2) = __p.__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v22 = v23;
        unint64_t v25 = *a2;
        unint64_t v24 = a2[1];
        double v26 = v22;
        if (v24 != *a2)
        {
          do
          {
            __int128 v27 = *(_OWORD *)(v24 - 24);
            *((void *)v26 - 1) = *((void *)v24 - 1);
            *(_OWORD *)(v26 - 24) = v27;
            v26 -= 24;
            v24 -= 24;
          }

          while (v24 != v25);
          unint64_t v24 = *a2;
        }

        char v16 = v22 + 24;
        *a2 = v26;
        a2[1] = v22 + 24;
        a2[2] = &v21[24 * v20];
        if (v24) {
          operator delete(v24);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v14 + 16) = __p.__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v14 = v15;
        char v16 = (char *)(v14 + 24);
      }

      a2[1] = v16;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v28 = v32;
    uint64_t v32 = 0LL;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    }
    *(void **)((char *)v34
    uint64_t v35 = v29;
    std::streambuf::~streambuf(&v36);
    return std::ios::~ios(&v37);
  }

  return result;
}

void sub_100B01FEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  sub_1011F8850((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100B02054(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_10125ED28(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  unint64_t v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100B022B4(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10125EE94(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100B024EC(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10125F000(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  uint64_t v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100B02714(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100B02740(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100B0276C()
{
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_10199A920,  (void *)&_mh_execute_header);
}

__n128 sub_100B027B0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 132) != 2)
  {
    uint64_t v3 = (_DWORD *)(a2 + 96);
    if (*(_DWORD *)(a2 + 96) != 3 && !sub_10029286C(*(double *)(a2 + 4), *(double *)(a2 + 12)))
    {
      __int128 v13 = *(_OWORD *)(a2 + 96);
      __int128 v14 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)__int128 v15 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)&v15[12] = *(_OWORD *)(a2 + 140);
      __int128 v9 = *(_OWORD *)(a2 + 32);
      __int128 v10 = *(_OWORD *)(a2 + 48);
      __int128 v11 = *(_OWORD *)(a2 + 64);
      __int128 v12 = *(_OWORD *)(a2 + 80);
      __n128 v7 = *(__n128 *)a2;
      __int128 v8 = *(_OWORD *)(a2 + 16);
      uint64_t v16 = v3;
      int v6 = sub_100B028AC(a1 + 232, v3, (uint64_t)&unk_1012CF090, &v16);
      *(_OWORD *)(v6 + 17) = v14;
      *(_OWORD *)(v6 + 19) = *(_OWORD *)v15;
      *(_OWORD *)(v6 + 21) = *(_OWORD *)&v15[16];
      *(_OWORD *)(v6 + 23) = 0uLL;
      *(_OWORD *)(v6 + 9) = v10;
      *(_OWORD *)(v6 + 11) = v11;
      *(_OWORD *)(v6 + 13) = v12;
      *(_OWORD *)(v6 + 15) = v13;
      __n128 result = v7;
      *(__n128 *)(v6 + 3) = v7;
      *(_OWORD *)(v6 + 5) = v8;
      *(_OWORD *)(v6 + 7) = v9;
      v6[25] = 0xBFF0000000000000LL;
    }
  }

  return result;
}

uint64_t *sub_100B028AC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v7 - 1) & v6;
    }

    __int128 v9 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      for (__n128 result = *v9; result; __n128 result = (uint64_t *)*result)
      {
        unint64_t v11 = result[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v6) {
            return result;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_100B02ADC(a1, *a2, a4, (uint64_t)v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100019E10(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v20[0] = *v18;
    *uint64_t v18 = v20[0];
  }

  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v19 = *(void *)(*(void *)v20[0] + 8LL);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }

      else
      {
        v19 &= v7 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v19) = v20[0];
    }
  }

  __n128 result = (uint64_t *)v20[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100B02AC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100B02ADC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = (char *)operator new(0xD0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(void *)uint8x8_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  *((_DWORD *)v8 + 4) = **a3;
  *((_DWORD *)v8 + 6) = 0xFFFF;
  *(void *)(v8 + 28) = 0LL;
  *(void *)(v8 + 36) = 0LL;
  *(_OWORD *)(v8 + 44) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(__n128 *)(v8 + 60) = result;
  *(__n128 *)(v8 + 76) = result;
  *(__n128 *)(v8 + 92) = result;
  *((_DWORD *)v8 + 27) = 0;
  *((_DWORD *)v8 + 34) = 0;
  *((void *)v8 + 14) = 0xBFF0000000000000LL;
  *((void *)v8 + 15) = 0LL;
  *((void *)v8 + 16) = 0LL;
  *(void *)(v8 + 140) = 0xBFF0000000000000LL;
  *((_DWORD *)v8 + 37) = 0x7FFFFFFF;
  *((void *)v8 + 21) = 0LL;
  *((void *)v8 + 22) = 0LL;
  *((void *)v8 + 19) = 0LL;
  *((void *)v8 + 20) = 0LL;
  v8[176] = 0;
  *((void *)v8 + 23) = 0LL;
  *((void *)v8 + 24) = 0LL;
  *((void *)v8 + 25) = 0xBFF0000000000000LL;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100B02B90( uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(_DWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  BOOL v11 = sub_100B03208(a2->f64);
  int v12 = 0;
  if (!v11)
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186FB48);
    }
    float v13 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Rejection: ModelTemporalEntropy missing required feature inputs",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_10186FB48);
      }
      LOWORD(v64) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "Rejection: ModelTemporalEntropy missing required feature inputs",  &v64,  2);
      __int128 v59 = (char *)v58;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModel::Result CLMobility::SteadinessModelTemporalEntropy::runSteadinessModel(CFAbsoluteTime, const Fea tures &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v58);
      if (v59 != buf) {
        free(v59);
      }
    }

    int v12 = *(_DWORD *)(a5 + 48) | 8;
    *(_DWORD *)(a5 + 48) = v12;
  }

  if (!*(_BYTE *)(a4 + 57)) {
    *(_DWORD *)(a5 + 48) = v12 | 4;
  }
  std::stringbuf::string_type __p = 0LL;
  v62 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v15 = *a3;
  uint64_t v14 = a3[1];
  *(void *)buf = &__p;
  while (v15 != v14)
  {
    v15 += 224LL;
  }

  sub_1004CBC48(a1, a5, (uint64_t *)&__p);
  double v16 = sub_10070C70C(a2);
  *(double *)(a5 + 24) = v16;
  *(double *)(a5 + 32) = sub_10070C7C0(v16);
  *(void *)(a5 + 40) = v17;
  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10186FB48);
  }
  uint64_t v18 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v19 = *(double *)(a5 + 32);
    float64_t v20 = *(double *)(a5 + 40);
    uint64_t v21 = *(void *)(a5 + 16);
    float64_t v22 = *(double *)(a5 + 24);
    int v23 = *(_DWORD *)(a5 + 48);
    int v24 = *(_DWORD *)(a5 + 8);
    int v25 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)buf = 134350593;
    *(void *)&uint8_t buf[4] = v21;
    __int16 v84 = 2050;
    float64_t v85 = v19;
    __int16 v86 = 2050;
    float64_t v87 = v20;
    __int16 v88 = 2049;
    float64_t v89 = v22;
    __int16 v90 = 1026;
    *(_DWORD *)__int128 v91 = v23;
    *(_WORD *)&v91[4] = 1025;
    *(_DWORD *)&v91[6] = v24;
    LOWORD(v92) = 1025;
    *(_DWORD *)((char *)&v92 + 2) = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "CLMobility::SteadinessModelTemporalEntropy::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotO K,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts 28Days,%{private}d",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186FB48);
    }
    float64_t v37 = *(double *)(a5 + 32);
    float64_t v38 = *(double *)(a5 + 40);
    float64_t v39 = *(double *)(a5 + 16);
    float64_t v40 = *(double *)(a5 + 24);
    int v41 = *(_DWORD *)(a5 + 48);
    int v42 = *(_DWORD *)(a5 + 8);
    int v43 = *(_DWORD *)(a5 + 12);
    int v64 = 134350593;
    float64_t v65 = v39;
    __int16 v66 = 2050;
    float64_t v67 = v37;
    __int16 v68 = 2050;
    float64_t v69 = v38;
    __int16 v70 = 2049;
    float64_t v71 = v40;
    __int16 v72 = 1026;
    *(_DWORD *)size_t v73 = v41;
    *(_WORD *)&v73[4] = 1025;
    *(_DWORD *)&v73[6] = v42;
    LOWORD(v74) = 1025;
    *(_DWORD *)((char *)&v74 + 2) = v43;
    LODWORD(v60) = 60;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "CLMobility::SteadinessModelTemporalEntropy::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotO K,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts 28Days,%{private}d",  &v64,  v60);
    __int16 v45 = (char *)v44;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModel::Result CLMobility::SteadinessModelTemporalEntropy::runSteadinessModel(CFAbsoluteTime, const Featu res &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v44);
    if (v45 != buf) {
      free(v45);
    }
  }

  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10186FB48);
  }
  uint64_t v26 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v28 = a2->f64[0];
    float64_t v27 = a2->f64[1];
    float64_t v29 = a2[3].f64[0];
    float64_t v30 = a2[3].f64[1];
    float64_t v32 = a2[4].f64[0];
    float64_t v31 = a2[4].f64[1];
    float64_t v33 = a2[1].f64[0];
    float64_t v34 = a2[1].f64[1];
    float64_t v36 = a2[2].f64[0];
    float64_t v35 = a2[2].f64[1];
    *(_DWORD *)buf = 134285825;
    *(float64_t *)&uint8_t buf[4] = v35;
    __int16 v84 = 2049;
    float64_t v85 = v27;
    __int16 v86 = 2049;
    float64_t v87 = v28;
    __int16 v88 = 2049;
    float64_t v89 = v33;
    __int16 v90 = 2049;
    *(float64_t *)__int128 v91 = v29;
    *(_WORD *)&v91[8] = 2049;
    float64_t v92 = v30;
    __int16 v93 = 2049;
    float64_t v94 = v31;
    __int16 v95 = 2049;
    float64_t v96 = v32;
    __int16 v97 = 2049;
    float64_t v98 = v34;
    __int16 v99 = 2049;
    float64_t v100 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "CLMobility::SteadinessModelTemporalEntropy::Features,allBoutsMinGaitMetrics21StepLengthEntropyMeanLog,%{private}.2 f,allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thL og,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropyP5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoi ncareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log,%{private}.2f,allBoutsMinGaitMetri cs21StepLengthPoincareSd2P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog,%{private}.2f,al lBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log,%{private}.2f",  buf,  0x66u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186FB48);
    }
    float64_t v47 = a2->f64[0];
    float64_t v46 = a2->f64[1];
    float64_t v48 = a2[3].f64[0];
    float64_t v49 = a2[3].f64[1];
    float64_t v51 = a2[4].f64[0];
    float64_t v50 = a2[4].f64[1];
    float64_t v52 = a2[1].f64[0];
    float64_t v53 = a2[1].f64[1];
    float64_t v55 = a2[2].f64[0];
    float64_t v54 = a2[2].f64[1];
    int v64 = 134285825;
    float64_t v65 = v54;
    __int16 v66 = 2049;
    float64_t v67 = v46;
    __int16 v68 = 2049;
    float64_t v69 = v47;
    __int16 v70 = 2049;
    float64_t v71 = v52;
    __int16 v72 = 2049;
    *(float64_t *)size_t v73 = v48;
    *(_WORD *)&v73[8] = 2049;
    float64_t v74 = v49;
    __int16 v75 = 2049;
    float64_t v76 = v50;
    __int16 v77 = 2049;
    float64_t v78 = v51;
    __int16 v79 = 2049;
    float64_t v80 = v53;
    __int16 v81 = 2049;
    float64_t v82 = v55;
    LODWORD(v60) = 102;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "CLMobility::SteadinessModelTemporalEntropy::Features,allBoutsMinGaitMetrics21StepLengthEntropyMeanLog,%{private}.2 f,allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thL og,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropyP5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoi ncareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log,%{private}.2f,allBoutsMinGaitMetri cs21StepLengthPoincareSd2P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog,%{private}.2f,al lBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log,%{private}.2f",  &v64,  v60);
    __int128 v57 = (char *)v56;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModel::Result CLMobility::SteadinessModelTemporalEntropy::runSteadinessModel(CFAbsoluteTime, const Featu res &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v56);
    if (v57 != buf) {
      free(v57);
    }
  }

  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }

void sub_100B031D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100B03208(double *a1)
{
  return *a1 != -INFINITY
      && a1[1] != -INFINITY
      && a1[2] != -INFINITY
      && a1[3] != -INFINITY
      && a1[4] != -INFINITY
      && a1[5] != -INFINITY
      && a1[6] != -INFINITY
      && a1[7] != -INFINITY
      && a1[8] != -INFINITY
      && a1[9] != -INFINITY;
}

void sub_100B032B8(uint64_t *a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  int64x2_t v5 = vdupq_n_s64(0xFFF0000000000000LL);
  *(int64x2_t *)a2 = v5;
  *(int64x2_t *)(a2 + 16) = v5;
  *(int64x2_t *)(a2 + 32) = v5;
  *(int64x2_t *)(a2 + 48) = v5;
  *(int64x2_t *)(a2 + 64) = v5;
  v130 = 0LL;
  v131 = 0LL;
  uint64_t v132 = 0LL;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(void *)buf = &v130;
  if (v6 == v7)
  {
    BOOL v11 = 0LL;
    __int128 v10 = 0LL;
  }

  else
  {
    do
    {
      double v8 = *(double *)(v6 + 8);
      if (v8 < a3 && v8 >= a3 + -2419200.0) {
        sub_1004CC934((void ***)buf, (_OWORD *)v6);
      }
      v6 += 224LL;
    }

    while (v6 != v7);
    __int128 v10 = v130;
    BOOL v11 = v131;
  }

  std::stringbuf::string_type __p = 0LL;
  uint64_t v128 = 0LL;
  uint64_t v129 = 0LL;
  std::string::size_type v124 = 0LL;
  v125 = 0LL;
  char v126 = 0LL;
  v121 = 0LL;
  v122 = 0LL;
  int v123 = 0LL;
  v118 = 0LL;
  std::string::size_type v119 = 0LL;
  unsigned __int8 v120 = 0LL;
  std::string::size_type v115 = 0LL;
  v116 = 0LL;
  __int128 v117 = 0LL;
  v112 = 0LL;
  __int128 v113 = 0LL;
  v114 = 0LL;
  if (v10 == v11)
  {
    __int16 v97 = 0LL;
    float64_t v96 = 0LL;
  }

  else
  {
    do
    {
      if (*((_DWORD *)v10 + 9) >= 0x15u)
      {
        uint64_t v12 = v10[8];
        if (((v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 <= 0x3FE
          || (v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
          || v12 == 0x7FF0000000000000LL
          || (v12 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          double v16 = v128;
          if (v128 >= v129)
          {
            uint64_t v18 = (char *)__p;
            uint64_t v19 = (v128 - (_BYTE *)__p) >> 3;
            unint64_t v20 = v19 + 1;
            uint64_t v21 = v129 - (_BYTE *)__p;
            if ((v129 - (_BYTE *)__p) >> 2 > v20) {
              unint64_t v20 = v21 >> 2;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              int v23 = (char *)sub_1000071BC((uint64_t)&v129, v22);
              uint64_t v18 = (char *)__p;
              double v16 = v128;
              uint64_t v12 = v10[8];
            }

            else
            {
              int v23 = 0LL;
            }

            int v24 = &v23[8 * v19];
            *(void *)int v24 = v12;
            uint64_t v17 = v24 + 8;
            while (v16 != v18)
            {
              uint64_t v25 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v24 - 1) = v25;
              v24 -= 8;
            }

            std::stringbuf::string_type __p = v24;
            uint64_t v128 = v17;
            uint64_t v129 = &v23[8 * v22];
            if (v18) {
              operator delete(v18);
            }
          }

          else
          {
            *(void *)uint64_t v128 = v12;
            uint64_t v17 = v16 + 8;
          }

          uint64_t v128 = v17;
        }

        uint64_t v26 = v10[9];
        if (((v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 <= 0x3FE
          || (v26 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
          || v26 == 0x7FF0000000000000LL
          || (v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          float64_t v30 = v125;
          if (v125 >= v126)
          {
            float64_t v32 = (char *)v124;
            uint64_t v33 = (v125 - (_BYTE *)v124) >> 3;
            unint64_t v34 = v33 + 1;
            uint64_t v35 = v126 - (_BYTE *)v124;
            if ((v126 - (_BYTE *)v124) >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              float64_t v37 = (char *)sub_1000071BC((uint64_t)&v126, v36);
              float64_t v32 = (char *)v124;
              float64_t v30 = v125;
              uint64_t v26 = v10[9];
            }

            else
            {
              float64_t v37 = 0LL;
            }

            float64_t v38 = &v37[8 * v33];
            *(void *)float64_t v38 = v26;
            float64_t v31 = v38 + 8;
            while (v30 != v32)
            {
              uint64_t v39 = *((void *)v30 - 1);
              v30 -= 8;
              *((void *)v38 - 1) = v39;
              v38 -= 8;
            }

            std::string::size_type v124 = v38;
            v125 = v31;
            char v126 = &v37[8 * v36];
            if (v32) {
              operator delete(v32);
            }
          }

          else
          {
            *(void *)v125 = v26;
            float64_t v31 = v30 + 8;
          }

          v125 = v31;
        }

        uint64_t v40 = v10[10];
        if (((v40 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 <= 0x3FE
          || (v40 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
          || v40 == 0x7FF0000000000000LL
          || (v40 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          std::string::size_type v44 = v122;
          if (v122 >= v123)
          {
            float64_t v46 = (char *)v121;
            uint64_t v47 = (v122 - (_BYTE *)v121) >> 3;
            unint64_t v48 = v47 + 1;
            uint64_t v49 = v123 - (_BYTE *)v121;
            if ((v123 - (_BYTE *)v121) >> 2 > v48) {
              unint64_t v48 = v49 >> 2;
            }
            else {
              unint64_t v50 = v48;
            }
            if (v50)
            {
              float64_t v51 = (char *)sub_1000071BC((uint64_t)&v123, v50);
              float64_t v46 = (char *)v121;
              std::string::size_type v44 = v122;
              uint64_t v40 = v10[10];
            }

            else
            {
              float64_t v51 = 0LL;
            }

            float64_t v52 = &v51[8 * v47];
            *(void *)float64_t v52 = v40;
            __int16 v45 = v52 + 8;
            while (v44 != v46)
            {
              uint64_t v53 = *((void *)v44 - 1);
              v44 -= 8;
              *((void *)v52 - 1) = v53;
              v52 -= 8;
            }

            v121 = v52;
            v122 = v45;
            int v123 = &v51[8 * v50];
            if (v46) {
              operator delete(v46);
            }
          }

          else
          {
            *(void *)v122 = v40;
            __int16 v45 = v44 + 8;
          }

          v122 = v45;
        }

        uint64_t v54 = v10[11];
        if (((v54 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 <= 0x3FE
          || (v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
          || v54 == 0x7FF0000000000000LL
          || (v54 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          v58 = v119;
          if (v119 >= v120)
          {
            uint64_t v60 = (char *)v118;
            uint64_t v61 = (v119 - (_BYTE *)v118) >> 3;
            unint64_t v62 = v61 + 1;
            uint64_t v63 = v120 - (_BYTE *)v118;
            if ((v120 - (_BYTE *)v118) >> 2 > v62) {
              unint64_t v62 = v63 >> 2;
            }
            else {
              unint64_t v64 = v62;
            }
            if (v64)
            {
              float64_t v65 = (char *)sub_1000071BC((uint64_t)&v120, v64);
              uint64_t v60 = (char *)v118;
              v58 = v119;
              uint64_t v54 = v10[11];
            }

            else
            {
              float64_t v65 = 0LL;
            }

            __int16 v66 = &v65[8 * v61];
            *(void *)__int16 v66 = v54;
            __int128 v59 = v66 + 8;
            while (v58 != v60)
            {
              uint64_t v67 = *((void *)v58 - 1);
              v58 -= 8;
              *((void *)v66 - 1) = v67;
              v66 -= 8;
            }

            v118 = v66;
            std::string::size_type v119 = v59;
            unsigned __int8 v120 = &v65[8 * v64];
            if (v60) {
              operator delete(v60);
            }
          }

          else
          {
            *(void *)std::string::size_type v119 = v54;
            __int128 v59 = v58 + 8;
          }

          std::string::size_type v119 = v59;
        }

        uint64_t v68 = v10[12];
        if (((v68 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 <= 0x3FE
          || (v68 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
          || v68 == 0x7FF0000000000000LL
          || (v68 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          __int16 v72 = v116;
          if (v116 >= v117)
          {
            float64_t v74 = (char *)v115;
            uint64_t v75 = (v116 - (_BYTE *)v115) >> 3;
            unint64_t v76 = v75 + 1;
            uint64_t v77 = v117 - (_BYTE *)v115;
            if ((v117 - (_BYTE *)v115) >> 2 > v76) {
              unint64_t v76 = v77 >> 2;
            }
            else {
              unint64_t v78 = v76;
            }
            if (v78)
            {
              __int16 v79 = (char *)sub_1000071BC((uint64_t)&v117, v78);
              float64_t v74 = (char *)v115;
              __int16 v72 = v116;
              uint64_t v68 = v10[12];
            }

            else
            {
              __int16 v79 = 0LL;
            }

            float64_t v80 = &v79[8 * v75];
            *(void *)float64_t v80 = v68;
            size_t v73 = v80 + 8;
            while (v72 != v74)
            {
              uint64_t v81 = *((void *)v72 - 1);
              v72 -= 8;
              *((void *)v80 - 1) = v81;
              v80 -= 8;
            }

            std::string::size_type v115 = v80;
            v116 = v73;
            __int128 v117 = &v79[8 * v78];
            if (v74) {
              operator delete(v74);
            }
          }

          else
          {
            *(void *)v116 = v68;
            size_t v73 = v72 + 8;
          }

          v116 = v73;
        }

        uint64_t v82 = v10[13];
        if (((v82 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 <= 0x3FE
          || (v82 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
          || v82 == 0x7FF0000000000000LL
          || (v82 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          __int16 v86 = v113;
          if (v113 >= v114)
          {
            __int16 v88 = (char *)v112;
            uint64_t v89 = (v113 - (_BYTE *)v112) >> 3;
            unint64_t v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 61) {
LABEL_213:
            }
              sub_100007008();
            uint64_t v91 = v114 - (_BYTE *)v112;
            if ((v114 - (_BYTE *)v112) >> 2 > v90) {
              unint64_t v90 = v91 >> 2;
            }
            else {
              unint64_t v92 = v90;
            }
            if (v92)
            {
              __int16 v93 = (char *)sub_1000071BC((uint64_t)&v114, v92);
              __int16 v88 = (char *)v112;
              __int16 v86 = v113;
              uint64_t v82 = v10[13];
            }

            else
            {
              __int16 v93 = 0LL;
            }

            float64_t v94 = &v93[8 * v89];
            *(void *)float64_t v94 = v82;
            float64_t v87 = v94 + 8;
            while (v86 != v88)
            {
              uint64_t v95 = *((void *)v86 - 1);
              v86 -= 8;
              *((void *)v94 - 1) = v95;
              v94 -= 8;
            }

            v112 = v94;
            __int128 v113 = v87;
            v114 = &v93[8 * v92];
            if (v88) {
              operator delete(v88);
            }
          }

          else
          {
            *(void *)__int128 v113 = v82;
            float64_t v87 = v86 + 8;
          }

          __int128 v113 = v87;
        }
      }

      v10 += 28;
    }

    while (v10 != v11);
    __int16 v97 = __p;
    float64_t v96 = v128;
  }

  if ((unint64_t)(v96 - v97) > 8)
  {
    double v98 = sub_100CFC1E4((double **)&__p);
    *(double *)(a2 + 40) = log(v98);
  }

  if ((unint64_t)(v119 - (_BYTE *)v118) >= 9)
  {
    double v99 = sub_100CFC1E4((double **)&v118);
    *(double *)(a2 + 8) = log(v99);
    double v100 = sub_100DEA954((uint64_t)&v118, 95);
    double v101 = sub_100DEA954((uint64_t)&v118, 5);
    *(double *)a2 = log(v100 - v101);
    double v102 = sub_100DEA954((uint64_t)&v118, 5);
    *(double *)(a2 + 16) = log(v102);
  }

  if ((unint64_t)(v125 - (_BYTE *)v124) >= 9)
  {
    double v103 = sub_100DEA954((uint64_t)&v124, 5);
    *(double *)(a2 + 48) = log(v103);
    double v104 = sub_100DEA954((uint64_t)&v124, 95);
    *(double *)(a2 + 56) = log(v104);
  }

  if ((unint64_t)(v122 - (_BYTE *)v121) >= 9)
  {
    double v105 = sub_100DEA954((uint64_t)&v121, 5);
    *(double *)(a2 + 72) = log(v105);
    double v106 = sub_100CFC1E4((double **)&v121);
    *(double *)(a2 + 64) = log(v106);
  }

  if ((unint64_t)(v116 - (_BYTE *)v115) >= 9)
  {
    double v107 = sub_100DEA954((uint64_t)&v115, 5);
    *(double *)(a2 + 24) = log(v107);
  }

  if ((unint64_t)(v113 - (_BYTE *)v112) >= 9)
  {
    double v108 = sub_100DEA954((uint64_t)&v112, 5);
    *(double *)(a2 + 32) = log(v108);
  }

  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10186FB48);
  }
  __int128 v109 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349824;
    *(double *)&uint8_t buf[4] = a3;
    __int16 v142 = 2050;
    uint64_t v143 = 0x6DB6DB6DB6DB6DB7LL * ((v131 - (_BYTE *)v130) >> 5);
    __int16 v144 = 2050;
    uint64_t v145 = (v128 - (_BYTE *)__p) >> 3;
    __int16 v146 = 2050;
    uint64_t v147 = (v119 - (_BYTE *)v118) >> 3;
    _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEBUG,  "SteadinessModelTemporalEntropy::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numStepLength Entropy,%{public}lu,cycleTimeEntropy,%{public}lu",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186FB48);
    }
    int v133 = 134349824;
    double v134 = a3;
    __int16 v135 = 2050;
    uint64_t v136 = 0x6DB6DB6DB6DB6DB7LL * ((v131 - (_BYTE *)v130) >> 5);
    __int16 v137 = 2050;
    uint64_t v138 = (v128 - (_BYTE *)__p) >> 3;
    __int16 v139 = 2050;
    uint64_t v140 = (v119 - (_BYTE *)v118) >> 3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  2LL,  "SteadinessModelTemporalEntropy::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numStepLength Entropy,%{public}lu,cycleTimeEntropy,%{public}lu",  &v133,  42);
    __int128 v111 = (char *)v110;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "Features CLMobility::SteadinessModelTemporalEntropy::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &) const",  "%s\n",  v110);
    if (v111 != buf) {
      free(v111);
    }
  }

  if (v112)
  {
    __int128 v113 = (char *)v112;
    operator delete(v112);
  }

  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }

  if (v118)
  {
    std::string::size_type v119 = (char *)v118;
    operator delete(v118);
  }

  if (v121)
  {
    v122 = (char *)v121;
    operator delete(v121);
  }

  if (v124)
  {
    v125 = (char *)v124;
    operator delete(v124);
  }

  if (__p)
  {
    uint64_t v128 = (char *)__p;
    operator delete(__p);
  }

  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }

void sub_100B03CEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a36) {
    operator delete(a36);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B03D7C(id a1)
{
  qword_101934488 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void *sub_100B03DA8(void *a1, __int128 *a2)
{
  unint64_t v4 = (float32x2_t *)sub_100C0099C(a1);
  *unint64_t v4 = (float32x2_t)off_10186FB78;
  sub_100B03DF8(v4, a2);
  return a1;
}

void sub_100B03DE4(_Unwind_Exception *a1)
{
}

void sub_100B03DF8(float32x2_t *a1, __int128 *a2)
{
  __int128 v3 = a2[1];
  __int128 v21 = *a2;
  __int128 v22 = v3;
  v23[0] = a2[2];
  *(_OWORD *)((char *)v23 + 13) = *(__int128 *)((char *)a2 + 45);
  if (sub_100C01B68())
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10186FBD8);
    }
    unint64_t v4 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Device still has original rear camera. Using unit-specific calibration info",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186FBD8);
      }
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Device still has original rear camera. Using unit-specific calibration info",  v24,  2,  v21,  v22,  v23[0],  v23[1]);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    int64x2_t v5 = (__int16 *)((char *)&v21 + 7);
LABEL_27:
    sub_100C01740(a1, v5);
    return;
  }

  unsigned int v6 = sub_100C01CDC();
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10186FBD8);
  }
  uint64_t v7 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v26 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Rear camera was replaced. VCM actuator ID is %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10186FBD8);
    }
    v24[0] = 67109120;
    v24[1] = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Rear camera was replaced. VCM actuator ID is %d",  v24);
    double v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  if (v6 == 4)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10186FBD8);
    }
    __int128 v9 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Using generic Alps calibration info", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186FBD8);
      }
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Using generic Alps calibration info",  v24,  2,  v21,  v22,  v23[0],  v23[1]);
      unint64_t v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    int64x2_t v5 = (__int16 *)((char *)v23 + 11);
    goto LABEL_27;
  }

  if (v6 == 3)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10186FBD8);
    }
    double v8 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Using generic Mitsumi calibration info", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186FBD8);
      }
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Using generic Mitsumi calibration info",  v24,  2,  v21,  v22,  v23[0],  v23[1]);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    int64x2_t v5 = (__int16 *)((char *)&v22 + 9);
    goto LABEL_27;
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10186FBD8);
  }
  __int128 v10 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Unrecongized VCM actuator. Not performing compensation",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10186FBD8);
    }
    LOWORD(v24[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Unrecongized VCM actuator. Not performing compensation",  v24,  2,  v21,  v22,  v23[0],  v23[1]);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

void sub_100B044B8(_DWORD *a1)
{
  uint64_t v1 = sub_100C00A00(a1);
  operator delete(v1);
}

void sub_100B044CC(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100B0471C(uint64_t a1, void *a2)
{
  if (v4 > 140.0)
  {
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10186FD10);
    }
    int64x2_t v5 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      [a2 accuracy];
      *(_DWORD *)buf = 134217984;
      uint64_t v66 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "phone, not sending altitude to watch, uncertainty %f",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10186FD10);
    }
    uint64_t v7 = qword_1019346A8;
    [a2 accuracy];
    *(_DWORD *)uint64_t v53 = 134217984;
    *(void *)&v53[4] = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  0LL,  "phone, not sending altitude to watch, uncertainty %f",  COERCE_DOUBLE(v53));
    __int128 v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)",  "%s\n",  v9);
    if (v10 == buf) {
      return;
    }
LABEL_50:
    free(v10);
    return;
  }

  [a2 altitude];
  if (v11 <= -900.0 || ([a2 altitude], v12 >= 10000.0))
  {
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10186FD10);
    }
    uint64_t v17 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "invalid altitude, not sending to watch",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10186FD10);
      }
      *(_WORD *)uint64_t v53 = 0;
      double v33 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  16LL,  "invalid altitude, not sending to watch",  v53,  2);
      __int128 v10 = v34;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)",  "%s\n",  v33);
LABEL_49:
      if (v10 == buf) {
        return;
      }
      goto LABEL_50;
    }
  }

  else
  {
    [a2 timestamp];
    v64[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
    [a2 altitude];
    v64[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
    [a2 accuracy];
    v64[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
    [a2 precision];
    v64[3] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
    v64[4] = +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [a2 statusInfo]);
    double v50 = 0.0;
    float v13 = +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v64, 5LL),  0LL,  &v50);
    if (v50 == 0.0)
    {
      uint64_t v18 = v13;
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10186FD10);
      }
      uint64_t v19 = (os_log_s *)qword_1019346A8;
      if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
      {
        [a2 timestamp];
        uint64_t v21 = v20;
        [a2 altitude];
        uint64_t v23 = v22;
        [a2 accuracy];
        uint64_t v25 = v24;
        [a2 precision];
        uint64_t v27 = v26;
        id v28 = [a2 statusInfo];
        [a2 filteredPressure];
        *(_DWORD *)buf = 134219264;
        uint64_t v66 = v21;
        __int16 v67 = 2048;
        uint64_t v68 = v23;
        __int16 v69 = 2048;
        uint64_t v70 = v25;
        __int16 v71 = 2048;
        uint64_t v72 = v27;
        __int16 v73 = 2048;
        id v74 = v28;
        __int16 v75 = 2048;
        uint64_t v76 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "sending altimeter data to watch: timestamp %f, altitude %f, accuracy %f, precision %f, status info %lu, filteredPressure, %f",  buf,  0x3Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10186FD10);
        }
        uint64_t v35 = qword_1019346A8;
        [a2 timestamp];
        uint64_t v37 = v36;
        [a2 altitude];
        uint64_t v39 = v38;
        [a2 accuracy];
        uint64_t v41 = v40;
        [a2 precision];
        uint64_t v43 = v42;
        id v44 = [a2 statusInfo];
        [a2 filteredPressure];
        *(_DWORD *)uint64_t v53 = 134219264;
        *(void *)&v53[4] = v37;
        __int16 v54 = 2048;
        uint64_t v55 = v39;
        __int16 v56 = 2048;
        uint64_t v57 = v41;
        __int16 v58 = 2048;
        uint64_t v59 = v43;
        __int16 v60 = 2048;
        id v61 = v44;
        __int16 v62 = 2048;
        uint64_t v63 = v45;
        LODWORD(v48) = 62;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v35,  2LL,  "sending altimeter data to watch: timestamp %f, altitude %f, accuracy %f, precision %f, status info %lu, filteredPressure, %f",  COERCE_DOUBLE(v53),  v48,  v49,  v50,  v51,  *(double *)&v52);
        uint64_t v47 = (uint8_t *)v46;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)",  "%s\n",  v46);
        if (v47 != buf) {
          free(v47);
        }
      }

      sub_10039FB50(120.0, a1, 20, v18, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
      *(CFAbsoluteTime *)(a1 + 256) = CFAbsoluteTimeGetCurrent();
      float64_t v51 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent());
      [a2 filteredPressure];
      float64_t v52 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
      float64_t v30 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v51, 2LL);
      *(void *)uint64_t v53 = 0LL;
      float64_t v31 = +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v30,  0LL,  v53);
      if (!*(void *)v53)
      {
        sub_10039FB50(120.0, a1, 36, v31, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
        return;
      }

      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10186FD10);
      }
      float64_t v32 = (os_log_s *)qword_1019346A8;
      if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#Warning error serializing Filtered Pressure entry",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10186FD10);
        }
        LOWORD(v49) = 0;
        LODWORD(v48) = 2;
        double v16 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "#Warning error serializing Filtered Pressure entry",  &v49,  *(void *)&v48,  *(void *)&v49);
        goto LABEL_44;
      }
    }

    else
    {
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10186FD10);
      }
      uint64_t v14 = (os_log_s *)qword_1019346A8;
      if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning error serializing Absolute Altitude entry",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10186FD10);
        }
        *(_WORD *)uint64_t v53 = 0;
        double v16 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "#Warning error serializing Absolute Altitude entry",  v53,  2,  *(void *)&v49);
LABEL_44:
        __int128 v10 = v15;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)",  "%s\n",  v16);
        goto LABEL_49;
      }
    }
  }

uint64_t sub_100B05048(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10039EE84(a1, a2);
  *(void *)uint64_t v3 = off_10186FC08;
  *(void *)(v3 + 160) = 0LL;
  *(_WORD *)(v3 + 168) = 0;
  *(void *)(v3 + 176) = 0LL;
  *(_OWORD *)(v3 + 184) = xmmword_101349650;
  double v4 = (void *)(v3 + 184);
  *(_BYTE *)(v3 + 200) = 0;
  *(void *)(a1 + 208) = [*(id *)(v3 + 40) newTimer];
  *(void *)(a1 + 216) = [*(id *)(a1 + 40) newTimer];
  *(_BYTE *)(a1 + 224) = 0;
  sub_1004F2598();
  if (sub_1004F7500() && (sub_1010350BC() & 1) == 0)
  {
    uint64_t v15 = objc_alloc(&OBJC_CLASS___CMStrideCalibrator);
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    id v5 = -[CMStrideCalibrator initInUniverse:stepCountDb:](v15, "initInUniverse:stepCountDb:", v16, &v24);
    uint64_t v17 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }

  else
  {
    id v5 = 0LL;
  }

  *(void *)(a1 + 232) = v5;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 256) = 0x7FEFFFFFFFFFFFFFLL;
  sub_101204164((unsigned __int8 *)(a1 + 264), "AltitudeMinReportIntervalInSeconds", &qword_101349660, 0);
  *(_WORD *)(a1 + 288) = 0;
  uint64_t v6 = sub_1006E27E8();
  sub_100413284(v6, &v22);
  sub_1002A82BC(v22, "CompanionConnectionKeepAliveInterval", v4);
  uint64_t v7 = v23;
  if (v23)
  {
    uint64_t v8 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  sub_10027EB5C((uint64_t)sub_100B0534C, a1, *(void **)(a1 + 32), &v22);
  uint64_t v10 = v22;
  uint64_t v22 = 0LL;
  uint64_t v11 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    uint64_t v12 = v22;
    uint64_t v22 = 0LL;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
  }

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_100B05524;
  v21[3] = &unk_10181D3D0;
  v21[4] = a1;
  [*(id *)(a1 + 208) setHandler:v21];
  [*(id *)(a1 + 208) setNextFireDelay:120.0 interval:120.0];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100B055B0;
  void v20[3] = &unk_10181D3D0;
  v20[4] = a1;
  [*(id *)(a1 + 216) setHandler:v20];
  *(void *)(a1 + 240) =  -[CLCompanionNotifierCompanionAdapter initWithCompanionNotifierCompanion:]( objc_alloc(&OBJC_CLASS___CLCompanionNotifierCompanionAdapter),  "initWithCompanionNotifierCompanion:",  a1);
  id v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLBarometerCalibration");
  *(void *)(a1 + 248) = v13;
  objc_msgSend(v13, "registerDelegate:inSilo:", *(void *)(a1 + 240), objc_msgSend(*(id *)(a1 + 32), "silo"));
  [*(id *)(a1 + 248) setDelegateEntityName:"CLCompanionNotifierCompanion"];
  return a1;
}

void sub_100B052F4(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[20];
  v1[20] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_10039F868(v1);
  _Unwind_Resume(a1);
}

void sub_100B0534C(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186FD30);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCompanionNotifierCompanion::onOdometerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186FD30);
    }
    unint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCompanionNotifierCompanion::onOdometerNotification, event:%{public, location:esca pe_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100B06994((_BYTE *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B05504( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100B05524(uint64_t a1)
{
  return sub_100B0552C(*(void *)(a1 + 32));
}

id sub_100B0552C(uint64_t a1)
{
  id result = sub_10039F854();
  if ((_DWORD)result && !*(_BYTE *)(a1 + 200) && *(_BYTE *)(a1 + 109))
  {
    if (*(_BYTE *)(a1 + 110))
    {
      sub_10039FB50(120.0, a1, 15, 0LL, 300LL, 0LL, 0LL, 0LL, 0, 0LL);
      id result = [*(id *)(a1 + 208) invalidate];
      *(_BYTE *)(a1 + 200) = 1;
    }
  }

  return result;
}

void sub_100B055B0(uint64_t a1)
{
}

void sub_100B055B8(uint64_t a1)
{
  if ((sub_10039F854() & 1) != 0)
  {
    sub_100B0649C(a1, *(unsigned __int8 *)(a1 + 224));
    uint64_t v2 = *(void **)(a1 + 216);
    double v3 = 1.79769313e308;
LABEL_11:
    [v2 setNextFireDelay:v3];
    return;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  [(id)qword_1019A0F88 pairedDeviceLastSeenTimestamp];
  if (Current - v5 <= 3599.0)
  {
    uint64_t v2 = *(void **)(a1 + 216);
    double v3 = 3600.0;
    goto LABEL_11;
  }

  if (qword_1019346D0 != -1) {
    dispatch_once(&qword_1019346D0, &stru_10186FD50);
  }
  uint64_t v6 = (os_log_s *)qword_1019346D8;
  if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Spectator subscriptions expired",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346D0 != -1) {
      dispatch_once(&qword_1019346D0, &stru_10186FD50);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  0LL,  "#Warning Spectator subscriptions expired",  v9,  2);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierCompanion::checkAndToggleSpectatorSources()",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  sub_100B0649C(a1, 0);
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 289) = 0;
  sub_100B066F8(a1, 0);
}

uint64_t sub_100B0581C(uint64_t a1)
{
  *(void *)a1 = off_10186FC08;
  uint64_t v2 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }

  *(void *)(a1 + 248) = 0LL;
  uint64_t v3 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return sub_10039F868((void *)a1);
}

void sub_100B0589C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B0581C(a1);
  operator delete(v1);
}

void sub_100B058B0(uint64_t a1, int a2, void *a3)
{
  if (qword_1019346D0 != -1) {
    dispatch_once(&qword_1019346D0, &stru_10186FD50);
  }
  uint64_t v6 = (os_log_s *)qword_1019346D8;
  if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    LODWORD(v77[0]) = a2;
    WORD2(v77[0]) = 2048;
    *(void *)((char *)v77 + 6) = [a3 length];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received message,type,%d,size,%lu", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346D0 != -1) {
      dispatch_once(&qword_1019346D0, &stru_10186FD50);
    }
    uint64_t v60 = qword_1019346D8;
    int v74 = 67109376;
    LODWORD(v75[0]) = a2;
    WORD2(v75[0]) = 2048;
    *(void *)((char *)v75 + 6) = [a3 length];
    LODWORD(v67) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v60,  2LL,  "Received message,type,%d,size,%lu",  &v74,  v67);
    __int16 v62 = (uint8_t *)v61;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v61);
    if (v62 != buf) {
      free(v62);
    }
  }

  *(CFAbsoluteTime *)(a1 + 192) = CFAbsoluteTimeGetCurrent();
  switch(a2)
  {
    case 0:
      if (!*(_BYTE *)(a1 + 168))
      {
        [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:2 registrationInfo:0];
        [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:4 registrationInfo:0];
        *(_BYTE *)(a1 + 168) = 1;
      }

      goto LABEL_69;
    case 1:
      if (*(_BYTE *)(a1 + 168))
      {
        [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:2];
        [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:4];
        *(_BYTE *)(a1 + 168) = 0;
      }

      goto LABEL_69;
    case 4:
      if (!*(_BYTE *)(a1 + 169))
      {
        [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:3 registrationInfo:0];
        [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:7 registrationInfo:0];
        *(_BYTE *)(a1 + 169) = 1;
      }

      goto LABEL_69;
    case 5:
      if (*(_BYTE *)(a1 + 169))
      {
        [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:3];
        [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:7];
        *(_BYTE *)(a1 + 169) = 0;
      }

      goto LABEL_69;
    case 7:
      id v73 = 0LL;
      id v9 = +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a3,  0LL,  &v73);
      if (!v73)
      {
        uint64_t v10 = v9;
        if ([v9 count] == (id)1)
        {
          id v11 = objc_msgSend(objc_msgSend(v10, "firstObject"), "integerValue");
          *(void *)(a1 + 176) = v11;
          uint64_t v12 = *(void **)(a1 + 232);
          if (v12) {
            [v12 setSession:v11];
          }
          else {
            objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor", v11),  "proxyForService:",  @"CLStepCountNotifier"),  "strideCalibratorSetSession:",  *(void *)(a1 + 176));
          }
          id v57 = objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:",  @"CLRunningAggregatorAWD");
          uint64_t v58 = *(void *)(a1 + 176);
LABEL_67:
          [v57 updateSession:v58];
          goto LABEL_69;
        }
      }

      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186FD70);
      }
      float64_t v52 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
      {
        id v53 = objc_msgSend(objc_msgSend(v73, "description"), "UTF8String");
        *(_DWORD *)buf = 136315138;
        v77[0] = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "#Warning Error deserializing session override: %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186FD70);
        }
        uint64_t v54 = qword_101934518;
        id v55 = objc_msgSend(objc_msgSend(v73, "description"), "UTF8String");
        int v74 = 136315138;
        v75[0] = v55;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v54,  16LL,  "#Warning Error deserializing session override: %s",  &v74);
        goto LABEL_63;
      }

      break;
    case 8:
      *(void *)(a1 + 176) = 0LL;
      int v13 = *(void **)(a1 + 232);
      if (v13) {
        [v13 setSession:0];
      }
      else {
        objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "strideCalibratorSetSession:",  0);
      }
      id v57 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLRunningAggregatorAWD");
      uint64_t v58 = 0LL;
      goto LABEL_67;
    case 11:
      *(_BYTE *)(a1 + 224) = 1;
      uint64_t v14 = a1;
      int v15 = 1;
      goto LABEL_24;
    case 12:
      *(_BYTE *)(a1 + 224) = 0;
      uint64_t v14 = a1;
      int v15 = 0;
LABEL_24:
      sub_100B0649C(v14, v15);
      goto LABEL_69;
    case 14:
      objc_opt_class(&OBJC_CLASS___NSString);
      uint64_t v17 = v16;
      objc_opt_class(&OBJC_CLASS___NSNumber);
      uint64_t v19 = v18;
      objc_opt_class(&OBJC_CLASS___NSDictionary);
      uint64_t v21 = v20;
      objc_opt_class(&OBJC_CLASS___NSArray);
      uint64_t v23 = v22;
      *(void *)&double v24 = objc_opt_class(&OBJC_CLASS___CMPedometerBin).n128_u64[0];
      id v26 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v17, v24, v19, v21, v23, v25, 0LL),  a3,  0LL);
      id v27 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLMotionSyncStore");
      v72[0] = _NSConcreteStackBlock;
      v72[1] = 3221225472LL;
      v72[2] = sub_100B066C8;
      v72[3] = &unk_101840D20;
      v72[4] = v26;
      id v28 = v72;
      goto LABEL_27;
    case 18:
      id v27 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLMotionStateObserver");
      v71[0] = _NSConcreteStackBlock;
      v71[1] = 3221225472LL;
      v71[2] = sub_100B066E0;
      v71[3] = &unk_101840D20;
      v71[4] = a3;
      id v28 = v71;
LABEL_27:
      [v27 doAsync:v28];
      goto LABEL_69;
    case 21:
      objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:",  @"CLPredictedWalkDistanceServiceCompanion"),  "receivePredictedWalkDistanceBout:",  a3);
      goto LABEL_69;
    case 22:
      sub_100B066F8(a1, 1);
      goto LABEL_69;
    case 24:
      if ((sub_100FE58F8() & 1) != 0) {
        goto LABEL_69;
      }
      id v29 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
      uint64_t v30 = 65793LL;
LABEL_37:
      [v29 collect:v30 isLocal:0];
      goto LABEL_69;
    case 25:
      if ((sub_100FE58F8() & 1) != 0) {
        goto LABEL_69;
      }
      id v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
      uint64_t v8 = 257LL;
LABEL_34:
      [v7 dontcollect:v8 isLocal:0];
      goto LABEL_69;
    case 26:
      id v29 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
      uint64_t v30 = 0x101000001LL;
      goto LABEL_37;
    case 27:
    case 29:
      id v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
      uint64_t v8 = 16777217LL;
      goto LABEL_34;
    case 28:
      id v29 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
      uint64_t v30 = 0x100000101000001LL;
      goto LABEL_37;
    case 30:
      objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier"),  "companionHeartbeat:",  a3);
      goto LABEL_69;
    case 31:
      objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLVO2MaxCloudKitManager"),  "receiveVO2MaxCloudKitDailyStatsFromWatch:",  a3);
      goto LABEL_69;
    case 34:
      id v73 = 0LL;
      objc_opt_class(&OBJC_CLASS___NSString);
      uint64_t v70 = v33;
      objc_opt_class(&OBJC_CLASS___NSDictionary);
      uint64_t v69 = v34;
      objc_opt_class(&OBJC_CLASS___NSArray);
      uint64_t v36 = v35;
      objc_opt_class(&OBJC_CLASS___CLHRRecoveryInputHRData);
      uint64_t v38 = v37;
      objc_opt_class(&OBJC_CLASS___CLHRRecoveryInputWRData);
      uint64_t v40 = v39;
      objc_opt_class(&OBJC_CLASS___CLHRRecoverySessionData);
      uint64_t v42 = v41;
      objc_opt_class(&OBJC_CLASS___CLPredictedWalkDistanceData);
      uint64_t v44 = v43;
      objc_opt_class(&OBJC_CLASS___CLElevationGradeData);
      uint64_t v46 = v45;
      *(void *)&double v47 = objc_opt_class(&OBJC_CLASS___NSUUID).n128_u64[0];
      id v49 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v70,  v47,  v69,  v36,  v38,  v40,  v42,  v44,  v46,  v48,  0LL),  a3,  &v73);
      if (v73)
      {
        if (qword_1019346D0 != -1) {
          dispatch_once(&qword_1019346D0, &stru_10186FD50);
        }
        double v50 = (os_log_s *)qword_1019346D8;
        if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v77[0] = v73;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "Failed to deserialize healthColdStorageUpdate : %@ ",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346D0 != -1) {
            dispatch_once(&qword_1019346D0, &stru_10186FD50);
          }
          int v74 = 138412290;
          v75[0] = v73;
          LODWORD(v68) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  16LL,  "Failed to deserialize healthColdStorageUpdate : %@ ",  &v74,  v68);
LABEL_63:
          __int16 v56 = (uint8_t *)v51;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v51);
          if (v56 != buf) {
            free(v56);
          }
        }
      }

      else
      {
        objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:",  @"CMHealthColdStorageCompanionSyncService"),  "receiveColdStorageDataUpdate:",  v49);
LABEL_69:
        int v59 = *(_BYTE *)(a1 + 168) || *(_BYTE *)(a1 + 169) || *(void *)(a1 + 176) != 0LL;
        sub_10039FEC4(a1, v59);
      }

      break;
    case 37:
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186FD70);
      }
      float64_t v31 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v32 = [a3 length];
        *(_DWORD *)buf = 67109120;
        LODWORD(v77[0]) = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Phone received workout distance core analytics data from watch. Message size: %d bytes",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186FD70);
        }
        uint64_t v63 = qword_101934518;
        unsigned int v64 = [a3 length];
        int v74 = 67109120;
        LODWORD(v75[0]) = v64;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v63,  0LL,  "Phone received workout distance core analytics data from watch. Message size: %d bytes",  &v74);
        uint64_t v66 = (uint8_t *)v65;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v65);
        if (v66 != buf) {
          free(v66);
        }
      }

      objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "receiveWorkoutDistanceAnalyticsMessage:",  a3);
      goto LABEL_69;
    default:
      goto LABEL_69;
  }

void sub_100B0649C(uint64_t a1, int a2)
{
  if (sub_1004F922C())
  {
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10186FDB0);
    }
    uint64_t v4 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 224);
      int v6 = *(unsigned __int8 *)(a1 + 110);
      *(_DWORD *)buf = 67109632;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v5;
      __int16 v20 = 1024;
      int v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "coarse elevation src,enable,%d,elevationSpectator,%d,fitnessTracking,%d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10186FDB0);
      }
      int v7 = *(unsigned __int8 *)(a1 + 224);
      int v8 = *(unsigned __int8 *)(a1 + 110);
      __int16 v12 = 1024;
      int v13 = v7;
      __int16 v14 = 1024;
      int v15 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  0LL,  "coarse elevation src,enable,%d,elevationSpectator,%d,fitnessTracking,%d",  &v11,  20,  67109632);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierCompanion::toggleCoarseElevationSource(BOOL)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    if (a2)
    {
      if (*(_BYTE *)(a1 + 224))
      {
        if (*(_BYTE *)(a1 + 110))
        {
          [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:5 registrationInfo:0];
          return;
        }
      }

      else if (*(_BYTE *)(a1 + 110))
      {
        return;
      }
    }

    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:5];
  }

uint64_t sub_100B066C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 224LL))(a2, *(void *)(a1 + 32));
}

uint64_t sub_100B066E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 208LL))(a2, *(void *)(a1 + 32));
}

void sub_100B066F8(uint64_t a1, int a2)
{
  if (a2)
  {
    if (!*(_BYTE *)(a1 + 288) && sub_10039F854())
    {
      [*(id *)(a1 + 248) registerClient:*(void *)(a1 + 240) forNotification:1];
      *(_BYTE *)(a1 + 288) = 1;
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10186FD10);
      }
      uint64_t v3 = (os_log_s *)qword_1019346A8;
      if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "supported watch connected, phone subscribes to absolute altitude updates",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10186FD10);
        }
        LOWORD(v7[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "supported watch connected, phone subscribes to absolute altitude updates",  v7,  2,  v7[0]);
LABEL_22:
        int v6 = (uint8_t *)v4;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierCompanion::toggleBarometerCalibration(BOOL)",  "%s\n",  v4);
        if (v6 != buf) {
          free(v6);
        }
      }
    }
  }

  else if (*(_BYTE *)(a1 + 288))
  {
    [*(id *)(a1 + 248) unregisterClient:*(void *)(a1 + 240) forNotification:1];
    *(_BYTE *)(a1 + 288) = 0;
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10186FD10);
    }
    int v5 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "supported watch disconnected, phone unsubscribes from absolute altitude updates",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10186FD10);
      }
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "supported watch disconnected, phone unsubscribes from absolute altitude updates",  v7,  2,  v7[0]);
      goto LABEL_22;
    }
  }

void sub_100B06994(_BYTE *a1, uint64_t a2, int *a3, double *a4)
{
  int v6 = *a3;
  if (*a3 == 7)
  {
    if (!a1[169]) {
      return;
    }
    v24[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[1]);
    v24[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a4 + 4));
    v24[2] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a4 + 5));
    uint64_t v22 = 0LL;
    uint64_t v10 = +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v24, 3LL),  0LL,  &v22);
    if (v22)
    {
      if (qword_101934630 != -1) {
        dispatch_once(&qword_101934630, &stru_10186FD90);
      }
      int v11 = (os_log_s *)qword_101934638;
      if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning error serializing Odometer(Elevation) entry",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934630 != -1) {
          dispatch_once(&qword_101934630, &stru_10186FD90);
        }
        LOWORD(v21[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  0LL,  "#Warning error serializing Odometer(Elevation) entry",  v21,  2,  v21[0]);
        goto LABEL_34;
      }

      return;
    }

    int v15 = v10;
    double v16 = 120.0;
    uint64_t v17 = (uint64_t)a1;
    int v18 = 6;
LABEL_39:
    uint64_t v19 = 1LL;
    uint64_t v20 = 0LL;
LABEL_41:
    sub_10039FB50(v16, v17, v18, v15, 300LL, v19, 0LL, v20, 0, 0LL);
    return;
  }

  if (v6 != 5)
  {
    if (v6 != 4 || !a1[168]) {
      return;
    }
    v26[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *a4);
    v26[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[1]);
    v26[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[3]);
    v26[3] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[4]);
    v26[4] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[6]);
    v26[5] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[2]);
    v26[6] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[7]);
    v26[7] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[8]);
    v26[8] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[5]);
    uint64_t v22 = 0LL;
    int v7 = +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v26, 9LL),  0LL,  &v22);
    if (v22)
    {
      if (qword_101934630 != -1) {
        dispatch_once(&qword_101934630, &stru_10186FD90);
      }
      int v8 = (os_log_s *)qword_101934638;
      if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning error serializing Odometer(GPS) entry",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934630 != -1) {
          dispatch_once(&qword_101934630, &stru_10186FD90);
        }
        LOWORD(v21[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  0LL,  "#Warning error serializing Odometer(GPS) entry",  v21,  2,  v21[0]);
LABEL_34:
        __int16 v14 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierCompanion::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)",  "%s\n",  v9);
        if (v14 != buf) {
          free(v14);
        }
        return;
      }

      return;
    }

    int v15 = v7;
    double v16 = 120.0;
    uint64_t v17 = (uint64_t)a1;
    int v18 = 2;
    goto LABEL_39;
  }

  if (!a1[224])
  {
    sub_100B0649C((uint64_t)a1, 0);
    return;
  }

  v23[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *a4);
  v23[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a4 + 2));
  uint64_t v22 = 0LL;
  __int16 v12 = +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v23, 2LL),  0LL,  &v22);
  if (!v22)
  {
    int v15 = v12;
    double v16 = 180.0;
    uint64_t v17 = (uint64_t)a1;
    int v18 = 13;
    uint64_t v19 = 0LL;
    uint64_t v20 = 1LL;
    goto LABEL_41;
  }

  if (qword_101934630 != -1) {
    dispatch_once(&qword_101934630, &stru_10186FD90);
  }
  int v13 = (os_log_s *)qword_101934638;
  if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning error serializing Odometer(Coarse Elevation) entry",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934630 != -1) {
      dispatch_once(&qword_101934630, &stru_10186FD90);
    }
    LOWORD(v21[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  0LL,  "#Warning error serializing Odometer(Coarse Elevation) entry",  v21,  2,  v21[0]);
    goto LABEL_34;
  }

id sub_100B06F3C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:2];
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:4];
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:3];
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:7];
    *(_WORD *)(a1 + 168) = 0;
  }

  sub_100B0552C(a1);
  sub_100B055B8(a1);
  return sub_100B06FB4(a1);
}

id sub_100B06FB4(uint64_t a1)
{
  id result = sub_10039F854();
  if ((_DWORD)result && !*(_BYTE *)(a1 + 289))
  {
    if (*(_BYTE *)(a1 + 109))
    {
      id result = sub_10039FB50(120.0, a1, 23, 0LL, 300LL, 0LL, 0LL, 0LL, 0, 0LL);
      *(_BYTE *)(a1 + 289) = 1;
    }
  }

  return result;
}

void sub_100B07028(uint64_t a1)
{
  if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 192) > *(double *)(a1 + 184))
  {
    if (qword_1019346D0 != -1) {
      dispatch_once(&qword_1019346D0, &stru_10186FD50);
    }
    uint64_t v2 = (os_log_s *)qword_1019346D8;
    if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEBUG))
    {
      CFAbsoluteTime v3 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 192);
      *(_DWORD *)buf = 134217984;
      CFAbsoluteTime v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Time to the last received message from Watch is %lf. Lost connection to Watch.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346D0 != -1) {
        dispatch_once(&qword_1019346D0, &stru_10186FD50);
      }
      uint64_t v4 = qword_1019346D8;
      CFAbsoluteTime v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 192);
      int v8 = 134217984;
      CFAbsoluteTime v9 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  2LL,  "Time to the last received message from Watch is %lf. Lost connection to Watch.",  COERCE_DOUBLE(&v8));
      int v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierCompanion::handleStateSyncTimerExpiry()",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    sub_1003A00C0(a1, 0LL);
  }

id sub_100B0720C(id result, _DWORD *a2, __int128 *a3)
{
  if (*a2 == 1)
  {
    int v4 = 1;
    __int128 v3 = a3[1];
    __int128 v5 = *a3;
    __int128 v6 = v3;
    int v7 = *((_DWORD *)a3 + 8);
    return sub_10039FB50( 120.0,  (uint64_t)result,  18,  +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v4, 40LL),  300LL,  0LL,  0LL,  0LL,  0,  0LL);
  }

  return result;
}

void sub_100B072C4(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100B072F0(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B0731C(id a1)
{
  qword_1019346D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_100B07348(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100B07374(id a1)
{
  qword_101934638 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_100B073A0(id a1)
{
  qword_1019345B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

uint64_t sub_100B073CC()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199A938, (void *)&_mh_execute_header);
}

_DWORD *sub_100B07410(_DWORD *result, uint64_t a2)
{
  __int128 v3 = result;
  if (*(_BYTE *)(a2 + 1))
  {
    *result += *(_DWORD *)(a2 + 66);
  }

  else
  {
    int v4 = *(unsigned __int8 *)(a2 + 87);
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v6 = *(void *)(a2 + 58);
    uint64_t v7 = *(void *)(a2 + 10);
    HIDWORD(v18) = v7 == v6;
    if (v6) {
      BOOL v8 = v4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    double v9 = Current * 1000000.0;
    if (v8) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = v7 - v6;
    }
    unint64_t v11 = *((void *)v3 + 1);
    if (v11) {
      unint64_t v12 = (unint64_t)(v9 - (double)v11);
    }
    else {
      unint64_t v12 = 0LL;
    }
    float v13 = *(float *)(a2 + 70);
    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_10186FDF0);
    }
    __int16 v14 = (os_log_s *)qword_1019344A8;
    if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *v3;
      *(_DWORD *)buf = 67110656;
      int v44 = v4;
      __int16 v45 = 2048;
      double v46 = v13;
      __int16 v47 = 2048;
      uint64_t v48 = v10;
      __int16 v49 = 1024;
      int v50 = v15;
      __int16 v51 = 2048;
      unint64_t v52 = v12;
      __int16 v53 = 1024;
      BOOL v54 = v7 == v6;
      __int16 v55 = 2048;
      double v56 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[CLSensorControlMetricsLogger] faceDownFlag: %u, lastPocketProbability: %f, detectionLatency: %llu, numberOfEICQ ueriesSinceLastReport: %u, timeSinceLastStateChange: %llu, isAccelUpdateStale: %u, timestamp: %f",  buf,  0x3Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_10186FDF0);
      }
      int v16 = *v3;
      v30[0] = 67110656;
      v30[1] = v4;
      __int16 v31 = 2048;
      double v32 = v13;
      __int16 v33 = 2048;
      uint64_t v34 = v10;
      __int16 v35 = 1024;
      int v36 = v16;
      __int16 v37 = 2048;
      unint64_t v38 = v12;
      __int16 v39 = 1024;
      BOOL v40 = v7 == v6;
      __int16 v41 = 2048;
      double v42 = v9;
      LODWORD(v18) = 60;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  2LL,  "[CLSensorControlMetricsLogger] faceDownFlag: %u, lastPocketProbability: %f, detectionLatency: %llu , numberOfEICQueriesSinceLastReport: %u, timeSinceLastStateChange: %llu, isAccelUpdateStale: %u, timestamp: %f",  v30,  v18,  v19,  v20,  v21,  (_DWORD)v22,  v23);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorControlMetricsLogger::feedFaceDownMetrics(const CMMotionCoprocessorReply::FaceDown *)",  "%s\n",  v17);
    }

    uint64_t v19 = _NSConcreteStackBlock;
    uint64_t v20 = 3221225472LL;
    int v21 = sub_100B0773C;
    uint64_t v22 = &unk_10186FDD0;
    double v23 = *(double *)&v3;
    double v24 = v9;
    float v28 = v13;
    uint64_t v25 = a2;
    uint64_t v26 = v10;
    unint64_t v27 = v12;
    char v29 = BYTE4(v18);
    id result = (_DWORD *)AnalyticsSendEventLazy(@"com.apple.CoreMotion.SensorControlFaceDownMetrics", &v19);
    _DWORD *v3 = 0;
    *((void *)v3 + 1) = (unint64_t)v9;
  }

  return result;
}

NSDictionary *sub_100B0773C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  v5[0] = @"timestamp";
  v6[0] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  (unint64_t)*(double *)(a1 + 40));
  v5[1] = @"faceDownFlag";
  v6[1] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 48) + 87LL));
  v5[2] = @"lastPocketProbability";
  LODWORD(v3) = *(_DWORD *)(a1 + 72);
  v6[2] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v3);
  v5[3] = @"detectionLatency";
  v6[3] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 56));
  v5[4] = @"numberOfEICQueriesSinceLastReport";
  v6[4] = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", *v2);
  v5[5] = @"timeSinceLastStateChange";
  v6[5] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 64));
  v5[6] = @"isAccelUpdateStale";
  v6[6] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 76));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v6,  v5,  7LL);
}

void sub_100B07880(id a1)
{
  qword_1019344A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void *sub_100B078AC(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &off_10186FE20;
  a1[1] = a2;
  sub_10001A504((uint64_t)(a1 + 2), a3);
  return a1;
}

double sub_100B07904()
{
  return 0.0;
}

uint64_t sub_100B07910()
{
  return 0LL;
}

uint64_t sub_100B07918()
{
  return 0LL;
}

uint64_t sub_100B07920()
{
  return 0LL;
}

uint64_t sub_100B07928()
{
  return 0LL;
}

uint64_t sub_100B07930()
{
  return 0LL;
}

uint64_t sub_100B07944()
{
  return 0LL;
}

uint64_t sub_100B0794C()
{
  return 0LL;
}

uint64_t sub_100B07958()
{
  return 0LL;
}

uint64_t sub_100B0797C()
{
  return 0LL;
}

uint64_t sub_100B07984()
{
  return 0LL;
}

uint64_t sub_100B07994()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_100B0799C()
{
  return 0LL;
}

uint64_t sub_100B079A4()
{
  return 0LL;
}

uint64_t sub_100B079C8()
{
  return 0LL;
}

uint64_t sub_100B079D4()
{
  return 0LL;
}

uint64_t sub_100B079E0()
{
  return 0LL;
}

uint64_t sub_100B079E8()
{
  return 0LL;
}

uint64_t sub_100B07A00()
{
  return 0x7FFFFFFFLL;
}

void *sub_100B07A08(void *a1)
{
  *a1 = &off_10186FE20;
  uint64_t v2 = a1 + 2;
  double v3 = (void *)a1[5];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    double v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100B07A64(char *__p)
{
  *(void *)std::stringbuf::string_type __p = &off_10186FE20;
  uint64_t v2 = __p + 16;
  double v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    double v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void *sub_100B07AC0(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_101870008;
  a1[9] = off_1018700C0;
  sub_100B14CF0(a1 + 46, 0LL, 0LL);
  (*(void (**)(void *))(*a1 + 112LL))(a1);
  return a1;
}

void sub_100B07B64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B07B90(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  *unint64_t v12 = &off_101826EF8;
  *(void *)a1 = off_101870350;
  *(void *)(a1 + 72) = off_1018703F8;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_101870350;
  *(void *)(a1 + 72) = off_1018703F8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 240) = xmmword_10130F530;
  *(_DWORD *)(a1 + 256) = -1082130432;
  *(void *)(a1 + 2sub_10000AE14(v2 - 64) = 0xBFF0000000000000LL;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 272) = _Q0;
  *(_DWORD *)(a1 + 288) = 12000;
  *(void *)(a1 + 296) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 304));
  *(void *)(a1 + 304) = &off_101826EF8;
  uint64_t v18 = *(void *)(a1 + 112);
  uint64_t v34 = a1 + 112;
  (*(void (**)(void))(v18 + 16))();
  __int16 v36 = 256;
  if (a3)
  {
    *(void *)(a1 + 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v34 + 24LL))(v34);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
    uint64_t v33 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v19 = sub_1006E27E8();
  sub_100413284(v19, buf);
  uint64_t v20 = (int *)(a1 + 288);
  char v21 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 288));
  uint64_t v22 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  if ((v21 & 1) == 0) {
    int *v20 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101870438);
  }
  uint64_t v25 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *v20;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101870438);
    }
    int v29 = *v20;
    v37[0] = 67109120;
    v37[1] = v29;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v37);
    __int16 v31 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLCyclingFTPInput, D ataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

  int v27 = HIBYTE(v36);
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  if (v27)
  {
    if ((_BYTE)v36)
    {
      pthread_mutex_unlock(v35);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100B07F60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[37] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_1002D62D8(v26);
  sub_100D8A88C(a12);
  *unint64_t v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100B08004()
{
}

void *sub_100B0800C(void *a1)
{
  a1[9] = off_1018703F8;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_101870350;
  a1[37] = off_101826EC8;
  sub_1001B9C98(a1 + 38);
  sub_1002D62D8(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100B0808C(uint64_t a1)
{
  return sub_100B0800C((void *)(a1 - 72));
}

void sub_100B08094(void *a1)
{
  uint64_t v1 = sub_100B0800C(a1);
  operator delete(v1);
}

void sub_100B080A8(uint64_t a1)
{
  uint64_t v1 = sub_100B0800C((void *)(a1 - 72));
  operator delete(v1);
}

uint64_t sub_100B080C0(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v7 = a1 + 14;
  uint64_t v6 = a1[14];
  v16[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v6 + 16))(a1 + 14);
  __int16 v17 = 256;
  if (*(double *)(*(void *)(a2 + 8) - 16LL) == 1.79769313e308 && sub_100D8A92C(a1 + 9))
  {
    sub_1003C0454(a1[10]);
    sub_100B14CF8(a1 + 46, v16);
    BOOL v8 = (sqlite3_stmt *)sub_100019240(v16[0]);
    if (sub_1003B7480(v8, 1, a3 - *(double *)(*(void *)(a2 + 8) - 24LL)))
    {
      uint64_t v9 = a1[10];
      uint64_t v10 = (sqlite3_stmt *)sub_100019240(v16[0]);
      sub_1003BB2BC(v9, v10);
      uint64_t v11 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
    }

    else
    {
      uint64_t v11 = -1LL;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v12 = a1[10];
    else {
      uint64_t v13 = *(void *)(v12 + 88);
    }
    sub_1003C1EC0(v12, v13);
    uint64_t v14 = v16[0];
    v16[0] = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
  }

  else
  {
    uint64_t v11 = -1LL;
  }

  (*(void (**)(uint64_t *))(*v7 + 24))(v7);
  return v11;
}

void sub_100B081FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B08238(uint64_t *a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  return sub_100B080C0(a1, a2, Current);
}

uint64_t sub_100B08264(uint64_t a1, uint64_t a2)
{
  double v3 = (uint64_t *)(a1 - 72);
  double Current = CFAbsoluteTimeGetCurrent();
  return sub_100B080C0(v3, a2, Current);
}

uint64_t sub_100B08290(uint64_t a1)
{
  uint64_t v3 = v8;
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(v8);
  int v5 = sqlite3_step(v4);
  if (v5 == 100)
  {
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v3);
    uint64_t v1 = sqlite3_column_int(v6, 0);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (v5 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100B08330(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B08354(uint64_t a1)
{
  return sub_100B08290(a1 - 72);
}

uint64_t sub_100B08360(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v23[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v24 = 256;
  v23[0] = *(double *)(a2 + 8);
  if (sub_100D8AB44(v6, v23))
  {
    if (sub_100D8A92C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80LL))(a1, a2, 0LL);
    }

    else if (!*(_BYTE *)(a1 + 128))
    {
      uint64_t v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 288))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_1002D6E20(a1 + 176, 1);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101870438);
        }
        uint64_t v14 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Maximum number of entries exceeded, throwing out oldest entry.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101870438);
          }
          v22[0] = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Maximum number of entries exceeded, throwing out oldest entry.",  v22,  2);
          uint64_t v20 = (uint8_t *)v19;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(con st T &) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v19);
          if (v20 != buf) {
            free(v20);
          }
        }
      }

      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870458);
      }
      int v15 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Buffer was added to since db was inaccesible.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101870458);
        }
        v22[0] = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Buffer was added to since db was inaccesible.",  v22,  v21);
        uint64_t v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      __n128 v7 = sub_100B0B320(v12, a2);
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101870438);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      float v28 = "";
      __int16 v29 = 1026;
      int v30 = (int)v23[0];
      __int16 v31 = 2082;
      double v32 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CL database error, record contains invalid time, invalid time:%{public}d, name: %{public, location:escape_only}s}",  buf,  0x22u);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101870438);
      }
    }

    uint64_t v10 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      uint64_t v11 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      float v28 = "";
      __int16 v29 = 1026;
      int v30 = (int)v23[0];
      __int16 v31 = 2082;
      double v32 = v11;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CL database error, record contains invalid time",  "{msg%{public}.0s:CL database error, record contains invalid time, invalid time:%{public}d, name: %{public, location:escape_only}s}",  buf,  0x22u);
    }
  }

  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24LL))(v5, v7);
}

void sub_100B08858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_100B08884(uint64_t a1, char **a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v32[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v33 = 256;
  if (sub_100D8A92C(v6))
  {
    a2[1] = *a2;
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from CyclingFTPInputHistory ORDER BY start_time ASC", &v29);
    uint64_t v7 = v29;
    v32[0] = v29;
    sub_1003C0454(*(void *)(a1 + 80));
    *((void *)&v29 + 1) = 0xBFF0000000000000LL;
    __int128 v30 = xmmword_10130F530;
    *(_DWORD *)__int16 v31 = -1082130432;
    __asm { FMOV            V0.2D, #-1.0 }

    *(_OWORD *)&v31[8] = _Q0;
    *(void *)&v31[24] = 0xBFF0000000000000LL;
    while (!sub_100B08AD0(v32, (uint64_t)&v29))
    {
      unint64_t v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        uint64_t v16 = (v13 - *a2) >> 6;
        unint64_t v17 = v16 + 1;
        uint64_t v18 = v14 - (void)*a2;
        if (v18 >> 5 > v17) {
          unint64_t v17 = v18 >> 5;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19) {
          uint64_t v20 = (char *)sub_10001275C((uint64_t)(a2 + 2), v19);
        }
        else {
          uint64_t v20 = 0LL;
        }
        uint64_t v21 = &v20[64 * v16];
        *(_OWORD *)uint64_t v21 = v29;
        *((_OWORD *)v21 + 1) = v30;
        *((_OWORD *)v21 + 2) = *(_OWORD *)v31;
        *((_OWORD *)v21 + 3) = *(_OWORD *)&v31[16];
        double v23 = *a2;
        uint64_t v22 = a2[1];
        __int16 v24 = v21;
        if (v22 != *a2)
        {
          do
          {
            __int128 v25 = *((_OWORD *)v22 - 4);
            __int128 v26 = *((_OWORD *)v22 - 3);
            __int128 v27 = *((_OWORD *)v22 - 1);
            *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
            *((_OWORD *)v24 - 1) = v27;
            *((_OWORD *)v24 - 4) = v25;
            *((_OWORD *)v24 - 3) = v26;
            v24 -= 64;
            v22 -= 64;
          }

          while (v22 != v23);
          uint64_t v22 = *a2;
        }

        int v15 = v21 + 64;
        *a2 = v24;
        a2[1] = v21 + 64;
        a2[2] = &v20[64 * v19];
        if (v22) {
          operator delete(v22);
        }
      }

      else
      {
        *(_OWORD *)unint64_t v13 = v29;
        *((_OWORD *)v13 + 1) = v30;
        *((_OWORD *)v13 + 2) = *(_OWORD *)v31;
        *((_OWORD *)v13 + 3) = *(_OWORD *)&v31[16];
        int v15 = v13 + 64;
      }

      a2[1] = v15;
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
}

void sub_100B08A90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  sub_1011C52D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B08AD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int64(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
  float v9 = sqlite3_column_double(v8, 2);
  *(float *)(a2 + 16) = v9;
  uint64_t v10 = (sqlite3_stmt *)sub_100019240(*a1);
  float v11 = sqlite3_column_double(v10, 3);
  *(float *)(a2 + 20) = v11;
  uint64_t v12 = (sqlite3_stmt *)sub_100019240(*a1);
  float v13 = sqlite3_column_double(v12, 4);
  *(float *)(a2 + 24) = v13;
  unint64_t v14 = (sqlite3_stmt *)sub_100019240(*a1);
  float v15 = sqlite3_column_double(v14, 5);
  *(float *)(a2 + 28) = v15;
  uint64_t v16 = (sqlite3_stmt *)sub_100019240(*a1);
  float v17 = sqlite3_column_double(v16, 6);
  *(float *)(a2 + 32) = v17;
  uint64_t v18 = (sqlite3_stmt *)sub_100019240(*a1);
  double v19 = sqlite3_column_double(v18, 7);
  uint64_t result = 0LL;
  *(double *)(a2 + 40) = v19;
  return result;
}

uint64_t sub_100B08BD4(uint64_t a1, char **a2, double a3, double a4)
{
  uint64_t v9 = a1 + 112;
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v10 = a1 + 72;
  v39[1] = a1 + 112;
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 112);
  __int16 v40 = 256;
  if ((sub_100D8A92C(v10) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM CyclingFTPInputHistory WHERE start_time >= ? and start_time <= ? ORDER BY start_time ASC",  buf);
    uint64_t v11 = *(void *)buf;
    v39[0] = *(void *)buf;
    *(void *)&uint8_t buf[8] = 0xBFF0000000000000LL;
    __int128 v42 = xmmword_10130F530;
    *(_DWORD *)uint64_t v43 = -1082130432;
    __asm { FMOV            V0.2D, #-1.0 }

    *(_OWORD *)&v43[8] = _Q0;
    *(void *)&v43[24] = 0xBFF0000000000000LL;
    float v17 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sub_1003B7480(v17, 1, a3))
    {
      uint64_t v18 = (sqlite3_stmt *)sub_100019240(v11);
      if (sub_1003B7480(v18, 2, a4))
      {
        while (!sub_100B08AD0(v39, (uint64_t)buf))
        {
          double v19 = a2[1];
          unint64_t v20 = (unint64_t)a2[2];
          if ((unint64_t)v19 >= v20)
          {
            uint64_t v22 = (v19 - *a2) >> 6;
            unint64_t v23 = v22 + 1;
            uint64_t v24 = v20 - (void)*a2;
            if (v24 >> 5 > v23) {
              unint64_t v23 = v24 >> 5;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25) {
              __int128 v26 = (char *)sub_10001275C((uint64_t)(a2 + 2), v25);
            }
            else {
              __int128 v26 = 0LL;
            }
            __int128 v27 = &v26[64 * v22];
            *(_OWORD *)__int128 v27 = *(_OWORD *)buf;
            *((_OWORD *)v27 + 1) = v42;
            *((_OWORD *)v27 + 2) = *(_OWORD *)v43;
            *((_OWORD *)v27 + 3) = *(_OWORD *)&v43[16];
            __int128 v29 = *a2;
            float v28 = a2[1];
            __int128 v30 = v27;
            if (v28 != *a2)
            {
              do
              {
                __int128 v31 = *((_OWORD *)v28 - 4);
                __int128 v32 = *((_OWORD *)v28 - 3);
                __int128 v33 = *((_OWORD *)v28 - 1);
                *((_OWORD *)v30 - 2) = *((_OWORD *)v28 - 2);
                *((_OWORD *)v30 - 1) = v33;
                *((_OWORD *)v30 - 4) = v31;
                *((_OWORD *)v30 - 3) = v32;
                v30 -= 64;
                v28 -= 64;
              }

              while (v28 != v29);
              float v28 = *a2;
            }

            uint64_t v21 = v27 + 64;
            *a2 = v30;
            a2[1] = v27 + 64;
            a2[2] = &v26[64 * v25];
            if (v28) {
              operator delete(v28);
            }
          }

          else
          {
            *(_OWORD *)double v19 = *(_OWORD *)buf;
            *((_OWORD *)v19 + 1) = v42;
            *((_OWORD *)v19 + 2) = *(_OWORD *)v43;
            *((_OWORD *)v19 + 3) = *(_OWORD *)&v43[16];
            uint64_t v21 = v19 + 64;
          }

          a2[1] = v21;
        }
      }
    }

    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
    uint64_t v35 = 100LL;
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101870150);
    }
    uint64_t v34 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "CyclingFTPInputHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101870150);
      }
      LOWORD(v39[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "CyclingFTPInputHistory, DB not accessible",  v39,  2);
      unint64_t v38 = (uint8_t *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLCyclingFTPInputDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::vector<CLCyclingF TPInput> &) const",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }

    uint64_t v35 = 109LL;
  }

  (*(void (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
  return v35;
}

void sub_100B08F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100B08FC8(uint64_t *a1)
{
  uint64_t result = sub_1003C1048(a1[10]);
  if ((_DWORD)result)
  {
    sub_1003B59A0( a1[10],  "CyclingFTPInputHistory",  (const char **)&off_101870170,  (const std::string::value_type **)&off_10198F708,  0);
    uint64_t result = sub_1003BF158(a1[10], "DELETE FROM CyclingFTPInputHistory WHERE start_time < ?");
    a1[46] = result;
    a1[47] = v3;
  }

  return result;
}

uint64_t sub_100B09028(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM CyclingFTPInputHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    int v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_100B090BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B090DC(uint64_t a1)
{
  return sub_100B09028(a1 - 72);
}

void sub_100B090EC(uint64_t a1, uint64_t a2)
{
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO CyclingFTPInputHistory (start_time, hr, hr_confidence, vertical_speed, external_cadence, external_powe r, raw_gps_speed) VALUES (?, ?, ?, ?, ?, ?, ?)",  buf);
    uint64_t v4 = *(void *)buf;
    int v5 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v4);
    if (!sub_1003B7480(v6, 2, *(float *)(a2 + 16))
      || (uint64_t v7 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003B7480(v7, 3, *(float *)(a2 + 20)))
      || (uint64_t v8 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003B7480(v8, 4, *(float *)(a2 + 24)))
      || (uint64_t v9 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003B7480(v9, 5, *(float *)(a2 + 28)))
      || (uint64_t v10 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003B7480(v10, 6, *(float *)(a2 + 32)))
      || (uint64_t v11 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003B7480(v11, 7, *(double *)(a2 + 40)))
      || (uint64_t v12 = *(void *)(a1 + 80), v13 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003BB2BC(v12, v13)))
    {
LABEL_10:
      if (qword_1019347A0 != -1) {
        dispatch_once(&qword_1019347A0, &stru_101870320);
      }
      unint64_t v14 = (os_log_s *)qword_1019347A8;
      if (os_log_type_enabled((os_log_t)qword_1019347A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "CyclingFTPInputHistory, unable to insert record.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347A0 != -1) {
          dispatch_once(&qword_1019347A0, &stru_101870320);
        }
        LOWORD(v22) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347A8,  17LL,  "CyclingFTPInputHistory, unable to insert record.",  &v22,  2);
        uint64_t v21 = (char *)v20;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLCyclingFTPInputDb::insertRecordUL(const CLCyclingFTPInput &, BOOL)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }
    }

    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  else
  {
    if (qword_1019347A0 != -1) {
      dispatch_once(&qword_1019347A0, &stru_101870320);
    }
    float v15 = (os_log_s *)qword_1019347A8;
    if (os_log_type_enabled((os_log_t)qword_1019347A8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a2 + 8);
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "CyclingFTPInputHistory, database isn't available for entry with startTime, %{public}f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347A0 != -1) {
        dispatch_once(&qword_1019347A0, &stru_101870320);
      }
      uint64_t v17 = *(void *)(a2 + 8);
      int v22 = 134349056;
      uint64_t v23 = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347A8,  16LL,  "CyclingFTPInputHistory, database isn't available for entry with startTime, %{public}f",  &v22,  12);
      double v19 = (char *)v18;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLCyclingFTPInputDb::insertRecordUL(const CLCyclingFTPInput &, BOOL)",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }
  }

void sub_100B094E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B09510(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120LL))(a1, a2, 0LL);
}

uint64_t sub_100B09520()
{
  return 0LL;
}

uint64_t sub_100B09528(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v7;
  uint64_t v8 = v7;
  uint64_t v5 = sub_100B08AD0(&v8, a2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return v5;
}

void sub_100B095A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B095C8(void *a1, void **a2, double a3, double a4)
{
  uint64_t v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v53);
  if ((SHIBYTE(v54) & 0x80000000) == 0)
  {
    if (HIBYTE(v54)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_10125F16C(v10);
    goto LABEL_41;
  }

  uint64_t v4 = (std::stringbuf *)v53[1];
  operator delete(v53[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v53);
  uint64_t v11 = sub_10000CF44(&v54, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if ((SBYTE7(v49) & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((SBYTE7(v49) & 0x80u) == 0) {
    uint64_t v13 = BYTE7(v49);
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  unint64_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if (SBYTE7(v49) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1[10];
  uint64_t v4 = &v55;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v55);
  if ((SBYTE7(v49) & 0x80u) == 0) {
    uint64_t v16 = (char *)__p;
  }
  else {
    uint64_t v16 = (char *)__p[0];
  }
  sub_1003C0D54(v15, v16, &v51);
  uint64_t v5 = v51;
  uint64_t v51 = 0LL;
  uint64_t v52 = v5;
  if (SBYTE7(v49) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    uint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      __p[1] = (void *)0xBFF0000000000000LL;
      __int128 v49 = xmmword_10130F530;
      *(_DWORD *)int v50 = -1082130432;
      __asm { FMOV            V0.2D, #-1.0 }

      *(_OWORD *)&v50[8] = _Q0;
      *(void *)&v50[24] = 0xBFF0000000000000LL;
      while (1)
      {
        uint64_t v24 = sub_1001BA11C((uint64_t)a1, &v52, (uint64_t)__p);
        if ((_DWORD)v24) {
          break;
        }
        unint64_t v25 = a2[1];
        unint64_t v26 = (unint64_t)a2[2];
        if ((unint64_t)v25 >= v26)
        {
          uint64_t v31 = ((char *)v25 - (_BYTE *)*a2) >> 6;
          unint64_t v32 = v31 + 1;
          uint64_t v33 = v26 - (void)*a2;
          if (v33 >> 5 > v32) {
            unint64_t v32 = v33 >> 5;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34) {
            uint64_t v35 = (char *)sub_10001275C((uint64_t)(a2 + 2), v34);
          }
          else {
            uint64_t v35 = 0LL;
          }
          __int16 v36 = &v35[64 * v31];
          __int128 v37 = *(_OWORD *)__p;
          __int128 v38 = v49;
          __int128 v39 = *(_OWORD *)&v50[16];
          *((_OWORD *)v36 + 2) = *(_OWORD *)v50;
          *((_OWORD *)v36 + 3) = v39;
          *(_OWORD *)__int16 v36 = v37;
          *((_OWORD *)v36 + 1) = v38;
          __int16 v41 = (char *)*a2;
          __int16 v40 = (char *)a2[1];
          __int128 v42 = v36;
          if (v40 != *a2)
          {
            do
            {
              __int128 v43 = *((_OWORD *)v40 - 4);
              __int128 v44 = *((_OWORD *)v40 - 3);
              __int128 v45 = *((_OWORD *)v40 - 1);
              *((_OWORD *)v42 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v42 - 1) = v45;
              *((_OWORD *)v42 - 4) = v43;
              *((_OWORD *)v42 - 3) = v44;
              v42 -= 64;
              v40 -= 64;
            }

            while (v40 != v41);
            __int16 v40 = (char *)*a2;
          }

          __int128 v30 = v36 + 64;
          *a2 = v42;
          a2[1] = v36 + 64;
          a2[2] = &v35[64 * v34];
          if (v40) {
            operator delete(v40);
          }
        }

        else
        {
          __int128 v27 = *(_OWORD *)__p;
          __int128 v28 = v49;
          __int128 v29 = *(_OWORD *)&v50[16];
          v25[2] = *(_OWORD *)v50;
          v25[3] = v29;
          _OWORD *v25 = v27;
          v25[1] = v28;
          __int128 v30 = v25 + 4;
        }

        a2[1] = v30;
      }

      uint64_t v5 = v52;
      goto LABEL_43;
    }
  }

void sub_100B09914( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100B0997C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v38 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101870438);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)__int128 v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      __int128 v44 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101870438);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)buf = 134349056;
        *(void *)__int128 v42 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101870438);
        }
        uint64_t v34 = *(void *)(a1 + 216);
        int v39 = 134349056;
        uint64_t v40 = v34;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v39,  12);
        __int16 v36 = (uint8_t *)v35;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAcc essible() [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v35);
        if (v36 != buf) {
          free(v36);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101870438);
    }
    uint64_t v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)__int128 v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      __int128 v44 = v11;
      __int16 v45 = 2049;
      uint64_t v46 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    uint64_t v13 = *(void *)(a1 + 184);
    uint64_t v14 = *(void *)(a1 + 192);
    uint64_t v15 = (void *)(v13 + 8LL * (*(void *)(a1 + 208) >> 6));
    if (v14 == v13) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = *v15 + ((*(void *)(a1 + 208) & 0x3FLL) << 6);
    }
    while (1)
    {
      if (v14 == v13)
      {
        unint64_t v22 = 0LL;
      }

      else
      {
        unint64_t v21 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v22 = *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) + ((v21 & 0x3F) << 6);
      }

      if (v16 == v22) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870458);
      }
      uint64_t v23 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101870458);
        }
        LOWORD(v39) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v39,  v37);
        unint64_t v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAcc essible() [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v16, 1LL);
      v16 += 64LL;
      if (v16 - *v15 == 4096)
      {
        uint64_t v24 = v15[1];
        ++v15;
        uint64_t v16 = v24;
      }

      uint64_t v13 = *(void *)(a1 + 184);
      uint64_t v14 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101870438);
    }
    uint64_t v17 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v18 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)__int128 v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      __int128 v44 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101870438);
      }
    }

    double v19 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v20 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)__int128 v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      __int128 v44 = v20;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  __int128 v27 = *(void ***)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v30 = *(void *)(a1 + 192);
      __int128 v27 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v27;
      unint64_t v29 = v30 - (void)v27;
    }

    while (v29 > 0x10);
  }

  if (v29 >> 3 == 1)
  {
    uint64_t v31 = 32LL;
  }

  else
  {
    if (v29 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v31 = 64LL;
  }

  *(void *)(a1 + 208) = v31;
LABEL_61:
  unint64_t v32 = *(void **)(a1 + 144);
  if (v32)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100B0A084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_100B0A0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  __int128 v4 = *(_OWORD *)(a3 + 16);
  __int128 v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_100B0A0CC(uint64_t a1)
{
  return sub_100B0997C(a1 - 72);
}

void sub_100B0A0D4(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100B0A100(id a1)
{
  qword_1019347A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

uint64_t sub_100B0A12C(uint64_t *a1, char **a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v47);
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    if (HIBYTE(v48)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10125F2D8(v4);
LABEL_44:
    sub_100007008();
  }

  __int16 v41 = v47[1];
  operator delete(v47[0]);
  if (!v41) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v47);
    uint64_t v6 = sub_10000CF44(&v48, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v43) & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((SBYTE7(v43) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v43);
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if (SBYTE7(v43) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v49);
    if ((SBYTE7(v43) & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    sub_1003C0D54(v10, v11, &v45);
    uint64_t v12 = v45;
    uint64_t v45 = 0LL;
    uint64_t v46 = v12;
    if (SBYTE7(v43) < 0) {
      operator delete(__p[0]);
    }
    sub_1003C0454(a1[10]);
    __p[1] = (void *)0xBFF0000000000000LL;
    __int128 v43 = xmmword_10130F530;
    *(_DWORD *)__int128 v44 = -1082130432;
    __asm { FMOV            V0.2D, #-1.0 }

    *(_OWORD *)&v44[8] = _Q0;
    *(void *)&v44[24] = 0xBFF0000000000000LL;
    while (!sub_1001BA11C((uint64_t)a1, &v46, (uint64_t)__p))
    {
      uint64_t v18 = a2[1];
      unint64_t v19 = (unint64_t)a2[2];
      if ((unint64_t)v18 >= v19)
      {
        uint64_t v24 = (v18 - *a2) >> 6;
        unint64_t v25 = v24 + 1;
        uint64_t v26 = v19 - (void)*a2;
        if (v26 >> 5 > v25) {
          unint64_t v25 = v26 >> 5;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27) {
          uint64_t v28 = (char *)sub_10001275C((uint64_t)(a2 + 2), v27);
        }
        else {
          uint64_t v28 = 0LL;
        }
        unint64_t v29 = &v28[64 * v24];
        __int128 v30 = *(_OWORD *)__p;
        __int128 v31 = v43;
        __int128 v32 = *(_OWORD *)&v44[16];
        *((_OWORD *)v29 + 2) = *(_OWORD *)v44;
        *((_OWORD *)v29 + 3) = v32;
        *(_OWORD *)unint64_t v29 = v30;
        *((_OWORD *)v29 + 1) = v31;
        uint64_t v34 = *a2;
        uint64_t v33 = a2[1];
        uint64_t v35 = v29;
        if (v33 != *a2)
        {
          do
          {
            __int128 v36 = *((_OWORD *)v33 - 4);
            __int128 v37 = *((_OWORD *)v33 - 3);
            __int128 v38 = *((_OWORD *)v33 - 1);
            *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
            *((_OWORD *)v35 - 1) = v38;
            *((_OWORD *)v35 - 4) = v36;
            *((_OWORD *)v35 - 3) = v37;
            v35 -= 64;
            v33 -= 64;
          }

          while (v33 != v34);
          uint64_t v33 = *a2;
        }

        uint64_t v23 = v29 + 64;
        *a2 = v35;
        a2[1] = v29 + 64;
        a2[2] = &v28[64 * v27];
        if (v33) {
          operator delete(v33);
        }
      }

      else
      {
        __int128 v20 = *(_OWORD *)__p;
        __int128 v21 = v43;
        __int128 v22 = *(_OWORD *)&v44[16];
        *((_OWORD *)v18 + 2) = *(_OWORD *)v44;
        *((_OWORD *)v18 + 3) = v22;
        *(_OWORD *)uint64_t v18 = v20;
        *((_OWORD *)v18 + 1) = v21;
        uint64_t v23 = v18 + 64;
      }

      a2[1] = v23;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v39 = v46;
    uint64_t v46 = 0LL;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
    }
    *(void **)((char *)v47
    uint64_t v48 = v40;
    std::streambuf::~streambuf(&v49);
    return std::ios::~ios(&v50);
  }

  return result;
}

void sub_100B0A434( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  sub_1011F8850((uint64_t)&a23);
  _Unwind_Resume(a1);
}

id *sub_100B0A49C(uint64_t a1, __int128 *a2, char a3)
{
  v45[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v45[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v45);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  double v40 = -1.0;
  __int128 v41 = xmmword_10130F530;
  int v42 = -1082130432;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v43 = _Q0;
  unint64_t v44 = 0xBFF0000000000000LL;
  int v11 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104LL))(a1, v39);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v11)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101870438);
      }
      unint64_t v19 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101870438);
        }
        LOWORD(v46) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v46,  2);
        __int128 v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndSto reRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      goto LABEL_43;
    }

    double v12 = *((double *)a2 + 1);
    double v13 = v40;
    double v14 = v12 - v40;
    if (v12 - v40 < 0.0) {
      double v14 = -(v12 - v40);
    }
    if (v14 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101870438);
      }
      uint64_t v15 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *((void *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        double v51 = v40;
        __int16 v52 = 2050;
        uint64_t v53 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101870438);
        }
        uint64_t v30 = *((void *)a2 + 1);
        int v46 = 134349312;
        double v47 = v40;
        __int16 v48 = 2050;
        uint64_t v49 = v30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v46,  22);
        __int128 v32 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndSto reRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v31);
        if (v32 != buf) {
          free(v32);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v12 = *((double *)a2 + 1);
      double v13 = v40;
    }

    if (v12 < v13)
    {
      if (v13 - v12 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101870438);
        }
        uint64_t v17 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v18 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          double v51 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101870438);
          }
          double v33 = *((double *)a2 + 1);
          int v46 = 134217984;
          double v47 = v33;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v46));
          uint64_t v35 = (uint8_t *)v34;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndS toreRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v34);
          if (v35 != buf) {
            free(v35);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v22 = v12 - v13;
      double v23 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v38 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_101870438);
        double v23 = v38;
      }

      double v24 = v22 - v23;
      unint64_t v25 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v51 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101870438);
        }
        int v46 = 134217984;
        double v47 = v24;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v46));
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndSto reRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v24);
    }

    (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, v39, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100B0AC08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100B0AC34(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    __int128 v20 = (_Unwind_Exception *)sub_10125F444(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  unint64_t v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    uint64_t v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v11 = &__p;
    }
    else {
      int v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100B0AE94(void *a1, double a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10125F5B0(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    uint64_t v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v11 = &__p;
    }
    else {
      int v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100B0B0CC(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10125F71C(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  __int128 v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100B0B2F4(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_100B0B320(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B0B3E0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) + ((v7 & 0x3F) << 6);
  __n128 result = *(__n128 *)a2;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  __int128 v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_100B0B3B4(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100B0B3E0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x40;
  unint64_t v4 = v2 - 64;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int128 v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100B0B6A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B0B6F4()
{
  if (qword_10199A950 != -1) {
    dispatch_once(&qword_10199A950, &stru_101870478);
  }
  return qword_1019A1B98;
}

void sub_100B0B734(id a1)
{
  id v1 = +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:]( &OBJC_CLASS___CLIntersiloUniverse,  "newSharedVendorUniverseWithSilo:",  sub_1006E282C());
  unint64_t v2 = operator new(0x58uLL);
  sub_100B0B798((uint64_t)v2, (uint64_t)v1);
  qword_1019A1B98 = (uint64_t)v2;
}

void sub_100B0B784(_Unwind_Exception *a1)
{
}

uint64_t sub_100B0B798(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1018704A8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = a1 + 24;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 32) = a1 + 24;
  *(_WORD *)(a1 + 56) = 0;
  sub_1010DDBC0((void *)(a1 + 64), "");
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100B0B868;
  block[3] = &unk_10181D3D0;
  block[4] = a1;
  dispatch_async(global_queue, block);
  return a1;
}

void sub_100B0B83C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_1001B4C40(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100B0B868(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100EE2800((uint64_t)sub_100B0B954, v1, *(void **)(v1 + 8), &v8);
  [*(id *)(v8 + 16) register:*(void *)(v8 + 8) forNotification:0 registrationInfo:0];
  char v2 = sub_100B0B9C8();
  uint64_t v3 = v8;
  uint64_t v8 = 0LL;
  uint64_t v4 = sub_1006E27E8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100B0BA68;
  v6[3] = &unk_101830518;
  v6[4] = v1;
  v6[5] = v3;
  char v7 = v2;
  sub_1006E28B8(v4, (uint64_t)v6);
  uint64_t result = v8;
  uint64_t v8 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100B0B928(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B0B954(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (!*a2)
  {
    char v5 = sub_100B0B9C8();
    uint64_t v6 = sub_1006E27E8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100B0CE1C;
    v7[3] = &unk_101833458;
    v7[4] = a4;
    char v8 = v5;
    sub_1006E28B8(v6, (uint64_t)v7);
  }

uint64_t sub_100B0B9C8()
{
  unsigned int v0 = sub_1002A6FD4(v5, (uint64_t)@"GestureServiceEnabled", &v7);
  uint64_t v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v7) {
    return v0;
  }
  else {
    return 0LL;
  }
}

void sub_100B0BA54(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B0BA68(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100B0BAA8(v3, *(unsigned __int8 *)(a1 + 48));
}

void sub_100B0BAA8(uint64_t a1, int a2)
{
  if (qword_101934530 != -1) {
    dispatch_once(&qword_101934530, &stru_101870510);
  }
  uint64_t v4 = (os_log_s *)qword_101934538;
  if (os_log_type_enabled((os_log_t)qword_101934538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "Disabling";
    if (a2) {
      uint64_t v5 = "Enabling";
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s ear gesture", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934530 != -1) {
      dispatch_once(&qword_101934530, &stru_101870510);
    }
    uint64_t v6 = "Disabling";
    if (a2) {
      uint64_t v6 = "Enabling";
    }
    int v9 = 136446210;
    uint64_t v10 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934538,  0LL,  "%{public}s ear gesture",  &v9,  12);
    char v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEarGestureClientManager::setEnabledInternal(BOOL)", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  *(_BYTE *)(a1 + 56) = a2;
  sub_100B0BDE4(a1);
}

uint64_t sub_100B0BC90(uint64_t a1)
{
  *(void *)a1 = off_1018704A8;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_1001B4C40((void *)(a1 + 24));
  return a1;
}

void sub_100B0BCF0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B0BC90(a1);
  operator delete(v1);
}

void sub_100B0BD04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1006E27E8();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100B0BD80;
  v9[3] = &unk_1018704C0;
  v9[5] = a1;
  v9[6] = a2;
  int v10 = a3;
  v9[4] = a4;
  sub_1006E28B8(v8, (uint64_t)v9);
}

void sub_100B0BD80(uint64_t a1)
{
}

void sub_100B0BD94(void *a1, uint64_t a2, int a3, void *a4)
{
  if (a4) {
    sub_100B0C624(a1, a2, a3, a4);
  }
  sub_100B0BDE4((uint64_t)a1);
}

void sub_100B0BDE4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 57) && *(void *)(a1 + 40))
  {
    if (sub_100B0C17C(a1))
    {
      uint64_t v2 = sub_10097E870();
      sub_10097F7E0(v2, a1 + 64);
    }

    if (!*(void *)(a1 + 16))
    {
      if (qword_101934530 != -1) {
        dispatch_once(&qword_101934530, &stru_101870510);
      }
      uint64_t v3 = (os_log_s *)qword_101934538;
      if (os_log_type_enabled((os_log_t)qword_101934538, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Registering for ear gesture notifications",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934530 != -1) {
          dispatch_once(&qword_101934530, &stru_101870510);
        }
        v14[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934538,  0LL,  "Registering for ear gesture notifications",  v14,  2);
        uint64_t v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEarGestureClientManager::refreshDispatcherIfNecessaryInternal()",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      uint64_t v4 = operator new(0x20uLL);
      *uint64_t v4 = off_1018A2210;
      *uint64_t v4 = &off_101870540;
      v4[1] = 0LL;
      v4[2] = sub_100B0CAA8;
      v4[3] = a1;
      *(void *)(a1 + 16) = v4;
      uint64_t v5 = sub_10097E870();
      sub_1006DCB40(v5, 0, *(void *)(a1 + 16), -1.0);
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v6 = (uint64_t *)(a1 + 16);
    if (v7)
    {
      if (qword_101934530 != -1) {
        dispatch_once(&qword_101934530, &stru_101870510);
      }
      uint64_t v8 = (os_log_s *)qword_101934538;
      if (os_log_type_enabled((os_log_t)qword_101934538, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Unregistering for ear gesture notifications",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934530 != -1) {
          dispatch_once(&qword_101934530, &stru_101870510);
        }
        v14[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934538,  0LL,  "Unregistering for ear gesture notifications",  v14,  2);
        uint64_t v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEarGestureClientManager::refreshDispatcherIfNecessaryInternal()",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }

      uint64_t v9 = sub_10097E870();
      sub_1006DD2A0(v9, 0, *v6);
      if (*v6) {
        (*(void (**)(uint64_t))(*(void *)*v6 + 8LL))(*v6);
      }
      uint64_t *v6 = 0LL;
    }
  }

void sub_100B0C160(_Unwind_Exception *a1)
{
}

uint64_t sub_100B0C17C(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  if (*(char *)(a1 + 87) < 0)
  {
    sub_1010DD48C(__p, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)v2;
    uint64_t v14 = *(void *)(a1 + 80);
  }

  if ((*(_DWORD *)(*(void *)(a1 + 32) + 16LL) & 0xFFFFFFFE) == 2) {
    sub_1010DDBC0(&v11, "EarGesture_Prototype_Msgs_1");
  }
  else {
    sub_1010DDBC0(&v11, "EarGesture_Prototypes_Siri_1");
  }
  *(_OWORD *)uint64_t v2 = v11;
  *(void *)(v2 + 16) = v12;
  int v3 = SHIBYTE(v14);
  if (v14 >= 0) {
    uint64_t v4 = (void *)HIBYTE(v14);
  }
  else {
    uint64_t v4 = __p[1];
  }
  if (v4)
  {
    if (*(char *)(a1 + 87) < 0)
    {
      uint64_t v2 = *(void *)(a1 + 64);
      unint64_t v5 = *(void *)(a1 + 72);
    }

    else
    {
      unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
    }

    uint64_t v6 = v14 >= 0 ? __p : (void **)__p[0];
    size_t v7 = (unint64_t)v4 >= v5 ? v5 : (size_t)v4;
    if (!memcmp((const void *)v2, v6, v7) && v4 == (void *)v5)
    {
      uint64_t v9 = 0LL;
      if ((v3 & 0x80000000) == 0) {
        return v9;
      }
      goto LABEL_27;
    }
  }

  uint64_t v9 = 1LL;
  if (v3 < 0) {
LABEL_27:
  }
    operator delete(__p[0]);
  return v9;
}

void sub_100B0C2AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B0C2CC(void *a1, uint64_t a2)
{
  if (a1[5])
  {
    for (i = (uint64_t *)a1[4]; i != a1 + 3; i = (uint64_t *)i[1])
    {
      if (i[3] == a2)
      {
        if (qword_101934530 != -1) {
          dispatch_once(&qword_101934530, &stru_101870510);
        }
        uint64_t v8 = (os_log_s *)qword_101934538;
        if (os_log_type_enabled((os_log_t)qword_101934538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134283521;
          uint64_t v15 = a2;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Removing client %{private}p", buf, 0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934530 != -1) {
            dispatch_once(&qword_101934530, &stru_101870510);
          }
          int v12 = 134283521;
          uint64_t v13 = a2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934538,  0LL,  "Removing client %{private}p",  &v12,  12);
          __int128 v11 = (uint8_t *)v10;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEarGestureClientManager::removeClientInternal(const void *)",  "%s\n",  v10);
          if (v11 != buf) {
            free(v11);
          }
        }

        _Block_release((const void *)i[4]);
        uint64_t v9 = *i;
        *(void *)(v9 + 8) = i[1];
        *(void *)i[1] = v9;
        --a1[5];
        operator delete(i);
        return;
      }
    }

    if (qword_101934530 != -1) {
      dispatch_once(&qword_101934530, &stru_101870510);
    }
    unint64_t v5 = (os_log_s *)qword_101934538;
    if (os_log_type_enabled((os_log_t)qword_101934538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Unknown client instance %{private}p", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934530 != -1) {
        dispatch_once(&qword_101934530, &stru_101870510);
      }
      int v12 = 134283521;
      uint64_t v13 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934538,  2LL,  "Unknown client instance %{private}p",  &v12,  12);
      size_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEarGestureClientManager::removeClientInternal(const void *)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

_DWORD *sub_100B0C624(void *a1, uint64_t a2, int a3, void *aBlock)
{
  size_t v7 = _Block_copy(aBlock);
  if (qword_101934530 != -1) {
    dispatch_once(&qword_101934530, &stru_101870510);
  }
  uint64_t v8 = (os_log_s *)qword_101934538;
  if (os_log_type_enabled((os_log_t)qword_101934538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134283777;
    uint64_t v21 = a2;
    __int16 v22 = 1026;
    int v23 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Adding client %{private}p with priority %{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934530 != -1) {
      dispatch_once(&qword_101934530, &stru_101870510);
    }
    int v16 = 134283777;
    uint64_t v17 = a2;
    __int16 v18 = 1026;
    int v19 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934538,  0LL,  "Adding client %{private}p with priority %{public}d",  &v16,  18);
    uint64_t v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEarGestureClientManager::addClientInternal(const void *, int, CLEarGestureClientManager::Handler)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  uint64_t v9 = a1 + 3;
  for (i = (uint64_t *)a1[4]; ; i = (uint64_t *)i[1])
  {
    if (i == v9)
    {
      uint64_t result = operator new(0x28uLL);
      result[4] = a3;
      *((void *)result + 3) = a2;
      *((void *)result + 4) = v7;
      uint64_t v12 = *v9;
      *(void *)(v12 + 8) = result;
      *uint64_t v9 = (uint64_t)result;
      *(void *)uint64_t result = v12;
      *((void *)result + 1) = v9;
      goto LABEL_12;
    }

    if (*((_DWORD *)i + 4) <= a3) {
      break;
    }
  }

  uint64_t result = operator new(0x28uLL);
  result[4] = a3;
  *((void *)result + 3) = a2;
  *((void *)result + 4) = v7;
  uint64_t v13 = *i;
  *(void *)(v13 + 8) = result;
  *(void *)uint64_t result = v13;
  uint64_t *i = (uint64_t)result;
  *((void *)result + 1) = i;
LABEL_12:
  ++a1[5];
  return result;
}

void sub_100B0C87C(uint64_t a1)
{
  *(_BYTE *)(a1 + 57) = 0;
  uint64_t v2 = *(int *)(*(void *)(a1 + 32) + 16LL);
  if ((int)v2 > 1 || *(_BYTE *)(a1 + 56))
  {
    *(_BYTE *)(a1 + 57) = 1;
    if (qword_101934530 != -1) {
      dispatch_once(&qword_101934530, &stru_101870510);
    }
    int v3 = (os_log_s *)qword_101934538;
    if (os_log_type_enabled((os_log_t)qword_101934538, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 57);
      else {
        unint64_t v5 = off_101870580[v2];
      }
      *(_DWORD *)buf = 67240450;
      int v14 = v4;
      __int16 v15 = 2082;
      int v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Ear Gesture EnabledForTopClient: %{public}d (%{public}s)",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934530 != -1) {
        dispatch_once(&qword_101934530, &stru_101870510);
      }
      int v6 = *(unsigned __int8 *)(a1 + 57);
      else {
        size_t v7 = off_101870580[v2];
      }
      v10[0] = 67240450;
      v10[1] = v6;
      __int16 v11 = 2082;
      uint64_t v12 = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934538,  0LL,  "Ear Gesture EnabledForTopClient: %{public}d (%{public}s)",  v10,  18);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEarGestureClientManager::updateEnabledStatusForTopClient()",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

void sub_100B0CAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B0CB0C;
  v5[3] = &unk_101830538;
  v5[4] = a2;
  v5[5] = a1;
  sub_1006E28B8(v4, (uint64_t)v5);
}

void sub_100B0CB0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 40))
  {
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v13 = *(void *)(v3 + 16);
    uint64_t v4 = *(void *)(v3 + 24);
    unint64_t v5 = _Block_copy(*(const void **)(v3 + 32));
    int v6 = *(__int128 **)(a1 + 40);
    int v7 = *((_DWORD *)v6 + 4);
    __int128 v25 = *v6;
    int v26 = v7;
    else {
      uint64_t v8 = off_101870580[(int)v13];
    }
    sub_1009810FC((uint64_t)+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8), 1LL);
    if (qword_101934530 != -1) {
      dispatch_once(&qword_101934530, &stru_101870510);
    }
    uint64_t v9 = (os_log_s *)qword_101934538;
    if (os_log_type_enabled((os_log_t)qword_101934538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134283779;
      uint64_t v22 = v4;
      __int16 v23 = 2081;
      uint64_t v24 = &v25;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Dispatching ear gesture to instance %{private}p from prototype %{private}s",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934530 != -1) {
        dispatch_once(&qword_101934530, &stru_101870510);
      }
      int v17 = 134283779;
      uint64_t v18 = v4;
      __int16 v19 = 2081;
      int64_t v20 = &v25;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934538,  0LL,  "Dispatching ear gesture to instance %{private}p from prototype %{private}s",  &v17,  22);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLEarGestureClientManager::onEarGesture(const CLEarGestureNotifier::NotificationData *, void *)_block_invoke",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    dispatch_queue_global_t global_queue = dispatch_get_global_queue(2LL, 0LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100B0CDA4;
    block[3] = &unk_1018704E0;
    block[4] = v13;
    void block[5] = v4;
    block[6] = v5;
    __int128 v15 = v25;
    int v16 = v26;
    dispatch_async(global_queue, block);
  }

void sub_100B0CDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 72);
  __int128 v5 = *(_OWORD *)(a1 + 56);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v4 + 16))(v4, &v5, a3);
  _Block_release(*(const void **)(a1 + 48));
}

void sub_100B0CE1C(uint64_t a1)
{
}

void sub_100B0CE2C(id a1)
{
  qword_101934538 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

uint64_t sub_100B0CE58(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018705B0;
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 20) = 0x3F80000000000000LL;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + sub_10000AE14(v2 - 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1LL;
  v4[0] = xmmword_1013497E4;
  v4[1] = unk_1013497F4;
  int v5 = 973279855;
  sub_100957E9C(a1 + 28, (uint64_t)v4);
  return a1;
}

BOOL sub_100B0CED8(uint64_t a1)
{
  *(_BYTE *)(a1 + 10) = 0;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 20) = 0x3F80000000000000LL;
  v3[0] = xmmword_1013497E4;
  v3[1] = unk_1013497F4;
  int v4 = 973279855;
  BOOL result = sub_100957E9C(a1 + 28, (uint64_t)v3);
  *(_BYTE *)(a1 + 8) = 0;
  *(void *)(a1 + sub_10000AE14(v2 - 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1LL;
  return result;
}

void sub_100B0CF48(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_10199A960);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10199A960))
  {
    dword_10199A958 = 1060439283;
    __cxa_guard_release(&qword_10199A960);
  }

  uint64_t v3 = *(void *)(a1 + 56);
  unsigned int v4 = *(unsigned __int16 *)(v3 + 10);
  if (*(_DWORD *)(v3 + 12) == v4)
  {
    if (*(_BYTE *)(v3 + 417))
    {
      BOOL v5 = !sub_100809410(v3);
      uint64_t v3 = *(void *)(a1 + 56);
      if (v5)
      {
        uint64_t v20 = 0LL;
        float v6 = *(float *)(v3 + 216);
        float v7 = *(float *)(v3 + 220);
        float v8 = *(float *)(v3 + 224);
        *(float *)buf = v6;
        float v46 = v7;
        *(float *)uint64_t v47 = v8;
        float v21 = 0.0;
        do
        {
          float v21 = v21 + (float)(*(float *)&buf[v20] * *(float *)&buf[v20]);
          v20 += 4LL;
        }

        while (v20 != 12);
        if (sqrtf(v21) > 0.00000011921)
        {
          uint64_t v22 = 0LL;
          float v23 = 0.0;
          do
          {
            float v23 = v23 + (float)(*(float *)&buf[v22] * *(float *)&buf[v22]);
            v22 += 4LL;
          }

          while (v22 != 12);
          float v24 = sqrtf(v23);
          float v6 = v6 / v24;
          float v7 = v7 / v24;
          float v8 = v8 / v24;
        }

        goto LABEL_13;
      }

      unsigned int v4 = *(unsigned __int16 *)(v3 + 10);
    }

    float v6 = sub_10040B3D0((unsigned __int16 *)(v3 + 8), 0LL, v4);
    uint64_t v9 = 0LL;
    *(float *)buf = v6;
    float v46 = v7;
    *(float *)uint64_t v47 = v8;
    float v10 = 0.0;
    do
    {
      float v10 = v10 + (float)(*(float *)&buf[v9] * *(float *)&buf[v9]);
      v9 += 4LL;
    }

    while (v9 != 12);
    if (sqrtf(v10) > 0.00000011921)
    {
      uint64_t v11 = 0LL;
      float v12 = 0.0;
      do
      {
        float v12 = v12 + (float)(*(float *)&buf[v11] * *(float *)&buf[v11]);
        v11 += 4LL;
      }

      while (v11 != 12);
      float v13 = sqrtf(v12);
      float v6 = v6 / v13;
      float v7 = v7 / v13;
      float v8 = v8 / v13;
    }

    BOOL v5 = 0;
LABEL_13:
    *(void *)&double v33 = 1065353216LL;
    LODWORD(v34) = 0;
    if (fabsf(v6) > *(float *)&dword_10199A958)
    {
      *(float *)&double v33 = (float)(v8 * -0.0) - v7;
      *((float *)&v33 + 1) = v6 + (float)(v8 * 0.0);
      *(float *)&double v34 = (float)(v7 * -0.0) + (float)(v6 * 0.0);
    }

    *(_BYTE *)(a1 + 10) = sub_100B0D35C(a1, (float *)&v33, (uint64_t)&v33, 0.04);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018706A0);
    }
    int v14 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v15) = *(unsigned __int8 *)(a1 + 10);
      double v16 = *(float *)(a1 + 12);
      double v17 = *(float *)(a1 + 16);
      double v18 = *(float *)(a1 + 20);
      double v19 = *(float *)(a1 + 24);
      *(_DWORD *)buf = 67110400;
      float v46 = v15;
      *(_WORD *)uint64_t v47 = 2048;
      *(double *)&v47[2] = v16;
      __int16 v48 = 2048;
      double v49 = v17;
      __int16 v50 = 2048;
      double v51 = v18;
      __int16 v52 = 2048;
      double v53 = v19;
      __int16 v54 = 1024;
      BOOL v55 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "initialized down,%u,q.x,%f,q.y,%f,q.z,%f,q.w,%f, withAvgGrav, %d",  buf,  0x36u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018706A0);
      }
      int v25 = *(unsigned __int8 *)(a1 + 10);
      double v26 = *(float *)(a1 + 12);
      double v27 = *(float *)(a1 + 16);
      double v28 = *(float *)(a1 + 20);
      double v29 = *(float *)(a1 + 24);
      LODWORD(v35) = 67110400;
      HIDWORD(v35) = v25;
      *(_WORD *)uint64_t v36 = 2048;
      *(double *)&v36[2] = v26;
      __int16 v37 = 2048;
      double v38 = v27;
      __int16 v39 = 2048;
      double v40 = v28;
      __int16 v41 = 2048;
      double v42 = v29;
      __int16 v43 = 1024;
      BOOL v44 = v5;
      LODWORD(v32) = 54;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "initialized down,%u,q.x,%f,q.y,%f,q.z,%f,q.w,%f, withAvgGrav, %d",  &v35,  v32,  v33,  v34,  v35,  *(_DWORD *)v36);
      __int128 v31 = (uint8_t *)v30;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CMSensorFusionMekfPhone::initializeAttitude()", "%s\n", v30);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

BOOL sub_100B0D35C(uint64_t a1, float *a2, uint64_t a3, float32_t a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  if (!*(_BYTE *)(v7 + 417))
  {
    if (!*(_BYTE *)(a1 + 10)) {
      goto LABEL_7;
    }
LABEL_6:
    float v19 = sub_100833470((float *)(a1 + 12));
LABEL_8:
    float v16 = v19;
    float v17 = v20;
    float v18 = v21;
    *(float *)__int16 v48 = v19;
    goto LABEL_9;
  }

  BOOL v8 = sub_100809410(v7);
  if (*(_BYTE *)(a1 + 10)) {
    goto LABEL_6;
  }
  BOOL v15 = v8;
  uint64_t v7 = *(void *)(a1 + 56);
  if (v15)
  {
LABEL_7:
    float v19 = sub_10040B3D0((unsigned __int16 *)(v7 + 8), 0LL, *(unsigned __int16 *)(v7 + 10));
    goto LABEL_8;
  }

  float v16 = *(float *)(v7 + 216);
  float v17 = *(float *)(v7 + 220);
  float v18 = *(float *)(v7 + 224);
  *(float *)__int16 v48 = v16;
LABEL_9:
  uint64_t v22 = 0LL;
  *(float *)&v48[1] = v17;
  *(float *)&v48[2] = v18;
  float v23 = 0.0;
  do
  {
    float v23 = v23 + (float)(*(float *)&v48[v22] * *(float *)&v48[v22]);
    ++v22;
  }

  while (v22 != 3);
  float v24 = sqrtf(v23);
  float v25 = fabsf(v24 + -1.0);
  if (v25 <= 1.0)
  {
    *(float32_t *)&double v28 = a4;
    *((float *)&v28 + 1) = (float)(v25 / v24) * (float)(v25 / v24);
    __asm { FMOV            V1.2S, #1.0 }

    int8x8_t v51 = vbsl_s8( (int8x8_t)vcgt_f32((float32x2_t)0x3C3295EA3D23D70ALL, *(float32x2_t *)&v28),  (int8x8_t)0x42B77C7A41C80000LL,  (int8x8_t)vdiv_f32(_D1, *(float32x2_t *)&v28));
    v47.i64[0] = 0LL;
    v47.i64[1] = 0x3F80000000000000LL;
    LODWORD(v28) = *(_DWORD *)(a3 + 8);
    BOOL v27 = sub_100833764( (float *)&v51,  &v47,  (uint64_t)&v49,  *a2,  a2[1],  a2[2],  v16,  v17,  v18,  v28,  v14,  v9,  v10,  v11,  v12,  v13,  *(void *)a3,  *(float *)&v28);
    if (v27)
    {
      uint64_t v34 = a1 + 28;
      if (!sub_100957E9C(v34, (uint64_t)&v49))
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018706A0);
        }
        double v35 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "invalid initial covariance !(P > 0), using default",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_1018706A0);
          }
          v46[0] = 0;
          LODWORD(v44) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "invalid initial covariance !(P > 0), using default",  v46,  v44);
          __int16 v43 = (uint8_t *)v42;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)",  "%s\n",  v42);
          if (v43 != buf) {
            free(v43);
          }
        }

        int v54 = 973279855;
        *(_OWORD *)buf = xmmword_1013497E4;
        __int128 v53 = unk_1013497F4;
        sub_100957E9C(v34, (uint64_t)buf);
      }
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018706A0);
      }
      uint64_t v36 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "initializeState northAndGravity failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018706A0);
        }
        v46[0] = 0;
        LODWORD(v44) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "initializeState northAndGravity failed",  v46,  v44);
        __int16 v41 = (uint8_t *)v40;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)",  "%s\n",  v40);
        if (v41 != buf) {
          free(v41);
        }
      }
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018706A0);
    }
    double v26 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "initializeState MaxInitialDiffUnity failed,magnitude,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018706A0);
      }
      int v49 = 134217984;
      double v50 = v24;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "initializeState MaxInitialDiffUnity failed,magnitude,%f",  COERCE_DOUBLE(&v49));
      __int16 v39 = (uint8_t *)v38;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)",  "%s\n",  v38);
      if (v39 != buf) {
        free(v39);
      }
    }

    return 0LL;
  }

  return v27;
}

void sub_100B0D900(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(_WORD *)(v1 + 10))
  {
    sub_100958238((unsigned __int16 *)(v1 + 8));
    sub_100833470((float *)(a1 + 12));
  }

double sub_100B0D970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v14 = *(void *)a2;
  __int32 v15 = *(_DWORD *)(a2 + 8);
  do
  {
    *(float *)((char *)&v14 + v6) = -*(float *)((char *)&v14 + v6);
    v6 += 4LL;
  }

  while (v6 != 12);
  v13.i64[0] = v14;
  v13.i32[2] = v15;
  sub_1008095A8(v13.f32, (uint64_t)&v14);
  *(float *)(a1 + sub_10000AE14(v2 - 64) = sub_1002B8A2C((uint64_t)&v14, (float *)(a1 + 64));
  *(_DWORD *)(a1 + 68) = v7;
  *(_DWORD *)(a1 + 72) = v8;
  sub_1009585F4(a1 + 28, (uint64_t)&v14, a3);
  *(double *)v9.i64 = sub_10083365C(&v13, (float *)a2);
  uint64_t v10 = (float32x4_t *)(a1 + 12);
  double result = sub_1008333F0((uint64_t)&v13, v10->f32, &v12, v9);
  if (v10 != &v12)
  {
    double result = *(double *)v12.i64;
    *uint64_t v10 = v12;
  }

  return result;
}

void sub_100B0DA48(void *a1, int a2, unint64_t a3)
{
  if ((*(unsigned int (**)(void *))(*a1 + 64LL))(a1))
  {
    unint64_t v6 = *(void *)(a1[7] + 408LL);
    BOOL v7 = a3 >= v6;
    unint64_t v8 = a3 - v6;
    if (v8 != 0 && v7)
    {
      float v9 = (double)v8 * 0.000001;
      if (v9 > 0.0)
      {
        if (a2)
        {
          *(int32x2_t *)buf = vdup_n_s32(0x31ABCC77u);
          int v16 = 833342583;
          uint64_t v13 = 0LL;
          int v14 = 0;
          sub_100B0D970((uint64_t)a1, (uint64_t)&v13, (uint64_t)buf);
        }

        else
        {
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_1018706A0);
          }
          uint64_t v10 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "invalid quiescentState kInMotion, ignoring quiescent",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_1018706A0);
            }
            LOWORD(v13) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "invalid quiescentState kInMotion, ignoring quiescent",  &v13,  2);
            float32x4_t v12 = (uint8_t *)v11;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CMSensorFusionMekfPhone::feedQuiescent(CMDeviceMotionInputs::QuiescentState, uint64_t)",  "%s\n",  v11);
            if (v12 != buf) {
              free(v12);
            }
          }
        }
      }
    }
  }

void sub_100B0DC48(uint64_t a1, float32x2_t *a2, unint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64LL))(a1))
  {
    uint64_t v6 = *(void *)(a1 + 56);
    unint64_t v7 = *(void *)(v6 + 408);
    BOOL v8 = a3 >= v7;
    unint64_t v9 = a3 - v7;
    if (v9 != 0 && v8)
    {
      float v10 = (double)v9 * 0.000001;
      if (v10 > 0.0)
      {
        float32x2_t v11 = vsub_f32(*a2, *(float32x2_t *)(v6 + 444));
        float v12 = a2[1].f32[0] - *(float *)(v6 + 452);
        float32x2_t v43 = v11;
        float v44 = v12;
        float v13 = vaddv_f32(vmul_f32(v11, v11));
        float v14 = v12 * v12;
        uint64_t v41 = 0LL;
        int v42 = 0;
        float v38 = (double)v9 * 0.000001;
        if (*(_BYTE *)(a1 + 9))
        {
          unint64_t v15 = 0LL;
          float32x2_t v45 = vmul_f32(v11, (float32x2_t)vdup_n_s32(0x3D23D70Au));
          float v46 = v12 * 0.04;
          do
          {
            int v16 = (float *)sub_1002BA24C((uint64_t)&v45, v15);
            float v17 = fminf(fmaxf(*v16 * *v16, 0.0027416), 9.8696);
            *(float *)sub_1002BA24C((uint64_t)&v41, v15++) = v17;
          }

          while (v15 != 3);
          *(_BYTE *)(a1 + 9) = 0;
          float v10 = v38;
        }

        unint64_t v18 = 0LL;
        float v19 = v13 + v14;
        float v20 = v10 * v10;
        float v21 = (float)(v10 * 0.0017) * (float)(v10 * 0.0017);
        float v22 = (float)(v10 * 17.453) * (float)(v10 * 17.453);
        do
        {
          float v23 = (float)(v20 * sub_1002B8AF0(*(void *)(a1 + 56) + 420LL, v18)) + (float)(v38 * 0.000000010966);
          float v24 = sub_1002B8AF0((uint64_t)&v43, v18);
          float v25 = v23 + (float)((float)((float)(v24 * 0.00033) * v38) * (float)((float)(v24 * 0.00033) * v38));
          float v26 = sub_1002B8AF0((uint64_t)&v43, v18);
          float v27 = v25 + (float)((float)(v19 - (float)(v26 * v26)) * v21);
          float v28 = sub_1002B8AF0((uint64_t)&v43, v18);
          if (v28 <= 0.0) {
            float v29 = -v28;
          }
          else {
            float v29 = v28;
          }
          BOOL v30 = v29 <= sub_100B10038();
          float v31 = 0.0;
          if (!v30) {
            float v31 = v22;
          }
          float v32 = *(float *)sub_1002BA24C((uint64_t)&v41, v18) + (float)(v27 + v31);
          *(float *)sub_1002BA24C((uint64_t)&v45, v18++) = v32;
        }

        while (v18 != 3);
        uint64_t v33 = *(void *)(a1 + 56);
        float v34 = (float)((float)((float)(*(float *)(v33 + 464) + a2[1].f32[0]) * 0.5) - *(float *)(v33 + 452)) * v38;
        float32x2_t v39 = vmul_n_f32( vsub_f32( vmul_f32(vadd_f32(*(float32x2_t *)(v33 + 456), *a2), (float32x2_t)0x3F0000003F000000LL),  *(float32x2_t *)(v33 + 444)),  v38);
        float v40 = v34;
        sub_100B0D970(a1, (uint64_t)&v39, (uint64_t)&v45);
        uint64_t v35 = 0LL;
        if (a2->f32[0] <= 0.0) {
          float v36 = -a2->f32[0];
        }
        else {
          float v36 = a2->f32[0];
        }
        do
        {
          float v37 = a2->f32[v35 + 1];
          if (v37 <= 0.0) {
            float v37 = -v37;
          }
          if (v37 > v36) {
            float v36 = v37;
          }
          ++v35;
        }

        while (v35 != 2);
        if (v36 > sub_100B10038()) {
          *(void *)(a1 + 80) = 1LL;
        }
      }
    }
  }

uint64_t sub_100B0DF34(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if ((*(_BYTE *)(v3 + 820) || *(_DWORD *)(v3 + 276) == *(unsigned __int16 *)(v3 + 274))
    && *(_DWORD *)(v3 + 12) == *(unsigned __int16 *)(v3 + 10))
  {
    return sub_100B0DF6C(a1, a2, a3);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100B0DF6C(uint64_t a1, uint64_t a2, float *a3)
{
  int v34 = v6;
  int v35 = v7;
  if (v5 <= 0.0) {
    float v8 = -v5;
  }
  else {
    float v8 = v5;
  }
  for (uint64_t i = 4LL; i != 12; i += 4LL)
  {
    float v10 = *(float *)((char *)&v33 + i);
    if (v10 <= 0.0) {
      float v10 = -v10;
    }
    if (v10 > v8) {
      float v8 = v10;
    }
  }

  float v11 = sub_10040B3D0( (unsigned __int16 *)(*(void *)(a1 + 56) + 8LL),  0LL,  *(unsigned __int16 *)(*(void *)(a1 + 56) + 10LL));
  uint64_t v12 = 0LL;
  float v33 = v11;
  int v34 = v13;
  int v35 = v14;
  float v15 = 0.0;
  do
  {
    float v15 = v15 + (float)(*(float *)((char *)&v33 + v12) * *(float *)((char *)&v33 + v12));
    v12 += 4LL;
  }

  while (v12 != 12);
  float v16 = sqrtf(v8);
  float v17 = sqrtf(v15) + -1.0;
  uint64_t v18 = *(void *)(a1 + 56);
  float v19 = 0.0;
  if (*(_BYTE *)(v18 + 820))
  {
    float v20 = 0.0;
  }

  else
  {
    float v20 = sub_100809508(*(void *)(a1 + 56));
    uint64_t v18 = *(void *)(a1 + 56);
  }

  float v21 = fabsf(v17);
  float v22 = sub_100B0E76C(flt_101349808, flt_101349814, 3LL, v16);
  float v23 = sub_10040B3D0((unsigned __int16 *)(v18 + 8), 0LL, *(unsigned __int16 *)(v18 + 10));
  uint64_t v24 = 0LL;
  float v33 = v23;
  int v34 = v25;
  int v35 = v26;
  do
  {
    float v19 = v19 + (float)(*(float *)((char *)&v33 + v24) * *(float *)((char *)&v33 + v24));
    v24 += 4LL;
  }

  while (v24 != 12);
  float v27 = sub_100B0E76C(flt_101349820, flt_10134983C, 7LL, sqrtf(v19) + -1.0);
  BOOL v28 = v16 >= 0.1;
  if (v21 >= 0.12) {
    BOOL v28 = 1;
  }
  int v29 = v20 >= 0.05 || v28;
  if ((v29 & 1) == 0)
  {
    float v30 = sub_100B0E76C(flt_101349858, flt_101349864, 3LL, v20);
    if (v22 >= v27) {
      float v31 = v27;
    }
    else {
      float v31 = v22;
    }
    if (v31 < v30) {
      float v30 = v31;
    }
    *a3 = v30 * v30;
  }

  return v29 ^ 1u;
}

uint64_t sub_100B0E16C(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a1[1].i8[2])
  {
    (*(void (**)(float32x2_t *))(*(void *)a1 + 160LL))(a1);
    return 0LL;
  }

  float32x2_t v4 = a1[7];
  int v5 = *(unsigned __int8 *)(*(void *)&v4 + 820LL);
  if (a1[1].i8[0]) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    int v5 = 0;
    a1[10] = (float32x2_t)1LL;
    a1[1].i8[1] = 1;
  }

  a1[1].i8[0] = v5 != 0;
  unint64_t v7 = (unint64_t)a1[10];
  if (v7)
  {
    float v8 = 1.0 / (float)v7;
    if (v8 < 0.001)
    {
      unint64_t v7 = 999LL;
      a1[10] = (float32x2_t)999LL;
      float v8 = 0.001;
    }
  }

  else
  {
    float v8 = 1.0;
  }

  if (*(_BYTE *)(*(void *)&v4 + 240LL))
  {
    float32_t v10 = (float)((float)(1.0 - v8) * a1[9].f32[0]) + (float)(v8 * *(float *)(*(void *)&v4 + 236LL));
    a1[8] = vadd_f32(vmul_n_f32(a1[8], 1.0 - v8), vmul_n_f32(*(float32x2_t *)(*(void *)&v4 + 228LL), v8));
    a1[9].f32[0] = v10;
    a1[10] = (float32x2_t)(v7 + 1);
  }

  float v40 = v8;
  float v42 = 0.0;
  char v11 = sub_100B0DF34((uint64_t)a1, a3, &v42);
  float32x2_t v12 = a1[7];
  if ((v11 & 1) == 0 && !*(_BYTE *)(*(void *)&v12 + 820LL))
  {
    if (*(_BYTE *)(*(void *)&v12 + 240LL))
    {
      float v22 = (float)(v40 / 0.001) * 0.00030462;
      float v26 = 0.0;
      for (uint64_t i = 16LL; i != 19; ++i)
        float v26 = v26 + (float)(a1->f32[i] * a1->f32[i]);
      float v28 = sqrtf(v26);
      float v29 = v28 + -1.0;
      float v30 = acosf(1.0 / (float)(v29 + 1.0));
      uint64_t v31 = 0LL;
      float v32 = v30 * v30;
      if (v22 <= v32) {
        float v22 = v32;
      }
      float v34 = a1[8].f32[0];
      float v33 = a1[8].f32[1];
      float v35 = a1[9].f32[0];
      unint64_t v43 = __PAIR64__(LODWORD(v33), LODWORD(v34));
      float v44 = v35;
      float v36 = 0.0;
      do
      {
        float v36 = v36 + (float)(*(float *)((char *)&v43 + v31) * *(float *)((char *)&v43 + v31));
        v31 += 4LL;
      }

      while (v31 != 12);
      if (sqrtf(v36) > 0.00000011921)
      {
        uint64_t v37 = 0LL;
        float v38 = 0.0;
        do
        {
          float v38 = v38 + (float)(*(float *)((char *)&v43 + v37) * *(float *)((char *)&v43 + v37));
          v37 += 4LL;
        }

        while (v37 != 12);
        float v39 = sqrtf(v38);
        float v34 = v34 / v39;
        float v33 = v33 / v39;
        float v35 = v35 / v39;
      }

      unint64_t v43 = __PAIR64__(LODWORD(v33), LODWORD(v34));
      float v23 = (float *)&a1[1] + 1;
      float v44 = v35;
      goto LABEL_28;
    }

    return 0LL;
  }

  uint64_t v13 = sub_100B0E49C((unsigned __int16 *)(*(void *)&v12 + 8LL), 7uLL);
  uint64_t v14 = 0LL;
  __int32 v16 = *(_DWORD *)v13;
  float v15 = *(float *)(v13 + 4);
  float v17 = *(float *)(v13 + 8);
  LODWORD(v43) = *(_DWORD *)v13;
  *((float *)&v43 + 1) = v15;
  float v44 = v17;
  float v18 = 0.0;
  do
  {
    float v18 = v18 + (float)(*(float *)((char *)&v43 + v14) * *(float *)((char *)&v43 + v14));
    v14 += 4LL;
  }

  while (v14 != 12);
  if (sqrtf(v18) > 0.00000011921)
  {
    uint64_t v19 = 0LL;
    float v20 = 0.0;
    do
    {
      float v20 = v20 + (float)(*(float *)((char *)&v43 + v19) * *(float *)((char *)&v43 + v19));
      v19 += 4LL;
    }

    while (v19 != 12);
    float v21 = sqrtf(v20);
    *(float *)&__int32 v16 = *(float *)&v16 / v21;
    float v15 = v15 / v21;
    float v17 = v17 / v21;
  }

  unint64_t v43 = __PAIR64__(LODWORD(v15), v16);
  float v44 = v17;
  if (*(_BYTE *)(*(void *)&a1[7] + 820LL)) {
    float v22 = 0.1;
  }
  else {
    float v22 = v42;
  }
  float v23 = (float *)&a1[1] + 1;
LABEL_28:
  v41[0] = sub_100833470(v23);
  v41[1] = v24;
  v41[2] = v25;
  sub_100B0E660((uint64_t)a1, (float32x2_t *)&v43, (uint64_t)v41, v22);
  return 1LL;
}

uint64_t sub_100B0E49C(unsigned __int16 *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018706A0);
    }
    int v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v11 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, li ne 45,out of buffer range %zu.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018706A0);
      }
      int v8 = 134217984;
      unint64_t v9 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, li ne 45,out of buffer range %zu.",  (size_t)&v8);
      unint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Element &CMVectorBufferBase<float, 3>::operator[](const size_t) const [T = float, N = 3]",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return sub_10040B624(a1, a2);
}

void sub_100B0E660(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4)
{
  float v5 = *(float *)(a3 + 8);
  float v6 = a2[1].f32[0] - v5;
  float32x2_t v7 = *(float32x2_t *)a3;
  float32x2_t v31 = vsub_f32(*a2, *(float32x2_t *)a3);
  float v32 = v6;
  float32x2_t v8 = *(float32x2_t *)(a3 + 4);
  v25[0] = 0;
  *(float *)&v25[1] = v5;
  float32x2_t v26 = vneg_f32(v8);
  int v27 = 0;
  float32x2_t v28 = v7;
  float v29 = -v7.f32[0];
  int v30 = 0;
  *(float *)int v24 = a4;
  *(float *)&v24[1] = a4;
  *(float *)&v24[2] = a4;
  sub_100959178((float *)(a1 + 28), (uint64_t)v25, (uint64_t)v24, (uint64_t)&v31);
  float v10 = v9;
  float v12 = v11;
  float v14 = v13;
  float v15 = (float32x4_t *)(a1 + 12);
  float v16 = sub_100833470(v15->f32);
  float v19 = (float)((float)(v17 * v14) + (float)(v12 * v18)) + (float)(v10 * v16);
  v23[0] = v10 - (float)(v16 * v19);
  v23[1] = v12 - (float)(v18 * v19);
  void v23[2] = v14 - (float)(v17 * v19);
  *(double *)v20.i64 = sub_10083365C(&v22, v23);
  sub_1008333F0((uint64_t)&v22, v15->f32, &v21, v20);
  if (v15 != &v21) {
    *float v15 = v21;
  }
}

float sub_100B0E76C(float *a1, float *a2, uint64_t a3, float a4)
{
  if (*a1 >= a4) {
    return *a2;
  }
  uint64_t v4 = a3 - 1;
  if (a1[a3 - 1] <= a4) {
    return a2[v4];
  }
  if (a3 == 1) {
    return *a2;
  }
  float v5 = a1 + 1;
  for (uint64_t i = a2; ; ++i)
  {
    float v7 = *(v5 - 1);
    if (v7 <= a4)
    {
      float v8 = *v5;
      if (*v5 >= a4) {
        break;
      }
    }

    ++v5;
    if (!--v4) {
      return *a2;
    }
  }

  float v10 = v8 - v7;
  if ((float)(v8 - v7) <= 0.0)
  {
    float v11 = *i;
    float v12 = 0.0;
  }

  else
  {
    float v11 = *i;
    float v12 = (float)(i[1] - *i) / v10;
  }

  return v11 + (float)(v12 * (float)(a4 - v7));
}

uint64_t sub_100B0E7FC(uint64_t a1)
{
  return a1 + 12;
}

uint64_t sub_100B0E804(uint64_t a1)
{
  return *(void *)(a1 + 56) + 432LL;
}

BOOL sub_100B0E810(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  return *(_BYTE *)(v1 + 416) && *(void *)(v1 + 408) && *(_BYTE *)(a1 + 10) != 0;
}

void sub_100B0E83C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100B0E868(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t result = sub_100C6AAF0(a1, a2, a3, a4, a5);
  *(void *)uint64_t result = off_1018706D0;
  *(_WORD *)(result + 41) = 256;
  return result;
}

uint64_t sub_100B0E890(uint64_t a1)
{
  *(void *)a1 = off_1018706D0;
  if (sub_1006E3930())
  {
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_101870720);
    }
    unsigned __int8 v2 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 138543362;
      uint64_t v33 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Service client is going away: %{public}@. Unregistering for MagicMount updates.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_101870720);
      }
      uint64_t v11 = *(void *)(a1 + 24);
      int v30 = 138543362;
      uint64_t v31 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  0LL,  "Service client is going away: %{public}@. Unregistering for MagicMount updates.",  &v30,  12);
      float v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMagicMountSubscription::~CLMagicMountSubscription()",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    if (*(_BYTE *)(a1 + 41))
    {
      *(_BYTE *)(a1 + 41) = 0;
      uint64_t v4 = sub_1006E3930();
      sub_1006E3A78(v4, *(_BYTE *)(a1 + 41));
      float v5 = (_BYTE *)sub_100AED3C8();
      float v6 = *(void **)(a1 + 24);
      if (v6)
      {
        [v6 clientName];
      }

      else
      {
        uint64_t v29 = 0LL;
        *(_OWORD *)std::stringbuf::string_type __p = 0u;
        __int128 v28 = 0u;
        __int128 v25 = 0u;
        *(_OWORD *)float32x2_t v26 = 0u;
        __int128 v23 = 0u;
        *(_OWORD *)int v24 = 0u;
        *(_OWORD *)float32x4_t v21 = 0u;
        *(_OWORD *)float32x4_t v22 = 0u;
        *(_OWORD *)float v19 = 0u;
        __int128 v20 = 0u;
        *(_OWORD *)float v18 = 0u;
      }

      sub_100AED744(v5, (uint64_t)v18, 0);
      if (SHIBYTE(v28) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v26[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(v24[1]);
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(v22[1]);
      }
      if (SHIBYTE(v22[0]) < 0) {
        operator delete(v21[0]);
      }
      if (SHIBYTE(v20) < 0) {
        operator delete(v19[1]);
      }
      if (SHIBYTE(v19[0]) < 0) {
        operator delete(v18[0]);
      }
    }

    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_101870720);
    }
    float v7 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(unsigned __int8 *)(a1 + 42);
      *(_DWORD *)buf = 67240192;
      LODWORD(v33) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "fAPWake is %{public}d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_101870720);
      }
      int v14 = *(unsigned __int8 *)(a1 + 42);
      int v30 = 67240192;
      LODWORD(v31) = v14;
      LODWORD(v17) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  2LL,  "fAPWake is %{public}d",  &v30,  v17);
      float v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMagicMountSubscription::~CLMagicMountSubscription()",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    if (!*(_BYTE *)(a1 + 42))
    {
      *(_BYTE *)(a1 + 42) = 1;
      uint64_t v9 = sub_1006E3930();
      sub_1006E4990(v9, *(_BYTE *)(a1 + 42));
    }
  }

  sub_100C6AB50(a1);
  return a1;
}

void sub_100B0EC9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100B0ECAC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B0E890(a1);
  operator delete(v1);
}

void *sub_100B0ECC0@<X0>(uint64_t a1@<X8>)
{
  v11[0] = &off_101870750;
  v11[1] = sub_100B0EF28;
  v11[2] = 0LL;
  float v12 = v11;
  sub_1010DDBC0(v13, "kCLConnectionMessageMagicMountServiceRequest");
  sub_10089F48C((uint64_t)&v14, (uint64_t)v11);
  v9[0] = &off_101870750;
  v9[1] = sub_100B0F438;
  v9[2] = 0LL;
  float v10 = v9;
  sub_1010DDBC0(v15, "kCLConnectionMessageMagicMountAPWakesAllowed");
  sub_10089F48C((uint64_t)v16, (uint64_t)v9);
  sub_100B0FC58(a1, (unsigned __int8 *)v13, 2LL);
  for (uint64_t i = 0LL; i != -14; i -= 7LL)
  {
    uint64_t v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      uint64_t v3 = &v16[i * 8];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0) {
      operator delete((void *)v15[i]);
    }
  }

  float v5 = v10;
  if (v10 == v9)
  {
    uint64_t v6 = 4LL;
    float v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v10)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  uint64_t result = v12;
  if (v12 == v11)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v11;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  else if (v12)
  {
    uint64_t v8 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  return result;
}

void sub_100B0EE58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  for (uint64_t i = 56LL; i != -56; i -= 56LL)
    sub_10026E430(v17 + i);
  __int128 v20 = a13;
  if (a13 == &a10)
  {
    uint64_t v21 = 4LL;
    __int128 v20 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_8;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_8:
  float32x4_t v22 = a17;
  if (a17 == &a14)
  {
    uint64_t v23 = 4LL;
    float32x4_t v22 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_13;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

uint64_t sub_100B0EF28(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  uint64_t v5 = CMMagicMountServiceEnable;
  if ([Dictionary objectForKey:CMMagicMountServiceEnable]
    && (id v6 = [Dictionary objectForKeyedSubscript:v5]) != 0)
  {
    float v7 = v6;
    if (sub_1006E3930())
    {
      unsigned int v8 = [v7 BOOLValue];
      if ([Dictionary objectForKey:v5])
      {
        if (qword_101934550 != -1) {
          dispatch_once(&qword_101934550, &stru_101870720);
        }
        uint64_t v9 = (os_log_s *)qword_101934558;
        if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = *(void *)(a1 + 24);
          *(_DWORD *)buf = 67240450;
          *(_DWORD *)&uint8_t buf[4] = v8;
          __int16 v43 = 2114;
          uint64_t v44 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Incoming MagicMount service request: %{public}d, client: %{public}@",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934550 != -1) {
            dispatch_once(&qword_101934550, &stru_101870720);
          }
          uint64_t v20 = *(void *)(a1 + 24);
          v37[0] = 67240450;
          v37[1] = v8;
          __int16 v38 = 2114;
          uint64_t v39 = v20;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  1LL,  "Incoming MagicMount service request: %{public}d, client: %{public}@",  v37,  18);
          float32x4_t v22 = (uint8_t *)v21;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagicMountSubscription::handleMessageMagicMountServiceRequest(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v21);
          if (v22 != buf) {
            free(v22);
          }
        }

        uint64_t v11 = sub_1006E3930();
        if (sub_1006E3A78(v11, v8))
        {
          *(_BYTE *)(a1 + 41) = v8;
          float v12 = (_BYTE *)sub_100AED3C8();
          float v13 = *(void **)(a1 + 24);
          if (v13)
          {
            [v13 clientName];
          }

          else
          {
            uint64_t v34 = 0LL;
            *(_OWORD *)std::stringbuf::string_type __p = 0u;
            __int128 v33 = 0u;
            __int128 v30 = 0u;
            *(_OWORD *)uint64_t v31 = 0u;
            __int128 v28 = 0u;
            *(_OWORD *)uint64_t v29 = 0u;
            *(_OWORD *)float32x2_t v26 = 0u;
            *(_OWORD *)int v27 = 0u;
            *(_OWORD *)int v24 = 0u;
            __int128 v25 = 0u;
            *(_OWORD *)uint64_t v23 = 0u;
          }

          sub_100AED744(v12, (uint64_t)v23, v8);
          if (SHIBYTE(v33) < 0) {
            operator delete(__p[1]);
          }
          if (SHIBYTE(__p[0]) < 0) {
            operator delete(v31[0]);
          }
          if (SHIBYTE(v30) < 0) {
            operator delete(v29[1]);
          }
          if (SHIBYTE(v28) < 0) {
            operator delete(v27[1]);
          }
          if (SHIBYTE(v27[0]) < 0) {
            operator delete(v26[0]);
          }
          if (SHIBYTE(v25) < 0) {
            operator delete(v24[1]);
          }
          if (SHIBYTE(v24[0]) < 0) {
            operator delete(v23[0]);
          }
          uint64_t v18 = 100LL;
        }

        else
        {
          uint64_t v18 = 108LL;
        }

        uint64_t v35 = CMErrorMessage;
        float v36 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v18);
        *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL);
        sub_100B0F9E4(a1, buf);
      }
    }

    else
    {
      uint64_t v17 = *a2;
      uint64_t v40 = CMErrorMessage;
      uint64_t v41 = &off_1018D3FF8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v41,  &v40,  1LL);
      CLConnectionMessage::sendReply(v17);
    }
  }

  else
  {
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_101870720);
    }
    uint64_t v14 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_101870720);
      }
      LOWORD(v37[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  17LL,  "Invalid parameters!",  v37,  2);
      float v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMagicMountSubscription::handleMessageMagicMountServiceRequest(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  return sub_100C6AC8C(a1);
}

void sub_100B0F41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B0F438(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  uint64_t v5 = CMMagicMountAPWakesAllowed;
  if (![Dictionary objectForKey:CMMagicMountAPWakesAllowed]
    || (id v6 = [Dictionary objectForKeyedSubscript:v5]) == 0)
  {
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_101870720);
    }
    float v13 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_101870720);
      }
      LOWORD(v27[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  17LL,  "Invalid parameters!",  v27,  2);
      uint64_t v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMagicMountSubscription::handleMessageMagicMountAPWakesAllowed(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    goto LABEL_19;
  }

  float v7 = v6;
  if (!sub_1006E3930())
  {
    uint64_t v14 = *a2;
    uint64_t v32 = CMErrorMessage;
    __int128 v33 = &off_1018D3FF8;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v33,  &v32,  1LL);
    CLConnectionMessage::sendReply(v14);
LABEL_19:
    sub_100C6AC8C(a1);
    return;
  }

  unsigned int v8 = [v7 BOOLValue];
  if (*(unsigned __int8 *)(a1 + 42) != v8)
  {
    unsigned int v15 = v8;
    if ([Dictionary objectForKey:v5])
    {
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_101870720);
      }
      float v16 = (os_log_s *)qword_101934558;
      if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 24);
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)&uint8_t buf[4] = v15;
        __int16 v35 = 2114;
        uint64_t v36 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Incoming MagicMount setAPWakesAllowed request: %{public}d, client: %{public}@",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934550 != -1) {
          dispatch_once(&qword_101934550, &stru_101870720);
        }
        uint64_t v22 = *(void *)(a1 + 24);
        v27[0] = 67240450;
        v27[1] = v15;
        __int16 v28 = 2114;
        uint64_t v29 = v22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  1LL,  "Incoming MagicMount setAPWakesAllowed request: %{public}d, client: %{public}@",  v27,  18);
        int v24 = (uint8_t *)v23;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagicMountSubscription::handleMessageMagicMountAPWakesAllowed(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v23);
        if (v24 != buf) {
          free(v24);
        }
      }

      uint64_t v18 = sub_1006E3930();
      if (sub_1006E4990(v18, v15))
      {
        *(_BYTE *)(a1 + 42) = v15;
        uint64_t v19 = 100LL;
      }

      else
      {
        uint64_t v19 = 108LL;
      }

      uint64_t v25 = CMErrorMessage;
      float32x2_t v26 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v19);
      *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL);
      sub_100B0F9E4(a1, buf);
    }

    goto LABEL_19;
  }

  uint64_t v9 = *a2;
  uint64_t v30 = CMErrorMessage;
  uint64_t v31 = &off_1018D4010;
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL);
  CLConnectionMessage::sendReply(v9);
  if (qword_101934550 != -1) {
    dispatch_once(&qword_101934550, &stru_101870720);
  }
  uint64_t v10 = (os_log_s *)qword_101934558;
  if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Already set AP wakes for this client", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_101870720);
    }
    LOWORD(v27[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  17LL,  "Already set AP wakes for this client",  v27,  2);
    float v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMagicMountSubscription::handleMessageMagicMountAPWakesAllowed(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

void sub_100B0F9E4(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B0FA78(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B0FA8C(id a1)
{
  qword_101934558 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

__n128 sub_100B0FAB8(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned __int8 v2 = &off_101870750;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100B0FAF4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101870750;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100B0FB18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100B0FB20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100B0FB5C()
{
}

void sub_100B0FB68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  unsigned int v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  float v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    unint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  uint64_t v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  uint64_t v10 = v17;
  if (v17)
  {
    uint64_t v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    float v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100B0FC3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100B0FC58(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100B0FCD0(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100B0FCBC(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100B0FCD0(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  float v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    float v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100B0FF50(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100B0FF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100B0FF50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100B0FFC4(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100B0FFAC(_Unwind_Exception *a1)
{
}

void *sub_100B0FFC4(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100B1001C(_Unwind_Exception *exception_object)
{
}

float sub_100B10038()
{
  return 27.925;
}

void *sub_100B10044(void *a1)
{
  *a1 = off_1018707E8;
  sub_1003C3A00(a1[1]);
  return a1;
}

void sub_100B10080(void *a1)
{
  uint64_t v1 = sub_100B10044(a1);
  operator delete(v1);
}

void *sub_100B10094(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_1018707E8;
  a1[1] = a2;
  a1[2] = a3;
  sub_1003C39F8(a2);
  *a1 = off_101870808;
  return a1;
}

void *sub_100B100D8(uint64_t a1)
{
  *(void *)a1 = off_101870808;
  int v2 = sqlite3_finalize(*(sqlite3_stmt **)(a1 + 16));
  *(void *)(a1 + 16) = 0LL;
  if (v2)
  {
    sub_1003B76BC(*(void *)(a1 + 8), (uint64_t)"sqlite3_finalize()", v2, 0LL);
    sub_1003B5988(*(void *)(a1 + 8), v2);
  }

  return sub_100B10044((void *)a1);
}

void sub_100B10144(uint64_t a1)
{
  uint64_t v1 = sub_100B100D8(a1);
  operator delete(v1);
}

void *sub_100B10158(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_1018707E8;
  a1[1] = a2;
  a1[2] = a3;
  sub_1003C39F8(a2);
  *a1 = off_101870828;
  return a1;
}

void *sub_100B1019C(uint64_t a1)
{
  *(void *)a1 = off_101870828;
  int v2 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
  if (v2)
  {
    sub_1003B76BC(*(void *)(a1 + 8), (uint64_t)"sqlite3_reset()", v2, *(sqlite3_stmt **)(a1 + 16));
    sub_1003B5988(*(void *)(a1 + 8), v2);
  }

  int v3 = sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 16));
  if (v3)
  {
    sub_1003B76BC(*(void *)(a1 + 8), (uint64_t)"sqlite3_clear_bindings()", v3, *(sqlite3_stmt **)(a1 + 16));
    sub_1003B5988(*(void *)(a1 + 8), v3);
  }

  return sub_100B10044((void *)a1);
}

void sub_100B10230(uint64_t a1)
{
  uint64_t v1 = sub_100B1019C(a1);
  operator delete(v1);
}

uint64_t sub_100B10244(double *a1, double a2)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101870878);
  }
  __int128 v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = sub_10080E94C();
    *(_DWORD *)buf = 0;
    double v6 = sub_10080EB58(v5, buf);
    uint64_t v7 = *((void *)a1 + 382);
    uint64_t v8 = *((void *)a1 + 63);
    uint64_t v9 = *((void *)a1 + 254);
    uint64_t v10 = *((void *)a1 + 384);
    *(_DWORD *)buf = 134219264;
    double v44 = v6;
    __int16 v45 = 2048;
    double v46 = a2;
    __int16 v47 = 2048;
    uint64_t v48 = v7;
    __int16 v49 = 2048;
    uint64_t v50 = v8;
    __int16 v51 = 2048;
    uint64_t v52 = v9;
    __int16 v53 = 2048;
    uint64_t v54 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%.1lf,DeadReckoning,%.2lf,fLastPASCDVelocityNotificationTime,%.2lf,fLastAccessoryLocation,%.2lf,fLastGPSLocationTi me,%.2lf,fLastGPSPropagationTime,%.2lf",  buf,  0x3Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101870878);
    }
    uint64_t v23 = qword_101934A78;
    double v24 = sub_10037FE24();
    uint64_t v25 = *((void *)a1 + 382);
    uint64_t v26 = *((void *)a1 + 63);
    uint64_t v27 = *((void *)a1 + 254);
    uint64_t v28 = *((void *)a1 + 384);
    int v31 = 134219264;
    double v32 = v24;
    __int16 v33 = 2048;
    double v34 = a2;
    __int16 v35 = 2048;
    uint64_t v36 = v25;
    __int16 v37 = 2048;
    uint64_t v38 = v26;
    __int16 v39 = 2048;
    uint64_t v40 = v27;
    __int16 v41 = 2048;
    uint64_t v42 = v28;
    LODWORD(v30) = 62;
    uint64_t v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "%.1lf,DeadReckoning,%.2lf,fLastPASCDVelocityNotificationTime,%.2lf,fLastAccessoryLocation,%.2lf,fLas tGPSLocationTime,%.2lf,fLastGPSPropagationTime,%.2lf",  COERCE_DOUBLE(&v31),  v30);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL PropagationDataHistory::shallPropagateAccessory(const CFTimeInterval)",  "%s\n",  v29);
  }

  double v11 = a1[384];
  BOOL v16 = v11 < 0.0;
  double v12 = vabdd_f64(a2, v11);
  BOOL v13 = !v16 && v12 <= 3.0;
  if (v13) {
    goto LABEL_14;
  }
  double v14 = a1[382];
  BOOL v13 = v14 <= 0.0;
  double v15 = vabdd_f64(a2, v14);
  BOOL v16 = !v13 && v15 < 10.0;
  if (!v16
    || ((double v19 = a1[63], v13 = v19 <= 0.001, v20 = vabdd_f64(a2, v19), !v13) ? (v21 = v20 < 3.0) : (v21 = 1),
        v21 || (v18 = a1 + 382, double v22 = a1[254], v22 >= 0.001) && vabdd_f64(a2, v22) < 3.0))
  {
LABEL_14:
    uint64_t result = 0LL;
    BOOL v18 = a1 + 382;
  }

  else
  {
    uint64_t result = 1LL;
  }

  *BOOL v18 = a2;
  return result;
}

BOOL sub_100B1050C(uint64_t a1, double a2)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101870878);
  }
  __int128 v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = sub_10080E94C();
    *(_DWORD *)buf = 0;
    double v6 = sub_10080EB58(v5, buf);
    uint64_t v7 = *(void *)(a1 + 3064);
    uint64_t v8 = sub_10080E94C();
    double v9 = sub_10080EF30(v8);
    *(_DWORD *)buf = 134218752;
    double v26 = v6;
    __int16 v27 = 2048;
    double v28 = a2;
    __int16 v29 = 2048;
    uint64_t v30 = v7;
    __int16 v31 = 2050;
    double v32 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%.1lf,DeadReckoning,%.2lf,fLastAccessoryPropagationTime,%.2lf,propagation_us,%{public}.3f",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101870878);
    }
    uint64_t v12 = qword_101934A78;
    double v13 = sub_10037FE24();
    uint64_t v14 = *(void *)(a1 + 3064);
    uint64_t v15 = sub_10080E94C();
    int v17 = 134218752;
    double v18 = v13;
    __int16 v19 = 2048;
    double v20 = a2;
    __int16 v21 = 2048;
    uint64_t v22 = v14;
    __int16 v23 = 2050;
    double v24 = sub_10080EF30(v15);
    BOOL v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  2LL,  "%.1lf,DeadReckoning,%.2lf,fLastAccessoryPropagationTime,%.2lf,propagation_us,%{public}.3f",  &v17,  42);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL PropagationDataHistory::shallPropagateGPS(const CFTimeInterval)",  "%s\n",  v16);
  }

  double v10 = *(double *)(a1 + 3064);
  return v10 < 0.0 || vabdd_f64(a2, v10) > 3.0;
}

void sub_100B10760(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 96);
  if ((v4 & 0xFFFFFFF7) == 1)
  {
    if (*(_BYTE *)(a2 + 516))
    {
      *(void *)(a1 + 3072) = *(void *)(a2 + 504);
    }

    else
    {
      __int128 v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 1528) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 1544) = v5;
      __int128 v6 = *(_OWORD *)(a2 + 32);
      __int128 v7 = *(_OWORD *)(a2 + 48);
      __int128 v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 1592) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 1608) = v8;
      *(_OWORD *)(a1 + 1560) = v6;
      *(_OWORD *)(a1 + 1576) = v7;
      __int128 v9 = *(_OWORD *)(a2 + 96);
      __int128 v10 = *(_OWORD *)(a2 + 112);
      __int128 v11 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 1668) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 1640) = v10;
      *(_OWORD *)(a1 + 1656) = v11;
      *(_OWORD *)(a1 + 1624) = v9;
      memcpy((void *)(a1 + 1688), (const void *)(a2 + 160), 0x201uLL);
      sub_1000F2F30((void *)(a1 + 2208), (uint64_t *)(a2 + 680));
      __int128 v13 = *(_OWORD *)(a2 + 712);
      __int128 v12 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 2224) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 2240) = v13;
      *(_OWORD *)(a1 + 2256) = v12;
      __int128 v15 = *(_OWORD *)(a2 + 760);
      __int128 v14 = *(_OWORD *)(a2 + 776);
      uint64_t v16 = *(void *)(a2 + 789);
      *(_OWORD *)(a1 + 2272) = *(_OWORD *)(a2 + 744);
      *(void *)(a1 + 2317) = v16;
      *(_OWORD *)(a1 + 2304) = v14;
      *(_OWORD *)(a1 + 2288) = v15;
      sub_1000F2F30((void *)(a1 + 2328), (uint64_t *)(a2 + 800));
      *(_OWORD *)(a1 + 2344) = *(_OWORD *)(a2 + 816);
      __int128 v17 = *(_OWORD *)(a2 + 880);
      __int128 v19 = *(_OWORD *)(a2 + 832);
      __int128 v18 = *(_OWORD *)(a2 + 848);
      *(_OWORD *)(a1 + 2392) = *(_OWORD *)(a2 + 864);
      *(_OWORD *)(a1 + 2408) = v17;
      *(_OWORD *)(a1 + 2360) = v19;
      *(_OWORD *)(a1 + 2376) = v18;
      *(void *)(a1 + 2424) = *(void *)(a2 + 896);
      std::string::operator=((std::string *)(a1 + 2432), (const std::string *)(a2 + 904));
      __int128 v21 = *(_OWORD *)(a2 + 944);
      __int128 v20 = *(_OWORD *)(a2 + 960);
      *(_OWORD *)(a1 + 2456) = *(_OWORD *)(a2 + 928);
      *(_OWORD *)(a1 + 2472) = v21;
      *(_OWORD *)(a1 + 2488) = v20;
      __int128 v22 = *(_OWORD *)(a2 + 1024);
      __int128 v24 = *(_OWORD *)(a2 + 976);
      __int128 v23 = *(_OWORD *)(a2 + 992);
      *(_OWORD *)(a1 + 2536) = *(_OWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 2552) = v22;
      *(_OWORD *)(a1 + 2504) = v24;
      *(_OWORD *)(a1 + 2520) = v23;
      __int128 v25 = *(_OWORD *)(a2 + 1056);
      __int128 v26 = *(_OWORD *)(a2 + 1072);
      __int128 v27 = *(_OWORD *)(a2 + 1088);
      *(_OWORD *)(a1 + 2568) = *(_OWORD *)(a2 + 1040);
      *(_OWORD *)(a1 + 2616) = v27;
      *(_OWORD *)(a1 + 2600) = v26;
      *(_OWORD *)(a1 + 2584) = v25;
      __int128 v28 = *(_OWORD *)(a2 + 1120);
      __int128 v29 = *(_OWORD *)(a2 + 1136);
      uint64_t v30 = *(void *)(a2 + 1152);
      *(_OWORD *)(a1 + 2632) = *(_OWORD *)(a2 + 1104);
      *(void *)(a1 + 2680) = v30;
      *(_OWORD *)(a1 + 26sub_10000AE14(v2 - 64) = v29;
      *(_OWORD *)(a1 + 2648) = v28;
      sub_1000F2F30((void *)(a1 + 2688), (uint64_t *)(a2 + 1160));
      *(_OWORD *)(a1 + 2704) = *(_OWORD *)(a2 + 1176);
      __int128 v31 = *(_OWORD *)(a2 + 1224);
      __int128 v32 = *(_OWORD *)(a2 + 1240);
      __int128 v33 = *(_OWORD *)(a2 + 1208);
      *(_OWORD *)(a1 + 2720) = *(_OWORD *)(a2 + 1192);
      *(_OWORD *)(a1 + 2768) = v32;
      *(_OWORD *)(a1 + 2752) = v31;
      *(_OWORD *)(a1 + 2736) = v33;
      __int128 v34 = *(_OWORD *)(a2 + 1288);
      __int128 v35 = *(_OWORD *)(a2 + 1304);
      __int128 v36 = *(_OWORD *)(a2 + 1272);
      *(_OWORD *)(a1 + 2784) = *(_OWORD *)(a2 + 1256);
      *(_OWORD *)(a1 + 2832) = v35;
      *(_OWORD *)(a1 + 2816) = v34;
      *(_OWORD *)(a1 + 2800) = v36;
      __int16 v37 = *(void **)(a1 + 2848);
      *(void *)(a1 + 2848) = *(id *)(a2 + 1320);

      *(_OWORD *)(a1 + 2856) = *(_OWORD *)(a2 + 1328);
      __int128 v38 = *(_OWORD *)(a2 + 1344);
      __int128 v39 = *(_OWORD *)(a2 + 1360);
      __int128 v40 = *(_OWORD *)(a2 + 1376);
      *(_OWORD *)(a1 + 2920) = *(_OWORD *)(a2 + 1392);
      *(_OWORD *)(a1 + 2904) = v40;
      *(_OWORD *)(a1 + 2888) = v39;
      *(_OWORD *)(a1 + 2872) = v38;
      __int128 v41 = *(_OWORD *)(a2 + 1408);
      __int128 v42 = *(_OWORD *)(a2 + 1424);
      __int128 v43 = *(_OWORD *)(a2 + 1440);
      *(_OWORD *)(a1 + 2984) = *(_OWORD *)(a2 + 1456);
      *(_OWORD *)(a1 + 2968) = v43;
      *(_OWORD *)(a1 + 2952) = v42;
      *(_OWORD *)(a1 + 2936) = v41;
      __int128 v44 = *(_OWORD *)(a2 + 1472);
      __int128 v45 = *(_OWORD *)(a2 + 1488);
      __int128 v46 = *(_OWORD *)(a2 + 1504);
      *(void *)(a1 + 3048) = *(void *)(a2 + 1520);
      *(_OWORD *)(a1 + 3032) = v46;
      *(_OWORD *)(a1 + 3016) = v45;
      *(_OWORD *)(a1 + 3000) = v44;
    }
  }

  else
  {
    if (v4 != 3) {
      return;
    }
    if (*(_BYTE *)(a2 + 516))
    {
      *(void *)(a1 + 30sub_10000AE14(v2 - 64) = *(void *)(a2 + 504);
    }

    else
    {
      __int128 v47 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v47;
      __int128 v48 = *(_OWORD *)(a2 + 32);
      __int128 v49 = *(_OWORD *)(a2 + 48);
      __int128 v50 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + sub_10000AE14(v2 - 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v50;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v49;
      __int128 v51 = *(_OWORD *)(a2 + 96);
      __int128 v52 = *(_OWORD *)(a2 + 112);
      __int128 v53 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v52;
      *(_OWORD *)(a1 + 128) = v53;
      *(_OWORD *)(a1 + 96) = v51;
      memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
      sub_1000F2F30((void *)(a1 + 680), (uint64_t *)(a2 + 680));
      __int128 v55 = *(_OWORD *)(a2 + 712);
      __int128 v54 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 712) = v55;
      *(_OWORD *)(a1 + 728) = v54;
      __int128 v57 = *(_OWORD *)(a2 + 760);
      __int128 v56 = *(_OWORD *)(a2 + 776);
      __int128 v58 = *(_OWORD *)(a2 + 744);
      *(void *)(a1 + 789) = *(void *)(a2 + 789);
      *(_OWORD *)(a1 + 760) = v57;
      *(_OWORD *)(a1 + 776) = v56;
      *(_OWORD *)(a1 + 744) = v58;
      sub_1000F2F30((void *)(a1 + 800), (uint64_t *)(a2 + 800));
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
      __int128 v59 = *(_OWORD *)(a2 + 880);
      __int128 v61 = *(_OWORD *)(a2 + 832);
      __int128 v60 = *(_OWORD *)(a2 + 848);
      *(_OWORD *)(a1 + 8sub_10000AE14(v2 - 64) = *(_OWORD *)(a2 + 864);
      *(_OWORD *)(a1 + 880) = v59;
      *(_OWORD *)(a1 + 832) = v61;
      *(_OWORD *)(a1 + 848) = v60;
      *(void *)(a1 + 896) = *(void *)(a2 + 896);
      std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
      __int128 v63 = *(_OWORD *)(a2 + 944);
      __int128 v62 = *(_OWORD *)(a2 + 960);
      *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
      *(_OWORD *)(a1 + 944) = v63;
      *(_OWORD *)(a1 + 960) = v62;
      __int128 v64 = *(_OWORD *)(a2 + 1024);
      __int128 v66 = *(_OWORD *)(a2 + 976);
      __int128 v65 = *(_OWORD *)(a2 + 992);
      *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 1024) = v64;
      *(_OWORD *)(a1 + 976) = v66;
      *(_OWORD *)(a1 + 992) = v65;
      __int128 v67 = *(_OWORD *)(a2 + 1056);
      __int128 v68 = *(_OWORD *)(a2 + 1072);
      __int128 v69 = *(_OWORD *)(a2 + 1088);
      *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
      *(_OWORD *)(a1 + 1088) = v69;
      *(_OWORD *)(a1 + 1072) = v68;
      *(_OWORD *)(a1 + 1056) = v67;
      __int128 v70 = *(_OWORD *)(a2 + 1120);
      __int128 v71 = *(_OWORD *)(a2 + 1136);
      uint64_t v72 = *(void *)(a2 + 1152);
      *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
      *(void *)(a1 + 1152) = v72;
      *(_OWORD *)(a1 + 1136) = v71;
      *(_OWORD *)(a1 + 1120) = v70;
      sub_1000F2F30((void *)(a1 + 1160), (uint64_t *)(a2 + 1160));
      *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
      __int128 v73 = *(_OWORD *)(a2 + 1240);
      __int128 v75 = *(_OWORD *)(a2 + 1192);
      __int128 v74 = *(_OWORD *)(a2 + 1208);
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
      *(_OWORD *)(a1 + 1240) = v73;
      *(_OWORD *)(a1 + 1192) = v75;
      *(_OWORD *)(a1 + 1208) = v74;
      __int128 v76 = *(_OWORD *)(a2 + 1304);
      __int128 v78 = *(_OWORD *)(a2 + 1256);
      __int128 v77 = *(_OWORD *)(a2 + 1272);
      *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a2 + 1288);
      *(_OWORD *)(a1 + 1304) = v76;
      *(_OWORD *)(a1 + 1256) = v78;
      *(_OWORD *)(a1 + 1272) = v77;
      __int16 v79 = *(void **)(a1 + 1320);
      *(void *)(a1 + 1320) = *(id *)(a2 + 1320);

      *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
      __int128 v80 = *(_OWORD *)(a2 + 1344);
      __int128 v81 = *(_OWORD *)(a2 + 1360);
      __int128 v82 = *(_OWORD *)(a2 + 1376);
      *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
      *(_OWORD *)(a1 + 1376) = v82;
      *(_OWORD *)(a1 + 1360) = v81;
      *(_OWORD *)(a1 + 1344) = v80;
      __int128 v83 = *(_OWORD *)(a2 + 1408);
      __int128 v84 = *(_OWORD *)(a2 + 1424);
      __int128 v85 = *(_OWORD *)(a2 + 1440);
      *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
      *(_OWORD *)(a1 + 1440) = v85;
      *(_OWORD *)(a1 + 1424) = v84;
      *(_OWORD *)(a1 + 1408) = v83;
      __int128 v86 = *(_OWORD *)(a2 + 1472);
      __int128 v87 = *(_OWORD *)(a2 + 1488);
      __int128 v88 = *(_OWORD *)(a2 + 1504);
      *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
      *(_OWORD *)(a1 + 1504) = v88;
      *(_OWORD *)(a1 + 1488) = v87;
      *(_OWORD *)(a1 + 1472) = v86;
    }
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101870878);
  }
  uint64_t v89 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v90 = sub_10080E94C();
    *(_DWORD *)buf = 0;
    double v91 = sub_10080EB58(v90, buf);
    if (*(_BYTE *)(a2 + 516)) {
      unint64_t v92 = "not saved";
    }
    else {
      unint64_t v92 = "saved";
    }
    __int16 v93 = sub_100832C40(*(_DWORD *)(a2 + 96));
    uint64_t v94 = *(void *)(a2 + 76);
    uint64_t v95 = *(void *)(a2 + 504);
    uint64_t v96 = *(void *)(a2 + 4);
    uint64_t v97 = *(void *)(a2 + 12);
    uint64_t v98 = sub_10080E94C();
    double v99 = sub_10080EF30(v98);
    *(_DWORD *)buf = 134219779;
    double v127 = v91;
    __int16 v128 = 2080;
    uint64_t v129 = v92;
    __int16 v130 = 2080;
    v131 = v93;
    __int16 v132 = 2048;
    uint64_t v133 = v94;
    __int16 v134 = 2048;
    uint64_t v135 = v95;
    __int16 v136 = 2049;
    uint64_t v137 = v96;
    __int16 v138 = 2049;
    uint64_t v139 = v97;
    __int16 v140 = 2050;
    double v141 = v99;
    _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEBUG,  "%.1lf,DeadReckoning,%s,%s,time,%.1lf,machCont,%.1lf,%{private}.8lf,%{private}.8lf,propagation_us,%{public}.3f",  buf,  0x52u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101870878);
    }
    uint64_t v100 = qword_101934A78;
    double v101 = sub_10037FE24();
    if (*(_BYTE *)(a2 + 516)) {
      double v102 = "not saved";
    }
    else {
      double v102 = "saved";
    }
    double v103 = sub_100832C40(*(_DWORD *)(a2 + 96));
    uint64_t v104 = *(void *)(a2 + 76);
    uint64_t v105 = *(void *)(a2 + 504);
    uint64_t v106 = *(void *)(a2 + 4);
    uint64_t v107 = *(void *)(a2 + 12);
    uint64_t v108 = sub_10080E94C();
    int v110 = 134219779;
    double v111 = v101;
    __int16 v112 = 2080;
    __int128 v113 = v102;
    __int16 v114 = 2080;
    std::string::size_type v115 = v103;
    __int16 v116 = 2048;
    uint64_t v117 = v104;
    __int16 v118 = 2048;
    uint64_t v119 = v105;
    __int16 v120 = 2049;
    uint64_t v121 = v106;
    __int16 v122 = 2049;
    uint64_t v123 = v107;
    __int16 v124 = 2050;
    double v125 = sub_10080EF30(v108);
    __int128 v109 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v100,  2LL,  "%.1lf,DeadReckoning,%s,%s,time,%.1lf,machCont,%.1lf,%{private}.8lf,%{private}.8lf,propagation_us,%{public}.3f",  &v110,  82);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void PropagationDataHistory::saveData(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v109);
  }

double sub_100B10E50(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a1 + 1528;
  if (a2 == 3) {
    uint64_t v3 = a1;
  }
  *(_DWORD *)(a3 + 84) = *(_DWORD *)(v3 + 84);
  *(void *)(a3 + 128) = *(void *)(v3 + 128);
  double result = *(double *)(v3 + 88);
  *(double *)(a3 + 88) = result;
  return result;
}

void sub_100B10E78(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100B10EA4(uint64_t a1, void *a2)
{
  int v4 = sub_1007BE1BC(a1, a2);
  *int v4 = off_1018708A8;
  v4[14] = 0LL;
  __int128 v5 = v4 + 14;
  v4[15] = 0LL;
  __int128 v6 = v4 + 15;
  sub_1006DE3E4((uint64_t)(v4 + 16));
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 152) = 0xBFF0000000000000LL;
  *(void *)(a1 + 168) = 0xBFF0000000000000LL;
  *(_BYTE *)(a1 + 176) = 1;
  *(void *)(a1 + 184) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 192) = 1;
  *(void *)(a1 + 312) = 0LL;
  uint64_t v7 = a1 + 312;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 2sub_10000AE14(v2 - 64) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 289) = 0u;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 328) = 0LL;
  sub_1002F0B04(&__p);
  int v8 = sub_1002A6F64((uint64_t)__p, "CLTSPEnableDeviceMotionVDRNotifications", v28);
  if (v28[0]) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  __int128 v10 = v30;
  if (!v30) {
    goto LABEL_8;
  }
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9) {
      return a1;
    }
  }

  else
  {
LABEL_8:
    if (!v9) {
      return a1;
    }
  }

  __int128 v13 = operator new(0x38uLL);
  sub_1010DDBC0(&__p, "PowerAssertionVdrTimer");
  sub_1006B5FBC(v13, &__p, sub_100B11408, a1, *(void *)(a1 + 40), 1LL, 1.79769313e308, 1.79769313e308, 0.9);
  if (v31 < 0) {
    operator delete(__p);
  }
  sub_100416D9C(v6, (uint64_t)v13);
  __int128 v14 = operator new(0x30uLL);
  sub_100AD558C((uint64_t)v14, (uint64_t)"CLVDR", a1, 5.0);
  uint64_t v15 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  if (+[CLSensorRecorderNotifierAdapter isSupported]( &OBJC_CLASS___CLSensorRecorderNotifierAdapter,  "isSupported")) {
    *(void *)(a1 + 320) = sub_100E7D210((uint64_t)a2);
  }
  sub_10036B3B4((uint64_t)sub_100B115D8, a1, *(void **)(a1 + 32), &__p);
  uint64_t v16 = __p;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v17 = *v5;
  void *v5 = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    __int128 v18 = __p;
    std::stringbuf::string_type __p = 0LL;
    if (v18) {
      (*(void (**)(void *))(*(void *)v18 + 8LL))(v18);
    }
  }

  sub_10043AC3C((uint64_t)sub_100B117A8, a1, *(void **)(a1 + 32), &__p);
  __int128 v19 = __p;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v20 = *(void *)v7;
  *(void *)uint64_t v7 = v19;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    __int128 v21 = __p;
    std::stringbuf::string_type __p = 0LL;
    if (v21) {
      (*(void (**)(void *))(*(void *)v21 + 8LL))(v21);
    }
  }

  [*(id *)(*(void *)v7 + 16) register:*(void *)(*(void *)v7 + 8) forNotification:5 registrationInfo:0];
  if (qword_101934950 != -1) {
    dispatch_once(&qword_101934950, &stru_1018709C0);
  }
  __int128 v22 = (os_log_s *)qword_101934958;
  if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR enabled: (CLTSPEnableDeviceMotionVDRNotifications == true)",  (uint8_t *)&__p,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    *(_WORD *)__int128 v28 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR enabled: (CLTSPEnableDeviceMotionVDRNotifications == true)",  v28,  2);
    __int128 v27 = (void **)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLVDR2DofNotifierFromSR::CLVDR2DofNotifierFromSR(id<CLIntersiloUniverse>)",  "%s\n",  v26);
    if (v27 != &__p) {
      free(v27);
    }
  }

  if (*v5) {
    [*(id *)(*v5 + 16) register:*(void *)(*v5 + 8) forNotification:1 registrationInfo:0];
  }
  uint64_t v23 = *v6;
  if (*v6)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1006B6014(v23, Current + 0.1);
  }

  return a1;
}

void sub_100B112E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v26 = *(void *)(v18 + 328);
  *(void *)(v18 + 328) = 0LL;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  uint64_t v27 = *v24;
  *__int128 v24 = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  sub_100210A00((void *)(v21 + 96));
  sub_100B14048((void *)(v21 + 48));
  sub_100B132C4(v22, 0LL);
  sub_100491E84((void **)v21, 0LL);
  nullsub_10(v20);
  sub_100416D9C(v19, 0LL);
  uint64_t v28 = *v23;
  *uint64_t v23 = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  sub_1007BE284(v18);
  _Unwind_Resume(a1);
}

void sub_100B113FC()
{
}

void sub_100B11408(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018709A0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    int v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVDR2DofNotifierFromSR::maintainEstimatorState",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018709A0);
    }
    __int128 v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int128 v11 = "";
      __int16 v12 = 2082;
      __int128 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVDR2DofNotifierFromSR::maintainEstimatorState, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_100B118D0(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B115B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B115D8(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018709A0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    int v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVDR2DofNotifierFromSR::onMotionActivityNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018709A0);
    }
    __int16 v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVDR2DofNotifierFromSR::onMotionActivityNotification, event:%{public, location:esc ape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_100B13764(a4, v8, v6, v7, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B11788( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B117A8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 == 5 && (*(_DWORD *)(a3 + 96) & 0xFFFFFFF7) == 1) {
    sub_1006DE3F4(a4 + 128, *(double *)(a3 + 184), *(double *)(a3 + 504));
  }
}

uint64_t sub_100B117DC(uint64_t a1)
{
  *(void *)a1 = off_1018708A8;
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:1];
  }
  uint64_t v3 = *(void *)(a1 + 312);
  if (v3) {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:5];
  }
  uint64_t v4 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  sub_100210A00((void *)(a1 + 256));
  sub_100B14048((void *)(a1 + 208));
  sub_100B132C4((void **)(a1 + 200), 0LL);
  sub_100491E84((void **)(a1 + 160), 0LL);
  nullsub_10(a1 + 128);
  sub_100416D9C((uint64_t *)(a1 + 120), 0LL);
  uint64_t v6 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return sub_1007BE284(a1);
}

void sub_100B118BC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B117DC(a1);
  operator delete(v1);
}

void sub_100B118D0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 328))
  {
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    uint64_t v4 = (os_log_s *)qword_101934958;
    if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState taking power assertion",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      v19[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState taking power assertion",  v19,  2);
      __int128 v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::maintainEstimatorState(CLPersistentTimer *)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    sub_100AD5D38(*(void *)(a1 + 328));
    uint64_t v5 = *(void *)(a1 + 328);
    sub_1010DDBC0(__p, "none");
    sub_100AD5668(v5, (uint64_t *)__p);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

  if (*(_BYTE *)(a1 + 304))
  {
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    uint64_t v6 = (os_log_s *)qword_101934958;
    if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState initiating/extending sensor recorder subscription",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      v19[0] = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState initiating/extending sensor recorder subscription",  v19,  v16);
      __int128 v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::maintainEstimatorState(CLPersistentTimer *)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    uint64_t v7 = *(void *)(a1 + 320);
    if (v7)
    {
      sub_100E7F448(v7, 0, 600.0);
      sub_100E7F448(*(void *)(a1 + 320), 1u, 600.0);
    }
  }

  if (a2)
  {
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    __n128 v8 = (os_log_s *)qword_101934958;
    if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP,  CLVDR2DofNotifierFromSR::maintainEstimatorState setting next timer fire date",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      v19[0] = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLTSP,  CLVDR2DofNotifierFromSR::maintainEstimatorState setting next timer fire date",  v19,  v16);
      __int16 v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::maintainEstimatorState(CLPersistentTimer *)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1006B6014(a2, Current + 120.0);
  }

void sub_100B11D58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B11D7C(uint64_t result)
{
  uint64_t v1 = (int64x2_t *)result;
  uint64_t v2 = result + 208;
  uint64_t v3 = result + 256;
  while (1)
  {
    uint64_t v4 = v1[18].i64[1];
    if (!v1[15].i64[1]) {
      break;
    }
    uint64_t v5 = v1[13].i64[1];
    unint64_t v6 = v1[15].u64[0];
    unint64_t v7 = v6 / 0xCC;
    if (!v4)
    {
      unint64_t v9 = v6 % 0xCC;
      uint64_t v8 = *(void *)(v5 + 8 * v7);
      unint64_t v10 = *(void *)(v8 + 20 * (v6 % 0xCC) + 12);
      goto LABEL_10;
    }

    uint64_t v8 = *(void *)(v5 + 8 * v7);
    unint64_t v9 = v6 % 0xCC;
    unint64_t v10 = *(void *)(v8 + 20 * (v6 % 0xCC) + 12);
    unint64_t v11 = v1[18].u64[0];
    uint64_t v12 = *(void *)(v1[16].i64[1] + 8 * (v11 / 0xAA));
    unint64_t v13 = v11 % 0xAA;
    unint64_t v14 = *(void *)(v12 + 24 * v13 + 16);
    if (v10 >= v14)
    {
LABEL_8:
      uint64_t v16 = (float32x2_t *)(v12 + 24 * v13);
      float32x2_t v18 = *v16;
      __int32 v19 = v16[1].i32[0];
      sub_100F56E68(v1[12].i64[1], &v18, (double)v14 / 1000000.0);
      v1[18] = vaddq_s64(v1[18], (int64x2_t)xmmword_1012CE4D0);
      double result = sub_100211164(v3, 1);
    }

    else
    {
LABEL_10:
      __int16 v17 = (float32x2_t *)(v8 + 20 * v9);
      float32x2_t v18 = *v17;
      __int32 v19 = v17[1].i32[0];
      sub_100F56FE0((float32x2_t *)v1[12].i64[1], &v18, (double)v10 / 1000000.0);
      v1[15] = vaddq_s64(v1[15], (int64x2_t)xmmword_1012CE4D0);
      double result = sub_100B140DC(v2, 1);
    }
  }

  if (v4)
  {
    unint64_t v15 = v1[18].u64[0];
    unint64_t v13 = v15 % 0xAA;
    uint64_t v12 = *(void *)(v1[16].i64[1] + 8 * (v15 / 0xAA));
    unint64_t v14 = *(void *)(v12 + 24 * (v15 % 0xAA) + 16);
    goto LABEL_8;
  }

  return result;
}

void sub_100B11F2C(uint64_t a1)
{
  if (!*(_BYTE *)(v1 + 176)) {
    return;
  }
  uint64_t v2 = v1;
  if (qword_101934950 != -1) {
    dispatch_once(&qword_101934950, &stru_1018709C0);
  }
  uint64_t v3 = (os_log_s *)qword_101934958;
  if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
  {
    if (!*(_BYTE *)(v2 + 176) || !*(_BYTE *)(v2 + 192)) {
      sub_100036CD8();
    }
    uint64_t v4 = *(void *)(v2 + 168);
    uint64_t v5 = *(void *)(v2 + 184);
    *(_DWORD *)buf = 134349312;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&buf[14] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData, requesting data from %{public}.1f to %{public}.1f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    if (!*(_BYTE *)(v2 + 176)) {
      sub_100036CD8();
    }
    if (!*(_BYTE *)(v2 + 192)) {
      sub_100036CD8();
    }
    __int128 v66 = *(void **)(v2 + 168);
    __int128 v67 = *(void **)(v2 + 184);
    *(_DWORD *)uint64_t v105 = 134349312;
    id v106 = v66;
    __int16 v107 = 2050;
    id v108 = v67;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData, requesting data from %{public}.1f to %{public}.1f",  v105,  22);
    __int128 v69 = (char *)v68;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v68);
    if (v69 != buf) {
      free(v69);
    }
  }

  __int128 v85 = (void **)(v2 + 200);
  sub_100B132C4((void **)(v2 + 200), 0LL);
  if (qword_101934950 != -1) {
    dispatch_once(&qword_101934950, &stru_1018709C0);
  }
  unint64_t v6 = (os_log_s *)qword_101934958;
  if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#VDR,allocating DeviceMotionSource processor",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    *(_WORD *)uint64_t v105 = 0;
    LODWORD(v83) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,allocating DeviceMotionSource processor",  v105,  v83);
    __int128 v71 = (char *)v70;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v70);
    if (v71 != buf) {
      free(v71);
    }
  }

  unint64_t v7 = operator new(0x770uLL);
  sub_100F56DA0();
  *(void *)buf = 0LL;
  sub_100B132C4(v85, v7);
  sub_100B132C4((void **)buf, 0LL);
  uint64_t v8 = *(void *)(v2 + 200);
  *(void *)buf = &off_1018709F0;
  *(void *)&uint8_t buf[8] = sub_100B13328;
  __int128 v113 = buf;
  sub_100F56DA4(v8, (uint64_t)buf, v2);
  unint64_t v9 = v113;
  if (v113 == buf)
  {
    uint64_t v10 = 4LL;
    unint64_t v9 = buf;
  }

  else
  {
    if (!v113) {
      goto LABEL_21;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  __int128 v84 = (void **)(v2 + 160);
  sub_100491E84((void **)(v2 + 160), 0LL);
  if (qword_101934950 != -1) {
    dispatch_once(&qword_101934950, &stru_1018709C0);
  }
  unint64_t v11 = (os_log_s *)qword_101934958;
  if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#VDR,allocating CLVDR2DofNotifierFromDM estimator",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    *(_WORD *)uint64_t v105 = 0;
    LODWORD(v83) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,allocating CLVDR2DofNotifierFromDM estimator",  v105,  v83,  v84);
    __int128 v73 = (char *)v72;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v72);
    if (v73 != buf) {
      free(v73);
    }
  }

  uint64_t v12 = operator new(0x130uLL);
  sub_1006F3DF4((uint64_t)v12);
  sub_100491E84(v84, v12);
  unint64_t v13 = *(void **)(v2 + 160);
  *(void *)buf = &off_10183BDF8;
  *(void *)&uint8_t buf[8] = sub_100B1332C;
  __int128 v113 = buf;
  sub_1006F3EA4(v13, (uint64_t)buf, v2);
  unint64_t v14 = v113;
  if (v113 == buf)
  {
    uint64_t v15 = 4LL;
    unint64_t v14 = buf;
    goto LABEL_30;
  }

  if (v113)
  {
    uint64_t v15 = 5LL;
LABEL_30:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }

  uint64_t v16 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int16 v17 = *(uint64_t **)(v2 + 320);
  if (v17)
  {
    if (!*(_BYTE *)(v2 + 176)) {
      sub_100036CD8();
    }
    if (!*(_BYTE *)(v2 + 192)) {
      sub_100036CD8();
    }
    BOOL v18 = sub_100E7F3CC(v17, 0, v16, *(double *)(v2 + 168), *(double *)(v2 + 184));
  }

  else
  {
    BOOL v18 = 0;
  }

  obunsigned int j = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int32 v19 = *(uint64_t **)(v2 + 320);
  if (v19)
  {
    if (!*(_BYTE *)(v2 + 176)) {
      sub_100036CD8();
    }
    if (!*(_BYTE *)(v2 + 192)) {
      sub_100036CD8();
    }
    if ((v18 & sub_100E7F3CC(v19, 1, obj, *(double *)(v2 + 168), *(double *)(v2 + 184))) == 1)
    {
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      uint64_t v20 = (os_log_s *)qword_101934958;
      if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
      {
        id v21 = -[NSMutableArray count](v16, "count");
        id v22 = -[NSMutableArray count](obj, "count");
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v21;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&buf[14] = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData: %{public}lu accel ids, %{public}lu gyro ids",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934950 != -1) {
          dispatch_once(&qword_101934950, &stru_1018709C0);
        }
        uint64_t v74 = qword_101934958;
        id v75 = -[NSMutableArray count](v16, "count");
        id v76 = -[NSMutableArray count](obj, "count");
        *(_DWORD *)uint64_t v105 = 134349312;
        id v106 = v75;
        __int16 v107 = 2050;
        id v108 = v76;
        LODWORD(v83) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v74,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData: %{public}lu accel ids, %{public}lu gyro ids",  v105,  v83);
        __int128 v78 = (char *)v77;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v77);
        if (v78 != buf) {
          free(v78);
        }
      }

      v96[0] = 0LL;
      v96[1] = buf;
      unsigned int v97 = 147456;
      __int128 v92 = 0u;
      __int128 v93 = 0u;
      __int128 v94 = 0u;
      __int128 v95 = 0u;
      id v23 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v92,  v111,  16LL);
      if (v23)
      {
        uint64_t v24 = *(void *)v93;
        do
        {
          __int128 v25 = 0LL;
          do
          {
            if (*(void *)v93 != v24) {
              objc_enumerationMutation(v16);
            }
            uint64_t v26 = *(void **)(*((void *)&v92 + 1) + 8LL * (void)v25);
            uint64_t v27 = *(uint64_t **)(v2 + 320);
            if (v27
              && sub_100E7F408( v27,  0,  (uint64_t)v96,  (sqlite3_int64)[*(id *)(*((void *)&v92 + 1) + 8 * (void)v25) identifier]))
            {
              if (qword_101934950 != -1) {
                dispatch_once(&qword_101934950, &stru_1018709C0);
              }
              uint64_t v28 = (os_log_s *)qword_101934958;
              if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
              {
                id v29 = [v26 identifier];
                *(_DWORD *)uint64_t v105 = 134349568;
                id v106 = v29;
                __int16 v107 = 2050;
                id v108 = (id)v96[0];
                __int16 v109 = 1026;
                unsigned int v110 = v97;
                _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData fetched kAccel data for ID %{pu blic}llu: data.identifier %{public}llu, data.length %{public}u",  v105,  0x1Cu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(v105, 0x65CuLL);
                if (qword_101934950 != -1) {
                  dispatch_once(&qword_101934950, &stru_1018709C0);
                }
                uint64_t v38 = qword_101934958;
                id v39 = [v26 identifier];
                int v99 = 134349568;
                id v100 = v39;
                __int16 v101 = 2050;
                uint64_t v102 = v96[0];
                __int16 v103 = 1026;
                unsigned int v104 = v97;
                LODWORD(v83) = 28;
                _os_log_send_and_compose_impl( 2LL,  0LL,  v105,  1628LL,  &_mh_execute_header,  v38,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData fetched kAccel data for ID %{pu blic}llu: data.identifier %{public}llu, data.length %{public}u",  &v99,  v83);
                __int128 v41 = (uint8_t *)v40;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v40);
                if (v41 != v105) {
                  free(v41);
                }
              }

              sub_1006DC344((uint64_t)v105, 0LL);
              sub_1006DC344((uint64_t)v105, (uint64_t)buf);
              if (v97)
              {
                for (unsigned int i = 0; i < v97; i += v31)
                {
                  sub_1006DC1E8((int *)v105, &v91, (uint64_t)&v99);
                  int v31 = v91;
                  sub_100B13330((void *)(v2 + 208), (__n128 *)&v99);
                }
              }
            }

            else
            {
              if (qword_101934950 != -1) {
                dispatch_once(&qword_101934950, &stru_1018709C0);
              }
              __int128 v32 = (os_log_s *)qword_101934958;
              if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
              {
                id v33 = [v26 identifier];
                *(_DWORD *)uint64_t v105 = 134217984;
                id v106 = v33;
                _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData failed to fetch kAccel data for ID %llu",  v105,  0xCu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(v105, 0x65CuLL);
                if (qword_101934950 != -1) {
                  dispatch_once(&qword_101934950, &stru_1018709C0);
                }
                uint64_t v34 = qword_101934958;
                id v35 = [v26 identifier];
                int v99 = 134217984;
                id v100 = v35;
                _os_log_send_and_compose_impl( 2LL,  0LL,  v105,  1628LL,  &_mh_execute_header,  v34,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData failed to fetch kAccel data for ID %llu",  &v99);
                __int16 v37 = (uint8_t *)v36;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v36);
                if (v37 != v105) {
                  free(v37);
                }
              }
            }

            __int128 v25 = (char *)v25 + 1;
          }

          while (v25 != v23);
          id v42 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v92,  v111,  16LL);
          id v23 = v42;
        }

        while (v42);
      }

      __int128 v89 = 0u;
      __int128 v90 = 0u;
      __int128 v87 = 0u;
      __int128 v88 = 0u;
      id v43 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v87,  v98,  16LL);
      if (v43)
      {
        uint64_t v44 = *(void *)v88;
        do
        {
          __int128 v45 = 0LL;
          do
          {
            if (*(void *)v88 != v44) {
              objc_enumerationMutation(obj);
            }
            __int128 v46 = *(void **)(*((void *)&v87 + 1) + 8LL * (void)v45);
            __int128 v47 = *(uint64_t **)(v2 + 320);
            if (v47
              && sub_100E7F408( v47,  1,  (uint64_t)v96,  (sqlite3_int64)[*(id *)(*((void *)&v87 + 1) + 8 * (void)v45) identifier]))
            {
              if (qword_101934950 != -1) {
                dispatch_once(&qword_101934950, &stru_1018709C0);
              }
              __int128 v48 = (os_log_s *)qword_101934958;
              if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
              {
                id v49 = [v46 identifier];
                *(_DWORD *)uint64_t v105 = 134349568;
                id v106 = v49;
                __int16 v107 = 2050;
                id v108 = (id)v96[0];
                __int16 v109 = 1026;
                unsigned int v110 = v97;
                _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData fetched kGyro data for ID %{pub lic}llu, data.identifier %{public}llu, data.length %{public}u",  v105,  0x1Cu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(v105, 0x65CuLL);
                if (qword_101934950 != -1) {
                  dispatch_once(&qword_101934950, &stru_1018709C0);
                }
                uint64_t v59 = qword_101934958;
                id v60 = [v46 identifier];
                int v99 = 134349568;
                id v100 = v60;
                __int16 v101 = 2050;
                uint64_t v102 = v96[0];
                __int16 v103 = 1026;
                unsigned int v104 = v97;
                LODWORD(v83) = 28;
                _os_log_send_and_compose_impl( 2LL,  0LL,  v105,  1628LL,  &_mh_execute_header,  v59,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData fetched kGyro data for ID %{pub lic}llu, data.identifier %{public}llu, data.length %{public}u",  &v99,  v83);
                __int128 v62 = (uint8_t *)v61;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v61);
                if (v62 != v105) {
                  free(v62);
                }
              }

              sub_1006DC4A4((uint64_t)v105, 0LL);
              double v50 = sub_1006DC4A4((uint64_t)v105, (uint64_t)buf);
              if (v97)
              {
                for (unsigned int j = 0; j < v97; j += v52)
                {
                  sub_1006DC35C((int *)v105, &v91, (float32x4_t *)&v99);
                  int v52 = v91;
                  *(void *)&double v50 = sub_100B133E4((void *)(v2 + 256), (__n128 *)&v99).n128_u64[0];
                }
              }
            }

            else
            {
              if (qword_101934950 != -1) {
                dispatch_once(&qword_101934950, &stru_1018709C0);
              }
              __int128 v53 = (os_log_s *)qword_101934958;
              if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
              {
                id v54 = [v46 identifier];
                *(_DWORD *)uint64_t v105 = 134349056;
                id v106 = v54;
                _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData failed to fetch kGyro data for ID %{public}llu",  v105,  0xCu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(v105, 0x65CuLL);
                if (qword_101934950 != -1) {
                  dispatch_once(&qword_101934950, &stru_1018709C0);
                }
                uint64_t v55 = qword_101934958;
                id v56 = [v46 identifier];
                int v99 = 134349056;
                id v100 = v56;
                LODWORD(v83) = 12;
                _os_log_send_and_compose_impl( 2LL,  0LL,  v105,  1628LL,  &_mh_execute_header,  v55,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData failed to fetch kGyro data for ID %{public}llu",  &v99,  v83);
                __int128 v58 = (uint8_t *)v57;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v57);
                if (v58 != v105) {
                  free(v58);
                }
              }
            }

            __int128 v45 = (char *)v45 + 1;
          }

          while (v45 != v43);
          id v63 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v87,  v98,  16LL,  v50);
          id v43 = v63;
        }

        while (v63);
      }

      sub_100B11D7C(v2);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      __int128 v64 = (os_log_s *)qword_101934958;
      if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v105 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "#VDR,deallocating CLVDR2DofNotifierFromDM estimator",  v105,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(v105, 0x65CuLL);
        if (qword_101934950 != -1) {
          dispatch_once(&qword_101934950, &stru_1018709C0);
        }
        LOWORD(v99) = 0;
        LODWORD(v83) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  v105,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,deallocating CLVDR2DofNotifierFromDM estimator",  &v99,  v83);
        __int128 v80 = (uint8_t *)v79;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v79);
        if (v80 != v105) {
          free(v80);
        }
      }

      sub_100491E84(v84, 0LL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      __int128 v65 = (os_log_s *)qword_101934958;
      if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v105 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "#VDR,deallocating DeviceMotionSource processor",  v105,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(v105, 0x65CuLL);
        if (qword_101934950 != -1) {
          dispatch_once(&qword_101934950, &stru_1018709C0);
        }
        LOWORD(v99) = 0;
        LODWORD(v83) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  v105,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,deallocating DeviceMotionSource processor",  &v99,  v83);
        __int128 v82 = (uint8_t *)v81;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()",  "%s\n",  v81);
        if (v82 != v105) {
          free(v82);
        }
      }

      sub_100B132C4(v85, 0LL);
      if (*(_BYTE *)(v2 + 176)) {
        *(_BYTE *)(v2 + 176) = 0;
      }
      if (*(_BYTE *)(v2 + 192)) {
        *(_BYTE *)(v2 + 192) = 0;
      }
    }
  }

void sub_100B1326C(_Unwind_Exception *a1)
{
  uint64_t v3 = (unint64_t *)STACK[0x898];
  if (STACK[0x898] == v1)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = &STACK[0x880];
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100B132C4(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (void *)v2[236];
    if (v3 == v2 + 233)
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = v2 + 233;
    }

    else
    {
      if (!v3)
      {
LABEL_8:
        operator delete(v2);
        return;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_8;
  }

__n128 sub_100B13330(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 204 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B141F4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  uint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xCC)) + 20 * (v7 % 0xCC));
  __n128 result = *a2;
  v8[1].n128_u32[0] = a2[1].n128_u32[0];
  __n128 *v8 = result;
  ++a1[5];
  return result;
}

__n128 sub_100B133E4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B14508(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  uint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v8 = result;
  ++a1[5];
  return result;
}

void sub_100B13490(uint64_t a1, float *a2, float *a3, float *a4, double a5)
{
  if (!*(void *)(a1 + 160))
  {
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    uint64_t v10 = (os_log_s *)qword_101934958;
    if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no estimato r is instantiated.",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no estimator is instantiated.",  v15,  2,  v14);
LABEL_22:
    unint64_t v13 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::handleDeviceMotionData(const CMOQuaternion &, const CMVector3d &, const CMVector3d &, double)",  "%s\n",  v11);
    if (v13 != buf) {
      free(v13);
    }
    return;
  }

  v15[0] = -1.0;
  if (sub_1006DE5F4(a1 + 128, v15, a5))
  {
    sub_1006F4174(*(void *)(a1 + 160), a2, a3, v15[0], (uint64_t)a4, a4);
    return;
  }

  if (a5 - *(double *)(a1 + 152) > 1.0)
  {
    *(double *)(a1 + 152) = a5;
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    uint64_t v12 = (os_log_s *)qword_101934958;
    if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no Mach to GPS conversion is available.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      LOWORD(v14) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no Mach to GPS conversion is available.",  &v14,  2,  v14);
      goto LABEL_22;
    }
  }

void sub_100B13764(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  int v6 = a5[25];
  int isTypeInVehicle = CLMotionActivity::isTypeInVehicle(*a5, a2);
  if (v6 > 0) {
    int v8 = 1;
  }
  else {
    int v8 = isTypeInVehicle;
  }
  int v9 = *(unsigned __int8 *)(a1 + 304);
  *(_BYTE *)(a1 + 304) = v8;
  if (v9 != v8)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (v8)
    {
      *(double *)(a1 + 168) = Current;
      *(_BYTE *)(a1 + 176) = 1;
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      unint64_t v11 = (os_log_s *)qword_101934958;
      if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
      {
        if (!*(_BYTE *)(a1 + 176)) {
          goto LABEL_34;
        }
        uint64_t v12 = *(void *)(a1 + 168);
        *(_DWORD *)buf = 134349056;
        uint64_t v25 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, requesting start sensor recording from %{public}.1f",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2))
      {
LABEL_14:
        uint64_t v13 = *(void *)(a1 + 120);
        if (v13) {
          sub_100B118D0(a1, v13);
        }
        return;
      }

      bzero(buf, 0x65CuLL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      if (*(_BYTE *)(a1 + 176))
      {
        uint64_t v16 = *(void *)(a1 + 168);
        int v22 = 134349056;
        uint64_t v23 = v16;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, requesting start sensor recording from %{public}.1f",  &v22,  12);
        BOOL v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, cons t CLMotionState_Type::NotificationData &)",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
        goto LABEL_14;
      }

void sub_100B13AF4(uint64_t a1, __int128 *a2)
{
  if (sub_100B13F50(a1, (double *)a2))
  {
    __int128 v4 = a2[1];
    __int128 v39 = *a2;
    __int128 v40 = v4;
    __int128 v41 = a2[2];
    uint64_t v42 = *((void *)a2 + 6);
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    uint64_t v5 = (os_log_s *)qword_101934958;
    if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
      uint64_t v8 = *((void *)a2 + 2);
      uint64_t v9 = *((void *)a2 + 3);
      uint64_t v10 = *((void *)a2 + 4);
      uint64_t v11 = *((void *)a2 + 5);
      uint64_t v12 = *((void *)a2 + 6);
      *(_DWORD *)buf = 134350592;
      uint64_t v58 = v6;
      __int16 v59 = 2050;
      uint64_t v60 = v7;
      __int16 v61 = 2050;
      uint64_t v62 = v8;
      __int16 v63 = 2050;
      uint64_t v64 = v9;
      __int16 v65 = 2050;
      uint64_t v66 = v10;
      __int16 v67 = 2050;
      uint64_t v68 = v11;
      __int16 v69 = 2050;
      uint64_t v70 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#VDR,CLVDR2DofNotifier,SR,measurement,timestamp_s,%{public}.3f,dataPeriod_s,%{public}.3f,deltaCourse_rad,%{publi c}.6f,deltaSpeed_mps,%{public}.6f,deltaCourseVar_rad2,%{public}.6f,deltaSpeedVar_mps2,%{public}.6f,deltaCourseSp eedCov_radmps,%{public}.6f",  buf,  0x48u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      uint64_t v21 = *(void *)a2;
      uint64_t v22 = *((void *)a2 + 1);
      uint64_t v23 = *((void *)a2 + 2);
      uint64_t v24 = *((void *)a2 + 3);
      uint64_t v25 = *((void *)a2 + 4);
      uint64_t v26 = *((void *)a2 + 5);
      uint64_t v27 = *((void *)a2 + 6);
      int v43 = 134350592;
      uint64_t v44 = v21;
      __int16 v45 = 2050;
      uint64_t v46 = v22;
      __int16 v47 = 2050;
      uint64_t v48 = v23;
      __int16 v49 = 2050;
      uint64_t v50 = v24;
      __int16 v51 = 2050;
      uint64_t v52 = v25;
      __int16 v53 = 2050;
      uint64_t v54 = v26;
      __int16 v55 = 2050;
      uint64_t v56 = v27;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLVDR2DofNotifier,SR,measurement,timestamp_s,%{public}.3f,dataPeriod_s,%{public}.3f,deltaCourse_rad,%{publi c}.6f,deltaSpeed_mps,%{public}.6f,deltaCourseVar_rad2,%{public}.6f,deltaSpeedVar_mps2,%{public}.6f,deltaCourseSp eedCov_radmps,%{public}.6f",  &v43,  72,  v39,  v40,  v41,  v42);
      id v29 = (uint8_t *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::onVDR2DoFMeasurement(const CLVDR2DofMeasurement &)",  "%s\n",  v28);
      if (v29 != buf) {
        free(v29);
      }
    }

    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, __int128 *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  &v39,  0LL,  0xFFFFFFFFLL,  0LL);
  }

  else
  {
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    uint64_t v13 = (os_log_s *)qword_101934958;
    if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)a2;
      uint64_t v15 = *((void *)a2 + 1);
      uint64_t v16 = *((void *)a2 + 2);
      uint64_t v17 = *((void *)a2 + 3);
      uint64_t v18 = *((void *)a2 + 4);
      uint64_t v19 = *((void *)a2 + 5);
      uint64_t v20 = *((void *)a2 + 6);
      *(_DWORD *)buf = 134350592;
      uint64_t v58 = v14;
      __int16 v59 = 2050;
      uint64_t v60 = v15;
      __int16 v61 = 2050;
      uint64_t v62 = v16;
      __int16 v63 = 2050;
      uint64_t v64 = v17;
      __int16 v65 = 2050;
      uint64_t v66 = v18;
      __int16 v67 = 2050;
      uint64_t v68 = v19;
      __int16 v69 = 2050;
      uint64_t v70 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "#VDR,CLVDR2DofNotifierFromSR, Warning, invalid measurement,timestamp,%{public}.3f,dataPeriod,%{public}.3f,deltaC ourse,%{public}.6f,deltaSpeed,%{public}.6f,courseVar,%{public}.6f,speedVar,%{public}.6f,deltaCourseSpeedCovar,%{public}.6f",  buf,  0x48u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      uint64_t v30 = *(void *)a2;
      uint64_t v31 = *((void *)a2 + 1);
      uint64_t v32 = *((void *)a2 + 2);
      uint64_t v33 = *((void *)a2 + 3);
      uint64_t v34 = *((void *)a2 + 4);
      uint64_t v35 = *((void *)a2 + 5);
      uint64_t v36 = *((void *)a2 + 6);
      int v43 = 134350592;
      uint64_t v44 = v30;
      __int16 v45 = 2050;
      uint64_t v46 = v31;
      __int16 v47 = 2050;
      uint64_t v48 = v32;
      __int16 v49 = 2050;
      uint64_t v50 = v33;
      __int16 v51 = 2050;
      uint64_t v52 = v34;
      __int16 v53 = 2050;
      uint64_t v54 = v35;
      __int16 v55 = 2050;
      uint64_t v56 = v36;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLVDR2DofNotifierFromSR, Warning, invalid measurement,timestamp,%{public}.3f,dataPeriod,%{public}.3f,deltaC ourse,%{public}.6f,deltaSpeed,%{public}.6f,courseVar,%{public}.6f,speedVar,%{public}.6f,deltaCourseSpeedCovar,%{public}.6f",  &v43,  72);
      uint64_t v38 = (uint8_t *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::onVDR2DoFMeasurement(const CLVDR2DofMeasurement &)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }
  }

BOOL sub_100B13F50(uint64_t a1, double *a2)
{
  double v2 = a2[1];
  if (v2 == 0.0) {
    return 0LL;
  }
  BOOL v3 = v2 > 0.001 && v2 < 60.0;
  if (!v3 || fabs(a2[2]) > 3.14159265) {
    return 0LL;
  }
  BOOL result = 0LL;
  if (fabs(a2[3] / v2) <= 20.0)
  {
    double v5 = a2[4];
    if (v5 > 0.0)
    {
      double v6 = a2[5];
      if (v6 > 0.0) {
        return a2[6] * a2[6] <= v5 * 1.05 * v6;
      }
    }
  }

  return result;
}

void sub_100B13FF0(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B1401C(id a1)
{
  qword_101934958 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_100B14048(void *a1)
{
  double v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      double v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 102LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 204LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

uint64_t sub_100B140DC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0xCC) {
    a2 = 1;
  }
  if (v2 < 0x198) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 204LL;
  }

  return v4 ^ 1u;
}

void *sub_100B14138(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_1018709F0;
  result[1] = v3;
  return result;
}

uint64_t sub_100B14170(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018709F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B14190(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, double))(a1 + 8))(*a2, a3, a4, a5, *a6);
}

uint64_t sub_100B141AC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100B141E8()
{
  return &off_101870A70;
}

void sub_100B141F4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xCC;
  unint64_t v4 = v2 - 204;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100B144BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100B14508(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100B147D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100B1481C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_101349B50;
      v1[3] = unk_101349B60;
      v1[4] = xmmword_101349B70;
      v1[0] = xmmword_101349B30;
      v1[1] = unk_101349B40;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100B148F0(_Unwind_Exception *a1)
{
}

void sub_100B14CC4(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_100B14CF0(void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1] = a3;
  return result;
}

uint64_t *sub_100B14CF8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result && (uint64_t v4 = result[1]) != 0)
  {
    uint64_t v5 = operator new(0x18uLL);
    BOOL result = sub_100B10158(v5, v3, v4);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *a2 = v5;
  return result;
}

void sub_100B14D50(_Unwind_Exception *a1)
{
}

BOOL sub_100B14D64(void *a1)
{
  return *a1 && a1[1] != 0LL;
}

uint64_t *sub_100B14EBC@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101870AB0);
  }
  uint64_t v4 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    else {
      uint64_t v5 = *(uint64_t **)a1;
    }
    *(_DWORD *)buf = 136380675;
    BOOL v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#SettingsMap,create,root,%{private}s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    else {
      uint64_t v8 = *(uint64_t **)a1;
    }
    int v11 = 136380675;
    uint64_t v12 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#SettingsMap,create,root,%{private}s",  &v11,  12);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::shared_ptr<RootNode> CLMASettingsMap::RootNode::create(const std::string &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  uint64_t v6 = operator new(0x40uLL);
  sub_100B17678(v6, a1);
  return sub_100B17A00(a2, (uint64_t)v6);
}

void sub_100B150A8(_Unwind_Exception *a1)
{
}

void sub_100B150C4(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = v50;
  if (!v50 || v50->__shared_owners_ == -1)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v26 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = (void *)(a1 + 8);
      *(_DWORD *)buf = 136380675;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "#SettingsMap,addBranch,root,%{private}s,failed to get shared this",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      uint64_t v34 = (void *)(a1 + 8);
      int v51 = 136380675;
      uint64_t v52 = v34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "#SettingsMap,addBranch,root,%{private}s,failed to get shared this",  &v51,  12);
      uint64_t v36 = (char *)v35;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::shared_ptr<BranchNode> CLMASettingsMap::RootNode::addBranch(const std::string &)",  "%s\n",  v35);
      if (v36 != buf) {
        free(v36);
      }
    }

    *a3 = 0LL;
    a3[1] = 0LL;
  }

  else
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    uint64_t v8 = v49;
    *(void *)buf = v49;
    *(void *)&uint8_t buf[8] = v50;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    uint64_t v47 = v8;
    uint64_t v48 = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    uint64_t v12 = v50;
    uint64_t v45 = v8;
    unint64_t v46 = v50;
    if (v50)
    {
      uint64_t v13 = (unint64_t *)&v50->__shared_weak_owners_;
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }

    sub_100B15788(a2, &v47, &v45, a3);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    std::__shared_weak_count::__release_weak(v6);
    do
      unint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }

    uint64_t v16 = a3[1];
    if (!v16 || *(void *)(v16 + 8) == -1LL)
    {
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      uint64_t v28 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
      {
        id v29 = (void *)(a1 + 8);
        else {
          __int128 v30 = *(uint64_t **)a2;
        }
        *(_DWORD *)buf = 136380931;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&_BYTE buf[12] = 2081;
        *(void *)&buf[14] = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,failed to create branch",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101870AB0);
        }
        __int16 v37 = (void *)(a1 + 8);
        else {
          uint64_t v38 = *(uint64_t **)a2;
        }
        int v51 = 136380931;
        uint64_t v52 = v37;
        __int16 v53 = 2081;
        __int128 v54 = v38;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,failed to create branch",  &v51,  22,  v45,  v46,  v47,  v48);
        uint64_t v40 = (char *)v39;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::shared_ptr<BranchNode> CLMASettingsMap::RootNode::addBranch(const std::string &)",  "%s\n",  v39);
        if (v40 != buf) {
          free(v40);
        }
      }
    }

    else
    {
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      uint64_t v17 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = (void *)(a1 + 8);
        else {
          uint64_t v19 = *(uint64_t **)a2;
        }
        *(_DWORD *)buf = 136380931;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&_BYTE buf[12] = 2081;
        *(void *)&buf[14] = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,successful",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101870AB0);
        }
        __int128 v41 = (void *)(a1 + 8);
        else {
          uint64_t v42 = *(uint64_t **)a2;
        }
        int v51 = 136380931;
        uint64_t v52 = v41;
        __int16 v53 = 2081;
        __int128 v54 = v42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,successful",  &v51,  22,  v45,  v46,  v47,  v48);
        uint64_t v44 = (char *)v43;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::shared_ptr<BranchNode> CLMASettingsMap::RootNode::addBranch(const std::string &)",  "%s\n",  v43);
        if (v44 != buf) {
          free(v44);
        }
      }

      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v21 = operator new(0x18uLL);
      uint64_t v23 = *a3;
      uint64_t v22 = a3[1];
      *uint64_t v21 = v20;
      v21[1] = v23;
      void v21[2] = v22;
      if (v22)
      {
        uint64_t v24 = (unint64_t *)(v22 + 8);
        do
          unint64_t v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }

      *(void *)(a1 + 48) = v21;
    }
  }

  __int128 v31 = v50;
  if (v50)
  {
    __int128 v32 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

void sub_100B1572C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100B15788( __int128 *a1@<X0>, std::__shared_weak_count **a2@<X1>, std::__shared_weak_count **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = a2[1];
  if (!v6 || v6->__shared_owners_ == -1 || (uint64_t v8 = a3[1]) == 0LL || v8->__shared_owners_ == -1)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v28 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      else {
        id v29 = *(uint64_t **)a1;
      }
      *(_DWORD *)buf = 136380675;
      uint64_t v58 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "#SettingsMap,create,branch,%{private}s,parent and/or root is empty",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      else {
        __int128 v30 = *(uint64_t **)a1;
      }
      int v51 = 136380675;
      uint64_t v52 = v30;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "#SettingsMap,create,branch,%{private}s,parent and/or root is empty",  &v51,  12);
      __int128 v32 = (uint8_t *)v31;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::create(const std::string &, std::weak_ptr<NodeBa se>, std::weak_ptr<RootNode>)",  "%s\n",  v31);
      if (v32 != buf) {
        free(v32);
      }
    }

    *a4 = 0LL;
    a4[1] = 0LL;
  }

  else
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v10 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      else {
        unint64_t v11 = *(uint64_t **)a1;
      }
      uint64_t v12 = std::__shared_weak_count::lock(a2[1]);
      p_shared_owners = &(*a2)->__shared_owners_;
      if (SHIBYTE((*a2)[1].__vftable) < 0) {
        p_shared_owners = (uint64_t *)*p_shared_owners;
      }
      unint64_t v14 = std::__shared_weak_count::lock(a3[1]);
      unint64_t v15 = &(*a3)->__shared_owners_;
      if (SHIBYTE((*a3)[1].__vftable) < 0) {
        unint64_t v15 = (uint64_t *)*v15;
      }
      *(_DWORD *)buf = 136381187;
      uint64_t v58 = v11;
      __int16 v59 = 2081;
      uint64_t v60 = p_shared_owners;
      __int16 v61 = 2081;
      uint64_t v62 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "#SettingsMap,create,branch,%{private}s,parent,%{private}s,root,%{private}s",  buf,  0x20u);
      uint64_t v16 = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }

      uint64_t v18 = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      uint64_t v33 = qword_101934A48;
      else {
        uint64_t v34 = *(uint64_t **)a1;
      }
      uint64_t v49 = 0LL;
      uint64_t v50 = 0LL;
      uint64_t v35 = a2[1];
      if (v35 && (uint64_t v50 = std::__shared_weak_count::lock(v35)) != 0LL)
      {
        uint64_t v36 = *a2;
        uint64_t v49 = *a2;
      }

      else
      {
        uint64_t v36 = 0LL;
      }

      __int16 v37 = &v36->__shared_owners_;
      if (SHIBYTE(v36[1].__vftable) < 0) {
        __int16 v37 = (uint64_t *)*v37;
      }
      uint64_t v47 = 0LL;
      uint64_t v48 = 0LL;
      uint64_t v38 = a3[1];
      if (v38 && (uint64_t v48 = std::__shared_weak_count::lock(v38)) != 0LL)
      {
        uint64_t v39 = *a3;
        uint64_t v47 = *a3;
      }

      else
      {
        uint64_t v39 = 0LL;
      }

      uint64_t v40 = &v39->__shared_owners_;
      if (SHIBYTE(v39[1].__vftable) < 0) {
        uint64_t v40 = (uint64_t *)*v40;
      }
      int v51 = 136381187;
      uint64_t v52 = v34;
      __int16 v53 = 2081;
      __int128 v54 = v37;
      __int16 v55 = 2081;
      uint64_t v56 = v40;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  2LL,  "#SettingsMap,create,branch,%{private}s,parent,%{private}s,root,%{private}s",  &v51,  32);
      uint64_t v42 = v41;
      sub_10000AE14((uint64_t)&v47);
      sub_10000AE14((uint64_t)&v49);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::create(const std::string &, std::weak_ptr<NodeBa se>, std::weak_ptr<RootNode>)",  "%s\n",  v42);
    }

    uint64_t v20 = operator new(0x60uLL);
    uint64_t v21 = (uint64_t)v20;
    uint64_t v22 = a2[1];
    uint64_t v45 = *a2;
    unint64_t v46 = v22;
    if (v22)
    {
      p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
      do
        unint64_t v24 = __ldxr(p_shared_weak_owners);
      while (__stxr(v24 + 1, p_shared_weak_owners));
    }

    unint64_t v25 = a3[1];
    int v43 = *a3;
    uint64_t v44 = v25;
    if (v25)
    {
      uint64_t v26 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        unint64_t v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }

    sub_100B17768(v20, a1, &v45, &v43);
    sub_100B17AD8(a4, v21);
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
    if (v46) {
      std::__shared_weak_count::__release_weak(v46);
    }
  }

void sub_100B15CE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v14) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B15D18( __int128 *a1@<X0>, int a2@<W1>, std::__shared_weak_count **a3@<X2>, std::__shared_weak_count **a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = a3[1];
  if (!v7 || v7->__shared_owners_ == -1 || (unint64_t v9 = a4[1]) == 0LL || v9->__shared_owners_ == -1)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    __int128 v30 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      else {
        __int128 v31 = *(uint64_t **)a1;
      }
      *(_DWORD *)buf = 136380675;
      uint64_t v62 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "#SettingsMap,create,leaf,%{private}s,parent and/or root is empty",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      else {
        __int128 v32 = *(uint64_t **)a1;
      }
      int v53 = 136380675;
      __int128 v54 = v32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "#SettingsMap,create,leaf,%{private}s,parent and/or root is empty",  &v53,  12);
      uint64_t v34 = (uint8_t *)v33;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static std::shared_ptr<LeafNode> CLMASettingsMap::LeafNode::create(const std::string &, DataType, std::weak_ptr< NodeBase>, std::weak_ptr<RootNode>)",  "%s\n",  v33);
      if (v34 != buf) {
        free(v34);
      }
    }

    *a5 = 0LL;
    a5[1] = 0LL;
  }

  else
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v12 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      else {
        uint64_t v13 = *(uint64_t **)a1;
      }
      int v14 = std::__shared_weak_count::lock(a3[1]);
      p_shared_owners = &(*a3)->__shared_owners_;
      if (SHIBYTE((*a3)[1].__vftable) < 0) {
        p_shared_owners = (uint64_t *)*p_shared_owners;
      }
      uint64_t v16 = std::__shared_weak_count::lock(a4[1]);
      unint64_t v17 = &(*a4)->__shared_owners_;
      if (SHIBYTE((*a4)[1].__vftable) < 0) {
        unint64_t v17 = (uint64_t *)*v17;
      }
      *(_DWORD *)buf = 136381443;
      uint64_t v62 = v13;
      __int16 v63 = 2081;
      uint64_t v64 = p_shared_owners;
      __int16 v65 = 2081;
      uint64_t v66 = v17;
      __int16 v67 = 1025;
      int v68 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#SettingsMap,create,leaf,%{private}s,parent,%{private}s,root,%{private}s,type,%{private}d",  buf,  0x26u);
      uint64_t v18 = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }

      uint64_t v20 = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      uint64_t v35 = qword_101934A48;
      else {
        uint64_t v36 = *(uint64_t **)a1;
      }
      int v51 = 0LL;
      uint64_t v52 = 0LL;
      __int16 v37 = a3[1];
      if (v37 && (uint64_t v52 = std::__shared_weak_count::lock(v37)) != 0LL)
      {
        uint64_t v38 = *a3;
        int v51 = *a3;
      }

      else
      {
        uint64_t v38 = 0LL;
      }

      uint64_t v39 = &v38->__shared_owners_;
      if (SHIBYTE(v38[1].__vftable) < 0) {
        uint64_t v39 = (uint64_t *)*v39;
      }
      uint64_t v49 = 0LL;
      uint64_t v50 = 0LL;
      uint64_t v40 = a4[1];
      if (v40 && (uint64_t v50 = std::__shared_weak_count::lock(v40)) != 0LL)
      {
        __int128 v41 = *a4;
        uint64_t v49 = *a4;
      }

      else
      {
        __int128 v41 = 0LL;
      }

      uint64_t v42 = &v41->__shared_owners_;
      if (SHIBYTE(v41[1].__vftable) < 0) {
        uint64_t v42 = (uint64_t *)*v42;
      }
      int v53 = 136381443;
      __int128 v54 = v36;
      __int16 v55 = 2081;
      uint64_t v56 = v39;
      __int16 v57 = 2081;
      uint64_t v58 = v42;
      __int16 v59 = 1025;
      int v60 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v35,  2LL,  "#SettingsMap,create,leaf,%{private}s,parent,%{private}s,root,%{private}s,type,%{private}d",  &v53,  38);
      uint64_t v44 = v43;
      sub_10000AE14((uint64_t)&v49);
      sub_10000AE14((uint64_t)&v51);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::shared_ptr<LeafNode> CLMASettingsMap::LeafNode::create(const std::string &, DataType, std::weak_ptr< NodeBase>, std::weak_ptr<RootNode>)",  "%s\n",  v44);
    }

    uint64_t v22 = operator new(0x48uLL);
    uint64_t v23 = (uint64_t)v22;
    unint64_t v24 = a3[1];
    uint64_t v47 = *a3;
    uint64_t v48 = v24;
    if (v24)
    {
      p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
      do
        unint64_t v26 = __ldxr(p_shared_weak_owners);
      while (__stxr(v26 + 1, p_shared_weak_owners));
    }

    unint64_t v27 = a4[1];
    uint64_t v45 = *a4;
    unint64_t v46 = v27;
    if (v27)
    {
      uint64_t v28 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        unint64_t v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }

    sub_100B178C0((uint64_t)v22, a1, a2, &v47, &v45);
    sub_100B17BB0(a5, v23);
    if (v46) {
      std::__shared_weak_count::__release_weak(v46);
    }
    if (v48) {
      std::__shared_weak_count::__release_weak(v48);
    }
  }

void sub_100B16294( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v14) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B162CC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = v77;
  if (!v77 || v77->__shared_owners_ == -1)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    __int128 v32 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = (void *)(a1 + 8);
      *(_DWORD *)buf = 136380675;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "#SettingsMap,addBranch,branch,%{private}s,failed to get shared this",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_61;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v34 = (void *)(a1 + 8);
    int v78 = 136380675;
    __int16 v79 = v34;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "#SettingsMap,addBranch,branch,%{private}s,failed to get shared this",  &v78,  12);
    uint64_t v36 = (char *)v35;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)",  "%s\n",  v35);
    goto LABEL_98;
  }

  uint64_t v7 = *(void *)(a1 + 72);
  if (!v7 || *(void *)(v7 + 8) == -1LL)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    __int16 v37 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = (void *)(a1 + 8);
      else {
        uint64_t v39 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 136380931;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&_BYTE buf[12] = 2081;
      *(void *)&buf[14] = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "#SettingsMap,addBranch,branch,%{private}s,subBranch,%{private}s,root is empty",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_61;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    __int16 v55 = (void *)(a1 + 8);
    else {
      uint64_t v56 = (void *)*a2;
    }
    int v78 = 136380931;
    __int16 v79 = v55;
    __int16 v80 = 2081;
    __int128 v81 = v56;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "#SettingsMap,addBranch,branch,%{private}s,subBranch,%{private}s,root is empty",  &v78,  22);
    uint64_t v36 = (char *)v57;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)",  "%s\n",  v57);
LABEL_98:
    if (v36 != buf) {
      free(v36);
    }
LABEL_61:
    *a3 = 0LL;
    a3[1] = 0LL;
    goto LABEL_62;
  }

  p_shared_owners = (unint64_t *)&v77->__shared_owners_;
  unint64_t v9 = v76;
  *(void *)buf = v76;
  *(void *)&uint8_t buf[8] = v77;
  do
    unint64_t v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  uint64_t v74 = v9;
  id v75 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    unint64_t v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v72 = *(std::__shared_weak_count **)(a1 + 64);
  __int128 v73 = v13;
  if (v13)
  {
    int v14 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  sub_100B15788((__int128 *)a2, &v74, &v72, a3);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v6);
  do
    unint64_t v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

  uint64_t v17 = a3[1];
  if (!v17 || *(void *)(v17 + 8) == -1LL)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    int v43 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = (void *)(a1 + 8);
      uint64_t v45 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v46 = *(void *)(a1 + 64);
      uint64_t v47 = (void *)(v46 + 8);
      else {
        uint64_t v48 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 136381187;
      *(void *)&uint8_t buf[4] = v44;
      *(_WORD *)&_BYTE buf[12] = 2081;
      *(void *)&buf[14] = v47;
      __int16 v85 = 2081;
      __int128 v86 = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,failed to create branch",  buf,  0x20u);
      uint64_t v49 = (unint64_t *)&v45->__shared_owners_;
      do
        unint64_t v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      int v51 = (void *)(a1 + 8);
      uint64_t v52 = qword_101934A48;
      uint64_t v70 = 0LL;
      __int128 v71 = 0LL;
      int v53 = *(std::__shared_weak_count **)(a1 + 72);
      if (v53 && (__int128 v71 = std::__shared_weak_count::lock(v53)) != 0LL)
      {
        uint64_t v54 = *(void *)(a1 + 64);
        uint64_t v70 = v54;
      }

      else
      {
        uint64_t v54 = 0LL;
      }

      uint64_t v62 = (void *)(v54 + 8);
      else {
        __int16 v63 = (uint64_t *)*a2;
      }
      int v78 = 136381187;
      __int16 v79 = v51;
      __int16 v80 = 2081;
      __int128 v81 = v62;
      __int16 v82 = 2081;
      uint64_t v83 = v63;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v52,  16LL,  "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,failed to create branch",  &v78,  32,  v70,  v71,  v72,  v73,  v74,  v75);
      __int16 v65 = v64;
      sub_10000AE14((uint64_t)&v70);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)",  "%s\n",  v65);
      if (v65 != buf) {
        free(v65);
      }
    }
  }

  else
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v18 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v19 = (void *)(a1 + 8);
      uint64_t v20 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v21 = *(void *)(a1 + 64);
      uint64_t v22 = (void *)(v21 + 8);
      else {
        uint64_t v23 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 136381187;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&_BYTE buf[12] = 2081;
      *(void *)&buf[14] = v22;
      __int16 v85 = 2081;
      __int128 v86 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,successful",  buf,  0x20u);
      unint64_t v24 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      uint64_t v58 = (void *)(a1 + 8);
      uint64_t v59 = qword_101934A48;
      uint64_t v70 = 0LL;
      __int128 v71 = 0LL;
      int v60 = *(std::__shared_weak_count **)(a1 + 72);
      if (v60 && (__int128 v71 = std::__shared_weak_count::lock(v60)) != 0LL)
      {
        uint64_t v61 = *(void *)(a1 + 64);
        uint64_t v70 = v61;
      }

      else
      {
        uint64_t v61 = 0LL;
      }

      uint64_t v66 = (void *)(v61 + 8);
      else {
        __int16 v67 = (uint64_t *)*a2;
      }
      int v78 = 136381187;
      __int16 v79 = v58;
      __int16 v80 = 2081;
      __int128 v81 = v66;
      __int16 v82 = 2081;
      uint64_t v83 = v67;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v59,  2LL,  "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,successful",  &v78,  32,  v70,  v71,  v72,  v73,  v74,  v75);
      __int16 v69 = v68;
      sub_10000AE14((uint64_t)&v70);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)",  "%s\n",  v69);
      if (v69 != buf) {
        free(v69);
      }
    }

    uint64_t v26 = *(void *)(a1 + 80);
    unint64_t v27 = operator new(0x18uLL);
    uint64_t v29 = *a3;
    uint64_t v28 = a3[1];
    void *v27 = v26;
    v27[1] = v29;
    _DWORD v27[2] = v28;
    if (v28)
    {
      __int128 v30 = (unint64_t *)(v28 + 8);
      do
        unint64_t v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }

    *(void *)(a1 + 80) = v27;
  }

void sub_100B16C28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100B16C88(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = v79;
  if (!v79 || v79->__shared_owners_ == -1)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v34 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = (void *)(a1 + 8);
      *(_DWORD *)buf = 136380675;
      *(void *)&uint8_t buf[4] = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "#SettingsMap,addLeaf,branch,%{private}s,failed to get shared this",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_61;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v36 = (void *)(a1 + 8);
    int v80 = 136380675;
    __int128 v81 = v36;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "#SettingsMap,addLeaf,branch,%{private}s,failed to get shared this",  &v80,  12);
    uint64_t v38 = (char *)v37;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)",  "%s\n",  v37);
    goto LABEL_98;
  }

  uint64_t v9 = *(void *)(a1 + 72);
  if (!v9 || *(void *)(v9 + 8) == -1LL)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v39 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = (void *)(a1 + 8);
      else {
        __int128 v41 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 136380931;
      *(void *)&uint8_t buf[4] = v40;
      *(_WORD *)&_BYTE buf[12] = 2081;
      *(void *)&buf[14] = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "#SettingsMap,addLeaf,branch,%{private}s,leaf,%{private}s,root is empty",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_61;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    __int16 v57 = (void *)(a1 + 8);
    else {
      uint64_t v58 = (void *)*a2;
    }
    int v80 = 136380931;
    __int128 v81 = v57;
    __int16 v82 = 2081;
    uint64_t v83 = v58;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "#SettingsMap,addLeaf,branch,%{private}s,leaf,%{private}s,root is empty",  &v80,  22);
    uint64_t v38 = (char *)v59;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)",  "%s\n",  v59);
LABEL_98:
    if (v38 != buf) {
      free(v38);
    }
LABEL_61:
    *a4 = 0LL;
    a4[1] = 0LL;
    goto LABEL_62;
  }

  p_shared_owners = (unint64_t *)&v79->__shared_owners_;
  unint64_t v11 = v78;
  *(void *)buf = v78;
  *(void *)&uint8_t buf[8] = v79;
  do
    unint64_t v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  id v76 = v11;
  __int128 v77 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    unint64_t v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  unint64_t v15 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v74 = *(std::__shared_weak_count **)(a1 + 64);
  id v75 = v15;
  if (v15)
  {
    unint64_t v16 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  sub_100B15D18((__int128 *)a2, a3, &v76, &v74, a4);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__shared_weak_count::__release_weak(v8);
  do
    unint64_t v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  uint64_t v19 = a4[1];
  if (!v19 || *(void *)(v19 + 8) == -1LL)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v45 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v46 = (void *)(a1 + 8);
      uint64_t v47 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v48 = *(void *)(a1 + 64);
      uint64_t v49 = (void *)(v48 + 8);
      else {
        unint64_t v50 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 136381187;
      *(void *)&uint8_t buf[4] = v46;
      *(_WORD *)&_BYTE buf[12] = 2081;
      *(void *)&buf[14] = v49;
      __int16 v87 = 2081;
      __int128 v88 = v50;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,failed to create leaf",  buf,  0x20u);
      int v51 = (unint64_t *)&v47->__shared_owners_;
      do
        unint64_t v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      int v53 = (void *)(a1 + 8);
      uint64_t v54 = qword_101934A48;
      uint64_t v72 = 0LL;
      __int128 v73 = 0LL;
      __int16 v55 = *(std::__shared_weak_count **)(a1 + 72);
      if (v55 && (__int128 v73 = std::__shared_weak_count::lock(v55)) != 0LL)
      {
        uint64_t v56 = *(void *)(a1 + 64);
        uint64_t v72 = v56;
      }

      else
      {
        uint64_t v56 = 0LL;
      }

      uint64_t v64 = (void *)(v56 + 8);
      else {
        __int16 v65 = (uint64_t *)*a2;
      }
      int v80 = 136381187;
      __int128 v81 = v53;
      __int16 v82 = 2081;
      uint64_t v83 = v64;
      __int16 v84 = 2081;
      __int16 v85 = v65;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v54,  16LL,  "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,failed to create leaf",  &v80,  32,  v72,  v73,  v74,  v75,  v76,  v77);
      __int16 v67 = v66;
      sub_10000AE14((uint64_t)&v72);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)",  "%s\n",  v67);
      if (v67 != buf) {
        free(v67);
      }
    }
  }

  else
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101870AB0);
    }
    uint64_t v20 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = (void *)(a1 + 8);
      uint64_t v22 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v23 = *(void *)(a1 + 64);
      unint64_t v24 = (void *)(v23 + 8);
      else {
        unint64_t v25 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 136381187;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&_BYTE buf[12] = 2081;
      *(void *)&buf[14] = v24;
      __int16 v87 = 2081;
      __int128 v88 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,successful",  buf,  0x20u);
      uint64_t v26 = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101870AB0);
      }
      int v60 = (void *)(a1 + 8);
      uint64_t v61 = qword_101934A48;
      uint64_t v72 = 0LL;
      __int128 v73 = 0LL;
      uint64_t v62 = *(std::__shared_weak_count **)(a1 + 72);
      if (v62 && (__int128 v73 = std::__shared_weak_count::lock(v62)) != 0LL)
      {
        uint64_t v63 = *(void *)(a1 + 64);
        uint64_t v72 = v63;
      }

      else
      {
        uint64_t v63 = 0LL;
      }

      int v68 = (void *)(v63 + 8);
      else {
        __int16 v69 = (uint64_t *)*a2;
      }
      int v80 = 136381187;
      __int128 v81 = v60;
      __int16 v82 = 2081;
      uint64_t v83 = v68;
      __int16 v84 = 2081;
      __int16 v85 = v69;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v61,  2LL,  "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,successful",  &v80,  32,  v72,  v73,  v74,  v75,  v76,  v77);
      __int128 v71 = v70;
      sub_10000AE14((uint64_t)&v72);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)",  "%s\n",  v71);
      if (v71 != buf) {
        free(v71);
      }
    }

    uint64_t v28 = *(void *)(a1 + 88);
    uint64_t v29 = operator new(0x18uLL);
    uint64_t v31 = *a4;
    uint64_t v30 = a4[1];
    *uint64_t v29 = v28;
    v29[1] = v31;
    v29[2] = v30;
    if (v30)
    {
      __int128 v32 = (unint64_t *)(v30 + 8);
      do
        unint64_t v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }

    *(void *)(a1 + 88) = v29;
  }

void sub_100B175EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100B1764C(id a1)
{
  qword_101934A48 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void *sub_100B17678(void *a1, __int128 *a2)
{
  *a1 = off_101870B60;
  uint64_t v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(v3, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    _OWORD v3[2] = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }

  a1[4] = 0LL;
  a1[5] = 0LL;
  *a1 = off_101870AE0;
  a1[6] = 0LL;
  a1[7] = 0LL;
  return a1;
}

void sub_100B176EC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B17700(a1);
  operator delete(v1);
}

uint64_t sub_100B17700(uint64_t a1)
{
  *(void *)a1 = off_101870AE0;
  sub_1005F69EC((void **)(a1 + 56));
  sub_1005F69EC((void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = off_101870B60;
  return a1;
}

void *sub_100B17768(void *a1, __int128 *a2, void *a3, void *a4)
{
  *a1 = off_101870B60;
  uint64_t v7 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(v7, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v8 = *a2;
    void v7[2] = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }

  a1[4] = 0LL;
  a1[5] = 0LL;
  *a1 = off_101870B88;
  uint64_t v9 = a3[1];
  a1[6] = *a3;
  a1[7] = v9;
  if (v9)
  {
    unint64_t v10 = (unint64_t *)(v9 + 16);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  uint64_t v12 = a4[1];
  a1[8] = *a4;
  a1[9] = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 16);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  a1[10] = 0LL;
  a1[11] = 0LL;
  return a1;
}

void sub_100B1782C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B17840(a1);
  operator delete(v1);
}

uint64_t sub_100B17840(uint64_t a1)
{
  *(void *)a1 = off_101870B88;
  sub_1005F69EC((void **)(a1 + 88));
  sub_1005F69EC((void **)(a1 + 80));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  __int128 v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)a1 = off_101870B60;
  return a1;
}

uint64_t sub_100B178C0(uint64_t a1, __int128 *a2, int a3, void *a4, void *a5)
{
  *(void *)a1 = off_101870B60;
  uint64_t v9 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)v9, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v10 = *a2;
    *(void *)(v9 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v9 = v10;
  }

  *(void *)a1 = off_101870BF8;
  *(_DWORD *)(a1 + 32) = a3;
  uint64_t v11 = a4[1];
  *(void *)(a1 + 40) = *a4;
  *(void *)(a1 + 48) = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v11 + 16);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  uint64_t v14 = a5[1];
  *(void *)(a1 + 56) = *a5;
  *(void *)(a1 + sub_10000AE14(v2 - 64) = v14;
  if (v14)
  {
    unint64_t v15 = (unint64_t *)(v14 + 16);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  return a1;
}

void sub_100B17984(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B17998(a1);
  operator delete(v1);
}

uint64_t sub_100B17998(uint64_t a1)
{
  *(void *)a1 = off_101870BF8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)a1 = off_101870B60;
  return a1;
}

uint64_t *sub_100B17A00(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  __int128 v4 = operator new(0x20uLL);
  *__int128 v4 = &off_101870C38;
  v4[1] = 0LL;
  _OWORD v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    uint64_t v5 = (void *)(a2 + 32);
  }
  else {
    uint64_t v5 = 0LL;
  }
  sub_100586FD0((uint64_t)a1, v5, a2);
  return a1;
}

void sub_100B17A60(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B17A80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100B17A98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t *sub_100B17AD8(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  __int128 v4 = operator new(0x20uLL);
  *__int128 v4 = &off_101870CB0;
  v4[1] = 0LL;
  _OWORD v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    uint64_t v5 = (void *)(a2 + 32);
  }
  else {
    uint64_t v5 = 0LL;
  }
  sub_100586FD0((uint64_t)a1, v5, a2);
  return a1;
}

void sub_100B17B38(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B17B58(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100B17B70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *sub_100B17BB0(void *a1, uint64_t a2)
{
  *a1 = a2;
  __int128 v4 = operator new(0x20uLL);
  *__int128 v4 = &off_101870D28;
  v4[1] = 0LL;
  _OWORD v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100B17BF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B17C18(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100B17C30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100B17CDC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v7 = (void *)sub_100C6AAF0(a1, a2, a3, a4, a5);
  void *v7 = off_101870DA0;
  v7[6] = 0LL;
  *(_BYTE *)(a1 + 56) = sub_1010350E8();
  *(_BYTE *)(a1 + 57) = sub_101035118();
  *(_BYTE *)(a1 + 58) = sub_101035100();
  sub_101037234((uint64_t)sub_100B17DD8, a1, a3, &v13);
  uint64_t v8 = v13;
  uint64_t v13 = 0LL;
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    uint64_t v10 = v13;
    uint64_t v13 = 0LL;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
  }

  uint64_t v11 = -[CLStepCountSubscriptionAdapter initWithStepCountSubscription:]( objc_alloc(&OBJC_CLASS___CLStepCountSubscriptionAdapter),  "initWithStepCountSubscription:",  a1);
  *(void *)(a1 + sub_10000AE14(v2 - 64) = v11;
  -[CLStepCountSubscriptionAdapter setValid:](v11, "setValid:", 1LL);
  return a1;
}

void sub_100B17DA4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100C6AB50(v1);
  _Unwind_Resume(a1);
}

void sub_100B17DD8(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101870E80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountSubscription::onPedometerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101870E80);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountSubscription::onPedometerNotification, event:%{public, location:escape_o nly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100B1BC3C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B17F90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B17FB4(uint64_t a1)
{
  *(void *)a1 = off_101870DA0;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  [*(id *)(a1 + 64) setValid:0];

  *(void *)(a1 + sub_10000AE14(v2 - 64) = 0LL;
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return sub_100C6AB50(a1);
}

void sub_100B18030(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B17FB4(a1);
  operator delete(v1);
}

void *sub_100B18044@<X0>(uint64_t a1@<X8>)
{
  v48[0] = &off_101870ED0;
  v48[1] = sub_100B18880;
  v48[2] = 0LL;
  uint64_t v49 = v48;
  sub_1010DDBC0(v50, "kCLConnectionMessageStepCountUpdate");
  sub_1008961FC((uint64_t)&v51, (uint64_t)v48);
  uint64_t v45 = &off_101870ED0;
  v46[0] = sub_100B18E08;
  v46[1] = 0LL;
  uint64_t v47 = &v45;
  sub_1010DDBC0(v52, "kCLConnectionMessagePedometerEvent");
  sub_1008961FC((uint64_t)&v53, (uint64_t)&v45);
  v43[0] = &off_101870ED0;
  v43[1] = sub_100B19120;
  v43[2] = 0LL;
  unint64_t v44 = v43;
  sub_1010DDBC0(v54, "kCLConnectionMessageOdometerSuitabilityUpdate");
  sub_1008961FC((uint64_t)&v55, (uint64_t)v43);
  v41[0] = &off_101870F80;
  v41[1] = sub_100B1955C;
  v41[2] = 0LL;
  unint64_t v42 = v41;
  sub_1010DDBC0(v56, "kCLConnectionMessageStartStepCountAvailable");
  sub_1008961FC((uint64_t)&v57, (uint64_t)v41);
  v39[0] = &off_101870F80;
  v39[1] = sub_100B19640;
  v39[2] = 0LL;
  uint64_t v40 = v39;
  sub_1010DDBC0(v58, "kCLConnectionMessageStepCountQuery");
  sub_1008961FC((uint64_t)&v59, (uint64_t)v39);
  v37[0] = &off_101870F80;
  v37[1] = sub_100B19E28;
  _DWORD v37[2] = 0LL;
  uint64_t v38 = v37;
  sub_1010DDBC0(v60, "kCLConnectionMessageStepCountRecordQuery");
  sub_1008961FC((uint64_t)&v61, (uint64_t)v37);
  v35[0] = &off_101870F80;
  v35[1] = sub_100B1A83C;
  id v35[2] = 0LL;
  uint64_t v36 = v35;
  sub_1010DDBC0(v62, "kCLConnectionMessageStepCountReset");
  sub_1008961FC((uint64_t)&v63, (uint64_t)v35);
  v33[0] = &off_101870F80;
  v33[1] = sub_100B1AC68;
  v33[2] = 0LL;
  uint64_t v34 = v33;
  sub_1010DDBC0(v64, "kCLConnectionMessageFloorCountAvailable");
  sub_1008961FC((uint64_t)&v65, (uint64_t)v33);
  v31[0] = &off_101870F80;
  v31[1] = sub_100B1AD50;
  v31[2] = 0LL;
  __int128 v32 = v31;
  sub_1010DDBC0(v66, "kCLConnectionMessagePaceAndCadenceAPIAvailable");
  sub_1008961FC((uint64_t)&v67, (uint64_t)v31);
  v29[0] = &off_101870F80;
  v29[1] = sub_100B1AE38;
  v29[2] = 0LL;
  uint64_t v30 = v29;
  sub_1010DDBC0(v68, "kCLConnectionMessageStrideCalibrationDump");
  sub_1008961FC((uint64_t)&v69, (uint64_t)v29);
  v27[0] = &off_101870F80;
  v27[1] = sub_100B1B508;
  _DWORD v27[2] = 0LL;
  uint64_t v28 = v27;
  sub_1010DDBC0(v70, "kCLConnectionMessagePedometerCalibrationQuery");
  sub_1008961FC((uint64_t)&v71, (uint64_t)v27);
  sub_100B1D2C4(a1, (unsigned __int8 *)v50, 11LL);
  uint64_t v2 = 77LL;
  do
  {
    uint64_t v3 = (void *)v50[v2 - 1];
    if (&v48[v2] == v3)
    {
      uint64_t v3 = &v48[v2];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v47)[v2]) < 0) {
      operator delete((void *)v46[v2]);
    }
    v2 -= 7LL;
  }

  while (v2 * 8);
  uint64_t v5 = v28;
  if (v28 == v27)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v27;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v28)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  uint64_t v7 = v30;
  if (v30 == v29)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v29;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  else if (v30)
  {
    uint64_t v8 = 5LL;
    goto LABEL_19;
  }

  uint64_t v9 = v32;
  if (v32 == v31)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v31;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  else if (v32)
  {
    uint64_t v10 = 5LL;
    goto LABEL_24;
  }

  char v11 = v34;
  if (v34 == v33)
  {
    uint64_t v12 = 4LL;
    char v11 = v33;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

  else if (v34)
  {
    uint64_t v12 = 5LL;
    goto LABEL_29;
  }

  int v13 = v36;
  if (v36 == v35)
  {
    uint64_t v14 = 4LL;
    int v13 = v35;
LABEL_34:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }

  else if (v36)
  {
    uint64_t v14 = 5LL;
    goto LABEL_34;
  }

  unint64_t v15 = v38;
  if (v38 == v37)
  {
    uint64_t v16 = 4LL;
    unint64_t v15 = v37;
LABEL_39:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }

  else if (v38)
  {
    uint64_t v16 = 5LL;
    goto LABEL_39;
  }

  unint64_t v17 = v40;
  if (v40 == v39)
  {
    uint64_t v18 = 4LL;
    unint64_t v17 = v39;
LABEL_44:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }

  else if (v40)
  {
    uint64_t v18 = 5LL;
    goto LABEL_44;
  }

  uint64_t v19 = v42;
  if (v42 == v41)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = v41;
LABEL_49:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }

  else if (v42)
  {
    uint64_t v20 = 5LL;
    goto LABEL_49;
  }

  uint64_t v21 = v44;
  if (v44 == v43)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = v43;
LABEL_54:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }

  else if (v44)
  {
    uint64_t v22 = 5LL;
    goto LABEL_54;
  }

  uint64_t v23 = v47;
  if (v47 == &v45)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = &v45;
LABEL_59:
    (*v23)[v24]();
  }

  else if (v47)
  {
    uint64_t v24 = 5LL;
    goto LABEL_59;
  }

  uint64_t result = v49;
  if (v49 == v48)
  {
    uint64_t v26 = 4LL;
    uint64_t result = v48;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v26))();
  }

  else if (v49)
  {
    uint64_t v26 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v26))();
  }

  return result;
}

void sub_100B18594( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20, char a21, uint64_t a22, uint64_t a23, char *a24, char a25, uint64_t a26, uint64_t a27, char *a28, char a29, uint64_t a30, uint64_t a31, char *a32, char a33, uint64_t a34, uint64_t a35, char *a36, char a37, uint64_t a38, uint64_t a39, char *a40, char a41, uint64_t a42, uint64_t a43, char *a44, char a45, uint64_t a46, uint64_t a47, char *a48, char a49, uint64_t a50,uint64_t a51,char *a52,char a53)
{
  for (uint64_t i = 560LL; i != -56; i -= 56LL)
    sub_10026E430((uint64_t)(&a53 + i));
  uint64_t v55 = a12;
  if (a12 == &a9)
  {
    uint64_t v56 = 4LL;
    uint64_t v55 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_8;
    }
    uint64_t v56 = 5LL;
  }

  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_8:
  uint64_t v57 = a16;
  if (a16 == &a13)
  {
    uint64_t v58 = 4LL;
    uint64_t v57 = &a13;
  }

  else
  {
    if (!a16) {
      goto LABEL_13;
    }
    uint64_t v58 = 5LL;
  }

  (*(void (**)(void))(*(void *)v57 + 8 * v58))();
LABEL_13:
  uint64_t v59 = a20;
  if (a20 == &a17)
  {
    uint64_t v60 = 4LL;
    uint64_t v59 = &a17;
  }

  else
  {
    if (!a20) {
      goto LABEL_18;
    }
    uint64_t v60 = 5LL;
  }

  (*(void (**)(void))(*(void *)v59 + 8 * v60))();
LABEL_18:
  uint64_t v61 = a24;
  if (a24 == &a21)
  {
    uint64_t v62 = 4LL;
    uint64_t v61 = &a21;
  }

  else
  {
    if (!a24) {
      goto LABEL_23;
    }
    uint64_t v62 = 5LL;
  }

  (*(void (**)(void))(*(void *)v61 + 8 * v62))();
LABEL_23:
  uint64_t v63 = a28;
  if (a28 == &a25)
  {
    uint64_t v64 = 4LL;
    uint64_t v63 = &a25;
  }

  else
  {
    if (!a28) {
      goto LABEL_28;
    }
    uint64_t v64 = 5LL;
  }

  (*(void (**)(void))(*(void *)v63 + 8 * v64))();
LABEL_28:
  uint64_t v65 = a32;
  if (a32 == &a29)
  {
    uint64_t v66 = 4LL;
    uint64_t v65 = &a29;
  }

  else
  {
    if (!a32) {
      goto LABEL_33;
    }
    uint64_t v66 = 5LL;
  }

  (*(void (**)(void))(*(void *)v65 + 8 * v66))();
LABEL_33:
  uint64_t v67 = a36;
  if (a36 == &a33)
  {
    uint64_t v68 = 4LL;
    uint64_t v67 = &a33;
  }

  else
  {
    if (!a36) {
      goto LABEL_38;
    }
    uint64_t v68 = 5LL;
  }

  (*(void (**)(void))(*(void *)v67 + 8 * v68))();
LABEL_38:
  uint64_t v69 = a40;
  if (a40 == &a37)
  {
    uint64_t v70 = 4LL;
    uint64_t v69 = &a37;
  }

  else
  {
    if (!a40) {
      goto LABEL_43;
    }
    uint64_t v70 = 5LL;
  }

  (*(void (**)(void))(*(void *)v69 + 8 * v70))();
LABEL_43:
  uint64_t v71 = a44;
  if (a44 == &a41)
  {
    uint64_t v72 = 4LL;
    uint64_t v71 = &a41;
  }

  else
  {
    if (!a44) {
      goto LABEL_48;
    }
    uint64_t v72 = 5LL;
  }

  (*(void (**)(void))(*(void *)v71 + 8 * v72))();
LABEL_48:
  __int128 v73 = a48;
  if (a48 == &a45)
  {
    uint64_t v74 = 4LL;
    __int128 v73 = &a45;
  }

  else
  {
    if (!a48) {
      goto LABEL_53;
    }
    uint64_t v74 = 5LL;
  }

  (*(void (**)(void))(*(void *)v73 + 8 * v74))();
LABEL_53:
  id v75 = a52;
  if (a52 == &a49)
  {
    uint64_t v76 = 4LL;
    id v75 = &a49;
  }

  else
  {
    if (!a52) {
      goto LABEL_58;
    }
    uint64_t v76 = 5LL;
  }

  (*(void (**)(void))(*(void *)v75 + 8 * v76))();
LABEL_58:
  _Unwind_Resume(a1);
}

void sub_100B18834()
{
}

void sub_100B18840()
{
}

void sub_100B1884C()
{
}

void sub_100B18858()
{
}

void sub_100B18864()
{
}

void sub_100B18870()
{
}

void sub_100B18880(uint64_t a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101870EA0);
  }
  uint64_t v5 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v31 = 2048;
    uint64_t v32 = a1;
    __int16 v33 = 1024;
    int v34 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "StepCount subscription changed, %@, %p, %d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v14 = *(void *)(a1 + 24);
    int v24 = 138412802;
    uint64_t v25 = v14;
    __int16 v26 = 2048;
    uint64_t v27 = a1;
    __int16 v28 = 1024;
    int v29 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "StepCount subscription changed, %@, %p, %d",  &v24,  28);
    uint64_t v16 = (char *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleRequestStepCountUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  if ((sub_1010350BC() & 1) != 0)
  {
    if ((sub_100C6ADE0(a1) & 1) != 0)
    {
      if (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 8), "vendor"),  "proxyForService:",  @"CLStepCountNotifier"),  "syncgetEnabled"))
      {
        sub_100C6AC8C(a1);
        uint64_t v7 = *(void *)(a1 + 48);
        uint64_t v9 = *(void *)(v7 + 8);
        uint64_t v8 = *(void **)(v7 + 16);
        if (a2) {
          [v8 register:v9 forNotification:0 registrationInfo:0];
        }
        else {
          [v8 unregister:v9 forNotification:0];
        }
      }

      else
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101870EA0);
        }
        char v11 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Cannot subscribe to step count updates as step counting is not enabled",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101870EA0);
          }
          LOWORD(v24) = 0;
          LODWORD(v19) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Cannot subscribe to step count updates as step counting is not enabled",  &v24,  v19);
          int v13 = (char *)v12;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleRequestStepCountUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v12);
          if (v13 != buf) {
            free(v13);
          }
        }
      }
    }

    else
    {
      uint64_t v20 = CMErrorMessage;
      uint64_t v21 = &off_1018D4058;
      *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL);
      sub_100B1C4C8(a1, buf);
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v10 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Cannot subscribe to step count updates, step counting is not available",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v24) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Cannot subscribe to step count updates, step counting is not available",  &v24,  v19);
      uint64_t v18 = (char *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleRequestStepCountUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    uint64_t v22 = CMErrorMessage;
    uint64_t v23 = &off_1018D4040;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL);
    sub_100B1C4C8(a1, buf);
  }
}

void sub_100B18DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B18E08(uint64_t a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101870EA0);
  }
  uint64_t v5 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v24 = 2048;
    uint64_t v25 = a1;
    __int16 v26 = 1024;
    int v27 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PedometerEvent subscription changed, %@, %p, %d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    int v17 = 138412802;
    uint64_t v18 = v10;
    __int16 v19 = 2048;
    uint64_t v20 = a1;
    __int16 v21 = 1024;
    int v22 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "PedometerEvent subscription changed, %@, %p, %d",  &v17,  28);
    uint64_t v12 = (char *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleRequestPedometerEvent(BOOL, const CLNameValuePair &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  if ((sub_100C6ADE0(a1) & 1) != 0)
  {
    sub_1004F2598();
    if ((sub_1004F97F4() & 0x100000000LL) != 0)
    {
      sub_100C6AC8C(a1);
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(v7 + 8);
      uint64_t v8 = *(void **)(v7 + 16);
      if (a2) {
        [v8 register:v9 forNotification:2 registrationInfo:0];
      }
      else {
        [v8 unregister:v9 forNotification:2];
      }
    }

    else
    {
      uint64_t v13 = CMErrorMessage;
      uint64_t v14 = &off_1018D4070;
      *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL);
      sub_100B1C568(a1, buf);
    }
  }

  else
  {
    uint64_t v15 = CMErrorMessage;
    uint64_t v16 = &off_1018D4058;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL);
    sub_100B1C568(a1, buf);
  }
}

void sub_100B190E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B19120(uint64_t a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101870EA0);
  }
  uint64_t v5 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v28 = 2048;
    uint64_t v29 = a1;
    __int16 v30 = 1024;
    int v31 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "OdometerSuitabilityUpdate subscription changed, %@, %p, %d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v11 = *(void *)(a1 + 24);
    int v21 = 138412802;
    uint64_t v22 = v11;
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    int v26 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "OdometerSuitabilityUpdate subscription changed, %@, %p, %d",  &v21,  28);
    uint64_t v13 = (char *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleRequestOdometerSuitabilityUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  if ((sub_1010350BC() & 1) != 0)
  {
    if ((sub_100C6ADE0(a1) & 1) != 0)
    {
      sub_100C6AC8C(a1);
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(v7 + 8);
      uint64_t v8 = *(void **)(v7 + 16);
      if (a2) {
        [v8 register:v9 forNotification:3 registrationInfo:0];
      }
      else {
        [v8 unregister:v9 forNotification:3];
      }
    }

    else
    {
      uint64_t v17 = CMErrorMessage;
      uint64_t v18 = &off_1018D4058;
      *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL);
      sub_100B1C608(a1, buf);
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v10 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Cannot subscribe to step count updates, step counting is not available",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v21) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Cannot subscribe to step count updates, step counting is not available",  &v21,  v16);
      uint64_t v15 = (char *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleRequestOdometerSuitabilityUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    uint64_t v19 = CMErrorMessage;
    uint64_t v20 = &off_1018D4040;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL);
    sub_100B1C608(a1, buf);
  }
}

void sub_100B1951C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B1955C(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v4 = CMAvailable;
  uint64_t v5 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_1010350BC());
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  CLConnectionMessage::sendReply(*a2);
}

void sub_100B19618(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100B19640(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_1010350BC() & 1) == 0)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v14 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "query for step count was received but step counts were not available",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v44[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "query for step count was received but step counts were not available",  v44,  2);
      uint64_t v36 = (uint8_t *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v35);
      if (v36 != buf) {
        free(v36);
      }
    }

    uint64_t v6 = *a2;
    uint64_t v55 = CMErrorMessage;
    uint64_t v56 = &off_1018D4040;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v56,  &v55,  1LL);
    goto LABEL_15;
  }

  char v5 = sub_100C6ADE0(a1);
  uint64_t v6 = *a2;
  if ((v5 & 1) == 0)
  {
    uint64_t v53 = CMErrorMessage;
    uint64_t v54 = &off_1018D4058;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v54,  &v53,  1LL);
LABEL_15:
    CLConnectionMessage::sendReply(v6);
    goto LABEL_22;
  }

  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  uint64_t v8 = Dictionary;
  if (Dictionary
    && (id v9 = [Dictionary objectForKeyedSubscript:CMPedometerStartTime]) != 0
    && (id v10 = [v8 objectForKeyedSubscript:CMPedometerStopTime]) != 0)
  {
    [v9 doubleValue];
    v44[0] = v11;
    [v10 doubleValue];
    double v43 = v12;
    if (v44[0] > v12)
    {
      uint64_t v13 = *a2;
      uint64_t v49 = CMErrorMessage;
      unint64_t v50 = &off_1018D40A0;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v50,  &v49,  1LL);
      CLConnectionMessage::sendReply(v13);
      goto LABEL_22;
    }

    id v17 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLStepCountNotifier");
    if ([v17 syncgetEnabled] && v17)
    {
      [v17 syncgetQueryStartTime:v44 andStopTime:&v43];
      uint64_t v18 = *(unsigned int *)buf;
      double v19 = v58;
      uint64_t v21 = v59;
      uint64_t v20 = v60;
      double v22 = v61;
      unsigned int v23 = v62;
    }

    else
    {
      unsigned int v23 = 0;
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
      uint64_t v18 = 0LL;
      double v22 = 0.0;
      double v19 = 0.0;
    }

    id v24 = [v17 syncgetDbUUID];

    if (v24)
    {
      __int16 v25 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v24);
      if (v25)
      {
        int v26 = objc_alloc(&OBJC_CLASS___CMPedometerData);
        double v28 = v43;
        double v27 = v44[0];
        if (*(_BYTE *)(a1 + 56))
        {
          uint64_t v29 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v21);
          if (*(_BYTE *)(a1 + 56))
          {
            __int16 v30 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v20);
LABEL_40:
            if (*(_BYTE *)(a1 + 57)) {
              __int16 v33 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v22);
            }
            else {
              __int16 v33 = 0LL;
            }
            LODWORD(v41) = 0;
            int v34 = -[CMPedometerData initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:]( v26,  "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:current Cadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:eleva tionAscended:elevationDescended:distanceSource:",  v18,  v29,  v30,  0LL,  0LL,  0LL,  v27,  v28,  v19,  0.0,  v33,  v25,  0LL,  0LL,  v23,  0LL,  0LL,  v41);
            uint64_t v47 = CMPedometerDataObject;
            uint64_t v48 = v34;
            +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v48,  &v47,  1LL);

            CLConnectionMessage::sendReply(*a2);
            goto LABEL_22;
          }
        }

        else
        {
          uint64_t v29 = 0LL;
        }

        __int16 v30 = 0LL;
        goto LABEL_40;
      }
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    int v31 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Error querying step count data", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      __int16 v42 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Error querying step count data",  &v42,  2);
      uint64_t v40 = (uint8_t *)v39;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v39);
      if (v40 != buf) {
        free(v40);
      }
    }

    uint64_t v32 = *a2;
    uint64_t v45 = CMErrorMessage;
    uint64_t v46 = &off_1018D4070;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL);
    CLConnectionMessage::sendReply(v32);
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v15 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "Programmer error: Wrong parameters were passed!",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v44[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Programmer error: Wrong parameters were passed!",  v44,  2);
      uint64_t v38 = (uint8_t *)v37;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }

    uint64_t v16 = *a2;
    uint64_t v51 = CMErrorMessage;
    unint64_t v52 = &off_1018D4088;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v52,  &v51,  1LL);
    CLConnectionMessage::sendReply(v16);
  }

void sub_100B19DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B19E28(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(__p, "com.apple.locationd.natalimetry");
  char v5 = sub_100C6AC9C(a1);
  char v6 = v5;
  if ((v91 & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0) {
      goto LABEL_3;
    }
LABEL_37:
    uint64_t v38 = *a2;
    uint64_t v92 = CMErrorMessage;
    __int128 v93 = &off_1018D4058;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v93,  &v92,  1LL);
LABEL_45:
    CLConnectionMessage::sendReply(v38);
    goto LABEL_46;
  }

  operator delete(__p[0]);
  if ((v6 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_3:
  if ((sub_1010350BC() & 1) == 0)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v39 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "query for step count was received but step counts were not available",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v75) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "query for step count was received but step counts were not available",  &v75,  2);
      uint64_t v45 = (void **)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v44);
      if (v45 != __p) {
        free(v45);
      }
    }

    uint64_t v38 = *a2;
    uint64_t v88 = CMErrorMessage;
    __int128 v89 = &off_1018D4040;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v89,  &v88,  1LL);
    goto LABEL_45;
  }

  if ((sub_100C6ADE0(a1) & 1) == 0)
  {
    uint64_t v38 = *a2;
    uint64_t v86 = CMErrorMessage;
    __int16 v87 = &off_1018D4058;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v87,  &v86,  1LL);
    goto LABEL_45;
  }

  objc_opt_class(&OBJC_CLASS___CMPedometerData);
  uint64_t v8 = v7;
  *(void *)&double v9 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses( *a2,  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v8, v9, v10, 0LL));
  double v12 = DictionaryOfClasses;
  if (DictionaryOfClasses
    && (uint64_t v13 = CMPedometerDataObject, [DictionaryOfClasses objectForKeyedSubscript:CMPedometerDataObject]))
  {
    id v14 = [v12 objectForKeyedSubscript:v13];
    unsigned int v15 = objc_msgSend(objc_msgSend(v14, "numberOfSteps"), "integerValue");
    objc_msgSend(objc_msgSend(v14, "distance"), "doubleValue");
    uint64_t v17 = v16;
    unsigned int v18 = [v14 recordId];
    id v19 = objc_msgSend(objc_msgSend(v14, "sourceId"), "UUIDString");
    sub_100222B94(v78, (uint64_t)"CLDaemonClient.StepCountRecordQuery", 0);
    id v75 = 0LL;
    uint64_t v76 = 0LL;
    uint64_t v77 = 0LL;
    id v20 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLStepCountNotifier");
    memset(v60, 0, sizeof(v60));
    unsigned int v61 = v15;
    int v62 = 0;
    uint64_t v63 = v17;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    uint64_t v67 = 0LL;
    unsigned int v68 = v18;
    int v69 = 0;
    id v70 = v19;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    id v21 = [v20 syncgetQueryPedometerDataSince:v60 withResponseArray:&v75];
    if ((_DWORD)v21 == 100)
    {
      uint64_t v53 = v4;
      double v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      unint64_t v52 = a2;
      uint64_t v54 = v76;
      uint64_t v55 = v22;
      if (v75 != v76)
      {
        unsigned int v23 = (char *)v75 + 88;
        do
        {
          if (*((void *)v23 + 2)) {
            id v24 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  *((void *)v23 + 2));
          }
          else {
            id v24 = 0LL;
          }
          __int16 v25 = objc_alloc(&OBJC_CLASS___CMPedometerData);
          double v26 = *((double *)v23 - 10);
          unsigned int v59 = *((_DWORD *)v23 - 16);
          double v27 = *((double *)v23 - 7);
          if (*(_BYTE *)(a1 + 56))
          {
            double v58 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v23 - 6));
            if (*(_BYTE *)(a1 + 56))
            {
              uint64_t v57 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v23 - 5));
              goto LABEL_18;
            }
          }

          else
          {
            double v58 = 0LL;
          }

          uint64_t v57 = 0LL;
LABEL_18:
          double v28 = 0.0;
          uint64_t v56 = *((int *)v23 + 2);
          if (!*(_BYTE *)(a1 + 57))
          {
            __int16 v30 = 0LL;
            uint64_t v29 = 0LL;
            goto LABEL_26;
          }

          if (*((double *)v23 - 2) == 0.0)
          {
            uint64_t v29 = 0LL;
          }

          else
          {
            uint64_t v29 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
            if (!*(_BYTE *)(a1 + 57))
            {
              __int16 v30 = 0LL;
LABEL_26:
              int v31 = 0LL;
              goto LABEL_29;
            }
          }

          if (*((double *)v23 - 1) == 0.0)
          {
            __int16 v30 = 0LL;
          }

          else
          {
            __int16 v30 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
            if (!*(_BYTE *)(a1 + 57)) {
              goto LABEL_26;
            }
          }

          double v28 = *((double *)v23 - 9);
          int v31 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)v23);
LABEL_29:
          unsigned int v33 = *((_DWORD *)v23 + 14);
          unsigned int v32 = *((_DWORD *)v23 + 15);
          if (!*(_BYTE *)(a1 + 58))
          {
            int v34 = 0LL;
LABEL_33:
            uint64_t v35 = 0LL;
            goto LABEL_34;
          }

          int v34 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v23 + 17));
          if (!*(_BYTE *)(a1 + 58)) {
            goto LABEL_33;
          }
          uint64_t v35 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v23 + 18));
LABEL_34:
          LODWORD(v51) = v23[78];
          uint64_t v36 = -[CMPedometerData initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:]( v25,  "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCa dence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevation Ascended:elevationDescended:distanceSource:",  v59,  v58,  v57,  v56,  v29,  v30,  v26,  v26,  v27,  v28,  v31,  v24,  0LL,  0LL,  __PAIR64__(v32, v33),  v34,  v35,  v51);
          -[NSMutableArray addObject:](v55, "addObject:", v36);

          __int16 v37 = v23 + 88;
          v23 += 176;
        }

        while (v37 != v54);
      }

      uint64_t v79 = CMPedometerDataArray;
      int v80 = v55;
      uint64_t v4 = v53;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v80,  &v79,  1LL);

      CLConnectionMessage::sendReply(*v52);
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      __int16 v42 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = (_DWORD)v21;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "Error querying pedometer data, %{public}d",  (uint8_t *)__p,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101870EA0);
        }
        v83[0] = 67240192;
        v83[1] = (_DWORD)v21;
        LODWORD(v50) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Error querying pedometer data, %{public}d",  v83,  v50);
        uint64_t v49 = (void **)v48;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v48);
        if (v49 != __p) {
          free(v49);
        }
      }

      double v43 = *a2;
      uint64_t v81 = CMErrorMessage;
      __int16 v82 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v21);
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v82,  &v81,  1LL);
      CLConnectionMessage::sendReply(v43);
    }

    if (v75)
    {
      uint64_t v76 = (char *)v75;
      operator delete(v75);
    }

    sub_1001BA1BC(v78);
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v40 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "Programmer error: Wrong parameters were passed!",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v75) = 0;
      LODWORD(v50) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Programmer error: Wrong parameters were passed!",  &v75,  v50);
      uint64_t v47 = (void **)v46;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v46);
      if (v47 != __p) {
        free(v47);
      }
    }

    uint64_t v41 = *a2;
    uint64_t v84 = CMErrorMessage;
    __int16 v85 = &off_1018D40A0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v85,  &v84,  1LL);
    CLConnectionMessage::sendReply(v41);
  }

void sub_100B1A79C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, uint64_t a49, uint64_t a50,id a51)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1001BA1BC(&a51);

  _Unwind_Resume(a1);
}

void sub_100B1A83C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_1010350BC() & 1) != 0)
  {
    sub_1010DDBC0(buf, "com.apple.locationd.activity");
    char v3 = sub_100C6AC9C(a1);
    char v4 = v3;
    if (v20 < 0)
    {
      operator delete(*(void **)buf);
      if ((v4 & 1) != 0) {
        goto LABEL_4;
      }
    }

    else if ((v3 & 1) != 0)
    {
LABEL_4:
      objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "reset");
      goto LABEL_18;
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    char v6 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have appropriate entitlement to access motion activity spi",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      uint64_t v10 = *(void *)(a1 + 24);
      int v15 = 138412290;
      uint64_t v16 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "#Warning Client %@ does not have appropriate entitlement to access motion activity spi",  &v15,  12);
      double v12 = (char *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleMessageStepCountReset(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    uint64_t v13 = CMErrorMessage;
    id v14 = &off_1018D40B8;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL);
    sub_100B1C6A8(a1, buf);
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    char v5 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Step count reset failed as it was not available!",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Step count reset failed as it was not available!",  &v15,  2);
      double v9 = (char *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleMessageStepCountReset(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    uint64_t v17 = CMErrorMessage;
    unsigned int v18 = &off_1018D4040;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL);
    sub_100B1C6A8(a1, buf);
  }

void sub_100B1AC10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_100B1AC68(uint64_t a1, uint64_t *a2)
{
  char v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v4 = *a2;
  uint64_t v5 = CMAvailable;
  char v6 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_1010350E8());
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL);
  CLConnectionMessage::sendReply(v4);
}

void sub_100B1AD28(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100B1AD50(uint64_t a1, uint64_t *a2)
{
  char v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v4 = *a2;
  uint64_t v5 = CMAvailable;
  char v6 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_101035118());
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL);
  CLConnectionMessage::sendReply(v4);
}

void sub_100B1AE10(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100B1AE38(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.activity");
  char v5 = sub_100C6AC9C(a1);
  char v6 = v5;
  if ((v38 & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0) {
      goto LABEL_3;
    }
LABEL_19:
    uint64_t v16 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v39 = CMErrorMessage;
    uint64_t v40 = &off_1018D4058;
    CLConnectionMessage::sendReply( v16,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v40,  &v39,  1LL));
    goto LABEL_32;
  }

  operator delete(*(void **)buf);
  if ((v6 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_3:
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101870EA0);
  }
  uint64_t v7 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "CLDaemonClient received StrideCalibrationDump request,client,%@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v21 = *(void *)(a1 + 24);
    int v35 = 138412290;
    uint64_t v36 = v21;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "CLDaemonClient received StrideCalibrationDump request,client,%@",  &v35,  12);
    unsigned int v23 = (char *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

  if ((sub_1010350BC() & 1) != 0)
  {
    id v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLStepCountNotifier");
    objc_msgSend(v9, "registerDelegate:inSilo:", *(void *)(a1 + 64), objc_msgSend(*(id *)(a1 + 8), "silo"));
    if (v9)
    {
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3321888768LL;
      v29[2] = sub_100B1C748;
      void v29[3] = &unk_101870DC0;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      v29[4] = *a2;
      __int16 v30 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }

      [v9 getPedometerBinsAndHistoryWithReply:v29];

      uint64_t v13 = v30;
      if (v30)
      {
        id v14 = (unint64_t *)&v30->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }

      goto LABEL_34;
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    id v19 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cannot find step count proxy", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v35) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Cannot find step count proxy",  &v35,  v28);
      double v27 = (char *)v26;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    uint64_t v20 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v31 = CMErrorMessage;
    unsigned int v32 = &off_1018D4040;
    CLConnectionMessage::sendReply( v20,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v17 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Step count notifier not available", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v35) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Step count notifier not available",  &v35,  v28);
      __int16 v25 = (char *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v24);
      if (v25 != buf) {
        free(v25);
      }
    }

    uint64_t v18 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v33 = CMErrorMessage;
    int v34 = &off_1018D4040;
    CLConnectionMessage::sendReply( v18,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
  }

void sub_100B1B488( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  _Unwind_Resume(a1);
}

void sub_100B1B508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  char v5 = sub_100C6ADE0(a1);
  char v6 = *(CLConnectionMessage **)a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    uint64_t v8 = Dictionary;
    if (Dictionary
      && (uint64_t v9 = CMPedometerCalibrationTypeId,
          [Dictionary objectForKeyedSubscript:CMPedometerCalibrationTypeId])
      && (uint64_t v10 = CMPedometerFetchRemoteCalibrations,
          [v8 objectForKeyedSubscript:CMPedometerFetchRemoteCalibrations]))
    {
      unsigned int v11 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v10), "BOOLValue");
      id v12 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v9), "integerValue");
      if (v11)
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101870EA0);
        }
        uint64_t v13 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "received request for remote pedometer calibrations",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101870EA0);
          }
          v44[0] = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "received request for remote pedometer calibrations",  v44,  2);
          int v34 = (uint8_t *)v33;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v33);
          if (v34 != buf) {
            free(v34);
          }
        }

        id v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLMotionSyncStore");
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3321888768LL;
        v42[2] = sub_100B1C750;
        v42[3] = &unk_101870DF0;
        uint64_t v16 = *(CLConnectionMessage **)a2;
        unint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
        v42[4] = v12;
        v42[5] = v16;
        double v43 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            unint64_t v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }

        [v14 doAsync:v42];
        id v19 = v43;
        if (v43)
        {
          uint64_t v20 = (unint64_t *)&v43->__shared_owners_;
          do
            unint64_t v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }

      else
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101870EA0);
        }
        unsigned int v23 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "received request for pedometer calibrations",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101870EA0);
          }
          v44[0] = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "received request for pedometer calibrations",  v44,  2);
          uint64_t v36 = (uint8_t *)v35;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v35);
          if (v36 != buf) {
            free(v36);
          }
        }

        id v24 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLStepCountNotifier");
        objc_msgSend(v24, "registerDelegate:inSilo:", *(void *)(a1 + 64), objc_msgSend(*(id *)(a1 + 8), "silo"));
        if (v24)
        {
          v40[0] = _NSConcreteStackBlock;
          v40[1] = 3321888768LL;
          v40[2] = sub_100B1CB4C;
          v40[3] = &unk_101870E20;
          __int16 v25 = *(std::__shared_weak_count **)(a2 + 8);
          v40[4] = *(void *)a2;
          uint64_t v41 = v25;
          if (v25)
          {
            double v26 = (unint64_t *)&v25->__shared_owners_;
            do
              unint64_t v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }

          [v24 getPedometerCalibrationBins:v12 withReply:v40];
          uint64_t v28 = v41;
          if (v41)
          {
            uint64_t v29 = (unint64_t *)&v41->__shared_owners_;
            do
              unint64_t v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }

        else
        {
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101870EA0);
          }
          uint64_t v31 = (os_log_s *)qword_101934518;
          if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Cannot find step count proxy", buf, 2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934510 != -1) {
              dispatch_once(&qword_101934510, &stru_101870EA0);
            }
            v44[0] = 0;
            LODWORD(v39) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Cannot find step count proxy",  v44,  v39);
            char v38 = (uint8_t *)v37;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v37);
            if (v38 != buf) {
              free(v38);
            }
          }

          unsigned int v32 = *(CLConnectionMessage **)a2;
          uint64_t v45 = CMErrorMessage;
          uint64_t v46 = &off_1018D4058;
          +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL);
          CLConnectionMessage::sendReply(v32);
        }
      }
    }

    else
    {
      double v22 = *(CLConnectionMessage **)a2;
      uint64_t v48 = CMErrorMessage;
      uint64_t v49 = &off_1018D40A0;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v49,  &v48,  1LL);
      CLConnectionMessage::sendReply(v22);
    }
  }

  else
  {
    uint64_t v50 = CMErrorMessage;
    uint64_t v51 = &off_1018D4058;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v51,  &v50,  1LL);
    CLConnectionMessage::sendReply(v6);
  }
}

void sub_100B1BBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B1BC3C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  if (*a3 == 2)
  {
    id v14 = -[NSDate initWithTimeIntervalSinceReferenceDate:]( objc_alloc(&OBJC_CLASS___NSDate),  "initWithTimeIntervalSinceReferenceDate:",  *(double *)a4);
    unint64_t v15 = -[CMPedometerEvent initWithEventDate:type:]( objc_alloc(&OBJC_CLASS___CMPedometerEvent),  "initWithEventDate:type:",  v14,  *((unsigned int *)a4 + 2));
    sub_1004F2598();
    if (sub_1004F8A40())
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      uint64_t v16 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *((unsigned int *)a4 + 2);
        double v18 = *(double *)a4;
        uint64_t v19 = *(void *)(a1 + 24);
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v17;
        __int16 v62 = 2048;
        double v63 = v18;
        __int16 v64 = 2112;
        uint64_t v65 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Sending pedometer event,%ld,eventTime,%.3f,%@",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101870EA0);
        }
        int v34 = (CMPedometerData *)*((unsigned int *)a4 + 2);
        double v35 = *(double *)a4;
        uint64_t v36 = *(void *)(a1 + 24);
        int v53 = 134218498;
        uint64_t v54 = v34;
        __int16 v55 = 2048;
        double v56 = v35;
        __int16 v57 = 2112;
        uint64_t v58 = v36;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Sending pedometer event,%ld,eventTime,%.3f,%@",  &v53,  32);
        char v38 = (char *)v37;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, con st CLStepCountNotifier_Type::NotificationData &)",  "%s\n",  v37);
        if (v38 != buf) {
          free(v38);
        }
      }
    }

    uint64_t v51 = CMPedometerEventKey;
    unint64_t v52 = v15;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v52,  &v51,  1LL);

    sub_100B1C420(a1, buf);
  }

  else
  {
    if (*a3) {
      return;
    }
    if (a4[13])
    {
      char v6 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", a4[13]);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = objc_alloc(&OBJC_CLASS___CMPedometerData);
        double v9 = *((double *)a4 + 1);
        unsigned int v10 = *((_DWORD *)a4 + 6);
        double v11 = *((double *)a4 + 4);
        if (*(_BYTE *)(a1 + 56))
        {
          id v12 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a4 + 16));
          if (*(_BYTE *)(a1 + 56))
          {
            uint64_t v13 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a4 + 17));
            goto LABEL_26;
          }
        }

        else
        {
          id v12 = 0LL;
        }

        uint64_t v13 = 0LL;
LABEL_26:
        double v23 = 0.0;
        uint64_t v50 = v8;
        unsigned int v49 = v10;
        uint64_t v47 = v13;
        uint64_t v48 = v12;
        uint64_t v46 = *((int *)a4 + 24);
        if (*(_BYTE *)(a1 + 57))
        {
          if (*((double *)a4 + 9) == 0.0)
          {
            uint64_t v45 = 0LL;
          }

          else
          {
            uint64_t v45 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
            if (!*(_BYTE *)(a1 + 57))
            {
              unint64_t v44 = 0LL;
LABEL_34:
              id v24 = 0LL;
              goto LABEL_37;
            }
          }

          if (*((double *)a4 + 10) == 0.0)
          {
            unint64_t v44 = 0LL;
          }

          else
          {
            unint64_t v44 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
            if (!*(_BYTE *)(a1 + 57)) {
              goto LABEL_34;
            }
          }

          double v23 = *((double *)a4 + 2);
          id v24 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *((double *)a4 + 11));
LABEL_37:
          __int16 v25 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *((unsigned __int8 *)a4 + 112));
          double v26 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *((unsigned __int8 *)a4 + 113));
          unsigned int v28 = *((_DWORD *)a4 + 36);
          unsigned int v27 = *((_DWORD *)a4 + 37);
          if (*(_BYTE *)(a1 + 58))
          {
            uint64_t v29 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a4 + 39));
            if (*(_BYTE *)(a1 + 58))
            {
              unint64_t v30 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a4 + 40));
LABEL_42:
              LODWORD(v43) = *((unsigned __int8 *)a4 + 166);
              uint64_t v31 = -[CMPedometerData initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:]( v50,  "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:curre ntCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:e levationAscended:elevationDescended:distanceSource:",  v49,  v48,  v47,  v46,  v45,  v44,  v9,  v9,  v11,  v23,  v24,  v7,  v25,  v26,  __PAIR64__(v27, v28),  v29,  v30,  v43);
              if (qword_101934510 != -1) {
                dispatch_once(&qword_101934510, &stru_101870EA0);
              }
              unsigned int v32 = (os_log_s *)qword_101934518;
              if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
              {
                double v33 = *(double *)(a1 + 24);
                *(_DWORD *)buf = 138412546;
                *(void *)&uint8_t buf[4] = v31;
                __int16 v62 = 2112;
                double v63 = v33;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%@ -> %@", buf, 0x16u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934510 != -1) {
                  dispatch_once(&qword_101934510, &stru_101870EA0);
                }
                double v39 = *(double *)(a1 + 24);
                int v53 = 138412546;
                uint64_t v54 = v31;
                __int16 v55 = 2112;
                double v56 = v39;
                LODWORD(v42) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "%@ -> %@",  &v53,  v42);
                uint64_t v41 = (char *)v40;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notificatio n &, const CLStepCountNotifier_Type::NotificationData &)",  "%s\n",  v40);
                if (v41 != buf) {
                  free(v41);
                }
              }

              uint64_t v59 = CMPedometerDataObject;
              unsigned int v60 = v31;
              *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v60,  &v59,  1LL);

              sub_100B1C378(a1, buf);
              return;
            }
          }

          else
          {
            uint64_t v29 = 0LL;
          }

          unint64_t v30 = 0LL;
          goto LABEL_42;
        }

        unint64_t v44 = 0LL;
        uint64_t v45 = 0LL;
        goto LABEL_34;
      }
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v20 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Error in step count update", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      LOWORD(v53) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Error in step count update",  &v53,  2);
      double v22 = (char *)v21;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }
  }

void sub_100B1C378(uint64_t a1, void *a2)
{
  char v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B1C40C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B1C420(uint64_t a1, void *a2)
{
  char v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B1C4B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B1C4C8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100272EB8(&off_101870FF0, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v2 + 24LL))(v2, &v6, 0LL);
  char v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B1C554(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B1C568(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100272EB8(&off_101870FF8, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v2 + 24LL))(v2, &v6, 0LL);
  char v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B1C5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B1C608(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100272EB8(&off_101871000, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v2 + 24LL))(v2, &v6, 0LL);
  char v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B1C694(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B1C6A8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100272EB8(&off_101871008, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v2 + 24LL))(v2, &v6, 0LL);
  char v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B1C734(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B1C748(uint64_t a1)
{
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

uint64_t sub_100B1C750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 256LL))(a2);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    if (v5 != 1)
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      double v11 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Requested calibration type not recognized",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101870EA0);
        }
        v20[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Requested calibration type not recognized",  v20,  2);
        uint64_t v17 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v16);
        if (v17 != buf) {
          free(v17);
        }
      }

      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v23 = CMErrorMessage;
      id v24 = &off_1018D40A0;
      uint64_t v13 = &v24;
      id v14 = &v23;
      goto LABEL_21;
    }

    uint64_t v6 = 31LL;
  }

  else
  {
    uint64_t v6 = 30LL;
  }

  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8 * v6))(a2);
  uint64_t v8 = +[NSMutableDictionary dictionaryWithCapacity:](&OBJC_CLASS___NSMutableDictionary, "dictionaryWithCapacity:", 2LL);
  double v9 = v8;
  if (v4) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v4,  CLMotionSyncStoreLastUpdate);
  }
  if (v7)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  v7,  CMPedometerCalibrationBins);
    return CLConnectionMessage::sendReply(*(void *)(a1 + 40));
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101870EA0);
  }
  unint64_t v15 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "No remote pedometer calibrations available",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    v20[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "No remote pedometer calibrations available",  v20,  2);
    uint64_t v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v21 = CMErrorMessage;
  double v22 = &off_1018D4070;
  uint64_t v13 = &v22;
  id v14 = &v21;
LABEL_21:
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  v14,  1LL);
  return CLConnectionMessage::sendReply(v12);
}

uint64_t sub_100B1CB4C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    v15[0] = CMPedometerCalibrationBins;
    v15[1] = CLMotionSyncStoreLastUpdate;
    v16[0] = a2;
    v16[1] = +[NSDate date](&OBJC_CLASS___NSDate, "date");
    uint64_t v4 = (_UNKNOWN ***)v16;
    uint64_t v5 = v15;
    uint64_t v6 = 2LL;
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101870EA0);
    }
    uint64_t v7 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No pedometer calibrations available", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101870EA0);
      }
      v11[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "No pedometer calibrations available",  v11,  2);
      unsigned int v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v12 = CMErrorMessage;
    uint64_t v13 = &off_1018D4070;
    uint64_t v4 = &v13;
    uint64_t v5 = &v12;
    uint64_t v6 = 1LL;
  }

  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v5,  v6);
  return CLConnectionMessage::sendReply(v3);
}

void sub_100B1CD6C(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B1CD98(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

__n128 sub_100B1CDC4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101870ED0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100B1CE00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101870ED0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100B1CE24(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_100B1CE2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100B1CE68()
{
}

void sub_100B1CE74(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100B1CEF8(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B1CEE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B1CEF8(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    unsigned int v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101870F40);
    }
    double v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101870F40);
      }
    }

    uint64_t v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_100B1D0DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B1D0F8(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100B1D124(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101870F80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100B1D160(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101870F80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100B1D184(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100B1D18C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100B1D1C8()
{
}

void sub_100B1D1D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  unint64_t v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    unint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  int v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  unsigned int v10 = v17;
  if (v17)
  {
    double v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    uint64_t v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100B1D2A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100B1D2C4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100B1D33C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100B1D328(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100B1D33C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100B1D5BC(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  double v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *double v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100B1D5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100B1D5BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100B1D630(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100B1D618(_Unwind_Exception *a1)
{
}

void *sub_100B1D630(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100B1D688(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100B1D6A4()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199A968, (void *)&_mh_execute_header);
}

double sub_100B1D6E8(uint64_t a1, int a2)
{
  *(void *)a1 = off_10182F2C0;
  *(_DWORD *)(a1 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

void sub_100B1D70C(uint64_t a1, uint64_t a2)
{
}

void sub_100B1D718(uint64_t a1, uint64_t a2, double a3)
{
  double v5 = *(double *)a2;
  if (*(double *)a2 < a3)
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101871010);
    }
    uint64_t v6 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = *(_DWORD *)(a1 + 8) - 1;
      if (v7 > 2) {
        unint64_t v8 = "Unknown";
      }
      else {
        unint64_t v8 = off_101871030[v7];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(double *)&buf[14] = v5;
      __int16 v49 = 2050;
      double v50 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning FitnessMinuteEstimatorYouth (%{public}s), Invalid timestamps - ignored the epoch, epochStartTime:%{publ ic}.3f, epochDuration:%{public}.3f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101871010);
      }
      unsigned int v14 = *(_DWORD *)(a1 + 8) - 1;
      if (v14 > 2) {
        unint64_t v15 = "Unknown";
      }
      else {
        unint64_t v15 = off_101871030[v14];
      }
      int v42 = 136446722;
      uint64_t v43 = v15;
      __int16 v44 = 2050;
      double v45 = v5;
      __int16 v46 = 2050;
      double v47 = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#Warning FitnessMinuteEstimatorYouth (%{public}s), Invalid timestamps - ignored the epoch, epochStartTime:%{publ ic}.3f, epochDuration:%{public}.3f",  &v42,  32);
      double v35 = (char *)v34;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGenericFitnessMinuteEstimatorYouth::slideActivityWindowYouth(CFTimeInterval, const CLMotionStateMediator_ Type::MediatedMotionActivity &)",  "%s\n",  v34);
      if (v35 != buf) {
        free(v35);
      }
    }

    return;
  }

  uint64_t v10 = *(void *)(a1 + 56);
  if (v10
    && v5 < *(double *)(*(void *)(*(void *)(a1 + 24) + 8 * ((v10 + *(void *)(a1 + 48) - 1) / 0xAAuLL))
                      + 24 * ((v10 + *(void *)(a1 + 48) - 1) % 0xAAuLL)))
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101871010);
    }
    uint8x8_t v11 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = *(_DWORD *)(a1 + 8) - 1;
      if (v12 > 2) {
        uint64_t v13 = "Unknown";
      }
      else {
        uint64_t v13 = off_101871030[v12];
      }
      unint64_t v16 = *(void *)(a1 + 56) + *(void *)(a1 + 48) - 1LL;
      uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 24) + 8 * (v16 / 0xAA)) + 24 * (v16 % 0xAA));
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&buf[14] = v17;
      __int16 v49 = 2050;
      double v50 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning FitnessMinuteEstimatorYouth (%{public}s), Time rolled back, past back:%{public}.3f, current epochStartT ime:%{public}.3f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101871010);
      }
      unsigned int v36 = *(_DWORD *)(a1 + 8) - 1;
      if (v36 > 2) {
        __int16 v37 = "Unknown";
      }
      else {
        __int16 v37 = off_101871030[v36];
      }
      unint64_t v38 = *(void *)(a1 + 56) + *(void *)(a1 + 48) - 1LL;
      double v39 = *(double *)(*(void *)(*(void *)(a1 + 24) + 8 * (v38 / 0xAA)) + 24 * (v38 % 0xAA));
      int v42 = 136446722;
      uint64_t v43 = v37;
      __int16 v44 = 2050;
      double v45 = v39;
      __int16 v46 = 2050;
      double v47 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#Warning FitnessMinuteEstimatorYouth (%{public}s), Time rolled back, past back:%{public}.3f, current epochStartT ime:%{public}.3f",  &v42,  32);
      uint64_t v41 = (char *)v40;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGenericFitnessMinuteEstimatorYouth::slideActivityWindowYouth(CFTimeInterval, const CLMotionStateMediator_ Type::MediatedMotionActivity &)",  "%s\n",  v40);
      if (v41 != buf) {
        free(v41);
      }
    }

    BOOL v18 = *(void ***)(a1 + 24);
    uint64_t v19 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v20 = v19 - (void)v18;
    if (v20 >= 0x11)
    {
      do
      {
        operator delete(*v18);
        uint64_t v21 = *(void *)(a1 + 32);
        BOOL v18 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v18;
        unint64_t v20 = v21 - (void)v18;
      }

      while (v20 > 0x10);
    }

    if (v20 >> 3 == 1)
    {
      uint64_t v22 = 85LL;
      goto LABEL_30;
    }

    if (v20 >> 3 == 2)
    {
      uint64_t v22 = 170LL;
LABEL_30:
      *(void *)(a1 + 48) = v22;
    }
  }

  *(double *)buf = v5;
  *(double *)&uint8_t buf[8] = a3;
  *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(a2 + 136);
  sub_100B1DF24((void *)(a1 + 16), (__int128 *)buf);
  uint64_t v23 = *(void *)(a1 + 24);
  unint64_t v24 = *(void *)(a1 + 48);
  __int16 v25 = (double *)(*(void *)(v23 + 8 * (v24 / 0xAA)) + 24 * (v24 % 0xAA));
  double v26 = v25[1];
  double v27 = *v25 - v26;
  if (*(double *)(*(void *)(v23 + 8 * ((v24 + *(void *)(a1 + 56) - 1) / 0xAA))
                 + 24 * ((v24 + *(void *)(a1 + 56) - 1) % 0xAA))
     - v27 >= 60.0)
  {
    sub_100B1DDC8((void *)a1, (uint64_t)buf);
    if (*(double *)buf >= 60.0)
    {
      if (((*(uint64_t (**)(uint64_t, _BYTE *, double))(*(void *)a1 + 24LL))(a1, buf, *(double *)buf) & 1) != 0)
      {
        (*(void (**)(uint64_t, double))(*(void *)a1 + 16LL))(a1, v27);
        double v26 = 60.0;
      }

      else
      {
        double v26 = *(double *)(*(void *)(*(void *)(a1 + 24) + 8 * (*(void *)(a1 + 48) / 0xAAuLL))
                        + 24 * (*(void *)(a1 + 48) % 0xAAuLL)
                        + 8);
      }
    }

    uint64_t v28 = *(void *)(a1 + 56);
    if (v28)
    {
      double v29 = v27 + v26;
      do
      {
        unint64_t v30 = *(void *)(a1 + 48);
        uint64_t v31 = *(void *)(*(void *)(a1 + 24) + 8 * (v30 / 0xAA));
        unint64_t v32 = 24 * (v30 % 0xAA);
        double v33 = *(double *)(v31 + v32);
        if (v33 > v29)
        {
          *(double *)(v31 + v32 + 8) = v33 - v29;
          return;
        }

        *(void *)(a1 + 56) = v28 - 1;
        *(void *)(a1 + 48) = v30 + 1;
        sub_100211164(a1 + 16, 1);
        uint64_t v28 = *(void *)(a1 + 56);
      }

      while (v28);
    }
  }

void *sub_100B1DDC8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0LL;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = result[3];
  if (result[4] == v2) {
    goto LABEL_17;
  }
  unint64_t v3 = result[6];
  unint64_t v4 = *(void *)(v2 + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA);
  unint64_t v5 = *(void *)(v2 + 8 * ((result[7] + v3) / 0xAA)) + 24 * ((result[7] + v3) % 0xAA);
  if (v4 == v5) {
    goto LABEL_17;
  }
  uint64_t v6 = (void *)(v2 + 8 * (v3 / 0xAA));
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  do
  {
    if (v11 < 60.0)
    {
      double v12 = 60.0 - v11;
      double v11 = v11 + v12;
      *(double *)a2 = v11;
      switch(*(_DWORD *)(v4 + 16))
      {
        case 0:
          double v7 = v12 + v7;
          *(double *)(a2 + 8) = v7;
          break;
        case 1:
          double v9 = v12 + v9;
          *(double *)(a2 + 16) = v9;
          break;
        case 2:
          double v10 = v12 + v10;
          *(double *)(a2 + 24) = v10;
          break;
        case 3:
          double v8 = v12 + v8;
          *(double *)(a2 + 32) = v8;
          break;
        default:
          break;
      }
    }

    v4 += 24LL;
    if (v4 - *v6 == 4080)
    {
      unint64_t v13 = v6[1];
      ++v6;
      unint64_t v4 = v13;
    }
  }

  while (v4 != v5);
  if (v11 <= 0.0)
  {
LABEL_17:
    *(void *)(a2 + 32) = 0LL;
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
  }

  else
  {
    *(double *)(a2 + 8) = v7 * 100.0 / v11;
    *(double *)(a2 + 16) = v9 * 100.0 / v11;
    *(double *)(a2 + 24) = v10 * 100.0 / v11;
    *(double *)(a2 + 32) = v8 * 100.0 / v11;
  }

  return result;
}

uint64_t sub_100B1DF24(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B1E038(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  __int128 v9 = *a2;
  *(void *)(v8 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v8 = v9;
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5] + 1LL;
  a1[5] = v11;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = a1[1];
  unsigned int v14 = (void *)(v13 + 8 * (v12 / 0xAA));
  uint64_t v15 = *v14 + 24 * (v12 % 0xAA);
  if (a1[2] == v13) {
    uint64_t v15 = 0LL;
  }
  if (v15 == *v14) {
    uint64_t v15 = *(v14 - 1) + 4080LL;
  }
  return v15 - 24;
}

void sub_100B1E00C(id a1)
{
  qword_1019344F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_100B1E038(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100B1E300( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B1EA40(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48LL))(*(void *)(a3 + 48));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a3 + 48) + 24LL))( *(void *)(a3 + 48),  v6,  a1);
    if (v6[208]) {
      return sub_100253308(*(void *)(a3 + 8));
    }
  }

  return result;
}

void sub_100B1EAD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6 = *(float *)(a2 + 296);
  float v7 = *(float *)(a2 + 1368);
  float v8 = *(float *)(a2 + 1372);
  float v9 = *(float *)(a2 + 1376);
  float v10 = *(float *)(a2 + 1380);
  double v11 = *(double *)(a2 + 112);
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 3LL;
  *(void *)(a3 + 32) = 3LL;
  sub_1004493F4();
  float v13 = v12;
  *(float *)(a3 + 12) = v12;
  if (sub_1003DBFB4(a2) && *(double *)(a2 + 600) < *(double *)a2)
  {
    float v14 = *(double *)(a2 + 560);
    float v15 = (v10 - v14) / (v10 - v9);
    float v16 = v7 * sub_100D086F8(v15, v8);
    *(float *)(a3 + 20) = v16;
    int v17 = 1;
    *(_DWORD *)(a3 + 24) = 1;
    *(double *)(a1 + 8) = v11;
    *(float *)(a1 + 16) = v16;
  }

  else
  {
    float v16 = *(float *)(a1 + 16);
    if (v16 <= 0.0 || vabdd_f64(v11, *(double *)(a1 + 8)) >= 150.0)
    {
      int v17 = 0;
      *(float *)(a3 + 20) = v13;
      *(_DWORD *)(a3 + 24) = 0;
      float v16 = v13;
    }

    else
    {
      if (v6 > 18.0)
      {
        *(double *)(a1 + 8) = v11;
        float v16 = v16 * 1.2;
      }

      *(float *)(a3 + 20) = v16;
      int v17 = 1;
      *(_DWORD *)(a3 + 24) = 1;
    }
  }

  *(float *)(a3 + 28) = v16;
  *(_DWORD *)(a3 + 32) = v17;
  *(_DWORD *)(a3 + 36) = 15;
  int v18 = v17;
  float v19 = v16;
  if (v16 < 2.1)
  {
    *(void *)(a3 + 20) = 0x340066666LL;
    int v18 = 3;
    float v19 = 2.1;
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101871138);
  }
  int64_t v20 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218752;
    double v32 = v19;
    __int16 v33 = 1024;
    int v34 = v18;
    __int16 v35 = 2048;
    double v36 = v16;
    __int16 v37 = 1024;
    int v38 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Calisthenics (HIIT), METS, %f, %d, truthMETS, %f, %d",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101871138);
    }
    int v23 = 134218752;
    double v24 = v19;
    __int16 v25 = 1024;
    int v26 = v18;
    __int16 v27 = 2048;
    double v28 = v16;
    __int16 v29 = 1024;
    int v30 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Calisthenics (HIIT), METS, %f, %d, truthMETS, %f, %d",  COERCE_DOUBLE(&v23),  34);
    unint64_t v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLCalorieCalisthenicsModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

void sub_100B1EE38(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100B1EE64()
{
  if (qword_1019A1BA0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BA0 + 8LL))(qword_1019A1BA0);
  }
  if (qword_1019A1BA8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BA8 + 8LL))(qword_1019A1BA8);
  }
  if (qword_1019A1BB0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BB0 + 8LL))(qword_1019A1BB0);
  }
  if (qword_1019A1BB8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BB8 + 8LL))(qword_1019A1BB8);
  }
  if (qword_1019A1BC0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BC0 + 8LL))(qword_1019A1BC0);
  }
  if (qword_1019A1BC8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BC8 + 8LL))(qword_1019A1BC8);
  }
  if (qword_1019A1BD0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BD0 + 8LL))(qword_1019A1BD0);
  }
  if (qword_1019A1BD8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BD8 + 8LL))(qword_1019A1BD8);
  }
  if (qword_1019A1BE0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BE0 + 8LL))(qword_1019A1BE0);
  }
  if (qword_1019A1BE8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BE8 + 8LL))(qword_1019A1BE8);
  }
  if (qword_1019A1BF0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BF0 + 8LL))(qword_1019A1BF0);
  }
  if (qword_1019A1BF8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1BF8 + 8LL))(qword_1019A1BF8);
  }
  if (qword_1019A1C00) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C00 + 8LL))(qword_1019A1C00);
  }
  if (qword_1019A1C08) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C08 + 8LL))(qword_1019A1C08);
  }
  if (qword_1019A1C10) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C10 + 8LL))(qword_1019A1C10);
  }
  if (qword_1019A1C18) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C18 + 8LL))(qword_1019A1C18);
  }
  if (qword_1019A1C20) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C20 + 8LL))(qword_1019A1C20);
  }
  if (qword_1019A1C28) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C28 + 8LL))(qword_1019A1C28);
  }
  if (qword_1019A1C30) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C30 + 8LL))(qword_1019A1C30);
  }
  if (qword_1019A1C38) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C38 + 8LL))(qword_1019A1C38);
  }
  if (qword_1019A1C40) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C40 + 8LL))(qword_1019A1C40);
  }
  if (qword_1019A1C48) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C48 + 8LL))(qword_1019A1C48);
  }
  if (qword_1019A1C50) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C50 + 8LL))(qword_1019A1C50);
  }
  if (qword_1019A1C58) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C58 + 8LL))(qword_1019A1C58);
  }
  if (qword_1019A1C60) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C60 + 8LL))(qword_1019A1C60);
  }
  if (qword_1019A1C68) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C68 + 8LL))(qword_1019A1C68);
  }
  if (qword_1019A1C70) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C70 + 8LL))(qword_1019A1C70);
  }
  if (qword_1019A1C78) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C78 + 8LL))(qword_1019A1C78);
  }
  if (qword_1019A1C80) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C80 + 8LL))(qword_1019A1C80);
  }
  if (qword_1019A1C88) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C88 + 8LL))(qword_1019A1C88);
  }
  if (qword_1019A1C90) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C90 + 8LL))(qword_1019A1C90);
  }
  if (qword_1019A1C98) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1C98 + 8LL))(qword_1019A1C98);
  }
  if (qword_1019A1CA0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1CA0 + 8LL))(qword_1019A1CA0);
  }
  if (qword_1019A1CA8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1CA8 + 8LL))(qword_1019A1CA8);
  }
  if (qword_1019A1CB0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1CB0 + 8LL))(qword_1019A1CB0);
  }
  if (qword_1019A1CB8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1CB8 + 8LL))(qword_1019A1CB8);
  }
  if (qword_1019A1CC0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1CC0 + 8LL))(qword_1019A1CC0);
  }
  if (qword_1019A1CC8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1CC8 + 8LL))(qword_1019A1CC8);
  }
  if (qword_1019A1CD0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1CD0 + 8LL))(qword_1019A1CD0);
  }
  if (qword_1019A1CD8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1CD8 + 8LL))(qword_1019A1CD8);
  }
  if (qword_1019A1CE0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A1CE0 + 8LL))(qword_1019A1CE0);
  }
  uint64_t result = qword_1019A1CE8;
  if (qword_1019A1CE8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)qword_1019A1CE8 + 8LL))(qword_1019A1CE8);
  }
  return result;
}

void sub_100B1F268(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10199A980 & 1) == 0)
  {
    byte_10199A980 = 1;
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion( (wireless_diagnostics::google::protobuf::internal *)0x1E9808,  2005000,  (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  a4);
    sub_1001D0A48(v4, v5, v6, v7);
    float v8 = operator new(0x30uLL);
    _DWORD v8[4] = 0LL;
    v8[2] = 0LL;
    v8[3] = 0LL;
    void *v8 = off_101871168;
    v8[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v8 + 10) = 0;
    qword_1019A1BA0 = (uint64_t)v8;
    float v9 = (char *)operator new(0x48uLL);
    *(void *)float v9 = &off_1018711E0;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 52) = 0u;
    qword_1019A1BA8 = (uint64_t)v9;
    float v10 = operator new(0x20uLL);
    *float v10 = &off_101871348;
    v10[1] = 0LL;
    _DWORD v10[2] = 0LL;
    v10[3] = 0LL;
    qword_1019A1BB0 = (uint64_t)v10;
    double v11 = operator new(0x18uLL);
    v11[1] = 0LL;
    v11[2] = 0LL;
    void *v11 = &off_101871258;
    qword_1019A1BB8 = (uint64_t)v11;
    float v12 = operator new(0x50uLL);
    *float v12 = off_1018712D0;
    v12[1] = 0LL;
    *((_BYTE *)v12 + 16) = 0;
    v12[8] = 0LL;
    *(void *)((char *)v12 + 20) = 0LL;
    *(void *)((char *)v12 + 36) = 0LL;
    *(void *)((char *)v12 + 28) = 0LL;
    v12[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v12[7] = 0LL;
    *((_DWORD *)v12 + 18) = 0;
    qword_1019A1BC0 = (uint64_t)v12;
    float v13 = operator new(0x20uLL);
    void *v13 = &off_101871438;
    v13[1] = 0LL;
    v13[2] = 0LL;
    void v13[3] = 0LL;
    qword_1019A1BC8 = (uint64_t)v13;
    float v14 = operator new(0x30uLL);
    v14[5] = 0LL;
    *float v14 = off_1018713C0;
    v14[1] = 0LL;
    v14[2] = 0LL;
    v14[3] = 0LL;
    *(void *)((char *)v14 + 29) = 0LL;
    qword_1019A1BD0 = (uint64_t)v14;
    float v15 = operator new(0x20uLL);
    *float v15 = &off_101871528;
    v15[1] = 0LL;
    void v15[2] = 0LL;
    void v15[3] = 0LL;
    qword_1019A1BD8 = (uint64_t)v15;
    float v16 = operator new(0x18uLL);
    *float v16 = off_1018714B0;
    v16[1] = 0LL;
    *((_DWORD *)v16 + 4) = 0;
    qword_1019A1BE0 = (uint64_t)v16;
    int v17 = operator new(0x20uLL);
    void *v17 = &off_101871618;
    v17[1] = 0LL;
    v17[2] = 0LL;
    v17[3] = 0LL;
    qword_1019A1BE8 = (uint64_t)v17;
    int v18 = (char *)operator new(0x28uLL);
    *(void *)int v18 = off_1018715A0;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    qword_1019A1BF0 = (uint64_t)v18;
    float v19 = operator new(0x20uLL);
    *float v19 = &off_101871708;
    v19[1] = 0LL;
    v19[2] = 0LL;
    v19[3] = 0LL;
    qword_1019A1BF8 = (uint64_t)v19;
    int64_t v20 = operator new(0x18uLL);
    void *v20 = off_101871690;
    v20[1] = 0LL;
    *((_DWORD *)v20 + 4) = 0;
    qword_1019A1C00 = (uint64_t)v20;
    uint64_t v21 = operator new(0x20uLL);
    *uint64_t v21 = &off_101871870;
    v21[1] = 0LL;
    void v21[2] = 0LL;
    v21[3] = 0LL;
    qword_1019A1C08 = (uint64_t)v21;
    unint64_t v22 = operator new(0x40uLL);
    *unint64_t v22 = off_101871780;
    v22[1] = 0LL;
    v22[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v22[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *(void *)((char *)v22 + 52) = 0LL;
    v22[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v22[5] = 0LL;
    *((_BYTE *)v22 + 48) = 0;
    qword_1019A1C10 = (uint64_t)v22;
    int v23 = (char *)operator new(0x20uLL);
    *((_WORD *)v23 + 8) = 0;
    *(void *)int v23 = &off_1018717F8;
    *((void *)v23 + 1) = 0LL;
    *(void *)(v23 + 20) = 0LL;
    qword_1019A1C18 = (uint64_t)v23;
    double v24 = operator new(0x20uLL);
    *double v24 = &off_101871960;
    v24[1] = 0LL;
    v24[2] = 0LL;
    _DWORD v24[3] = 0LL;
    qword_1019A1C20 = (uint64_t)v24;
    __int16 v25 = (char *)operator new(0x18uLL);
    *(void *)__int16 v25 = off_1018718E8;
    v25[8] = 0;
    *(void *)(v25 + 12) = 0LL;
    qword_1019A1C28 = (uint64_t)v25;
    int v26 = operator new(0x20uLL);
    void *v26 = &off_101871A50;
    v26[1] = 0LL;
    v26[2] = 0LL;
    v26[3] = 0LL;
    qword_1019A1C30 = (uint64_t)v26;
    __int16 v27 = operator new(0x18uLL);
    v27[1] = 0LL;
    _DWORD v27[2] = 0LL;
    void *v27 = &off_1018719D8;
    qword_1019A1C38 = (uint64_t)v27;
    double v28 = operator new(0x20uLL);
    *double v28 = &off_101871B40;
    v28[1] = 0LL;
    v28[2] = 0LL;
    v28[3] = 0LL;
    qword_1019A1C40 = (uint64_t)v28;
    __int16 v29 = operator new(0x18uLL);
    v29[1] = 0LL;
    v29[2] = 0LL;
    *__int16 v29 = &off_101871AC8;
    qword_1019A1C48 = (uint64_t)v29;
    int v30 = operator new(0x20uLL);
    void *v30 = &off_101871C30;
    v30[1] = 0LL;
    _DWORD v30[2] = 0LL;
    v30[3] = 0LL;
    qword_1019A1C50 = (uint64_t)v30;
    __int128 v31 = operator new(0x18uLL);
    v31[1] = 0LL;
    v31[2] = 0LL;
    *__int128 v31 = &off_101871BB8;
    qword_1019A1C58 = (uint64_t)v31;
    double v32 = operator new(0x18uLL);
    v32[1] = 0LL;
    v32[2] = 0LL;
    void *v32 = off_101871CA8;
    qword_1019A1C60 = (uint64_t)v32;
    __int16 v33 = operator new(0x20uLL);
    *__int16 v33 = &off_101871D98;
    v33[1] = 0LL;
    v33[2] = 0LL;
    void v33[3] = 0LL;
    qword_1019A1C68 = (uint64_t)v33;
    int v34 = operator new(0x18uLL);
    void *v34 = off_101871D20;
    v34[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v34[2] = 0LL;
    qword_1019A1C70 = (uint64_t)v34;
    __int16 v35 = (char *)operator new(0x28uLL);
    *(void *)__int16 v35 = off_101871F00;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    qword_1019A1C78 = (uint64_t)v35;
    double v36 = (char *)operator new(0x78uLL);
    *(void *)double v36 = off_101871E10;
    *(_OWORD *)(v36 + 8) = 0u;
    *(_OWORD *)(v36 + 24) = 0u;
    *(_OWORD *)(v36 + 33) = 0u;
    *(_OWORD *)(v36 + 52) = 0u;
    *(_OWORD *)(v36 + 68) = 0u;
    *(_OWORD *)(v36 + 84) = 0u;
    *(_OWORD *)(v36 + 100) = 0u;
    qword_1019A1C80 = (uint64_t)v36;
    __int16 v37 = (char *)operator new(0x40uLL);
    *((void *)v37 + 5) = 0LL;
    *((_DWORD *)v37 + 9) = 0;
    *(void *)__int16 v37 = off_101871E88;
    *((void *)v37 + 1) = 0LL;
    *((void *)v37 + 2) = 0LL;
    *((void *)v37 + 3) = 0LL;
    *(_DWORD *)(v37 + 31) = 0;
    *((_OWORD *)v37 + 3) = xmmword_1012CA3D0;
    qword_1019A1C88 = (uint64_t)v37;
    int v38 = operator new(0x20uLL);
    *int v38 = &off_101871FF0;
    v38[1] = 0LL;
    v38[2] = 0LL;
    v38[3] = 0LL;
    qword_1019A1C90 = (uint64_t)v38;
    uint64_t v39 = operator new(0x18uLL);
    v39[1] = 0LL;
    v39[2] = 0LL;
    *uint64_t v39 = &off_101871F78;
    qword_1019A1C98 = (uint64_t)v39;
    uint64_t v40 = operator new(0x20uLL);
    void *v40 = &off_1018720E0;
    v40[1] = 0LL;
    v40[2] = 0LL;
    v40[3] = 0LL;
    qword_1019A1CA0 = (uint64_t)v40;
    uint64_t v41 = operator new(0x18uLL);
    v41[1] = 0LL;
    v41[2] = 0LL;
    *uint64_t v41 = &off_101872068;
    qword_1019A1CA8 = (uint64_t)v41;
    uint64_t v42 = operator new(0x20uLL);
    void *v42 = &off_1018721D0;
    v42[1] = 0LL;
    v42[2] = 0LL;
    v42[3] = 0LL;
    qword_1019A1CB0 = (uint64_t)v42;
    uint64_t v43 = operator new(0x28uLL);
    v43[1] = 0LL;
    v43[2] = 0LL;
    *uint64_t v43 = off_101872158;
    *((_DWORD *)v43 + 6) = 0;
    v43[4] = 0LL;
    qword_1019A1CB8 = (uint64_t)v43;
    __int16 v44 = operator new(0x20uLL);
    *__int16 v44 = &off_1018722C0;
    v44[1] = 0LL;
    double v44[2] = 0LL;
    v44[3] = 0LL;
    qword_1019A1CC0 = (uint64_t)v44;
    uint64_t v45 = operator new(0x20uLL);
    *uint64_t v45 = off_101872248;
    v45[1] = 0LL;
    id v45[2] = 0LL;
    v45[3] = 0LL;
    qword_1019A1CC8 = (uint64_t)v45;
    unint64_t v46 = operator new(0x20uLL);
    void *v46 = &off_1018723B0;
    v46[1] = 0LL;
    void v46[2] = 0LL;
    v46[3] = 0LL;
    qword_1019A1CD0 = (uint64_t)v46;
    uint64_t v47 = operator new(0x18uLL);
    v47[1] = 0LL;
    v47[2] = 0LL;
    void *v47 = &off_101872338;
    qword_1019A1CD8 = (uint64_t)v47;
    uint64_t v48 = operator new(0x18uLL);
    v48[1] = 0LL;
    v48[2] = 0LL;
    *uint64_t v48 = off_101872428;
    qword_1019A1CE0 = (uint64_t)v48;
    uint64_t v49 = (char *)operator new(0xC0uLL);
    *(void *)uint64_t v49 = off_1018724A0;
    *(_OWORD *)(v49 + 8) = 0u;
    *(_OWORD *)(v49 + 24) = 0u;
    *(_OWORD *)(v49 + 40) = 0u;
    *(_OWORD *)(v49 + 56) = 0u;
    *(_OWORD *)(v49 + 72) = 0u;
    *(_OWORD *)(v49 + 88) = 0u;
    *(_OWORD *)(v49 + 104) = 0u;
    *(_OWORD *)(v49 + 120) = 0u;
    *(_OWORD *)(v49 + 136) = 0u;
    *(_OWORD *)(v49 + 152) = 0u;
    *(_OWORD *)(v49 + 168) = 0u;
    *((_DWORD *)v49 + 46) = 0;
    qword_1019A1CE8 = (uint64_t)v49;
    uint64_t v50 = qword_1019A1BA8;
    uint64_t v54 = sub_1001D697C((uint64_t)v49, v51, v52, v53);
    *(void *)(v50 + 8) = v54;
    uint64_t v58 = qword_1019A1BB0;
    uint64_t v59 = qword_1019A1BC0;
    if (!qword_1019A1BC0)
    {
      uint64_t v54 = sub_100B1F268(v54);
      uint64_t v59 = qword_1019A1BC0;
    }

    *(void *)(v58 + 16) = v59;
    uint64_t v60 = qword_1019A1BB8;
    uint64_t v61 = qword_1019A1BA8;
    if (!qword_1019A1BA8)
    {
      uint64_t v54 = sub_100B1F268(v54);
      uint64_t v61 = qword_1019A1BA8;
      uint64_t v59 = qword_1019A1BC0;
    }

    *(void *)(v60 + 8) = v61;
    uint64_t v62 = sub_1001D3354(v54, v55, v56, v57);
    *(void *)(v59 + 8) = v62;
    uint64_t v66 = qword_1019A1BB8;
    if (!qword_1019A1BB8)
    {
      uint64_t v62 = sub_100B1F268(v62);
      uint64_t v66 = qword_1019A1BB8;
    }

    *(void *)(v59 + 56) = v66;
    uint64_t v67 = qword_1019A1BC8;
    uint64_t v68 = qword_1019A1BD0;
    if (!qword_1019A1BD0)
    {
      uint64_t v62 = sub_100B1F268(v62);
      uint64_t v68 = qword_1019A1BD0;
    }

    *(void *)(v67 + 16) = v68;
    uint64_t v69 = sub_1001EDE38(v62, v63, v64, v65);
    *(void *)(v68 + 8) = v69;
    uint64_t v73 = sub_1001EE4BC(v69, v70, v71, v72);
    *(void *)(v68 + 16) = v73;
    uint64_t v77 = qword_1019A1BD8;
    uint64_t v78 = qword_1019A1BE0;
    if (!qword_1019A1BE0)
    {
      uint64_t v73 = sub_100B1F268(v73);
      uint64_t v78 = qword_1019A1BE0;
    }

    *(void *)(v77 + 16) = v78;
    uint64_t v79 = qword_1019A1BE8;
    uint64_t v80 = qword_1019A1BF0;
    if (!qword_1019A1BF0)
    {
      uint64_t v73 = sub_100B1F268(v73);
      uint64_t v80 = qword_1019A1BF0;
    }

    *(void *)(v79 + 16) = v80;
    uint64_t v81 = sub_1001FBB58(v73, v74, v75, v76);
    *(void *)(v80 + 8) = v81;
    uint64_t v85 = sub_1001FC1D4(v81, v82, v83, v84);
    *(void *)(v80 + 16) = v85;
    uint64_t v89 = qword_1019A1BF8;
    uint64_t v90 = qword_1019A1C00;
    if (!qword_1019A1C00)
    {
      uint64_t v85 = sub_100B1F268(v85);
      uint64_t v90 = qword_1019A1C00;
    }

    *(void *)(v89 + 16) = v90;
    uint64_t v91 = qword_1019A1C08;
    uint64_t v92 = qword_1019A1C18;
    if (!qword_1019A1C18)
    {
      uint64_t v85 = sub_100B1F268(v85);
      uint64_t v92 = qword_1019A1C18;
    }

    *(void *)(v91 + 16) = v92;
    uint64_t v93 = qword_1019A1C10;
    if (!qword_1019A1C10)
    {
      uint64_t v85 = sub_100B1F268(v85);
      uint64_t v93 = qword_1019A1C10;
    }

    *(void *)(v92 + 8) = v93;
    uint64_t v94 = qword_1019A1C20;
    uint64_t v95 = qword_1019A1C28;
    if (!qword_1019A1C28)
    {
      uint64_t v85 = sub_100B1F268(v85);
      uint64_t v95 = qword_1019A1C28;
    }

    *(void *)(v94 + 16) = v95;
    uint64_t v96 = qword_1019A1C30;
    uint64_t v97 = qword_1019A1C38;
    if (!qword_1019A1C38)
    {
      uint64_t v85 = sub_100B1F268(v85);
      uint64_t v97 = qword_1019A1C38;
    }

    *(void *)(v96 + 16) = v97;
    uint64_t v98 = sub_1001E124C(v85, v86, v87, v88);
    *(void *)(v97 + 8) = v98;
    uint64_t v102 = qword_1019A1C40;
    uint64_t v103 = qword_1019A1C48;
    if (!qword_1019A1C48)
    {
      uint64_t v98 = sub_100B1F268(v98);
      uint64_t v103 = qword_1019A1C48;
    }

    *(void *)(v102 + 16) = v103;
    uint64_t v104 = sub_1001E2B94(v98, v99, v100, v101);
    *(void *)(v103 + 8) = v104;
    uint64_t v108 = qword_1019A1C50;
    uint64_t v109 = qword_1019A1C58;
    if (!qword_1019A1C58)
    {
      uint64_t v104 = sub_100B1F268(v104);
      uint64_t v109 = qword_1019A1C58;
    }

    *(void *)(v108 + 16) = v109;
    uint64_t v110 = sub_1001F05C0(v104, v105, v106, v107);
    *(void *)(v109 + 8) = v110;
    uint64_t v114 = qword_1019A1C68;
    uint64_t v115 = qword_1019A1C70;
    if (!qword_1019A1C70)
    {
      sub_100B1F268(v110);
      uint64_t v115 = qword_1019A1C70;
    }

    *(void *)(v114 + 16) = v115;
    uint64_t v116 = qword_1019A1C78;
    uint64_t v117 = (void *)qword_1019A1C80;
    if (!qword_1019A1C80)
    {
      sub_100B1F268(0LL);
      uint64_t v117 = (void *)qword_1019A1C80;
    }

    *(void *)(v116 + 16) = v117;
    uint64_t v118 = qword_1019A1C88;
    if (!qword_1019A1C88)
    {
      sub_100B1F268(v117);
      uint64_t v118 = qword_1019A1C88;
      uint64_t v117 = (void *)qword_1019A1C80;
    }

    *(void *)(v116 + 24) = v118;
    uint64_t v119 = sub_100B1FFF8(v117, v111, v112, v113);
    uint64_t v123 = qword_1019A1C90;
    uint64_t v124 = qword_1019A1C98;
    if (!qword_1019A1C98)
    {
      uint64_t v119 = sub_100B1F268(v119);
      uint64_t v124 = qword_1019A1C98;
    }

    *(void *)(v123 + 16) = v124;
    uint64_t v125 = sub_100206028(v119, v120, v121, v122);
    *(void *)(v124 + 8) = v125;
    uint64_t v129 = qword_1019A1CA0;
    uint64_t v130 = qword_1019A1CA8;
    if (!qword_1019A1CA8)
    {
      uint64_t v125 = sub_100B1F268(v125);
      uint64_t v130 = qword_1019A1CA8;
    }

    *(void *)(v129 + 16) = v130;
    uint64_t v131 = sub_100205210(v125, v126, v127, v128);
    *(void *)(v130 + 8) = v131;
    uint64_t v135 = qword_1019A1CB0;
    uint64_t v136 = qword_1019A1CB8;
    if (!qword_1019A1CB8)
    {
      uint64_t v131 = sub_100B1F268(v131);
      uint64_t v136 = qword_1019A1CB8;
    }

    *(void *)(v135 + 16) = v136;
    uint64_t v137 = qword_1019A1CC0;
    uint64_t v138 = qword_1019A1CC8;
    if (!qword_1019A1CC8)
    {
      uint64_t v131 = sub_100B1F268(v131);
      uint64_t v138 = qword_1019A1CC8;
    }

    *(void *)(v137 + 16) = v138;
    uint64_t v139 = sub_1001E5858(v131, v132, v133, v134);
    *(void *)(v138 + 8) = v139;
    uint64_t v143 = sub_1001E453C(v139, v140, v141, v142);
    *(void *)(v138 + 16) = v143;
    uint64_t v147 = qword_1019A1CD0;
    uint64_t v148 = qword_1019A1CD8;
    if (!qword_1019A1CD8)
    {
      uint64_t v143 = sub_100B1F268(v143);
      uint64_t v148 = qword_1019A1CD8;
    }

    *(void *)(v147 + 16) = v148;
    *(void *)(v148 + 8) = sub_1001EC398(v143, v144, v145, v146);
    sub_100B20064((void *)qword_1019A1CE8, v149, v150, v151);
    wireless_diagnostics::google::protobuf::internal::OnShutdown( (wireless_diagnostics::google::protobuf::internal *)sub_100B1EE64,  v152);
  }

uint64_t sub_100B1FC20(uint64_t result)
{
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = off_101871168;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

double sub_100B1FC44(uint64_t a1)
{
  *(void *)a1 = &off_1018711E0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  return result;
}

void *sub_100B1FC68(void *result)
{
  *double result = &off_101871348;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FC7C(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = &off_101871258;
  return result;
}

uint64_t sub_100B1FC90(uint64_t result)
{
  *(void *)double result = off_1018712D0;
  *(void *)(result + 8) = 0LL;
  *(_BYTE *)(result + 16) = 0;
  *(void *)(result + sub_10000AE14(v2 - 64) = 0LL;
  *(void *)(result + 20) = 0LL;
  *(void *)(result + 36) = 0LL;
  *(void *)(result + 28) = 0LL;
  *(void *)(result + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 56) = 0LL;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void *sub_100B1FCC4(void *result)
{
  *double result = &off_101871438;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FCD8(void *result)
{
  result[5] = 0LL;
  *double result = off_1018713C0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  *(void *)((char *)result + 29) = 0LL;
  return result;
}

void *sub_100B1FCF4(void *result)
{
  *double result = &off_101871528;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B1FD08(uint64_t result)
{
  *(void *)double result = off_1018714B0;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *sub_100B1FD1C(void *result)
{
  *double result = &off_101871618;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

double sub_100B1FD30(uint64_t a1)
{
  *(void *)a1 = off_1018715A0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void *sub_100B1FD4C(void *result)
{
  *double result = &off_101871708;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B1FD60(uint64_t result)
{
  *(void *)double result = off_101871690;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *sub_100B1FD74(void *result)
{
  *double result = &off_101871870;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B1FD88(uint64_t result)
{
  *(_WORD *)(result + 16) = 0;
  *(void *)double result = &off_1018717F8;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *sub_100B1FDA0(void *result)
{
  *double result = &off_101871960;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B1FDB4(uint64_t result)
{
  *(void *)double result = off_1018718E8;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *sub_100B1FDCC(void *result)
{
  *double result = &off_101871A50;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FDE0(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = &off_1018719D8;
  return result;
}

void *sub_100B1FDF4(void *result)
{
  *double result = &off_101871B40;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FE08(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = &off_101871AC8;
  return result;
}

void *sub_100B1FE1C(void *result)
{
  *double result = &off_101871C30;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FE30(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = &off_101871BB8;
  return result;
}

void *sub_100B1FE44(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = off_101871CA8;
  return result;
}

void *sub_100B1FE58(void *result)
{
  *double result = &off_101871D98;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FE6C(void *result)
{
  *double result = off_101871D20;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = 0LL;
  return result;
}

double sub_100B1FE88(uint64_t a1)
{
  *(void *)a1 = off_101871F00;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100B1FEA4(uint64_t a1)
{
  *(void *)a1 = off_101871E10;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  return result;
}

double sub_100B1FED4(uint64_t a1)
{
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)a1 = off_101871E88;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 31) = 0;
  *(void *)&double result = 0x100000001LL;
  *(_OWORD *)(a1 + 48) = xmmword_1012CA3D0;
  return result;
}

void *sub_100B1FF00(void *result)
{
  *double result = &off_101871FF0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FF14(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = &off_101871F78;
  return result;
}

void *sub_100B1FF28(void *result)
{
  *double result = &off_1018720E0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FF3C(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = &off_101872068;
  return result;
}

void *sub_100B1FF50(void *result)
{
  *double result = &off_1018722C0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FF64(void *result)
{
  *double result = off_101872248;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FF78(void *result)
{
  *double result = &off_1018723B0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void *sub_100B1FF8C(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = &off_101872338;
  return result;
}

void *sub_100B1FFA0(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = off_101872428;
  return result;
}

double sub_100B1FFB4(uint64_t a1)
{
  *(void *)a1 = off_1018724A0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

uint64_t sub_100B1FFF8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5 = sub_1001D697C((uint64_t)a1, a2, a3, a4);
  a1[1] = v5;
  uint64_t v9 = sub_1001D9DFC(v5, v6, v7, v8);
  a1[2] = v9;
  uint64_t v13 = sub_1001DFD48(v9, v10, v11, v12);
  a1[3] = v13;
  uint64_t v17 = sub_1001DCE2C(v13, v14, v15, v16);
  a1[4] = v17;
  uint64_t v21 = sub_1001DD2B4(v17, v18, v19, v20);
  a1[7] = v21;
  uint64_t v25 = sub_1001DD780(v21, v22, v23, v24);
  a1[8] = v25;
  uint64_t v29 = sub_1001DDFEC(v25, v26, v27, v28);
  a1[9] = v29;
  uint64_t v33 = sub_1001FD988(v29, v30, v31, v32);
  a1[10] = v33;
  uint64_t v37 = sub_1001E0580(v33, v34, v35, v36);
  a1[11] = v37;
  uint64_t result = sub_1001E0C04(v37, v38, v39, v40);
  a1[12] = result;
  return result;
}

uint64_t sub_100B20064(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = sub_1001D3354((uint64_t)a1, a2, a3, a4);
  a1[1] = result;
  uint64_t v6 = qword_1019A1CE0;
  if (qword_1019A1CE0)
  {
    a1[2] = qword_1019A1CE0;
  }

  else
  {
    uint64_t result = ((uint64_t (*)(void))sub_100B1F268)();
    uint64_t v6 = qword_1019A1CE0;
    a1[2] = qword_1019A1CE0;
    if (!v6)
    {
      uint64_t result = sub_100B1F268(result);
      uint64_t v6 = qword_1019A1CE0;
    }
  }

  a1[3] = v6;
  uint64_t v7 = qword_1019A1BB0;
  if (!qword_1019A1BB0)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v7 = qword_1019A1BB0;
  }

  a1[4] = v7;
  uint64_t v8 = qword_1019A1BC8;
  if (!qword_1019A1BC8)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v8 = qword_1019A1BC8;
  }

  a1[5] = v8;
  uint64_t v9 = qword_1019A1BD8;
  if (!qword_1019A1BD8)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v9 = qword_1019A1BD8;
  }

  a1[6] = v9;
  uint64_t v10 = qword_1019A1BE8;
  if (!qword_1019A1BE8)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v10 = qword_1019A1BE8;
  }

  a1[7] = v10;
  uint64_t v11 = qword_1019A1BF8;
  if (!qword_1019A1BF8)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v11 = qword_1019A1BF8;
  }

  a1[8] = v11;
  uint64_t v12 = qword_1019A1C08;
  if (!qword_1019A1C08)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v12 = qword_1019A1C08;
  }

  a1[9] = v12;
  uint64_t v13 = qword_1019A1C20;
  if (!qword_1019A1C20)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v13 = qword_1019A1C20;
  }

  a1[10] = v13;
  uint64_t v14 = qword_1019A1C30;
  if (!qword_1019A1C30)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v14 = qword_1019A1C30;
  }

  a1[11] = v14;
  uint64_t v15 = qword_1019A1C40;
  if (!qword_1019A1C40)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v15 = qword_1019A1C40;
  }

  a1[12] = v15;
  uint64_t v16 = qword_1019A1C50;
  if (!qword_1019A1C50)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v16 = qword_1019A1C50;
  }

  a1[13] = v16;
  uint64_t v17 = qword_1019A1C60;
  if (!qword_1019A1C60)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v17 = qword_1019A1C60;
  }

  a1[14] = v17;
  uint64_t v18 = qword_1019A1C68;
  if (!qword_1019A1C68)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v18 = qword_1019A1C68;
  }

  a1[15] = v18;
  uint64_t v19 = qword_1019A1C78;
  if (!qword_1019A1C78)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v19 = qword_1019A1C78;
  }

  a1[16] = v19;
  uint64_t v20 = qword_1019A1C90;
  if (!qword_1019A1C90)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v20 = qword_1019A1C90;
  }

  a1[17] = v20;
  uint64_t v21 = qword_1019A1CA0;
  if (!qword_1019A1CA0)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v21 = qword_1019A1CA0;
  }

  a1[18] = v21;
  uint64_t v22 = qword_1019A1CB0;
  if (!qword_1019A1CB0)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v22 = qword_1019A1CB0;
  }

  a1[19] = v22;
  uint64_t v23 = qword_1019A1CC0;
  if (!qword_1019A1CC0)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v23 = qword_1019A1CC0;
  }

  a1[20] = v23;
  uint64_t v24 = qword_1019A1CD0;
  if (!qword_1019A1CD0)
  {
    uint64_t result = sub_100B1F268(result);
    uint64_t v24 = qword_1019A1CD0;
  }

  a1[21] = v24;
  return result;
}

BOOL sub_100B20268(unsigned int a1)
{
  return a1 < 0xC;
}

BOOL sub_100B20274(unsigned int a1)
{
  return a1 < 0x1B;
}

void sub_100B20280(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  486LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  int v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_10004AAFC(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(void *)(a1 + 16) + 4LL * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4LL * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v7;
      int v6 = *(_DWORD *)(a2 + 40);
    }

    if ((v6 & 2) != 0)
    {
      uint64_t v8 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      uint64_t v9 = *(std::string **)(a1 + 8);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v9 = (std::string *)operator new(0x18uLL);
        v9->__r_.__value_.__l.__size_ = 0LL;
        v9->__r_.__value_.__l.__cap_ = 0LL;
        v9->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v9;
      }

      std::string::operator=(v9, v8);
    }
  }

void sub_100B20398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B203B0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871168;
  sub_10006AF90((uint64_t)a1);
  unint64_t v2 = (void *)*((void *)a1 + 2);
  if (v2) {
    operator delete[](v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B203F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B20404()
{
  uint64_t result = operator new(0x30uLL);
  result[3] = 0LL;
  result[4] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_101871168;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)result + 10) = 0;
  return result;
}

uint64_t sub_100B2043C(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_100B2048C( uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 16;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v8 = TagFallback >> 3;
        int v9 = TagFallback & 7;
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v14 = v32[0];
          uint64_t v15 = (_BYTE *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }

        else
        {
          unsigned int v14 = *v13;
          uint64_t v15 = v13 + 1;
          *((void *)this + 1) = v15;
        }

        *(_DWORD *)(a1 + 32) = v14;
        int v16 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v16;
        if ((unint64_t)v15 < v12 && *v15 == 18)
        {
          *((void *)this + 1) = v15 + 1;
          goto LABEL_30;
        }
      }

      if (v8 != 2) {
        break;
      }
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_20;
      }
      int v16 = *(_DWORD *)(a1 + 40);
LABEL_30:
      *(_DWORD *)(a1 + 40) = v16 | 2;
      uint64_t v17 = *(void **)(a1 + 8);
      if (v17 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v17 = operator new(0x18uLL);
        v17[1] = 0LL;
        v17[2] = 0LL;
        void *v17 = 0LL;
        *(void *)(a1 + 8) = v17;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v17);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v18 = (char *)*((void *)this + 1);
      char v10 = (char *)*((void *)this + 2);
      if (v18 < v10 && *v18 == 24)
      {
        do
        {
          uint64_t v11 = v18 + 1;
          *((void *)this + 1) = v11;
LABEL_36:
          if (v11 >= v10 || *v11 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v19 = v32[0];
          }

          else
          {
            unsigned int v19 = *v11;
            *((void *)this + 1) = v11 + 1;
          }

          int v20 = *(_DWORD *)(a1 + 24);
          if (v20 == *(_DWORD *)(a1 + 28))
          {
            sub_10004AAFC(v5, v20 + 1);
            int v20 = *(_DWORD *)(a1 + 24);
          }

          uint64_t v21 = *(void *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v20 + 1;
          *(_DWORD *)(v21 + 4LL * v20) = v19;
          int v22 = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 24);
          if (v22 >= 1)
          {
            int v23 = v22 + 1;
            do
            {
              uint64_t v24 = (_BYTE *)*((void *)this + 1);
              unint64_t v25 = *((void *)this + 2);
              *((void *)this + 1) = v24 + 1;
              if ((unint64_t)(v24 + 1) >= v25 || (char)v24[1] < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
                if (!(_DWORD)result) {
                  return result;
                }
                unsigned int v26 = v32[0];
              }

              else
              {
                unsigned int v26 = v24[1];
                *((void *)this + 1) = v24 + 2;
              }

              int v27 = *(_DWORD *)(a1 + 24);
              if (v27 >= *(_DWORD *)(a1 + 28))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v32,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Contents /Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/include/go ogle/protobuf/repeated_field.h",  602LL);
                uint64_t v28 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v32,  "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v31, v28);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
                int v27 = *(_DWORD *)(a1 + 24);
              }

              uint64_t v29 = *(void *)(a1 + 16);
              *(_DWORD *)(a1 + 24) = v27 + 1;
              *(_DWORD *)(v29 + 4LL * v27) = v26;
              --v23;
            }

            while (v23 > 1);
          }

void sub_100B207E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100B207FC( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 32),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
  }

  if ((v6 & 2) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(*(void *)(v5 + 16) + 4 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 24));
  }

  return result;
}

uint64_t sub_100B20888(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 40);
  if (!v3)
  {
    int v4 = 0;
    goto LABEL_22;
  }

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      int v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else if (v5 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 40) & 2) == 0) {
        goto LABEL_22;
      }
    }

    else
    {
      int v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    int v4 = 0;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0) {
      goto LABEL_22;
    }
  }

  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    char v8 = *(_BYTE *)(v6 + 23);
  }

  else
  {
    int v11 = 1;
  }

  if (v8 < 0) {
    int v7 = v9;
  }
  v4 += v11 + v7 + 1;
LABEL_22:
  int v12 = *(_DWORD *)(a1 + 24);
  if (v12 < 1)
  {
    int v14 = 0;
  }

  else
  {
    uint64_t v13 = 0LL;
    int v14 = 0;
    do
    {
      if ((v15 & 0x80000000) != 0)
      {
        int v16 = 10;
      }

      else if (v15 >= 0x80)
      {
        int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
        int v12 = *(_DWORD *)(a1 + 24);
      }

      else
      {
        int v16 = 1;
      }

      v14 += v16;
      ++v13;
    }

    while (v13 < v12);
  }

  uint64_t result = (v14 + v4 + v12);
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

void sub_100B209B8(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B20A04()
{
  return 1LL;
}

void *sub_100B20A0C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.Client");
}

void sub_100B20A1C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v21,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  1046LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v21,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }

  int v5 = *(_DWORD *)(a2 + 64);
  if (!(_BYTE)v5) {
    goto LABEL_27;
  }
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 64) |= 1u;
    uint64_t v6 = *(void **)(a1 + 8);
    if (!v6)
    {
      uint64_t v6 = operator new(0xA0uLL);
      sub_1001D2438((uint64_t)v6);
      *(void *)(a1 + 8) = v6;
    }

    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1BA8 + 8);
    }
    sub_1001D6490((uint64_t)v6, v7);
    int v5 = *(_DWORD *)(a2 + 64);
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 2u;
    *(void *)(a1 + 16) = v8;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 4) == 0)
    {
LABEL_12:
      if ((v5 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_20;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_12;
  }

  char v9 = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_BYTE *)(a1 + 24) = v9;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

void sub_100B20C9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B20CC4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018711E0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1BA8 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B20D18(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

double sub_100B20D2C()
{
  unsigned __int8 v0 = (char *)operator new(0x48uLL);
  *(void *)unsigned __int8 v0 = &off_1018711E0;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 52) = 0u;
  return result;
}

uint64_t sub_100B20D64(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 64);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      double result = *(void *)(result + 8);
      if (result)
      {
        double result = sub_1001D6A04(result);
        int v2 = *(_DWORD *)(v1 + 64);
      }
    }

    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0LL;
    *(_DWORD *)(v1 + 32) = 0;
  }

  if ((v2 & 0xFF00) != 0)
  {
    *(void *)(v1 + 44) = 0LL;
    *(void *)(v1 + 36) = 0LL;
    *(void *)(v1 + 52) = 0LL;
  }

  *(_DWORD *)(v1 + sub_10000AE14(v2 - 64) = 0;
  return result;
}

uint64_t sub_100B20DC0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_37;
        }
        *(_DWORD *)(a1 + 64) |= 1u;
        uint64_t v8 = *(void **)(a1 + 8);
        if (!v8)
        {
          uint64_t v8 = operator new(0xA0uLL);
          sub_1001D2438((uint64_t)v8);
          *(void *)(a1 + 8) = v8;
        }

        char v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v55)) {
            return 0LL;
          }
        }

        else
        {
          v55[0] = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v25 = *((_DWORD *)this + 14);
        int v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 >= v26) {
          return 0LL;
        }
        int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
        int v29 = *((_DWORD *)this + 14);
        BOOL v30 = __OFSUB__(v29, 1);
        int v31 = v29 - 1;
        if (v31 < 0 == v30) {
          *((_DWORD *)this + 14) = v31;
        }
        double v32 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v32 + 1;
        goto LABEL_50;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_37;
        }
LABEL_50:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v55) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = *(void *)v55;
        *(_DWORD *)(a1 + 64) |= 2u;
        uint64_t v33 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        char v11 = v33 + 1;
        *((void *)this + 1) = v11;
LABEL_54:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v34 = v55[0];
          uint64_t v35 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v34 = *v11;
          uint64_t v35 = v11 + 1;
          *((void *)this + 1) = v35;
        }

        *(_BYTE *)(a1 + 24) = v34 != 0;
        *(_DWORD *)(a1 + 64) |= 4u;
        char v12 = v35 + 1;
        *((void *)this + 1) = v12;
LABEL_62:
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v37 = v55[0];
          uint64_t v38 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v37 = *v12;
          uint64_t v38 = v12 + 1;
          *((void *)this + 1) = v38;
        }

        *(_BYTE *)(a1 + 25) = v37 != 0;
        *(_DWORD *)(a1 + 64) |= 8u;
        unsigned int v13 = v38 + 1;
        *((void *)this + 1) = v13;
LABEL_70:
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v39 = v55[0];
          uint64_t v40 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v39 = *v13;
          uint64_t v40 = v13 + 1;
          *((void *)this + 1) = v40;
        }

        *(_BYTE *)(a1 + 26) = v39 != 0;
        *(_DWORD *)(a1 + 64) |= 0x10u;
        int v14 = v40 + 1;
        *((void *)this + 1) = v14;
LABEL_78:
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v41 = v55[0];
          uint64_t v42 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v41 = *v14;
          uint64_t v42 = v14 + 1;
          *((void *)this + 1) = v42;
        }

        *(_BYTE *)(a1 + 27) = v41 != 0;
        *(_DWORD *)(a1 + 64) |= 0x20u;
        unsigned int v15 = v42 + 1;
        *((void *)this + 1) = v15;
LABEL_86:
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v43 = v55[0];
        }

        else
        {
          unsigned int v43 = *v15;
          *((void *)this + 1) = v15 + 1;
        }

        if (v43 <= 0xB)
        {
          *(_DWORD *)(a1 + 64) |= 0x40u;
          *(_DWORD *)(a1 + 28) = v43;
        }

        __int16 v44 = (_BYTE *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        unsigned int v17 = v44 + 1;
        *((void *)this + 1) = v17;
LABEL_96:
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result) {
            return result;
          }
          int v45 = v55[0];
        }

        else
        {
          int v45 = *v17;
          *((void *)this + 1) = v17 + 1;
        }

        if (sub_1001D2F60(v45))
        {
          if ((sub_1001D2F60(v45) & 1) == 0) {
            sub_10125F900();
          }
          *(_DWORD *)(a1 + 64) |= 0x80u;
          *(_DWORD *)(a1 + 32) = v45;
        }

        unint64_t v46 = (_BYTE *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        unsigned int v19 = v46 + 1;
        *((void *)this + 1) = v19;
LABEL_107:
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v47 = v55[0];
        }

        else
        {
          unsigned int v47 = *v19;
          *((void *)this + 1) = v19 + 1;
        }

        if (v47 <= 4)
        {
          *(_DWORD *)(a1 + 64) |= 0x100u;
          *(_DWORD *)(a1 + 36) = v47;
        }

        uint64_t v48 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v48 + 1;
LABEL_117:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v55) & 1) != 0)
        {
          *(void *)(a1 + 40) = *(void *)v55;
          *(_DWORD *)(a1 + 64) |= 0x200u;
          uint64_t v49 = (_BYTE *)*((void *)this + 1);
          unint64_t v20 = *((void *)this + 2);
          if ((unint64_t)v49 < v20 && *v49 == 88)
          {
            uint64_t v21 = v49 + 1;
            *((void *)this + 1) = v21;
LABEL_121:
            if ((unint64_t)v21 >= v20 || *v21 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
              if (!(_DWORD)result) {
                return result;
              }
              unsigned int v50 = v55[0];
            }

            else
            {
              unsigned int v50 = *v21;
              *((void *)this + 1) = v21 + 1;
            }

            if (sub_1001D2F3C(v50))
            {
              if (!sub_1001D2F3C(v50)) {
                sub_10125F8B0();
              }
              *(_DWORD *)(a1 + 64) |= 0x400u;
              *(_DWORD *)(a1 + 48) = v50;
            }

            uint64_t v51 = (_BYTE *)*((void *)this + 1);
            unint64_t v22 = *((void *)this + 2);
            if ((unint64_t)v51 < v22 && *v51 == 96)
            {
              int v23 = v51 + 1;
              *((void *)this + 1) = v23;
LABEL_132:
              if ((unint64_t)v23 >= v22 || *v23 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
                if (!(_DWORD)result) {
                  return result;
                }
                unsigned int v52 = v55[0];
                int v53 = (_BYTE *)*((void *)this + 1);
                unint64_t v22 = *((void *)this + 2);
              }

              else
              {
                unsigned int v52 = *v23;
                int v53 = v23 + 1;
                *((void *)this + 1) = v53;
              }

              *(_DWORD *)(a1 + 52) = v52;
              *(_DWORD *)(a1 + 64) |= 0x800u;
              if ((unint64_t)v53 < v22 && *v53 == 104)
              {
                uint64_t v24 = v53 + 1;
                *((void *)this + 1) = v24;
LABEL_140:
                if ((unint64_t)v24 >= v22 || *v24 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unsigned int v54 = v55[0];
                }

                else
                {
                  unsigned int v54 = *v24;
                  *((void *)this + 1) = v24 + 1;
                }

                if (v54 <= 5)
                {
                  *(_DWORD *)(a1 + 64) |= 0x1000u;
                  *(_DWORD *)(a1 + 56) = v54;
                }

                if (*((void *)this + 1) == *((void *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1LL;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        char v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_54;
      case 4u:
        int v7 = TagFallback & 7;
        char v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_62;
      case 5u:
        int v7 = TagFallback & 7;
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_70;
      case 6u:
        int v7 = TagFallback & 7;
        int v14 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_78;
      case 7u:
        int v7 = TagFallback & 7;
        unsigned int v15 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_86;
      case 8u:
        int v7 = TagFallback & 7;
        unsigned int v17 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_96;
      case 9u:
        int v7 = TagFallback & 7;
        unsigned int v19 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_107;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_117;
        }
        goto LABEL_37;
      case 0xBu:
        int v7 = TagFallback & 7;
        uint64_t v21 = (char *)*((void *)this + 1);
        unint64_t v20 = *((void *)this + 2);
        goto LABEL_121;
      case 0xCu:
        int v7 = TagFallback & 7;
        int v23 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_132;
      case 0xDu:
        int v7 = TagFallback & 7;
        uint64_t v24 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_140;
      default:
        int v7 = TagFallback & 7;
LABEL_37:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

void sub_100B21524(_Unwind_Exception *a1)
{
}

uint64_t sub_100B21538( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1BA8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

uint64_t sub_100B216D8(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 64);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_1019A1BA8 + 8);
      }
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001D78C0(v6, a2);
      int v8 = (int)v7;
      else {
        int v9 = 1;
      }
      unsigned int v4 = v8 + v9 + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 2;
    }
    if ((v3 & 8) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x10) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x20) != 0) {
      uint64_t v5 = v4 + 2;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 0x40) != 0)
    {
      unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
      if ((v10 & 0x80000000) != 0)
      {
        int v11 = 11;
      }

      else if (v10 >= 0x80)
      {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }

      else
      {
        int v11 = 2;
      }

      uint64_t v5 = (v11 + v5);
    }

    if ((v3 & 0x80) != 0)
    {
      char v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v12 & 0x80000000) != 0)
      {
        int v13 = 11;
      }

      else if (v12 >= 0x80)
      {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }

      else
      {
        int v13 = 2;
      }

      uint64_t v5 = (v13 + v5);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
      if ((v14 & 0x80000000) != 0)
      {
        int v15 = 11;
      }

      else if (v14 >= 0x80)
      {
        int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }

      else
      {
        int v15 = 2;
      }

      LODWORD(sub_1012279C0(0LL, v4, v5) = v15 + v5;
    }

    if ((v3 & 0x200) != 0) {
      uint64_t v5 = (v5 + 9);
    }
    else {
      uint64_t v5 = v5;
    }
    if ((v3 & 0x400) != 0)
    {
      unint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
      if ((v16 & 0x80000000) != 0)
      {
        int v17 = 11;
      }

      else if (v16 >= 0x80)
      {
        int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }

      else
      {
        int v17 = 2;
      }

      uint64_t v5 = (v17 + v5);
      if ((v3 & 0x800) == 0)
      {
LABEL_49:
        if ((v3 & 0x1000) == 0) {
          goto LABEL_69;
        }
        goto LABEL_63;
      }
    }

    else if ((v3 & 0x800) == 0)
    {
      goto LABEL_49;
    }

    unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v18 & 0x80000000) != 0)
    {
      int v19 = 11;
    }

    else if (v18 >= 0x80)
    {
      int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      int v19 = 2;
    }

    uint64_t v5 = (v19 + v5);
    if ((v3 & 0x1000) != 0)
    {
LABEL_63:
      unint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
      if ((v20 & 0x80000000) != 0)
      {
        int v21 = 11;
      }

      else if (v20 >= 0x80)
      {
        int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
      }

      else
      {
        int v21 = 2;
      }

      uint64_t v5 = (v21 + v5);
    }
  }

void sub_100B218EC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B21938()
{
  return 1LL;
}

void *sub_100B21940@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.FusionStatus");
}

void sub_100B21950(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  1313LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(char **)(a1 + 8);
    if (!v5)
    {
      uint64_t v5 = (char *)operator new(0x48uLL);
      *(void *)uint64_t v5 = &off_1018711E0;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 52) = 0u;
      *(void *)(a1 + 8) = v5;
    }

    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1BB8 + 8);
    }
    sub_100B20A1C((uint64_t)v5, v6);
  }

void sub_100B21A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B21A34(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871258;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1BB8 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B21A88(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B21A9C()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_101871258;
  return result;
}

uint64_t sub_100B21AC4(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_100B20D64(result);
    }
  }

  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B21AF8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      char v7 = *(char **)(a1 + 8);
      if (!v7)
      {
        char v7 = (char *)operator new(0x48uLL);
        *(void *)char v7 = &off_1018711E0;
        *(_OWORD *)(v7 + 8) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 52) = 0u;
        *(void *)(a1 + 8) = v7;
      }

      int v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100B21CA4( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A1BB8 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_100B21CD0(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A1BB8 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B216D8(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B21D3C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B21D88()
{
  return 1LL;
}

void *sub_100B21D90@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.SystemNotification.InternalToolDataCapture");
}

void sub_100B21DA0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v24,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  1689LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v24,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24),  *(_DWORD *)(a2 + 32) + *(_DWORD *)(a1 + 32));
  if (*(int *)(a2 + 32) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 36);
      uint64_t v8 = *(int *)(a1 + 32);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24),  v7 + 1);
          int v7 = *(_DWORD *)(a1 + 36);
        }

        *(_DWORD *)(a1 + 36) = v7 + 1;
        int v10 = operator new(0x30uLL);
        v10[3] = 0LL;
        v10[4] = 0LL;
        v10[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        _DWORD v10[2] = 0LL;
        *int v10 = off_101871168;
        *((_DWORD *)v10 + 10) = 0;
        uint64_t v11 = *(void *)(a1 + 24);
        uint64_t v12 = *(int *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 24);
        *(_DWORD *)(a1 + 32) = v8 + 1;
        int v10 = *(void **)(v9 + 8 * v8);
      }

      sub_100B20280((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 32));
  }

  LOBYTE(v13) = *(_BYTE *)(a2 + 72);
  if (!(_BYTE)v13) {
    return;
  }
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    BOOL v14 = *(void **)(a1 + 8);
    if (!v14)
    {
      BOOL v14 = operator new(0x28uLL);
      sub_1001D23B4((uint64_t)v14);
      *(void *)(a1 + 8) = v14;
    }

    uint64_t v15 = *(void *)(a2 + 8);
    if (!v15) {
      uint64_t v15 = *(void *)(qword_1019A1BC0 + 8);
    }
    sub_1001D323C((uint64_t)v14, v15);
    int v13 = *(_DWORD *)(a2 + 72);
  }

  if ((v13 & 2) != 0)
  {
    char v16 = *(_BYTE *)(a2 + 16);
    *(_DWORD *)(a1 + 72) |= 2u;
    *(_BYTE *)(a1 + 16) = v16;
    int v13 = *(_DWORD *)(a2 + 72);
    if ((v13 & 4) == 0)
    {
LABEL_20:
      if ((v13 & 0x10) == 0) {
        goto LABEL_21;
      }
LABEL_26:
      unsigned int v18 = *(_DWORD *)(a2 + 64);
      if (v18 >= 3) {
        sub_10125F950();
      }
      *(_DWORD *)(a1 + 72) |= 0x10u;
      *(_DWORD *)(a1 + sub_10000AE14(v2 - 64) = v18;
      int v13 = *(_DWORD *)(a2 + 72);
      if ((v13 & 0x20) == 0)
      {
LABEL_22:
        if ((v13 & 0x40) == 0) {
          return;
        }
        goto LABEL_31;
      }

      goto LABEL_28;
    }
  }

  else if ((v13 & 4) == 0)
  {
    goto LABEL_20;
  }

  int v17 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_DWORD *)(a1 + 20) = v17;
  int v13 = *(_DWORD *)(a2 + 72);
  if ((v13 & 0x10) != 0) {
    goto LABEL_26;
  }
LABEL_21:
  if ((v13 & 0x20) == 0) {
    goto LABEL_22;
  }
LABEL_28:
  int v19 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 72) |= 0x20u;
  unint64_t v20 = *(std::string **)(a1 + 48);
  if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unint64_t v20 = (std::string *)operator new(0x18uLL);
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 48) = v20;
  }

  std::string::operator=(v20, v19);
  if ((*(_DWORD *)(a2 + 72) & 0x40) != 0)
  {
LABEL_31:
    *(_DWORD *)(a1 + 72) |= 0x40u;
    int v21 = *(void **)(a1 + 56);
    if (!v21)
    {
      int v21 = operator new(0x18uLL);
      v21[1] = 0LL;
      void v21[2] = 0LL;
      *int v21 = &off_101871258;
      *(void *)(a1 + 56) = v21;
    }

    uint64_t v22 = *(void *)(a2 + 56);
    if (!v22) {
      uint64_t v22 = *(void *)(qword_1019A1BC0 + 56);
    }
    sub_100B21950((uint64_t)v21, v22);
  }

void sub_100B2204C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B22074(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018712D0;
  uint64_t v2 = (uint64_t)a1 + 24;
  sub_100B220B4(a1);
  sub_10008D0EC(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B220B4(void *a1)
{
  uint64_t v2 = a1[6];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  if ((void *)qword_1019A1BC0 != a1)
  {
    uint64_t v4 = a1[1];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = a1[7];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

void sub_100B22144(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B22158()
{
  uint64_t result = operator new(0x50uLL);
  *uint64_t result = off_1018712D0;
  result[1] = 0LL;
  *((_BYTE *)result + 16) = 0;
  result[8] = 0LL;
  *(void *)((char *)result + 20) = 0LL;
  *(void *)((char *)result + 36) = 0LL;
  *(void *)((char *)result + 28) = 0LL;
  result[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[7] = 0LL;
  *((_DWORD *)result + 18) = 0;
  return result;
}

uint64_t sub_100B221A0(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 72);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 72) & 1) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1001D33B0(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }

    *(_BYTE *)(v1 + 16) = 0;
    *(_DWORD *)(v1 + 20) = 0;
    *(_DWORD *)(v1 + sub_10000AE14(v2 - 64) = 0;
    if ((v2 & 0x20) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 48);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(v1 + 72) & 0x40) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 56);
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 20) & 1) != 0)
        {
          uint64_t result = *(void *)(v4 + 8);
          if (result) {
            uint64_t result = sub_100B20D64(result);
          }
        }

        *(_DWORD *)(v4 + 20) = 0;
      }
    }
  }

  if (*(int *)(v1 + 32) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(v1 + 24) + 8 * v5);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
      ++v5;
    }

    while (v5 < *(int *)(v1 + 32));
  }

  *(_DWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_100B22280( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  while (1)
  {
LABEL_2:
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 < *((void *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_7;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        *(_DWORD *)(a1 + 72) |= 1u;
        uint64_t v9 = *(void **)(a1 + 8);
        if (!v9)
        {
          uint64_t v9 = operator new(0x28uLL);
          sub_1001D23B4((uint64_t)v9);
          *(void *)(a1 + 8) = v9;
        }

        int v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v55)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v55 = *v10;
          *((void *)this + 1) = v10 + 1;
        }

        int v16 = *((_DWORD *)this + 14);
        int v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0LL;
        }
        int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        char v23 = (_BYTE *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        uint64_t v12 = v23 + 1;
        *((void *)this + 1) = v12;
        goto LABEL_38;
      case 2u:
        int v8 = TagFallback & 7;
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
LABEL_38:
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v24 = v55;
          int v25 = (_BYTE *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }

        else
        {
          unsigned int v24 = *v12;
          int v25 = v12 + 1;
          *((void *)this + 1) = v25;
        }

        *(_BYTE *)(a1 + 16) = v24 != 0;
        *(_DWORD *)(a1 + 72) |= 2u;
        int v13 = v25 + 1;
        *((void *)this + 1) = v13;
LABEL_46:
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v27 = v55;
          unsigned int v28 = (_BYTE *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }

        else
        {
          unsigned int v27 = *v13;
          unsigned int v28 = v13 + 1;
          *((void *)this + 1) = v28;
        }

        *(_DWORD *)(a1 + 20) = v27;
        *(_DWORD *)(a1 + 72) |= 4u;
        do
        {
          *((void *)this + 1) = v28 + 1;
LABEL_54:
          int v29 = *(_DWORD *)(a1 + 36);
          uint64_t v30 = *(int *)(a1 + 32);
          if ((int)v30 >= v29)
          {
            if (v29 == *(_DWORD *)(a1 + 40))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v29 + 1);
              int v29 = *(_DWORD *)(a1 + 36);
            }

            *(_DWORD *)(a1 + 36) = v29 + 1;
            double v32 = operator new(0x30uLL);
            uint64_t v32[3] = 0LL;
            _DWORD v32[4] = 0LL;
            v32[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
            v32[2] = 0LL;
            void *v32 = off_101871168;
            *((_DWORD *)v32 + 10) = 0;
            uint64_t v33 = *(void *)(a1 + 24);
            uint64_t v34 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v34 + 1;
            *(void *)(v33 + 8 * v34) = v32;
          }

          else
          {
            uint64_t v31 = *(void *)(a1 + 24);
            *(_DWORD *)(a1 + 32) = v30 + 1;
            double v32 = *(void **)(v31 + 8 * v30);
          }

          uint64_t v35 = (char *)*((void *)this + 1);
          if ((unint64_t)v35 >= *((void *)this + 2) || *v35 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v55)) {
              return 0LL;
            }
          }

          else
          {
            unsigned int v55 = *v35;
            *((void *)this + 1) = v35 + 1;
          }

          int v36 = *((_DWORD *)this + 14);
          int v37 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v36 + 1;
          if (v36 >= v37) {
            return 0LL;
          }
          int v38 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v38);
          int v40 = *((_DWORD *)this + 14);
          BOOL v21 = __OFSUB__(v40, 1);
          int v41 = v40 - 1;
          if (v41 < 0 == v21) {
            *((_DWORD *)this + 14) = v41;
          }
          unsigned int v28 = (_BYTE *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
          int v42 = *v28;
        }

        while (v42 == 34);
        if (v42 != 40) {
          continue;
        }
        uint64_t v15 = v28 + 1;
        *((void *)this + 1) = v15;
LABEL_72:
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v43 = v55;
        }

        else
        {
          unsigned int v43 = *v15;
          *((void *)this + 1) = v15 + 1;
        }

        if (v43 <= 2)
        {
          *(_DWORD *)(a1 + 72) |= 0x10u;
          *(_DWORD *)(a1 + sub_10000AE14(v2 - 64) = v43;
        }

        __int16 v44 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v44 + 1;
LABEL_82:
        *(_DWORD *)(a1 + 72) |= 0x20u;
        int v45 = *(void **)(a1 + 48);
        if (v45 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v45 = operator new(0x18uLL);
          v45[1] = 0LL;
          id v45[2] = 0LL;
          *int v45 = 0LL;
          *(void *)(a1 + 48) = v45;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v45);
        if (!(_DWORD)result) {
          return result;
        }
        unint64_t v46 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v46 + 1;
LABEL_88:
        *(_DWORD *)(a1 + 72) |= 0x40u;
        unsigned int v47 = *(void **)(a1 + 56);
        if (!v47)
        {
          unsigned int v47 = operator new(0x18uLL);
          v47[1] = 0LL;
          v47[2] = 0LL;
          void *v47 = &off_101871258;
          *(void *)(a1 + 56) = v47;
        }

        uint64_t v48 = (char *)*((void *)this + 1);
        if ((unint64_t)v48 >= *((void *)this + 2) || *v48 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v55)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v55 = *v48;
          *((void *)this + 1) = v48 + 1;
        }

        int v49 = *((_DWORD *)this + 14);
        int v50 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v49 + 1;
        if (v49 >= v50) {
          return 0LL;
        }
        int v51 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v51);
        int v53 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v53, 1);
        int v54 = v53 - 1;
        if (v54 < 0 == v21) {
          *((_DWORD *)this + 14) = v54;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 3u:
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_46;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_54;
        }
        goto LABEL_26;
      case 5u:
        int v8 = TagFallback & 7;
        uint64_t v15 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_72;
      case 6u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_82;
        }
        goto LABEL_26;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        goto LABEL_88;
      default:
        int v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4) {
          return 1LL;
        }
        continue;
    }
  }

void sub_100B22870(_Unwind_Exception *a1)
{
}

uint64_t sub_100B22884( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 72);
  if ((v6 & 1) != 0)
  {
    uint64_t v9 = *(void *)(result + 8);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1BC0 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v9,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(unsigned __int8 *)(v5 + 16),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 72) & 4) != 0) {
LABEL_4:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
LABEL_5:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(void *)(*(void *)(v5 + 24) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 32));
  }

  int v8 = *(_DWORD *)(v5 + 72);
  if ((v8 & 0x10) == 0)
  {
    if ((v8 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_18:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 6LL,  *(void *)(v5 + 48),  a2);
    if ((*(_DWORD *)(v5 + 72) & 0x40) == 0) {
      return result;
    }
    goto LABEL_19;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 64),  (int)a2,  a4);
  int v8 = *(_DWORD *)(v5 + 72);
  if ((v8 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v8 & 0x40) == 0) {
    return result;
  }
LABEL_19:
  uint64_t v10 = *(void *)(v5 + 56);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A1BC0 + 56);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v10,  a2,  a4);
}

uint64_t sub_100B229B0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    int v5 = 0;
    goto LABEL_46;
  }

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1BC0 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001D35F8(v6);
    int v8 = (int)v7;
    else {
      int v9 = 1;
    }
    int v4 = v8 + v9 + 1;
    int v3 = *(_DWORD *)(a1 + 72);
  }

  else
  {
    int v4 = 0;
  }

  if ((v3 & 2) != 0) {
    int v5 = v4 + 2;
  }
  else {
    int v5 = v4;
  }
  if ((v3 & 4) != 0)
  {
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v10 & 0x80000000) != 0)
    {
      int v11 = 11;
    }

    else if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 72);
    }

    else
    {
      int v11 = 2;
    }

    v5 += v11;
    if ((v3 & 0x10) == 0)
    {
LABEL_16:
      if ((v3 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_31;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_16;
  }

  uint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
  if ((v12 & 0x80000000) != 0)
  {
    int v13 = 11;
  }

  else if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 72);
  }

  else
  {
    int v13 = 2;
  }

  v5 += v13;
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x40) == 0) {
      goto LABEL_46;
    }
    goto LABEL_40;
  }

void sub_100B22BAC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B22BF8()
{
  return 1LL;
}

void *sub_100B22C00@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.SystemNotification.NotificationData");
}

void sub_100B22C10(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  1951LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 5) {
        sub_10125F978();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        int v8 = operator new(0x50uLL);
        void *v8 = off_1018712D0;
        v8[1] = 0LL;
        *((_BYTE *)v8 + 16) = 0;
        v8[8] = 0LL;
        *(void *)((char *)v8 + 20) = 0LL;
        *(void *)((char *)v8 + 36) = 0LL;
        *(void *)((char *)v8 + 28) = 0LL;
        v8[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v8[7] = 0LL;
        *((_DWORD *)v8 + 18) = 0;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1BB0 + 16);
      }
      sub_100B21DA0((uint64_t)v8, v9);
    }
  }

void sub_100B22D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B22D4C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871348;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1BB0 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B22DA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B22DB4()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871348;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B22DDC(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100B221A0(result);
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B22E18( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            uint64_t v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            uint64_t v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        char v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B230E8( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1BB0 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B23170(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1BB0 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B229B0(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B23268(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B232B4()
{
  return 1LL;
}

void *sub_100B232BC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.SystemNotification");
}

void sub_100B232CC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v18,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  2384LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v18,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }

  int v5 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v5) {
    goto LABEL_23;
  }
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 44) |= 1u;
    int v6 = *(void **)(a1 + 8);
    if (!v6)
    {
      int v6 = operator new(0x20uLL);
      sub_1001D285C((uint64_t)v6);
      *(void *)(a1 + 8) = v6;
    }

    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1BD0 + 8);
    }
    sub_1001EDCE8((uint64_t)v6, v7);
    int v5 = *(_DWORD *)(a2 + 44);
  }

  if ((v5 & 2) != 0)
  {
    *(_DWORD *)(a1 + 44) |= 2u;
    uint64_t v8 = *(void **)(a1 + 16);
    if (!v8)
    {
      uint64_t v8 = operator new(0x28uLL);
      sub_1001D2874((uint64_t)v8);
      *(void *)(a1 + 16) = v8;
    }

    uint64_t v9 = *(void *)(a2 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1BD0 + 16);
    }
    sub_1001EE33C((uint64_t)v8, v9);
    int v5 = *(_DWORD *)(a2 + 44);
  }

  if ((v5 & 4) != 0)
  {
    char v12 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_BYTE *)(a1 + 24) = v12;
    int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_18:
      if ((v5 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_28;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_18;
  }

  char v13 = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 44) |= 8u;
  *(_BYTE *)(a1 + 25) = v13;
  int v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20) == 0) {
      goto LABEL_20;
    }
LABEL_29:
    char v15 = *(_BYTE *)(a2 + 27);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_BYTE *)(a1 + 27) = v15;
    int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x40) == 0)
    {
LABEL_21:
      if ((v5 & 0x80) == 0) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }

    goto LABEL_30;
  }

void sub_100B234BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_100B234E8(void *result)
{
  if ((void *)qword_1019A1BD0 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100B23544(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018713C0;
  sub_100B234E8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B23574(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018713C0;
  sub_100B234E8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_100B235A8()
{
  uint64_t result = operator new(0x30uLL);
  result[5] = 0LL;
  *uint64_t result = off_1018713C0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  *(void *)((char *)result + 29) = 0LL;
  return result;
}

uint64_t sub_100B235D8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 44);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1001EDE90(result);
        int v2 = *(_DWORD *)(v1 + 44);
      }
    }

    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result)
      {
        uint64_t result = sub_1001EE524(result);
        int v2 = *(_DWORD *)(v1 + 44);
      }
    }

    *(_DWORD *)(v1 + 32) = 0;
    *(void *)(v1 + 24) = 0LL;
  }

  if ((v2 & 0xFF00) != 0) {
    *(_BYTE *)(v1 + 36) = 0;
  }
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_100B23640( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        uint64_t v8 = *(void **)(a1 + 8);
        if (!v8)
        {
          uint64_t v8 = operator new(0x20uLL);
          sub_1001D285C((uint64_t)v8);
          *(void *)(a1 + 8) = v8;
        }

        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v50)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v50 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v18 = *((_DWORD *)this + 14);
        int v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 >= v19) {
          return 0LL;
        }
        int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v50);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
        int v22 = *((_DWORD *)this + 14);
        BOOL v23 = __OFSUB__(v22, 1);
        int v24 = v22 - 1;
        if (v24 < 0 == v23) {
          *((_DWORD *)this + 14) = v24;
        }
        int v25 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v25 + 1;
        goto LABEL_42;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
LABEL_42:
        *(_DWORD *)(a1 + 44) |= 2u;
        unsigned int v26 = *(void **)(a1 + 16);
        if (!v26)
        {
          unsigned int v26 = operator new(0x28uLL);
          sub_1001D2874((uint64_t)v26);
          *(void *)(a1 + 16) = v26;
        }

        unsigned int v27 = (char *)*((void *)this + 1);
        if ((unint64_t)v27 >= *((void *)this + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v50)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v50 = *v27;
          *((void *)this + 1) = v27 + 1;
        }

        int v28 = *((_DWORD *)this + 14);
        int v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 < v29)
        {
          int v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v50);
          if (sub_1001EE548((uint64_t)v26, this, v31))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
              int v32 = *((_DWORD *)this + 14);
              BOOL v23 = __OFSUB__(v32, 1);
              int v33 = v32 - 1;
              if (v33 < 0 == v23) {
                *((_DWORD *)this + 14) = v33;
              }
              uint64_t v34 = (_BYTE *)*((void *)this + 1);
              unint64_t v10 = *((void *)this + 2);
              if ((unint64_t)v34 < v10 && *v34 == 24)
              {
                char v11 = v34 + 1;
                *((void *)this + 1) = v11;
LABEL_56:
                if ((unint64_t)v11 >= v10 || *v11 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v50);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unsigned int v35 = v50;
                  int v36 = (_BYTE *)*((void *)this + 1);
                  unint64_t v10 = *((void *)this + 2);
                }

                else
                {
                  unsigned int v35 = *v11;
                  int v36 = v11 + 1;
                  *((void *)this + 1) = v36;
                }

                *(_BYTE *)(a1 + 24) = v35 != 0;
                *(_DWORD *)(a1 + 44) |= 4u;
                if ((unint64_t)v36 < v10 && *v36 == 32)
                {
                  char v13 = v36 + 1;
                  *((void *)this + 1) = v13;
LABEL_64:
                  if ((unint64_t)v13 >= v10 || *v13 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v50);
                    if (!(_DWORD)result) {
                      return result;
                    }
                    unsigned int v38 = v50;
                    unsigned int v39 = (_BYTE *)*((void *)this + 1);
                    unint64_t v10 = *((void *)this + 2);
                  }

                  else
                  {
                    unsigned int v38 = *v13;
                    unsigned int v39 = v13 + 1;
                    *((void *)this + 1) = v39;
                  }

                  *(_BYTE *)(a1 + 25) = v38 != 0;
                  *(_DWORD *)(a1 + 44) |= 8u;
                  if ((unint64_t)v39 < v10 && *v39 == 40)
                  {
                    char v12 = v39 + 1;
                    *((void *)this + 1) = v12;
LABEL_72:
                    if ((unint64_t)v12 >= v10 || *v12 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v50);
                      if (!(_DWORD)result) {
                        return result;
                      }
                      unsigned int v40 = v50;
                      int v41 = (_BYTE *)*((void *)this + 1);
                      unint64_t v10 = *((void *)this + 2);
                    }

                    else
                    {
                      unsigned int v40 = *v12;
                      int v41 = v12 + 1;
                      *((void *)this + 1) = v41;
                    }

                    *(_BYTE *)(a1 + 26) = v40 != 0;
                    *(_DWORD *)(a1 + 44) |= 0x10u;
                    if ((unint64_t)v41 < v10 && *v41 == 48)
                    {
                      char v14 = v41 + 1;
                      *((void *)this + 1) = v14;
LABEL_80:
                      if ((unint64_t)v14 >= v10 || *v14 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v50);
                        if (!(_DWORD)result) {
                          return result;
                        }
                        unsigned int v42 = v50;
                        unsigned int v43 = (_BYTE *)*((void *)this + 1);
                        unint64_t v10 = *((void *)this + 2);
                      }

                      else
                      {
                        unsigned int v42 = *v14;
                        unsigned int v43 = v14 + 1;
                        *((void *)this + 1) = v43;
                      }

                      *(_BYTE *)(a1 + 27) = v42 != 0;
                      *(_DWORD *)(a1 + 44) |= 0x20u;
                      if ((unint64_t)v43 < v10 && *v43 == 56)
                      {
                        char v15 = v43 + 1;
                        *((void *)this + 1) = v15;
LABEL_88:
                        if ((unint64_t)v15 >= v10 || *v15 < 0)
                        {
                          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v50);
                          if (!(_DWORD)result) {
                            return result;
                          }
                          unsigned int v44 = v50;
                          int v45 = (_BYTE *)*((void *)this + 1);
                          unint64_t v10 = *((void *)this + 2);
                        }

                        else
                        {
                          unsigned int v44 = *v15;
                          int v45 = v15 + 1;
                          *((void *)this + 1) = v45;
                        }

                        *(_DWORD *)(a1 + 28) = v44;
                        *(_DWORD *)(a1 + 44) |= 0x40u;
                        if ((unint64_t)v45 < v10 && *v45 == 64)
                        {
                          int v16 = v45 + 1;
                          *((void *)this + 1) = v16;
LABEL_96:
                          if ((unint64_t)v16 >= v10 || *v16 < 0)
                          {
                            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v50);
                            if (!(_DWORD)result) {
                              return result;
                            }
                            unsigned int v46 = v50;
                            unsigned int v47 = (_BYTE *)*((void *)this + 1);
                            unint64_t v10 = *((void *)this + 2);
                          }

                          else
                          {
                            unsigned int v46 = *v16;
                            unsigned int v47 = v16 + 1;
                            *((void *)this + 1) = v47;
                          }

                          *(_DWORD *)(a1 + 32) = v46;
                          *(_DWORD *)(a1 + 44) |= 0x80u;
                          if ((unint64_t)v47 < v10 && *v47 == 72)
                          {
                            char v17 = v47 + 1;
                            *((void *)this + 1) = v17;
LABEL_104:
                            if ((unint64_t)v17 >= v10 || *v17 < 0)
                            {
                              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v50);
                              if (!(_DWORD)result) {
                                return result;
                              }
                              unsigned int v48 = v50;
                              int v49 = (unsigned __int8 *)*((void *)this + 1);
                              unint64_t v10 = *((void *)this + 2);
                            }

                            else
                            {
                              unsigned int v48 = *v17;
                              int v49 = (unsigned __int8 *)(v17 + 1);
                              *((void *)this + 1) = v49;
                            }

                            *(_BYTE *)(a1 + 36) = v48 != 0;
                            *(_DWORD *)(a1 + 44) |= 0x100u;
                            if (v49 == (unsigned __int8 *)v10
                              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                            {
                              *((_DWORD *)this + 8) = 0;
                              uint64_t result = 1LL;
                              *((_BYTE *)this + 36) = 1;
                              return result;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

              continue;
            }
          }
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        char v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_56;
      case 4u:
        int v7 = TagFallback & 7;
        char v13 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_64;
      case 5u:
        int v7 = TagFallback & 7;
        char v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_72;
      case 6u:
        int v7 = TagFallback & 7;
        char v14 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_80;
      case 7u:
        int v7 = TagFallback & 7;
        char v15 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_88;
      case 8u:
        int v7 = TagFallback & 7;
        int v16 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_96;
      case 9u:
        int v7 = TagFallback & 7;
        char v17 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_104;
      default:
        int v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

void sub_100B23C40(_Unwind_Exception *a1)
{
}

uint64_t sub_100B23C58( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1BD0 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1BD0 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_100B23D98(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    unsigned int v5 = 0;
    goto LABEL_41;
  }

  if ((v3 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1BD0 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001EE218(v6, a2);
    int v8 = (int)v7;
    else {
      int v9 = 1;
    }
    int v4 = v8 + v9 + 1;
    int v3 = *(_DWORD *)(a1 + 44);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  int v4 = 0;
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v10 = *(void *)(a1 + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_1019A1BD0 + 16);
    }
    char v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001EE9A0(v10, a2);
    int v12 = (int)v11;
    else {
      int v13 = 1;
    }
    v4 += v12 + v13 + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }

void sub_100B23F10(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B23F5C()
{
  return 1LL;
}

void *sub_100B23F64@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.DaemonStatusNotification.NotificationData");
}

void sub_100B23F74(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  2658LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (!sub_1001EEAC8(v7)) {
        sub_10125F9A0();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        int v8 = operator new(0x30uLL);
        v8[5] = 0LL;
        void *v8 = off_1018713C0;
        v8[1] = 0LL;
        v8[2] = 0LL;
        v8[3] = 0LL;
        *(void *)((char *)v8 + 29) = 0LL;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1BC8 + 16);
      }
      sub_100B232CC((uint64_t)v8, v9);
    }
  }

void sub_100B2408C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B240A4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871438;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1BC8 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B240F8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2410C()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871438;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B24134(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100B235D8(result);
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B24170( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (sub_1001EEAC8(v15))
        {
          if (!sub_1001EEAC8(v15)) {
            sub_10125F9A0();
          }
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_37;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B2443C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1BC8 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B244C4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1BC8 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B23D98(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B245BC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B24608()
{
  return 1LL;
}

void *sub_100B24610@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.DaemonStatusNotification");
}

void sub_100B24620(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v7,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  2855LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v7,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (!sub_10006ED58(v5)) {
      sub_10125F9C8();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100B246B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B246D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018714B0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B246E0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018714B0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_100B24700()
{
  uint64_t result = operator new(0x18uLL);
  *uint64_t result = off_1018714B0;
  result[1] = 0LL;
  *((_DWORD *)result + 4) = 0;
  return result;
}

uint64_t sub_100B24728(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100B2473C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v10;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (sub_10006ED58(v8))
      {
        if (!sub_10006ED58(v8)) {
          sub_10125F9C8();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100B24870( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_100B2488C(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100B248E4(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B24930()
{
  return 1LL;
}

void *sub_100B24938@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.ClientManagerNotification.NotificationData");
}

void sub_100B24948(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  3095LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 3) {
        sub_10125F9F0();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      unsigned int v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        unsigned int v8 = operator new(0x18uLL);
        void *v8 = off_1018714B0;
        v8[1] = 0LL;
        *((_DWORD *)v8 + 4) = 0;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1BD8 + 16);
      }
      sub_100B24620((uint64_t)v8, v9);
    }
  }

void sub_100B24A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B24A64(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871528;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1BD8 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B24AB8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B24ACC()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871528;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B24AF4(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16)) {
          *(_DWORD *)(v2 + 8) = 0;
        }
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }

  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B24B24( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B24DD4( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1BD8 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B24E5C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1BD8 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2488C(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B24F54(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B24FA0()
{
  return 1LL;
}

void *sub_100B24FA8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.ClientManagerNotification");
}

void sub_100B24FB8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v16,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  3467LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v16,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      char v6 = *(_BYTE *)(a2 + 28);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_BYTE *)(a1 + 28) = v6;
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 24);
      if (!sub_1001D3230(v7)) {
        sub_10123656C();
      }
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 24) = v7;
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 4u;
      uint64_t v8 = *(void **)(a1 + 8);
      if (!v8)
      {
        uint64_t v8 = operator new(0x20uLL);
        sub_1001D2A04((uint64_t)v8);
        *(void *)(a1 + 8) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 8);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1BF0 + 8);
      }
      sub_1001FB9E0((uint64_t)v8, v9);
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      unsigned int v10 = *(void **)(a1 + 16);
      if (!v10)
      {
        unsigned int v10 = operator new(0x30uLL);
        sub_1001D2A1C((uint64_t)v10);
        *(void *)(a1 + 16) = v10;
      }

      uint64_t v11 = *(void *)(a2 + 16);
      if (!v11) {
        uint64_t v11 = *(void *)(qword_1019A1BF0 + 16);
      }
      sub_1001FBF94((uint64_t)v10, v11);
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 0x10) != 0)
    {
      char v13 = *(_BYTE *)(a2 + 29);
      *(_DWORD *)(a1 + 36) |= 0x10u;
      *(_BYTE *)(a1 + 29) = v13;
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 0x20) == 0)
      {
LABEL_23:
        if ((v5 & 0x40) == 0) {
          return;
        }
        goto LABEL_24;
      }
    }

    else if ((v5 & 0x20) == 0)
    {
      goto LABEL_23;
    }

    char v14 = *(_BYTE *)(a2 + 30);
    *(_DWORD *)(a1 + 36) |= 0x20u;
    *(_BYTE *)(a1 + 30) = v14;
    if ((*(_DWORD *)(a2 + 36) & 0x40) != 0)
    {
LABEL_24:
      char v12 = *(_BYTE *)(a2 + 31);
      *(_DWORD *)(a1 + 36) |= 0x40u;
      *(_BYTE *)(a1 + 31) = v12;
    }
  }

void sub_100B25170( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_100B2519C(void *result)
{
  if ((void *)qword_1019A1BF0 != result)
  {
    char v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100B251F8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018715A0;
  sub_100B2519C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B25228(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018715A0;
  sub_100B2519C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100B2525C()
{
  unsigned __int8 v0 = (char *)operator new(0x28uLL);
  *(void *)unsigned __int8 v0 = off_1018715A0;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  return result;
}

uint64_t sub_100B2528C(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 36);
  if ((_BYTE)v2)
  {
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    if ((v2 & 4) != 0)
    {
      double result = *(void *)(result + 8);
      if (result)
      {
        double result = sub_1001FBBB0(result);
        int v2 = *(_DWORD *)(v1 + 36);
      }
    }

    if ((v2 & 8) != 0)
    {
      double result = *(void *)(v1 + 16);
      if (result) {
        double result = sub_1001FC230(result);
      }
    }

    *(_WORD *)(v1 + 29) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }

  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100B252E8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v45;
          uint64_t v11 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v10 = *v9;
          uint64_t v11 = v9 + 1;
          *((void *)this + 1) = v11;
        }

        *(_BYTE *)(a1 + 28) = v10 != 0;
        *(_DWORD *)(a1 + 36) |= 1u;
        if ((unint64_t)v11 < v8 && *v11 == 16)
        {
          char v12 = v11 + 1;
          *((void *)this + 1) = v12;
          goto LABEL_32;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        char v12 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
LABEL_32:
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v18 = v45;
        }

        else
        {
          unsigned int v18 = *v12;
          *((void *)this + 1) = v12 + 1;
        }

        if (sub_1001D3230(v18))
        {
          if (!sub_1001D3230(v18)) {
            sub_10123656C();
          }
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 24) = v18;
        }

        int v19 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v19 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 36) |= 4u;
        int v20 = *(void **)(a1 + 8);
        if (!v20)
        {
          int v20 = operator new(0x20uLL);
          sub_1001D2A04((uint64_t)v20);
          *(void *)(a1 + 8) = v20;
        }

        int v21 = (char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v45)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v45 = *v21;
          *((void *)this + 1) = v21 + 1;
        }

        int v22 = *((_DWORD *)this + 14);
        int v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23) {
          return 0LL;
        }
        int v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        int v26 = *((_DWORD *)this + 14);
        BOOL v27 = __OFSUB__(v26, 1);
        int v28 = v26 - 1;
        if (v28 < 0 == v27) {
          *((_DWORD *)this + 14) = v28;
        }
        int v29 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v29 + 1;
LABEL_57:
        *(_DWORD *)(a1 + 36) |= 8u;
        int v30 = *(void **)(a1 + 16);
        if (!v30)
        {
          int v30 = operator new(0x30uLL);
          sub_1001D2A1C((uint64_t)v30);
          *(void *)(a1 + 16) = v30;
        }

        unsigned int v31 = (char *)*((void *)this + 1);
        if ((unint64_t)v31 >= *((void *)this + 2) || *v31 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v45)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v45 = *v31;
          *((void *)this + 1) = v31 + 1;
        }

        int v32 = *((_DWORD *)this + 14);
        int v33 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v32 + 1;
        if (v32 < v33)
        {
          int v34 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
          if (sub_1001FC2AC((uint64_t)v30, this, v35))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v34);
              int v36 = *((_DWORD *)this + 14);
              BOOL v27 = __OFSUB__(v36, 1);
              int v37 = v36 - 1;
              if (v37 < 0 == v27) {
                *((_DWORD *)this + 14) = v37;
              }
              unsigned int v38 = (_BYTE *)*((void *)this + 1);
              unint64_t v13 = *((void *)this + 2);
              if ((unint64_t)v38 < v13 && *v38 == 40)
              {
                char v14 = v38 + 1;
                *((void *)this + 1) = v14;
LABEL_71:
                if ((unint64_t)v14 >= v13 || *v14 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v45);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unsigned int v39 = v45;
                  unsigned int v40 = (_BYTE *)*((void *)this + 1);
                  unint64_t v13 = *((void *)this + 2);
                }

                else
                {
                  unsigned int v39 = *v14;
                  unsigned int v40 = v14 + 1;
                  *((void *)this + 1) = v40;
                }

                *(_BYTE *)(a1 + 29) = v39 != 0;
                *(_DWORD *)(a1 + 36) |= 0x10u;
                if ((unint64_t)v40 < v13 && *v40 == 48)
                {
                  char v15 = v40 + 1;
                  *((void *)this + 1) = v15;
LABEL_79:
                  if ((unint64_t)v15 >= v13 || *v15 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v45);
                    if (!(_DWORD)result) {
                      return result;
                    }
                    unsigned int v41 = v45;
                    unsigned int v42 = (_BYTE *)*((void *)this + 1);
                    unint64_t v13 = *((void *)this + 2);
                  }

                  else
                  {
                    unsigned int v41 = *v15;
                    unsigned int v42 = v15 + 1;
                    *((void *)this + 1) = v42;
                  }

                  *(_BYTE *)(a1 + 30) = v41 != 0;
                  *(_DWORD *)(a1 + 36) |= 0x20u;
                  if ((unint64_t)v42 < v13 && *v42 == 56)
                  {
                    int v16 = v42 + 1;
                    *((void *)this + 1) = v16;
LABEL_87:
                    if ((unint64_t)v16 >= v13 || *v16 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v45);
                      if (!(_DWORD)result) {
                        return result;
                      }
                      unsigned int v43 = v45;
                      unsigned int v44 = (unsigned __int8 *)*((void *)this + 1);
                      unint64_t v13 = *((void *)this + 2);
                    }

                    else
                    {
                      unsigned int v43 = *v16;
                      unsigned int v44 = (unsigned __int8 *)(v16 + 1);
                      *((void *)this + 1) = v44;
                    }

                    *(_BYTE *)(a1 + 31) = v43 != 0;
                    *(_DWORD *)(a1 + 36) |= 0x40u;
                    if (v44 == (unsigned __int8 *)v13
                      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      uint64_t result = 1LL;
                      *((_BYTE *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }

              continue;
            }
          }
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_43;
        }
        goto LABEL_23;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_57;
        }
        goto LABEL_23;
      case 5u:
        int v7 = TagFallback & 7;
        char v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_71;
      case 6u:
        int v7 = TagFallback & 7;
        char v15 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_79;
      case 7u:
        int v7 = TagFallback & 7;
        int v16 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_87;
      default:
        int v7 = TagFallback & 7;
LABEL_23:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

void sub_100B25814(_Unwind_Exception *a1)
{
}

uint64_t sub_100B2582C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(unsigned __int8 *)(result + 28),  (BOOL)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 24),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_100B25934(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0LL;
    goto LABEL_32;
  }

  int v4 = 2 * (v3 & 1);
  if ((v3 & 2) == 0)
  {
    if ((v3 & 4) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1BF0 + 8);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FBEA8(v8, a2);
    int v10 = (int)v9;
    else {
      int v11 = 1;
    }
    v4 += v10 + v11 + 1;
    int v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 36);
  }

  else
  {
    int v7 = 2;
  }

  v4 += v7;
  if ((v3 & 4) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v3 & 8) != 0)
  {
LABEL_19:
    uint64_t v12 = *(void *)(a1 + 16);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_1019A1BF0 + 16);
    }
    unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FC664(v12, a2);
    int v15 = (int)v13;
    else {
      int v16 = 1;
    }
    v4 += v15 + v16 + 1;
    int v3 = *(_DWORD *)(a1 + 36);
  }

void sub_100B25A68(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B25AB4()
{
  return 1LL;
}

void *sub_100B25ABC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.WifiServiceNotification.NotificationData");
}

void sub_100B25ACC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  3731LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (!sub_1001D3230(v7)) {
        sub_10125FA18();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v8 = *(char **)(a1 + 16);
      if (!v8)
      {
        uint64_t v8 = (char *)operator new(0x28uLL);
        *(void *)uint64_t v8 = off_1018715A0;
        *(_OWORD *)(v8 + 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1BE8 + 16);
      }
      sub_100B24FB8((uint64_t)v8, v9);
    }
  }

void sub_100B25BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B25BFC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871618;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1BE8 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B25C50(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B25C64()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871618;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B25C8C(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100B2528C(result);
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B25CC8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            uint64_t v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            uint64_t v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            unint64_t v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        unint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (sub_1001D3230(v15))
        {
          if (!sub_1001D3230(v15)) {
            sub_10125FA18();
          }
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_37;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B25F94( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1BE8 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B2601C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1BE8 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B25934(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B26114(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B26160()
{
  return 1LL;
}

void *sub_100B26168@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.WifiServiceNotification");
}

void sub_100B26178(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v7,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  3926LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v7,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (!sub_1000641E0(v5)) {
      sub_10125FA40();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100B26210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B26228(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871690;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B26238(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871690;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_100B26258()
{
  uint64_t result = operator new(0x18uLL);
  *uint64_t result = off_101871690;
  result[1] = 0LL;
  *((_DWORD *)result + 4) = 0;
  return result;
}

uint64_t sub_100B26280(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100B26294( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v10;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (sub_1000641E0(v8))
      {
        if (!sub_1000641E0(v8)) {
          sub_10125FA40();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100B263C8( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_100B263E4(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100B2643C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B26488()
{
  return 1LL;
}

void *sub_100B26490@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.DataProtectionManagerNotification.NotificationData");
}

void sub_100B264A0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  4166LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2) {
        sub_10125FA68();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      unsigned int v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        unsigned int v8 = operator new(0x18uLL);
        void *v8 = off_101871690;
        v8[1] = 0LL;
        *((_DWORD *)v8 + 4) = 0;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1BF8 + 16);
      }
      sub_100B26178((uint64_t)v8, v9);
    }
  }

void sub_100B265A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B265BC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871708;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1BF8 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B26610(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B26624()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871708;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B2664C(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16)) {
          *(_DWORD *)(v2 + 8) = 0;
        }
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }

  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B2667C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            unint64_t v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        unint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B2692C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1BF8 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B269B4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1BF8 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B263E4(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B26AAC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B26AF8()
{
  return 1LL;
}

void *sub_100B26B00@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.DataProtectionManagerNotification");
}

void sub_100B26B10(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v17,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  4678LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v17,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 56);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 56) |= 1u;
    *(void *)(a1 + 8) = v6;
    int v5 = *(_DWORD *)(a2 + 56);
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v8 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 56) |= 2u;
    unint64_t v9 = *(std::string **)(a1 + 16);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unint64_t v9 = (std::string *)operator new(0x18uLL);
      v9->__r_.__value_.__l.__size_ = 0LL;
      v9->__r_.__value_.__l.__cap_ = 0LL;
      v9->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 16) = v9;
    }

    std::string::operator=(v9, v8);
    int v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 4) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_8;
  }

  unsigned int v10 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 56) |= 4u;
  int v11 = *(std::string **)(a1 + 24);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v11 = (std::string *)operator new(0x18uLL);
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 24) = v11;
  }

  std::string::operator=(v11, v10);
  int v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_23:
    int v14 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    *(_DWORD *)(a1 + 40) = v14;
    int v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x20) == 0)
    {
LABEL_11:
      if ((v5 & 0x40) == 0) {
        return;
      }
      goto LABEL_12;
    }

    goto LABEL_24;
  }

void sub_100B26CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B26CFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871780;
  sub_100071760(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B26D2C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871780;
  sub_100071760(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_100B26D60()
{
  uint64_t result = operator new(0x40uLL);
  *uint64_t result = off_101871780;
  result[1] = 0LL;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)result + 13) = 0;
  *((_DWORD *)result + 14) = 0;
  result[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[5] = 0LL;
  *((_BYTE *)result + 48) = 0;
  return result;
}

uint64_t sub_100B26D9C(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 56);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 56) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 56) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }

    *(_BYTE *)(result + 48) = 0;
    *(void *)(result + 40) = 0LL;
  }

  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_100B26E58( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 40);
  while (2)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_44;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v28) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v28;
        int v9 = *(_DWORD *)(a1 + 56) | 1;
        *(_DWORD *)(a1 + 56) = v9;
        unsigned int v10 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v10 + 1;
        goto LABEL_16;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_44;
        }
        int v9 = *(_DWORD *)(a1 + 56);
LABEL_16:
        *(_DWORD *)(a1 + 56) = v9 | 2;
        int v11 = *(void **)(a1 + 16);
        if (v11 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v11 = operator new(0x18uLL);
          v11[1] = 0LL;
          v11[2] = 0LL;
          void *v11 = 0LL;
          *(void *)(a1 + 16) = v11;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v11);
        if (!(_DWORD)result) {
          return result;
        }
        unint64_t v13 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v13 + 1;
LABEL_23:
        *(_DWORD *)(a1 + 56) |= 4u;
        int v14 = *(void **)(a1 + 24);
        if (v14 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v14 = operator new(0x18uLL);
          v14[1] = 0LL;
          v14[2] = 0LL;
          *int v14 = 0LL;
          *(void *)(a1 + 24) = v14;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v15 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v15 + 1;
LABEL_30:
        *(_DWORD *)(a1 + 56) |= 8u;
        char v16 = *(void **)(a1 + 32);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          void v16[2] = 0LL;
          *char v16 = 0LL;
          *(void *)(a1 + 32) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v18 = (_BYTE *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        int v19 = v18 + 1;
        *((void *)this + 1) = v19;
LABEL_38:
        if ((unint64_t)v19 >= v17 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          int v20 = (_BYTE *)*((void *)this + 1);
          unint64_t v17 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v5 = *v19;
          int v20 = v19 + 1;
          *((void *)this + 1) = v20;
        }

        *(_DWORD *)(a1 + 56) |= 0x10u;
        int v21 = v20 + 1;
        *((void *)this + 1) = v21;
LABEL_53:
        if ((unint64_t)v21 >= v17 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v28);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v24 = v28[0];
        }

        else
        {
          unsigned int v24 = *v21;
          *((void *)this + 1) = v21 + 1;
        }

        if (v24 <= 0x31)
        {
          *(_DWORD *)(a1 + 56) |= 0x20u;
          *(_DWORD *)(a1 + 44) = v24;
        }

        int v25 = (_BYTE *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        int v23 = v25 + 1;
        *((void *)this + 1) = v23;
LABEL_63:
        if ((unint64_t)v23 >= v22 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v28);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v26 = v28[0];
          unsigned int v27 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v22 = *((void *)this + 2);
        }

        else
        {
          unsigned int v26 = *v23;
          unsigned int v27 = (unsigned __int8 *)(v23 + 1);
          *((void *)this + 1) = v27;
        }

        *(_BYTE *)(a1 + 48) = v26 != 0;
        *(_DWORD *)(a1 + 56) |= 0x40u;
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_23;
        }
        goto LABEL_44;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_30;
        }
        goto LABEL_44;
      case 5u:
        int v8 = TagFallback & 7;
        int v19 = (char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        goto LABEL_38;
      case 6u:
        int v8 = TagFallback & 7;
        int v21 = (char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        goto LABEL_53;
      case 7u:
        int v8 = TagFallback & 7;
        int v23 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_63;
      default:
        int v8 = TagFallback & 7;
LABEL_44:
        if (v8 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_100B27240( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 56);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 16), a2);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_100B27328(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 56))
  {
    uint64_t result = 0LL;
    goto LABEL_49;
  }

  unsigned int v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 56);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    v4 += v11 + v7 + 1;
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0) {
        goto LABEL_5;
      }
      goto LABEL_27;
    }
  }

  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }

  uint64_t v12 = *(void *)(a1 + 24);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    int v3 = *(_DWORD *)(a1 + 56);
    char v14 = *(_BYTE *)(v12 + 23);
  }

  else
  {
    int v17 = 1;
  }

  if (v14 < 0) {
    int v13 = v15;
  }
  v4 += v17 + v13 + 1;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_36:
    unsigned int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 56);
    }

    else
    {
      int v25 = 2;
    }

    v4 += v25;
    if ((v3 & 0x20) == 0) {
      goto LABEL_46;
    }
    goto LABEL_40;
  }

void sub_100B274F0(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2753C()
{
  return 1LL;
}

void *sub_100B27544@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.BluetoothServiceNotification.Device");
}

void sub_100B27554(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  4935LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      char v6 = *(_BYTE *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_BYTE *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }

    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }

    char v7 = *(_BYTE *)(a2 + 17);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(_BYTE *)(a1 + 17) = v7;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0) {
      return;
    }
LABEL_10:
    *(_DWORD *)(a1 + 24) |= 4u;
    char v8 = *(void **)(a1 + 8);
    if (!v8)
    {
      char v8 = operator new(0x40uLL);
      void *v8 = off_101871780;
      v8[1] = 0LL;
      v8[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v8[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v8 + 13) = 0;
      *((_DWORD *)v8 + 14) = 0;
      _DWORD v8[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v8[5] = 0LL;
      *((_BYTE *)v8 + 48) = 0;
      *(void *)(a1 + 8) = v8;
    }

    uint64_t v9 = *(void *)(a2 + 8);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1C18 + 8);
    }
    sub_100B26B10((uint64_t)v8, v9);
  }

void sub_100B2766C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B27684(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018717F8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C18 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B276D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

_WORD *sub_100B276EC()
{
  uint64_t result = operator new(0x20uLL);
  result[8] = 0;
  *(void *)uint64_t result = &off_1018717F8;
  *((void *)result + 1) = 0LL;
  *((_DWORD *)result + 5) = 0;
  *((_DWORD *)result + 6) = 0;
  return result;
}

uint64_t sub_100B27718(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 24);
  if (v2)
  {
    *(_WORD *)(result + 16) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_100B26D9C(result);
      }
    }
  }

  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_100B27754( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          int v11 = (char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v11 >= v10 || *v11 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v12 = v28;
            int v13 = (_BYTE *)*((void *)this + 1);
            unint64_t v10 = *((void *)this + 2);
          }

          else
          {
            unsigned int v12 = *v11;
            int v13 = v11 + 1;
            *((void *)this + 1) = v13;
          }

          *(_BYTE *)(a1 + 16) = v12 != 0;
          *(_DWORD *)(a1 + 24) |= 1u;
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            char v14 = v13 + 1;
            *((void *)this + 1) = v14;
            goto LABEL_26;
          }
        }

        if (v7 == 2) {
          break;
        }
        if (v7 == 3)
        {
          int v8 = TagFallback & 7;
          if (v8 == 2)
          {
            int v9 = *(_DWORD *)(a1 + 24);
            goto LABEL_34;
          }
        }

        else
        {
          int v8 = TagFallback & 7;
        }

uint64_t sub_100B27A20( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(unsigned __int8 *)(v5 + 17),  (BOOL)a2,  a4);
    if ((*(_DWORD *)(v5 + 24) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(unsigned __int8 *)(result + 16),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1C18 + 8);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B27AA8(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    unsigned int v4 = 2 * (v3 & 1);
    if ((v3 & 2) != 0) {
      uint64_t v5 = v4 + 2;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_1019A1C18 + 8);
      }
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B27328(v6, a2);
      int v9 = (int)v7;
      else {
        int v10 = 1;
      }
      uint64_t v5 = (v5 | 1) + v9 + v10;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(_DWORD *)(a1 + 20) = v5;
  return v5;
}

void sub_100B27B3C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B27B88()
{
  return 1LL;
}

void *sub_100B27B90@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.BluetoothServiceNotification.NotificationData");
}

void sub_100B27BA0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  5183LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 4) {
        sub_10125FAB8();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      unsigned int v8 = *(_WORD **)(a1 + 16);
      if (!v8)
      {
        unsigned int v8 = operator new(0x20uLL);
        v8[8] = 0;
        *(void *)unsigned int v8 = &off_1018717F8;
        *((void *)v8 + 1) = 0LL;
        *((_DWORD *)v8 + 5) = 0;
        *((_DWORD *)v8 + 6) = 0;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1C08 + 16);
      }
      sub_100B27554((uint64_t)v8, v9);
    }
  }

void sub_100B27CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B27CC0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871870;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C08 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B27D14(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B27D28()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871870;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B27D50(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100B27718(result);
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B27D8C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 3)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        unsigned int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B28040( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1C08 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B280C8(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1C08 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B27AA8(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B281C0(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2820C()
{
  return 1LL;
}

void *sub_100B28214@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.BluetoothServiceNotification");
}

void sub_100B28224(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v7,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  5373LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v7,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    char v5 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_BYTE *)(a1 + 8) = v5;
  }

void sub_100B282AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B282C4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018718E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B282D4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018718E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

_BYTE *sub_100B282F4()
{
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = off_1018718E8;
  result[8] = 0;
  *((_DWORD *)result + 3) = 0;
  *((_DWORD *)result + 4) = 0;
  return result;
}

uint64_t sub_100B28320(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_BYTE *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100B28334( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      char v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      uint64_t v8 = (char *)*((void *)this + 1);
      unint64_t v7 = *((void *)this + 2);
      if ((unint64_t)v8 >= v7 || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v9 = v12;
        unsigned int v10 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v7 = *((void *)this + 2);
      }

      else
      {
        unsigned int v9 = *v8;
        unsigned int v10 = (unsigned __int8 *)(v8 + 1);
        *((void *)this + 1) = v10;
      }

      *(_BYTE *)(a1 + 8) = v9 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if (v10 == (unsigned __int8 *)v7 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100B2844C( uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(unsigned __int8 *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_100B28468(uint64_t a1)
{
  else {
    uint64_t v1 = 0LL;
  }
  *(_DWORD *)(a1 + 12) = v1;
  return v1;
}

void sub_100B28484(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B284D0()
{
  return 1LL;
}

void *sub_100B284D8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.CompanionNotifierNotification.NotificationData");
}

void sub_100B284E8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  5613LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2) {
        sub_10125FAE0();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v8 = *(_BYTE **)(a1 + 16);
      if (!v8)
      {
        uint64_t v8 = operator new(0x18uLL);
        *(void *)uint64_t v8 = off_1018718E8;
        v8[8] = 0;
        *((_DWORD *)v8 + 3) = 0;
        *((_DWORD *)v8 + 4) = 0;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1C20 + 16);
      }
      sub_100B28224((uint64_t)v8, v9);
    }
  }

void sub_100B285F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B28608(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871960;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C20 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B2865C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B28670()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871960;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B28698(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16)) {
          *(_BYTE *)(v2 + 8) = 0;
        }
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }

  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B286C8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        unsigned int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B2897C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1C20 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B28A04(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1C20 + 16);
    }
    else {
      int v9 = 0;
    }
    *(_DWORD *)(v8 + 12) = v9;
    uint64_t v4 = (v4 + v9 + 2);
  }

void sub_100B28AE4(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B28B30()
{
  return 1LL;
}

void *sub_100B28B38@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.CompanionNotifierNotification");
}

void sub_100B28B48(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  5819LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(void **)(a1 + 8);
    if (!v5)
    {
      uint64_t v5 = operator new(0x60uLL);
      sub_1001D2670((uint64_t)v5);
      *(void *)(a1 + 8) = v5;
    }

    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1C38 + 8);
    }
    sub_1001E0E24((uint64_t)v5, v6);
  }

void sub_100B28C08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B28C30(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018719D8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C38 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B28C84(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B28C98()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_1018719D8;
  return result;
}

uint64_t sub_100B28CC0(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1001E12B0(result);
    }
  }

  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B28CF4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      char v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        char v7 = operator new(0x60uLL);
        sub_1001D2670((uint64_t)v7);
        *(void *)(a1 + 8) = v7;
      }

      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

void sub_100B28E7C(_Unwind_Exception *a1)
{
}

uint64_t sub_100B28E90( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A1C38 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_100B28EBC(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A1C38 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E1E3C(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B28F28(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B28F74()
{
  return 1LL;
}

void *sub_100B28F7C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.MotionStateNotification.NotificationData");
}

void sub_100B28F8C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  6059LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 5) {
        sub_10125FB08();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        int v8 = operator new(0x18uLL);
        v8[1] = 0LL;
        v8[2] = 0LL;
        void *v8 = &off_1018719D8;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1C30 + 16);
      }
      sub_100B28B48((uint64_t)v8, v9);
    }
  }

void sub_100B29090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B290A8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871A50;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C30 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B290FC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B29110()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871A50;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B29138(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          uint64_t result = *(void *)(v3 + 8);
          if (result) {
            uint64_t result = sub_1001E12B0(result);
          }
        }

        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B29188( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        unsigned int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B29438( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1C30 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B294C0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1C30 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B28EBC(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B295B8(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B29604()
{
  return 1LL;
}

void *sub_100B2960C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.MotionStateNotification");
}

void sub_100B2961C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  6259LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(void **)(a1 + 8);
    if (!v5)
    {
      uint64_t v5 = operator new(0x28uLL);
      sub_1001D26AC((uint64_t)v5);
      *(void *)(a1 + 8) = v5;
    }

    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1C48 + 8);
    }
    sub_1001E29C4((uint64_t)v5, v6);
  }

void sub_100B296DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B29704(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871AC8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C48 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B29758(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2976C()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_101871AC8;
  return result;
}

uint64_t sub_100B29794(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1001E2BF0(result);
    }
  }

  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B297C8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      char v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        char v7 = operator new(0x28uLL);
        sub_1001D26AC((uint64_t)v7);
        *(void *)(a1 + 8) = v7;
      }

      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

void sub_100B29950(_Unwind_Exception *a1)
{
}

uint64_t sub_100B29964( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A1C48 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_100B29990(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A1C48 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E2FFC(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B299FC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B29A48()
{
  return 1LL;
}

void *sub_100B29A50@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.MotionStateObserverNotification.NotificationData");
}

void sub_100B29A60(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  6499LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2) {
        sub_10125FB30();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        int v8 = operator new(0x18uLL);
        v8[1] = 0LL;
        v8[2] = 0LL;
        void *v8 = &off_101871AC8;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1C40 + 16);
      }
      sub_100B2961C((uint64_t)v8, v9);
    }
  }

void sub_100B29B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B29B7C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871B40;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C40 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B29BD0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B29BE4()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871B40;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B29C0C(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          uint64_t result = *(void *)(v3 + 8);
          if (result) {
            uint64_t result = sub_1001E2BF0(result);
          }
        }

        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B29C5C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        unsigned int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B29F0C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1C40 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B29F94(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1C40 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B29990(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B2A08C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2A0D8()
{
  return 1LL;
}

void *sub_100B2A0E0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.MotionStateObserverNotification");
}

void sub_100B2A0F0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  6699LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(_DWORD **)(a1 + 8);
    if (!v5)
    {
      uint64_t v5 = operator new(0x18uLL);
      sub_1001D28E4((uint64_t)v5);
      *(void *)(a1 + 8) = v5;
    }

    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1C58 + 8);
    }
    sub_1001F04B4(v5, v6);
  }

void sub_100B2A1B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B2A1D8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871BB8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C58 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B2A22C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2A240()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_101871BB8;
  return result;
}

uint64_t sub_100B2A268(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1001F061C(result);
    }
  }

  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B2A29C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      char v7 = *(_DWORD **)(a1 + 8);
      if (!v7)
      {
        char v7 = operator new(0x18uLL);
        sub_1001D28E4((uint64_t)v7);
        *(void *)(a1 + 8) = v7;
      }

      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

void sub_100B2A424(_Unwind_Exception *a1)
{
}

uint64_t sub_100B2A438( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A1C58 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_100B2A464(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A1C58 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F083C(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B2A4D0(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2A51C()
{
  return 1LL;
}

void *sub_100B2A524@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.SignalEnvironmentNotification.NotificationData");
}

void sub_100B2A534(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  6939LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2) {
        sub_10125FB58();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        int v8 = operator new(0x18uLL);
        v8[1] = 0LL;
        v8[2] = 0LL;
        void *v8 = &off_101871BB8;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1C50 + 16);
      }
      sub_100B2A0F0((uint64_t)v8, v9);
    }
  }

void sub_100B2A638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B2A650(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871C30;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C50 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B2A6A4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2A6B8()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871C30;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B2A6E0(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          uint64_t result = *(void *)(v3 + 8);
          if (result) {
            uint64_t result = sub_1001F061C(result);
          }
        }

        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B2A730( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        unsigned int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B2A9E0( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1C50 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B2AA68(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1C50 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2A464(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B2AB60(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2ABAC()
{
  return 1LL;
}

void *sub_100B2ABB4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.SignalEnvironmentNotification");
}

void sub_100B2ABC4(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  7167LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      int v5 = *(_DWORD *)(a2 + 20);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 3) {
        sub_10125FB80();
      }
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }

void sub_100B2AC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B2AC90(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871CA8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B2ACA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871CA8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_100B2ACC0()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_101871CA8;
  return result;
}

uint64_t sub_100B2ACE8(uint64_t result)
{
  if (*(_BYTE *)(result + 20)) {
    *(void *)(result + 8) = 0LL;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100B2ACFC( _DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      unsigned int v10 = (char *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v11 = v15;
        int v12 = (_BYTE *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
      }

      else
      {
        unsigned int v11 = *v10;
        int v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }

      a1[2] = v11;
      a1[5] |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        unint64_t v9 = v12 + 1;
        *((void *)this + 1) = v9;
LABEL_23:
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v13 = v16;
        }

        else
        {
          unsigned int v13 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v13 <= 2)
        {
          a1[5] |= 2u;
          a1[3] = v13;
        }

        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        unint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_23;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_100B2AEA0( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  a2,  a4);
  }
  return result;
}

uint64_t sub_100B2AEF8(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 20) & 2) == 0) {
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0) {
        goto LABEL_19;
      }
    }

    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 11;
    }

    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }

    else
    {
      int v7 = 2;
    }

    uint64_t v4 = (v7 + v4);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_100B2AFA0(_DWORD *a1, void *lpsrc)
{
}

uint64_t sub_100B2AFEC()
{
  return 1LL;
}

void *sub_100B2AFF4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.TelephonyServiceNotification");
}

void sub_100B2B004(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  7369LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v5 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    int v6 = *(std::string **)(a1 + 8);
    if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      int v6 = (std::string *)operator new(0x18uLL);
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 8) = v6;
    }

    std::string::operator=(v6, v5);
  }

void sub_100B2B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B2B0D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871D20;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B2B100(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871D20;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_100B2B134()
{
  uint64_t result = operator new(0x18uLL);
  *uint64_t result = off_101871D20;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = 0LL;
  return result;
}

uint64_t sub_100B2B164(uint64_t result)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v1 = *(void *)(result + 8);
    if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(_BYTE **)uint64_t v1 = 0;
        *(void *)(v1 + 8) = 0LL;
      }

      else
      {
        *(_BYTE *)uint64_t v1 = 0;
        *(_BYTE *)(v1 + 23) = 0;
      }
    }
  }

  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100B2B1A8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      char v7 = *(void **)(a1 + 8);
      if (v7 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v7 = operator new(0x18uLL);
        v7[1] = 0LL;
        void v7[2] = 0LL;
        void *v7 = 0LL;
        *(void *)(a1 + 8) = v7;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v7);
      if (!(_DWORD)result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100B2B2B4(uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 1LL,  *(void *)(result + 8),  a2);
  }
  return result;
}

uint64_t sub_100B2B2D0(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8,  a2);
      int v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v7 = *(void *)(v4 + 8);
      int v9 = v10 + 1;
      char v6 = *(_BYTE *)(v4 + 23);
    }

    else
    {
      int v9 = 2;
    }

    if (v6 < 0) {
      int v5 = v7;
    }
    uint64_t result = (v9 + v5);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B2B34C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2B398()
{
  return 1LL;
}

void *sub_100B2B3A0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.AppMonitorNotification.NotificationData");
}

void sub_100B2B3B0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  7609LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 6) {
        sub_10125FBA8();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      unint64_t v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        unint64_t v8 = operator new(0x18uLL);
        void *v8 = off_101871D20;
        v8[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v8[2] = 0LL;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1C68 + 16);
      }
      sub_100B2B004((uint64_t)v8, v9);
    }
  }

void sub_100B2B4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B2B4D4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871D98;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C68 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B2B528(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2B53C()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101871D98;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B2B564(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2)
      {
        if ((*(_BYTE *)(v2 + 20) & 1) != 0)
        {
          uint64_t v3 = *(void *)(v2 + 8);
          if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            if (*(char *)(v3 + 23) < 0)
            {
              **(_BYTE **)uint64_t v3 = 0;
              *(void *)(v3 + 8) = 0LL;
            }

            else
            {
              *(_BYTE *)uint64_t v3 = 0;
              *(_BYTE *)(v3 + 23) = 0;
            }
          }
        }

        *(_DWORD *)(v2 + 20) = 0;
      }
    }
  }

  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B2B5C4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            unsigned int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 5)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        unsigned int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B2B87C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1C68 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B2B904(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1C68 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2B2D0(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B2B9FC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2BA48()
{
  return 1LL;
}

void *sub_100B2BA50@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.AppMonitorNotification");
}

BOOL sub_100B2BA60(unsigned int a1)
{
  return a1 < 0x31;
}

void sub_100B2BA6C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v31,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  8384LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v31,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v30, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v31);
  }

  int v5 = *(_DWORD *)(a2 + 112);
  if (!(_BYTE)v5) {
    goto LABEL_42;
  }
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 1u;
    int v6 = *(void **)(a1 + 8);
    if (!v6)
    {
      int v6 = operator new(0xA0uLL);
      sub_1001D2438((uint64_t)v6);
      *(void *)(a1 + 8) = v6;
    }

    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1C80 + 8);
    }
    sub_1001D6490((uint64_t)v6, v7);
    int v5 = *(_DWORD *)(a2 + 112);
  }

  if ((v5 & 2) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 2u;
    uint64_t v8 = *(void **)(a1 + 16);
    if (!v8)
    {
      uint64_t v8 = operator new(0x178uLL);
      sub_1001D24CC((uint64_t)v8);
      *(void *)(a1 + 16) = v8;
    }

    uint64_t v9 = *(void *)(a2 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1C80 + 16);
    }
    sub_1001D92D4((uint64_t)v8, v9);
    int v5 = *(_DWORD *)(a2 + 112);
  }

  if ((v5 & 4) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 4u;
    unsigned int v10 = *(void **)(a1 + 24);
    if (!v10)
    {
      unsigned int v10 = operator new(0x40uLL);
      sub_1001D260C((uint64_t)v10);
      *(void *)(a1 + 24) = v10;
    }

    uint64_t v11 = *(void *)(a2 + 24);
    if (!v11) {
      uint64_t v11 = *(void *)(qword_1019A1C80 + 24);
    }
    sub_1001DFC54((uint64_t)v10, v11);
    int v5 = *(_DWORD *)(a2 + 112);
  }

  if ((v5 & 8) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 8u;
    int v12 = *(void **)(a1 + 32);
    if (!v12)
    {
      int v12 = operator new(0x18uLL);
      sub_1001D2574((uint64_t)v12);
      *(void *)(a1 + 32) = v12;
    }

    uint64_t v13 = *(void *)(a2 + 32);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_1019A1C80 + 32);
    }
    sub_1001DCD30((uint64_t)v12, v13);
    int v5 = *(_DWORD *)(a2 + 112);
  }

  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 0x20) == 0) {
      goto LABEL_30;
    }
LABEL_34:
    uint64_t v15 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 112) |= 0x20u;
    *(void *)(a1 + 40) = v15;
    int v5 = *(_DWORD *)(a2 + 112);
    if ((v5 & 0x40) == 0)
    {
LABEL_31:
      if ((v5 & 0x80) == 0) {
        goto LABEL_42;
      }
      goto LABEL_37;
    }

    goto LABEL_35;
  }

  char v14 = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 112) |= 0x10u;
  *(_BYTE *)(a1 + 48) = v14;
  int v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x20) != 0) {
    goto LABEL_34;
  }
LABEL_30:
  if ((v5 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_35:
  unsigned int v16 = *(_DWORD *)(a2 + 52);
  if (!sub_1000641E0(v16)) {
    sub_101236594();
  }
  *(_DWORD *)(a1 + 112) |= 0x40u;
  *(_DWORD *)(a1 + 52) = v16;
  int v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x80) != 0)
  {
LABEL_37:
    *(_DWORD *)(a1 + 112) |= 0x80u;
    unsigned int v17 = *(void **)(a1 + 56);
    if (!v17)
    {
      unsigned int v17 = operator new(0x30uLL);
      sub_1001D2590((uint64_t)v17);
      *(void *)(a1 + 56) = v17;
    }

    uint64_t v18 = *(void *)(a2 + 56);
    if (!v18) {
      uint64_t v18 = *(void *)(qword_1019A1C80 + 56);
    }
    sub_1001DD17C((uint64_t)v17, v18);
    int v5 = *(_DWORD *)(a2 + 112);
  }

void sub_100B2BE88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_100B2BED4(void *result)
{
  if ((void *)qword_1019A1C80 != result)
  {
    char v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = v1[4];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    uint64_t v6 = v1[7];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    uint64_t v7 = v1[8];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    uint64_t v8 = v1[9];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
    uint64_t v9 = v1[10];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    uint64_t v10 = v1[11];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
    uint64_t result = (void *)v1[12];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100B2BFD0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871E10;
  sub_100B2BED4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B2C000(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871E10;
  sub_100B2BED4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100B2C034()
{
  unsigned __int8 v0 = (char *)operator new(0x78uLL);
  *(void *)unsigned __int8 v0 = off_101871E10;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 33) = 0u;
  *(_OWORD *)(v0 + 52) = 0u;
  *(_OWORD *)(v0 + 68) = 0u;
  *(_OWORD *)(v0 + 84) = 0u;
  *(_OWORD *)(v0 + 100) = 0u;
  return result;
}

uint64_t sub_100B2C078(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 112);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      double result = *(void *)(result + 8);
      if (result)
      {
        double result = sub_1001D6A04(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }

    if ((v2 & 2) != 0)
    {
      double result = *(void *)(v1 + 16);
      if (result)
      {
        double result = sub_1001D9EC4(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }

    if ((v2 & 4) != 0)
    {
      double result = *(void *)(v1 + 24);
      if (result)
      {
        double result = sub_1001DFDAC(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }

    if ((v2 & 8) != 0)
    {
      double result = *(void *)(v1 + 32);
      if (result)
      {
        double result = sub_1001DCE88(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }

    *(_BYTE *)(v1 + 48) = 0;
    *(void *)(v1 + 40) = 0LL;
    *(_DWORD *)(v1 + 52) = 0;
    if ((v2 & 0x80) != 0)
    {
      double result = *(void *)(v1 + 56);
      if (result)
      {
        double result = sub_1001DD314(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
  }

  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      double result = *(void *)(v1 + 64);
      if (result)
      {
        double result = sub_1001DD7D4(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }

    *(_DWORD *)(v1 + 104) = 0;
    if ((v2 & 0x400) != 0)
    {
      double result = *(void *)(v1 + 72);
      if (result)
      {
        double result = sub_1001DE048(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }

    if ((v2 & 0x800) != 0)
    {
      double result = *(void *)(v1 + 80);
      if (result)
      {
        double result = sub_1001FD9E4(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }

    if ((v2 & 0x1000) != 0)
    {
      double result = *(void *)(v1 + 88);
      if (result)
      {
        double result = sub_1001E05E8(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }

    if ((v2 & 0x2000) != 0)
    {
      double result = *(void *)(v1 + 96);
      if (result) {
        double result = sub_1001E0C5C(result);
      }
    }
  }

  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t sub_100B2C180( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_6;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_40;
        }
        *(_DWORD *)(a1 + 112) |= 1u;
        uint64_t v8 = *(void **)(a1 + 8);
        if (!v8)
        {
          uint64_t v8 = operator new(0xA0uLL);
          sub_1001D2438((uint64_t)v8);
          *(void *)(a1 + 8) = v8;
        }

        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v16 = *((_DWORD *)this + 14);
        int v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0LL;
        }
        int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v23 + 1;
        goto LABEL_52;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_40;
        }
LABEL_52:
        *(_DWORD *)(a1 + 112) |= 2u;
        BOOL v24 = *(void **)(a1 + 16);
        if (!v24)
        {
          BOOL v24 = operator new(0x178uLL);
          sub_1001D24CC((uint64_t)v24);
          *(void *)(a1 + 16) = v24;
        }

        uint64_t v25 = (char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v25;
          *((void *)this + 1) = v25 + 1;
        }

        int v26 = *((_DWORD *)this + 14);
        int v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27) {
          return 0LL;
        }
        int v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        int v30 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v30, 1);
        int v31 = v30 - 1;
        if (v31 < 0 == v21) {
          *((_DWORD *)this + 14) = v31;
        }
        int v32 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v32 + 1;
LABEL_66:
        *(_DWORD *)(a1 + 112) |= 4u;
        int v33 = *(int **)(a1 + 24);
        if (!v33)
        {
          int v33 = (int *)operator new(0x40uLL);
          sub_1001D260C((uint64_t)v33);
          *(void *)(a1 + 24) = v33;
        }

        int v34 = (char *)*((void *)this + 1);
        if ((unint64_t)v34 >= *((void *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v34;
          *((void *)this + 1) = v34 + 1;
        }

        int v35 = *((_DWORD *)this + 14);
        int v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36) {
          return 0LL;
        }
        int v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        int v39 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v39, 1);
        int v40 = v39 - 1;
        if (v40 < 0 == v21) {
          *((_DWORD *)this + 14) = v40;
        }
        unsigned int v41 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v41 + 1;
LABEL_80:
        *(_DWORD *)(a1 + 112) |= 8u;
        unsigned int v42 = *(void **)(a1 + 32);
        if (!v42)
        {
          unsigned int v42 = operator new(0x18uLL);
          sub_1001D2574((uint64_t)v42);
          *(void *)(a1 + 32) = v42;
        }

        unsigned int v43 = (char *)*((void *)this + 1);
        if ((unint64_t)v43 >= *((void *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v43;
          *((void *)this + 1) = v43 + 1;
        }

        int v44 = *((_DWORD *)this + 14);
        int v45 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v44 + 1;
        if (v44 >= v45) {
          return 0LL;
        }
        int v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
        int v48 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v48, 1);
        int v49 = v48 - 1;
        if (v49 < 0 == v21) {
          *((_DWORD *)this + 14) = v49;
        }
        unsigned int v50 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        uint64_t v11 = v50 + 1;
        *((void *)this + 1) = v11;
LABEL_94:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v51 = v112[0];
          unsigned int v52 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v51 = *v11;
          unsigned int v52 = v11 + 1;
          *((void *)this + 1) = v52;
        }

        *(_BYTE *)(a1 + 48) = v51 != 0;
        *(_DWORD *)(a1 + 112) |= 0x10u;
        *((void *)this + 1) = v52 + 1;
LABEL_102:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v112) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 40) = *(void *)v112;
        *(_DWORD *)(a1 + 112) |= 0x20u;
        int v54 = (_BYTE *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        uint64_t v13 = v54 + 1;
        *((void *)this + 1) = v13;
LABEL_106:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v55 = v112[0];
        }

        else
        {
          unsigned int v55 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (sub_1000641E0(v55))
        {
          if (!sub_1000641E0(v55)) {
            sub_101236594();
          }
          *(_DWORD *)(a1 + 112) |= 0x40u;
          *(_DWORD *)(a1 + 52) = v55;
        }

        uint64_t v56 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v56 + 1;
LABEL_117:
        *(_DWORD *)(a1 + 112) |= 0x80u;
        __int16 v57 = *(void **)(a1 + 56);
        if (!v57)
        {
          __int16 v57 = operator new(0x30uLL);
          sub_1001D2590((uint64_t)v57);
          *(void *)(a1 + 56) = v57;
        }

        uint64_t v58 = (char *)*((void *)this + 1);
        if ((unint64_t)v58 >= *((void *)this + 2) || *v58 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v58;
          *((void *)this + 1) = v58 + 1;
        }

        int v59 = *((_DWORD *)this + 14);
        int v60 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v59 + 1;
        if (v59 >= v60) {
          return 0LL;
        }
        int v61 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v61);
        int v63 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v63, 1);
        int v64 = v63 - 1;
        if (v64 < 0 == v21) {
          *((_DWORD *)this + 14) = v64;
        }
        uint64_t v65 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v65 + 1;
LABEL_131:
        *(_DWORD *)(a1 + 112) |= 0x100u;
        uint64_t v66 = *(void **)(a1 + 64);
        if (!v66)
        {
          uint64_t v66 = operator new(0x20uLL);
          sub_1001D25B0(v66);
          *(void *)(a1 + sub_10000AE14(v2 - 64) = v66;
        }

        uint64_t v67 = (char *)*((void *)this + 1);
        if ((unint64_t)v67 >= *((void *)this + 2) || *v67 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v67;
          *((void *)this + 1) = v67 + 1;
        }

        int v68 = *((_DWORD *)this + 14);
        int v69 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v68 + 1;
        if (v68 >= v69) {
          return 0LL;
        }
        int v70 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v70);
        int v72 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v72, 1);
        int v73 = v72 - 1;
        if (v73 < 0 == v21) {
          *((_DWORD *)this + 14) = v73;
        }
        uint64_t v74 = (_BYTE *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        uint64_t v15 = v74 + 1;
        *((void *)this + 1) = v15;
LABEL_145:
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v75 = v112[0];
        }

        else
        {
          unsigned int v75 = *v15;
          *((void *)this + 1) = v15 + 1;
        }

        if (sub_1000641E0(v75))
        {
          if (!sub_1000641E0(v75)) {
            sub_1012365BC();
          }
          *(_DWORD *)(a1 + 112) |= 0x200u;
          *(_DWORD *)(a1 + 104) = v75;
        }

        uint64_t v76 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v76 + 1;
LABEL_156:
        *(_DWORD *)(a1 + 112) |= 0x400u;
        uint64_t v77 = *(void **)(a1 + 72);
        if (!v77)
        {
          uint64_t v77 = operator new(0x28uLL);
          sub_1001D25C4((uint64_t)v77);
          *(void *)(a1 + 72) = v77;
        }

        uint64_t v78 = (char *)*((void *)this + 1);
        if ((unint64_t)v78 >= *((void *)this + 2) || *v78 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v78;
          *((void *)this + 1) = v78 + 1;
        }

        int v79 = *((_DWORD *)this + 14);
        int v80 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v79 + 1;
        if (v79 >= v80) {
          return 0LL;
        }
        int v81 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v81);
        int v83 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v83, 1);
        int v84 = v83 - 1;
        if (v84 < 0 == v21) {
          *((_DWORD *)this + 14) = v84;
        }
        uint64_t v85 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v85 + 1;
LABEL_170:
        *(_DWORD *)(a1 + 112) |= 0x800u;
        uint64_t v86 = *(void **)(a1 + 80);
        if (!v86)
        {
          uint64_t v86 = operator new(0x28uLL);
          sub_1001D2A5C((uint64_t)v86);
          *(void *)(a1 + 80) = v86;
        }

        uint64_t v87 = (char *)*((void *)this + 1);
        if ((unint64_t)v87 >= *((void *)this + 2) || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v87;
          *((void *)this + 1) = v87 + 1;
        }

        int v88 = *((_DWORD *)this + 14);
        int v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89) {
          return 0LL;
        }
        int v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        int v92 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v92, 1);
        int v93 = v92 - 1;
        if (v93 < 0 == v21) {
          *((_DWORD *)this + 14) = v93;
        }
        uint64_t v94 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v94 + 1;
LABEL_184:
        *(_DWORD *)(a1 + 112) |= 0x1000u;
        uint64_t v95 = *(void **)(a1 + 88);
        if (!v95)
        {
          uint64_t v95 = operator new(0x20uLL);
          sub_1001D2630((uint64_t)v95);
          *(void *)(a1 + 88) = v95;
        }

        uint64_t v96 = (char *)*((void *)this + 1);
        if ((unint64_t)v96 >= *((void *)this + 2) || *v96 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v96;
          *((void *)this + 1) = v96 + 1;
        }

        int v97 = *((_DWORD *)this + 14);
        int v98 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v97 + 1;
        if (v97 >= v98) {
          return 0LL;
        }
        int v99 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v99);
        int v101 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v101, 1);
        int v102 = v101 - 1;
        if (v102 < 0 == v21) {
          *((_DWORD *)this + 14) = v102;
        }
        uint64_t v103 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v103 + 1;
LABEL_198:
        *(_DWORD *)(a1 + 112) |= 0x2000u;
        uint64_t v104 = *(void **)(a1 + 96);
        if (!v104)
        {
          uint64_t v104 = operator new(0x18uLL);
          sub_1001D2658((uint64_t)v104);
          *(void *)(a1 + 96) = v104;
        }

        uint64_t v105 = (char *)*((void *)this + 1);
        if ((unint64_t)v105 >= *((void *)this + 2) || *v105 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v112)) {
            return 0LL;
          }
        }

        else
        {
          v112[0] = *v105;
          *((void *)this + 1) = v105 + 1;
        }

        int v106 = *((_DWORD *)this + 14);
        int v107 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v106 + 1;
        if (v106 >= v107) {
          return 0LL;
        }
        int v108 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v108);
        int v110 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v110, 1);
        int v111 = v110 - 1;
        if (v111 < 0 == v21) {
          *((_DWORD *)this + 14) = v111;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_66;
        }
        goto LABEL_40;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_80;
        }
        goto LABEL_40;
      case 5u:
        int v7 = TagFallback & 7;
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_94;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_102;
        }
        goto LABEL_40;
      case 7u:
        int v7 = TagFallback & 7;
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_106;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_117;
        }
        goto LABEL_40;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_131;
        }
        goto LABEL_40;
      case 0xAu:
        int v7 = TagFallback & 7;
        uint64_t v15 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_145;
      case 0xBu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_156;
        }
        goto LABEL_40;
      case 0xCu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_170;
        }
        goto LABEL_40;
      case 0xDu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_184;
        }
        goto LABEL_40;
      case 0xEu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_198;
        }
        goto LABEL_40;
      default:
        int v7 = TagFallback & 7;
LABEL_40:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

void sub_100B2CD58(_Unwind_Exception *a1)
{
}

uint64_t sub_100B2CD90( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 112);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1C80 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 112);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1C80 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }

uint64_t sub_100B2CFDC(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 112);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_52;
  }

  if ((v3 & 1) == 0)
  {
    int v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_1019A1C80 + 8);
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001D78C0(v6, a2);
  int v8 = (int)v7;
  else {
    int v9 = 1;
  }
  int v4 = v8 + v9 + 1;
  int v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v10 = *(void *)(a1 + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_1019A1C80 + 16);
    }
    uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DC634(v10, a2);
    int v12 = (int)v11;
    else {
      int v13 = 1;
    }
    v4 += v12 + v13 + 1;
    int v3 = *(_DWORD *)(a1 + 112);
  }

void sub_100B2D398(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2D3E4()
{
  return 1LL;
}

void *sub_100B2D3EC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.LocationProviderNotification.NotificationData");
}

void sub_100B2D3FC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v17,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  8883LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v17,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }

  int v5 = *(_DWORD *)(a2 + 60);
  if ((_BYTE)v5)
  {
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 60) |= 1u;
      *(void *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 60);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_15;
      }
    }

    else if ((v5 & 2) == 0)
    {
      goto LABEL_6;
    }

    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 60) |= 2u;
    *(void *)(a1 + 16) = v7;
    int v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }

void sub_100B2D5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B2D600(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871E88;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B2D610(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871E88;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_100B2D630()
{
  unsigned __int8 v0 = (char *)operator new(0x40uLL);
  *((void *)v0 + 5) = 0LL;
  *((_DWORD *)v0 + 9) = 0;
  *(void *)unsigned __int8 v0 = off_101871E88;
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *((void *)v0 + 3) = 0LL;
  *(_DWORD *)(v0 + 31) = 0;
  *(void *)&double result = 0x100000001LL;
  *((_OWORD *)v0 + 3) = xmmword_1012CA3D0;
  return result;
}

uint64_t sub_100B2D670(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 60);
  if ((_BYTE)v1)
  {
    *(void *)(result + 40) = 0LL;
    *(_DWORD *)(result + 36) = 0;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)(result + 31) = 0;
  }

  if ((v1 & 0xFF00) != 0) {
    *(void *)(result + 48) = 0x100000001LL;
  }
  *(_DWORD *)(result + 60) = 0;
  return result;
}

uint64_t sub_100B2D6A8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_39;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v34) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v34;
        *(_DWORD *)(a1 + 60) |= 1u;
        uint64_t v8 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_39;
        }
LABEL_14:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v34) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = *(void *)v34;
        *(_DWORD *)(a1 + 60) |= 2u;
        char v9 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v9 + 1;
LABEL_19:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v34) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 24) = *(void *)v34;
        *(_DWORD *)(a1 + 60) |= 4u;
        char v11 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        uint64_t v12 = v11 + 1;
        *((void *)this + 1) = v12;
LABEL_25:
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v13 = v34[0];
          unsigned int v14 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v13 = *v12;
          unsigned int v14 = v12 + 1;
          *((void *)this + 1) = v14;
        }

        *(_BYTE *)(a1 + 32) = v13 != 0;
        *(_DWORD *)(a1 + 60) |= 8u;
        unsigned int v15 = v14 + 1;
        *((void *)this + 1) = v15;
LABEL_48:
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v24 = v34[0];
          uint64_t v25 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v24 = *v15;
          uint64_t v25 = v15 + 1;
          *((void *)this + 1) = v25;
        }

        *(_BYTE *)(a1 + 33) = v24 != 0;
        *(_DWORD *)(a1 + 60) |= 0x10u;
        char v16 = v25 + 1;
        *((void *)this + 1) = v16;
LABEL_56:
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v26 = v34[0];
          int v27 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v26 = *v16;
          int v27 = v16 + 1;
          *((void *)this + 1) = v27;
        }

        *(_BYTE *)(a1 + 34) = v26 != 0;
        *(_DWORD *)(a1 + 60) |= 0x20u;
        *((void *)this + 1) = v27 + 1;
LABEL_64:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v34) & 1) != 0)
        {
          *(void *)(a1 + 40) = *(void *)v34;
          *(_DWORD *)(a1 + 60) |= 0x40u;
          int v28 = (_BYTE *)*((void *)this + 1);
          unint64_t v17 = *((void *)this + 2);
          if ((unint64_t)v28 < v17 && *v28 == 64)
          {
            uint64_t v18 = v28 + 1;
            *((void *)this + 1) = v18;
LABEL_68:
            if ((unint64_t)v18 >= v17 || *v18 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
              if (!(_DWORD)result) {
                return result;
              }
              unsigned int v29 = v34[0];
            }

            else
            {
              unsigned int v29 = *v18;
              *((void *)this + 1) = v18 + 1;
            }

            if (sub_1000641E0(v29))
            {
              if (!sub_1000641E0(v29)) {
                sub_10125FC20();
              }
              *(_DWORD *)(a1 + 60) |= 0x80u;
              *(_DWORD *)(a1 + 36) = v29;
            }

            int v30 = (_BYTE *)*((void *)this + 1);
            unint64_t v19 = *((void *)this + 2);
            if ((unint64_t)v30 < v19 && *v30 == 72)
            {
              int v20 = v30 + 1;
              *((void *)this + 1) = v20;
LABEL_79:
              if ((unint64_t)v20 >= v19 || *v20 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
                if (!(_DWORD)result) {
                  return result;
                }
                unsigned int v31 = v34[0];
              }

              else
              {
                unsigned int v31 = *v20;
                *((void *)this + 1) = v20 + 1;
              }

              if (sub_10006ED58(v31))
              {
                if (!sub_10006ED58(v31)) {
                  sub_10125FBF8();
                }
                *(_DWORD *)(a1 + 60) |= 0x100u;
                *(_DWORD *)(a1 + 48) = v31;
              }

              int v32 = (_BYTE *)*((void *)this + 1);
              unint64_t v21 = *((void *)this + 2);
              if ((unint64_t)v32 < v21 && *v32 == 80)
              {
                unsigned int v22 = v32 + 1;
                *((void *)this + 1) = v22;
LABEL_90:
                if ((unint64_t)v22 >= v21 || *v22 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unsigned int v33 = v34[0];
                }

                else
                {
                  unsigned int v33 = *v22;
                  *((void *)this + 1) = v22 + 1;
                }

                if (sub_1000641E0(v33))
                {
                  if (!sub_1000641E0(v33)) {
                    sub_10125FBD0();
                  }
                  *(_DWORD *)(a1 + 60) |= 0x200u;
                  *(_DWORD *)(a1 + 52) = v33;
                }

                if (*((void *)this + 1) == *((void *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1LL;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_19;
        }
        goto LABEL_39;
      case 4u:
        int v7 = TagFallback & 7;
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_25;
      case 5u:
        int v7 = TagFallback & 7;
        unsigned int v15 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_48;
      case 6u:
        int v7 = TagFallback & 7;
        char v16 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_56;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_64;
        }
        goto LABEL_39;
      case 8u:
        int v7 = TagFallback & 7;
        uint64_t v18 = (char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        goto LABEL_68;
      case 9u:
        int v7 = TagFallback & 7;
        int v20 = (char *)*((void *)this + 1);
        unint64_t v19 = *((void *)this + 2);
        goto LABEL_79;
      case 0xAu:
        int v7 = TagFallback & 7;
        unsigned int v22 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_90;
      default:
        int v7 = TagFallback & 7;
LABEL_39:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100B2DBF0( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 60);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v6 = *(_DWORD *)(v5 + 60);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_100B2DD2C(unsigned int *a1, unsigned int a2)
{
  unsigned int v3 = a1[15];
  if ((_BYTE)v3)
  {
    unsigned int v4 = ((int)(v3 << 31) >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x10) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x20) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x40) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 0x80) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
      if ((v6 & 0x80000000) != 0)
      {
        int v7 = 11;
      }

      else if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        unsigned int v3 = a1[15];
      }

      else
      {
        int v7 = 2;
      }

      uint64_t v5 = (v7 + v5);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[12];
      if ((v8 & 0x80000000) != 0)
      {
        int v9 = 11;
      }

      else if (v8 >= 0x80)
      {
        int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
        unsigned int v3 = a1[15];
      }

      else
      {
        int v9 = 2;
      }

      uint64_t v5 = (v9 + v5);
    }

    if ((v3 & 0x200) != 0)
    {
      unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[13];
      if ((v10 & 0x80000000) != 0)
      {
        int v11 = 11;
      }

      else if (v10 >= 0x80)
      {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      }

      else
      {
        int v11 = 2;
      }

      uint64_t v5 = (v11 + v5);
    }
  }

  a1[14] = v5;
  return v5;
}

void sub_100B2DE58(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2DEA4()
{
  return 1LL;
}

void *sub_100B2DEAC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.LocationProviderNotification.RegInfo");
}

void sub_100B2DEBC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v13,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  9200LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v13,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 0x31) {
        sub_10125FC48();
      }
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 4u;
      uint64_t v8 = *(char **)(a1 + 16);
      if (!v8)
      {
        uint64_t v8 = (char *)operator new(0x78uLL);
        *(void *)uint64_t v8 = off_101871E10;
        *(_OWORD *)(v8 + 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 33) = 0u;
        *(_OWORD *)(v8 + 52) = 0u;
        *(_OWORD *)(v8 + 68) = 0u;
        *(_OWORD *)(v8 + 84) = 0u;
        *(_OWORD *)(v8 + 100) = 0u;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1C78 + 16);
      }
      sub_100B2BA6C((uint64_t)v8, v9);
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      unint64_t v10 = *(char **)(a1 + 24);
      if (!v10)
      {
        unint64_t v10 = (char *)operator new(0x40uLL);
        *((void *)v10 + 5) = 0LL;
        *((_DWORD *)v10 + 9) = 0;
        *(void *)unint64_t v10 = off_101871E88;
        *((void *)v10 + 1) = 0LL;
        *((void *)v10 + 2) = 0LL;
        *((void *)v10 + 3) = 0LL;
        *(_DWORD *)(v10 + 31) = 0;
        *((_OWORD *)v10 + 3) = xmmword_1012CA3D0;
        *(void *)(a1 + 24) = v10;
      }

      uint64_t v11 = *(void *)(a2 + 24);
      if (!v11) {
        uint64_t v11 = *(void *)(qword_1019A1C78 + 24);
      }
      sub_100B2D3FC((uint64_t)v10, v11);
    }
  }

void sub_100B2E044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_100B2E05C(void *result)
{
  if ((void *)qword_1019A1C78 != result)
  {
    int v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t result = (void *)v1[3];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100B2E0B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871F00;
  sub_100B2E05C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B2E0E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101871F00;
  sub_100B2E05C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100B2E11C()
{
  unsigned __int8 v0 = (char *)operator new(0x28uLL);
  *(void *)unsigned __int8 v0 = off_101871F00;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  return result;
}

uint64_t sub_100B2E14C(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 36);
  if ((_BYTE)v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      double result = *(void *)(result + 16);
      if (result)
      {
        double result = sub_100B2C078(result);
        int v2 = *(_DWORD *)(v1 + 36);
      }
    }

    if ((v2 & 8) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 24);
      if (v3)
      {
        int v4 = *(_DWORD *)(v3 + 60);
        if ((_BYTE)v4)
        {
          *(void *)(v3 + 40) = 0LL;
          *(_DWORD *)(v3 + 36) = 0;
          *(void *)(v3 + 16) = 0LL;
          *(void *)(v3 + 24) = 0LL;
          *(void *)(v3 + 8) = 0LL;
          *(_DWORD *)(v3 + 31) = 0;
        }

        if ((v4 & 0xFF00) != 0) {
          *(void *)(v3 + 48) = 0x100000001LL;
        }
        *(_DWORD *)(v3 + 60) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100B2E1CC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v34;
          uint64_t v11 = (_BYTE *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v10 = *v9;
          uint64_t v11 = v9 + 1;
          *((void *)this + 1) = v11;
        }

        *(_DWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 36) |= 1u;
        if ((unint64_t)v11 < v8 && *v11 == 16)
        {
          char v12 = v11 + 1;
          *((void *)this + 1) = v12;
          goto LABEL_25;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        char v12 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
LABEL_25:
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v14 = v34;
        }

        else
        {
          unsigned int v14 = *v12;
          *((void *)this + 1) = v12 + 1;
        }

        if (v14 <= 0x30)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 12) = v14;
        }

        unsigned int v15 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v15 + 1;
LABEL_35:
        *(_DWORD *)(a1 + 36) |= 4u;
        char v16 = *(char **)(a1 + 16);
        if (!v16)
        {
          char v16 = (char *)operator new(0x78uLL);
          *(void *)char v16 = off_101871E10;
          *(_OWORD *)(v16 + 8) = 0u;
          *(_OWORD *)(v16 + 24) = 0u;
          *(_OWORD *)(v16 + 33) = 0u;
          *(_OWORD *)(v16 + 52) = 0u;
          *(_OWORD *)(v16 + 68) = 0u;
          *(_OWORD *)(v16 + 84) = 0u;
          *(_OWORD *)(v16 + 100) = 0u;
          *(void *)(a1 + 16) = v16;
        }

        unint64_t v17 = (char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v34)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v34 = *v17;
          *((void *)this + 1) = v17 + 1;
        }

        int v18 = *((_DWORD *)this + 14);
        int v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 >= v19) {
          return 0LL;
        }
        int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
        int v22 = *((_DWORD *)this + 14);
        BOOL v23 = __OFSUB__(v22, 1);
        int v24 = v22 - 1;
        if (v24 < 0 == v23) {
          *((_DWORD *)this + 14) = v24;
        }
        uint64_t v25 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v25 + 1;
LABEL_49:
        *(_DWORD *)(a1 + 36) |= 8u;
        unsigned int v26 = *(char **)(a1 + 24);
        if (!v26)
        {
          unsigned int v26 = (char *)operator new(0x40uLL);
          *((void *)v26 + 5) = 0LL;
          *((_DWORD *)v26 + 9) = 0;
          *(void *)unsigned int v26 = off_101871E88;
          *((void *)v26 + 1) = 0LL;
          *((void *)v26 + 2) = 0LL;
          *((void *)v26 + 3) = 0LL;
          *(_DWORD *)(v26 + 31) = 0;
          *((_OWORD *)v26 + 3) = xmmword_1012CA3D0;
          *(void *)(a1 + 24) = v26;
        }

        int v27 = (char *)*((void *)this + 1);
        if ((unint64_t)v27 >= *((void *)this + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v34)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v34 = *v27;
          *((void *)this + 1) = v27 + 1;
        }

        int v28 = *((_DWORD *)this + 14);
        int v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 < v29)
        {
          int v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
          if (sub_100B2D6A8((uint64_t)v26, this, v31))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
              int v32 = *((_DWORD *)this + 14);
              BOOL v23 = __OFSUB__(v32, 1);
              int v33 = v32 - 1;
              if (v33 < 0 == v23) {
                *((_DWORD *)this + 14) = v33;
              }
              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1LL;
                *((_BYTE *)this + 36) = 1;
                return result;
              }

              continue;
            }
          }
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_35;
        }
        goto LABEL_17;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        goto LABEL_49;
      default:
        int v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100B2E5C0( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    goto LABEL_11;
  }

uint64_t sub_100B2E674(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_34;
  }

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 36);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 36);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }

  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1C78 + 16);
  }
  uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2CFDC(v8, a2);
  int v10 = (int)v9;
  else {
    int v11 = 1;
  }
  uint64_t v4 = (v4 + v10 + v11 + 1);
  if ((*(_DWORD *)(a1 + 36) & 8) != 0)
  {
LABEL_28:
    char v12 = *(unsigned int **)(a1 + 24);
    if (!v12) {
      char v12 = *(unsigned int **)(qword_1019A1C78 + 24);
    }
    unsigned int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2DD2C(v12, a2);
    int v15 = (int)v13;
    else {
      int v16 = 1;
    }
    uint64_t v4 = (v4 + v15 + v16 + 1);
  }

void sub_100B2E7BC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B2E808()
{
  return 1LL;
}

void *sub_100B2E810@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.LocationProviderNotification");
}

float sub_100B2E820(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  9404LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    int v6 = *(void **)(a1 + 8);
    if (!v6)
    {
      int v6 = operator new(0x40uLL);
      sub_1001D2B28((uint64_t)v6);
      *(void *)(a1 + 8) = v6;
    }

    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1C98 + 8);
    }
    return sub_100205E58((uint64_t)v6, v7);
  }

  return result;
}

void sub_100B2E8E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B2E908(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871F78;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C98 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B2E95C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2E970()
{
  float result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *float result = &off_101871F78;
  return result;
}

uint64_t sub_100B2E998(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    float result = *(void *)(result + 8);
    if (result) {
      float result = sub_100206090(result);
    }
  }

  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B2E9CC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        uint64_t v7 = operator new(0x40uLL);
        sub_1001D2B28((uint64_t)v7);
        *(void *)(a1 + 8) = v7;
      }

      char v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

void sub_100B2EB54(_Unwind_Exception *a1)
{
}

uint64_t sub_100B2EB68( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A1C98 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_100B2EB94(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A1C98 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002065C8(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

float sub_100B2EC00(uint64_t a1, void *lpsrc)
{
  return sub_100B2E820(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B2EC4C()
{
  return 1LL;
}

void *sub_100B2EC54@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.OutdoorServiceNotification.NotificationData");
}

float sub_100B2EC64(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  9644LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v7;
      int v6 = *(_DWORD *)(a2 + 28);
    }

    if ((v6 & 2) != 0)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 12);
      if (v8 >= 2) {
        sub_10125FC70();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v8;
      int v6 = *(_DWORD *)(a2 + 28);
    }

    if ((v6 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v9 = *(void **)(a1 + 16);
      if (!v9)
      {
        int v9 = operator new(0x18uLL);
        v9[1] = 0LL;
        v9[2] = 0LL;
        *int v9 = &off_101871F78;
        *(void *)(a1 + 16) = v9;
      }

      uint64_t v10 = *(void *)(a2 + 16);
      if (!v10) {
        uint64_t v10 = *(void *)(qword_1019A1C90 + 16);
      }
      return sub_100B2E820((uint64_t)v9, v10);
    }
  }

  return result;
}

void sub_100B2ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B2ED80(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101871FF0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1C90 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B2EDD4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2EDE8()
{
  float result = operator new(0x20uLL);
  *float result = &off_101871FF0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B2EE10(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          float result = *(void *)(v3 + 8);
          if (result) {
            float result = sub_100206090(result);
          }
        }

        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B2EE60( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          uint64_t v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B2F110( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1C90 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B2F198(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1C90 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2EB94(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

float sub_100B2F290(uint64_t a1, void *lpsrc)
{
  return sub_100B2EC64(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B2F2DC()
{
  return 1LL;
}

void *sub_100B2F2E4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.OutdoorServiceNotification");
}

double sub_100B2F2F4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  9846LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    int v6 = *(void **)(a1 + 8);
    if (!v6)
    {
      int v6 = operator new(0x48uLL);
      sub_1001D2B04((uint64_t)v6);
      *(void *)(a1 + 8) = v6;
    }

    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1CA8 + 8);
    }
    return sub_100204E2C((uint64_t)v6, v7);
  }

  return result;
}

void sub_100B2F3B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B2F3DC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101872068;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1CA8 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B2F430(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2F444()
{
  double result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = &off_101872068;
  return result;
}

uint64_t sub_100B2F46C(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    double result = *(void *)(result + 8);
    if (result) {
      double result = sub_100205274(result);
    }
  }

  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B2F4A0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        uint64_t v7 = operator new(0x48uLL);
        sub_1001D2B04((uint64_t)v7);
        *(void *)(a1 + 8) = v7;
      }

      char v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

void sub_100B2F628(_Unwind_Exception *a1)
{
}

uint64_t sub_100B2F63C( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A1CA8 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_100B2F668(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A1CA8 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100205BB8(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

double sub_100B2F6D4(uint64_t a1, void *lpsrc)
{
  return sub_100B2F2F4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B2F720()
{
  return 1LL;
}

void *sub_100B2F728@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.RoutineVisitNotification.NotificationData");
}

double sub_100B2F738(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  10086LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v7;
      int v6 = *(_DWORD *)(a2 + 28);
    }

    if ((v6 & 2) != 0)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 12);
      if (v8 >= 3) {
        sub_10125FC98();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v8;
      int v6 = *(_DWORD *)(a2 + 28);
    }

    if ((v6 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v9 = *(void **)(a1 + 16);
      if (!v9)
      {
        int v9 = operator new(0x18uLL);
        v9[1] = 0LL;
        v9[2] = 0LL;
        *int v9 = &off_101872068;
        *(void *)(a1 + 16) = v9;
      }

      uint64_t v10 = *(void *)(a2 + 16);
      if (!v10) {
        uint64_t v10 = *(void *)(qword_1019A1CA0 + 16);
      }
      return sub_100B2F2F4((uint64_t)v9, v10);
    }
  }

  return result;
}

void sub_100B2F83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B2F854(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018720E0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1CA0 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B2F8A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2F8BC()
{
  double result = operator new(0x20uLL);
  *double result = &off_1018720E0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B2F8E4(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          double result = *(void *)(v3 + 8);
          if (result) {
            double result = sub_100205274(result);
          }
        }

        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B2F934( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          uint64_t v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B2FBE4( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1CA0 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B2FC6C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1CA0 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2F668(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

double sub_100B2FD64(uint64_t a1, void *lpsrc)
{
  return sub_100B2F738(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B2FDB0()
{
  return 1LL;
}

void *sub_100B2FDB8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.RoutineVisitNotification");
}

void sub_100B2FDC8(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  10275LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = a1[5];
      uint64_t v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  v7 + 1);
          int v7 = a1[5];
        }

        a1[5] = v7 + 1;
        unsigned int v10 = sub_100381E08();
        uint64_t v11 = *((void *)a1 + 1);
        uint64_t v12 = (int)a1[4];
        a1[4] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        a1[4] = v8 + 1;
        unsigned int v10 = *(void **)(v9 + 8 * v8);
      }

      sub_100206734((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

void sub_100B2FEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B2FF04(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101872158;
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B2FF3C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B2FF50()
{
  uint64_t result = operator new(0x28uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_101872158;
  *((_DWORD *)result + 6) = 0;
  result[4] = 0LL;
  return result;
}

uint64_t sub_100B2FF80(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100B2FFD8( int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
    }

    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }

          a1[5] = v8 + 1;
          uint64_t v11 = sub_100381E08();
          uint64_t v12 = *((void *)a1 + 1);
          uint64_t v13 = a1[4];
          a1[4] = v13 + 1;
          *(void *)(v12 + 8 * v13) = v11;
        }

        else
        {
          uint64_t v10 = *((void *)a1 + 1);
          a1[4] = v9 + 1;
          uint64_t v11 = *(void **)(v10 + 8 * v9);
        }

        BOOL v14 = (char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v25)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v25 = *v14;
          *((void *)this + 1) = v14 + 1;
        }

        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0LL;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        unsigned int v22 = (_BYTE *)*((void *)this + 1);
        int v23 = (_BYTE *)*((void *)this + 2);
        if (v22 >= v23 || *v22 != 10)
        {
          if (v22 == v23 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          goto LABEL_2;
        }

        *((void *)this + 1) = v22 + 1;
      }
    }
  }

uint64_t sub_100B301C4( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  return result;
}

uint64_t sub_100B30220(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002074A8( *(unsigned int **)(*(void *)(a1 + 8)
                                                                                               + 8 * v4),
                                                                              a2);
      int v6 = (int)v5;
      else {
        int v7 = 1;
      }
      uint64_t v3 = (v6 + v3 + v7);
      ++v4;
    }

    while (v4 < *(int *)(a1 + 16));
  }

  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_100B3029C(_DWORD *a1, void *lpsrc)
{
}

uint64_t sub_100B302E8()
{
  return 1LL;
}

void *sub_100B302F0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.InertialOdometryNotification.NotificationData");
}

void sub_100B30300(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  10511LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2) {
        sub_10125FCC0();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        int v8 = operator new(0x28uLL);
        v8[1] = 0LL;
        v8[2] = 0LL;
        void *v8 = off_101872158;
        *((_DWORD *)v8 + 6) = 0;
        _DWORD v8[4] = 0LL;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1CB0 + 16);
      }
      sub_100B2FDC8(v8, v9);
    }
  }

void sub_100B3040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B30424(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018721D0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1CB0 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B30478(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B3048C()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_1018721D0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B304B4(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          uint64_t v4 = 0LL;
          do
          {
            uint64_t v5 = *(void *)(*(void *)(v3 + 8) + 8 * v4);
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5);
            ++v4;
          }

          while (v4 < *(int *)(v3 + 16));
        }

        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B30530( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            uint64_t v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            uint64_t v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            uint64_t v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B307E8( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1CB0 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B30870(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1CB0 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B30220(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B30968(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B309B4()
{
  return 1LL;
}

void *sub_100B309BC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.InertialOdometryNotification");
}

void sub_100B309CC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  10752LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      int v6 = *(void **)(a1 + 8);
      if (!v6)
      {
        int v6 = operator new(0x28uLL);
        sub_1001D273C((uint64_t)v6);
        *(void *)(a1 + 8) = v6;
      }

      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_1019A1CC8 + 8);
      }
      sub_1001E56C4((uint64_t)v6, v7);
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        uint64_t v8 = operator new(0x38uLL);
        sub_1001D2704((uint64_t)v8);
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1CC8 + 16);
      }
      sub_1001E4228((uint64_t)v8, v9);
    }
  }

void sub_100B30ADC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_100B30B08(void *result)
{
  if ((void *)qword_1019A1CC8 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100B30B64(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101872248;
  sub_100B30B08(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B30B94(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101872248;
  sub_100B30B08(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_100B30BC8()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = off_101872248;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B30BF0(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 28);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1001E58B4(result);
        int v2 = *(_DWORD *)(v1 + 28);
      }
    }

    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result) {
        uint64_t result = sub_1001E459C(result);
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B30C3C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        uint64_t v8 = *(void **)(a1 + 8);
        if (!v8)
        {
          uint64_t v8 = operator new(0x28uLL);
          sub_1001D273C((uint64_t)v8);
          *(void *)(a1 + 8) = v8;
        }

        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v27)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v27 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0LL;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        int v17 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 18)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }

      int v7 = TagFallback & 7;
      if (v7 != 2) {
        goto LABEL_17;
      }
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      unsigned int v18 = *(void **)(a1 + 16);
      if (!v18)
      {
        unsigned int v18 = operator new(0x38uLL);
        sub_1001D2704((uint64_t)v18);
        *(void *)(a1 + 16) = v18;
      }

      int v19 = (char *)*((void *)this + 1);
      if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v28)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v28 = *v19;
        *((void *)this + 1) = v19 + 1;
      }

      int v20 = *((_DWORD *)this + 14);
      int v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21) {
        return 0LL;
      }
      int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      int v24 = *((_DWORD *)this + 14);
      BOOL v15 = __OFSUB__(v24, 1);
      int v25 = v24 - 1;
      if (v25 < 0 == v15) {
        *((_DWORD *)this + 14) = v25;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4) {
      return 1LL;
    }
  }

void sub_100B30EC8(_Unwind_Exception *a1)
{
}

uint64_t sub_100B30EE0( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1CC8 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1CC8 + 16);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  }

  return result;
}

uint64_t sub_100B30F5C(uint64_t a1, unsigned int a2)
{
  if (!*(_BYTE *)(a1 + 28))
  {
    uint64_t v3 = 0LL;
    goto LABEL_18;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    uint64_t v3 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_1019A1CC8 + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E5C1C(v4, a2);
  int v6 = (int)v5;
  else {
    int v7 = 1;
  }
  uint64_t v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 28) & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1CC8 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E4C78(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v3 = (v3 + v11 + v12 + 1);
  }

void sub_100B3102C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B31078()
{
  return 1LL;
}

void *sub_100B31080@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.MotionStateMediatorNotification.NotificationData");
}

void sub_100B31090(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  10996LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 3) {
        sub_10125FCE8();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        uint64_t v8 = operator new(0x20uLL);
        void *v8 = off_101872248;
        v8[1] = 0LL;
        v8[2] = 0LL;
        v8[3] = 0LL;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1CC0 + 16);
      }
      sub_100B309CC((uint64_t)v8, v9);
    }
  }

void sub_100B31194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B311AC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018722C0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1CC0 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B31200(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B31214()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_1018722C0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B3123C(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100B30BF0(result);
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B31278( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            unsigned int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B31528( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1CC0 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B315B0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1CC0 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B30F5C(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B316A8(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B316F4()
{
  return 1LL;
}

void *sub_100B316FC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.MotionStateMediatorNotification");
}

void sub_100B3170C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  11196LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(void **)(a1 + 8);
    if (!v5)
    {
      uint64_t v5 = operator new(0x40uLL);
      sub_1001D280C((uint64_t)v5);
      *(void *)(a1 + 8) = v5;
    }

    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1CD8 + 8);
    }
    sub_1001EC074((uint64_t)v5, v6);
  }

void sub_100B317CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B317F4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101872338;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1CD8 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B31848(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B3185C()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_101872338;
  return result;
}

uint64_t sub_100B31884(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1001EC3FC(result);
    }
  }

  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B318B8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      char v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        char v7 = operator new(0x40uLL);
        sub_1001D280C((uint64_t)v7);
        *(void *)(a1 + 8) = v7;
      }

      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

void sub_100B31A40(_Unwind_Exception *a1)
{
}

uint64_t sub_100B31A54( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A1CD8 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_100B31A80(uint64_t a1, unint64_t a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A1CD8 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001ECAB4(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B31AEC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B31B38()
{
  return 1LL;
}

void *sub_100B31B40@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.MapRouteHintNotification.NotificationData");
}

void sub_100B31B50(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  11436LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2) {
        sub_10125FD10();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v8 = *(void **)(a1 + 16);
      if (!v8)
      {
        int v8 = operator new(0x18uLL);
        v8[1] = 0LL;
        v8[2] = 0LL;
        void *v8 = &off_101872338;
        *(void *)(a1 + 16) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1019A1CD0 + 16);
      }
      sub_100B3170C((uint64_t)v8, v9);
    }
  }

void sub_100B31C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B31C6C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018723B0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1CD0 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B31CC0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100B31CD4()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_1018723B0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100B31CFC(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          uint64_t result = *(void *)(v3 + 8);
          if (result) {
            uint64_t result = sub_1001EC3FC(result);
          }
        }

        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100B31D4C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v7 = TagFallback >> 3;
          int v8 = TagFallback & 7;
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (_BYTE *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }

          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }

          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }

        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v27;
        }

        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }

      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100B31FFC( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1CD0 + 16);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
}

uint64_t sub_100B32084(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_26;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1CD0 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B31A80(v8, a2);
    int v11 = (int)v9;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }

void sub_100B3217C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B321C8()
{
  return 1LL;
}

void *sub_100B321D0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.MapRouteHintNotification");
}

void sub_100B321E0(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  11669LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if (v6 >= 0x1B) {
        sub_10123660C();
      }
      a1[5] |= 1u;
      a1[2] = v6;
      int v5 = *(_DWORD *)(a2 + 20);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 4) {
        sub_1012365E4();
      }
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }

void sub_100B322A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B322B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101872428;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B322C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101872428;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_100B322E8()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_101872428;
  return result;
}

uint64_t sub_100B32310(uint64_t result)
{
  if (*(_BYTE *)(result + 20)) {
    *(void *)(result + 8) = 0LL;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100B32324( _DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      unsigned int v10 = (char *)*((void *)this + 1);
      if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v11 = v16;
      }

      else
      {
        unsigned int v11 = *v10;
        *((void *)this + 1) = v10 + 1;
      }

      if (v11 <= 0x1A)
      {
        a1[5] |= 1u;
        a1[2] = v11;
      }

      int v12 = (_BYTE *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        unint64_t v9 = v12 + 1;
        *((void *)this + 1) = v9;
LABEL_25:
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v13 = v15;
        }

        else
        {
          unsigned int v13 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v13 <= 3)
        {
          a1[5] |= 2u;
          a1[3] = v13;
        }

        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        unint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_25;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_100B324D0( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  a2,  a4);
  }
  return result;
}

uint64_t sub_100B32528(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 20) & 2) == 0) {
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0) {
        goto LABEL_19;
      }
    }

    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 11;
    }

    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }

    else
    {
      int v7 = 2;
    }

    uint64_t v4 = (v7 + v4);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_100B325D0(_DWORD *a1, void *lpsrc)
{
}

uint64_t sub_100B3261C()
{
  return 1LL;
}

void *sub_100B32624@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.Silo");
}

void sub_100B32634(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v50,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc",  12670LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v50,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v49, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v50);
  }

  int v5 = *(_DWORD *)(a2 + 184);
  if (!(_BYTE)v5) {
    goto LABEL_50;
  }
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 1u;
    int v6 = *(void **)(a1 + 8);
    if (!v6)
    {
      int v6 = operator new(0x28uLL);
      sub_1001D23B4((uint64_t)v6);
      *(void *)(a1 + 8) = v6;
    }

    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1CE8 + 8);
    }
    sub_1001D323C((uint64_t)v6, v7);
    int v5 = *(_DWORD *)(a2 + 184);
  }

  if ((v5 & 2) != 0)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 176);
    if (v8 >= 5) {
      sub_101236544();
    }
    *(_DWORD *)(a1 + 184) |= 2u;
    *(_DWORD *)(a1 + 176) = v8;
    int v5 = *(_DWORD *)(a2 + 184);
  }

  if ((v5 & 4) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 4u;
    unint64_t v9 = *(void **)(a1 + 16);
    if (!v9)
    {
      unint64_t v9 = operator new(0x18uLL);
      v9[1] = 0LL;
      v9[2] = 0LL;
      *unint64_t v9 = off_101872428;
      *(void *)(a1 + 16) = v9;
    }

    uint64_t v10 = *(void *)(a2 + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_1019A1CE8 + 16);
    }
    sub_100B321E0(v9, v10);
    int v5 = *(_DWORD *)(a2 + 184);
    if ((v5 & 8) == 0)
    {
LABEL_15:
      if ((v5 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_30;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_15;
  }

  *(_DWORD *)(a1 + 184) |= 8u;
  unsigned int v11 = *(void **)(a1 + 24);
  if (!v11)
  {
    unsigned int v11 = operator new(0x18uLL);
    v11[1] = 0LL;
    v11[2] = 0LL;
    void *v11 = off_101872428;
    *(void *)(a1 + 24) = v11;
  }

  uint64_t v12 = *(void *)(a2 + 24);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A1CE8 + 24);
  }
  sub_100B321E0(v11, v12);
  int v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_35:
    *(_DWORD *)(a1 + 184) |= 0x20u;
    unsigned int v15 = *(void **)(a1 + 40);
    if (!v15)
    {
      unsigned int v15 = operator new(0x20uLL);
      *unsigned int v15 = &off_101871438;
      v15[1] = 0LL;
      void v15[2] = 0LL;
      void v15[3] = 0LL;
      *(void *)(a1 + 40) = v15;
    }

    uint64_t v16 = *(void *)(a2 + 40);
    if (!v16) {
      uint64_t v16 = *(void *)(qword_1019A1CE8 + 40);
    }
    sub_100B23F74((uint64_t)v15, v16);
    int v5 = *(_DWORD *)(a2 + 184);
    if ((v5 & 0x40) == 0)
    {
LABEL_18:
      if ((v5 & 0x80) == 0) {
        goto LABEL_50;
      }
      goto LABEL_45;
    }

    goto LABEL_40;
  }

void sub_100B32DCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_100B32DF4(void *result)
{
  if ((void *)qword_1019A1CE8 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = v1[4];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    uint64_t v6 = v1[5];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    uint64_t v7 = v1[6];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    uint64_t v8 = v1[7];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
    uint64_t v9 = v1[8];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    uint64_t v10 = v1[9];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
    uint64_t v11 = v1[10];
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
    uint64_t v12 = v1[11];
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    uint64_t v13 = v1[12];
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
    uint64_t v14 = v1[13];
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
    uint64_t v15 = v1[14];
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    }
    uint64_t v16 = v1[15];
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
    uint64_t v17 = v1[16];
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
    uint64_t v18 = v1[17];
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    uint64_t v19 = v1[18];
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
    uint64_t v20 = v1[19];
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    }
    uint64_t v21 = v1[20];
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    uint64_t result = (void *)v1[21];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100B32FCC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018724A0;
  sub_100B32DF4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B32FFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018724A0;
  sub_100B32DF4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_100B33030(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1CE8;
  if (!qword_1019A1CE8)
  {
    sub_100B1F268(0LL, a2, a3, a4);
    return qword_1019A1CE8;
  }

  return result;
}

double sub_100B3305C()
{
  unsigned __int8 v0 = (char *)operator new(0xC0uLL);
  *(void *)unsigned __int8 v0 = off_1018724A0;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *((_DWORD *)v0 + 46) = 0;
  return result;
}

uint64_t sub_100B330B4(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 184);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      double result = *(void *)(result + 8);
      if (result)
      {
        double result = sub_1001D33B0(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    *(_DWORD *)(v1 + 176) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0LL;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 8) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 20)) {
          *(void *)(v4 + 8) = 0LL;
        }
        *(_DWORD *)(v4 + 20) = 0;
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x10) != 0)
    {
      double result = *(void *)(v1 + 32);
      if (result)
      {
        double result = sub_100B22DDC(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x20) != 0)
    {
      double result = *(void *)(v1 + 40);
      if (result)
      {
        double result = sub_100B24134(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x40) != 0)
    {
      double result = *(void *)(v1 + 48);
      if (result)
      {
        double result = sub_100B24AF4(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x80) != 0)
    {
      double result = *(void *)(v1 + 56);
      if (result)
      {
        double result = sub_100B25C8C(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
  }

  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      double result = *(void *)(v1 + 64);
      if (result)
      {
        double result = sub_100B2664C(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x200) != 0)
    {
      double result = *(void *)(v1 + 72);
      if (result)
      {
        double result = sub_100B27D50(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x400) != 0)
    {
      double result = *(void *)(v1 + 80);
      if (result)
      {
        double result = sub_100B28698(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x800) != 0)
    {
      double result = *(void *)(v1 + 88);
      if (result)
      {
        double result = sub_100B29138(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x1000) != 0)
    {
      double result = *(void *)(v1 + 96);
      if (result)
      {
        double result = sub_100B29C0C(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x2000) != 0)
    {
      double result = *(void *)(v1 + 104);
      if (result)
      {
        double result = sub_100B2A6E0(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x4000) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 112);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 20)) {
          *(void *)(v5 + 8) = 0LL;
        }
        *(_DWORD *)(v5 + 20) = 0;
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x8000) != 0)
    {
      double result = *(void *)(v1 + 120);
      if (result)
      {
        double result = sub_100B2B564(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
  }

  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      double result = *(void *)(v1 + 128);
      if (result)
      {
        double result = sub_100B2E14C(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x20000) != 0)
    {
      double result = *(void *)(v1 + 136);
      if (result)
      {
        double result = sub_100B2EE10(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x40000) != 0)
    {
      double result = *(void *)(v1 + 144);
      if (result)
      {
        double result = sub_100B2F8E4(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x80000) != 0)
    {
      double result = *(void *)(v1 + 152);
      if (result)
      {
        double result = sub_100B304B4(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x100000) != 0)
    {
      double result = *(void *)(v1 + 160);
      if (result)
      {
        double result = sub_100B3123C(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }

    if ((v2 & 0x200000) != 0)
    {
      double result = *(void *)(v1 + 168);
      if (result) {
        double result = sub_100B31CFC(result);
      }
    }
  }

  *(_DWORD *)(v1 + 184) = 0;
  return result;
}

uint64_t sub_100B332B8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_6;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_55;
        }
        *(_DWORD *)(a1 + 184) |= 1u;
        uint64_t v8 = *(void **)(a1 + 8);
        if (!v8)
        {
          uint64_t v8 = operator new(0x28uLL);
          sub_1001D23B4((uint64_t)v8);
          *(void *)(a1 + 8) = v8;
        }

        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0LL;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v16 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v16, 1);
        int v18 = v16 - 1;
        if (v18 < 0 == v17) {
          *((_DWORD *)this + 14) = v18;
        }
        uint64_t v19 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        uint64_t v11 = v19 + 1;
        *((void *)this + 1) = v11;
        goto LABEL_67;
      case 2u:
        int v7 = TagFallback & 7;
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_67:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v20 = v202;
        }

        else
        {
          unsigned int v20 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        if (v20 <= 4)
        {
          *(_DWORD *)(a1 + 184) |= 2u;
          *(_DWORD *)(a1 + 176) = v20;
        }

        uint64_t v22 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v22 + 1;
LABEL_77:
        *(_DWORD *)(a1 + 184) |= 4u;
        int v23 = *(void **)(a1 + 16);
        if (!v23)
        {
          int v23 = operator new(0x18uLL);
          v23[1] = 0LL;
          void v23[2] = 0LL;
          *int v23 = off_101872428;
          *(void *)(a1 + 16) = v23;
        }

        uint64_t v24 = (char *)*((void *)this + 1);
        if ((unint64_t)v24 >= *((void *)this + 2) || *v24 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v24;
          *((void *)this + 1) = v24 + 1;
        }

        int v25 = *((_DWORD *)this + 14);
        int v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 >= v26) {
          return 0LL;
        }
        int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
        int v29 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v29, 1);
        int v30 = v29 - 1;
        if (v30 < 0 == v17) {
          *((_DWORD *)this + 14) = v30;
        }
        unsigned int v31 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v31 + 1;
LABEL_91:
        *(_DWORD *)(a1 + 184) |= 8u;
        uint64_t v32 = *(void **)(a1 + 24);
        if (!v32)
        {
          uint64_t v32 = operator new(0x18uLL);
          v32[1] = 0LL;
          v32[2] = 0LL;
          void *v32 = off_101872428;
          *(void *)(a1 + 24) = v32;
        }

        int v33 = (char *)*((void *)this + 1);
        if ((unint64_t)v33 >= *((void *)this + 2) || *v33 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v33;
          *((void *)this + 1) = v33 + 1;
        }

        int v34 = *((_DWORD *)this + 14);
        int v35 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v34 + 1;
        if (v34 >= v35) {
          return 0LL;
        }
        int v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
        int v38 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v38, 1);
        int v39 = v38 - 1;
        if (v39 < 0 == v17) {
          *((_DWORD *)this + 14) = v39;
        }
        uint64_t v40 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v40 + 1;
LABEL_105:
        *(_DWORD *)(a1 + 184) |= 0x10u;
        int v41 = *(void **)(a1 + 32);
        if (!v41)
        {
          int v41 = operator new(0x20uLL);
          *int v41 = &off_101871348;
          v41[1] = 0LL;
          v41[2] = 0LL;
          void v41[3] = 0LL;
          *(void *)(a1 + 32) = v41;
        }

        uint64_t v42 = (char *)*((void *)this + 1);
        if ((unint64_t)v42 >= *((void *)this + 2) || *v42 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v42;
          *((void *)this + 1) = v42 + 1;
        }

        int v43 = *((_DWORD *)this + 14);
        int v44 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v43 + 1;
        if (v43 >= v44) {
          return 0LL;
        }
        int v45 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v45);
        int v47 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v47, 1);
        int v48 = v47 - 1;
        if (v48 < 0 == v17) {
          *((_DWORD *)this + 14) = v48;
        }
        char v49 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v49 + 1;
LABEL_119:
        *(_DWORD *)(a1 + 184) |= 0x20u;
        unsigned int v50 = *(void **)(a1 + 40);
        if (!v50)
        {
          unsigned int v50 = operator new(0x20uLL);
          void *v50 = &off_101871438;
          v50[1] = 0LL;
          v50[2] = 0LL;
          void v50[3] = 0LL;
          *(void *)(a1 + 40) = v50;
        }

        int v51 = (char *)*((void *)this + 1);
        if ((unint64_t)v51 >= *((void *)this + 2) || *v51 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v51;
          *((void *)this + 1) = v51 + 1;
        }

        int v52 = *((_DWORD *)this + 14);
        int v53 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v52 + 1;
        if (v52 >= v53) {
          return 0LL;
        }
        int v54 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v54);
        int v56 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v56, 1);
        int v57 = v56 - 1;
        if (v57 < 0 == v17) {
          *((_DWORD *)this + 14) = v57;
        }
        uint64_t v58 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v58 + 1;
LABEL_133:
        *(_DWORD *)(a1 + 184) |= 0x40u;
        int v59 = *(void **)(a1 + 48);
        if (!v59)
        {
          int v59 = operator new(0x20uLL);
          *int v59 = &off_101871528;
          v59[1] = 0LL;
          v59[2] = 0LL;
          v59[3] = 0LL;
          *(void *)(a1 + 48) = v59;
        }

        int v60 = (char *)*((void *)this + 1);
        if ((unint64_t)v60 >= *((void *)this + 2) || *v60 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v60;
          *((void *)this + 1) = v60 + 1;
        }

        int v61 = *((_DWORD *)this + 14);
        int v62 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v61 + 1;
        if (v61 >= v62) {
          return 0LL;
        }
        int v63 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v63);
        int v65 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v65, 1);
        int v66 = v65 - 1;
        if (v66 < 0 == v17) {
          *((_DWORD *)this + 14) = v66;
        }
        uint64_t v67 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v67 + 1;
LABEL_147:
        *(_DWORD *)(a1 + 184) |= 0x80u;
        int v68 = *(void **)(a1 + 56);
        if (!v68)
        {
          int v68 = operator new(0x20uLL);
          *int v68 = &off_101871618;
          v68[1] = 0LL;
          v68[2] = 0LL;
          void v68[3] = 0LL;
          *(void *)(a1 + 56) = v68;
        }

        int v69 = (char *)*((void *)this + 1);
        if ((unint64_t)v69 >= *((void *)this + 2) || *v69 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v69;
          *((void *)this + 1) = v69 + 1;
        }

        int v70 = *((_DWORD *)this + 14);
        int v71 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v70 + 1;
        if (v70 >= v71) {
          return 0LL;
        }
        int v72 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v72);
        int v74 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v74, 1);
        int v75 = v74 - 1;
        if (v75 < 0 == v17) {
          *((_DWORD *)this + 14) = v75;
        }
        uint64_t v76 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v76 + 1;
LABEL_161:
        *(_DWORD *)(a1 + 184) |= 0x100u;
        uint64_t v77 = *(void **)(a1 + 64);
        if (!v77)
        {
          uint64_t v77 = operator new(0x20uLL);
          *uint64_t v77 = &off_101871708;
          v77[1] = 0LL;
          v77[2] = 0LL;
          v77[3] = 0LL;
          *(void *)(a1 + sub_10000AE14(v2 - 64) = v77;
        }

        uint64_t v78 = (char *)*((void *)this + 1);
        if ((unint64_t)v78 >= *((void *)this + 2) || *v78 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v78;
          *((void *)this + 1) = v78 + 1;
        }

        int v79 = *((_DWORD *)this + 14);
        int v80 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v79 + 1;
        if (v79 >= v80) {
          return 0LL;
        }
        int v81 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v81);
        int v83 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v83, 1);
        int v84 = v83 - 1;
        if (v84 < 0 == v17) {
          *((_DWORD *)this + 14) = v84;
        }
        uint64_t v85 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v85 + 1;
LABEL_175:
        *(_DWORD *)(a1 + 184) |= 0x200u;
        uint64_t v86 = *(void **)(a1 + 72);
        if (!v86)
        {
          uint64_t v86 = operator new(0x20uLL);
          *uint64_t v86 = &off_101871870;
          v86[1] = 0LL;
          v86[2] = 0LL;
          v86[3] = 0LL;
          *(void *)(a1 + 72) = v86;
        }

        uint64_t v87 = (char *)*((void *)this + 1);
        if ((unint64_t)v87 >= *((void *)this + 2) || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v87;
          *((void *)this + 1) = v87 + 1;
        }

        int v88 = *((_DWORD *)this + 14);
        int v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89) {
          return 0LL;
        }
        int v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        int v92 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v92, 1);
        int v93 = v92 - 1;
        if (v93 < 0 == v17) {
          *((_DWORD *)this + 14) = v93;
        }
        uint64_t v94 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v94 + 1;
LABEL_189:
        *(_DWORD *)(a1 + 184) |= 0x400u;
        uint64_t v95 = *(void **)(a1 + 80);
        if (!v95)
        {
          uint64_t v95 = operator new(0x20uLL);
          void *v95 = &off_101871960;
          v95[1] = 0LL;
          v95[2] = 0LL;
          v95[3] = 0LL;
          *(void *)(a1 + 80) = v95;
        }

        uint64_t v96 = (char *)*((void *)this + 1);
        if ((unint64_t)v96 >= *((void *)this + 2) || *v96 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v96;
          *((void *)this + 1) = v96 + 1;
        }

        int v97 = *((_DWORD *)this + 14);
        int v98 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v97 + 1;
        if (v97 >= v98) {
          return 0LL;
        }
        int v99 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v99);
        int v101 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v101, 1);
        int v102 = v101 - 1;
        if (v102 < 0 == v17) {
          *((_DWORD *)this + 14) = v102;
        }
        uint64_t v103 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v103 + 1;
LABEL_203:
        *(_DWORD *)(a1 + 184) |= 0x800u;
        uint64_t v104 = *(void **)(a1 + 88);
        if (!v104)
        {
          uint64_t v104 = operator new(0x20uLL);
          *uint64_t v104 = &off_101871A50;
          v104[1] = 0LL;
          v104[2] = 0LL;
          v104[3] = 0LL;
          *(void *)(a1 + 88) = v104;
        }

        uint64_t v105 = (char *)*((void *)this + 1);
        if ((unint64_t)v105 >= *((void *)this + 2) || *v105 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v105;
          *((void *)this + 1) = v105 + 1;
        }

        int v106 = *((_DWORD *)this + 14);
        int v107 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v106 + 1;
        if (v106 >= v107) {
          return 0LL;
        }
        int v108 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v108);
        int v110 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v110, 1);
        int v111 = v110 - 1;
        if (v111 < 0 == v17) {
          *((_DWORD *)this + 14) = v111;
        }
        uint64_t v112 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v112 + 1;
LABEL_217:
        *(_DWORD *)(a1 + 184) |= 0x1000u;
        __int128 v113 = *(void **)(a1 + 96);
        if (!v113)
        {
          __int128 v113 = operator new(0x20uLL);
          *__int128 v113 = &off_101871B40;
          v113[1] = 0LL;
          v113[2] = 0LL;
          v113[3] = 0LL;
          *(void *)(a1 + 96) = v113;
        }

        uint64_t v114 = (char *)*((void *)this + 1);
        if ((unint64_t)v114 >= *((void *)this + 2) || *v114 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v114;
          *((void *)this + 1) = v114 + 1;
        }

        int v115 = *((_DWORD *)this + 14);
        int v116 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v115 + 1;
        if (v115 >= v116) {
          return 0LL;
        }
        int v117 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v117);
        int v119 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v119, 1);
        int v120 = v119 - 1;
        if (v120 < 0 == v17) {
          *((_DWORD *)this + 14) = v120;
        }
        uint64_t v121 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v121 + 1;
LABEL_231:
        *(_DWORD *)(a1 + 184) |= 0x2000u;
        __int16 v122 = *(void **)(a1 + 104);
        if (!v122)
        {
          __int16 v122 = operator new(0x20uLL);
          void *v122 = &off_101871C30;
          v122[1] = 0LL;
          v122[2] = 0LL;
          v122[3] = 0LL;
          *(void *)(a1 + 104) = v122;
        }

        uint64_t v123 = (char *)*((void *)this + 1);
        if ((unint64_t)v123 >= *((void *)this + 2) || *v123 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v123;
          *((void *)this + 1) = v123 + 1;
        }

        int v124 = *((_DWORD *)this + 14);
        int v125 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v124 + 1;
        if (v124 >= v125) {
          return 0LL;
        }
        int v126 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v126);
        int v128 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v128, 1);
        int v129 = v128 - 1;
        if (v129 < 0 == v17) {
          *((_DWORD *)this + 14) = v129;
        }
        uint64_t v130 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v130 + 1;
LABEL_245:
        *(_DWORD *)(a1 + 184) |= 0x4000u;
        uint64_t v131 = *(void **)(a1 + 112);
        if (!v131)
        {
          uint64_t v131 = operator new(0x18uLL);
          v131[1] = 0LL;
          v131[2] = 0LL;
          void *v131 = off_101871CA8;
          *(void *)(a1 + 112) = v131;
        }

        uint64_t v132 = (char *)*((void *)this + 1);
        if ((unint64_t)v132 >= *((void *)this + 2) || *v132 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v132;
          *((void *)this + 1) = v132 + 1;
        }

        int v133 = *((_DWORD *)this + 14);
        int v134 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v133 + 1;
        if (v133 >= v134) {
          return 0LL;
        }
        int v135 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v135);
        int v137 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v137, 1);
        int v138 = v137 - 1;
        if (v138 < 0 == v17) {
          *((_DWORD *)this + 14) = v138;
        }
        uint64_t v139 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v139 + 2;
LABEL_260:
        *(_DWORD *)(a1 + 184) |= 0x8000u;
        uint64_t v140 = *(void **)(a1 + 120);
        if (!v140)
        {
          uint64_t v140 = operator new(0x20uLL);
          *uint64_t v140 = &off_101871D98;
          v140[1] = 0LL;
          v140[2] = 0LL;
          v140[3] = 0LL;
          *(void *)(a1 + 120) = v140;
        }

        uint64_t v141 = (char *)*((void *)this + 1);
        if ((unint64_t)v141 >= *((void *)this + 2) || *v141 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v141;
          *((void *)this + 1) = v141 + 1;
        }

        int v142 = *((_DWORD *)this + 14);
        int v143 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v142 + 1;
        if (v142 >= v143) {
          return 0LL;
        }
        int v144 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v144);
        int v146 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v146, 1);
        int v147 = v146 - 1;
        if (v147 < 0 == v17) {
          *((_DWORD *)this + 14) = v147;
        }
        uint64_t v148 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v148 + 2;
LABEL_275:
        *(_DWORD *)(a1 + 184) |= 0x10000u;
        uint64_t v149 = *(char **)(a1 + 128);
        if (!v149)
        {
          uint64_t v149 = (char *)operator new(0x28uLL);
          *(void *)uint64_t v149 = off_101871F00;
          *(_OWORD *)(v149 + 8) = 0u;
          *(_OWORD *)(v149 + 24) = 0u;
          *(void *)(a1 + 128) = v149;
        }

        uint64_t v150 = (char *)*((void *)this + 1);
        if ((unint64_t)v150 >= *((void *)this + 2) || *v150 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v150;
          *((void *)this + 1) = v150 + 1;
        }

        int v151 = *((_DWORD *)this + 14);
        int v152 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v151 + 1;
        if (v151 >= v152) {
          return 0LL;
        }
        int v153 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v153);
        int v155 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v155, 1);
        int v156 = v155 - 1;
        if (v156 < 0 == v17) {
          *((_DWORD *)this + 14) = v156;
        }
        v157 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v157 + 2;
LABEL_290:
        *(_DWORD *)(a1 + 184) |= 0x20000u;
        v158 = *(void **)(a1 + 136);
        if (!v158)
        {
          v158 = operator new(0x20uLL);
          void *v158 = &off_101871FF0;
          v158[1] = 0LL;
          v158[2] = 0LL;
          v158[3] = 0LL;
          *(void *)(a1 + 136) = v158;
        }

        v159 = (char *)*((void *)this + 1);
        if ((unint64_t)v159 >= *((void *)this + 2) || *v159 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v159;
          *((void *)this + 1) = v159 + 1;
        }

        int v160 = *((_DWORD *)this + 14);
        int v161 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v160 + 1;
        if (v160 >= v161) {
          return 0LL;
        }
        int v162 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v162);
        int v164 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v164, 1);
        int v165 = v164 - 1;
        if (v165 < 0 == v17) {
          *((_DWORD *)this + 14) = v165;
        }
        v166 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v166 + 2;
LABEL_305:
        *(_DWORD *)(a1 + 184) |= 0x40000u;
        v167 = *(void **)(a1 + 144);
        if (!v167)
        {
          v167 = operator new(0x20uLL);
          void *v167 = &off_1018720E0;
          v167[1] = 0LL;
          v167[2] = 0LL;
          v167[3] = 0LL;
          *(void *)(a1 + 144) = v167;
        }

        v168 = (char *)*((void *)this + 1);
        if ((unint64_t)v168 >= *((void *)this + 2) || *v168 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v168;
          *((void *)this + 1) = v168 + 1;
        }

        int v169 = *((_DWORD *)this + 14);
        int v170 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v169 + 1;
        if (v169 >= v170) {
          return 0LL;
        }
        int v171 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v171);
        int v173 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v173, 1);
        int v174 = v173 - 1;
        if (v174 < 0 == v17) {
          *((_DWORD *)this + 14) = v174;
        }
        v175 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v175 + 2;
LABEL_320:
        *(_DWORD *)(a1 + 184) |= 0x80000u;
        v176 = *(void **)(a1 + 152);
        if (!v176)
        {
          v176 = operator new(0x20uLL);
          void *v176 = &off_1018721D0;
          v176[1] = 0LL;
          v176[2] = 0LL;
          v176[3] = 0LL;
          *(void *)(a1 + 152) = v176;
        }

        v177 = (char *)*((void *)this + 1);
        if ((unint64_t)v177 >= *((void *)this + 2) || *v177 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v177;
          *((void *)this + 1) = v177 + 1;
        }

        int v178 = *((_DWORD *)this + 14);
        int v179 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v178 + 1;
        if (v178 >= v179) {
          return 0LL;
        }
        int v180 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v180);
        int v182 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v182, 1);
        int v183 = v182 - 1;
        if (v183 < 0 == v17) {
          *((_DWORD *)this + 14) = v183;
        }
        v184 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v184 + 2;
LABEL_335:
        *(_DWORD *)(a1 + 184) |= 0x100000u;
        v185 = *(void **)(a1 + 160);
        if (!v185)
        {
          v185 = operator new(0x20uLL);
          void *v185 = &off_1018722C0;
          v185[1] = 0LL;
          v185[2] = 0LL;
          v185[3] = 0LL;
          *(void *)(a1 + 160) = v185;
        }

        v186 = (char *)*((void *)this + 1);
        if ((unint64_t)v186 >= *((void *)this + 2) || *v186 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v186;
          *((void *)this + 1) = v186 + 1;
        }

        int v187 = *((_DWORD *)this + 14);
        int v188 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v187 + 1;
        if (v187 >= v188) {
          return 0LL;
        }
        int v189 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v189);
        int v191 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v191, 1);
        int v192 = v191 - 1;
        if (v192 < 0 == v17) {
          *((_DWORD *)this + 14) = v192;
        }
        v193 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v193 + 2;
LABEL_350:
        *(_DWORD *)(a1 + 184) |= 0x200000u;
        v194 = *(void **)(a1 + 168);
        if (!v194)
        {
          v194 = operator new(0x20uLL);
          void *v194 = &off_1018723B0;
          v194[1] = 0LL;
          v194[2] = 0LL;
          v194[3] = 0LL;
          *(void *)(a1 + 168) = v194;
        }

        v195 = (char *)*((void *)this + 1);
        if ((unint64_t)v195 >= *((void *)this + 2) || *v195 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v202)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v202 = *v195;
          *((void *)this + 1) = v195 + 1;
        }

        int v196 = *((_DWORD *)this + 14);
        int v197 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v196 + 1;
        if (v196 >= v197) {
          return 0LL;
        }
        int v198 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v198);
        int v200 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v200, 1);
        int v201 = v200 - 1;
        if (v201 < 0 == v17) {
          *((_DWORD *)this + 14) = v201;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_77;
        }
        goto LABEL_55;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_91;
        }
        goto LABEL_55;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_105;
        }
        goto LABEL_55;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_119;
        }
        goto LABEL_55;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_133;
        }
        goto LABEL_55;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_147;
        }
        goto LABEL_55;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_161;
        }
        goto LABEL_55;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_175;
        }
        goto LABEL_55;
      case 0xBu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_189;
        }
        goto LABEL_55;
      case 0xCu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_203;
        }
        goto LABEL_55;
      case 0xDu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_217;
        }
        goto LABEL_55;
      case 0xEu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_231;
        }
        goto LABEL_55;
      case 0xFu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_245;
        }
        goto LABEL_55;
      case 0x10u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_260;
        }
        goto LABEL_55;
      case 0x11u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_275;
        }
        goto LABEL_55;
      case 0x12u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_290;
        }
        goto LABEL_55;
      case 0x13u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_305;
        }
        goto LABEL_55;
      case 0x14u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_320;
        }
        goto LABEL_55;
      case 0x15u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_335;
        }
        goto LABEL_55;
      case 0x16u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_55;
        }
        goto LABEL_350;
      default:
        int v7 = TagFallback & 7;
LABEL_55:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

void sub_100B348A0(_Unwind_Exception *a1)
{
}

uint64_t sub_100B348B4( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 184);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1CE8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 184);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 176),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }

uint64_t sub_100B34C90(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_61;
  }

  if ((v3 & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_1019A1CE8 + 8);
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001D35F8(v5);
  int v7 = (int)v6;
  else {
    int v8 = 1;
  }
  uint64_t v4 = (v7 + v8 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 176);
    if ((v9 & 0x80000000) != 0)
    {
      int v10 = 10;
    }

    else if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      int v3 = *(_DWORD *)(a1 + 184);
    }

    else
    {
      int v10 = 1;
    }

    uint64_t v4 = (v4 + v10 + 1);
  }

LABEL_163:
  *(_DWORD *)(a1 + 180) = v4;
  return v4;
}

  int v81 = *(void *)(a1 + 168);
  if (!v81) {
    int v81 = *(void *)(qword_1019A1D48 + 168);
  }
  int v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006447AC(v81, a2);
  uint64_t v83 = (int)v82;
  else {
    int v84 = 1;
  }
  uint64_t v4 = (v4 + v83 + v84 + 2);
  int v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x800000) != 0)
  {
LABEL_169:
    int v85 = *(void *)(a1 + 176);
    if (!v85) {
      int v85 = *(void *)(qword_1019A1D48 + 176);
    }
    int v86 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006481B0(v85, a2);
    uint64_t v87 = (int)v86;
    else {
      int v88 = 1;
    }
    uint64_t v4 = (v4 + v87 + v88 + 2);
    int v3 = *(_DWORD *)(a1 + 224);
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  int v53 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v54 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "alertCanceledBecauseOfLockedNoMotionBeforeImpact";
    v193 = 2048;
    v194 = v54;
    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v144 = *(void *)(a1 + 8);
    int v187 = 136315394;
    int v188 = "alertCanceledBecauseOfLockedNoMotionBeforeImpact";
    int v189 = 2048;
    unsigned int v190 = v144;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    int v146 = (uint8_t *)v145;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v145);
    if (v146 != buf) {
      free(v146);
    }
  }

  a4[14] = 1;
  int v10 = *(void *)(a1 + 24);
  if ((v10 & 0x800000000LL) == 0)
  {
LABEL_24:
    if ((v10 & 0x1000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_175;
  }

  uint64_t result = *(float *)(a2 + 232);
  v5 |= 0x80000000000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 232) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000000000000LL) == 0)
  {
LABEL_83:
    if ((v4 & 0x20000000000000LL) == 0) {
      goto LABEL_84;
    }
    goto LABEL_165;
  }

  PB::TextFormatter::format(this, "shortAudioNumThreshold", *(float *)(a1 + 280));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  int v6 = *v5;
  if ((v7 & 0x10) == 0)
  {
LABEL_82:
    if ((v6 & 1) == 0) {
      goto LABEL_83;
    }
    goto LABEL_165;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 232), 0x111u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000000000000LL) == 0)
  {
LABEL_83:
    if ((v5 & 0x20000000000000LL) == 0) {
      goto LABEL_84;
    }
    goto LABEL_165;
  }

  int v52 = *(_BYTE *)(a2 + 343);
  v6 |= (unint64_t)&_mh_execute_header;
  void *v2 = v5;
  *(void *)(a1 + 3sub_10000AE14(v2 - 64) = v6;
  *(_BYTE *)(a1 + 343) = v52;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v4 & 0x20000000000000LL) == 0) {
      goto LABEL_59;
    }
    goto LABEL_165;
  }

  PB::TextFormatter::format(this, "numDeescalationUsha", *(_DWORD *)(a1 + 180));
  int v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x1000000000LL) == 0)
  {
LABEL_62:
    if ((v7 & 0x2000000000LL) == 0) {
      goto LABEL_63;
    }
    goto LABEL_165;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 343), 0x141u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((v6 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x20000000000000LL) == 0) {
      goto LABEL_59;
    }
    goto LABEL_165;
  }

  unsigned int v100 = *(_BYTE *)(a2 + 176);
  v3 |= 0x20000000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 176) = v100;
  if ((*(void *)(a2 + 204) & 0x200000000000000LL) != 0) {
    goto LABEL_164;
  }
  return result;
}

  PB::TextFormatter::format(this, "timestamp0", *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 4) != 0) {
    goto LABEL_164;
  }
LABEL_84:
  if ((v5 & 8) != 0) {
LABEL_85:
  }
    PB::TextFormatter::format(this, "timestamp2", *(void *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 183), 0x4C5u);
  if ((*(_WORD *)(v3 + 212) & 0x10) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 191), 0x4C6u);
  }
  return result;
}

            PB::Reader::recallMark(this, v182);
          }

          else
          {
            int v124 = *(char **)(a1 + 112);
            uint64_t v123 = *(void *)(a1 + 120);
            if ((unint64_t)v124 >= v123)
            {
              v157 = (char *)*v181;
              v158 = (v124 - (_BYTE *)*v181) >> 3;
              v159 = v158 + 1;
              if ((unint64_t)(v158 + 1) >> 61) {
LABEL_290:
              }
                sub_100007008();
              int v160 = v123 - (void)v157;
              if (v160 >> 2 > v159) {
                v159 = v160 >> 2;
              }
              else {
                int v161 = v159;
              }
              if (v161)
              {
                int v162 = (char *)sub_1000071BC(v180, v161);
                v157 = *(char **)(a1 + 104);
                int v124 = *(char **)(a1 + 112);
              }

              else
              {
                int v162 = 0LL;
              }

              int v171 = &v162[8 * v158];
              *(void *)int v171 = 0LL;
              int v116 = v171 + 8;
              while (v124 != v157)
              {
                unsigned int v172 = *((void *)v124 - 1);
                v124 -= 8;
                *((void *)v171 - 1) = v172;
                v171 -= 8;
              }

              *(void *)(a1 + 104) = v171;
              *(void *)(a1 + 112) = v116;
              *(void *)(a1 + 120) = &v162[8 * v161];
              if (v157) {
                operator delete(v157);
              }
            }

            else
            {
              *(void *)int v124 = 0LL;
              int v116 = v124 + 8;
            }

            *(void *)(a1 + 112) = v116;
LABEL_271:
            int v173 = *((void *)this + 1);
            if (v173 <= 0xFFFFFFFFFFFFFFF7LL && v173 + 8 <= *((void *)this + 2))
            {
              *(v116 - 1) = *(void *)(*(void *)this + v173);
LABEL_275:
              *((void *)this + 1) += 8LL;
            }

            else
            {
LABEL_273:
              *((_BYTE *)this + 24) = 1;
            }
          }

void sub_100B35350(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100B3539C()
{
  return 1LL;
}

void *sub_100B353A4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.PrivateData.LocationControllerLogEntry");
}

uint64_t sub_100B353B8(uint64_t a1)
{
  int v2 = (_OWORD *)(a1 + 328);
  *(void *)a1 = dispatch_queue_create("com.apple.CLWorkoutSessionMetrics", 0LL);
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 16) = _Q0;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + sub_10000AE14(v2 - 64) = 26LL;
  *(_DWORD *)(a1 + 72) = -1;
  *(_BYTE *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_1012EA5D0;
  *(_OWORD *)(a1 + 96) = xmmword_1012EA5D0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(_DWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(void *)(a1 + 232) = 26LL;
  *(void *)(a1 + 240) = -1LL;
  *(void *)(a1 + 248) = -1LL;
  *(_DWORD *)(a1 + 256) = -1;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_BYTE *)(a1 + 324) = 0;
  _OWORD *v2 = xmmword_10134AFE0;
  v2[1] = xmmword_1012E6420;
  *(_BYTE *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 3LL;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 521) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 4sub_10000AE14(v2 - 64) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)((char *)v2 + 212) = xmmword_1013446F0;
  *(_DWORD *)(a1 + 556) = -1;
  *(_WORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 562) = 0;
  *(void *)(a1 + 5sub_10000AE14(v2 - 64) = 0x1FFFFFFFFLL;
  *(_WORD *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 578) = 0;
  *(void *)(a1 + 584) = 26LL;
  *(_DWORD *)(a1 + 592) = -1;
  return a1;
}

uint64_t sub_100B354EC()
{
  if (qword_10199A9C8 != -1) {
    dispatch_once(&qword_10199A9C8, &stru_1018728F8);
  }
  return qword_1019A1CF0;
}

void sub_100B3552C(id a1)
{
  uint64_t v1 = operator new(0x258uLL);
  qword_1019A1CF0 = sub_100B353B8((uint64_t)v1);
}

void sub_100B35550(uint64_t a1)
{
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 16) = _Q0;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_1012EA5D0;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(void *)uint64_t v9 = 0LL;
  *(_DWORD *)&v9[11] = 0;
  *(void *)&__int128 v10 = 26LL;
  *((void *)&v10 + 1) = -1LL;
  *(void *)uint64_t v11 = -1LL;
  *(_DWORD *)&_WORD v11[8] = -1;
  memset(&v11[12], 0, 65);
  LOBYTE(v12) = 0;
  DWORD1(v12) = 0;
  *((void *)&v12 + 1) = 3LL;
  v13[0] = 0LL;
  memset(v14, 0, 57);
  memset((char *)&v13[1] + 2, 0, 56);
  *(_OWORD *)&v14[60] = xmmword_1013446F0;
  *(_DWORD *)&v14[76] = -1;
  *(_OWORD *)(a1 + 232) = v10;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v9[3];
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 2sub_10000AE14(v2 - 64) = *(_OWORD *)&v11[16];
  *(_OWORD *)(a1 + 280) = *(_OWORD *)&v11[32];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 328) = xmmword_10134AFE0;
  *(_OWORD *)(a1 + 344) = xmmword_1012E6420;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)&v11[48];
  *(_OWORD *)(a1 + 312) = *(_OWORD *)&v11[64];
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)((char *)v13 + 2);
  *(_OWORD *)(a1 + 360) = v12;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)((char *)&v13[2] + 2);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)((char *)&v13[4] + 2);
  uint64_t v7 = a1 + 456;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)((char *)&v13[6] + 2);
  *(void *)(v7 + 16) = 0LL;
  sub_10046FE80((void *)(a1 + 480), (uint64_t)v14);
  __int128 v8 = *(_OWORD *)&v14[64];
  *(_OWORD *)(a1 + 528) = *(_OWORD *)&v14[48];
  *(_OWORD *)(a1 + 544) = v8;
  sub_1002C5F18(v14);
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(void *)(a1 + 160) = 0LL;
  uuid_clear((unsigned __int8 *)(a1 + 140));
  *(void *)(a1 + sub_10000AE14(v2 - 64) = 26LL;
  *(_DWORD *)(a1 + 72) = -1;
  *(_WORD *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 578) = 0;
  *(void *)(a1 + 584) = 26LL;
  *(_DWORD *)(a1 + 592) = -1;
}

id sub_100B35768()
{
  id result = (id)objc_opt_class(&OBJC_CLASS___MCProfileConnection);
  if (result) {
    return objc_msgSend( +[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"),  "isHealthDataSubmissionAllowed");
  }
  return result;
}

void sub_100B357A4(dispatch_queue_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  __int128 v8 = *a1;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100B35828;
  void v9[3] = &unk_101861AD0;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  char v10 = a4;
  dispatch_sync(v8, v9);
}

void sub_100B35828(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  switch(*(void *)(v1 + 16))
  {
    case 1LL:
      if (*(void *)(v1 + 112) == 33LL && *(_DWORD *)(v3 + 136))
      {
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101872948);
        }
        uint64_t v4 = (os_log_s *)qword_101934688;
        if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v5 = *(void *)(a1 + 40);
          uint64_t v6 = v5 + 64;
          uint64_t v7 = *(void *)(v5 + 112);
          *(_DWORD *)buf = 136315394;
          uint64_t v51 = v6;
          __int16 v52 = 2048;
          uint64_t v53 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Workouttype is MultisportTransition and updating transition time for session : %s and activity %ld",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_101872948);
          }
          uint64_t v41 = *(void *)(a1 + 40);
          uint64_t v42 = v41 + 64;
          uint64_t v43 = *(void *)(v41 + 112);
          int v46 = 136315394;
          uint64_t v47 = v42;
          __int16 v48 = 2048;
          uint64_t v49 = v43;
          int v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Workouttype is MultisportTransition and updating transition time for session : %s and activity %ld",  (const char *)&v46,  22);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSessionMetrics::handleWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &, const CLM otionStateMediator_Type::WorkoutSessionPriors &, BOOL)_block_invoke",  "%s\n",  v44);
        }

        *(_DWORD *)(v3 + 528) = (int)(*(double *)(*(void *)(a1 + 40) + 24LL)
        *(_DWORD *)(v3 + 136) = 0;
      }

      return;
    case 7LL:
      *(void *)(v3 + 368) = *(void *)(v1 + 120);
      return;
    case 8LL:
      *(_BYTE *)(v3 + 9) = 1;
      return;
    case 0xALL:
      sub_100B35550(*(void *)(a1 + 32));
      return;
    case 0xBLL:
      *(_BYTE *)(v3 + 10) = 1;
      return;
    case 0xDLL:
      int v8 = *(unsigned __int8 *)(v3 + 9);
      int v9 = *(unsigned __int8 *)(v3 + 10);
      sub_100B35550(*(void *)(a1 + 32));
      uuid_unparse((const unsigned __int8 *)(*(void *)(a1 + 40) + 64LL), (char *)(v3 + 184));
      uint64_t v10 = *(void *)(a1 + 48);
      unint64_t v11 = *(void *)(v10 + 80);
      if (v11 >= 2)
      {
        __int128 v12 = (void *)(v10 + 40);
        *(_BYTE *)(v3 + 376) = 1;
        *(void *)(v3 + 432) = v11;
        *(_OWORD *)(v3 + 440) = *(_OWORD *)v10;
        std::string::operator=((std::string *)(v3 + 456), (const std::string *)(v10 + 16));
        sub_10046F8BC((void *)(v3 + 480), v12);
        if (*(void *)(v3 + 432))
        {
          uint64_t v13 = 0LL;
          while (uuid_compare( (const unsigned __int8 *)(*(void *)(*(void *)(v3 + 488)
                                                        + 8 * ((v13 + *(void *)(v3 + 512)) / 0x18uLL))
                                            + 168 * ((v13 + *(void *)(v3 + 512)) % 0x18uLL)
                                            + 16),
                    (const unsigned __int8 *)(v3 + 440)))
          {
          }

          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_101872948);
          }
          int v17 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Multisport prior Overview Id doesn't match main overviewId",  buf,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_101872948);
            }
            LOWORD(v46) = 0;
            int v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "Multisport prior Overview Id doesn't match main overviewId",  &v46,  2);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWorkoutSessionMetrics::handleWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &, const C LMotionStateMediator_Type::WorkoutSessionPriors &, BOOL)_block_invoke",  "%s\n",  v45);
          }
        }

void sub_100B36018(dispatch_queue_t *a1)
{
  int v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100B3684C;
  block[3] = &unk_10181D3D0;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_100B36080(dispatch_queue_t *a1)
{
  int v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100B36AD0;
  block[3] = &unk_10181D3D0;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_100B360E8(uint64_t a1)
{
  if (sub_100B37890(a1))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101872948);
    }
    int v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v11 = a1 + 184;
      __int16 v12 = 2080;
      uint64_t v13 = a1 + 377;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101872948);
      }
      int v6 = 136315394;
      uint64_t v7 = a1 + 184;
      __int16 v8 = 2080;
      uint64_t v9 = a1 + 377;
      uint64_t v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s",  (const char *)&v6,  22);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutSessionMetrics::sendEventToCoreAnalyticsWatch()", "%s\n", v3);
    }

    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_100B37A08;
    v5[3] = &unk_10184E668;
    v5[4] = a1;
    AnalyticsSendEventLazy(@"com.apple.CoreMotion.FitnessSession", v5);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    _OWORD v4[2] = sub_100B380DC;
    v4[3] = &unk_101820718;
    v4[4] = a1;
    AnalyticsSendEventLazy(@"com.apple.CoreMotion.CMBatchedSensorUsage", v4);
  }

  sub_100B35550(a1);
}

void sub_100B36340(uint64_t a1)
{
  if (sub_100B37980(a1))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101872948);
    }
    int v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v10 = a1 + 184;
      __int16 v11 = 2080;
      uint64_t v12 = a1 + 377;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101872948);
      }
      int v5 = 136315394;
      uint64_t v6 = a1 + 184;
      __int16 v7 = 2080;
      uint64_t v8 = a1 + 377;
      uint64_t v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s",  (const char *)&v5,  22);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutSessionMetrics::sendEventToCoreAnalyticsPhone()", "%s\n", v3);
    }

    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    _OWORD v4[2] = sub_100B381F0;
    v4[3] = &unk_10184E668;
    v4[4] = a1;
    AnalyticsSendEventLazy(@"com.apple.CoreMotion.FitnessSessionPhone", v4);
  }

  sub_100B35550(a1);
}

void sub_100B36560(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B365CC;
  v5[3] = &unk_101830538;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

int32x2_t sub_100B365CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    *(int32x4_t *)(v1 + 36) = vaddq_s32( *(int32x4_t *)(v1 + 36),  vuzp1q_s32(*(int32x4_t *)v2, vrev64q_s32(*(int32x4_t *)v2)));
    int32x2_t result = vadd_s32(*(int32x2_t *)(v1 + 52), *(int32x2_t *)(v2 + 16));
    *(int32x2_t *)(v1 + 52) = result;
  }

  return result;
}

void sub_100B36608(dispatch_queue_t *a1, char a2)
{
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B36678;
  v5[3] = &unk_101833458;
  v5[4] = a1;
  char v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100B36678(uint64_t result)
{
  if (*(_BYTE *)(result + 40)) {
    ++*(_DWORD *)(*(void *)(result + 32) + 252LL);
  }
  return result;
}

void sub_100B36694(dispatch_queue_t *a1, float a2)
{
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B3670C;
  v5[3] = &unk_10182B540;
  v5[4] = a1;
  float v6 = a2;
  dispatch_sync(v4, v5);
}

float sub_100B3670C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    float result = *(float *)(a1 + 40) + *(float *)(v1 + 32);
    *(float *)(v1 + 32) = result;
  }

  return result;
}

void sub_100B3672C(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B36798;
  v5[3] = &unk_101830538;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

double sub_100B36798(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  double result = *(double *)v2;
  *(_DWORD *)(v1 + 5sub_10000AE14(v2 - 64) = (int)*(double *)v2;
  *(_DWORD *)(v1 + 568) = *(_DWORD *)(v2 + 8);
  return result;
}

void sub_100B367B4(dispatch_queue_t *a1, char a2, char a3)
{
  float v6 = *a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100B36834;
  v7[3] = &unk_1018598F8;
  v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  dispatch_sync(v6, v7);
}

uint64_t sub_100B36834(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(_BYTE *)(v1 + 560) = *(_BYTE *)(result + 40);
  *(_BYTE *)(v1 + 562) = *(_BYTE *)(result + 41);
  return result;
}

void sub_100B3684C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (const __CFBoolean *)CFPreferencesCopyValue( @"EnableAutoPause",  @"com.apple.nanolifestyle.sessiontrackerapp",  @"mobile",  kCFPreferencesAnyHost);
  if (v2)
  {
    uint64_t v3 = v2;
    *(_BYTE *)(v1 + 561) = CFBooleanGetValue(v2) != 0;
    CFRelease(v3);
  }

void sub_100B368B8(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B36924;
  v5[3] = &unk_101830538;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100B36924(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    switch(**(_DWORD **)(result + 40))
    {
      case 1:
        ++*(_DWORD *)(v1 + 268);
        goto LABEL_17;
      case 2:
        ++*(_DWORD *)(v1 + 272);
        goto LABEL_17;
      case 3:
        ++*(_DWORD *)(v1 + 276);
        goto LABEL_17;
      case 4:
        ++*(_DWORD *)(v1 + 280);
        goto LABEL_17;
      case 5:
        ++*(_DWORD *)(v1 + 284);
        goto LABEL_17;
      case 6:
        ++*(_DWORD *)(v1 + 288);
        goto LABEL_17;
      case 7:
        ++*(_DWORD *)(v1 + 292);
        goto LABEL_17;
      case 8:
        ++*(_DWORD *)(v1 + 296);
        goto LABEL_17;
      case 9:
        ++*(_DWORD *)(v1 + 300);
        goto LABEL_17;
      case 0xA:
        ++*(_DWORD *)(v1 + 304);
        goto LABEL_17;
      case 0xB:
        ++*(_DWORD *)(v1 + 308);
        goto LABEL_17;
      case 0xC:
        ++*(_DWORD *)(v1 + 312);
        goto LABEL_17;
      case 0xD:
        ++*(_DWORD *)(v1 + 316);
        goto LABEL_17;
      case 0xE:
        ++*(_DWORD *)(v1 + 320);
LABEL_17:
        ++*(_DWORD *)(v1 + 264);
        break;
      default:
        return result;
    }
  }

  return result;
}

void sub_100B36A48(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B36AB4;
  v5[3] = &unk_101830538;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100B36AB4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 8)) {
    *(_DWORD *)(v1 + 336) = **(_DWORD **)(result + 40);
  }
  return result;
}

void sub_100B36AD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    std::stringbuf::string_type __p = 0LL;
    int v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v2 = sub_100D74AD8();
    sub_100D752D8(v2, (char **)&__p);
    uint64_t v3 = (char *)__p;
    uint64_t v4 = v18;
    if (__p == v18) {
      goto LABEL_17;
    }
    int v5 = (char *)__p + 144;
    while (*(v5 - 36))
    {
      BOOL v6 = v5 == v18;
      v5 += 144;
      if (v6) {
        goto LABEL_15;
      }
    }

    __int16 v7 = v5 - 144;
    if (v5 - 144 != v18)
    {
      while (v5 != v4)
      {
        if (v5[108])
        {
          *(_OWORD *)__int16 v7 = *(_OWORD *)v5;
          __int128 v8 = *((_OWORD *)v5 + 1);
          __int128 v9 = *((_OWORD *)v5 + 2);
          __int128 v10 = *((_OWORD *)v5 + 4);
          *((_OWORD *)v7 + 3) = *((_OWORD *)v5 + 3);
          *((_OWORD *)v7 + 4) = v10;
          *((_OWORD *)v7 + 1) = v8;
          *((_OWORD *)v7 + 2) = v9;
          __int128 v11 = *((_OWORD *)v5 + 5);
          __int128 v12 = *((_OWORD *)v5 + 6);
          __int128 v13 = *((_OWORD *)v5 + 8);
          *((_OWORD *)v7 + 7) = *((_OWORD *)v5 + 7);
          *((_OWORD *)v7 + 8) = v13;
          *((_OWORD *)v7 + 5) = v11;
          *((_OWORD *)v7 + 6) = v12;
          v7 += 144;
        }

        v5 += 144;
      }
    }

    if (v7 != v4)
    {
      uint64_t v4 = v7;
      int v18 = v7;
    }

void sub_100B36D48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B36D68(dispatch_queue_t *a1, char a2, char a3)
{
  BOOL v6 = *a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100B36DE8;
  v7[3] = &unk_1018598F8;
  v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  dispatch_sync(v6, v7);
}

CFAbsoluteTime sub_100B36DE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFAbsoluteTime result = CFAbsoluteTimeGetCurrent();
  double v4 = *(double *)(v2 + 16);
  if (v4 < result)
  {
    if (*(_BYTE *)(v2 + 76))
    {
      double v5 = *(double *)(v2 + 88);
      if (v4 >= v5) {
        double v5 = *(double *)(v2 + 16);
      }
      *(double *)(v2 + 80) = *(double *)(v2 + 80) + result - v5;
    }

    *(_BYTE *)(v2 + 76) = *(_BYTE *)(a1 + 40);
    *(CFAbsoluteTime *)(v2 + 88) = result;
    if (*(_BYTE *)(a1 + 41))
    {
      *(_BYTE *)(v2 + 112) = 1;
      *(CFAbsoluteTime *)(v2 + 104) = result;
    }

    else if (!*(_BYTE *)(v2 + 112))
    {
      return result;
    }

    uint64_t v6 = 16LL;
    CFAbsoluteTime result = *(double *)(v2 + 96) + result - *(double *)(v2 + v6);
    *(CFAbsoluteTime *)(v2 + 96) = result;
  }

  return result;
}

double sub_100B36E88(uint64_t a1)
{
  double v3 = *(double *)(a1 + 16);
  double v2 = *(double *)(a1 + 24);
  if (*(_BYTE *)(a1 + 76))
  {
    double v4 = *(double *)(a1 + 88);
    if (v3 >= v4) {
      double v4 = *(double *)(a1 + 16);
    }
    double v5 = *(double *)(a1 + 80) + v2 - v4;
    *(double *)(a1 + 80) = v5;
  }

  else
  {
    double v5 = *(double *)(a1 + 80);
  }

  double result = v5 / (v2 - v3) * 100.0;
  *(_DWORD *)(a1 + 328) = (int)result;
  return result;
}

double sub_100B36EF4(uint64_t a1)
{
  double v3 = *(double *)(a1 + 16);
  double v2 = *(double *)(a1 + 24);
  if (*(_BYTE *)(a1 + 112))
  {
    double v4 = *(double *)(a1 + 104);
    if (v3 >= v4) {
      double v4 = *(double *)(a1 + 16);
    }
    double v5 = *(double *)(a1 + 96) + v2 - v4;
    *(double *)(a1 + 96) = v5;
  }

  else
  {
    double v5 = *(double *)(a1 + 96);
  }

  double result = v5 / (v2 - v3) * 100.0;
  *(_DWORD *)(a1 + 540) = (int)result;
  return result;
}

void sub_100B36F60(dispatch_queue_t *a1, uint64_t a2)
{
  double v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B36FCC;
  v5[3] = &unk_101830538;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100B36FCC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 8)) {
    *(_DWORD *)(v1 + 344) = **(_DWORD **)(result + 40);
  }
  return result;
}

void sub_100B36FE8(dispatch_queue_t *a1, int a2)
{
  double v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B37058;
  v5[3] = &unk_10182B540;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100B37058(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 8)) {
    *(void *)(v1 + 128) = *(unsigned int *)(result + 40);
  }
  return result;
}

void sub_100B37070(dispatch_queue_t *a1, int a2)
{
  double v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B370E0;
  v5[3] = &unk_10182B540;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100B370E0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 8)) {
    *(void *)(v1 + 120) = *(unsigned int *)(result + 40);
  }
  return result;
}

void sub_100B370F8(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100B37174;
  block[3] = &unk_101830558;
  block[4] = a1;
  void block[5] = a2;
  block[6] = a3;
  dispatch_sync(v6, block);
}

double sub_100B37174(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 156) += **(_DWORD **)(a1 + 40);
  double result = **(double **)(a1 + 48) + *(double *)(v1 + 160);
  *(double *)(v1 + 160) = result;
  return result;
}

void sub_100B371A0(dispatch_queue_s **a1, __int128 *a2)
{
  double v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_100B37248;
  block[3] = &unk_101872918;
  block[4] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(&__p, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 __p = *a2;
    uint64_t v6 = *((void *)a2 + 2);
  }

  int v7 = *((_DWORD *)a2 + 6);
  dispatch_async(v3, block);
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)__p);
  }
}

uint64_t sub_100B37248(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    double v2 = (const void **)(result + 40);
    uint64_t v3 = *(unsigned __int8 *)(result + 63);
    size_t v4 = *(void *)(result + 48);
    if ((v3 & 0x80u) == 0LL) {
      uint64_t v5 = *(unsigned __int8 *)(result + 63);
    }
    else {
      uint64_t v5 = *(void *)(result + 48);
    }
    uint64_t v6 = qword_10199A990;
    if (byte_10199A99F >= 0) {
      uint64_t v6 = byte_10199A99F;
    }
    if (v5 == v6)
    {
      if (byte_10199A99F >= 0) {
        int v7 = &qword_10199A988;
      }
      else {
        int v7 = (uint64_t *)qword_10199A988;
      }
      if ((v3 & 0x80) == 0)
      {
        if (*(_BYTE *)(result + 63))
        {
          char v8 = (unsigned __int8 *)(result + 40);
          uint64_t v9 = *(unsigned __int8 *)(result + 63);
          while (*v8 == *(unsigned __int8 *)v7)
          {
            ++v8;
            int v7 = (uint64_t *)((char *)v7 + 1);
            if (!--v9) {
              goto LABEL_29;
            }
          }

          goto LABEL_18;
        }

void *sub_100B373A8(uint64_t a1, uint64_t a2)
{
  double result = (void *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    double result = sub_1010DD48C(result, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 40);
    result[2] = *(void *)(a2 + 56);
    *(_OWORD *)double result = v5;
  }

  *(_DWORD *)(a1 + sub_10000AE14(v2 - 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_100B373FC(uint64_t a1)
{
}

BOOL sub_100B37410(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 224);
  if (v2 <= 0)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101872948);
    }
    uint64_t v9 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
    {
      int v10 = *(_DWORD *)(a1 + 224);
      *(_DWORD *)buf = 67109120;
      int v19 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Discarding workout CA event, invalid session duration %d",  buf,  8u);
    }

    BOOL v11 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (!v11) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101872948);
    }
    uint64_t v12 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "Discarding workout CA event, invalid session duration %d",  v17);
    goto LABEL_30;
  }

  double v3 = (double)v2;
  sub_101204164(buf, "WorkoutSessionMinSessionLengthSeconds", &qword_10134B028, 0);
  if (v20 <= v3)
  {
    int v13 = *(_DWORD *)(a1 + 36);
    if (v13 > 0)
    {
      *(_DWORD *)(a1 + 244) = llroundf((float)((float)*(int *)(a1 + 56) * 100.0) / (float)v13);
      *(_DWORD *)(a1 + 256) = llroundf((float)(*(float *)(a1 + 32) * 100.0) / (float)v13);
      return 1LL;
    }

    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101872948);
    }
    int v14 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
    {
      int v15 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)buf = 67109120;
      int v19 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Discarding workout CA event, invalid total epochs %d",  buf,  8u);
    }

    BOOL v16 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (!v16) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101872948);
    }
    uint64_t v12 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "Discarding workout CA event, invalid total epochs %d",  v17);
LABEL_30:
    char v8 = (uint8_t *)v12;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLWorkoutSessionMetrics::processMetrics()", "%s\n");
LABEL_31:
    if (v8 != buf) {
      free(v8);
    }
    return 0LL;
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_101872948);
  }
  size_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 224);
    *(_DWORD *)buf = 67109120;
    int v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Discarding workout CA event, duration %d does not meet kWorkoutSessionMinSessionLength",  buf,  8u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101872948);
    }
    int v7 = *(_DWORD *)(a1 + 224);
    v17[0] = 67109120;
    v17[1] = v7;
    char v8 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Discarding workout CA event, duration %d does not meet kWorkoutSessionMinSessionLength",  v17);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWorkoutSessionMetrics::processMetrics()", "%s\n");
    goto LABEL_31;
  }

  return result;
}

BOOL sub_100B37890(uint64_t a1)
{
  BOOL v2 = sub_100B37410(a1);
  if (v2)
  {
    *(_DWORD *)(a1 + 248) = llroundf((float)((float)*(int *)(a1 + 52) * 100.0) / (float)*(int *)(a1 + 36));
    *(_BYTE *)(a1 + 324) = *(_BYTE *)(a1 + 76);
    sub_100B36E88(a1);
    int v3 = *(_DWORD *)(a1 + 48);
    float v4 = (float)*(int *)(a1 + 36);
    int v5 = llroundf((float)((float)*(int *)(a1 + 40) * 100.0) / v4);
    *(_DWORD *)(a1 + 340) = llroundf((float)((float)*(int *)(a1 + 44) * 100.0) / v4);
    *(_DWORD *)(a1 + 348) = v5;
    *(_DWORD *)(a1 + 352) = llroundf((float)((float)v3 * 100.0) / v4);
    *(_DWORD *)(a1 + 356) = (*(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 120)) / 100;
    *(_DWORD *)(a1 + 556) = (int)*(double *)(a1 + 176);
  }

  return v2;
}

BOOL sub_100B37980(uint64_t a1)
{
  BOOL v2 = sub_100B37410(a1);
  if (v2)
  {
    *(_BYTE *)(a1 + 536) = *(_BYTE *)(a1 + 112);
    sub_100B36EF4(a1);
    *(_DWORD *)(a1 + 548) = llround(*(double *)(a1 + 160) * 100.0 / (float)((float)*(int *)(a1 + 36) * 2.56));
    *(_DWORD *)(a1 + 556) = (int)*(double *)(a1 + 176);
  }

  return v2;
}

uint64_t sub_100B379FC(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 552) = *a2;
  return result;
}

id sub_100B37A08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  v10[0] = @"sessionId";
  v11[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1 + 184);
  v10[1] = @"sessionDuration";
  v11[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 224));
  _DWORD v10[2] = @"workoutType";
  v11[2] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v1 + 232));
  v10[3] = @"otherWorkoutLabel";
  void v11[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 240));
  v10[4] = @"pctSessionGPSSourcePhone";
  v11[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 244));
  v10[5] = @"pctSessionGPSSourceWatch";
  v11[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 248));
  v10[6] = @"exerciseMinuteThreshold";
  v11[6] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 564));
  v10[7] = @"exerciseMinutes";
  v11[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 252));
  v10[8] = @"averageWorkoutIntensity";
  _WORD v11[8] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 256));
  v10[9] = @"workoutStartType";
  v11[9] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v1 + 260));
  v10[10] = @"autoStartEnabled";
  v11[10] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 560));
  v10[11] = @"autoPauseEnabled";
  v11[11] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 561));
  v10[12] = @"autoStopEnabled";
  v11[12] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 562));
  v10[13] = @"numberOfStopAlerts";
  v11[13] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 264));
  v10[14] = @"numStopAlertStopModel";
  v11[14] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 268));
  v10[15] = @"numStopAlertSteps";
  v11[15] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 272));
  v10[16] = @"numStopAlertOffWrist";
  v11[16] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 276));
  v10[17] = @"numStopAlertOnCharger";
  v11[17] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 280));
  v10[18] = @"numStopAlertHeartRate";
  v11[18] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 284));
  v10[19] = @"numStopAlertTurns";
  v11[19] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 288));
  v10[20] = @"numStopAlertTier2Classification";
  v11[20] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 292));
  v10[21] = @"numStopAlertConnectedToVehicleBluetooth";
  v11[21] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 296));
  v10[22] = @"numStopAlertVehicleSpeed";
  v11[22] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 300));
  v10[23] = @"numStopAlertExitedGeoFence";
  v11[23] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 304));
  v10[24] = @"numStopAlertVehicleSpeedArmConstrained";
  v11[24] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 308));
  v10[25] = @"numStopAlertHRHeading";
  v11[25] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 312));
  v10[26] = @"numStopAlertDelayedPreferenceChange";
  v11[26] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 316));
  v10[27] = @"numStopAlertUnsupportedWorkoutType";
  v11[27] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 320));
  v10[28] = @"sourceOfExerciseMinuteThreshold";
  v11[28] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 568));
  v10[29] = @"companionAvailable";
  v11[29] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 324));
  v10[30] = @"idsAvailability";
  v11[30] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 328));
  v10[31] = @"hrSource";
  v11[31] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v1 + 336));
  v10[32] = @"eVO2Max";
  v11[32] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 332));
  v10[33] = @"loadCalibrationUtilization";
  v11[33] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 340));
  v10[34] = @"PALEstimationStatus";
  v11[34] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v1 + 344));
  v10[35] = @"pctPedestrianGPSAvailable";
  v11[35] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 348));
  v10[36] = @"pctPedestrianCalibrated";
  v11[36] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 352));
  v10[37] = @"workoutElevationError";
  v11[37] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 356));
  v10[38] = @"totalManualPauseDuration";
  v11[38] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 556));
  objc_msgSend( v2,  "addEntriesFromDictionary:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  39));
  uint64_t v3 = *(void *)(v1 + 520);
  if (v3 >= 1)
  {
    uint64_t v4 = 0LL;
    if (v3 >= 10) {
      uint64_t v5 = 10LL;
    }
    else {
      uint64_t v5 = *(void *)(v1 + 520);
    }
    do
    {
      id v6 = +[CMWorkout workoutName:]( &OBJC_CLASS___CMWorkout,  "workoutName:",  *(void *)(*(void *)(*(void *)(v1 + 488) + 8 * ((v4 + *(void *)(v1 + 512)) / 0x18uLL))
                       + 168 * ((v4 + *(void *)(v1 + 512)) % 0x18uLL)
                       + 48));
      [v2 setObject:v6, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"multisportPrior%d", ++v4) forKey];
    }

    while (v5 != v4);
  }

  v8[0] = @"isMultisport";
  v9[0] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 376));
  v8[1] = @"isFitnessPlus";
  v9[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 360));
  v8[2] = @"detectedLocationType";
  v9[2] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v1 + 368));
  v8[3] = @"sessionOverviewId";
  void v9[3] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1 + 377);
  _DWORD v8[4] = @"multisportProgressionType";
  v9[4] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v1 + 364));
  v8[5] = @"workoutMediaType";
  v9[5] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v1 + 416));
  v8[6] = @"numWorkoutLegs";
  v9[6] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 424));
  v8[7] = @"countManualPauses";
  void v9[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 428));
  v8[8] = @"numMultisportPriors";
  _WORD v9[8] = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", *(void *)(v1 + 432));
  v8[9] = @"totalTransitionDuration";
  v9[9] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 528));
  objc_msgSend( v2,  "addEntriesFromDictionary:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  10));
  return v2;
}

NSDictionary *sub_100B380DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = @"isHighFrequencyAccelActive";
  v4[0] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 577));
  v3[1] = @"isHighFrequencyDeviceMotionActive";
  v4[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 578));
  _OWORD v3[2] = @"isMultisportWorkout";
  _OWORD v4[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 376));
  v3[3] = @"isThirdPartyWorkout";
  v4[3] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 576));
  v3[4] = @"workoutLabel";
  v4[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 592));
  v3[5] = @"workoutType";
  void v4[5] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v1 + 584));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  6LL);
}

id sub_100B381F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  v4[0] = @"sessionId";
  v5[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1 + 184);
  v4[1] = @"sessionDuration";
  v5[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 224));
  _OWORD v4[2] = @"workoutType";
  v5[2] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v1 + 232));
  v4[3] = @"otherWorkoutLabel";
  v5[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 240));
  v4[4] = @"pctSessionGPSSourcePhone";
  v5[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 244));
  void v4[5] = @"isFitnessPlus";
  void v5[5] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 360));
  void v4[6] = @"detectedLocationType";
  void v5[6] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v1 + 368));
  v4[7] = @"countManualPauses";
  void v5[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 428));
  v4[8] = @"watchAvailable";
  v5[8] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 536));
  v4[9] = @"pctWatchConnected";
  v5[9] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 540));
  v4[10] = @"workoutMediaType";
  v5[10] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v1 + 416));
  v4[11] = @"steps";
  v5[11] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 544));
  v4[12] = @"pctActiveTime";
  v5[12] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 548));
  v4[13] = @"averageWorkoutIntensity";
  v5[13] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 256));
  v4[14] = @"phoneFitnessMode";
  v5[14] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 552));
  v4[15] = @"totalManualPauseDuration";
  v5[15] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 556));
  objc_msgSend( v2,  "addEntriesFromDictionary:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  16));
  return v2;
}

void sub_100B38448(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100B38474(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100B384A0()
{
  dword_10199A9A0 = 800;
  __cxa_atexit((void (*)(void *))sub_100355650, &qword_10199A988, (void *)&_mh_execute_header);
  sub_1010DDBC0(&qword_10199A9A8, "DmFp");
  dword_10199A9C0 = 200;
  return __cxa_atexit((void (*)(void *))sub_100355650, &qword_10199A9A8, (void *)&_mh_execute_header);
}

void *sub_100B3852C(void *a1, __int128 *a2)
{
  uint64_t v4 = (float32x2_t *)sub_100C0099C(a1);
  *uint64_t v4 = (float32x2_t)&off_101872998;
  sub_100B3857C(v4, a2);
  return a1;
}

void sub_100B38568(_Unwind_Exception *a1)
{
}

void sub_100B3857C(float32x2_t *a1, __int128 *a2)
{
  __int128 v3 = a2[1];
  __int128 v25 = *a2;
  __int128 v26 = v3;
  __int128 v4 = a2[3];
  v27[0] = a2[2];
  v27[1] = v4;
  if (sub_100C01B68())
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018729F8);
    }
    uint64_t v5 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Device still has original rear camera. Using unit-specific calibration info",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018729F8);
      }
      LOWORD(v22[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Device still has original rear camera. Using unit-specific calibration info",  v22,  2);
      int v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    id v6 = (__int16 *)((unint64_t)&v25 | 0xA);
LABEL_27:
    sub_100C01740(a1, v6);
    return;
  }

  unsigned int v7 = sub_100C01CDC();
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_1018729F8);
  }
  char v8 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v24 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Rear camera was replaced. VCM actuator ID is %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018729F8);
    }
    v22[0] = 67109120;
    v22[1] = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Rear camera was replaced. VCM actuator ID is %d",  v22);
    int v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  if (v7 == 4)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018729F8);
    }
    int v10 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Using generic Alps calibration info", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018729F8);
      }
      LOWORD(v22[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Using generic Alps calibration info",  v22,  2);
      int v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    id v6 = (__int16 *)v27 + 7;
    goto LABEL_27;
  }

  if (v7 == 3)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018729F8);
    }
    uint64_t v9 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Using generic Mitsumi calibration info", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018729F8);
      }
      LOWORD(v22[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Using generic Mitsumi calibration info",  v22,  2);
      int v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }

    id v6 = (__int16 *)&v26 + 6;
    goto LABEL_27;
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_1018729F8);
  }
  BOOL v11 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Unrecongized VCM actuator. Not performing compensation",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018729F8);
    }
    LOWORD(v22[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Unrecongized VCM actuator. Not performing compensation",  v22,  2);
    int v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

void sub_100B38C38(_DWORD *a1)
{
  uint64_t v1 = sub_100C00A00(a1);
  operator delete(v1);
}

void sub_100B38C4C(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100B38CD8(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    __int128 v4 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2113;
      int v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#loip received visit, visit:%{private, location:escape_only}@}",  buf,  0x1Cu);
    }

    sub_100B39998(a1, a2);
  }

  else
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    uint64_t v5 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "#loip cannot request LOI location for a nil visit",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101872C40);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  16LL,  "#loip cannot request LOI location for a nil visit",  v8,  2);
      unsigned int v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLLoiLocationProvider::onVisit(CLVisit *)", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

void sub_100B38FB8(id a1)
{
  qword_10199A9D0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLLoiLocationProviderSilo");
}

uint64_t sub_100B3906C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100B39C7C;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199A9E8 != -1) {
    dispatch_once(&qword_10199A9E8, block);
  }
  return qword_1019A1CF8;
}

uint64_t sub_100B393B0(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100479C24(a1, "CLLoiLocationProvider", a2);
  *(void *)uint64_t v3 = off_101872A48;
  *(void *)(v3 + 120) = 0LL;
  __int128 v4 = (id *)(v3 + 120);
  *(void *)(v3 + 128) = 0LL;
  *(_DWORD *)(v3 + 136) = 0xFFFF;
  *(void *)(v3 + 148) = 0LL;
  *(void *)(v3 + 140) = 0LL;
  *(_OWORD *)(v3 + 156) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(v3 + 172) = _Q0;
  *(_OWORD *)(v3 + 188) = _Q0;
  *(_OWORD *)(v3 + 204) = _Q0;
  *(_DWORD *)(v3 + 220) = 0;
  *(void *)(v3 + 232) = 0LL;
  *(void *)(v3 + 240) = 0LL;
  *(void *)(v3 + 224) = 0xBFF0000000000000LL;
  *(_DWORD *)(v3 + 248) = 0;
  *(void *)(v3 + 252) = 0xBFF0000000000000LL;
  *(_DWORD *)(v3 + 260) = 0x7FFFFFFF;
  *(void *)(v3 + 272) = 0LL;
  *(void *)(v3 + 280) = 0LL;
  *(_BYTE *)(v3 + 288) = 0;
  *(void *)(v3 + 2sub_10000AE14(v2 - 64) = 0LL;
  *(void *)(v3 + 300) = 0LL;
  *(void *)(v3 + 292) = 0LL;
  *(void *)(a1 + 128) = -[CLLoiLocationProviderRoutineAdapter initWithLoiLocationProvider:]( objc_alloc(&OBJC_CLASS___CLLoiLocationProviderRoutineAdapter),  "initWithLoiLocationProvider:",  a1);
  id v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLRoutineMonitor");
  *__int128 v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "registerDelegate:inSilo:", *(void *)(a1 + 128), objc_msgSend(*(id *)(a1 + 32), "silo"));
    [*v4 setDelegateEntityName:"CLLoiLocationProvider"];
    id v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
    *(void *)(a1 + 296) = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_100B3967C;
    void v15[3] = &unk_10181D3D0;
    v15[4] = a1;
    [v11 setHandler:v15];
  }

  else
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    uint64_t v12 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#loip error CLRoutineMonitor is not supported.}",  buf,  0x12u);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101872C40);
      }
    }

    __int16 v13 = (os_log_s *)qword_101934928;
    if (os_signpost_enabled((os_log_t)qword_101934928))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#loip error CLRoutineMonitor is not supported.",  "{msg%{public}.0s:#loip error CLRoutineMonitor is not supported.}",  buf,  0x12u);
    }
  }

  return a1;
}

void sub_100B39668(_Unwind_Exception *a1)
{
}

void sub_100B3967C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [*(id *)(v1 + 296) setNextFireDelay:1.79769313e308];
  id v2 = objc_alloc(&OBJC_CLASS___RTStoredVisitFetchOptions);
  id v3 = objc_msgSend( v2,  "initWithAscending:confidence:dateInterval:labelVisit:limit:",  0,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", RTVisitConfidenceHigh),  0,  1,  &off_1018D40D0);
  __int128 v4 = *(void **)(v1 + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B39740;
  v5[3] = &unk_101838AD8;
  v5[4] = v1;
  [v4 fetchStoredVisitsWithOptions:v3 withReply:v5];
}

void sub_100B39740(uint64_t a1, void *a2, CLVisit *a3)
{
  if (a3)
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    __int128 v4 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2114;
      int v14 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#loip error fetching visits, error:%{public, location:escape_only}@}",  (uint8_t *)&v9,  0x1Cu);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101872C40);
      }
    }

    uint64_t v5 = (os_log_s *)qword_101934928;
    if (os_signpost_enabled((os_log_t)qword_101934928))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2114;
      int v14 = a3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#loip error fetching visits",  "{msg%{public}.0s:#loip error fetching visits, error:%{public, location:escape_only}@}",  (uint8_t *)&v9,  0x1Cu);
    }
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    unsigned int v7 = -[CLVisit initWithVisit:]([CLVisit alloc], "initWithVisit:", [a2 firstObject]);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    char v8 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2113;
      int v14 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#loip fetched most recent visit, visit:%{private, location:escape_only}@}",  (uint8_t *)&v9,  0x1Cu);
    }

    sub_100B39998(v6, v7);
  }

id sub_100B39998(uint64_t a1, void *a2)
{
  id result = [a2 hasArrivalDate];
  if ((_DWORD)result)
  {
    id result = [a2 hasDepartureDate];
    if ((_DWORD)result) {
      return (id)sub_100B3A30C(a1, 1);
    }
  }

  return result;
}

uint64_t sub_100B39A10(uint64_t a1)
{
  *(void *)a1 = off_101872A48;
  sub_100B39AC8(a1);

  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(_DWORD *)(a1 + 136) = 0xFFFF;
  *(void *)(a1 + 148) = 0LL;
  *(void *)(a1 + 140) = 0LL;
  *(_OWORD *)(a1 + 156) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 172) = _Q0;
  *(_OWORD *)(a1 + 188) = _Q0;
  *(_OWORD *)(a1 + 204) = _Q0;
  *(_DWORD *)(a1 + 220) = 0;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 224) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 252) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 260) = 0x7FFFFFFF;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 2sub_10000AE14(v2 - 64) = 0LL;
  *(_BYTE *)(a1 + 288) = 0;
  [*(id *)(a1 + 296) invalidate];

  *(void *)(a1 + 296) = 0LL;
  return sub_10047A1C0(a1);
}

id sub_100B39AC8(uint64_t a1)
{
  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101872C40);
  }
  id v2 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#loip stop leeching visits", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  1LL,  "#loip stop leeching visits",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLLoiLocationProvider::shutdown()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return [*(id *)(a1 + 120) stopLeechingVisitsForClient:*(void *)(a1 + 128)];
}

void sub_100B39C68(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B39A10(a1);
  operator delete(v1);
}

uint64_t sub_100B39C7C(uint64_t a1)
{
  id v2 = operator new(0x138uLL);
  uint64_t result = sub_100B393B0((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A1CF8 = (uint64_t)v2;
  return result;
}

void sub_100B39CB4(_Unwind_Exception *a1)
{
}

uint64_t sub_100B39CC8(uint64_t a1, int *a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101872C20);
  }
  __int128 v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)buf = 67240192;
    int v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "@ClxLoi, registerForNotificationInternal, notification, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101872C20);
    }
    int v9 = *a2;
    v15[0] = 67240192;
    v15[1] = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@ClxLoi, registerForNotificationInternal, notification, %{public}d",  v15,  8);
    __int16 v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLoiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  sub_10047A690();
  if (!*a2)
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    uint64_t v6 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#loip register to leech visits", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101872C40);
      }
      LOWORD(v15[0]) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  1LL,  "#loip register to leech visits",  v15,  v14);
      __int16 v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLoiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    [*(id *)(a1 + 120) startLeechingVisitsForClient:*(void *)(a1 + 128)];
    [*(id *)(a1 + 296) nextFireDelay];
    if (v7 == 1.79769313e308) {
      [*(id *)(a1 + 296) setNextFireDelay:10.0];
    }
  }

  return 1LL;
}

uint64_t sub_100B39FF0(uint64_t a1, int *a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101872C20);
  }
  __int128 v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)buf = 67240192;
    int v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "@ClxLoi, unregisterForNotificationInternal, notification, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101872C20);
    }
    int v8 = *a2;
    v14[0] = 67240192;
    v14[1] = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@ClxLoi, unregisterForNotificationInternal, notification, %{public}d",  v14,  8);
    int v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLoiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  sub_10047A698(a1);
  if (!*a2)
  {
    *(_DWORD *)buf = 0;
    if (!sub_100247620(a1, (int *)buf, 1LL))
    {
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101872C40);
      }
      uint64_t v6 = (os_log_s *)qword_101934928;
      if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#loip stop leeching visits", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934920 != -1) {
          dispatch_once(&qword_101934920, &stru_101872C40);
        }
        LOWORD(v14[0]) = 0;
        LODWORD(v13) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  1LL,  "#loip stop leeching visits",  v14,  v13);
        uint64_t v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLoiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }

      [*(id *)(a1 + 120) stopLeechingVisitsForClient:*(void *)(a1 + 128)];
    }
  }

  return 1LL;
}

uint64_t sub_100B3A30C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 136) = 0xFFFF;
  *(void *)(a1 + 148) = 0LL;
  *(void *)(a1 + 140) = 0LL;
  *(_OWORD *)(a1 + 156) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 172) = _Q0;
  *(_OWORD *)(a1 + 188) = _Q0;
  *(_OWORD *)(a1 + 204) = _Q0;
  *(_DWORD *)(a1 + 220) = 0;
  *(void *)(a1 + 224) = 0xBFF0000000000000LL;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 252) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 260) = 0x7FFFFFFF;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 2sub_10000AE14(v2 - 64) = 0LL;
  *(_BYTE *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 232) = 13;
  *(_DWORD *)(a1 + 292) = 0;
  if (a2) {
    return sub_100B3A37C(a1);
  }
  return a1;
}

uint64_t sub_100B3A37C(uint64_t a1)
{
  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101872C40);
  }
  id v2 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#loip notify LOI location unavailable", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  1LL,  "#loip notify LOI location unavailable",  v6,  2);
    int v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLLoiLocationProvider::notifyLocationUnavailable()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  *(_DWORD *)buf = 9;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(void *)a1 + 144LL))( a1,  buf,  1LL,  0xFFFFFFFFLL);
}

id sub_100B3A530(uint64_t a1, void *a2)
{
  if (!objc_msgSend(objc_msgSend(a2, "_placeInference"), "_loiIdentifier"))
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    int v5 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "#loip cannot request LOI location for a nil LOI identifier",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return (id)sub_100B3A30C(a1, 1);
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  1LL,  "#loip cannot request LOI location for a nil LOI identifier",  v9,  2);
    goto LABEL_21;
  }

  id v3 = *(void **)(a1 + 120);
  if (v3) {
    return objc_msgSend(v3, "fetchLocationOfInterestWithIdentifier:withReply:");
  }
  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101872C40);
  }
  double v7 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "#loip skip requesting Loi location as routine monitor is not up",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  1LL,  "#loip skip requesting Loi location as routine monitor is not up",  v9,  2);
LABEL_21:
    int v8 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLLoiLocationProvider::updateLoiFromVisit(CLVisit *)", "%s\n", v6);
    if (v8 != buf) {
      free(v8);
    }
  }

  return (id)sub_100B3A30C(a1, 1);
}

void sub_100B3A7F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (a3)
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    double v7 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)int v57 = 0;
      *(_WORD *)&v57[4] = 2082;
      *(void *)&v57[6] = "";
      __int16 v58 = 2113;
      uint64_t v59 = v8;
      __int16 v60 = 2114;
      int v61 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#loip error fetching LOI, loiIdentifier:%{private, location:escape_only}@, error :%{public, location:escape_only}@}",  buf,  0x26u);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101872C40);
      }
    }

    int v9 = (os_log_s *)qword_101934928;
    if (os_signpost_enabled((os_log_t)qword_101934928))
    {
      int v10 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)int v57 = 0;
      *(_WORD *)&v57[4] = 2082;
      *(void *)&v57[6] = "";
      __int16 v58 = 2113;
      uint64_t v59 = v10;
      __int16 v60 = 2114;
      int v61 = a3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#loip error fetching LOI",  "{msg%{public}.0s:#loip error fetching LOI, loiIdentifier:%{private, location:escape_only}@, error :%{public, location:escape_only}@}",  buf,  0x26u);
    }

    id v11 = [a3 domain];
    if (![v11 isEqualToString:RTErrorDomain]
      || [a3 code] != (id)5 && objc_msgSend(a3, "code") != (id)8)
    {
      goto LABEL_43;
    }

    int v12 = *(_DWORD *)(v5 + 304);
    if (v12 > 0) {
      goto LABEL_43;
    }
    *(_DWORD *)(v5 + 304) = v12 + 1;
    [*(id *)(v5 + 296) nextFireDelay];
    if (v13 == 1.79769313e308) {
      [*(id *)(v5 + 296) setNextFireDelay:10.0];
    }
  }

  if (!a2)
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    int v17 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_ERROR))
    {
      __int16 v18 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)int v57 = 0;
      *(_WORD *)&v57[4] = 2082;
      *(void *)&v57[6] = "";
      __int16 v58 = 2113;
      uint64_t v59 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#loip received nil in return when fetching LOI, loiIdentifier:%{private, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101872C40);
      }
    }

    uint64_t v19 = qword_101934928;
    if (!os_signpost_enabled((os_log_t)qword_101934928)) {
      goto LABEL_43;
    }
    double v20 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)int v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(void *)&v57[6] = "";
    __int16 v58 = 2113;
    uint64_t v59 = v20;
    int v21 = "#loip received nil in return when fetching LOI";
    uint64_t v22 = "{msg%{public}.0s:#loip received nil in return when fetching LOI, loiIdentifier:%{private, location:escape_only}@}";
    uint64_t v23 = (os_log_s *)v19;
    uint32_t v24 = 28;
LABEL_42:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v21,  v22,  buf,  v24);
    goto LABEL_43;
  }

  if (!objc_msgSend(objc_msgSend(a2, "visits"), "count"))
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    uint64_t v14 = (os_log_s *)qword_101934928;
    if (!os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_43;
    }
    __int128 v25 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)int v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(void *)&v57[6] = "";
    __int16 v58 = 2113;
    uint64_t v59 = a2;
    __int16 v60 = 2113;
    int v61 = v25;
    int v16 = "{msg%{public}.0s:#loip received LOI has no visit history, loi:%{private, location:escape_only}@, "
          "loiIdentifier:%{private, location:escape_only}@}";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0x26u);
LABEL_43:
    sub_100B3A30C(v5, 1);
    return;
  }

  if (objc_msgSend(objc_msgSend(a2, "location"), "referenceFrame") == 2)
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    uint64_t v14 = (os_log_s *)qword_101934928;
    if (!os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_43;
    }
    int v15 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)int v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(void *)&v57[6] = "";
    __int16 v58 = 2113;
    uint64_t v59 = a2;
    __int16 v60 = 2113;
    int v61 = v15;
    int v16 = "{msg%{public}.0s:#loip received China Shifted LOI, loi:%{private, location:escape_only}@, loiIde"
          "ntifier:%{private, location:escape_only}@}";
    goto LABEL_33;
  }

  [a2 confidence];
  if (v26 < 0.0)
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    int v27 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)int v57 = 0;
      *(_WORD *)&v57[4] = 2082;
      *(void *)&v57[6] = "";
      __int16 v58 = 2113;
      uint64_t v59 = a2;
      __int16 v60 = 2113;
      int v61 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#loip received LOI has negative confidence value, loi:%{private, location:escape_on ly}@, loiIdentifier:%{private, location:escape_only}@}",  buf,  0x26u);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101872C40);
      }
    }

    uint64_t v29 = qword_101934928;
    if (!os_signpost_enabled((os_log_t)qword_101934928)) {
      goto LABEL_43;
    }
    uint64_t v30 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)int v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(void *)&v57[6] = "";
    __int16 v58 = 2113;
    uint64_t v59 = a2;
    __int16 v60 = 2113;
    int v61 = v30;
    int v21 = "#loip received LOI has negative confidence value";
    uint64_t v22 = "{msg%{public}.0s:#loip received LOI has negative confidence value, loi:%{private, location:escape_"
          "only}@, loiIdentifier:%{private, location:escape_only}@}";
    uint64_t v23 = (os_log_s *)v29;
    uint32_t v24 = 38;
    goto LABEL_42;
  }

  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101872C40);
  }
  uint64_t v31 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)int v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(void *)&v57[6] = "";
    __int16 v58 = 2113;
    uint64_t v59 = a2;
    __int16 v60 = 2113;
    int v61 = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#loip received LOI, loi:%{private, location:escape_only}@, loiIdentifier:%{privat e, location:escape_only}@}",  buf,  0x26u);
  }

  *(_DWORD *)(v5 + 136) = 0xFFFF;
  *(void *)(v5 + 148) = 0LL;
  *(void *)(v5 + 140) = 0LL;
  *(_OWORD *)(v5 + 156) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(v5 + 172) = _Q0;
  *(_OWORD *)(v5 + 188) = _Q0;
  *(_OWORD *)(v5 + 204) = _Q0;
  *(_DWORD *)(v5 + 220) = 0;
  *(void *)(v5 + 224) = 0xBFF0000000000000LL;
  *(void *)(v5 + 232) = 0LL;
  *(void *)(v5 + 240) = 0LL;
  *(_DWORD *)(v5 + 248) = 0;
  *(void *)(v5 + 252) = 0xBFF0000000000000LL;
  *(_DWORD *)(v5 + 260) = 0x7FFFFFFF;
  *(void *)(v5 + 272) = 0LL;
  *(void *)(v5 + 280) = 0LL;
  *(void *)(v5 + 2sub_10000AE14(v2 - 64) = 0LL;
  *(_BYTE *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 232) = 13;
  *(_DWORD *)(v5 + 292) = 0;
  objc_msgSend(objc_msgSend(a2, "location"), "latitude");
  *(void *)(v5 + 140) = v38;
  objc_msgSend(objc_msgSend(a2, "location"), "longitude");
  *(void *)(v5 + 148) = v39;
  objc_msgSend(objc_msgSend(a2, "location"), "horizontalUncertainty");
  *(void *)(v5 + 156) = v40;
  objc_msgSend(objc_msgSend(a2, "location"), "altitude");
  *(void *)(v5 + 1sub_10000AE14(v2 - 64) = v41;
  objc_msgSend(objc_msgSend(a2, "location"), "verticalUncertainty");
  *(void *)(v5 + 172) = v42;
  [a2 confidence];
  int v44 = vcvtmd_s64_f64(v43 * 13.0 + 67.0);
  *(_DWORD *)(v5 + 220) = v44;
  if (v44 <= 67) {
    int v45 = 25;
  }
  else {
    int v45 = 50;
  }
  if (v44 <= 73) {
    int v46 = v45;
  }
  else {
    int v46 = 75;
  }
  *(_DWORD *)(v5 + 2sub_10000AE14(v2 - 64) = v46;
  id v47 = objc_msgSend(objc_msgSend(a2, "location"), "sourceAccuracy");
  if ((unint64_t)v47 >= 3)
  {
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    __int16 v48 = (os_log_s *)qword_101934928;
    if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_ERROR))
    {
      id v49 = objc_msgSend(objc_msgSend(a2, "location"), "sourceAccuracy");
      *(_DWORD *)buf = 134217984;
      *(void *)int v57 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "#loip unsupported location accuracy type, %lu",  buf,  0xCu);
    }

    BOOL v50 = sub_1002921D0(115, 0);
    LODWORD(v47) = 0;
    if (v50)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934920 != -1) {
        dispatch_once(&qword_101934920, &stru_101872C40);
      }
      uint64_t v51 = qword_101934928;
      int v54 = 134217984;
      id v55 = objc_msgSend(objc_msgSend(a2, "location"), "sourceAccuracy");
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v51,  16LL,  "#loip unsupported location accuracy type, %lu",  &v54);
      uint64_t v53 = (uint8_t *)v52;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLLoiLocationProvider::updateLoiFromVisit(CLVisit *)_block_invoke",  "%s\n",  v52);
      if (v53 != buf) {
        free(v53);
      }
      LODWORD(v47) = 0;
    }
  }

  *(_DWORD *)(v5 + 292) = (_DWORD)v47;
  *(void *)(v5 + 224) = 0x4024000000000000LL;
  *(CFAbsoluteTime *)(v5 + 212) = CFAbsoluteTimeGetCurrent();
  else {
    sub_100B3A37C(v5);
  }
  *(_DWORD *)(v5 + 304) = 0;
}

void sub_100B3B16C(uint64_t a1)
{
  if (qword_101934920 != -1) {
    dispatch_once(&qword_101934920, &stru_101872C40);
  }
  id v2 = (os_log_s *)qword_101934928;
  if (os_log_type_enabled((os_log_t)qword_101934928, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 140);
    uint64_t v4 = *(void *)(a1 + 148);
    uint64_t v5 = *(void *)(a1 + 156);
    uint64_t v6 = *(void *)(a1 + 164);
    uint64_t v7 = *(void *)(a1 + 172);
    int v8 = *(_DWORD *)(a1 + 220);
    uint64_t v9 = *(unsigned int *)(a1 + 264);
    uint64_t v10 = *(int *)(a1 + 292);
    *(_DWORD *)buf = 134285313;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&_BYTE buf[12] = 2049;
    *(void *)&buf[14] = v4;
    *(_WORD *)&_BYTE buf[22] = 2050;
    *(void *)&buf[24] = v5;
    *(_WORD *)uint64_t v51 = 2049;
    *(void *)&v51[2] = v6;
    *(_WORD *)&v51[10] = 2050;
    *(void *)&v51[12] = v7;
    *(_WORD *)&v51[20] = 1026;
    *(_DWORD *)&v51[22] = v8;
    *(_WORD *)&v51[26] = 2050;
    *(void *)&v51[28] = v9;
    *(_WORD *)&v51[36] = 2050;
    *(void *)&v51[38] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "#loip,notify LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,altitude,%{private}.2f,vunc,%{publ ic}.2f,confidence,%{public}d,integrity,%{public}lu,sourceAccuracy,%{public}lu",  buf,  0x4Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934920 != -1) {
      dispatch_once(&qword_101934920, &stru_101872C40);
    }
    uint64_t v24 = *(void *)(a1 + 140);
    uint64_t v25 = *(void *)(a1 + 148);
    uint64_t v26 = *(void *)(a1 + 156);
    uint64_t v27 = *(void *)(a1 + 164);
    uint64_t v28 = *(void *)(a1 + 172);
    int v29 = *(_DWORD *)(a1 + 220);
    uint64_t v30 = *(unsigned int *)(a1 + 264);
    uint64_t v31 = *(int *)(a1 + 292);
    int v34 = 134285313;
    uint64_t v35 = v24;
    __int16 v36 = 2049;
    uint64_t v37 = v25;
    __int16 v38 = 2050;
    uint64_t v39 = v26;
    __int16 v40 = 2049;
    uint64_t v41 = v27;
    __int16 v42 = 2050;
    uint64_t v43 = v28;
    __int16 v44 = 1026;
    int v45 = v29;
    __int16 v46 = 2050;
    uint64_t v47 = v30;
    __int16 v48 = 2050;
    uint64_t v49 = v31;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934928,  1LL,  "#loip,notify LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,altitude,%{private}.2f,vunc,%{publ ic}.2f,confidence,%{public}d,integrity,%{public}lu,sourceAccuracy,%{public}lu",  &v34,  78);
    int v33 = (char *)v32;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLLoiLocationProvider::notifyLocation()", "%s\n", v32);
    if (v33 != buf) {
      free(v33);
    }
  }

  sub_100246564((uint64_t)buf);
  __int128 v11 = *(_OWORD *)(a1 + 248);
  __int128 v53 = *(_OWORD *)(a1 + 232);
  __int128 v54 = v11;
  v55[0] = *(_OWORD *)(a1 + 264);
  *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)(a1 + 276);
  __int128 v12 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)&v51[16] = v12;
  __int128 v13 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v51[32] = *(_OWORD *)(a1 + 200);
  __int128 v52 = v13;
  __int128 v14 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 136);
  *(_OWORD *)&uint8_t buf[16] = v14;
  int v57 = *(_DWORD *)(a1 + 292);
  int v34 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v34,  buf,  1LL,  0xFFFFFFFFLL,  0LL);

  int v15 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  if (v60 < 0) {
    operator delete(__p);
  }
  __int16 v18 = v58;
  if (v58)
  {
    uint64_t v19 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  int v21 = v56;
  if (v56)
  {
    uint64_t v22 = (unint64_t *)&v56->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

void sub_100B3B51C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

void sub_100B3B548(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLLoiLocationProvider");
  sub_10047D8C8((uint64_t)v10, a1, (uint64_t *)__p, a4, a2, a3);
  *uint64_t v10 = &off_101872BB8;
  *a5 = v10;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100B3B5E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_100B3B614(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B3B640(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B3B66C(id a1)
{
  qword_101934928 = (uint64_t)os_log_create("com.apple.locationd.Position", "LoiPosition");
}

void sub_100B3BDD0(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100B3D374(id a1)
{
  qword_1019345B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

BOOL sub_100B3D3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6 = sub_100833470((float *)a2);
  float v9 = 0.0;
  for (uint64_t i = 28LL; i != 40; i += 4LL)
    float v9 = v9 + (float)(*(float *)(a2 + i) * *(float *)(a2 + i));
  float v11 = sqrtf(v9);
  float v13 = -v12;
  float v14 = fabsf(v12);
  float v15 = sub_100B3D624(a1, (float *)a2);
  sub_1005B19F8(a1 + 32, v15, v13);
  *(float *)a1 = v11 + *(float *)a1;
  unint64_t v16 = *(void *)(a1 + 8) + 1LL;
  *(void *)(a1 + 8) = v16;
  float v17 = v14 + *(float *)(a1 + 16);
  *(float *)(a1 + 16) = v17;
  uint64_t v18 = *(void *)(a1 + 24) + 1LL;
  *(void *)(a1 + 24) = v18;
  if (v16 >= 0x100)
  {
    if (v18) {
      float v19 = v17 / (float)(unint64_t)v18;
    }
    else {
      float v19 = 0.0;
    }
    uint64_t v20 = *(unsigned __int16 *)(a1 + 152);
    uint64_t v21 = *(unsigned __int16 *)(a1 + 154);
    unint64_t v22 = *(unsigned int *)(a1 + 156);
    if (v20 + v21 >= v22) {
      uint64_t v23 = *(unsigned int *)(a1 + 156);
    }
    else {
      uint64_t v23 = 0LL;
    }
    *(float *)(a1 + 152 + 4 * (v20 + v21 - v23) + 8) = v19;
    if (v22 <= v21)
    {
      unint64_t v24 = v20 + 1;
      if (v24 < v22) {
        LOWORD(v22) = 0;
      }
      *(_WORD *)(a1 + 152) = v24 - v22;
    }

    else
    {
      *(_WORD *)(a1 + 154) = v21 + 1;
    }

    *(_BYTE *)(a1 + 136) = 1;
    *(_DWORD *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0LL;
    sub_100208C68(a1 + 136);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 140);
    unint64_t v25 = *(void *)(a1 + 8);
    if (v25) {
      float v26 = *(float *)a1 / (float)v25;
    }
    else {
      float v26 = 0.0;
    }
    uint64_t v27 = *(unsigned __int16 *)(a1 + 108);
    uint64_t v28 = *(unsigned __int16 *)(a1 + 110);
    unint64_t v29 = *(unsigned int *)(a1 + 112);
    if (v27 + v28 >= v29) {
      uint64_t v30 = *(unsigned int *)(a1 + 112);
    }
    else {
      uint64_t v30 = 0LL;
    }
    *(float *)(a1 + 108 + 4 * (v27 + v28 - v30) + 8) = v26;
    if (v29 <= v28)
    {
      unint64_t v31 = v27 + 1;
      if (v31 < v29) {
        LOWORD(v29) = 0;
      }
      *(_WORD *)(a1 + 108) = v31 - v29;
    }

    else
    {
      *(_WORD *)(a1 + 110) = v28 + 1;
    }

    *(_BYTE *)(a1 + 92) = 1;
    *(_DWORD *)a1 = 0;
    *(void *)(a1 + 8) = 0LL;
    sub_100208C68(a1 + 92);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 96);
    float v32 = sub_1005B1C24(a1 + 32);
    uint64_t v33 = *(unsigned __int16 *)(a1 + 196);
    float v34 = fabsf(v32);
    uint64_t v35 = *(unsigned __int16 *)(a1 + 198);
    unint64_t v36 = *(unsigned int *)(a1 + 200);
    if (v33 + v35 >= v36) {
      uint64_t v37 = *(unsigned int *)(a1 + 200);
    }
    else {
      uint64_t v37 = 0LL;
    }
    *(float *)(a1 + 196 + 4 * (v33 + v35 - v37) + 8) = v34;
    if (v36 <= v35)
    {
      unint64_t v38 = v33 + 1;
      if (v38 < v36) {
        LOWORD(v36) = 0;
      }
      *(_WORD *)(a1 + 196) = v38 - v36;
    }

    else
    {
      *(_WORD *)(a1 + 198) = v35 + 1;
    }

    *(_BYTE *)(a1 + 180) = 1;
    *(void *)(a1 + 80) = 0LL;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 60) = 0u;
    sub_100208C68(a1 + 180);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 184);
    *(void *)a3 = *(void *)(a2 + 48);
  }

  return v16 > 0xFF;
}

float sub_100B3D624(uint64_t a1, float *a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_10199AA00);
  if ((v3 & 1) == 0)
  {
    unint64_t v16 = a2;
    int v15 = __cxa_guard_acquire(&qword_10199AA00);
    a2 = v16;
    if (v15)
    {
      qword_10199A9F0 = 1065353216LL;
      dword_10199A9F8 = 0;
      __cxa_guard_release(&qword_10199AA00);
      a2 = v16;
    }
  }

  float v5 = a2[8];
  float v4 = a2[9];
  float v6 = a2[7];
  float v7 = (float)(v5 * *(float *)&dword_10199A9F8) - (float)(v4 * *((float *)&qword_10199A9F0 + 1));
  float v8 = (float)(v4 * *(float *)&qword_10199A9F0) - (float)(v6 * *(float *)&dword_10199A9F8);
  float v9 = (float)(v6 * *((float *)&qword_10199A9F0 + 1)) - (float)(v5 * *(float *)&qword_10199A9F0);
  float v10 = sub_100833470(a2);
  float v13 = -(float)((float)((float)(v8 * v11) + (float)(v10 * v7)) + (float)(v12 * v9));
  float result = v13 - *(float *)(a1 + 88);
  *(float *)(a1 + 88) = v13;
  return result;
}

uint64_t sub_100B3D704(uint64_t result)
{
  if (!*(_BYTE *)(result + 12))
  {
LABEL_8:
    *(_BYTE *)(result + 15) = 0;
    return result;
  }

  if (*(double *)(result + 16) > 20.0)
  {
LABEL_3:
    BOOL v1 = 1;
LABEL_7:
    *(_BYTE *)(result + 15) = v1;
    return result;
  }

  if (*(_BYTE *)(result + 13))
  {
    if (*(_BYTE *)(result + 14))
    {
      BOOL v1 = *(_DWORD *)(result + 24) != 1;
      goto LABEL_7;
    }

    goto LABEL_8;
  }

  if (*(_DWORD *)(result + 24) != 1 || *(_BYTE *)(result + 14)) {
    goto LABEL_3;
  }
  return result;
}

void sub_100B3D768(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 14) != a2)
  {
    *(_BYTE *)(a1 + 14) = a2;
    sub_100B3D704(a1);
    if (*(_BYTE *)(a1 + 14))
    {
      if (*(_BYTE *)(a1 + 12)) {
        *(_BYTE *)(a1 + 15) = 1;
      }
    }
  }

  sub_100B3D7B8((int *)a1);
}

void sub_100B3D7B8(int *a1)
{
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101872CA0);
  }
  id v2 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *((unsigned __int8 *)a1 + 15);
    int v4 = *((unsigned __int8 *)a1 + 13);
    int v5 = *((unsigned __int8 *)a1 + 12);
    int v6 = a1[6];
    int v7 = *((unsigned __int8 *)a1 + 14);
    int v8 = *a1;
    uint64_t v9 = *((void *)a1 + 2);
    *(_DWORD *)buf = 67241728;
    int v33 = v3;
    __int16 v34 = 1026;
    int v35 = v4;
    __int16 v36 = 1026;
    int v37 = v5;
    __int16 v38 = 1026;
    int v39 = v6;
    __int16 v40 = 1026;
    int v41 = v7;
    __int16 v42 = 1026;
    int v43 = v8;
    __int16 v44 = 2050;
    uint64_t v45 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLMM,AllowNetworkUsage,%{public}d,batterySaverMode,%{public}d,thermalVoteToAllow,%{public}d,signalEnv,%{public}d,i sMapsForeground,%{public}d,thermalLevel,%{public}d,currentBatteryLevel,%{public}.2lf",  buf,  0x30u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101872CA0);
    }
    int v10 = *((unsigned __int8 *)a1 + 15);
    int v11 = *((unsigned __int8 *)a1 + 13);
    int v12 = *((unsigned __int8 *)a1 + 12);
    int v13 = a1[6];
    int v14 = *((unsigned __int8 *)a1 + 14);
    int v15 = *a1;
    uint64_t v16 = *((void *)a1 + 2);
    v19[0] = 67241728;
    v19[1] = v10;
    __int16 v20 = 1026;
    int v21 = v11;
    __int16 v22 = 1026;
    int v23 = v12;
    __int16 v24 = 1026;
    int v25 = v13;
    __int16 v26 = 1026;
    int v27 = v14;
    __int16 v28 = 1026;
    int v29 = v15;
    __int16 v30 = 2050;
    uint64_t v31 = v16;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,AllowNetworkUsage,%{public}d,batterySaverMode,%{public}d,thermalVoteToAllow,%{public}d,signalEnv,%{public}d,i sMapsForeground,%{public}d,thermalLevel,%{public}d,currentBatteryLevel,%{public}.2lf",  v19,  48);
    uint64_t v18 = (uint8_t *)v17;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMapMatcherNetworkUsage::log() const", "%s\n", v17);
    if (v18 != buf) {
      free(v18);
    }
  }

void sub_100B3DA08(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 <= v3 && v3 < a2)
  {
    char v7 = 0;
    *(_BYTE *)(a1 + 15) = 0;
  }

  else
  {
    int v5 = *(_DWORD *)(a1 + 8);
    if (*(_DWORD *)a1 <= v5 || v5 < a2) {
      goto LABEL_12;
    }
    char v7 = 1;
  }

  *(_BYTE *)(a1 + 12) = v7;
LABEL_12:
  *(_DWORD *)a1 = a2;
  sub_100B3D704(a1);
  if (*(_BYTE *)(a1 + 12) && *(_BYTE *)(a1 + 14)) {
    *(_BYTE *)(a1 + 15) = 1;
  }
  sub_100B3D7B8((int *)a1);
}

void sub_100B3DA80(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 13) = a2;
  sub_100B3D704(a1);
  sub_100B3D7B8((int *)a1);
}

void sub_100B3DAA8(int *a1, int a2)
{
  a1[6] = a2;
  sub_100B3D704((uint64_t)a1);
  sub_100B3D7B8(a1);
}

void sub_100B3DAD0(uint64_t a1, double a2)
{
  if (a2 >= 0.0 && a2 <= 100.0)
  {
    *(double *)(a1 + 16) = a2;
    sub_100B3D704(a1);
    sub_100B3D7B8((int *)a1);
  }

void sub_100B3DB10(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_100B3DB3C(uint64_t a1)
{
  *(_WORD *)a1 = 1542;
  *(void *)(a1 + 4) = 0LL;
  *(void *)(a1 + 20) = 0LL;
  *(void *)(a1 + 12) = 0LL;
  *(_OWORD *)(a1 + 28) = xmmword_10134B0C0;
  uint64_t v2 = a1 + 56;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 0;
  unsigned int v4 = 0;
  int v5 = &v4;
  *((_DWORD *)sub_1000EDB74(a1 + 56, &v4, (uint64_t)&unk_1012CF090, &v5) + 5) = 0;
  unsigned int v4 = 1;
  int v5 = &v4;
  *((_DWORD *)sub_1000EDB74(v2, &v4, (uint64_t)&unk_1012CF090, &v5) + 5) = 0;
  unsigned int v4 = 2;
  int v5 = &v4;
  *((_DWORD *)sub_1000EDB74(v2, &v4, (uint64_t)&unk_1012CF090, &v5) + 5) = 0;
  unsigned int v4 = 3;
  int v5 = &v4;
  *((_DWORD *)sub_1000EDB74(v2, &v4, (uint64_t)&unk_1012CF090, &v5) + 5) = 0;
  unsigned int v4 = 4;
  int v5 = &v4;
  *((_DWORD *)sub_1000EDB74(v2, &v4, (uint64_t)&unk_1012CF090, &v5) + 5) = 0;
  unsigned int v4 = 5;
  int v5 = &v4;
  *((_DWORD *)sub_1000EDB74(v2, &v4, (uint64_t)&unk_1012CF090, &v5) + 5) = 0;
  unsigned int v4 = 6;
  int v5 = &v4;
  *((_DWORD *)sub_1000EDB74(v2, &v4, (uint64_t)&unk_1012CF090, &v5) + 5) = 0;
  return a1;
}

void sub_100B3DCEC(_Unwind_Exception *a1)
{
}

uint64_t sub_100B3DD18(uint64_t a1)
{
  *(void *)a1 = off_101872CD0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0xBFF0000000000000LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + sub_10000AE14(v2 - 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0xBFF0000000000000LL;
  *(void *)(a1 + 88) = 0x600000000LL;
  *(void *)(a1 + 96) = 0xCF0000004F000000LL;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = -1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0x8000000080000000LL;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 6;
  *(_DWORD *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  sub_100B3DB3C(a1 + 392);
  return a1;
}

void sub_100B3DDD0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100B3DDF0(uint64_t a1)
{
  *(void *)a1 = off_101872CD0;
  uint64_t v2 = sub_1006E27E8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _OWORD v4[2] = sub_100B3E7D0;
  v4[3] = &unk_10181D3D0;
  v4[4] = a1;
  sub_1006E28B8(v2, (uint64_t)v4);
  sub_100019CEC(a1 + 448);
  return a1;
}

void sub_100B3DE7C(uint64_t a1)
{
  uint64_t v2 = sub_1006E27E8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _OWORD v3[2] = sub_100B3E7D0;
  v3[3] = &unk_10181D3D0;
  v3[4] = a1;
  sub_1006E28B8(v2, (uint64_t)v3);
}

void sub_100B3DEE0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B3DDF0(a1);
  operator delete(v1);
}

void sub_100B3DEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100B3DF58;
  v5[3] = &unk_101830538;
  v5[4] = a1;
  void v5[5] = a2;
  sub_1006E28B8(v4, (uint64_t)v5);
}

uint64_t sub_100B3DF58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  memset(buf, 0, sizeof(buf));
  __int128 v3 = 0uLL;
  *(void *)(v2 + 40) = 0LL;
  *(void *)(v2 + 48) = 0xBFF0000000000000LL;
  uint64_t v4 = (void **)(v2 + 56);
  if (*(char *)(v2 + 79) < 0)
  {
    operator delete(*v4);
    __int128 v3 = 0uLL;
  }

  *uint64_t v4 = 0LL;
  *(void *)(v2 + sub_10000AE14(v2 - 64) = 0LL;
  *(void *)(v2 + 72) = 0LL;
  *(void *)(v2 + 80) = 0xBFF0000000000000LL;
  *(void *)(v2 + 88) = 0x600000000LL;
  *(void *)(v2 + 96) = 0xCF0000004F000000LL;
  *(void *)(v2 + 104) = 0xFFFFFFFF00000000LL;
  *(_OWORD *)(v2 + 112) = v3;
  *(_OWORD *)(v2 + 128) = v3;
  *(_OWORD *)(v2 + 144) = v3;
  *(_OWORD *)(v2 + 160) = v3;
  *(void *)(v2 + 176) = 0LL;
  *(void *)(v2 + 184) = 0x8000000080000000LL;
  *(_OWORD *)(v2 + 192) = v3;
  *(_OWORD *)(v2 + 208) = v3;
  *(_BYTE *)(v2 + 224) = 6;
  __int128 v5 = *(_OWORD *)buf;
  __int128 v6 = *(_OWORD *)&buf[16];
  *(_OWORD *)(v2 + 257) = *(_OWORD *)&buf[32];
  *(_OWORD *)(v2 + 241) = v6;
  *(_OWORD *)(v2 + 225) = v5;
  *(_DWORD *)(v2 + 273) = 0;
  *(_DWORD *)(v2 + 276) = 0;
  *(_DWORD *)(v2 + 324) = 6;
  sub_100B3DB3C((uint64_t)buf);
  *(void *)(v2 + 440) = v25;
  __int128 v7 = *(_OWORD *)&buf[16];
  *(_OWORD *)(v2 + 392) = *(_OWORD *)buf;
  *(_OWORD *)(v2 + 408) = v7;
  *(_OWORD *)(v2 + 424) = *(_OWORD *)&buf[32];
  sub_10001CDA0(v2 + 448, v26);
  *(_DWORD *)(v2 + 488) = v27;
  sub_100019CEC((uint64_t)v26);
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_101872CF0);
  }
  int v8 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(uint64_t ***)(a1 + 40);
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "starting metric session (CompassSession) for %s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101872CF0);
    }
    float v19 = *(uint64_t **)(a1 + 40);
    int v22 = 136315138;
    int v23 = v19;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "starting metric session (CompassSession) for %s",  (const char *)&v22);
    int v21 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompassSessionStatsCollector::start(const std::string &)_block_invoke",  "%s\n",  v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  *(_BYTE *)(v2 + 40) = 1;
  *(CFAbsoluteTime *)(v2 + 48) = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)(v2 + 56), *(const std::string **)(a1 + 40));
  sub_1007492FC();
  *(_DWORD *)(v2 + 276) = sub_10074AE5C();
  if (!*(void *)(v2 + 8))
  {
    int v10 = operator new(0x20uLL);
    *int v10 = off_1018A2210;
    *int v10 = &off_10183E9D0;
    v10[1] = 0LL;
    _DWORD v10[2] = sub_100B3E400;
    v10[3] = v2;
    *(void *)(v2 + 8) = v10;
    uint64_t v11 = sub_1007C3B70();
    sub_1006DCB40(v11, 0, *(void *)(v2 + 8), 0.025);
  }

  if (!*(void *)(v2 + 16))
  {
    int v12 = operator new(0x20uLL);
    *int v12 = off_1018A2210;
    *int v12 = &off_1018688F8;
    v12[1] = 0LL;
    v12[2] = sub_100B3E444;
    v12[3] = v2;
    *(void *)(v2 + 16) = v12;
    uint64_t v13 = sub_1007492FC();
    sub_1006DCB40(v13, 0, *(void *)(v2 + 16), 0.025);
  }

  uint64_t result = sub_1004F97F4();
  if ((result & 0x10) != 0)
  {
    if (!*(void *)(v2 + 24))
    {
      int v15 = operator new(0x20uLL);
      *int v15 = off_1018A2210;
      *int v15 = &off_101872D20;
      v15[1] = 0LL;
      void v15[2] = sub_100B3E5D8;
      void v15[3] = v2;
      *(void *)(v2 + 24) = v15;
      uint64_t v16 = sub_100358938(0);
      uint64_t result = sub_1006DCB40(v16, 6, *(void *)(v2 + 24), -1.0);
    }

    if (!*(void *)(v2 + 32))
    {
      float v17 = operator new(0x20uLL);
      void *v17 = off_1018A2210;
      void *v17 = &off_101872D70;
      v17[1] = 0LL;
      v17[2] = sub_100B3E6B0;
      v17[3] = v2;
      *(void *)(v2 + 32) = v17;
      uint64_t v18 = sub_1008FA854(0);
      return sub_1006DCB40(v18, 0, *(void *)(v2 + 32), -1.0);
    }
  }

  return result;
}

void sub_100B3E3D8(_Unwind_Exception *a1)
{
}

float *sub_100B3E400(float *result, uint64_t a2)
{
  float v2 = (float)(int)sqrtf( (float)((float)(result[3] * result[3]) + (float)(result[2] * result[2]))
                   + (float)(result[4] * result[4]));
  return result;
}

__n128 sub_100B3E444(__int128 *a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 40))
  {
    int v2 = *(_DWORD *)(a2 + 324);
    if (v2 == 6)
    {
      *(_DWORD *)(a2 + 2sub_10000AE14(v2 - 64) = *((_DWORD *)a1 + 10);
      int v3 = *((_DWORD *)a1 + 11);
      *(_DWORD *)(a2 + 92) = v3;
      float v4 = *((float *)a1 + 24);
      if (v4 > -1.0)
      {
        *(_BYTE *)(a2 + 393) = v3;
        if (v3 - 4 >= 2)
        {
          if (v3 == 2)
          {
            ++*(_DWORD *)(a2 + 404);
            *(float *)(a2 + 412) = v4 + *(float *)(a2 + 412);
            *(float *)(a2 + 420) = v4;
            *(float *)(a2 + 428) = v4;
          }
        }

        else
        {
          ++*(_DWORD *)(a2 + 408);
          *(float *)(a2 + 416) = v4 + *(float *)(a2 + 416);
          *(float *)(a2 + 424) = v4;
          *(float *)(a2 + 432) = v4;
        }

        *(_BYTE *)(a2 + 392) = v3;
      }
    }

    else
    {
      float v4 = *((float *)a1 + 24);
    }

    if (v4 <= -1.0)
    {
      int v5 = *((_DWORD *)a1 + 11);
    }

    else
    {
      ++*(_DWORD *)(a2 + 444);
      int v5 = *((_DWORD *)a1 + 11);
      if ((_BYTE)v5)
      {
      }

      else
      {
        ++*(_DWORD *)(a2 + 440);
      }
    }

    *(_BYTE *)(a2 + 272) |= *((_BYTE *)a1 + 104);
    if (*(_DWORD *)(a2 + 92) < v5) {
      *(_DWORD *)(a2 + 92) = v5;
    }
    if (v5 <= 0)
    {
      int v6 = *(_DWORD *)(a2 + 88);
      if (v2 > 0 || !v6) {
        *(_DWORD *)(a2 + 88) = v6 + 1;
      }
    }

    signed int v7 = llround((float)(*((float *)a1 + 25) * 180.0) / 3.14159265);
    if (*(_DWORD *)(a2 + 188) > v7) {
      signed int v7 = *(_DWORD *)(a2 + 188);
    }
    *(_DWORD *)(a2 + 188) = v7;
    *(_DWORD *)(a2 + 268) = *((_DWORD *)a1 + 10);
  }

  __int128 v8 = *a1;
  __int128 v9 = a1[2];
  *(_OWORD *)(a2 + 296) = a1[1];
  *(_OWORD *)(a2 + 312) = v9;
  *(_OWORD *)(a2 + 280) = v8;
  __n128 result = (__n128)a1[3];
  __int128 v11 = a1[4];
  __int128 v12 = a1[6];
  *(_OWORD *)(a2 + 360) = a1[5];
  *(_OWORD *)(a2 + 376) = v12;
  *(__n128 *)(a2 + 328) = result;
  *(_OWORD *)(a2 + 344) = v11;
  return result;
}

uint64_t sub_100B3E5D8(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 1);
  float v3 = *(float *)(result + 53);
  int v4 = *(unsigned __int8 *)(a2 + 392);
  if (v2 != v4)
  {
    if (v2 == 2 && v4 == 4)
    {
      ++*(_DWORD *)(a2 + 396);
      goto LABEL_20;
    }

    if (v2 == 5 && v4 == 2)
    {
      ++*(_DWORD *)(a2 + 400);
LABEL_15:
      ++*(_DWORD *)(a2 + 408);
      *(float *)(a2 + 416) = v3 + *(float *)(a2 + 416);
      goto LABEL_24;
    }
  }

  if (v2 != 2)
  {
    if ((v2 & 0xFE) != 4) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }

void *sub_100B3E6B0(uint64_t a1, uint64_t a2)
{
  v3.n128_f64[0] = sub_100672E64(a1, (uint64_t)v11);
  uint64_t v4 = v11[0];
  ++*(_DWORD *)(a2 + 488);
  if (CLMotionActivity::isTypeInVehicle(v4, v3))
  {
    uint64_t v5 = a2 + 448;
    if (v11[1] == 2) {
      unsigned int v6 = 6;
    }
    else {
      unsigned int v6 = 3;
    }
    goto LABEL_18;
  }

  int isTypePedestrian = CLMotionActivity::isTypePedestrian(v4);
  if ((_DWORD)v4 == 100 || isTypePedestrian != 0)
  {
    uint64_t v5 = a2 + 448;
    unsigned int v6 = 2;
LABEL_18:
    unsigned int v10 = v6;
    goto LABEL_19;
  }

  if (CLMotionActivity::isTypeStatic(v4))
  {
    uint64_t v5 = a2 + 448;
    unsigned int v6 = 1;
    goto LABEL_18;
  }

  if (!CLMotionActivity::isTypeUnclassifiedMoving(v4))
  {
    if (CLMotionActivity::isTypeCycling(v4))
    {
      uint64_t v5 = a2 + 448;
      unsigned int v6 = 4;
    }

    else
    {
      __n128 result = (void *)CLMotionActivity::isTypeIndoorActivity(v4);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v5 = a2 + 448;
      unsigned int v6 = 5;
    }

    goto LABEL_18;
  }

  uint64_t v5 = a2 + 448;
  unsigned int v10 = 0;
LABEL_19:
  __int128 v12 = &v10;
  __n128 result = sub_1000EDB74(v5, &v10, (uint64_t)&unk_1012CF090, &v12);
  ++*((_DWORD *)result + 5);
  return result;
}

int *sub_100B3E7D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 8))
  {
    uint64_t v2 = sub_1007C3B70();
    sub_1006DD2A0(v2, 0, *(void *)(v1 + 8));
    uint64_t v3 = *(void *)(v1 + 8);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    *(void *)(v1 + 8) = 0LL;
  }

  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = sub_1007492FC();
    sub_1006DD2A0(v4, 0, *(void *)(v1 + 16));
    uint64_t v5 = *(void *)(v1 + 16);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    *(void *)(v1 + 16) = 0LL;
  }

  if (*(void *)(v1 + 24))
  {
    uint64_t v6 = sub_100358938(0);
    sub_1006DD2A0(v6, 6, *(void *)(v1 + 24));
    uint64_t v7 = *(void *)(v1 + 24);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    *(void *)(v1 + 24) = 0LL;
  }

  if (*(void *)(v1 + 32))
  {
    uint64_t v8 = sub_1008FA854(0);
    sub_1006DD2A0(v8, 0, *(void *)(v1 + 32));
    uint64_t v9 = *(void *)(v1 + 32);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    *(void *)(v1 + 32) = 0LL;
  }

  if ((sub_1004F97F4() & 0x10) != 0) {
    sub_100B3EA94(v1);
  }
  if (*(_BYTE *)(v1 + 40) && *(double *)(v1 + 80) < 0.0)
  {
    *(CFAbsoluteTime *)(v1 + 80) = CFAbsoluteTimeGetCurrent();
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101872CF0);
    }
    unsigned int v10 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      __int128 v11 = (void *)(v1 + 56);
      *(_DWORD *)buf = 136315138;
      float v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "ending metric session (CompassSession) for %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_101872CF0);
      }
      uint64_t v13 = (void *)(v1 + 56);
      int v16 = 136315138;
      float v17 = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "ending metric session (CompassSession) for %s",  (const char *)&v16);
      int v15 = (uint8_t *)v14;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLCompassSessionStatsCollector::stop()_block_invoke", "%s\n", v14);
      if (v15 != buf) {
        free(v15);
      }
    }
  }

  return sub_100B3EB48((_DWORD *)v1);
}

uint64_t sub_100B3EA94(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 428);
  *(_DWORD *)(result + 192) = *(_DWORD *)(result + 420);
  *(_DWORD *)(result + 196) = v1;
  int v2 = *(_DWORD *)(result + 404);
  if (v2 >= 1) {
    *(float *)(result + 200) = *(float *)(result + 412) / (float)v2;
  }
  int v3 = *(_DWORD *)(result + 432);
  *(_DWORD *)(result + 204) = *(_DWORD *)(result + 424);
  *(_DWORD *)(result + 208) = v3;
  int v4 = *(_DWORD *)(result + 408);
  if (v4 >= 1) {
    *(float *)(result + 212) = *(float *)(result + 416) / (float)v4;
  }
  int32x2_t v5 = vadd_s32(*(int32x2_t *)(result + 216), vrev64_s32(*(int32x2_t *)(result + 396)));
  *(int32x2_t *)(result + 216) = v5;
  *(_BYTE *)(result + 224) = *(_BYTE *)(result + 393);
  int v6 = *(_DWORD *)(result + 444);
  if (v6 < 1)
  {
    uint32x2_t v7 = 0LL;
  }

  else
  {
    *(float *)v5.i32 = (float)v6;
    uint32x2_t v7 = vcvt_u32_f32( vrnda_f32( vmul_f32( vdiv_f32(vcvt_f32_s32(*(int32x2_t *)(result + 436)), (float32x2_t)vdup_lane_s32(v5, 0)),  (float32x2_t)vdup_n_s32(0x42C80000u))));
  }

  *(uint32x2_t *)(result + 256) = v7;
  return result;
}

int *sub_100B3EB48(_DWORD *a1)
{
  int v2 = a1[122];
  uint64_t v3 = (uint64_t)(a1 + 112);
  unsigned int v19 = 0;
  __int16 v20 = &v19;
  int v4 = (int *)sub_1000EDB74((uint64_t)(a1 + 112), &v19, (uint64_t)&unk_1012CF090, &v20);
  float v5 = (float)v2;
  if (v2 < 1) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = vcvtas_u32_f32((float)((float)v4[5] / v5) * 100.0);
  }
  a1[57] = v6;
  unsigned int v19 = 1;
  __int16 v20 = &v19;
  uint32x2_t v7 = (int *)sub_1000EDB74(v3, &v19, (uint64_t)&unk_1012CF090, &v20);
  if (v2 < 1) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = vcvtas_u32_f32((float)((float)v7[5] / v5) * 100.0);
  }
  a1[58] = v8;
  unsigned int v19 = 2;
  __int16 v20 = &v19;
  uint64_t v9 = (int *)sub_1000EDB74(v3, &v19, (uint64_t)&unk_1012CF090, &v20);
  if (v2 < 1) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = vcvtas_u32_f32((float)((float)v9[5] / v5) * 100.0);
  }
  a1[59] = v10;
  unsigned int v19 = 3;
  __int16 v20 = &v19;
  __int128 v11 = (int *)sub_1000EDB74(v3, &v19, (uint64_t)&unk_1012CF090, &v20);
  if (v2 < 1) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = vcvtas_u32_f32((float)((float)v11[5] / v5) * 100.0);
  }
  a1[60] = v12;
  unsigned int v19 = 4;
  __int16 v20 = &v19;
  uint64_t v13 = (int *)sub_1000EDB74(v3, &v19, (uint64_t)&unk_1012CF090, &v20);
  if (v2 < 1) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = vcvtas_u32_f32((float)((float)v13[5] / v5) * 100.0);
  }
  a1[61] = v14;
  unsigned int v19 = 5;
  __int16 v20 = &v19;
  int v15 = (int *)sub_1000EDB74(v3, &v19, (uint64_t)&unk_1012CF090, &v20);
  if (v2 < 1) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = vcvtas_u32_f32((float)((float)v15[5] / v5) * 100.0);
  }
  a1[62] = v16;
  unsigned int v19 = 6;
  __int16 v20 = &v19;
  __n128 result = (int *)sub_1000EDB74(v3, &v19, (uint64_t)&unk_1012CF090, &v20);
  if (v2 < 1) {
    unsigned int v18 = 0;
  }
  else {
    unsigned int v18 = vcvtas_u32_f32((float)((float)result[5] / v5) * 100.0);
  }
  a1[63] = v18;
  return result;
}

void sub_100B3EDFC(uint64_t a1)
{
  uint64_t v2 = sub_1006E27E8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _OWORD v3[2] = sub_100B3EE5C;
  v3[3] = &unk_10181D3D0;
  v3[4] = a1;
  sub_1006E28B8(v2, (uint64_t)v3);
}

uint64_t sub_100B3EE5C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 40))
  {
    memset(v7, 0, sizeof(v7));
    __int128 v2 = 0uLL;
    *(void *)(v1 + 40) = 0LL;
    *(void *)(v1 + 48) = 0xBFF0000000000000LL;
    uint64_t v3 = (void **)(v1 + 56);
    if (*(char *)(v1 + 79) < 0)
    {
      operator delete(*v3);
      __int128 v2 = 0uLL;
    }

    void *v3 = 0LL;
    *(void *)(v1 + sub_10000AE14(v2 - 64) = 0LL;
    *(void *)(v1 + 72) = 0LL;
    *(void *)(v1 + 80) = 0xBFF0000000000000LL;
    *(void *)(v1 + 88) = 0x600000000LL;
    *(void *)(v1 + 96) = 0xCF0000004F000000LL;
    *(void *)(v1 + 104) = 0xFFFFFFFF00000000LL;
    *(_OWORD *)(v1 + 112) = v2;
    *(_OWORD *)(v1 + 128) = v2;
    *(_OWORD *)(v1 + 144) = v2;
    *(_OWORD *)(v1 + 160) = v2;
    *(void *)(v1 + 176) = 0LL;
    *(void *)(v1 + 184) = 0x8000000080000000LL;
    *(_OWORD *)(v1 + 192) = v2;
    *(_OWORD *)(v1 + 208) = v2;
    *(_BYTE *)(v1 + 224) = 6;
    __int128 v4 = v7[0];
    __int128 v5 = v7[1];
    *(_OWORD *)(v1 + 257) = v7[2];
    *(_OWORD *)(v1 + 241) = v5;
    *(_OWORD *)(v1 + 225) = v4;
    *(_DWORD *)(v1 + 273) = 0;
    *(_DWORD *)(v1 + 276) = 0;
    sub_100B3DB3C((uint64_t)v7);
    *(void *)(v1 + 440) = v8;
    __int128 v6 = v7[1];
    *(_OWORD *)(v1 + 392) = v7[0];
    *(_OWORD *)(v1 + 408) = v6;
    *(_OWORD *)(v1 + 424) = v7[2];
    sub_10001CDA0(v1 + 448, v9);
    *(_DWORD *)(v1 + 488) = v10;
    return sub_100019CEC((uint64_t)v9);
  }

  return result;
}

void sub_100B3EFAC(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100B3F07C(id a1)
{
  qword_10199AA28 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLMobilityWalkingBoutServiceSilo");
}

void sub_100B3F1C4(id a1)
{
}

void sub_100B3FFC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17)
{
  for (uint64_t i = 16LL; i != -16; i -= 16LL)
    sub_10000AE14((uint64_t)&a17 + i);
  _Unwind_Resume(a1);
}

void sub_100B4007C(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x298uLL);
  uint64_t v9 = v8;
  int v10 = (std::__shared_weak_count *)a1[1];
  if (*a1) {
    uint64_t v11 = *a1 + 344LL;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v35 = v11;
  __int16 v36 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }

  unsigned int v14 = (std::__shared_weak_count *)a2[1];
  if (*a2) {
    uint64_t v15 = *a2 + 400LL;
  }
  else {
    uint64_t v15 = 0LL;
  }
  uint64_t v33 = v15;
  __int16 v34 = v14;
  if (v14)
  {
    unsigned int v16 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  unsigned int v18 = (std::__shared_weak_count *)a3[1];
  if (*a3) {
    uint64_t v19 = *a3 + 480LL;
  }
  else {
    uint64_t v19 = 0LL;
  }
  uint64_t v31 = v19;
  float v32 = v18;
  if (v18)
  {
    __int16 v20 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  sub_100912B20((uint64_t)v8, &v35, &v33, &v31);
  *a4 = v9;
  int v22 = v32;
  if (v32)
  {
    int v23 = (unint64_t *)&v32->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = v34;
  if (v34)
  {
    __int16 v26 = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  __int16 v28 = v36;
  if (v36)
  {
    int v29 = (unint64_t *)&v36->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

void sub_100B4020C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void sub_100B40238(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  __int128 v6 = operator new(0x20uLL);
  uint32x2_t v7 = v6;
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (*a1) {
    uint64_t v9 = *a1 + 352LL;
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t v24 = v9;
  uint64_t v25 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  unsigned int v12 = (std::__shared_weak_count *)a2[1];
  if (*a2) {
    uint64_t v13 = *a2 + 400LL;
  }
  else {
    uint64_t v13 = 0LL;
  }
  uint64_t v22 = v13;
  int v23 = v12;
  if (v12)
  {
    unsigned int v14 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  sub_100AF91EC(v6, &v24, &v22);
  *a3 = v7;
  unsigned int v16 = v23;
  if (v23)
  {
    unint64_t v17 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = v25;
  if (v25)
  {
    __int16 v20 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

void sub_100B40354( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B40378(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  __int128 v6 = operator new(0x30uLL);
  uint32x2_t v7 = v6;
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (*a1) {
    uint64_t v9 = *a1 + 528LL;
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t v29 = v9;
  unint64_t v30 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  unsigned int v12 = (std::__shared_weak_count *)a2[1];
  if (*a2) {
    uint64_t v13 = *a2 + 400LL;
  }
  else {
    uint64_t v13 = 0LL;
  }
  uint64_t v27 = v13;
  __int16 v28 = v12;
  if (v12)
  {
    unsigned int v14 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  uint64_t v25 = 0LL;
  __int16 v26 = 0LL;
  sub_101020500(v6, &v29, &v27, &v25);
  *a3 = v7;
  unsigned int v16 = v26;
  if (v26)
  {
    unint64_t v17 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = v28;
  if (v28)
  {
    __int16 v20 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = v30;
  if (v30)
  {
    int v23 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

void sub_100B404D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

id sub_100B40500(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onUserInfoUpdate:a2 data:a3];
}

id sub_100B40510(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStatusNotification:a2 data:a3];
}

id sub_100B40520(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStepCountNotification:a2 data:a3];
}

id sub_100B40530(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onMotionStateObserverNotification:a2 data:a3];
}

id sub_100B40540(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onMotionStateMediatorNotification:a2 data:a3];
}

id sub_100B40550(uint64_t a1, void *a2)
{
  return _[a2 onSPUGaitMetrics:a1];
}

id sub_100B4055C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onCompanionNotification:a2 data:a3];
}

void sub_100B41660(uint64_t a1, int a2)
{
  if (a2 == 109)
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    uint64_t v3 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      unint64_t v17 = "com.apple.locationd.Mobility.ProcessBouts";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "BoutService: Data sources unavailable, did not process bouts (%s)",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101872F18);
      }
      int v12 = 136315138;
      uint64_t v13 = "com.apple.locationd.Mobility.ProcessBouts";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  1LL,  "BoutService: Data sources unavailable, did not process bouts (%s)",  (const char *)&v12);
      uint32x2_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService onMobilityProcessBoutsActivity:]_block_invoke",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  if (xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32)) != 3
    && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL))
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    __int128 v4 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      unint64_t v17 = "com.apple.locationd.Mobility.ProcessBouts";
      __int16 v18 = 2050;
      xpc_activity_state_t v19 = state;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Failed to mark (%s) activity as done. Current state is %{public}ld",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101872F18);
      }
      uint64_t v8 = qword_1019346B8;
      xpc_activity_state_t v9 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      int v12 = 136315394;
      uint64_t v13 = "com.apple.locationd.Mobility.ProcessBouts";
      __int16 v14 = 2050;
      xpc_activity_state_t v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  17LL,  "Failed to mark (%s) activity as done. Current state is %{public}ld",  &v12,  22);
      unint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMobilityWalkingBoutService onMobilityProcessBoutsActivity:]_block_invoke",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

void sub_100B41CD0(uint64_t a1, int a2, uint64_t a3)
{
  xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
  BOOL v7 = state == 4 || state == 2;
  if (v7 && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL))
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_101872F38);
    }
    uint64_t v8 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v9 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      xpc_activity_state_t v19 = "com.apple.locationd.Mobility.Classification";
      __int16 v20 = 2050;
      xpc_activity_state_t v21 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Failed to mark activity (%s) as done. Current state is %{public}ld",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      uint64_t v10 = qword_101934488;
      xpc_activity_state_t v11 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      int v14 = 136315394;
      xpc_activity_state_t v15 = "com.apple.locationd.Mobility.Classification";
      __int16 v16 = 2050;
      xpc_activity_state_t v17 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  17LL,  "Failed to mark activity (%s) as done. Current state is %{public}ld",  &v14,  22);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMobilityWalkingBoutService onMobilityClassificationActivity:]_block_invoke",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

  if (a2) {
    [*(id *)(a1 + 40) setUpClassificationActivityWithDeferral:a3];
  }
}

id sub_100B41F64(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _OWORD v3[2] = sub_100B41FC0;
  v3[3] = &unk_101872E20;
  uint64_t v1 = *(void **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  return [v1 checkForBoutsReadyToProcessWithCompletion:v3 activity:0];
}

uint64_t sub_100B41FC0(uint64_t a1, int a2)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101872F18);
  }
  __int128 v4 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutService: Mobility data requested", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    LOWORD(v12) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutService: Mobility data requested",  &v12,  2);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService onDataCollectionRequested:]_block_invoke",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  if (a2 != 100)
  {
    if (a2 == 109)
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101872F18);
      }
      __int128 v5 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "BoutService: Data sources unavailable, did not process bouts onDataCollectionRequested",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101872F18);
        }
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutService: Data sources unavailable, did not process bouts onDataCollectionRequested");
LABEL_29:
        xpc_activity_state_t v11 = (uint8_t *)v6;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService onDataCollectionRequested:]_block_invoke",  "%s\n",  v6);
        if (v11 != buf) {
          free(v11);
        }
      }
    }

    else
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101872F18);
      }
      BOOL v7 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        int v14 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "BoutService: Data requested, but unable to query outstanding bouts. CMError: %d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101872F18);
        }
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  1LL,  "BoutService: Data requested, but unable to query outstanding bouts. CMError: %d",  &v12);
        goto LABEL_29;
      }
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100B423F0(uint64_t a1, int a2)
{
  if (a2 != 100)
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    __int128 v4 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      int v13 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "BoutService: Unable to process BoutMetrics pre-aggregation, CMError: %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101872F18);
      }
      v11[0] = 67109120;
      v11[1] = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutService: Unable to process BoutMetrics pre-aggregation, CMError: %d",  v11);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService onAggregationTimer]_block_invoke",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101872F18);
  }
  __int128 v5 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CLMobilityWalkingBoutService: Aggregating WalkingBout, GaitMetrics, BoutMetrics records",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  0LL,  "CLMobilityWalkingBoutService: Aggregating WalkingBout, GaitMetrics, BoutMetrics records",  v11,  2);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLMobilityWalkingBoutService onAggregationTimer]_block_invoke", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  sub_100B4271C(*(void *)(*(void *)(a1 + 32) + 72LL));
  sub_100B42C90(*(void *)(*(void *)(a1 + 32) + 96LL));
  sub_100B43204(*(void *)(*(void *)(a1 + 32) + 120LL));
  return sub_100B43778(*(void *)(*(void *)(a1 + 32) + 176LL));
}

uint64_t sub_100B4271C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40)) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101873108);
  }
  __int128 v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v3 = sub_101171D38();
    int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)buf = 134218240;
    *(double *)__int16 v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    int v37 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Aggregating records start %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v16 = qword_101934A78;
    double v17 = sub_101171D38();
    int v18 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)uint64_t v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "Aggregating records start %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    __int16 v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::BoutBoundary>::aggregateRecords() [T = CLMobility::BoutBoundary, DataProtect ionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101873108);
  }
  __int128 v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v7 = sub_101171D38();
    int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)buf = 134218240;
    *(double *)__int16 v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    int v37 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Aggregating records stop %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v21 = qword_101934A78;
    double v22 = sub_101171D38();
    int v23 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)uint64_t v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  2LL,  "Aggregating records stop %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    uint64_t v25 = (uint8_t *)v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::BoutBoundary>::aggregateRecords() [T = CLMobility::BoutBoundary, DataProtect ionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  uint64_t v9 = *(void *)(a1 + 24);
  double v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_100B4E988(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    xpc_activity_state_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      int v13 = *(_DWORD *)(v12 + 132);
      int v14 = sub_100B4E988(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)__int16 v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101873108);
      }
      uint64_t v26 = qword_101934A78;
      uint64_t v27 = *(void *)(a1 + 24);
      int v28 = *(_DWORD *)(v27 + 132);
      int v29 = sub_100B4E988(v27, (double **)a1);
      int v32 = 67109376;
      *(_DWORD *)uint64_t v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v26,  0LL,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  &v32,  14);
      uint64_t v31 = (uint8_t *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::BoutBoundary>::aggregateRecords() [T = CLMobility::BoutBoundary, DataProte ctionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v30);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  return v5;
}

uint64_t sub_100B42C90(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40)) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101873108);
  }
  __int128 v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v3 = sub_101171D38();
    int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)buf = 134218240;
    *(double *)__int16 v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    int v37 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Aggregating records start %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v16 = qword_101934A78;
    double v17 = sub_101171D38();
    int v18 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)uint64_t v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "Aggregating records start %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    __int16 v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [ T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101873108);
  }
  __int128 v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v7 = sub_101171D38();
    int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)buf = 134218240;
    *(double *)__int16 v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    int v37 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Aggregating records stop %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v21 = qword_101934A78;
    double v22 = sub_101171D38();
    int v23 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)uint64_t v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  2LL,  "Aggregating records stop %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    uint64_t v25 = (uint8_t *)v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [ T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  uint64_t v9 = *(void *)(a1 + 24);
  double v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_100B4EBB0(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    xpc_activity_state_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      int v13 = *(_DWORD *)(v12 + 132);
      int v14 = sub_100B4EBB0(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)__int16 v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101873108);
      }
      uint64_t v26 = qword_101934A78;
      uint64_t v27 = *(void *)(a1 + 24);
      int v28 = *(_DWORD *)(v27 + 132);
      int v29 = sub_100B4EBB0(v27, (double **)a1);
      int v32 = 67109376;
      *(_DWORD *)uint64_t v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v26,  0LL,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  &v32,  14);
      uint64_t v31 = (uint8_t *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v30);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  return v5;
}

uint64_t sub_100B43204(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40)) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101873108);
  }
  __int128 v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v3 = sub_101171D38();
    int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)buf = 134218240;
    *(double *)__int16 v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    int v37 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Aggregating records start %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v16 = qword_101934A78;
    double v17 = sub_101171D38();
    int v18 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)uint64_t v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "Aggregating records start %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    __int16 v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [ T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101873108);
  }
  __int128 v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v7 = sub_101171D38();
    int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)buf = 134218240;
    *(double *)__int16 v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    int v37 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Aggregating records stop %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v21 = qword_101934A78;
    double v22 = sub_101171D38();
    int v23 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)uint64_t v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  2LL,  "Aggregating records stop %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    uint64_t v25 = (uint8_t *)v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [ T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  uint64_t v9 = *(void *)(a1 + 24);
  double v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_100B4EDAC(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    xpc_activity_state_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      int v13 = *(_DWORD *)(v12 + 132);
      int v14 = sub_100B4EDAC(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)__int16 v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101873108);
      }
      uint64_t v26 = qword_101934A78;
      uint64_t v27 = *(void *)(a1 + 24);
      int v28 = *(_DWORD *)(v27 + 132);
      int v29 = sub_100B4EDAC(v27, (double **)a1);
      int v32 = 67109376;
      *(_DWORD *)uint64_t v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v26,  0LL,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  &v32,  14);
      uint64_t v31 = (uint8_t *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v30);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  return v5;
}

uint64_t sub_100B43778(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40)) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101873108);
  }
  __int128 v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v3 = sub_101171D38();
    int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)buf = 134218240;
    *(double *)__int16 v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    int v37 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Aggregating records start %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v16 = qword_101934A78;
    double v17 = sub_101171D38();
    int v18 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)uint64_t v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "Aggregating records start %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    __int16 v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRec ords() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101873108);
  }
  __int128 v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v7 = sub_101171D38();
    int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)buf = 134218240;
    *(double *)__int16 v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    int v37 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Aggregating records stop %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v21 = qword_101934A78;
    double v22 = sub_101171D38();
    int v23 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)uint64_t v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  2LL,  "Aggregating records stop %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    uint64_t v25 = (uint8_t *)v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRec ords() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  uint64_t v9 = *(void *)(a1 + 24);
  double v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_100B4EFA8(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    xpc_activity_state_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      int v13 = *(_DWORD *)(v12 + 132);
      int v14 = sub_100B4EFA8(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)__int16 v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101873108);
      }
      uint64_t v26 = qword_101934A78;
      uint64_t v27 = *(void *)(a1 + 24);
      int v28 = *(_DWORD *)(v27 + 132);
      int v29 = sub_100B4EFA8(v27, (double **)a1);
      int v32 = 67109376;
      *(_DWORD *)uint64_t v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v26,  0LL,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  &v32,  14);
      uint64_t v31 = (uint8_t *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateR ecords() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v30);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  return v5;
}

id sub_100B4457C(uint64_t a1, uint64_t a2)
{
  return sub_10039FB50(518400.0, a2, 35, *(void **)(a1 + 32), 300LL, 0LL, 1LL, 1LL, 0, 0LL);
}

void sub_100B45144(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768LL;
  _DWORD v10[2] = sub_100B45234;
  v10[3] = &unk_101872E48;
  __int128 v13 = *(_OWORD *)(a1 + 56);
  int v17 = a2;
  uint64_t v12 = *(void *)(a1 + 48);
  __int128 v11 = *(_OWORD *)(a1 + 32);
  xpc_activity_state_t v15 = 0LL;
  uint64_t v16 = 0LL;
  double v7 = *(const void **)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a3) >> 3);
  __int128 __p = 0LL;
  sub_100B4F1A4(&__p, v7, v8, v9);
  [v6 async:v10];
  if (__p)
  {
    xpc_activity_state_t v15 = __p;
    operator delete(__p);
  }

void sub_100B45218( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B45234(uint64_t a1)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101872F18);
  }
  __int128 v2 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 64);
    *(_DWORD *)buf = 134349312;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&buf[14] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "BoutService: HK queried for workouts from (%{public}.2f) to (%{public}.2f)",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    int v20 = 134349312;
    uint64_t v21 = v10;
    __int16 v22 = 2050;
    uint64_t v23 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutService: HK queried for workouts from (%{public}.2f) to (%{public}.2f)",  &v20,  22);
    __int128 v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService checkForBoutsReadyToProcessWithCompletion:activity:]_block_invoke",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  if (*(_DWORD *)(a1 + 96) == 100
    && ![*(id *)(a1 + 32) checkDeferRequestForBoutsActivity:*(void *)(a1 + 40)])
  {
    memset(buf, 0, 24);
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 192LL);
    double v6 = *(double *)(a1 + 56);
    double v7 = *(double *)(a1 + 64);
    int v18 = 0LL;
    uint64_t v19 = 0LL;
    __int128 __p = 0LL;
    sub_100B4F1A4( &__p,  *(const void **)(a1 + 72),  *(void *)(a1 + 80),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    int v8 = sub_100914C10(v5, (uint64_t *)&__p, (void **)buf, v6, v7);
    if (__p)
    {
      int v18 = __p;
      operator delete(__p);
    }

    if (v8 == 100)
    {
      unint64_t v9 = *(void **)(a1 + 32);
      xpc_activity_state_t v15 = 0LL;
      uint64_t v16 = 0LL;
      int v14 = 0LL;
      sub_100B4F21C( &v14,  *(const void **)buf,  *(uint64_t *)&buf[8],  0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4));
      [v9 handleBoutResults:&v14];
      if (v14)
      {
        xpc_activity_state_t v15 = v14;
        operator delete(v14);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_100B45520( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100B45570(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  __int128 v2 = (void *)(a1 + 72);
  v2[2] = 0LL;
  return sub_100B4F1A4( v2,  *(const void **)(a2 + 72),  *(void *)(a2 + 80),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
}

void sub_100B45598(uint64_t a1)
{
  __int128 v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }

void sub_100B45C3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B468A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_100B468F8( uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, double **a6, uint64_t *a7, uint64_t a8)
{
  v275 = 0LL;
  __int128 __p = 0LL;
  v276 = 0LL;
  sub_100021A84( &__p,  *(const void **)a3,  *(void *)(a3 + 8),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v10 = v9 + 8;
  double v12 = *(double *)(v11 + 24);
  uint64_t v146 = a1;
  if (v12 > *(double *)(a1 + 80))
  {
    double v13 = 604800.0;
    goto LABEL_95;
  }

  int v94 = 0;
  unsigned int v89 = 0;
  double v13 = 604800.0;
  double v88 = 0.0;
  double v90 = 0.0;
  while (1)
  {
    *(_OWORD *)v363 = xmmword_10134B1E8;
    *(_OWORD *)&v363[16] = xmmword_10134B1F8;
    v364[0] = xmmword_10134B208;
    *(_OWORD *)((char *)v364 + 12) = *(__int128 *)((char *)&xmmword_10134B208 + 12);
    *(_OWORD *)((char *)v361 + 3) = 0uLL;
    *(_OWORD *)((char *)v362 + 1) = 0uLL;
    __int128 v273 = 0uLL;
    int v272 = 0;
    __int128 v271 = 0u;
    __int128 v270 = 0u;
    __int128 v269 = 0u;
    int v268 = 0;
    __int128 v267 = 0u;
    __int128 v266 = 0u;
    __int128 v265 = 0u;
    int v264 = 0;
    __int128 v263 = 0u;
    __int128 v262 = 0u;
    __int128 v261 = 0u;
    int v260 = 0;
    __int128 v259 = 0u;
    __int128 v258 = 0u;
    __int128 v257 = 0u;
    *(_OWORD *)((char *)v360 + 3) = 0uLL;
    *(void *)((char *)&v360[1] + 3) = 0LL;
    char v251 = 0;
    int v250 = 0;
    if ((a2 & 1) != 0)
    {
      sub_101045370( *(void **)(*(void *)(a1 + 32) + 200LL),  (uint64_t)&__p,  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL),  a4,  (double **)a5,  a6,  (uint64_t)buf,  *(double *)(*(void *)v10 + 24LL));
      *(_OWORD *)v363 = *(_OWORD *)buf;
      *(_OWORD *)&v363[16] = *(_OWORD *)&buf[16];
      v364[0] = *(_OWORD *)v283;
      *(_OWORD *)((char *)v364 + 12) = *(_OWORD *)&v283[12];
      char v14 = v283[28];
      char v15 = v283[29];
      char v145 = v283[30];
      v362[0] = *(_OWORD *)&v283[31];
      LOBYTE(v362[1]) = v283[47];
      double v151 = v284;
      double v150 = v285;
      __int128 v273 = v287;
      uint64_t v147 = v286;
      double v16 = v288;
      int v17 = v289;
      char v143 = v290;
      __int16 v100 = v291;
      uint64_t v148 = v292;
      int v149 = v293;
      *(_DWORD *)((char *)v361 + 15) = *(_DWORD *)&v294[15];
      v361[0] = *(_OWORD *)v294;
      int64x2_t v136 = *(int64x2_t *)&v294[19];
      int64x2_t v121 = *(int64x2_t *)&v294[35];
      int v272 = v295;
      __int128 v271 = *(_OWORD *)&v294[83];
      __int128 v270 = *(_OWORD *)&v294[67];
      __int128 v269 = *(_OWORD *)&v294[51];
      int v99 = v296;
      unint64_t v120 = v298;
      int64x2_t v118 = v299;
      int64x2_t v119 = v297;
      int64x2_t v116 = v301;
      int64x2_t v117 = v300;
      int64x2_t v113 = v303;
      int64x2_t v114 = v302;
      int64x2_t v111 = v305;
      int64x2_t v112 = v304;
      int v268 = v310;
      __int128 v267 = v309;
      __int128 v266 = v308;
      __int128 v265 = v307;
      int v98 = v311;
      unint64_t v115 = v312;
      int64x2_t v109 = v313;
      int64x2_t v110 = v306;
      int64x2_t v107 = v315;
      int64x2_t v108 = v314;
      int64x2_t v106 = v316;
      unint64_t v18 = v317;
      int v264 = v321;
      __int128 v263 = v320;
      __int128 v262 = v319;
      __int128 v261 = v318;
      int v97 = v322;
      int64x2_t v144 = v323;
      int64x2_t v142 = v324;
      int v260 = v328;
      __int128 v259 = v327;
      __int128 v258 = v326;
      __int128 v257 = v325;
      int v96 = v329;
      unint64_t v19 = v330;
      int64x2_t v141 = v331;
      int64x2_t v140 = v332;
      int64x2_t v139 = v333;
      int64x2_t v138 = v334;
      *(_OWORD *)((char *)v360 + 11) = *(_OWORD *)((char *)v359 + 11);
      v360[0] = v359[0];
      int64x2_t v134 = v336;
      int64x2_t v135 = v335;
      char v137 = v346;
      v256[0] = *(_DWORD *)v347;
      *(_DWORD *)((char *)v256 + 3) = *(_DWORD *)&v347[3];
      int v254 = v353;
      char v255 = v354;
      char v253 = v356;
      int v252 = v355;
      char v251 = v358;
      int v250 = v357;
      int64x2_t v132 = v338;
      int64x2_t v133 = v337;
      int64x2_t v130 = v340;
      int64x2_t v131 = v339;
      int64x2_t v128 = v342;
      int64x2_t v129 = v341;
      int64x2_t v126 = v344;
      int64x2_t v127 = v343;
      unint64_t v20 = v345;
      int64x2_t v124 = v349;
      int64x2_t v125 = v348;
      int64x2_t v122 = v351;
      int64x2_t v123 = v350;
      unint64_t v21 = v352;
    }

    else
    {
      int v17 = 0;
      char v137 = 0;
      char v145 = 0;
      char v15 = 0;
      char v14 = 0;
      unint64_t v21 = 0xFFF0000000000000LL;
      int v149 = 1;
      unint64_t v20 = 0xFFF0000000000000LL;
      unint64_t v19 = 0xFFF0000000000000LL;
      uint64_t v148 = 0x400000000LL;
      unint64_t v18 = 0xFFF0000000000000LL;
      unint64_t v115 = 0xFFF0000000000000LL;
      char v143 = *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
      unint64_t v120 = 0xFFF0000000000000LL;
      int64x2_t v121 = vdupq_n_s64(0xFFF0000000000000LL);
      double v151 = 0.0;
      int64x2_t v118 = v121;
      int64x2_t v119 = v121;
      double v150 = 0.0;
      int64x2_t v116 = v121;
      int64x2_t v117 = v121;
      uint64_t v147 = 0LL;
      int64x2_t v113 = v121;
      int64x2_t v114 = v121;
      double v16 = 0.0;
      int64x2_t v111 = v121;
      int64x2_t v112 = v121;
      int64x2_t v109 = v121;
      int64x2_t v110 = v121;
      int64x2_t v107 = v121;
      int64x2_t v108 = v121;
      int64x2_t v106 = v121;
      int64x2_t v144 = v121;
      int64x2_t v142 = v121;
      int64x2_t v141 = v121;
      int64x2_t v140 = v121;
      int64x2_t v139 = v121;
      int64x2_t v138 = v121;
      int64x2_t v134 = v121;
      int64x2_t v135 = v121;
      int64x2_t v132 = v121;
      int64x2_t v133 = v121;
      int64x2_t v130 = v121;
      int64x2_t v131 = v121;
      int64x2_t v128 = v121;
      int64x2_t v129 = v121;
      int64x2_t v126 = v121;
      int64x2_t v127 = v121;
      int64x2_t v124 = v121;
      int64x2_t v125 = v121;
      int64x2_t v122 = v121;
      int64x2_t v123 = v121;
      int64x2_t v136 = v121;
    }

    double v101 = v12;
    if (v17)
    {
      __int16 v22 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v151);
      uint64_t v23 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v150);
      if (*(void *)a5 == *(void *)(a5 + 8))
      {
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_101872F38);
        }
        unint64_t v24 = (os_log_s *)qword_101934488;
        if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "No steps detected, despite the presense of MobilityBoutMetrics",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_101872F38);
          }
          LOWORD(v279) = 0;
          LODWORD(v84) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  16LL,  "No steps detected, despite the presense of MobilityBoutMetrics",  &v279,  v84);
          uint64_t v59 = (char *)v58;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke",  "%s\n",  v58);
          if (v59 != buf) {
            free(v59);
          }
        }
      }

      [*(id *)(*(void *)(a1 + 32) + 240) writeToHealthKitAppleWalkingSteadiness:v22 startDate:v23 endDate:*(void *)(a1 + 40) source:v16];
      uint64_t v25 = (double *)v275;
      double v26 = v16 / 100.0;
      if (v275 >= v276)
      {
        int v28 = (double *)__p;
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v275 - (_BYTE *)__p) >> 3);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        if (0x5555555555555556LL * ((v276 - (_BYTE *)__p) >> 3) > v30) {
          unint64_t v30 = 0x5555555555555556LL * ((v276 - (_BYTE *)__p) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v276 - (_BYTE *)__p) >> 3) >= 0x555555555555555LL) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31)
        {
          int v32 = (char *)sub_10000701C((uint64_t)&v276, v31);
          uint64_t v25 = (double *)v275;
          int v28 = (double *)__p;
        }

        else
        {
          int v32 = 0LL;
        }

        uint64_t v33 = (double *)&v32[24 * v29];
        *uint64_t v33 = v151;
        v33[1] = v150;
        v33[2] = v26;
        int v34 = v33;
        if (v25 != v28)
        {
          do
          {
            __int128 v35 = *(_OWORD *)(v25 - 3);
            *(v34 - 1) = *(v25 - 1);
            *(_OWORD *)(v34 - 3) = v35;
            v34 -= 3;
            v25 -= 3;
          }

          while (v25 != v28);
          int v28 = (double *)__p;
        }

        uint64_t v27 = (char *)(v33 + 3);
        __int128 __p = v34;
        v275 = (char *)(v33 + 3);
        v276 = &v32[24 * v31];
        if (v28) {
          operator delete(v28);
        }
      }

      else
      {
        *(double *)v275 = v151;
        v25[1] = v150;
        uint64_t v27 = (char *)(v25 + 3);
        _DWORD v25[2] = v26;
      }

      v275 = v27;
      a1 = v146;
    }

    int v36 = [*(id *)(*(void *)(a1 + 32) + 240) areWalkingSteadinessNotificationsEnabled];
    double v37 = v13;
    double v38 = *(double *)(a1 + 80);
    __int128 v39 = *(_OWORD *)(a8 + 16);
    v248[0] = *(_OWORD *)a8;
    v248[1] = v39;
    uint64_t v249 = *(void *)(a8 + 32);
    sub_101047390((uint64_t *)&__p, a7, v36, (uint64_t)v248, (uint64_t)buf, v38);
    char v40 = buf[0];
    char v41 = buf[1];
    char v42 = buf[2];
    int v254 = *(_DWORD *)&buf[3];
    char v255 = buf[7];
    __int128 v104 = *(_OWORD *)&buf[8];
    uint64_t v105 = *(void *)&buf[24];
    char v43 = v283[0];
    char v44 = v283[1];
    char v45 = v283[2];
    int v252 = *(_DWORD *)&v283[3];
    char v253 = v283[7];
    uint64_t v46 = *(void *)&v283[8];
    uint64_t v47 = *(void *)&v283[16];
    uint64_t v48 = *(void *)&v283[24];
    __int128 v102 = *(_OWORD *)&v283[32];
    double v103 = v284;
    if (buf[2])
    {
      unsigned int v89 = *(_DWORD *)&v283[24];
      double v90 = *(double *)&v283[8];
      double v88 = *(double *)&v283[16];
      int v94 = buf[2];
    }

    else
    {
      uint64_t v87 = *(void *)&v283[24];
      if (v94 && v17)
      {
        int v49 = sub_100CD3348((uint64_t)&v279, v16);
        if (v281 == 1) {
          int v50 = v49;
        }
        else {
          int v50 = 0;
        }
        if (v50 == 1)
        {
          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_101872F38);
          }
          uint64_t v51 = (os_log_s *)qword_101934488;
          if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&uint8_t buf[4] = v90;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Most recent classification is OK, resetting previous notification %{private}.2f",  buf,  0xCu);
          }

          BOOL v52 = sub_1002921D0(115, 2);
          double v53 = 0.0;
          if (v52)
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934480 != -1) {
              dispatch_once(&qword_101934480, &stru_101872F38);
            }
            int v277 = 134283521;
            double v278 = v90;
            LODWORD(v84) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "Most recent classification is OK, resetting previous notification %{private}.2f",  &v277,  v84);
            int v61 = (char *)v60;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke",  "%s\n",  v60);
            if (v61 != buf) {
              free(v61);
            }
            unsigned int v89 = 0;
            int v94 = 0;
            double v88 = 0.0;
            double v53 = 0.0;
          }

          else
          {
            unsigned int v89 = 0;
            int v94 = 0;
            double v88 = 0.0;
          }
        }

        else
        {
          double v53 = v90;
        }

        double v90 = v53;
      }

      uint64_t v48 = v87;
    }

    double v159 = v151;
    double v160 = v150;
    *(int64x2_t *)&v169[19] = v136;
    *(int64x2_t *)&v169[35] = v121;
    int64x2_t v172 = v119;
    unint64_t v173 = v120;
    int64x2_t v174 = v118;
    int64x2_t v175 = v117;
    int64x2_t v176 = v116;
    int64x2_t v177 = v114;
    int64x2_t v178 = v113;
    int64x2_t v179 = v112;
    int64x2_t v180 = v111;
    int64x2_t v181 = v110;
    unint64_t v187 = v115;
    int64x2_t v188 = v109;
    int64x2_t v189 = v108;
    int64x2_t v190 = v107;
    int64x2_t v191 = v106;
    v152[0] = *(_OWORD *)v363;
    v152[1] = *(_OWORD *)&v363[16];
    *(_OWORD *)int v153 = v364[0];
    *(_OWORD *)&v153[12] = *(_OWORD *)((char *)v364 + 12);
    __int128 v157 = v362[0];
    __int128 v162 = v273;
    *(_DWORD *)&v169[15] = *(_DWORD *)((char *)v361 + 15);
    double v163 = v16;
    *(_OWORD *)int v169 = v361[0];
    *(_OWORD *)&v169[67] = v270;
    *(_OWORD *)&v169[83] = v271;
    *(_OWORD *)&v169[51] = v269;
    __int128 v183 = v266;
    __int128 v184 = v267;
    char v154 = v14;
    char v155 = v15;
    char v156 = v145;
    char v158 = v362[1];
    char v164 = v17;
    char v165 = v143;
    int v170 = v272;
    int v185 = v268;
    int v196 = v264;
    int v203 = v260;
    char v221 = v137;
    *(_DWORD *)&v222[3] = *(_DWORD *)((char *)v256 + 3);
    *(_DWORD *)v222 = v256[0];
    char v228 = v40;
    char v229 = v41;
    char v230 = v42;
    int v231 = v254;
    char v232 = v255;
    char v235 = v43;
    char v236 = v44;
    uint64_t v161 = v147;
    char v237 = v45;
    char v239 = v253;
    int v238 = v252;
    char v246 = v251;
    int v245 = v250;
    a1 = v146;
    __int128 v54 = *(void **)(v146 + 32);
    __int16 v166 = v100;
    uint64_t v167 = v148;
    char v168 = v149;
    int v171 = v99;
    __int128 v182 = v265;
    int v186 = v98;
    unint64_t v192 = v18;
    __int128 v194 = v262;
    __int128 v195 = v263;
    __int128 v193 = v261;
    int v197 = v97;
    int64x2_t v198 = v144;
    int64x2_t v199 = v142;
    __int128 v201 = v258;
    __int128 v202 = v259;
    __int128 v200 = v257;
    int v204 = v96;
    unint64_t v205 = v19;
    int64x2_t v206 = v141;
    int64x2_t v207 = v140;
    int64x2_t v208 = v139;
    int64x2_t v209 = v138;
    int64x2_t v210 = v135;
    int64x2_t v211 = v134;
    int64x2_t v212 = v133;
    int64x2_t v213 = v132;
    int64x2_t v214 = v131;
    int64x2_t v215 = v130;
    int64x2_t v216 = v129;
    int64x2_t v217 = v128;
    int64x2_t v218 = v127;
    int64x2_t v219 = v126;
    unint64_t v220 = v20;
    int64x2_t v223 = v125;
    int64x2_t v224 = v124;
    int64x2_t v225 = v123;
    int64x2_t v226 = v122;
    unint64_t v227 = v21;
    __int128 v233 = v104;
    uint64_t v234 = v105;
    uint64_t v240 = v46;
    uint64_t v241 = v47;
    uint64_t v242 = v48;
    __int128 v243 = v102;
    double v244 = v103;
    *(_OWORD *)&v247[11] = *(_OWORD *)((char *)v360 + 11);
    *(_OWORD *)v247 = v360[0];
    [v54 sendAnalyticsSteadinessResult:v152];
    double v13 = v37;
    if (v149)
    {
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      id v62 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_INFO,  "Finished Classification: data sources unavailable",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_93;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      LOWORD(v279) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "Finished Classification: data sources unavailable",  &v279,  v84);
      int v80 = (char *)v79;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke",  "%s\n",  v79);
      if (v80 != buf) {
        free(v80);
      }
LABEL_122:
      double v13 = v37;
      goto LABEL_93;
    }

    *(void *)(*(void *)(*(void *)(v146 + 64) + 8LL) + 24LL) = v147;
    if ((v148 & 0x20) != 0)
    {
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      uint64_t v63 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_INFO,  "Height not set, increasing minimum delay before next classification",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_93;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      LOWORD(v279) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "Height not set, increasing minimum delay before next classification",  &v279,  v84);
      int v82 = (char *)v81;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke",  "%s\n",  v81);
      if (v82 != buf) {
        free(v82);
      }
      goto LABEL_122;
    }

    uint64_t v55 = *(void *)(v146 + 64);
    uint64_t v56 = *(void *)(v55 + 8);
    double v13 = *(double *)(v56 + 24) - v101;
    int v57 = *(_xpc_activity_s **)(v146 + 48);
    if (v57) {
      break;
    }
    double v12 = *(double *)(v56 + 24);
LABEL_55:
    if (v12 <= *(double *)(v146 + 80))
    {
      uint64_t v10 = v55 + 8;
      if (v13 > 0.00999999978) {
        continue;
      }
    }

    goto LABEL_93;
  }

  if (!xpc_activity_should_defer(v57))
  {
    uint64_t v55 = *(void *)(v146 + 64);
    double v12 = *(double *)(*(void *)(v55 + 8) + 24LL);
    goto LABEL_55;
  }

  xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(v146 + 48));
  if (xpc_activity_set_state(*(xpc_activity_t *)(v146 + 48), 3LL))
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_101872F38);
    }
    int v65 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "#warning: Classification deferred", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      LOWORD(v279) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "#warning: Classification deferred",  &v279,  v84);
      uint64_t v67 = (char *)v66;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke",  "%s\n",  v66);
      goto LABEL_126;
    }
  }

  else
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_101872F38);
    }
    int v68 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = state;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_FAULT,  "Failed to mark activity as Deferred. Current state is %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      int v279 = 134349056;
      xpc_activity_state_t v280 = state;
      LODWORD(v84) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  17LL,  "Failed to mark activity as Deferred. Current state is %{public}ld",  &v279,  v84);
      uint64_t v67 = (char *)v83;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke",  "%s\n",  v83);
LABEL_126:
      if (v67 != buf) {
        free(v67);
      }
    }
  }

void sub_100B480B4(_Unwind_Exception *a1)
{
  __int128 v2 = (void *)STACK[0xA98];
  if (STACK[0xA98])
  {
    STACK[0xAA0] = (unint64_t)v2;
    operator delete(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100B487D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id *sub_100B487F4(id *result, int a2)
{
  if (a2) {
    return (id *)objc_msgSend(result[4], "setUpClassificationActivityWithDeferral:");
  }
  return result;
}

void sub_100B48CC4(_Unwind_Exception *a1)
{
}

void *sub_100B48D24(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    sub_10001B7A4(a1, a3);
    double v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }

  return a1;
}

void sub_100B48D88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100B48DA4(uint64_t a1)
{
  __int128 v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

void *sub_100B48DD4(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    sub_10000717C(a1, a3);
    double v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }

  return a1;
}

void sub_100B48E38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100B48E54(uint64_t a1)
{
  v75[0] = &off_1018D40E8;
  v74[0] = @"extraCount";
  v74[1] = @"boutNumGaitMetrics";
  v75[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 36LL));
  v74[2] = @"boutWorkoutType";
  v75[2] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 28LL));
  v74[3] = @"boutStepCount";
  void v75[3] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 24LL));
  v74[4] = @"boutDuration";
  v75[4] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 16LL) - *(double *)(*(void *)(a1 + 32) + 8LL));
  v74[5] = @"boutTerminationReason";
  v75[5] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 32LL));
  v74[6] = @"boutDeviceSide";
  v75[6] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 48LL));
  v74[7] = @"boutNumGaitMetrics_bin";
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 36LL);
  int v70 = 0LL;
  uint64_t v71 = 0LL;
  int v69 = 0LL;
  sub_10001B72C( &v69,  (const void *)qword_10199AAA8,  *(uint64_t *)algn_10199AAB0,  (*(void *)algn_10199AAB0 - qword_10199AAA8) >> 2);
  sub_100B49980(v2, (uint64_t)&v69, v72);
  if (v73 >= 0) {
    uint64_t v3 = v72;
  }
  else {
    uint64_t v3 = (void **)v72[0];
  }
  v75[7] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3);
  v74[8] = @"boutDuration_bin";
  uint64_t v4 = *(void *)(a1 + 32);
  double v6 = *(double *)(v4 + 8);
  double v5 = *(double *)(v4 + 16);
  unsigned int v64 = 0LL;
  int v65 = 0LL;
  uint64_t v66 = 0LL;
  sub_100007590( &v64,  (const void *)qword_10199AAC8,  *(uint64_t *)algn_10199AAD0,  (*(void *)algn_10199AAD0 - qword_10199AAC8) >> 3);
  sub_100657A00((uint64_t)&v64, v67, v5 - v6);
  if (v68 >= 0) {
    double v7 = v67;
  }
  else {
    double v7 = (void **)v67[0];
  }
  v75[8] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7);
  v74[9] = @"boundaryType";
  v75[9] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 52LL));
  v74[10] = @"cycleTimeMean";
  v75[10] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 56LL));
  v74[11] = @"stepLengthEntropy";
  v75[11] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 64LL));
  v74[12] = @"stepLengthPoincareSD1";
  v75[12] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 72LL));
  v74[13] = @"stepLengthPoincareSD2";
  v75[13] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 80LL));
  v74[14] = @"cycleTimeEntropy";
  v75[14] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 88LL));
  v74[15] = @"cycleTimePoincareSD1";
  v75[15] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 96LL));
  v74[16] = @"cycleTimePoincareSD2";
  v75[16] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 104LL));
  v74[17] = @"userAge_bin";
  float v8 = *(float *)(*(void *)(a1 + 40) + 4LL);
  char v60 = 0LL;
  uint64_t v61 = 0LL;
  uint64_t v59 = 0LL;
  sub_10001B72C( &v59,  (const void *)qword_10199AA48,  *(uint64_t *)algn_10199AA50,  (*(void *)algn_10199AA50 - qword_10199AA48) >> 2);
  sub_1001B4760((uint64_t)&v59, v62, v8);
  if (v63 >= 0) {
    uint64_t v9 = v62;
  }
  else {
    uint64_t v9 = (void **)v62[0];
  }
  v75[17] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9);
  v74[18] = @"userGender";
  v75[18] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 40) + 8LL));
  v74[19] = @"userHeight_bin";
  float v10 = *(float *)(*(void *)(a1 + 40) + 224LL);
  uint64_t v55 = 0LL;
  uint64_t v56 = 0LL;
  __int128 v54 = 0LL;
  sub_10001B72C( &v54,  (const void *)qword_10199AA68,  *(uint64_t *)algn_10199AA70,  (*(void *)algn_10199AA70 - qword_10199AA68) >> 2);
  sub_1001B4760((uint64_t)&v54, v57, v10);
  if (v58 >= 0) {
    uint64_t v11 = v57;
  }
  else {
    uint64_t v11 = (void **)v57[0];
  }
  v75[19] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11);
  v74[20] = @"userWeight_bin";
  float v12 = *(float *)(*(void *)(a1 + 40) + 232LL);
  int v50 = 0LL;
  uint64_t v51 = 0LL;
  int v49 = 0LL;
  sub_10001B72C( &v49,  (const void *)qword_10199AA88,  *(uint64_t *)algn_10199AA90,  (*(void *)algn_10199AA90 - qword_10199AA88) >> 2);
  sub_1001B4760((uint64_t)&v49, v52, v12);
  if (v53 >= 0) {
    double v13 = v52;
  }
  else {
    double v13 = (void **)v52[0];
  }
  v75[20] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v13);
  v74[21] = @"userPAL_bin";
  sub_100B49D04(&__p, *(float *)(*(void *)(a1 + 40) + 12LL), 0.0, 3.0);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v75[21] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p);
  v74[22] = @"metricAsymmetryPercentage";
  v75[22] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 136LL));
  v74[23] = @"metricDoubleSupportPercentage";
  v75[23] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 120LL));
  v74[24] = @"metricStepLength";
  v75[24] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 128LL));
  v74[25] = @"metricWalkingSpeed";
  v75[25] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 112LL));
  v74[26] = @"isValidAsymmetryPercentage";
  uint64_t v15 = *(void *)(a1 + 32);
  int v16 = *(_DWORD *)(v15 + 204);
  if (*(_DWORD *)(v15 + 52)) {
    int v17 = 42;
  }
  else {
    int v17 = -1;
  }
  v75[26] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v17 & v16) == 0);
  v74[27] = @"isValidDoubleSupportPercentage";
  uint64_t v18 = *(void *)(a1 + 32);
  int v19 = *(_DWORD *)(v18 + 196);
  if (*(_DWORD *)(v18 + 52)) {
    int v20 = 42;
  }
  else {
    int v20 = -1;
  }
  v75[27] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v20 & v19) == 0);
  v74[28] = @"isValidStepLength";
  uint64_t v21 = *(void *)(a1 + 32);
  int v22 = *(_DWORD *)(v21 + 200);
  if (*(_DWORD *)(v21 + 52)) {
    int v23 = 42;
  }
  else {
    int v23 = -1;
  }
  v75[28] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v23 & v22) == 0);
  v74[29] = @"isValidWalkingSpeed";
  uint64_t v24 = *(void *)(a1 + 32);
  int v25 = *(_DWORD *)(v24 + 192);
  if (*(_DWORD *)(v24 + 52)) {
    int v26 = 42;
  }
  else {
    int v26 = -1;
  }
  v75[29] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v26 & v25) == 0);
  v74[30] = @"isValidStepLengthEntropy";
  uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 64LL);
  BOOL v31 = (v27 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL
     || v27 == 0x7FF0000000000000LL
     || (v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000LL
     || ((v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 < 0x3FF;
  v75[30] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v31);
  v74[31] = @"isValidCycleTimeEntropy";
  uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 88LL);
  BOOL v36 = (v32 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL
     || v32 == 0x7FF0000000000000LL
     || (v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000LL
     || ((v32 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 < 0x3FF;
  v75[31] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v36);
  v74[32] = @"metricStepIndexOfHarmonicityAP";
  LODWORD(v37) = *(_DWORD *)(*(void *)(a1 + 32) + 144LL);
  v75[32] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v37);
  v74[33] = @"metricStepIndexOfHarmonicityML";
  LODWORD(v38) = *(_DWORD *)(*(void *)(a1 + 32) + 148LL);
  v75[33] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v38);
  v74[34] = @"metricStepIndexOfHarmonicityVT";
  LODWORD(v39) = *(_DWORD *)(*(void *)(a1 + 32) + 152LL);
  v75[34] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v39);
  v74[35] = @"metricSwingIndexOfHarmonicityAP";
  LODWORD(v40) = *(_DWORD *)(*(void *)(a1 + 32) + 156LL);
  v75[35] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v40);
  v74[36] = @"metricSwingIndexOfHarmonicityML";
  LODWORD(v41) = *(_DWORD *)(*(void *)(a1 + 32) + 160LL);
  v75[36] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v41);
  v74[37] = @"metricSwingIndexOfHarmonicityVT";
  LODWORD(v42) = *(_DWORD *)(*(void *)(a1 + 32) + 164LL);
  v75[37] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v42);
  v74[38] = @"isValidIndexOfHarmonicity";
  v75[38] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_1004CC854(*(void *)(a1 + 32)));
  v74[39] = @"numSegmentsRejectedByIsCadenceConcordant";
  v75[39] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 188LL));
  v74[40] = @"numSegmentsRejectedByIsFeasibleWalkingSpeed";
  v75[40] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 176LL));
  v74[41] = @"numSegmentsRejectedByIsNotRunning";
  v75[41] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 172LL));
  v74[42] = @"numSegmentsRejectedByIsPendular";
  v75[42] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 180LL));
  v74[43] = @"numSegmentsRejectedByIsSufficientVerticalTwist";
  v75[43] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 184LL));
  v74[44] = @"numSegmentsRejectedByIsSwingStanceCycle";
  v75[44] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 168LL));
  v74[45] = @"isAccepted";
  uint64_t v43 = *(void *)(a1 + 32);
  int v44 = *(_DWORD *)(v43 + 192);
  if (*(_DWORD *)(v43 + 52)) {
    int v45 = 42;
  }
  else {
    int v45 = -1;
  }
  v75[45] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v45 & v44) == 0);
  v74[46] = @"rejectedDueToGrade";
  v75[46] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  (*(_DWORD *)(*(void *)(a1 + 32) + 192LL) >> 2) & 1);
  v74[47] = @"rejectedDueToNumberOfGaitMetrics";
  v75[47] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  (*(_DWORD *)(*(void *)(a1 + 32) + 192LL) >> 1) & 1);
  v74[48] = @"rejectedDueToWorkout";
  v75[48] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  (*(_DWORD *)(*(void *)(a1 + 32) + 192LL) >> 3) & 1);
  v74[49] = @"rejectedDueToGaitMetricsYield";
  v75[49] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  (*(_DWORD *)(*(void *)(a1 + 32) + 192LL) >> 4) & 1);
  uint64_t v46 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v75,  v74,  50LL);
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (v49)
  {
    int v50 = v49;
    operator delete(v49);
  }

  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }

  if (v63 < 0) {
    operator delete(v62[0]);
  }
  if (v59)
  {
    char v60 = v59;
    operator delete(v59);
  }

  if (v68 < 0) {
    operator delete(v67[0]);
  }
  if (v64)
  {
    int v65 = v64;
    operator delete(v64);
  }

  if (v73 < 0) {
    operator delete(v72[0]);
  }
  if (v69)
  {
    int v70 = v69;
    operator delete(v69);
  }

  return v46;
}

void sub_100B49858( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, void *a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, int a47, __int16 a48, char a49, char a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a51) {
    operator delete(a51);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B49980(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v33 = 0LL;
  int v34 = 0LL;
  uint64_t v35 = 0LL;
  sub_10001B72C(&v33, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  uint64_t v6 = v34 - (_BYTE *)v33;
  if (v34 == (_BYTE *)v33)
  {
    if (!v34)
    {
      uint64_t v9 = *(int **)a2;
      if (*(void *)(a2 + 8) != *(void *)a2) {
        goto LABEL_30;
      }
LABEL_36:
      sub_1010DDBC0(a3, "(--inf,inf)");
      return;
    }

    LODWORD(v7) = 0;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = v6 >> 2;
    while (v33[v7] < a1)
    {
      if (v8 == ++v7)
      {
        LODWORD(v7) = v8;
        break;
      }
    }
  }

  int v34 = v33;
  operator delete(v33);
  uint64_t v9 = *(int **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10 == *(void *)a2) {
    goto LABEL_36;
  }
  if (!(_DWORD)v7)
  {
LABEL_30:
    std::to_string(&v31, *v9);
    int v25 = std::string::insert(&v31, 0LL, "(--inf,");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    double v13 = std::string::append(&v32, "]");
LABEL_31:
    __int128 v27 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a3[2] = v13->__r_.__value_.__l.__cap_;
    *(_OWORD *)a3 = v27;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    if ((char)v31.__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v24 = (void *)v31.__r_.__value_.__r.__words[0];
      goto LABEL_35;
    }

    return;
  }

  if ((v10 - *(void *)a2) >> 2 == (int)v7)
  {
    std::to_string(&v31, *(_DWORD *)(v10 - 4));
    uint64_t v11 = std::string::insert(&v31, 0LL, "(");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    double v13 = std::string::append(&v32, ",inf)");
    goto LABEL_31;
  }

  std::to_string(&v29, v9[(int)v7 - 1]);
  char v14 = std::string::insert(&v29, 0LL, "(");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  int v16 = std::string::append(&v30, ",");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&__p, *(_DWORD *)(*(void *)a2 + 4LL * (int)v7));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v20 = std::string::append(&v31, (const std::string::value_type *)p_p, size);
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  int v22 = std::string::append(&v32, "]");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  a3[2] = v22->__r_.__value_.__l.__cap_;
  *(_OWORD *)a3 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  if ((char)v29.__r_.__value_.__s.__size_ < 0)
  {
    uint64_t v24 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v24);
  }

void sub_100B49C54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B49D04(std::string *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>)
{
  float v7 = (float)(a2 - a3) / a4;
  float v8 = ceilf(v7);
  std::to_string(&v20, a3 + (float)((float)(int)(vcvtps_s32_f32(v7) - 1) * a4));
  std::to_string(&v19, a3 + (float)((float)(int)v8 * a4));
  std::operator+<char>(&v16, "(", &v20);
  uint64_t v9 = std::string::append(&v16, ",");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v11 = &v19;
  }
  else {
    uint64_t v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v19.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
  }
  double v13 = std::string::append(&v17, (const std::string::value_type *)v11, size);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v15 = std::string::append(&v18, "]");
  *a1 = *v15;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100B49E68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B4A718(_Unwind_Exception *a1)
{
}

NSDictionary *sub_100B4A748(uint64_t a1)
{
  v48[0] = @"userHeight_bin";
  sub_100B49D04(&v47, *(float *)(a1 + 48), 0.0, 0.1);
  if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v2 = &v47;
  }
  else {
    int v2 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  v49[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
  v48[1] = @"userWeight_bin";
  sub_100B49D04(&v46, *(float *)(a1 + 52), 0.0, 15.0);
  if ((v46.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v3 = &v46;
  }
  else {
    uint64_t v3 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  v49[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3);
  v48[2] = @"userAge_bin";
  float v4 = *(float *)(a1 + 60);
  double v42 = 0LL;
  uint64_t v43 = 0LL;
  double v41 = 0LL;
  sub_10001B72C( &v41,  (const void *)qword_10199AAE8,  *(uint64_t *)algn_10199AAF0,  (*(void *)algn_10199AAF0 - qword_10199AAE8) >> 2);
  sub_1001B4760((uint64_t)&v41, v44, v4);
  if (v45 >= 0) {
    double v5 = v44;
  }
  else {
    double v5 = (void **)v44[0];
  }
  v49[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5);
  void v48[3] = @"userBMI_bin";
  LODWORD(v6) = *(_DWORD *)(a1 + 48);
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  [*(id *)(a1 + 32) BMIFromHeight:v6 weight:v7];
  float v9 = v8;
  BOOL v36 = 0LL;
  double v37 = 0LL;
  uint64_t v38 = 0LL;
  sub_10001B72C( &v36,  (const void *)qword_10199AB08,  *(uint64_t *)algn_10199AB10,  (*(void *)algn_10199AB10 - qword_10199AB08) >> 2);
  sub_1001B4760((uint64_t)&v36, v39, v9);
  if (v40 >= 0) {
    __int128 v10 = v39;
  }
  else {
    __int128 v10 = (void **)v39[0];
  }
  v49[3] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10);
  v48[4] = @"userSex";
  v49[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v48[5] = @"userIsHeightSet";
  v49[5] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 97));
  v48[6] = @"userIsWeightSet";
  v49[6] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 98));
  v48[7] = @"userIsAgeSet";
  v49[7] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 96));
  v48[8] = @"classificationSteadinessScoreIsValid";
  v49[8] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 168));
  v48[9] = @"classificationUnadjustedScore";
  v49[9] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 152));
  v48[10] = @"classificationSteadinessScore";
  v49[10] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 160));
  v48[11] = @"steadinessScore_bin";
  float v11 = *(double *)(a1 + 160);
  sub_100B49D04(&v35, v11, 0.0, 5.0);
  if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v12 = &v35;
  }
  else {
    __int128 v12 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  v49[11] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12);
  v48[12] = @"classificationIsHistoricalCompute";
  v49[12] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 169));
  v48[13] = @"classificationRejectionStatusClassifier";
  v49[13] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 172));
  v48[14] = @"classificationAppliedBoutMetricCorrections";
  v49[14] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1132));
  v48[15] = @"steadinessScoreCapacity_bin";
  float v13 = *(double *)(a1 + 1184);
  sub_100B49D04(&v34, v13, 0.0, 0.05);
  if ((v34.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v14 = &v34;
  }
  else {
    __int128 v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  v49[15] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14);
  v48[16] = @"steadinessScoreAnomalousGait_bin";
  float v15 = *(double *)(a1 + 1240);
  sub_100B49D04(&v33, v15, 0.0, 0.05);
  if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string v16 = &v33;
  }
  else {
    std::string v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  v49[16] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16);
  v48[17] = @"steadinessScoreCompensatoryGait_bin";
  float v17 = *(double *)(a1 + 1296);
  sub_100B49D04(&v32, v17, 0.0, 0.05);
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string v18 = &v32;
  }
  else {
    std::string v18 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  v49[17] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18);
  v48[18] = @"steadinessScoreDemographics_bin";
  sub_100B49D04(&v31, 0.0, 0.0, 0.05);
  if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string v19 = &v31;
  }
  else {
    std::string v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  v49[18] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19);
  v48[19] = @"steadinessScoreGaitSmoothness_bin";
  float v20 = *(double *)(a1 + 1352);
  sub_100B49D04(&v30, v20, 0.0, 0.05);
  if ((v30.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v21 = &v30;
  }
  else {
    __int128 v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  v49[19] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v21);
  v48[20] = @"unadjustedSteadinessScore_bin";
  float v22 = *(double *)(a1 + 144);
  sub_100B49D04(&v29, v22, 0.0, 0.05);
  if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v23 = &v29;
  }
  else {
    __int128 v23 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  v49[20] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v23);
  v48[21] = @"numValidStepBouts7Days";
  v49[21] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1224));
  v48[22] = @"numValidStepBouts28Days";
  v49[22] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1228));
  v48[23] = @"daysWithSufficientStepBouts7Days";
  v49[23] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 104));
  v48[24] = @"daysWithSufficientStepBouts28Days";
  v49[24] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 108));
  v48[25] = @"dailySteps30daysMax";
  v49[25] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 992));
  v48[26] = @"dailyFlights30daysMax";
  v49[26] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 984));
  v48[27] = @"dailySteps7daysMean";
  v49[27] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 1000));
  v48[28] = @"dailySteps30daysMean";
  v49[28] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 1032));
  v48[29] = @"dailyFlights30daysMean";
  v49[29] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 1024));
  v48[30] = @"inputNumFallsInQueryPeriod";
  v49[30] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1128));
  v48[31] = @"numStepsLast7Days_bin";
  float v24 = *(double *)(a1 + 1144);
  sub_100B49D04(&__p, v24, 0.0, 500.0);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v49[31] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p);
  v48[32] = @"classificationRejectionStatusModelContinuousWalking";
  v49[32] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1208));
  v48[33] = @"classificationRejectionStatusModelEntropy";
  v49[33] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1320));
  v48[34] = @"classificationRejectionStatusModelGaitBaseline";
  v49[34] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1264));
  v48[35] = @"errorStatusClassifier";
  v49[35] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 176));
  v48[36] = @"errorDataSourcesUnavailable";
  v49[36] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 180));
  v48[37] = @"notificationWrittenToHealthKit";
  v49[37] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1042));
  v48[38] = @"notificationUserHasOnboarded";
  v49[38] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1041));
  v48[39] = @"notificationEventType";
  v49[39] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1096));
  v48[40] = @"notificationPercentOK";
  v49[40] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 1048));
  v48[41] = @"notificationPercentLow";
  v49[41] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 1056));
  v48[42] = @"notificationPercentVeryLow";
  v49[42] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 1064));
  v48[43] = @"notificationIsBlockoutPeriodLow";
  v49[43] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1072));
  v48[44] = @"notificationIsBlockoutPeriodVeryLow";
  v49[44] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1073));
  v48[45] = @"notificationIsSampleRecent";
  v49[45] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1074));
  v48[46] = @"weeksSinceLowNotification";
  v49[46] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1384));
  v48[47] = @"weeksSinceVeryLowNotification";
  v49[47] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1388));
  __int128 v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v49,  v48,  48LL);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  if (v36)
  {
    double v37 = v36;
    operator delete(v36);
  }

  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v41)
  {
    double v42 = v41;
    operator delete(v41);
  }

  return v26;
}

void sub_100B4B058( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, void *a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a55) {
    operator delete(a55);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a64) {
    operator delete(a64);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  _Unwind_Resume(a1);
}

void sub_100B4B680( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100B4B6AC(uint64_t a1, xpc_activity_t activity)
{
  if (!xpc_activity_get_state(activity))
  {
    xpc_object_t v8 = xpc_activity_copy_criteria(activity);
    if (!v8) {
      xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
    }
    int64_t int64 = xpc_dictionary_get_int64(v8, XPC_ACTIVITY_DELAY);
    if (int64)
    {
      int64_t v10 = int64;
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      float v11 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136446722;
        xpc_activity_state_t state = "com.apple.locationd.Mobility.Classification";
        __int16 v23 = 2050;
        int64_t v24 = v10;
        __int16 v25 = 2050;
        uint64_t v26 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "XPC_CHECK_IN: Checking in on XPC  %{public}s activity, previous delay (%{public}lld), new delay (%{public}lld)",  buf,  0x20u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_29;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)std::string v19 = 136446722;
      *(void *)&v19[4] = "com.apple.locationd.Mobility.Classification";
      *(_WORD *)&v19[12] = 2050;
      *(void *)&v19[14] = v10;
      *(_WORD *)&v19[22] = 2050;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "XPC_CHECK_IN: Checking in on XPC  %{public}s activity, previous delay (%{public}lld), new delay (%{public}lld)",  v19,  32,  *(_OWORD *)v19,  *(void *)&v19[16],  v13);
    }

    else
    {
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      float v15 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
      {
        int64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136446466;
        xpc_activity_state_t state = "com.apple.locationd.Mobility.Classification";
        __int16 v23 = 2050;
        int64_t v24 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "XPC_CHECK_IN: Initializing %{public}s activity with delay %{public}lld",  buf,  0x16u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_29;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      uint64_t v17 = *(void *)(a1 + 40);
      *(_DWORD *)std::string v19 = 136446466;
      *(void *)&v19[4] = "com.apple.locationd.Mobility.Classification";
      *(_WORD *)&v19[12] = 2050;
      *(void *)&v19[14] = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "XPC_CHECK_IN: Initializing %{public}s activity with delay %{public}lld",  v19,  22,  *(_OWORD *)v19,  *(void *)&v19[16],  v20);
    }

    std::string v18 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService setUpClassificationActivityWithDeferral:]_block_invoke",  "%s\n",  v14);
    if (v18 != buf) {
      free(v18);
    }
LABEL_29:
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, *(void *)(a1 + 40));
    xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REPEATING, 1);
    xpc_activity_set_criteria(activity, v8);
    xpc_release(v8);
    return;
  }

  [*(id *)(a1 + 32) onMobilityClassificationActivity:activity];
  if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4LL))
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_101872F38);
    }
    float v4 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      xpc_activity_state_t state = (const char *)xpc_activity_get_state(activity);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Failed to mark activity as Continue. Current state is %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      uint64_t v5 = qword_101934488;
      *(_DWORD *)std::string v19 = 134349056;
      *(void *)&v19[4] = xpc_activity_get_state(activity);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v5,  17LL,  "Failed to mark activity as Continue. Current state is %{public}ld",  v19,  12);
      double v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMobilityWalkingBoutService setUpClassificationActivityWithDeferral:]_block_invoke",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

void sub_100B4BD34(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101872F18);
  }
  float v4 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "BoutService: Data processing timer fired (%{public}ld)",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    uint64_t v7 = qword_1019346B8;
    int v15 = 134349056;
    xpc_activity_state_t v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  1LL,  "BoutService: Data processing timer fired (%{public}ld)",  &v15,  12);
    float v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService setUpProcessBoutsActivity]_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  [*(id *)(a1 + 32) onMobilityProcessBoutsActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4LL))
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    uint64_t v5 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Failed to mark activity as Continue. Current state is %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101872F18);
      }
      uint64_t v10 = qword_1019346B8;
      xpc_activity_state_t v11 = xpc_activity_get_state(a2);
      int v15 = 134349056;
      xpc_activity_state_t v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  17LL,  "Failed to mark activity as Continue. Current state is %{public}ld",  &v15,  v14);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMobilityWalkingBoutService setUpProcessBoutsActivity]_block_invoke",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

void sub_100B4C22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_100B4C240(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    float v9 = a1[2];
    uint64_t v7 = (uint64_t)(a1 + 2);
    xpc_object_t v8 = v9;
    unint64_t v10 = *(void *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a1) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555LL) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        xpc_activity_state_t v16 = (char *)sub_10000701C(v7, v15);
      }
      else {
        xpc_activity_state_t v16 = 0LL;
      }
      uint64_t v17 = &v16[24 * v12];
      std::string v18 = &v16[24 * v15];
      *(double *)uint64_t v17 = a2;
      *((void *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      xpc_activity_state_t v11 = v17 + 24;
      uint64_t v20 = (char *)*a1;
      std::string v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          __int128 v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }

        while (v19 != v20);
        std::string v19 = (char *)*a1;
      }

      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      *(double *)unint64_t v10 = a2;
      *(void *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      xpc_activity_state_t v11 = (char *)(v10 + 24);
    }

    a1[1] = v11;
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v25 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Programmer error, this expiration rule with time %{public}fis not valid.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101873108);
      }
      int v22 = 134349056;
      double v23 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Programmer error, this expiration rule with time %{public}fis not valid.",  &v22,  12);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLActivityAggregator<CLMobility::BoutBoundary>::setExpirationRule(CFTimeInterval) [T = CLMobility::BoutBoun dary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

void sub_100B4C4F4(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    float v9 = a1[2];
    uint64_t v7 = (uint64_t)(a1 + 2);
    xpc_object_t v8 = v9;
    unint64_t v10 = *(void *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a1) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555LL) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        xpc_activity_state_t v16 = (char *)sub_10000701C(v7, v15);
      }
      else {
        xpc_activity_state_t v16 = 0LL;
      }
      uint64_t v17 = &v16[24 * v12];
      std::string v18 = &v16[24 * v15];
      *(double *)uint64_t v17 = a2;
      *((void *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      xpc_activity_state_t v11 = v17 + 24;
      uint64_t v20 = (char *)*a1;
      std::string v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          __int128 v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }

        while (v19 != v20);
        std::string v19 = (char *)*a1;
      }

      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      *(double *)unint64_t v10 = a2;
      *(void *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      xpc_activity_state_t v11 = (char *)(v10 + 24);
    }

    a1[1] = v11;
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v25 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Programmer error, this expiration rule with time %{public}fis not valid.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101873108);
      }
      int v22 = 134349056;
      double v23 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Programmer error, this expiration rule with time %{public}fis not valid.",  &v22,  12);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule( CFTimeInterval) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

void sub_100B4C7A8(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    float v9 = a1[2];
    uint64_t v7 = (uint64_t)(a1 + 2);
    xpc_object_t v8 = v9;
    unint64_t v10 = *(void *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a1) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555LL) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        xpc_activity_state_t v16 = (char *)sub_10000701C(v7, v15);
      }
      else {
        xpc_activity_state_t v16 = 0LL;
      }
      uint64_t v17 = &v16[24 * v12];
      std::string v18 = &v16[24 * v15];
      *(double *)uint64_t v17 = a2;
      *((void *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      xpc_activity_state_t v11 = v17 + 24;
      uint64_t v20 = (char *)*a1;
      std::string v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          __int128 v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }

        while (v19 != v20);
        std::string v19 = (char *)*a1;
      }

      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      *(double *)unint64_t v10 = a2;
      *(void *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      xpc_activity_state_t v11 = (char *)(v10 + 24);
    }

    a1[1] = v11;
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v25 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Programmer error, this expiration rule with time %{public}fis not valid.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101873108);
      }
      int v22 = 134349056;
      double v23 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Programmer error, this expiration rule with time %{public}fis not valid.",  &v22,  12);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule( CFTimeInterval) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

void sub_100B4CA5C(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    float v9 = a1[2];
    uint64_t v7 = (uint64_t)(a1 + 2);
    xpc_object_t v8 = v9;
    unint64_t v10 = *(void *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a1) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555LL) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        xpc_activity_state_t v16 = (char *)sub_10000701C(v7, v15);
      }
      else {
        xpc_activity_state_t v16 = 0LL;
      }
      uint64_t v17 = &v16[24 * v12];
      std::string v18 = &v16[24 * v15];
      *(double *)uint64_t v17 = a2;
      *((void *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      xpc_activity_state_t v11 = v17 + 24;
      uint64_t v20 = (char *)*a1;
      std::string v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          __int128 v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }

        while (v19 != v20);
        std::string v19 = (char *)*a1;
      }

      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      *(double *)unint64_t v10 = a2;
      *(void *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      xpc_activity_state_t v11 = (char *)(v10 + 24);
    }

    a1[1] = v11;
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101873108);
    }
    uint64_t v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v25 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Programmer error, this expiration rule with time %{public}fis not valid.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101873108);
      }
      int v22 = 134349056;
      double v23 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Programmer error, this expiration rule with time %{public}fis not valid.",  &v22,  12);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setExpirat ionRule(CFTimeInterval) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

id sub_100B4CD10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onAggregationTimer];
}

void sub_100B4CFA0(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101872F18);
  }
  float v4 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "XPC Mobility Sync: Mobility sync with watch fired (%{public}ld)",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    uint64_t v7 = qword_1019346B8;
    int v15 = 134349056;
    xpc_activity_state_t v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  1LL,  "XPC Mobility Sync: Mobility sync with watch fired (%{public}ld)",  &v15,  12);
    float v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService setUpMobilityCompanionSyncActivity]_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  [*(id *)(a1 + 32) onMobilityCompanionSyncActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4LL))
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101872F18);
    }
    uint64_t v5 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "XPC Mobility Sync: Failed to mark activity as Continue. Current state is %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101872F18);
      }
      uint64_t v10 = qword_1019346B8;
      xpc_activity_state_t v11 = xpc_activity_get_state(a2);
      int v15 = 134349056;
      xpc_activity_state_t v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  17LL,  "XPC Mobility Sync: Failed to mark activity as Continue. Current state is %{public}ld",  &v15,  v14);
      unint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMobilityWalkingBoutService setUpMobilityCompanionSyncActivity]_block_invoke",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

void sub_100B4DEF8(_Unwind_Exception *a1)
{
}

NSDictionary *sub_100B4DF14(uint64_t a1)
{
  v3[0] = @"isActivityDeferred";
  v4[0] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 36));
  v3[1] = @"isSuccess";
  v4[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 37));
  _OWORD v3[2] = @"isActivityValid";
  _OWORD v4[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 38));
  v3[3] = @"isWatchPaired";
  v4[3] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 39));
  v3[4] = @"messageSize";
  v4[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  5LL);
}

void sub_100B4E370(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_100B4E39C(id a1)
{
  qword_101934488 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100B4E3C8(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_100B4E3F4@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x248uLL);
  __n128 result = sub_100B4E44C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100B4E438(_Unwind_Exception *a1)
{
}

void *sub_100B4E44C(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101872F88;
  sub_1006ADE58(a1 + 3, *a2);
  return a1;
}

void sub_100B4E488(_Unwind_Exception *a1)
{
}

void sub_100B4E49C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101872F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100B4E4B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101872F88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100B4E4D4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void *sub_100B4E4E4@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x268uLL);
  __n128 result = sub_100B4E53C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100B4E528(_Unwind_Exception *a1)
{
}

void *sub_100B4E53C(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101872FD8;
  sub_100FAF4E0(a1 + 3, *a2);
  return a1;
}

void sub_100B4E578(_Unwind_Exception *a1)
{
}

void sub_100B4E58C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101872FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100B4E5A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101872FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100B4E5C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void *sub_100B4E5D4@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x2E8uLL);
  __n128 result = sub_100B4E62C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100B4E618(_Unwind_Exception *a1)
{
}

void *sub_100B4E62C(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101873028;
  sub_101024DF8(a1 + 3, *a2);
  return a1;
}

void sub_100B4E668(_Unwind_Exception *a1)
{
}

void sub_100B4E67C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101873028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100B4E690(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101873028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100B4E6B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void *sub_100B4E6C4@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x20uLL);
  __n128 result = sub_100B4E70C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100B4E6F8(_Unwind_Exception *a1)
{
}

void *sub_100B4E70C(void *a1)
{
  a1[2] = 0LL;
  *a1 = off_101873078;
  a1[1] = 0LL;
  nullsub_10(a1 + 3);
  return a1;
}

void sub_100B4E744(_Unwind_Exception *a1)
{
}

void sub_100B4E758(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101873078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100B4E76C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101873078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100B4E790(uint64_t a1)
{
  return nullsub_10(a1 + 24);
}

void sub_100B4E79C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 + 216;
    sub_10000AE14(v3);
    sub_10000AE14(a2 + 48);
    sub_10000AE14(a2 + 32);
    sub_10000AE14(a2 + 16);
    float v4 = (void *)sub_10000AE14(a2);
    operator delete(v4);
  }

void *sub_100B4E80C@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x1C0uLL);
  __n128 result = sub_100B4E864(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100B4E850(_Unwind_Exception *a1)
{
}

void *sub_100B4E864(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1018730C8;
  sub_1005B5FDC(a1 + 3, *a2);
  return a1;
}

void sub_100B4E8A0(_Unwind_Exception *a1)
{
}

void sub_100B4E8B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018730C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100B4E8C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018730C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100B4E8EC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void sub_100B4E8FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_10000AE14(v2 + 16);
    uint64_t v3 = (void *)sub_10000AE14(v2);
    operator delete(v3);
  }

void sub_100B4E93C(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    float v4 = (std::__shared_weak_count *)__p[3];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)__p[1];
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(__p);
  }

uint64_t sub_100B4E988(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  xpc_activity_state_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }

    while (v6 != v2);
  }

  if (v4 != 1.79769313e308)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101872F58);
    }
    xpc_activity_state_t v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning No expiration rule was added so the number of records will be unbounded.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101872F58);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Warning No expiration rule was added so the number of records will be unbounded.",  v15,  2);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLActivityRecorderDb<CLMobility::BoutBoundary>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMob ility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  return v7;
}

void sub_100B4EB84(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100B4EBB0(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  xpc_activity_state_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }

    while (v6 != v2);
  }

  if (v4 != 1.79769313e308)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101872F58);
    }
    xpc_activity_state_t v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning No expiration rule was added so the number of records will be unbounded.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101872F58);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Warning No expiration rule was added so the number of records will be unbounded.",  v15,  2);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeed ed(const CLAggregationRules &) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  return v7;
}

uint64_t sub_100B4EDAC(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  xpc_activity_state_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }

    while (v6 != v2);
  }

  if (v4 != 1.79769313e308)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101872F58);
    }
    xpc_activity_state_t v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning No expiration rule was added so the number of records will be unbounded.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101872F58);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Warning No expiration rule was added so the number of records will be unbounded.",  v15,  2);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeed ed(const CLAggregationRules &) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  return v7;
}

uint64_t sub_100B4EFA8(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  xpc_activity_state_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }

    while (v6 != v2);
  }

  if (v4 != 1.79769313e308)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101872F58);
    }
    xpc_activity_state_t v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning No expiration rule was added so the number of records will be unbounded.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101872F58);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Warning No expiration rule was added so the number of records will be unbounded.",  v15,  2);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::estimateRec ordsNeeded(const CLAggregationRules &) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB ::ClassBDataProtectionPolicy]",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  return v7;
}

void *sub_100B4F1A4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    xpc_activity_state_t v6 = result;
    __n128 result = sub_100006E1C(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8 - 3);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100B4F200(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_100B4F21C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    xpc_activity_state_t v6 = result;
    __n128 result = sub_100B4F294(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100B4F278(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_100B4F294(void *a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112LL) {
    sub_100007008();
  }
  __n128 result = (char *)sub_10001D66C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[240 * v4];
  return result;
}

unsigned __int8 *sub_100B4F2E4()
{
  uint64_t v1 = 28800LL;
  __n128 result = sub_10120AA44(v2, "ActivityIntervalMobilityCompanionSync", &v1, 0);
  qword_10199AA20 = v3;
  return result;
}

void sub_100B4F360()
{
  LOBYTE(v44) = 0;
  sub_1012049AC(buf, "MslLogger.Enable", (unsigned __int8 *)&v44, 0);
  if (buf[1])
  {
    uint64_t v0 = sub_1006E27E8();
    sub_100413284(v0, &v52);
    uint64_t v41 = 104857600LL;
    sub_10120AA44(v42, "MslLogger.FileSize", &v41, 0);
    *(void *)&__int128 v44 = v43;
    int v38 = 86400;
    sub_101206440(v39, "MslLogger.FileTimeInterval", &v38, 0);
    DWORD2(v44) = v40;
    int v35 = 50;
    sub_101206440(v36, "MslLogger.FilesToKeep", &v35, 0);
    HIDWORD(v44) = v37;
    uint64_t v1 = (char *)sub_1002F8DDC();
    sub_10030AC8C(v1, (uint64_t)&v32);
    uint64_t v2 = std::string::append(&v32, "MslLogger");
    __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    std::string::size_type cap = v2->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string v33 = v3;
    v2->__r_.__value_.__l.__size_ = 0LL;
    v2->__r_.__value_.__l.__cap_ = 0LL;
    v2->__r_.__value_.__r.__words[0] = 0LL;
    sub_10120A1B0((BOOL *)buf, "MslLogger.Directory", (__int128 *)v33, 0);
    if (SHIBYTE(v56) < 0)
    {
      sub_1010DD48C(&v45, (void *)__src, *((unint64_t *)&__src + 1));
    }

    else
    {
      __int128 v45 = __src;
      uint64_t v46 = v56;
    }

    sub_1010DDBC0(v27, "locationdSensors");
    sub_10120A1B0((BOOL *)&v29, "MslLogger.Prefix", (__int128 *)v27, 0);
    if (SHIBYTE(v31) < 0)
    {
      sub_1010DD48C(&v47, (void *)v30, *((unint64_t *)&v30 + 1));
    }

    else
    {
      __int128 v47 = v30;
      uint64_t v48 = v31;
    }

    sub_1010DDBC0(v22, "msl");
    sub_10120A1B0(v24, "MslLogger.Ext", (__int128 *)v22, 0);
    if (SHIBYTE(v26) < 0)
    {
      sub_1010DD48C(&v49, (void *)__p, *((unint64_t *)&__p + 1));
    }

    else
    {
      __int128 v49 = __p;
      uint64_t v50 = v26;
    }

    LODWORD(v51) = 4;
    uint64_t v19 = -1LL;
    sub_10120AA44(v20, "MslLogger.FlushTimeout", &v19, 0);
    *((void *)&v51 + 1) = v21;
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)__p);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v56) < 0) {
      operator delete((void *)__src);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v33[0]);
    }
    uint64_t v4 = operator new(0x10uLL);
    __int128 v11 = v44;
    if (SHIBYTE(v46) < 0)
    {
      sub_1010DD48C(&v12, (void *)v45, *((unint64_t *)&v45 + 1));
    }

    else
    {
      __int128 v12 = v45;
      uint64_t v13 = v46;
    }

    if (SHIBYTE(v48) < 0)
    {
      sub_1010DD48C(&v14, (void *)v47, *((unint64_t *)&v47 + 1));
    }

    else
    {
      __int128 v14 = v47;
      uint64_t v15 = v48;
    }

    if (SHIBYTE(v50) < 0)
    {
      sub_1010DD48C(&v16, (void *)v49, *((unint64_t *)&v49 + 1));
    }

    else
    {
      __int128 v16 = v49;
      uint64_t v17 = v50;
    }

    __int128 v18 = v51;
    *(_DWORD *)uint64_t v4 = 0;
    sub_100B4FEE4(&v11, v4 + 1);
    std::string v29 = v4;
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)v16);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)v14);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)v12);
    }
    if (*(_BYTE *)(v4[1] + 136LL))
    {
      qword_1019A1D08 = (uint64_t)v4;
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101873128);
      }
      double v5 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to open MslLogger", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101873128);
        }
        *(_WORD *)int64_t v24 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to open MslLogger",  v24,  2,  v11);
        double v10 = (uint8_t *)v9;
        sub_10029211C("Generic", 1LL, 0, 0LL, "static void CMMsl::Logger::create()", "%s\n", v9);
        if (v10 != buf) {
          free(v10);
        }
      }

      sub_100B4FEB8(v4 + 1, 0LL);
      operator delete(v4);
    }

    if (SHIBYTE(v50) < 0) {
      operator delete((void *)v49);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete((void *)v47);
    }
    if (SHIBYTE(v46) < 0) {
      operator delete((void *)v45);
    }
    xpc_activity_state_t v6 = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

void sub_100B4F928( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, uint64_t a38, uint64_t *a39, void *a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
}

void sub_100B4FAB0()
{
}

void sub_100B4FAB8(const char *a1)
{
  uint64_t v2 = sub_1006E27E8();
  sub_100413284(v2, &v12);
  if (sub_1002A6E78(v12, a1, &v11, 0xFFFFFFFFLL))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101873128);
    }
    __int128 v3 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Legacy motion setting found '%{public}s'. Clearing.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101873128);
      }
      int v14 = 136446210;
      uint64_t v15 = a1;
      unint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Legacy motion setting found '%{public}s'. Clearing.",  &v14,  12);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLObsoleteMotionDefaultsWrite(const char *)", "%s\n", v8);
    }

    sub_1002A667C(v12, a1, 0xFFFFFFFFLL);
    if (sub_1002A6E78(v12, a1, &v11, 0xFFFFFFFFLL))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101873128);
      }
      uint64_t v4 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Failed to clear legacy motion setting: '%{public}s'. Stale profile?",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101873128);
        }
        int v14 = 136446210;
        uint64_t v15 = a1;
        LODWORD(v10) = 12;
        double v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to clear legacy motion setting: '%{public}s'. Stale profile?",  &v14,  v10);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLObsoleteMotionDefaultsWrite(const char *)", "%s\n", v9);
      }
    }
  }

  double v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_100B4FE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100B4FE48()
{
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_101873148);
  }
  uint64_t v0 = qword_1019A1D08;
  if (qword_1019A1D08)
  {
    os_unfair_lock_lock((os_unfair_lock_t)qword_1019A1D08);
    sub_100B4FEB8((uint64_t *)(v0 + 8), 0LL);
    os_unfair_lock_unlock((os_unfair_lock_t)v0);
  }

void sub_100B4FEB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_10111CCBC(v3);
    operator delete(v4);
  }

void sub_100B4FEE4(__int128 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x98uLL);
  __int128 v5 = *a1;
  if (*((char *)a1 + 39) < 0)
  {
    sub_1010DD48C(&v6, *((void **)a1 + 2), *((void *)a1 + 3));
  }

  else
  {
    __int128 v6 = a1[1];
    uint64_t v7 = *((void *)a1 + 4);
  }

  if (*((char *)a1 + 63) < 0)
  {
    sub_1010DD48C(&v8, *((void **)a1 + 5), *((void *)a1 + 6));
  }

  else
  {
    __int128 v8 = *(__int128 *)((char *)a1 + 40);
    uint64_t v9 = *((void *)a1 + 7);
  }

  if (*((char *)a1 + 87) < 0)
  {
    sub_1010DD48C(&__p, *((void **)a1 + 8), *((void *)a1 + 9));
  }

  else
  {
    __int128 __p = a1[4];
    uint64_t v11 = *((void *)a1 + 10);
  }

  __int128 v12 = *(__int128 *)((char *)a1 + 88);
  sub_10111CC08(v4, &v5);
  *a2 = v4;
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)v8);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
}

void sub_100B50000( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  operator delete(v22);
  _Unwind_Resume(a1);
}

id sub_100B50054(uint64_t a1)
{
  id v2 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_10111D87C(v3);
  }
  uint64_t v4 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  uint64_t v5 = *(void *)(a1 + 8);
  __int128 v6 = (void *)(v5 + 16);
  uint64_t v7 = -[NSFileManager contentsOfDirectoryAtPath:error:]( v4,  "contentsOfDirectoryAtPath:error:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6),  0LL);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (void *)(v8 + 40);
  uint64_t v10 = -[NSArray filteredArrayUsingPredicate:]( v7,  "filteredArrayUsingPredicate:",  +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"self BEGINSWITH %@",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9)));
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v11 = -[NSArray countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v22;
    do
    {
      for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)i);
        uint64_t v16 = *(void *)(a1 + 8);
        uint64_t v17 = (void *)(v16 + 16);
        __int128 v18 = -[NSString stringByAppendingPathComponent:]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17),  "stringByAppendingPathComponent:",  v15);
        id v19 = [@"/var/mobile/Library/Logs/CrashReporter/com.apple.locationd" stringByAppendingPathComponent:v15];
        sub_100292DA4(-[NSString UTF8String](v18, "UTF8String"), (const char *)[v19 UTF8String]);
        [v2 addObject:v19];
        sub_100292BC4((const char *)[v19 UTF8String]);
      }

      id v12 = -[NSArray countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
    }

    while (v12);
  }

  return v2;
}

id sub_100B50274(uint64_t a1)
{
  if (!*(_BYTE *)(*(void *)(a1 + 8) + 136LL)) {
    return 0LL;
  }
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    sub_10111D87C(v2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v3 + 104);
  uint64_t v5 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(v6 + 16);
  uint64_t v8 = -[NSString stringByAppendingPathComponent:]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7),  "stringByAppendingPathComponent:",  v5);
  id v9 = [@"/var/mobile/Library/Logs/CrashReporter/com.apple.locationd" stringByAppendingPathComponent:v5];
  sub_100292DA4(-[NSString UTF8String](v8, "UTF8String"), (const char *)[v9 UTF8String]);
  sub_100292BC4((const char *)[v9 UTF8String]);
  return v9;
}

uint64_t sub_100B50354(uint64_t a1, uint64_t *a2, double a3)
{
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B503DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B503F0(uint64_t a1, uint64_t *a2, double a3)
{
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50478(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B5048C(uint64_t a1, uint64_t *a2, double a3)
{
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50514(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50528(uint64_t a1, uint64_t *a2, double a3)
{
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B505B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B505C4(uint64_t a1, uint64_t *a2, double a3)
{
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B5064C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50660(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B506E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B506FC(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50784(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50798(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50820(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50834(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B508BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B508D0(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50958(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B5096C(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B509F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50A08(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50AA4(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50B40(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50BDC(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50C78(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50D14(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50DB0(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50E4C(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50EE8(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B50F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B50F84(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B5100C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B51020(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B510A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B510BC(uint64_t a1, uint64_t *a2, double a3)
{
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1011CF3D0(a1, (uint64_t)v9);
  return sub_101127D00((PB::Base *)v9);
}

void sub_100B51144(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B51158(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100B51188(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_100B4FEB8(v2 + 1, 0LL);
    operator delete(v2);
  }

void sub_100B512EC(id a1)
{
  qword_10199AB28 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLAvengerScannerSilo");
}

void sub_100B52B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _DWORD v10[2] = sub_100B52BE8;
  v10[3] = &unk_10183D288;
  void v10[4] = a2;
  v10[5] = a3;
  uint64_t v9 = *(void *)(a1 + 32);
  v10[6] = a4;
  v10[7] = v9;
  dispatch_async(v8, v10);
}

void sub_100B52BE8(uint64_t a1)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101873200);
  }
  uint64_t v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    int v10 = 68289794;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v3;
    __int16 v16 = 2114;
    uint64_t v17 = v4;
    __int16 v18 = 2114;
    uint64_t v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLAvengerScanner: number of advertisement buffers query, total:%{public, location:esc ape_only}@, remaining:%{public, location:escape_only}@, error:%{public, location:escape_only}@}",  (uint8_t *)&v10,  0x30u);
  }

  if (*(void *)(a1 + 48))
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101873200);
    }
    uint64_t v6 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v10 = 68289283;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2113;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLAvengerScanner: Error querying num buffers available, error:%{private, location:escape_only}@}",  (uint8_t *)&v10,  0x1Cu);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101873200);
      }
    }

    uint64_t v8 = (os_log_s *)qword_1019349B8;
    if (os_signpost_enabled((os_log_t)qword_1019349B8))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = 68289283;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2113;
      uint64_t v15 = v9;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLAvengerScanner: Error querying num buffers available",  "{msg%{public}.0s:CLAvengerScanner: Error querying num buffers available, error:%{private, location:escape_only}@}",  (uint8_t *)&v10,  0x1Cu);
    }
  }

  else
  {
    objc_msgSend( *(id *)(*(void *)(a1 + 56) + 72),  "setTotalAdvertisementBuffersAvailable:",  objc_msgSend(*(id *)(a1 + 32), "unsignedIntegerValue"));
    *(_BYTE *)(*(void *)(a1 + 56) + 24LL) = 1;
  }

void sub_100B548C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a22, 8);
  uint64_t v29 = a28;
  a28 = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B54924(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0LL;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t sub_100B54934(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100B54954(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t result = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100B5527C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a37, 8);
  uint64_t v44 = a43;
  a43 = 0LL;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
  }
  _Unwind_Resume(a1);
}

id sub_100B552F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return [*(id *)(a1 + 32) clearLongAggressiveTimeoutBlockForClient:*(void *)(a1 + 40)];
}

id sub_100B5534C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 72) downgradedDuringCoexFriendlyAggressiveDiscoveryScan];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    [*(id *)(v3 + 112) longAggressiveScanCoexImpactedDuration];
    double v5 = v4;
    [*(id *)(*(void *)(a1 + 32) + 112) longAggressiveScanNonCoexImpactedDuration];
    double v7 = v5 - v6;
    double v8 = 0.0;
    if (v7 > 0.0)
    {
      [*(id *)(*(void *)(a1 + 32) + 112) longAggressiveScanCoexImpactedDuration];
      double v10 = v9;
      [*(id *)(*(void *)(a1 + 32) + 112) longAggressiveScanNonCoexImpactedDuration];
      double v8 = v10 - v11;
    }

    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101873200);
    }
    __int16 v12 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      int v19 = 0;
      __int16 v20 = 2082;
      __int128 v21 = "";
      __int16 v22 = 1026;
      int v23 = (int)v8;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLAvengerScanner: extending LongAggressiveScan due to downgrade, remainingDuration:%{public}d}",  buf,  0x18u);
    }

    [*(id *)(a1 + 32) clearLongAggressiveTimeoutBlockForClient:*(void *)(a1 + 40)];
    uint64_t v13 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100B55554;
    v17[3] = &unk_1018731B8;
    _DWORD v17[4] = v13;
    return [v13 createLongAggressiveTimeoutBlockForClient:*(void *)(a1 + 40) seconds:(uint64_t)v8 withBlock:v17];
  }

  else
  {
    [*(id *)(v3 + 72) stopCoexFriendlyAggressiveScan];
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v16 = *(void *)(v15 + 48);
    *(void *)(v15 + 48) = 0LL;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
    return [*(id *)(a1 + 32) clearLongAggressiveTimeoutBlockForClient:*(void *)(a1 + 40)];
  }

id sub_100B55554(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return [*(id *)(a1 + 32) clearLongAggressiveTimeoutBlockForClient:*(void *)(a1 + 40)];
}

id sub_100B55B68(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 72) stopHawkeyeLowEnergyScan];
}

uint64_t sub_100B56400(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100B56624(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100B56950(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100B56A08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100B56ABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100B56BB0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onAnalyticsTimerFired:*(void *)(*(void *)(a1 + 32) + 88)];
}

void sub_100B56F18(id a1)
{
  qword_1019349B8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100B56F44(id a1)
{
  qword_101934848 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_100B56F70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 244);
  *(int8x16_t *)(a2 + 72) = vextq_s8(*(int8x16_t *)(a1 + 80), *(int8x16_t *)(a1 + 80), 8uLL);
  int32x2_t v5 = *(int32x2_t *)(a1 + 132);
  *(_WORD *)(a2 + 241) = *(_WORD *)(a1 + 57);
  *(void *)(a2 + 228) = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 96);
  *(_BYTE *)(a2 + 238) = *(_BYTE *)(a1 + 129);
  *(_BYTE *)(a2 + 239) = *(_BYTE *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 144);
  *(void *)(a2 + 176) = v6;
  *(void *)(a2 + 184) = v7;
  *(_BYTE *)(a2 + 237) = *(_BYTE *)(a1 + 920);
  *(_BYTE *)(a2 + 236) = *(_BYTE *)(a1 + 1092);
  uint64_t v8 = *(void *)(a1 + 952);
  uint64_t v9 = *(void *)(a1 + 944);
  uint64_t v10 = *(void *)(a1 + 960);
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(a2 + 240) = *(_BYTE *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 992);
  uint64_t v12 = *(void *)(a1 + 984);
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v12;
  *(int32x2_t *)&__int128 v13 = vrev64_s32(*(int32x2_t *)(a1 + 1096));
  *((int32x2_t *)&v13 + 1) = vrev64_s32(v5);
  *(int8x16_t *)(a2 + 192) = vextq_s8(*(int8x16_t *)(a1 + 112), *(int8x16_t *)(a1 + 112), 8uLL);
  *(_OWORD *)(a2 + 208) = v13;
  uint64_t v14 = *(void *)(a1 + 1104);
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v10;
  uint64_t v15 = *(void *)(a1 + 1112);
  *(_DWORD *)(a2 + 244) = v4 | 0x7FFFFFF;
  *(void *)(a2 + 24) = v15;
  sub_10114989C((uint64_t)v90);
  int8x16_t v92 = vextq_s8(*(int8x16_t *)(a1 + 560), *(int8x16_t *)(a1 + 560), 8uLL);
  uint64_t v91 = *(void *)(a1 + 576);
  int v94 = *(_DWORD *)(a1 + 584);
  v95 |= 0xE7u;
  int32x2_t v93 = vrev64_s32(*(int32x2_t *)(a1 + 544));
  sub_101147DEC((uint64_t)v86);
  v89 |= 0x78u;
  __int128 v16 = *(_OWORD *)(a1 + 592);
  __int128 v88 = *(_OWORD *)(a1 + 608);
  __int128 v87 = v16;
  sub_10114989C((uint64_t)v80);
  uint64_t v17 = *(void *)(a1 + 216);
  int8x16_t v81 = vextq_s8(*(int8x16_t *)(a1 + 224), *(int8x16_t *)(a1 + 224), 8uLL);
  int v84 = *(_DWORD *)(a1 + 240);
  v85 |= 0xE7u;
  int32x2_t v18 = vrev64_s32(*(int32x2_t *)(a1 + 200));
  uint64_t v82 = v17;
  int32x2_t v83 = v18;
  sub_100B57454(a1 + 248, (uint64_t)v79);
  sub_10114989C((uint64_t)v73);
  uint64_t v19 = *(void *)(a1 + 424);
  int8x16_t v74 = vextq_s8(*(int8x16_t *)(a1 + 432), *(int8x16_t *)(a1 + 432), 8uLL);
  int v77 = *(_DWORD *)(a1 + 448);
  v78 |= 0xE7u;
  int32x2_t v20 = vrev64_s32(*(int32x2_t *)(a1 + 408));
  uint64_t v75 = v19;
  int32x2_t v76 = v20;
  sub_100B574CC(a1 + 456, (uint64_t)v72);
  sub_101146BAC((uint64_t)v68);
  v71 |= 0xFu;
  __int128 v21 = *(_OWORD *)(a1 + 176);
  __int128 v69 = *(_OWORD *)(a1 + 160);
  __int128 v70 = v21;
  sub_10114989C((uint64_t)v62);
  uint64_t v22 = *(void *)(a1 + 648);
  int8x16_t v63 = vextq_s8(*(int8x16_t *)(a1 + 656), *(int8x16_t *)(a1 + 656), 8uLL);
  int v66 = *(_DWORD *)(a1 + 672);
  v67 |= 0xE7u;
  int32x2_t v23 = vrev64_s32(*(int32x2_t *)(a1 + 632));
  uint64_t v64 = v22;
  int32x2_t v65 = v23;
  sub_100B5751C(a1 + 680, (uint64_t)v61);
  sub_100B575A8(a1 + 1000, (uint64_t)v60);
  __int128 v24 = operator new(0x38uLL);
  uint64_t v25 = sub_1011499C0((uint64_t)v24, (uint64_t)v90);
  uint64_t v26 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = v25;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  __int128 v27 = operator new(0x60uLL);
  double v28 = sub_101147F48((uint64_t)v27, (uint64_t)v86);
  uint64_t v29 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v30;
  if (v29) {
    (*(void (**)(uint64_t, double))(*(void *)v29 + 8LL))(v29, v28);
  }
  uint64_t v31 = operator new(0x38uLL);
  uint64_t v32 = sub_1011499C0((uint64_t)v31, (uint64_t)v80);
  uint64_t v33 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v32;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
  }
  std::string v34 = operator new(0xB8uLL);
  double v35 = sub_101147294((uint64_t)v34, (uint64_t)v79);
  uint64_t v36 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v37;
  if (v36) {
    (*(void (**)(uint64_t, double))(*(void *)v36 + 8LL))(v36, v35);
  }
  int v38 = operator new(0x38uLL);
  uint64_t v39 = sub_1011499C0((uint64_t)v38, (uint64_t)v73);
  uint64_t v40 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = v39;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
  }
  uint64_t v41 = operator new(0xE0uLL);
  double v42 = sub_10114AA2C((uint64_t)v41, (uint64_t)v72);
  uint64_t v43 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = v44;
  if (v43) {
    (*(void (**)(uint64_t, double))(*(void *)v43 + 8LL))(v43, v42);
  }
  __int128 v45 = operator new(0x30uLL);
  double v46 = sub_101146C60((uint64_t)v45, (uint64_t)v68);
  uint64_t v47 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v48;
  if (v47) {
    (*(void (**)(uint64_t, double))(*(void *)v47 + 8LL))(v47, v46);
  }
  __int128 v49 = operator new(0x38uLL);
  uint64_t v50 = sub_1011499C0((uint64_t)v49, (uint64_t)v62);
  uint64_t v51 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = v50;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
  }
  uint64_t v52 = operator new(0x100uLL);
  double v53 = sub_101148930((uint64_t)v52, (uint64_t)v61);
  uint64_t v54 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = v55;
  if (v54) {
    (*(void (**)(uint64_t, double))(*(void *)v54 + 8LL))(v54, v53);
  }
  uint64_t v56 = operator new(0x40uLL);
  double v57 = sub_1011463EC((uint64_t)v56, (uint64_t)v60);
  uint64_t v58 = *(void *)(a2 + 64);
  *(void *)(a2 + sub_10000AE14(v2 - 64) = v59;
  if (v58) {
    (*(void (**)(uint64_t, double))(*(void *)v58 + 8LL))(v58, v57);
  }
  PB::Base::~Base((PB::Base *)v60);
  PB::Base::~Base((PB::Base *)v61);
  PB::Base::~Base((PB::Base *)v62);
  PB::Base::~Base((PB::Base *)v68);
  PB::Base::~Base((PB::Base *)v72);
  PB::Base::~Base((PB::Base *)v73);
  PB::Base::~Base((PB::Base *)v79);
  PB::Base::~Base((PB::Base *)v80);
  PB::Base::~Base((PB::Base *)v86);
  PB::Base::~Base((PB::Base *)v90);
}

void sub_100B573CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

__n128 sub_100B57454@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_101147004(a2);
  int v4 = *(_DWORD *)(v3 + 176);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  __int128 v6 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v3 + 24) = v5;
  *(_OWORD *)(v3 + sub_10000AE14(v2 - 64) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v3 + 80) = v6;
  *(void *)(v3 + 48) = *(void *)(a1 + 32);
  __int128 v7 = *(_OWORD *)(a1 + 136);
  __int128 v8 = *(_OWORD *)(a1 + 88);
  __int128 v9 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v3 + 160) = v7;
  *(_OWORD *)(v3 + 112) = v8;
  *(_OWORD *)(v3 + 128) = v9;
  *(_DWORD *)(v3 + 176) = v4 | 0x1FFFAF;
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v3 + 96) = result;
  return result;
}

__n128 sub_100B574CC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_10114A710(a2);
  int v4 = *(_DWORD *)(v3 + 216);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)a1;
  __int128 v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 48);
  __n128 result = *(__n128 *)(a1 + 64);
  *(__n128 *)(v3 + 136) = result;
  *(_OWORD *)(v3 + 88) = v5;
  *(_DWORD *)(v3 + 216) = v4 | 0x3FF00;
  *(_OWORD *)(v3 + 104) = v6;
  return result;
}

__n128 sub_100B5751C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_1011485A4(a2);
  __int128 v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 24) = v4;
  __int128 v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 56) = v5;
  __int128 v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 88) = v6;
  __int128 v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v3 + 120) = v7;
  __int128 v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v3 + 152) = v8;
  __int128 v9 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v3 + 184) = v9;
  __int128 v10 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v3 + 216) = *(_OWORD *)(a1 + 208);
  __n128 result = *(__n128 *)(a1 + 224);
  *(__n128 *)(v3 + 232) = result;
  *(_DWORD *)(v3 + 248) |= 0x3FFFFFFFu;
  *(_OWORD *)(v3 + 200) = v10;
  return result;
}

double sub_100B575A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_101146274(a2);
  double result = *(double *)(a1 + 40);
  __int16 v5 = *(_WORD *)(v3 + 60);
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 56);
  *(_WORD *)(v3 + 55) = *(_WORD *)(a1 + 1);
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(a1 + 32);
  *(_WORD *)(v3 + 53) = *(_WORD *)(a1 + 33);
  *(int8x16_t *)(v3 + 8) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  uint64_t v6 = *(void *)(a1 + 24);
  *(_WORD *)(v3 + 60) = v5 | 0x7EF;
  *(void *)(v3 + 24) = v6;
  *(double *)(v3 + 32) = result;
  return result;
}

void *sub_100B57614(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1010DD48C(v11, *(void **)a5, *(void *)(a5 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a5;
    uint64_t v12 = *(void *)(a5 + 16);
  }

  if (*(char *)(a5 + 47) < 0)
  {
    sub_1010DD48C(&__p, *(void **)(a5 + 24), *(void *)(a5 + 32));
  }

  else
  {
    __int128 __p = *(_OWORD *)(a5 + 24);
    uint64_t v14 = *(void *)(a5 + 40);
  }

  uint64_t v15 = *(void *)(a5 + 48);
  sub_1004C625C((uint64_t)a1, a2, a3, a4, (__int128 *)v11);
  *a1 = off_1018732D8;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  *a1 = off_101873250;
  return a1;
}

void sub_100B57710( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B57744(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1004C63B0(a1);
  operator delete(v1);
}

void *sub_100B57758@<X0>(uint64_t a1@<X8>)
{
  v6[0] = &off_101873350;
  v6[1] = sub_100B578B4;
  v6[2] = 0LL;
  __int128 v7 = v6;
  sub_1010DDBC0(__p, "kCLConnectionMessageLocationPush");
  sub_100892A18((uint64_t)v10, (uint64_t)v6);
  sub_100B5837C(a1, (unsigned __int8 *)__p, 1LL);
  uint64_t v2 = v11;
  if (v11 == v10)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v10;
  }

  else
  {
    if (!v11) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  double result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    double result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100B57868( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t v14 = a12;
  if (a12 == &a9)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100B578B4(uint64_t a1, CLConnectionMessage **a2)
{
  __int128 v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1002A5550((int)v14, Dictionary);
  BOOL v13 = 0;
  if ((sub_1002A6F64((uint64_t)v14, "kCLConnectionMessageSubscribeKey", &v13) & 1) != 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101873320);
    }
    uint64_t v6 = qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      int32x2_t v18 = "";
      __int16 v19 = 2114;
      uint64_t v20 = v7;
      __int16 v21 = 1026;
      BOOL v22 = v13;
      __int128 v8 = "{msg%{public}.0s:#LocationPush client attempted to subscribe, client:%{public, location:escape_on"
           "ly}@, subscribe:%{public}hhd}";
      char v9 = (os_log_s *)v6;
      uint32_t v10 = 34;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101873320);
    }
    uint64_t v11 = qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int32x2_t v18 = "";
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int128 v8 = "{msg%{public}.0s:#LocationPush couldn't get value for kCLConnectionMessageSubscribeKey key for client"
           ", client:%{public, location:escape_only}@}";
      char v9 = (os_log_s *)v11;
      uint32_t v10 = 28;
      goto LABEL_10;
    }
  }

  sub_1002A5590(v14);
}

void sub_100B57A94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

uint64_t sub_100B57ACC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[6];
  sub_1004C6CFC(&v20, a1 + 1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 32LL))(v4, &v20, a2);
  uint64_t v6 = v5;
  uint64_t v7 = v21;
  if (!v21) {
    goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v6) {
      return v6;
    }
  }

  else
  {
LABEL_5:
    if (!v5) {
      return v6;
    }
  }

  objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v6, v10) & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101873320);
    }
    uint64_t v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      uint64_t v12 = a1[8];
      objc_opt_class(v6);
      uint64_t v14 = -[NSString UTF8String](NSStringFromClass(v13), "UTF8String");
      *(_DWORD *)buf = 68289538;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = v12;
      __int16 v28 = 2082;
      uint64_t v29 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Failed to downcast objc type, clientKeyPath:%{public, location:escape_only}@, fou ndClass:%{public, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101873320);
      }
    }

    uint64_t v15 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      uint64_t v16 = a1[8];
      objc_opt_class(v6);
      int32x2_t v18 = -[NSString UTF8String](NSStringFromClass(v17), "UTF8String");
      *(_DWORD *)buf = 68289538;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = v16;
      __int16 v28 = 2082;
      uint64_t v29 = v18;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Failed to downcast objc type",  "{msg%{public}.0s:Failed to downcast objc type, clientKeyPath:%{public, location:escape_only}@, fou ndClass:%{public, location:escape_only}s}",  buf,  0x26u);
    }

    return 0LL;
  }

  return v6;
}

void sub_100B57D30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100B57D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  sub_1004C6CFC(&v10, (void *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v6 + 24LL))(v6, &v10, a2, a3);
  uint64_t v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

void sub_100B57DE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100B57DFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  sub_1004C6CFC(&v6, (void *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 40LL))(v2, &v6);
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B57E80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100B57E94(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 144))
  {
    else {
      unsigned int v2 = 0;
    }
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101873320);
    }
    uint64_t v3 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      v5[0] = 68289538;
      v5[1] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2114;
      uint64_t v9 = v4;
      __int16 v10 = 1026;
      unsigned int v11 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#LocationPush checking topic should be registered , client:%{public, location:escap e_only}@, shouldBeRegistered:%{public}hhd}",  (uint8_t *)v5,  0x22u);
    }
  }

void *sub_100B57FC8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "Push");
}

void sub_100B57FDC(uint64_t a1)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101873320);
  }
  unsigned int v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    __int16 v6 = "";
    __int16 v7 = 2114;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#LocationPush client did invalidate , client:%{public, location:escape_only}@}",  (uint8_t *)v4,  0x1Cu);
  }

id sub_100B580CC(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 64), "clientKey"), @"ClientKeyPath");
  uint64_t v3 = (void *)(a1 + 96);
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3),  @"SubscriptionStorageName");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 136)),  @"AuthContext");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 252)),  @"TopicRegistrationState");
  return v2;
}

void sub_100B58194(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100B581C0(uint64_t result)
{
  if (!*(_BYTE *)(result + 248)) {
    sub_10125FF04();
  }
  return result;
}

__n128 sub_100B581DC(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &off_101873350;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100B58218(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101873350;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100B5823C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100B58244(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100B58280()
{
}

void sub_100B5828C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  __int16 v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  __int16 v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    __int16 v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  Class v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  __int16 v10 = v17;
  if (v17)
  {
    unsigned int v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    Class v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100B58360( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100B5837C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100B583F4(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100B583E0(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100B583F4(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  __int16 v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    Class v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100B58674(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *BOOL v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100B5865C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100B58674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100B586E8(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100B586D0(_Unwind_Exception *a1)
{
}

void *sub_100B586E8(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100B58740(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100B5875C(_DWORD *a1)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_1018733F0);
  }
  uint64_t v1 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "#FenceMetrics Unexpected event type for metric",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_1018733F0);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "#FenceMetrics Unexpected event type for metric",  v5,  2);
    __int128 v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static CLFenceAnalytics::LocationMonitorTriggerEventType CLFenceAnalytics::eventTypeFromNotification(const CLFence Manager_Type::Notification &)",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100B58904(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 160);
  if ((v1 & 0x80) != 0) {
    return 3LL;
  }
  double v2 = *(double *)(a1 + 96);
  BOOL v4 = v2 > 400.0 || *(_BYTE *)(a1 + 188) != 0 || *(_DWORD *)(a1 + 180) == 2;
  if (!v4 && (v1 & 0x20) == 0 && *(void *)(a1 + 232) == *(void *)(a1 + 224)) {
    return 0LL;
  }
  if (v2 <= 0.0)
  {
    if (*(void *)(a1 + 232) == *(void *)(a1 + 224))
    {
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_1018733F0);
      }
      uint64_t v6 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "#FenceMetrics Unexpected fence type for metric",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_1018733F0);
        }
        v9[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "#FenceMetrics Unexpected fence type for metric",  v9,  2);
        unint64_t v8 = (uint8_t *)v7;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "static CLFenceAnalytics::LocationMonitorTriggerFenceType CLFenceAnalytics::fenceTypeFromFence(const CLFenceMan ager_Type::Fence &)",  "%s\n",  v7);
        if (v8 != buf) {
          free(v8);
        }
      }

      return 0xFFFFFFFFLL;
    }

    else
    {
      return 4LL;
    }
  }

  else if (v2 < 7000.0)
  {
    return 1LL;
  }

  else
  {
    return 2LL;
  }

uint64_t sub_100B58B14(uint64_t a1)
{
  *(_BYTE *)a1 = sub_1004FAA50();
  *(_BYTE *)(a1 + 1) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)&__int128 v2 = -1LL;
  *((void *)&v2 + 1) = -1LL;
  *(_OWORD *)(a1 + 304) = v2;
  *(_OWORD *)(a1 + 320) = v2;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

BOOL sub_100B58B88(_BYTE *a1)
{
  return *a1 && a1[1] == 0;
}

uint64_t sub_100B58BA8@<X0>( _DWORD *a1@<X0>, uint64_t a2@<X1>, CLMotionActivity *a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(void *)a4 = 0LL;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 21) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  *(_DWORD *)(a4 + 32) = 1000;
  *(_BYTE *)(a4 + 36) = 0;
  *(void *)(a4 + 40) = 0LL;
  *(_DWORD *)(a4 + 48) = -1;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a4 + 56) = _Q1;
  *(void *)(a4 + 72) = 0xBFF0000000000000LL;
  *(void *)(a4 + 80) = 0xFFFFFFFF00000000LL;
  *(void *)(a4 + 88) = 0LL;
  *(void *)(a4 + 96) = 0xBFF0000000000000LL;
  *(void *)(a4 + 104) = 0LL;
  std::string::operator=((std::string *)a4, (const std::string *)a2);
  *(_DWORD *)(a4 + 48) = sub_100B5875C(a1);
  double v15 = *(double *)(a2 + 80);
  *(void *)(a4 + 56) = *(void *)(a2 + 88);
  double v16 = sub_100D2EC74(*(double *)(a2 + 72), v15, *(double *)(a2 + 500), *(double *)(a2 + 508)) - *(double *)(a2 + 88);
  double v17 = *(double *)(a2 + 128);
  double v18 = a5 - v17;
  BOOL v19 = v17 <= 0.0;
  double v20 = -1.0;
  if (!v19) {
    double v20 = v18;
  }
  *(double *)(a4 + sub_10000AE14(v2 - 64) = v16;
  *(double *)(a4 + 72) = v20;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a4 + 84) = sub_100B58904(a2);
  int v21 = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a4 + 91) = (~(_BYTE)v21 & 5) == 0LL;
  *(_BYTE *)(a4 + 88) = (v21 & 0x10) != 0;
  *(_BYTE *)(a4 + 89) = *(void *)(a2 + 232) != *(void *)(a2 + 224);
  *(_BYTE *)(a4 + 90) = *(_BYTE *)(a2 + 188);
  *(_BYTE *)(a4 + 92) = CLMotionActivity::isInVehicle(a3);
  *(_BYTE *)(a4 + 93) = CLMotionActivity::isDriving(a3);
  *(_BYTE *)(a4 + 94) = CLMotionActivity::isStatic(a3);
  uint64_t result = CLMotionActivity::isWalking(a3);
  *(_BYTE *)(a4 + 95) = result;
  double v23 = *(double *)(a2 + 152);
  if (v23 <= 0.0) {
    double v23 = -1.0;
  }
  int32x2_t v24 = vrev64_s32(*(int32x2_t *)(a2 + 140));
  *(double *)(a4 + 96) = v23;
  *(int32x2_t *)(a4 + 104) = v24;
  return result;
}

void sub_100B58D10(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100B58D2C(uint64_t *a1)
{
  if (qword_101934A60 != -1) {
    dispatch_once(&qword_101934A60, &stru_101873410);
  }
  __int128 v2 = (os_log_s *)qword_101934A68;
  if (os_log_type_enabled((os_log_t)qword_101934A68, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v3 = (uint64_t *)*a1;
    int v4 = *((unsigned __int8 *)a1 + 24);
    int v5 = *((unsigned __int8 *)a1 + 25);
    int v6 = *((unsigned __int8 *)a1 + 26);
    int v7 = *((unsigned __int8 *)a1 + 27);
    int v8 = *((_DWORD *)a1 + 12);
    uint64_t v9 = a1[7];
    uint64_t v10 = a1[8];
    uint64_t v11 = a1[9];
    uint64_t v12 = a1[12];
    int v13 = *((_DWORD *)a1 + 20);
    int v14 = *((_DWORD *)a1 + 21);
    int v15 = *((_DWORD *)a1 + 26);
    int v16 = *((_DWORD *)a1 + 27);
    int v17 = *((unsigned __int8 *)a1 + 91);
    int v18 = *((unsigned __int8 *)a1 + 88);
    int v19 = *((unsigned __int8 *)a1 + 89);
    int v20 = *((unsigned __int8 *)a1 + 90);
    int v21 = *((unsigned __int8 *)a1 + 92);
    int v22 = *((unsigned __int8 *)a1 + 93);
    int v23 = *((unsigned __int8 *)a1 + 94);
    int v24 = *((unsigned __int8 *)a1 + 95);
    *(_DWORD *)buf = 67115011;
    int v99 = 1;
    __int16 v100 = 2048;
    uint64_t v101 = 0LL;
    __int16 v102 = 2080;
    double v103 = v3;
    __int16 v104 = 1024;
    int v105 = v4;
    __int16 v106 = 1024;
    int v107 = v5;
    __int16 v108 = 1024;
    int v109 = v6;
    __int16 v110 = 1024;
    int v111 = v7;
    __int16 v112 = 1024;
    int v113 = v8;
    __int16 v114 = 2048;
    uint64_t v115 = v9;
    __int16 v116 = 2048;
    uint64_t v117 = v10;
    __int16 v118 = 2048;
    uint64_t v119 = v11;
    __int16 v120 = 1024;
    int v121 = v13;
    __int16 v122 = 2049;
    uint64_t v123 = v12;
    __int16 v124 = 1025;
    int v125 = v14;
    __int16 v126 = 1025;
    int v127 = v15;
    __int16 v128 = 1025;
    int v129 = v16;
    __int16 v130 = 1025;
    int v131 = v17;
    __int16 v132 = 1025;
    int v133 = v18;
    __int16 v134 = 1025;
    int v135 = v19;
    __int16 v136 = 1025;
    int v137 = v20;
    __int16 v138 = 1025;
    int v139 = v21;
    __int16 v140 = 1025;
    int v141 = v22;
    __int16 v142 = 1025;
    int v143 = v23;
    __int16 v144 = 1025;
    int v145 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#FenceMetrics metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeL ocked,%d,airplaneMode,%d,eventType,%d,eventRadius,%.2f,eventDistance,%.2f,eventLatency,%.3f,eventMask,0x%x,sinceLa st,%{private}.1f,fenceType,%{private}d,fenceAPs,%{private}d,totalAPs,%{private}d,conservative,%{private}d,emergenc y,%{private}d,polygonal,%{private}d,throttled,%{private}d,inVehicle,%{private}d,driving,%{private}d,static,%{priva te}d,pedestrian,%{private}d",  buf,  0xAAu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A60 != -1) {
      dispatch_once(&qword_101934A60, &stru_101873410);
    }
    __int16 v26 = (uint64_t *)*a1;
    int v27 = *((unsigned __int8 *)a1 + 24);
    int v28 = *((unsigned __int8 *)a1 + 25);
    int v29 = *((unsigned __int8 *)a1 + 26);
    int v30 = *((unsigned __int8 *)a1 + 27);
    int v31 = *((_DWORD *)a1 + 12);
    uint64_t v32 = a1[7];
    uint64_t v33 = a1[8];
    uint64_t v34 = a1[9];
    uint64_t v35 = a1[12];
    int v36 = *((_DWORD *)a1 + 20);
    int v37 = *((_DWORD *)a1 + 21);
    int v38 = *((_DWORD *)a1 + 26);
    int v39 = *((_DWORD *)a1 + 27);
    int v40 = *((unsigned __int8 *)a1 + 91);
    int v41 = *((unsigned __int8 *)a1 + 88);
    int v42 = *((unsigned __int8 *)a1 + 89);
    int v43 = *((unsigned __int8 *)a1 + 90);
    int v44 = *((unsigned __int8 *)a1 + 92);
    int v45 = *((unsigned __int8 *)a1 + 93);
    int v46 = *((unsigned __int8 *)a1 + 94);
    int v47 = *((unsigned __int8 *)a1 + 95);
    v51[0] = 67115011;
    v51[1] = 1;
    __int16 v52 = 2048;
    uint64_t v53 = 0LL;
    __int16 v54 = 2080;
    uint64_t v55 = v26;
    __int16 v56 = 1024;
    int v57 = v27;
    __int16 v58 = 1024;
    int v59 = v28;
    __int16 v60 = 1024;
    int v61 = v29;
    __int16 v62 = 1024;
    int v63 = v30;
    __int16 v64 = 1024;
    int v65 = v31;
    __int16 v66 = 2048;
    uint64_t v67 = v32;
    __int16 v68 = 2048;
    uint64_t v69 = v33;
    __int16 v70 = 2048;
    uint64_t v71 = v34;
    __int16 v72 = 1024;
    int v73 = v36;
    __int16 v74 = 2049;
    uint64_t v75 = v35;
    __int16 v76 = 1025;
    int v77 = v37;
    __int16 v78 = 1025;
    int v79 = v38;
    __int16 v80 = 1025;
    int v81 = v39;
    __int16 v82 = 1025;
    int v83 = v40;
    __int16 v84 = 1025;
    int v85 = v41;
    __int16 v86 = 1025;
    int v87 = v42;
    __int16 v88 = 1025;
    int v89 = v43;
    __int16 v90 = 1025;
    int v91 = v44;
    __int16 v92 = 1025;
    int v93 = v45;
    __int16 v94 = 1025;
    int v95 = v46;
    __int16 v96 = 1025;
    int v97 = v47;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A68,  2LL,  "#FenceMetrics metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeL ocked,%d,airplaneMode,%d,eventType,%d,eventRadius,%.2f,eventDistance,%.2f,eventLatency,%.3f,eventMask,0x%x,sinceLa st,%{private}.1f,fenceType,%{private}d,fenceAPs,%{private}d,totalAPs,%{private}d,conservative,%{private}d,emergenc y,%{private}d,polygonal,%{private}d,throttled,%{private}d,inVehicle,%{private}d,driving,%{private}d,static,%{priva te}d,pedestrian,%{private}d",  v51,  170);
    __int128 v49 = (uint8_t *)v48;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceAnalytics::submitMetric(const CLFenceAnalytics::LocationMonitorTrigger &)",  "%s\n",  v48);
    if (v49 != buf) {
      free(v49);
    }
  }

  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472LL;
  v50[2] = sub_100B59190;
  void v50[3] = &unk_101820718;
  v50[4] = a1;
  return AnalyticsSendEventLazy(@"com.apple.clx.geofence.locationmonitortrigger", v50);
}

NSDictionary *sub_100B59190(uint64_t a1)
{
  v6[0] = @"airplaneMode";
  v7[0] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 27LL));
  v6[1] = @"bundleId";
  __int128 v2 = *(uint64_t **)(a1 + 32);
  v7[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
  v6[2] = @"cellAvailable";
  void v7[2] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 24LL));
  void v6[3] = @"eventDistance";
  _OWORD v7[3] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 64LL));
  v6[4] = @"eventFenceType";
  v7[4] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 84LL));
  v6[5] = @"eventLatency";
  void v7[5] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)*(double *)(*(void *)(a1 + 32) + 72LL));
  void v6[6] = @"eventMask";
  v7[6] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 80LL));
  void v6[7] = @"eventRadius";
  v7[7] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)*(double *)(*(void *)(a1 + 32) + 56LL));
  _WORD v6[8] = @"eventType";
  v7[8] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 48LL));
  v6[9] = @"isConservativeFence";
  v7[9] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 91LL));
  v6[10] = @"isDriving";
  v7[10] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 93LL));
  v6[11] = @"isEmergencyFence";
  v7[11] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 88LL));
  v6[12] = @"isInVehicle";
  v7[12] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 92LL));
  v6[13] = @"isPedestrian";
  v7[13] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 95LL));
  v6[14] = @"isPolygonalFence";
  v7[14] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 89LL));
  v6[15] = @"isStatic";
  v7[15] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 94LL));
  v6[16] = @"isThrottledFence";
  v7[16] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 90LL));
  v6[17] = @"numAPsFenceBounded";
  int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 104LL);
  if (v3 < 1)
  {
    uint64_t v4 = 0LL;
  }

  else if (v3 > 0x14)
  {
    else {
      uint64_t v4 = 1LL;
    }
  }

  else
  {
    uint64_t v4 = ((v3 - 1) >> 2) + 1;
  }

  v7[17] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v4);
  v6[18] = @"numAPsFence";
  v7[18] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 104LL));
  v6[19] = @"numAPsTotal";
  v7[19] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 108LL));
  v6[20] = @"passcodeLocked";
  v7[20] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 26LL));
  v6[21] = @"reachability";
  v7[21] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 32LL));
  v6[22] = @"sinceLastEvent";
  v7[22] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)*(double *)(*(void *)(a1 + 32) + 96LL));
  v6[23] = @"wifiAvailable";
  v7[23] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 25LL));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  24LL);
}

void sub_100B5955C(_BYTE *a1, char a2, char a3, char a4, void *a5)
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_1018733F0);
  }
  uint64_t v10 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68292355LL;
    __int16 v22 = 2082;
    int v23 = "";
    __int16 v24 = 2049;
    *(void *)uint64_t v25 = __src[0];
    *(_WORD *)&v25[8] = 2049;
    uint64_t v26 = __src[1];
    *(_WORD *)int v27 = 2049;
    *(void *)&_OWORD v27[2] = __src[2];
    __int16 v28 = 2049;
    *(void *)int v29 = __src[3];
    *(_WORD *)&v29[8] = 2049;
    uint64_t v30 = __src[4];
    *(_WORD *)int v31 = 2049;
    *(void *)&v31[2] = __src[5];
    __int16 v32 = 2049;
    uint64_t v33 = __src[6];
    __int16 v34 = 2049;
    uint64_t v35 = __src[9];
    __int16 v36 = 2049;
    uint64_t v37 = __src[7];
    __int16 v38 = 2049;
    uint64_t v39 = __src[8];
    __int16 v40 = 2049;
    uint64_t v41 = __src[10];
    __int16 v42 = 2049;
    uint64_t v43 = __src[11];
    __int16 v44 = 2049;
    uint64_t v45 = __src[12];
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#FenceMetrics, heartbeat,1,, wifiScans:%{private}lld, epnoCalc:%{private}lld, e pnoEntry:%{private}lld, epnoExit:%{private}lld, wakes:%{private}lld, assertions:%{private}lld, tim ers:%{private}lld, gpsDenied:%{private}lld, gpsSessions:%{private}lld, gpsDuration:%{private}.5f , wdogArmed:%{private}lld, wdogFired:%{private}lld, wdogLong:%{private}lld}",  (uint8_t *)&buf,  0x94u);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_1018733F0);
    }
  }

  uint64_t v11 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68291587LL;
    __int16 v22 = 2082;
    int v23 = "";
    __int16 v24 = 1026;
    *(_DWORD *)uint64_t v25 = LOBYTE(__src[13]);
    *(_WORD *)&v25[4] = 1026;
    *(_DWORD *)&v25[6] = BYTE1(__src[13]);
    LOWORD(v26) = 1026;
    *(_DWORD *)((char *)&v26 + 2) = BYTE2(__src[13]);
    HIWORD(v26) = 1026;
    *(_DWORD *)int v27 = BYTE3(__src[13]);
    *(_WORD *)&v27[4] = 1026;
    *(_DWORD *)&v27[6] = BYTE4(__src[13]);
    __int16 v28 = 1026;
    *(_DWORD *)int v29 = BYTE5(__src[13]);
    *(_WORD *)&v29[4] = 1026;
    *(_DWORD *)&v29[6] = BYTE6(__src[13]);
    LOWORD(v30) = 1025;
    *(_DWORD *)((char *)&v30 + 2) = HIBYTE(__src[13]);
    HIWORD(v30) = 1025;
    *(_DWORD *)int v31 = LOBYTE(__src[14]);
    *(_WORD *)&v31[4] = 1025;
    *(_DWORD *)&v31[6] = BYTE1(__src[14]);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#FenceMetrics, heartbeat,2,, locEnabled:%{public}hhd, locToggled:%{public}hhd,  wifiEnabled:%{public}hhd, wifiToggled:%{public}hhd, airplaneEnabled:%{public}hhd, airplaneToggled:%{ public}hhd, anyFences:%{public}hhd, anyFineFences:%{private}hhd, anyLargeFences:%{private}hhd, anyEm ergencyFences:%{private}hhd}",  (uint8_t *)&buf,  0x4Eu);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_1018733F0);
    }
  }

  uint64_t v12 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68292355LL;
    __int16 v22 = 2082;
    int v23 = "";
    __int16 v24 = 2049;
    *(void *)uint64_t v25 = __src[15];
    *(_WORD *)&v25[8] = 2049;
    uint64_t v26 = __src[16];
    *(_WORD *)int v27 = 2049;
    *(void *)&_OWORD v27[2] = __src[17];
    __int16 v28 = 2049;
    *(void *)int v29 = __src[18];
    *(_WORD *)&v29[8] = 2049;
    uint64_t v30 = __src[19];
    *(_WORD *)int v31 = 2049;
    *(void *)&v31[2] = __src[20];
    __int16 v32 = 2049;
    uint64_t v33 = __src[21];
    __int16 v34 = 2049;
    uint64_t v35 = __src[22];
    __int16 v36 = 2049;
    uint64_t v37 = __src[23];
    __int16 v38 = 2049;
    uint64_t v39 = __src[24];
    __int16 v40 = 2049;
    uint64_t v41 = __src[25];
    __int16 v42 = 2049;
    uint64_t v43 = __src[26];
    __int16 v44 = 2049;
    uint64_t v45 = __src[27];
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#FenceMetrics, heartbeat,3,, fences:%{private}lld, fenceAdditions:%{private}lld, fenceRemovals:%{private}lld, fenceEntries:%{private}lld, fenceExits:%{private}lld, handoffFenceEntri es:%{private}lld, handoffFenceExits:%{private}lld, locClient:%{private}lld, locGps:%{private}lld,  locIndoor:%{private}lld, locWifi2:%{private}lld, locWifi:%{private}lld, locCell:%{private}lld}",  (uint8_t *)&buf,  0x94u);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_1018733F0);
    }
  }

  int v13 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68291075LL;
    __int16 v22 = 2082;
    int v23 = "";
    __int16 v24 = 2049;
    *(void *)uint64_t v25 = __src[28];
    *(_WORD *)&v25[8] = 2049;
    uint64_t v26 = __src[29];
    *(_WORD *)int v27 = 2049;
    *(void *)&_OWORD v27[2] = __src[30];
    __int16 v28 = 2049;
    *(void *)int v29 = __src[31];
    *(_WORD *)&v29[8] = 2049;
    uint64_t v30 = __src[32];
    *(_WORD *)int v31 = 2049;
    *(void *)&v31[2] = __src[33];
    __int16 v32 = 2049;
    uint64_t v33 = __src[34];
    __int16 v34 = 2049;
    uint64_t v35 = __src[35];
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#FenceMetrics, heartbeat,4,, loiMatchAttempts:%{private}lld, loiMatchErrors:%{pri vate}lld, loiMatchNoMatches:%{private}lld, loiMatchMatches:%{private}lld, loiRadiusMin:%{private}lld, loiRadiusMax:%{private}lld, loiCenterRefinementMin:%{private}lld, loiCenterRefinementMax:%{private}lld}",  (uint8_t *)&buf,  0x62u);
  }

  if (*a1)
  {
    if (!a1[1])
    {
      int v14 = sub_1006A509C();
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      v18[2] = sub_100B59C9C;
      v18[3] = &unk_1018733D0;
      memcpy(v19, __src, sizeof(v19));
      sub_1006A50E4((uint64_t)v14, (uint64_t)@"com.apple.clx.geofence.heartbeat", (uint64_t)v18);
      int v15 = sub_1006A509C();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      void v16[2] = sub_100B5A100;
      uint64_t v16[3] = &unk_1018733D0;
      memcpy(v17, __src, sizeof(v17));
      sub_1006A50E4((uint64_t)v15, (uint64_t)@"com.apple.clx.geofence.loiMatching", (uint64_t)v16);
    }
  }

__n128 sub_100B59AC0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a2 + 48) = v2;
  *(void *)(a2 + 56) = v3;
  *(void *)(a2 + sub_10000AE14(v2 - 64) = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 88);
  *(void *)(a2 + 96) = *(void *)(a1 + 104);
  *(void *)(a2 + 104) = *(void *)(a1 + 112);
  *(_WORD *)(a2 + 112) = *(_WORD *)(a1 + 120);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 208);
  *(void *)(a2 + 216) = *(void *)(a1 + 224);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 256) = *(_OWORD *)(a1 + 304);
  __n128 result = *(__n128 *)(a1 + 320);
  *(__n128 *)(a2 + 272) = result;
  return result;
}

__n128 sub_100B59B6C(uint64_t a1, char a2, char a3, char a4, void *a5)
{
  *(void *)(a1 + 104) = 0LL;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_BYTE *)(a1 + 112) = a2;
  *(_BYTE *)(a1 + 113) = 0;
  *(_BYTE *)(a1 + 114) = a3;
  *(_BYTE *)(a1 + 115) = 0;
  *(_BYTE *)(a1 + 116) = a4;
  *(void *)(a1 + 128) = 0LL;
  *(_DWORD *)(a1 + 117) = 0;
  *(_BYTE *)(a1 + 121) = 0;
  int v7 = (double *)*a5;
  int v5 = (double *)(a5 + 1);
  int v6 = v7;
  if (v7 != v5)
  {
    uint64_t v8 = 0LL;
    do
    {
      double v9 = v6[16];
      if (v9 > 400.0
        || *((_BYTE *)v6 + 220)
        || *((_DWORD *)v6 + 53) == 2
        || *((void *)v6 + 33) != *((void *)v6 + 32)
        || ((_BYTE)v6[24] & 0x20) != 0)
      {
        if (v9 >= 7000.0) {
          *(_BYTE *)(a1 + 120) = 1;
        }
      }

      else
      {
        *(_BYTE *)(a1 + 119) = 1;
      }

      if (((_BYTE)v6[24] & 0x10) != 0) {
        *(_BYTE *)(a1 + 121) = 1;
      }
      uint64_t v10 = (double *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = *(double **)v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v11 = (double *)*((void *)v6 + 2);
          BOOL v12 = *(void *)v11 == (void)v6;
          int v6 = v11;
        }

        while (!v12);
      }

      ++v8;
      int v6 = v11;
    }

    while (v11 != v5);
    *(void *)(a1 + 128) = v8;
    *(_BYTE *)(a1 + 118) = 1;
  }

  *(_OWORD *)(a1 + 216) = 0uLL;
  *(_OWORD *)(a1 + 200) = 0uLL;
  *(_OWORD *)(a1 + 184) = 0uLL;
  *(_OWORD *)(a1 + 168) = 0uLL;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = 0uLL;
  *(_OWORD *)(a1 + 272) = 0uLL;
  *(_OWORD *)(a1 + 288) = 0uLL;
  result.n128_u64[0] = -1LL;
  result.n128_u64[1] = -1LL;
  *(__n128 *)(a1 + 304) = result;
  *(__n128 *)(a1 + 320) = result;
  return result;
}

NSDictionary *sub_100B59C9C(uint64_t a1)
{
  v3[0] = @"wifiScans";
  v4[0] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 32));
  v3[1] = @"epnoCalculations";
  v4[1] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40));
  _OWORD v3[2] = @"epnoEntryEvents";
  _DWORD v4[2] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 48));
  v3[3] = @"epnoExitEvents";
  v4[3] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 56));
  v3[4] = @"wakes";
  v4[4] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 64));
  void v3[5] = @"assertions";
  void v4[5] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 72));
  void v3[6] = @"setTimers";
  void v4[6] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 80));
  v3[7] = @"gpsDenied";
  v4[7] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 104));
  v3[8] = @"gpsSessions";
  v4[8] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 88));
  v3[9] = @"gpsDuration";
  v4[9] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 96));
  v3[10] = @"watchdogsArmed";
  v4[10] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 112));
  v3[11] = @"watchdogsFired";
  v4[11] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 120));
  v3[12] = @"watchdogsLong";
  v4[12] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 128));
  v3[13] = @"locationEnabled";
  v4[13] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 136));
  v3[14] = @"locationToggled";
  v4[14] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 137));
  v3[15] = @"wifiEnabled";
  v4[15] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 138));
  v3[16] = @"wifiToggled";
  void v4[16] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 139));
  v3[17] = @"airplaneEnabled";
  v4[17] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 140));
  v3[18] = @"airplaneToggled";
  v4[18] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 141));
  v3[19] = @"anyFences";
  v4[19] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 142));
  v3[20] = @"anyFineFences";
  v4[20] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 143));
  v3[21] = @"anyLargeFences";
  v4[21] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 144));
  v3[22] = @"anyEmergencyFences";
  v4[22] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 145));
  v3[23] = @"fences";
  v4[23] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 152));
  v3[24] = @"fenceAdditions";
  v4[24] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 160));
  v3[25] = @"fenceRemovals";
  v4[25] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 168));
  v3[26] = @"fenceEntries";
  v4[26] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 176));
  v3[27] = @"fenceExits";
  v4[27] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 184));
  v3[28] = @"fenceHandoffEntries";
  v4[28] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 192));
  v3[29] = @"fenceHandoffExits";
  v4[29] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 200));
  v3[30] = @"locationsClient";
  v4[30] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 208));
  v3[31] = @"locationsGps";
  v4[31] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 216));
  v3[32] = @"locationsIndoor";
  v4[32] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 224));
  v3[33] = @"locationsWifi2";
  v4[33] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 232));
  v3[34] = @"locationsWifi";
  v4[34] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 240));
  v3[35] = @"locationsCell";
  v4[35] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 248));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  36LL);
}

NSDictionary *sub_100B5A100(void *a1)
{
  v3[0] = @"loiMatchAttempts";
  v4[0] = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1[32]);
  v3[1] = @"loiMatchErrors";
  v4[1] = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1[33]);
  _OWORD v3[2] = @"loiMatchNoMatches";
  _DWORD v4[2] = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1[34]);
  v3[3] = @"loiMatchMatches";
  v4[3] = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1[35]);
  v3[4] = @"loiRadiusMin";
  v4[4] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a1[36]);
  void v3[5] = @"loiRadiusMax";
  void v4[5] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a1[37]);
  void v3[6] = @"loiCenterRefinementMin";
  void v4[6] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a1[38]);
  v3[7] = @"loiCenterRefinementMax";
  v4[7] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a1[39]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  8LL);
}

uint64_t sub_100B5A24C(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A25C(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A26C(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A27C(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A28C(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A29C(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A2AC(uint64_t result)
{
  return result;
}

double sub_100B5A2BC(uint64_t a1, double a2)
{
  double result = *(double *)(a1 + 80) + a2;
  *(double *)(a1 + 80) = result;
  return result;
}

uint64_t sub_100B5A2D8(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A2E8(uint64_t result, double a2)
{
  if (a2 > 960.0) {
    ++*(void *)(result + 104);
  }
  return result;
}

uint64_t sub_100B5A314(uint64_t result, char a2)
{
  *(_BYTE *)(result + 114) = a2;
  *(_BYTE *)(result + 115) = 1;
  return result;
}

uint64_t sub_100B5A324(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1++*(void *)(result + 16) = a2;
  *(_BYTE *)(result + 117) = 1;
  return result;
}

int64x2_t *sub_100B5A334(int64x2_t *result, uint64_t a2)
{
  result[8] = vaddq_s64(result[8], vdupq_n_s64(1uLL));
  result[7].i8[6] = 1;
  double v2 = *(double *)(a2 + 96);
  BOOL v4 = v2 > 400.0 || *(_BYTE *)(a2 + 188) != 0 || *(_DWORD *)(a2 + 180) == 2;
  if (v4 || *(void *)(a2 + 232) != *(void *)(a2 + 224) || (*(_BYTE *)(a2 + 160) & 0x20) != 0)
  {
    if (v2 >= 7000.0) {
      result[7].i8[8] = 1;
    }
  }

  else
  {
    result[7].i8[7] = 1;
  }

  if ((*(_BYTE *)(a2 + 160) & 0x10) != 0) {
    result[7].i8[9] = 1;
  }
  return result;
}

void sub_100B5A3C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1)
  {
    *(void *)(a1 + 128) = v1 - 1;
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_1018733F0);
    }
    double v2 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Something went wrong with num fences", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_1018733F0);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "Something went wrong with num fences",  v5,  2);
      BOOL v4 = (uint8_t *)v3;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFenceAnalytics::countFenceRemovals(const CLFenceManager_Type::Fence &)",  "%s\n",  v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

uint64_t sub_100B5A568(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A578(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A588(uint64_t result)
{
  return result;
}

uint64_t sub_100B5A598(uint64_t result)
{
  return result;
}

void *sub_100B5A5A8(void *result, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 96))
  {
    case 1:
    case 3:
      double v2 = result + 24;
      goto LABEL_7;
    case 4:
      double v2 = result + 27;
      goto LABEL_7;
    case 6:
    case 7:
      double v2 = result + 28;
      goto LABEL_7;
    case 0xA:
      double v2 = result + 25;
      goto LABEL_7;
    case 0xB:
      double v2 = result + 26;
LABEL_7:
      ++*v2;
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_100B5A610(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 272);
  if (v1 <= 0x62) {
    *(void *)(result + 272) = v1 + 1;
  }
  return result;
}

uint64_t sub_100B5A628(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 280);
  if (v1 <= 0x62) {
    *(void *)(result + 280) = v1 + 1;
  }
  return result;
}

uint64_t sub_100B5A640(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 288);
  if (v1 <= 0x62) {
    *(void *)(result + 2++*(void *)(result + 88) = v1 + 1;
  }
  return result;
}

void *sub_100B5A658(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result[37];
  if (v3 <= 0x62) {
    result[37] = v3 + 1;
  }
  uint64_t v4 = result[39];
  if (v4 < a2 || v4 == -1) {
    result[39] = a2;
  }
  uint64_t v6 = result[38];
  if (v6 > a2 || v6 == -1) {
    result[38] = a2;
  }
  uint64_t v8 = result[41];
  if (v8 < a3 || v8 == -1) {
    result[41] = a3;
  }
  uint64_t v10 = result[40];
  if (v10 > a3 || v10 == -1) {
    result[40] = a3;
  }
  return result;
}

uint64_t sub_100B5A6C8( uint64_t a1, uint64_t a2, double *a3, __int128 *a4, CLMotionActivity *a5, uint64_t a6, uint64_t a7, char a8, double a9, char a10, char a11)
{
  *(double *)a1 = a9;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    __int128 v20 = *(_OWORD *)a2;
    *(void *)(a1 + ++*(void *)(result + 24) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 8) = v20;
  }

  *(_DWORD *)(a1 + ++*(void *)(result + 32) = sub_100B5AA24(*(unsigned int *)a3);
  int v21 = sub_100B5ABD0(a2);
  int v22 = *(_DWORD *)(a2 + 168);
  unsigned int v23 = *(_DWORD *)(a2 + 172) - 1;
  if (v23 >= 4) {
    unsigned int v23 = -1;
  }
  *(_DWORD *)(a1 + 36) = v21;
  *(_DWORD *)(a1 + ++*(void *)(result + 40) = v23;
  if (v22 == 1) {
    int v24 = 0;
  }
  else {
    int v24 = -1;
  }
  if (v22 == 2) {
    int v24 = 1;
  }
  *(_DWORD *)(a1 + 44) = v24;
  double v25 = *(double *)(a2 + 88);
  BOOL v26 = v25 <= 0.0 && v21 == 4;
  uint64_t v27 = (int)vcvtpd_s64_f64(v25 * 0.1);
  if (v26) {
    uint64_t v27 = 0LL;
  }
  *(void *)(a1 + ++*(void *)(result + 48) = v27;
  *(void *)(a1 + ++*(void *)(result + 56) = sub_100B5AC84(a2);
  *(_DWORD *)(a1 + ++*(void *)(result + 64) = sub_100B5ACDC(a5);
  __int128 v28 = *a4;
  __int128 v29 = a4[1];
  __int128 v30 = a4[2];
  *(_OWORD *)(a1 + 120) = a4[3];
  *(_OWORD *)(a1 + 104) = v30;
  *(_OWORD *)(a1 + ++*(void *)(result + 88) = v29;
  *(_OWORD *)(a1 + 72) = v28;
  __int128 v31 = a4[4];
  __int128 v32 = a4[5];
  __int128 v33 = a4[6];
  *(void *)(a1 + 184) = *((void *)a4 + 14);
  *(_OWORD *)(a1 + ++*(void *)(result + 168) = v33;
  *(_OWORD *)(a1 + ++*(void *)(result + 152) = v32;
  *(_OWORD *)(a1 + 136) = v31;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)a4;
  *(_BYTE *)(a1 + 193) = a8;
  *(_BYTE *)(a1 + 194) = a10;
  *(_BYTE *)(a1 + 195) = a11;
  double v34 = -1.0;
  double v35 = -1.0;
  if (a9 > 0.0)
  {
    double v36 = a3[7];
    if (v36 > 0.0) {
      double v35 = a9 - v36;
    }
  }

  *(double *)(a1 + 200) = v35;
  *(_DWORD *)(a1 + 208) = sub_100B5AD44(*((_DWORD *)a3 + 16));
  if (a9 > 0.0)
  {
    double v37 = a3[5];
    if (v37 > 0.0) {
      double v34 = a9 - v37;
    }
  }

  *(double *)(a1 + 2++*(void *)(result + 16) = v34;
  *(_DWORD *)(a1 + 2++*(void *)(result + 24) = sub_100B5AD44(*((_DWORD *)a3 + 12));
  *(_DWORD *)(a1 + 228) = sub_100B5AD44(*(_DWORD *)(a6 + 96));
  double v38 = *(double *)(a6 + 20);
  if (v38 >= 0.0)
  {
    if (v38 <= 200.0)
    {
      float v40 = v38 * 0.1;
      uint64_t v39 = (int)vcvtps_s32_f32(v40);
    }

    else if (v38 <= 400.0)
    {
      uint64_t v39 = 21LL;
    }

    else if (v38 <= 2000.0)
    {
      uint64_t v39 = 22LL;
    }

    else
    {
      uint64_t v39 = 23LL;
      if (v38 > 7000.0) {
        uint64_t v39 = 24LL;
      }
    }
  }

  else
  {
    uint64_t v39 = -1LL;
  }

  *(void *)(a1 + 2++*(void *)(result + 40) = 0LL;
  *(void *)(a1 + 2++*(void *)(result + 32) = v39;
  *(void *)(a1 + 2++*(void *)(result + 48) = 0LL;
  *(void *)(a1 + 2++*(void *)(result + 56) = 0LL;
  sub_1002E0204( (void *)(a1 + 240),  *(const void **)a7,  *(void *)(a7 + 8),  0x6F96F96F96F96F97LL * ((uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2));
  *(_BYTE *)(a1 + 2++*(void *)(result + 64) = 0;
  double v41 = sub_100B5B7A8(a1, *(_DWORD *)(a1 + 32), a2);
  if (v41 == -1.0)
  {
    double v42 = *(double *)(a1 + 216);
  }

  else
  {
    *(_BYTE *)(a1 + 2++*(void *)(result + 64) = 1;
    double v42 = a9 - v41;
  }

  *(double *)(a1 + 272) = v42;
  *(double *)(a1 + 280) = sub_1008414E0((double *)(a6 + 4), a2, (double *)(a1 + 320));
  double v43 = sub_1008414E0((double *)(a6 + 4), a2, (double *)(a1 + 320));
  *(double *)(a1 + 2++*(void *)(result + 88) = v43 - sub_1009232CC(a2);
  *(void *)(a1 + 2++*(void *)(result + 96) = -1LL;
  uint64_t v44 = *(void *)(a2 + 140);
  *(void *)&__int128 v45 = (int)v44;
  *((void *)&v45 + 1) = SHIDWORD(v44);
  *(_OWORD *)(a1 + 304) = v45;
  sub_100D2D9A4(a1 + 320);
  return a1;
}

void sub_100B5A9F0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100B5AA24(uint64_t result)
{
  if ((_DWORD)result == 1) {
    return result;
  }
  if ((_DWORD)result != -1) {
    return 0LL;
  }
LABEL_4:
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_1018733F0);
  }
  unint64_t v1 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "Event type not valid", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_1018733F0);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Event type not valid",  v4,  2);
    unint64_t v3 = (uint8_t *)v2;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static GeofenceMetric::GeofenceMetricEventType GeofenceMetric::eventTypeFromStatus(const CLFenceManager_Type::FenceStatus)",  "%s\n",  v2);
    if (v3 != buf) {
      free(v3);
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100B5ABD0(uint64_t a1)
{
  if (*(void *)(a1 + 232) != *(void *)(a1 + 224)) {
    return 4LL;
  }
  uint64_t v2 = *(void *)(a1 + 160);
  if ((v2 & 0x20) != 0) {
    return 7LL;
  }
  if ((v2 & 0x80) != 0) {
    return 3LL;
  }
  if (*(_BYTE *)(a1 + 176)) {
    return 5LL;
  }
  if ((~(_BYTE)v2 & 5) == 0) {
    return 6LL;
  }
  double v3 = *(double *)(a1 + 96);
  if (v3 <= 400.0 && *(_BYTE *)(a1 + 188) == 0 && *(_DWORD *)(a1 + 180) != 2) {
    return 0LL;
  }
  if (v3 >= 7000.0) {
    return 2LL;
  }
  if (*(_BYTE *)(a1 + 188)) {
    return 8LL;
  }
  return 1LL;
}

uint64_t sub_100B5AC84(uint64_t a1)
{
  double v2 = sub_1009232CC(a1);
  BOOL v3 = sub_100B5ABD0(a1) == 4 && v2 <= 0.0;
  signed int v4 = vcvtpd_s64_f64(v2 * 0.1);
  if (v3) {
    return 0LL;
  }
  else {
    return v4;
  }
}

uint64_t sub_100B5ACDC(CLMotionActivity *a1)
{
  if ((CLMotionActivity::isStatic(a1) & 1) != 0) {
    return 0LL;
  }
  if ((CLMotionActivity::isWalking(a1) & 1) != 0) {
    return 1LL;
  }
  if ((CLMotionActivity::isDriving(a1) & 1) != 0) {
    return 3LL;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100B5AD44(int a1)
{
  else {
    return dword_10134B7BC[a1 - 1];
  }
}

uint64_t sub_100B5AD68( uint64_t a1, uint64_t a2, double *a3, __int128 *a4, CLMotionActivity *a5, uint64_t a6, uint64_t a7, char a8, double a9, char a10, char a11)
{
  return sub_100B5A6C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_100B5AD7C(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  double v57 = sub_100A0AB6C(a1 + 72, (double *)a1, (double *)(a1 + 168));
  double v55 = sub_100A0AB6C(v2, (double *)a1, (double *)(a1 + 80));
  double v3 = -1.0;
  if (v55 != -1.0)
  {
    double v4 = sub_100A0AB6C(v2, (double *)a1, (double *)(a1 + 88));
    if (v4 == -1.0) {
      double v3 = -1.0;
    }
    else {
      double v3 = v4 - v55;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_1018733F0);
  }
  int v5 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 32);
    int v8 = *(_DWORD *)(a1 + 36);
    int v9 = *(_DWORD *)(a1 + 40);
    int v10 = *(_DWORD *)(a1 + 44);
    uint64_t v11 = 10LL * *(void *)(a1 + 48);
    uint64_t v12 = 10LL * *(void *)(a1 + 56);
    int v13 = *(unsigned __int8 *)(a1 + 264);
    uint64_t v14 = *(void *)(a1 + 272);
    uint64_t v16 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 312);
    *(_DWORD *)uint64_t buf = 68291843;
    int v61 = 0;
    __int16 v62 = 2082;
    int v63 = "";
    __int16 v64 = 2081;
    double v65 = *(double *)&v6;
    __int16 v66 = 1025;
    int v67 = v7;
    __int16 v68 = 1025;
    *(_DWORD *)uint64_t v69 = v8;
    *(_WORD *)&v69[4] = 1025;
    *(_DWORD *)&v69[6] = v9;
    *(_WORD *)__int16 v70 = 1025;
    *(_DWORD *)&v70[2] = v10;
    *(_WORD *)&v70[6] = 2049;
    *(void *)&v70[8] = v11;
    *(_WORD *)&v70[16] = 2049;
    *(void *)&v70[18] = v12;
    *(_WORD *)&v70[26] = 1025;
    *(_DWORD *)&v70[28] = v13;
    *(_WORD *)uint64_t v71 = 2049;
    *(void *)&v71[2] = v14;
    *(_WORD *)&v71[10] = 2049;
    *(void *)&v71[12] = v16;
    *(_WORD *)__int16 v72 = 2049;
    *(void *)&v72[2] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:FenceMetric, geofencemetric,1, bundleId:%{private, location:escape_only}s, eventTyp e:%{private}d, fenceType:%{private}d, loiType:%{private}d, envType:%{private}d, radiusMeters:%{p rivate}lld, effectiveRadiusMeters:%{private}lld, didUseWsb:%{private}hhd, timeLatency:%{private}f, totalAPs:%{private}lld, fenceAPs:%{private}lld}",  buf,  0x6Cu);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_1018733F0);
    }
  }

  int v17 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    double v18 = *(double *)(a1 + 200);
    int v19 = *(_DWORD *)(a1 + 208);
    uint64_t v20 = *(void *)(a1 + 216);
    int v21 = *(_DWORD *)(a1 + 224);
    int v22 = *(_DWORD *)(a1 + 228);
    uint64_t v23 = *(void *)(a1 + 232);
    uint64_t v24 = *(void *)(a1 + 280);
    uint64_t v25 = *(void *)(a1 + 288);
    uint64_t v26 = 10LL * *(void *)(a1 + 296);
    *(_DWORD *)uint64_t buf = 68291331;
    int v61 = 0;
    __int16 v62 = 2082;
    int v63 = "";
    __int16 v64 = 2049;
    double v65 = v18;
    __int16 v66 = 1025;
    int v67 = v19;
    __int16 v68 = 2049;
    *(void *)uint64_t v69 = v20;
    *(_WORD *)&v69[8] = 1025;
    *(_DWORD *)__int16 v70 = v21;
    *(_WORD *)&v70[4] = 1025;
    *(_DWORD *)&v70[6] = v22;
    *(_WORD *)&v70[10] = 2049;
    *(void *)&v70[12] = v23;
    *(_WORD *)&v70[20] = 2049;
    *(void *)&v70[22] = v24;
    *(_WORD *)&v70[30] = 2049;
    *(void *)uint64_t v71 = v25;
    *(_WORD *)&v71[8] = 2049;
    *(void *)&v71[10] = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:FenceMetric, geofencemetric,2, lastEventAge:%{private}f, lastEventProvider:%{ private}d, prevLocationAge:%{private}f, prevLocationProvider:%{private}d, locationType:%{private}d , locationAccuracy:%{private}lld, distanceToCenter:%{private}f, signedDistanceLatency:%{private} f, priorSignedDistance:%{private}lld}",  buf,  0x60u);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_1018733F0);
    }
  }

  uint64_t v27 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    double v28 = *(double *)(a1 + 80);
    BOOL v29 = *(double *)(a1 + 112) > v28;
    BOOL v30 = *(double *)(a1 + 120) > v28;
    BOOL v31 = *(double *)(a1 + 144) > v28;
    double v32 = *(double *)(a1 + 160);
    BOOL v33 = *(double *)(a1 + 152) > v28;
    *(_DWORD *)uint64_t buf = 68293379;
    BOOL v34 = v32 > v28;
    BOOL v35 = *(double *)(a1 + 128) > v28;
    double v36 = *(double *)(a1 + 96);
    double v37 = *(double *)(a1 + 104);
    BOOL v38 = *(double *)(a1 + 136) > v28;
    int v39 = *(_DWORD *)(a1 + 64);
    int v40 = *(unsigned __int8 *)(a1 + 194);
    int v41 = *(unsigned __int8 *)(a1 + 195);
    int v42 = *(unsigned __int8 *)(a1 + 192);
    int v43 = *(unsigned __int8 *)(a1 + 193);
    int v61 = 0;
    __int16 v62 = 2082;
    int v63 = "";
    __int16 v64 = 2049;
    double v65 = v57;
    __int16 v66 = 1025;
    int v67 = v39;
    __int16 v68 = 2049;
    *(double *)uint64_t v69 = v3;
    *(_WORD *)&v69[8] = 2049;
    *(double *)__int16 v70 = v55;
    *(_WORD *)&v70[8] = 1025;
    *(_DWORD *)&v70[10] = v40;
    *(_WORD *)&v70[14] = 1025;
    *(_DWORD *)&v70[16] = v41;
    *(_WORD *)&v70[20] = 1025;
    *(_DWORD *)&v70[22] = v42;
    *(_WORD *)&v70[26] = 1025;
    *(_DWORD *)&v70[28] = v43;
    *(_WORD *)uint64_t v71 = 1025;
    *(_DWORD *)&v71[2] = v29;
    *(_WORD *)&v71[6] = 1025;
    *(_DWORD *)&v71[8] = v30;
    *(_WORD *)&v71[12] = 1025;
    *(_DWORD *)&v71[14] = v31;
    *(_WORD *)&v71[18] = 1025;
    *(_DWORD *)__int16 v72 = v33;
    *(_WORD *)&v72[4] = 1025;
    *(_DWORD *)&v72[6] = v34;
    __int16 v73 = 1025;
    BOOL v74 = v35;
    __int16 v75 = 1025;
    BOOL v76 = v38;
    __int16 v77 = 1025;
    BOOL v78 = v36 > v28;
    __int16 v79 = 1025;
    BOOL v80 = v37 > v28;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:FenceMetric, geofencemetric,3, lastTriggerAge:%{private}f, motionActivity:%{p rivate}d, sleepDuration:%{private}f, awakeDuration:%{private}f, isAfterFirstUnlock:%{private}h hd, isAirplaneModeActive:%{private}hhd, isFreeWake:%{private}hhd, isWifiEnabled:%{private}hhd, rcvdB tConnect:%{private}hhd, rcvdBtDisconnect:%{private}hhd, rcvdEpnoEntryTrigger:%{private}hhd, rcvdEpnoEx itTrigger:%{private}hhd, rcvdMotionAlarm:%{private}hhd, rcvdTether:%{private}hhd, rcvdUntether:%{pri vate}hhd, rcvdWifiConnect:%{private}hhd, rcvdWifiDisconnect:%{private}hhd}",  buf,  0x84u);
  }

  v44.f64[0] = v55;
  v44.f64[1] = v57;
  __asm { FMOV            V0.2D, #-1.0 }

  int8x8_t v50 = (int8x8_t)vmovn_s64(vceqq_f64(v44, _Q0));
  float64x2_t v56 = vmulq_f64(v44, (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL));
  unsigned int v51 = vcvtpd_s64_f64(v3 * 0.1);
  if (v3 == -1.0) {
    int v52 = -1;
  }
  else {
    int v52 = v51;
  }
  uint64_t v53 = sub_1006A509C();
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472LL;
  v58[2] = sub_100B5B28C;
  void v58[3] = &unk_10183D0E8;
  v58[4] = a1;
  int v59 = v52;
  *(double *)&v58[5] = v57;
  v58[6] = vorr_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v56))), v50);
  return sub_1006A50E4((uint64_t)v53, (uint64_t)@"com.apple.clx.geofence.event", (uint64_t)v58);
}

NSDictionary *sub_100B5B28C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = @"apsUsedForEpno";
  v6[0] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(v2 + 304));
  v5[1] = @"apsUsedForEpnoForThisFence";
  v6[1] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(v2 + 312));
  _DWORD v5[2] = @"awakeDurationBin";
  v6[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v5[3] = @"bundleId";
  double v3 = (void *)(v2 + 8);
  void v6[3] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3);
  v5[4] = @"didUseWsb";
  v6[4] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 264));
  void v5[5] = @"distanceToCenter";
  v6[5] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(v2 + 280));
  void v5[6] = @"effectiveRadiusBin";
  void v6[6] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(v2 + 56));
  void v5[7] = @"envType";
  void v6[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 44));
  _WORD v5[8] = @"eventType";
  _WORD v6[8] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 32));
  v5[9] = @"fenceType";
  v6[9] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 36));
  v5[10] = @"isAfterFirstUnlock";
  v6[10] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 194));
  v5[11] = @"isAirplaneModeActive";
  v6[11] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 195));
  v5[12] = @"isFreeWake";
  v6[12] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 192));
  v5[13] = @"isWifiEnabled";
  v6[13] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 193));
  v5[14] = @"lastEventAge";
  v6[14] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(v2 + 200));
  v5[15] = @"lastEventProvider";
  v6[15] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 208));
  void v5[16] = @"lastTriggerAgeBin";
  v6[16] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v5[17] = @"locationAccuracy";
  v6[17] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(v2 + 232));
  v5[18] = @"locationProvider";
  v6[18] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 228));
  v5[19] = @"loiType";
  v6[19] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 40));
  v5[20] = @"motionActivity";
  v6[20] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 64));
  v5[21] = @"prevLocationAge";
  v6[21] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(v2 + 216));
  v5[22] = @"prevLocationProvider";
  v6[22] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 224));
  v5[23] = @"priorSignedDistanceBin";
  v6[23] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(v2 + 296));
  v5[24] = @"radiusBin";
  void v6[24] = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(v2 + 48));
  v5[25] = @"rcvdBtConnect";
  v6[25] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(double *)(v2 + 112) > *(double *)(v2 + 80));
  v5[26] = @"rcvdBtDisconnect";
  v6[26] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(double *)(v2 + 120) > *(double *)(v2 + 80));
  v5[27] = @"rcvdEpnoEntryTrigger";
  v6[27] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(double *)(v2 + 144) > *(double *)(v2 + 80));
  v5[28] = @"rcvdEpnoExitTrigger";
  v6[28] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(double *)(v2 + 152) > *(double *)(v2 + 80));
  v5[29] = @"rcvdMotionAlarm";
  v6[29] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(double *)(v2 + 160) > *(double *)(v2 + 80));
  v5[30] = @"rcvdTether";
  v6[30] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(double *)(v2 + 128) > *(double *)(v2 + 80));
  v5[31] = @"rcvdUntether";
  v6[31] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(double *)(v2 + 136) > *(double *)(v2 + 80));
  v5[32] = @"rcvdWifiConnect";
  v6[32] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(double *)(v2 + 96) > *(double *)(v2 + 80));
  v5[33] = @"rcvdWifiDisconnect";
  v6[33] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(double *)(v2 + 104) > *(double *)(v2 + 80));
  v5[34] = @"signedDistanceLatency";
  v6[34] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(v2 + 288));
  v5[35] = @"sleepDurationBin";
  v6[35] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v5[36] = @"timeLatency";
  v6[36] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(v2 + 272));
  v5[37] = @"triggerAge";
  v6[37] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v6,  v5,  38LL);
}

double sub_100B5B7A8(uint64_t a1, int a2, uint64_t a3)
{
  double v3 = -1.0;
  if (*(_DWORD *)(a1 + 36) != 4)
  {
    int v30 = a2 == 0;
    sub_10083F9DC((uint64_t)v31);
    v31[0] = v30;
    uint64_t v6 = *(void *)(a1 + 240);
    uint64_t v7 = *(void *)(a1 + 248);
    if (v6 != v7)
    {
      __asm { FMOV            V0.2D, #-1.0 }

      __int128 v29 = _Q0;
      do
      {
        if (*(double *)(v6 + 20) <= 180.0)
        {
          if (*(double *)(v6 + 76) <= v3)
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_1018733F0);
            }
            int v13 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
            {
              uint64_t v14 = *(void *)(v6 + 76);
              *(_DWORD *)uint64_t buf = 134218240;
              int v97 = *(const char **)&v3;
              __int16 v98 = 2048;
              uint64_t v99 = v14;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Wsb time went backwards. truePriorTime: %.3lf. location.timestamp: %.3lf",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_1018733F0);
              }
              uint64_t v22 = *(void *)(v6 + 76);
              int v34 = 134218240;
              double v35 = v3;
              __int16 v36 = 2048;
              *(void *)double v37 = v22;
              LODWORD(v28) = 22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Wsb time went backwards. truePriorTime: %.3lf. location.timestamp: %.3lf",  COERCE_DOUBLE(&v34),  v28);
              uint64_t v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "CFAbsoluteTime GeofenceMetric::estimateTrueEventTime(const GeofenceMetricEventType, const CLFenceManager_Type::Fence &)",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }
          }

          double v15 = sub_1008414E0((double *)(v6 + 4), a3, (double *)(a1 + 320));
          bzero(&v34, 0x3B0uLL);
          BYTE4(v35) = 1;
          *(_OWORD *)&_DWORD v37[2] = v29;
          __int128 v38 = v29;
          __int128 v39 = v29;
          __int128 v40 = v29;
          __int128 v41 = v29;
          __int128 v42 = v29;
          __int128 v43 = v29;
          int v44 = 0xFFFF;
          uint64_t v45 = 0LL;
          uint64_t v46 = 0LL;
          unint64_t v47 = 0xBFF0000000000000LL;
          __int128 v48 = v29;
          __int128 v49 = v29;
          __int128 v50 = v29;
          unint64_t v51 = 0xBFF0000000000000LL;
          uint64_t v52 = 0LL;
          uint64_t v53 = 0LL;
          int v54 = 0;
          unint64_t v55 = 0xBFF0000000000000LL;
          int v56 = 0x7FFFFFFF;
          uint64_t v58 = 0LL;
          uint64_t v59 = 0LL;
          uint64_t v57 = 0LL;
          char v60 = 0;
          int v61 = 0xFFFF;
          uint64_t v62 = 0LL;
          uint64_t v63 = 0LL;
          unint64_t v64 = 0xBFF0000000000000LL;
          unint64_t v65 = 0xBFF0000000000000LL;
          __int128 v66 = v29;
          __int128 v67 = v29;
          unint64_t v69 = 0xBFF0000000000000LL;
          int v72 = 0;
          uint64_t v70 = 0LL;
          uint64_t v71 = 0LL;
          unint64_t v68 = 0xBFF0000000000000LL;
          unint64_t v73 = 0xBFF0000000000000LL;
          int v74 = 0x7FFFFFFF;
          char v78 = 0;
          uint64_t v76 = 0LL;
          uint64_t v77 = 0LL;
          uint64_t v75 = 0LL;
          int v79 = 0xFFFF;
          uint64_t v80 = 0LL;
          uint64_t v81 = 0LL;
          unint64_t v82 = 0xBFF0000000000000LL;
          __int128 v83 = v29;
          __int128 v84 = v29;
          __int128 v85 = v29;
          unint64_t v86 = 0xBFF0000000000000LL;
          int v89 = 0;
          uint64_t v87 = 0LL;
          uint64_t v88 = 0LL;
          unint64_t v90 = 0xBFF0000000000000LL;
          int v91 = 0x7FFFFFFF;
          uint64_t v92 = 0LL;
          uint64_t v93 = 0LL;
          char v95 = 0;
          uint64_t v94 = 0LL;
          sub_100869DC8(buf);
          uint64_t v16 = a3;
          char v17 = sub_1008415AC(v6, v15, (uint64_t)buf, a3, v31, 1, (uint64_t)&v34);
          double v18 = v100;
          if (v100)
          {
            p_shared_owners = (unint64_t *)&v100->__shared_owners_;
            do
              unint64_t v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }

          a3 = v16;
          if ((v17 & 1) == 0)
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_1018733F0);
            }
            int v21 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 136315138;
              int v97 = "estimateTrueEventTime";
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s, Failure getting status from location",  buf,  0xCu);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_1018733F0);
              }
              int v32 = 136315138;
              BOOL v33 = "estimateTrueEventTime";
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "%s, Failure getting status from location",  (const char *)&v32);
              uint64_t v26 = (uint8_t *)v25;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "CFAbsoluteTime GeofenceMetric::estimateTrueEventTime(const GeofenceMetricEventType, const CLFenceManager_Type::Fence &)",  "%s\n",  v25);
              if (v26 != buf) {
                free(v26);
              }
            }
          }

          if (v34 != v30) {
            return v3;
          }
          double v3 = *(double *)(v6 + 76);
        }

        v6 += 156LL;
      }

      while (v6 != v7);
    }
  }

  return v3;
}

void sub_100B5BD54(_Unwind_Exception *a1)
{
}

void sub_100B5BD74(id a1)
{
  qword_101934878 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100B5BDA0(id a1)
{
  qword_101934A68 = (uint64_t)os_log_create("com.apple.locationd.Utility", "LocationMetrics");
}

uint64_t sub_100B5BDCC(uint64_t a1)
{
  uint64_t result = sub_1001B9A1C();
  if ((result & 1) == 0)
  {
    if (!*(void *)(a1 + 16))
    {
      sub_100A15BEC((uint64_t)sub_100B5BFD8, a1, *(void **)a1, buf);
      uint64_t v4 = *(void *)buf;
      *(void *)uint64_t buf = 0LL;
      uint64_t v5 = *(void *)(a1 + 16);
      *(void *)(a1 + ++*(void *)(result + 16) = v4;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
        uint64_t v6 = *(void *)buf;
        *(void *)uint64_t buf = 0LL;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
        }
      }
    }

    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_101873548);
    }
    double v3 = (os_log_s *)qword_101934798;
    if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Registering for geomagnetic model updates",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_101873548);
      }
      v8[0] = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934798,  1LL,  "Registering for geomagnetic model updates",  v8,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLInertialOdometryNotifier::GeomagneticModelClient::registerForGeomagneticModelNotification()",  "%s\n",  v7);
    }

    return (uint64_t)[*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0 registrationInfo:0];
  }

  return result;
}

void sub_100B5BFD8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (!*a2)
  {
    *(double *)(a4 + 8) = *(double *)(a3 + 40) * 0.0174532924;
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_101873548);
    }
    uint64_t v5 = (os_log_s *)qword_101934798;
    if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_INFO))
    {
      double v6 = *(double *)(a4 + 8) * 57.2957802;
      *(_DWORD *)uint64_t buf = 134217984;
      double v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Received geomagnetic model, declination [deg],%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_101873548);
      }
      double v7 = *(double *)(a4 + 8) * 57.2957802;
      int v9 = 134217984;
      double v10 = v7;
      int v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934798,  1LL,  "Received geomagnetic model, declination [deg],%f",  COERCE_DOUBLE(&v9));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLInertialOdometryNotifier::GeomagneticModelClient::onGeomagneticModelNotification(int, const CLGeom agneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &, void *)",  "%s\n",  v8);
    }
  }

uint64_t sub_100B5C1BC(uint64_t a1)
{
  uint64_t result = sub_1001B9A1C();
  if ((result & 1) == 0)
  {
    *(void *)(a1 + 8) = 0LL;
    if (*(void *)(a1 + 16))
    {
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_101873548);
      }
      double v3 = (os_log_s *)qword_101934798;
      if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Unregistering for geomagnetic model updates",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934790 != -1) {
          dispatch_once(&qword_101934790, &stru_101873548);
        }
        v5[0] = 0;
        uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934798,  1LL,  "Unregistering for geomagnetic model updates",  v5,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLInertialOdometryNotifier::GeomagneticModelClient::unregisterForGeomagneticModelNotification()",  "%s\n",  v4);
      }

      return (uint64_t)[*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0];
    }
  }

  return result;
}

uint64_t sub_100B5C374()
{
  if (qword_10199AB38 != -1) {
    dispatch_once(&qword_10199AB38, &stru_101873430);
  }
  return qword_1019A1D10;
}

void sub_100B5C3B4(id a1)
{
  if (sub_100CC7250())
  {
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_101873548);
    }
    unint64_t v1 = (os_log_s *)qword_101934798;
    if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Creating InertialOdometry notifier", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_101873548);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934798,  0LL,  "Creating InertialOdometry notifier",  v5,  2);
      uint64_t v4 = (uint8_t *)v3;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLInertialOdometryNotifier *CLInertialOdometryNotifier::instance()_block_invoke",  "%s\n",  v3);
      if (v4 != buf) {
        free(v4);
      }
    }

    uint64_t v2 = operator new(0x60uLL);
    sub_100B5C574((uint64_t)v2);
    qword_1019A1D10 = (uint64_t)v2;
  }

void sub_100B5C558(_Unwind_Exception *a1)
{
}

uint64_t sub_100B5C574(uint64_t a1)
{
  uint64_t v2 = sub_1006DC9EC(a1, (uint64_t)"CLInertialOdometryNotifier", 1);
  sub_100CC6EF4((void *)(v2 + 32));
  *(void *)a1 = off_101873460;
  *(void *)(a1 + ++*(void *)(result + 32) = &off_1018734B0;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  double v3 = (CLConnectionClient **)(a1 + 80);
  *(void *)(a1 + ++*(void *)(result + 88) = dispatch_queue_create("com.apple.CoreMotion.CLInertialOdometryNotifierQueue", 0LL);
  uint64_t v4 = (CLConnectionClient *)operator new(0x38uLL);
  sub_1010DDBC0(__p, "com.apple.locationd.registration");
  CLConnectionClient::CLConnectionClient(v4, __p, *(void *)(a1 + 88));
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  sub_1005B1FE8((CLConnectionClient **)(a1 + 80), v4);
  CLConnectionClient::setDefaultMessageHandler(*v3, &stru_1018734F0);
  CLConnectionClient::start(*v3);
  uint64_t v5 = sub_1006E2838();
  double v6 = operator new(0x18uLL);
  v6[1] = 0LL;
  v6[2] = 0LL;
  void *v6 = v5;
  sub_1003DE94C((void **)(a1 + 72), v6);
  return a1;
}

void sub_100B5C688( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v19);
  sub_1005B1FE8(v18, 0LL);
  sub_1003DE94C(v17, 0LL);
  sub_100CC71C0(v16);
  sub_1006DCAA8(v15);
  _Unwind_Resume(a1);
}

void sub_100B5C6F4(id a1, shared_ptr<CLConnectionMessage> a2)
{
  var0 = (CLConnectionMessage **)a2.var0;
  if (qword_101934790 != -1) {
    dispatch_once(&qword_101934790, &stru_101873548);
  }
  double v3 = (os_log_s *)qword_101934798;
  if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = (uint64_t *)CLConnectionMessage::name(*var0);
    else {
      uint64_t v5 = (uint64_t *)*v4;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Default handler received message %{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_101873548);
    }
    uint64_t v6 = qword_101934798;
    double v7 = (uint64_t *)CLConnectionMessage::name(*var0);
    else {
      int v8 = (uint64_t *)*v7;
    }
    int v11 = 136446210;
    double v12 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  2LL,  "Default handler received message %{public}s",  &v11,  12);
    double v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLInertialOdometryNotifier::CLInertialOdometryNotifier()_block_invoke",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

void *sub_100B5C8D0(uint64_t a1)
{
  *(void *)a1 = off_101873460;
  *(void *)(a1 + ++*(void *)(result + 32) = &off_1018734B0;
  uint64_t v2 = (void *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(a1 + 88));
  *(void *)(a1 + ++*(void *)(result + 88) = 0LL;
  sub_1005B1FE8((CLConnectionClient **)(a1 + 80), 0LL);
  sub_1003DE94C((void **)(a1 + 72), 0LL);
  sub_100CC71C0(v2);
  return sub_1006DCAA8((void *)a1);
}

void *sub_100B5C938(uint64_t a1)
{
  return sub_100B5C8D0(a1 - 32);
}

void sub_100B5C940(uint64_t a1)
{
  unint64_t v1 = sub_100B5C8D0(a1);
  operator delete(v1);
}

void sub_100B5C954(uint64_t a1)
{
  unint64_t v1 = sub_100B5C8D0(a1 - 32);
  operator delete(v1);
}

double sub_100B5C96C(uint64_t *a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_101873548);
    }
    double v3 = (os_log_s *)qword_101934798;
    if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", (uint8_t *)&buf, 2u);
    }

    double v4 = 0.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_101873548);
      }
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934798,  17LL,  "Unrecognized notification",  &v18,  2);
      uint64_t v6 = (char *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CFTimeInterval CLInertialOdometryNotifier::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v5);
    }
  }

  else
  {
    double v4 = 0.0;
    if (sub_100CC6F8C((uint64_t)(a1 + 4)))
    {
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_101873548);
      }
      char v9 = (os_log_s *)qword_101934798;
      if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_DEFAULT))
      {
        double v10 = *a3;
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Minimum inertial odometry update interval changed to %{public}f",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934790 != -1) {
          dispatch_once(&qword_101934790, &stru_101873548);
        }
        uint64_t v15 = *(void *)a3;
        int v18 = 134349056;
        uint64_t v19 = v15;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934798,  0LL,  "Minimum inertial odometry update interval changed to %{public}f",  &v18,  12);
        char v17 = (char *)v16;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CFTimeInterval CLInertialOdometryNotifier::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v16);
      }

      sub_10071A73C(a1[5], *a3);
      double v11 = *a3;
      double v12 = (dispatch_queue_s *)a1[11];
      *(void *)&__int128 buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472LL;
      int v21 = sub_100B5D294;
      uint64_t v22 = &unk_101830538;
      uint64_t v23 = a1;
      double v24 = v11;
      dispatch_async(v12, &buf);
      uint64_t v13 = a1[9];
      if (*a3 <= 0.0) {
        sub_100B5C1BC(v13);
      }
      else {
        sub_100B5BDCC(v13);
      }
      return *a3;
    }
  }

  return v4;
}

void sub_100B5CCE4(uint64_t a1, uint64_t a2)
{
  if (qword_101934790 != -1) {
    dispatch_once(&qword_101934790, &stru_101873548);
  }
  double v3 = (os_log_s *)qword_101934798;
  if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a2 + 1);
    *(_DWORD *)__int128 buf = 67240192;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "pong,%{public}u", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_101873548);
    }
    int v5 = *(_DWORD *)(a2 + 1);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934798,  0LL,  "pong,%{public}u",  v8,  8);
    double v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLInertialOdometryNotifier::visitPong(const CMInertialOdometryReport::Pong *)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

uint64_t sub_100B5CE98(uint64_t a1, uint64_t a2)
{
  if (qword_101934790 != -1) {
    dispatch_once(&qword_101934790, &stru_101873548);
  }
  int v4 = (os_log_s *)qword_101934798;
  if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 1);
    uint64_t v6 = *(void *)(a1 + 56);
    double v7 = sub_101171D38();
    double v8 = *(float *)(a2 + 9);
    double v9 = *(float *)(a2 + 13);
    double v10 = *(float *)(a2 + 17);
    double v11 = *(float *)(a2 + 21);
    double v12 = *(float *)(a2 + 25);
    double v13 = *(float *)(a2 + 29);
    uint64_t v14 = *(void *)(a2 + 33);
    uint64_t v15 = *(void *)(a2 + 41);
    uint64_t v16 = *(void *)(a2 + 49);
    uint64_t v17 = *(void *)(a2 + 57);
    uint64_t v18 = *(void *)(a2 + 65);
    uint64_t v19 = *(void *)(a2 + 73);
    int v20 = *(unsigned __int8 *)(a2 + 101);
    *(_DWORD *)__int128 buf = 134352896;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&buf[14] = v6;
    *(_WORD *)&_BYTE buf[22] = 2050;
    *(double *)&buf[24] = v7;
    *(_WORD *)uint64_t v75 = 2050;
    *(double *)&v75[2] = v8;
    *(_WORD *)&v75[10] = 2050;
    *(double *)&v75[12] = v9;
    *(_WORD *)&v75[20] = 2050;
    *(double *)&v75[22] = v10;
    *(_WORD *)&v75[30] = 2050;
    *(double *)&v75[32] = v11;
    *(_WORD *)uint64_t v76 = 2050;
    *(double *)&v76[2] = v12;
    *(_WORD *)&v76[10] = 2050;
    *(double *)&v76[12] = v13;
    *(_WORD *)&v76[20] = 2050;
    *(void *)&v76[22] = v14;
    *(_WORD *)&v76[30] = 2050;
    uint64_t v77 = v15;
    __int16 v78 = 2050;
    uint64_t v79 = v16;
    __int16 v80 = 2050;
    uint64_t v81 = v17;
    __int16 v82 = 2050;
    uint64_t v83 = v18;
    __int16 v84 = 2050;
    uint64_t v85 = v19;
    __int16 v86 = 1026;
    int v87 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Report,aopTimestamp,%{public}llu,reportTimestamp,%{public}f,machTimeNow,%{public}f,posX,%{public}f,posY,%{public}f ,posZ,%{public}f,dvCumsumX,%{public}f,dvCumsumY,%{public}f,dvCumsumZ,%{public}f,tsPosRollover,%{public}llu,tsVelRo llover,%{public}llu,tsDeltaPosXUnavailable,%{public}llu,tsDeltaPosYUnavailable,%{public}llu,tsDeltaPosZUnavailable ,%{public}llu,tsDMReinit,%{public}llu,displacingState,%{public}u",  buf,  0x9Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_101873548);
    }
    uint64_t v23 = qword_101934798;
    uint64_t v24 = *(void *)(a2 + 1);
    uint64_t v25 = *(void *)(a1 + 56);
    double v26 = sub_101171D38();
    double v27 = *(float *)(a2 + 9);
    double v28 = *(float *)(a2 + 13);
    double v29 = *(float *)(a2 + 17);
    double v30 = *(float *)(a2 + 21);
    double v31 = *(float *)(a2 + 25);
    double v32 = *(float *)(a2 + 29);
    uint64_t v33 = *(void *)(a2 + 33);
    uint64_t v34 = *(void *)(a2 + 41);
    uint64_t v35 = *(void *)(a2 + 49);
    uint64_t v36 = *(void *)(a2 + 57);
    uint64_t v37 = *(void *)(a2 + 65);
    uint64_t v38 = *(void *)(a2 + 73);
    int v39 = *(unsigned __int8 *)(a2 + 101);
    int v42 = 134352896;
    uint64_t v43 = v24;
    __int16 v44 = 2050;
    uint64_t v45 = v25;
    __int16 v46 = 2050;
    double v47 = v26;
    __int16 v48 = 2050;
    double v49 = v27;
    __int16 v50 = 2050;
    double v51 = v28;
    __int16 v52 = 2050;
    double v53 = v29;
    __int16 v54 = 2050;
    double v55 = v30;
    __int16 v56 = 2050;
    double v57 = v31;
    __int16 v58 = 2050;
    double v59 = v32;
    __int16 v60 = 2050;
    uint64_t v61 = v33;
    __int16 v62 = 2050;
    uint64_t v63 = v34;
    __int16 v64 = 2050;
    uint64_t v65 = v35;
    __int16 v66 = 2050;
    uint64_t v67 = v36;
    __int16 v68 = 2050;
    uint64_t v69 = v37;
    __int16 v70 = 2050;
    uint64_t v71 = v38;
    __int16 v72 = 1026;
    int v73 = v39;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "Report,aopTimestamp,%{public}llu,reportTimestamp,%{public}f,machTimeNow,%{public}f,posX,%{public}f,posY,%{public}f ,posZ,%{public}f,dvCumsumX,%{public}f,dvCumsumY,%{public}f,dvCumsumZ,%{public}f,tsPosRollover,%{public}llu,tsVelRo llover,%{public}llu,tsDeltaPosXUnavailable,%{public}llu,tsDeltaPosYUnavailable,%{public}llu,tsDeltaPosZUnavailable ,%{public}llu,tsDMReinit,%{public}llu,displacingState,%{public}u",  &v42,  158);
    __int128 v41 = (char *)v40;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLInertialOdometryNotifier::visitInertialOdometry(const CMInertialOdometryReport::InertialOdometry *)",  "%s\n",  v40);
    if (v41 != buf) {
      free(v41);
    }
  }

  *(void *)__int128 buf = *(void *)(a1 + 56);
  *(void *)&uint8_t buf[8] = *(void *)(a2 + 1);
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(a2 + 9);
  *(void *)uint64_t v75 = *(void *)(a2 + 25);
  *(_OWORD *)&v75[8] = *(_OWORD *)(a2 + 33);
  *(_OWORD *)&v75[24] = *(_OWORD *)(a2 + 49);
  *(_OWORD *)uint64_t v76 = *(_OWORD *)(a2 + 65);
  *(_OWORD *)&v76[16] = *(_OWORD *)(a2 + 81);
  float v21 = *(float *)(a2 + 97) - *(double *)(*(void *)(a1 + 72) + 8LL);
  *(float *)&uint64_t v77 = v21;
  BYTE4(v77) = *(_BYTE *)(a2 + 101);
  return sub_1006DD528(a1, 0LL, (uint64_t)buf, 112LL);
}

uint64_t sub_100B5D28C(uint64_t a1, uint64_t a2)
{
  return sub_100B5CE98(a1 - 32, a2);
}

void sub_100B5D294(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v16[0] = CMInertialOdometryUpdateInterval;
  v17[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v16[1] = CMPedestrianFenceClientIdentifier;
  v17[1] = -[NSProcessInfo processName]( +[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"),  "processName");
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  2LL);
  sub_1006E7E64("PedestrianFence/kCLConnectionMessageInertialOdometry", &v15, &v13);
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v11 = v13;
  double v12 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  CLConnectionClient::sendMessage(v2, &v11, 0LL);
  uint64_t v5 = v12;
  if (v12)
  {
    uint64_t v6 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  double v8 = v14;
  if (v14)
  {
    double v9 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100B5D404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10000AE14((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100B5D428(id a1)
{
  qword_101934798 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

uint64_t sub_100B5D454(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  unint64_t v7 = (void *)sub_100C6AAF0(a1, a2, a3, a4, a5);
  void *v7 = off_101873578;
  v7[6] = 0LL;
  sub_10073E92C((uint64_t)sub_100B5D510, a1, a3, &v12);
  uint64_t v8 = v12;
  uint64_t v12 = 0LL;
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + ++*(void *)(result + 48) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    uint64_t v10 = v12;
    uint64_t v12 = 0LL;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
  }

  return a1;
}

void sub_100B5D4E4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + ++*(void *)(result + 48) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100C6AB50(v1);
  _Unwind_Resume(a1);
}

void sub_100B5D510(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101873630);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFallSubscription::onFallNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101873630);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFallSubscription::onFallNotification, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_100B6003C(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B5D6C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B5D6E8(void *a1)
{
  *a1 = off_101873578;
  uint64_t v2 = a1[6];
  a1[6] = 0LL;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    uint64_t v3 = a1[6];
    a1[6] = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return sub_100C6AB50((uint64_t)a1);
}

void sub_100B5D748(void *a1)
{
  uint64_t v1 = (void *)sub_100B5D6E8(a1);
  operator delete(v1);
}

void *sub_100B5D75C@<X0>(uint64_t a1@<X8>)
{
  v44[0] = &off_101873680;
  v44[1] = sub_100B5DEEC;
  double v44[2] = 0LL;
  uint64_t v45 = v44;
  sub_1010DDBC0(v46, "kCLConnectionMessageFallStatsAvailable");
  sub_1008984C0((uint64_t)&v47, (uint64_t)v44);
  __int128 v41 = &off_101873680;
  v42[0] = sub_100B5E044;
  v42[1] = 0LL;
  uint64_t v43 = &v41;
  sub_1010DDBC0(v48, "kCLConnectionMessageFallStatsSetEnabled");
  sub_1008984C0((uint64_t)&v49, (uint64_t)&v41);
  v39[0] = &off_101873680;
  v39[1] = sub_100B5E328;
  v39[2] = 0LL;
  __int128 v40 = v39;
  sub_1010DDBC0(v50, "kCLConnectionMessageFallStatsGetConfig");
  sub_1008984C0((uint64_t)&v51, (uint64_t)v39);
  v37[0] = &off_101873680;
  v37[1] = sub_100B5E4C0;
  _DWORD v37[2] = 0LL;
  uint64_t v38 = v37;
  sub_1010DDBC0(v52, "kCLConnectionMessageFallStatsSendStats");
  sub_1008984C0((uint64_t)&v53, (uint64_t)v37);
  v35[0] = &off_101873680;
  v35[1] = sub_100B5E658;
  id v35[2] = 0LL;
  uint64_t v36 = v35;
  sub_1010DDBC0(v54, "kCLConnectionMessageAnomalyDetectionSimulateEvent");
  sub_1008984C0((uint64_t)&v55, (uint64_t)v35);
  v33[0] = &off_101873680;
  v33[1] = sub_100B5E76C;
  v33[2] = 0LL;
  uint64_t v34 = v33;
  sub_1010DDBC0(v56, "kCLConnectionMessageSetHgalCaptureMode");
  sub_1008984C0((uint64_t)&v57, (uint64_t)v33);
  v31[0] = &off_101873710;
  v31[1] = sub_100B5E880;
  v31[2] = 0LL;
  double v32 = v31;
  sub_1010DDBC0(v58, "kCLConnectionMessageAnomalyEvent");
  sub_1008984C0((uint64_t)&v59, (uint64_t)v31);
  v29[0] = &off_101873710;
  v29[1] = sub_100B5EAA8;
  v29[2] = 0LL;
  double v30 = v29;
  sub_1010DDBC0(v60, "kCLConnectionMessageAnomalyEventCompleted");
  sub_1008984C0((uint64_t)&v61, (uint64_t)v29);
  v27[0] = &off_101873680;
  v27[1] = sub_100B5EE54;
  _OWORD v27[2] = 0LL;
  double v28 = v27;
  sub_1010DDBC0(v62, "kCLConnectionMessageAnomalyEventCompletedMostRecent");
  sub_1008984C0((uint64_t)&v63, (uint64_t)v27);
  v25[0] = &off_101873680;
  v25[1] = sub_100B5F2A4;
  _DWORD v25[2] = 0LL;
  double v26 = v25;
  sub_1010DDBC0(v64, "kCLConnectionMessageAnomalyEventEnabled");
  sub_1008984C0((uint64_t)&v65, (uint64_t)v25);
  sub_100B608B8(a1, (unsigned __int8 *)v46, 10LL);
  uint64_t v2 = 70LL;
  do
  {
    uint64_t v3 = (void *)v46[v2 - 1];
    if (&v44[v2] == v3)
    {
      uint64_t v3 = &v44[v2];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v43)[v2]) < 0) {
      operator delete((void *)v42[v2]);
    }
    v2 -= 7LL;
  }

  while (v2 * 8);
  uint64_t v5 = v26;
  if (v26 == v25)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v25;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v26)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  BOOL v7 = v28;
  if (v28 == v27)
  {
    uint64_t v8 = 4LL;
    BOOL v7 = v27;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  else if (v28)
  {
    uint64_t v8 = 5LL;
    goto LABEL_19;
  }

  uint64_t v9 = v30;
  if (v30 == v29)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v29;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  else if (v30)
  {
    uint64_t v10 = 5LL;
    goto LABEL_24;
  }

  uint64_t v11 = v32;
  if (v32 == v31)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = v31;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

  else if (v32)
  {
    uint64_t v12 = 5LL;
    goto LABEL_29;
  }

  uint64_t v13 = v34;
  if (v34 == v33)
  {
    uint64_t v14 = 4LL;
    uint64_t v13 = v33;
LABEL_34:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }

  else if (v34)
  {
    uint64_t v14 = 5LL;
    goto LABEL_34;
  }

  __int16 v15 = v36;
  if (v36 == v35)
  {
    uint64_t v16 = 4LL;
    __int16 v15 = v35;
LABEL_39:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }

  else if (v36)
  {
    uint64_t v16 = 5LL;
    goto LABEL_39;
  }

  __int16 v17 = v38;
  if (v38 == v37)
  {
    uint64_t v18 = 4LL;
    __int16 v17 = v37;
LABEL_44:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }

  else if (v38)
  {
    uint64_t v18 = 5LL;
    goto LABEL_44;
  }

  __int16 v19 = v40;
  if (v40 == v39)
  {
    uint64_t v20 = 4LL;
    __int16 v19 = v39;
LABEL_49:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }

  else if (v40)
  {
    uint64_t v20 = 5LL;
    goto LABEL_49;
  }

  float v21 = v43;
  if (v43 == &v41)
  {
    uint64_t v22 = 4LL;
    float v21 = &v41;
LABEL_54:
    (*v21)[v22]();
  }

  else if (v43)
  {
    uint64_t v22 = 5LL;
    goto LABEL_54;
  }

  uint64_t result = v45;
  if (v45 == v44)
  {
    uint64_t v24 = 4LL;
    uint64_t result = v44;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v24))();
  }

  else if (v45)
  {
    uint64_t v24 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v24))();
  }

  return result;
}

void sub_100B5DC40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20, char *a21, char a22, uint64_t a23, uint64_t a24, char *a25, char a26, uint64_t a27, uint64_t a28, char *a29, char a30, uint64_t a31, uint64_t a32, char *a33, char a34, uint64_t a35, uint64_t a36, char *a37, char a38, uint64_t a39, uint64_t a40, char *a41, char a42, uint64_t a43, uint64_t a44, char *a45, char a46, uint64_t a47, uint64_t a48, char *a49)
{
  for (uint64_t i = 504LL; i != -56; i -= 56LL)
    sub_10026E430(v49 + i);
  __int16 v52 = a13;
  if (a13 == &a10)
  {
    uint64_t v53 = 4LL;
    __int16 v52 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_8;
    }
    uint64_t v53 = 5LL;
  }

  (*(void (**)(void))(*(void *)v52 + 8 * v53))();
LABEL_8:
  __int16 v54 = a17;
  if (a17 == &a14)
  {
    uint64_t v55 = 4LL;
    __int16 v54 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_13;
    }
    uint64_t v55 = 5LL;
  }

  (*(void (**)(void))(*(void *)v54 + 8 * v55))();
LABEL_13:
  __int16 v56 = a21;
  if (a21 == &a18)
  {
    uint64_t v57 = 4LL;
    __int16 v56 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_18;
    }
    uint64_t v57 = 5LL;
  }

  (*(void (**)(void))(*(void *)v56 + 8 * v57))();
LABEL_18:
  __int16 v58 = a25;
  if (a25 == &a22)
  {
    uint64_t v59 = 4LL;
    __int16 v58 = &a22;
  }

  else
  {
    if (!a25) {
      goto LABEL_23;
    }
    uint64_t v59 = 5LL;
  }

  (*(void (**)(void))(*(void *)v58 + 8 * v59))();
LABEL_23:
  __int16 v60 = a29;
  if (a29 == &a26)
  {
    uint64_t v61 = 4LL;
    __int16 v60 = &a26;
  }

  else
  {
    if (!a29) {
      goto LABEL_28;
    }
    uint64_t v61 = 5LL;
  }

  (*(void (**)(void))(*(void *)v60 + 8 * v61))();
LABEL_28:
  __int16 v62 = a33;
  if (a33 == &a30)
  {
    uint64_t v63 = 4LL;
    __int16 v62 = &a30;
  }

  else
  {
    if (!a33) {
      goto LABEL_33;
    }
    uint64_t v63 = 5LL;
  }

  (*(void (**)(void))(*(void *)v62 + 8 * v63))();
LABEL_33:
  __int16 v64 = a37;
  if (a37 == &a34)
  {
    uint64_t v65 = 4LL;
    __int16 v64 = &a34;
  }

  else
  {
    if (!a37) {
      goto LABEL_38;
    }
    uint64_t v65 = 5LL;
  }

  (*(void (**)(void))(*(void *)v64 + 8 * v65))();
LABEL_38:
  __int16 v66 = a41;
  if (a41 == &a38)
  {
    uint64_t v67 = 4LL;
    __int16 v66 = &a38;
  }

  else
  {
    if (!a41) {
      goto LABEL_43;
    }
    uint64_t v67 = 5LL;
  }

  (*(void (**)(void))(*(void *)v66 + 8 * v67))();
LABEL_43:
  __int16 v68 = a45;
  if (a45 == &a42)
  {
    uint64_t v69 = 4LL;
    __int16 v68 = &a42;
  }

  else
  {
    if (!a45) {
      goto LABEL_48;
    }
    uint64_t v69 = 5LL;
  }

  (*(void (**)(void))(*(void *)v68 + 8 * v69))();
LABEL_48:
  __int16 v70 = a49;
  if (a49 == &a46)
  {
    uint64_t v71 = 4LL;
    __int16 v70 = &a46;
  }

  else
  {
    if (!a49) {
      goto LABEL_53;
    }
    uint64_t v71 = 5LL;
  }

  (*(void (**)(void))(*(void *)v70 + 8 * v71))();
LABEL_53:
  _Unwind_Resume(a1);
}

void sub_100B5DEAC()
{
}

void sub_100B5DEB8()
{
}

void sub_100B5DEC4()
{
}

void sub_100B5DED0()
{
}

void sub_100B5DEDC()
{
}

void sub_100B5DEEC(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  int v8 = sub_100B5F6F8(a1, v12);
  int v9 = v8;
  if (v5)
  {
    uint64_t v10 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v9) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  if (v8)
  {
LABEL_9:
    uint64_t v13 = CMAvailable;
    uint64_t v14 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL);
    CLConnectionMessage::sendReply(*a2);
  }

void sub_100B5E00C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100B5E044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  v40[0] = *(void *)a2;
  v40[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  char v8 = sub_100B5F6F8(a1, v40);
  char v9 = v8;
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v10 = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((v9 & 1) == 0) {
      goto LABEL_41;
    }
  }

  else
  {
LABEL_8:
    if ((v8 & 1) == 0) {
      goto LABEL_41;
    }
  }

  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  id v13 = [Dictionary objectForKeyedSubscript:CMFallDataCollectionConfigurationKey];
  id v14 = [Dictionary objectForKeyedSubscript:CMFallSetStatsEnabled];
  if (v13) {
    id v14 = v13;
  }
  id v15 = [v14 unsignedIntegerValue];
  uint64_t v16 = *(void **)(a1 + 24);
  if (v16)
  {
    [v16 clientName];
  }

  else
  {
    uint64_t v39 = 0LL;
    *(_OWORD *)__int128 __p = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    *(_OWORD *)uint64_t v36 = 0u;
    __int128 v33 = 0u;
    *(_OWORD *)uint64_t v34 = 0u;
    *(_OWORD *)double v31 = 0u;
    *(_OWORD *)double v32 = 0u;
    *(_OWORD *)double v29 = 0u;
    __int128 v30 = 0u;
    *(_OWORD *)double v28 = 0u;
  }

  sub_100FE370C((uint64_t)v28);
  if (v35 >= 0) {
    __int16 v17 = &v34[1];
  }
  else {
    __int16 v17 = (void **)v34[1];
  }
  uint64_t v18 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v36[0]);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  if (SHIBYTE(v32[0]) < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[1]);
  }
  if (SHIBYTE(v29[0]) < 0) {
    operator delete(v28[0]);
  }
  id v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLFallNotifier");
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3321888768LL;
  v26[2] = sub_100B5F9A0;
  v26[3] = &unk_1018735A0;
  v26[4] = v18;
  uint64_t v26[5] = v15;
  uint64_t v20 = *(std::__shared_weak_count **)(a2 + 8);
  v26[6] = *(void *)a2;
  double v27 = v20;
  if (v20)
  {
    float v21 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  [v19 doAsync:v26];
  uint64_t v23 = v27;
  if (v27)
  {
    uint64_t v24 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

void sub_100B5E2D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B5E328(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v21[0] = *a2;
  v21[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  char v8 = sub_100B5F6F8(a1, v21);
  char v9 = v8;
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v10 = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((v9 & 1) == 0) {
      goto LABEL_18;
    }
  }

  else
  {
LABEL_8:
    if ((v8 & 1) == 0) {
      goto LABEL_18;
    }
  }

  id v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLFallNotifier");
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3321888768LL;
  _DWORD v19[2] = sub_100B5FA84;
  v19[3] = &unk_1018735D0;
  uint64_t v13 = a2[1];
  v19[4] = *a2;
  uint64_t v20 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    id v14 = (unint64_t *)(v13 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  [v12 doAsync:v19];
  uint64_t v16 = v20;
  if (v20)
  {
    __int16 v17 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

void sub_100B5E48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B5E4C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v21[0] = *a2;
  v21[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  char v8 = sub_100B5F6F8(a1, v21);
  char v9 = v8;
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v10 = (unint64_t *)&v5->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((v9 & 1) == 0) {
      goto LABEL_18;
    }
  }

  else
  {
LABEL_8:
    if ((v8 & 1) == 0) {
      goto LABEL_18;
    }
  }

  id v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLFallNotifier");
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3321888768LL;
  _DWORD v19[2] = sub_100B5FD80;
  v19[3] = &unk_1018735D0;
  uint64_t v13 = a2[1];
  v19[4] = *a2;
  uint64_t v20 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    id v14 = (unint64_t *)(v13 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  [v12 doAsync:v19];
  uint64_t v16 = v20;
  if (v20)
  {
    __int16 v17 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

void sub_100B5E624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B5E658(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  id v14 = *(CLConnectionMessage **)a2;
  unint64_t v15 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  char v8 = sub_100B5F6F8(a1, (uint64_t *)&v14);
  char v9 = v8;
  if (v5)
  {
    uint64_t v10 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((v9 & 1) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  if ((v8 & 1) != 0)
  {
LABEL_9:
    id v12 = *(void **)(*(void *)(a1 + 48) + 16LL);
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    objc_msgSend( v12,  "simulateEvent:",  objc_msgSend( objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMAnomalyEventType, v14, v15),  "unsignedIntValue"));
  }

void sub_100B5E748( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_100B5E76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  id v14 = *(CLConnectionMessage **)a2;
  unint64_t v15 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  char v8 = sub_100B5F6F8(a1, (uint64_t *)&v14);
  char v9 = v8;
  if (v5)
  {
    uint64_t v10 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((v9 & 1) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  if ((v8 & 1) != 0)
  {
LABEL_9:
    id v12 = *(void **)(*(void *)(a1 + 48) + 16LL);
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    objc_msgSend( v12,  "setHgalCaptureMode:",  objc_msgSend( objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMHgalCaptureMode, v14, v15),  "unsignedIntValue"));
  }

void sub_100B5E85C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_100B5E880(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(__p, "com.apple.locationd.activity");
  char v3 = sub_100C6AC9C(a1);
  char v4 = v3;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
  }

  else if ((v3 & 1) == 0)
  {
    goto LABEL_10;
  }

  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101873650);
  }
  uint64_t v5 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Anomaly Detection subscription changed on unsupported platform - ignored",  (uint8_t *)__p,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019345D8,  17LL,  "Anomaly Detection subscription changed on unsupported platform - ignored",  v8,  2);
    unint64_t v7 = (void **)v6;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFallSubscription::handleRequestAnomalyEvent(BOOL, const CLNameValuePair &)",  "%s\n",  v6);
    if (v7 != __p) {
      free(v7);
    }
  }

void sub_100B5EA60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100B5EAA8(uint64_t a1, int a2)
{
  char v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101873650);
  }
  uint64_t v5 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v24 = v6;
    __int16 v25 = 1024;
    int v26 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Received AnomalyEventCompletedUpdate request,client,%@,subscribe,%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    uint64_t v15 = *(void *)(a1 + 24);
    int v19 = 138412546;
    uint64_t v20 = v15;
    __int16 v21 = 1024;
    int v22 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  1LL,  "Received AnomalyEventCompletedUpdate request,client,%@,subscribe,%d",  &v19,  18);
    __int16 v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallSubscription::handleRequestAnomalyEventCompletedUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  if ((sub_100C6ADF0(a1) & 1) != 0)
  {
    sub_100C6AC8C(a1);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(v7 + 8);
    char v8 = *(void **)(v7 + 16);
    if (a2) {
      [v8 register:v9 forNotification:1 registrationInfo:0];
    }
    else {
      [v8 unregister:v9 forNotification:1];
    }
  }

  else
  {
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    char v10 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 24);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v24 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@ is not authorized for Fall Detection updates",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101873650);
      }
      uint64_t v12 = *(void *)(a1 + 24);
      int v19 = 138412290;
      uint64_t v20 = v12;
      LODWORD(v18) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  0LL,  "%@ is not authorized for Fall Detection updates",  &v19,  v18);
      id v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallSubscription::handleRequestAnomalyEventCompletedUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }
}

void sub_100B5EE1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B5EE54(uint64_t a1, void *a2)
{
  char v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101873650);
  }
  uint64_t v5 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v31 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Received MessageAnomalyEventCompletedMostRecent message,client,%@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    uint64_t v17 = *(void *)(a1 + 24);
    int v28 = 138412290;
    uint64_t v29 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  1LL,  "Received MessageAnomalyEventCompletedMostRecent message,client,%@",  &v28,  12);
    int v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallSubscription::handleMessageAnomalyEventCompletedMostRecent(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  if ((sub_100C6ADF0(a1) & 1) != 0)
  {
    id v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLFallNotifier");
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3321888768LL;
    v24[2] = sub_100B5FDE8;
    _DWORD v24[3] = &unk_1018735D0;
    char v8 = (std::__shared_weak_count *)a2[1];
    _DWORD v24[4] = *a2;
    __int16 v25 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }

    [v7 doAsync:v24];
    uint64_t v11 = v25;
    if (v25)
    {
      uint64_t v12 = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

  else
  {
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    id v14 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 24);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v31 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%@ is not authorized for Fall Detection updates",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101873650);
      }
      uint64_t v20 = *(void *)(a1 + 24);
      int v28 = 138412290;
      uint64_t v29 = v20;
      LODWORD(v23) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  16LL,  "%@ is not authorized for Fall Detection updates",  &v28,  v23);
      int v22 = (uint8_t *)v21;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFallSubscription::handleMessageAnomalyEventCompletedMostRecent(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }

    uint64_t v16 = *a2;
    uint64_t v26 = CMErrorMessage;
    double v27 = &off_1018D4160;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL);
    CLConnectionMessage::sendReply(v16);
  }
}

void sub_100B5F264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B5F2A4(uint64_t a1, void *a2)
{
  char v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101873650);
  }
  uint64_t v5 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v31 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Received MessageAnomalyEventEnabled message,client,%@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    uint64_t v17 = *(void *)(a1 + 24);
    int v28 = 138412290;
    uint64_t v29 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  1LL,  "Received MessageAnomalyEventEnabled message,client,%@",  &v28,  12);
    int v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallSubscription::handleMessageAnomalyEventEnabled(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  if ((sub_100C6AE00(a1) & 1) != 0)
  {
    id v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLFallNotifier");
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3321888768LL;
    v24[2] = sub_100B5FF9C;
    _DWORD v24[3] = &unk_1018735D0;
    char v8 = (std::__shared_weak_count *)a2[1];
    _DWORD v24[4] = *a2;
    __int16 v25 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }

    [v7 doAsync:v24];
    uint64_t v11 = v25;
    if (v25)
    {
      uint64_t v12 = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

  else
  {
    uint64_t v14 = *a2;
    uint64_t v26 = CMErrorMessage;
    double v27 = &off_1018D4160;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL);
    CLConnectionMessage::sendReply(v14);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    uint64_t v15 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 24);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v31 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%@ is not authorized for Fall Detection updates",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101873650);
      }
      uint64_t v20 = *(void *)(a1 + 24);
      int v28 = 138412290;
      uint64_t v29 = v20;
      LODWORD(v23) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  16LL,  "%@ is not authorized for Fall Detection updates",  &v28,  v23);
      int v22 = (uint8_t *)v21;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFallSubscription::handleMessageAnomalyEventEnabled(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }
  }
}

void sub_100B5F6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100B5F6F8(uint64_t a1, uint64_t *a2)
{
  char v4 = sub_100C6AC9C(a1);
  char v5 = v4;
  if (v21 < 0)
  {
    operator delete(*(void **)__p);
    if ((v5 & 1) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    id v7 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)__int128 __p = 138543362;
      *(void *)&__p[4] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %{public}@ does not have appropriate motion entitlement.",  __p,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101873650);
      }
      uint64_t v11 = *(void *)(a1 + 24);
      int v18 = 138543362;
      uint64_t v19 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019345D8,  0LL,  "#Warning Client %{public}@ does not have appropriate motion entitlement.",  &v18,  12);
      unint64_t v13 = (char *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFallSubscription::sanityCheckForFall(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v12);
      if (v13 != __p) {
        free(v13);
      }
    }

    uint64_t v9 = *a2;
    uint64_t v16 = CMErrorMessage;
    uint64_t v17 = &off_1018D4130;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL);
    CLConnectionMessage::sendReply(v9);
    return 0LL;
  }

  if ((v4 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((sub_10071E52C() & 1) != 0) {
    return 1LL;
  }
  uint64_t v10 = *a2;
  uint64_t v14 = CMErrorMessage;
  uint64_t v15 = &off_1018D4148;
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL);
  CLConnectionMessage::sendReply(v10);
  return 0LL;
}

void sub_100B5F97C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B5F9A0(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = v3 != 0LL;
  if ((v3 & 0xFF000000) != 0) {
    uint64_t v5 = v4 | 2;
  }
  else {
    uint64_t v5 = v3 != 0LL;
  }
  uint64_t v6 = a1[6];
  v8[0] = CMReturnCode;
  v9[0] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4);
  v8[1] = CMFallDataCollectionConfigurationKey;
  v9[1] = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v5);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  2LL);
  return CLConnectionMessage::sendReply(v6);
}

uint64_t sub_100B5FA84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 7816);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 7828);
  unsigned int v6 = *(_DWORD *)(a2 + 7824);
  int v7 = *(_DWORD *)(a2 + 404);
  int v8 = *(_DWORD *)(a2 + 10468);
  int v9 = *(_DWORD *)(a2 + 10472);
  int v10 = *(_DWORD *)(a2 + 10476);
  int v11 = *(_DWORD *)(a2 + 10480);
  v28[0] = CMFallStatsMode;
  v29[0] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v6);
  v28[1] = CMFallStatsSensorRecordingActive;
  v29[1] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", BYTE1(v6));
  unsigned int v28[2] = CMFallStatsSimulateFall;
  v29[2] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", BYTE2(v6));
  v28[3] = CMFallStatsUserStudyPressureDataCollection;
  void v29[3] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", HIBYTE(v6));
  v28[4] = CMAnomalyDetectorEnabled;
  v29[4] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v5);
  v28[5] = CMFallLastReplyAopTimestamp;
  void v29[5] = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v4);
  uint64_t v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  6LL);
  v26[0] = CMFallConfigUserAge;
  LODWORD(v13) = v7;
  v27[0] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v13);
  v26[1] = CMFallConfigUserMets;
  v27[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a2 + 10560));
  v26[2] = CMFallImpactAlertThreshold;
  LODWORD(v14) = v8;
  _OWORD v27[2] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v14);
  v26[3] = CMFallImpactLoggingStatsThreshold;
  LODWORD(v15) = v9;
  void v27[3] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v15);
  v26[4] = CMFallImpactLoggingHeartRateThreshold;
  LODWORD(v++*(void *)(result + 16) = v10;
  v27[4] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v16);
  uint64_t v26[5] = CMFallImpactLoggingHighResolutionSensorDataThreshold;
  LODWORD(v17) = v11;
  v27[5] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17);
  int v18 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v27,  v26,  6LL);
  uint64_t v19 = objc_alloc(&OBJC_CLASS___NSDictionary);
  uint64_t v20 = CMReturnCode;
  uint64_t v21 = CMFallConfig;
  uint64_t v22 = CMFallInternalNotifierState;
  uint64_t v23 = sub_100738B6C(a2);
  uint64_t v24 =  -[NSDictionary initWithObjectsAndKeys:]( v19,  "initWithObjectsAndKeys:",  v20,  &__kCFBooleanTrue,  v21,  v12,  v22,  v23,  CMFallInternalMetricState,  sub_10073946C(),  CMFallBehavioralConfig,  v18,  0LL);
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

uint64_t sub_100B5FD80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 =  -[NSFileHandle initWithFileDescriptor:]( objc_alloc(&OBJC_CLASS___NSFileHandle),  "initWithFileDescriptor:",  CLConnectionMessage::copyFileDescriptor(*(CLConnectionMessage **)(a1 + 32), 0LL));
  sub_1007270FC(a2, v4);
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

uint64_t sub_100B5FDE8(uint64_t a1, uint64_t a2)
{
  if (v9)
  {
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    int v3 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "fetching anomaly event on unsupported platform - ignored",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101873650);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  17LL,  "fetching anomaly event on unsupported platform - ignored",  v7,  2);
      unsigned int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFallSubscription::handleMessageAnomalyEventCompletedMostRecent(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

uint64_t sub_100B5FF9C(uint64_t a1)
{
  uint64_t v2 = sub_10071E178();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v5 = CMAnomalyDetectorEnabled;
  unsigned int v6 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v2);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL);
  return CLConnectionMessage::sendReply(v3);
}

void sub_100B6003C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 != 1) {
    return;
  }
  if (*(void *)(a4 + 19))
  {
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    uint64_t v5 = qword_1019345D8;
    if (!os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    uint64_t v6 = *(void *)(a4 + 19);
    int v7 = *(unsigned __int8 *)(a4 + 149);
    uint64_t v8 = *(void *)(a4 + 166);
    uint64_t v9 = *(void *)(a4 + 158);
    int v10 = *(unsigned __int8 *)(a4 + 13);
    int v11 = *(unsigned __int8 *)(a4 + 156);
    int v12 = *(unsigned __int8 *)(a4 + 157);
    int v13 = *(unsigned __int8 *)(a4 + 190);
    *(_DWORD *)__int128 buf = 68291331;
    int v23 = 0;
    __int16 v24 = 2082;
    __int16 v25 = "";
    __int16 v26 = 2082;
    double v27 = "downstream";
    __int16 v28 = 2050;
    uint64_t v29 = v6;
    __int16 v30 = 1026;
    int v31 = v7;
    __int16 v32 = 2049;
    uint64_t v33 = v8;
    __int16 v34 = 2049;
    uint64_t v35 = v9;
    __int16 v36 = 1025;
    int v37 = v10;
    __int16 v38 = 1025;
    int v39 = v11;
    __int16 v40 = 1025;
    int v41 = v12;
    __int16 v42 = 1025;
    int v43 = v13;
    double v14 = "{msg%{public}.0s:Subscription - Received anomaly event notification, direction:%{public, location:"
          "escape_only}s, identifier:%{public}llu, operatingMode:%{public}u, anomaly timestamp:%{private}f"
          ", update timestamp:%{private}f, state:%{private}d, response:%{private}d, resolution:%{priv"
          "ate}d, sosState:%{private}d}";
    double v15 = (os_log_s *)v5;
    uint32_t v16 = 88;
  }

  else
  {
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    uint64_t v17 = qword_1019345D8;
    if (!os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    *(_DWORD *)__int128 buf = 68289026;
    int v23 = 0;
    __int16 v24 = 2082;
    __int16 v25 = "";
    double v14 = "{msg%{public}.0s:Subscription - Received anomaly event notification with no event (reconnection)}";
    double v15 = (os_log_s *)v17;
    uint32_t v16 = 18;
  }

  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101873650);
  }
LABEL_13:
  int v18 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "Received anomaly event notification on unsupported platform - ignored",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101873650);
    }
    v21[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  17LL,  "Received anomaly event notification on unsupported platform - ignored",  v21,  2);
    uint64_t v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFallSubscription::onFallNotification(int, const CLFallNotifier_Type::Notification &, const CLFallNotifier_T ype::NotificationData &)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

uint64_t sub_100B60358()
{
  return 0LL;
}

void sub_100B60360(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B6038C(id a1)
{
  qword_1019345D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

__n128 sub_100B603B8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101873680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100B603F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101873680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100B60418(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100B60420(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100B6045C()
{
}

void sub_100B60468(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  double v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  uint64_t v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  int v10 = v17;
  if (v17)
  {
    int v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    int v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100B6053C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

__n128 sub_100B60558(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101873710;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100B60594(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101873710;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100B605B8(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_100B605C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100B605FC()
{
}

void sub_100B60608(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100B6068C(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B60674( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B6068C(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    int v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101873770);
    }
    int v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101873770);
      }
    }

    unint64_t v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)__int128 buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_100B60870( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B6088C(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100B608B8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 16) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(result + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100B60930(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100B6091C(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100B60930(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100B60BB0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(result + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100B60B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100B60BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + ++*(void *)(result + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100B60C24(v8 + 2, a3);
  *(_BYTE *)(a4 + ++*(void *)(result + 16) = 1;
  return result;
}

void sub_100B60C0C(_Unwind_Exception *a1)
{
}

void *sub_100B60C24(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100B60C7C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100B60C98()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199AB40, (void *)&_mh_execute_header);
}

uint64_t sub_100B60CDC(uint64_t result, void *a2, __int128 *a3, int a4, int a5, uint64_t a6, double a7)
{
  *(void *)__n128 result = *a2;
  __int128 v7 = *a3;
  *(_OWORD *)(result + ++*(void *)(result + 24) = a3[1];
  *(_OWORD *)(result + 8) = v7;
  __int128 v8 = a3[2];
  __int128 v9 = a3[3];
  __int128 v10 = a3[4];
  *(_OWORD *)(result + ++*(void *)(result + 88) = a3[5];
  *(_OWORD *)(result + 72) = v10;
  *(_OWORD *)(result + ++*(void *)(result + 56) = v9;
  *(_OWORD *)(result + ++*(void *)(result + 40) = v8;
  __int128 v11 = a3[6];
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *(_OWORD *)(result + 1++*(void *)(result + 48) = *(__int128 *)((char *)a3 + 140);
  *(_OWORD *)(result + 136) = v13;
  *(_OWORD *)(result + 120) = v12;
  *(_OWORD *)(result + 104) = v11;
  *(_DWORD *)(result + 1++*(void *)(result + 64) = a4;
  *(_DWORD *)(result + ++*(void *)(result + 168) = a5;
  *(double *)(result + ++*(void *)(result + 176) = a7;
  *(void *)(result + 184) = a6;
  return result;
}

double sub_100B60D34(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a2 + 40);
  int v5 = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 56);
  *(void *)a1 = *(void *)a2;
  __int128 v7 = *(_OWORD *)((char *)a3 + 140);
  __int128 v9 = a3[7];
  __int128 v8 = a3[8];
  *(_OWORD *)(a1 + 104) = a3[6];
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 1++*(void *)(result + 48) = v7;
  __int128 v11 = a3[4];
  __int128 v10 = a3[5];
  __int128 v12 = a3[3];
  *(_OWORD *)(a1 + ++*(void *)(result + 40) = a3[2];
  *(_OWORD *)(a1 + ++*(void *)(result + 56) = v12;
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + ++*(void *)(result + 88) = v10;
  __int128 v13 = a3[1];
  *(_OWORD *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = v13;
  *(_DWORD *)(a1 + 1++*(void *)(result + 64) = v4;
  *(_DWORD *)(a1 + ++*(void *)(result + 168) = v5;
  *(double *)(a1 + ++*(void *)(result + 176) = result;
  *(void *)(a1 + 184) = a4;
  return result;
}

double sub_100B60D98(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 84));
}

void *sub_100B60DC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, off_1018737A0[*(void *)(a1 + 184) + 1]);
}

uint64_t sub_100B60DDC@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 84);
  sub_10000CE18((uint64_t)v36);
  __int128 v6 = sub_10000CF44(&v37, (uint64_t)"mac, ", 5LL);
  sub_1007EC360(&__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  sub_10000CF44(v6, (uint64_t)p_p, size);
  __int128 v9 = sub_10000CF44(&v37, (uint64_t)", lat, ", 7LL);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + ++*(void *)(result + 16) = 8LL;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 12));
  __int128 v11 = sub_10000CF44(&v37, (uint64_t)", lon, ", 7LL);
  uint64_t v12 = *v11;
  *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + ++*(void *)(result + 16) = 8LL;
  *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 20));
  __int128 v13 = sub_10000CF44(&v37, (uint64_t)", alt, ", 7LL);
  uint64_t v14 = *v13;
  *(uint64_t *)((char *)v13 + *(void *)(*v13 - 24) + ++*(void *)(result + 16) = 1LL;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(void *)(v14 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 36));
  unint64_t v15 = sub_10000CF44(&v37, (uint64_t)", acc, ", 7LL);
  uint64_t v16 = *v15;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + ++*(void *)(result + 16) = 1LL;
  *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 28));
  float v17 = sub_10000CF44(&v37, (uint64_t)", vacc, ", 8LL);
  uint64_t v18 = *v17;
  *(uint64_t *)((char *)v17 + *(void *)(*v17 - 24) + ++*(void *)(result + 16) = 1LL;
  *(_DWORD *)((char *)v17 + *(void *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(void *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 44));
  unint64_t v19 = sub_10000CF44(&v37, (uint64_t)", channel, ", 11LL);
  uint64_t v20 = *v19;
  *(uint64_t *)((char *)v19 + *(void *)(*v19 - 24) + ++*(void *)(result + 16) = 0LL;
  *(_DWORD *)((char *)v19 + *(void *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(void *)(v20 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v19, *(unsigned int *)(a1 + 164));
  size_t v21 = sub_10000CF44(&v37, (uint64_t)", rssi, ", 8LL);
  uint64_t v22 = *v21;
  *(uint64_t *)((char *)v21 + *(void *)(*v21 - 24) + ++*(void *)(result + 16) = 0LL;
  *(_DWORD *)((char *)v21 + *(void *)(v22 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(void *)(v22 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v21, *(unsigned int *)(a1 + 168));
  unint64_t v23 = sub_10000CF44(&v37, (uint64_t)", locationTime, ", 16LL);
  uint64_t v24 = *v23;
  *(uint64_t *)((char *)v23 + *(void *)(*v23 - 24) + ++*(void *)(result + 16) = 1LL;
  *(_DWORD *)((char *)v23 + *(void *)(v24 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(void *)(v24 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 84));
  __int16 v25 = sub_10000CF44(&v37, (uint64_t)", age, ", 7LL);
  uint64_t v26 = *v25;
  *(uint64_t *)((char *)v25 + *(void *)(*v25 - 24) + ++*(void *)(result + 16) = 4LL;
  *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(void *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
  double v27 = (void *)std::ostream::operator<<(vabdd_f64(Current, v5) / 3600.0);
  sub_10000CF44(v27, (uint64_t)"h", 1LL);
  __int16 v28 = sub_10000CF44(&v37, (uint64_t)", scanTime, ", 12LL);
  uint64_t v29 = *v28;
  *(uint64_t *)((char *)v28 + *(void *)(*v28 - 24) + ++*(void *)(result + 16) = 1LL;
  *(_DWORD *)((char *)v28 + *(void *)(v29 - 24) + 8) = *(_DWORD *)((_BYTE *)v28 + *(void *)(v29 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 176));
  __int16 v30 = sub_10000CF44(&v37, (uint64_t)", LOI, ", 7LL);
  sub_100B60DC0(a1, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v31 = &__p;
  }
  else {
    int v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v32 = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v32 = __p.__r_.__value_.__l.__size_;
  }
  sub_10000CF44(v30, (uint64_t)v31, v32);
  std::stringbuf::str(a2, &v38);
  *(void *)((char *)v36
  uint64_t v37 = v33;
  std::streambuf::~streambuf(&v38);
  return std::ios::~ios(&v39);
}

void sub_100B6123C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100B61888(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_80;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_82;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_80:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_82:
        uint64_t v47 = 32LL;
        goto LABEL_111;
      case 3u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 0x40u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_86;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_86:
        uint64_t v47 = 44LL;
        goto LABEL_111;
      case 4u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 0x10u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_90;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_90:
        uint64_t v47 = 36LL;
        goto LABEL_111;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1LL || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_94;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_94:
        uint64_t v47 = 12LL;
        goto LABEL_111;
      case 6u:
        __int16 v30 = objc_alloc_init(&OBJC_CLASS___ALSLocation);

        *(void *)(a1 + ++*(void *)(result + 24) = v30;
        if (PBReaderPlaceMark(a2, v48) && (sub_100B87820((uint64_t)v30, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v48);
LABEL_112:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 7u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 0x80u;
        while (2)
        {
          unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1LL || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v34 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v14 |= (unint64_t)(v34 & 0x7F) << v31;
            if (v34 < 0)
            {
              v31 += 7;
              BOOL v9 = v32++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_98;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_98:
        uint64_t v47 = 48LL;
        goto LABEL_111;
      case 8u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 1u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1LL || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v38 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v14 |= (unint64_t)(v38 & 0x7F) << v35;
            if (v38 < 0)
            {
              v35 += 7;
              BOOL v9 = v36++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_102;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_102:
        uint64_t v47 = 8LL;
        goto LABEL_111;
      case 9u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (2)
        {
          unint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1LL || v41 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v42 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
            v14 |= (unint64_t)(v42 & 0x7F) << v39;
            if (v42 < 0)
            {
              v39 += 7;
              BOOL v9 = v40++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_106;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_106:
        uint64_t v47 = 16LL;
        goto LABEL_111;
      case 0xAu:
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 0x20u;
        while (2)
        {
          unint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 == -1LL || v45 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v46 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
            v14 |= (unint64_t)(v46 & 0x7F) << v43;
            if (v46 < 0)
            {
              v43 += 7;
              BOOL v9 = v44++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_110;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_110:
        uint64_t v47 = 40LL;
LABEL_111:
        *(_DWORD *)(a1 + v47) = v14;
        goto LABEL_112;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_112;
    }
  }

uint64_t sub_100B636A4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    char v4 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    unsigned int v5 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    unint64_t v6 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    unint64_t v7 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    char v8 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    BOOL v9 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    int v10 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    __int128 v11 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    char v12 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    unsigned int v13 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    uint64_t v14 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    unint64_t v15 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v20 = v19 + 1;
        if (v19 == -1 || v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0) {
          goto LABEL_12;
        }
        v16 += 7;
        BOOL v22 = v17++ >= 9;
        if (v22)
        {
          unint64_t v18 = 0LL;
          int v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v18 = 0LL;
      }
LABEL_14:
      if (v23 || (v18 & 7) == 4) {
        break;
      }
      switch((v18 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + v4[754]) |= 0x8000u;
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 <= 0xFFFFFFFFFFFFFFF7LL && v25 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = v5[755];
          goto LABEL_151;
        case 2u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0LL;
          *(_DWORD *)(a1 + v4[754]) |= 0x100000u;
          while (2)
          {
            uint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v38 = v37 + 1;
            if (v37 == -1 || v38 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v39 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                BOOL v22 = v35++ >= 9;
                if (v22)
                {
                  LODWORD(v36) = 0;
                  goto LABEL_103;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v36) = 0;
          }
LABEL_103:
          uint64_t v72 = v6[756];
          goto LABEL_116;
        case 3u:
          *(_DWORD *)(a1 + v4[754]) |= 2u;
          unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 <= 0xFFFFFFFFFFFFFFF7LL && v40 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = v7[757];
          goto LABEL_151;
        case 4u:
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0LL;
          *(_DWORD *)(a1 + v4[754]) |= 0x1000u;
          while (2)
          {
            uint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v46 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
              v43 |= (unint64_t)(v46 & 0x7F) << v41;
              if (v46 < 0)
              {
                v41 += 7;
                BOOL v22 = v42++ >= 9;
                if (v22)
                {
                  uint64_t v43 = 0LL;
                  goto LABEL_107;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v43 = 0LL;
          }
LABEL_107:
          *(void *)(a1 + v8[758]) = v43;
          continue;
        case 5u:
          *(_DWORD *)(a1 + v4[754]) |= 0x400u;
          unint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v47 <= 0xFFFFFFFFFFFFFFF7LL && v47 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = v9[759];
          goto LABEL_151;
        case 6u:
          *(_DWORD *)(a1 + v4[754]) |= 0x100u;
          unint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v48 <= 0xFFFFFFFFFFFFFFF7LL && v48 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = v10[760];
          goto LABEL_151;
        case 7u:
          *(_DWORD *)(a1 + v4[754]) |= 0x200u;
          unint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v49 <= 0xFFFFFFFFFFFFFFF7LL && v49 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = v11[761];
          goto LABEL_151;
        case 8u:
          *(_DWORD *)(a1 + v4[754]) |= 0x40u;
          unint64_t v50 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v50 <= 0xFFFFFFFFFFFFFFF7LL && v50 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = v12[762];
          goto LABEL_151;
        case 9u:
          *(_DWORD *)(a1 + v4[754]) |= 0x10u;
          unint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v51 <= 0xFFFFFFFFFFFFFFF7LL && v51 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = v13[763];
          goto LABEL_151;
        case 0xAu:
          *(_DWORD *)(a1 + v4[754]) |= 0x10000u;
          unint64_t v52 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v52 <= 0xFFFFFFFFFFFFFFF7LL && v52 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = v14[764];
          goto LABEL_151;
        case 0xBu:
          *(_DWORD *)(a1 + v4[754]) |= 0x2000u;
          unint64_t v53 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v53 <= 0xFFFFFFFFFFFFFFF7LL && v53 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = v15[765];
          goto LABEL_151;
        case 0xCu:
          *(_DWORD *)(a1 + v4[754]) |= 4u;
          unint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v54 <= 0xFFFFFFFFFFFFFFF7LL && v54 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = 24LL;
          goto LABEL_151;
        case 0xDu:
          *(_DWORD *)(a1 + v4[754]) |= 1u;
          unint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v55 <= 0xFFFFFFFFFFFFFFF7LL && v55 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = 8LL;
          goto LABEL_151;
        case 0xEu:
          *(_DWORD *)(a1 + v4[754]) |= 0x800u;
          unint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v56 <= 0xFFFFFFFFFFFFFFF7LL && v56 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = 96LL;
          goto LABEL_151;
        case 0xFu:
          *(_DWORD *)(a1 + v4[754]) |= 0x80u;
          unint64_t v57 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v57 <= 0xFFFFFFFFFFFFFFF7LL && v57 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = 64LL;
          goto LABEL_151;
        case 0x10u:
          *(_DWORD *)(a1 + v4[754]) |= 0x20u;
          unint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v58 <= 0xFFFFFFFFFFFFFFF7LL && v58 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = 48LL;
          goto LABEL_151;
        case 0x11u:
          *(_DWORD *)(a1 + v4[754]) |= 0x20000u;
          unint64_t v59 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v59 <= 0xFFFFFFFFFFFFFFF7LL && v59 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v59);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v59 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = 144LL;
          goto LABEL_151;
        case 0x12u:
          *(_DWORD *)(a1 + v4[754]) |= 0x4000u;
          unint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v60 <= 0xFFFFFFFFFFFFFFF7LL && v60 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = 120LL;
          goto LABEL_151;
        case 0x13u:
          *(_DWORD *)(a1 + v4[754]) |= 8u;
          unint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v61 <= 0xFFFFFFFFFFFFFFF7LL && v61 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v73 = 32LL;
LABEL_151:
          *(void *)(a1 + v73) = v26;
          continue;
        case 0x14u:
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v36 = 0LL;
          *(_DWORD *)(a1 + v4[754]) |= 0x80000u;
          while (2)
          {
            uint64_t v64 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v65 = v64 + 1;
            if (v64 == -1 || v65 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v66 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65;
              v36 |= (unint64_t)(v66 & 0x7F) << v62;
              if (v66 < 0)
              {
                v62 += 7;
                BOOL v22 = v63++ >= 9;
                if (v22)
                {
                  LODWORD(v36) = 0;
                  goto LABEL_111;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v36) = 0;
          }
LABEL_111:
          uint64_t v72 = 156LL;
          goto LABEL_116;
        case 0x15u:
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v36 = 0LL;
          *(_DWORD *)(a1 + v4[754]) |= 0x40000u;
          break;
        default:
          unsigned int v27 = v5;
          unint64_t v28 = v6;
          char v29 = v4;
          __int16 v30 = v7;
          char v31 = v8;
          uint64_t v32 = a1;
          uint64_t result = PBReaderSkipValueWithTag(a2);
          unint64_t v15 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          a1 = v32;
          BOOL v9 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          char v8 = v31;
          int v10 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          unint64_t v7 = v30;
          __int128 v11 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          char v4 = v29;
          unsigned int v13 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          unint64_t v6 = v28;
          char v12 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          unsigned int v5 = v27;
          uint64_t v14 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          if (!(_DWORD)result) {
            return result;
          }
          continue;
      }

      while (1)
      {
        uint64_t v69 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v70 = v69 + 1;
        if (v69 == -1 || v70 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v71 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v69);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v70;
        v36 |= (unint64_t)(v71 & 0x7F) << v67;
        if ((v71 & 0x80) == 0) {
          goto LABEL_113;
        }
        v67 += 7;
        BOOL v22 = v68++ >= 9;
        if (v22)
        {
          LODWORD(v36) = 0;
          goto LABEL_115;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_113:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v36) = 0;
      }
LABEL_115:
      uint64_t v72 = 152LL;
LABEL_116:
      *(_DWORD *)(a1 + v72) = v36;
    }

    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100B65CC4(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = off_1018737D8;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 8) = _Q0;
  *(_WORD *)(a1 + ++*(void *)(result + 24) = sub_100AD36E4();
  *(_WORD *)(a1 + 26) = sub_100AD377C();
  float v19 = sub_100AD3814();
  *(void *)(a1 + ++*(void *)(result + 56) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 64) = 0LL;
  *(void *)(a1 + 72) = *a2;
  *(float *)(a1 + 28) = v19;
  *(_WORD *)(a1 + ++*(void *)(result + 32) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  *(void *)(a1 + ++*(void *)(result + 40) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 48) = 0xBFF0000000000000LL;
  uint64_t v20 = a2[1];
  *(void *)(a1 + 80) = v20;
  if (v20)
  {
    char v21 = (unint64_t *)(v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  uint64_t v23 = a3[1];
  *(void *)(a1 + ++*(void *)(result + 88) = *a3;
  *(void *)(a1 + ++*(void *)(result + 96) = v23;
  if (v23)
  {
    unint64_t v24 = (unint64_t *)(v23 + 8);
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  uint64_t v26 = a4[1];
  *(void *)(a1 + 104) = *a4;
  *(void *)(a1 + 112) = v26;
  if (v26)
  {
    unsigned int v27 = (unint64_t *)(v26 + 8);
    do
      unint64_t v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }

  sub_10001A504(a1 + 120, a5);
  sub_10001A504(a1 + 152, a6);
  sub_10001A504(a1 + 184, a7);
  *(_DWORD *)(a1 + 2++*(void *)(result + 16) = 0;
  *(void *)(a1 + 2++*(void *)(result + 24) = 0LL;
  *(void *)(a1 + 2++*(void *)(result + 32) = 0LL;
  *(void *)(a1 + 237) = 0LL;
  *(_OWORD *)(a1 + 2++*(void *)(result + 48) = xmmword_10134BC08;
  *(_OWORD *)(a1 + 2++*(void *)(result + 64) = unk_10134BC18;
  *(_OWORD *)(a1 + 280) = xmmword_10134BC28;
  *(_OWORD *)(a1 + 292) = *(__int128 *)((char *)&xmmword_10134BC28 + 12);
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 3++*(void *)(result + 40) = 0u;
  sub_1004F2598();
  if (sub_1004FD45C() && sub_1007098B4(*(void *)(a1 + 104)) > 0.0)
  {
    uint64_t v29 = *(void *)(a1 + 208);
    if (v29)
    {
      char v31 = 1;
      (*(void (**)(uint64_t, char *))(*(void *)v29 + 48LL))(v29, &v31);
    }
  }

  return a1;
}

void sub_100B65E80(_Unwind_Exception *a1)
{
  char v8 = (void *)v1[22];
  if (v8 == v6)
  {
    uint64_t v9 = 4LL;
    char v8 = v6;
  }

  else
  {
    if (!v8) {
      goto LABEL_6;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  int v10 = (void *)v1[18];
  if (v10 == v5)
  {
    uint64_t v11 = 4LL;
    int v10 = v5;
  }

  else
  {
    if (!v10) {
      goto LABEL_11;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  sub_10000AE14(v4);
  sub_10000AE14(v3);
  sub_10000AE14(v2);
  char v12 = (void *)v1[5];
  _OWORD v1[5] = 0LL;
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_100B65F6C(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 32) != a2)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    uint64_t v4 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 32);
      v7[0] = 68289538;
      v7[1] = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      __int16 v10 = 1026;
      int v11 = v5;
      __int16 v12 = 1026;
      int v13 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Background escalation manager permission changed, from:%{public}hhd, to:%{public}hhd}",  (uint8_t *)v7,  0x1Eu);
    }
  }

  *(_BYTE *)(a1 + ++*(void *)(result + 32) = a2;
  sub_1004F2598();
  if (sub_1004FD45C() && sub_1007098B4(*(void *)(a1 + 104)) > 0.0 && *(_BYTE *)(a1 + 32))
  {
    LOBYTE(v7[0]) = 1;
    uint64_t v6 = *(void *)(a1 + 208);
    if (!v6) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, _DWORD *))(*(void *)v6 + 48LL))(v6, v7);
  }

uint64_t sub_100B660C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return sub_1007EA670(result, &v3);
  }
  return result;
}

uint64_t sub_100B660EC(uint64_t a1, double *a2)
{
  if (*(_DWORD *)(a1 + 216) != 3) {
    return 0LL;
  }
  __int16 v11 = 0;
  *(_OWORD *)__int16 v10 = xmmword_1012E1E90;
  memset(&v10[2], 0, 135);
  __int128 v12 = xmmword_1012E1E90;
  uint64_t v13 = 0LL;
  int v14 = 0;
  uint64_t v15 = 0LL;
  v16[0] = 0LL;
  *(void *)((char *)v16 + 5) = 0LL;
  *(void *)((char *)&v16[1] + 6) = 0LL;
  char v17 = 0;
  memset(&v16[3], 0, 24);
  __int128 v18 = xmmword_1012E1E90;
  uint64_t v19 = 0LL;
  int v20 = 0;
  unint64_t v21 = 0xFFEFFFFFFFFFFFFFLL;
  int v32 = 0;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  int v27 = 0;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  memset(v31, 0, sizeof(v31));
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  unint64_t v35 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v36 = 0LL;
  int v37 = 0;
  uint64_t v43 = 0LL;
  __int16 v44 = 0;
  int v49 = 0;
  int v42 = 0;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v46 = 0u;
  __int128 v45 = 0u;
  char v47 = 0;
  memset(v48, 0, sizeof(v48));
  unint64_t v50 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v69 = 0u;
  __int128 v68 = 0u;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  __int128 v60 = 0u;
  __int128 v59 = 0u;
  __int128 v58 = 0u;
  __int128 v57 = 0u;
  __int128 v56 = 0u;
  __int128 v55 = 0u;
  __int128 v54 = 0u;
  __int128 v53 = 0u;
  __int128 v52 = 0u;
  __int128 v51 = 0u;
  uint64_t v70 = 0LL;
  unint64_t v71 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  double v76 = -1.79769313e308;
  uint64_t v77 = 0LL;
  int v78 = 0;
  uint64_t v79 = 0LL;
  char v80 = 0;
  unint64_t v81 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v83 = 0LL;
  uint64_t v82 = 0LL;
  uint64_t v84 = 0x80000000800000LL;
  uint64_t v86 = 0LL;
  uint64_t v85 = 0LL;
  __int128 v87 = xmmword_1012E1EA0;
  uint64_t v88 = 0x80000000800000LL;
  __int128 v89 = 0u;
  __int128 v90 = 0u;
  uint64_t v91 = 0LL;
  unint64_t v92 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  int v99 = 0;
  unint64_t v100 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v101 = 0;
  int v102 = 0;
  unint64_t v103 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v104 = 7LL;
  unint64_t v105 = 0xFFEFFFFFFFFFFFFFLL;
  char v106 = 0;
  uint64_t v108 = 0LL;
  uint64_t v107 = 0LL;
  uint64_t v109 = 0LL;
  uint64_t v4 = operator new(4uLL);
  std::string __p = v4;
  *uint64_t v4 = 6;
  __int16 v8 = v4 + 1;
  uint64_t v9 = v4 + 1;
  sub_100CDB578(a2, &__p, (uint64_t)v10);
  if (__p)
  {
    __int16 v8 = __p;
    operator delete(__p);
  }

  if (v76 == -1.79769313e308)
  {
    BOOL v5 = 0;
  }

  else
  {
    BOOL v5 = 1;
    if (v77 && v77 != 25) {
      BOOL v5 = v80 != 0;
    }
  }

  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 48)) < 420.0 || v5;
}

void sub_100B663CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

void sub_100B663F0(uint64_t a1, double *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    char v5 = sub_1007098B4(*(void *)(a1 + 88)) > 0.0;
    sub_1007EAA10(v4, a2, v5);
  }

  if (*(_DWORD *)(a1 + 216) == 3) {
    ++*(_DWORD *)(a1 + 56);
  }
  if (sub_100B660EC(a1, a2))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    uint64_t v6 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Background escalation manager consuming more power than workout alerts",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      LOWORD(v18[0]) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background escalation manager consuming more power than workout alerts",  v18,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v13);
    }

    __int16 v8 = (void *)(a1 + 88);
    uint64_t v7 = *(void *)(a1 + 88);
    ++*(_DWORD *)(a1 + 60);
    if (sub_1007098B4(v7) <= 0.0)
    {
      (*(void (**)(void))(**(void **)(a1 + 72) + 16LL))(*(void *)(a1 + 72));
    }

    else
    {
      (*(void (**)(void))(**(void **)(a1 + 88) + 16LL))(*(void *)(a1 + 88));
      __int16 v8 = (void *)(a1 + 72);
    }
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    uint64_t v9 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Background escalation manager not consuming more power than workout alerts",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      LOWORD(v18[0]) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background escalation manager not consuming more power than workout alerts",  v18,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v14);
    }

    (*(void (**)(void))(**(void **)(a1 + 72) + 24LL))(*(void *)(a1 + 72));
    __int16 v8 = (void *)(a1 + 88);
  }

  (*(void (**)(void))(*(void *)*v8 + 24LL))(*v8);
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_10199AB88);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_10199AB88))
  {
    *(_DWORD *)__int128 buf = 8;
    sub_1002C72A8(qword_10199AB70, buf, 1uLL);
    __cxa_atexit((void (*)(void *))sub_1002C7328, qword_10199AB70, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199AB88);
  }

  __int16 v19 = 0;
  *(_OWORD *)__int128 v18 = xmmword_1012E1E90;
  memset(&v18[2], 0, 135);
  __int128 v20 = xmmword_1012E1E90;
  uint64_t v21 = 0LL;
  int v22 = 0;
  uint64_t v23 = 0LL;
  v24[0] = 0LL;
  *(void *)((char *)v24 + 5) = 0LL;
  *(void *)((char *)&v24[1] + 6) = 0LL;
  char v25 = 0;
  memset(&v24[3], 0, 24);
  __int128 v26 = xmmword_1012E1E90;
  uint64_t v27 = 0LL;
  int v28 = 0;
  unint64_t v29 = 0xFFEFFFFFFFFFFFFFLL;
  int v40 = 0;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  int v35 = 0;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  memset(v39, 0, sizeof(v39));
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  unint64_t v43 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v44 = 0LL;
  int v45 = 0;
  uint64_t v51 = 0LL;
  __int16 v52 = 0;
  int v57 = 0;
  int v50 = 0;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v54 = 0u;
  __int128 v53 = 0u;
  char v55 = 0;
  memset(v56, 0, sizeof(v56));
  double v58 = -1.79769313e308;
  __int128 v77 = 0u;
  __int128 v76 = 0u;
  __int128 v75 = 0u;
  __int128 v74 = 0u;
  __int128 v73 = 0u;
  __int128 v72 = 0u;
  __int128 v71 = 0u;
  __int128 v70 = 0u;
  __int128 v69 = 0u;
  __int128 v68 = 0u;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  __int128 v60 = 0u;
  __int128 v59 = 0u;
  uint64_t v78 = 0LL;
  unint64_t v79 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  unint64_t v84 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v85 = 0LL;
  int v86 = 0;
  uint64_t v87 = 0LL;
  char v88 = 0;
  unint64_t v89 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v91 = 0LL;
  uint64_t v90 = 0LL;
  uint64_t v92 = 0x80000000800000LL;
  uint64_t v94 = 0LL;
  uint64_t v93 = 0LL;
  __int128 v95 = xmmword_1012E1EA0;
  uint64_t v96 = 0x80000000800000LL;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  uint64_t v99 = 0LL;
  unint64_t v100 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  __int128 v103 = 0u;
  __int128 v104 = 0u;
  __int128 v105 = 0u;
  __int128 v106 = 0u;
  int v107 = 0;
  unint64_t v108 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v109 = 0;
  int v110 = 0;
  unint64_t v111 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v112 = 7LL;
  unint64_t v113 = 0xFFEFFFFFFFFFFFFFLL;
  char v114 = 0;
  uint64_t v116 = 0LL;
  uint64_t v115 = 0LL;
  uint64_t v117 = 0LL;
  sub_100CDB578(a2, qword_10199AB70, (uint64_t)v18);
  if (v58 != -1.79769313e308)
  {
    if (*(_BYTE *)(a1 + 244))
    {
      *(_DWORD *)(a1 + 2++*(void *)(result + 32) = v63;
    }

    else
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      __int16 v11 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67240192;
        int v119 = v63;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Background escalation manager updating floors ascended baseline: %{public}u ",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        v17[0] = 67240192;
        v17[1] = v63;
        LODWORD(v++*(void *)(result + 16) = 8;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Background escalation manager updating floors ascended baseline: %{public}u ",  v17,  v16);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v15);
      }

      int v12 = v63;
      *(_DWORD *)(a1 + 2++*(void *)(result + 32) = v63;
      *(_DWORD *)(a1 + 236) = v12;
      *(_BYTE *)(a1 + 244) = 1;
    }

    if (*(_DWORD *)(a1 + 216) != 3) {
      sub_100B66B84(a1, 0, *((double *)&v59 + 1));
    }
  }

void sub_100B66B64(_Unwind_Exception *a1)
{
}

void sub_100B66B84(uint64_t a1, int a2, double a3)
{
  if (*(_DWORD *)(a1 + 216) > 2u) {
    return;
  }
  if (sub_1007098B4(*(void *)(a1 + 104)) > 0.0 && *(_BYTE *)(a1 + 32))
  {
    if ((sub_100B688D4(a1, a3) & 1) != 0) {
      return;
    }
    int v6 = *(_DWORD *)(a1 + 216);
    if (v6 == 2)
    {
      if (*(_DWORD *)(a1 + 236) < *(_DWORD *)(a1 + 232))
      {
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        uint64_t v13 = (os_log_s *)qword_101934688;
        if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
        {
          int v15 = *(_DWORD *)(a1 + 232);
          int v14 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)__int128 buf = 134349568;
          double v61 = a3;
          __int16 v62 = 1026;
          *(_DWORD *)__int128 v63 = v14;
          *(_WORD *)&v63[4] = 1026;
          *(_DWORD *)&v63[6] = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Ascended : %{publi c}u, current floors Ascended, %{public}u",  buf,  0x18u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_101873818);
          }
          int v37 = *(_DWORD *)(a1 + 232);
          int v36 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)__int128 v54 = 134349568;
          *(double *)&v54[4] = a3;
          *(_WORD *)&v54[12] = 1026;
          *(_DWORD *)&v54[14] = v36;
          *(_WORD *)&v54[18] = 1026;
          *(_DWORD *)&v54[20] = v37;
          __int128 v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Asce nded : %{public}u, current floors Ascended, %{public}u",  v54,  24);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)",  "%s\n",  v38);
        }

        *(double *)(a1 + 8) = a3;
        *(double *)(a1 + 2++*(void *)(result + 24) = a3;
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        uint64_t v16 = (os_log_s *)qword_101934688;
        if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
        {
          double v17 = *(double *)(a1 + 8);
          *(_DWORD *)__int128 buf = 134349056;
          double v61 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, HRRecovery startTime set to %{public}.1f",  buf,  0xCu);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_50;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934680 == -1) {
          goto LABEL_85;
        }
        goto LABEL_99;
      }

      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      __int128 v24 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
      {
        double v25 = a3 - *(double *)(a1 + 48);
        int v26 = *(_DWORD *)(a1 + 240);
        uint64_t v27 = *(void *)(a1 + 8);
        uint64_t v28 = *(void *)(a1 + 16);
        *(_DWORD *)__int128 buf = 134350080;
        double v61 = a3;
        __int16 v62 = 2050;
        *(double *)__int128 v63 = v25;
        *(_WORD *)&v63[8] = 1026;
        int v64 = v26;
        __int16 v65 = 2050;
        uint64_t v66 = v27;
        __int16 v67 = 2050;
        uint64_t v68 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, escalation end time : %{public}f, escalation duration : %{public}f, tota l number of floors ascended : %{public}u, recoveryStart : %{public}f, recoveryEnd : %{public}f",  buf,  0x30u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        double v44 = a3 - *(double *)(a1 + 48);
        int v45 = *(_DWORD *)(a1 + 240);
        uint64_t v46 = *(void *)(a1 + 8);
        uint64_t v47 = *(void *)(a1 + 16);
        *(_DWORD *)__int128 v54 = 134350080;
        *(double *)&v54[4] = a3;
        *(_WORD *)&v54[12] = 2050;
        *(double *)&v54[14] = v44;
        *(_WORD *)&v54[22] = 1026;
        int v55 = v45;
        __int16 v56 = 2050;
        uint64_t v57 = v46;
        __int16 v58 = 2050;
        uint64_t v59 = v47;
        __int128 v48 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation Manager, escalation end time : %{public}f, escalation duration : %{ public}f, total number of floors ascended : %{public}u, recoveryStart : %{public}f, recoveryEnd : %{public}f",  v54,  48);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)",  "%s\n",  v48);
      }

      *(double *)(a1 + ++*(void *)(result + 16) = a3;
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      unint64_t v29 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
      {
        double v30 = *(double *)(a1 + 16);
        *(_DWORD *)__int128 buf = 134349056;
        double v61 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, HRRecovery endTime set to %{public}f",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        uint64_t v49 = *(void *)(a1 + 16);
        *(_DWORD *)__int128 v54 = 134349056;
        *(void *)&v54[4] = v49;
        LODWORD(v53) = 12;
        int v50 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation Manager, HRRecovery endTime set to %{public}f",  v54,  v53);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)",  "%s\n",  v50);
      }

      uint64_t v31 = a1;
      uint64_t v32 = 1LL;
    }

    else
    {
      if (v6 != 1)
      {
        if (!v6 && a2)
        {
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_101873818);
          }
          uint64_t v7 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 134349056;
            double v61 = a3;
            _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation triggered, timestamp : %{public}f",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_101873818);
            }
            *(_DWORD *)__int128 v54 = 134349056;
            *(double *)&v54[4] = a3;
            int v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation triggered, timestamp : %{public}f",  v54,  12);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)",  "%s\n",  v35);
          }

          (*(void (**)(void))(**(void **)(a1 + 104) + 16LL))(*(void *)(a1 + 104));
          *(_DWORD *)(a1 + 2++*(void *)(result + 16) = 1;
          *(double *)(a1 + ++*(void *)(result + 48) = a3;
          *(_BYTE *)(a1 + 34) = 0;
          *(_DWORD *)__int128 buf = 0;
          uint64_t v8 = sub_1002F8DDC();
          if (byte_10199AB6F >= 0) {
            uint64_t v9 = (const char *)&qword_10199AB58;
          }
          else {
            uint64_t v9 = (const char *)qword_10199AB58;
          }
          sub_1002A7CB0(v8, v9, buf);
          *(_DWORD *)(a1 + 336) = *(_DWORD *)buf;
          if (*(void *)(a1 + 176))
          {
            if (!*(_BYTE *)(a1 + 33))
            {
              double Current = CFAbsoluteTimeGetCurrent();
              sub_100B67C68(a1 + 152, 0LL, 0LL, 11LL, Current);
              *(_BYTE *)(a1 + 33) = 1;
            }
          }
        }

        return;
      }

      if (*(_DWORD *)(a1 + 236) < *(_DWORD *)(a1 + 232))
      {
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        __int128 v18 = (os_log_s *)qword_101934688;
        if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
        {
          int v20 = *(_DWORD *)(a1 + 232);
          int v19 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)__int128 buf = 134349568;
          double v61 = a3;
          __int16 v62 = 1026;
          *(_DWORD *)__int128 v63 = v19;
          *(_WORD *)&v63[4] = 1026;
          *(_DWORD *)&v63[6] = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Ascended : %{publi c}u, current floors Ascended, %{public}u",  buf,  0x18u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_101873818);
          }
          int v40 = *(_DWORD *)(a1 + 232);
          int v39 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)__int128 v54 = 134349568;
          *(double *)&v54[4] = a3;
          *(_WORD *)&v54[12] = 1026;
          *(_DWORD *)&v54[14] = v39;
          *(_WORD *)&v54[18] = 1026;
          *(_DWORD *)&v54[20] = v40;
          uint64_t v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Asce nded : %{public}u, current floors Ascended, %{public}u",  v54,  24);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)",  "%s\n",  v41);
        }

        *(_DWORD *)(a1 + 2++*(void *)(result + 16) = 2;
        *(double *)(a1 + 8) = a3;
        *(double *)(a1 + 2++*(void *)(result + 24) = a3;
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        uint64_t v21 = (os_log_s *)qword_101934688;
        if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
        {
          double v22 = *(double *)(a1 + 8);
          *(_DWORD *)__int128 buf = 134349056;
          double v61 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, HRRecovery startTime set to %{public}.1f",  buf,  0xCu);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_50;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934680 == -1)
        {
LABEL_85:
          uint64_t v42 = *(void *)(a1 + 8);
          *(_DWORD *)__int128 v54 = 134349056;
          *(void *)&v54[4] = v42;
          LODWORD(v53) = 12;
          unint64_t v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation Manager, HRRecovery startTime set to %{public}.1f",  v54,  v53,  *(_OWORD *)v54);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)",  "%s\n",  v43);
LABEL_50:
          int v23 = *(_DWORD *)(a1 + 240) + 1;
          *(_DWORD *)(a1 + 236) = *(_DWORD *)(a1 + 232);
          *(_DWORD *)(a1 + 2++*(void *)(result + 40) = v23;
          return;
        }

void sub_100B67874(uint64_t a1, uint64_t a2)
{
  if (sub_100B67BF8(a1, a2))
  {
    if (*(void *)(a1 + 40))
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      uint64_t v4 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Background escalation manager already tracking escalation",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        v13[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background escalation manager already tracking escalation",  v13,  2);
        int v6 = (uint8_t *)v5;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::onEscalationAndLabelUpdate(CFAbsoluteTime, CMWorkoutType)",  "%s\n",  v5);
        if (v6 != buf) {
          free(v6);
        }
      }
    }

    else
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      uint64_t v7 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Background escalation manager starting to track escalation",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        v13[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Background escalation manager starting to track escalation",  v13,  2);
        uint64_t v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::onEscalationAndLabelUpdate(CFAbsoluteTime, CMWorkoutType)",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }

      double Current = CFAbsoluteTimeGetCurrent();
      *(double *)(a1 + ++*(void *)(result + 48) = Current;
      uint64_t v9 = operator new(0x70uLL);
      sub_1007EA66C((uint64_t)v9, Current);
      unsigned __int8 v10 = *(void **)(a1 + 40);
      *(void *)(a1 + ++*(void *)(result + 40) = v9;
      if (v10) {
        operator delete(v10);
      }
      *(void *)(a1 + ++*(void *)(result + 64) = a2;
      *(_DWORD *)(a1 + 2++*(void *)(result + 16) = 3;
      *(_BYTE *)(a1 + 34) = 0;
      if (*(void *)(a1 + 144)) {
        sub_100B67C68(a1 + 120, 0LL, 0LL, a2, *(double *)(a1 + 48));
      }
    }
  }

  else
  {
    sub_100B67CB4(a1);
  }

void sub_100B67BDC(_Unwind_Exception *a1)
{
}

BOOL sub_100B67BF8(uint64_t a1, uint64_t a2)
{
  return (sub_1007098B4(*(void *)(a1 + 72)) > 0.0 || sub_1007098B4(*(void *)(a1 + 88)) > 0.0)
      && *(_BYTE *)(a1 + 32)
      && (a2 == 15 || a2 == 1)
      && (*(_DWORD *)(a1 + 216) - 3) < 0xFFFFFFFE;
}

uint64_t sub_100B67C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double v10 = a5;
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v7 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, double *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v5 + 48LL))( v5,  &v10,  &v9,  &v8,  &v7);
}

uint64_t sub_100B67CB4(uint64_t result)
{
  if (*(_DWORD *)(result + 216) == 3)
  {
    uint64_t v1 = result;
    *(CFAbsoluteTime *)(result + ++*(void *)(result + 16) = CFAbsoluteTimeGetCurrent();
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    uint64_t v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(v1 + 8);
      uint64_t v4 = *(void *)(v1 + 16);
      *(_DWORD *)__int128 buf = 134349312;
      *(void *)&uint8_t buf[4] = v3;
      __int16 v17 = 2050;
      uint64_t v18 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Background escalation manager stopped tracking escalation,fRecoveryStartTime,%{public}f,fRecoveryEndTime,%{public}f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      uint64_t v8 = *(void *)(v1 + 8);
      uint64_t v9 = *(void *)(v1 + 16);
      int v12 = 134349312;
      uint64_t v13 = v8;
      __int16 v14 = 2050;
      uint64_t v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Background escalation manager stopped tracking escalation,fRecoveryStartTime,%{public}f,fRecoveryEndTime,%{public}f",  &v12,  22);
      uint64_t v11 = (char *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::stopTrackingVO2MaxEscalation()",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    if (*(void *)(v1 + 144) && !*(_BYTE *)(v1 + 34))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100B67C68(v1 + 120, 1LL, 0LL, *(void *)(v1 + 64), Current);
    }

    *(void *)__int128 buf = 3LL;
    uint64_t v6 = *(void *)(v1 + 40);
    if (v6)
    {
      sub_1007EA670(v6, buf);
      uint64_t v7 = *(void **)(v1 + 40);
      *(void *)(v1 + ++*(void *)(result + 40) = 0LL;
      if (v7) {
        operator delete(v7);
      }
    }

    else
    {
      *(void *)(v1 + ++*(void *)(result + 40) = 0LL;
    }

    *(void *)(v1 + ++*(void *)(result + 48) = 0xBFF0000000000000LL;
    *(void *)(v1 + ++*(void *)(result + 64) = 0LL;
    (*(void (**)(void))(**(void **)(v1 + 72) + 24LL))(*(void *)(v1 + 72));
    sub_100709B54(*(void *)(v1 + 72));
    (*(void (**)(void))(**(void **)(v1 + 88) + 24LL))(*(void *)(v1 + 88));
    uint64_t result = sub_100709B54(*(void *)(v1 + 88));
    *(void *)(v1 + ++*(void *)(result + 56) = 0LL;
    *(_BYTE *)(v1 + 34) = 0;
    *(_DWORD *)(v1 + 2++*(void *)(result + 16) = 0;
  }

  return result;
}

uint64_t sub_100B67F34(uint64_t a1)
{
  uint64_t v36 = 0LL;
  if ((sub_1007098B4(*(void *)(a1 + 72)) > 0.0 || sub_1007098B4(*(void *)(a1 + 88)) > 0.0) && *(_BYTE *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      BOOL v3 = sub_1007EB1BC(v2, &v36);
      uint64_t v4 = v3;
      uint64_t v5 = *(_OWORD **)(a1 + 40);
      if (!v5 || !v3) {
        goto LABEL_22;
      }
      *(_OWORD *)(a1 + 8) = *v5;
      __asm { FMOV            V0.2D, #-1.0 }

      _OWORD *v5 = _Q0;
    }
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    uint64_t v11 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v12 = sub_1007098B4(*(void *)(a1 + 72)) > 0.0;
      double v13 = sub_1007098B4(*(void *)(a1 + 88));
      int v14 = *(unsigned __int8 *)(a1 + 32);
      *(_DWORD *)__int128 buf = 67240704;
      *(_DWORD *)uint64_t v42 = v12;
      *(_WORD *)&v42[4] = 1026;
      *(_DWORD *)&void v42[6] = v13 > 0.0;
      __int16 v43 = 1026;
      int v44 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Background escalation manager should deescalate,hasVO2MaxBudget,%{public}d,hasExtendedBudget,%{public}d,hasPermi ssion,%{public}d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      uint64_t v25 = qword_101934688;
      BOOL v26 = sub_1007098B4(*(void *)(a1 + 72)) > 0.0;
      BOOL v27 = sub_1007098B4(*(void *)(a1 + 88)) <= 0.0;
      int v28 = *(unsigned __int8 *)(a1 + 32);
      int v29 = !v27;
      int v37 = 67240704;
      *(_DWORD *)__int128 v38 = v26;
      *(_WORD *)&v38[4] = 1026;
      *(_DWORD *)&v38[6] = v29;
      __int16 v39 = 1026;
      int v40 = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  0LL,  "Background escalation manager should deescalate,hasVO2MaxBudget,%{public}d,hasExtendedBudget,%{public}d,hasPermi ssion,%{public}d",  &v37,  20);
      uint64_t v31 = (uint8_t *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLBackgroundEscalationManager::shouldDeescalateForVO2Max()",  "%s\n",  v30);
      if (v31 != buf) {
        free(v31);
      }
    }

    uint64_t v15 = 6LL;
    if (*(_BYTE *)(a1 + 32)) {
      uint64_t v15 = 7LL;
    }
    uint64_t v36 = v15;
    uint64_t v16 = *(void **)(a1 + 40);
    if (v16)
    {
      *(void *)(a1 + 8) = *v16;
      *uint64_t v16 = 0xBFF0000000000000LL;
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      __int16 v17 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 8);
        *(_DWORD *)__int128 buf = 134349056;
        *(void *)uint64_t v42 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Background Escalation Manager, HRRecovery startTime set to %{public}.1f",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        uint64_t v32 = *(void *)(a1 + 8);
        int v37 = 134349056;
        *(void *)__int128 v38 = v32;
        LODWORD(v35) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Background Escalation Manager, HRRecovery startTime set to %{public}.1f",  &v37,  v35);
        uint64_t v34 = (uint8_t *)v33;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLBackgroundEscalationManager::shouldDeescalateForVO2Max()",  "%s\n",  v33);
        if (v34 != buf) {
          free(v34);
        }
      }
    }
  }

  uint64_t v4 = 1LL;
LABEL_22:
  if (*(_DWORD *)(a1 + 216) == 3)
  {
    int v19 = *(void *)(a1 + 144) ? v4 : 0;
    if (v19 == 1 && !*(_BYTE *)(a1 + 34))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100B67C68(a1 + 120, 1LL, v36, *(void *)(a1 + 64), Current);
      *(_BYTE *)(a1 + 34) = 1;
    }
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_101873818);
  }
  uint64_t v21 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67240192;
    *(_DWORD *)uint64_t v42 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Background Escalation Manager,shouldDeescalate,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    int v37 = 67240192;
    *(_DWORD *)__int128 v38 = v4;
    LODWORD(v35) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Background Escalation Manager,shouldDeescalate,%{public}d",  &v37,  v35);
    __int128 v24 = (uint8_t *)v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLBackgroundEscalationManager::shouldDeescalateForVO2Max()",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
  }

  return v4;
}

uint64_t sub_100B684C0(uint64_t a1, uint64_t a2)
{
  if ((sub_1007098B4(*(void *)(a1 + 72)) > 0.0 || sub_1007098B4(*(void *)(a1 + 88)) > 0.0) && *(_BYTE *)(a1 + 32))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    goto LABEL_13;
  }

  uint64_t result = 0LL;
  if (*(_WORD *)a2 && *(_WORD *)(a2 + 2) && *(float *)(a2 + 4) > 0.0)
  {
    uint64_t v5 = 0LL;
LABEL_13:
    *(void *)a2 = v5;
    return 1LL;
  }

  return result;
}

uint64_t sub_100B68560(uint64_t a1, double a2)
{
  return sub_100709B54(*(void *)(a1 + 72));
}

uint64_t sub_100B68588(uint64_t a1, double a2)
{
  return sub_100709B54(*(void *)(a1 + 88));
}

uint64_t sub_100B685B0(uint64_t a1, double a2)
{
  if (a2 > 0.0)
  {
    uint64_t v4 = *(void *)(a1 + 208);
    if (v4)
    {
      char v6 = 1;
      (*(void (**)(uint64_t, char *))(*(void *)v4 + 48LL))(v4, &v6);
    }
  }

  sub_100709948(*(void *)(a1 + 104), a2);
  return sub_100709B54(*(void *)(a1 + 104));
}

void sub_100B6861C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    sub_1007EB3BC(v2, a2);
  }
}

double sub_100B6862C(uint64_t a1, double a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 56);
  if (!v2) {
    return 0.0;
  }
  LODWORD(a2) = *(_DWORD *)(a1 + 60);
  return fmin((double)*(unint64_t *)&a2 / (double)v2, 1.0);
}

void sub_100B68658(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a1 + 216) - 1) <= 1)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    uint64_t v4 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      double v5 = sub_1007098B4(*(void *)(a1 + 104));
      *(_DWORD *)__int128 buf = 134349056;
      double v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, deescalating, remaining budget : %{public}f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      uint64_t v8 = qword_101934688;
      double v9 = sub_1007098B4(*(void *)(a1 + 104));
      int v11 = 134349056;
      double v12 = v9;
      double v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  2LL,  "Background Stairs Escalation Manager, deescalating, remaining budget : %{public}f",  &v11,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::handleStairsDeescalation(CMActivityReason)",  "%s\n",  v10);
    }

    (*(void (**)(void))(**(void **)(a1 + 104) + 24LL))(*(void *)(a1 + 104));
    sub_100709B54(*(void *)(a1 + 104));
    double Current = CFAbsoluteTimeGetCurrent();
    double v7 = Current;
    if (*(void *)(a1 + 176) && !*(_BYTE *)(a1 + 34))
    {
      sub_100B67C68(a1 + 152, 1LL, a2, 11LL, Current);
      *(_BYTE *)(a1 + 34) = 1;
    }

    *(void *)(a1 + ++*(void *)(result + 48) = 0xBFF0000000000000LL;
    *(_DWORD *)(a1 + 2++*(void *)(result + 16) = 0;
    *(_BYTE *)(a1 + 33) = 0;
    *(_DWORD *)(a1 + 336) = 0;
    *(void *)(a1 + 2++*(void *)(result + 24) = 0LL;
    *(void *)(a1 + 2++*(void *)(result + 32) = 0LL;
    *(void *)(a1 + 237) = 0LL;
    *(void *)(a1 + 320) = *(void *)(a1 + 312);
  }

uint64_t sub_100B688D4(uint64_t a1, double a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_101873818);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
  {
    double v5 = *(double *)(a1 + 48);
    *(_DWORD *)__int128 buf = 134349312;
    double v15 = v5;
    __int16 v16 = 2050;
    double v17 = a2 - v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Background Stairs Escalation Manager, time of escalation : %{public}.1f, escalation duration: %{public}.1f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    double v8 = *(double *)(a1 + 48);
    int v10 = 134349312;
    double v11 = v8;
    __int16 v12 = 2050;
    double v13 = a2 - v8;
    double v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "Background Stairs Escalation Manager, time of escalation : %{public}.1f, escalation duration: %{public}.1f",  &v10,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLBackgroundEscalationManager::checkForCoreAnalyticsEscalationTimeLimit(CFAbsoluteTime)",  "%s\n",  v9);
  }

  if (*(_DWORD *)(a1 + 236) < *(_DWORD *)(a1 + 232)) {
    ++*(_DWORD *)(a1 + 240);
  }
  uint64_t v6 = 1LL;
  sub_100B68658(a1, 1LL);
  return v6;
}

void sub_100B68B04(uint64_t a1)
{
  if (objc_opt_class(&OBJC_CLASS___MCProfileConnection)
    && (objc_msgSend( +[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"),  "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_10199ABA8);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10199ABA8))
    {
      __int128 buf = xmmword_10134BC44;
      double v87 = 2.1990238e12;
      sub_1001B4118(&qword_10199AB90, &buf, 6uLL);
      __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199AB90, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10199ABA8);
    }

    unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_10199ABC8);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10199ABC8))
    {
      __int128 buf = xmmword_10134BC5C;
      double v87 = 3.39302524e10;
      sub_1001B4118(&qword_10199ABB0, &buf, 6uLL);
      __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199ABB0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10199ABC8);
    }

    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10199ABE8);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10199ABE8))
    {
      *(void *)&__int128 buf = &_mh_execute_header;
      DWORD2(buf) = 2;
      sub_100B48D24(&qword_10199ABD0, &buf, 3uLL);
      __cxa_atexit((void (*)(void *))sub_100B48DA4, &qword_10199ABD0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10199ABE8);
    }

    sub_100B69BFC((double **)(a1 + 312), (uint64_t)&v36, *(double *)(a1 + 48), *(float *)(a1 + 268));
    float v5 = *(float *)(a1 + 260);
    float v6 = *(float *)(a1 + 256);
    int v7 = *(_DWORD *)(a1 + 240);
    float v8 = *(float *)(a1 + 348);
    float v9 = *(float *)(a1 + 352);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    int v10 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(_DWORD *)(a1 + 240);
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 3);
      double v13 = *(float *)(a1 + 344);
      double v14 = *(float *)(a1 + 340);
      double v15 = *(float *)(a1 + 352);
      double v16 = *(float *)(a1 + 348);
      LODWORD(buf) = 67115009;
      DWORD1(buf) = v7 != 0;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v11;
      HIWORD(buf) = 2049;
      double v87 = *(float *)v38;
      __int16 v88 = 2049;
      double v89 = *(float *)&v38[4];
      __int16 v90 = 2048;
      unint64_t v91 = v12;
      __int16 v92 = 2049;
      double v93 = *(float *)&v36;
      __int16 v94 = 2049;
      double v95 = *((float *)&v36 + 1);
      __int16 v96 = 2049;
      double v97 = *((float *)&v36 + 2);
      __int16 v98 = 2049;
      double v99 = *((float *)&v36 + 3);
      __int16 v100 = 2049;
      double v101 = *((float *)&v37 + 1);
      __int16 v102 = 2049;
      double v103 = *((float *)&v37 + 2);
      __int16 v104 = 2049;
      double v105 = *(float *)&v38[8];
      __int16 v106 = 2049;
      double v107 = *(float *)&v38[12];
      __int16 v108 = 2049;
      double v109 = *(float *)&v38[16];
      __int16 v110 = 2049;
      double v111 = *((float *)&v37 + 3);
      __int16 v112 = 2049;
      double v113 = *(float *)&v37;
      __int16 v114 = 1025;
      int v115 = *(_DWORD *)&v38[20];
      __int16 v116 = 1025;
      int v117 = *(_DWORD *)&v38[24];
      __int16 v118 = 2048;
      double v119 = v13;
      __int16 v120 = 2048;
      double v121 = v14;
      __int16 v122 = 2048;
      double v123 = v15;
      __int16 v124 = 2048;
      double v125 = v16;
      __int16 v126 = 1024;
      BOOL v127 = v9 > 40.0;
      __int16 v128 = 1024;
      BOOL v129 = v8 > 0.25;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation, hasFlightReported,%d,numFlights,%d,confHrMedian,%{private}f, confHrStd,%{private}f ,countHRSamples,%zu,latencyHr,%{private}f,latencyHrwConfFlag,%{private}f,maxHr,%{private}f,maxHrConfidence,%{pri vate}f,maxHrOneMinusFhr,%{private}f,meanHr,%{private}f,prcHrwConfFlag,%{private}f,rangeBeforeMaxHr,%{private}f,r angeAfterMaxHr,%{private}f,stdHr,%{private}f,time2MaxHr,%{private}f,numSampleBeforeMaxHr,%{private}d,numSampleAf terMaxHr,%{private}d,vspeedMetricBeginning,%f,stairMetricBeginning,%f,vspeedMetricEnd,%f,stairMetricEnd,%f,isVsp eedMetric,%d,isStairMetric,%d",  (uint8_t *)&buf,  0xDAu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      int v20 = *(_DWORD *)(a1 + 240);
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 3);
      double v22 = *(float *)(a1 + 344);
      double v23 = *(float *)(a1 + 340);
      double v24 = *(float *)(a1 + 352);
      double v25 = *(float *)(a1 + 348);
      v39[0] = 67115009;
      v39[1] = v7 != 0;
      __int16 v40 = 1024;
      int v41 = v20;
      __int16 v42 = 2049;
      double v43 = *(float *)v38;
      __int16 v44 = 2049;
      double v45 = *(float *)&v38[4];
      __int16 v46 = 2048;
      unint64_t v47 = v21;
      __int16 v48 = 2049;
      double v49 = *(float *)&v36;
      __int16 v50 = 2049;
      double v51 = *((float *)&v36 + 1);
      __int16 v52 = 2049;
      double v53 = *((float *)&v36 + 2);
      __int16 v54 = 2049;
      double v55 = *((float *)&v36 + 3);
      __int16 v56 = 2049;
      double v57 = *((float *)&v37 + 1);
      __int16 v58 = 2049;
      double v59 = *((float *)&v37 + 2);
      __int16 v60 = 2049;
      double v61 = *(float *)&v38[8];
      __int16 v62 = 2049;
      double v63 = *(float *)&v38[12];
      __int16 v64 = 2049;
      double v65 = *(float *)&v38[16];
      __int16 v66 = 2049;
      double v67 = *((float *)&v37 + 3);
      __int16 v68 = 2049;
      double v69 = *(float *)&v37;
      __int16 v70 = 1025;
      int v71 = *(_DWORD *)&v38[20];
      __int16 v72 = 1025;
      int v73 = *(_DWORD *)&v38[24];
      __int16 v74 = 2048;
      double v75 = v22;
      __int16 v76 = 2048;
      double v77 = v23;
      __int16 v78 = 2048;
      double v79 = v24;
      __int16 v80 = 2048;
      double v81 = v25;
      __int16 v82 = 1024;
      BOOL v83 = v9 > 40.0;
      __int16 v84 = 1024;
      BOOL v85 = v8 > 0.25;
      BOOL v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation, hasFlightReported,%d,numFlights,%d,confHrMedian,%{private}f, confHrS td,%{private}f,countHRSamples,%zu,latencyHr,%{private}f,latencyHrwConfFlag,%{private}f,maxHr,%{pri vate}f,maxHrConfidence,%{private}f,maxHrOneMinusFhr,%{private}f,meanHr,%{private}f,prcHrwConfFlag, %{private}f,rangeBeforeMaxHr,%{private}f,rangeAfterMaxHr,%{private}f,stdHr,%{private}f,time2MaxHr, %{private}f,numSampleBeforeMaxHr,%{private}d,numSampleAfterMaxHr,%{private}d,vspeedMetricBeginning ,%f,stairMetricBeginning,%f,vspeedMetricEnd,%f,stairMetricEnd,%f,isVspeedMetric,%d,isStairMetric,%d",  v39,  218);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::sendEventToCoreAnalytics()",  "%s\n",  v26);
    }

    v28[1] = 3221225472LL;
    v28[0] = _NSConcreteStackBlock;
    unsigned int v28[2] = sub_100B6A068;
    v28[3] = &unk_1018737E8;
    v28[4] = a1;
    float v29 = v5 / (float)(v6 * v6);
    BOOL v33 = v7 != 0;
    __int128 v30 = v36;
    __int128 v31 = v37;
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v38;
    *(_OWORD *)&unsigned int v32[12] = *(_OWORD *)&v38[12];
    BOOL v34 = v9 > 40.0;
    BOOL v35 = v8 > 0.25;
    AnalyticsSendEventLazy(@"com.apple.CoreMotion.StairEscalation", v28);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    double v17 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Background Stairs Escalation, sent Core Analytics event.",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      LOWORD(v39[0]) = 0;
      LODWORD(v27) = 2;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "Background Stairs Escalation, sent Core Analytics event.",  v39,  v27);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::sendEventToCoreAnalytics()",  "%s\n",  v18);
LABEL_28:
    }
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    int v19 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Not sending escalation event to CoreAnalytics, no IHA permission",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      LOWORD(v39[0]) = 0;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "Not sending escalation event to CoreAnalytics, no IHA permission",  v39,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::sendEventToCoreAnalytics()",  "%s\n",  v18);
      goto LABEL_28;
    }
  }

void sub_100B69460(_Unwind_Exception *a1)
{
}

double sub_100B694A0(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    if (!*(void *)(a1 + 208)) {
      return result;
    }
    sub_1004F2598();
    if (!sub_1004FD45C()) {
      return result;
    }
    double result = sub_1007098B4(*(void *)(a1 + 104));
    if (result <= 0.0 || !*(void *)(a1 + 208)) {
      return result;
    }
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    float v6 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, enabling stairs escalation on workout end event",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      v9[0] = 0;
      float v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation Manager, enabling stairs escalation on workout end event",  v9,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::feedWorkoutEvent(CMWorkoutEvent)",  "%s\n",  v8);
    }

    buf[0] = 1;
  }

  else
  {
    if (a2 || !*(void *)(a1 + 208)) {
      return result;
    }
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    unsigned __int8 v3 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, disabling stairs escalation on workout start event",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      v9[0] = 0;
      int v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation Manager, disabling stairs escalation on workout start event",  v9,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::feedWorkoutEvent(CMWorkoutEvent)",  "%s\n",  v7);
    }

    buf[0] = 0;
  }

  uint64_t v4 = *(void *)(a1 + 208);
  if (!v4) {
    sub_100008BDC();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v4 + 48LL))(v4, buf);
  return result;
}

void sub_100B697EC(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  __int128 v5 = a2[2];
  *(_OWORD *)(a1 + 292) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 2++*(void *)(result + 64) = v4;
  *(_OWORD *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 2++*(void *)(result + 48) = v3;
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_101873818);
  }
  float v6 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 304);
    double v8 = *(float *)(a1 + 268);
    int v9 = *(_DWORD *)(a1 + 252);
    int v10 = *(unsigned __int8 *)(a1 + 305);
    double v11 = *(float *)(a1 + 256);
    int v12 = *(unsigned __int8 *)(a1 + 306);
    double v13 = *(float *)(a1 + 260);
    int v14 = *(unsigned __int8 *)(a1 + 296);
    *(_DWORD *)__int128 buf = 67241985;
    int v40 = v7;
    __int16 v41 = 2049;
    double v42 = v8;
    __int16 v43 = 1025;
    int v44 = v9;
    __int16 v45 = 1026;
    int v46 = v10;
    __int16 v47 = 2049;
    double v48 = v11;
    __int16 v49 = 1026;
    int v50 = v12;
    __int16 v51 = 2049;
    double v52 = v13;
    __int16 v53 = 1025;
    int v54 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{p ublic}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d",  buf,  0x3Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101873818);
    }
    int v15 = *(unsigned __int8 *)(a1 + 304);
    double v16 = *(float *)(a1 + 268);
    int v17 = *(_DWORD *)(a1 + 252);
    int v18 = *(unsigned __int8 *)(a1 + 305);
    double v19 = *(float *)(a1 + 256);
    int v20 = *(unsigned __int8 *)(a1 + 306);
    double v21 = *(float *)(a1 + 260);
    int v22 = *(unsigned __int8 *)(a1 + 296);
    v24[0] = 67241985;
    v24[1] = v15;
    __int16 v25 = 2049;
    double v26 = v16;
    __int16 v27 = 1025;
    int v28 = v17;
    __int16 v29 = 1026;
    int v30 = v18;
    __int16 v31 = 2049;
    double v32 = v19;
    __int16 v33 = 1026;
    int v34 = v20;
    __int16 v35 = 2049;
    double v36 = v21;
    __int16 v37 = 1025;
    int v38 = v22;
    double v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation Manager,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,I sHeightSet,%{public}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d",  v24,  62);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::feedBodyMetrics(const CLBodyMetrics &)",  "%s\n",  v23);
  }

void sub_100B69A90(uint64_t a1, void *a2)
{
  if ((*(_DWORD *)(a1 + 216) - 1) <= 1 && *(_DWORD *)(a1 + 336) == 3)
  {
    uint64_t v3 = a2[5];
    uint64_t v5 = a2[1];
    uint64_t v4 = a2[2];
    float v6 = *(char **)(a1 + 320);
    unint64_t v7 = *(void *)(a1 + 328);
    if ((unint64_t)v6 >= v7)
    {
      int v9 = (void **)(a1 + 312);
      int v10 = *(char **)(a1 + 312);
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v10) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v10) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555LL) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        int v15 = (char *)sub_10000701C(a1 + 328, v14);
        int v10 = *(char **)(a1 + 312);
        float v6 = *(char **)(a1 + 320);
      }

      else
      {
        int v15 = 0LL;
      }

      double v16 = &v15[24 * v11];
      int v17 = &v15[24 * v14];
      *(void *)double v16 = v3;
      *((void *)v16 + 1) = v5;
      *((void *)v16 + 2) = v4;
      double v8 = v16 + 24;
      if (v6 != v10)
      {
        do
        {
          __int128 v18 = *(_OWORD *)(v6 - 24);
          *((void *)v16 - 1) = *((void *)v6 - 1);
          *(_OWORD *)(v16 - ++*(void *)(result + 24) = v18;
          v16 -= 24;
          v6 -= 24;
        }

        while (v6 != v10);
        int v10 = (char *)*v9;
      }

      *(void *)(a1 + 312) = v16;
      *(void *)(a1 + 320) = v8;
      *(void *)(a1 + 328) = v17;
      if (v10) {
        operator delete(v10);
      }
    }

    else
    {
      *(void *)float v6 = v3;
      *((void *)v6 + 1) = v5;
      double v8 = v6 + 24;
      *((void *)v6 + 2) = v4;
    }

    *(void *)(a1 + 320) = v8;
  }

float *sub_100B69BDC(float *result, int a2, float a3, float a4)
{
  if (a2)
  {
    result[85] = a3;
    uint64_t v4 = result + 86;
  }

  else
  {
    result[87] = a3;
    uint64_t v4 = result + 88;
  }

  *uint64_t v4 = a4;
  return result;
}

void sub_100B69BFC(double **a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, float a4@<S1>)
{
  __asm { FMOV            V0.4S, #-1.0 }

  *(_OWORD *)a2 = _Q0;
  *(_OWORD *)(a2 + ++*(void *)(result + 16) = _Q0;
  *(_OWORD *)(a2 + ++*(void *)(result + 32) = _Q0;
  *(_DWORD *)(a2 + ++*(void *)(result + 48) = -1082130432;
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + ++*(void *)(result + 56) = 0;
  unint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  unint64_t v14 = "EnableKeyboardMotionDataCollectionMode";
  if (*a1 == v13)
  {
    double v65 = 0LL;
    __int16 v66 = 0LL;
    double v67 = 0LL;
    std::string __p = 0LL;
    double v63 = 0LL;
    float v18 = -1.0;
    double v17 = 0.0;
    __int16 v64 = 0LL;
  }

  else
  {
    float v15 = *v12 - a3;
    *(float *)a2 = v15;
    double v65 = 0LL;
    __int16 v66 = 0LL;
    double v67 = 0LL;
    std::string __p = 0LL;
    double v63 = 0LL;
    __int16 v64 = 0LL;
    float v16 = -1.0;
    double v17 = 0.0;
    float v18 = -1.0;
    do
    {
      double v20 = *v12;
      double v19 = v12[1];
      double v21 = v12[2];
      int v22 = v63;
      if (v63 >= v64)
      {
        double v24 = (double *)__p;
        uint64_t v25 = ((char *)v63 - (_BYTE *)__p) >> 3;
        unint64_t v26 = v25 + 1;
        uint64_t v27 = (char *)v64 - (_BYTE *)__p;
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          __int16 v29 = (char *)sub_1000071BC((uint64_t)&v64, v28);
          double v24 = (double *)__p;
          int v22 = v63;
        }

        else
        {
          __int16 v29 = 0LL;
        }

        int v30 = (double *)&v29[8 * v25];
        double *v30 = v21;
        double v23 = v30 + 1;
        while (v22 != v24)
        {
          uint64_t v31 = *((void *)v22-- - 1);
          *((void *)v30-- - 1) = v31;
        }

        std::string __p = v30;
        double v63 = v23;
        __int16 v64 = (double *)&v29[8 * v28];
        if (v24) {
          operator delete(v24);
        }
      }

      else
      {
        *double v63 = v21;
        double v23 = v22 + 1;
      }

      double v63 = v23;
      if (v21 > 0.389999986)
      {
        double v32 = v66;
        if (v66 >= v67)
        {
          int v34 = (double *)v65;
          uint64_t v35 = ((char *)v66 - (_BYTE *)v65) >> 3;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61) {
LABEL_62:
          }
            sub_100007008();
          uint64_t v37 = (char *)v67 - (_BYTE *)v65;
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            __int16 v39 = (char *)sub_1000071BC((uint64_t)&v67, v38);
            int v34 = (double *)v65;
            double v32 = v66;
          }

          else
          {
            __int16 v39 = 0LL;
          }

          int v40 = (double *)&v39[8 * v35];
          double *v40 = v19;
          __int16 v33 = v40 + 1;
          while (v32 != v34)
          {
            uint64_t v41 = *((void *)v32-- - 1);
            *((void *)v40-- - 1) = v41;
          }

          double v65 = v40;
          __int16 v66 = v33;
          double v67 = (double *)&v39[8 * v38];
          if (v34) {
            operator delete(v34);
          }
        }

        else
        {
          double *v66 = v19;
          __int16 v33 = v32 + 1;
        }

        __int16 v66 = v33;
        if (v16 < 0.0)
        {
          float v16 = v20 - a3;
          *(float *)(a2 + 4) = v16;
        }

        if (v19 > v18)
        {
          float v18 = v19;
          float v42 = v21;
          *(float *)(a2 + 8) = v18;
          *(float *)(a2 + 12) = v42;
          double v17 = v20;
        }
      }

      v12 += 3;
    }

    while (v12 != v13);
    if (v18 > -1.0)
    {
      float v43 = (float)(v18 + -65.0) / (a4 * -0.7 + 208.0 + -65.0);
      float v44 = v17 - a3;
      *(float *)(a2 + ++*(void *)(result + 16) = v44;
      *(float *)(a2 + 20) = v43;
      unint64_t v14 = "EnableKeyboardMotionDataCollectionMode";
      float v45 = sub_100CFC1E4((double **)&v65);
      *(float *)(a2 + ++*(void *)(result + 24) = v45;
      float v46 = sub_100CFC168((double **)&v65);
      *(float *)(a2 + 28) = v46;
      float v47 = sub_100CFC440((uint64_t *)&__p);
      *(float *)(a2 + ++*(void *)(result + 32) = v47;
      double v48 = sub_100CFC168((double **)&__p);
      float v49 = (double)(unint64_t)(((char *)v66 - (_BYTE *)v65) >> 3) * 100.0;
      __int16 v51 = *a1;
      int v50 = a1[1];
      float v52 = v49 / (float)(0xAAAAAAAAAAAAAAABLL * (v50 - *a1));
      *(float *)&double v48 = v48;
      *(_DWORD *)(a2 + 36) = LODWORD(v48);
      *(float *)(a2 + ++*(void *)(result + 40) = v52;
      goto LABEL_46;
    }

    unint64_t v14 = "EnableKeyboardMotionDataCollectionMode";
  }

  __int16 v51 = *a1;
  int v50 = a1[1];
LABEL_46:
  if (v51 != v50)
  {
    int v53 = 0;
    int v54 = 0;
    float v55 = 3.4028e38;
    double v56 = *((double *)v14 + 21);
    float v57 = 3.4028e38;
    do
    {
      if (v51[2] > v56)
      {
        double v58 = v51[1];
        if (*v51 >= v17)
        {
          if (*v51 <= v17) {
            goto LABEL_56;
          }
          *(_DWORD *)(a2 + ++*(void *)(result + 56) = ++v53;
          if (v58 >= v57) {
            goto LABEL_56;
          }
          float v59 = v58;
          __int16 v60 = (float *)(a2 + 48);
          float v57 = v59;
          goto LABEL_55;
        }

        *(_DWORD *)(a2 + 52) = ++v54;
        if (v58 < v55)
        {
          float v59 = v58;
          __int16 v60 = (float *)(a2 + 44);
          float v55 = v59;
LABEL_55:
          float *v60 = v18 - v59;
        }
      }

void sub_100B6A034( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100B6A068(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v41 = 0LL;
  v42[0] = @"ageGroup";
  float v3 = *(float *)(v2 + 268);
  __int16 v39 = 0LL;
  int v40 = 0LL;
  sub_10001B72C(&v39, (const void *)qword_10199AB90, unk_10199AB98, (unk_10199AB98 - qword_10199AB90) >> 2);
  if (v40 == v39)
  {
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v4 = 0LL;
    unint64_t v5 = (v40 - (_BYTE *)v39) >> 2;
    if (v5 <= 1) {
      unint64_t v5 = 1LL;
    }
    while (*((float *)v39 + v4) < v3)
    {
      if (v5 == ++v4)
      {
        unint64_t v4 = v5;
        break;
      }
    }
  }

  v43[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v4);
  v42[1] = @"gender";
  v43[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v2 + 252));
  void v42[2] = @"useBetaBlocker";
  v43[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 296));
  v42[3] = @"userBMIBin";
  float v6 = *(float *)(a1 + 40);
  uint64_t v37 = 0LL;
  uint64_t v38 = 0LL;
  unint64_t v36 = 0LL;
  sub_10001B72C(&v36, (const void *)qword_10199ABB0, unk_10199ABB8, (unk_10199ABB8 - qword_10199ABB0) >> 2);
  if (v37 == v36)
  {
    unint64_t v7 = 0LL;
  }

  else
  {
    unint64_t v7 = 0LL;
    unint64_t v8 = (v37 - (_BYTE *)v36) >> 2;
    if (v8 <= 1) {
      unint64_t v8 = 1LL;
    }
    while (*((float *)v36 + v7) < v6)
    {
      if (v8 == ++v7)
      {
        unint64_t v7 = v8;
        break;
      }
    }
  }

  void v43[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v7);
  v42[4] = @"hasFlightReported";
  v43[4] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 104));
  v42[5] = @"numFlights";
  int v9 = *(_DWORD *)(v2 + 240);
  int v34 = 0LL;
  uint64_t v35 = 0LL;
  std::string __p = 0LL;
  sub_10001B72C(&__p, (const void *)qword_10199ABD0, unk_10199ABD8, (unk_10199ABD8 - qword_10199ABD0) >> 2);
  if (v34 == __p)
  {
    unint64_t v10 = 0LL;
  }

  else
  {
    unint64_t v10 = 0LL;
    unint64_t v11 = (v34 - (_BYTE *)__p) >> 2;
    if (v11 <= 1) {
      unint64_t v11 = 1LL;
    }
    while (*((_DWORD *)__p + v10) < v9)
    {
      if (v11 == ++v10)
      {
        unint64_t v10 = v11;
        break;
      }
    }
  }

  v43[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v10);
  void v42[6] = @"confHrMedian";
  LODWORD(v12) = *(_DWORD *)(a1 + 76);
  v43[6] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v12);
  v42[7] = @"confHrStd";
  LODWORD(v13) = *(_DWORD *)(a1 + 80);
  v43[7] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v13);
  unsigned __int8 v42[8] = @"countHRSamples";
  v43[8] = +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 320) - *(void *)(v2 + 312)) >> 3));
  v42[9] = @"latencyHr";
  LODWORD(v14) = *(_DWORD *)(a1 + 44);
  v43[9] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v14);
  _BYTE v42[10] = @"latencyHrwConfFlag";
  LODWORD(v15) = *(_DWORD *)(a1 + 48);
  v43[10] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v15);
  v42[11] = @"maxHr";
  LODWORD(v++*(void *)(result + 16) = *(_DWORD *)(a1 + 52);
  v43[11] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v16);
  v42[12] = @"maxHrConfidence";
  LODWORD(v17) = *(_DWORD *)(a1 + 56);
  v43[12] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17);
  v42[13] = @"maxHrOneMinusFhr";
  LODWORD(v18) = *(_DWORD *)(a1 + 64);
  v43[13] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v18);
  _BYTE v42[14] = @"meanHr";
  LODWORD(v19) = *(_DWORD *)(a1 + 68);
  v43[14] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v19);
  v42[15] = @"prcHrwConfFlag";
  LODWORD(v20) = *(_DWORD *)(a1 + 84);
  v43[15] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v20);
  v42[16] = @"rangeBeforeMaxHr";
  LODWORD(v21) = *(_DWORD *)(a1 + 88);
  v43[16] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v21);
  v42[17] = @"rangeAfterMaxHr";
  LODWORD(v22) = *(_DWORD *)(a1 + 92);
  v43[17] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v22);
  v42[18] = @"stdHr";
  LODWORD(v23) = *(_DWORD *)(a1 + 72);
  v43[18] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v23);
  v42[19] = @"time2MaxHr";
  LODWORD(v++*(void *)(result + 24) = *(_DWORD *)(a1 + 60);
  v43[19] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v24);
  v42[20] = @"numSampleBeforeMaxHr";
  v43[20] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 96));
  v42[21] = @"numSampleAfterMaxHr";
  v43[21] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 100));
  v42[22] = @"vspeedMetricEnd";
  LODWORD(v25) = *(_DWORD *)(v2 + 352);
  v43[22] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v25);
  v42[23] = @"stairMetricEnd";
  LODWORD(v26) = *(_DWORD *)(v2 + 348);
  v43[23] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v26);
  v42[24] = @"isVspeedMetric";
  v43[24] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 105));
  v42[25] = @"isStairMetric";
  v43[25] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 106));
  v42[26] = @"sumStairMetricBeg";
  LODWORD(v27) = *(_DWORD *)(v2 + 340);
  v43[26] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v27);
  v42[27] = @"sumStairMetricEnd";
  LODWORD(v28) = *(_DWORD *)(v2 + 348);
  v43[27] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v28);
  v42[28] = @"sumVSpeedMetricBeg";
  LODWORD(v29) = *(_DWORD *)(v2 + 344);
  v43[28] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v29);
  v42[29] = @"sumVSpeedMetricEnd";
  LODWORD(v30) = *(_DWORD *)(v2 + 352);
  v43[29] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v30);
  uint64_t v31 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v43,  v42,  30LL);
  if (__p)
  {
    int v34 = __p;
    operator delete(__p);
  }

  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }

  if (v39)
  {
    int v40 = v39;
    operator delete(v39);
  }

  return v31;
}

void sub_100B6A5B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
}

void sub_100B6A610(void *a1)
{
  uint64_t v1 = sub_100B6A650(a1);
  operator delete(v1);
}

void sub_100B6A624(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100B6A650(void *a1)
{
  *a1 = off_1018737D8;
  uint64_t v2 = (void *)a1[39];
  if (v2)
  {
    a1[40] = v2;
    operator delete(v2);
  }

  float v3 = (void *)a1[26];
  if (v3 == a1 + 23)
  {
    uint64_t v4 = 4LL;
    float v3 = a1 + 23;
  }

  else
  {
    if (!v3) {
      goto LABEL_8;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  unint64_t v5 = (void *)a1[22];
  if (v5 == a1 + 19)
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = a1 + 19;
  }

  else
  {
    if (!v5) {
      goto LABEL_13;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  unint64_t v7 = (void *)a1[18];
  if (v7 == a1 + 15)
  {
    uint64_t v8 = 4LL;
    unint64_t v7 = a1 + 15;
  }

  else
  {
    if (!v7) {
      goto LABEL_18;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  sub_10000AE14((uint64_t)(a1 + 13));
  sub_10000AE14((uint64_t)(a1 + 11));
  sub_10000AE14((uint64_t)(a1 + 9));
  int v9 = (void *)a1[5];
  a1[5] = 0LL;
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_100B6A748()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10199AB58, (void *)&_mh_execute_header);
}

uint64_t sub_100B6AAD8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7LL && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          uint64_t v15 = 0LL;
        }

        uint64_t v38 = 8LL;
        goto LABEL_64;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0LL;
        while (2)
        {
          uint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v21 = v20 + 1;
          if (v20 == -1 || v21 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if (v22 < 0)
            {
              v17 += 7;
              BOOL v10 = v18++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_50;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_50:
        *(_DWORD *)(a1 + ++*(void *)(result + 24) = v19;
        continue;
      case 3u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0LL;
        while (2)
        {
          uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v10 = v24++ >= 9;
              if (v10)
              {
                uint64_t v25 = 0LL;
                goto LABEL_54;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0LL;
        }
LABEL_54:
        BOOL v36 = v25 != 0;
        uint64_t v37 = 28LL;
        goto LABEL_59;
      case 4u:
        *(_BYTE *)(a1 + 32) |= 1u;
        unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7LL && v29 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v15 = 0LL;
        }

        uint64_t v38 = 16LL;
LABEL_64:
        *(void *)(a1 + v38) = v15;
        continue;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0LL;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      uint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v34 = v33 + 1;
      if (v33 == -1 || v34 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v35 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
      v32 |= (unint64_t)(v35 & 0x7F) << v30;
      if ((v35 & 0x80) == 0) {
        goto LABEL_56;
      }
      v30 += 7;
      BOOL v10 = v31++ >= 9;
      if (v10)
      {
        uint64_t v32 = 0LL;
        goto LABEL_58;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v32 = 0LL;
    }
LABEL_58:
    BOOL v36 = v32 != 0;
    uint64_t v37 = 29LL;
LABEL_59:
    *(_BYTE *)(a1 + v37) = v36;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100B6B3BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10183C7F0;
  char v4 = v8;
  if (v8 == v7)
  {
    uint64_t v5 = 4LL;
    char v4 = v7;
    goto LABEL_5;
  }

  if (v8)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  *(void *)a1 = off_101873888;
  sub_10001A504(a1 + 8, a2);
  *(void *)(a1 + ++*(void *)(result + 40) = 0LL;
  *(_BYTE *)(a1 + ++*(void *)(result + 48) = 0;
  *(_OWORD *)(a1 + ++*(void *)(result + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 152) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_100B6B4B4(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 112) <= *(double *)(a1 + 40))
  {
    sub_100B6BFBC(a1);
    double v5 = 0.0;
    int v11 = -1;
    double v12 = 0.0;
    double v6 = 0.0;
    goto LABEL_34;
  }

  unsigned int v4 = *(_DWORD *)(a2 + 520);
  double v5 = 0.0;
  double v6 = 0.0;
  if (!*(_BYTE *)(a1 + 48))
  {
    uint64_t v7 = (void *)(a1 + 56);
    double v8 = *(double *)(a2 + 128) - *(double *)(a2 + 120);
    double v9 = *(double *)(a1 + 56) + v8;
    if (v9 < 10.24
      || (v8 == 0.0 ? (double v10 = 0.0) : (double v10 = (v8 - (v9 + -10.24)) / v8 * (double)v4),
          double v6 = v10 + *(double *)(a1 + 64),
          v6 < 14.0))
    {
LABEL_17:
      *(double *)__int128 buf = *(double *)(a2 + 128) - *(double *)(a2 + 120);
      *(double *)&uint8_t buf[8] = (double)v4;
      uint64_t v18 = sub_100B6BD3C((void *)(a1 + 104), buf);
      double v19 = sub_100B6BDF8(v18, (void *)(a1 + 104));
      *(double *)(a1 + ++*(void *)(result + 56) = v19;
      *(double *)(a1 + ++*(void *)(result + 64) = sub_100B6BE5C(v20, (void *)(a1 + 104));
      if (v19 >= 10.24)
      {
        __int128 v81 = xmmword_1012CE4D0;
        do
        {
          *(int64x2_t *)(a1 + 136) = vaddq_s64(*(int64x2_t *)(a1 + 136), (int64x2_t)xmmword_1012CE4D0);
          uint64_t v21 = sub_100232D40(a1 + 104, 1);
          double v22 = sub_100B6BDF8(v21, (void *)(a1 + 104));
          *(double *)(a1 + ++*(void *)(result + 56) = v22;
          *(double *)(a1 + ++*(void *)(result + 64) = sub_100B6BE5C(v23, (void *)(a1 + 104));
        }

        while (v22 >= 10.24);
      }

      goto LABEL_20;
    }

    *(_BYTE *)(a1 + ++*(void *)(result + 48) = 1;
    double v13 = *(void ***)(a1 + 112);
    uint64_t v14 = *(void *)(a1 + 120);
    *(void *)(a1 + 144) = 0LL;
    unint64_t v15 = v14 - (void)v13;
    if (v15 >= 0x11)
    {
      do
      {
        operator delete(*v13);
        uint64_t v16 = *(void *)(a1 + 120);
        double v13 = (void **)(*(void *)(a1 + 112) + 8LL);
        *(void *)(a1 + 112) = v13;
        unint64_t v15 = v16 - (void)v13;
      }

      while (v15 > 0x10);
    }

    if (v15 >> 3 == 1)
    {
      uint64_t v17 = 128LL;
    }

    else
    {
      if (v15 >> 3 != 2) {
        goto LABEL_16;
      }
      uint64_t v17 = 256LL;
    }

    *(void *)(a1 + 136) = v17;
LABEL_16:
    void *v7 = 0LL;
    *(void *)(a1 + ++*(void *)(result + 64) = 0LL;
    if (*(_BYTE *)(a1 + 48)) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }

uint64_t sub_100B6BD3C(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B6C190(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  *(_OWORD *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5] + 1LL;
  a1[5] = v9;
  unint64_t v10 = v8 + v9;
  uint64_t v11 = a1[1];
  double v12 = (void *)(v11 + 8 * (v10 >> 8));
  uint64_t v13 = *v12 + 16LL * v10;
  if (a1[2] == v11) {
    uint64_t v13 = 0LL;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096LL;
  }
  return v13 - 16;
}

double sub_100B6BDF8(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  double result = 0.0;
  if (a2[2] != v2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = (double **)(v2 + 8 * (v4 >> 8));
    uint64_t v6 = *v5;
    unint64_t v7 = &(*v5)[2 * v4];
    uint64_t v8 = *(void *)(v2 + (((a2[5] + v4) >> 5) & 0x7FFFFFFFFFFFFF8LL))
       + 16LL * (*((_BYTE *)a2 + 40) + v4);
    while (v7 != (double *)v8)
    {
      double v9 = *v7;
      v7 += 2;
      double v10 = v9;
      if ((char *)v7 - (char *)v6 == 4096)
      {
        uint64_t v11 = v5[1];
        ++v5;
        uint64_t v6 = v11;
        unint64_t v7 = v11;
      }

      double result = result + v10;
    }
  }

  return result;
}

double sub_100B6BE5C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  double result = 0.0;
  if (a2[2] != v2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = (uint64_t *)(v2 + 8 * (v4 >> 8));
    uint64_t v6 = *v5;
    uint64_t v7 = *v5 + 16LL * v4;
    uint64_t v8 = *(void *)(v2 + (((a2[5] + v4) >> 5) & 0x7FFFFFFFFFFFFF8LL))
       + 16LL * (*((_BYTE *)a2 + 40) + v4);
    if (v7 != v8)
    {
      unsigned int v9 = 0;
      do
      {
        uint64_t v10 = v7 + 16;
        if (v7 + 16 - v6 == 4096)
        {
          uint64_t v11 = v5[1];
          ++v5;
          uint64_t v6 = v11;
          uint64_t v10 = v11;
        }

        unsigned int v9 = (*(double *)(v7 + 8) + (double)v9);
        uint64_t v7 = v10;
      }

      while (v10 != v8);
      return (double)v9;
    }
  }

  return result;
}

uint64_t sub_100B6BEDC(uint64_t a1, double *a2, void *a3, int *a4, char a5)
{
  *(double *)(a1 + ++*(void *)(result + 88) = *(double *)(a1 + 88) + 60.0;
  *(void *)(a1 + ++*(void *)(result + 96) = *a3;
  sub_100B6BFBC(a1);
  uint64_t v10 = sub_1008D9630();
  sub_1008D9674(v10, *a4, *(double *)a3 - *a2);
  if (*a4 == 1) {
    __int16 v11 = 32;
  }
  else {
    __int16 v11 = 16;
  }
  if (*a4 == 2) {
    __int16 v12 = 64;
  }
  else {
    __int16 v12 = v11;
  }
  uint64_t v13 = *a3;
  *(double *)uint64_t v16 = *a2;
  v16[1] = v13;
  void v16[2] = 0x4011CCCCC0000000LL;
  __int16 v17 = v12;
  char v18 = a5;
  char v19 = 0;
  uint64_t v14 = *(void *)(a1 + 32);
  if (!v14) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 48LL))(v14, v16);
}

void sub_100B6BFBC(uint64_t a1)
{
  *(_BYTE *)(a1 + ++*(void *)(result + 48) = 0;
  uint64_t v2 = *(void ***)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 144) = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 120);
      uint64_t v2 = (void **)(*(void *)(a1 + 112) + 8LL);
      *(void *)(a1 + 112) = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 128LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 256LL;
  }

  *(void *)(a1 + 136) = v6;
LABEL_8:
  *(void *)(a1 + ++*(void *)(result + 56) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 64) = 0LL;
  uint64_t v7 = *(void ***)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  *(void *)(a1 + 192) = 0LL;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 168);
      uint64_t v7 = (void **)(*(void *)(a1 + 160) + 8LL);
      *(void *)(a1 + ++*(void *)(result + 160) = v7;
      unint64_t v9 = v10 - (void)v7;
    }

    while (v9 > 0x10);
  }

  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 128LL;
    goto LABEL_14;
  }

  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 256LL;
LABEL_14:
    *(void *)(a1 + 184) = v11;
  }

  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
}

void *sub_100B6C094(void *a1)
{
  *a1 = off_101873888;
  sub_100231C10(a1 + 19);
  sub_100231C10(a1 + 13);
  uint64_t v2 = (void *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void sub_100B6C0FC(void *a1)
{
  *a1 = off_101873888;
  sub_100231C10(a1 + 19);
  sub_100231C10(a1 + 13);
  uint64_t v2 = (void *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  operator delete(a1);
}

void sub_100B6C164(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100B6C190(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100B6C458( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B6C4A4(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _OWORD v3[2] = sub_100B6C4FC;
  v3[3] = &unk_101820718;
  v3[4] = a2;
  return AnalyticsSendEventLazy(@"com.apple.GyroBiasEvaluation", v3);
}

NSDictionary *sub_100B6C4FC(uint64_t a1)
{
  v3[0] = @"logSequenceID";
  v4[0] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  (unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0));
  v3[1] = @"timestamp";
  v4[1] = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(*(void *)(a1 + 32) + 1LL));
  _OWORD v3[2] = @"temperature";
  _DWORD v4[2] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 9LL));
  v3[3] = @"biasX";
  v4[3] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 13LL));
  v3[4] = @"biasY";
  v4[4] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 17LL));
  void v3[5] = @"biasZ";
  void v4[5] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 21LL));
  void v3[6] = @"biasUncertaintyX";
  void v4[6] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 25LL));
  v3[7] = @"biasUncertaintyY";
  v4[7] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 29LL));
  void v3[8] = @"biasUncertaintyZ";
  _WORD v4[8] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 33LL));
  v3[9] = @"dynamicBiasX";
  v4[9] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 37LL));
  v3[10] = @"dynamicBiasY";
  v4[10] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 41LL));
  v3[11] = @"dynamicBiasZ";
  v4[11] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 45LL));
  v3[12] = @"temperatureFitUncertaintyX";
  v4[12] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 49LL));
  v3[13] = @"temperatureFitUncertaintyY";
  v4[13] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 53LL));
  v3[14] = @"temperatureFitUncertaintyZ";
  v4[14] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(float *)(*(void *)(a1 + 32) + 57LL));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  15LL);
}

uint64_t sub_100B6CAC4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString(a2);

        *(void *)(a1 + ++*(void *)(result + 32) = String;
        goto LABEL_58;
      case 2u:
        char v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = 0LL;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1LL || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v18 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
            v16 |= (unint64_t)(v18 & 0x7F) << v14;
            if (v18 < 0)
            {
              v14 += 7;
              BOOL v9 = v15++ >= 9;
              if (v9)
              {
                LODWORD(v++*(void *)(result + 16) = 0;
                goto LABEL_48;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v++*(void *)(result + 16) = 0;
        }
LABEL_48:
        uint64_t v28 = 8LL;
        goto LABEL_57;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v16 = 0LL;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v16 |= (unint64_t)(v22 & 0x7F) << v19;
            if (v22 < 0)
            {
              v19 += 7;
              BOOL v9 = v20++ >= 9;
              if (v9)
              {
                LODWORD(v++*(void *)(result + 16) = 0;
                goto LABEL_52;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v++*(void *)(result + 16) = 0;
        }
LABEL_52:
        uint64_t v28 = 12LL;
        goto LABEL_57;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v16 = 0LL;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1LL || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v26 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v16 |= (unint64_t)(v26 & 0x7F) << v23;
            if (v26 < 0)
            {
              v23 += 7;
              BOOL v9 = v24++ >= 9;
              if (v9)
              {
                LODWORD(v++*(void *)(result + 16) = 0;
                goto LABEL_56;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v++*(void *)(result + 16) = 0;
        }
LABEL_56:
        uint64_t v28 = 24LL;
LABEL_57:
        *(_DWORD *)(a1 + v28) = v16;
        goto LABEL_58;
      case 5u:
        uint64_t v27 = objc_alloc_init(&OBJC_CLASS___ALSLocation);

        *(void *)(a1 + ++*(void *)(result + 16) = v27;
        if (PBReaderPlaceMark(a2, v29) && (sub_100B87820((uint64_t)v27, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v29);
LABEL_58:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_58;
    }
  }

void sub_100B6D840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100B6D860(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018738E0);
    }
    BOOL v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#ble, CBAdvertiser activation failed : %@",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018738E0);
    }
    int v12 = 138412290;
    id v13 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#ble, CBAdvertiser activation failed : %@",  &v12,  12);
    unsigned int v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLMiLoBluetoothClient _startAdvertising]_block_invoke", "%s\n", v4);
    if (v5 == buf) {
      return;
    }
LABEL_20:
    free(v5);
    return;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_1018738E0);
  }
  unint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 32) advertiser];
    *(_DWORD *)__int128 buf = 138412290;
    id v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ble, CBAdvertiser activatied: %@", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018738E0);
    }
    uint64_t v9 = qword_1019348D8;
    id v10 = [*(id *)(a1 + 32) advertiser];
    int v12 = 138412290;
    id v13 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  0LL,  "#ble, CBAdvertiser activatied: %@",  &v12,  12);
    unsigned int v5 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLMiLoBluetoothClient _startAdvertising]_block_invoke", "%s\n", v11);
    if (v5 != buf) {
      goto LABEL_20;
    }
  }

void sub_100B6DB7C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

BOOL sub_100B6DBA8(double *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)a1;
  double v5 = *(double *)(a2 + 128) - a1[1];
  double v6 = *((float *)a1 + 6);
  BOOL v7 = sub_100B6E2DC((uint64_t)a1, a2);
  BOOL v8 = v7;
  int v9 = *(unsigned __int8 *)(a2 + 352);
  if (*(_BYTE *)(a2 + 352)) {
    BOOL v10 = v5 <= v6;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10 || v7)
  {
    *(_BYTE *)a1 = 0;
    std::string __p = 0LL;
    __int128 v42 = 0uLL;
    HIDWORD(v++*(void *)(result + 40) = *(double *)(a2 + 128) - a1[2] > 120.0;
    if (!v9)
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      HIDWORD(v39) = 0;
      LODWORD(v++*(void *)(result + 40) = 0;
      int v14 = 0;
      int v13 = 0;
      float v15 = 0.0;
      goto LABEL_27;
    }
  }

  else
  {
    std::string __p = 0LL;
    __int128 v42 = 0uLL;
    HIDWORD(v++*(void *)(result + 40) = *(double *)(a2 + 128) - a1[2] > 120.0;
  }

  sub_100B6E3A0(a2, (void **)buf);
  uint64_t v11 = *(void *)buf;
  std::string __p = *(void **)buf;
  __int128 v42 = *(_OWORD *)&buf[8];
  uint64_t v12 = *(void *)&buf[8];
  if (*(void *)&buf[8] - *(void *)buf == 560LL)
  {
    sub_100B6E6D8((uint64_t *)&__p, (float *)a2, (uint64_t)buf);
    int v13 = *(_DWORD *)buf;
    int v14 = *(_DWORD *)&buf[12];
    HIDWORD(v39) = *(_DWORD *)&buf[4];
    LODWORD(v++*(void *)(result + 40) = *(_DWORD *)&buf[8];
    float v15 = *(float *)&buf[16];
    int v16 = HIDWORD(v40);
    BOOL v17 = v16 == 1 && *(_DWORD *)&buf[12] <= 6;
    if (v17 && (*(_DWORD *)buf == 14 || *(_DWORD *)&buf[8] == 14 || *(_DWORD *)&buf[4] == 14))
    {
      *(_BYTE *)a1 = 1;
      a1[1] = *(double *)(a2 + 128);
      float v18 = *((float *)a1 + 6) + 30.0;
      if (v18 > 600.0) {
        float v18 = 600.0;
      }
      *((float *)a1 + 6) = v18;
    }
  }

  else
  {
    HIDWORD(v39) = 0;
    LODWORD(v++*(void *)(result + 40) = 0;
    int v14 = 0;
    int v13 = 0;
    float v15 = 0.0;
  }

  if (*((_BYTE *)a1 + 2)) {
    *(_BYTE *)a1 = 1;
  }
LABEL_27:
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101873900);
  }
  char v19 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *(void *)(a2 + 120);
    uint64_t v21 = *(void *)(a2 + 128);
    int v22 = *(unsigned __int8 *)a1;
    int v23 = *(unsigned __int8 *)(a2 + 352);
    *(_DWORD *)__int128 buf = 134221056;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = v21;
    *(_WORD *)&_BYTE buf[22] = 1024;
    *(_DWORD *)__int16 v60 = -858993459 * ((unint64_t)(v12 - v11) >> 3);
    *(_WORD *)&v60[4] = 1024;
    *(_DWORD *)uint64_t v61 = v13;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)uint64_t v62 = HIDWORD(v39);
    *(_WORD *)&v62[4] = 1024;
    *(_DWORD *)uint64_t v63 = v40;
    *(_WORD *)&v63[4] = 1024;
    LODWORD(v++*(void *)(result + 64) = v14;
    WORD2(v++*(void *)(result + 64) = 2048;
    *(double *)((char *)&v64 + 6) = v15;
    HIWORD(v++*(void *)(result + 64) = 1024;
    *(_DWORD *)uint64_t v65 = v22;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)double v66 = v23;
    *(_WORD *)&v66[4] = 1024;
    BOOL v67 = v5 > v6;
    __int16 v68 = 1024;
    BOOL v69 = v8;
    __int16 v70 = 1024;
    int v71 = HIDWORD(v40);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "AssistedCyclingDetector,beginTime,%f,endTime,%f,bufferSize,%d,totalSamplesAboveVO2MaxThreshold,%d,totalSamplesAbov eVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAccelVectorMagnitude,%f ,assistedCyclingOverridden,%d,isMotionOverrideSet,%d,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSess ionDurationOk,%d",  buf,  0x5Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101873900);
    }
    uint64_t v29 = *(void *)(a2 + 120);
    uint64_t v30 = *(void *)(a2 + 128);
    int v31 = *(unsigned __int8 *)a1;
    int v32 = *(unsigned __int8 *)(a2 + 352);
    int v43 = 134221056;
    uint64_t v44 = v29;
    __int16 v45 = 2048;
    *(void *)unint64_t v46 = v30;
    *(_WORD *)&_WORD v46[8] = 1024;
    *(_DWORD *)uint64_t v47 = -858993459 * (((void)v42 - (void)__p) >> 3);
    *(_WORD *)&v47[4] = 1024;
    *(_DWORD *)uint64_t v48 = v13;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)uint64_t v49 = HIDWORD(v39);
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)uint64_t v50 = v40;
    *(_WORD *)&v50[4] = 1024;
    LODWORD(v51) = v14;
    WORD2(v51) = 2048;
    *(double *)((char *)&v51 + 6) = v15;
    HIWORD(v51) = 1024;
    *(_DWORD *)uint64_t v52 = v31;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)uint64_t v53 = v32;
    *(_WORD *)&v53[4] = 1024;
    BOOL v54 = v5 > v6;
    __int16 v55 = 1024;
    BOOL v56 = v8;
    __int16 v57 = 1024;
    int v58 = HIDWORD(v40);
    LODWORD(v39) = 92;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "AssistedCyclingDetector,beginTime,%f,endTime,%f,bufferSize,%d,totalSamplesAboveVO2MaxThreshold,%d,totalSamplesAbov eVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAccelVectorMagnitude,%f ,assistedCyclingOverridden,%d,isMotionOverrideSet,%d,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSess ionDurationOk,%d",  COERCE_DOUBLE(&v43),  v39,  v40,  (_DWORD)__p,  (_DWORD)v42,  DWORD2(v42));
    double v34 = (char *)v33;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAssistedCyclingDetector::detect(const CLNatalieModelInput &)",  "%s\n",  v33);
    if (v34 != buf) {
      free(v34);
    }
  }

  if (v4 != *(unsigned __int8 *)a1)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101873900);
    }
    unsigned int v24 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(a2 + 128);
      int v26 = *(unsigned __int8 *)a1;
      *(_DWORD *)__int128 buf = 134220544;
      *(void *)&uint8_t buf[4] = v25;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v26;
      *(_WORD *)__int16 v60 = 1024;
      *(_DWORD *)&v60[2] = v13;
      *(_WORD *)uint64_t v61 = 1024;
      *(_DWORD *)&v61[2] = HIDWORD(v39);
      *(_WORD *)uint64_t v62 = 1024;
      *(_DWORD *)&v62[2] = v40;
      *(_WORD *)uint64_t v63 = 1024;
      *(_DWORD *)&v63[2] = v14;
      LOWORD(v++*(void *)(result + 64) = 2048;
      *(double *)((char *)&v64 + 2) = v15;
      WORD5(v++*(void *)(result + 64) = 1024;
      HIDWORD(v++*(void *)(result + 64) = v5 > v6;
      *(_WORD *)uint64_t v65 = 1024;
      *(_DWORD *)&v65[2] = v8;
      *(_WORD *)double v66 = 1024;
      *(_DWORD *)&v66[2] = HIDWORD(v40);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "AssistedCyclingOverrideState,endTime,%f,previousOverride,%d,currentOverride,%d,totalSamplesAboveVO2MaxThreshold, %d,totalSamplesAboveVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAc celVectorMagnitude,%f,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSessionDurationOk,%d",  buf,  0x4Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101873900);
      }
      uint64_t v35 = *(void *)(a2 + 128);
      int v36 = *(unsigned __int8 *)a1;
      int v43 = 134220544;
      uint64_t v44 = v35;
      __int16 v45 = 1024;
      *(_DWORD *)unint64_t v46 = v4;
      *(_WORD *)&v46[4] = 1024;
      *(_DWORD *)&v46[6] = v36;
      *(_WORD *)uint64_t v47 = 1024;
      *(_DWORD *)&v47[2] = v13;
      *(_WORD *)uint64_t v48 = 1024;
      *(_DWORD *)&v48[2] = HIDWORD(v39);
      *(_WORD *)uint64_t v49 = 1024;
      *(_DWORD *)&v49[2] = v40;
      *(_WORD *)uint64_t v50 = 1024;
      *(_DWORD *)&v50[2] = v14;
      LOWORD(v51) = 2048;
      *(double *)((char *)&v51 + 2) = v15;
      WORD5(v51) = 1024;
      HIDWORD(v51) = v5 > v6;
      *(_WORD *)uint64_t v52 = 1024;
      *(_DWORD *)&v52[2] = v8;
      *(_WORD *)uint64_t v53 = 1024;
      *(_DWORD *)&v53[2] = HIDWORD(v40);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "AssistedCyclingOverrideState,endTime,%f,previousOverride,%d,currentOverride,%d,totalSamplesAboveVO2MaxThreshold, %d,totalSamplesAboveVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAc celVectorMagnitude,%f,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSessionDurationOk,%d",  COERCE_DOUBLE(&v43),  76,  v40,  (_DWORD)__p,  (_DWORD)v42,  DWORD2(v42));
      uint64_t v38 = (char *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAssistedCyclingDetector::detect(const CLNatalieModelInput &)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }
  }

  int v27 = *(unsigned __int8 *)a1;
  if (__p) {
    operator delete(__p);
  }
  return v27 != 0;
}

void sub_100B6E2B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100B6E2DC(uint64_t a1, uint64_t a2)
{
  if (uuid_is_null(dst)) {
    return 0LL;
  }
  int v5 = uuid_compare((const unsigned __int8 *)(a1 + 28), dst);
  BOOL result = v5 != 0;
  if (*(_BYTE *)(a2 + 352))
  {
    if (v5)
    {
      uuid_copy((unsigned __int8 *)(a1 + 28), dst);
      *(void *)(a1 + ++*(void *)(result + 16) = *(void *)(a2 + 128);
      *(_DWORD *)(a1 + ++*(void *)(result + 24) = 1106247680;
      return 1LL;
    }
  }

  return result;
}

void sub_100B6E3A0(uint64_t a1@<X1>, void **a2@<X8>)
{
  int v4 = 0;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    double v6 = *(double *)(a1 + 128) + (double)v4 * -2.56;
    if (!(*(unsigned int (**)(void, double))(**(void **)(a1 + 48) + 48LL))(*(void *)(a1 + 48), v6)
      || !(*(unsigned int (**)(void, char *, double))(**(void **)(a1 + 48) + 24LL))( *(void *)(a1 + 48),  v37,  v6))
    {
      break;
    }

    char isTypeCycling = CLMotionActivity::isTypeCycling(v38);
    char v8 = v40 ? isTypeCycling : 0;
    if ((v8 & 1) == 0) {
      break;
    }
    if ((*(unsigned int (**)(void, double))(**(void **)(a1 + 8) + 48LL))(*(void *)(a1 + 8), v6)
      && (*(unsigned int (**)(void, double))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16), v6)
      && (*(unsigned int (**)(void, double))(**(void **)(a1 + 24) + 48LL))(*(void *)(a1 + 24), v6)
      && (*(unsigned int (**)(void, char *, double))(**(void **)(a1 + 8) + 24LL))( *(void *)(a1 + 8),  v34,  v6)
      && (*(unsigned int (**)(void, double *, double))(**(void **)(a1 + 16) + 24LL))( *(void *)(a1 + 16),  v33,  v6))
    {
      int v9 = (*(uint64_t (**)(void, char *, double))(**(void **)(a1 + 24) + 24LL))( *(void *)(a1 + 24),  v30,  v6);
      int v10 = v36 >= 0.6 ? v9 : 0;
      if (v10 == 1 && v33[0] > 0.0)
      {
        int v11 = v31;
        if (v31)
        {
          float v12 = v33[4];
          float v13 = v32;
          uint64_t v14 = v35;
          int v15 = v39;
          BOOL v17 = (double *)a2[1];
          int v16 = (double *)a2[2];
          if (v17 >= v16)
          {
            char v19 = (double *)*a2;
            unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v17 - (_BYTE *)*a2) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0x666666666666666LL) {
              sub_100007008();
            }
            unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v16 - v19);
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x333333333333333LL) {
              unint64_t v23 = 0x666666666666666LL;
            }
            else {
              unint64_t v23 = v21;
            }
            if (v23)
            {
              unsigned int v24 = (char *)sub_100100EF8(v5, v23);
              char v19 = (double *)*a2;
              BOOL v17 = (double *)a2[1];
            }

            else
            {
              unsigned int v24 = 0LL;
            }

            uint64_t v25 = (float *)&v24[40 * v20];
            *(double *)uint64_t v25 = v6;
            _DWORD v25[2] = v12;
            void v25[3] = v13;
            *((_DWORD *)v25 + 4) = v11;
            *((void *)v25 + 3) = v14;
            *((_DWORD *)v25 + 8) = v15;
            if (v17 == v19)
            {
              uint64_t v29 = &v24[40 * v20];
            }

            else
            {
              int v26 = &v24[40 * v20];
              do
              {
                __int128 v27 = *(_OWORD *)(v17 - 5);
                __int128 v28 = *(_OWORD *)(v17 - 3);
                uint64_t v29 = v26 - 40;
                *((_DWORD *)v26 - 2) = *((_DWORD *)v17 - 2);
                *(_OWORD *)(v26 - ++*(void *)(result + 24) = v28;
                *(_OWORD *)(v26 - ++*(void *)(result + 40) = v27;
                v17 -= 5;
                v26 -= 40;
              }

              while (v17 != v19);
            }

            float v18 = (double *)(v25 + 10);
            *a2 = v29;
            a2[1] = v25 + 10;
            a2[2] = &v24[40 * v23];
            if (v19) {
              operator delete(v19);
            }
          }

          else
          {
            double *v17 = v6;
            *((float *)v17 + 2) = v12;
            *((float *)v17 + 3) = v13;
            *((_DWORD *)v17 + 4) = v11;
            *((void *)v17 + 3) = v14;
            float v18 = v17 + 5;
            *((_DWORD *)v17 + 8) = v15;
          }

          a2[1] = v18;
        }
      }
    }

    ++v4;
  }

  while (v4 != 14);
}

void sub_100B6E6B0(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100B6E6D8(uint64_t *a1@<X1>, float *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(_DWORD *)(a3 + ++*(void *)(result + 16) = 0;
  double v6 = sub_100B6EAF4(&v28, 0xAuLL);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    float v13 = a2[342] * 1.2;
    do
    {
      uint64_t v14 = v7 + v8;
      float v15 = *(float *)(v14 + 12);
      int v16 = *(_DWORD *)(v14 + 16);
      double v17 = *(double *)(v14 + 24);
      float v18 = *(float *)(v14 + 32);
      sub_100C399F8(*(float *)(v14 + 8), v15, a2[341]);
      float v20 = v19;
      float v21 = v17;
      float v22 = sub_100C38798((uint64_t)a2, v21);
      if ((v16 - 1) <= 1)
      {
        float v23 = 1.0 - (a2[345] - v17) / (a2[345] - a2[346]);
        BOOL v24 = v23 > 0.05 && v23 < 0.5;
        if (v24 && v20 > 7.5)
        {
          if (v20 > v13) {
            *(_DWORD *)a3 = ++v12;
          }
          if (v15 > 0.56) {
            *(_DWORD *)(a3 + 4) = ++v11;
          }
        }
      }

      if (v9 <= 9) {
        v28[v9] = v18;
      }
      ++v9;
      uint64_t v7 = *a1;
      v8 += 40LL;
    }

    while (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3) > v9);
  }

  *(_DWORD *)(a3 + 12) = sub_100B6E910((uint64_t)v6, a1, (uint64_t)a2);
  __int128 v27 = v28;
  if ((char *)v29 - (char *)v28 == 40)
  {
    if (v28 + 5 != v29)
    {
      sub_1002C3C90(v28, v28 + 5, v29, v26);
      __int128 v27 = v28;
    }

    *(float *)(a3 + ++*(void *)(result + 16) = v27[5];
  }

  else if (!v28)
  {
    return;
  }

  uint64_t v29 = v27;
  operator delete(v27);
}

void sub_100B6E8E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B6E910(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = (int)(-858993459 * ((a2[1] - *a2) >> 3));
  do
  {
    if (v6 >= v8)
    {
      double v15 = *(double *)(a3 + 128) + (double)(int)v6 * -2.56;
      if ((*(unsigned int (**)(void, double))(**(void **)(a3 + 24) + 48LL))(*(void *)(a3 + 24), v15))
      {
        if ((*(unsigned int (**)(void, uint64_t *, double))(**(void **)(a3 + 24) + 24LL))( *(void *)(a3 + 24),  &v21,  v15)
          && v22 != 0)
        {
          float v18 = v23;
          BOOL v14 = v18 < -0.0278 || v22 == 3;
          goto LABEL_30;
        }
      }

      if (!(*(unsigned int (**)(void, double))(**(void **)(a3 + 16) + 48LL))(*(void *)(a3 + 16), v15))
      {
        BOOL v14 = 0;
        goto LABEL_30;
      }

      int v17 = (*(uint64_t (**)(void, double *, double))(**(void **)(a3 + 16) + 24LL))( *(void *)(a3 + 16),  v24,  v15);
      BOOL v14 = 0;
      if (!v17 || v24[0] <= 0.0) {
        goto LABEL_30;
      }
      float v10 = v24[4];
      BOOL v14 = v10 < 0.44;
    }

    else
    {
      uint64_t v9 = *a2 + v5;
      float v10 = *(float *)(v9 + 8);
      float v11 = *(float *)(v9 + 12);
      int v12 = *(_DWORD *)(v9 + 16);
      BOOL v14 = v11 < -0.0278 || v12 == 3;
      if (v10 < 0.44) {
        BOOL v14 = 1;
      }
    }

    if (v10 > 12.5) {
      BOOL v14 = 1;
    }
LABEL_30:
    uint64_t v7 = v14 ? (v7 + 1) : 0LL;
    ++v6;
    v5 += 40LL;
  }

  while (v6 != 36);
  return v7;
}

void sub_100B6EAC8(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_100B6EAF4(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10001B7A4(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }

  return a1;
}

void sub_100B6EB4C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100B6EC0C(id a1)
{
  qword_10199ABF0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLSensorCalibrationControllerSilo");
}

uint64_t sub_100B6ECC0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100B6F324;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199AC00 != -1) {
    dispatch_once(&qword_10199AC00, block);
  }
  return qword_1019A1D18;
}

BOOL sub_100B6EE44(uint64_t a1, char a2)
{
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  int v4 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)__int128 buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "fState,%{public}d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    int v20 = *(_DWORD *)(a1 + 272);
    v28[0] = 67240192;
    v28[1] = v20;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "fState,%{public}d",  v28,  8);
    int v22 = (uint8_t *)v21;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLSensorCalibrationController::start(BOOL)", "%s\n", v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  int v6 = *(_DWORD *)(a1 + 272);
  if (!v6)
  {
    if (sub_100E575B0())
    {
      sub_1002A5370(buf);
      sub_1002ACA84((uint64_t)buf, "Status", "start");
      sub_100E57614((uint64_t)buf, (uint64_t)"MotionSensorCalibration");
      sub_1002A5590(buf);
    }

    *(_BYTE *)(a1 + 276) = a2;
    LOBYTE(v28[0]) = a2;
    *(_DWORD *)__int128 buf = 0;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v28,  1LL,  0xFFFFFFFFLL,  0LL);
    if (*(_BYTE *)(a1 + 300))
    {
      if (*(void *)(a1 + 328))
      {
        sub_10126067C(v7);
        goto LABEL_39;
      }

      uint64_t v8 = operator new(0x38uLL);
      sub_100B75FB0(v8, *(void **)(a1 + 40), (uint64_t)sub_100B70C4C, a1, 0LL);
      *(void *)(a1 + 328) = v8;
      uint64_t v9 = sub_1006E27E8();
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_100B70CA8;
      v26[3] = &unk_10181D3D0;
      v26[4] = a1;
      sub_1006E2970(v9, (uint64_t)v26);
    }

    if (*(int *)(a1 + 344) >= 1)
    {
      sub_101260244(v7);
      goto LABEL_39;
    }

    sub_1010DDBC0(__p, "start");
    sub_100AD5668(a1 + 336, (uint64_t *)__p);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    dispatch_resume(*(dispatch_object_t *)(a1 + 320));
    uint64_t v10 = *(void *)(a1 + 240);
    if (v10)
    {
      if (*(_BYTE *)(a1 + 171))
      {
        sub_101260514();
        goto LABEL_39;
      }

      *(void *)(a1 + 2++*(void *)(result + 40) = 0LL;
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }

    float v11 = *(dispatch_source_s **)(a1 + 256);
    if (v11)
    {
      dispatch_source_cancel(v11);
      dispatch_release(*(dispatch_object_t *)(a1 + 256));
      *(void *)(a1 + 2++*(void *)(result + 56) = 0LL;
    }

    int v12 = *(void **)(a1 + 32);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    void v23[2] = sub_100B70CD4;
    float v23[3] = &unk_10181D3D0;
    v23[4] = a1;
    sub_100A36008(1LL, v12, v23, buf, 0.0);
    uint64_t v13 = *(void *)buf;
    *(void *)__int128 buf = 0LL;
    uint64_t v14 = *(void *)(a1 + 384);
    *(void *)(a1 + 384) = v13;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
      uint64_t v15 = *(void *)buf;
      *(void *)__int128 buf = 0LL;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
      }
    }

    *(_DWORD *)(a1 + 272) = 1;
    *(double *)(a1 + 2++*(void *)(result + 88) = sub_101171D38();
    *(_DWORD *)(a1 + 280) = 2139095039;
    if (*(_BYTE *)(a1 + 180)) {
      goto LABEL_26;
    }
    if (*(_BYTE *)(a1 + 276))
    {
      *(CFAbsoluteTime *)(a1 + 2++*(void *)(result + 32) = CFAbsoluteTimeGetCurrent();
      uint64_t v16 = sub_1002F8DDC();
      sub_1002AC7B8(v16, "GyroCalibrationLastUnpluggedCalibration", (const void *)(a1 + 232));
LABEL_26:
      sub_100518598(*(void **)(a1 + 112), (uint64_t)@"RegularCal.Start", 1LL);
      if (*(_BYTE *)(a1 + 300))
      {
        int v17 = operator new(0x20uLL);
        sub_10058B3D0(v17);
        sub_100B70D14((uint64_t *)(a1 + 304), (uint64_t)v17);
      }

      else
      {
        int v27 = 2;
        (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v27,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
        *(_DWORD *)(a1 + 272) = 2;
      }

      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.CoreMotion.gyrocal.start", 0LL, 0LL, 0);
      return v6 == 0;
    }

    sub_1012603AC();
LABEL_39:
    __break(1u);
  }

  return v6 == 0;
}

void sub_100B6F2C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

io_object_t *sub_100B6F324(uint64_t a1)
{
  unint64_t v2 = (io_object_t *)operator new(0x188uLL);
  BOOL result = sub_100B6F370(v2, *(void **)(a1 + 32));
  qword_1019A1D18 = (uint64_t)v2;
  return result;
}

void sub_100B6F35C(_Unwind_Exception *a1)
{
}

io_object_t *sub_100B6F370(io_object_t *a1, void *a2)
{
  kern_return_t v38;
  os_log_s *v39;
  const char *v40;
  char *v41;
  os_log_s *v42;
  const char *v43;
  os_log_s *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void handler[5];
  int v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  _BYTE buf[12];
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  *(void *)sub_100B6FEEC((uint64_t)a1, "CLSensorCalibrationController", a2) = off_101873950;
  BOOL v3 = operator new(8uLL);
  sub_100518538(v3, @"com.apple.CoreMotion.GyroCalibration");
  *(_OWORD *)(a1 + 38) = xmmword_10134BCE0;
  int v4 = (uint64_t *)(a1 + 38);
  *((void *)a1 + 14) = v3;
  *(_OWORD *)(a1 + 30) = xmmword_10134BCF0;
  int v5 = (uint64_t *)(a1 + 30);
  *(_OWORD *)(a1 + 34) = xmmword_10134BD00;
  int v6 = (uint64_t *)(a1 + 34);
  a1[44] = 0;
  *((_WORD *)a1 + 90) = 0;
  *((void *)a1 + 23) = 0LL;
  a1[48] = 0;
  *((void *)a1 + 25) = 0x411FA40000000000LL;
  uint64_t v7 = (uint64_t *)(a1 + 50);
  a1[42] = 0;
  *((_BYTE *)a1 + 172) = 0;
  *((_BYTE *)a1 + 208) = 0;
  a1[53] = 0;
  a1[54] = 0;
  *((_OWORD *)a1 + 14) = 0u;
  uint64_t v8 = (uint64_t *)(a1 + 56);
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + ++*(void *)(result + 16) = 0u;
  *(void *)((char *)a1 + 269) = 0LL;
  uint64_t v9 = sub_1004F97F4();
  float v10 = 0.0;
  if ((v9 & 0x20000) == 0) {
    float v10 = 5.0;
  }
  *((float *)a1 + 74) = v10;
  __int16 v11 = sub_1004F97F4();
  *((_BYTE *)a1 + 300) = (v11 & 0x8000) == 0LL;
  *((void *)a1 + 38) = 0LL;
  double v12 = 120.0;
  if ((v11 & 0x8000) == 0) {
    double v12 = 480.0;
  }
  *((double *)a1 + 39) = v12;
  *((void *)a1 + ++*(void *)(result + 40) = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0,  0,  (dispatch_queue_t)[*((id *)a1 + 5) queue]);
  *((void *)a1 + 41) = 0LL;
  sub_100AD558C((uint64_t)(a1 + 84), (uint64_t)"CLSensorCalibrationController", (uint64_t)a1, *((double *)a1 + 39) + 60.0);
  *((void *)a1 + ++*(void *)(result + 48) = 0LL;
  [*((id *)a1 + 5) assertInside];
  uint64_t v13 = (dispatch_source_s *)*((void *)a1 + 40);
  dispatch_time_t v14 = dispatch_time(0LL, 10000000000LL);
  dispatch_source_set_timer(v13, v14, 0x2540BE400uLL, 0LL);
  uint64_t v15 = (dispatch_source_s *)*((void *)a1 + 40);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100B6FF88;
  handler[3] = &unk_10181D3D0;
  handler[4] = a1;
  dispatch_source_set_event_handler(v15, handler);
  uint64_t v16 = sub_1006E27E8();
  sub_100413284(v16, &v62);
  sub_1002A82BC(v62, "GyroCalibrationStaticWait", a1 + 30);
  uint64_t v61 = (uint64_t *)(a1 + 32);
  sub_1002A82BC(v62, "GyroCalibrationMinimumInterval", a1 + 32);
  sub_1002A82BC(v62, "GyroCalibrationDoubleCalInterval", a1 + 34);
  int v17 = (uint64_t *)(a1 + 36);
  sub_1002A82BC(v62, "GyroCalibrationOutOfBoxTimeout", a1 + 36);
  sub_1002A82BC(v62, "GyroCalibrationMinBatteryLevel", a1 + 38);
  float v18 = (uint64_t *)(a1 + 40);
  sub_1002A82BC(v62, "GyroCalibrationRetryCalInterval", a1 + 40);
  uint64_t v19 = sub_1002F8DDC();
  if ((sub_1002A82BC(v19, "GyroCalibrationLastCalibration", a1 + 56) & 1) == 0)
  {
    uint64_t *v8 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v20 = sub_1002F8DDC();
    sub_1002AC7B8(v20, "GyroCalibrationLastCalibration", a1 + 56);
  }

  uint64_t v21 = sub_1002F8DDC();
  if ((sub_1002A82BC(v21, "GyroCalibrationLastUnpluggedCalibration", a1 + 58) & 1) == 0)
  {
    *((void *)a1 + 29) = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v22 = sub_1002F8DDC();
    sub_1002AC7B8(v22, "GyroCalibrationLastUnpluggedCalibration", a1 + 58);
  }

  sub_1002A82BC(v62, "LongestDurationWithoutCal", a1 + 50);
  *(void *)__int128 buf = *((void *)a1 + 28);
  uint64_t v65 = 5;
  (*(void (**)(io_object_t *, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v65,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  double v23 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = *v5;
    uint64_t v25 = *v61;
    uint64_t v26 = *v6;
    uint64_t v27 = *v17;
    uint64_t v28 = *v4;
    uint64_t v29 = *v18;
    uint64_t v30 = *v8;
    uint64_t v31 = *v7;
    *(_DWORD *)__int128 buf = 134350848;
    *(void *)&uint8_t buf[4] = v24;
    double v82 = 2050;
    double v83 = v25;
    __int16 v84 = 2050;
    __int16 v85 = v26;
    int v86 = 2050;
    __int16 v87 = v27;
    uint64_t v88 = 2050;
    __int16 v89 = v28;
    uint64_t v90 = 2050;
    __int16 v91 = v29;
    uint64_t v92 = 2050;
    __int16 v93 = v30;
    uint64_t v94 = 2050;
    __int16 v95 = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "fStaticWait,%{public}f,fMinimumInterval,%{public}f,fDoubleCalInterval,%{public}f,fOutOfBoxTimeout,%{public}f,fMinB atteryLevel,%{public}f,fRetryCalInterval,%{public}f,fLastCalibration,%{public}g,fLongestDurationWithoutCal,%{public}.0f",  buf,  0x52u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    uint64_t v49 = *v5;
    uint64_t v50 = *v61;
    __int128 v51 = *v6;
    uint64_t v52 = *v17;
    uint64_t v53 = *v4;
    BOOL v54 = *v18;
    __int16 v55 = *v8;
    BOOL v56 = *v7;
    uint64_t v65 = 134350848;
    double v66 = v49;
    BOOL v67 = 2050;
    __int16 v68 = v50;
    BOOL v69 = 2050;
    __int16 v70 = v51;
    int v71 = 2050;
    double v72 = v52;
    uint64_t v73 = 2050;
    uint64_t v74 = v53;
    uint64_t v75 = 2050;
    uint64_t v76 = v54;
    uint64_t v77 = 2050;
    uint64_t v78 = v55;
    double v79 = 2050;
    __int16 v80 = v56;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  0LL,  "fStaticWait,%{public}f,fMinimumInterval,%{public}f,fDoubleCalInterval,%{public}f,fOutOfBoxTimeout,%{public}f,fMinB atteryLevel,%{public}f,fRetryCalInterval,%{public}f,fLastCalibration,%{public}g,fLongestDurationWithoutCal,%{public}.0f",  &v65,  82);
    int v58 = (char *)v57;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSensorCalibrationController::CLSensorCalibrationController(id<CLIntersiloUniverse>)",  "%s\n",  v57);
    if (v58 != buf) {
      free(v58);
    }
  }

  sub_1003CC884((uint64_t)sub_100B701DC, (uint64_t)a1, *((void **)a1 + 4), buf);
  uint64_t v32 = *(void *)buf;
  *(void *)__int128 buf = 0LL;
  uint64_t v33 = *((void *)a1 + 33);
  *((void *)a1 + 33) = v32;
  if (v33)
  {
    (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
    uint64_t v34 = *(void *)buf;
    *(void *)__int128 buf = 0LL;
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
    }
  }

  [*(id *)(*((void *)a1 + 33) + 16) register:*(void *)(*((void *)a1 + 33) + 8) forNotification:10 registrationInfo:0];
  [*(id *)(*((void *)a1 + 33) + 16) register:*(void *)(*((void *)a1 + 33) + 8) forNotification:13 registrationInfo:0];
  [*(id *)(*((void *)a1 + 33) + 16) register:*(void *)(*((void *)a1 + 33) + 8) forNotification:7 registrationInfo:0];
  if (sub_1004FC5C4())
  {
    uint64_t v35 = IONotificationPortCreate(kIOMainPortDefault);
    *((void *)a1 + 23) = v35;
    IONotificationPortSetDispatchQueue(v35, (dispatch_queue_t)[*((id *)a1 + 5) queue]);
    double v36 = IOServiceMatching("AppleC26Charger");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v36);
    if (MatchingService)
    {
      unsigned int v38 = IOServiceAddInterestNotification( *((IONotificationPortRef *)a1 + 23),  MatchingService,  "IOGeneralInterest",  (IOServiceInterestCallback)sub_100B703F8,  a1,  a1 + 48);
      if (v38)
      {
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        int v39 = (os_log_s *)qword_101934578;
        if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)__int128 buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v38;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_FAULT,  "Failed to register for cloaking. Error %{public}d",  buf,  8u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934570 != -1) {
            dispatch_once(&qword_101934570, &stru_101873AF8);
          }
          uint64_t v65 = 67240192;
          LODWORD(v66) = v38;
          LODWORD(v60) = 8;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  17LL,  "Failed to register for cloaking. Error %{public}d",  &v65,  v60);
          double v41 = (char *)v40;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLSensorCalibrationController::CLSensorCalibrationController(id<CLIntersiloUniverse>)",  "%s\n",  v40);
LABEL_54:
          if (v41 != buf) {
            free(v41);
          }
        }
      }

      else
      {
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        uint64_t v44 = (os_log_s *)qword_101934578;
        if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Registered for cloaking notification",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934570 != -1) {
            dispatch_once(&qword_101934570, &stru_101873AF8);
          }
          LOWORD(v65) = 0;
          LODWORD(v60) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  0LL,  "Registered for cloaking notification",  &v65,  v60);
          double v41 = (char *)v59;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSensorCalibrationController::CLSensorCalibrationController(id<CLIntersiloUniverse>)",  "%s\n",  v59);
          goto LABEL_54;
        }
      }
    }

    else
    {
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      __int128 v42 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_FAULT,  "Failed to find the AppleC26Charger service",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        LOWORD(v65) = 0;
        LODWORD(v60) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  17LL,  "Failed to find the AppleC26Charger service",  &v65,  v60);
        double v41 = (char *)v43;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLSensorCalibrationController::CLSensorCalibrationController(id<CLIntersiloUniverse>)",  "%s\n",  v43);
        goto LABEL_54;
      }
    }
  }

  __int16 v45 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      uint64_t v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }

  return a1;
}

void sub_100B6FE04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, id **a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v10 = v8[48];
  _BYTE v8[48] = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  sub_100AD5650(a5);
  sub_100B70D14(v8 + 38, 0LL);
  uint64_t v11 = v8[33];
  v8[33] = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = v8[30];
  v8[30] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  sub_100473528(a6, 0LL);
  sub_100B70724((uint64_t)v8);
  _Unwind_Resume(a1);
}

uint64_t sub_100B6FEEC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101873B48;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + ++*(void *)(result + 32) = a3;
  *(void *)(a1 + ++*(void *)(result + 40) = [a3 silo];
  *(void *)(a1 + ++*(void *)(result + 48) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 64) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 56) = a1 + 64;
  *(void *)(a1 + ++*(void *)(result + 88) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100B6FF6C(_Unwind_Exception *exception_object)
{
}

void sub_100B6FF88(uint64_t a1)
{
}

void sub_100B6FF90(uint64_t a1)
{
  double v2 = sub_101171D38();
  double v3 = *(double *)(a1 + 288);
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  double v4 = v2 - v3;
  int v5 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
  {
    int v6 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)__int128 buf = 67240448;
    int v16 = v6;
    __int16 v17 = 2050;
    double v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "state,%{public}d,elapsed,%{public}f", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    int v9 = *(_DWORD *)(a1 + 272);
    v12[0] = 67240448;
    v12[1] = v9;
    __int16 v13 = 2050;
    double v14 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "state,%{public}d,elapsed,%{public}f",  v12,  18);
    uint64_t v11 = (uint8_t *)v10;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::onTimer()", "%s\n", v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  uint64_t v7 = *(void *)(a1 + 304);
  if (v7)
  {
    float v8 = ceil(v4 * 8.0 / *(double *)(a1 + 312)) * 0.800000012 * 0.125;
    sub_10058B4CC(v7, v8);
  }

  if (v4 >= *(double *)(a1 + 312))
  {
    sub_100B7248C(a1, 1);
    sub_100B70D40(a1);
  }

void sub_100B701DC(uint64_t a1, int *a2, __int128 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101873AD8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLSensorCalibrationController::onStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101873AD8);
    }
    float v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v14 = 2082;
      *(void *)&v14[2] = "";
      *(_WORD *)&v14[10] = 2082;
      *(void *)&v14[12] = "activity";
      *(_WORD *)&v14[20] = 2050;
      *(void *)&v14[22] = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLSensorCalibrationController::onStatusNotification, event:%{public, location:escap e_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  int v9 = *a2;
  __int128 v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  uint64_t v10 = *(void **)(a4 + 40);
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)double v14 = 3221225472LL;
  *(void *)&_WORD v14[8] = sub_100B731F0;
  *(void *)&uint8_t v14[16] = &unk_101833598;
  *(void *)&v14[24] = a4;
  int v17 = v9;
  [v10 async:buf];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B703D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B703F8(uint64_t a1, io_registry_entry_t entry, int a3)
{
  if (a3 == -469794816)
  {
    double v4 = (id)IORegistryEntryCreateCFProperty(entry, @"Cloaked", kCFAllocatorDefault, 0);
    if (v4)
    {
      unsigned int v5 = [v4 BOOLValue];
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      int v6 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 67240192;
        unsigned int v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Charger cloaking status %{public}d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        v12[0] = 67240192;
        v12[1] = v5;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "Charger cloaking status %{public}d",  v12,  8);
        int v9 = (uint8_t *)v8;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLSensorCalibrationController::onCloakingStatusChangedBounce(void *, io_service_t, uint32_t, void *)",  "%s\n",  v8);
        if (v9 != buf) {
          free(v9);
        }
      }

      sub_100B72C18(a1, v5);
    }

    else
    {
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      uint64_t v7 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to get cloaking status", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        LOWORD(v12[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  17LL,  "Failed to get cloaking status",  v12,  2);
        uint64_t v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLSensorCalibrationController::onCloakingStatusChangedBounce(void *, io_service_t, uint32_t, void *)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }
    }
  }

uint64_t sub_100B70724(uint64_t a1)
{
  *(void *)a1 = off_101873B48;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100B70798(uint64_t a1)
{
  *(void *)a1 = off_101873950;
  if (sub_1004FC5C4())
  {
    io_object_t v2 = *(_DWORD *)(a1 + 192);
    if (v2)
    {
      IOObjectRelease(v2);
      *(_DWORD *)(a1 + 192) = 0;
    }

    IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 184));
  }

  sub_100B7086C(a1, 4);
  dispatch_resume(*(dispatch_object_t *)(a1 + 320));
  dispatch_release(*(dispatch_object_t *)(a1 + 320));
  uint64_t v3 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100AD5650(a1 + 336);
  sub_100B70D14((uint64_t *)(a1 + 304), 0LL);
  uint64_t v4 = *(void *)(a1 + 264);
  *(void *)(a1 + 2++*(void *)(result + 64) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 240);
  *(void *)(a1 + 2++*(void *)(result + 40) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  sub_100473528((id **)(a1 + 112), 0LL);
  return sub_100B70724(a1);
}

void sub_100B7086C(uint64_t a1, int a2)
{
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  uint64_t v4 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v5 = (const char *)qword_101873A20[a2];
    }
    else {
      uint64_t v5 = "";
    }
    *(_DWORD *)__int128 buf = 67240450;
    int v19 = a2;
    __int16 v20 = 2082;
    uint64_t v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLSensorCalibrationController aborted,reason,%{public}d,%{public}s",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    if (a2) {
      uint64_t v11 = (const char *)qword_101873A20[a2];
    }
    else {
      uint64_t v11 = "";
    }
    v15[0] = 67240450;
    v15[1] = a2;
    __int16 v16 = 2082;
    int v17 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  0LL,  "CLSensorCalibrationController aborted,reason,%{public}d,%{public}s",  v15,  18);
    __int16 v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorCalibrationController::abort(CLSensorCalibrationController_Type::AbortReason)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  if (a2 != 1 || !*(_BYTE *)(a1 + 276))
  {
    uint64_t v9 = *(void *)(a1 + 240);
    *(void *)(a1 + 2++*(void *)(result + 40) = 0LL;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    *(_BYTE *)(a1 + 171) = 0;
    uint64_t v10 = *(dispatch_source_s **)(a1 + 256);
    if (v10)
    {
      dispatch_source_cancel(v10);
      dispatch_release(*(dispatch_object_t *)(a1 + 256));
      *(void *)(a1 + 2++*(void *)(result + 56) = 0LL;
    }

    if (*(_DWORD *)(a1 + 272))
    {
      sub_100B7248C(a1, 0);
LABEL_29:
      sub_100518598(*(void **)(a1 + 112), (uint64_t)@"RegularCal.Abort", 1LL);
      sub_100B70D40(a1);
      return;
    }

    if (*(void *)(a1 + 328))
    {
      uint64_t v10 = (dispatch_source_s *)sub_101260C04();
    }

    else if (!*(void *)(a1 + 304))
    {
      if (!*(void *)(a1 + 384)) {
        goto LABEL_29;
      }
LABEL_40:
      sub_101260944(v10);
    }

    uint64_t v10 = (dispatch_source_s *)sub_101260AA4(v10);
    goto LABEL_40;
  }

  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  int v6 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Ignoring abort for user initiated calibration",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    LOWORD(v15[0]) = 0;
    LODWORD(v14) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  0LL,  "Ignoring abort for user initiated calibration",  v15,  v14);
    float v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorCalibrationController::abort(CLSensorCalibrationController_Type::AbortReason)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

void sub_100B70C38(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B70798(a1);
  operator delete(v1);
}

id sub_100B70C4C(__int128 *a1, uint64_t a2)
{
  __int128 v5 = *a1;
  io_object_t v2 = *(void **)(a2 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_100B72E40;
  v4[3] = &unk_101830558;
  v4[4] = a2;
  return [v2 async:v4];
}

uint64_t sub_100B70CA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1006FE6A0();
  return sub_1006DCB40(v2, 1, *(void *)(v1 + 328), 1.0);
}

void sub_100B70CD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 384);
  *(void *)(v1 + 384) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(_BYTE *)(v1 + 171) = 0;
  sub_100B7086C(v1, 2);
}

void sub_100B70D14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_10058B4A4(v3);
    operator delete(v4);
  }

void sub_100B70D40(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 272))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    uint64_t v2 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Calibration is already running", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    *(_WORD *)uint64_t v108 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Calibration is already running",  v108,  2);
    uint64_t v28 = (char *)v55;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v55);
LABEL_123:
    if (v28 != buf) {
      free(v28);
    }
    return;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 232);
  double v6 = Current - *(double *)(a1 + 224);
  double v7 = *(double *)(a1 + 128) - v6;
  *(_BYTE *)(a1 + 172) = v7 <= 0.0;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101873B18);
  }
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG) || sub_1002921D0(115, 2))
  {
    sub_10000CE18((uint64_t)v108);
    if (*(double *)(a1 + 224) == -1.79769313e308)
    {
      sub_10000CF44(&v110[2], (uint64_t)"never", 5LL);
    }

    else
    {
      *(_DWORD *)&v110[*(void *)(*(void *)&v110[2] - 24LL) + 10] = *(_DWORD *)&v110[*(void *)(*(void *)&v110[2]
                                                                                                  - 24LL)
                                                                                      + 10] & 0xFFFFFEFB | 4;
      std::ostream::operator<<(v6);
    }

    sub_10000CE18((uint64_t)v91);
    if (*(double *)(a1 + 232) == -1.79769313e308)
    {
      sub_10000CF44(&v92, (uint64_t)"never", 5LL);
    }

    else
    {
      *(_DWORD *)((char *)&v92 + *(void *)(v92 - 24) + 8) = *(_DWORD *)((_BYTE *)&v92 + *(void *)(v92 - 24) + 8) & 0xFFFFFEFB | 4;
      std::ostream::operator<<(Current - v5);
    }

    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    float v8 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 168);
      int v10 = *(unsigned __int8 *)(a1 + 169);
      int v11 = *(unsigned __int8 *)(a1 + 170);
      int v12 = *(unsigned __int8 *)(a1 + 171);
      int v85 = *(unsigned __int8 *)(a1 + 172);
      double v13 = fmax(v7, 0.0);
      uint64_t v14 = *(void *)&v7;
      if (v7 <= 0.0) {
        uint64_t v14 = 0LL;
      }
      if (v13 <= 604800.0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0x4122750000000000LL;
      }
      std::stringbuf::str((std::stringbuf::string_type *)v95, &v111);
      int v16 = v95[23];
      int v17 = *(_BYTE **)v95;
      std::stringbuf::str(&v90, &v93);
      double v18 = v95;
      if (v16 < 0) {
        double v18 = v17;
      }
      if ((v90.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v19 = &v90;
      }
      else {
        int v19 = (std::stringbuf::string_type *)v90.__r_.__value_.__r.__words[0];
      }
      int v20 = *(_DWORD *)(a1 + 212);
      int v21 = *(unsigned __int8 *)(a1 + 208);
      *(_DWORD *)__int128 buf = 67242498;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v10;
      LOWORD(v114) = 1026;
      *(_DWORD *)((char *)&v114 + 2) = v11;
      HIWORD(v114) = 1026;
      int v115 = v12;
      __int16 v116 = 1026;
      int v117 = v85;
      __int16 v118 = 2050;
      uint64_t v119 = v15;
      __int16 v120 = 2082;
      uint64_t v121 = v18;
      __int16 v122 = 2082;
      uint64_t v123 = v19;
      __int16 v124 = 1026;
      int v125 = v20;
      __int16 v126 = 1026;
      int v127 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "BatteryReady,%{public}d,ThermalReady,%{public}d,DisplayReady,%{public}d,StaticReady,%{public}d,MinimumIntervalRe ady,%{public}d,timeToIntervalReady,%{public}.0f,sinceLastCal,%{public}s,sinceLastUnpluggedCalAttempt,%{public}s, ChargerFamily,%{public}x,ChargerCloaked,%{public}u",  buf,  0x4Au);
      if ((v95[23] & 0x80000000) != 0) {
        operator delete(*(void **)v95);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      uint64_t v86 = qword_101934578;
      int v56 = *(unsigned __int8 *)(a1 + 168);
      int v57 = *(unsigned __int8 *)(a1 + 169);
      int v58 = *(unsigned __int8 *)(a1 + 170);
      int v59 = *(unsigned __int8 *)(a1 + 171);
      int v60 = *(unsigned __int8 *)(a1 + 172);
      double v61 = fmax(v7, 0.0);
      uint64_t v62 = *(void *)&v7;
      if (v7 <= 0.0) {
        uint64_t v62 = 0LL;
      }
      if (v61 <= 604800.0) {
        uint64_t v63 = v62;
      }
      else {
        uint64_t v63 = 0x4122750000000000LL;
      }
      std::stringbuf::str(&v90, &v111);
      int size = (char)v90.__r_.__value_.__s.__size_;
      std::string::size_type v65 = v90.__r_.__value_.__r.__words[0];
      std::stringbuf::str(&v89, &v93);
      double v66 = &v90;
      if (size < 0) {
        double v66 = (std::stringbuf::string_type *)v65;
      }
      if ((v89.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v67 = &v89;
      }
      else {
        BOOL v67 = (std::stringbuf::string_type *)v89.__r_.__value_.__r.__words[0];
      }
      int v68 = *(_DWORD *)(a1 + 212);
      int v69 = *(unsigned __int8 *)(a1 + 208);
      *(_DWORD *)__int16 v95 = 67242498;
      *(_DWORD *)&v95[4] = v56;
      *(_WORD *)&v95[8] = 1026;
      *(_DWORD *)&v95[10] = v57;
      *(_WORD *)&v95[14] = 1026;
      *(_DWORD *)&v95[16] = v58;
      *(_WORD *)&v95[20] = 1026;
      *(_DWORD *)&v95[22] = v59;
      __int16 v96 = 1026;
      int v97 = v60;
      __int16 v98 = 2050;
      uint64_t v99 = v63;
      __int16 v100 = 2082;
      __int16 v101 = v66;
      __int16 v102 = 2082;
      __int16 v103 = v67;
      __int16 v104 = 1026;
      int v105 = v68;
      __int16 v106 = 1026;
      int v107 = v69;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v86,  0LL,  "BatteryReady,%{public}d,ThermalReady,%{public}d,DisplayReady,%{public}d,StaticReady,%{public}d,MinimumIntervalRe ady,%{public}d,timeToIntervalReady,%{public}.0f,sinceLastCal,%{public}s,sinceLastUnpluggedCalAttempt,%{public}s, ChargerFamily,%{public}x,ChargerCloaked,%{public}u",  v95,  74);
      int v71 = v70;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v71);
      if (v71 != buf) {
        free(v71);
      }
    }

    *(void *)((char *)v91
    uint64_t v92 = v23;
    std::streambuf::~streambuf(&v93);
    std::ios::~ios(&v94);
    *(void *)uint64_t v108 = v22;
    *(void *)&v108[*(void *)(v22 - 24)] = v24;
    p_vtable = &v111;
    *(void *)&v110[2] = v23;
    std::streambuf::~streambuf(&v111);
    std::ios::~ios(&v112);
  }

  if (!*(_BYTE *)(a1 + 168) || !*(_BYTE *)(a1 + 169) || !*(_BYTE *)(a1 + 170)) {
    return;
  }
  if (!*(_BYTE *)(a1 + 172))
  {
    if (*(void *)(a1 + 256))
    {
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      uint64_t v26 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Still waiting for long wait timer", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        *(_WORD *)uint64_t v108 = 0;
        LODWORD(v84) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "Still waiting for long wait timer",  v108,  v84);
        uint64_t v28 = (char *)v27;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v27);
        goto LABEL_123;
      }

      return;
    }

    p_vtable = (std::stringbuf *)&OBJC_METACLASS___CLPrivacyManager.vtable;
    if (v7 > 0.0)
    {
      if (qword_101934570 == -1)
      {
LABEL_93:
        int v43 = (os_log_s *)qword_101934578;
        if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 134349056;
          *(void *)&uint8_t buf[4] = (unint64_t)(v7 + 1.0);
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "Starting long wait timer for %{public}llu seconds",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          unint64_t v44 = (unint64_t)(v7 + 1.0);
          *(_DWORD *)uint64_t v108 = 134349056;
          *(void *)&v108[4] = v44;
          LODWORD(v84) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Starting long wait timer for %{public}llu seconds",  v108,  v84);
          double v79 = (char *)v78;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorCalibrationController::tryStartCalibration()",  "%s\n",  v78);
          if (v79 != buf) {
            free(v79);
          }
        }

        else
        {
          unint64_t v44 = (unint64_t)(v7 + 1.0);
        }

        __int16 v45 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0,  0,  (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
        *(void *)(a1 + 2++*(void *)(result + 56) = v45;
        dispatch_time_t v46 = dispatch_walltime(0LL, 1000000000 * v44);
        dispatch_source_set_timer(v45, v46, 0x2540BE400uLL, 0x2540BE400uLL);
        uint64_t v47 = *(dispatch_source_s **)(a1 + 256);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472LL;
        handler[2] = sub_100B72128;
        handler[3] = &unk_10181D3D0;
        handler[4] = a1;
        dispatch_source_set_event_handler(v47, handler);
        dispatch_resume(*(dispatch_object_t *)(a1 + 256));
        return;
      }

void sub_100B720C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, uint64_t a27, char a28)
{
}

uint64_t sub_100B72128(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  uint64_t v2 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Long wait timer trigger.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Long wait timer trigger.",  v6,  2);
    double v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorCalibrationController::tryStartCalibration()_block_invoke",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 256));
  dispatch_release(*(dispatch_object_t *)(v1 + 256));
  *(void *)(v1 + 2++*(void *)(result + 56) = 0LL;
  return sub_100B70D40(v1);
}

uint64_t sub_100B722D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_BYTE *)(v1 + 171) = 1;
  uint64_t v2 = *(void *)(v1 + 240);
  *(void *)(v1 + 2++*(void *)(result + 40) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  uint64_t v3 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Static timer fired", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Static timer fired",  v7,  2);
    double v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorCalibrationController::tryStartCalibration()_block_invoke",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  return sub_100B70D40(v1);
}

uint64_t sub_100B7248C(uint64_t a1, int a2)
{
  HIBYTE(v33) = a2;
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  uint64_t v4 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)__int128 buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Stopped sensor calibration, fState, %{public}d, successful, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    int v22 = *(_DWORD *)(a1 + 272);
    int v34 = 67240448;
    *(_DWORD *)uint64_t v35 = v22;
    *(_WORD *)&v35[4] = 1026;
    *(_DWORD *)&v35[6] = HIBYTE(v33);
    LODWORD(v33) = 14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  0LL,  "Stopped sensor calibration, fState, %{public}d, successful, %{public}d",  &v34,  v33);
    uint64_t v24 = (char *)v23;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::teardown(BOOL)", "%s\n", v23);
    if (v24 != buf) {
      free(v24);
    }
  }

  if (sub_100E575B0())
  {
    sub_1002A5370(buf);
    sub_1002ACA84((uint64_t)buf, "Status", "stop");
    sub_1002AB3FC((uint64_t)buf, "FinishFlag", (_BYTE *)&v33 + 7);
    sub_100E57614((uint64_t)buf, (uint64_t)"MotionSensorCalibration");
    sub_1002A5590(buf);
  }

  if (!*(_DWORD *)(a1 + 272)) {
    goto LABEL_33;
  }
  dispatch_suspend(*(dispatch_object_t *)(a1 + 320));
  int v6 = *(_DWORD *)(a1 + 272);
  if (v6 == 2)
  {
    buf[0] = *(_BYTE *)(a1 + 276);
    if (HIBYTE(v33)) {
      int v34 = 4;
    }
    else {
      int v34 = 3;
    }
    (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v34,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
    double v7 = *(void **)(a1 + 112);
    if (*(_BYTE *)(a1 + 180)) {
      float v8 = @"VirusRunTime.PluggedIn";
    }
    else {
      float v8 = @"VirusRunTime.OnBattery";
    }
    double v9 = sub_101171D38();
    sub_100518598(v7, (uint64_t)v8, (uint64_t)(v9 - *(double *)(a1 + 288)));
    int v6 = *(_DWORD *)(a1 + 272);
  }

  double Current = CFAbsoluteTimeGetCurrent();
  if (!HIBYTE(v33))
  {
    *(double *)(a1 + 2++*(void *)(result + 24) = Current - *(double *)(a1 + 128) + *(double *)(a1 + 160);
    if (qword_101934570 == -1) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

  if (Current - *(double *)(a1 + 224) >= *(double *)(a1 + 144))
  {
    *(double *)(a1 + 2++*(void *)(result + 24) = Current - *(double *)(a1 + 128) + *(double *)(a1 + 136);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    uint64_t v15 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEFAULT))
    {
      double v16 = *(double *)(a1 + 224);
      double v17 = v16 + *(double *)(a1 + 128);
      *(_DWORD *)__int128 buf = 134349312;
      *(double *)&uint8_t buf[4] = v16;
      *(_WORD *)&_BYTE buf[12] = 2050;
      double v38 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Scheduling double calibration,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      double v29 = *(double *)(a1 + 224);
      double v30 = v29 + *(double *)(a1 + 128);
      int v34 = 134349312;
      *(double *)uint64_t v35 = v29;
      *(_WORD *)&v35[8] = 2050;
      double v36 = v30;
      LODWORD(v33) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  0LL,  "Scheduling double calibration,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f",  &v34,  v33);
      uint64_t v32 = (char *)v31;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::teardown(BOOL)", "%s\n", v31);
      if (v32 != buf) {
        free(v32);
      }
    }
  }

  else
  {
    *(double *)(a1 + 2++*(void *)(result + 24) = Current;
  }

  sub_100518598(*(void **)(a1 + 112), (uint64_t)@"RegularCal.Finish", 1LL);
  while (1)
  {
    *(void *)__int128 buf = *(void *)(a1 + 224);
    int v34 = 5;
    (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v34,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
    uint64_t v18 = sub_1002F8DDC();
    sub_1002AC7B8(v18, "GyroCalibrationLastCalibration", (const void *)(a1 + 224));
LABEL_33:
    sub_100B70D14((uint64_t *)(a1 + 304), 0LL);
    if (*(void *)(a1 + 328))
    {
      uint64_t v19 = sub_1006FE6A0();
      sub_1006DD2A0(v19, 1, *(void *)(a1 + 328));
      uint64_t v20 = *(void *)(a1 + 328);
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
      }
      *(void *)(a1 + 328) = 0LL;
    }

    buf[0] = *(_BYTE *)(a1 + 276);
    int v34 = 1;
    (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v34,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
    uint64_t result = *(void *)(a1 + 384);
    *(void *)(a1 + 384) = 0LL;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
    *(_BYTE *)(a1 + 171) = 0;
    if (!*(void *)(a1 + 240)) {
      break;
    }
    sub_1012611A8(result);
    __break(1u);
LABEL_48:
    dispatch_once(&qword_101934570, &stru_101873AF8);
LABEL_22:
    int v11 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEFAULT))
    {
      double v12 = *(double *)(a1 + 224);
      double v13 = v12 + *(double *)(a1 + 128);
      *(_DWORD *)__int128 buf = 134349312;
      *(double *)&uint8_t buf[4] = v12;
      *(_WORD *)&_BYTE buf[12] = 2050;
      double v38 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Scheduling retry calibration after previous aborted run,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      double v25 = *(double *)(a1 + 224);
      double v26 = v25 + *(double *)(a1 + 128);
      int v34 = 134349312;
      *(double *)uint64_t v35 = v25;
      *(_WORD *)&v35[8] = 2050;
      double v36 = v26;
      LODWORD(v33) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  0LL,  "Scheduling retry calibration after previous aborted run,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f",  &v34,  v33);
      uint64_t v28 = (char *)v27;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::teardown(BOOL)", "%s\n", v27);
      if (v28 != buf) {
        free(v28);
      }
    }

    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.CoreMotion.gyrocal.abort", 0LL, 0LL, 0);
  }

  *(_BYTE *)(a1 + 276) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  return result;
}

void sub_100B72BFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100B72C18(uint64_t a1, char a2)
{
  if (sub_1004FC5C4())
  {
    uint64_t v4 = *(void **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_100B72DF0;
    void v9[3] = &unk_101833458;
    v9[4] = a1;
    char v10 = a2;
    [v4 async:v9];
  }

  else
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    int v5 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Getting cloaking event for unexpected HW",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  17LL,  "Getting cloaking event for unexpected HW",  v8,  2);
      double v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLSensorCalibrationController::onCloakingStatusChanged(BOOL)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

void sub_100B72DF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 216) == 3)
  {
    *(_BYTE *)(v2 + 208) = *(_BYTE *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40))
    {
      double v3 = 480.0;
      if (!*(_BYTE *)(v2 + 300)) {
        double v3 = 120.0;
      }
      *(double *)(v2 + 312) = v3;
      sub_100B7086C(v2, 5);
    }
  }

void sub_100B72E40(uint64_t a1)
{
}

void sub_100B72E50(uint64_t a1, uint64_t a2)
{
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  uint64_t v4 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 272);
    double v6 = *(float *)(a2 + 8);
    *(_DWORD *)__int128 buf = 67240448;
    int v24 = v5;
    __int16 v25 = 2050;
    double v26 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "state,%{public}d,temperature,%{public}f",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    int v14 = *(_DWORD *)(a1 + 272);
    double v15 = *(float *)(a2 + 8);
    int v19 = 67240448;
    int v20 = v14;
    __int16 v21 = 2050;
    double v22 = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "state,%{public}d,temperature,%{public}f",  &v19,  18);
    double v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorCalibrationController::onGyroTemperature(const CLGyro::Temperature *)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  float v7 = *(float *)(a1 + 280);
  if (v7 == 3.4028e38)
  {
    float v7 = *(float *)(a2 + 8);
    *(float *)(a1 + 280) = v7;
  }

  int v8 = *(_DWORD *)(a1 + 272);
  if (v8 == 1)
  {
    if (*(float *)(a2 + 8) >= (float)(v7 + *(float *)(a1 + 296)))
    {
      int v19 = 2;
      (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v19,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
      *(_DWORD *)(a1 + 272) = 2;
    }
  }

  else if (v8 != 2)
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    double v9 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
    {
      int v10 = *(_DWORD *)(a1 + 272);
      *(_DWORD *)__int128 buf = 67240192;
      int v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Warning: Bad state,%{public}d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      int v11 = *(_DWORD *)(a1 + 272);
      int v19 = 67240192;
      int v20 = v11;
      LODWORD(v18) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Warning: Bad state,%{public}d",  &v19,  v18);
      double v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorCalibrationController::onGyroTemperature(const CLGyro::Temperature *)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

void sub_100B731F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 64);
  switch(v3)
  {
    case 13:
      *(_BYTE *)(v2 + 169) = *(_DWORD *)(a1 + 40) < 6;
      break;
    case 10:
      *(_BYTE *)(v2 + 170) = *(_BYTE *)(a1 + 40) ^ 1;
      break;
    case 7:
      *(_DWORD *)(v2 + 212) = *(_DWORD *)(a1 + 60);
      int v4 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)(v2 + 2++*(void *)(result + 16) = v4;
      *(_BYTE *)(v2 + 181) = *(_BYTE *)(a1 + 48);
      BOOL v5 = *(double *)(a1 + 40) > *(double *)(v2 + 152) && *(_BYTE *)(a1 + 49) != 0;
      *(_BYTE *)(v2 + ++*(void *)(result + 168) = v5;
      if (!*(_BYTE *)(a1 + 49))
      {
        sub_100B7086C(v2, 1);
        int v4 = *(_DWORD *)(v2 + 216);
      }

      float v11 = *(double *)(a1 + 40);
      *(float *)(v2 + ++*(void *)(result + 176) = v11;
      *(_BYTE *)(v2 + 180) = *(_BYTE *)(a1 + 49);
      break;
    default:
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      double v6 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_ERROR))
      {
        int v7 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)__int128 buf = 67240192;
        int v14 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Warning: Unexpected notification %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        int v8 = *(_DWORD *)(a1 + 64);
        v12[0] = 67240192;
        v12[1] = v8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  16LL,  "Warning: Unexpected notification %{public}d",  v12,  8);
        int v10 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLSensorCalibrationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)_block_invoke",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }

      break;
  }

  sub_100B70D40(v2);
}

uint64_t sub_100B73494(void *a1)
{
  uint64_t v3 = a1[28];
  int v2 = 5;
  (*(void (**)(void *, int *, uint64_t *, uint64_t, uint64_t, void))(*a1 + 152LL))( a1,  &v2,  &v3,  1LL,  0xFFFFFFFFLL,  0LL);
  return 1LL;
}

uint64_t sub_100B734E0()
{
  return 1LL;
}

void *sub_100B734E8@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_100B73560(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101873D08;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + ++*(void *)(result + 24) = a5;
  *(void *)(a1 + ++*(void *)(result + 32) = a6;
  else {
    double v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + ++*(void *)(result + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100B73634(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  int v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLSensorCalibrationController");
  sub_100B73560((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  void *v8 = off_101873A60;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100B736D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_100B736FC(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        double v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)__int128 buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101873AD8);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        float v11 = (void *)(a1 + 8);
        *(_DWORD *)__int128 buf = 136446466;
        __int16 v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101873AD8);
        }
        double v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        double v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type:: NotificationData>::removeClient(int) [Notification_T = CLSensorCalibrationController_Type::Notification, Notif icationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100B73970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_10198FAD8);
}

uint64_t sub_100B73984(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)int v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          int v24 = (uint64_t *)v18;
        }
        else {
          int v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)__int128 buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + ++*(void *)(result + 32) = v35;
        *(void *)__int128 buf = 0LL;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          double v36 = sub_100B764F0(buf);
          sub_100B75638((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_10198FAD9;
        HIDWORD(v++*(void *)(result + 40) = v17;
        *(void *)__int128 buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v++*(void *)(result + 40) = *a3;
        *(void *)__int128 buf = (char *)&v40 + 4;
        uint64_t v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v++*(void *)(result + 40) = *a3;
        *(void *)__int128 buf = (char *)&v40 + 4;
        uint64_t v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)__int128 buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + ++*(void *)(result + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)__int128 buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101873AD8);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101873AD8);
    }
    uint64_t v37 = (void *)(a1 + 8);
    *(_DWORD *)int v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v++*(void *)(result + 40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    uint64_t v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::Noti ficationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::Notific ationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_100B73DE0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = (uint64_t *)v5;
    }
    else {
      double v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101873AD8);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)__int128 buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101873AD8);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      int v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::No tificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSensorCalibrationController_T ype::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100B74060(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101873AD8);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)__int128 buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                uint64_t v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101873AD8);
                }
                double v29 = a1 + 8;
                if (a1[31] < 0) {
                  double v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                uint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationControlle r_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CL SensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Typ e::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100B743E8(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  v6[2] = 0LL;
  void *v6 = off_101873C28;
  v6[1] = 0LL;
  uint64_t v7 = *a3;
  *((void *)&v14 + 1) = v6;
  void v6[3] = v7;
  *(void *)&__int128 v14 = v6 + 3;
  int v13 = *a2;
  int v15 = &v13;
  BOOL v8 = sub_10023347C((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_1012CF090, &v15);
  sub_10005F550((uint64_t)(v8 + 8), &v14);
  int v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    BOOL v10 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return 1LL;
}

void sub_100B744BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100B744D0(uint64_t a1, unsigned int *a2, void *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    BOOL v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101873AD8);
    }
    unint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v12 = (void *)(a1 + 8);
      int v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)__int128 buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      int v68 = v12;
      __int16 v69 = 2050;
      __int16 v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)int v71 = &v71[8];
      memset(&v71[8], 0, 24);
      uint64_t v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = operator new(0x20uLL);
      _OWORD v27[2] = 0LL;
      void *v27 = off_101873C28;
      v27[1] = 0LL;
      void v27[3] = *a3;
      *(void *)__int128 buf = v27 + 3;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        double v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_100B751E4(a3);
    if (a5 == -1)
    {
      sub_100B75264((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          uint64_t v37 = (uint64_t *)v33;
        }
        else {
          uint64_t v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          int v43 = (unint64_t *)v38;
        }
        else {
          int v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        uint64_t v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101873AD8);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            dispatch_time_t v46 = v71;
          }
          else {
            dispatch_time_t v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)__int128 buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = a5;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101873AD8);
          }
          __int16 v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            uint64_t v49 = __p;
          }
          else {
            uint64_t v49 = (void **)__p[0];
          }
          *(_DWORD *)int v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&_BYTE v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          __int128 v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type ::NotificationData>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, bo ol) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibra tionController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      uint64_t v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      uint64_t v52 = v40 + 3;
      uint64_t v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      int v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          int v59 = v53;
        }
        else {
          int v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          int v56 = v53;
        }
        uint64_t v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_100B75638((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_100B74B08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100B74B54(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101873AD8);
    }
    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101873AD8);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::No tificationData>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationD ata_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101873AD8);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101873AD8);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::No tificationData>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationD ata_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    BOOL v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      unint64_t v11 = (void *)(a1 + 8);
      do
      {
        BOOL v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101873AD8);
            }
            int v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              __int128 v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)__int128 buf = 136315650;
              uint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101873AD8);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_ Type::NotificationData>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notificatio n, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                BOOL v12 = v18;
              }

              while (!v19);
            }

            BOOL v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            BOOL v10 = v26;
          }

          while (!v19);
        }

        BOOL v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100B75100(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B76490(a1);
  operator delete(v1);
}

void sub_100B75114(uint64_t a1, int a2, void *a3)
{
  if (v5)
  {
    int v6 = a2;
    (*(void (**)(void, int *, uint64_t, void))(a1 + 24))(0LL, &v6, v5, *(void *)(a1 + 32));
  }

void sub_100B75160(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B7518C(id a1)
{
  qword_101934578 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_100B751B8(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

CLCppContainer *sub_100B751E4(void *a1)
{
  int v2 = operator new(8uLL);
  void *v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100B75754;
  uint64_t v7 = &unk_10181D3D0;
  BOOL v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100B75264(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          BOOL v12 = (uint64_t *)v4;
        }
        else {
          BOOL v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int128 v51 = v9;
        sub_100B75764(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        __int128 v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v50 = v19;
              sub_100B75638(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              double v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  double v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int128 v51 = v29;
              uint64_t v34 = v29[6];
              __int128 v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      __int128 v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      __int128 v14 = v43;
                      int v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      __int128 v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              uint64_t v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101873AD8);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)__int128 buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101873AD8);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type:: NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = C LSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Ty pe::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_100B75638(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32LL);
    sub_100B75764(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80LL;
    BOOL v12 = (uint64_t **)(*(void *)a3 + 40LL);
    int v15 = (int *)(*(void *)a2 + 32LL);
    uint64_t v13 = sub_1004EF3D4(v12, v15, (uint64_t)&unk_1012CF090, &v15);
    BOOL result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v14,  v10,  v11,  v13 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v14);
    }
  }

  return result;
}

void sub_100B75714(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101873C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100B75728(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101873C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100B75754(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_100B75764(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0)
  {
    sub_100B757DC(a1);
  }

  else
  {
    objc_opt_class(&OBJC_CLASS___CLCppContainer);
    if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0) {
      sub_100B75B64(a1);
    }
  }

void sub_100B757DC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_100B75F10((uint64_t)&v7 + 7, a1);
    return;
  }

  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101873C68);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010134BFC1LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101873C68);
      }
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  v7,  v8);
LABEL_21:
      int v6 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorCalibrationController_Type::Notifica tionData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101873C68);
    }
    uint64_t v5 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010134BFC1LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101873C68);
      }
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  v7,  v8);
      goto LABEL_21;
    }
  }

id sub_100B75B64(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101873C68);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010134BFC1LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101873C68);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101873C68);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010134BFC1LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101873C68);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorCalibrationController_Type::Notification Data, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_100B75F10(uint64_t a1, void *a2)
{
  if ([a2 cppObjectPtr]
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D4178))
  {
    goto LABEL_5;
  }

  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)8)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    [a2 cppObjectPtr];
    return;
  }

  uint64_t v3 = (void *)sub_101261310();
  sub_100B75F84(v3);
}

void sub_100B75F84(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void *sub_100B75FB0(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_101873C98;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_100B760E4;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_100B760F8;
  v12[3] = &unk_10182EFF0;
  _DWORD v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100B760BC(_Unwind_Exception *a1)
{
}

uint64_t sub_100B760E4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_100B760F8(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_100B76114(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B763C8(a1);
  operator delete(v1);
}

id sub_100B76128(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x10) {
    size_t v8 = 16LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101873CD8);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315906;
      unint64_t v31 = 0x800000010134C039LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v32 = 2048;
      uint64_t v33 = 16LL;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      __int16 v36 = 1024;
      int v37 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101873CD8);
      }
      int v22 = 136315906;
      unint64_t v23 = 0x800000010134C039LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v24 = 2048;
      uint64_t v25 = 16LL;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v22,  38,  v17,  LODWORD(v18[0]));
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Temperature>::dispatchData(int, const void *, size_t) [T = CLGyro::Temperature]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  __int16 v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100B76420;
  v18[3] = &unk_101861860;
  void v18[4] = v12;
  v18[5] = v11;
  __int128 v19 = __dst;
  uint64_t v20 = v10;
  return [v13 async:v18];
}

uint64_t sub_100B763C8(uint64_t a1)
{
  *(void *)a1 = off_101873C98;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_100B76420(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 64));
  }
  return result;
}

void sub_100B76464(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100B76490(uint64_t a1)
{
  *(void *)a1 = off_101873D08;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0LL;
  *(void *)(a1 + ++*(void *)(result + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_100B764F0(void *a1)
{
  id v2 = operator new(8uLL);
  void *v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100B76570;
  uint64_t v7 = &unk_10181D3D0;
  size_t v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100B76570(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

  ;
}

uint64_t sub_100B76594(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, double a5)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }

  sub_100709730(a1, (__int128 *)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_101873D30;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 72), *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v9 = *a3;
    *(void *)(a1 + ++*(void *)(result + 88) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 72) = v9;
  }

  sub_100AD558C(a1 + 96, a4, a1, a5);
  return a1;
}

void sub_100B7666C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100B766B4(uint64_t a1)
{
  *(void *)a1 = off_101873D30;
  sub_100B767C0(a1);
  sub_100AD5650(a1 + 96);
  return sub_100709838(a1);
}

void sub_100B76704(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B766B4(a1);
  operator delete(v1);
}

void sub_100B76718(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) && *(int *)(a1 + 104) <= 0)
  {
    if (*(char *)(a1 + 95) < 0)
    {
      sub_1010DD48C(__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 72);
      uint64_t v3 = *(void *)(a1 + 88);
    }

    sub_100AD5668(a1 + 96, (uint64_t *)__p);
    if (SHIBYTE(v3) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_100709D44(a1);
}

void sub_100B767A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B767C0(uint64_t a1)
{
  return sub_100709F20(a1);
}

uint64_t sub_100B76814( uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, __int128 *a10, char a11)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(void *)(a1 + ++*(void *)(result + 16) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 24) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 32) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 40) = a6;
  *(void *)(a1 + ++*(void *)(result + 48) = a7;
  *(_BYTE *)(a1 + ++*(void *)(result + 56) = a8;
  *(_BYTE *)(a1 + 57) = a9;
  if (*((char *)a10 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 64), *(void **)a10, *((void *)a10 + 1));
  }

  else
  {
    __int128 v13 = *a10;
    *(void *)(a1 + 80) = *((void *)a10 + 2);
    *(_OWORD *)(a1 + ++*(void *)(result + 64) = v13;
  }

  *(_BYTE *)(a1 + ++*(void *)(result + 88) = a11;
  *(_OWORD *)std::string __p = *(_OWORD *)a5;
  uint64_t v16 = *(void *)(a5 + 16);
  *(void *)(a5 + 8) = 0LL;
  *(void *)(a5 + ++*(void *)(result + 16) = 0LL;
  *(void *)a5 = 0LL;
  sub_100B76A40((void *)a1, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return a1;
}

void sub_100B768D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  __int128 v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + ++*(void *)(result + 24) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100B7691C( uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  *(_OWORD *)uint64_t v20 = *(_OWORD *)a5;
  uint64_t v21 = *(void *)(a5 + 16);
  *(void *)a5 = 0LL;
  *(void *)(a5 + 8) = 0LL;
  *(void *)(a5 + ++*(void *)(result + 16) = 0LL;
  if (*(char *)(a10 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a10, *(void *)(a10 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a10;
    uint64_t v19 = *(void *)(a10 + 16);
  }

  sub_100B76814(a1, a2, a3, a4, (uint64_t)v20, a6, a7, a8, a9, (__int128 *)__p, 11);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (v20[0]) {
    operator delete(v20[0]);
  }
  return a1;
}

void sub_100B76A10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100B76A40(void *a1, uint64_t a2)
{
  uint64_t result = *(char **)a2;
  uint64_t v4 = *(char **)(a2 + 8);
  if (*((_DWORD *)v4 - 1) != -1)
  {
    unint64_t v6 = *(void *)(a2 + 16);
    if ((unint64_t)v4 >= v6)
    {
      uint64_t v8 = (v4 - result) >> 2;
      unint64_t v9 = v8 + 1;
      uint64_t v10 = v6 - (void)result;
      if (v10 >> 1 > v9) {
        unint64_t v9 = v10 >> 1;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        uint64_t v12 = (char *)sub_10000956C(a2 + 16, v11);
        uint64_t result = *(char **)a2;
        uint64_t v4 = *(char **)(a2 + 8);
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      __int128 v13 = &v12[4 * v8];
      uint64_t v14 = &v12[4 * v11];
      *(_DWORD *)__int128 v13 = -1;
      uint64_t v7 = v13 + 4;
      while (v4 != result)
      {
        int v15 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v13 - 1) = v15;
        v13 -= 4;
      }

      *(void *)a2 = v13;
      *(void *)(a2 + 8) = v7;
      *(void *)(a2 + ++*(void *)(result + 16) = v14;
      if (result)
      {
        operator delete(result);
        uint64_t result = *(char **)a2;
      }

      else
      {
        uint64_t result = v13;
      }
    }

    else
    {
      *(_DWORD *)uint64_t v4 = -1;
      uint64_t v7 = v4 + 4;
    }

    *(void *)(a2 + 8) = v7;
  }

  uint64_t v16 = a1[2];
  a1[2] = result;
  *(void *)a2 = v16;
  uint64_t v17 = a1[3];
  a1[3] = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v17;
  uint64_t v18 = a1[4];
  a1[4] = *(void *)(a2 + 16);
  *(void *)(a2 + ++*(void *)(result + 16) = v18;
  return result;
}

uint64_t sub_100B76B70(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t sub_100B76B78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_100B76B80(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_100B76B88(uint64_t a1)
{
  return *(char *)(a1 + 88);
}

uint64_t sub_100B76B90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

char *sub_100B76B98@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[87] < 0) {
    return (char *)sub_1010DD48C((_BYTE *)a2, *((void **)result + 8), *((void *)result + 9));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 4);
  *(void *)(a2 + ++*(void *)(result + 16) = *((void *)result + 10);
  return result;
}

uint64_t sub_100B76BC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 48) = a2;
  return result;
}

void sub_100B76BCC( char a1@<W0>, const __CFDictionary *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = 0LL;
  __int128 v47 = off_101873DA8;
  __int128 v48 = *(_OWORD *)&off_101873DB8;
  __int128 v49 = off_101873DC8;
  __int128 v43 = off_101873D68;
  __int128 v44 = *(_OWORD *)&off_101873D78;
  __int128 v45 = off_101873D88;
  __int128 v46 = *(_OWORD *)&off_101873D98;
  do
  {
    unint64_t v9 = (char *)&v43 + v8;
    *((_DWORD *)v9 + 2) = sub_100B76F10(a2, *(CFStringRef *)((char *)&v43 + v8));
    v9[12] = 1;
    v8 += 16LL;
  }

  while (v8 != 112);
  if (!CFDictionaryContainsKey(a2, @"SCAN_CHANNELS")) {
    sub_1012615F8();
  }
  std::string __p = 0LL;
  BOOL v41 = 0LL;
  unint64_t v42 = 0LL;
  if (*(_BYTE *)(a4 + 24))
  {
    if (&__p != (void **)a4) {
      sub_10004C5F8( (char *)&__p,  *(char **)a4,  *(void *)(a4 + 8),  (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
    }
  }

  else
  {
    int Value = (const __CFArray *)CFDictionaryGetValue(a2, @"SCAN_CHANNELS");
    CFIndex Count = CFArrayGetCount(Value);
    sub_1000210A0(&__p, Count);
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, i);
        int v14 = sub_100B76F10(ValueAtIndex, @"CHANNEL");
        int v15 = v14;
        uint64_t v16 = v41;
        if ((unint64_t)v41 >= v42)
        {
          uint64_t v18 = __p;
          uint64_t v19 = ((char *)v41 - (_BYTE *)__p) >> 2;
          unint64_t v20 = v19 + 1;
          uint64_t v21 = v42 - (void)__p;
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            unint64_t v23 = (char *)sub_10000956C((uint64_t)&v42, v22);
            uint64_t v18 = __p;
            uint64_t v16 = v41;
          }

          else
          {
            unint64_t v23 = 0LL;
          }

          __int16 v24 = &v23[4 * v19];
          *(_DWORD *)__int16 v24 = v15;
          uint64_t v17 = v24 + 4;
          while (v16 != v18)
          {
            int v25 = *--v16;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }

          std::string __p = v24;
          BOOL v41 = v17;
          unint64_t v42 = (unint64_t)&v23[4 * v22];
          if (v18) {
            operator delete(v18);
          }
        }

        else
        {
          *BOOL v41 = v14;
          uint64_t v17 = v16 + 1;
        }

        BOOL v41 = v17;
      }
    }
  }

  int v26 = DWORD2(v43);
  int v27 = DWORD2(v44);
  int v28 = DWORD2(v45);
  BOOL v38 = 0LL;
  uint64_t v39 = 0LL;
  int v37 = 0LL;
  sub_10001B72C(&v37, __p, (uint64_t)v41, ((char *)v41 - (_BYTE *)__p) >> 2);
  uint64_t v29 = SDWORD2(v46);
  uint64_t v30 = SDWORD2(v47);
  int v31 = DWORD2(v48);
  int v32 = DWORD2(v49);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)__uuid_t dst = *(_OWORD *)a3;
    uint64_t v36 = *(void *)(a3 + 16);
  }

  sub_100B76814(a5, v26, v27, v28, (uint64_t)&v37, v29, v30, v31 != 0, v32 != 0, (__int128 *)__dst, a1);
  if (SHIBYTE(v36) < 0) {
    operator delete(__dst[0]);
  }
  if (v37)
  {
    BOOL v38 = v37;
    operator delete(v37);
  }

  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }

void sub_100B76EB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p, uint64_t a21, uint64_t a22, void *a23, uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B76F10(const __CFDictionary *a1, CFStringRef theString)
{
  if (!CFDictionaryContainsKey(a1, theString)) {
    sub_1012617B0();
  }
  int Value = (const __CFNumber *)CFDictionaryGetValue(a1, theString);
  if (!CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr)) {
    sub_101261940();
  }
  return valuePtr;
}

double sub_100B76F94(void *a1, float a2)
{
  if (a2 <= 0.0 || a2 > 1.0) {
    sub_101261AD0(a2);
  }
  double v3 = (double)(a1[5] + 40LL)
     / 1000.0
     * (double)((((uint64_t)(a1[3] - a1[2]) >> 2) - 1) * (unint64_t)*(unsigned int *)a1);
  return (v3 - v3 * a2) / a2;
}

double sub_100B7700C(void *a1)
{
  return (double)(a1[5] + 40LL)
       / 1000.0
       * (double)((((uint64_t)(a1[3] - a1[2]) >> 2) - 1) * (unint64_t)*(unsigned int *)a1);
}

void sub_100B77048(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

  ;
}

  ;
}

  ;
}

BOOL sub_100B77114()
{
  return os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT);
}

const char *sub_100B77128(const __CFString *a1)
{
  return CFStringGetCStringPtr(a1, 0x8000100u);
}

BOOL sub_100B77134()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2152), OS_LOG_TYPE_INFO);
}

BOOL sub_100B77144()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2152));
}

uint64_t sub_100B77150@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = v16;
  *(std::locale::__imp **)((char *)&v17.__loc_.__locale_ + *(void *)(v16 - 24)) = (std::locale::__imp *)8;
  *(_DWORD *)((char *)&v16 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((_BYTE *)&v16 + *(void *)(v4 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 4));
  uint64_t v5 = sub_10000CF44(&v16, (uint64_t)", ", 2LL);
  uint64_t v6 = *v5;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 - 24) + ++*(void *)(result + 16) = 8LL;
  *(_DWORD *)((char *)v5 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(void *)(v6 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 12));
  uint64_t v7 = sub_10000CF44(&v16, (uint64_t)", hacc, ", 8LL);
  uint64_t v8 = *v7;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 - 24) + ++*(void *)(result + 16) = 1LL;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(void *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 20));
  unint64_t v9 = sub_10000CF44(&v16, (uint64_t)", alt, ", 7LL);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + ++*(void *)(result + 16) = 1LL;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 28));
  unint64_t v11 = sub_10000CF44(&v16, (uint64_t)", vacc, ", 8LL);
  uint64_t v12 = *v11;
  *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + ++*(void *)(result + 16) = 1LL;
  *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 36));
  std::stringbuf::str(a2, &v17);
  *(void *)((char *)v15
  uint64_t v16 = v13;
  std::streambuf::~streambuf(&v17);
  return std::ios::~ios(&v18);
}

void sub_100B77358(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100B77380( uint64_t a1, void *a2, __int128 *a3, void *a4, __int128 *a5, const std::string *a6, uint64_t a7)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 4) = 0LL;
  *(_OWORD *)(a1 + 20) = xmmword_1012E0070;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 36) = _Q1;
  *(_OWORD *)(a1 + 52) = _Q1;
  *(_OWORD *)(a1 + 68) = _Q1;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + ++*(void *)(result + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 88) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 1++*(void *)(result + 16) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 1++*(void *)(result + 24) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(_BYTE *)(a1 + ++*(void *)(result + 152) = 0;
  *(_DWORD *)(a1 + 1++*(void *)(result + 56) = 0xFFFF;
  uint64_t v19 = a1 + 156;
  *(void *)(a1 + ++*(void *)(result + 168) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 160) = 0LL;
  *(_OWORD *)(a1 + ++*(void *)(result + 176) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 192) = _Q1;
  *(_OWORD *)(a1 + 208) = _Q1;
  *(_OWORD *)(a1 + 2++*(void *)(result + 24) = _Q1;
  *(_DWORD *)(a1 + 2++*(void *)(result + 40) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(void *)(a1 + 244) = 0xBFF0000000000000LL;
  *(void *)(a1 + 252) = 0LL;
  *(void *)(a1 + 260) = 0LL;
  *(void *)(a1 + 272) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 280) = 0x7FFFFFFF;
  *(void *)(a1 + 292) = 0LL;
  *(void *)(a1 + 300) = 0LL;
  *(void *)(a1 + 284) = 0LL;
  *(_BYTE *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 312) = 0xFFFF;
  *(void *)(a1 + 3++*(void *)(result + 16) = 0LL;
  *(void *)(a1 + 3++*(void *)(result + 24) = 0LL;
  *(_OWORD *)(a1 + 3++*(void *)(result + 32) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 3++*(void *)(result + 48) = _Q1;
  *(_OWORD *)(a1 + 3++*(void *)(result + 64) = _Q1;
  *(_OWORD *)(a1 + 380) = _Q1;
  *(_DWORD *)(a1 + 3++*(void *)(result + 96) = 0;
  *(void *)(a1 + 400) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 4++*(void *)(result + 24) = 0;
  *(void *)(a1 + 408) = 0LL;
  *(void *)(a1 + 4++*(void *)(result + 16) = 0LL;
  *(void *)(a1 + 428) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 436) = 0x7FFFFFFF;
  *(void *)(a1 + 4++*(void *)(result + 48) = 0LL;
  *(void *)(a1 + 4++*(void *)(result + 40) = 0LL;
  *(void *)(a1 + 4++*(void *)(result + 56) = 0LL;
  *(_BYTE *)(a1 + 4++*(void *)(result + 64) = 0;
  sub_100D2D9A4(a1 + 472);
  *(void *)(v19 + 3++*(void *)(result + 56) = *a2;
  __int128 v20 = *a3;
  __int128 v21 = a3[2];
  *(_OWORD *)(v19 + 380) = a3[1];
  *(_OWORD *)(v19 + 3++*(void *)(result + 96) = v21;
  *(_OWORD *)(v19 + 3++*(void *)(result + 64) = v20;
  __int128 v22 = a3[3];
  __int128 v23 = a3[4];
  __int128 v24 = a3[5];
  *(void *)(v19 + 460) = *((void *)a3 + 12);
  *(_OWORD *)(v19 + 428) = v23;
  *(_OWORD *)(v19 + 444) = v24;
  *(_OWORD *)(v19 + 412) = v22;
  uint64_t v25 = a4[1];
  *(void *)(v19 + 468) = *a4;
  *(void *)(v19 + 476) = v25;
  if (v25)
  {
    int v26 = (unint64_t *)(v25 + 8);
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  *(void *)(a1 + 6++*(void *)(result + 40) = 0LL;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 648), *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v28 = *a5;
    *(void *)(a1 + 6++*(void *)(result + 64) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 6++*(void *)(result + 48) = v28;
  }

  *(void *)(a1 + 6++*(void *)(result + 88) = 0LL;
  *(_OWORD *)(a1 + 672) = 0u;
  sub_100B77688(a1 + 696);
  sub_100B77688(a1 + 792);
  sub_1001CE07C(a1 + 888);
  *(_BYTE *)(a1 + 14++*(void *)(result + 96) = 0;
  *(_BYTE *)(a1 + 1504) = 0;
  *(void *)(a1 + 1512) = 0LL;
  *(void *)(a1 + 1528) = 0LL;
  *(void *)(a1 + 1520) = 0LL;
  *(_DWORD *)(a1 + 1544) = 0;
  sub_1001CE8A4(a1 + 888, a6);
  unsigned int v29 = *(_DWORD *)(a7 + 96);
  if (v29 == 1)
  {
    sub_1001CE5E4((_OWORD *)(a1 + 888), a7);
    unsigned int v29 = *(_DWORD *)(a7 + 96);
  }

  if (v29 <= 0xB && ((1 << v29) & 0xC02) != 0)
  {
    __int128 v30 = *(_OWORD *)(a7 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a7;
    *(_OWORD *)(a1 + ++*(void *)(result + 16) = v30;
    __int128 v31 = *(_OWORD *)(a7 + 32);
    __int128 v32 = *(_OWORD *)(a7 + 48);
    __int128 v33 = *(_OWORD *)(a7 + 80);
    *(_OWORD *)(a1 + ++*(void *)(result + 64) = *(_OWORD *)(a7 + 64);
    *(_OWORD *)(a1 + 80) = v33;
    *(_OWORD *)(a1 + ++*(void *)(result + 32) = v31;
    *(_OWORD *)(a1 + ++*(void *)(result + 48) = v32;
    __int128 v34 = *(_OWORD *)(a7 + 96);
    __int128 v35 = *(_OWORD *)(a7 + 112);
    __int128 v36 = *(_OWORD *)(a7 + 128);
    *(_OWORD *)(a1 + 1++*(void *)(result + 40) = *(_OWORD *)(a7 + 140);
    *(_OWORD *)(a1 + 112) = v35;
    *(_OWORD *)(a1 + 128) = v36;
    *(_OWORD *)(a1 + ++*(void *)(result + 96) = v34;
  }

  return a1;
}

void sub_100B77610(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 640);
  *(void *)(v1 + 6++*(void *)(result + 40) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_10000AE14(v2);
  _Unwind_Resume(a1);
}

double sub_100B77688@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1007EBE44((uint64_t *)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  sub_100C3A480(v2, (uint64_t)__p);
  sub_1003F45B4((uint64_t)__p, a1);
  *(int64x2_t *)a1 = vdupq_n_s64(0xC066800000000000LL);
  *(void *)(a1 + ++*(void *)(result + 16) = 0xC07F400000000000LL;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + ++*(void *)(result + 32) = _Q0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + ++*(void *)(result + 88) = 0;
  return result;
}

void sub_100B77720( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B7773C(uint64_t a1)
{
  return a1;
}

double sub_100B777A0@<D0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  if (*a2)
  {
    if (sub_100400B64(*a2))
    {
      sub_100CC1A3C(*a2, (void *)(a1 + 512), &buf.__r_.__value_.__l.__data_);
      char v10 = *(void **)(a1 + 672);
      if (v10)
      {
        *(void *)(a1 + 680) = v10;
        operator delete(v10);
        *(void *)(a1 + 672) = 0LL;
        *(void *)(a1 + 680) = 0LL;
        *(void *)(a1 + 6++*(void *)(result + 88) = 0LL;
      }

      *(std::string *)(a1 + 672) = buf;
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      unint64_t v11 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360((std::string *)__p);
        uint64_t v12 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 680) - *(void *)(a1 + 672)) >> 6);
        uint64_t v14 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
        uint64_t v43 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, computing centroid for associated AP %{private}s from harvest database using %{public}zu %{public}s harvest samples",  (uint8_t *)&buf,  0x20u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        uint64_t v28 = qword_101934858;
        sub_1007EC360(&v41);
        if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unsigned int v29 = &v41;
        }
        else {
          unsigned int v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 680) - *(void *)(a1 + 672)) >> 6);
        else {
          __int128 v31 = (uint64_t *)*a3;
        }
        *(_DWORD *)std::string __p = 136381187;
        *(void *)&__p[4] = v29;
        *(_WORD *)&_BYTE __p[12] = 2050;
        *(void *)&__p[14] = v30;
        *(_WORD *)&__p[22] = 2082;
        *(void *)&__p[24] = v31;
        __int128 v32 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v28,  0LL,  "WifiCalc, computing centroid for associated AP %{private}s from harvest database using %{ public}zu %{public}s harvest samples",  __p,  32);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::calculateAssociatedApCentroidFromHarvestDatabase(s td::shared_ptr<CLWifiAssociatedApHarvestDatabase>, const std::string &, const CFTimeInterval &)",  "%s\n",  (const char *)v32);
        if (v32 != &buf) {
          free(v32);
        }
      }

      sub_100F23994(&buf, a1 + 672, a4);
      sub_100F241D8((uint64_t)&buf, __p);
      if (*(double *)__p >= -90.0
        && *(double *)__p <= 90.0
        && *(double *)&__p[8] <= 180.0
        && *(double *)&__p[8] >= -180.0)
      {
        *(double *)(a1 + 1536) = sub_100C0CD20((uint64_t)&buf);
      }

      if (!*(_BYTE *)(a1 + 1504) || *(void *)(a1 + 1496) == -1LL)
      {
        *(void *)(a1 + 14++*(void *)(result + 96) = sub_100F24DF4((uint64_t)&buf);
        *(_BYTE *)(a1 + 1504) = v15;
        sub_100F24E00((char *)&buf, (uint64_t)&v41);
        uint64_t v16 = (void **)(a1 + 1512);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)&v41.__r_.__value_.__l.__data_;
        *(void *)(a1 + 1528) = v41.__r_.__value_.__l.__cap_;
      }

      __int128 v17 = v38;
      a5[2] = v37;
      a5[3] = v17;
      __int128 v18 = v40;
      a5[4] = v39;
      a5[5] = v18;
      double result = *(double *)__p;
      __int128 v20 = *(_OWORD *)&__p[16];
      *a5 = *(_OWORD *)__p;
      a5[1] = v20;
      if (v47 < 0) {
        operator delete(v46);
      }
      if (v44)
      {
        __int128 v45 = v44;
        operator delete(v44);
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      __int128 v23 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360(&buf);
        __int128 v24 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string __p = 136380675;
        *(void *)&__p[4] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to invalid harvest database",  __p,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        uint64_t v33 = qword_101934858;
        sub_1007EC360((std::string *)__p);
        if (__p[23] >= 0) {
          __int128 v34 = __p;
        }
        else {
          __int128 v34 = *(_BYTE **)__p;
        }
        LODWORD(v41.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        __int128 v35 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v33,  0LL,  "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to inval id harvest database",  &v41,  12);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::calculateAssociatedApCentroidFromHarvestDatabase(s td::shared_ptr<CLWifiAssociatedApHarvestDatabase>, const std::string &, const CFTimeInterval &)",  "%s\n",  (const char *)v35);
        if (v35 != &buf) {
          free(v35);
        }
      }

      return sub_100B77688((uint64_t)a5);
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    __int128 v21 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(&buf);
      __int128 v22 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string __p = 136380675;
      *(void *)&__p[4] = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to invalid harvest database handle",  __p,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v25 = qword_101934858;
      sub_1007EC360((std::string *)__p);
      if (__p[23] >= 0) {
        int v26 = __p;
      }
      else {
        int v26 = *(_BYTE **)__p;
      }
      LODWORD(v41.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      unint64_t v27 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v25,  0LL,  "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to invalid harvest database handle",  &v41,  12);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::calculateAssociatedApCentroidFromHarvestDatabase(std ::shared_ptr<CLWifiAssociatedApHarvestDatabase>, const std::string &, const CFTimeInterval &)",  "%s\n",  (const char *)v27);
      if (v27 != &buf) {
        free(v27);
      }
    }

    return sub_100B77688((uint64_t)a5);
  }

  return result;
}

void sub_100B77F14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100B77F3C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 671);
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *(void *)(a1 + 656);
  }
  if (v4) {
    sub_1005CB450((__int128 *)(a1 + 648), &v18);
  }
  else {
    sub_1005CAEDC(&v18);
  }
  sub_1005CC188(v18, (void *)(a1 + 512));
  uint64_t v5 = (std::__shared_weak_count *)v19;
  v17[0] = v18;
  v17[1] = v19;
  if (v19)
  {
    uint64_t v6 = (unint64_t *)(v19 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  sub_1010DDBC0(__p, "GPS");
  uint64_t v8 = sub_100F4BF44();
  v9.n128_f64[0] = sub_100B777A0(a1, v17, (uint64_t *)__p, (uint64_t)v8 + 64, a2);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v9);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v12 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    unint64_t v13 = (unint64_t *)(v19 + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v9);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_100B78070( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100B780AC(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 671);
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *(void *)(a1 + 656);
  }
  if (v4) {
    sub_1005CB47C((__int128 *)(a1 + 648), &v18);
  }
  else {
    sub_1005CAFE8(&v18);
  }
  sub_1005CC188(v18, (void *)(a1 + 512));
  uint64_t v5 = (std::__shared_weak_count *)v19;
  v17[0] = v18;
  v17[1] = v19;
  if (v19)
  {
    uint64_t v6 = (unint64_t *)(v19 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  sub_1010DDBC0(__p, "Wifi");
  uint64_t v8 = sub_100F4BF44();
  v9.n128_f64[0] = sub_100B777A0(a1, v17, (uint64_t *)__p, (uint64_t)v8 + 56, a2);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v9);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v12 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    unint64_t v13 = (unint64_t *)(v19 + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v9);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_100B781E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100B7821C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((sub_1007EC584() & 1) != 0)
  {
    uint64_t v4 = (void *)sub_100F7F1D4(*(void *)(a1 + 624));
    if (v4 && (uint64_t v5 = v4, ([v4 isValid] & 1) != 0))
    {
      [v5 purgeOlderRecords];
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v6 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        [v5 getBasicInfo];
        unint64_t v7 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)std::string buf = 136380675;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "WifiAssociatedApCentroidStore, fetching associated AP centroid from local store, %{private}s",  buf,  0xCu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        uint64_t v34 = qword_101934858;
        [v5 getBasicInfo];
        if (v45 >= 0) {
          __int128 v35 = buf;
        }
        else {
          __int128 v35 = *(_BYTE **)buf;
        }
        int v46 = 136380675;
        char v47 = v35;
        __int128 v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v34,  0LL,  "WifiAssociatedApCentroidStore, fetching associated AP centroid from local store, %{private}s",  &v46,  12);
        if (v45 < 0) {
          operator delete(*(void **)buf);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()",  "%s\n",  v36);
        if (v36 != __p) {
          free(v36);
        }
      }

      id v8 = [v5 fetchRecord:sub_100B78BF0()];
      if (v8)
      {
        double Current = CFAbsoluteTimeGetCurrent();
        [v8 lastUpdated];
        if (qword_101934850 != -1)
        {
          double v41 = v10;
          dispatch_once(&qword_101934850, &stru_101873DF8);
          double v10 = v41;
        }

        double v11 = Current - v10;
        uint64_t v12 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          id v13 = objc_msgSend(objc_msgSend(v8, "description"), "UTF8String");
          *(_DWORD *)std::string __p = 136380931;
          *(void *)&__p[4] = v13;
          *(_WORD *)&_BYTE __p[12] = 2049;
          *(double *)&__p[14] = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "WifiAssociatedApCentroidStore, found associated AP centroid from local store: %{private}s, age: %{private}.1fs",  __p,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101873DF8);
          }
          uint64_t v37 = qword_101934858;
          id v38 = objc_msgSend(objc_msgSend(v8, "description"), "UTF8String");
          *(_DWORD *)std::string buf = 136380931;
          *(void *)&uint8_t buf[4] = v38;
          __int16 v43 = 2049;
          double v44 = v11;
          LODWORD(v++*(void *)(result + 40) = 22;
          __int128 v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v37,  0LL,  "WifiAssociatedApCentroidStore, found associated AP centroid from local store: %{private}s, age : %{private}.1fs",  buf,  v40);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()",  "%s\n",  v39);
          if (v39 != __p) {
            free(v39);
          }
        }

        [v8 latitude];
        *(void *)a2 = v14;
        [v8 longitude];
        *(void *)(a2 + 8) = v15;
        [v8 altitude];
        *(void *)(a2 + ++*(void *)(result + 16) = v16;
        [v8 horizontalAccuracy];
        *(void *)(a2 + ++*(void *)(result + 32) = v17;
        [v8 verticalAccuracy];
        *(void *)(a2 + ++*(void *)(result + 40) = v18;
        *(_DWORD *)(a2 + 52) = [v8 reach];
        [v8 stationaryTimeInSeconds];
        *(void *)(a1 + 1536) = v19;
        sub_1010DDBC0(__p, (char *)objc_msgSend(objc_msgSend(v8, "loiType"), "UTF8String"));
        __int128 v20 = (int **)(a1 + 1512);
        *(_OWORD *)__int128 v20 = *(_OWORD *)__p;
        *(void *)(a1 + 1528) = *(void *)&__p[16];
        if ((*(char *)(a1 + 1535) & 0x80000000) == 0)
        {
          switch(*(_BYTE *)(a1 + 1535))
          {
            case 3:
              if (*(_WORD *)v20 != 31047 || *(_BYTE *)(a1 + 1514) != 109) {
                goto LABEL_85;
              }
              goto LABEL_61;
            case 4:
              int v30 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 == 1701670728) {
                goto LABEL_89;
              }
              goto LABEL_72;
            case 6:
              if (*(_DWORD *)v20 != 1869112147 || *(_WORD *)(a1 + 1516) != 27759) {
                goto LABEL_85;
              }
              goto LABEL_79;
            case 7:
              goto LABEL_81;
            default:
              goto LABEL_85;
          }
        }

        switch(*(void *)(a1 + 1520))
        {
          case 3LL:
            if (*(_WORD *)*v20 != 31047 || *((_BYTE *)*v20 + 2) != 109) {
              goto LABEL_85;
            }
LABEL_61:
            uint64_t v27 = 0LL;
            char v28 = 1;
            uint64_t v29 = 3LL;
            break;
          case 4LL:
            if (**v20 == 1701670728)
            {
LABEL_89:
              uint64_t v29 = 0LL;
              uint64_t v27 = 0LL;
            }

            else
            {
              int v30 = **v20;
LABEL_72:
              if (v30 != 1802661719) {
                goto LABEL_85;
              }
              uint64_t v27 = 0LL;
              uint64_t v29 = 1LL;
            }

            char v28 = 1;
            break;
          case 6LL:
            if (**v20 != 1869112147 || *((_WORD *)*v20 + 2) != 27759) {
              goto LABEL_85;
            }
LABEL_79:
            uint64_t v27 = 0LL;
            char v28 = 1;
            uint64_t v29 = 2LL;
            break;
          case 7LL:
            __int128 v20 = (int **)*v20;
LABEL_81:
            uint64_t v27 = -256LL;
            char v28 = 1;
            uint64_t v29 = 255LL;
            break;
          default:
LABEL_85:
            uint64_t v29 = 0LL;
            char v28 = 0;
            uint64_t v27 = 0LL;
            break;
        }

        *(void *)(a1 + 14++*(void *)(result + 96) = v27 | v29;
        *(_BYTE *)(a1 + 1504) = v28;

        return;
      }

      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v25 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "WifiAssociatedApCentroidStore, could not find associated AP centroid from local store",  __p,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        *(_WORD *)std::string buf = 0;
        LODWORD(v++*(void *)(result + 40) = 2;
        __int128 v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiAssociatedApCentroidStore, could not find associated AP centroid from local store",  buf,  v40);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()",  "%s\n",  v23);
LABEL_45:
        if (v23 != __p) {
          free(v23);
        }
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      __int128 v24 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as the store is invalid",  __p,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        *(_WORD *)std::string buf = 0;
        __int128 v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as the store is invalid",  buf,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()",  "%s\n",  v23);
        goto LABEL_45;
      }
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    __int128 v22 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as it is disabled by settings",  __p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      *(_WORD *)std::string buf = 0;
      __int128 v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as it is disa bled by settings",  buf,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()",  "%s\n",  v23);
      goto LABEL_45;
    }
  }

NSString *sub_100B78BF0()
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v1 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p);
  return v1;
}

void sub_100B78C58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B78C74(uint64_t a1)
{
  uint64_t v2 = sub_100F4BF44();
  if (!sub_100F4C4B4((uint64_t)v2))
  {
    sub_1010DDBC0(&buf, "NO: disabled_by_settings");
    sub_1001CECD0(a1 + 888, &buf);
LABEL_16:
    return 0LL;
  }

  if ((sub_100869780(a1 + 312) & 1) == 0)
  {
    sub_1010DDBC0(&buf, "NO: centroid_invalid");
    sub_1001CECD0(a1 + 888, &buf);
    goto LABEL_16;
  }

  double v3 = *((double *)sub_100F4BF44() + 6);
  uint64_t v4 = (std::string::size_type *)(a1 + 332);
  if (*(double *)(a1 + 332) > v3)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    uint64_t v5 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(&v95);
      uint64_t v6 = (v95.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v95 : (std::string *)v95.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = *v4;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      double v94 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, skip updating computed location using associated AP %{private}s as its uncertainty %{public}.1f is gre ater than %{public}.1f",  (uint8_t *)&buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v49 = qword_101934858;
      sub_1007EC360(&v92);
      if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v50 = &v92;
      }
      else {
        uint64_t v50 = (std::string *)v92.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v51 = *v4;
      LODWORD(v95.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
      WORD2(v95.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v95.__r_.__value_.__r.__words[1] + 6) = v51;
      HIWORD(v95.__r_.__value_.__r.__words[2]) = 2050;
      double v96 = v3;
      int v52 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v49,  0LL,  "WifiCalc, skip updating computed location using associated AP %{private}s as its uncertaint y %{public}.1f is greater than %{public}.1f",  &v95,  32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v52);
      if (v52 != &buf) {
        free(v52);
      }
    }

    sub_1010DDBC0(&buf, "NO: uncertainty_too_large");
    sub_1001CECD0(a1 + 888, &buf);
    goto LABEL_16;
  }

  if (*(_DWORD *)(a1 + 1544) != 2)
  {
    if (!*(_BYTE *)(a1 + 1504))
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      __int128 v23 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360(&buf);
        __int128 v24 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v95.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, skip updating computed location using associated AP %{private}s as we cannot determine its LOI type",  (uint8_t *)&v95,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        uint64_t v64 = qword_101934858;
        sub_1007EC360(&v95);
        if ((v95.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v65 = &v95;
        }
        else {
          std::string::size_type v65 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        LODWORD(v92.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
        double v66 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v64,  0LL,  "WifiCalc, skip updating computed location using associated AP %{private}s as we cannot de termine its LOI type",  &v92,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v66);
        if (v66 != &buf) {
          free(v66);
        }
      }

      sub_1010DDBC0(&buf, "NO: cannot_infer_LOI");
      sub_1001CECD0(a1 + 888, &buf);
      goto LABEL_16;
    }

    uint64_t v9 = *(void *)(a1 + 1496);
    double v10 = (unsigned __int8 *)sub_100F4BF44();
    if (!sub_100F4BF50(v10, v9))
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v25 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360(&buf);
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        uint64_t v27 = (void *)(a1 + 1512);
        LODWORD(v95.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
        WORD2(v95.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v95.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, skip updating computed location using associated AP %{private}s as its LOI type %{private}s is not enabled",  (uint8_t *)&v95,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        uint64_t v67 = qword_101934858;
        sub_1007EC360(&v95);
        int v68 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v68 = &v95;
        }
        __int16 v69 = (void *)(a1 + 1512);
        LODWORD(v92.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
        WORD2(v92.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v69;
        __int16 v70 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v67,  0LL,  "WifiCalc, skip updating computed location using associated AP %{private}s as its LOI type %{private}s is not enabled",  &v92,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v70);
        if (v70 != &buf) {
          free(v70);
        }
      }

      sub_1010DDBC0(&buf, "NO: LOI_disabled");
      sub_1001CECD0(a1 + 888, &buf);
      goto LABEL_16;
    }
  }

  if (*(_BYTE *)(a1 + 616)) {
    goto LABEL_255;
  }
  uint64_t v11 = *(void *)(a1 + 624);
  uint64_t v12 = *(void *)(a1 + 512);
  id v13 = operator new(8uLL);
  *(void *)&__int128 __p = v13;
  void *v13 = v12;
  *((void *)&__p + 1) = v13 + 1;
  __int16 v91 = v13 + 1;
  sub_100B7B730(a1 + 696, (uint64_t)&v95);
  sub_100C3A384((uint64_t)&v95, (uint64_t)&buf);
  CFAbsoluteTime Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  (*(void (**)(std::string *__return_ptr, uint64_t, __int128 *, std::string *, CFAbsoluteTime))(*(void *)v11 + 16LL))( &v92,  v11,  &__p,  &buf,  Current_1);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }

  uint64_t v15 = sub_1002FB09C((uint64_t)&v92, (void *)(a1 + 512));
  if (&v92.__r_.__value_.__r.__words[1] == v15)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    char v28 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(&buf);
      uint64_t v29 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v95.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, still could not look up centroid from tile/als for associated AP %s",  (uint8_t *)&v95,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v80 = qword_101934858;
      sub_1007EC360(&v95);
      if ((v95.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v81 = &v95;
      }
      else {
        uint64_t v81 = (std::string *)v95.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v81;
      double v82 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v80,  0LL,  "WifiCalc, still could not look up centroid from tile/als for associated AP %s",  (const char *)&__p);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v82);
      if (v82 != &buf) {
        free(v82);
      }
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    uint64_t v16 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(&buf);
      uint64_t v17 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v95.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, found centroid from tile/als for associated AP %s",  (uint8_t *)&v95,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v71 = qword_101934858;
      sub_1007EC360(&v95);
      if ((v95.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v72 = &v95;
      }
      else {
        uint64_t v72 = (std::string *)v95.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v72;
      uint64_t v73 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v71,  0LL,  "WifiCalc, found centroid from tile/als for associated AP %s",  (const char *)&__p);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v73);
      if (v73 != &buf) {
        free(v73);
      }
    }

    int v18 = *(unsigned __int8 *)(a1 + 616);
    __int128 v19 = *(_OWORD *)(v15 + 7);
    *(_OWORD *)(a1 + 520) = *(_OWORD *)(v15 + 5);
    *(_OWORD *)(a1 + 536) = v19;
    __int128 v20 = *(_OWORD *)(v15 + 11);
    __int128 v21 = *(_OWORD *)(v15 + 15);
    __int128 v22 = *(_OWORD *)(v15 + 9);
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(v15 + 13);
    *(_OWORD *)(a1 + 600) = v21;
    *(_OWORD *)(a1 + 552) = v22;
    *(_OWORD *)(a1 + 568) = v20;
    if (!v18) {
      *(_BYTE *)(a1 + 6++*(void *)(result + 16) = 1;
    }
  }

  sub_100008390((uint64_t)&v92, (void *)v92.__r_.__value_.__l.__size_);
  if (*(_BYTE *)(a1 + 616))
  {
LABEL_255:
    if (sub_100C3A408(a1 + 520))
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      int v30 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360(&buf);
        __int128 v31 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v95.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, warning, associated AP %{private}s server-side centroid from tile/als is moving",  (uint8_t *)&v95,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        uint64_t v61 = qword_101934858;
        sub_1007EC360(&v95);
        if ((v95.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v62 = &v95;
        }
        else {
          char v62 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        LODWORD(v92.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
        uint64_t v63 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v61,  0LL,  "WifiCalc, warning, associated AP %{private}s server-side centroid from tile/als is moving",  &v92,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v63);
        if (v63 != &buf) {
          free(v63);
        }
      }
    }
  }

  double v32 = (double)*((int *)sub_100F4BF44() + 4);
  if (*(double *)(a1 + 1536) >= v32)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    uint64_t v40 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(&v95);
      double v41 = (v95.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v95 : (std::string *)v95.__r_.__value_.__r.__words[0];
      std::string::size_type v42 = *(void *)(a1 + 1536);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v42;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      double v94 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, will update computed location using associated AP %{private}s as stationary time %.1f is no less than threshold %.1f",  (uint8_t *)&buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v57 = qword_101934858;
      sub_1007EC360(&v92);
      if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v58 = &v92;
      }
      else {
        __int16 v58 = (std::string *)v92.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v59 = *(void *)(a1 + 1536);
      LODWORD(v95.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
      WORD2(v95.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v95.__r_.__value_.__r.__words[1] + 6) = v59;
      HIWORD(v95.__r_.__value_.__r.__words[2]) = 2048;
      double v96 = v32;
      LODWORD(v89) = 32;
      int v60 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v57,  0LL,  "WifiCalc, will update computed location using associated AP %{private}s as stationary time %.1f is no less than threshold %.1f",  &v95,  v89);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v60);
      if (v60 != &buf) {
        free(v60);
      }
    }

    sub_1010DDBC0(&buf, "YES: stationary_enough");
    sub_1001CECD0(a1 + 888, &buf);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    uint64_t v33 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(&v95);
      uint64_t v34 = (v95.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v95 : (std::string *)v95.__r_.__value_.__r.__words[0];
      std::string::size_type v35 = *(void *)(a1 + 1536);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v35;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      double v94 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, associated AP %{private}s has stationary time %.1f, less than threshold %.1f",  (uint8_t *)&buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v53 = qword_101934858;
      sub_1007EC360(&v92);
      if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v54 = &v92;
      }
      else {
        __int16 v54 = (std::string *)v92.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v55 = *(void *)(a1 + 1536);
      LODWORD(v95.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v54;
      WORD2(v95.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v95.__r_.__value_.__r.__words[1] + 6) = v55;
      HIWORD(v95.__r_.__value_.__r.__words[2]) = 2048;
      double v96 = v32;
      LODWORD(v89) = 32;
      int v56 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v53,  0LL,  "WifiCalc, associated AP %{private}s has stationary time %.1f, less than threshold %.1f",  &v95,  v89);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v56);
      if (v56 != &buf) {
        free(v56);
      }
    }

    if (!*(_BYTE *)(a1 + 616))
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      __int16 v43 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360(&buf);
        double v44 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v95.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/al s is unavailable",  (uint8_t *)&v95,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        uint64_t v74 = qword_101934858;
        sub_1007EC360(&v95);
        if ((v95.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v75 = &v95;
        }
        else {
          uint64_t v75 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        LODWORD(v92.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v75;
        LODWORD(v89) = 12;
        uint64_t v76 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v74,  0LL,  "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/als is unavailable",  &v92,  v89);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v76);
        if (v76 != &buf) {
          free(v76);
        }
      }

      sub_1010DDBC0(&buf, "NO: server_side_centroid_unavailable");
      sub_1001CECD0(a1 + 888, &buf);
      goto LABEL_16;
    }

    if (!sub_100C3A418((double *)(a1 + 520)))
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      char v45 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360(&buf);
        int v46 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v95.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/als is invalid",  (uint8_t *)&v95,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        uint64_t v77 = qword_101934858;
        sub_1007EC360(&v95);
        if ((v95.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v78 = &v95;
        }
        else {
          uint64_t v78 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        LODWORD(v92.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v78;
        LODWORD(v89) = 12;
        double v79 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v77,  0LL,  "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/als is invalid",  &v92,  v89);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v79);
        if (v79 != &buf) {
          free(v79);
        }
      }

      sub_1010DDBC0(&buf, "NO: server_side_centroid_invalid");
      sub_1001CECD0(a1 + 888, &buf);
      goto LABEL_16;
    }

    *(double *)&std::string::size_type v36 = sub_100D2DBDC( (double *)(a1 + 472),  *(double *)(a1 + 528),  *(double *)(a1 + 536),  *(double *)(a1 + 696),  *(double *)(a1 + 704),  0.0);
    double v37 = *((double *)sub_100F4BF44() + 5);
    if (*(double *)&v36 > v37)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      char v47 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360(&v95);
        __int128 v48 = (v95.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v95 : (std::string *)v95.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v36;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        double v94 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, skip updating computed location using associated AP %{private}s as distance %.1f is greater than threshold %.0f",  (uint8_t *)&buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101873DF8);
        }
        uint64_t v86 = qword_101934858;
        sub_1007EC360(&v92);
        if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int16 v87 = &v92;
        }
        else {
          __int16 v87 = (std::string *)v92.__r_.__value_.__r.__words[0];
        }
        LODWORD(v95.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v87;
        WORD2(v95.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v95.__r_.__value_.__r.__words[1] + 6) = v36;
        HIWORD(v95.__r_.__value_.__r.__words[2]) = 2048;
        double v96 = v37;
        LODWORD(v89) = 32;
        uint64_t v88 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v86,  0LL,  "WifiCalc, skip updating computed location using associated AP %{private}s as distance %.1 f is greater than threshold %.0f",  &v95,  v89);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v88);
        if (v88 != &buf) {
          free(v88);
        }
      }

      sub_1010DDBC0(&buf, "NO: far_away_from_server_side_centroid");
      sub_1001CECD0(a1 + 888, &buf);
      goto LABEL_16;
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    id v38 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(&v95);
      __int128 v39 = (v95.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v95 : (std::string *)v95.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v36;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      double v94 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, will update computed location using associated AP %{private}s as distance %.1f is no more than threshold %.0f",  (uint8_t *)&buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v83 = qword_101934858;
      sub_1007EC360(&v92);
      if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v84 = &v92;
      }
      else {
        uint64_t v84 = (std::string *)v92.__r_.__value_.__r.__words[0];
      }
      LODWORD(v95.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 4) = (std::string::size_type)v84;
      WORD2(v95.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v95.__r_.__value_.__r.__words[1] + 6) = v36;
      HIWORD(v95.__r_.__value_.__r.__words[2]) = 2048;
      double v96 = v37;
      LODWORD(v89) = 32;
      int v85 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v83,  0LL,  "WifiCalc, will update computed location using associated AP %{private}s as distance %.1f is no more than threshold %.0f",  &v95,  v89);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()",  "%s\n",  (const char *)v85);
      if (v85 != &buf) {
        free(v85);
      }
    }

    sub_1010DDBC0(&buf, "YES: consistent_with_server_side_centroid");
    sub_1001CECD0(a1 + 888, &buf);
  }

  return 1LL;
}

void sub_100B7A4E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
}

void sub_100B7A574(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 696);
  uint64_t v5 = a1 + 316;
  __int128 v6 = *a2;
  *(_OWORD *)(a1 + 172) = a2[1];
  *(_OWORD *)(a1 + 1++*(void *)(result + 56) = v6;
  __int128 v7 = a2[2];
  __int128 v8 = a2[3];
  __int128 v9 = a2[4];
  *(_OWORD *)(a1 + 236) = a2[5];
  *(_OWORD *)(a1 + 220) = v9;
  *(_OWORD *)(a1 + 204) = v8;
  *(_OWORD *)(a1 + 1++*(void *)(result + 88) = v7;
  __int128 v10 = a2[6];
  __int128 v11 = a2[7];
  __int128 v12 = a2[8];
  *(_OWORD *)(a1 + 2++*(void *)(result + 96) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(a1 + 268) = v11;
  *(_OWORD *)(a1 + 284) = v12;
  *(_OWORD *)(a1 + 252) = v10;
  id v13 = (_OWORD *)(a1 + 888);
  sub_1001CE080(a1 + 888, (__int128 *)(a1 + 156));
  __int128 v14 = a2[1];
  *(_OWORD *)(a1 + 312) = *a2;
  *(_OWORD *)(a1 + 328) = v14;
  __int128 v15 = a2[2];
  __int128 v16 = a2[3];
  __int128 v17 = a2[5];
  *(_OWORD *)(a1 + 376) = a2[4];
  *(_OWORD *)(a1 + 392) = v17;
  *(_OWORD *)(a1 + 344) = v15;
  *(_OWORD *)(a1 + 360) = v16;
  __int128 v18 = a2[6];
  __int128 v19 = a2[7];
  __int128 v20 = a2[8];
  *(_OWORD *)(a1 + 452) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(a1 + 4++*(void *)(result + 24) = v19;
  *(_OWORD *)(a1 + 4++*(void *)(result + 40) = v20;
  *(_OWORD *)(a1 + 408) = v18;
  *(_OWORD *)uint64_t v5 = *v4;
  *(void *)(v5 + ++*(void *)(result + 16) = *(void *)(a1 + 728);
  *(_DWORD *)(a1 + 444) = 1;
  if (*(double *)((char *)a2 + 36) < 0.0 && *(double *)(a1 + 736) > 0.0)
  {
    *(void *)(v5 + ++*(void *)(result + 24) = *(void *)(a1 + 712);
    __int128 v21 = (double *)sub_100F4BF20();
    double v22 = *(double *)(a1 + 736);
    if (v22 < v21[28]) {
      double v22 = v21[28];
    }
    *(double *)(v5 + ++*(void *)(result + 32) = v22;
  }

  sub_1001CE334(v13, (__int128 *)(a1 + 312));
}

void sub_100B7A684(uint64_t a1, uint64_t a2)
{
  char v4 = sub_100869780(a2);
  sub_1001CECC0(a1 + 888, v4 ^ 1);
  uint64_t v5 = (_OWORD *)(a1 + 312);
  sub_100D2DCA4((double *)(a1 + 472), a2, a1 + 312);
  uint64_t v7 = v6;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101873DF8);
  }
  __int128 v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v9 = &v33;
    sub_100B77150(a2, &v33);
    if ((v33.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v9 = (std::stringbuf::string_type *)v33.__r_.__value_.__r.__words[0];
    }
    sub_1007EC360(&v32);
    int size = (char)v32.__r_.__value_.__s.__size_;
    std::string::size_type v11 = v32.__r_.__value_.__r.__words[0];
    sub_100B77150(a1 + 312, &__p);
    if (size >= 0) {
      __int128 v12 = &v32;
    }
    else {
      __int128 v12 = (std::stringbuf::string_type *)v11;
    }
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    __int128 v14 = (void *)(a1 + 1512);
    *(_DWORD *)std::string buf = 136381699;
    uint64_t v40 = v9;
    __int16 v41 = 2081;
    std::string::size_type v42 = v12;
    __int16 v43 = 2081;
    double v44 = p_p;
    __int16 v45 = 2050;
    uint64_t v46 = v7;
    __int16 v47 = 2081;
    __int128 v48 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, replacing computed location %{private}s with associated AP %{private}s centroid %{private}s. Distance %{ public}.1fm. LOI %{private}s",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    uint64_t v22 = qword_101934858;
    __int128 v23 = &v32;
    sub_100B77150(a2, &v32);
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v23 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
    }
    sub_1007EC360(&__p);
    int v24 = (char)__p.__r_.__value_.__s.__size_;
    std::string::size_type v25 = __p.__r_.__value_.__r.__words[0];
    sub_100B77150(a1 + 312, &v30);
    if (v24 >= 0) {
      int v26 = &__p;
    }
    else {
      int v26 = (std::stringbuf::string_type *)v25;
    }
    uint64_t v27 = (std::stringbuf::string_type *)v30.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v27 = &v30;
    }
    char v28 = (void *)(a1 + 1512);
    LODWORD(v33.__r_.__value_.__l.__data_) = 136381699;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    WORD2(v33.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v33.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
    HIWORD(v33.__r_.__value_.__r.__words[2]) = 2081;
    uint64_t v34 = v27;
    __int16 v35 = 2050;
    uint64_t v36 = v7;
    __int16 v37 = 2081;
    id v38 = v28;
    uint64_t v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  0LL,  "WifiCalc, replacing computed location %{private}s with associated AP %{private}s centroid %{private} s. Distance %{public}.1fm. LOI %{private}s",  &v33,  52);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocation(CL::Wifi1::Types::ComputedLocation &)",  "%s\n",  v29);
  }

  __int128 v15 = v5[2];
  __int128 v16 = v5[3];
  __int128 v17 = v5[4];
  *(_OWORD *)(a2 + 80) = v5[5];
  __int128 v18 = v5[1];
  *(_OWORD *)a2 = *v5;
  *(_OWORD *)(a2 + ++*(void *)(result + 16) = v18;
  *(_OWORD *)(a2 + ++*(void *)(result + 48) = v16;
  *(_OWORD *)(a2 + ++*(void *)(result + 64) = v17;
  *(_OWORD *)(a2 + ++*(void *)(result + 32) = v15;
  __int128 v19 = v5[6];
  __int128 v20 = v5[7];
  __int128 v21 = v5[8];
  *(_OWORD *)(a2 + 1++*(void *)(result + 40) = *(_OWORD *)((char *)v5 + 140);
  *(_OWORD *)(a2 + 112) = v20;
  *(_OWORD *)(a2 + 128) = v21;
  *(_OWORD *)(a2 + ++*(void *)(result + 96) = v19;
  *(_DWORD *)(a2 + 1++*(void *)(result + 56) = 1;
  *(_DWORD *)(a2 + 84) = 69;
  *(_BYTE *)(a2 + 180) = 1;
}

void sub_100B7AA58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B7AAC0()
{
  uint64_t result = sub_1004F6DCC();
  if ((_DWORD)result)
  {
    sub_1004F2598();
    return sub_1001B9A1C() ^ 1;
  }

  return result;
}

double sub_100B7AAE8(uint64_t a1, uint64_t a2)
{
  char v4 = sub_100F4BF44();
  if (sub_100F4C818((uint64_t)v4))
  {
    double result = *(double *)a2;
    if (*(double *)a2 >= -90.0 && result <= 90.0)
    {
      double result = *(double *)(a2 + 8);
      if (result <= 180.0 && result >= -180.0)
      {
        *(void *)(a1 + 712) = *(void *)(a2 + 16);
        double result = *(double *)(a2 + 40);
        *(double *)(a1 + 736) = result;
      }
    }
  }

  return result;
}

void sub_100B7AB6C(uint64_t a1)
{
  *(_DWORD *)(a1 + 1544) = 0;
  sub_100B780AC(a1, &v21);
  __int128 v2 = v24;
  *(_OWORD *)(a1 + 8++*(void *)(result + 24) = v23;
  *(_OWORD *)(a1 + 8++*(void *)(result + 40) = v2;
  *(_OWORD *)(a1 + 8++*(void *)(result + 56) = v25[0];
  *(_OWORD *)(a1 + 865) = *(_OWORD *)((char *)v25 + 9);
  __int128 v3 = v22;
  *(_OWORD *)(a1 + 792) = v21;
  *(_OWORD *)(a1 + 808) = v3;
  if (sub_100B7AAC0())
  {
    sub_100B77F3C(a1, __p);
    __int128 v4 = v19;
    *(_OWORD *)(a1 + 728) = v18;
    *(_OWORD *)(a1 + 744) = v4;
    *(_OWORD *)(a1 + 760) = v20[0];
    *(_OWORD *)(a1 + 769) = *(_OWORD *)((char *)v20 + 9);
    __int128 v5 = v17;
    *(_OWORD *)(a1 + 6++*(void *)(result + 96) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 712) = v5;
    sub_100BCD720((double *)&v21, (double *)(a1 + 696), a1);
    double v6 = *(double *)(a1 + 696);
    if (v6 >= -90.0 && v6 <= 90.0)
    {
      double v7 = *(double *)(a1 + 704);
      if (v7 <= 180.0 && v7 >= -180.0)
      {
        sub_100B7AAE8(a1, (uint64_t)&v21);
        sub_1010DDBC0(__p, "Valid: gnss_harvest_database");
        sub_1001CECD8(a1 + 888, (const std::string *)__p);
        if (SBYTE7(v17) < 0) {
          operator delete(__p[0]);
        }
        int v8 = 1;
LABEL_24:
        *(_DWORD *)(a1 + 1544) = v8;
        return;
      }
    }
  }

  sub_100B7821C(a1, (uint64_t)__p);
  __int128 v9 = v19;
  *(_OWORD *)(a1 + 728) = v18;
  *(_OWORD *)(a1 + 744) = v9;
  *(_OWORD *)(a1 + 760) = v20[0];
  *(_OWORD *)(a1 + 769) = *(_OWORD *)((char *)v20 + 9);
  __int128 v10 = v17;
  *(_OWORD *)(a1 + 6++*(void *)(result + 96) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 712) = v10;
  sub_100BCD720((double *)&v21, (double *)(a1 + 696), a1);
  double v11 = *(double *)(a1 + 696);
  if (v11 >= -90.0 && v11 <= 90.0)
  {
    double v12 = *(double *)(a1 + 704);
    if (v12 <= 180.0 && v12 >= -180.0)
    {
      sub_100B7AAE8(a1, (uint64_t)&v21);
      sub_1010DDBC0(__p, "Valid: local_store");
      sub_1001CECD8(a1 + 888, (const std::string *)__p);
      if (SBYTE7(v17) < 0) {
        operator delete(__p[0]);
      }
      int v8 = 3;
      goto LABEL_24;
    }
  }

  id v13 = sub_100F4BF44();
  if (sub_100F4C818((uint64_t)v13)
    && *(double *)&v21 >= -90.0
    && *(double *)&v21 <= 90.0
    && *((double *)&v21 + 1) <= 180.0
    && *((double *)&v21 + 1) >= -180.0)
  {
    sub_1010DDBC0(__p, "Valid: wifi_harvest_database");
    sub_1001CECD8(a1 + 888, (const std::string *)__p);
    if (SBYTE7(v17) < 0) {
      operator delete(__p[0]);
    }
    __int128 v14 = v24;
    *(_OWORD *)(a1 + 728) = v23;
    *(_OWORD *)(a1 + 744) = v14;
    *(_OWORD *)(a1 + 760) = v25[0];
    *(_OWORD *)(a1 + 769) = *(_OWORD *)((char *)v25 + 9);
    __int128 v15 = v22;
    *(_OWORD *)(a1 + 6++*(void *)(result + 96) = v21;
    *(_OWORD *)(a1 + 712) = v15;
    int v8 = 2;
    goto LABEL_24;
  }

  sub_1010DDBC0(__p, "Invalid");
  sub_1001CECD8(a1 + 888, (const std::string *)__p);
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100B7AE44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B7AE6C(uint64_t a1, __int128 *a2)
{
  __int128 v4 = sub_100F4BF44();
  if (!sub_100F4C4B4((uint64_t)v4))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    __int128 v9 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(__p);
      __int128 v10 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, skip updating computed location using associated AP %{private}s as it got disabled by CLWifi1Settings!",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v20 = qword_101934858;
      sub_1007EC360(&buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v32 = 136380675;
      std::stringbuf::string_type v33 = p_buf;
      __int128 v22 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v20,  0LL,  "WifiCalc, skip updating computed location using associated AP %{private}s as it got disable d by CLWifi1Settings!",  &v32,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocationIfPossible(CL::Wifi1::Types::ComputedLocation &)",  "%s\n",  (const char *)v22);
      if (v22 != __p) {
        free(v22);
      }
    }

    sub_1010DDBC0(__p, "NO: disabled_by_settings");
    sub_1001CECD0(a1 + 888, __p);
    goto LABEL_28;
  }

  sub_100B7AB6C(a1);
  sub_100C6AE8C(a1 + 792, (uint64_t)a2);
  double v5 = *(double *)(a1 + 696);
  if (v5 < -90.0 || v5 > 90.0 || (double v6 = *(double *)(a1 + 704), v6 > 180.0) || v6 < -180.0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    double v11 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(__p);
      double v12 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, skip updating computed location using associated AP %{private}s as it does not have a valid centroid!",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v23 = qword_101934858;
      sub_1007EC360(&buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v24 = &buf;
      }
      else {
        __int128 v24 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v32 = 136380675;
      std::stringbuf::string_type v33 = v24;
      std::string::size_type v25 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v23,  0LL,  "WifiCalc, skip updating computed location using associated AP %{private}s as it does not ha ve a valid centroid!",  &v32,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocationIfPossible(CL::Wifi1::Types::ComputedLocation &)",  "%s\n",  (const char *)v25);
      if (v25 != __p) {
        free(v25);
      }
    }

    sub_1010DDBC0(__p, "NO: centroid_invalid");
    sub_1001CECD0(a1 + 888, __p);
    goto LABEL_28;
  }

  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 624) + 48LL))(&buf);
  if (buf.__r_.__value_.__r.__words[0])
  {
    sub_10067AF00((uint64_t)buf.__r_.__value_.__l.__data_);
    sub_10067C320((uint64_t)buf.__r_.__value_.__l.__data_);
    uint64_t v7 = buf.__r_.__value_.__r.__words[0];
    sub_100B7B730(a1 + 696, (uint64_t)__p);
    int v8 = sub_10067E2B0(v7, (double *)__p);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    __int128 v14 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "WifiCalc, #warning, movingApDetector is null",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      LOWORD(v++*(void *)(result + 32) = 0;
      uint64_t v29 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, #warning, movingApDetector is null",  &v32,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL isBadClientSideCentroidByMovingApDetector(const std::shared_ptr<CLMovingApDetector> &, const CLWifiAccessPoint &)",  "%s\n",  (const char *)v29);
      if (v29 != __p) {
        free(v29);
      }
    }

    int v8 = 0;
  }

  int size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    __int128 v16 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  if (v8)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101873DF8);
    }
    __int128 v18 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007EC360(__p);
      __int128 v19 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "WifiCalc, skip updating computed location using associated AP %{private}s as it fails to pass cross-check with GPS/Cell!",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101873DF8);
      }
      uint64_t v26 = qword_101934858;
      sub_1007EC360(&buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &buf;
      }
      else {
        uint64_t v27 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v32 = 136380675;
      std::stringbuf::string_type v33 = v27;
      LODWORD(v30) = 12;
      char v28 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v26,  0LL,  "WifiCalc, skip updating computed location using associated AP %{private}s as it fails to pa ss cross-check with GPS/Cell!",  &v32,  v30);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocationIfPossible(CL::Wifi1::Types::ComputedLocation &)",  "%s\n",  (const char *)v28);
      if (v28 != __p) {
        free(v28);
      }
    }

    sub_1010DDBC0(__p, "NO: moving_ap_detector");
    sub_1001CECD0(a1 + 888, __p);
LABEL_28:
    return 0LL;
  }

  sub_1001CE89C(a1 + 888, (const std::string *)(a1 + 1512));
  sub_100B7A574(a1, a2);
  if (!sub_100B78C74(a1))
  {
    sub_1001CECC8(a1 + 888, 0);
    return 0LL;
  }

  sub_100B7A684(a1, (uint64_t)a2);
  sub_1001CECC8(a1 + 888, 1);
  return 1LL;
}

void sub_100B7B6C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B7B6FC(uint64_t a1)
{
  return sub_1001CECE0(a1 + 888);
}

void sub_100B7B704(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100B7B730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100C39CB0( a2,  *(void *)(a1 + 72),  *(_DWORD *)(a1 + 52),  *(_DWORD *)(a1 + 48),  0,  *(_DWORD *)(a1 + 24),  -1,  *(double *)a1,  *(double *)(a1 + 8),  *(double *)(a1 + 16),  *(double *)(a1 + 32),  *(double *)(a1 + 40),  *(double *)(a1 + 64));
  *(_BYTE *)(result + ++*(void *)(result + 88) = *(_BYTE *)(a1 + 88);
  return result;
}

void sub_100B7B788()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100B7B824(_Unwind_Exception *a1)
{
}

void sub_100B7B83C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100B7B8C8(_Unwind_Exception *a1)
{
}

void sub_100B7B8E0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100B7B944()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100B7B9B8(_Unwind_Exception *a1)
{
}

uint64_t sub_100B7B9D0(uint64_t a1)
{
  if (a1) {
    return sub_100B7C110(a1 - 8);
  }
  else {
    return sub_100B7C110(0LL);
  }
}

void sub_100B7B9E0(uint64_t a1)
{
  if (a1) {
    sub_100B7C5B8(a1 - 8);
  }
  else {
    sub_100B7C5B8(0LL);
  }
}

BOOL sub_100B7B9F0(uint64_t a1)
{
  if (a1) {
    return sub_100B7C37C(a1 - 8);
  }
  else {
    return sub_100B7C37C(0LL);
  }
}

void sub_100B7BA00(uint64_t a1)
{
  if (a1) {
    sub_100B7C7DC(a1 - 8);
  }
  else {
    sub_100B7C7DC(0LL);
  }
}

void sub_100B7BA10(uint64_t a1)
{
  if (a1) {
    sub_100B7C9DC((void *)(a1 - 8));
  }
  else {
    sub_100B7C9DC(0LL);
  }
}

void sub_100B7BA20(uint64_t a1)
{
  if (a1) {
    sub_100B7CB64((void *)(a1 - 8));
  }
  else {
    sub_100B7CB64(0LL);
  }
}

uint64_t sub_100B7BA30(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = &unk_101873E18;
  *(void *)(a1 + ++*(void *)(result + 16) = 8LL;
  *(_WORD *)(a1 + ++*(void *)(result + 24) = 512;
  *(void *)a1 = off_101873EE8;
  *(_WORD *)(a1 + 268) = 0;
  *(void *)(a1 + 272) = 0xC00000046LL;
  *(_DWORD *)(a1 + 280) = 56;
  *(void *)(a1 + 284) = 0x3851B7173727C5ACLL;
  __int128 v3 = (uint64_t *)(a1 + 296);
  *(void *)(a1 + 2++*(void *)(result + 96) = 0LL;
  *(void *)(a1 + 312) = a2;
  int v6 = 0;
  sub_10023AE2C((unsigned __int8 *)(a1 + 320), "ForceEnableNoMovementDetector", &v6, 0);
  __int128 v4 = operator new(0x98uLL);
  sub_1005B46A4((uint64_t)v4, a1);
  sub_100B7CDAC(v3, (uint64_t)v4);
  *(_BYTE *)(a1 + 2++*(void *)(result + 64) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  return a1;
}

void sub_100B7BB04(_Unwind_Exception *a1)
{
}

uint64_t sub_100B7BB34(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 296);
  if (result) {
    return sub_1005B46E8(result);
  }
  return result;
}

void sub_100B7BB44(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __int128 v4 = a2[2];
  *(_OWORD *)(a1 + ++*(void *)(result + 48) = a2[1];
  *(_OWORD *)(a1 + ++*(void *)(result + 64) = v4;
  *(_OWORD *)(a1 + ++*(void *)(result + 32) = v3;
  __int128 v5 = a2[3];
  __int128 v6 = a2[4];
  __int128 v7 = a2[6];
  *(_OWORD *)(a1 + 112) = a2[5];
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + ++*(void *)(result + 96) = v6;
  __int128 v8 = a2[7];
  __int128 v9 = a2[8];
  __int128 v10 = a2[10];
  *(_OWORD *)(a1 + ++*(void *)(result + 176) = a2[9];
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + ++*(void *)(result + 160) = v9;
  __int128 v11 = a2[11];
  __int128 v12 = a2[12];
  __int128 v13 = a2[13];
  *(void *)(a1 + 2++*(void *)(result + 56) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 2++*(void *)(result + 24) = v12;
  *(_OWORD *)(a1 + 2++*(void *)(result + 40) = v13;
  *(_OWORD *)(a1 + 208) = v11;
  uint64_t v14 = *((void *)a2 + 14);
  if (v14 == 14) {
    uint64_t v15 = *((void *)a2 + 7);
  }
  else {
    uint64_t v15 = sub_100B7CCEC(v14);
  }
  sub_100B7BDEC(v15, (uint64_t)buf);
  *(_OWORD *)(a1 + 268) = *(_OWORD *)buf;
  *(void *)(a1 + 284) = v31;
  sub_100CCCC8C(a1 + 8, 0, (uint64_t)&v24);
  if (qword_1019347F0 != -1) {
    dispatch_once(&qword_1019347F0, &stru_101873F50);
  }
  __int128 v16 = (os_log_s *)qword_1019347F8;
  if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = *(void *)(a1 + 144);
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 88);
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v17;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v18;
    *(_WORD *)&_BYTE buf[14] = 2048;
    uint64_t v31 = v19;
    __int16 v32 = 2048;
    uint64_t v33 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "[CLNoMovement] controller workoutEvent,workoutType,%d,eventType,%d,genericWorkoutLabel,%lu,hkWorkoutType,%lu",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101873F50);
    }
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 88);
    unint64_t v25 = __PAIR64__(*(void *)(a1 + 144), 67109888);
    LOWORD(v26) = 1024;
    *(_DWORD *)((char *)&v26 + 2) = v20;
    HIWORD(v26) = 2048;
    uint64_t v27 = v21;
    __int16 v28 = 2048;
    uint64_t v29 = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  1LL,  "[CLNoMovement] controller workoutEvent,workoutType,%d,eventType,%d,genericWorkoutLabel,%lu,hkWorkoutType,%lu",  &v25,  34,  v25,  v26);
    uint64_t v23 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNoMovementController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent)",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

uint64_t sub_100B7BDD0(uint64_t a1)
{
  if (*(void *)(a1 + 112) == 14LL) {
    return *(void *)(a1 + 56);
  }
  else {
    return sub_100B7CCEC(*(void *)(a1 + 112));
  }
}

uint64_t sub_100B7BDEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 4) = 0xC00000046LL;
  *(_DWORD *)(a2 + 12) = 56;
  *(void *)(a2 + ++*(void *)(result + 16) = 0x3851B7173727C5ACLL;
  switch(result)
  {
    case 1LL:
    case 2LL:
    case 3LL:
    case 4LL:
    case 5LL:
    case 6LL:
    case 8LL:
    case 9LL:
    case 10LL:
    case 11LL:
    case 12LL:
    case 13LL:
    case 16LL:
    case 17LL:
    case 18LL:
    case 20LL:
    case 22LL:
    case 23LL:
    case 24LL:
    case 25LL:
    case 27LL:
    case 28LL:
    case 31LL:
    case 34LL:
    case 35LL:
    case 36LL:
    case 37LL:
    case 38LL:
    case 39LL:
    case 41LL:
    case 42LL:
    case 43LL:
    case 44LL:
    case 45LL:
    case 46LL:
    case 47LL:
    case 48LL:
    case 49LL:
    case 50LL:
    case 51LL:
    case 52LL:
    case 53LL:
    case 54LL:
    case 55LL:
    case 58LL:
    case 59LL:
    case 60LL:
    case 63LL:
    case 64LL:
    case 65LL:
    case 68LL:
    case 69LL:
    case 72LL:
    case 73LL:
    case 74LL:
    case 75LL:
    case 77LL:
    case 78LL:
    case 79LL:
    case 80LL:
    case 82LL:
    case 83LL:
    case 84LL:
      *(_WORD *)a2 = 257;
      break;
    case 19LL:
    case 26LL:
      *(_WORD *)a2 = 256;
      *(_DWORD *)(a2 + 4) = 117;
      *(_DWORD *)(a2 + 12) = 117;
      goto LABEL_5;
    case 21LL:
    case 40LL:
    case 61LL:
    case 67LL:
    case 70LL:
    case 71LL:
      *(_WORD *)a2 = 257;
      *(void *)(a2 + 8) = 0x460000000CLL;
LABEL_5:
      *(_DWORD *)(a2 + 20) = 944879383;
      break;
    default:
      *(_WORD *)a2 = 0;
      break;
  }

  return result;
}

void sub_100B7BE80(uint64_t a1, int *a2)
{
  BOOL v3 = *a2 == 1 && *((_BYTE *)a2 + 26) != 0;
  *(_BYTE *)(a1 + 2++*(void *)(result + 64) = v3;
  sub_100CCCC8C(a1 + 8, 0, (uint64_t)&v11);
  if (qword_1019347F0 != -1) {
    dispatch_once(&qword_1019347F0, &stru_101873F50);
  }
  __int128 v4 = (os_log_s *)qword_1019347F8;
  if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_INFO))
  {
    int v5 = *a2;
    int v6 = *((unsigned __int8 *)a2 + 26);
    *(_DWORD *)std::string buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[CLNoMovement] controller wristState,onWrist,%d,isWristDetectionEnabled,%d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101873F50);
    }
    int v7 = *a2;
    int v8 = *((unsigned __int8 *)a2 + 26);
    v12[0] = 67109376;
    v12[1] = v7;
    __int16 v13 = 1024;
    int v14 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  1LL,  "[CLNoMovement] controller wristState,onWrist,%d,isWristDetectionEnabled,%d",  v12,  14);
    __int128 v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNoMovementController::feedWristState(const CLWatchOrientationSettingsNotifier_Type::WristState)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

void sub_100B7C084(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 304))
  {
    __int128 v2 = *(float **)(a1 + 296);
    if (v2) {
      sub_1005B4924(v2, a2);
    }
  }

id sub_100B7C09C(uint64_t a1, void *a2)
{
  id result = [a2 state];
  if (result == (id)1)
  {
    uint64_t v4 = a1 + 8;
    int v5 = &v7;
    int v6 = 1;
  }

  else
  {
    if (result != (id)2) {
      return result;
    }
    uint64_t v4 = a1 + 8;
    int v5 = &v8;
    int v6 = 2;
  }

  return (id)sub_100CCCC8C(v4, v6, (uint64_t)v5);
}

id sub_100B7C0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = *(id *)(a1 + 312);
  if (result) {
    return _[result onNoMovementControllerEpoch:a2 epochValue:a3];
  }
  return result;
}

uint64_t sub_100B7C110(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    BOOL v3 = v2 == 17;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  v6 = *(_BYTE *)(a1 + 269) && (v2 != 17 ? (BOOL v5 = v2 == 0) : (BOOL v5 = 1), v5) && *(_BYTE *)(a1 + 264) != 0;
  if (qword_1019347F0 != -1) {
    dispatch_once(&qword_1019347F0, &stru_101873F50);
  }
  char v7 = (os_log_s *)qword_1019347F8;
  if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_INFO))
  {
    int v8 = *(unsigned __int8 *)(a1 + 268);
    int v9 = *(unsigned __int8 *)(a1 + 269);
    int v10 = *(unsigned __int8 *)(a1 + 264);
    int v11 = *(unsigned __int8 *)(a1 + 304);
    *(_DWORD *)std::string buf = 67110400;
    BOOL v24 = v6;
    __int16 v25 = 1024;
    int v26 = v8;
    __int16 v27 = 1024;
    int v28 = v9;
    __int16 v29 = 1024;
    int v30 = v4;
    __int16 v31 = 1024;
    int v32 = v10;
    __int16 v33 = 1024;
    int v34 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[CLNoMovement] controller: shouldEnable,%d,shouldServeDetectionToClients,%d,shouldEnableForWorkout,%d,isManualStar tOrResumeEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101873F50);
    }
    __int16 v13 = *(unsigned __int8 *)(a1 + 268);
    int v14 = *(unsigned __int8 *)(a1 + 269);
    int v15 = *(unsigned __int8 *)(a1 + 304);
    LOWORD(v19) = 1024;
    HIWORD(v19) = v13;
    LOWORD(v20) = HIWORD(v4);
    HIWORD(v20) = 1024;
    __int16 v21 = 1024;
    int v22 = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  1LL,  "[CLNoMovement] controller: shouldEnable,%d,shouldServeDetectionToClients,%d,shouldEnableForWorkout,%d,isManualStar tOrResumeEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d",  &v18,  38,  67110400,  v19,  v14,  v20);
    __int16 v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLNoMovementController::shouldEnable(const EToggle *) const",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  return *(_DWORD *)(a1 + 324) || v6;
}

BOOL sub_100B7C37C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  BOOL v4 = v2 == 1 || v2 == 16;
  if (*(_BYTE *)(a1 + 304)) {
    BOOL v6 = v2 == 1 || v2 == 16 || *(_BYTE *)(a1 + 264) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (qword_1019347F0 != -1) {
    dispatch_once(&qword_1019347F0, &stru_101873F50);
  }
  char v7 = (os_log_s *)qword_1019347F8;
  if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_INFO))
  {
    int v8 = *(unsigned __int8 *)(a1 + 264);
    int v9 = *(unsigned __int8 *)(a1 + 304);
    *(_DWORD *)std::string buf = 67109888;
    BOOL v21 = v6;
    __int16 v22 = 1024;
    BOOL v23 = v4;
    __int16 v24 = 1024;
    int v25 = v8;
    __int16 v26 = 1024;
    int v27 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[CLNoMovement] controller: shouldDisable,%d,isManualStopOrPauseEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d",  buf,  0x1Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101873F50);
    }
    int v11 = *(unsigned __int8 *)(a1 + 264);
    int v12 = *(unsigned __int8 *)(a1 + 304);
    LOWORD(v++*(void *)(result + 16) = 1024;
    HIWORD(v++*(void *)(result + 16) = v4;
    int v17 = v11;
    __int16 v18 = 1024;
    int v19 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  1LL,  "[CLNoMovement] controller: shouldDisable,%d,isManualStopOrPauseEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d",  &v15,  26,  67109888,  v16);
    int v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLNoMovementController::shouldDisable(const EToggle *) const",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  return !*(_DWORD *)(a1 + 324) && v6;
}

void sub_100B7C5B8(uint64_t a1)
{
  *(_BYTE *)(a1 + 304) = 1;
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2) {
    [v2 onNoMovementControllerEnablement:1];
  }
  *(_OWORD *)int v14 = *(_OWORD *)(a1 + 272);
  *(_DWORD *)&uint8_t v14[16] = *(_DWORD *)(a1 + 288);
  sub_10023AE2C(v12, "NoMovementEpochsPerWindow", v14, 0);
  sub_10023AE2C(v10, "NoMovementDetectionEpochThreshold", &v14[8], 0);
  *(_DWORD *)int v14 = v13;
  *(_DWORD *)&_DWORD v14[4] = 12;
  *(_DWORD *)&_WORD v14[8] = v11;
  *(void *)&v14[12] = 0x3851B7173727C5ACLL;
  uint64_t v3 = *(void *)(a1 + 296);
  if (v3)
  {
    __int128 v8 = *(_OWORD *)v14;
    int v9 = *(_DWORD *)&v14[16];
    sub_1005B46F0(v3, &v8);
  }

  if (qword_1019347F0 != -1) {
    dispatch_once(&qword_1019347F0, &stru_101873F50);
  }
  BOOL v4 = (os_log_s *)qword_1019347F8;
  if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "[CLNoMovement] controller: fsm action enable",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101873F50);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  2LL,  "[CLNoMovement] controller: fsm action enable",  v7,  2);
    BOOL v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLNoMovementController::enable(const EToggle *)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

void sub_100B7C7DC(uint64_t a1)
{
  *(_BYTE *)(a1 + 304) = 0;
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2) {
    [v2 onNoMovementControllerEnablement:0];
  }
  uint64_t v3 = *(void *)(a1 + 296);
  if (v3) {
    sub_1005B4634(v3);
  }
  sub_100B7C98C((void *)a1);
  if (qword_1019347F0 != -1) {
    dispatch_once(&qword_1019347F0, &stru_101873F50);
  }
  BOOL v4 = (os_log_s *)qword_1019347F8;
  if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "[CLNoMovement] controller: fsm action disable",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101873F50);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  2LL,  "[CLNoMovement] controller: fsm action disable",  v7,  2);
    BOOL v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLNoMovementController::disable(const EToggle *)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

void *sub_100B7C98C(void *result)
{
  uint64_t v1 = (void *)result[39];
  if (v1 && *((_BYTE *)result + 268))
  {
    uint64_t v2 = result[37];
    if (v2) {
      uint64_t v3 = sub_1005B46E8(v2);
    }
    else {
      uint64_t v3 = 0LL;
    }
    return _[v1 onNoMovementControllerStateUpdate:v3];
  }

  return result;
}

void sub_100B7C9DC(void *a1)
{
  if (qword_1019347F0 != -1) {
    dispatch_once(&qword_1019347F0, &stru_101873F50);
  }
  uint64_t v1 = (os_log_s *)qword_1019347F8;
  if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "[CLNoMovement] controller: fsm action signal movement transition",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101873F50);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  2LL,  "[CLNoMovement] controller: fsm action signal movement transition",  v4,  2);
    uint64_t v3 = (uint8_t *)v2;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNoMovementController::signalTransition(const EDetectMove *)",  "%s\n",  v2);
    if (v3 != buf) {
      free(v3);
    }
  }

void sub_100B7CB64(void *a1)
{
  if (qword_1019347F0 != -1) {
    dispatch_once(&qword_1019347F0, &stru_101873F50);
  }
  uint64_t v1 = (os_log_s *)qword_1019347F8;
  if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "[CLNoMovement] controller: fsm action signal no-movement transition",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101873F50);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  2LL,  "[CLNoMovement] controller: fsm action signal no-movement transition",  v4,  2);
    uint64_t v3 = (uint8_t *)v2;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNoMovementController::signalTransition(const EDetectNoMove *)",  "%s\n",  v2);
    if (v3 != buf) {
      free(v3);
    }
  }

uint64_t sub_100B7CCEC(uint64_t a1)
{
  else {
    return *(void *)&a4[8 * a1 - 8];
  }
}

void *sub_100B7CD10(void *a1)
{
  *a1 = off_101873EE8;
  sub_100B7CDAC(a1 + 37, 0LL);
  return a1;
}

void sub_100B7CD48(uint64_t *a1)
{
  *a1 = (uint64_t)off_101873EE8;
  sub_100B7CDAC(a1 + 37, 0LL);
  operator delete(a1);
}

void sub_100B7CD80(id a1)
{
  qword_1019347F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CheckIn");
}

void sub_100B7CDAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    BOOL v4 = (void *)sub_1005B46E4(v3);
    operator delete(v4);
  }

uint64_t sub_100B7CDD8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101873F90);
  }
  BOOL v6 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *((void *)a2 + 1);
    int v8 = *((_DWORD *)a2 + 4);
    int v9 = *((_DWORD *)a2 + 5);
    int v10 = *((_DWORD *)a2 + 10);
    int v11 = *((unsigned __int8 *)a2 + 60);
    *(_DWORD *)std::string buf = 68290307;
    *(_DWORD *)char v235 = 0;
    *(_WORD *)&v235[4] = 2082;
    *(void *)&v235[6] = "";
    *(_WORD *)&v235[14] = 2050;
    *(void *)&v235[16] = v7;
    *(_WORD *)&v235[24] = 1025;
    *(_DWORD *)&v235[26] = v8;
    *(_WORD *)&v235[30] = 1025;
    *(_DWORD *)&v235[32] = v9;
    *(_WORD *)&v235[36] = 1026;
    *(_DWORD *)&v235[38] = v10;
    *(_WORD *)&v235[42] = 1026;
    *(_DWORD *)char v236 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Input, Elevation,, startTime:%{public}.2f, elevationAscended:%{private}d, e levationDescended:%{private}d, source:%{public}d, isWorkoutElevationFusion:%{public}hhd}",  buf,  0x34u);
  }

  if (*((_DWORD *)a2 + 10) == 1000) {
    return 0LL;
  }
  double v12 = *((double *)a2 + 1);
  double v13 = *(double *)(a1 + 8);
  double v14 = vabdd_f64(v12, v13);
  int v15 = *((unsigned __int8 *)a2 + 60);
  int v16 = *(unsigned __int8 *)(a1 + 60);
  if (v14 > 30.0 || (v13 >= 0.0 ? (BOOL v17 = v15 == v16) : (BOOL v17 = 0), !v17))
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101873F90);
    }
    int v30 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
    {
      double v31 = *(double *)(a1 + 8);
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)char v235 = 0;
      *(_WORD *)&v235[4] = 2082;
      *(void *)&v235[6] = "";
      *(_WORD *)&v235[14] = 1026;
      *(_DWORD *)&v235[16] = v14 > 30.0;
      *(_WORD *)&v235[20] = 1026;
      *(_DWORD *)&v235[22] = v31 < 0.0;
      *(_WORD *)&v235[26] = 1026;
      *(_DWORD *)&v235[28] = v15 == v16;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Input, Elevation, Reset, isTimeout:%{public}hhd, isUninitialized:%{public}hhd, isSameFusionMode:%{public}hhd}",  buf,  0x24u);
    }

    __int128 v32 = a2[2];
    __int128 v33 = a2[3];
    __int128 v34 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + ++*(void *)(result + 16) = v34;
    *(_OWORD *)(a1 + ++*(void *)(result + 32) = v32;
    *(_OWORD *)(a1 + ++*(void *)(result + 48) = v33;
    *(float *)&__int128 v32 = (float)((float)*(unsigned int *)(a1 + 16) - (float)*(unsigned int *)(a1 + 20)) * 0.01;
    *(_DWORD *)(a1 + 72) = v32;
    *(void *)(a1 + ++*(void *)(result + 64) = *(void *)(a1 + 8);
    __int16 v35 = *(void ***)(a1 + 168);
    uint64_t v36 = *(void *)(a1 + 176);
    *(void *)(a1 + 200) = 0LL;
    unint64_t v37 = v36 - (void)v35;
    if (v37 >= 0x11)
    {
      do
      {
        operator delete(*v35);
        uint64_t v38 = *(void *)(a1 + 176);
        __int16 v35 = (void **)(*(void *)(a1 + 168) + 8LL);
        *(void *)(a1 + ++*(void *)(result + 168) = v35;
        unint64_t v37 = v38 - (void)v35;
      }

      while (v37 > 0x10);
    }

    if (v37 >> 3 == 1)
    {
      uint64_t v39 = 512LL;
    }

    else
    {
      if (v37 >> 3 != 2) {
        goto LABEL_41;
      }
      uint64_t v39 = 1024LL;
    }

    *(void *)(a1 + 192) = v39;
LABEL_41:
    uint64_t v50 = *(void ***)(a1 + 216);
    uint64_t v51 = *(void *)(a1 + 224);
    *(void *)(a1 + 2++*(void *)(result + 48) = 0LL;
    unint64_t v52 = v51 - (void)v50;
    if (v52 >= 0x11)
    {
      do
      {
        operator delete(*v50);
        uint64_t v53 = *(void *)(a1 + 224);
        uint64_t v50 = (void **)(*(void *)(a1 + 216) + 8LL);
        *(void *)(a1 + 2++*(void *)(result + 16) = v50;
        unint64_t v52 = v53 - (void)v50;
      }

      while (v52 > 0x10);
    }

    if (v52 >> 3 == 1)
    {
      uint64_t v54 = 512LL;
    }

    else
    {
      if (v52 >> 3 != 2)
      {
LABEL_48:
        *(_DWORD *)std::string buf = 0;
        sub_10047109C((void *)(a1 + 160), (float *)buf);
        *(_DWORD *)std::string buf = 0;
        sub_10047109C((void *)(a1 + 208), (float *)buf);
        return 0LL;
      }

      uint64_t v54 = 1024LL;
    }

    *(void *)(a1 + 2++*(void *)(result + 40) = v54;
    goto LABEL_48;
  }

  double v215 = *(double *)&a3;
  float v18 = -(*(float *)(a1 + 72) - (float)((float)*((unsigned int *)a2 + 4) - (float)*((unsigned int *)a2 + 5)) * 0.01);
  float v19 = v12 - *(double *)(a1 + 64);
  float v218 = v19;
  float v219 = v18;
  sub_10047109C((void *)(a1 + 160), &v218);
  sub_10047109C((void *)(a1 + 208), &v219);
  unint64_t v21 = *(void *)(a1 + 192);
  unint64_t v22 = *(void *)(a1 + 200);
  uint64_t v23 = *(void *)(a1 + 168);
  if (v24 > 120.0)
  {
    *(void *)&__int128 v20 = 134218240LL;
    __int128 v216 = v20;
    uint64_t v217 = 1LL;
    while (v22 >= 2)
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101873F90);
      }
      double v25 = v24;
      __int16 v26 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v27 = *(void *)(a1 + 200);
        *(_DWORD *)std::string buf = v216;
        *(void *)char v235 = v27;
        *(_WORD *)&v235[8] = 2048;
        *(double *)&v235[10] = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "Input, Elevation, beyond time window, buffer size, %lu, deltaTime, %f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101873F90);
        }
        uint64_t v28 = *(void *)(a1 + 200);
        int v220 = v216;
        *(void *)char v221 = v28;
        *(_WORD *)&v221[8] = 2048;
        *(double *)&v221[10] = v25;
        LODWORD(v209) = 22;
        __int16 v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Input, Elevation, beyond time window, buffer size, %lu, deltaTime, %f",  &v220,  v209);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)",  "%s\n",  v29);
      }

      *(int64x2_t *)(a1 + 192) = vaddq_s64(*(int64x2_t *)(a1 + 192), (int64x2_t)xmmword_1012CE4D0);
      sub_10074E0DC(a1 + 160, 1);
      *(int64x2_t *)(a1 + 2++*(void *)(result + 40) = vaddq_s64(*(int64x2_t *)(a1 + 240), (int64x2_t)xmmword_1012CE4D0);
      sub_10074E0DC(a1 + 208, 1);
      unint64_t v22 = *(void *)(a1 + 200);
      unint64_t v21 = *(void *)(a1 + 192);
      uint64_t v23 = *(void *)(a1 + 168);
      if (v24 <= 120.0) {
        goto LABEL_35;
      }
    }

    return 0LL;
  }

void *sub_100B7E168(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 2) + ((a4 - a2) << 7) - ((a3 - *(void *)a2) >> 2);
  }
  uint64_t v7 = a1[1];
  int v8 = (char *)(v7 + 8LL * (a1[4] >> 10));
  if (a1[2] == v7) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = *(void *)v8 + 4 * (a1[4] & 0x3FFLL);
  }
  __int128 v33 = (char **)(v7 + 8LL * (a1[4] >> 10));
  __int128 v34 = (char *)v9;
  if (v9 == a3) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 2) + ((a2 - v8) << 7) - ((v9 - *(void *)v8) >> 2);
  }
  int v11 = (char **)sub_10082377C((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      float v19 = v11;
      __int128 v20 = v12;
      unint64_t v21 = v33;
      unint64_t v22 = v34;
      uint64_t v23 = sub_10082377C((uint64_t)&v32, v6);
      sub_100B7E434(v21, v22, v19, v20, v23, v24, &v35);
      double v25 = v34;
      if (v34 != v36)
      {
        __int16 v26 = v33;
        do
        {
          v25 += 4;
          __int128 v34 = v25;
          if (v25 - *v26 == 4096)
          {
            uint64_t v27 = v26[1];
            ++v26;
            double v25 = v27;
            __int128 v33 = v26;
            __int128 v34 = v27;
          }
        }

        while (v25 != v36);
      }

      uint64_t v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
    }

    else
    {
      double v13 = (char **)sub_10082377C((uint64_t)&v32, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      BOOL v17 = (char **)(v16 + 8 * (v15 >> 10));
      if (a1[2] == v16) {
        float v18 = 0LL;
      }
      else {
        float v18 = &(*v17)[4 * (v15 & 0x3FF)];
      }
      __n128 v35 = v32;
      sub_100B7E5B8(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_100B7E3C8(a1, 1) & 1) != 0)
        ;
    }
  }

  uint64_t v29 = a1[1];
  if (a1[2] == v29) {
    uint64_t v30 = 0LL;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 8LL * (a1[4] >> 10)) + 4 * (a1[4] & 0x3FFLL);
  }
  v35.n128_u64[0] = v29 + 8LL * (a1[4] >> 10);
  v35.n128_u64[1] = v30;
  return sub_10082377C((uint64_t)&v35, v10);
}

void sub_100B7E39C(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100B7E3C8(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

__n128 sub_100B7E434@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    float v19 = a2;
    float v18 = a4;
    unint64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    double v13 = a3 - 1;
    double v12 = *a3;
    double v14 = a4;
    unint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100B7E500(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      unint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      BOOL v17 = *v13--;
      double v12 = v17;
      double v14 = v17 + 4096;
    }

    float v18 = *a1 + 4096;
    float v19 = a2;
  }

  sub_100B7E500(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100B7E500@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    int v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 2 >= v12 >> 2) {
        uint64_t v13 = v12 >> 2;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 2;
      }
      v11 -= 4 * v13;
      a4 -= 4 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 4 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }

    if ((char *)(*v6 + 4096LL) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100B7E5B8(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    int v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }

  else
  {
    int v8 = a1 + 1;
    sub_100B7E684(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_100B7E684(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }

    uint64_t v10 = *a3;
    int v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }

  sub_100B7E684(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100B7E684@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 2 >= v11 >> 2 ? v11 >> 2 : (a3 - v9) >> 2;
      if (v12) {
        __int128 __src = (char *)memmove(__dst, v9, 4 * v12);
      }
      v9 += 4 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __uuid_t dst = v13;
    }

    __dst += 4 * v12;
    else {
      --v6;
    }
  }

  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

float sub_100B7E740(float *a1, uint64_t a2)
{
  uint64_t v3 = (float *)((char *)&unk_10134C328 + 20 * *(unsigned int *)a1);
  float v4 = a1[5];
  if (v4 >= 18.0) {
    float v5 = (float)((float)((float)(*v3 + (float)((float)(v3[2] * a1[2]) * 100.0)) + (float)(v3[1] * a1[3]))
  }
  else {
    float v5 = (float)((float)((float)((float)(*v3 + (float)((float)(v3[2] * a1[2]) * 100.0)) + (float)(v3[1] * a1[3]))
  }
                       + (float)(v3[3] * v4))
  unsigned int v6 = *((_DWORD *)a1 + 10);
  sub_1004F2598();
  if (sub_1001B9A1C() && v6)
  {
    float v7 = fminf(v5, 1.0);
    if ((_DWORD)a2)
    {
      char isTypeStatic = CLMotionActivity::isTypeStatic(a2);
      float v9 = fmaxf(v7, 1.0);
      if ((isTypeStatic & 1) == 0) {
        return v9;
      }
    }
  }

  else
  {
    float v7 = fminf(v5, 2.1);
    if ((_DWORD)a2 && (CLMotionActivity::isTypeStatic(a2) & 1) == 0) {
      return fmaxf(v7, 1.3);
    }
  }

  return v7;
}

uint64_t sub_100B7E828()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199AC10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199AC10))
  {
    sub_1002F0B04(v3);
    else {
      int v2 = 50;
    }
    sub_10000AE14((uint64_t)v3);
    dword_10199AC08 = v2;
    __cxa_guard_release(&qword_10199AC10);
  }

  return dword_10199AC08;
}

void sub_100B7E8BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B7E8E4()
{
  if (byte_1019A1D20)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101873FB0);
    }
    unsigned __int8 v0 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "CLMM, memory cache and tile count limit already set",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101873FB0);
      }
      LOWORD(v6[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM, memory cache and tile count limit already set",  v6,  2);
      int v2 = (uint8_t *)v1;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()",  "%s\n",  v1);
      if (v2 != buf) {
        free(v2);
      }
    }
  }

  else
  {
    +[GEOTileLoader setMemoryCacheCountLimit:](&OBJC_CLASS___GEOTileLoader, "setMemoryCacheCountLimit:", 9LL);
    +[GEOTileLoader setMemoryCacheTotalCostLimit:]( &OBJC_CLASS___GEOTileLoader,  "setMemoryCacheTotalCostLimit:",  153600LL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101873FB0);
    }
    uint64_t v3 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109376;
      int v10 = 153600;
      __int16 v11 = 1024;
      int v12 = 9;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "CLMM,GEOTileLoader memory cache,%d,tile count limit,%d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101873FB0);
      }
      v6[0] = 67109376;
      v6[1] = 153600;
      __int16 v7 = 1024;
      int v8 = 9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,GEOTileLoader memory cache,%d,tile count limit,%d",  v6,  14);
      float v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }

    byte_1019A1D20 = 1;
  }

void sub_100B7EC1C(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_100B7EC48(uint64_t a1)
{
  int v2 = operator new(0x1B8uLL);
  sub_100298160(v2, 0);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = dispatch_queue_create("com.apple.CLContextConfigurationManager", 0LL);
  *(_OWORD *)(a1 + ++*(void *)(result + 16) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 32) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 48) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(result + 64) = 0;
  return a1;
}

void sub_100B7ECA4(_Unwind_Exception *a1)
{
}

uint64_t sub_100B7ECB8()
{
  unsigned __int8 v0 = operator new(0x48uLL);
  uint64_t result = sub_100B7EC48((uint64_t)v0);
  qword_1019A1D28 = (uint64_t)v0;
  return result;
}

void sub_100B7ECE8(_Unwind_Exception *a1)
{
}

uint64_t sub_100B7ECFC()
{
  if (qword_10199AC20 != -1) {
    dispatch_once(&qword_10199AC20, &stru_101873FD0);
  }
  return qword_1019A1D28;
}

uint64_t sub_100B7ED40(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v34 = 0LL;
  __n128 v35 = &v34;
  uint64_t v36 = 0x3052000000LL;
  unint64_t v37 = sub_100B7F730;
  uint64_t v38 = sub_100B7F740;
  uint64_t v39 = 0LL;
  unsigned int v6 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100B7F74C;
  block[3] = &unk_101873FF8;
  void block[5] = &v34;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync(v6, block);
  if (!v35[5])
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    __int128 v15 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] No valid configuration found, parameter %@ left unchanged.",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_56;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    int v40 = 138412290;
    uint64_t v41 = a2;
    double v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] No valid configuration found, parameter %@ left unchanged.",  &v40,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)",  "%s\n",  v14);
    goto LABEL_49;
  }

  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  uint64_t v8 = sub_1002A832C(*(uint64_t *)buf, a2, &v32);
  int v9 = v8;
  int v10 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_6;
  }
  __int16 v11 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v9) {
      goto LABEL_7;
    }
  }

  else
  {
LABEL_6:
    if ((_DWORD)v8)
    {
LABEL_7:
      *a3 = v32;
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      uint64_t v13 = (os_log_s *)qword_101934738;
      if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Value for key %@ set on disk, returning.",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      int v40 = 138412290;
      uint64_t v41 = a2;
      double v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] Value for key %@ set on disk, returning.",  &v40,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)",  "%s\n",  v14);
LABEL_49:
      if (v14 == buf)
      {
LABEL_56:
        uint64_t v22 = 0LL;
        goto LABEL_57;
      }

void sub_100B7F6DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100B7F730(uint64_t a1, uint64_t a2)
{
}

void sub_100B7F740(uint64_t a1)
{
}

void sub_100B7F74C(void *a1)
{
  uint64_t v2 = a1[6];
  if (*(_DWORD *)(v2 + 64) == 1)
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    uint64_t v3 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = a1[4];
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v29 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Configuration state inactive (parameter=%@)",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      uint64_t v5 = a1[4];
      LODWORD(v1_Block_object_dispose(va, 8) = 138412290;
      *(void *)((char *)&v18 + 4) = v5;
      unsigned int v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] Configuration state inactive (parameter=%@)",  &v18,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke",  "%s\n",  v6);
    }
  }

  else
  {
    __int128 v18 = 0uLL;
    int v19 = 0;
    sub_1010DDBC0(&v20, "");
    sub_1010DDBC0(&v22, "");
    sub_1010DDBC0(&v24, "");
    sub_1010DDBC0(__p, "");
    if (sub_100298470(*(void *)v2, (uint64_t)&v18) == 100)
    {
      if ((void)v18)
      {
        *(_DWORD *)(v2 + ++*(void *)(result + 64) = 2;
        if (v27 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(void *)(*(void *)(a1[5] + 8LL) + 4sub_100B7CDAC(v1, 0LL) = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v7);
        if (qword_101934730 != -1) {
          dispatch_once(&qword_101934730, &stru_101874040);
        }
        uint64_t v8 = (os_log_s *)qword_101934738;
        if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
          *(_DWORD *)std::string buf = 138412290;
          uint64_t v29 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Received parameter string %@.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934730 != -1) {
            dispatch_once(&qword_101934730, &stru_101874040);
          }
          uint64_t v10 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
          int v16 = 138412290;
          uint64_t v17 = v10;
          __int16 v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] Received parameter string %@.",  &v16,  12);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke",  "%s\n",  v11);
        }
      }

      else
      {
        if (qword_101934730 != -1) {
          dispatch_once(&qword_101934730, &stru_101874040);
        }
        uint64_t v13 = (os_log_s *)qword_101934738;
        if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] No records in DB.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934730 != -1) {
            dispatch_once(&qword_101934730, &stru_101874040);
          }
          LOWORD(v++*(void *)(result + 16) = 0;
          __int128 v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] No records in DB.",  &v16,  2);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke",  "%s\n",  v15);
        }

        *(_DWORD *)(v2 + ++*(void *)(result + 64) = 1;
      }
    }

    else
    {
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      unint64_t v12 = (os_log_s *)qword_101934738;
      if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Error querying DB.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934730 != -1) {
          dispatch_once(&qword_101934730, &stru_101874040);
        }
        LOWORD(v++*(void *)(result + 16) = 0;
        double v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] Error querying DB.",  &v16,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke",  "%s\n",  v14);
      }

      *(_DWORD *)(v2 + ++*(void *)(result + 64) = 0;
    }

    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
  }

void sub_100B7FDC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
}

id sub_100B7FE30(uint64_t a1, void *a2)
{
  uint64_t v7 = 0LL;
  id v2 = +[NSJSONSerialization JSONObjectWithData:options:error:]( NSJSONSerialization,  "JSONObjectWithData:options:error:",  [a2 dataUsingEncoding:4],  0,  &v7);
  if (v2) {
    BOOL v3 = v7 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3)
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    uint64_t v4 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412546;
      id v13 = v2;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "[Dynamic Config] Parse error: %@, error: %@",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      int v8 = 138412546;
      id v9 = v2;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      unsigned int v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  16LL,  "[Dynamic Config] Parse error: %@, error: %@",  &v8,  22);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSDictionary *CLContextConfigurationManager::stringToDictionary(NSString *)",  "%s\n",  v6);
    }

    return 0LL;
  }

  return v2;
}

uint64_t sub_100B80038(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 0LL;
  if (a2 && a3)
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(a3, v6) & 1) == 0) {
      return 0LL;
    }
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString);
    if ((objc_opt_isKindOfClass(a2, v7) & 1) == 0) {
      return 0LL;
    }
    [a3 doubleValue];
    double v9 = v8;
    id v10 = [(id)qword_10199AC18 objectForKey:a2];
    if (!v10)
    {
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      int v16 = (os_log_s *)qword_101934738;
      if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v23 = a2;
        __int16 v24 = 2112;
        uint64_t v25 = qword_10199AC18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] No bounds defined for parameter %@. Defined bounds are %@",  buf,  0x16u);
      }

      if (!sub_1002921D0(115, 2)) {
        return 0LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      int v18 = 138412546;
      uint64_t v19 = a2;
      __int16 v20 = 2112;
      uint64_t v21 = qword_10199AC18;
      uint64_t v15 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] No bounds defined for parameter %@. Defined bounds are %@",  &v18,  22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::isParameterSafe(NSString *, id)",  "%s\n");
      goto LABEL_26;
    }

    uint64_t v11 = v10;
    objc_msgSend(objc_msgSend(v10, "objectAtIndexedSubscript:", 0), "doubleValue");
    if (v9 < v12
      || (uint64_t v3 = 1, objc_msgSend(objc_msgSend(v11, "objectAtIndexedSubscript:", 1), "doubleValue"), v9 > v13))
    {
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      __int16 v14 = (os_log_s *)qword_101934738;
      if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v23 = a2;
        __int16 v24 = 2112;
        uint64_t v25 = (uint64_t)a3;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[Dynamic Config] Out of bounds: Parameter %@ cannot be set to %@",  buf,  0x16u);
      }

      uint64_t v3 = 0LL;
      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934730 != -1) {
          dispatch_once(&qword_101934730, &stru_101874040);
        }
        int v18 = 138412546;
        uint64_t v19 = a2;
        __int16 v20 = 2112;
        uint64_t v21 = (uint64_t)a3;
        uint64_t v15 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  16LL,  "[Dynamic Config] Out of bounds: Parameter %@ cannot be set to %@",  &v18,  22);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLContextConfigurationManager::isParameterSafe(NSString *, id)",  "%s\n");
LABEL_26:
        if (v15 != buf) {
          free(v15);
        }
        return 0LL;
      }
    }
  }

  return v3;
}

uint64_t sub_100B803FC(uint64_t a1, void *a2)
{
  if (!a2) {
    return 112LL;
  }
  if (sub_100B80984(a1, a2))
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    uint64_t v4 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138477827;
      *(void *)((char *)&buf + 4) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[Dynamic Config] Valid config received: %{private}@",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      int v24 = 138477827;
      uint64_t v25 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934738,  0LL,  "[Dynamic Config] Valid config received: %{private}@",  &v24,  12);
      int v16 = (char *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)",  "%s\n",  v15);
    }

    unsigned int v5 = objc_msgSend( objc_msgSend( a2,  "objectForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "kPriority")),  "intValue");
    id v6 = objc_msgSend( a2,  "objectForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kConfigId"));
    id v7 = objc_msgSend( a2,  "objectForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kAppBundleIdentifier"));
    id v8 = objc_msgSend( a2,  "objectForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kStudyId"));
    id v9 = objc_msgSend( a2,  "objectForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kParameterDictionary"));
    if (v6 && v7 && v8 && v9)
    {
      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v27 = 0x2020000000LL;
      int v28 = 103;
      id v10 = *(dispatch_queue_s **)(a1 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100B80D54;
      block[3] = &unk_101874020;
      block[8] = &buf;
      block[9] = a1;
      block[4] = v6;
      void block[5] = v9;
      unsigned int v23 = v5;
      block[6] = v7;
      void block[7] = v8;
      dispatch_sync(v10, block);
      uint64_t v11 = *(unsigned int *)(*((void *)&buf + 1) + 24LL);
      _Block_object_dispose(&buf, 8);
    }

    else
    {
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      double v13 = (os_log_s *)qword_101934738;
      if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[Dynamic Config] Nil value received for one or more fields.",  (uint8_t *)&buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934730 != -1) {
          dispatch_once(&qword_101934730, &stru_101874040);
        }
        LOWORD(v++*(void *)(result + 24) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934738,  16LL,  "[Dynamic Config] Nil value received for one or more fields.",  &v24,  v21);
        __int16 v20 = (char *)v19;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)",  "%s\n",  v19);
      }

      return 107LL;
    }
  }

  else
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    double v12 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138477827;
      *(void *)((char *)&buf + 4) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[Dynamic Config] Invalid config received: %{private}@",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      int v24 = 138477827;
      uint64_t v25 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934738,  0LL,  "[Dynamic Config] Invalid config received: %{private}@",  &v24,  12);
      int v18 = (char *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)",  "%s\n",  v17);
    }

    return 100LL;
  }

  return v11;
}

BOOL sub_100B80984(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 count] > 4)
  {
    v21[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "kPriority");
    v21[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "kConfigId");
    uint64_t v21[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "kAppBundleIdentifier");
    v21[3] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "kStudyId");
    v21[4] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "kParameterDictionary");
    id v6 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v21, 5LL);
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v7 = -[NSArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v14,  v20,  16LL);
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v15;
LABEL_12:
      uint64_t v10 = 0LL;
      while (1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v14 + 1) + 8 * v10);
        if (![a2 objectForKey:v11]) {
          break;
        }
        if (v8 == (id)++v10)
        {
          id v8 = -[NSArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v14,  v20,  16LL);
          BOOL result = 1LL;
          if (v8) {
            goto LABEL_12;
          }
          return result;
        }
      }

      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      double v12 = (os_log_s *)qword_101934738;
      if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v23 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[Dynamic Config] Invalid configuration: key %@ not found.",  buf,  0xCu);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934730 != -1) {
          dispatch_once(&qword_101934730, &stru_101874040);
        }
        int v18 = 138412290;
        uint64_t v19 = v11;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  0LL,  "[Dynamic Config] Invalid configuration: key %@ not found.",  &v18,  12);
        goto LABEL_27;
      }
    }

    else
    {
      return 1LL;
    }
  }

  else
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    uint64_t v3 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Invalid configuration: too few keys.",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      LOWORD(v1_Block_object_dispose(va, 8) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] Invalid configuration: too few keys.",  &v18,  2);
LABEL_27:
      double v13 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLContextConfigurationManager::isConfigValid(const NSDictionary<NSString *,id> *)",  "%s\n",  v5);
      if (v13 != buf) {
        free(v13);
      }
      return 0LL;
    }
  }

  return result;
}

void sub_100B80D54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (*(void *)(v2 + 56))
  {
    uint64_t v3 = 0LL;
    while (1)
    {
      unint64_t v4 = *(void *)(*(void *)(v2 + 24) + 8 * ((v3 + *(void *)(v2 + 48)) / 0xAAuLL))
         + 24 * ((v3 + *(void *)(v2 + 48)) % 0xAAuLL);
      if (objc_msgSend( *(id *)(a1 + 32),  "isEqualToString:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4))) {
        break;
      }
    }

    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    __int128 v17 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v18 = *(void *)(a1 + 32);
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Ignoring duplicate config %@.",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      uint64_t v23 = *(void *)(a1 + 32);
      LODWORD(v++*(void *)(result + 40) = 138412290;
      *(void *)((char *)&v40 + 4) = v23;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] Ignoring duplicate config %@.",  &v40,  12);
      uint64_t v25 = (__n128 *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke",  "%s\n",  v24);
      if (v25 != &buf) {
        free(v25);
      }
    }

    uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8LL);
    int v20 = 100;
    goto LABEL_42;
  }

void sub_100B8161C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100B816AC(void *a1)
{
  unint64_t v2 = a1[4];
  unint64_t v3 = *(void *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    unint64_t v2 = a1[4];
  }

  uint64_t v4 = a1[5] - 1LL;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return sub_100211164((uint64_t)a1, 1);
}

__n128 sub_100B81720(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B81800(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  id v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v8 = result;
  a2->n128_u64[1] = 0LL;
  a2[1].n128_u64[0] = 0LL;
  a2->n128_u64[0] = 0LL;
  ++a1[5];
  return result;
}

void sub_100B817D4(id a1)
{
  qword_101934738 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_100B81800(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    id v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)id v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000071BC(v5, v33);
      __int128 v35 = &v34[8 * (v33 >> 2)];
      __int128 v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      id v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        id v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100B81AC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

NSDictionary *sub_100B81B14()
{
  v1[0] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_1018D7018;
  v1[1] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_1018D7030;
  v1[2] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_1018D7048;
  v1[3] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_1018D7060;
  v1[4] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_1018D7078;
  _OWORD v1[5] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_1018D7090;
  v1[6] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_1018D70A8;
  __n128 result = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  7LL);
  qword_10199AC18 = (uint64_t)result;
  return result;
}

uint64_t sub_100B81C64(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  unint64_t v7 = (void *)sub_100C6AAF0(a1, a2, a3, a4, a5);
  void *v7 = off_101874070;
  v7[6] = 0LL;
  sub_100468458((uint64_t)sub_100B81D20, a1, a3, &v12);
  uint64_t v8 = v12;
  uint64_t v12 = 0LL;
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + ++*(void *)(result + 48) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    uint64_t v10 = v12;
    uint64_t v12 = 0LL;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
  }

  return a1;
}

void sub_100B81CF4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + ++*(void *)(result + 48) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100C6AB50(v1);
  _Unwind_Resume(a1);
}

void sub_100B81D20(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018740F0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLIndoorOutdoorSubscription::onMotionStateMediatorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018740F0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLIndoorOutdoorSubscription::onMotionStateMediatorNotification, event:%{public, loc ation:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100B827B0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B81ED8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B81EFC(void *a1)
{
  *a1 = off_101874070;
  uint64_t v2 = a1[6];
  a1[6] = 0LL;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    uint64_t v3 = a1[6];
    a1[6] = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return sub_100C6AB50((uint64_t)a1);
}

void sub_100B81F5C(void *a1)
{
  uint64_t v1 = (void *)sub_100B81EFC(a1);
  operator delete(v1);
}

void *sub_100B81F70@<X0>(uint64_t a1@<X8>)
{
  v11[0] = &off_101874140;
  v11[1] = sub_100B821E4;
  v11[2] = 0LL;
  uint64_t v12 = v11;
  sub_1010DDBC0(v13, "kCLConnectionMessageIndoorOutdoorUpdate");
  sub_10089D880((uint64_t)&v14, (uint64_t)v11);
  v9[0] = &off_1018741F0;
  v9[1] = sub_100B82450;
  void v9[2] = 0LL;
  uint64_t v10 = v9;
  sub_1010DDBC0(v15, "kCLConnectionMessageIndoorOutdoorLastKnownState");
  sub_10089D880((uint64_t)v16, (uint64_t)v9);
  sub_100B8303C(a1, (unsigned __int8 *)v13, 2LL);
  for (uint64_t i = 0LL; i != -14; i -= 7LL)
  {
    uint64_t v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      uint64_t v3 = &v16[i * 8];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0) {
      operator delete((void *)v15[i]);
    }
  }

  uint64_t v5 = v10;
  if (v10 == v9)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v10)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  __n128 result = v12;
  if (v12 == v11)
  {
    uint64_t v8 = 4LL;
    __n128 result = v11;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  else if (v12)
  {
    uint64_t v8 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  return result;
}

void sub_100B82114( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  for (uint64_t i = 56LL; i != -56; i -= 56LL)
    sub_10026E430(v17 + i);
  int64_t v20 = a13;
  if (a13 == &a10)
  {
    uint64_t v21 = 4LL;
    int64_t v20 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_8;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_8:
  unint64_t v22 = a17;
  if (a17 == &a14)
  {
    uint64_t v23 = 4LL;
    unint64_t v22 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_13;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_100B821E4(uint64_t a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934750 != -1) {
    dispatch_once(&qword_101934750, &stru_101874110);
  }
  uint64_t v5 = (os_log_s *)qword_101934758;
  if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)__n128 buf = 138412802;
    uint64_t v20 = v6;
    __int16 v21 = 2048;
    uint64_t v22 = a1;
    __int16 v23 = 1024;
    int v24 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "IndoorOutdoor, Subscription changed, %@, %p, %d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_101874110);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    int v13 = 138412802;
    uint64_t v14 = v10;
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    __int16 v17 = 1024;
    int v18 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  0LL,  "IndoorOutdoor, Subscription changed, %@, %p, %d",  &v13,  28);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLIndoorOutdoorSubscription::handleRequestIndoorOutdoorUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  sub_100C6AC8C(a1);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v8 = *(void **)(v7 + 16);
  if (a2) {
    [v8 register:v9 forNotification:3 registrationInfo:0];
  }
  else {
    [v8 unregister:v9 forNotification:3];
  }
}

void sub_100B8241C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B82450(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = *(void **)(*(void *)(a1 + 48) + 16LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768LL;
  _DWORD v12[2] = sub_100B82550;
  v12[3] = &unk_101874090;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  unsigned __int8 v12[4] = *a2;
  int v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  [v5 lastKnownIndoorOutdoorStateWithReply:v12];
  uint64_t v9 = v13;
  if (v13)
  {
    uint64_t v10 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_100B82534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100B82550(uint64_t a1, double *a2)
{
  uint64_t v4 = -[NSDate initWithTimeIntervalSinceReferenceDate:]( objc_alloc(&OBJC_CLASS___NSDate),  "initWithTimeIntervalSinceReferenceDate:",  *a2);
  id v5 = [[CMIndoorOutdoorState alloc] initWithStartDate:v4 type:*((void *)a2 + 1) confidence:*((void *)a2 + 2)];
  if (qword_101934750 != -1) {
    dispatch_once(&qword_101934750, &stru_101874110);
  }
  uint64_t v6 = (os_log_s *)qword_101934758;
  if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = *a2;
    uint64_t v8 = *((void *)a2 + 1);
    *(_DWORD *)__n128 buf = 134218498;
    double v23 = v7;
    __int16 v24 = 2048;
    uint64_t v25 = v8;
    __int16 v26 = 2112;
    id v27 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "IndoorOutdoor, most recent update at %f, type %ld, sending %@",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_101874110);
    }
    double v10 = *a2;
    uint64_t v11 = *((void *)a2 + 1);
    int v16 = 134218498;
    double v17 = v10;
    __int16 v18 = 2048;
    uint64_t v19 = v11;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  0LL,  "IndoorOutdoor, most recent update at %f, type %ld, sending %@",  &v16,  32);
    int v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLIndoorOutdoorSubscription::handleMessageIndoorOutdoorLastKnownState(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  uint64_t v14 = CMIndoorOutdoorStateKey;
  id v15 = v5;
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL);

  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_100B827B0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 3)
  {
    uint64_t v5 = *(void *)(a4 + 8);
    uint64_t v6 = *(void *)(a4 + 16);
    double v7 = -[NSDate initWithTimeIntervalSinceReferenceDate:]( objc_alloc(&OBJC_CLASS___NSDate),  "initWithTimeIntervalSinceReferenceDate:",  *(double *)a4);
    id v8 = [[CMIndoorOutdoorState alloc] initWithStartDate:v7 type:v5 confidence:v6];
    sub_1004F2598();
    if (sub_1004F8A40())
    {
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_101874110);
      }
      uint64_t v9 = (os_log_s *)qword_101934758;
      if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 24);
        *(_DWORD *)__n128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v8;
        __int16 v23 = 2112;
        uint64_t v24 = v10;
        __int16 v25 = 2048;
        uint64_t v26 = a1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@, %@, %p", buf, 0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934750 != -1) {
          dispatch_once(&qword_101934750, &stru_101874110);
        }
        uint64_t v11 = *(void *)(a1 + 24);
        int v16 = 138412802;
        id v17 = v8;
        __int16 v18 = 2112;
        uint64_t v19 = v11;
        __int16 v20 = 2048;
        uint64_t v21 = a1;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  0LL,  "%@, %@, %p",  &v16,  32);
        int v13 = (char *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLIndoorOutdoorSubscription::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Not ification &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }
    }

    uint64_t v14 = CMIndoorOutdoorStateKey;
    id v15 = v8;
    *(void *)__n128 buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL);

    sub_100B82A3C(a1, buf);
  }

void sub_100B82A3C(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B82AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B82AE4(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B82B10(id a1)
{
  qword_101934758 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

__n128 sub_100B82B3C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101874140;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_100B82B78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101874140;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100B82B9C(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_100B82BA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100B82BE0()
{
}

void sub_100B82BEC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100B82C70(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B82C58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B82C70(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    id v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      id v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018741B0);
    }
    uint64_t v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018741B0);
      }
    }

    uint64_t v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_100B82E54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B82E70(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100B82E9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1018741F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_100B82ED8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1018741F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100B82EFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100B82F04(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100B82F40()
{
}

void sub_100B82F4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  id v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  double v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    unint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  int v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  uint64_t v10 = v17;
  if (v17)
  {
    uint64_t v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    int v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100B83020( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100B8303C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 16) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(result + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100B830B4(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100B830A0(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100B830B4(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  double v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100B83334(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(result + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100B8331C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100B83334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + ++*(void *)(result + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100B833A8(v8 + 2, a3);
  *(_BYTE *)(a4 + ++*(void *)(result + 16) = 1;
  return result;
}

void sub_100B83390(_Unwind_Exception *a1)
{
}

void *sub_100B833A8(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100B83400(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100B8341C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199AC28, (void *)&_mh_execute_header);
}

void sub_100B83460(void *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v7 = a1[2];
  if (v7)
  {
    do
    {
      while (1)
      {
        double v9 = vabdd_f64(a3, *(double *)(v7 + 72));
        if (a4 < v9) {
          break;
        }
        uint64_t v7 = *(void *)v7;
        if (!v7) {
          goto LABEL_26;
        }
      }

      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101874268);
      }
      unint64_t v10 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
      {
        *(void *)id v27 = *(void *)(v7 + 16);
        sub_1007EC360(&__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (int)v9;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "@WifiAps, remove, %{private}s, age, %{public}d",  (uint8_t *)&buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101874268);
        }
        uint64_t v15 = qword_101934868;
        sub_1007EC360(&buf);
        p_std::string buf = &buf;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)id v27 = 136380931;
        *(void *)&v27[4] = p_buf;
        __int16 v28 = 1026;
        int v29 = (int)v9;
        LODWORD(v++*(void *)(result + 24) = 18;
        float v17 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v15,  2LL,  "@WifiAps, remove, %{private}s, age, %{public}d",  v27,  v24);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiService_Type::AccessPointVector CL::Wifi1::Types::WifiScanHistory::removeAgedAccessPoints(cl::chrono::CF AbsoluteTimeClock::time_point, cl::chrono::secondsf)",  "%s\n",  (const char *)v17);
        if (v17 != &__p) {
          free(v17);
        }
      }

      unint64_t v12 = a2[1];
      if (v12 >= a2[2])
      {
        uint64_t v13 = sub_100023888(a2, v7 + 16);
      }

      else
      {
        sub_100023800((uint64_t)a2, v7 + 16);
        uint64_t v13 = v12 + 88;
      }

      a2[1] = v13;
      uint64_t v14 = *(void *)v7;
      sub_100A68C98(a1, (uint64_t *)v7);
      uint64_t v7 = v14;
    }

    while (v14);
  }

void sub_100B83908( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100B83934(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100351790(a1, a2);
  *(_WORD *)(v3 + ++*(void *)(result + 96) = 0;
  if (*(int *)(v3 + 40) <= 0)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101874268);
    }
    __int128 v4 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)std::string buf = 67109120;
      int v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Initializing with invalid channel, %d", buf, 8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101874268);
      }
      int v7 = *(_DWORD *)(a1 + 40);
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "Initializing with invalid channel, %d",  v10);
      double v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CL::Wifi1::Types::AssociatedAp::AssociatedAp(const CLWifiService_Type::AccessPoint)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    if (*(_BYTE *)(a1 + 88))
    {
      *(_BYTE *)(a1 + ++*(void *)(result + 88) = 0;
    }
  }

  return a1;
}

void sub_100B83B18(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 88))
  {
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100B83B44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000C6980((_BYTE *)a1, a2);
  *((_WORD *)v3 + ++*(void *)(result + 48) = 0;
  if (v3[88] && *(int *)(a1 + 40) <= 0)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101874268);
    }
    __int128 v4 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)std::string buf = 67109120;
      int v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Initializing with invalid channel, %d", buf, 8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101874268);
      }
      int v7 = *(_DWORD *)(a1 + 40);
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "Initializing with invalid channel, %d",  v10);
      double v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CL::Wifi1::Types::AssociatedAp::AssociatedAp(const std::optional<CLWifiService_Type::AccessPoint> &)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    if (*(_BYTE *)(a1 + 88))
    {
      *(_BYTE *)(a1 + ++*(void *)(result + 88) = 0;
    }
  }

  return a1;
}

void sub_100B83D30(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 88))
  {
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100B83D5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t sub_100B83D64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t sub_100B83D6C(uint64_t result, char a2)
{
  *(_BYTE *)(result + ++*(void *)(result + 96) = 1;
  *(_BYTE *)(result + 97) = a2;
  return result;
}

uint64_t sub_100B83D7C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96)) {
    sub_101261DD4();
  }
  return *(unsigned __int8 *)(a1 + 97);
}

void sub_100B83D9C(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = 11LL;
  while (dword_10134C8EC[v6] < a3)
  {
    --v7;
    if (++v6 == 11) {
      goto LABEL_15;
    }
  }

  uint64_t v8 = -v7;
  if (-(int)v7 < 0xC)
  {
LABEL_15:
    uint8x8_t v11 = (uint64_t **)(a1 + 152);
    if (a1 + 160 == sub_10008E8D0(a1 + 152, (const void **)a2))
    {
      int v15 = 0;
      sub_100963694(buf, 0xCuLL, &v15);
      float v16 = a2;
      int v12 = sub_100B840A4((uint64_t **)(a1 + 152), (const void **)a2, (uint64_t)&unk_1012CF090, &v16);
      uint64_t v13 = (void *)v12[7];
      if (v13)
      {
        v12[8] = (uint64_t)v13;
        operator delete(v13);
        v12[7] = 0LL;
        v12[8] = 0LL;
        v12[9] = 0LL;
      }

      *(_OWORD *)(v12 + 7) = *(_OWORD *)buf;
      v12[9] = v20;
    }

    *(void *)std::string buf = a2;
    uint64_t v14 = sub_100B840A4(v11, (const void **)a2, (uint64_t)&unk_1012CF090, (__int128 **)buf);
    ++*(_DWORD *)(v14[7] + 4 * v8);
    return;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101874268);
  }
  double v9 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v8;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "WifiAps, fix ap count per scan type, invalid bucket index, %{public}d, # of fix APs, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101874268);
    }
    LODWORD(v++*(void *)(result + 16) = 67240448;
    HIDWORD(v++*(void *)(result + 16) = v8;
    __int16 v17 = 1026;
    int v18 = a3;
    unint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "WifiAps, fix ap count per scan type, invalid bucket index, %{public}d, # of fix APs, %{public}d",  &v16,  14);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CL::Wifi1::Types::HeartbeatMetrics::recordBucketedFixApsCountPerScanRequestTypes(std::string, int)",  "%s\n",  v10);
  }

void sub_100B84054( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B84078(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t *sub_100B840A4(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000227E8((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100B8414C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_100B841E0((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_100B8414C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + ++*(void *)(result + 16) = 0;
  __n128 result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_1010DD48C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }

  void v6[7] = 0LL;
  _WORD v6[8] = 0LL;
  v6[9] = 0LL;
  *(_BYTE *)(a3 + ++*(void *)(result + 16) = 1;
  return result;
}

void sub_100B841C8(_Unwind_Exception *a1)
{
}

void sub_100B841E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1002E1050((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void sub_100B84224()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100B842C0(_Unwind_Exception *a1)
{
}

void sub_100B842D8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100B84364(_Unwind_Exception *a1)
{
}

void sub_100B8437C( double **a1@<X0>, double **a2@<X1>, uint64_t *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  double v9 = a6 + -2592000.0;
  unint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  double v12 = 0.0;
  if (*a1 == v11)
  {
    int v14 = 0;
    int v13 = 0;
    double v18 = 0.0;
    double v17 = 0.0;
    double v16 = 0.0;
  }

  else
  {
    int v13 = 0;
    int v14 = 0;
    double v15 = v9 + -0.0001;
    double v16 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
    do
    {
      double v19 = v10[2];
      if (v19 > 0.0)
      {
        double v20 = *v10;
        if (*v10 < a6)
        {
          double v21 = fmax(v19, v18);
          if (v20 >= v15) {
            double v18 = v21;
          }
          double v22 = -0.0;
          if (v20 >= v15) {
            double v22 = v10[2];
          }
          double v17 = v17 + v22;
          if (v20 >= v15) {
            ++v14;
          }
          if (v20 >= a6 + -604800.0 + -0.0001)
          {
            ++v13;
            double v16 = v16 + v19;
          }
        }
      }

      v10 += 3;
    }

    while (v10 != v11);
  }

  unint64_t v23 = *a2;
  uint64_t v24 = a2[1];
  if (*a2 != v24)
  {
    double v25 = v9 + -0.0001;
    double v12 = 0.0;
    do
    {
      BOOL v26 = *v23 >= a6 || *v23 < v25;
      double v27 = fmax(v23[2], v12);
      if (!v26) {
        double v12 = v27;
      }
      v23 += 3;
    }

    while (v23 != v24);
  }

  *(void *)(a5 + ++*(void *)(result + 32) = 0xFFF0000000000000LL;
  uint64_t v28 = *a3;
  *(double *)a5 = a7;
  *(void *)(a5 + _Block_object_dispose(va, 8) = v28;
  uint64_t v29 = a3[4];
  *(void *)(a5 + ++*(void *)(result + 40) = v29;
  *(double *)(a5 + ++*(void *)(result + 16) = v12;
  *(double *)(a5 + ++*(void *)(result + 24) = v18;
  if (v13)
  {
    double v30 = v16 / (double)v13;
    *(double *)(a5 + ++*(void *)(result + 32) = v30;
  }

  else
  {
    double v30 = -INFINITY;
  }

  *a4 = v13;
  a4[1] = v14;
  *((double *)a4 + 1) = v16;
  *((double *)a4 + 2) = v17;
  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_1018742A8);
  }
  int v31 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = *a4;
    int v33 = a4[1];
    uint64_t v34 = *((void *)a4 + 1);
    uint64_t v35 = *((void *)a4 + 2);
    *(_DWORD *)std::string buf = 134285825;
    double v63 = a7;
    __int16 v64 = 2049;
    uint64_t v65 = v28;
    __int16 v66 = 2049;
    uint64_t v67 = v29;
    __int16 v68 = 2049;
    double v69 = v18;
    __int16 v70 = 2049;
    double v71 = v12;
    __int16 v72 = 2049;
    double v73 = v30;
    __int16 v74 = 1025;
    int v75 = v32;
    __int16 v76 = 1025;
    int v77 = v33;
    __int16 v78 = 2049;
    uint64_t v79 = v34;
    __int16 v80 = 2049;
    uint64_t v81 = v35;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "CLMobility::SteadinessSuppression::Features,walkingSteadiness,%{private}.2f,allBoutsBoutDurationSecCv,%{private}.2 f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,dailySteps30daysMax,%{private}.2f,dailyFlights30day sMax,%{private}.2f,dailySteps7daysMean,%{private}.2f,daysWithSteps7Days,%{private}d,daysWithSteps30Days,%{private} d,totalSteps7Days,%{private}.2f,totalSteps30Days,%{private}.2f,",  buf,  0x5Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_1018742A8);
    }
    int v36 = *a4;
    int v37 = a4[1];
    uint64_t v38 = *((void *)a4 + 1);
    uint64_t v39 = *((void *)a4 + 2);
    int v42 = 134285825;
    double v43 = a7;
    __int16 v44 = 2049;
    uint64_t v45 = v28;
    __int16 v46 = 2049;
    uint64_t v47 = v29;
    __int16 v48 = 2049;
    double v49 = v18;
    __int16 v50 = 2049;
    double v51 = v12;
    __int16 v52 = 2049;
    double v53 = v30;
    __int16 v54 = 1025;
    int v55 = v36;
    __int16 v56 = 1025;
    int v57 = v37;
    __int16 v58 = 2049;
    uint64_t v59 = v38;
    __int16 v60 = 2049;
    uint64_t v61 = v39;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "CLMobility::SteadinessSuppression::Features,walkingSteadiness,%{private}.2f,allBoutsBoutDurationSecCv,%{private}.2 f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,dailySteps30daysMax,%{private}.2f,dailyFlights30day sMax,%{private}.2f,dailySteps7daysMean,%{private}.2f,daysWithSteps7Days,%{private}d,daysWithSteps30Days,%{private} d,totalSteps7Days,%{private}.2f,totalSteps30Days,%{private}.2f,",  &v42,  94);
    int v41 = (uint8_t *)v40;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "Features CLMobility::SteadinessSuppression::extractFeatures(CFAbsoluteTime, double, const std::vector<HealthKitQua ntitySample> &, const std::vector<HealthKitQuantitySample> &, const SteadinessModelContinuousWalking_Generated::Fe atures &, DailyHealthKitStats &)",  "%s\n",  v40);
    if (v41 != buf) {
      free(v41);
    }
  }

void sub_100B84724(id a1)
{
  qword_101934488 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

uint64_t sub_100B84A40(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  __int128 v4 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v5 = 0;
    unsigned int v6 = 0;
    unint64_t v7 = 0LL;
    while (1)
    {
      unint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v8 == -1LL || v8 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8 + 1;
      v7 |= (unint64_t)(v9 & 0x7F) << v5;
      if ((v9 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      BOOL v10 = v6++ >= 9;
      if (v10)
      {
        unint64_t v7 = 0LL;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v7 = 0LL;
    }
LABEL_14:
    if (v11 || (v7 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v7 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_67;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_69;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_67:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_69:
        uint64_t v41 = 32LL;
        goto LABEL_90;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v15 = 0LL;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v15 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v10 = v19++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_73;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_73:
        uint64_t v41 = 36LL;
        goto LABEL_90;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v15 = 0LL;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v15 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v10 = v23++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_77;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_77:
        uint64_t v41 = 12LL;
        goto LABEL_90;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v15 = 0LL;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1LL || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v15 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v10 = v27++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_81;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_81:
        uint64_t v41 = 16LL;
        goto LABEL_90;
      case 5u:
        double v30 = v4;
        int v31 = objc_alloc_init(&OBJC_CLASS___ALSLocation);

        *(void *)(a1 + ++*(void *)(result + 24) = v31;
        if (PBReaderPlaceMark(a2, v42) && (sub_100B87820((uint64_t)v31, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v42);
          __int128 v4 = v30;
LABEL_91:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 0xBu:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + v4[791]) |= 1u;
        while (2)
        {
          unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 == -1LL || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v36 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
            v15 |= (unint64_t)(v36 & 0x7F) << v33;
            if (v36 < 0)
            {
              v33 += 7;
              BOOL v10 = v34++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_85;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_85:
        uint64_t v41 = 8LL;
        goto LABEL_90;
      case 0xCu:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + v4[791]) |= 2u;
        while (2)
        {
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 == -1LL || v39 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v40 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
            v15 |= (unint64_t)(v40 & 0x7F) << v37;
            if (v40 < 0)
            {
              v37 += 7;
              BOOL v10 = v38++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_89;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_89:
        uint64_t v41 = 40LL;
LABEL_90:
        *(_DWORD *)(a1 + v41) = v15;
        goto LABEL_91;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_91;
    }
  }

uint64_t sub_100B8560C(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = *((_WORD *)a3 + 4);
  *(void *)a1 = v6;
  if (*((char *)a3 + 39) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 16), (void *)a3[2], a3[3]);
  }

  else
  {
    __int128 v7 = *((_OWORD *)a3 + 1);
    *(void *)(a1 + ++*(void *)(result + 32) = a3[4];
    *(_OWORD *)(a1 + ++*(void *)(result + 16) = v7;
  }

  *(void *)(a1 + ++*(void *)(result + 40) = a3[5];
  unint64_t v8 = (_OWORD *)(a1 + 48);
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 48), *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v9 = *a2;
    *(void *)(a1 + ++*(void *)(result + 64) = *((void *)a2 + 2);
    _OWORD *v8 = v9;
  }

  sub_1003B35F4(a1 + 72, a3);
  if (sub_1003C1048(a1 + 72))
  {
    BOOL v10 = (char *)(a1 + 48);
    sub_1003B59A0(a1 + 72, v10, (const char **)&off_1018742C8, 0LL, 0);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101874388);
    }
    int v11 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#Warning CLCloudKitMetadataDatabase is not valid, not initializing. Please re-initialize if needed",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101874388);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "#Warning CLCloudKitMetadataDatabase is not valid, not initializing. Please re-initialize if needed",  v15,  2);
      unsigned int v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCloudKitMetadataDatabase::CLCloudKitMetadataDatabase(const std::string &, const CLSqliteDatabase::SqliteProperties &)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  return a1;
}

void sub_100B8586C(_Unwind_Exception *a1)
{
}

uint64_t sub_100B858B4(uint64_t a1, char *a2)
{
  if (v5 < 0) {
    operator delete((void *)v4[2]);
  }
  return a1;
}

void sub_100B8590C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B85928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    sub_10000CE18((uint64_t)v39);
    char v5 = sub_10000CF44(&v40, (uint64_t)"INSERT OR REPLACE INTO ", 23LL);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v7 = a1 + 48;
    uint64_t v6 = v8;
    int v9 = *(char *)(v7 + 23);
    if (v9 >= 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v6;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v7 + 8);
    }
    double v12 = sub_10000CF44(v5, v10, v11);
    char v13 = sub_10000CF44(v12, (uint64_t)" (", 2LL);
    unsigned int v14 = sub_10000CF44(v13, (uint64_t)"Key", 3LL);
    uint64_t v15 = sub_10000CF44(v14, (uint64_t)",", 1LL);
    unint64_t v16 = sub_10000CF44(v15, (uint64_t)"SyncEngineMetadata", 18LL);
    char v17 = sub_10000CF44(v16, (uint64_t)",", 1LL);
    char v18 = sub_10000CF44(v17, (uint64_t)"LastUpdateTimestamp", 19LL);
    unsigned int v19 = sub_10000CF44(v18, (uint64_t)") VALUES ", 9LL);
    sub_10000CF44(v19, (uint64_t)"(?,?,?);", 8LL);
    std::stringbuf::str(&v38, &v41);
    if ((v38.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v20 = &v38;
    }
    else {
      unint64_t v20 = (std::stringbuf::string_type *)v38.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v4, (char *)v20, &v37);
    char v21 = (sqlite3_stmt *)sub_100019240(v37);
    char v22 = v21;
    if (byte_10199AC57 >= 0) {
      unsigned int v23 = (char *)&qword_10199AC40;
    }
    else {
      unsigned int v23 = (char *)qword_10199AC40;
    }
    if (sub_1003BC1F0(v21, 1, v23) && sub_1003C2F58(v22, 2, *(void **)(a2 + 8)) && sub_1003B7480(v22, 3, *(double *)a2))
    {
      sub_1003BB2BC(v4, v22);
      if (sub_1003C10E4(v4) > 0)
      {
        uint64_t v24 = 1LL;
LABEL_31:
        uint64_t v27 = v37;
        uint64_t v37 = 0LL;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
        }
        *(void *)((char *)v39
        uint64_t v40 = v28;
        std::streambuf::~streambuf(&v41);
        std::ios::~ios(&v42);
        return v24;
      }

      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101874388);
      }
      double v30 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "Could not successfully update metadata in CLCloudKitMetadataDatabase",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0))
      {
LABEL_30:
        uint64_t v24 = 0LL;
        goto LABEL_31;
      }

      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101874388);
      }
      v36[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "Could not successfully update metadata in CLCloudKitMetadataDatabase",  v36,  2);
      int v32 = (uint8_t *)v31;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLCloudKitMetadataDatabase::updateMetadata(const CloudKitMetadata &)",  "%s\n",  v31);
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101874388);
      }
      char v26 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "Could not bind fields when updating metadata in CLCloudKitMetadataDatabase",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_30;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101874388);
      }
      v36[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "Could not bind fields when updating metadata in CLCloudKitMetadataDatabase",  v36,  2);
      int v32 = (uint8_t *)v35;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLCloudKitMetadataDatabase::updateMetadata(const CloudKitMetadata &)",  "%s\n",  v35);
    }

    if (v32 != buf) {
      free(v32);
    }
    goto LABEL_30;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101874388);
  }
  char v25 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "#Warning Attempt to call insertOrReplace() without a backing database in CLCloudKitMetadataDatabase",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101874388);
    }
    LOWORD(v39[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "#Warning Attempt to call insertOrReplace() without a backing database in CLCloudKitMetadataDatabase",  v39,  2);
    unsigned int v34 = (uint8_t *)v33;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCloudKitMetadataDatabase::updateMetadata(const CloudKitMetadata &)",  "%s\n",  v33);
    if (v34 != buf) {
      free(v34);
    }
  }

  return 0LL;
}

void sub_100B85F20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100B85F80(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    sub_10000CE18((uint64_t)buf);
    uint64_t v3 = sub_10000CF44(&v29, (uint64_t)"SELECT * FROM ", 14LL);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v5 = a1 + 48;
    uint64_t v4 = v6;
    int v7 = *(char *)(v5 + 23);
    if (v7 >= 0) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      uint64_t v9 = *(void *)(v5 + 8);
    }
    uint64_t v10 = sub_10000CF44(v3, v8, v9);
    uint64_t v11 = sub_10000CF44(v10, (uint64_t)" WHERE ", 7LL);
    double v12 = sub_10000CF44(v11, (uint64_t)"Key", 3LL);
    sub_10000CF44(v12, (uint64_t)" = ?;", 5LL);
    std::stringbuf::str(&v27, &v30);
    if ((v27.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v13 = &v27;
    }
    else {
      char v13 = (std::stringbuf::string_type *)v27.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v2, (char *)v13, &v26);
    unsigned int v14 = (sqlite3_stmt *)sub_100019240(v26);
    uint64_t v15 = v14;
    if (byte_10199AC57 >= 0) {
      unint64_t v16 = (char *)&qword_10199AC40;
    }
    else {
      unint64_t v16 = (char *)qword_10199AC40;
    }
    if (sub_1003BC1F0(v14, 1, v16) && j__sqlite3_step(v15) == 100)
    {
      char v17 = sqlite3_column_blob(v15, 1);
      int v18 = sqlite3_column_bytes(v15, 1);
      if (v17 && v18) {
        -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", v17, v18);
      }
      double v19 = sqlite3_column_double(v15, 2);
    }

    else
    {
      double v19 = 1.79769313e308;
    }

    uint64_t v21 = v26;
    uint64_t v26 = 0LL;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    uint64_t v29 = v22;
    std::streambuf::~streambuf(&v30);
    std::ios::~ios(&v31);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101874388);
    }
    unint64_t v20 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "#Warning Attempt to call getMetadata() without a backing database in CLCloudKitMetadataDatabase",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101874388);
      }
      LOWORD(v27.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "#Warning Attempt to call getMetadata() without a backing database in CLCloudKitMetadataDatabase",  &v27,  2);
      char v25 = (uint8_t *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CloudKitMetadata CLCloudKitMetadataDatabase::getMetadata() const",  "%s\n",  v24);
      if (v25 != buf) {
        free(v25);
      }
    }

    double v19 = 1.79769313e308;
  }

  return *(void *)&v19;
}

void sub_100B86314( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100B86374(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    sub_10000CE18((uint64_t)buf);
    uint64_t v3 = sub_10000CF44(&v25, (uint64_t)"DELETE FROM ", 12LL);
    int v4 = *(char *)(a1 + 71);
    if (v4 >= 0) {
      uint64_t v5 = a1 + 48;
    }
    else {
      uint64_t v5 = *(void *)(a1 + 48);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
    }
    else {
      uint64_t v6 = *(void *)(a1 + 56);
    }
    int v7 = sub_10000CF44(v3, v5, v6);
    uint64_t v8 = sub_10000CF44(v7, (uint64_t)" WHERE ", 7LL);
    uint64_t v9 = sub_10000CF44(v8, (uint64_t)"Key", 3LL);
    sub_10000CF44(v9, (uint64_t)" = ?;", 5LL);
    std::stringbuf::str(&v23, &v26);
    if ((v23.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v10 = &v23;
    }
    else {
      uint64_t v10 = (std::stringbuf::string_type *)v23.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v2, (char *)v10, &v22);
    uint64_t v11 = (sqlite3_stmt *)sub_100019240(v22);
    double v12 = v11;
    if (byte_10199AC57 >= 0) {
      char v13 = (char *)&qword_10199AC40;
    }
    else {
      char v13 = (char *)qword_10199AC40;
    }
    if (sub_1003BC1F0(v11, 1, v13) && j__sqlite3_step(v12) == 101)
    {
      else {
        uint64_t v14 = *(void *)(a1 + 160);
      }
      sub_1003C1EC0(v2, v14);
      uint64_t v15 = 1LL;
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    uint64_t v17 = v22;
    uint64_t v22 = 0LL;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
    uint64_t v25 = v18;
    std::streambuf::~streambuf(&v26);
    std::ios::~ios(&v27);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101874388);
    }
    unint64_t v16 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "#Warning Attempt to call deleteMetadata() without a backing database in CLCloudKitMetadataDatabase",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101874388);
      }
      LOWORD(v23.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "#Warning Attempt to call deleteMetadata() without a backing database in CLCloudKitMetadataDatabase",  &v23,  2);
      uint64_t v21 = (uint8_t *)v20;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLCloudKitMetadataDatabase::deleteMetadata()", "%s\n", v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    return 0LL;
  }

  return v15;
}

void sub_100B866B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_100B86708(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100B86734()
{
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_10199AC58,  (void *)&_mh_execute_header);
}

void sub_100B8685C(_Unwind_Exception *a1)
{
}

id sub_100B86870(uint64_t a1, void *a2)
{
  return _[a2 onSubmersionState:a1];
}

void sub_100B86D88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100B86DE8(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_100B86E14(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_1018743D8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_100B86F48;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_100B86F5C;
  v12[3] = &unk_10182EFF0;
  unsigned __int8 v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100B86F20(_Unwind_Exception *a1)
{
}

uint64_t sub_100B86F48(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_100B86F5C(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_100B86F78(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B8722C(a1);
  operator delete(v1);
}

id sub_100B86F8C(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x10) {
    size_t v8 = 16LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101874418);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v31 = 0x800000010134C981LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v32 = 2048;
      uint64_t v33 = 16LL;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      __int16 v36 = 1024;
      int v37 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101874418);
      }
      int v22 = 136315906;
      unint64_t v23 = 0x800000010134C981LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v24 = 2048;
      uint64_t v25 = 16LL;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v22,  38,  v17,  LODWORD(v18[0]));
      unint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLWaterSubmersion_Types::CMSubmersionState>::dispatchData(int, con st void *, size_t) [T = CLWaterSubmersion_Types::CMSubmersionState]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  char v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100B87284;
  v18[3] = &unk_101861860;
  void v18[4] = v12;
  v18[5] = v11;
  __int128 v19 = __dst;
  uint64_t v20 = v10;
  return [v13 async:v18];
}

uint64_t sub_100B8722C(uint64_t a1)
{
  *(void *)a1 = off_1018743D8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_100B87284(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 64));
  }
  return result;
}

void sub_100B872C8(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100B87820(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    int v4 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    uint64_t v5 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    uint64_t v6 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    int v7 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    size_t v8 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    id v9 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    uint64_t v10 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    uint64_t v11 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    uint64_t v12 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    char v13 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    uint64_t v14 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 == -1LL || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          goto LABEL_12;
        }
        v15 += 7;
        BOOL v20 = v16++ >= 9;
        if (v20)
        {
          unint64_t v17 = 0LL;
          int v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v17 = 0LL;
      }
LABEL_14:
      if (v21 || (v17 & 7) == 4) {
        break;
      }
      switch((v17 >> 3))
      {
        case 1u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v26 == -1LL || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_92;
            }
            v23 += 7;
            BOOL v20 = v24++ >= 9;
            if (v20)
            {
              uint64_t v25 = 0LL;
              goto LABEL_94;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_92:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v25 = 0LL;
          }
LABEL_94:
          uint64_t v72 = v4[807];
          goto LABEL_99;
        case 2u:
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0LL;
          while (2)
          {
            unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v30 == -1LL || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v31 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if (v31 < 0)
              {
                v28 += 7;
                BOOL v20 = v29++ >= 9;
                if (v20)
                {
                  uint64_t v25 = 0LL;
                  goto LABEL_98;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v25 = 0LL;
          }
LABEL_98:
          uint64_t v72 = v5[808];
LABEL_99:
          *(void *)(a1 + v72) = v25;
          continue;
        case 3u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0LL;
          while (2)
          {
            unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v35 == -1LL || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v36 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                BOOL v20 = v33++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_103;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_103:
          uint64_t v73 = v6[809];
          goto LABEL_132;
        case 4u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v34 = 0LL;
          *(_BYTE *)(a1 + v7[799]) |= 8u;
          while (2)
          {
            unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v39 == -1LL || v39 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v40 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
              v34 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                BOOL v20 = v38++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_107;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_107:
          uint64_t v73 = v8[800];
          goto LABEL_132;
        case 5u:
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v34 = 0LL;
          *(_BYTE *)(a1 + v7[799]) |= 1u;
          while (2)
          {
            unint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v43 == -1LL || v43 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v44 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 1;
              v34 |= (unint64_t)(v44 & 0x7F) << v41;
              if (v44 < 0)
              {
                v41 += 7;
                BOOL v20 = v42++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_111;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_111:
          uint64_t v73 = v9[801];
          goto LABEL_132;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v34 = 0LL;
          *(_BYTE *)(a1 + v7[799]) |= 0x40u;
          while (2)
          {
            unint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v47 == -1LL || v47 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v48 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 1;
              v34 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                BOOL v20 = v46++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_115;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_115:
          uint64_t v73 = v10[802];
          goto LABEL_132;
        case 7u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v34 = 0LL;
          *(_BYTE *)(a1 + v7[799]) |= 2u;
          while (2)
          {
            unint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v51 == -1LL || v51 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v52 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 1;
              v34 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                BOOL v20 = v50++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_119;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_119:
          uint64_t v73 = v11[803];
          goto LABEL_132;
        case 0xBu:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v34 = 0LL;
          *(_BYTE *)(a1 + v7[799]) |= 0x20u;
          while (2)
          {
            unint64_t v62 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v62 == -1LL || v62 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v63 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62 + 1;
              v34 |= (unint64_t)(v63 & 0x7F) << v60;
              if (v63 < 0)
              {
                v60 += 7;
                BOOL v20 = v61++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_123;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_123:
          uint64_t v73 = v12[804];
          goto LABEL_132;
        case 0xCu:
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v34 = 0LL;
          *(_BYTE *)(a1 + v7[799]) |= 0x10u;
          while (2)
          {
            unint64_t v66 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v66 == -1LL || v66 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v67 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66 + 1;
              v34 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                BOOL v20 = v65++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_127;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_127:
          uint64_t v73 = v13[805];
          goto LABEL_132;
        case 0xDu:
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v34 = 0LL;
          *(_BYTE *)(a1 + v7[799]) |= 4u;
          break;
        default:
          double v53 = v4;
          __int16 v54 = v5;
          int v55 = v6;
          __int16 v56 = v7;
          int v57 = v8;
          uint64_t v58 = a1;
          uint64_t result = PBReaderSkipValueWithTag(a2);
          id v9 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          a1 = v58;
          uint64_t v10 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          size_t v8 = v57;
          uint64_t v11 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          int v7 = v56;
          uint64_t v12 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          uint64_t v6 = v55;
          uint64_t v5 = v54;
          char v13 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          int v4 = v53;
          uint64_t v14 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          if (!(_DWORD)result) {
            return result;
          }
          continue;
      }

      while (1)
      {
        unint64_t v70 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v70 == -1LL || v70 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v71 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v70);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v70 + 1;
        v34 |= (unint64_t)(v71 & 0x7F) << v68;
        if ((v71 & 0x80) == 0) {
          goto LABEL_129;
        }
        v68 += 7;
        BOOL v20 = v69++ >= 9;
        if (v20)
        {
          LODWORD(v34) = 0;
          goto LABEL_131;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_129:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v34) = 0;
      }
LABEL_131:
      uint64_t v73 = v14[806];
LABEL_132:
      *(_DWORD *)(a1 + v73) = v34;
    }

    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void *sub_100B88974(void *a1, uint64_t a2)
{
  unint64_t v4 = 0LL;
  uint64_t v5 = a1 + 2;
  v23.n128_u64[0] = *(void *)(a2 + 40);
  v23.n128_u64[1] = v4;
  sub_100B88B08(a1 + 2, &v23);
  unint64_t v6 = a1[6];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  id v9 = (void *)(v7 + 8 * (v6 >> 8));
  if (v8 == v7)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = a1 + 7;
  }

  else
  {
    double v10 = *(double *)(a2 + 40);
    uint64_t v11 = (double *)(*v9 + 16LL * v6);
    uint64_t v12 = a1 + 7;
    uint64_t v13 = *(void *)(v7 + (((a1[7] + v6) >> 5) & 0x7FFFFFFFFFFFFF8LL))
        + 16LL * (*((_BYTE *)a1 + 56) + v6);
    if (v11 != (double *)v13)
    {
      while (vabdd_f64(v10, *v11) <= 720.0)
      {
        v11 += 2;
        if ((double *)((char *)v11 - *v9) == (double *)4096)
        {
          uint64_t v14 = (double *)v9[1];
          ++v9;
          uint64_t v11 = v14;
        }
      }
    }

    if (v11 == (double *)v13)
    {
LABEL_19:
    }

    else
    {
      char v15 = v11;
      unsigned int v16 = v9;
      while (1)
      {
        v15 += 2;
        if ((double *)((char *)v15 - *v16) == (double *)4096)
        {
          unint64_t v17 = (double *)v16[1];
          ++v16;
          char v15 = v17;
        }

        if (vabdd_f64(v10, *v15) <= 720.0)
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v15;
          v11 += 2;
          if ((double *)((char *)v11 - *v9) == (double *)4096)
          {
            unint64_t v18 = (double *)v9[1];
            ++v9;
            uint64_t v11 = v18;
          }
        }
      }

      unint64_t v6 = a1[6];
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4];
    }
  }

  unint64_t v19 = v6 + *v12;
  BOOL v20 = (char *)(v7 + 8 * (v19 >> 8));
  if (v8 == v7) {
    uint64_t v21 = 0LL;
  }
  else {
    uint64_t v21 = *(void *)v20 + 16LL * v19;
  }
  return sub_10025A918(v5, (char *)v9, (uint64_t)v11, v20, v21);
}

__n128 sub_100B88B08(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B88F6C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

double sub_100B88B90(double *a1, double a2)
{
  double v4 = a2 + -360.0;
  sub_100B88CE4((uint64_t)a1, (uint64_t)&v11, a2 + -360.0, a2);
  sub_100B88CE4((uint64_t)a1, (uint64_t)v10, a2 + -720.0, v4);
  BOOL v5 = 0;
  if (v14 >= 0.45 && v13 >= 0x32) {
    BOOL v5 = vabdd_f64(v12, v11) > 324.0;
  }
  BOOL v6 = 0;
  if (v10[3] >= 0.45 && *(void *)&v10[2] >= 0x32uLL) {
    BOOL v6 = fabs(v10[1] - v10[0]) > 324.0;
  }
  if (v5)
  {
    double v7 = *a1;
    if (*a1 < 3.0)
    {
      double v7 = v7 + vabdd_f64(v12, a1[8]) / 720.0;
      *a1 = v7;
      double v8 = 0.0;
      if (!v6) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }

    double v8 = 0.0;
    if (v6) {
LABEL_13:
    }
      double v8 = 0.05;
  }

  else
  {
    *a1 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
  }

void sub_100B88CE4(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(_OWORD *)a2 = xmmword_10134C9E8;
  *(_OWORD *)(a2 + ++*(void *)(result + 16) = unk_10134C9F8;
  std::string __p = 0LL;
  char v37 = 0LL;
  unsigned int v38 = 0LL;
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v7
    || (unint64_t v9 = *(void *)(a1 + 48),
        double v10 = (void *)(v7 + 8 * (v9 >> 8)),
        double v11 = (double *)(*v10 + 16LL * v9),
        uint64_t v12 = *(void *)(v7 + (((*(void *)(a1 + 56) + v9) >> 5) & 0x7FFFFFFFFFFFFF8LL))
            + 16LL * (*(_BYTE *)(a1 + 56) + v9),
        v11 == (double *)v12))
  {
    *(void *)(a2 + ++*(void *)(result + 16) = 0LL;
    return;
  }

  unint64_t v13 = 0LL;
  do
  {
    double v14 = *v11;
    if (*v11 >= a3 && v14 <= a4)
    {
      double v16 = *(double *)a2;
      *(double *)(a2 + _Block_object_dispose(va, 8) = v14;
      double v17 = *v11;
      if (*v11 >= v16) {
        double v17 = v16;
      }
      *(double *)a2 = v17;
      float v18 = v11[1];
      float v19 = (*(float *)(a1 + 12) - v18) / (*(float *)(a1 + 12) - *(float *)(a1 + 8));
      double v20 = (float)(1.0 - v19);
      if (v13 >= (double *)v38)
      {
        int v22 = __p;
        uint64_t v23 = v13 - __p;
        unint64_t v24 = v23 + 1;
        uint64_t v25 = v38 - (char *)__p;
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          char v27 = (char *)sub_1000071BC((uint64_t)&v38, v26);
          int v22 = __p;
          unint64_t v13 = v37;
        }

        else
        {
          char v27 = 0LL;
        }

        char v28 = (double *)&v27[8 * v23];
        *char v28 = v20;
        uint64_t v21 = v28 + 1;
        while (v13 != v22)
        {
          uint64_t v29 = *((void *)v13-- - 1);
          *((void *)v28-- - 1) = v29;
        }

        std::string __p = v28;
        unsigned int v38 = &v27[8 * v26];
        if (v22) {
          operator delete(v22);
        }
      }

      else
      {
        double *v13 = v20;
        uint64_t v21 = v13 + 1;
      }

      char v37 = v21;
      unint64_t v13 = v21;
    }

    v11 += 2;
    if ((double *)((char *)v11 - *v10) == (double *)4096)
    {
      unint64_t v30 = (double *)v10[1];
      ++v10;
      double v11 = v30;
    }
  }

  while (v11 != (double *)v12);
  char v31 = __p;
  uint64_t v32 = v13 - __p;
  *(void *)(a2 + ++*(void *)(result + 16) = v32;
  if (v13 == __p)
  {
    if (!__p) {
      return;
    }
  }

  else
  {
    double v33 = (double)(unint64_t)(v32 - 1) * 0.5;
    unint64_t v34 = (unint64_t)v33;
    unint64_t v35 = &__p[(unint64_t)v33];
    if (v35 != v13)
    {
      sub_10023DA1C(__p, v35, v13, v33);
      char v31 = __p;
    }

    *(double *)(a2 + ++*(void *)(result + 24) = v31[v34];
  }

  operator delete(v31);
}

void sub_100B88F3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100B88F60(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100B88F6C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    BOOL v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000071BC(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100B89234( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B8A64C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        unint64_t v6 = 0LL;
        while (1)
        {
          unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v9 = v5++ >= 9;
          if (v9)
          {
            unint64_t v6 = 0LL;
            int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v6 = 0LL;
        }
LABEL_13:
        int v11 = v6 & 7;
        if (!v10 && v11 != 4)
        {
          switch((v6 >> 3))
          {
            case 1u:
              uint64_t v13 = objc_alloc_init(&OBJC_CLASS___ALSCellTower);
              [(id)a1 addCellTower:v13];

              return 0LL;
            case 2u:
              BOOL v14 = objc_alloc_init(&OBJC_CLASS___ALSWirelessAP);
              [(id)a1 addWirelessAP:v14];

              goto LABEL_116;
            case 3u:
              char v15 = 0;
              unsigned int v16 = 0;
              uint64_t v17 = 0LL;
              *(_BYTE *)(a1 + 144) |= 4u;
              while (2)
              {
                unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v18 == -1LL || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
                  v17 |= (unint64_t)(v19 & 0x7F) << v15;
                  if (v19 < 0)
                  {
                    v15 += 7;
                    BOOL v9 = v16++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_120;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_120:
              uint64_t v62 = 96LL;
              goto LABEL_149;
            case 4u:
              char v20 = 0;
              unsigned int v21 = 0;
              uint64_t v17 = 0LL;
              *(_BYTE *)(a1 + 144) |= 0x40u;
              while (2)
              {
                unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v22 == -1LL || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v23 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
                  v17 |= (unint64_t)(v23 & 0x7F) << v20;
                  if (v23 < 0)
                  {
                    v20 += 7;
                    BOOL v9 = v21++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_124;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_124:
              uint64_t v62 = 112LL;
              goto LABEL_149;
            case 5u:
              String = (void *)PBReaderReadString(a2);

              *(void *)(a1 + ++*(void *)(result + 32) = String;
              goto LABEL_150;
            case 0x15u:
              unint64_t v25 = objc_alloc_init(&OBJC_CLASS___ALSCdmaCellTower);
              [(id)a1 addCdmaCellTower:v25];

              goto LABEL_116;
            case 0x16u:
              uint64_t v26 = objc_alloc_init(&OBJC_CLASS___ALSCdmaEvdoTower);
              [(id)a1 addCdmaEvdoTower:v26];

              goto LABEL_116;
            case 0x17u:
              char v27 = 0;
              unsigned int v28 = 0;
              uint64_t v17 = 0LL;
              *(_BYTE *)(a1 + 144) |= 1u;
              while (2)
              {
                unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v29 == -1LL || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v30 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
                  v17 |= (unint64_t)(v30 & 0x7F) << v27;
                  if (v30 < 0)
                  {
                    v27 += 7;
                    BOOL v9 = v28++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_128;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_128:
              uint64_t v62 = 88LL;
              goto LABEL_149;
            case 0x18u:
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v17 = 0LL;
              *(_BYTE *)(a1 + 144) |= 2u;
              while (2)
              {
                unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v33 == -1LL || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v34 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
                  v17 |= (unint64_t)(v34 & 0x7F) << v31;
                  if (v34 < 0)
                  {
                    v31 += 7;
                    BOOL v9 = v32++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_132;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_132:
              uint64_t v62 = 92LL;
              goto LABEL_149;
            case 0x19u:
              unint64_t v35 = objc_alloc_init(&OBJC_CLASS___ALSLteCellTower);
              [(id)a1 addLteCellTower:v35];

              goto LABEL_116;
            case 0x1Au:
              char v36 = 0;
              unsigned int v37 = 0;
              uint64_t v17 = 0LL;
              *(_BYTE *)(a1 + 144) |= 8u;
              while (2)
              {
                unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v38 == -1LL || v38 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v39 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 1;
                  v17 |= (unint64_t)(v39 & 0x7F) << v36;
                  if (v39 < 0)
                  {
                    v36 += 7;
                    BOOL v9 = v37++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_136;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_136:
              uint64_t v62 = 100LL;
              goto LABEL_149;
            case 0x1Bu:
              uint64_t v40 = objc_alloc_init(&OBJC_CLASS___ALSScdmaCellTower);
              [(id)a1 addScdmaCellTower:v40];

              goto LABEL_116;
            case 0x1Cu:
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v17 = 0LL;
              *(_BYTE *)(a1 + 144) |= 0x20u;
              while (2)
              {
                unint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v43 == -1LL || v43 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v44 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 1;
                  v17 |= (unint64_t)(v44 & 0x7F) << v41;
                  if (v44 < 0)
                  {
                    v41 += 7;
                    BOOL v9 = v42++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_140;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_140:
              uint64_t v62 = 108LL;
              goto LABEL_149;
            case 0x1Du:
              uint64_t v45 = objc_alloc_init(&OBJC_CLASS___ALSNr5GCellTower);
              [(id)a1 addNr5GCellTower:v45];

              goto LABEL_116;
            case 0x1Eu:
              char v46 = 0;
              unsigned int v47 = 0;
              uint64_t v17 = 0LL;
              *(_BYTE *)(a1 + 144) |= 0x10u;
              while (2)
              {
                unint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v48 == -1LL || v48 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v49 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 1;
                  v17 |= (unint64_t)(v49 & 0x7F) << v46;
                  if (v49 < 0)
                  {
                    v46 += 7;
                    BOOL v9 = v47++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_144;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_144:
              uint64_t v62 = 104LL;
              goto LABEL_149;
            case 0x1Fu:
              if (v11 == 2)
              {
                uint64_t result = PBReaderPlaceMark(a2, v69);
                if (!(_DWORD)result) {
                  return result;
                }
                while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2
                                                                                    + OBJC_IVAR___PBDataReader__length)
                     && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                {
                  char v51 = 0;
                  unsigned int v52 = 0;
                  uint64_t v53 = 0LL;
                  while (1)
                  {
                    unint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                    if (v54 == -1LL || v54 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                      break;
                    }
                    char v55 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
                    *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 1;
                    v53 |= (unint64_t)(v55 & 0x7F) << v51;
                    if ((v55 & 0x80) == 0) {
                      goto LABEL_103;
                    }
                    v51 += 7;
                    BOOL v9 = v52++ >= 9;
                    if (v9)
                    {
                      uint64_t v56 = 0LL;
                      goto LABEL_106;
                    }
                  }

                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_103:
                  if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                    uint64_t v56 = 0LL;
                  }
                  else {
                    uint64_t v56 = v53;
                  }
LABEL_106:
                  PBRepeatedInt32Add(a1 + 8, v56);
                }

LABEL_150:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
            case 0x20u:
              char v57 = 0;
              unsigned int v58 = 0;
              uint64_t v17 = 0LL;
              *(_BYTE *)(a1 + 144) |= 0x80u;
              while (2)
              {
                unint64_t v59 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v59 == -1LL || v59 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v60 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v59);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v59 + 1;
                  v17 |= (unint64_t)(v60 & 0x7F) << v57;
                  if (v60 < 0)
                  {
                    v57 += 7;
                    BOOL v9 = v58++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_148;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_148:
              uint64_t v62 = 128LL;
LABEL_149:
              *(_DWORD *)(a1 + v62) = v17;
              goto LABEL_150;
            case 0x21u:
              unsigned int v61 = objc_alloc_init(&OBJC_CLASS___ALSMeta);

              *(void *)(a1 + 72) = v61;
              return 0LL;
            default:
              if ((PBReaderSkipValueWithTag(a2) & 1) != 0) {
                goto LABEL_150;
              }
              return 0LL;
          }
        }
      }

      break;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

  unint64_t v22 = *(_DWORD *)(a2 + 248);
  v5 |= 0x800000000000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 2++*(void *)(result + 88) = v6;
  *(_DWORD *)(a1 + 2++*(void *)(result + 48) = v22;
  char v4 = *v3;
  if ((*(_WORD *)(a2 + 288) & 0x400) == 0)
  {
LABEL_77:
    if ((v4 & 0x4000000000000000LL) == 0) {
      goto LABEL_78;
    }
    goto LABEL_152;
  }

  PB::TextFormatter::format(this, "shortAudioMaxPulseThreshold", *(float *)(a1 + 256));
  unint64_t v6 = *v5;
  unint64_t v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x400) == 0)
  {
LABEL_76:
    if ((v6 & 0x4000000000000000LL) == 0) {
      goto LABEL_77;
    }
    goto LABEL_152;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 260), 0x47u);
  unsigned int v5 = *v4;
  if ((*v4 & 0x8000000000000000LL) == 0)
  {
LABEL_76:
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }

  uint64_t result = *(float *)(a2 + 208);
  v5 |= 0x2000000000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 3++*(void *)(result + 24) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 20_Block_object_dispose(va, 8) = result;
  LOWORD(v_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 324);
  char v4 = *v3;
  if ((*v3 & 0x4000000000000LL) == 0)
  {
LABEL_70:
    if ((v4 & 0x100000000000LL) == 0) {
      goto LABEL_71;
    }
    goto LABEL_152;
  }

  PB::TextFormatter::format(this, "lowSenseWithoutAudioZgtimeThreshold", *(float *)(a1 + 236));
  unint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  unint64_t v6 = *v5;
  if ((*v5 & 0x200000000000000LL) == 0)
  {
LABEL_69:
    if ((v6 & 0x400000000000000LL) == 0) {
      goto LABEL_70;
    }
    goto LABEL_152;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 208), 0x104u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  unsigned int v5 = *v4;
  if ((*v4 & 0x4000000000000LL) == 0)
  {
LABEL_70:
    if ((v5 & 0x100000000000LL) == 0) {
      goto LABEL_71;
    }
    goto LABEL_152;
  }

  char v39 = *(_BYTE *)(a2 + 341);
  v6 |= 0x40000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 3++*(void *)(result + 64) = v6;
  *(_BYTE *)(a1 + 341) = v39;
  char v4 = *v3;
  unint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_152;
  }

  PB::TextFormatter::format(this, "maximumHoldDuration", *(float *)(a1 + 128));
  unint64_t v7 = *v5;
  unint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_49:
    if ((v7 & 0x1000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_152;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 341), 0x134u);
  unsigned int v5 = *v4;
  unint64_t v6 = v4[1];
  if ((v6 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_152;
  }

  uint64_t v85 = *(_DWORD *)(a2 + 92);
  v3 |= 0x20000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 92) = v85;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  unint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_72:
    if ((v2 & 0x200000000000LL) == 0) {
      goto LABEL_73;
    }
    goto LABEL_152;
  }

  PB::TextFormatter::format(this, "maxSaturation", *(float *)(a1 + 140));
  unint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_152;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 171), 0x4B8u);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  char v4 = *(void *)(v3 + 204);
  if ((v4 & 0x1000000000LL) == 0)
  {
LABEL_72:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_152;
  }

uint64_t sub_100B8D84C(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    switch((v6 >> 3))
    {
      case 0x15u:
        uint64_t v13 = objc_alloc_init(&OBJC_CLASS___ALSCdmaCellTower);
        [a1 addCdmaCellTower:v13];

        return 0LL;
      case 0x16u:
        char v15 = objc_alloc_init(&OBJC_CLASS___ALSLteCellTower);
        [a1 addLteCellTower:v15];

        goto LABEL_37;
      case 0x17u:
        unsigned int v16 = objc_alloc_init(&OBJC_CLASS___ALSScdmaCellTower);
        [a1 addScdmaCellTower:v16];

        goto LABEL_37;
      case 0x18u:
        uint64_t v17 = objc_alloc_init(&OBJC_CLASS___ALSNr5GCellTower);
        [a1 addNr5GCellTower:v17];

        goto LABEL_37;
      default:
        if ((_DWORD)v12 != 2)
        {
          if ((_DWORD)v12 == 1)
          {
            BOOL v14 = objc_alloc_init(&OBJC_CLASS___ALSCellTower);
            [a1 addCellTower:v14];

            goto LABEL_37;
          }

          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
LABEL_38:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        unint64_t v18 = objc_alloc_init(&OBJC_CLASS___ALSWirelessAP);
        [a1 addWirelessAP:v18];

        if (PBReaderPlaceMark(a2, v20) && (sub_100BD1ED0((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_37:
          PBReaderRecallMark(a2, v20);
          goto LABEL_38;
        }

        return 0LL;
    }
  }

void sub_100B8EDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CMVO2MaxRetrocomputeRecord;
  uint64_t v5 = a2;
  BOOL v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  sub_100B8F37C(a1, &v3);
}

uint64_t sub_100B8EEC0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  *(void *)sub_100C6AAF0(a1, a2, a3, a4, a5) = off_101874448;
  *(void *)(a1 + ++*(void *)(result + 48) = -[CLVO2MaxSubscriptionAdapter initWithSubscription:]( objc_alloc(&OBJC_CLASS___CLVO2MaxSubscriptionAdapter),  "initWithSubscription:",  a1);
  *(void *)(a1 + ++*(void *)(result + 56) = 0LL;
  id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLVO2MaxService");
  *(void *)(a1 + ++*(void *)(result + 56) = v6;
  objc_msgSend(v6, "registerDelegate:inSilo:", *(void *)(a1 + 48), objc_msgSend(*(id *)(a1 + 8), "silo"));
  return a1;
}

void sub_100B8EF4C(_Unwind_Exception *a1)
{
}

uint64_t sub_100B8EF64(uint64_t a1)
{
  *(void *)a1 = off_101874448;
  [*(id *)(a1 + 48) invalidate];

  *(void *)(a1 + ++*(void *)(result + 48) = 0LL;
  *(void *)(a1 + ++*(void *)(result + 56) = 0LL;
  return sub_100C6AB50(a1);
}

void sub_100B8EFB8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100B8EF64(a1);
  operator delete(v1);
}

void *sub_100B8EFCC@<X0>(uint64_t a1@<X8>)
{
  v6[0] = &off_1018744C8;
  v6[1] = sub_100B8F128;
  _DWORD v6[2] = 0LL;
  unint64_t v7 = v6;
  sub_1010DDBC0(__p, "kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate");
  sub_10089DF9C((uint64_t)v10, (uint64_t)v6);
  sub_100B8F7B0(a1, (unsigned __int8 *)__p, 1LL);
  unint64_t v2 = v11;
  if (v11 == v10)
  {
    uint64_t v3 = 4LL;
    unint64_t v2 = v10;
  }

  else
  {
    if (!v11) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    uint64_t result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100B8F0DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  BOOL v14 = a12;
  if (a12 == &a9)
  {
    uint64_t v15 = 4LL;
    BOOL v14 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100B8F128(void *a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_101874498);
  }
  uint64_t v5 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[3];
    *(_DWORD *)std::string buf = 138412802;
    uint64_t v19 = v6;
    __int16 v20 = 2048;
    unsigned int v21 = a1;
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "VO2Max Retrocompute Status, Subscription changed, %@, %p, %d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101874498);
    }
    uint64_t v9 = a1[3];
    int v12 = 138412802;
    uint64_t v13 = v9;
    __int16 v14 = 2048;
    uint64_t v15 = a1;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "VO2Max Retrocompute Status, Subscription changed, %@, %p, %d",  &v12,  28);
    int v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxSubscription::handleRequestVO2MaxRetrocomputeStatusUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  sub_100C6AC8C((uint64_t)a1);
  uint64_t v8 = a1[6];
  unint64_t v7 = (void *)a1[7];
  if (a2) {
    [v7 registerForRetrocomputeStatusUpdates:v8];
  }
  else {
    [v7 unregisterForRetrocomputeStatusUpdates:v8];
  }
}

void sub_100B8F350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100B8F37C(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B8F410(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100B8F424(id a1)
{
  qword_1019346E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

__n128 sub_100B8F450(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &off_1018744C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_100B8F48C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1018744C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100B8F4B0(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_100B8F4B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100B8F4F4()
{
}

void sub_100B8F500(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100B8F584(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100B8F56C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B8F584(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    int v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101874538);
    }
    int v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101874538);
      }
    }

    int v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_100B8F768( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100B8F784(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100B8F7B0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 16) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(result + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100B8F828(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100B8F814(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100B8F828(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100B8FAA8(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(result + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100B8FA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100B8FAA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + ++*(void *)(result + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100B8FB1C(v8 + 2, a3);
  *(_BYTE *)(a4 + ++*(void *)(result + 16) = 1;
  return result;
}

void sub_100B8FB04(_Unwind_Exception *a1)
{
}

void *sub_100B8FB1C(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100B8FB74(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100B90030(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_66;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_68;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_68:
        uint64_t v39 = 24LL;
        goto LABEL_89;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 4u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_72;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_72:
        uint64_t v39 = 28LL;
        goto LABEL_89;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_76;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_76:
        uint64_t v39 = 8LL;
        goto LABEL_89;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 0x10u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1LL || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_80;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_80:
        uint64_t v39 = 36LL;
        goto LABEL_89;
      case 5u:
        char v30 = objc_alloc_init(&OBJC_CLASS___ALSLocation);

        *(void *)(a1 + ++*(void *)(result + 16) = v30;
        if (PBReaderPlaceMark(a2, v40) && (sub_100B87820((uint64_t)v30, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v40);
LABEL_90:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 6u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 0x20u;
        while (2)
        {
          unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1LL || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v34 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v14 |= (unint64_t)(v34 & 0x7F) << v31;
            if (v34 < 0)
            {
              v31 += 7;
              BOOL v9 = v32++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_84;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_84:
        uint64_t v39 = 40LL;
        goto LABEL_89;
      case 7u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 8u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1LL || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v38 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v14 |= (unint64_t)(v38 & 0x7F) << v35;
            if (v38 < 0)
            {
              v35 += 7;
              BOOL v9 = v36++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_88;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_88:
        uint64_t v39 = 32LL;
LABEL_89:
        *(_DWORD *)(a1 + v39) = v14;
        goto LABEL_90;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_90;
    }
  }

uint64_t sub_100B91B30(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    unsigned int v5 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    unint64_t v6 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    unint64_t v7 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0LL;
      while (1)
      {
        unint64_t v11 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v11 == -1LL || v11 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v12 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v11);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v11 + 1;
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v13 = v9++ >= 9;
        if (v13)
        {
          unint64_t v10 = 0LL;
          int v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v10 = 0LL;
      }
LABEL_14:
      int v15 = v10 & 7;
      if (v14 || v15 == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      switch((v10 >> 3))
      {
        case 0x15u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0LL;
          *(_BYTE *)(a1 + v7[846]) |= 4u;
          while (2)
          {
            unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
              v19 |= (unint64_t)(v21 & 0x7F) << v17;
              if (v21 < 0)
              {
                v17 += 7;
                BOOL v13 = v18++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_100;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v19) = 0;
          }
LABEL_100:
          uint64_t v64 = 64LL;
          goto LABEL_138;
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
LABEL_34:
          char v27 = PBReaderSkipValueWithTag(a2);
          unint64_t v7 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          if ((v27 & 1) == 0) {
            return 0LL;
          }
          goto LABEL_145;
        case 0x1Fu:
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v19 = 0LL;
          *(_BYTE *)(a1 + v7[846]) |= 0x10u;
          while (2)
          {
            unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v30 == -1LL || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v31 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
              v19 |= (unint64_t)(v31 & 0x7F) << v28;
              if (v31 < 0)
              {
                v28 += 7;
                BOOL v13 = v29++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_104;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v19) = 0;
          }
LABEL_104:
          uint64_t v64 = 72LL;
          goto LABEL_138;
        case 0x20u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v19 = 0LL;
          *(_BYTE *)(a1 + v7[846]) |= 2u;
          while (2)
          {
            unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v34 == -1LL || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v35 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
              v19 |= (unint64_t)(v35 & 0x7F) << v32;
              if (v35 < 0)
              {
                v32 += 7;
                BOOL v13 = v33++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_108;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v19) = 0;
          }
LABEL_108:
          uint64_t v64 = 60LL;
          goto LABEL_138;
        case 0x21u:
          if (v15 == 2)
          {
            uint64_t result = PBReaderPlaceMark(a2, v72);
            if (!(_DWORD)result) {
              return result;
            }
            while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
                 && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            {
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0LL;
              while (1)
              {
                unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v40 == -1LL || v40 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                  break;
                }
                char v41 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 1;
                v39 |= (unint64_t)(v41 & 0x7F) << v37;
                if ((v41 & 0x80) == 0) {
                  goto LABEL_62;
                }
                v37 += 7;
                BOOL v13 = v38++ >= 9;
                if (v13)
                {
                  uint64_t v42 = 0LL;
                  goto LABEL_65;
                }
              }

              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_62:
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v42 = 0LL;
              }
              else {
                uint64_t v42 = v39;
              }
LABEL_65:
              PBRepeatedInt32Add(a1 + 8, v42);
            }

            PBReaderRecallMark(a2, v72);
          }

          else
          {
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v67 = 0LL;
            while (1)
            {
              unint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v68 == -1LL || v68 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                break;
              }
              char v69 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 1;
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0) {
                goto LABEL_140;
              }
              v65 += 7;
              BOOL v13 = v66++ >= 9;
              if (v13)
              {
                uint64_t v70 = 0LL;
                goto LABEL_143;
              }
            }

            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_140:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
              uint64_t v70 = 0LL;
            }
            else {
              uint64_t v70 = v67;
            }
LABEL_143:
            PBRepeatedInt32Add(a1 + 8, v70);
          }

          goto LABEL_144;
        case 0x22u:
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v19 = 0LL;
          *(_BYTE *)(a1 + v7[846]) |= 8u;
          while (2)
          {
            unint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v45 == -1LL || v45 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v46 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
              v19 |= (unint64_t)(v46 & 0x7F) << v43;
              if (v46 < 0)
              {
                v43 += 7;
                BOOL v13 = v44++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_112;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v19) = 0;
          }
LABEL_112:
          uint64_t v64 = 68LL;
          goto LABEL_138;
        case 0x23u:
          unsigned int v47 = v6;
          unint64_t v48 = v5;
          uint64_t v49 = v2;
          uint64_t v50 = objc_alloc_init(&OBJC_CLASS___ALSMeta);

          *(void *)(a1 + ++*(void *)(result + 48) = v50;
          PBReaderRecallMark(a2, v72);
          uint64_t v2 = v49;
          unsigned int v5 = v48;
          unint64_t v6 = v47;
LABEL_144:
          unint64_t v7 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
LABEL_145:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          break;
        default:
          switch((v10 >> 3))
          {
            case 1u:
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0LL;
              while (2)
              {
                unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v25 == -1LL || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v26 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
                  v24 |= (unint64_t)(v26 & 0x7F) << v22;
                  if (v26 < 0)
                  {
                    v22 += 7;
                    BOOL v13 = v23++ >= 9;
                    if (v13)
                    {
                      uint64_t v24 = 0LL;
                      goto LABEL_124;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v24 = 0LL;
              }
LABEL_124:
              uint64_t v71 = v5[854];
              goto LABEL_129;
            case 2u:
              char v51 = 0;
              unsigned int v52 = 0;
              uint64_t v24 = 0LL;
              while (2)
              {
                unint64_t v53 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v53 == -1LL || v53 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v54 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 1;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if (v54 < 0)
                  {
                    v51 += 7;
                    BOOL v13 = v52++ >= 9;
                    if (v13)
                    {
                      uint64_t v24 = 0LL;
                      goto LABEL_128;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v24 = 0LL;
              }
LABEL_128:
              uint64_t v71 = v6[855];
LABEL_129:
              *(void *)(a1 + v71) = v24;
              goto LABEL_145;
            case 3u:
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0LL;
              *(_BYTE *)(a1 + v7[846]) |= 0x20u;
              while (2)
              {
                unint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v58 == -1LL || v58 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v59 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 1;
                  v57 |= (unint64_t)(v59 & 0x7F) << v55;
                  if (v59 < 0)
                  {
                    v55 += 7;
                    BOOL v13 = v56++ >= 9;
                    if (v13)
                    {
                      uint64_t v57 = 0LL;
                      goto LABEL_133;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v57 = 0LL;
              }
LABEL_133:
              *(_BYTE *)(a1 + 76) = v57 != 0;
              goto LABEL_145;
            case 4u:
              char v60 = 0;
              unsigned int v61 = 0;
              uint64_t v19 = 0LL;
              *(_BYTE *)(a1 + v7[846]) |= 1u;
              break;
            default:
              goto LABEL_34;
          }

          while (2)
          {
            unint64_t v62 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v62 == -1LL || v62 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v63 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62 + 1;
              v19 |= (unint64_t)(v63 & 0x7F) << v60;
              if (v63 < 0)
              {
                v60 += 7;
                BOOL v13 = v61++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_137;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v19) = 0;
          }
LABEL_137:
          uint64_t v64 = 56LL;
LABEL_138:
          *(_DWORD *)(a1 + v++*(void *)(result + 64) = v19;
          goto LABEL_145;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100B9351C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199AC70, (void *)&_mh_execute_header);
}

void sub_100B93604(id a1)
{
  qword_10199ACA0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLMicroLocationNotifierSilo");
}

uint64_t sub_100B936B8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100B9B180;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199ACB0 != -1) {
    dispatch_once(&qword_10199ACB0, block);
  }
  return qword_1019A1D30;
}

void sub_100B93844(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_1004F2598();
  if ((sub_1004FA4D0(v6) & 1) != 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    unint64_t v7 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      char v17 = "";
      __int16 v18 = 2082;
      id v19 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Notifier adding a client for Milo connection event updates, connectionToken:%{publi c, location:escape_only}s}",  buf,  0x1Cu);
    }

    if ([*(id *)(a1 + 3544) objectForKey:a3])
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      char v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v15 = 0;
        __int16 v16 = 2082;
        char v17 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Adding a client for MiLo connection event updates failed, a client with same connection token exists}",  buf,  0x12u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101874AF8);
        }
      }

      unsigned int v9 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v15 = 0;
        __int16 v16 = 2082;
        char v17 = "";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Adding a client for MiLo connection event updates failed, a client with same connection token exists",  "{msg%{public}.0s:Adding a client for MiLo connection event updates failed, a client with same connection token exists}",  buf,  0x12u);
      }
    }

    else
    {
      [*(id *)(a1 + 3544) setObject:a2 forKeyedSubscript:a3];
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    unint64_t v10 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "registerForMiloServiceEventUpdates, MicroLocations not supported on this platform",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "registerForMiloServiceEventUpdates, MicroLocations not supported on this platform",  v13,  2);
      char v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationNotifier::registerForMiloServiceEventUpdates(id<CLMicroLocationNotifierClientProtocol>, NSUUID *)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

void sub_100B93BD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_1004F2598();
  if ((sub_1004FA4D0(v5) & 1) != 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      id v16 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Notifier removed a client for Milo connection event updates, connectionToken:%{publ ic, location:escape_only}s}",  buf,  0x1Cu);
    }

    [*(id *)(a1 + 3544) removeObjectForKey:a3];
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    unint64_t v7 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "unregisterForMiloServiceEventUpdates, MicroLocations not supported on this platform",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      v10[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "unregisterForMiloServiceEventUpdates, MicroLocations not supported on this platform",  v10,  2);
      unsigned int v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationNotifier::unregisterForMiloServiceEventUpdates(id<CLMicroLocationNotifierClientProtocol>, NSUUID *)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

void sub_100B93E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004F2598();
  if ((sub_1004FA4D0(v4) & 1) != 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      __int16 v13 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Added a client for Milo prediction event updates}",  buf,  0x12u);
    }

    [*(id *)(a1 + 3552) addObject:a2];
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "registerForMiloPredictionEventUpdates, MicroLocations not supported on this platform",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "registerForMiloPredictionEventUpdates, MicroLocations not supported on this platform",  v9,  2);
      char v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationNotifier::registerForMiloPredictionEventUpdates(id<CLMicroLocationNotifierClientProtocol>)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

void sub_100B9407C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004F2598();
  if ((sub_1004FA4D0(v4) & 1) != 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      __int16 v13 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:removed a client for Milo prediction event updates}",  buf,  0x12u);
    }

    [*(id *)(a1 + 3552) removeObject:a2];
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "unregisterForMiloPredictionEventUpdates, MicroLocations not supported on this platform",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "unregisterForMiloPredictionEventUpdates, MicroLocations not supported on this platform",  v9,  2);
      char v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationNotifier::unregisterForMiloPredictionEventUpdates(id<CLMicroLocationNotifierClientProtocol>)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

void sub_100B9434C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B94380(uint64_t a1, const std::string *a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  std::string __p = 0LL;
  unint64_t v58 = 0LL;
  unint64_t v59 = 0LL;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  id v8 = [a4 countByEnumeratingWithState:&v53 objects:v82 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v54;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v54 != v9) {
          objc_enumerationMutation(a4);
        }
        id v11 = [*(id *)(*((void *)&v53 + 1) + 8 * (void)i) locationType];
        id v12 = v11;
        __int16 v13 = v58;
        if ((unint64_t)v58 >= v59)
        {
          __int16 v15 = __p;
          uint64_t v16 = ((char *)v58 - (_BYTE *)__p) >> 3;
          unint64_t v17 = v16 + 1;
          uint64_t v18 = v59 - (void)__p;
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            unint64_t v20 = (char *)sub_1000071BC((uint64_t)&v59, v19);
            __int16 v15 = __p;
            __int16 v13 = v58;
          }

          else
          {
            unint64_t v20 = 0LL;
          }

          char v21 = &v20[8 * v16];
          *(void *)char v21 = v12;
          int v14 = v21 + 8;
          while (v13 != v15)
          {
            uint64_t v22 = *--v13;
            *((void *)v21 - 1) = v22;
            v21 -= 8;
          }

          std::string __p = v21;
          unint64_t v58 = v14;
          unint64_t v59 = (unint64_t)&v20[8 * v19];
          if (v15) {
            operator delete(v15);
          }
        }

        else
        {
          void *v58 = v11;
          int v14 = v13 + 1;
        }

        unint64_t v58 = v14;
      }

      id v8 = [a4 countByEnumeratingWithState:&v53 objects:v82 count:16];
    }

    while (v8);
  }

  sub_1000637D0((uint64_t)&v48);
  LODWORD(v52) = v52 | 2;
  unsigned int v23 = v49;
  if (v49 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unsigned int v23 = (std::string *)operator new(0x18uLL);
    v23->__r_.__value_.__r.__words[0] = 0LL;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v49 = v23;
  }

  std::string::operator=(v23, a2);
  LODWORD(v52) = v52 | 4;
  uint64_t v50 = a3;
  *(_DWORD *)std::string buf = 0;
  sub_100018E34((int *)buf);
  *(void *)&v79[0] = sub_100017338((ssize_t)buf);
  *((void *)&v79[0] + 1) = v24;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100BA2AF4(v79, (uint64_t)&v48, (uint64_t)&v66, Current_1);
  sub_100042DF8((uint64_t *)(a1 + 552), &v66);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v67[1]);
  sub_100019D7C((unsigned int *)buf);
  char v46 = 0LL;
  uint64_t v47 = 0LL;
  unint64_t v45 = 0LL;
  sub_100007590(&v45, __p, (uint64_t)v58, ((char *)v58 - (_BYTE *)__p) >> 3);
  sub_10012D7A4(a1 + 584, (uint64_t)a2, a3, (uint64_t)&v45, a6, (uint64_t)v79);
  unsigned int v33 = v45;
  if (v45)
  {
    char v46 = v45;
    operator delete(v45);
  }

  memset(v67, 0, 48);
  char v70 = 0;
  char v71 = 0;
  char v72 = 0;
  memset(v68, 0, sizeof(v68));
  char v69 = 0;
  __int128 v74 = 0u;
  memset(v75, 0, sizeof(v75));
  uint64_t v73 = -1LL;
  uint64_t v76 = -1LL;
  memset(v78, 0, 48);
  if (v81 == -1)
  {
    if (!v80)
    {
      sub_101262128( (uint64_t)v33,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v37,  v38,  v39,  v40,  (uint64_t)a5,  a6,  (uint64_t)a2,  a3,  (uint64_t)v45,  (uint64_t)v46,  v47,  v48,  (uint64_t)v49,  v50,  v51,  v52);
      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNotifier.mm",  1894,  "createServiceForClient");
      __break(1u);
    }

    *((void *)&v66 + 1) = 1LL;
    __int128 v77 = v79[0];
  }

  else
  {
    *((void *)&v66 + 1) = 2LL;
    uint64_t v76 = v81;
  }

  unint64_t v34 = sub_100BA2184((uint64_t)&v66);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  char v35 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    id v36 = objc_msgSend(objc_msgSend(a5, "UUIDString"), "UTF8String");
    *(_DWORD *)std::string buf = 68289282;
    int v61 = 0;
    __int16 v62 = 2082;
    char v63 = "";
    __int16 v64 = 2082;
    id v65 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Notifier about to send create service response, connectionToken:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  objc_msgSend(objc_msgSend(*(id *)(a1 + 3544), "objectForKeyedSubscript:", a5), "onMiLoServiceEventUpdate:", v34);
  sub_100BA6BE0(v78);
  sub_100231C10(&v75[1]);
  if ((void)v74)
  {
    *((void *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }

  sub_100210578(v68);
  sub_100210578(v67);
  sub_100079EA0((wireless_diagnostics::google::protobuf::MessageLite *)&v48);
  if (__p)
  {
    unint64_t v58 = __p;
    operator delete(__p);
  }

void sub_100B94814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100B94950( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B94984(uint64_t a1, std::string *a2, void *a3, void *a4, unsigned __int8 *a5)
{
  id v9 = sub_100101534(a3, (uint64_t)&v52);
  if (!v53)
  {
    sub_101262270(v9);
LABEL_29:
    __break(1u);
    return;
  }

  sub_1000637FC((uint64_t)&v28);
  LODWORD(v++*(void *)(result + 32) = v32 | 2;
  unint64_t v10 = v29;
  if (v29 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unint64_t v10 = (std::string *)operator new(0x18uLL);
    v10->__r_.__value_.__r.__words[0] = 0LL;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v29 = v10;
  }

  std::string::operator=(v10, a2);
  if (!v53) {
    sub_100036CD8();
  }
  memset(&__str, 0, sizeof(__str));
  if ((sub_100013090((uint64_t)&v52, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v35);
    *(void *)&__int128 v35 = &off_101818CB0;
    sub_1000139B0((uint64_t)&v35);
  }

  LODWORD(v++*(void *)(result + 32) = v32 | 4;
  id v11 = v30;
  if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    id v11 = (std::string *)operator new(0x18uLL);
    v11->__r_.__value_.__r.__words[0] = 0LL;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v30 = v11;
  }

  std::string::operator=(v11, &__str);
  LODWORD(buf) = 0;
  sub_100018E34((int *)&buf);
  __str.__r_.__value_.__r.__words[0] = sub_100017338((ssize_t)&buf);
  __str.__r_.__value_.__l.__size_ = v12;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100BA2B7C(&__str, (uint64_t)&v28, (uint64_t)&v35, Current_1);
  sub_100042DF8((uint64_t *)(a1 + 552), &v35);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)((char *)v37 + 8));
  sub_100019D7C((unsigned int *)&buf);
  if (!v53) {
    sub_100036CD8();
  }
  sub_10012D84C(a1 + 584, (unsigned __int8 *)a2, v52, *((uint64_t *)&v52 + 1), a5, (__n128 *)&__str);
  memset(v37, 0, 48);
  char v40 = 0;
  char v41 = 0;
  char v42 = 0;
  memset(v38, 0, sizeof(v38));
  char v39 = 0;
  __int128 __p = 0u;
  memset(v45, 0, sizeof(v45));
  uint64_t v43 = -1LL;
  uint64_t v46 = -1LL;
  memset(v48, 0, 48);
  if (v51 != -1)
  {
    *((void *)&v35 + 1) = 4LL;
    if (!v53) {
      sub_100036CD8();
    }
    __int128 v47 = v52;
    uint64_t v46 = v51;
    goto LABEL_16;
  }

  if (!v50)
  {
    sub_1012623D8( v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v25,  v26,  v27,  v28,  (uint64_t)v29,  (uint64_t)v30,  v31,  v32,  buf,  *(uint64_t *)v34,  *(uint64_t *)&v34[8],  *(uint64_t *)&v34[16],  v35,  *((uint64_t *)&v35 + 1),  (uint64_t)v36,  *(uint64_t *)&v37[0]);
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNotifier.mm",  1925,  "deleteServiceForClient");
    goto LABEL_29;
  }

  *((void *)&v35 + 1) = 3LL;
  __int128 v47 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
LABEL_16:
  uint64_t v22 = sub_100BA2184((uint64_t)&v35);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  unsigned int v23 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    id v24 = objc_msgSend(objc_msgSend(a4, "UUIDString"), "UTF8String");
    uint64_t buf = 68289282LL;
    *(_WORD *)unint64_t v34 = 2082;
    *(void *)&unsigned int v34[2] = "";
    *(_WORD *)&v34[10] = 2082;
    *(void *)&v34[12] = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Notifier about to send delete service response, connectionToken:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
  }

  objc_msgSend(objc_msgSend(*(id *)(a1 + 3544), "objectForKeyedSubscript:", a4), "onMiLoServiceEventUpdate:", v22);
  sub_100BA6BE0(v48);
  sub_100231C10(&v45[1]);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }

  sub_100210578(v38);
  sub_100210578(v37);
  sub_10007A600((wireless_diagnostics::google::protobuf::MessageLite *)&v28);
}

void sub_100B94D48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, std::bad_cast a21)
{
}

void sub_100B94E68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B94E9C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  memset(v16, 0, sizeof(v16));
  char v17 = 0;
  __int128 __p = 0u;
  memset(v23, 0, 96);
  uint64_t v21 = -1LL;
  v23[12] = -1LL;
  memset(v24, 0, 48);
  uint64_t v14 = 5LL;
  uint64_t v6 = v11;
  unint64_t v7 = v12;
  if (v11 != v12)
  {
    do
    {
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      *(_OWORD *)&_BYTE buf[24] = 0u;
      *(_OWORD *)uint64_t buf = *(_OWORD *)v6;
      *(void *)&uint8_t buf[16] = v6[2];
      sub_100BA97F8(v24, (__int128 *)buf);
      sub_100210578(&buf[24]);
      v6 += 4;
    }

    while (v6 != v7);
  }

  id v8 = sub_100BA2184((uint64_t)v13);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  id v9 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    id v10 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
    *(void *)uint64_t buf = 68289282LL;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2082;
    *(void *)&buf[20] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Notifier about to send query service response, connectionToken:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  objc_msgSend(objc_msgSend(*(id *)(a1 + 3544), "objectForKeyedSubscript:", a3), "onMiLoServiceEventUpdate:", v8);
  sub_100BA6BE0(v24);
  sub_100231C10(&v23[1]);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }

  sub_100210578(v16);
  sub_100210578(v15);
  if (v11)
  {
    std::string::size_type v12 = v11;
    operator delete(v11);
  }

void sub_100B950E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100B951BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B951F0(uint64_t a1, std::string *a2, void *a3, void *a4, const void **a5)
{
  id v9 = sub_100101534(a4, (uint64_t)v34);
  if (!v37)
  {
    sub_101262520(v9);
LABEL_25:
    __break(1u);
    return;
  }

  if (!v35)
  {
    sub_101262688(v9);
    goto LABEL_25;
  }

  sub_100063828((uint64_t)v16);
  v19 |= 2u;
  id v10 = v17;
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    id v10 = (std::string *)operator new(0x18uLL);
    v10->__r_.__value_.__r.__words[0] = 0LL;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    char v17 = v10;
  }

  std::string::operator=(v10, a2);
  if (!v37) {
    sub_100036CD8();
  }
  memset(&__str, 0, sizeof(__str));
  if ((sub_100013090((uint64_t)&v36, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast(v20);
    v20[0].__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
    sub_1000139B0((uint64_t)v20);
  }

  v19 |= 4u;
  id v11 = v18;
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    id v11 = (std::string *)operator new(0x18uLL);
    v11->__r_.__value_.__r.__words[0] = 0LL;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    char v18 = v11;
  }

  std::string::operator=(v11, &__str);
  int v15 = 0;
  sub_100018E34(&v15);
  __str.__r_.__value_.__r.__words[0] = sub_100017338((ssize_t)&v15);
  __str.__r_.__value_.__l.__size_ = v12;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100BA2C04(&__str, (uint64_t)v16, (uint64_t)v20, Current_1);
  sub_100042DF8((uint64_t *)(a1 + 552), (__int128 *)v20);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)((char *)v21 + 8));
  sub_100019D7C((unsigned int *)&v15);
  if (!v37 || !v35) {
    sub_100036CD8();
  }
  uint64_t v14 = sub_10012D9F0(a1 + 584, (size_t *)a2, v36, *((uint64_t *)&v36 + 1), v34[0], v34[1], a5);
  memset(v21, 0, 48);
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  memset(v22, 0, sizeof(v22));
  char v23 = 0;
  uint64_t v27 = -1LL;
  __int128 v28 = 0u;
  memset(v29, 0, sizeof(v29));
  uint64_t v30 = -1LL;
  memset(v32, 0, 48);
  if (v14 != -1)
  {
    v20[1].__vftable = (std::bad_cast_vtbl *)8;
    uint64_t v30 = v14;
    if (!v37) {
      sub_100036CD8();
    }
    __int128 v31 = v36;
    objc_msgSend( objc_msgSend(*(id *)(a1 + 3544), "objectForKeyedSubscript:", a4),  "onMiLoServiceEventUpdate:",  sub_100BA2184((uint64_t)v20));
  }

  sub_100BA6BE0(v32);
  sub_100231C10(&v29[1]);
  if ((void)v28)
  {
    *((void *)&v28 + 1) = v28;
    operator delete((void *)v28);
  }

  sub_100210578(v22);
  sub_100210578(v21);
  sub_10007AD40((wireless_diagnostics::google::protobuf::MessageLite *)v16);
}

void sub_100B954F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::bad_cast a18)
{
}

void sub_100B95614( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B95648(uint64_t a1, std::string *a2, void *a3, void *a4, unsigned __int8 *a5)
{
  id v9 = sub_100101534(a3, (uint64_t)&v36);
  if (!v37)
  {
    sub_1012627F0(v9);
LABEL_25:
    __break(1u);
    return;
  }

  id v10 = sub_100101534(a4, (uint64_t)v34);
  if (!v35)
  {
    sub_101262958(v10);
    goto LABEL_25;
  }

  sub_100063854((uint64_t)v17);
  v20 |= 2u;
  id v11 = v18;
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    id v11 = (std::string *)operator new(0x18uLL);
    v11->__r_.__value_.__r.__words[0] = 0LL;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    char v18 = v11;
  }

  std::string::operator=(v11, a2);
  if (!v37) {
    sub_100036CD8();
  }
  memset(&__str, 0, sizeof(__str));
  if ((sub_100013090((uint64_t)&v36, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast(v21);
    v21[0].__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
    sub_1000139B0((uint64_t)v21);
  }

  v20 |= 4u;
  std::string::size_type v12 = v19;
  if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    std::string::size_type v12 = (std::string *)operator new(0x18uLL);
    v12->__r_.__value_.__r.__words[0] = 0LL;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    int v19 = v12;
  }

  std::string::operator=(v12, &__str);
  int v16 = 0;
  sub_100018E34(&v16);
  __str.__r_.__value_.__r.__words[0] = sub_100017338((ssize_t)&v16);
  __str.__r_.__value_.__l.__size_ = v13;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100BA2C8C(&__str, (uint64_t)v17, (uint64_t)v21, Current_1);
  sub_100042DF8((uint64_t *)(a1 + 552), (__int128 *)v21);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)((char *)v22 + 8));
  sub_100019D7C((unsigned int *)&v16);
  if (!v37 || !v35) {
    sub_100036CD8();
  }
  uint64_t v15 = sub_10012D9F8(a1 + 584, (unsigned __int8 *)a2, v36, *((uint64_t *)&v36 + 1), v34[0], v34[1], a5);
  sub_10004306C((uint64_t *)(a1 + 552));
  if (v15 != -1)
  {
    memset(v22, 0, 48);
    char v25 = 0;
    char v26 = 0;
    char v27 = 0;
    memset(v23, 0, sizeof(v23));
    char v24 = 0;
    uint64_t v28 = -1LL;
    __int128 v29 = 0u;
    memset(v30, 0, 96);
    memset(v32, 0, 48);
    v21[1].__vftable = (std::bad_cast_vtbl *)9;
    v30[12] = v15;
    if (!v37) {
      sub_100036CD8();
    }
    __int128 v31 = v36;
    objc_msgSend( objc_msgSend(*(id *)(a1 + 3544), "objectForKeyedSubscript:", a4),  "onMiLoServiceEventUpdate:",  sub_100BA2184((uint64_t)v21));
    sub_100BA6BE0(v32);
    sub_100231C10(&v30[1]);
    if ((void)v29)
    {
      *((void *)&v29 + 1) = v29;
      operator delete((void *)v29);
    }

    sub_100210578(v23);
    sub_100210578(v22);
  }

  sub_10007B480((wireless_diagnostics::google::protobuf::MessageLite *)v17);
}

void sub_100B95958( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::bad_cast a18)
{
}

void sub_100B95A58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B95A74(uint64_t a1, const std::string *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = sub_100101534(a3, (uint64_t)v40);
  if (!v41)
  {
    sub_101262AC0(v9);
LABEL_33:
    __break(1u);
    return;
  }

  id v10 = sub_100101534(a4, (uint64_t)&v38);
  if (!v39)
  {
    sub_101262C28(v10);
    goto LABEL_33;
  }

  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  double v22 = Current_1;
  sub_100063904((uint64_t)v17);
  v21 |= 2u;
  std::string::size_type v12 = v18;
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    std::string::size_type v12 = (std::string *)operator new(0x18uLL);
    v12->__r_.__value_.__r.__words[0] = 0LL;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    char v18 = v12;
  }

  std::string::operator=(v12, a2);
  if (!v41) {
    sub_100036CD8();
  }
  memset(&__str, 0, sizeof(__str));
  if ((sub_100013090((uint64_t)v40, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v23);
    *(void *)&__int128 v23 = &off_101818CB0;
    sub_1000139B0((uint64_t)&v23);
  }

  v21 |= 4u;
  std::string::size_type v13 = v19;
  if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    std::string::size_type v13 = (std::string *)operator new(0x18uLL);
    v13->__r_.__value_.__r.__words[0] = 0LL;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    int v19 = v13;
  }

  std::string::operator=(v13, &__str);
  if (!v39) {
    sub_100036CD8();
  }
  memset(&__str, 0, sizeof(__str));
  if ((sub_100013090((uint64_t)&v38, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v23);
    *(void *)&__int128 v23 = &off_101818CB0;
    sub_1000139B0((uint64_t)&v23);
  }

  v21 |= 8u;
  uint64_t v14 = v20;
  if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v14 = (std::string *)operator new(0x18uLL);
    v14->__r_.__value_.__r.__words[0] = 0LL;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    int v20 = v14;
  }

  std::string::operator=(v14, &__str);
  int v16 = 0;
  sub_100018E34(&v16);
  __str.__r_.__value_.__r.__words[0] = sub_100017338((ssize_t)&v16);
  __str.__r_.__value_.__l.__size_ = v15;
  sub_100BA2D14(&__str, (uint64_t)v17, (uint64_t)&v23, Current_1);
  sub_100042DF8((uint64_t *)(a1 + 552), &v23);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)((char *)v25 + 8));
  sub_100019D7C((unsigned int *)&v16);
  if (!v41 || !v39) {
    sub_100036CD8();
  }
  if ((sub_10012DA04(a1 + 584, v40[0], v40[1], &v38, (uint64_t)&v22, 1) & 1) == 0)
  {
    memset(v25, 0, 48);
    char v28 = 0;
    char v29 = 0;
    char v30 = 0;
    memset(v26, 0, sizeof(v26));
    char v27 = 0;
    uint64_t v31 = -1LL;
    __int128 v32 = 0u;
    memset(v33, 0, sizeof(v33));
    uint64_t v34 = -1LL;
    memset(v35, 0, sizeof(v35));
    *((void *)&v23 + 1) = 10LL;
    if (!v39) {
      sub_100036CD8();
    }
    __int128 v36 = v38;
    uint64_t v34 = 29LL;
    objc_msgSend( objc_msgSend(*(id *)(a1 + 3544), "objectForKeyedSubscript:", a5),  "onMiLoServiceEventUpdate:",  sub_100BA2184((uint64_t)&v23));
    sub_100BA6BE0(v35);
    sub_100231C10(&v33[1]);
    if ((void)v32)
    {
      *((void *)&v32 + 1) = v32;
      operator delete((void *)v32);
    }

    sub_100210578(v26);
    sub_100210578(v25);
  }

  sub_10007D6F8((wireless_diagnostics::google::protobuf::MessageLite *)v17);
}

void sub_100B95E30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::bad_cast a20)
{
}

void sub_100B95F50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B95F6C(uint64_t a1, const std::string *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v11 = sub_100101534(a3, (uint64_t)v37);
  if (v38)
  {
    id v12 = sub_100101534(a4, (uint64_t)&v35);
    if (v36)
    {
      double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
      double v26 = Current_1;
      LOBYTE(v33) = 0;
      char v34 = 0;
      if (a5)
      {
        sub_100101534(a5, (uint64_t)v29);
        __int128 v33 = *(_OWORD *)&v29[0].__vftable;
        char v34 = (char)v30;
      }

      sub_1000638D4((uint64_t)v20);
      v25 |= 2u;
      uint64_t v14 = v21;
      if (v21 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v14 = (std::string *)operator new(0x18uLL);
        v14->__r_.__value_.__r.__words[0] = 0LL;
        v14->__r_.__value_.__l.__size_ = 0LL;
        v14->__r_.__value_.__l.__cap_ = 0LL;
        int v21 = v14;
      }

      std::string::operator=(v14, a2);
      if (!v38) {
        sub_100036CD8();
      }
      memset(&__str, 0, sizeof(__str));
      if ((sub_100013090((uint64_t)v37, &__str) & 1) == 0)
      {
        std::bad_cast::bad_cast(v29);
        v29[0].__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
        sub_1000139B0((uint64_t)v29);
      }

      v25 |= 4u;
      std::string::size_type v15 = v22;
      if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        std::string::size_type v15 = (std::string *)operator new(0x18uLL);
        v15->__r_.__value_.__r.__words[0] = 0LL;
        v15->__r_.__value_.__l.__size_ = 0LL;
        v15->__r_.__value_.__l.__cap_ = 0LL;
        double v22 = v15;
      }

      std::string::operator=(v15, &__str);
      if (!v36) {
        sub_100036CD8();
      }
      memset(&__str, 0, sizeof(__str));
      if ((sub_100013090((uint64_t)&v35, &__str) & 1) == 0)
      {
        std::bad_cast::bad_cast(v29);
        v29[0].__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
        sub_1000139B0((uint64_t)v29);
      }

      v25 |= 8u;
      int v16 = v23;
      if (v23 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v16 = (std::string *)operator new(0x18uLL);
        v16->__r_.__value_.__r.__words[0] = 0LL;
        v16->__r_.__value_.__l.__size_ = 0LL;
        v16->__r_.__value_.__l.__cap_ = 0LL;
        __int128 v23 = v16;
      }

      std::string::operator=(v16, &__str);
      if (v34)
      {
        memset(&__str, 0, sizeof(__str));
        if ((sub_100013090((uint64_t)&v33, &__str) & 1) == 0)
        {
          std::bad_cast::bad_cast(v29);
          v29[0].__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
          sub_1000139B0((uint64_t)v29);
        }

        v25 |= 0x10u;
        char v17 = v24;
        if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v17 = (std::string *)operator new(0x18uLL);
          v17->__r_.__value_.__r.__words[0] = 0LL;
          v17->__r_.__value_.__l.__size_ = 0LL;
          v17->__r_.__value_.__l.__cap_ = 0LL;
          char v24 = v17;
        }

        std::string::operator=(v17, &__str);
      }

      int v19 = 0;
      sub_100018E34(&v19);
      __str.__r_.__value_.__r.__words[0] = sub_100017338((ssize_t)&v19);
      __str.__r_.__value_.__l.__size_ = v18;
      sub_100BA2D9C(&__str, (uint64_t)v20, (uint64_t)v29, Current_1);
      sub_100042DF8((uint64_t *)(a1 + 552), (__int128 *)v29);
      sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v31);
      sub_100019D7C((unsigned int *)&v19);
      if (v38 && v36)
      {
        __int128 v27 = v33;
        char v28 = v34;
        if ((sub_10012DA0C(a1 + 584, v37[0], v37[1], v35, *((uint64_t *)&v35 + 1), &v27, (uint64_t)&v26) & 1) != 0)
        {
LABEL_30:
          sub_10007CD20((wireless_diagnostics::google::protobuf::MessageLite *)v20);
          return;
        }

        if (v36)
        {
          sub_100BA2360(a1, &v35, 12LL, a6);
          goto LABEL_30;
        }
      }

      sub_100036CD8();
    }

    sub_101262EF8(v12);
  }

  else
  {
    sub_101262D90(v11);
  }

  __break(1u);
}

void sub_100B96330( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, std::bad_cast a25)
{
}

void sub_100B9644C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B96468(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  id v12 = sub_100101534(a3, (uint64_t)v23);
  if (!v24)
  {
    id v13 = (id)sub_101263060(v12);
    goto LABEL_12;
  }

  id v13 = sub_100101534(a4, (uint64_t)&v21);
  if (!v22)
  {
LABEL_12:
    id v14 = (id)sub_1012631C0(v13);
    goto LABEL_13;
  }

  id v14 = sub_100101534(a5, (uint64_t)v19);
  if (!v20)
  {
LABEL_13:
    id v15 = (id)sub_101263320(v14);
    goto LABEL_14;
  }

  id v15 = sub_100101534(a6, (uint64_t)v17);
  if (!v20)
  {
LABEL_14:
    sub_101263480(v15);
    goto LABEL_15;
  }

  if (!v24 || !v18) {
    goto LABEL_15;
  }
  uint64_t result = sub_10012E498(a1 + 584, v23[0], v23[1], v17[0], v17[1], v19[0], v19[1]);
  if ((result & 1) != 0) {
    return result;
  }
  if (!v22) {
LABEL_15:
  }
    sub_100036CD8();
  return sub_100BA2360(a1, &v21, 13LL, a7);
}

void sub_100B96610( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9662C( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v14 = sub_100101534(a3, (uint64_t)v22);
  if (!v23)
  {
    id v15 = (id)sub_1012635E0(v14);
    goto LABEL_13;
  }

  id v15 = sub_100101534(a4, (uint64_t)&v20);
  if (!v21)
  {
LABEL_13:
    id v16 = (id)sub_101263740(v15);
    goto LABEL_14;
  }

  id v16 = sub_100101534(a5, (uint64_t)v19);
  if (!v19[16])
  {
LABEL_14:
    sub_1012638A0(v16);
    goto LABEL_15;
  }

  if (!v23 || !v21) {
    goto LABEL_15;
  }
  if (!sub_10012E4A0(a1 + 584, v22[0], v22[1], (uint64_t)&v20, (uint64_t)v19, a6, a7))
  {
    if (v21)
    {
      uint64_t v17 = 14LL;
      return sub_100BA2360(a1, &v20, v17, a8);
    }

void sub_100B967CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B967E8(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  char v36 = 0;
  char v37 = 0;
  char v38 = 0;
  memset(v34, 0, sizeof(v34));
  char v35 = 0;
  __int128 __p = 0u;
  memset(v41, 0, sizeof(v41));
  uint64_t v39 = -1LL;
  uint64_t v42 = -1LL;
  memset(v43, 0, sizeof(v43));
  v32[1] = 10LL;
  id v12 = sub_100101534(a4, (uint64_t)&v31[7]);
  if (v31[23])
  {
    uint64_t v42 = 15LL;
    __int128 v44 = *(_OWORD *)&v31[7];
    if (qword_1019348D0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    sub_101263A00( (uint64_t)v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v23,  v24,  v25,  v26,  buf,  *(uint64_t *)v28,  *(uint64_t *)&v28[8],  *(uint64_t *)&v28[16],  *(uint64_t *)&v28[24],  v29,  v30,  *((uint64_t *)&v30 + 1),  *(uint64_t *)v31,  *(uint64_t *)&v31[8],  *(uint64_t *)&v31[16],  v32[0]);
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNotifier.mm",  2159,  "requestRemoveLabelsForClient");
    __break(1u);
  }

  dispatch_once(&qword_1019348D0, &stru_101874AF8);
LABEL_3:
  __int128 v20 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    else {
      char v21 = (uint64_t *)*a2;
    }
    uint64_t buf = 68290050LL;
    *(_WORD *)char v28 = 2082;
    *(void *)&unsigned int v28[2] = "";
    *(_WORD *)&v28[10] = 2082;
    *(void *)&v28[12] = v21;
    *(_WORD *)&v28[20] = 2114;
    *(void *)&v28[22] = a3;
    *(_WORD *)&v28[30] = 2114;
    uint64_t v29 = (uint64_t)a4;
    LOWORD(v30) = 2114;
    *(void *)((char *)&v30 + 2) = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:fake processing requestRemoveLabelsForClient, clientId:%{public, location:escape_only }s, serviceIdentifier:%{public, location:escape_only}@, requestIdentifier:%{public, location:escape_only}@ , labels:%{public, location:escape_only}@}",  (uint8_t *)&buf,  0x3Au);
  }

  objc_msgSend( objc_msgSend(*(id *)(a1 + 3544), "objectForKeyedSubscript:", a6),  "onMiLoServiceEventUpdate:",  sub_100BA2184((uint64_t)v32));
  sub_100BA6BE0(v43);
  sub_100231C10(&v41[1]);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }

  sub_100210578(v34);
  return sub_100210578(v33);
}

void sub_100B96A40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

uint64_t sub_100B96AA4(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = sub_100101534(a2, (uint64_t)&v17);
  if (!v18)
  {
    sub_101263B48(v9);
    goto LABEL_12;
  }

  id v10 = sub_100101534(a3, (uint64_t)&v15);
  if (!v16)
  {
    sub_101263CB0(v10);
LABEL_12:
    __break(1u);
  }

  if (!v18) {
    sub_100036CD8();
  }
  sub_1010DDBC0(__p, (char *)[a4 UTF8String]);
  uint64_t v11 = sub_10012E5D8(a1 + 584, &v17, (uint64_t)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (!v16) {
    sub_100036CD8();
  }
  return sub_100BA2360(a1, &v15, v11, a5);
}

void sub_100B96BAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B96C58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B96C74(uint64_t a1, const std::string *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v11 = sub_100101534(a3, (uint64_t)v30);
  if (!v31)
  {
    sub_101263E18(v11);
    goto LABEL_25;
  }

  id v12 = sub_100101534(a4, (uint64_t)&v28);
  if (!v29)
  {
    sub_101263F80(v12);
LABEL_25:
    __break(1u);
  }

  if (a5) {
    LODWORD(a5) = [a5 isLowLatency];
  }
  sub_100063880((uint64_t)v20);
  v24 |= 2u;
  uint64_t v13 = v21;
  if (v21 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v13 = (std::string *)operator new(0x18uLL);
    v13->__r_.__value_.__r.__words[0] = 0LL;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    char v21 = v13;
  }

  std::string::operator=(v13, a2);
  if (!v31) {
    sub_100036CD8();
  }
  memset(&__str, 0, sizeof(__str));
  if ((sub_100013090((uint64_t)v30, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast(v25);
    v25[0].__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
    sub_1000139B0((uint64_t)v25);
  }

  v24 |= 4u;
  char v14 = v23;
  if (v23 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    char v14 = (std::string *)operator new(0x18uLL);
    v14->__r_.__value_.__r.__words[0] = 0LL;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    uint8_t v23 = v14;
  }

  std::string::operator=(v14, &__str);
  v24 |= 8u;
  char v22 = (char)a5;
  int v19 = 0;
  sub_100018E34(&v19);
  __str.__r_.__value_.__r.__words[0] = sub_100017338((ssize_t)&v19);
  __str.__r_.__value_.__l.__size_ = v15;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100BA2E24(&__str, (uint64_t)v20, (uint64_t)v25, Current_1);
  sub_100042DF8((uint64_t *)(a1 + 552), (__int128 *)v25);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v26);
  sub_100019D7C((unsigned int *)&v19);
  if (!v31) {
    sub_100036CD8();
  }
  BOOL v17 = sub_10012E590(a1 + 584, v30, (int)a5);
  if (!v29) {
    sub_100036CD8();
  }
  if (v17) {
    uint64_t v18 = -1LL;
  }
  else {
    uint64_t v18 = 16LL;
  }
  sub_100BA2360(a1, &v28, v18, a6);
  sub_10007BC70((wireless_diagnostics::google::protobuf::MessageLite *)v20);
}

void sub_100B96EC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, unsigned int a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::bad_cast a18)
{
}

void sub_100B96FB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B96FD4(uint64_t a1, const std::string *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = sub_100101534(a3, (uint64_t)v54);
  if (!v55)
  {
    sub_1012640E8(v9);
    goto LABEL_26;
  }

  memset(v42, 0, 48);
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  memset(v43, 0, sizeof(v43));
  char v44 = 0;
  uint64_t v48 = -1LL;
  __int128 v49 = 0u;
  memset(v50, 0, sizeof(v50));
  uint64_t v51 = -1LL;
  memset(v52, 0, sizeof(v52));
  uint64_t v41 = 10LL;
  id v10 = sub_100101534(a4, (uint64_t)&v39);
  if (!v40)
  {
    sub_101264250( (uint64_t)v10,  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v24,  v25,  v26,  v27,  v28,  v29,  (uint64_t)v30,  (uint64_t)v31,  v32,  v33,  v34,  *((uint64_t *)&v34 + 1),  (uint64_t)v35,  v36,  v37[0],  v37[1]);
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNotifier.mm",  2226,  "requestStopUpdatingMicroLocationForClient");
LABEL_26:
    __break(1u);
  }

  if (!v55 || (sub_10012E598(a1 + 584, v54) ? (uint64_t v18 = -1LL) : (uint64_t v18 = 17LL), v51 = v18, !v40)) {
    sub_100036CD8();
  }
  __int128 v53 = v39;
  sub_1000638A8((uint64_t)&v29);
  LODWORD(v33) = v33 | 2;
  int v19 = v30;
  if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v19 = (std::string *)operator new(0x18uLL);
    v19->__r_.__value_.__r.__words[0] = 0LL;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    __int128 v30 = v19;
  }

  std::string::operator=(v19, a2);
  if (!v55) {
    sub_100036CD8();
  }
  memset(&__str, 0, sizeof(__str));
  if ((sub_100013090((uint64_t)v54, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v34);
    *(void *)&__int128 v34 = &off_101818CB0;
    sub_1000139B0((uint64_t)&v34);
  }

  LODWORD(v33) = v33 | 4;
  __int128 v20 = v31;
  if (v31 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    __int128 v20 = (std::string *)operator new(0x18uLL);
    v20->__r_.__value_.__r.__words[0] = 0LL;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    char v31 = v20;
  }

  std::string::operator=(v20, &__str);
  HIDWORD(v2_Block_object_dispose(va, 8) = 0;
  sub_100018E34((int *)&v28 + 1);
  __str.__r_.__value_.__r.__words[0] = sub_100017338((ssize_t)&v28 + 4);
  __str.__r_.__value_.__l.__size_ = v21;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100BA2EAC(&__str, (uint64_t)&v29, (uint64_t)&v34, Current_1);
  sub_100042DF8((uint64_t *)(a1 + 552), &v34);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)v37);
  sub_100019D7C((unsigned int *)&v28 + 1);
  if (!v40) {
    sub_100036CD8();
  }
  sub_100BA2360(a1, &v39, v18, a5);
  sub_10007C468((wireless_diagnostics::google::protobuf::MessageLite *)&v29);
  sub_100BA6BE0(v52);
  sub_100231C10(&v50[1]);
  if ((void)v49)
  {
    *((void *)&v49 + 1) = v49;
    operator delete((void *)v49);
  }

  sub_100210578(v43);
  return sub_100210578(v42);
}

void sub_100B972FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::bad_cast a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void sub_100B974BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B974E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = sub_100101534(a3, (uint64_t)v12);
  if (!v13)
  {
    id v8 = (id)sub_101264398(v7);
    goto LABEL_6;
  }

  id v8 = sub_100101534(a4, (uint64_t)&v10);
  if (!v11)
  {
LABEL_6:
    sub_1012644F8(v8);
LABEL_7:
    sub_100036CD8();
  }

  if (!v13) {
    goto LABEL_7;
  }
  return sub_10012E568(a1 + 584, a2, v12[0], v12[1], &v10);
}

void sub_100B976B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B976D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = sub_100101534(a3, (uint64_t)v5);
  if (!v5[16]) {
    sub_101264658(v4);
  }
  sub_10012B308(a1 + 584);
  sub_100BA2A38(a1);
}

void sub_100B97884( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B978A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  LOBYTE(v20[0]) = 0;
  char v22 = 0;
  v19[0] = xmmword_10134CCD0;
  sub_100101534(a3, (uint64_t)&v17);
  if (v18) {
    v19[1] = v17;
  }
  sub_1010DDBC0(__p, "");
  sub_100B98A40(a1, (uint64_t)__p, 0, (char *)buf);
  sub_100BA6A5C((uint64_t)v20, (__int128 *)buf);
  sub_100BA6898((uint64_t)buf);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v22)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      if (v21 >= 0) {
        id v7 = v20;
      }
      else {
        id v7 = (void *)v20[0];
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:MicroLocation DB Tables exported, path:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }
  }

  else
  {
    *((void *)&v19[0] + 1) = 0LL;
  }

  objc_msgSend( objc_msgSend(*(id *)(a1 + 3544), "objectForKeyedSubscript:", a4),  "onMiLoDebugResponse:",  sub_100BA1DE4(v19));
  return sub_100BA6898((uint64_t)v20);
}

void sub_100B97A60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B97B18(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = sub_100101534(a3, (uint64_t)&v19);
  if (!v24)
  {
    sub_1012647B8(v7);
    goto LABEL_23;
  }

  if (!v22)
  {
    sub_101264920(v7);
    goto LABEL_23;
  }

  if (!v20)
  {
    sub_101264A88(v7);
LABEL_23:
    __break(1u);
  }

  sub_1000639E0((uint64_t)v13);
  if (!v24) {
    sub_100036CD8();
  }
  memset(&__str, 0, sizeof(__str));
  if ((sub_100013090((uint64_t)v23, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast(v16);
    v16[0].__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
    sub_1000139B0((uint64_t)v16);
  }

  v15 |= 2u;
  id v8 = v14;
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    id v8 = (std::string *)operator new(0x18uLL);
    v8->__r_.__value_.__r.__words[0] = 0LL;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v14 = v8;
  }

  std::string::operator=(v8, &__str);
  int v12 = 0;
  sub_100018E34(&v12);
  __str.__r_.__value_.__r.__words[0] = sub_100017338((ssize_t)&v12);
  __str.__r_.__value_.__l.__size_ = v9;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100BA22D8(&__str, (uint64_t)v13, (uint64_t)v16, Current_1);
  sub_100042DF8((uint64_t *)(a1 + 552), (__int128 *)v16);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v17);
  sub_100019D7C((unsigned int *)&v12);
  if (!v24 || !v20 || !v22) {
    goto LABEL_20;
  }
  uint64_t v11 = sub_10012E4A8(a1 + 584, v23[0], v23[1], &v19);
  if (v11 != -1)
  {
    if (v20)
    {
      sub_100BA2360(a1, &v19, v11, (uint64_t)a4);
      goto LABEL_16;
    }

void sub_100B97D38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::bad_cast a16)
{
}

void sub_100B97E20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B97E3C(void *a1, const std::string *a2, void *a3, void (**a4)(void, void))
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  id v8 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v9 = a2;
    }
    else {
      std::string::size_type v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v35 = 2082;
    uint64_t v36 = "";
    __int16 v37 = 2082;
    char v38 = "Client request";
    __int16 v39 = 2082;
    char v40 = "Current microlocation";
    __int16 v41 = 2081;
    uint64_t v42 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Received notification, source:%{public, location:escape_only}s, trigger:%{public, location:escape_only}s, clientIdentifier:%{private, location:escape_only}s}",  buf,  0x30u);
  }

  if (sub_1000C1C8C((uint64_t)(a1 + 401), a3))
  {
    sub_1004F2598();
    if (!sub_1004FA678())
    {
      if (!a4) {
        return 0LL;
      }
LABEL_17:
      char v18 = objc_alloc(&OBJC_CLASS___NSError);
      uint64_t v33 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"requestCurrentMicroLocation failed internally, MiLo is not at right state",  NSLocalizedDescriptionKey);
      __int128 v19 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v33,  &v32,  1LL);
      ((void (**)(void, NSError *))a4)[2]( a4,   -[NSError initWithDomain:code:userInfo:]( v18,  "initWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  5LL,  v19));
      return 0LL;
    }

    char v10 = -[NSMutableDictionary initWithDictionary:copyItems:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:copyItems:",  a3,  1LL);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  &off_1018D41C0,  @"shouldTriggerLocalizationScan");
    *(void *)uint64_t buf = j__CFAbsoluteTimeGetCurrent_1();
    uint64_t v11 = sub_1000C0F08((uint64_t)(a1 + 401), v10, (double *)buf);
    int v12 = v10;
    if (!a4) {
      return v11;
    }
  }

  else
  {
    *(void *)uint64_t buf = j__CFAbsoluteTimeGetCurrent_1();
    uint64_t v11 = sub_1000C1574((uint64_t)(a1 + 401), a2, (double *)buf);
    if (!a4) {
      return v11;
    }
  }

  if (!(_DWORD)v11) {
    goto LABEL_17;
  }
  __int16 v13 = a4;
  uint64_t v14 = v13;
  int v15 = (void *)a1[440];
  unint64_t v16 = a1[441];
  if ((unint64_t)v15 >= v16)
  {
    uint64_t v20 = a1[439];
    uint64_t v21 = ((uint64_t)v15 - v20) >> 3;
    uint64_t v22 = v16 - v20;
    uint64_t v23 = v22 >> 2;
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)sub_1000071BC((uint64_t)(a1 + 441), v24);
    }
    else {
      uint64_t v25 = 0LL;
    }
    uint64_t v26 = &v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *(void *)uint64_t v26 = v14;
    uint64_t v17 = v26 + 8;
    uint64_t v28 = (char *)a1[440];
    uint64_t v29 = (char *)a1[439];
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *((void *)v26 - 1) = v30;
        v26 -= 8;
      }

      while (v28 != v29);
      uint64_t v28 = (char *)a1[439];
    }

    a1[439] = v26;
    a1[440] = v17;
    a1[441] = v27;
    if (v28) {
      operator delete(v28);
    }
  }

  else
  {
    *int v15 = v13;
    uint64_t v17 = v15 + 1;
  }

  a1[440] = v17;
  return 1LL;
}

void sub_100B981E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B981FC(void *a1, char *a2, void *a3, void (**a4)(void, void))
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  id v8 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0) {
      std::string::size_type v9 = a2;
    }
    else {
      std::string::size_type v9 = *(char **)a2;
    }
    *(_DWORD *)uint64_t buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v36 = 2082;
    __int16 v37 = "";
    __int16 v38 = 2082;
    __int16 v39 = "Client request";
    __int16 v40 = 2082;
    __int16 v41 = "Recording scan request";
    __int16 v42 = 2081;
    uint64_t v43 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Received notification, source:%{public, location:escape_only}s, trigger:%{public, location:escape_only}s, clientIdentifier:%{private, location:escape_only}s}",  buf,  0x30u);
  }

  if (!sub_1000C1C8C((uint64_t)(a1 + 401), a3))
  {
    *(void *)uint64_t buf = j__CFAbsoluteTimeGetCurrent_1();
    uint64_t v11 = sub_1000C13A0((uint64_t)(a1 + 401), (void **)a2, a3, (double *)buf);
LABEL_12:
    if (!a4) {
      return v11;
    }
    goto LABEL_19;
  }

  sub_1004F2598();
  if (sub_1004FA678())
  {
    char v10 = -[NSMutableDictionary initWithDictionary:copyItems:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:copyItems:",  a3,  1LL);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  &off_1018D41C0,  @"shouldTriggerRecordingScan");
    *(void *)uint64_t buf = j__CFAbsoluteTimeGetCurrent_1();
    uint64_t v11 = sub_1000C0F08((uint64_t)(a1 + 401), v10, (double *)buf);
    int v12 = v10;
    goto LABEL_12;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  __int16 v13 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v36 = 2082;
    __int16 v37 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:device doesn't support suggestions so suppressing request}",  buf,  0x12u);
  }

  uint64_t v11 = 0LL;
  if (a4)
  {
LABEL_19:
    if ((_DWORD)v11)
    {
      uint64_t v14 = a4;
      int v15 = v14;
      unint64_t v16 = (void *)a1[437];
      unint64_t v17 = a1[438];
      if ((unint64_t)v16 >= v17)
      {
        uint64_t v21 = a1[436];
        uint64_t v22 = ((uint64_t)v16 - v21) >> 3;
        uint64_t v23 = v17 - v21;
        uint64_t v24 = v23 >> 2;
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          uint64_t v26 = (char *)sub_1000071BC((uint64_t)(a1 + 438), v25);
        }
        else {
          uint64_t v26 = 0LL;
        }
        uint64_t v27 = &v26[8 * v22];
        uint64_t v28 = &v26[8 * v25];
        *(void *)uint64_t v27 = v15;
        char v18 = v27 + 8;
        uint64_t v29 = (char *)a1[437];
        uint64_t v30 = (char *)a1[436];
        if (v29 != v30)
        {
          do
          {
            uint64_t v31 = *((void *)v29 - 1);
            v29 -= 8;
            *((void *)v27 - 1) = v31;
            v27 -= 8;
          }

          while (v29 != v30);
          uint64_t v29 = (char *)a1[436];
        }

        a1[436] = v27;
        a1[437] = v18;
        a1[438] = v28;
        if (v29) {
          operator delete(v29);
        }
      }

      else
      {
        *unint64_t v16 = v14;
        char v18 = v16 + 1;
      }

      a1[437] = v18;
    }

    else
    {
      __int128 v19 = objc_alloc(&OBJC_CLASS___NSError);
      __int128 v34 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"requestMicroLocationRecordingScan failed internally, MiLo is not at right state",  NSLocalizedDescriptionKey);
      uint64_t v20 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL);
      ((void (**)(void, NSError *))a4)[2]( a4,   -[NSError initWithDomain:code:userInfo:]( v19,  "initWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  5LL,  v20));
    }
  }

  return v11;
}

void sub_100B986F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B98A08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

void sub_100B98A40(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char *a4@<X8>)
{
  if ((a3 & 1) == 0)
  {
    sub_1004F2598();
    if ((sub_1004F8A40() & 1) == 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      uint64_t v20 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Export DB requests are served in internal builds only!}",  buf,  0x12u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101874AF8);
        }
      }

      uint64_t v17 = qword_1019348D8;
      if (!os_signpost_enabled((os_log_t)qword_1019348D8)) {
        goto LABEL_40;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      char v18 = "Export DB requests are served in internal builds only!";
      __int128 v19 = "{msg%{public}.0s:Export DB requests are served in internal builds only!}";
LABEL_30:
      uint64_t v21 = (os_log_s *)v17;
      uint32_t v22 = 18;
LABEL_39:
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v18,  v19,  buf,  v22);
LABEL_40:
      *a4 = 0;
      a4[72] = 0;
      return;
    }
  }

  sub_1000303F0((void *)(a1 + 248));
  if (!sub_100031790(a1 + 248))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    unint64_t v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Error: Unable to export MicroLocation DB - local DB is not ready!}",  buf,  0x12u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
    }

    uint64_t v17 = qword_1019348D8;
    if (!os_signpost_enabled((os_log_t)qword_1019348D8)) {
      goto LABEL_40;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    char v18 = "Error: Unable to export MicroLocation DB - local DB is not ready!";
    __int128 v19 = "{msg%{public}.0s:Error: Unable to export MicroLocation DB - local DB is not ready!}";
    goto LABEL_30;
  }

  sub_10004306C((uint64_t *)(a1 + 552));
  id v8 = "ExportedMicroLocationDB.db";
  if (a3) {
    id v8 = "ExportedMiloDB.db";
  }
  __s = (char *)v8;
  std::string::size_type v9 = NSTemporaryDirectory();
  NSFileAttributeKey v59 = NSFilePosixPermissions;
  char v60 = &off_1018D41D8;
  uint64_t v52 = 0LL;
  if (!-[NSFileManager setAttributes:ofItemAtPath:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "setAttributes:ofItemAtPath:error:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v60,  &v59,  1LL),  v9,  &v52))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v23 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = -[NSString UTF8String](v9, "UTF8String");
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2081;
      *(void *)&buf[20] = v24;
      *(_WORD *)&_BYTE buf[28] = 2113;
      *(void *)&buf[30] = v52;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:failed to set attributes for file, filename:%{private, location:escape_only}s, er ror:%{private, location:escape_only}@}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
    }

    uint64_t v25 = qword_1019348D8;
    if (!os_signpost_enabled((os_log_t)qword_1019348D8)) {
      goto LABEL_40;
    }
    uint64_t v26 = -[NSString UTF8String](v9, "UTF8String");
    *(_DWORD *)uint64_t buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2081;
    *(void *)&buf[20] = v26;
    *(_WORD *)&_BYTE buf[28] = 2113;
    *(void *)&buf[30] = v52;
    char v18 = "failed to set attributes for file";
    __int128 v19 = "{msg%{public}.0s:failed to set attributes for file, filename:%{private, location:escape_only}s, "
          "error:%{private, location:escape_only}@}";
    uint64_t v21 = (os_log_s *)v25;
LABEL_38:
    uint32_t v22 = 38;
    goto LABEL_39;
  }

  if (a3) {
    char v10 = "microLocationDB";
  }
  else {
    char v10 = "microLocationDiagnosticDB";
  }
  uint64_t v11 = -[NSString stringByAppendingPathComponent:]( v9,  "stringByAppendingPathComponent:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10));
  if (-[NSFileManager fileExistsAtPath:isDirectory:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:isDirectory:",  v11,  0LL))
  {
    v49[0] = 0LL;
    if (!-[NSFileManager removeItemAtPath:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "removeItemAtPath:error:",  v11,  v49))
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      uint64_t v31 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = -[NSString UTF8String](v11, "UTF8String");
        *(_DWORD *)uint64_t buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2081;
        *(void *)&buf[20] = v32;
        *(_WORD *)&_BYTE buf[28] = 2113;
        *(void **)&buf[30] = v49[0];
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:failed to remove existing destination directory, directory:%{private, location:es cape_only}s, error:%{private, location:escape_only}@}",  buf,  0x26u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101874AF8);
        }
      }

      uint64_t v33 = qword_1019348D8;
      if (!os_signpost_enabled((os_log_t)qword_1019348D8)) {
        goto LABEL_40;
      }
      __int128 v34 = -[NSString UTF8String](v11, "UTF8String");
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2081;
      *(void *)&buf[20] = v34;
      *(_WORD *)&_BYTE buf[28] = 2113;
      *(void **)&buf[30] = v49[0];
      char v18 = "failed to remove existing destination directory";
      __int128 v19 = "{msg%{public}.0s:failed to remove existing destination directory, directory:%{private, location:"
            "escape_only}s, error:%{private, location:escape_only}@}";
      uint64_t v21 = (os_log_s *)v33;
      goto LABEL_38;
    }
  }

  uint64_t v51 = 0LL;
  NSFileAttributeKey v57 = NSFilePosixPermissions;
  unint64_t v58 = &off_1018D41F0;
  int v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v58,  &v57,  1LL);
  __int16 v13 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "com.apple.locationd.microlocation.export-db");
  if (!-[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v11,  0LL,  v12,  &v51))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v27 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = -[NSString UTF8String](v11, "UTF8String");
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2081;
      *(void *)&buf[20] = v28;
      *(_WORD *)&_BYTE buf[28] = 2113;
      *(void *)&buf[30] = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:failed to create destination directory, directory:%{private, location:escape_only}s , error:%{private, location:escape_only}@}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
    }

    uint64_t v29 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      uint64_t v30 = -[NSString UTF8String](v11, "UTF8String");
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2081;
      *(void *)&buf[20] = v30;
      *(_WORD *)&_BYTE buf[28] = 2113;
      *(void *)&buf[30] = v51;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v29,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "failed to create destination directory",  "{msg%{public}.0s:failed to create destination directory, directory:%{private, location:escape_only}s , error:%{private, location:escape_only}@}",  buf,  0x26u);
    }

    goto LABEL_40;
  }

  sub_1010DDBC0( v49,  (char *)-[NSString UTF8String]( -[NSString stringByAppendingPathComponent:]( v11,  "stringByAppendingPathComponent:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", __s)),  "UTF8String"));
  sub_100BA2538(a1, (uint64_t)v49);
  if (!a3)
  {
    uint64_t v14 = operator new(0x130uLL);
    if (SHIBYTE(v50) < 0)
    {
      sub_1010DD48C(buf, v49[0], (unint64_t)v49[1]);
    }

    else
    {
      *(_OWORD *)uint64_t buf = *(_OWORD *)v49;
      *(void *)&uint8_t buf[16] = v50;
    }

    sub_1000243A4((uint64_t)v14, (__int128 *)buf, 2);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
LABEL_65:
    __int16 v35 = -[NSString cStringUsingEncoding:](v11, "cStringUsingEncoding:", 4LL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    __int16 v36 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2081;
      *(void *)&buf[20] = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:trying to issue sandbox extension, path:%{private, location:escape_only}s}",  buf,  0x1Cu);
    }

    __int16 v37 = (char *)sandbox_extension_issue_file("com.apple.app-sandbox.read", v35, 0LL);
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v48 = 0LL;
    if (v37)
    {
      sub_1010DDBC0(buf, v37);
      if (SHIBYTE(v48) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__int128 __p = *(_OWORD *)buf;
      uint64_t v48 = *(void *)&buf[16];
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      __int16 v38 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        __int16 v39 = __p;
        if (v48 < 0) {
          __int16 v39 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2081;
        *(void *)&buf[20] = v35;
        *(_WORD *)&_BYTE buf[28] = 2081;
        *(void *)&buf[30] = v39;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:issued a sandbox extension, path:%{private, location:escape_only}s, data:%{pr ivate, location:escape_only}s}",  buf,  0x26u);
      }

      free(v37);
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      __int16 v40 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68289283;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2081;
        *(void *)&buf[20] = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:failed to issue sandbox extension for file, filename:%{private, location:escape_only}s}",  buf,  0x1Cu);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101874AF8);
        }
      }

      __int16 v41 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        *(_DWORD *)uint64_t buf = 68289283;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2081;
        *(void *)&buf[20] = v35;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v41,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "failed to issue sandbox extension for file",  "{msg%{public}.0s:failed to issue sandbox extension for file, filename:%{private, location:escape_only}s}",  buf,  0x1Cu);
      }
    }

    sub_1010DDBC0(buf, v35);
    sub_1010DDBC0(&buf[24], __s);
    if (SHIBYTE(v48) < 0)
    {
      sub_1010DD48C(&v55, __p[0], (unint64_t)__p[1]);
    }

    else
    {
      __int128 v55 = *(_OWORD *)__p;
      uint64_t v56 = v48;
    }

    sub_100BA6D20(a4, (__int128 *)buf);
    if (SHIBYTE(v56) < 0) {
      operator delete((void *)v55);
    }
    if (v54 < 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(__p[0]);
    }
    if (v14)
    {
      __int16 v42 = (void *)sub_1000244B0((uint64_t)v14);
      operator delete(v42);
    }

    goto LABEL_114;
  }

  sub_1000B072C(__p, a1 + 248);
  if (sub_1000B0734((uint64_t *)__p))
  {
    uint64_t v14 = 0LL;
    char v15 = sub_1000B0C08(__p, v49);
  }

  else
  {
    uint64_t v14 = operator new(0x130uLL);
    if (SHIBYTE(v50) < 0)
    {
      sub_1010DD48C(buf, v49[0], (unint64_t)v49[1]);
    }

    else
    {
      *(_OWORD *)uint64_t buf = *(_OWORD *)v49;
      *(void *)&uint8_t buf[16] = v50;
    }

    sub_1000243A4((uint64_t)v14, (__int128 *)buf, 2);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    char v15 = sub_100033088((uint64_t)v14, a2, a1 + 248);
  }

  if ((v15 & 1) != 0) {
    goto LABEL_65;
  }
LABEL_104:
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  uint64_t v43 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:failed to copy MiLo database tables!}",  buf,  0x12u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
  }

  char v44 = (os_log_s *)qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v44,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "failed to copy MiLo database tables!",  "{msg%{public}.0s:failed to copy MiLo database tables!}",  buf,  0x12u);
  }

  if (v14)
  {
    char v45 = (void *)sub_1000244B0((uint64_t)v14);
    operator delete(v45);
  }

  sub_100BA2538(a1, (uint64_t)v49);

  *a4 = 0;
  a4[72] = 0;
LABEL_114:
  if (SHIBYTE(v50) < 0) {
    operator delete(v49[0]);
  }
}

void sub_100B99868( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100B99D5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
}

void sub_100B99DB4(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  CFStringRef v4 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsClusterAnchorValueStatisticsEnabled",  0x8000100u,  kCFAllocatorNull);
  int v5 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)v4, v24);
  CFRelease(v4);
  BOOL v6 = v24[0];
  id v7 = *(std::__shared_weak_count **)v22;
  if (*(void *)v22)
  {
    id v8 = (unint64_t *)(*(void *)v22 + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v6) {
    int v10 = 0;
  }
  else {
    int v10 = v5;
  }
  if (v10 == 1)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v11 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint32_t v22 = 2082;
      *(void *)&uint64_t v22[2] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:ClusterAnchorValueStatistics feature is not enabled in setting, won't fetch data from DB}",  buf,  0x12u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
    }

    int v12 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint32_t v22 = 2082;
      *(void *)&uint64_t v22[2] = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "ClusterAnchorValueStatistics feature is not enabled in setting, won't fetch data from DB",  "{msg%{public}.0s:ClusterAnchorValueStatistics feature is not enabled in setting, won't fetch data from DB}",  buf,  0x12u);
    }

    *a2 = 0;
    a2[40] = 0;
  }

  else
  {
    sub_1010DDBC0(buf, "home");
    sub_10002BCFC(a1 + 248, (uint64_t)buf, v24);
    if (v23 < 0) {
      operator delete(*(void **)buf);
    }
    if (v26)
    {
      uint64_t v13 = v25;
      if (!v25) {
        uint64_t v13 = *(void *)(qword_1019A09E0 + 32);
      }
      uint64_t v14 = *(void *)(v13 + 8);
      if (!v14) {
        uint64_t v14 = *(void *)(qword_1019A09D8 + 8);
      }
      sub_10014D46C(v20, v14);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      char v15 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "recovered anchor value map", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101874AF8);
        }
        __int16 v19 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "recovered anchor value map",  &v19,  2);
        char v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLMicroLocationAnchorValueStatisticsMap> CLMicroLocationNotifier::getMicroLocationAnchorStatisticsMap()",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      sub_1000EC030((uint64_t)a2, (uint64_t)v20);
      a2[40] = 1;
      sub_1000A8728((uint64_t)v20);
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      unint64_t v16 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint32_t v22 = 2082;
        *(void *)&uint64_t v22[2] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:couldn't get most recent cluster anchor value statistics. either database is inaccessib le or no model anchor cluster value statistics has been learnt yet}",  buf,  0x12u);
      }

      *a2 = 0;
      a2[40] = 0;
    }

    sub_1000A7938((uint64_t)v24);
  }

void sub_100B9A230( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
}

void sub_100B9A2EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9A308(const void **a1, uint64_t *a2, const void *a3)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  BOOL v6 = (os_log_s *)qword_1019348D8;
  if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v9 = a1 + 442;
    if (!a1[442]) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }

  else {
    id v7 = (uint64_t *)*a2;
  }
  uint64_t buf = 68289795LL;
  __int16 v20 = 2082;
  uint64_t v21 = "";
  __int16 v22 = 2082;
  char v23 = "Client request";
  __int16 v24 = 2082;
  uint64_t v25 = "learning";
  __int16 v26 = 2081;
  uint64_t v27 = v7;
  _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Received notification, source:%{public, location:escape_only}s, trigger:%{public, l ocation:escape_only}s, clientIdentifier:%{private, location:escape_only}s}",  (uint8_t *)&buf,  0x30u);
  uint64_t v8 = qword_1019348D0;
  unint64_t v9 = a1 + 442;
  if (a1[442])
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
LABEL_11:
    int v10 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      uint64_t buf = 68289026LL;
      __int16 v20 = 2082;
      uint64_t v21 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:learning callback, already exists, release it first}",  (uint8_t *)&buf,  0x12u);
    }

    _Block_release(*v9);
    uint64_t v8 = qword_1019348D0;
  }

  if (v8 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
LABEL_16:
  uint64_t v11 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    uint64_t buf = 68289026LL;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:learning callback, block copy it}",  (uint8_t *)&buf,  0x12u);
  }

  _Block_copy(a3);
  a1[442] = a3;
  uint64_t v12 = (*((uint64_t (**)(const void **))*a1 + 50))(a1);
  if ((v12 & 1) != 0)
  {
    sub_10009D6F4(&buf, (uint64_t)(a1 + 14), (uint64_t)(a1 + 31));
    sub_1000B2B0C(v16, (uint64_t)(a1 + 15), (uint64_t)(a1 + 31));
    sub_1000A7674(&buf);
    sub_1000B2B10(v16);
    char v18 = (void **)&v17;
    sub_10005771C(&v18);
    v16[0] = (void **)((char *)&v21 + 6);
    sub_10005771C(v16);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    uint64_t v13 = (os_log_s *)qword_1019348D8;
    BOOL v14 = os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO);
    if (v14)
    {
      uint64_t buf = 68289026LL;
      __int16 v20 = 2082;
      uint64_t v21 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:client request learning but Microlocation is not enabled}",  (uint8_t *)&buf,  0x12u);
    }

    sub_100B9F1D0(v14, v9, (uint64_t)@"Microlocation is not enabled at this moment");
  }

  return v12;
}

void sub_100B9A66C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a9 = (void **)&a17;
  sub_10005771C(&a9);
  _Unwind_Resume(a1);
}

void sub_100B9A7D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100B9A7F8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  uint64_t v8 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v9 = *(void *)a2;
    }
    uint64_t buf = 68290307LL;
    __int16 v14 = 2082;
    char v15 = "";
    __int16 v16 = 2082;
    uint64_t v17 = "Client request";
    __int16 v18 = 2082;
    __int16 v19 = "truth label donation request";
    __int16 v20 = 2081;
    uint64_t v21 = v9;
    __int16 v22 = 2082;
    id v23 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
    __int16 v24 = 2082;
    id v25 = objc_msgSend(objc_msgSend(a4, "UUIDString"), "UTF8String");
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Received notification, source:%{public, location:escape_only}s, trigger:%{public, location:escape_only}s, clientIdentifier:%{private, location:escape_only}s, truthLabelUUID:%{public, loca tion:escape_only}s, triggerUUID:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x44u);
  }

  sub_100101534(a3, (uint64_t)&buf);
  sub_100101534(a4, (uint64_t)v11);
  uint64_t result = 0LL;
  if (BYTE6(v15))
  {
    if (v12) {
      return sub_1000C1748(a1 + 3208, (uint64_t *)a2, &buf, v11);
    }
  }

  return result;
}

void sub_100B9AACC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100B9AAF4(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v10 = [*(id *)(a1 + 3480) stringFromDate:a4];
  id v11 = [*(id *)(a1 + 3480) stringFromDate:a5];
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  char v12 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 68290306;
    v14[1] = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2082;
    __int16 v18 = "Client request";
    __int16 v19 = 2082;
    __int16 v20 = "MicroLocation donate truth label for recording events between dates";
    __int16 v21 = 2082;
    id v22 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
    __int16 v23 = 2082;
    id v24 = [v10 UTF8String];
    __int16 v25 = 2082;
    id v26 = [v11 UTF8String];
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Received notification, source:%{public, location:escape_only}s, trigger:%{public, location:escape_only}s, truthLabelUUID:%{public, location:escape_only}s, startDate:%{public, location:esc ape_only}s, endDate:%{public, location:escape_only}s}",  (uint8_t *)v14,  0x44u);
  }

  sub_100101534(a3, (uint64_t)v14);
  if (BYTE6(v16)) {
    return sub_1000C19C8(a1 + 3208, a2, (uint64_t)v14, a4, a5);
  }
  else {
    return 0LL;
  }
}

void sub_100B9AD08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B9ADBC(uint64_t a1, void *a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  CFStringRef v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    uint64_t buf = (unsigned __int8 *)68289539;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2081;
    id v11 = objc_msgSend(objc_msgSend(a2, "bundleId"), "UTF8String");
    __int16 v12 = 2081;
    id v13 = objc_msgSend(objc_msgSend(a2, "launchReason"), "UTF8String");
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:onForegroundAppLaunched, id:%{private, location:escape_only}s, reason:%{private, location:escape_only}s}",  (uint8_t *)&buf,  0x26u);
  }

  sub_100BA0BC0(&buf);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100BA0CBC;
  v5[3] = &unk_101874950;
  v5[4] = a2;
  void v5[5] = a1;
  sub_100103BB0([a2 bundleId], &buf, (uint64_t)v5);
  p_uint64_t buf = &buf;
  sub_1000129D4((void ***)&p_buf);
}

void sub_100B9AF2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_100B9AF5C(uint64_t a1, void *a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  CFStringRef v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received onNowPlaying Duet Callback", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    LOWORD(v8[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Received onNowPlaying Duet Callback",  v8,  2);
    BOOL v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationNotifier::onNowPlaying(CLDuetNowPlaying *)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100BA0BC0(buf);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100BA0DD0;
  _OWORD v7[3] = &unk_101874950;
  v7[4] = a2;
  void v7[5] = a1;
  sub_100103BB0([a2 bundleId], (unsigned __int8 **)buf, (uint64_t)v7);
  v8[0] = (void **)buf;
  sub_1000129D4(v8);
}

void sub_100B9B14C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

std::string::size_type sub_100B9B180(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    sub_100B9B2D0(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 68289283;
    int v8 = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2081;
    __int16 v12 = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Microlocation: createInUniverse, Microlocation Version:%{private, location:escape_only}s}",  buf,  0x1Cu);
  }

  CFStringRef v4 = operator new(0xE20uLL);
  std::string::size_type result = sub_100B9B454((std::string::size_type)v4, *(void **)(a1 + 32));
  qword_1019A1D30 = (uint64_t)v4;
  return result;
}

void sub_100B9B2B4(_Unwind_Exception *a1)
{
}

void sub_100B9B2D0(std::string *a1@<X8>)
{
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsVersion", 0x8000100u, kCFAllocatorNull);
  BOOL v3 = sub_1002A85D0(v9, (uint64_t)v2, &v8);
  CFRelease(v2);
  if (v3)
  {
    else {
      std::string __p = v8;
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      sub_1010DD48C(a1, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }

    else
    {
      *a1 = __p;
    }
  }

  else
  {
    sub_1010DDBC0(a1, "2.0.9");
  }

  CFStringRef v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100B9B414( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_10000AE14((uint64_t)&a21);
  _Unwind_Resume(a1);
}

std::string::size_type sub_100B9B454(std::string::size_type a1, void *a2)
{
  uint64_t v6 = 0LL;
  sub_100B9C024(a1, a2, (uint64_t)__p, &v6);
  if (v6)
  {
    CFStringRef v4 = (void *)sub_100D1EEE8(v6);
    operator delete(v4);
  }

  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_100B9B4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  if (a2)
  {
    BOOL v3 = (void *)sub_100D1EEE8(a2);
    operator delete(v3);
  }

  sub_101226D18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B9B4EC(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  CFStringRef v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Rapport, unregister rapport session", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Rapport, unregister rapport session",  v5,  2);
    CFStringRef v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMicroLocationNotifier::stopRapportSession()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  [*(id *)(a1 + 224) invalidate];

  *(void *)(a1 + 2++*(void *)(result + 24) = 0LL;
}

void sub_100B9B690(uint64_t a1)
{
}

id sub_100B9B698(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  CFStringRef v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Rapport, register rapport session", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Rapport, register rapport session",  v9,  2);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMicroLocationNotifier::startRapportSession()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  *(void *)(a1 + 2++*(void *)(result + 24) = objc_alloc_init(&OBJC_CLASS___RPCompanionLinkClient);
  objc_msgSend(*(id *)(a1 + 224), "setDispatchQueue:", objc_msgSend(*(id *)(a1 + 40), "queue"));
  [*(id *)(a1 + 224) setControlFlags:4];
  [*(id *)(a1 + 224) setTargetUserSession:1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100B9B8D4;
  v8[3] = &unk_101874590;
  _DWORD v8[4] = a1;
  [*(id *)(a1 + 224) setDeviceFoundHandler:v8];
  BOOL v3 = *(void **)(a1 + 224);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100B9BEE8;
  _OWORD v7[3] = &unk_10181F6F8;
  v7[4] = a1;
  return [v3 activateWithCompletion:v7];
}

void sub_100B9B8D4(uint64_t a1, void *a2)
{
}

void sub_100B9B8DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1010DDBC0(&v21, "");
    sub_1010DDBC0(__p, "");
    sub_1010DDBC0(v17, "");
    if ([a2 name])
    {
      sub_1010DDBC0(buf, (char *)objc_msgSend(objc_msgSend(a2, "name"), "UTF8String"));
      if (SHIBYTE(v22) < 0) {
        operator delete((void *)v21);
      }
      __int128 v21 = *(_OWORD *)buf;
      uint64_t v22 = *(void *)&buf[16];
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      int v5 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(void *)uint64_t buf = 68289282LL;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2082;
        *(void *)&buf[20] = "device name unavailable";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Rapport, onRapportDeviceFound, note:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }
    }

    if ([a2 idsDeviceIdentifier])
    {
      sub_1010DDBC0(buf, (char *)objc_msgSend(objc_msgSend(a2, "idsDeviceIdentifier"), "UTF8String"));
      if (SHIBYTE(v20) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v20 = *(void *)&buf[16];
      if ([a2 model])
      {
        sub_1010DDBC0(buf, (char *)objc_msgSend(objc_msgSend(a2, "model"), "UTF8String"));
        if (SHIBYTE(v18) < 0) {
          operator delete(v17[0]);
        }
        *(_OWORD *)__int16 v17 = *(_OWORD *)buf;
        uint64_t v18 = *(void *)&buf[16];
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101874AF8);
        }
        uint64_t v6 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
        {
          id v7 = &v21;
          if (v22 < 0) {
            id v7 = (__int128 *)v21;
          }
          char v8 = __p;
          if (v20 < 0) {
            char v8 = (void **)__p[0];
          }
          uint64_t v9 = v17;
          if (v18 < 0) {
            uint64_t v9 = (void **)v17[0];
          }
          *(void *)uint64_t buf = 68289795LL;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&_BYTE buf[18] = 2081;
          *(void *)&buf[20] = v7;
          __int16 v24 = 2081;
          __int16 v25 = v8;
          __int16 v26 = 2081;
          uint64_t v27 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Rapport, onRapportDeviceFound, name:%{private, location:escape_only}s, idsDev iceIdentifier:%{private, location:escape_only}s, model:%{private, location:escape_only}s}",  buf,  0x30u);
        }

        if (SHIBYTE(v20) < 0)
        {
          sub_1010DD48C(__dst, __p[0], (unint64_t)__p[1]);
        }

        else
        {
          *(_OWORD *)__uuid_t dst = *(_OWORD *)__p;
          uint64_t v16 = v20;
        }

        if (SHIBYTE(v18) < 0)
        {
          sub_1010DD48C(v13, v17[0], (unint64_t)v17[1]);
        }

        else
        {
          *(_OWORD *)id v13 = *(_OWORD *)v17;
          uint64_t v14 = v18;
        }

        if (SHIBYTE(v22) < 0)
        {
          sub_1010DD48C(v11, (void *)v21, *((unint64_t *)&v21 + 1));
        }

        else
        {
          *(_OWORD *)__int16 v11 = v21;
          uint64_t v12 = v22;
        }

        sub_10012AEE8(a1 + 584, (uint64_t)__dst, (uint64_t)v13, (__int128 *)v11);
        if (SHIBYTE(v12) < 0) {
          operator delete(v11[0]);
        }
        if (SHIBYTE(v14) < 0) {
          operator delete(v13[0]);
        }
        if (SHIBYTE(v16) < 0) {
          operator delete(__dst[0]);
        }
        goto LABEL_54;
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      __int16 v10 = (os_log_s *)qword_1019348D8;
      if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_54;
      }
      *(void *)uint64_t buf = 68289282LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = "Model type unavailable  - device not buffered to monitor";
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101874AF8);
      }
      __int16 v10 = (os_log_s *)qword_1019348D8;
      if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_54;
      }
      *(void *)uint64_t buf = 68289282LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = "IDS Identifier unavailable - device not buffered to monitor";
    }

    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Rapport, onRapportDeviceFound, error:%{public, location:escape_only}s}",  buf,  0x1Cu);
LABEL_54:
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)v21);
    }
    return;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  CFStringRef v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = 68289026LL;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Rapport, onRapportDeviceFound - rapport session device found is nil}",  buf,  0x12u);
  }