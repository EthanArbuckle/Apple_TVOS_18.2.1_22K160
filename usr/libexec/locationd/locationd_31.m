void sub_100FCB338(void *a1, uint64_t a2)
{
  void *v4;
  NSNumber *v5;
  v4 = (void *)sub_100B57ACC(a1, (uint64_t)@"activeType");
  if ((a2 & 0xFF00000000LL) == 0)
  {
    if (!v4) {
      return;
    }
    v5 = 0LL;
    goto LABEL_7;
  }

  if (!v4 || [v4 intValue] != (_DWORD)a2)
  {
    v5 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2);
LABEL_7:
    sub_100B57D4C((uint64_t)a1, (uint64_t)@"activeType", (uint64_t)v5);
    sub_100B57DFC((uint64_t)a1);
    sub_100FCA4D0((uint64_t)a1);
  }

void sub_100FCB3C4(uint64_t a1, void *a2, CLVisit *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101892DB0);
  }
  v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    v8 = (CLVisit *)[*(id *)(v6 + 128) silo];
    *(_DWORD *)buf = 68289282;
    int v59 = 0;
    __int16 v60 = 2082;
    v61 = "";
    __int16 v62 = 2114;
    v63 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#slv inside the fetchStoredVisitsWithOptions block, Silo:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  [*(id *)(v6 + 128) silo];
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101892DB0);
  }
  v9 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    v10 = (CLVisit *)[*(id *)(v6 + 128) silo];
    *(_DWORD *)buf = 68289282;
    int v59 = 0;
    __int16 v60 = 2082;
    v61 = "";
    __int16 v62 = 2114;
    v63 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#slv after the DBG_ASSERT_INSIDE, Silo:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  if (a3)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101892DB0);
    }
    v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      int v59 = 0;
      __int16 v60 = 2082;
      v61 = "";
      __int16 v62 = 2114;
      v63 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#slv: CoreRoutine error while getting stored visits., Error:%{public, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101892DB0);
      }
    }

    v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)buf = 68289282;
      int v59 = 0;
      __int16 v60 = 2082;
      v61 = "";
      __int16 v62 = 2114;
      v63 = a3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#slv: CoreRoutine error while getting stored visits.",  "{msg%{public}.0s:#slv: CoreRoutine error while getting stored visits., Error:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }
  }

  else
  {
    v13 = (CLVisit *)[a2 firstObject];
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101892DB0);
    }
    v14 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      int v59 = 0;
      __int16 v60 = 2082;
      v61 = "";
      __int16 v62 = 2113;
      v63 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#slv: last RTVisit returned., RTVisit:%{private, location:escape_only}@}",  buf,  0x1Cu);
    }

    if (v13)
    {
      if (-[CLVisit type](v13, "type") == (id)1) {
        v13 = -[CLVisit initWithVisit:](objc_alloc(&OBJC_CLASS___CLVisit), "initWithVisit:", v13);
      }
      else {
        v13 = 0LL;
      }
    }

    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101892DB0);
    }
    v15 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      int v59 = 0;
      __int16 v60 = 2082;
      v61 = "";
      __int16 v62 = 2113;
      v63 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#slv: last visit returned., visit:%{private, location:escape_only}@}",  buf,  0x1Cu);
    }

    if (([*(id *)(v6 + 136) isAuthorizedForServiceType:12] & 1) != 0 || !v13)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101892DB0);
      }
      v32 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "#slv: using full precision or lastVisit is nil",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101892DB0);
        }
        v57[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "#slv: using full precision or lastVisit is nil",  v57,  2);
        v36 = (uint8_t *)v35;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVisitMonitoringSubscription::handleMessageSignificantLocationVisitState(std::shared_ptr<CLConnectionMes sage>)_block_invoke",  "%s\n",  v35);
        if (v36 != buf) {
          free(v36);
        }
      }

      sub_100FCABC4(v6, (char *)v13);
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101892DB0);
      }
      v16 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "#slv: using corrective compensation",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101892DB0);
        }
        v57[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "#slv: using corrective compensation",  v57,  2);
        v34 = (uint8_t *)v33;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVisitMonitoringSubscription::handleMessageSignificantLocationVisitState(std::shared_ptr<CLConnectionMes sage>)_block_invoke",  "%s\n",  v33);
        if (v34 != buf) {
          free(v34);
        }
      }

      -[CLVisit coordinate](v13, "coordinate");
      uint64_t v18 = v17;
      -[CLVisit coordinate](v13, "coordinate");
      uint64_t v20 = v19;
      -[CLVisit horizontalAccuracy](v13, "horizontalAccuracy");
      uint64_t v22 = v21;
      v23 = *(void **)(v6 + 280);
      v24 = objc_alloc(&OBJC_CLASS___CLLocation);
      int v38 = 0xFFFF;
      uint64_t v39 = v18;
      uint64_t v40 = v20;
      uint64_t v41 = v22;
      __asm { FMOV            V0.2D, #-1.0 }

      __int128 v42 = xmmword_1012EA5D0;
      __int128 v43 = _Q0;
      __int128 v44 = _Q0;
      unint64_t v45 = 0xBFF0000000000000LL;
      uint64_t v48 = 0LL;
      uint64_t v49 = 0LL;
      unint64_t v47 = 0xBFF0000000000000LL;
      int v46 = 0;
      int v50 = 0;
      unint64_t v51 = 0xBFF0000000000000LL;
      int v52 = 0x7FFFFFFF;
      uint64_t v54 = 0LL;
      uint64_t v55 = 0LL;
      uint64_t v53 = 0LL;
      char v56 = 0;
      v30 = -[CLLocation initWithClientLocation:](v24, "initWithClientLocation:", &v38);
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      v37[2] = sub_100FCBB2C;
      v37[3] = &unk_101892CC0;
      uint64_t v31 = *(void *)(a1 + 32);
      v37[4] = v13;
      v37[5] = v31;
      v37[6] = v6;
      [v23 snapLocation:v30 withReply:v37];
    }
  }

id sub_100FCBB2C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3 = (char *)sub_100FCB218(a1, a2, *(void **)(a1 + 32));
  return sub_100FCABC4(v2, v3);
}

void sub_100FCBB58(uint64_t a1)
{
  *(void *)(a1 + 264) = 0LL;
}

void sub_100FCBB8C(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 276))
  {
    if (*(_DWORD *)(a1 + 272) == a2) {
      return;
    }
    sub_100FC9848(a1);
  }

  if (a2 == 1)
  {
    [*(id *)(a1 + 264) startLeechingVisitsForClient:*(void *)(a1 + 256)];
  }

  else if (!a2)
  {
    [*(id *)(a1 + 264) startMonitoringVisitsForClient:*(void *)(a1 + 256)];
  }

  *(_DWORD *)(a1 + 272) = a2;
  *(_BYTE *)(a1 + 276) = 1;
  id v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", @"CLClientManager");
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    [v5 clientName];
  }

  else
  {
    uint64_t v17 = 0LL;
    *(_OWORD *)__p = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    *(_OWORD *)v14 = 0u;
    __int128 v11 = 0u;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)v7 = 0u;
    __int128 v8 = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
  }

  [v4 setClients:sub_100C7319C((uint64_t)v6) significantLocationVisitTo:1];
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[1]);
  }
  if (SHIBYTE(v10[0]) < 0) {
    operator delete(v9[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (SHIBYTE(v7[0]) < 0) {
    operator delete(v6[0]);
  }
}

void sub_100FCBCD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100FCBCE4(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 64), "clientKey"), @"ClientKeyPath");
  v3 = (void *)(a1 + 96);
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3),  @"SubscriptionStorageName");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 136)),  @"AuthContext");
  if (*(_BYTE *)(a1 + 276)) {
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 272)),  @"RunningType");
  }
  return v2;
}

void sub_100FCBDB4(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100FCBDE0(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100FCBE0C(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &off_101892DE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100FCBE48(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101892DE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100FCBE6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100FCBE74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100FCBEB0()
{
}

void sub_100FCBEBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  uint64_t v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    __int128 v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    __int128 v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100FCBF90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100FCBFAC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100FCC024(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100FCC010(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100FCC024(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    __int128 v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100FCC2A4(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100FCC28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100FCC2A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100FCC318(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100FCC300(_Unwind_Exception *a1)
{
}

void *sub_100FCC318(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100FCC370(_Unwind_Exception *exception_object)
{
}

id sub_100FCC38C(uint64_t a1, double a2)
{
  __int128 v4 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "kCLConnectionMessageSignificantLocationVisit");
  id v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "newTimer");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100FCC4B4;
  v7[3] = &unk_10181D3D0;
  v7[4] = a1;
  [v5 setHandler:v7];
  [v5 setNextFireDelay:a2];
  objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v4), "invalidate");
  return [*(id *)(a1 + 240) setObject:v5 forKeyedSubscript:v4];
}

void *sub_100FCC454@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  __n128 result = sub_100C74978(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100FCC4A0(_Unwind_Exception *a1)
{
}

void sub_100FCC4B4(uint64_t a1)
{
}

void sub_100FCC4BC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_1010DDBC0(__p, "kCLConnectionMessageSignificantLocationVisit");
  sub_100C74DB8(v1, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100FCC50C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100FCC528(uint64_t a1, double a2)
{
  __int128 v4 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "kCLConnectionMessageSignificantLocationVisitState");
  id v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "newTimer");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100FCC5F0;
  v7[3] = &unk_10181D3D0;
  v7[4] = a1;
  [v5 setHandler:v7];
  [v5 setNextFireDelay:a2];
  objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v4), "invalidate");
  return [*(id *)(a1 + 240) setObject:v5 forKeyedSubscript:v4];
}

void sub_100FCC5F0(uint64_t a1)
{
}

void sub_100FCC5F8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_1010DDBC0(__p, "kCLConnectionMessageSignificantLocationVisitState");
  sub_100C74DB8(v1, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100FCC648( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCC68C(uint64_t a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_101892E70;
  *(void *)(a1 + 72) = off_101892F28;
  sub_100B14CF0((void *)(a1 + 384), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 400), 0LL, 0LL);
  *(_BYTE *)(a1 + 416) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  return a1;
}

void sub_100FCC740( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCC76C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  void *v12 = &off_101826EF8;
  *(void *)a1 = off_101893218;
  *(void *)(a1 + 72) = off_1018932C0;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_101893218;
  *(void *)(a1 + 72) = off_1018932C0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 288) = 0LL;
  *(void *)(a1 + 296) = 0LL;
  *(_DWORD *)(a1 + 304) = 12000;
  *(void *)(a1 + 312) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 320));
  *(void *)(a1 + 320) = &off_101826EF8;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  unint64_t v15 = (int *)(a1 + 304);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 304));
  float v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    int *v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101893300);
  }
  unint64_t v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101893300);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorderDb(cons t char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = VO2MaxSessionA ttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100FCCB18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[39] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_100C69D48(v26);
  sub_100D8A88C(a12);
  void *v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100FCCBBC()
{
}

void *sub_100FCCBC4(void *a1)
{
  a1[9] = off_1018932C0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_101893218;
  a1[39] = off_101826EC8;
  sub_1001B9C98(a1 + 40);
  sub_100C69D48(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100FCCC44(uint64_t a1)
{
  return sub_100FCCBC4((void *)(a1 - 72));
}

void sub_100FCCC4C(void *a1)
{
  uint64_t v1 = sub_100FCCBC4(a1);
  operator delete(v1);
}

void sub_100FCCC60(uint64_t a1)
{
  uint64_t v1 = sub_100FCCBC4((void *)(a1 - 72));
  operator delete(v1);
}

uint64_t sub_100FCCC78(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 416)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  }
  sub_1003C0454(*(void *)(a1 + 80));
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM VO2MaxSessionAttributesHistory WHERE startTime < ?", &v13);
  uint64_t v5 = v13;
  char v6 = (sqlite3_stmt *)sub_100019240(v13);
  if (sub_1003B7480(v6, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
  {
    uint64_t v7 = *(void *)(a1 + 80);
    unint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
    sub_1003BB2BC(v7, v8);
    uint64_t v9 = (*(int (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  }

  else
  {
    uint64_t v9 = -1LL;
  }

  sub_1003C05BC(*(void *)(a1 + 80));
  uint64_t v10 = *(void *)(a1 + 80);
  else {
    uint64_t v11 = *(void *)(v10 + 88);
  }
  sub_1003C1EC0(v10, v11);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v9;
}

void sub_100FCCDA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCCDC8(uint64_t a1, uint64_t a2)
{
  return sub_100FCCC78(a1 - 72, a2);
}

uint64_t sub_100FCCDD0(uint64_t a1, char **a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from VO2MaxSessionAttributesHistory ORDER BY startTime ASC", &v28);
    uint64_t v5 = v28;
    uint64_t v27 = v28;
    sub_1003C0454(*(void *)(a1 + 80));
    __int128 v32 = 0uLL;
    while (!sub_100FCD018(&v27, (uint64_t)&v28))
    {
      char v6 = a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v7)
      {
        unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *a2) >> 4);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0x333333333333333LL) {
          sub_100007008();
        }
        unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*a2) >> 4);
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x199999999999999LL) {
          unint64_t v15 = 0x333333333333333LL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15) {
          char v16 = (char *)sub_10003E20C((uint64_t)(a2 + 2), v15);
        }
        else {
          char v16 = 0LL;
        }
        float v17 = &v16[80 * v12];
        *(_OWORD *)float v17 = v28;
        __int128 v18 = v29;
        __int128 v19 = v30;
        __int128 v20 = v32;
        *((_OWORD *)v17 + 3) = v31;
        *((_OWORD *)v17 + 4) = v20;
        *((_OWORD *)v17 + 1) = v18;
        *((_OWORD *)v17 + 2) = v19;
        int v22 = *a2;
        int v21 = a2[1];
        unint64_t v23 = v17;
        if (v21 != *a2)
        {
          do
          {
            *((_OWORD *)v23 - 5) = *((_OWORD *)v21 - 5);
            __int128 v24 = *((_OWORD *)v21 - 4);
            __int128 v25 = *((_OWORD *)v21 - 3);
            __int128 v26 = *((_OWORD *)v21 - 1);
            *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
            *((_OWORD *)v23 - 1) = v26;
            *((_OWORD *)v23 - 4) = v24;
            *((_OWORD *)v23 - 3) = v25;
            v23 -= 80;
            v21 -= 80;
          }

          while (v21 != v22);
          int v21 = *a2;
        }

        uint64_t v11 = v17 + 80;
        *a2 = v23;
        a2[1] = v17 + 80;
        a2[2] = &v16[80 * v15];
        if (v21) {
          operator delete(v21);
        }
      }

      else
      {
        *(_OWORD *)char v6 = v28;
        __int128 v8 = v29;
        __int128 v9 = v30;
        __int128 v10 = v32;
        *((_OWORD *)v6 + 3) = v31;
        *((_OWORD *)v6 + 4) = v10;
        *((_OWORD *)v6 + 1) = v8;
        *((_OWORD *)v6 + 2) = v9;
        uint64_t v11 = v6 + 80;
      }

      a2[1] = v11;
    }

    uint64_t result = sub_1003C05BC(*(void *)(a1 + 80));
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100FCCFE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCD018(uint64_t *a1, uint64_t a2)
{
  __int128 v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  char v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  unint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  __int128 v8 = (sqlite3_stmt *)sub_100019240(*a1);
  __int128 v9 = sqlite3_column_text(v8, 2);
  uuid_parse((const char *)v9, (unsigned __int8 *)(a2 + 16));
  __int128 v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v10, 3);
  uint64_t v11 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v11, 4);
  unint64_t v12 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 48) = sqlite3_column_int(v12, 5);
  unint64_t v13 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 52) = sqlite3_column_int(v13, 6) != 0;
  unint64_t v14 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v14, 7);
  unint64_t v15 = (sqlite3_stmt *)sub_100019240(*a1);
  char v16 = sqlite3_column_blob(v15, 8);
  float v17 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)(a2 + 64) =  -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  v16,  sqlite3_column_bytes(v17, 8));
  __int128 v18 = (sqlite3_stmt *)sub_100019240(*a1);
  __int128 v19 = sqlite3_column_blob(v18, 9);
  __int128 v20 = (sqlite3_stmt *)sub_100019240(*a1);
  int v21 =  -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  v19,  sqlite3_column_bytes(v20, 9));
  uint64_t result = 0LL;
  *(void *)(a2 + 72) = v21;
  return result;
}

uint64_t sub_100FCD1B8(uint64_t a1)
{
  uint64_t v3 = v8;
  __int128 v4 = (sqlite3_stmt *)sub_100019240(v8);
  int v5 = sqlite3_step(v4);
  if (v5 == 100)
  {
    char v6 = (sqlite3_stmt *)sub_100019240(v3);
    uint64_t v1 = sqlite3_column_int(v6, 0);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (v5 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100FCD258(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCD27C(uint64_t a1)
{
  return sub_100FCD1B8(a1 - 72);
}

uint64_t sub_100FCD284(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 400), &v19);
    uuid_unparse((const unsigned __int8 *)(a2 + 16), out);
    unint64_t v7 = (sqlite3_stmt *)sub_100019240(v19);
    if (sub_1003B7480(v7, 1, *(double *)(a2 + 8)))
    {
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v19);
      if (sub_1003BC1F0(v8, 2, out))
      {
        __int128 v9 = (sqlite3_stmt *)sub_100019240(v19);
        if (sub_1003B7480(v9, 3, *(double *)(a2 + 32)))
        {
          __int128 v10 = (sqlite3_stmt *)sub_100019240(v19);
          if (sub_1003B7480(v10, 4, *(double *)(a2 + 40)))
          {
            uint64_t v11 = (sqlite3_stmt *)sub_100019240(v19);
            if (sub_1003C2AF0(v11, 5, *(_DWORD *)(a2 + 48)))
            {
              unint64_t v12 = (sqlite3_stmt *)sub_100019240(v19);
              if (sub_1003C28BC(v12, 6, *(unsigned __int8 *)(a2 + 52)))
              {
                unint64_t v13 = (sqlite3_stmt *)sub_100019240(v19);
                if (sub_1003C28BC(v13, 7, *(_DWORD *)(a2 + 56)))
                {
                  unint64_t v14 = (sqlite3_stmt *)sub_100019240(v19);
                  if (sub_1003C2F58(v14, 8, *(void **)(a2 + 64)))
                  {
                    unint64_t v15 = (sqlite3_stmt *)sub_100019240(v19);
                    if (sub_1003C2F58(v15, 9, *(void **)(a2 + 72)))
                    {
                      char v16 = (sqlite3_stmt *)sub_100019240(v19);
                      if (sub_1003C2D24(v16, 10, a3))
                      {
                        uint64_t v17 = *(void *)(a1 + 80);
                        __int128 v18 = (sqlite3_stmt *)sub_100019240(v19);
                        sub_1003BB2BC(v17, v18);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = v19;
    uint64_t v19 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100FCD428( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_100FCD454(uint64_t a1, const unsigned __int8 *a2, char **a3)
{
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    a3[1] = *a3;
    uuid_unparse(a2, out);
    sub_100B14CF8((uint64_t *)(a1 + 384), &v32);
    __int128 v38 = 0uLL;
    char v6 = (sqlite3_stmt *)sub_100019240(v32);
    if (sub_1003BC1F0(v6, 1, out))
    {
      while (!sub_100FCD018(&v32, (uint64_t)buf))
      {
        unint64_t v7 = a3[1];
        unint64_t v8 = (unint64_t)a3[2];
        if ((unint64_t)v7 >= v8)
        {
          unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a3) >> 4);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0x333333333333333LL) {
            sub_100007008();
          }
          unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)*a3) >> 4);
          if (2 * v15 > v14) {
            unint64_t v14 = 2 * v15;
          }
          if (v15 >= 0x199999999999999LL) {
            unint64_t v16 = 0x333333333333333LL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16) {
            uint64_t v17 = (char *)sub_10003E20C((uint64_t)(a3 + 2), v16);
          }
          else {
            uint64_t v17 = 0LL;
          }
          __int128 v18 = &v17[80 * v13];
          *(_OWORD *)__int128 v18 = *(_OWORD *)buf;
          __int128 v19 = v35;
          __int128 v20 = v36;
          __int128 v21 = v38;
          *((_OWORD *)v18 + 3) = v37;
          *((_OWORD *)v18 + 4) = v21;
          *((_OWORD *)v18 + 1) = v19;
          *((_OWORD *)v18 + 2) = v20;
          unint64_t v23 = *a3;
          int v22 = a3[1];
          __int128 v24 = v18;
          if (v22 != *a3)
          {
            do
            {
              *((_OWORD *)v24 - 5) = *((_OWORD *)v22 - 5);
              __int128 v25 = *((_OWORD *)v22 - 4);
              __int128 v26 = *((_OWORD *)v22 - 3);
              __int128 v27 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v24 - 1) = v27;
              *((_OWORD *)v24 - 4) = v25;
              *((_OWORD *)v24 - 3) = v26;
              v24 -= 80;
              v22 -= 80;
            }

            while (v22 != v23);
            int v22 = *a3;
          }

          unint64_t v12 = v18 + 80;
          *a3 = v24;
          a3[1] = v18 + 80;
          a3[2] = &v17[80 * v16];
          if (v22) {
            operator delete(v22);
          }
        }

        else
        {
          *(_OWORD *)unint64_t v7 = *(_OWORD *)buf;
          __int128 v9 = v35;
          __int128 v10 = v36;
          __int128 v11 = v38;
          *((_OWORD *)v7 + 3) = v37;
          *((_OWORD *)v7 + 4) = v11;
          *((_OWORD *)v7 + 1) = v9;
          *((_OWORD *)v7 + 2) = v10;
          unint64_t v12 = v7 + 80;
        }

        a3[1] = v12;
      }
    }

    uint64_t v30 = v32;
    uint64_t v32 = 0LL;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
    }
    return 100LL;
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101892FB8);
    }
    __int128 v28 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "VO2MaxSessionAttributesHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101892FB8);
      }
      *(_WORD *)uuid_string_t out = 0;
      __int128 v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2MaxSessionAttributesHistory, DB not accessible",  out,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLVO2MaxSessionAttributesRecorderDb::queryBySessionId(const unsigned char *, std::vector<VO2MaxSessionAt tributes> &) const",  "%s\n",  v31);
    }

    return 109LL;
  }

void sub_100FCD798( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

BOOL sub_100FCD7C8(uint64_t a1, int a2, double *a3)
{
  if (sub_100D8A92C(a1 + 72))
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT MIN(startTime) FROM VO2MaxSessionAttributesHistory WHERE algorithmVersion >= ?",  &v12);
    uint64_t v6 = v12;
    unint64_t v7 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003C28BC(v7, 1, a2))
    {
      unint64_t v8 = (sqlite3_stmt *)sub_100019240(v6);
      if (sqlite3_step(v8) == 100)
      {
        __int128 v9 = (sqlite3_stmt *)sub_100019240(v6);
        int v10 = 0;
        *a3 = sqlite3_column_double(v9, 0);
        if (!v6) {
          return v10 == 0;
        }
        goto LABEL_8;
      }
    }

    int v10 = 2;
    if (v6) {
LABEL_8:
    }
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }

  else
  {
    int v10 = 2;
  }

  return v10 == 0;
}

void sub_100FCD894(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCD8B4(uint64_t a1, char **a2, double a3)
{
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT sah.* from VO2MaxSessionAttributesHistory sah WHERE sah.startTime > ? AND EXISTS (SELECT sh.id FROM VO2MaxS ummaryHistory sh WHERE sh.sessionId = sah.sessionId)",  buf);
    uint64_t v6 = *(void *)buf;
    v32[0] = *(void *)buf;
    __int128 v37 = 0uLL;
    unint64_t v7 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sub_1003B7480(v7, 1, a3))
    {
      while (!sub_100FCD018(v32, (uint64_t)buf))
      {
        unint64_t v8 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v8 >= v9)
        {
          unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a2) >> 4);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0x333333333333333LL) {
            sub_100007008();
          }
          unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)*a2) >> 4);
          if (2 * v16 > v15) {
            unint64_t v15 = 2 * v16;
          }
          if (v16 >= 0x199999999999999LL) {
            unint64_t v17 = 0x333333333333333LL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17) {
            __int128 v18 = (char *)sub_10003E20C((uint64_t)(a2 + 2), v17);
          }
          else {
            __int128 v18 = 0LL;
          }
          __int128 v19 = &v18[80 * v14];
          *(_OWORD *)__int128 v19 = *(_OWORD *)buf;
          __int128 v20 = v34;
          __int128 v21 = v35;
          __int128 v22 = v37;
          *((_OWORD *)v19 + 3) = v36;
          *((_OWORD *)v19 + 4) = v22;
          *((_OWORD *)v19 + 1) = v20;
          *((_OWORD *)v19 + 2) = v21;
          __int128 v24 = *a2;
          unint64_t v23 = a2[1];
          __int128 v25 = v19;
          if (v23 != *a2)
          {
            do
            {
              *((_OWORD *)v25 - 5) = *((_OWORD *)v23 - 5);
              __int128 v26 = *((_OWORD *)v23 - 4);
              __int128 v27 = *((_OWORD *)v23 - 3);
              __int128 v28 = *((_OWORD *)v23 - 1);
              *((_OWORD *)v25 - 2) = *((_OWORD *)v23 - 2);
              *((_OWORD *)v25 - 1) = v28;
              *((_OWORD *)v25 - 4) = v26;
              *((_OWORD *)v25 - 3) = v27;
              v25 -= 80;
              v23 -= 80;
            }

            while (v23 != v24);
            unint64_t v23 = *a2;
          }

          unint64_t v13 = v19 + 80;
          *a2 = v25;
          a2[1] = v19 + 80;
          a2[2] = &v18[80 * v17];
          if (v23) {
            operator delete(v23);
          }
        }

        else
        {
          *(_OWORD *)unint64_t v8 = *(_OWORD *)buf;
          __int128 v10 = v34;
          __int128 v11 = v35;
          __int128 v12 = v37;
          *((_OWORD *)v8 + 3) = v36;
          *((_OWORD *)v8 + 4) = v12;
          *((_OWORD *)v8 + 1) = v10;
          *((_OWORD *)v8 + 2) = v11;
          unint64_t v13 = v8 + 80;
        }

        a2[1] = v13;
      }
    }

    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    return 100LL;
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101892FB8);
    }
    __int128 v29 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "VO2MaxSessionAttributesHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101892FB8);
      }
      LOWORD(v32[0]) = 0;
      __int128 v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2MaxSessionAttributesHistory, DB not accessible",  v32,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLVO2MaxSessionAttributesRecorderDb::getSessionsWithClusters(std::vector<VO2MaxSessionAttributes> &, con st CFAbsoluteTime) const",  "%s\n",  v31);
    }

    return 109LL;
  }

void sub_100FCDC08(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100FCDC34(uint64_t a1, char **a2, double a3, double a4)
{
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM VO2MaxSessionAttributesHistory WHERE startTime >= ? and startTime <= ? ORDER BY startTime ASC",  buf);
    uint64_t v8 = *(void *)buf;
    v36[0] = *(void *)buf;
    __int128 v41 = 0uLL;
    unint64_t v9 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sub_1003B7480(v9, 1, a3))
    {
      __int128 v10 = (sqlite3_stmt *)sub_100019240(v8);
      if (sub_1003B7480(v10, 2, a4))
      {
        while (!sub_100FCD018(v36, (uint64_t)buf))
        {
          __int128 v11 = a2[1];
          unint64_t v12 = (unint64_t)a2[2];
          if ((unint64_t)v11 >= v12)
          {
            unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - *a2) >> 4);
            unint64_t v18 = v17 + 1;
            if (v17 + 1 > 0x333333333333333LL) {
              sub_100007008();
            }
            unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)*a2) >> 4);
            if (2 * v19 > v18) {
              unint64_t v18 = 2 * v19;
            }
            if (v19 >= 0x199999999999999LL) {
              unint64_t v20 = 0x333333333333333LL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20) {
              __int128 v21 = (char *)sub_10003E20C((uint64_t)(a2 + 2), v20);
            }
            else {
              __int128 v21 = 0LL;
            }
            __int128 v22 = &v21[80 * v17];
            *(_OWORD *)__int128 v22 = *(_OWORD *)buf;
            __int128 v23 = v38;
            __int128 v24 = v39;
            __int128 v25 = v41;
            *((_OWORD *)v22 + 3) = v40;
            *((_OWORD *)v22 + 4) = v25;
            *((_OWORD *)v22 + 1) = v23;
            *((_OWORD *)v22 + 2) = v24;
            __int128 v27 = *a2;
            __int128 v26 = a2[1];
            __int128 v28 = v22;
            if (v26 != *a2)
            {
              do
              {
                *((_OWORD *)v28 - 5) = *((_OWORD *)v26 - 5);
                __int128 v29 = *((_OWORD *)v26 - 4);
                __int128 v30 = *((_OWORD *)v26 - 3);
                __int128 v31 = *((_OWORD *)v26 - 1);
                *((_OWORD *)v28 - 2) = *((_OWORD *)v26 - 2);
                *((_OWORD *)v28 - 1) = v31;
                *((_OWORD *)v28 - 4) = v29;
                *((_OWORD *)v28 - 3) = v30;
                v28 -= 80;
                v26 -= 80;
              }

              while (v26 != v27);
              __int128 v26 = *a2;
            }

            unint64_t v16 = v22 + 80;
            *a2 = v28;
            a2[1] = v22 + 80;
            a2[2] = &v21[80 * v20];
            if (v26) {
              operator delete(v26);
            }
          }

          else
          {
            *(_OWORD *)__int128 v11 = *(_OWORD *)buf;
            __int128 v13 = v38;
            __int128 v14 = v39;
            __int128 v15 = v41;
            *((_OWORD *)v11 + 3) = v40;
            *((_OWORD *)v11 + 4) = v15;
            *((_OWORD *)v11 + 1) = v13;
            *((_OWORD *)v11 + 2) = v14;
            unint64_t v16 = v11 + 80;
          }

          a2[1] = v16;
        }
      }
    }

    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
    return 100LL;
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101892FB8);
    }
    uint64_t v32 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "VO2MaxSessionAttributesHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101892FB8);
      }
      LOWORD(v36[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2MaxSessionAttributesHistory, DB not accessible",  v36,  2);
      __int128 v35 = (uint8_t *)v34;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLVO2MaxSessionAttributesRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::v ector<VO2MaxSessionAttributes> &) const",  "%s\n",  v34);
      if (v35 != buf) {
        free(v35);
      }
    }

    return 109LL;
  }

void sub_100FCDFA4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100FCDFD0(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (!sub_1003C1048(*(void *)(a1 + 80)))
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101892FD8);
    }
    __int128 v38 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "Unable to save fetched output data from CloudKit. Device is locked and we are unable to open the database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101892FD8);
      }
      *(_WORD *)uuid_string_t out = 0;
      v74 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "Unable to save fetched output data from CloudKit. Device is locked and we are unable to open the database",  out,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLVO2MaxSessionAttributesRecorderDb::saveFetchedSession(unsigned char *, const VO2MaxSessionAttributes, con st std::vector<VO2MaxSummary> &, const VO2MaxOutput &) const",  "%s\n",  v74);
    }

    return 0LL;
  }

  sub_1003C0454(*(void *)(a1 + 80));
  uuid_unparse(a2, out);
  sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM VO2MaxSummaryHistory WHERE sessionId = ?", buf);
  uint64_t v10 = *(void *)buf;
  sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO VO2MaxSummaryHistory (startTime, workoutType, sessionId, durationInSeconds, pointCount, hrMax, hrMin, me anHr, meanVo2, meanSpeed, meanGrade, meanHrConfidence, meanHrCadenceAgreement, meanCadence, vo2MaxModelSource, sessi onType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  buf);
  uint64_t v11 = *(void *)buf;
  sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO VO2MaxHistory (startTime, workoutType, estimatedVo2Max, durationInSeconds, hrMax, hrMin, sessionId, vari ance, filteredVo2Max, sessionType, eligibleForHealthKit, eligibleForCalorimetry, numWorkoutsContrToEstimate, estimat edHRResponseParam, estimatedHRRecoveryParam, sessionVo2Max) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  buf);
  uint64_t v107 = *(void *)buf;
  sub_1003C0D54( *(void *)(a1 + 80),  "UPDATE VO2MaxHistory SET startTime = ?, workoutType = ?, estimatedVo2Max = ?, durationInSeconds = ?, hrMax = ?, hrMi n = ?, variance = ?, filteredVo2Max = ?, sessionType = ?, eligibleForHealthKit = ?, eligibleForCalorimetry = ?, numW orkoutsContrToEstimate = ?, estimatedHRResponseParam = ?, estimatedHRRecoveryParam = ?, sessionVo2Max = ? WHERE sessionId = ?",  buf);
  uint64_t v12 = *(void *)buf;
  sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO VO2MaxSessionAttributesHistory (startTime, sessionId, meanMaxMets, prior, hardwareType, betaBlockerUse, algorithmVersion, outputCloudKitSystemFields, inputCloudKitSystemFields) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",  buf);
  uint64_t v106 = a3;
  uint64_t v13 = *(void *)buf;
  sub_1003C0D54( *(void *)(a1 + 80),  "UPDATE VO2MaxSessionAttributesHistory SET startTime = ?, meanMaxMets = ?, prior = ?, hardwareType = ?, betaBlockerUs e = ?, algorithmVersion = ?, outputCloudKitSystemFields = ? WHERE sessionId = ?",  buf);
  uint64_t v14 = *(void *)buf;
  __int128 v15 = (sqlite3_stmt *)sub_100019240(v10);
  if (sub_1003BC1F0(v15, 1, out)
    && (v16 = *(void *)(a1 + 80), unint64_t v17 = (sqlite3_stmt *)sub_100019240(v10), sub_1003BB2BC(v16, v17)))
  {
    uint64_t v18 = *a4;
    uint64_t v19 = a4[1];
    while (v18 != v19)
    {
      unint64_t v20 = (sqlite3_stmt *)sub_100019240(v11);
      __int128 v21 = (sqlite3_stmt *)sub_100019240(v11);
      if (!sub_1003C28BC(v21, 2, *(_DWORD *)(v18 + 16))) {
        goto LABEL_48;
      }
      __int128 v22 = (sqlite3_stmt *)sub_100019240(v11);
      if (!sub_1003BC1F0(v22, 3, out)) {
        goto LABEL_48;
      }
      __int128 v23 = (sqlite3_stmt *)sub_100019240(v11);
      __int128 v24 = (sqlite3_stmt *)sub_100019240(v11);
      if (!sub_1003C2D24(v24, 5, *(void *)(v18 + 48))) {
        goto LABEL_48;
      }
      __int128 v25 = (sqlite3_stmt *)sub_100019240(v11);
      __int128 v26 = (sqlite3_stmt *)sub_100019240(v11);
      __int128 v27 = (sqlite3_stmt *)sub_100019240(v11);
      __int128 v28 = (sqlite3_stmt *)sub_100019240(v11);
      __int128 v29 = (sqlite3_stmt *)sub_100019240(v11);
      __int128 v30 = (sqlite3_stmt *)sub_100019240(v11);
      if (!sub_1003B7480(v30, 11, *(double *)(v18 + 112))
        || (__int128 v31 = (sqlite3_stmt *)sub_100019240(v11), !sub_1003B7480(v31, 12, *(double *)(v18 + 80)))
        || (uint64_t v32 = (sqlite3_stmt *)sub_100019240(v11), !sub_1003B7480(v32, 13, *(double *)(v18 + 88)))
        || (v33 = (sqlite3_stmt *)sub_100019240(v11), !sub_1003B7480(v33, 14, *(double *)(v18 + 120)))
        || (__int128 v34 = (sqlite3_stmt *)sub_100019240(v11), !sub_1003C28BC(v34, 15, *(_DWORD *)(v18 + 176)))
        || (__int128 v35 = (sqlite3_stmt *)sub_100019240(v11), !sub_1003C28BC(v35, 16, *(_DWORD *)(v18 + 180)))
        || (uint64_t v36 = *(void *)(a1 + 80), v37 = (sqlite3_stmt *)sub_100019240(v11), !sub_1003BB2BC(v36, v37)))
      {
LABEL_48:
        if (qword_1019346E0 != -1) {
          dispatch_once(&qword_1019346E0, &stru_101892FD8);
        }
        __int128 v42 = (os_log_s *)qword_1019346E8;
        if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_FAULT,  "Unable to save synced VO2MaxSummaryHistory records",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346E0 != -1) {
            dispatch_once(&qword_1019346E0, &stru_101892FD8);
          }
          v108[0] = 0;
          __int128 v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  17LL,  "Unable to save synced VO2MaxSummaryHistory records",  v108,  2);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLVO2MaxSessionAttributesRecorderDb::saveFetchedSession(unsigned char *, const VO2MaxSessionAttributes, const std::vector<VO2MaxSummary> &, const VO2MaxOutput &) const",  "%s\n",  v43);
          goto LABEL_110;
        }

        goto LABEL_35;
      }

      v18 += 184LL;
    }

    __int128 v44 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v44, 1, *(double *)(a5 + 24)))
    {
      unint64_t v45 = (sqlite3_stmt *)sub_100019240(v12);
      if (sub_1003C28BC(v45, 2, *(_DWORD *)(a5 + 40)))
      {
        int v46 = (sqlite3_stmt *)sub_100019240(v12);
        if (sub_1003B7480(v46, 3, *(double *)(a5 + 32)))
        {
          unint64_t v47 = (sqlite3_stmt *)sub_100019240(v12);
          if (sub_1003B7480(v47, 4, *(double *)(a5 + 48)))
          {
            uint64_t v48 = (sqlite3_stmt *)sub_100019240(v12);
            if (sub_1003B7480(v48, 5, *(double *)(a5 + 56)))
            {
              uint64_t v49 = (sqlite3_stmt *)sub_100019240(v12);
              if (sub_1003B7480(v49, 6, *(double *)(a5 + 64)))
              {
                int v50 = (sqlite3_stmt *)sub_100019240(v12);
                if (sub_1003B7480(v50, 7, *(double *)(a5 + 88)))
                {
                  unint64_t v51 = (sqlite3_stmt *)sub_100019240(v12);
                  if (sub_1003B7480(v51, 8, *(double *)(a5 + 96)))
                  {
                    int v52 = (sqlite3_stmt *)sub_100019240(v12);
                    if (sub_1003C28BC(v52, 9, *(_DWORD *)(a5 + 104)))
                    {
                      uint64_t v53 = (sqlite3_stmt *)sub_100019240(v12);
                      if (sub_1003C28BC(v53, 10, *(unsigned __int8 *)(a5 + 108)))
                      {
                        uint64_t v54 = (sqlite3_stmt *)sub_100019240(v12);
                        if (sub_1003C28BC(v54, 11, *(unsigned __int8 *)(a5 + 109)))
                        {
                          uint64_t v55 = (sqlite3_stmt *)sub_100019240(v12);
                          if (sub_1003C2AF0(v55, 12, *(_DWORD *)(a5 + 112)))
                          {
                            char v56 = (sqlite3_stmt *)sub_100019240(v12);
                            if (sub_1003B7480(v56, 13, *(double *)(a5 + 120)))
                            {
                              v57 = (sqlite3_stmt *)sub_100019240(v12);
                              if (sub_1003B7480(v57, 14, *(double *)(a5 + 128)))
                              {
                                v58 = (sqlite3_stmt *)sub_100019240(v12);
                                if (sub_1003BC1F0(v58, 15, out))
                                {
                                  int v59 = (sqlite3_stmt *)sub_100019240(v12);
                                  if (sub_1003B7480(v59, 16, *(double *)(a5 + 136)))
                                  {
                                    uint64_t v60 = *(void *)(a1 + 80);
                                    v61 = (sqlite3_stmt *)sub_100019240(v12);
                                    if (sub_1003BB2BC(v60, v61))
                                    {
                                      if (sub_1003C10E4(*(void *)(a1 + 80)) <= 0)
                                      {
                                        v87 = (sqlite3_stmt *)sub_100019240(v107);
                                        v88 = (sqlite3_stmt *)sub_100019240(v107);
                                        if (!sub_1003C28BC(v88, 2, *(_DWORD *)(a5 + 40))) {
                                          goto LABEL_147;
                                        }
                                        v89 = (sqlite3_stmt *)sub_100019240(v107);
                                        v90 = (sqlite3_stmt *)sub_100019240(v107);
                                        v91 = (sqlite3_stmt *)sub_100019240(v107);
                                        v92 = (sqlite3_stmt *)sub_100019240(v107);
                                        v93 = (sqlite3_stmt *)sub_100019240(v107);
                                        if (!sub_1003BC1F0(v93, 7, out)) {
                                          goto LABEL_147;
                                        }
                                        v94 = (sqlite3_stmt *)sub_100019240(v107);
                                        v95 = (sqlite3_stmt *)sub_100019240(v107);
                                        v96 = (sqlite3_stmt *)sub_100019240(v107);
                                        if (!sub_1003C28BC(v96, 10, *(_DWORD *)(a5 + 104))) {
                                          goto LABEL_147;
                                        }
                                        v97 = (sqlite3_stmt *)sub_100019240(v107);
                                        if (!sub_1003C28BC(v97, 11, *(unsigned __int8 *)(a5 + 108))
                                          || (v98 = (sqlite3_stmt *)sub_100019240(v107),
                                              !sub_1003C28BC(v98, 12, *(unsigned __int8 *)(a5 + 109)))
                                          || (v99 = (sqlite3_stmt *)sub_100019240(v107),
                                              !sub_1003C2AF0(v99, 13, *(_DWORD *)(a5 + 112)))
                                          || (v100 = (sqlite3_stmt *)sub_100019240(v107),
                                              !sub_1003B7480(v100, 14, *(double *)(a5 + 120)))
                                          || (v101 = (sqlite3_stmt *)sub_100019240(v107),
                                              !sub_1003B7480(v101, 15, *(double *)(a5 + 128)))
                                          || (v102 = (sqlite3_stmt *)sub_100019240(v107),
                                              !sub_1003B7480(v102, 16, *(double *)(a5 + 136)))
                                          || (uint64_t v103 = *(void *)(a1 + 80),
                                              v104 = (sqlite3_stmt *)sub_100019240(v107),
                                              !sub_1003BB2BC(v103, v104)))
                                        {
LABEL_147:
                                          if (qword_1019346E0 != -1) {
                                            dispatch_once(&qword_1019346E0, &stru_101892FD8);
                                          }
                                          v105 = (os_log_s *)qword_1019346E8;
                                          if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_FAULT))
                                          {
                                            *(_WORD *)buf = 0;
                                            _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_FAULT,  "Unable to insert synced VO2MaxHistory record",  buf,  2u);
                                          }

                                          if (sub_1002921D0(115, 0))
                                          {
                                            bzero(buf, 0x65CuLL);
                                            if (qword_1019346E0 != -1) {
                                              dispatch_once(&qword_1019346E0, &stru_101892FD8);
                                            }
                                            v108[0] = 0;
                                            __int128 v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  17LL,  "Unable to insert synced VO2MaxHistory record",  v108,  2);
                                            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLVO2MaxSessionAttributesRecorderDb::saveFetchedSession(unsigned char *, const VO2MaxSessionAttributes, const std::vector<VO2MaxSummary> &, con st VO2MaxOutput &) const",  "%s\n",  v43);
                                            goto LABEL_110;
                                          }

                                          goto LABEL_35;
                                        }
                                      }

void sub_100FCF104( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    if (!v15)
    {
LABEL_3:
      if (!v14) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if (!v15)
  {
    goto LABEL_3;
  }

  (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  if (!v14)
  {
LABEL_5:
    if (a12)
    {
      (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
      if (!v13)
      {
LABEL_7:
        if (!v12) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
    }

    else if (!v13)
    {
      goto LABEL_7;
    }

    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    if (!v12) {
LABEL_9:
    }
      _Unwind_Resume(exception_object);
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    goto LABEL_9;
  }

void *sub_100FCF204@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "VO2MaxSessionAttributesHistory");
}

void *sub_100FCF214@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "VO2MaxSessionAttributesHistory");
}

uint64_t sub_100FCF224(uint64_t a1)
{
  uint64_t result = sub_1003C1048(*(void *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_100FCF2A8(a1);
    sub_1003B59A0( *(void *)(a1 + 80),  "VO2MaxSessionAttributesHistory",  (const char **)&off_101892FF8,  (const std::string::value_type **)&off_101992CD8,  0);
    *(void *)(a1 + 384) = sub_1003BF158( *(void *)(a1 + 80),  "SELECT * from VO2MaxSessionAttributesHistory WHERE sessionId = ?");
    *(void *)(a1 + 392) = v3;
    uint64_t result = sub_1003BF158( *(void *)(a1 + 80),  "UPDATE VO2MaxSessionAttributesHistory SET startTime = ?, sessionId = ?, meanMaxMets = ?, prior = ?, hardw areType = ?, betaBlockerUse = ?, algorithmVersion = ?, outputCloudKitSystemFields = ?, inputCloudKitSyste mFields = ? WHERE id = ?");
    *(void *)(a1 + 400) = result;
    *(void *)(a1 + 408) = v4;
    *(_BYTE *)(a1 + 416) = 1;
  }

  return result;
}

void sub_100FCF2A8(uint64_t a1)
{
  if (sub_1003B747C(*(void *)(a1 + 80), "VO2MaxSessionAttributesHistory"))
  {
    uint64_t v2 = 0LL;
    int v3 = 0;
    unint64_t v7 = "startTime";
    do
    {
      __int128 v42 = v7;
      int v43 = 5;
      __int16 v44 = 0;
      char v45 = 0;
      char v46 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "VO2MaxSessionAttributesHistory", v7, (uint64_t)&v42) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v38);
        uint64_t v8 = sub_10000CF44(&v39, (uint64_t)"ALTER TABLE VO2MaxSessionAttributesHistory ADD COLUMN ", 54LL);
        size_t v9 = strlen(v7);
        uint64_t v10 = sub_10000CF44(v8, (uint64_t)v7, v9);
        uint64_t v11 = sub_10000CF44(v10, (uint64_t)" ", 1LL);
        int v12 = (int)(&off_101892FF8)[v2 + 7];
        uint64_t v13 = (const char *)sub_1003BCC40(v12);
        size_t v14 = strlen(v13);
        uint64_t v15 = sub_10000CF44(v11, (uint64_t)v13, v14);
        sub_10000CF44(v15, (uint64_t)";", 1LL);
        uint64_t v16 = *(void *)(a1 + 80);
        std::stringbuf::str(&v35, &v40);
        if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v17 = &v35;
        }
        else {
          unint64_t v17 = (std::stringbuf::string_type *)v35.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v16, (char *)v17, &v33);
        uint64_t v18 = v33.__r_.__value_.__r.__words[0];
        v33.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v19 = *(void *)(a1 + 80);
        unint64_t v20 = (sqlite3_stmt *)sub_100019240(v18);
        sub_1003BB2BC(v19, v20);
        sub_10000CE18((uint64_t)&v35);
        if (v12 == 4)
        {
          __int128 v21 = sub_10000CF44( &v35.__r_.__value_.__l.__cap_,  (uint64_t)"UPDATE VO2MaxSessionAttributesHistory SET ",  42LL);
          size_t v22 = strlen(v7);
          __int128 v23 = sub_10000CF44(v21, (uint64_t)v7, v22);
          __int128 v24 = " = NULL;";
          uint64_t v25 = 8LL;
        }

        else
        {
          __int128 v26 = sub_10000CF44( &v35.__r_.__value_.__l.__cap_,  (uint64_t)"UPDATE VO2MaxSessionAttributesHistory SET ",  42LL);
          size_t v27 = strlen(v7);
          __int128 v23 = sub_10000CF44(v26, (uint64_t)v7, v27);
          __int128 v24 = " = 0;";
          uint64_t v25 = 5LL;
        }

        sub_10000CF44(v23, (uint64_t)v24, v25);
        uint64_t v28 = *(void *)(a1 + 80);
        std::stringbuf::str(&v33, &v36);
        if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v29 = &v33;
        }
        else {
          __int128 v29 = (std::stringbuf::string_type *)v33.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v28, (char *)v29, &v34);
        uint64_t v30 = v34;
        uint64_t v34 = 0LL;
        uint64_t v31 = *(void *)(a1 + 80);
        uint64_t v32 = (sqlite3_stmt *)sub_100019240(v30);
        sub_1003BB2BC(v31, v32);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
        }
        v35.__r_.__value_.__r.__words[0] = v4;
        *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + *(void *)(v4 - 24)) = v6;
        v35.__r_.__value_.__l.__cap_ = v5;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
        v38[0] = v4;
        *(void *)((char *)v38 + *(void *)(v4 - 24)) = v6;
        std::string::size_type v39 = v5;
        std::streambuf::~streambuf(&v40);
        std::ios::~ios(&v41);
        int v3 = 1;
      }

      unint64_t v7 = (&off_101892FF8)[v2 + 12];
      v2 += 6LL;
    }

    while (v2 != 54);
    if (((v3 | sub_100FCFBF8( a1,  "VO2MaxSessionAttributesHistory",  (const char **)&off_101892FF8,  (const std::string::value_type **)&off_101992CD8)) & 1) != 0) {
      sub_1003BF200(*(void *)(a1 + 80), "VO2MaxSessionAttributesHistory");
    }
    sub_100FD10B0(a1);
  }

void sub_100FCF6A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8LL))(v61);
  }
  sub_1011F8850((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_100FCF73C(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM VO2MaxSessionAttributesHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    std::string::size_type v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_100FCF7D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCF7F0(uint64_t a1)
{
  return sub_100FCF73C(a1 - 72);
}

uint64_t sub_100FCF7F8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1LL);
    sub_1003C0D54(a1[10], "DELETE FROM VO2MaxSessionAttributesHistory WHERE startTime > ?", &v11);
    uint64_t v5 = v11;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v11);
    if (sub_1003B7480(v6, 1, *(double *)(a2 + 8)))
    {
      uint64_t v7 = a1[10];
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
      sub_1003BB2BC(v7, v8);
    }

    uint64_t v9 = a1[10];
    else {
      uint64_t v10 = *(void *)(v9 + 88);
    }
    uint64_t result = sub_1003C1EC0(v9, v10);
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100FCF8C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCF8E0(uint64_t a1, double a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "UPDATE VO2MaxSessionAttributesHistory SET startTime = startTime + ?", &v9);
    uint64_t v5 = v9;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v9);
    uint64_t result = sub_1003B7480(v6, 1, a2);
    if ((_DWORD)result)
    {
      uint64_t v7 = *(void *)(a1 + 80);
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003BB2BC(v7, v8);
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100FCF978(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCF998(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO VO2MaxSessionAttributesHistory (startTime, sessionId, meanMaxMets, prior, hardwareType, betaBlockerUse , algorithmVersion, outputCloudKitSystemFields, inputCloudKitSystemFields) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",  v17);
    uint64_t v5 = *(void *)v17;
    uuid_unparse((const unsigned __int8 *)(a2 + 16), v17);
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v5);
    uint64_t result = sub_1003B7480(v6, 1, *(double *)(a2 + 8));
    if ((_DWORD)result)
    {
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003BC1F0(v7, 2, v17);
      if ((_DWORD)result)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
        uint64_t result = sub_1003B7480(v8, 3, *(double *)(a2 + 32));
        if ((_DWORD)result)
        {
          uint64_t v9 = (sqlite3_stmt *)sub_100019240(v5);
          uint64_t result = sub_1003B7480(v9, 4, *(double *)(a2 + 40));
          if ((_DWORD)result)
          {
            uint64_t v10 = (sqlite3_stmt *)sub_100019240(v5);
            uint64_t result = sub_1003C2AF0(v10, 5, *(_DWORD *)(a2 + 48));
            if ((_DWORD)result)
            {
              uint64_t v11 = (sqlite3_stmt *)sub_100019240(v5);
              uint64_t result = sub_1003C28BC(v11, 6, *(unsigned __int8 *)(a2 + 52));
              if ((_DWORD)result)
              {
                int v12 = (sqlite3_stmt *)sub_100019240(v5);
                uint64_t result = sub_1003C28BC(v12, 7, *(_DWORD *)(a2 + 56));
                if ((_DWORD)result)
                {
                  uint64_t v13 = (sqlite3_stmt *)sub_100019240(v5);
                  uint64_t result = sub_1003C2F58(v13, 8, *(void **)(a2 + 64));
                  if ((_DWORD)result)
                  {
                    size_t v14 = (sqlite3_stmt *)sub_100019240(v5);
                    uint64_t result = sub_1003C2F58(v14, 9, *(void **)(a2 + 72));
                    if ((_DWORD)result)
                    {
                      uint64_t v15 = *(void *)(a1 + 80);
                      uint64_t v16 = (sqlite3_stmt *)sub_100019240(v5);
                      uint64_t result = sub_1003BB2BC(v15, v16);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100FCFB28(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100FCFB50()
{
  return 0LL;
}

uint64_t sub_100FCFB58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v7;
  uint64_t v8 = v7;
  uint64_t v5 = sub_100FCD018(&v8, a2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return v5;
}

void sub_100FCFBD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FCFBF8(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101893300);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101893300);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstrain ts(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxSessionAttributes, DataProtecti onPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    uint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    size_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      size_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      uint64_t v16 = v143;
    }
    else {
      uint64_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      __int128 v21 = &__p;
    }
    else {
      __int128 v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    size_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    __int128 v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v27 = &__p;
      }
      else {
        size_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      uint64_t v28 = v143;
    }
    else {
      uint64_t v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    uint64_t v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = &v139;
    }
    else {
      uint64_t v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v41 = &__p;
    }
    else {
      uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    __int128 v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    char v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v47 = &__p;
      }
      else {
        unint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      uint64_t v48 = v143;
    }
    else {
      uint64_t v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    int v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    int v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v54 = buf;
    }
    else {
      uint64_t v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    char v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v60 = buf;
    }
    else {
      uint64_t v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int16 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v69 = &__p;
    }
    else {
      v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    uint64_t v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v75 = &__p;
      }
      else {
        v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      v79 = &__p;
    }
    else {
      v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v85 = &__p;
      }
      else {
        v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      v86 = v143;
    }
    else {
      v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v95 = &__p;
    }
    else {
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v103 = &__p;
        }
        else {
          uint64_t v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        v104 = v141;
      }
      else {
        v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      uint64_t v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v114 = buf;
      }
      else {
        v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v121 = &__p;
      }
      else {
        v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101893300);
      }
      v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101893300);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstra ints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxSessionAttributes, DataProt ectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101893300);
      }
      v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101893300);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstra ints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxSessionAttributes, DataProt ectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100FD0D90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void sub_100FD10B0(uint64_t a1)
{
  sub_1003C0D54( *(void *)(a1 + 80),  "SELECT COUNT(name) FROM sqlite_master WHERE type='index' AND name = 'VO2MaxSessionAttributesHistorySessionIdIndex'",  buf);
  uint64_t v2 = *(void *)buf;
  uint64_t v3 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sqlite3_step(v3) == 100)
  {
    uint64_t v4 = (sqlite3_stmt *)sub_100019240(v2);
    if (sqlite3_column_int(v4, 0) >= 1)
    {
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101892FD8);
      }
      uint64_t v5 = (os_log_s *)qword_1019346E8;
      if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Index VO2MaxSessionAttributesHistorySessionIdIndex already exists; not re-creating",
          buf,
          2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346E0 != -1) {
          dispatch_once(&qword_1019346E0, &stru_101892FD8);
        }
        v16[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "Index VO2MaxSessionAttributesHistorySessionIdIndex already exists; not re-creating",
          v16,
          2);
        uint64_t v7 = (uint8_t *)v6;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxSessionAttributesRecorderDb::createIndexOnSessionIdIfNecessary()",  "%s\n",  v6);
        if (v7 != buf) {
          free(v7);
        }
      }

      goto LABEL_28;
    }
  }

  sub_1003C0D54( *(void *)(a1 + 80),  "CREATE INDEX VO2MaxSessionAttributesHistorySessionIdIndex ON VO2MaxSessionAttributesHistory (sessionId)",  buf);
  uint64_t v8 = *(void *)buf;
  uint64_t v9 = *(void *)(a1 + 80);
  __int128 v10 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sub_1003BB2BC(v9, v10))
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101892FD8);
    }
    uint64_t v11 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Index VO2MaxSessionAttributesHistorySessionIdIndex created successfully",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101892FD8);
    }
    v16[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Index VO2MaxSessionAttributesHistorySessionIdIndex created successfully",  v16,  2);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxSessionAttributesRecorderDb::createIndexOnSessionIdIfNecessary()",  "%s\n",  v12);
  }

  else
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101892FD8);
    }
    size_t v14 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Unable to create index VO2MaxSessionAttributesHistorySessionIdIndex",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101892FD8);
    }
    v16[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  16LL,  "Unable to create index VO2MaxSessionAttributesHistorySessionIdIndex",  v16,  2);
    uint64_t v13 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLVO2MaxSessionAttributesRecorderDb::createIndexOnSessionIdIfNecessary()",  "%s\n",  v15);
  }

  if (v13 != buf) {
    free(v13);
  }
LABEL_26:
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
LABEL_28:
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
}

void sub_100FD1524(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100FD1578(uint64_t a1)
{
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "UPDATE VO2MaxSessionAttributesHistory AS sa SET outputCloudKitSystemFields = NULL WHERE sa.sessionId IN (SELECT DI STINCT sh.sessionId FROM VO2MaxStagingSummaryHistory AS sh)",  buf);
    uint64_t v2 = *(void *)buf;
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    BOOL v5 = sub_1003BB2BC(v3, v4);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  else
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101892FD8);
    }
    uint64_t v6 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "VO2MaxSessionAttributesHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101892FD8);
      }
      v9[0] = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "VO2MaxSessionAttributesHistory, DB not accessible",  v9,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLVO2MaxSessionAttributesRecorderDb::updateSessionsNeedingCloudKitSyncForOutputs() const",  "%s\n",  v8);
    }

    return 0LL;
  }

  return v5;
}

void sub_100FD1760(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100FD1788(void *a1, void **a2, double a3, double a4)
{
  uint64_t v8 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v45);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if (HIBYTE(v46)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_10127DDF4(v8);
    __break(1u);
  }

  unsigned __int8 v40 = v45[1];
  operator delete(v45[0]);
  if (!v40) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v45);
  uint64_t v9 = sub_10000CF44(&v46, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 64LL))(v49, a1);
  if (v49[23] >= 0) {
    __int128 v10 = v49;
  }
  else {
    __int128 v10 = *(_BYTE **)v49;
  }
  if (v49[23] >= 0) {
    uint64_t v11 = v49[23];
  }
  else {
    uint64_t v11 = *(void *)&v49[8];
  }
  __int128 v12 = sub_10000CF44(v9, (uint64_t)v10, v11);
  sub_10000CF44(v12, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if ((v49[23] & 0x80000000) != 0) {
    operator delete(*(void **)v49);
  }
  uint64_t v13 = a1[10];
  std::stringbuf::str((std::stringbuf::string_type *)v49, &v47);
  if (v49[23] >= 0) {
    size_t v14 = v49;
  }
  else {
    size_t v14 = *(char **)v49;
  }
  sub_1003C0D54(v13, v14, &v43);
  uint64_t v15 = v43;
  uint64_t v43 = 0LL;
  uint64_t v44 = v15;
  if ((v49[23] & 0x80000000) != 0) {
    operator delete(*(void **)v49);
  }
  uint64_t v16 = (sqlite3_stmt *)sub_100019240(v15);
  if (sub_1003B7480(v16, 1, a3) && (std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v15), sub_1003B7480(v17, 2, a4)))
  {
    __int128 v52 = 0uLL;
    while (1)
    {
      uint64_t v18 = sub_1001BA11C((uint64_t)a1, &v44, (uint64_t)v49);
      if ((_DWORD)v18) {
        break;
      }
      std::string::size_type v19 = a2[1];
      unint64_t v20 = (unint64_t)a2[2];
      if ((unint64_t)v19 >= v20)
      {
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v19 - (_BYTE *)*a2) >> 4);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x333333333333333LL) {
          sub_100007008();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - (void)*a2) >> 4);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x199999999999999LL) {
          unint64_t v28 = 0x333333333333333LL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          std::string::size_type v29 = (char *)sub_10003E20C((uint64_t)(a2 + 2), v28);
        }
        else {
          std::string::size_type v29 = 0LL;
        }
        uint64_t v30 = &v29[80 * v25];
        *(_OWORD *)uint64_t v30 = *(_OWORD *)v49;
        __int128 v31 = *(_OWORD *)&v49[16];
        __int128 v32 = v50;
        __int128 v33 = v52;
        *((_OWORD *)v30 + 3) = v51;
        *((_OWORD *)v30 + 4) = v33;
        *((_OWORD *)v30 + 1) = v31;
        *((_OWORD *)v30 + 2) = v32;
        std::string::size_type v35 = (char *)*a2;
        uint64_t v34 = (char *)a2[1];
        std::stringbuf v36 = v30;
        if (v34 != *a2)
        {
          do
          {
            *((_OWORD *)v36 - 5) = *((_OWORD *)v34 - 5);
            __int128 v37 = *((_OWORD *)v34 - 4);
            __int128 v38 = *((_OWORD *)v34 - 3);
            __int128 v39 = *((_OWORD *)v34 - 1);
            *((_OWORD *)v36 - 2) = *((_OWORD *)v34 - 2);
            *((_OWORD *)v36 - 1) = v39;
            *((_OWORD *)v36 - 4) = v37;
            *((_OWORD *)v36 - 3) = v38;
            v36 -= 80;
            v34 -= 80;
          }

          while (v34 != v35);
          uint64_t v34 = (char *)*a2;
        }

        std::string::size_type v24 = v30 + 80;
        *a2 = v36;
        a2[1] = v30 + 80;
        a2[2] = &v29[80 * v28];
        if (v34) {
          operator delete(v34);
        }
      }

      else
      {
        *std::string::size_type v19 = *(_OWORD *)v49;
        __int128 v21 = *(_OWORD *)&v49[16];
        __int128 v22 = v50;
        __int128 v23 = v52;
        v19[3] = v51;
        v19[4] = v23;
        v19[1] = v21;
        v19[2] = v22;
        std::string::size_type v24 = v19 + 5;
      }

      a2[1] = v24;
    }

    uint64_t v15 = v44;
  }

  else
  {
    uint64_t v18 = 2LL;
  }

  uint64_t v44 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  *(void **)((char *)v45
  uint64_t v46 = v41;
  std::streambuf::~streambuf(&v47);
  std::ios::~ios(&v48);
  return v18;
}

void sub_100FD1B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100FD1B88(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101893300);
    }
    BOOL v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101893300);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)buf = 134349056;
        *(void *)uint64_t v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101893300);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::setDatab aseAccessible() [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101893300);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    uint64_t v16 = (void *)(v14 + 8 * (v13 / 0x33));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 80 * (v13 % 0x33);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x33)) + 80 * (v22 % 0x33);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101893320);
      }
      std::string::size_type v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101893320);
        }
        LOWORD(v41) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::setDatab aseAccessible() [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 80LL;
      if (v17 - *v16 == 4080)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101893300);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      std::string::size_type v19 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101893300);
      }
    }

    unint64_t v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      __int128 v21 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  unint64_t v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      unint64_t v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 25LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 51LL;
  }

  *(void *)(a1 + 208) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100FD22BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_100FD22F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 16);
  __int128 v4 = *(_OWORD *)(a3 + 32);
  __int128 v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

id *sub_100FD230C(uint64_t a1, uint64_t a2, char a3)
{
  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v34);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  uint64_t v45 = 0LL;
  uint64_t v46 = 0LL;
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104LL))(a1, v43);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101893300);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101893300);
        }
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v35,  2);
        uint64_t v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitize AndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *(double *)(a2 + 8);
    double v8 = v44;
    double v9 = v7 - v44;
    if (v7 - v44 < 0.0) {
      double v9 = -(v7 - v44);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101893300);
      }
      __int128 v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        double v40 = v44;
        __int16 v41 = 2050;
        uint64_t v42 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101893300);
        }
        uint64_t v25 = *(void *)(a2 + 8);
        int v35 = 134349312;
        double v36 = v44;
        __int16 v37 = 2050;
        uint64_t v38 = v25;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v35,  22);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitize AndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *(double *)(a2 + 8);
      double v8 = v44;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101893300);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          double v40 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101893300);
          }
          double v28 = *(double *)(a2 + 8);
          int v35 = 134217984;
          double v36 = v28;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v35));
          unint64_t v30 = (uint8_t *)v29;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::saniti zeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::Class BDataProtectionPolicy]",  "%s\n",  v29);
          if (v30 != buf) {
            free(v30);
          }
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_101893300);
        double v18 = v33;
      }

      double v19 = v17 - v18;
      unint64_t v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v40 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101893300);
        }
        int v35 = 134217984;
        double v36 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v35));
        uint64_t v32 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitize AndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v31);
        if (v32 != buf) {
          free(v32);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 144LL))(a1, v43, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100FD2A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100FD2A88(uint64_t a1)
{
  return sub_100FD1B88(a1 - 72);
}

void sub_100FD2A90(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100FD2ABC(id a1)
{
  qword_1019346E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_100FD2AE8(uint64_t *a1, char **a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v39);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    if (HIBYTE(v40)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10127DF60(v4);
    __break(1u);
  }

  double v36 = v39[1];
  operator delete(v39[0]);
  if (!v36) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v39);
    int v6 = sub_10000CF44(&v40, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 64))(v43, a1);
    if (v43[23] >= 0) {
      double v7 = v43;
    }
    else {
      double v7 = *(_BYTE **)v43;
    }
    if (v43[23] >= 0) {
      uint64_t v8 = v43[23];
    }
    else {
      uint64_t v8 = *(void *)&v43[8];
    }
    double v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((v43[23] & 0x80000000) != 0) {
      operator delete(*(void **)v43);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)v43, &v41);
    if (v43[23] >= 0) {
      uint64_t v11 = v43;
    }
    else {
      uint64_t v11 = *(char **)v43;
    }
    sub_1003C0D54(v10, v11, &v37);
    uint64_t v12 = v37;
    uint64_t v37 = 0LL;
    uint64_t v38 = v12;
    if ((v43[23] & 0x80000000) != 0) {
      operator delete(*(void **)v43);
    }
    sub_1003C0454(a1[10]);
    __int128 v46 = 0uLL;
    while (!sub_1001BA11C((uint64_t)a1, &v38, (uint64_t)v43))
    {
      double v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a2) >> 4);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0x333333333333333LL) {
          sub_100007008();
        }
        unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)*a2) >> 4);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x199999999999999LL) {
          unint64_t v22 = 0x333333333333333LL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          __int128 v23 = (char *)sub_10003E20C((uint64_t)(a2 + 2), v22);
        }
        else {
          __int128 v23 = 0LL;
        }
        std::string::size_type v24 = &v23[80 * v19];
        *(_OWORD *)std::string::size_type v24 = *(_OWORD *)v43;
        __int128 v25 = *(_OWORD *)&v43[16];
        __int128 v26 = v44;
        __int128 v27 = v46;
        *((_OWORD *)v24 + 3) = v45;
        *((_OWORD *)v24 + 4) = v27;
        *((_OWORD *)v24 + 1) = v25;
        *((_OWORD *)v24 + 2) = v26;
        uint64_t v29 = *a2;
        double v28 = a2[1];
        unint64_t v30 = v24;
        if (v28 != *a2)
        {
          do
          {
            *((_OWORD *)v30 - 5) = *((_OWORD *)v28 - 5);
            __int128 v31 = *((_OWORD *)v28 - 4);
            __int128 v32 = *((_OWORD *)v28 - 3);
            __int128 v33 = *((_OWORD *)v28 - 1);
            *((_OWORD *)v30 - 2) = *((_OWORD *)v28 - 2);
            *((_OWORD *)v30 - 1) = v33;
            *((_OWORD *)v30 - 4) = v31;
            *((_OWORD *)v30 - 3) = v32;
            v30 -= 80;
            v28 -= 80;
          }

          while (v28 != v29);
          double v28 = *a2;
        }

        double v18 = v24 + 80;
        *a2 = v30;
        a2[1] = v24 + 80;
        a2[2] = &v23[80 * v22];
        if (v28) {
          operator delete(v28);
        }
      }

      else
      {
        *(_OWORD *)double v13 = *(_OWORD *)v43;
        __int128 v15 = *(_OWORD *)&v43[16];
        __int128 v16 = v44;
        __int128 v17 = v46;
        *((_OWORD *)v13 + 3) = v45;
        *((_OWORD *)v13 + 4) = v17;
        *((_OWORD *)v13 + 1) = v15;
        *((_OWORD *)v13 + 2) = v16;
        double v18 = v13 + 80;
      }

      a2[1] = v18;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v34 = v38;
    uint64_t v38 = 0LL;
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
    }
    *(void **)((char *)v39
    uint64_t v40 = v35;
    std::streambuf::~streambuf(&v41);
    return std::ios::~ios(&v42);
  }

  return result;
}

void sub_100FD2E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_1011F8850((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FD2EA0(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_10127E0CC(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  unint64_t v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100FD3100(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10127E238(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100FD3338(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10127E3A4(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  __int128 v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100FD3560(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100FD358C(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100FD35B8(uint64_t a1, uint64_t *a2, int a3, double *a4)
{
  if ((unint64_t)*a2 < 0x2E)
  {
    switch(a3)
    {
      case 1:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BCA18;
        break;
      case 3:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BCCF8;
        break;
      case 4:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BCE68;
        break;
      case 6:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BCFD8;
        break;
      default:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BCB88;
        break;
    }

    double v8 = v10[*a2];
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893340);
    }
    int v6 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *a2;
      *(_DWORD *)buf = 134217984;
      uint64_t v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,lookupCn0ProbabilityGivenOutdoor(),index out of bound,%lu",  buf,  0xCu);
    }

    double v8 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893340);
      }
      uint64_t v11 = *a2;
      int v14 = 134217984;
      uint64_t v15 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,lookupCn0ProbabilityGivenOutdoor(),index out of bound,%lu",  &v14);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimatorLookupTables::lookupCn0ProbabilityGivenOutdoor(const std::size_t &, const CLSignalEnvi ronmentProvider_Type::SignalEnvironmentType, double &) const",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    uint64_t result = 0xFFFFFFFFLL;
  }

  *a4 = v8;
  return result;
}

uint64_t sub_100FD381C(uint64_t a1, uint64_t *a2, double *a3)
{
  if ((unint64_t)*a2 < 0x2E)
  {
    uint64_t result = 0LL;
    double v7 = dbl_1013BD148[*a2];
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893340);
    }
    __int128 v5 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *a2;
      *(_DWORD *)buf = 134217984;
      uint64_t v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,lookupCn0ProbabilityGivenIndoor(),index out of bound,%lu",  buf,  0xCu);
    }

    double v7 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893340);
      }
      uint64_t v9 = *a2;
      int v12 = 134217984;
      uint64_t v13 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,lookupCn0ProbabilityGivenIndoor(),index out of bound,%lu",  &v12);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimatorLookupTables::lookupCn0ProbabilityGivenIndoor(const std::size_t &, double &) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    uint64_t result = 0xFFFFFFFFLL;
  }

  *a3 = v7;
  return result;
}

uint64_t sub_100FD3A04(uint64_t a1, uint64_t *a2, int a3, double *a4)
{
  if ((unint64_t)*a2 < 0x47)
  {
    switch(a3)
    {
      case 1:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BD2B8;
        break;
      case 3:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BD728;
        break;
      case 4:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BD960;
        break;
      case 6:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BDB98;
        break;
      default:
        uint64_t result = 0LL;
        uint64_t v10 = (double *)&unk_1013BD4F0;
        break;
    }

    double v8 = v10[*a2];
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893340);
    }
    uint64_t v6 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *a2;
      *(_DWORD *)buf = 134217984;
      uint64_t v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,lookupNumSatsProbabilityGivenOutdoor(),index out of bound,%lu",  buf,  0xCu);
    }

    double v8 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893340);
      }
      uint64_t v11 = *a2;
      int v14 = 134217984;
      uint64_t v15 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,lookupNumSatsProbabilityGivenOutdoor(),index out of bound,%lu",  &v14);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimatorLookupTables::lookupNumSatsProbabilityGivenOutdoor(const std::size_t &, const CLSignal EnvironmentProvider_Type::SignalEnvironmentType, double &) const",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    uint64_t result = 0xFFFFFFFFLL;
  }

  *a4 = v8;
  return result;
}

uint64_t sub_100FD3C68(uint64_t a1, uint64_t *a2, double *a3)
{
  if ((unint64_t)*a2 < 0x47)
  {
    uint64_t result = 0LL;
    double v7 = dbl_1013BDDD0[*a2];
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893340);
    }
    __int128 v5 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *a2;
      *(_DWORD *)buf = 134217984;
      uint64_t v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,lookupNumSatsProbabilityGivenIndoor(),index out of bound,%lu",  buf,  0xCu);
    }

    double v7 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893340);
      }
      uint64_t v9 = *a2;
      int v12 = 134217984;
      uint64_t v13 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,lookupNumSatsProbabilityGivenIndoor(),index out of bound,%lu",  &v12);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimatorLookupTables::lookupNumSatsProbabilityGivenIndoor(const std::size_t &, double &) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    uint64_t result = 0xFFFFFFFFLL;
  }

  *a3 = v7;
  return result;
}

uint64_t sub_100FD3E50(uint64_t a1, unsigned int a2, double *a3)
{
  uint64_t v4 = a2;
  if (a2 < 4)
  {
    uint64_t result = 0LL;
    double v6 = dbl_1013BE008[a2];
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893340);
    }
    __int128 v5 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenOutdoor(),index out of bound,%lu",  buf,  0xCu);
    }

    double v6 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893340);
      }
      int v10 = 134217984;
      uint64_t v11 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenOutdoor(),index out of bound,%lu",  &v10);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimatorLookupTables::lookupGnssAvailabilityStateProbabilityGivenOutdoor(const CLGnssAvailabil ityPredictor::PredictionType, double &) const",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    uint64_t result = 0xFFFFFFFFLL;
  }

  *a3 = v6;
  return result;
}

uint64_t sub_100FD402C(uint64_t a1, unsigned int a2, double *a3)
{
  uint64_t v4 = a2;
  if (a2 < 4)
  {
    uint64_t result = 0LL;
    double v6 = dbl_1013BE020[a2];
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893340);
    }
    __int128 v5 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenIndoor(),index out of bound,%lu",  buf,  0xCu);
    }

    double v6 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893340);
      }
      int v10 = 134217984;
      uint64_t v11 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenIndoor(),index out of bound,%lu",  &v10);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimatorLookupTables::lookupGnssAvailabilityStateProbabilityGivenIndoor(const CLGnssAvailabili tyPredictor::PredictionType, double &) const",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    uint64_t result = 0xFFFFFFFFLL;
  }

  *a3 = v6;
  return result;
}

uint64_t sub_100FD4208(uint64_t a1, int a2, unsigned int a3, double *a4)
{
  uint64_t v5 = a3;
  if (a3 < 8)
  {
    int v9 = sub_100FD4400(a1, a2);
    uint64_t result = 0LL;
    double v7 = dbl_1013BE038[v9] * dbl_1013BE068[2 * v5 + 1];
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893340);
    }
    double v6 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,lookupActivityStateProbabilityGivenOutdoor(),latent probability index out of bound,%lu",  buf,  0xCu);
    }

    double v7 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893340);
      }
      int v12 = 134217984;
      uint64_t v13 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,lookupActivityStateProbabilityGivenOutdoor(),latent probability index out of bound,%lu",  &v12);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimatorLookupTables::lookupActivityStateProbabilityGivenOutdoor(const CMMotionContext::Motion Type, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double &) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    uint64_t result = 0xFFFFFFFFLL;
  }

  *a4 = v7;
  return result;
}

uint64_t sub_100FD4400(uint64_t a1, int a2)
{
  if (a2 <= 127)
  {
    if (a2 > 31)
    {
      if (a2 != 32)
      {
        if (a2 == 64) {
          return 3LL;
        }
        return 0LL;
      }
    }

    else
    {
      if (a2 == 4) {
        return 1LL;
      }
      if (a2 != 16) {
        return 0LL;
      }
    }

    return 2LL;
  }

  if (a2 >= 0x2000)
  {
    if (a2 != 0x2000 && a2 != 12288 && a2 != 0x4000) {
      return 0LL;
    }
    return 5LL;
  }

  if (a2 == 128) {
    return 4LL;
  }
  if (a2 == 4096) {
    return 5LL;
  }
  return 0LL;
}

uint64_t sub_100FD4494(uint64_t a1, int a2, unsigned int a3, double *a4)
{
  uint64_t v5 = a3;
  if (a3 < 8)
  {
    int v9 = sub_100FD4400(a1, a2);
    uint64_t result = 0LL;
    double v7 = dbl_1013BE0D8[v9] * dbl_1013BE068[2 * v5 + 1];
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893340);
    }
    double v6 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,lookupActivityStateProbabilityGivenIndoor(),latent probability index out of bound,%lu",  buf,  0xCu);
    }

    double v7 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893340);
      }
      int v12 = 134217984;
      uint64_t v13 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,lookupActivityStateProbabilityGivenIndoor(),latent probability index out of bound,%lu",  &v12);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimatorLookupTables::lookupActivityStateProbabilityGivenIndoor(const CMMotionContext::MotionT ype, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double &) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    uint64_t result = 0xFFFFFFFFLL;
  }

  *a4 = v7;
  return result;
}

uint64_t sub_100FD468C(uint64_t a1, double *a2, double *a3, void *a4)
{
  double v5 = *a3;
  if (*a3 <= 0.0 || v5 > 5.0)
  {
    if (v5 <= 5.0 || v5 > 10.0)
    {
      if (v5 <= 10.0 || v5 > 15.0)
      {
        if (v5 <= 15.0 || v5 > 30.0)
        {
          if (v5 <= 30.0 || v5 > 45.0)
          {
            BOOL v11 = v5 > 90.0 || v5 <= 45.0;
            uint64_t v10 = 5LL;
            if (v11) {
              uint64_t v10 = -1LL;
            }
          }

          else
          {
            uint64_t v10 = 4LL;
          }
        }

        else
        {
          uint64_t v10 = 3LL;
        }
      }

      else
      {
        uint64_t v10 = 2LL;
      }
    }

    else
    {
      uint64_t v10 = 1LL;
    }
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  sub_100FD476C( a1,  a2,  &dbl_1013BE108[4 * v10],  &dbl_1013BE108[4 * v10 + 1],  &dbl_1013BE108[4 * v10 + 2],  &dbl_1013BE108[4 * v10 + 3]);
  *a4 = v12;
  return 0LL;
}

void sub_100FD476C(uint64_t a1, double *a2, double *a3, double *a4, void *a5, double *a6)
{
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v6 = *a4;
    if ((*(void *)a4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)a6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *a6 > 0.0
      && v6 != 0.0)
    {
      exp(-(*a2 - *a3) / v6);
    }
  }

uint64_t sub_100FD4844(uint64_t a1, double *a2, void *a3)
{
  *a3 = v4;
  return 0LL;
}

void sub_100FD488C(id a1)
{
  qword_101934948 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void *sub_100FD48B8()
{
  uint64_t result = (void *)sub_100231608();
  if ((_DWORD)result)
  {
    uint64_t v1 = operator new(0x110uLL);
    sub_100FD4974((uint64_t)v1);
    qword_1019A4100 = (uint64_t)v1;
    uint64_t v2 = sub_1002E6920();
    return sub_1002E912C(v2, (uint64_t (*)(void, uint64_t))sub_100FD4920, qword_1019A4100);
  }

  return result;
}

void sub_100FD490C(_Unwind_Exception *a1)
{
}

void sub_100FD4920(int a1, uint64_t a2)
{
}

uint64_t sub_100FD4930()
{
  if (qword_10199FC30 != -1) {
    dispatch_once(&qword_10199FC30, &stru_101893360);
  }
  return qword_1019A4100;
}

uint64_t sub_100FD4974(uint64_t a1)
{
  *(void *)uint64_t v2 = &off_101893390;
  *(void *)(v2 + 104) = 0LL;
  *(void *)(v2 + 112) = 0x3F80000000000000LL;
  *(_WORD *)(v2 + 156) = 0;
  *(_DWORD *)(v2 + 248) = 0;
  *(void *)(v2 + 256) = 0LL;
  *(void *)(v2 + 264) = 0x100000002LL;
  sub_1002F0B04(&v9);
  char v3 = sub_1002A6FD4(v9, (uint64_t)@"MotionLoggerAccessoryDeviceMotionActiveMode", &v11);
  if (v11) {
    char v4 = v3;
  }
  else {
    char v4 = 0;
  }
  *(_BYTE *)(a1 + 29) = v4;
  double v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return a1;
}

void sub_100FD4A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100FD4A70(void *a1)
{
  uint64_t v1 = sub_100E61F94(a1);
  operator delete(v1);
}

__n128 sub_100FD4A84@<Q0>(int a1@<W1>, int a2@<W2>, __int128 *a3@<X8>)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)qword_10199FC50);
  if ((v3 & 1) == 0)
  {
    uint64_t v17 = a3;
    int v39 = a1;
    int v50 = a2;
    int v18 = __cxa_guard_acquire(qword_10199FC50);
    a1 = v39;
    a2 = v50;
    a3 = v17;
    if (v18)
    {
      xmmword_10199FC40 = xmmword_1013BE200;
      sub_100833700((float32x4_t *)&xmmword_10199FC40, (float32x4_t)xmmword_1013BE200);
      __cxa_guard_release(qword_10199FC50);
      a3 = v17;
      a1 = v39;
      a2 = v50;
    }
  }

  unsigned __int8 v4 = atomic_load((unsigned __int8 *)qword_10199FC70);
  if ((v4 & 1) == 0)
  {
    uint64_t v19 = a3;
    int v40 = a1;
    int v51 = a2;
    int v20 = __cxa_guard_acquire(qword_10199FC70);
    a1 = v40;
    a2 = v51;
    a3 = v19;
    if (v20)
    {
      xmmword_10199FC60 = xmmword_1013BE210;
      sub_100833700((float32x4_t *)&xmmword_10199FC60, (float32x4_t)xmmword_1013BE210);
      __cxa_guard_release(qword_10199FC70);
      a3 = v19;
      a1 = v40;
      a2 = v51;
    }
  }

  unsigned __int8 v5 = atomic_load((unsigned __int8 *)qword_10199FC90);
  if ((v5 & 1) == 0)
  {
    uint64_t v21 = a3;
    int v41 = a1;
    int v52 = a2;
    int v22 = __cxa_guard_acquire(qword_10199FC90);
    a1 = v41;
    a2 = v52;
    a3 = v21;
    if (v22)
    {
      xmmword_10199FC80 = xmmword_1013BE220;
      sub_100833700((float32x4_t *)&xmmword_10199FC80, (float32x4_t)xmmword_1013BE220);
      __cxa_guard_release(qword_10199FC90);
      a3 = v21;
      a1 = v41;
      a2 = v52;
    }
  }

  unsigned __int8 v6 = atomic_load((unsigned __int8 *)qword_10199FCB0);
  if ((v6 & 1) == 0)
  {
    uint64_t v23 = a3;
    int v42 = a1;
    int v53 = a2;
    int v24 = __cxa_guard_acquire(qword_10199FCB0);
    a1 = v42;
    a2 = v53;
    a3 = v23;
    if (v24)
    {
      xmmword_10199FCA0 = xmmword_1013BE230;
      sub_100833700((float32x4_t *)&xmmword_10199FCA0, (float32x4_t)xmmword_1013BE230);
      __cxa_guard_release(qword_10199FCB0);
      a3 = v23;
      a1 = v42;
      a2 = v53;
    }
  }

  unsigned __int8 v7 = atomic_load((unsigned __int8 *)qword_10199FCD0);
  if ((v7 & 1) == 0)
  {
    uint64_t v25 = a3;
    int v43 = a1;
    int v54 = a2;
    int v26 = __cxa_guard_acquire(qword_10199FCD0);
    a1 = v43;
    a2 = v54;
    a3 = v25;
    if (v26)
    {
      xmmword_10199FCC0 = xmmword_1013BE240;
      sub_100833700((float32x4_t *)&xmmword_10199FCC0, (float32x4_t)xmmword_1013BE240);
      __cxa_guard_release(qword_10199FCD0);
      a3 = v25;
      a1 = v43;
      a2 = v54;
    }
  }

  unsigned __int8 v8 = atomic_load((unsigned __int8 *)qword_10199FCF0);
  if ((v8 & 1) == 0)
  {
    __int128 v27 = a3;
    int v44 = a1;
    int v55 = a2;
    int v28 = __cxa_guard_acquire(qword_10199FCF0);
    a1 = v44;
    a2 = v55;
    a3 = v27;
    if (v28)
    {
      xmmword_10199FCE0 = xmmword_1013BE250;
      sub_100833700((float32x4_t *)&xmmword_10199FCE0, (float32x4_t)xmmword_1013BE250);
      __cxa_guard_release(qword_10199FCF0);
      a3 = v27;
      a1 = v44;
      a2 = v55;
    }
  }

  unsigned __int8 v9 = atomic_load((unsigned __int8 *)qword_10199FD10);
  if ((v9 & 1) == 0)
  {
    uint64_t v29 = a3;
    int v45 = a1;
    int v56 = a2;
    int v30 = __cxa_guard_acquire(qword_10199FD10);
    a1 = v45;
    a2 = v56;
    a3 = v29;
    if (v30)
    {
      xmmword_10199FD00 = xmmword_1013BE260;
      sub_100833700((float32x4_t *)&xmmword_10199FD00, (float32x4_t)xmmword_1013BE260);
      __cxa_guard_release(qword_10199FD10);
      a3 = v29;
      a1 = v45;
      a2 = v56;
    }
  }

  unsigned __int8 v10 = atomic_load((unsigned __int8 *)qword_10199FD30);
  if ((v10 & 1) == 0)
  {
    __int128 v31 = a3;
    int v46 = a1;
    int v57 = a2;
    int v32 = __cxa_guard_acquire(qword_10199FD30);
    a1 = v46;
    a2 = v57;
    a3 = v31;
    if (v32)
    {
      xmmword_10199FD20 = xmmword_1013BE270;
      sub_100833700((float32x4_t *)&xmmword_10199FD20, (float32x4_t)xmmword_1013BE270);
      __cxa_guard_release(qword_10199FD30);
      a3 = v31;
      a1 = v46;
      a2 = v57;
    }
  }

  unsigned __int8 v11 = atomic_load((unsigned __int8 *)qword_10199FD50);
  if ((v11 & 1) == 0)
  {
    __int128 v33 = a3;
    int v47 = a1;
    int v58 = a2;
    int v34 = __cxa_guard_acquire(qword_10199FD50);
    a1 = v47;
    a2 = v58;
    a3 = v33;
    if (v34)
    {
      xmmword_10199FD40 = xmmword_1013BE210;
      sub_100833700((float32x4_t *)&xmmword_10199FD40, (float32x4_t)xmmword_1013BE210);
      __cxa_guard_release(qword_10199FD50);
      a3 = v33;
      a1 = v47;
      a2 = v58;
    }
  }

  unsigned __int8 v12 = atomic_load((unsigned __int8 *)qword_10199FD70);
  if ((v12 & 1) == 0)
  {
    uint64_t v35 = a3;
    int v48 = a1;
    int v59 = a2;
    int v36 = __cxa_guard_acquire(qword_10199FD70);
    a1 = v48;
    a2 = v59;
    a3 = v35;
    if (v36)
    {
      xmmword_10199FD60 = xmmword_1013BE220;
      sub_100833700((float32x4_t *)&xmmword_10199FD60, (float32x4_t)xmmword_1013BE220);
      __cxa_guard_release(qword_10199FD70);
      a3 = v35;
      a1 = v48;
      a2 = v59;
    }
  }

  unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_10199FD90);
  if ((v13 & 1) == 0)
  {
    uint64_t v37 = a3;
    int v49 = a1;
    int v60 = a2;
    int v38 = __cxa_guard_acquire(&qword_10199FD90);
    a1 = v49;
    a2 = v60;
    a3 = v37;
    if (v38)
    {
      xmmword_10199FD80 = xmmword_1013BE280;
      sub_100833700((float32x4_t *)&xmmword_10199FD80, (float32x4_t)xmmword_1013BE280);
      __cxa_guard_release(&qword_10199FD90);
      a3 = v37;
      a1 = v49;
      a2 = v60;
    }
  }

  switch(a1)
  {
    case 1:
      int v14 = &xmmword_10199FC80;
      uint64_t v15 = &xmmword_10199FC60;
      goto LABEL_17;
    case 2:
      int v14 = &xmmword_10199FCA0;
      break;
    case 3:
      int v14 = &xmmword_10199FCE0;
      uint64_t v15 = &xmmword_10199FCC0;
      goto LABEL_17;
    case 4:
      int v14 = &xmmword_10199FD20;
      uint64_t v15 = &xmmword_10199FD00;
      goto LABEL_17;
    case 5:
      int v14 = &xmmword_10199FD60;
      uint64_t v15 = &xmmword_10199FD40;
LABEL_17:
      if (a2 == 2) {
        int v14 = v15;
      }
      break;
    case 6:
      int v14 = &xmmword_10199FD80;
      break;
    default:
      int v14 = &xmmword_10199FC40;
      break;
  }

  __n128 result = (__n128)*v14;
  *a3 = *v14;
  return result;
}

void sub_100FD4F68(_Unwind_Exception *a1)
{
}

double sub_100FD5020(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    unsigned __int8 v4 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v32) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "[AccessoryDeviceMotion] Unrecognized interval notification %{public}d",  buf,  8u);
    }

    double v5 = 0.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      *(_DWORD *)int v30 = 67240192;
      *(_DWORD *)&v30[4] = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "[AccessoryDeviceMotion] Unrecognized interval notification %{public}d",  v30,  8);
      unsigned __int8 v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    return v5;
  }

  sub_100E62108(a1);
  double v10 = *a3;
  *(double *)(a1 + 256) = *a3;
  if (v10 <= 0.00001)
  {
    if (*(_BYTE *)(a1 + 29)) {
      (*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  @"MaxFIFOEvents",  &off_1018D5120);
    }
    sub_100E62600(a1);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    unsigned __int8 v12 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] Low latency mode and time sync reset",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_37;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    *(_WORD *)int v30 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryDeviceMotion] Low latency mode and time sync reset",  v30,  2,  *(_OWORD *)v30,  *(void *)&v30[16]);
    goto LABEL_61;
  }

  *(_BYTE *)(a1 + 30) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 160) = 0LL;
  *(_DWORD *)(a1 + 212) = 0;
  if (!*(_BYTE *)(a1 + 28))
  {
    if (*(_BYTE *)(a1 + 29)) {
      (*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  @"MaxFIFOEvents",  &off_1018D5120);
    }
    goto LABEL_28;
  }

  if (!*(_BYTE *)(a1 + 29)
    || ((*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  @"MaxFIFOEvents",  &off_1018D5108),  *(double *)(a1 + 256) > 0.0200100001))
  {
LABEL_28:
    sub_100E625D4(a1, 0);
    int v11 = 1;
    goto LABEL_29;
  }

  sub_100E625D4(a1, 1);
  int v11 = 2;
LABEL_29:
  *(_DWORD *)(a1 + 248) = v11;
  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_1018933E8);
  }
  int v14 = (os_log_s *)qword_1019345C8;
  if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(a1 + 248);
    if (*(_BYTE *)(a1 + 28)) {
      uint64_t v16 = "YES";
    }
    else {
      uint64_t v16 = "NO";
    }
    *(_DWORD *)buf = 136446466;
    int v32 = v16;
    __int16 v33 = 1026;
    int v34 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] Low latency mode: %{public}s. TimeSync type: %{public}d",  buf,  0x12u);
  }

  if (!sub_1002921D0(115, 2)) {
    goto LABEL_37;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_1018933E8);
  }
  if (*(_BYTE *)(a1 + 28)) {
    int v24 = "YES";
  }
  else {
    int v24 = "NO";
  }
  int v25 = *(_DWORD *)(a1 + 248);
  *(_DWORD *)int v30 = 136446466;
  *(void *)&v30[4] = v24;
  *(_WORD *)&v30[12] = 1026;
  *(_DWORD *)&v30[14] = v25;
  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryDeviceMotion] Low latency mode: %{public}s. TimeSync type: %{public}d",  v30,  18,  *(_OWORD *)v30,  *(void *)&v30[16]);
LABEL_61:
  int v26 = (uint8_t *)v13;
  sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v13);
  if (v26 != buf) {
    free(v26);
  }
LABEL_37:
  if (*(_BYTE *)(a1 + 29))
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    uint64_t v17 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(const char **)(a1 + 256);
      *(_DWORD *)buf = 134349056;
      int v32 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] Setting update interval to %{public}f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      uint64_t v21 = *(void *)(a1 + 256);
      *(_DWORD *)int v30 = 134349056;
      *(void *)&v30[4] = v21;
      LODWORD(v29) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryDeviceMotion] Setting update interval to %{public}f",  v30,  v29);
      uint64_t v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }

    sub_10071A73C(*(void *)(a1 + 32), *(double *)(a1 + 256));
  }

  else
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    uint64_t v19 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] Skip setting interval for monitor type client",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      *(_WORD *)int v30 = 0;
      LODWORD(v29) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryDeviceMotion] Skip setting interval for monitor type client",  v30,  v29);
      int v28 = (uint8_t *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v27);
      if (v28 != buf) {
        free(v28);
      }
    }
  }

  return *(double *)(a1 + 256);
}

BOOL sub_100FD57CC(BOOL result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    sub_100E62108(result);
    __n128 result = sub_100E62078(v3);
    *(_DWORD *)(v3 + 264) = result;
  }

  return result;
}

uint64_t sub_100FD57FC(uint64_t a1)
{
  BOOL v2 = sub_100E62078(a1);
  int v3 = *(_DWORD *)(a1 + 264);
  uint64_t result = sub_100E62078(a1);
  if (v3 != (_DWORD)result)
  {
    double v5 = (int *)(a1 + 264);
    *(_DWORD *)(a1 + 264) = v2;
    if (v2 <= 1)
    {
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      unsigned __int8 v6 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v7 = sub_100E62028(*v5);
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] sending accessory status to clients: %{public}@",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_1018933E8);
        }
        uint64_t v8 = qword_1019345C8;
        unsigned __int8 v9 = sub_100E62028(*v5);
        int v12 = 138543362;
        unsigned __int8 v13 = v9;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  0LL,  "[AccessoryDeviceMotion] sending accessory status to clients: %{public}@",  &v12,  12);
        int v11 = (char *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAccessoryDeviceMotion::sendAccessoryStatus()",  "%s\n",  v10);
      }

      *(void *)buf = sub_101171D38();
      return sub_1006DD528(a1, 2LL, a1 + 264, 4LL);
    }
  }

  return result;
}

void sub_100FD5A04(uint64_t a1, int a2)
{
  if (a2)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    int v3 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67174657;
      LODWORD(v16) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "[AccessoryDeviceMotion] Received unsupported event %{private}d from AudioAccessoryInterface",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      int v13 = 67174657;
      LODWORD(v14) = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[AccessoryDeviceMotion] Received unsupported event %{private}d from AudioAccessoryInterface",  &v13,  8);
      double v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAccessoryDeviceMotion::onAudioAccessoryInterfaceCallback(CLAudioAccessoryInterface::Event)",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

  else
  {
    *(_DWORD *)(a1 + 268) = sub_100E620A4();
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    unsigned __int8 v7 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = sub_100E62004(*(_DWORD *)(a1 + 268));
      *(_DWORD *)buf = 138543362;
      uint64_t v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] Received InEar status update from AudioAccessoryInterface - %{public}@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      uint64_t v9 = qword_1019345C8;
      double v10 = sub_100E62004(*(_DWORD *)(a1 + 268));
      int v13 = 138543362;
      int v14 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  0LL,  "[AccessoryDeviceMotion] Received InEar status update from AudioAccessoryInterface - %{public}@",  &v13,  12);
      int v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAccessoryDeviceMotion::onAudioAccessoryInterfaceCallback(CLAudioAccessoryInterface::Event)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    (*(void (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
    if (!*(_DWORD *)(a1 + 48)) {
      *(_BYTE *)(a1 + 30) = 0;
    }
  }

void sub_100FD5D34(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10199FDF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10199FDF8))
  {
    sub_100FD68F4((uint64_t)&dword_10199FD98);
    __cxa_atexit((void (*)(void *))sub_1011FFD6C, &dword_10199FD98, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199FDF8);
  }

  if (*(_BYTE *)(a1 + 30)) {
    goto LABEL_3;
  }
  *(_BYTE *)(a1 + 30) = 1;
  *(_DWORD *)std::stringbuf::string_type __p = 0;
  sub_1010DDBC0(&__p[8], "N/A");
  sub_1010DDBC0(&v44[8], "N/A");
  *(void *)int v46 = 0LL;
  *(void *)&v46[8] = 0LL;
  *(_DWORD *)&v46[16] = 1065353216;
  char v47 = 0;
  *(void *)&__int128 v48 = 0LL;
  *((void *)&v48 + 1) = 0x3F80000000000000LL;
  dword_10199FD98 = 0;
  if (byte_10199FDB7 < 0) {
    operator delete((void *)xmmword_10199FDA0);
  }
  char v5 = 0;
  xmmword_10199FDA0 = *(_OWORD *)&__p[8];
  unk_10199FDB0 = *(void *)v44;
  v44[7] = 0;
  __p[8] = 0;
  if (byte_10199FDCF < 0)
  {
    operator delete((void *)xmmword_10199FDB8);
    char v5 = v44[7];
  }

  xmmword_10199FDB8 = *(_OWORD *)&v44[8];
  unk_10199FDC8 = v45;
  HIBYTE(v45) = 0;
  v44[8] = 0;
  dword_10199FDD0 = *(_DWORD *)v46;
  xmmword_10199FDD4 = *(_OWORD *)&v46[4];
  byte_10199FDE4 = v47;
  xmmword_10199FDE8 = v48;
  if (v5 < 0) {
    operator delete(*(void **)&__p[8]);
  }
  if (!sub_100E62278(a1, (uint64_t)&dword_10199FD98))
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    int v11 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type __p = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "[AccessoryDeviceMotion] Service not found!",  __p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "[AccessoryDeviceMotion] Service not found!",  &v34,  2);
      int v13 = (char *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)",  "%s\n",  v12);
      if (v13 != __p) {
        free(v13);
      }
    }

    return;
  }

  unsigned __int8 v6 = (__IOHIDServiceClient *)sub_100719C6C(*(void *)(a1 + 32));
  if (sub_100FAD980(&v42, v6, @"H2HTransformation", (id)8))
  {
    byte_10199FDE4 = 1;
    *(float32x4_t *)std::stringbuf::string_type __p = vmulq_f32(vcvtq_f32_s32(vmovl_s16(v42)), (float32x4_t)vdupq_n_s32(0x38000100u));
    sub_100833700((float32x4_t *)__p, *(float32x4_t *)__p);
    xmmword_10199FDE8 = *(_OWORD *)__p;
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    unsigned __int8 v7 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type __p = 134349824;
      *(double *)&__p[4] = *(float *)&xmmword_10199FDE8;
      *(_WORD *)&__p[12] = 2050;
      *(double *)&__p[14] = *((float *)&xmmword_10199FDE8 + 1);
      *(_WORD *)&__p[22] = 2050;
      *(double *)int v44 = *((float *)&xmmword_10199FDE8 + 2);
      *(_WORD *)&v44[8] = 2050;
      *(double *)&v44[10] = *((float *)&xmmword_10199FDE8 + 3);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] Received headset to head transformation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry",  __p,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      int v34 = 134349824;
      double v35 = *(float *)&xmmword_10199FDE8;
      __int16 v36 = 2050;
      double v37 = *((float *)&xmmword_10199FDE8 + 1);
      __int16 v38 = 2050;
      *(double *)int v39 = *((float *)&xmmword_10199FDE8 + 2);
      *(_WORD *)&v39[8] = 2050;
      *(double *)&v39[10] = *((float *)&xmmword_10199FDE8 + 3);
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryDeviceMotion] Received headset to head transformation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry",  &v34,  42);
      double v10 = (char *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)",  "%s\n",  v9);
LABEL_78:
      if (v10 != __p) {
        free(v10);
      }
    }
  }

  else
  {
    byte_10199FDE4 = 0;
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    int v14 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type __p = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] Warning! Headset to Head transformation is not available from the accessory.",  __p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryDeviceMotion] Warning! Headset to Head transformation is not available from the accessory.",  &v34,  2);
      double v10 = (char *)v32;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)",  "%s\n",  v32);
      goto LABEL_78;
    }
  }

  if (byte_10199FDE4)
  {
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_10199FE20);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_10199FE20))
    {
      xmmword_10199FE10 = xmmword_1013BE290;
      sub_100833700((float32x4_t *)&xmmword_10199FE10, (float32x4_t)xmmword_1013BE290);
      __cxa_guard_release(&qword_10199FE20);
    }

    sub_1008333F0((uint64_t)&xmmword_10199FDE8, (float *)&xmmword_10199FE10, (float32x4_t *)__p, v8);
    xmmword_10199FDD4 = *(_OWORD *)__p;
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    uint64_t v16 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type __p = 134349824;
      *(double *)&__p[4] = *(float *)&xmmword_10199FDD4;
      *(_WORD *)&__p[12] = 2050;
      *(double *)&__p[14] = *((float *)&xmmword_10199FDD4 + 1);
      *(_WORD *)&__p[22] = 2050;
      *(double *)int v44 = *((float *)&xmmword_10199FDD4 + 2);
      *(_WORD *)&v44[8] = 2050;
      *(double *)&v44[10] = *((float *)&xmmword_10199FDD4 + 3);
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] Derived device frame orientation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry",  __p,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      int v34 = 134349824;
      double v35 = *(float *)&xmmword_10199FDD4;
      __int16 v36 = 2050;
      double v37 = *((float *)&xmmword_10199FDD4 + 1);
      __int16 v38 = 2050;
      *(double *)int v39 = *((float *)&xmmword_10199FDD4 + 2);
      *(_WORD *)&v39[8] = 2050;
      *(double *)&v39[10] = *((float *)&xmmword_10199FDD4 + 3);
      LODWORD(v33) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryDeviceMotion] Derived device frame orientation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry",  &v34,  v33);
      int v18 = (char *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)",  "%s\n",  v17);
      if (v18 != __p) {
        free(v18);
      }
    }
  }

  else
  {
    sub_100FD4A84(dword_10199FDD0, dword_10199FD98, (__int128 *)__p);
    xmmword_10199FDD4 = *(_OWORD *)__p;
  }

  if (dword_10199FDD0 > 8)
  {
    int v19 = 0;
  }

  else
  {
    int v19 = 1;
    if (((1 << dword_10199FDD0) & 0x1BB) != 0)
    {
      if (dword_10199FD98 == 2) {
        int v19 = 1;
      }
      else {
        int v19 = 2;
      }
    }
  }

  dword_10199FE00 = v19;
  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_1018933E8);
  }
  int v20 = (os_log_s *)qword_1019345C8;
  if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = sub_100E61FDC(dword_10199FDD0);
    int v22 = sub_100E62054(dword_10199FE00);
    if (byte_10199FDB7 >= 0) {
      uint64_t v23 = &xmmword_10199FDA0;
    }
    else {
      uint64_t v23 = (__int128 *)xmmword_10199FDA0;
    }
    if (byte_10199FDCF >= 0) {
      int v24 = &xmmword_10199FDB8;
    }
    else {
      int v24 = (__int128 *)xmmword_10199FDB8;
    }
    *(_DWORD *)std::stringbuf::string_type __p = 138479107;
    *(void *)&__p[4] = v21;
    *(_WORD *)&__p[12] = 2114;
    *(void *)&__p[14] = v22;
    *(_WORD *)&__p[22] = 1026;
    *(_DWORD *)int v44 = dword_10199FD98;
    *(_WORD *)&v44[4] = 2081;
    *(void *)&v44[6] = v23;
    *(_WORD *)&_BYTE v44[14] = 2081;
    *(void *)&v44[16] = v24;
    LOWORD(v45) = 1026;
    *(_DWORD *)((char *)&v45 + 2) = dword_10199FDD0;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[AccessoryDeviceMotion] config,%{private}@,location,%{public}@,side,%{public}d,configuration,%{private}s,serialNum ber,%{private}s,hardwareModel,%{public}d",  __p,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    uint64_t v25 = qword_1019345C8;
    int v26 = sub_100E61FDC(dword_10199FDD0);
    __int128 v27 = sub_100E62054(dword_10199FE00);
    if (byte_10199FDB7 >= 0) {
      int v28 = &xmmword_10199FDA0;
    }
    else {
      int v28 = (__int128 *)xmmword_10199FDA0;
    }
    if (byte_10199FDCF >= 0) {
      uint64_t v29 = &xmmword_10199FDB8;
    }
    else {
      uint64_t v29 = (__int128 *)xmmword_10199FDB8;
    }
    int v34 = 138479107;
    double v35 = *(double *)&v26;
    __int16 v36 = 2114;
    double v37 = *(double *)&v27;
    __int16 v38 = 1026;
    *(_DWORD *)int v39 = dword_10199FD98;
    *(_WORD *)&v39[4] = 2081;
    *(void *)&v39[6] = v28;
    *(_WORD *)&v39[14] = 2081;
    *(void *)&v39[16] = v29;
    __int16 v40 = 1026;
    int v41 = dword_10199FDD0;
    LODWORD(v33) = 54;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v25,  0LL,  "[AccessoryDeviceMotion] config,%{private}@,location,%{public}@,side,%{public}d,configuration,%{private}s,serialNum ber,%{private}s,hardwareModel,%{public}d",  &v34,  v33);
    __int128 v31 = (char *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)",  "%s\n",  v30);
    if (v31 != __p) {
      free(v31);
    }
  }

  sub_1006DD528(a1, 1LL, (uint64_t)&dword_10199FD98, 96LL);
  if (*(_BYTE *)(a1 + 30))
  {
LABEL_3:
    *(_DWORD *)(a2 + 104) = dword_10199FE00;
    sub_1006DD528(a1, 0LL, a2, 144LL);
  }

void sub_100FD68AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

uint64_t sub_100FD68F4(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  BOOL v2 = (void *)(a1 + 32);
  sub_1010DDBC0((void *)(a1 + 8), "N/A");
  sub_1010DDBC0(v2, "N/A");
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0x3F80000000000000LL;
  return a1;
}

void sub_100FD695C(_Unwind_Exception *exception_object)
{
}

void sub_100FD6978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DataValue = (unsigned __int8 *)IOHIDEventGetDataValue(a4, 65540LL);
  uint64_t IntegerValue = IOHIDEventGetIntegerValue(a4, 65539LL);
  if (DataValue) {
    BOOL v8 = IntegerValue == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return;
  }
  uint64_t v9 = IntegerValue;
  *(void *)&__int128 v104 = 0LL;
  *((void *)&v104 + 1) = 0x3F80000000000000LL;
  unsigned __int16 v108 = 0;
  __int128 v109 = 0uLL;
  unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
  double v110 = sub_101171C7C(TimeStamp);
  __int128 v113 = 0u;
  memset(v114, 0, sizeof(v114));
  int v115 = 0;
  HIBYTE(v103) = 0;
  int v11 = sub_100FACE5C(a4, (_BYTE *)&v103 + 7);
  *(void *)((char *)v114 + 4) = v11;
  v12.i32[1] = HIDWORD(v110);
  *((double *)&v109 + 1) = v110;
  if (HIBYTE(v103) && v11)
  {
    id v13 = sub_100E62624(a1, (uint64_t)v11);
    if (!v13) {
      goto LABEL_47;
    }
    id v14 = v13;
    double v15 = sub_101171C7C((unint64_t)v13);
    double v16 = v110 - v15;
    if (v110 - v15 <= -3600.0 || v16 >= 3600.0)
    {
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      int v26 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = *(void *)((char *)v114 + 4);
        uint64_t v28 = IOHIDEventGetTimeStamp(a4);
        *(_DWORD *)buf = 134349824;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v28;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&buf[24] = v14;
        *(_WORD *)&buf[32] = 2050;
        *(void *)v147 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "[AccessoryDeviceMotion] Abnormal TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts: %{public}llu remote->local latency(ns):%{public}lld",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_1018933E8);
        }
        uint64_t v29 = qword_1019345C8;
        uint64_t v30 = *(void *)((char *)v114 + 4);
        uint64_t v31 = IOHIDEventGetTimeStamp(a4);
        int v116 = 134349824;
        *(void *)__int128 v117 = v30;
        *(_WORD *)&v117[8] = 2050;
        *(void *)&v117[10] = v31;
        *(_WORD *)&v117[18] = 2050;
        *(void *)&v117[20] = v14;
        *(_WORD *)&v117[28] = 2050;
        *(void *)v118 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
        LODWORD(v103) = 42;
        double v24 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  16LL,  "[AccessoryDeviceMotion] Abnormal TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Sync ed ts:%{public}llu remote->local latency(ns):%{public}lld",  &v116,  v103);
        goto LABEL_29;
      }
    }

    else
    {
      *(double *)((char *)v114 + 12) = v110 - v15;
      *((double *)&v109 + 1) = v15;
      LODWORD(v114[0]) = *(_DWORD *)(a1 + 248);
      if (v16 <= 0.100000001)
      {
        if (v16 <= 0.0)
        {
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_1018933E8);
          }
          int v41 = (os_log_s *)qword_1019345C8;
          if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v42 = *(void *)((char *)v114 + 4);
            uint64_t v43 = IOHIDEventGetTimeStamp(a4);
            *(_DWORD *)buf = 134349824;
            *(void *)&uint8_t buf[4] = v42;
            *(_WORD *)&buf[12] = 2050;
            *(void *)&buf[14] = v43;
            *(_WORD *)&buf[22] = 2050;
            *(void *)&buf[24] = v14;
            *(_WORD *)&buf[32] = 2050;
            *(void *)v147 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
            _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "[AccessoryDeviceMotion] Zero or Negative TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}ll u Synced ts:%{public}llu remote->local latency(ns):%{public}lld",  buf,  0x2Au);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345C0 != -1) {
              dispatch_once(&qword_1019345C0, &stru_1018933E8);
            }
            uint64_t v98 = qword_1019345C8;
            uint64_t v99 = *(void *)((char *)v114 + 4);
            uint64_t v100 = IOHIDEventGetTimeStamp(a4);
            int v116 = 134349824;
            *(void *)__int128 v117 = v99;
            *(_WORD *)&v117[8] = 2050;
            *(void *)&v117[10] = v100;
            *(_WORD *)&v117[18] = 2050;
            *(void *)&v117[20] = v14;
            *(_WORD *)&v117[28] = 2050;
            *(void *)v118 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
            LODWORD(v103) = 42;
            double v24 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v98,  16LL,  "[AccessoryDeviceMotion] Zero or Negative TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{pub lic}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld",  &v116,  v103);
            goto LABEL_29;
          }
        }

        else
        {
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_1018933E8);
          }
          uint64_t v33 = (os_log_s *)qword_1019345C8;
          if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v34 = *(void *)((char *)v114 + 4);
            uint64_t v35 = IOHIDEventGetTimeStamp(a4);
            *(_DWORD *)buf = 134349824;
            *(void *)&uint8_t buf[4] = v34;
            *(_WORD *)&buf[12] = 2050;
            *(void *)&buf[14] = v35;
            *(_WORD *)&buf[22] = 2050;
            *(void *)&buf[24] = v14;
            *(_WORD *)&buf[32] = 2050;
            *(void *)v147 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "[AccessoryDeviceMotion] W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->lo cal latency(ns):%{public}lld",  buf,  0x2Au);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345C0 != -1) {
              dispatch_once(&qword_1019345C0, &stru_1018933E8);
            }
            uint64_t v36 = qword_1019345C8;
            uint64_t v37 = *(void *)((char *)v114 + 4);
            uint64_t v38 = IOHIDEventGetTimeStamp(a4);
            int v116 = 134349824;
            *(void *)__int128 v117 = v37;
            *(_WORD *)&v117[8] = 2050;
            *(void *)&v117[10] = v38;
            *(_WORD *)&v117[18] = 2050;
            *(void *)&v117[20] = v14;
            *(_WORD *)&v117[28] = 2050;
            *(void *)v118 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
            LODWORD(v103) = 42;
            double v39 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v36,  2LL,  "[AccessoryDeviceMotion] W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remo te->local latency(ns):%{public}lld",  &v116,  v103);
            int v32 = v40;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)",  "%s\n",  v39);
            goto LABEL_30;
          }
        }
      }

      else
      {
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_1018933E8);
        }
        uint64_t v17 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *(void *)((char *)v114 + 4);
          uint64_t v19 = IOHIDEventGetTimeStamp(a4);
          *(_DWORD *)buf = 134349824;
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v19;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&buf[24] = v14;
          *(_WORD *)&buf[32] = 2050;
          *(void *)v147 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[AccessoryDeviceMotion] High TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{ public}llu remote->local latency(ns):%{public}lld",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_1018933E8);
          }
          uint64_t v20 = qword_1019345C8;
          uint64_t v21 = *(void *)((char *)v114 + 4);
          uint64_t v22 = IOHIDEventGetTimeStamp(a4);
          int v116 = 134349824;
          *(void *)__int128 v117 = v21;
          *(_WORD *)&v117[8] = 2050;
          *(void *)&v117[10] = v22;
          *(_WORD *)&v117[18] = 2050;
          *(void *)&v117[20] = v14;
          *(_WORD *)&v117[28] = 2050;
          *(void *)v118 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
          LODWORD(v103) = 42;
          double v24 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  16LL,  "[AccessoryDeviceMotion] High TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld",  &v116,  v103);
LABEL_29:
          int v32 = v23;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)",  "%s\n",  v24);
LABEL_30:
          if (v32 != buf) {
            free(v32);
          }
        }
      }
    }
  }

  else if (!HIBYTE(v103))
  {
    LODWORD(v114[0]) = *(_DWORD *)(a1 + 248);
    uint64_t v25 = mach_absolute_time();
    *(double *)v12.i64 = sub_101171C7C(v25);
    double v110 = *(double *)v12.i64;
  }

void sub_100FD819C(id a1)
{
  qword_1019345C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void *sub_100FD81C8(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = off_101893418;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0LL;
  return result;
}

id *sub_100FD81DC(id *a1)
{
  *a1 = off_101893418;
  if (a1[3])
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101893458);
    }
    BOOL v2 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      (*((void (**)(void **__return_ptr, id *))*a1 + 3))(__p, a1);
      if (v6 >= 0) {
        int v3 = __p;
      }
      else {
        int v3 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      double v10 = "";
      __int16 v11 = 2082;
      float32x4_t v12 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Stream #CLLIA Disablement assertion dropped, me:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }

    [a1[3] invalidate];

    a1[3] = 0LL;
  }

  sub_100213E60(a1);
  return a1;
}

void sub_100FD8330(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100FD8340(id *a1)
{
  uint64_t v1 = sub_100FD81DC(a1);
  operator delete(v1);
}

void sub_100FD8354(void *a1, CLConnectionMessage **a2)
{
  unsigned __int8 v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 50LL)
    {
LABEL_7:
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101893458);
      }
      char v6 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = CLConnectionMessage::name(*a2);
        else {
          int v8 = *(const char **)v7;
        }
        *(_DWORD *)buf = 68289282;
        int v20 = 0;
        __int16 v21 = 2082;
        uint64_t v22 = "";
        __int16 v23 = 2082;
        double v24 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning unrecognized message, MessageName:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      return;
    }

    unsigned __int8 v4 = (void *)*v4;
  }

  else if (v5 != 50)
  {
    goto LABEL_7;
  }

  if (memcmp(v4, "LocationIndependenceAssertion/kCLConnectionMessage", 0x32uLL)) {
    goto LABEL_7;
  }
  __int16 v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: LocationIndependenceAssertion/kCLConnectionMessage",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101893458);
  }
  double v10 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    int v20 = 0;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 2082;
    double v24 = "activity";
    __int16 v25 = 2050;
    int v26 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:LocationIndependenceAssertion/kCLConnectionMessage, event:%{public, location:escape_o nly}s, this:%{public}p}",  buf,  0x26u);
  }

  __int16 v11 = *a2;
  float32x4_t v12 = a2[1];
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    id v13 = (unint64_t *)((char *)v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  sub_100FD85FC(a1, v17);
  if (v12)
  {
    double v15 = (unint64_t *)((char *)v12 + 8);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v12 + 16LL))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100FD85D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_100FD85FC(void *a1, CLConnectionMessage **a2)
{
  if (a1[3])
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101893458);
    }
    int v3 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, void *))(*a1 + 24LL))(&__p, a1);
      unsigned __int8 v4 = SBYTE3(v28) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#warning LocationIndependenceAssertion already taken by %{public}s",  buf,  0xCu);
      if (SBYTE3(v28) < 0) {
        operator delete(__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101893458);
      }
      uint64_t v16 = qword_101934978;
      (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
      if (v21 >= 0) {
        uint64_t v17 = buf;
      }
      else {
        uint64_t v17 = *(_BYTE **)buf;
      }
      int v22 = 136446210;
      __int16 v23 = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v16,  0LL,  "#warning LocationIndependenceAssertion already taken by %{public}s",  &v22,  12);
      uint64_t v19 = v18;
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonLocationIndependenceAssertion::handleMessageLocationIndependenceAssertion(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v19);
    }

    return;
  }

  sub_1010DDBC0(&__p, "com.apple.locationd.independence_declarer");
  char v6 = sub_100FD8BCC(a1, (uint64_t *)&__p);
  char v7 = v6;
  if (SBYTE3(v28) < 0)
  {
    operator delete(__p);
    if ((v7 & 1) != 0)
    {
LABEL_14:
      if (objc_msgSend( objc_msgSend( (id)CLConnectionMessage::getDictionary(*a2),  "objectForKeyedSubscript:",  @"kCLConnectionMessagePurposeKey"),  "length"))
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101893458);
        }
        int v8 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
          __int16 v9 = v21 >= 0 ? buf : *(_BYTE **)buf;
          std::stringbuf::string_type __p = (void *)68289282;
          __int16 v25 = 2082;
          int v26 = "";
          __int16 v27 = 2082;
          uint64_t v28 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Stream #CLLIA Taking a disablement assertion, me:%{public, location:escape_only}s}",  (uint8_t *)&__p,  0x1Cu);
          if (v21 < 0) {
            operator delete(*(void **)buf);
          }
        }

        a1[3] = -[CLStreamedLocationProviderAssertion initInUniverse:]( objc_alloc(&OBJC_CLASS___CLStreamedLocationProviderDisablementAssertion),  "initInUniverse:",  a1[2]);
        return;
      }

      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101893458);
      }
      float32x4_t v12 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
        if (v21 >= 0) {
          id v13 = buf;
        }
        else {
          id v13 = *(_BYTE **)buf;
        }
        std::stringbuf::string_type __p = (void *)68289282;
        __int16 v25 = 2082;
        int v26 = "";
        __int16 v27 = 2082;
        uint64_t v28 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason., client name:%{public, location:escape_only}s}",  (uint8_t *)&__p,  0x1Cu);
        if (v21 < 0) {
          operator delete(*(void **)buf);
        }
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101893458);
        }
      }

      unint64_t v14 = (os_log_s *)qword_101934978;
      if (os_signpost_enabled((os_log_t)qword_101934978))
      {
        (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
        if (v21 >= 0) {
          double v15 = buf;
        }
        else {
          double v15 = *(_BYTE **)buf;
        }
        std::stringbuf::string_type __p = (void *)68289282;
        __int16 v25 = 2082;
        int v26 = "";
        __int16 v27 = 2082;
        uint64_t v28 = v15;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason.",  "{msg%{public}.0s:#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason., client name:%{public, location:escape_only}s}",  (uint8_t *)&__p,  0x1Cu);
        goto LABEL_47;
      }

      return;
    }
  }

  else if ((v6 & 1) != 0)
  {
    goto LABEL_14;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101893458);
  }
  double v10 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
    if (v21 >= 0) {
      __int16 v11 = buf;
    }
    else {
      __int16 v11 = *(_BYTE **)buf;
    }
    std::stringbuf::string_type __p = (void *)68289282;
    __int16 v25 = 2082;
    int v26 = "";
    __int16 v27 = 2082;
    uint64_t v28 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Stream #CLLIA #warning Not entitled as a streaming disabler... ignoring LocationIndependen ceAssertion, client name:%{public, location:escape_only}s}",  (uint8_t *)&__p,  0x1Cu);
LABEL_47:
    if (v21 < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_100FD8BA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD8BCC(void *a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101893458);
  }
  int v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(__p, a1);
    char v6 = *(_BYTE **)__p;
    char v7 = "not entitled";
    if (v22 >= 0) {
      char v6 = __p;
    }
    if ((_DWORD)isEntitled) {
      char v7 = "entitled";
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 136315650;
    __int16 v25 = v6;
    __int16 v26 = 2080;
    __int16 v27 = v7;
    __int16 v28 = 2080;
    uint64_t v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s is %s for %s", buf, 0x20u);
    if (SHIBYTE(v22) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101893458);
    }
    uint64_t v10 = qword_101934978;
    (*(void (**)(void **__return_ptr, void *))(*a1 + 24LL))(v17, a1);
    __int16 v11 = (void **)v17[0];
    float32x4_t v12 = "not entitled";
    if (v18 >= 0) {
      __int16 v11 = v17;
    }
    if ((_DWORD)isEntitled) {
      float32x4_t v12 = "entitled";
    }
    else {
      id v13 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::stringbuf::string_type __p = 136315650;
    *(void *)&__p[4] = v11;
    __int16 v20 = 2080;
    char v21 = v12;
    __int16 v22 = 2080;
    __int16 v23 = v13;
    _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, v10, 2LL, "%s is %s for %s", __p, 32, v16);
    double v15 = v14;
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDaemonLocationIndependenceAssertion::isEntitled(const std::string &)",  "%s\n",  v15);
  }

  return isEntitled;
}

void sub_100FD8E80(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100FD8EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_101893488;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018934C8);
  }
  unsigned __int8 v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#clgda,daemon,CLDaemonGnssDisablementAssertion",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#clgda,daemon,CLDaemonGnssDisablementAssertion",  v8,  2);
    char v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLDaemonGnssDisablementAssertion::CLDaemonGnssDisablementAssertion(CLConnection *, id<CLIntersiloUniverse>)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return a1;
}

void sub_100FD9060(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100213E60((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100FD90A4(uint64_t a1)
{
  *(void *)a1 = off_101893488;
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018934C8);
  }
  BOOL v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#clgda,daemon,~CLDaemonGnssDisablementAssertion",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#clgda,daemon,~CLDaemonGnssDisablementAssertion",  v7,  2);
    char v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLDaemonGnssDisablementAssertion::~CLDaemonGnssDisablementAssertion()",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:38];
  }
  *(void *)(a1 + 48) = 0LL;
  sub_100213E60((void *)a1);
  return a1;
}

void sub_100FD9274(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100FD9284(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100FD90A4(a1);
  operator delete(v1);
}

void sub_100FD9298(uint64_t a1, uint64_t a2)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018934C8);
  }
  uint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "Fail";
    if ((_DWORD)a2) {
      int v5 = "Success";
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#clgda,daemon,sendAssertionRsp,BasebandCausesL1Interference,isAsserted,%{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    double v15 = "Fail";
    if ((_DWORD)a2) {
      double v15 = "Success";
    }
    *(_DWORD *)char v21 = 136446210;
    *(void *)&v21[4] = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#clgda,daemon,sendAssertionRsp,BasebandCausesL1Interference,isAsserted,%{public}s",  v21,  12);
    uint64_t v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonGnssDisablementAssertion::sendAssertionRsp(BOOL) const",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  uint64_t v19 = @"kCLGDA_AssertionCompleteStatusKey";
  __int16 v20 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2);
  *(void *)char v21 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL);
  sub_100FDA960("kCLConnectionMessageGnssDisablementAssertRsp", v21, buf);
  uint64_t v6 = *(void *)(a1 + 8);
  __int128 v18 = *(_OWORD *)buf;
  if (*(void *)&buf[8])
  {
    char v7 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  CLConnection::sendMessage(v6, &v18);
  __int16 v9 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1))
  {
    uint64_t v10 = (unint64_t *)(*((void *)&v18 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  float32x4_t v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    id v13 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_100FD9564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10000AE14((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100FD9588(std::string *a1, CLConnectionMessage **a2)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018934C8);
  }
  uint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t *)CLConnectionMessage::name(*a2);
    else {
      uint64_t v6 = (uint64_t *)*v5;
    }
    *(_DWORD *)buf = 136380675;
    double v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,message,%{private}s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    uint64_t v15 = qword_101934978;
    uint64_t v16 = (uint64_t *)CLConnectionMessage::name(*a2);
    else {
      uint64_t v17 = (uint64_t *)*v16;
    }
    int v21 = 136380675;
    __int16 v22 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  0LL,  "#clgda,daemon,message,%{private}s",  &v21,  12);
    uint64_t v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLDaemonGnssDisablementAssertion::handleMessage(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  uint64_t v7 = (void *)CLConnectionMessage::name(*a2);
  int v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (v7[1] != 44LL) {
      return;
    }
    uint64_t v7 = (void *)*v7;
  }

  else if (v8 != 44)
  {
    return;
  }

  if (!memcmp(v7, "kCLConnectionMessageGnssDisablementAssertReq", 0x2CuLL))
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    v20[0] = v9;
    v20[1] = v10;
    if (v10)
    {
      uint64_t v11 = (unint64_t *)((char *)v10 + 8);
      do
        unint64_t v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }

    sub_100FD9828(a1, v20);
    if (v10)
    {
      id v13 = (unint64_t *)((char *)v10 + 8);
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        (*(void (**)(CLConnectionMessage *))(*(void *)v10 + 16LL))(v10);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
      }
    }
  }

void sub_100FD980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100FD9828(std::string *a1, CLConnectionMessage **a2)
{
  if (!sub_1004FCCB8())
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    id v13 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 24))(__p, a1);
      unint64_t v14 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#clgda,#warning,daemon,unsupported platform,request denied, requested by:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_65;
  }

  sub_1010DDBC0(buf, "com.apple.locationd.gnss-disablement");
  char v4 = sub_100FD9FA4(a1, (uint64_t *)buf);
  char v5 = v4;
  if ((SBYTE3(v33) & 0x80000000) == 0)
  {
    if ((v4 & 1) != 0) {
      goto LABEL_4;
    }
LABEL_21:
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    uint64_t v15 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 24))(__p, a1);
      uint64_t v16 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v16;
      __int16 v34 = 2082;
      uint64_t v35 = "com.apple.locationd.gnss-disablement";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#clgda,#warning,daemon,missing entitlement,request denied, requested by:%{public, l ocation:escape_only}s, entitlement:%{public, location:escape_only}s}",  buf,  0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_65;
  }

  operator delete(*(void **)buf);
  if ((v5 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_4:
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v7 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  id v8 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
  id v9 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
  if (!v8)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    uint64_t v17 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 24))(__p, a1);
      __int128 v18 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#clgda,#warning,daemon,missing bundleID,request denied, requested by:%{public, loca tion:escape_only}s}",  buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_65;
  }

  uint64_t v10 = v9;
  if (!v9)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    uint64_t v19 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 24))(__p, a1);
      __int16 v20 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#clgda,#warning,daemon,missing bundlePath,request denied, requested by:%{public, lo cation:escape_only}s}",  buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_65;
  }

  if (!v7)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    int v21 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 24))(__p, a1);
      __int16 v22 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#clgda,#warning,daemon,missing reason,request denied, requested by:%{public, locati on:escape_only}s}",  buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_65;
  }

  if (![v7 length])
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    __int16 v23 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 24))(__p, a1);
      double v24 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#clgda,#warning,daemon,empty reason,request denied, requested by:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

void sub_100FD9F80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD9FA4(void *a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018934C8);
  }
  char v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, void *))(*a1 + 24LL))(__p, a1);
    if (v10 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    else {
      id v7 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68289794;
    int v12 = 0;
    __int16 v13 = 2082;
    unint64_t v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = v6;
    __int16 v17 = 2082;
    __int128 v18 = v7;
    __int16 v19 = 1026;
    int v20 = isEntitled;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#clgda,daemon,, requested by:%{public, location:escape_only}s, entitlement:%{publ ic, location:escape_only}s, entitled:%{public}hhd}",  buf,  0x2Cu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  return isEntitled;
}

void sub_100FDA108(uint64_t a1)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018934E8);
  }
  BOOL v2 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#clgda,gnss,notifyClientEnteringInterferenceMode",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018934E8);
    }
    *(_WORD *)char v5 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#clgda,gnss,notifyClientEnteringInterferenceMode",  v5,  2);
    char v4 = (char *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonGnssDisablementAssertion::notifyClientEnteringInterferenceMode()",  "%s\n",  v3);
  }

  if (!*(void *)(a1 + 48) && sub_1004FCCB8()) {
    sub_100A9E608();
  }
}

void sub_100FDA508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018934C8);
  }
  uint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a4 + 1440);
    int v8 = *(_DWORD *)(a4 + 1444);
    *(_DWORD *)buf = 67240448;
    int v18 = v7;
    __int16 v19 = 1026;
    int v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#clgda,daemon,kNotificationBasebandCausesL1Interference,%{public}d,bandChangeStatus,%{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018934C8);
    }
    int v10 = *(_DWORD *)(a4 + 1440);
    int v11 = *(_DWORD *)(a4 + 1444);
    v14[0] = 67240448;
    v14[1] = v10;
    __int16 v15 = 1026;
    int v16 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#clgda,daemon,kNotificationBasebandCausesL1Interference,%{public}d,bandChangeStatus,%{public}d",  v14,  14);
    __int16 v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification(int, const CLLocationProvider_Type::Notif ication &, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  BOOL v9 = !sub_1004FCCB8() || sub_1004FCDC0() || *(_DWORD *)(a4 + 1444) != 1;
  sub_100FD9298(a1, v9);
}

void sub_100FDA70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101893508);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893508);
    }
    BOOL v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification, event:%{public , location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100FDA508(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FDA8BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FDA8DC(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100FDA908(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100FDA934(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void *sub_100FDA960@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  uint64_t result = sub_100215340(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100FDA9AC(_Unwind_Exception *a1)
{
}

double sub_100FDA9C0(uint64_t a1)
{
  uint64_t v1 = sub_100FE1980(a1);
  *(int64x2_t *)(v1 + 144) = vdupq_n_s64(0x3FEE666666666666uLL);
  *(void *)(v1 + 160) = 0LL;
  *(_DWORD *)(v1 + 168) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(void *)(v1 + 208) = 0LL;
  *(void *)(v1 + 216) = 0x3FE0000000000000LL;
  *(void *)(v1 + 224) = 0LL;
  *(_BYTE *)(v1 + 232) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_BYTE *)(v1 + 240) = 0;
  *(void *)(v1 + 248) = 0LL;
  return result;
}

void *sub_100FDAA10(void *result)
{
  result[8] = off_1018935E8;
  *double result = &off_101893538;
  result[1] = off_1018935E8;
  return result;
}

uint64_t sub_100FDAA34(uint64_t result)
{
  *(_BYTE *)(result + 240) = 0;
  *(void *)(result + 248) = 0LL;
  *(void *)(result + 64) = off_1018935E8;
  *(void *)double result = &off_101893538;
  *(void *)(result + 8) = off_1018935E8;
  return result;
}

uint64_t sub_100FDAA60(uint64_t a1, double a2)
{
  if (sub_100FDAC34(a1))
  {
    *(_BYTE *)(a1 + 240) = 1;
    *(double *)(a1 + 248) = a2;
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    char v4 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 248);
      *(_DWORD *)buf = 134217984;
      uint64_t v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_Initialize,EstimatorTimeCfaSec,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      uint64_t v7 = *(void *)(a1 + 248);
      int v10 = 134217984;
      uint64_t v11 = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_Initialize,EstimatorTimeCfaSec,%f",  COERCE_DOUBLE(&v10));
      BOOL v9 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLOutdoorEstimator::initialize(const CFAbsoluteTime)", "%s\n", v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  return *(unsigned __int8 *)(a1 + 240);
}

BOOL sub_100FDAC34(uint64_t a1)
{
  *(void *)(a1 + 128) = 0x3DDB7CDFD9D7BDBBLL;
  uint64_t v13 = 0x100000002LL;
  uint64_t v11 = &off_101893590;
  __int128 v12 = xmmword_1013BE330;
  __int16 v14 = &v15;
  *(void *)sub_100FE1BA0((uint64_t)&v11, 0LL, sub_100272D04(v1, 0LL) = 0x3FE0000000000000LL;
  *(void *)sub_100FE1BA0((uint64_t)&v11, 1LL, sub_100272D04(v1, 0LL) = 0x3FE0000000000000LL;
  int v3 = sub_100FDAF6C(a1, (uint64_t)&v11, v2);
  if (v3)
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    char v4 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "CLOutdoorEstimator,Initialize(),Estimator initialization failed",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      __int16 v10 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  1LL,  "CLOutdoorEstimator,Initialize(),Estimator initialization failed",  &v10,  2);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLOutdoorEstimator::initializeHiddenMarkovModel()", "%s\n", v5);
LABEL_19:
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    uint64_t v7 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,Initialize(),CN HMM is initialized",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      __int16 v10 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,Initialize(),CN HMM is initialized",  &v10,  2);
      uint64_t v6 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLOutdoorEstimator::initializeHiddenMarkovModel()", "%s\n", v9);
      goto LABEL_19;
    }
  }

  return v3 == 0;
}

uint64_t sub_100FDAF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double *)(a1 + 128);
  int v6 = *(_DWORD *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = 0LL;
    do
    {
      double v8 = sub_100FE1BE0(a2, v7, a3);
      if (v8 < 0.0 || v8 > 1.0) {
        sub_10127E55C();
      }
      uint64_t v7 = (v7 + 1);
    }

    while (v6 != (_DWORD)v7);
  }

  uint64_t v18 = 0x100000002LL;
  __int16 v16 = &off_101893590;
  __int128 v17 = xmmword_1013BE330;
  uint64_t v19 = (double *)v20;
  __int16 v10 = (cnprint::CNPrinter *)sub_100FE1C18(a2, 1, (uint64_t)&v16);
  if (DWORD2(v17) != 1) {
    sub_10127E538((uint64_t)v10, v11, v12);
  }
  double v13 = *v19;
  if (*v19 <= 0.0) {
    sub_10127E510();
  }
  if (fabs(v13 + -1.0) > v5 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
  {
    LOWORD(v16) = 2;
    LOBYTE(v15[0]) = 1;
    cnprint::CNPrinter::Print(&v16, v15, "WARNING: HMM initialized with non-normalized probability vector.");
  }

  sub_100FE1E88((uint64_t)v15, a2);
  sub_100FE1E2C(v15, v6, 1);
  uint64_t v18 = 0x100000002LL;
  __int16 v16 = &off_101893590;
  __int128 v17 = xmmword_1013BE330;
  uint64_t v19 = (double *)v20;
  sub_100FE1D70((uint64_t)v15, (uint64_t)&v16, 1.0 / v13);
  sub_100FE1FFC(a1 + 8, (uint64_t)&v16);
  sub_100FE1FFC(a1 + 64, a1 + 8);
  *(_DWORD *)(a1 + 120) = 1;
  return 0LL;
}

void *sub_100FDB110(void *result)
{
  *double result = off_1018935E8;
  return result;
}

__n128 sub_100FDB124(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 184);
  *(void *)(a2 + 32) = *(void *)(a1 + 216);
  __n128 result = *(__n128 *)(a1 + 200);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_100FDB140(uint64_t a1)
{
  *(void *)(a1 + 184) = *(void *)(a1 + 248);
  *(double *)(a1 + 192) = sub_101171D4C();
  *(_DWORD *)buf = 1;
  double v2 = sub_100FDB4BC(a1, (unsigned int *)buf);
  *(void *)(a1 + 200) = 0LL;
  *(double *)(a1 + 216) = v2;
  *(void *)(a1 + 208) = 0LL;
  if (v2 > 0.525 && v2 <= 0.7)
  {
    int64x2_t v3 = (int64x2_t)xmmword_1013BE340;
LABEL_16:
    *(int64x2_t *)(a1 + 200) = v3;
    goto LABEL_17;
  }

  if (v2 > 0.7 && v2 <= 0.9)
  {
    unint64_t v4 = 2LL;
LABEL_7:
    int64x2_t v3 = vdupq_n_s64(v4);
    goto LABEL_16;
  }

  if (v2 > 0.9 && v2 <= 1.0)
  {
    int64x2_t v3 = (int64x2_t)xmmword_101347B90;
    goto LABEL_16;
  }

  if (v2 > 0.3 && v2 <= 0.45)
  {
    unint64_t v4 = 1LL;
    goto LABEL_7;
  }

  if (v2 > 0.1 && v2 <= 0.3)
  {
    int64x2_t v3 = (int64x2_t)xmmword_1013BE350;
    goto LABEL_16;
  }

  BOOL v15 = v2 > 0.1 || v2 <= 0.0;
  double v16 = fabs(v2);
  if (!v15 || v16 < 2.22044605e-16)
  {
    int64x2_t v3 = (int64x2_t)xmmword_1013BE360;
    goto LABEL_16;
  }

double sub_100FDB4BC(uint64_t a1, unsigned int *a2)
{
  if (*(_BYTE *)(a1 + 240))
  {
    sub_100FDB67C(a1, (uint64_t)buf);
    return *(double *)sub_100FE20AC((uint64_t)buf, *a2);
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    unint64_t v4 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,getStateProbability(),HMM Not initialized",  buf,  2u);
    }

    double v3 = -1.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,getStateProbability(),HMM Not initialized",  v8,  2);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "double CLOutdoorEstimator::getStateProbability(const CLOutdoorEstimator_Type::OutdoorEstimatorHiddenStates &) const",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return v3;
}

double sub_100FDB67C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000002LL;
  *(void *)a2 = &off_101893590;
  *(_OWORD *)(a2 + 8) = xmmword_1013BE330;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 120)) {
    uint64_t v2 = a1 + 64;
  }
  else {
    uint64_t v2 = a1 + 8;
  }
  *(void *)&double result = sub_100FE1FFC(a2, v2).n128_u64[0];
  return result;
}

void sub_100FDB6E4(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1018935E8;
  _Unwind_Resume(a1);
}

void sub_100FDB6F8(uint64_t a1, double *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  unint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,processEvidence(),Process GnssEvidence",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v67) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,processEvidence(),Process GnssEvidence",  &v67,  2);
    __int16 v32 = (uint8_t *)v31;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v31);
    if (v32 != buf) {
      free(v32);
    }
  }

  if (*(_BYTE *)(a1 + 240))
  {
    uint64_t v64 = 0x100000002LL;
    int v62 = &off_101893618;
    __int128 v63 = xmmword_1013BE330;
    BOOL v65 = &v66;
    *(void *)sub_100FE1BA0((uint64_t)&v62, 0LL, sub_100272D04(v1, 0LL) = sub_100FDC860;
    *(void *)sub_100FE1BA0((uint64_t)&v62, 1LL, sub_100272D04(v1, 0LL) = sub_100FDC860;
    uint64_t v59 = 0x100000002LL;
    uint64_t v57 = &off_1018936A0;
    __int128 v58 = xmmword_1013BE330;
    float v60 = &v61;
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v55 = _Q0;
    __int128 v53 = _Q0;
    double v10 = a2[2];
    if (v10 < 0.0) {
      double v10 = 0.0;
    }
    double v56 = *a2;
    double v54 = v56;
    double v51 = -1.0;
    unint64_t v52 = (unint64_t)v10;
    if (sub_100FD35B8(a1 + 136, (uint64_t *)&v52, *(_DWORD *)(a1 + 160), &v51))
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      int v11 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        int v12 = *(_DWORD *)(a1 + 160);
        *(_DWORD *)buf = 67174657;
        LODWORD(v84) = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor failed for signal environment,%{private}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        int v13 = *(_DWORD *)(a1 + 160);
        int v67 = 67174657;
        LODWORD(v68) = v13;
        LODWORD(v50) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor failed for signal environment,%{private}d",  &v67,  v50);
        BOOL v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v14);
LABEL_111:
        if (v15 != buf) {
          free(v15);
        }
      }
    }

    else if (v51 < 0.0 || v51 > 1.0 || (*(void *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      uint64_t v20 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor returned invalid probability",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        LOWORD(v67) = 0;
        LODWORD(v50) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor returned invalid probability",  &v67,  v50);
        BOOL v15 = (uint8_t *)v38;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v38);
        goto LABEL_111;
      }
    }

    else
    {
      *((double *)&v55 + 1) = v51;
      double v51 = -1.0;
      if (sub_100FD381C(a1 + 136, (uint64_t *)&v52, &v51))
      {
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        uint64_t v18 = (os_log_s *)qword_101934948;
        if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,ProcessEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor failed",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          LOWORD(v67) = 0;
          LODWORD(v50) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,ProcessEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor failed",  &v67,  v50);
          BOOL v15 = (uint8_t *)v19;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v19);
          goto LABEL_111;
        }
      }

      else if (v51 < 0.0 || v51 > 1.0 || (*(void *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
      {
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        uint64_t v25 = (os_log_s *)qword_101934948;
        if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor returned invalid probability",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          LOWORD(v67) = 0;
          LODWORD(v50) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor returned invalid probability",  &v67,  v50);
          BOOL v15 = (uint8_t *)v26;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v26);
          goto LABEL_111;
        }
      }

      else
      {
        *(double *)&__int128 v55 = v51;
        *(void *)sub_100FE1BA0((uint64_t)&v57, 0LL, sub_100272D04(v1, 0LL) = &v55;
        unint64_t v52 = *((unsigned int *)a2 + 6);
        double v51 = -1.0;
        if (sub_100FD3A04(a1 + 136, (uint64_t *)&v52, *(_DWORD *)(a1 + 160), &v51))
        {
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          uint64_t v21 = (os_log_s *)qword_101934948;
          if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
          {
            int v22 = *(_DWORD *)(a1 + 160);
            *(_DWORD *)buf = 67174657;
            LODWORD(v84) = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor failed for signal e nvironment,%{private}d",  buf,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            int v23 = *(_DWORD *)(a1 + 160);
            int v67 = 67174657;
            LODWORD(v68) = v23;
            LODWORD(v50) = 8;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor failed for signal e nvironment,%{private}d",  &v67,  v50);
            BOOL v15 = (uint8_t *)v24;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v24);
            goto LABEL_111;
          }
        }

        else if (v51 < 0.0 || v51 > 1.0 || (*(void *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
        {
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          uint64_t v29 = (os_log_s *)qword_101934948;
          if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor returned invalid probability",  buf,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            LOWORD(v67) = 0;
            LODWORD(v50) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor returned invalid probability",  &v67,  v50);
            BOOL v15 = (uint8_t *)v30;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v30);
            goto LABEL_111;
          }
        }

        else
        {
          *((double *)&v53 + 1) = v51;
          double v51 = -1.0;
          if (sub_100FD3C68(a1 + 136, (uint64_t *)&v52, &v51))
          {
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            __int16 v27 = (os_log_s *)qword_101934948;
            if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor failed",  buf,  2u);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934940 != -1) {
                dispatch_once(&qword_101934940, &stru_101893560);
              }
              LOWORD(v67) = 0;
              LODWORD(v50) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor failed",  &v67,  v50);
              BOOL v15 = (uint8_t *)v28;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v28);
              goto LABEL_111;
            }
          }

          else if (v51 < 0.0 || v51 > 1.0 || (*(void *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
          {
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            __int16 v36 = (os_log_s *)qword_101934948;
            if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor returned invalid probability",  buf,  2u);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934940 != -1) {
                dispatch_once(&qword_101934940, &stru_101893560);
              }
              LOWORD(v67) = 0;
              LODWORD(v50) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor returned invalid probability",  &v67,  v50);
              BOOL v15 = (uint8_t *)v37;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v37);
              goto LABEL_111;
            }
          }

          else
          {
            *(double *)&__int128 v53 = v51;
            *(void *)sub_100FE1BA0((uint64_t)&v57, 1LL, sub_100272D04(v1, 0LL) = &v53;
            sub_100FDB67C(a1, (uint64_t)buf);
            int v33 = sub_100FDCBA8(a1, 2, (uint64_t)buf, 2, (uint64_t)&v62, (uint64_t)&v57);
            if (v33)
            {
              if (qword_101934940 != -1) {
                dispatch_once(&qword_101934940, &stru_101893560);
              }
              __int16 v34 = (os_log_s *)qword_101934948;
              if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                LODWORD(v84) = v33;
                _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM update failed,%d",  buf,  8u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934940 != -1) {
                  dispatch_once(&qword_101934940, &stru_101893560);
                }
                int v67 = 67109120;
                LODWORD(v68) = v33;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM update failed,%d",  &v67);
                BOOL v15 = (uint8_t *)v35;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v35);
                goto LABEL_111;
              }
            }

            else
            {
              if (qword_101934940 != -1) {
                dispatch_once(&qword_101934940, &stru_101893560);
              }
              int v39 = (os_log_s *)qword_101934948;
              if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
              {
                double v40 = *a2;
                uint64_t v41 = *((void *)a2 + 2);
                int v42 = *((_DWORD *)a2 + 6);
                uint64_t v43 = *(void *)(a1 + 248);
                *(_DWORD *)buf = 134219777;
                double v84 = v40;
                __int16 v85 = 2049;
                uint64_t v86 = v41;
                __int16 v87 = 1025;
                int v88 = v42;
                __int16 v89 = 2048;
                uint64_t v90 = v43;
                __int16 v91 = 2049;
                uint64_t v92 = *((void *)&v55 + 1);
                __int16 v93 = 2049;
                uint64_t v94 = v55;
                __int16 v95 = 2049;
                uint64_t v96 = *((void *)&v53 + 1);
                __int16 v97 = 2049;
                uint64_t v98 = v53;
                _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_GnssEvidence,evidenceCfatSec,%f,cn0dBHz,%{private}f,numTrackedSatellitesAboveElevat ionMask,%{private}d,EstimatorTimeCfaSec,%f,cn0likelihoodObservationGivenOutdoor,%{private}f,cn0likelih oodObservationGivenIndoor,%{private}f,numSatlikelihoodObservationGivenOutdoor,%{private}f,numSatlikeli hoodObservationGivenIndoor,%{private}f",  buf,  0x4Eu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934940 != -1) {
                  dispatch_once(&qword_101934940, &stru_101893560);
                }
                double v44 = *a2;
                uint64_t v45 = *((void *)a2 + 2);
                int v46 = *((_DWORD *)a2 + 6);
                uint64_t v47 = *(void *)(a1 + 248);
                int v67 = 134219777;
                double v68 = v44;
                __int16 v69 = 2049;
                uint64_t v70 = v45;
                __int16 v71 = 1025;
                int v72 = v46;
                __int16 v73 = 2048;
                uint64_t v74 = v47;
                __int16 v75 = 2049;
                uint64_t v76 = *((void *)&v55 + 1);
                __int16 v77 = 2049;
                uint64_t v78 = v55;
                __int16 v79 = 2049;
                uint64_t v80 = *((void *)&v53 + 1);
                __int16 v81 = 2049;
                uint64_t v82 = v53;
                LODWORD(v50) = 78;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_GnssEvidence,evidenceCfatSec,%f,cn0dBHz,%{private}f,numTrackedSatellitesAboveElevat ionMask,%{private}d,EstimatorTimeCfaSec,%f,cn0likelihoodObservationGivenOutdoor,%{private}f,cn0likelih oodObservationGivenIndoor,%{private}f,numSatlikelihoodObservationGivenOutdoor,%{private}f,numSatlikeli hoodObservationGivenIndoor,%{private}f",  &v67,  v50);
                uint64_t v49 = (uint8_t *)v48;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v48);
                if (v49 != buf) {
                  free(v49);
                }
              }

              sub_100FDB140(a1);
            }
          }
        }
      }
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    double v16 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM Not initialized",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      LOWORD(v67) = 0;
      LODWORD(v50) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM Not initialized",  &v67,  v50);
      BOOL v15 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)",  "%s\n",  v17);
      goto LABEL_111;
    }
  }

uint64_t sub_100FDC860(double *a1, _DWORD *a2)
{
  double v3 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v3 >= 0.0 ? (BOOL v4 = v3 <= 1.0) : (BOOL v4 = 0), !v4))
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    double v5 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      double v6 = *a1;
      *(_DWORD *)buf = 134217984;
      double v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Indoor,likelihoodObservationGivenIndoor,%f",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Indoor,likelihoodObservationGivenIndoor,%f");
LABEL_29:
    __int128 v17 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimator_Type::OutdoorEstimatorEmissionLikelihood(const void *, cnmatrix::CNMatrix<max_nx, 1, T> &) [max_nx = 2U, T = double]",  "%s\n",  v12);
    if (v17 != buf) {
      free(v17);
    }
    return 0xFFFFFFFFLL;
  }

  double v8 = a1[1];
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v8 >= 0.0 ? (BOOL v9 = v8 <= 1.0) : (BOOL v9 = 0), !v9))
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    double v10 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      double v11 = a1[1];
      *(_DWORD *)buf = 134217984;
      double v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Outdoor,likelihoodObservationGivenOutdoor,%f",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Outdoor,likelihoodObservationGivenOutdoor,%f");
    goto LABEL_29;
  }

  sub_100FE20E4(a2, 2u, 1);
  double v14 = *a1;
  *(double *)sub_100FE1BA0((uint64_t)a2, 0LL, sub_100272D04(v1, 0LL) = v14;
  uint64_t v15 = *((void *)a1 + 1);
  double v16 = (void *)sub_100FE1BA0((uint64_t)a2, 1LL, 0LL);
  uint64_t result = 0LL;
  void *v16 = v15;
  return result;
}

uint64_t sub_100FDCBA8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a2 <= 0) {
    sub_10127E584();
  }
  double v12 = *(double *)(a1 + 128);
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  unsigned int v14 = *(_DWORD *)(a3 + 12);
  if (v13) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    if (v13 <= v14) {
      unsigned int v13 = *(_DWORD *)(a3 + 12);
    }
    if (v13 != a2) {
      sub_10127E69C();
    }
    uint64_t v16 = 0LL;
    do
    {
      double v17 = sub_100FE1BE0(a3, v16, a3);
      if (v17 < 0.0 || v17 > 1.0) {
        sub_10127E674();
      }
      uint64_t v16 = (v16 + 1);
    }

    while (a2 != (_DWORD)v16);
  }

  if (a4 <= 0) {
    sub_10127E5AC();
  }
  unsigned int v19 = *(_DWORD *)(a5 + 8);
  unsigned int v20 = *(_DWORD *)(a5 + 12);
  if (v19 <= v20) {
    int v21 = *(_DWORD *)(a5 + 12);
  }
  else {
    int v21 = *(_DWORD *)(a5 + 8);
  }
  if (v20) {
    BOOL v22 = v19 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22) {
    int v23 = 0;
  }
  else {
    int v23 = v21;
  }
  if (v23 != a4) {
    sub_10127E64C();
  }
  unsigned int v24 = *(_DWORD *)(a6 + 8);
  unsigned int v25 = *(_DWORD *)(a6 + 12);
  if (v24 <= v25) {
    int v26 = *(_DWORD *)(a6 + 12);
  }
  else {
    int v26 = *(_DWORD *)(a6 + 8);
  }
  if (v25) {
    BOOL v27 = v24 == 0;
  }
  else {
    BOOL v27 = 1;
  }
  if (v27) {
    int v28 = 0;
  }
  else {
    int v28 = v26;
  }
  if (v28 != a4) {
    sub_10127E624();
  }
  if (*(_DWORD *)(a3 + 8) && *(_DWORD *)(a3 + 12))
  {
    uint64_t v62 = 0x100000002LL;
    float v60 = &off_101893590;
    __int128 v61 = xmmword_1013BE330;
    __int128 v63 = (double *)v64;
    uint64_t v29 = (cnprint::CNPrinter *)sub_100FE1C18(a3, 1, (uint64_t)&v60);
    if (DWORD2(v61) != 1) {
      sub_10127E538((uint64_t)v29, v30, v31);
    }
    double v32 = *v63;
    if (*v63 <= 0.0) {
      sub_10127E5FC();
    }
    if (fabs(v32 + -1.0) <= v12)
    {
      sub_100FE1E88((uint64_t)&v60, a3);
      sub_100FE1E2C(&v60, a2, 1);
      sub_100FE1FFC(a1 + 8, (uint64_t)&v60);
    }

    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v29) <= 1)
      {
        LOWORD(v60) = 2;
        LOBYTE(v55) = 1;
        cnprint::CNPrinter::Print(&v60, &v55, "WARNING: HMM update passed a non-normalized probability vector.");
      }

      sub_100FE1E88((uint64_t)&v55, a3);
      sub_100FE1E2C(&v55, a2, 1);
      uint64_t v62 = 0x100000002LL;
      float v60 = &off_101893590;
      __int128 v61 = xmmword_1013BE330;
      __int128 v63 = (double *)v64;
      sub_100FE1D70((uint64_t)&v55, (uint64_t)&v60, 1.0 / v32);
      sub_100FE1FFC(a1 + 8, (uint64_t)&v60);
    }
  }

  else
  {
    uint64_t v57 = 0x100000002LL;
    __int128 v58 = 0LL;
    __int128 v55 = &off_101893590;
    __int128 v56 = 0uLL;
    int32x4_t v33 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000LL), 0);
    v33.i32[1] = 1;
    __int128 v56 = (__int128)v33;
    __int128 v58 = v59;
    sub_100FE1A58(&v55, a2, 1);
    sub_100FE221C((uint64_t)&v55, 1.0);
    uint64_t v62 = 0x100000002LL;
    float v60 = &off_101893590;
    __int128 v61 = xmmword_1013BE330;
    __int128 v63 = (double *)v64;
    sub_100FE1D70((uint64_t)&v55, (uint64_t)&v60, 1.0 / (double)a2);
    sub_100FE1FFC(a1 + 8, (uint64_t)&v60);
  }

  sub_100FE1E88((uint64_t)&v60, a1 + 8);
  uint64_t v35 = 0LL;
  while (1)
  {
    __int16 v36 = (unsigned int (*)(uint64_t, uint64_t (***)()))sub_100FE2280(a5, v35, v34);
    uint64_t v57 = 0x100000002LL;
    __int128 v55 = &off_101893590;
    __int128 v56 = xmmword_1013BE330;
    __int128 v58 = v59;
    uint64_t v38 = sub_100FE2280(a6, v35, v37);
    if (v36(v38, &v55)) {
      break;
    }
    unsigned int v39 = 0;
    double v40 = 0.0;
    do
    {
      double v41 = *(double *)sub_100FE20AC((uint64_t)&v55, v39);
      if (v41 < 0.0 || v41 > 1.0)
      {
        LOWORD(v49) = 2;
        char v54 = 4;
        cnprint::CNPrinter::Print(&v49, &v54, "ERROR: HMM emission probability matrix is invalid.");
        return 30LL;
      }

      double v40 = v40 + v41;
      ++v39;
    }

    while (a2 != v39);
    if (fabs(v40) <= v12)
    {
      LOWORD(v49) = 2;
      char v54 = 4;
      cnprint::CNPrinter::Print(&v49, &v54, "ERROR: HMM emission probability matrix is null matrix");
      return 30LL;
    }

    unsigned int v43 = 0;
    do
    {
      double v44 = *(double *)sub_100FE20AC((uint64_t)&v55, v43);
      uint64_t v45 = (double *)sub_100FE20AC((uint64_t)&v60, v43);
      *uint64_t v45 = v44 * *v45;
      ++v43;
    }

    while (a2 != v43);
    uint64_t v51 = 0x100000002LL;
    uint64_t v49 = &off_101893590;
    __int128 v50 = xmmword_1013BE330;
    unint64_t v52 = (double *)v53;
    int v46 = (cnprint::CNPrinter *)sub_100FE1C18((uint64_t)&v60, 1, (uint64_t)&v49);
    if (DWORD2(v50) != 1) {
      __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
    }
    double v47 = *v52;
    if (fabs(*v52) < 2.22044605e-16)
    {
      if (cnprint::CNPrinter::GetLogLevel(v46) <= 1)
      {
        LOWORD(v49) = 2;
        char v54 = 1;
        cnprint::CNPrinter::Print(&v49, &v54, "HMM state is null vector after update; revert to input state");
      }

      sub_100FE1FFC((uint64_t)&v60, a1 + 8);
      uint64_t v51 = 0x100000002LL;
      uint64_t v49 = &off_101893590;
      __int128 v50 = xmmword_1013BE330;
      unint64_t v52 = (double *)v53;
      sub_100FE1C18((uint64_t)&v60, 1, (uint64_t)&v49);
      if (DWORD2(v50) != 1) {
        __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
      }
      double v47 = *v52;
    }

    uint64_t v51 = 0x100000002LL;
    uint64_t v49 = &off_101893590;
    __int128 v50 = xmmword_1013BE330;
    unint64_t v52 = (double *)v53;
    sub_100FE1D70((uint64_t)&v60, (uint64_t)&v49, 1.0 / v47);
    sub_100FE1FFC((uint64_t)&v60, (uint64_t)&v49);
    uint64_t v35 = (v35 + 1);
    if ((_DWORD)v35 == a4)
    {
      sub_100FE1FFC(a1 + 64, (uint64_t)&v60);
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 120) = 1;
      return result;
    }
  }

  LOWORD(v49) = 2;
  char v54 = 4;
  cnprint::CNPrinter::Print(&v49, &v54, "ERROR: HMM emission function failed.");
  return 29LL;
}

void *sub_100FDD21C(void *result)
{
  *uint64_t result = off_1018936F8;
  return result;
}

void *sub_100FDD230(void *result)
{
  *uint64_t result = off_101893670;
  return result;
}

void sub_100FDD244(uint64_t a1, double *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  BOOL v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,processEvidence(),Process AlsEvidence",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v59) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,processEvidence(),Process AlsEvidence",  &v59,  2);
    uint64_t v34 = (uint8_t *)v33;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)",  "%s\n",  v33);
    if (v34 != buf) {
      free(v34);
    }
  }

  if (*(_BYTE *)(a1 + 240))
  {
    uint64_t v56 = 0x100000001LL;
    char v54 = &off_101893728;
    *(void *)&__int128 v5 = 0x100000001LL;
    *((void *)&v5 + 1) = 0x100000001LL;
    __int128 v55 = v5;
    uint64_t v57 = &v58;
    *(void *)sub_100FE1BA0((uint64_t)&v54, 0LL, sub_100272D04(v1, 0LL) = sub_100FDC860;
    uint64_t v51 = 0x100000001LL;
    uint64_t v49 = &off_101893770;
    *(void *)&__int128 v6 = 0x100000001LL;
    *((void *)&v6 + 1) = 0x100000001LL;
    __int128 v50 = v6;
    unint64_t v52 = &v53;
    __asm { FMOV            V0.2D, #-1.0 }

    uint64_t v12 = *(void *)a2;
    __int128 v47 = _Q0;
    uint64_t v48 = v12;
    double v46 = -1.0;
    if (sub_100FD468C(a1 + 136, a2 + 2, a2 + 3, &v46))
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      unsigned int v13 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookuplookupAlsEvidenceProbabilityGivenOutdoorProbabilityGivenOutdoor failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        LOWORD(v59) = 0;
        LODWORD(v44) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookuplookupAlsEvidenceProbabilityGivenOutdoorProbabilityGivenOutdoor failed",  &v59,  v44);
        BOOL v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)",  "%s\n",  v14);
LABEL_75:
        if (v15 != buf) {
          free(v15);
        }
      }
    }

    else if (v46 < 0.0 || v46 > 1.0 || (*(void *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      unsigned int v20 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenOutdoor returned invalid probability",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        LOWORD(v59) = 0;
        LODWORD(v44) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenOutdoor returned invalid probability",  &v59,  v44);
        BOOL v15 = (uint8_t *)v35;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)",  "%s\n",  v35);
        goto LABEL_75;
      }
    }

    else
    {
      *((double *)&v47 + 1) = v46;
      double v46 = -1.0;
      if (sub_100FD4844(a1 + 136, a2 + 2, &v46))
      {
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        uint64_t v18 = (os_log_s *)qword_101934948;
        if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor failed",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          LOWORD(v59) = 0;
          LODWORD(v44) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor failed",  &v59,  v44);
          BOOL v15 = (uint8_t *)v19;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)",  "%s\n",  v19);
          goto LABEL_75;
        }
      }

      else if (v46 < 0.0 || v46 > 1.0 || (*(void *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
      {
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        unsigned int v24 = (os_log_s *)qword_101934948;
        if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor returned invalid probability",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          LOWORD(v59) = 0;
          LODWORD(v44) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor returned invalid probability",  &v59,  v44);
          BOOL v15 = (uint8_t *)v25;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)",  "%s\n",  v25);
          goto LABEL_75;
        }
      }

      else
      {
        *(double *)&__int128 v47 = v46;
        *(void *)sub_100FE1BA0((uint64_t)&v49, 0LL, sub_100272D04(v1, 0LL) = &v47;
        sub_100FDB67C(a1, (uint64_t)buf);
        sub_100FE22D8((uint64_t)&v59, (uint64_t)&v54);
        sub_100FE244C((uint64_t)v45, (uint64_t)&v49);
        int v21 = sub_100FDCBA8(a1, 2, (uint64_t)buf, 1, (uint64_t)&v59, (uint64_t)v45);
        if (v21)
        {
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          BOOL v22 = (os_log_s *)qword_101934948;
          if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v76) = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM update failed,%d",  buf,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            int v59 = 67109120;
            LODWORD(v60) = v21;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM update failed,%d",  &v59);
            BOOL v15 = (uint8_t *)v23;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)",  "%s\n",  v23);
            goto LABEL_75;
          }
        }

        else
        {
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          int v26 = (os_log_s *)qword_101934948;
          if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v27 = *(void *)a2;
            uint64_t v28 = *((void *)a2 + 2);
            uint64_t v29 = *((void *)a2 + 3);
            int v30 = *((unsigned __int8 *)a2 + 32);
            uint64_t v31 = *((void *)a2 + 5);
            uint64_t v32 = *(void *)(a1 + 248);
            *(_DWORD *)buf = 134219777;
            uint64_t v76 = v27;
            __int16 v77 = 2049;
            uint64_t v78 = *((void *)&v47 + 1);
            __int16 v79 = 2049;
            uint64_t v80 = v47;
            __int16 v81 = 2049;
            uint64_t v82 = v28;
            __int16 v83 = 2049;
            uint64_t v84 = v29;
            __int16 v85 = 1025;
            int v86 = v30;
            __int16 v87 = 1025;
            int v88 = v31;
            __int16 v89 = 2048;
            uint64_t v90 = v32;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_AlsEvidence,evidenceCfatSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihood ObservationGivenIndoor,%{private}f,alsTrustedLux,%{private}f,sunElevationAngleDegrees,%{private}f,isAstron omicalDaytime,%{private}d,daylightConfidence,%{private}d,EstimatorTimeCfaSec,%f",  buf,  0x4Au);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            uint64_t v36 = *(void *)a2;
            uint64_t v37 = *((void *)a2 + 2);
            uint64_t v38 = *((void *)a2 + 3);
            int v39 = *((unsigned __int8 *)a2 + 32);
            uint64_t v40 = *((void *)a2 + 5);
            uint64_t v41 = *(void *)(a1 + 248);
            int v59 = 134219777;
            uint64_t v60 = v36;
            __int16 v61 = 2049;
            uint64_t v62 = *((void *)&v47 + 1);
            __int16 v63 = 2049;
            uint64_t v64 = v47;
            __int16 v65 = 2049;
            uint64_t v66 = v37;
            __int16 v67 = 2049;
            uint64_t v68 = v38;
            __int16 v69 = 1025;
            int v70 = v39;
            __int16 v71 = 1025;
            int v72 = v40;
            __int16 v73 = 2048;
            uint64_t v74 = v41;
            LODWORD(v44) = 74;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_AlsEvidence,evidenceCfatSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihood ObservationGivenIndoor,%{private}f,alsTrustedLux,%{private}f,sunElevationAngleDegrees,%{private}f,isAstron omicalDaytime,%{private}d,daylightConfidence,%{private}d,EstimatorTimeCfaSec,%f",  &v59,  v44);
            unsigned int v43 = (uint8_t *)v42;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)",  "%s\n",  v42);
            if (v43 != buf) {
              free(v43);
            }
          }

          sub_100FDB140(a1);
        }
      }
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    uint64_t v16 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM Not initialized",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      LOWORD(v59) = 0;
      LODWORD(v44) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM Not initialized",  &v59,  v44);
      BOOL v15 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)",  "%s\n",  v17);
      goto LABEL_75;
    }
  }

void sub_100FDDE30(uint64_t a1, uint64_t *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  BOOL v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,processEvidence(),Process ActivityState",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v52) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,processEvidence(),Process ActivityState",  &v52,  2);
    int v30 = (uint8_t *)v29;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)",  "%s\n",  v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 3);
  *(void *)(a1 + 176) = *a2;
  if (*(_BYTE *)(a1 + 240))
  {
    uint64_t v49 = 0x100000001LL;
    __int128 v47 = &off_101893728;
    *(void *)&__int128 v5 = 0x100000001LL;
    *((void *)&v5 + 1) = 0x100000001LL;
    __int128 v48 = v5;
    __int128 v50 = &v51;
    *(void *)sub_100FE1BA0((uint64_t)&v47, 0LL, sub_100272D04(v1, 0LL) = sub_100FDC860;
    uint64_t v44 = 0x100000001LL;
    int v42 = &off_101893770;
    *(void *)&__int128 v6 = 0x100000001LL;
    *((void *)&v6 + 1) = 0x100000001LL;
    __int128 v43 = v6;
    uint64_t v45 = &v46;
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v40 = _Q0;
    uint64_t v41 = *a2;
    double v39 = -1.0;
    if (sub_100FD4208(a1 + 136, *((_DWORD *)a2 + 3), *(_DWORD *)(a1 + 160), &v39))
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      uint64_t v12 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        LOWORD(v52) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor failed",  &v52,  v37);
        unsigned int v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)",  "%s\n",  v13);
LABEL_75:
        if (v14 != buf) {
          free(v14);
        }
      }
    }

    else if (v39 < 0.0 || v39 > 1.0 || (*(void *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      unsigned int v19 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor returned invalid probability",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        LOWORD(v52) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor returned invalid probability",  &v52,  v37);
        unsigned int v14 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)",  "%s\n",  v31);
        goto LABEL_75;
      }
    }

    else
    {
      *((double *)&v40 + 1) = v39;
      double v39 = -1.0;
      if (sub_100FD4494(a1 + 136, *((_DWORD *)a2 + 3), *(_DWORD *)(a1 + 160), &v39))
      {
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        double v17 = (os_log_s *)qword_101934948;
        if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor failed",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          LOWORD(v52) = 0;
          LODWORD(v37) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor failed",  &v52,  v37);
          unsigned int v14 = (uint8_t *)v18;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)",  "%s\n",  v18);
          goto LABEL_75;
        }
      }

      else if (v39 < 0.0 || v39 > 1.0 || (*(void *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
      {
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        int v23 = (os_log_s *)qword_101934948;
        if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor returned invalid probability",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          LOWORD(v52) = 0;
          LODWORD(v37) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor returned invalid probability",  &v52,  v37);
          unsigned int v14 = (uint8_t *)v24;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)",  "%s\n",  v24);
          goto LABEL_75;
        }
      }

      else
      {
        *(double *)&__int128 v40 = v39;
        *(void *)sub_100FE1BA0((uint64_t)&v42, 0LL, sub_100272D04(v1, 0LL) = &v40;
        sub_100FDB67C(a1, (uint64_t)buf);
        sub_100FE22D8((uint64_t)&v52, (uint64_t)&v47);
        sub_100FE244C((uint64_t)v38, (uint64_t)&v42);
        int v20 = sub_100FDCBA8(a1, 2, (uint64_t)buf, 1, (uint64_t)&v52, (uint64_t)v38);
        if (v20)
        {
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          int v21 = (os_log_s *)qword_101934948;
          if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v63) = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),ActivityState,HMM update failed,%d",  buf,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            int v52 = 67109120;
            LODWORD(v53) = v20;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),ActivityState,HMM update failed,%d",  &v52);
            unsigned int v14 = (uint8_t *)v22;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)",  "%s\n",  v22);
            goto LABEL_75;
          }
        }

        else
        {
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          unsigned int v25 = (os_log_s *)qword_101934948;
          if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v26 = *a2;
            int v27 = *((_DWORD *)a2 + 3);
            uint64_t v28 = *(void *)(a1 + 248);
            *(_DWORD *)buf = 134219009;
            uint64_t v63 = v26;
            __int16 v64 = 1025;
            int v65 = v27;
            __int16 v66 = 2048;
            uint64_t v67 = v28;
            __int16 v68 = 2049;
            uint64_t v69 = *((void *)&v40 + 1);
            __int16 v70 = 2049;
            uint64_t v71 = v40;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_ActivityState,evidenceCfatSec,%f,motionActivityType,%{private}d,EstimatorTimeCfaSec,%f, likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f",  buf,  0x30u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            uint64_t v32 = *a2;
            int v33 = *((_DWORD *)a2 + 3);
            uint64_t v34 = *(void *)(a1 + 248);
            int v52 = 134219009;
            uint64_t v53 = v32;
            __int16 v54 = 1025;
            int v55 = v33;
            __int16 v56 = 2048;
            uint64_t v57 = v34;
            __int16 v58 = 2049;
            uint64_t v59 = *((void *)&v40 + 1);
            __int16 v60 = 2049;
            uint64_t v61 = v40;
            LODWORD(v37) = 48;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_ActivityState,evidenceCfatSec,%f,motionActivityType,%{private}d,EstimatorTimeCfaSec,%f, likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f",  &v52,  v37);
            uint64_t v36 = (uint8_t *)v35;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)",  "%s\n",  v35);
            if (v36 != buf) {
              free(v36);
            }
          }

          sub_100FDB140(a1);
        }
      }
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    BOOL v15 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),ActivityState,HMM Not initialized",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      LOWORD(v52) = 0;
      LODWORD(v37) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),ActivityState,HMM Not initialized",  &v52,  v37);
      unsigned int v14 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)",  "%s\n",  v16);
      goto LABEL_75;
    }
  }

void sub_100FDE9EC(uint64_t a1, uint64_t *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  BOOL v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,ProcessEvidence(),Process GnssAvailability",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v52) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,ProcessEvidence(),Process GnssAvailability",  &v52,  2);
    int v30 = (uint8_t *)v29;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)",  "%s\n",  v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  if (*(_BYTE *)(a1 + 240))
  {
    uint64_t v49 = 0x100000001LL;
    __int128 v47 = &off_101893728;
    *(void *)&__int128 v5 = 0x100000001LL;
    *((void *)&v5 + 1) = 0x100000001LL;
    __int128 v48 = v5;
    __int128 v50 = &v51;
    *(void *)sub_100FE1BA0((uint64_t)&v47, 0LL, sub_100272D04(v1, 0LL) = sub_100FDC860;
    uint64_t v44 = 0x100000001LL;
    int v42 = &off_101893770;
    *(void *)&__int128 v6 = 0x100000001LL;
    *((void *)&v6 + 1) = 0x100000001LL;
    __int128 v43 = v6;
    uint64_t v45 = &v46;
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v40 = _Q0;
    uint64_t v41 = *a2;
    double v39 = -1.0;
    if (sub_100FD3E50(a1 + 136, *((_DWORD *)a2 + 6), &v39))
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      uint64_t v12 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        LOWORD(v52) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor failed",  &v52,  v37);
        unsigned int v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)",  "%s\n",  v13);
LABEL_75:
        if (v14 != buf) {
          free(v14);
        }
      }
    }

    else if (v39 < 0.0 || v39 > 1.0 || (*(void *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      unsigned int v19 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor retur ned invalid probability",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        LOWORD(v52) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor retur ned invalid probability",  &v52,  v37);
        unsigned int v14 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)",  "%s\n",  v31);
        goto LABEL_75;
      }
    }

    else
    {
      *((double *)&v40 + 1) = v39;
      double v39 = -1.0;
      if (sub_100FD402C(a1 + 136, *((_DWORD *)a2 + 6), &v39))
      {
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        double v17 = (os_log_s *)qword_101934948;
        if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor failed",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          LOWORD(v52) = 0;
          LODWORD(v37) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor failed",  &v52,  v37);
          unsigned int v14 = (uint8_t *)v18;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)",  "%s\n",  v18);
          goto LABEL_75;
        }
      }

      else if (v39 < 0.0 || v39 > 1.0 || (*(void *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
      {
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        int v23 = (os_log_s *)qword_101934948;
        if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor retu rned invalid probability",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          LOWORD(v52) = 0;
          LODWORD(v37) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor retu rned invalid probability",  &v52,  v37);
          unsigned int v14 = (uint8_t *)v24;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)",  "%s\n",  v24);
          goto LABEL_75;
        }
      }

      else
      {
        *(double *)&__int128 v40 = v39;
        *(void *)sub_100FE1BA0((uint64_t)&v42, 0LL, sub_100272D04(v1, 0LL) = &v40;
        sub_100FDB67C(a1, (uint64_t)buf);
        sub_100FE22D8((uint64_t)&v52, (uint64_t)&v47);
        sub_100FE244C((uint64_t)v38, (uint64_t)&v42);
        int v20 = sub_100FDCBA8(a1, 2, (uint64_t)buf, 1, (uint64_t)&v52, (uint64_t)v38);
        if (v20)
        {
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          int v21 = (os_log_s *)qword_101934948;
          if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v63) = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM update failed,%d",  buf,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            int v52 = 67109120;
            LODWORD(v53) = v20;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM update failed,%d",  &v52);
            unsigned int v14 = (uint8_t *)v22;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)",  "%s\n",  v22);
            goto LABEL_75;
          }
        }

        else
        {
          if (qword_101934940 != -1) {
            dispatch_once(&qword_101934940, &stru_101893560);
          }
          unsigned int v25 = (os_log_s *)qword_101934948;
          if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v26 = *a2;
            int v27 = *((_DWORD *)a2 + 6);
            uint64_t v28 = *(void *)(a1 + 248);
            *(_DWORD *)buf = 134219009;
            uint64_t v63 = v26;
            __int16 v64 = 1025;
            int v65 = v27;
            __int16 v66 = 2048;
            uint64_t v67 = v28;
            __int16 v68 = 2049;
            uint64_t v69 = *((void *)&v40 + 1);
            __int16 v70 = 2049;
            uint64_t v71 = v40;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_GnssAvailability,evidenceCfatSec,%f,GnssAvailability,%{private}d,EstimatorTimeCfaSec,%f ,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f",  buf,  0x30u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934940 != -1) {
              dispatch_once(&qword_101934940, &stru_101893560);
            }
            uint64_t v32 = *a2;
            int v33 = *((_DWORD *)a2 + 6);
            uint64_t v34 = *(void *)(a1 + 248);
            int v52 = 134219009;
            uint64_t v53 = v32;
            __int16 v54 = 1025;
            int v55 = v33;
            __int16 v56 = 2048;
            uint64_t v57 = v34;
            __int16 v58 = 2049;
            uint64_t v59 = *((void *)&v40 + 1);
            __int16 v60 = 2049;
            uint64_t v61 = v40;
            LODWORD(v37) = 48;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_GnssAvailability,evidenceCfatSec,%f,GnssAvailability,%{private}d,EstimatorTimeCfaSec,%f ,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f",  &v52,  v37);
            uint64_t v36 = (uint8_t *)v35;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)",  "%s\n",  v35);
            if (v36 != buf) {
              free(v36);
            }
          }

          sub_100FDB140(a1);
        }
      }
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    BOOL v15 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM Not initialized",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      LOWORD(v52) = 0;
      LODWORD(v37) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM Not initialized",  &v52,  v37);
      unsigned int v14 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)",  "%s\n",  v16);
      goto LABEL_75;
    }
  }

void sub_100FDF590(uint64_t a1, double *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  BOOL v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,ProcessEvidence(),Process GpsModelOutput",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,ProcessEvidence(),Process GpsModelOutput",  &v41,  2);
    BOOL v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  if (*(_BYTE *)(a1 + 240))
  {
    uint64_t v38 = 0x100000001LL;
    uint64_t v36 = &off_101893728;
    *(void *)&__int128 v5 = 0x100000001LL;
    *((void *)&v5 + 1) = 0x100000001LL;
    __int128 v37 = v5;
    double v39 = &v40;
    *(void *)sub_100FE1BA0((uint64_t)&v36, 0LL, sub_100272D04(v1, 0LL) = sub_100FDC860;
    uint64_t v33 = 0x100000001LL;
    uint64_t v31 = &off_101893770;
    *(void *)&__int128 v6 = 0x100000001LL;
    *((void *)&v6 + 1) = 0x100000001LL;
    __int128 v32 = v6;
    uint64_t v34 = &v35;
    double v7 = *a2;
    double v8 = a2[3];
    double v9 = 0.95;
    if (v8 <= 0.95) {
      double v9 = a2[3];
    }
    if (v8 >= 0.001) {
      double v10 = v9;
    }
    else {
      double v10 = 0.001;
    }
    *(double *)&v30[1] = 1.0 - v10;
    *(double *)&v30[2] = v7;
    *(double *)int v30 = v10;
    *(void *)sub_100FE1BA0((uint64_t)&v31, 0LL, sub_100272D04(v1, 0LL) = v30;
    sub_100FDB67C(a1, (uint64_t)buf);
    sub_100FE22D8((uint64_t)&v41, (uint64_t)&v36);
    sub_100FE244C((uint64_t)v29, (uint64_t)&v31);
    int v11 = sub_100FDCBA8(a1, 2, (uint64_t)buf, 1, (uint64_t)&v41, (uint64_t)v29);
    if (v11)
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      uint64_t v12 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v48) = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM update failed,%d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        int v41 = 67109120;
        LODWORD(v42) = v11;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM update failed,%d",  &v41);
        unsigned int v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)",  "%s\n",  v13);
LABEL_29:
        if (v14 != buf) {
          free(v14);
        }
      }
    }

    else
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      double v17 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
      {
        double v18 = *a2;
        uint64_t v19 = *((void *)a2 + 3);
        uint64_t v20 = *(void *)(a1 + 248);
        *(_DWORD *)buf = 134218497;
        double v48 = v18;
        __int16 v49 = 2049;
        uint64_t v50 = v19;
        __int16 v51 = 2048;
        uint64_t v52 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_GpsModelOutput,evidenceCfatSec,%f,gpsModelOutput,%{private}f,EstimatorTimeCfaSec,%f",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        double v23 = *a2;
        uint64_t v24 = *((void *)a2 + 3);
        uint64_t v25 = *(void *)(a1 + 248);
        int v41 = 134218497;
        double v42 = v23;
        __int16 v43 = 2049;
        uint64_t v44 = v24;
        __int16 v45 = 2048;
        uint64_t v46 = v25;
        LODWORD(v28) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_GpsModelOutput,evidenceCfatSec,%f,gpsModelOutput,%{private}f,EstimatorTimeCfaSec,%f",  &v41,  v28);
        int v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      sub_100FDB140(a1);
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    BOOL v15 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM Not initialized",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      LOWORD(v41) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM Not initialized",  &v41,  v28);
      unsigned int v14 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)",  "%s\n",  v16);
      goto LABEL_29;
    }
  }

void sub_100FDFC2C(uint64_t a1, double *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  BOOL v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,ProcessEvidence(),Process WifiModelOutput",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,ProcessEvidence(),Process WifiModelOutput",  &v41,  2);
    BOOL v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  if (*(_BYTE *)(a1 + 240))
  {
    uint64_t v38 = 0x100000001LL;
    uint64_t v36 = &off_101893728;
    *(void *)&__int128 v5 = 0x100000001LL;
    *((void *)&v5 + 1) = 0x100000001LL;
    __int128 v37 = v5;
    double v39 = &v40;
    *(void *)sub_100FE1BA0((uint64_t)&v36, 0LL, sub_100272D04(v1, 0LL) = sub_100FDC860;
    uint64_t v33 = 0x100000001LL;
    uint64_t v31 = &off_101893770;
    *(void *)&__int128 v6 = 0x100000001LL;
    *((void *)&v6 + 1) = 0x100000001LL;
    __int128 v32 = v6;
    uint64_t v34 = &v35;
    double v7 = *a2;
    double v8 = a2[3];
    double v9 = 0.95;
    if (v8 <= 0.95) {
      double v9 = a2[3];
    }
    if (v8 >= 0.001) {
      double v10 = v9;
    }
    else {
      double v10 = 0.001;
    }
    *(double *)&v30[1] = 1.0 - v10;
    *(double *)&v30[2] = v7;
    *(double *)int v30 = v10;
    *(void *)sub_100FE1BA0((uint64_t)&v31, 0LL, sub_100272D04(v1, 0LL) = v30;
    sub_100FDB67C(a1, (uint64_t)buf);
    sub_100FE22D8((uint64_t)&v41, (uint64_t)&v36);
    sub_100FE244C((uint64_t)v29, (uint64_t)&v31);
    int v11 = sub_100FDCBA8(a1, 2, (uint64_t)buf, 1, (uint64_t)&v41, (uint64_t)v29);
    if (v11)
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      uint64_t v12 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v48) = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM update failed,%d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        int v41 = 67109120;
        LODWORD(v42) = v11;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM update failed,%d",  &v41);
        unsigned int v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)",  "%s\n",  v13);
LABEL_29:
        if (v14 != buf) {
          free(v14);
        }
      }
    }

    else
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      double v17 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
      {
        double v18 = *a2;
        uint64_t v19 = *((void *)a2 + 3);
        uint64_t v20 = *(void *)(a1 + 248);
        *(_DWORD *)buf = 134218497;
        double v48 = v18;
        __int16 v49 = 2049;
        uint64_t v50 = v19;
        __int16 v51 = 2048;
        uint64_t v52 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_WifiModelOutput,evidenceCfatSec,%f,wifiIndoorProb,%{private}f,EstimatorTimeCfaSec,%f",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        double v23 = *a2;
        uint64_t v24 = *((void *)a2 + 3);
        uint64_t v25 = *(void *)(a1 + 248);
        int v41 = 134218497;
        double v42 = v23;
        __int16 v43 = 2049;
        uint64_t v44 = v24;
        __int16 v45 = 2048;
        uint64_t v46 = v25;
        LODWORD(v28) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_WifiModelOutput,evidenceCfatSec,%f,wifiIndoorProb,%{private}f,EstimatorTimeCfaSec,%f",  &v41,  v28);
        int v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      sub_100FDB140(a1);
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    BOOL v15 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM Not initialized",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      LOWORD(v41) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM Not initialized",  &v41,  v28);
      unsigned int v14 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)",  "%s\n",  v16);
      goto LABEL_29;
    }
  }

void sub_100FE02C8(uint64_t a1, double *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  BOOL v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,ProcessEvidence(),Process AlsModelOutput",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,ProcessEvidence(),Process AlsModelOutput",  &v41,  2);
    BOOL v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  if (*(_BYTE *)(a1 + 240))
  {
    uint64_t v38 = 0x100000001LL;
    uint64_t v36 = &off_101893728;
    *(void *)&__int128 v5 = 0x100000001LL;
    *((void *)&v5 + 1) = 0x100000001LL;
    __int128 v37 = v5;
    double v39 = &v40;
    *(void *)sub_100FE1BA0((uint64_t)&v36, 0LL, sub_100272D04(v1, 0LL) = sub_100FDC860;
    uint64_t v33 = 0x100000001LL;
    uint64_t v31 = &off_101893770;
    *(void *)&__int128 v6 = 0x100000001LL;
    *((void *)&v6 + 1) = 0x100000001LL;
    __int128 v32 = v6;
    uint64_t v34 = &v35;
    double v7 = *a2;
    double v8 = a2[3];
    double v9 = 0.95;
    if (v8 <= 0.95) {
      double v9 = a2[3];
    }
    if (v8 >= 0.001) {
      double v10 = v9;
    }
    else {
      double v10 = 0.001;
    }
    v30[1] = v10;
    v30[2] = v7;
    v30[0] = 1.0 - v10;
    *(void *)sub_100FE1BA0((uint64_t)&v31, 0LL, sub_100272D04(v1, 0LL) = v30;
    sub_100FDB67C(a1, (uint64_t)buf);
    sub_100FE22D8((uint64_t)&v41, (uint64_t)&v36);
    sub_100FE244C((uint64_t)v29, (uint64_t)&v31);
    int v11 = sub_100FDCBA8(a1, 2, (uint64_t)buf, 1, (uint64_t)&v41, (uint64_t)v29);
    if (v11)
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      uint64_t v12 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v48) = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM update failed,%d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        int v41 = 67109120;
        LODWORD(v42) = v11;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM update failed,%d",  &v41);
        unsigned int v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)",  "%s\n",  v13);
LABEL_29:
        if (v14 != buf) {
          free(v14);
        }
      }
    }

    else
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      double v17 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
      {
        double v18 = *a2;
        uint64_t v19 = *((void *)a2 + 3);
        uint64_t v20 = *(void *)(a1 + 248);
        *(_DWORD *)buf = 134218497;
        double v48 = v18;
        __int16 v49 = 2049;
        uint64_t v50 = v19;
        __int16 v51 = 2048;
        uint64_t v52 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_AlsModelOutput,evidenceCfatSec,%f,alsOutdoorProb,%{private}f,EstimatorTimeCfaSec,%f",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        double v23 = *a2;
        uint64_t v24 = *((void *)a2 + 3);
        uint64_t v25 = *(void *)(a1 + 248);
        int v41 = 134218497;
        double v42 = v23;
        __int16 v43 = 2049;
        uint64_t v44 = v24;
        __int16 v45 = 2048;
        uint64_t v46 = v25;
        LODWORD(v28) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_AlsModelOutput,evidenceCfatSec,%f,alsOutdoorProb,%{private}f,EstimatorTimeCfaSec,%f",  &v41,  v28);
        int v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      sub_100FDB140(a1);
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    BOOL v15 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM Not initialized",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      LOWORD(v41) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM Not initialized",  &v41,  v28);
      unsigned int v14 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)",  "%s\n",  v16);
      goto LABEL_29;
    }
  }

BOOL sub_100FE0964(uint64_t a1, double a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  BOOL v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,predict()", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v52) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,predict()",  &v52,  2);
    uint64_t v29 = (uint8_t *)v28;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v28);
    if (v29 != buf) {
      free(v29);
    }
  }

  if (*(_BYTE *)(a1 + 240))
  {
    if (vabdd_f64(a2, *(double *)(a1 + 248)) < 2.22044605e-16)
    {
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      __int128 v5 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,predict(),Estimator time equal to current time",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        return 0LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      LOWORD(v52) = 0;
      LODWORD(v49) = 2;
      double v30 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,predict(),Estimator time equal to current time",  &v52,  v49);
      double v10 = v31;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v30);
LABEL_47:
      if (v10 != buf) {
        free(v10);
      }
      return 0LL;
    }

    double v51 = a2;
    __int128 v50 = *(_OWORD *)(a1 + 144);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    int v11 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 144);
      uint64_t v13 = *(void *)(a1 + 152);
      uint64_t v14 = *(void *)(a1 + 248);
      *(_DWORD *)buf = 134284033;
      uint64_t v69 = v12;
      __int16 v70 = 2049;
      uint64_t v71 = v13;
      __int16 v72 = 2048;
      uint64_t v73 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_TransitionProbability,transitionProbabilityIndoorGivenIndoor,%{private}f,transitionProbabilit yOutdoorGivenOutdoor,%{private}f,EstimatorTimeCfaSec,%f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      uint64_t v32 = *(void *)(a1 + 144);
      uint64_t v33 = *(void *)(a1 + 152);
      uint64_t v34 = *(void *)(a1 + 248);
      int v52 = 134284033;
      uint64_t v53 = v32;
      __int16 v54 = 2049;
      uint64_t v55 = v33;
      __int16 v56 = 2048;
      uint64_t v57 = v34;
      LODWORD(v49) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_TransitionProbability,transitionProbabilityIndoorGivenIndoor,%{private}f,transitionProbabilit yOutdoorGivenOutdoor,%{private}f,EstimatorTimeCfaSec,%f",  &v52,  v49,  v50,  *(void *)&v51);
      uint64_t v36 = (uint8_t *)v35;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v35);
      if (v36 != buf) {
        free(v36);
      }
    }

    int v15 = sub_100FE15B4( (_DWORD *)a1,  (unsigned int (*)(uint64_t, uint64_t (***)()))sub_100FE1288,  (uint64_t)&v50);
    BOOL v6 = v15 == 0;
    if (v15)
    {
      int v16 = v15;
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      double v17 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v69) = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,predict(),Failed,%d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        int v52 = 67109120;
        LODWORD(v53) = v16;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,predict(),Failed,%d",  &v52);
        uint64_t v38 = (uint8_t *)v37;
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v37);
        if (v38 != buf) {
          free(v38);
        }
      }

      *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x3FEE666666666666uLL);
    }

    else
    {
      *(double *)(a1 + 248) = a2;
      *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x3FEE666666666666uLL);
      sub_100FDB140(a1);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      double v18 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = *(void *)(a1 + 184);
        uint64_t v20 = *(void *)(a1 + 192);
        uint64_t v21 = *(void *)(a1 + 200);
        uint64_t v22 = *(void *)(a1 + 208);
        int v23 = *(unsigned __int8 *)(a1 + 232);
        uint64_t v24 = *(void *)(a1 + 216);
        uint64_t v25 = *(void *)(a1 + 224);
        uint64_t v26 = *(void *)(a1 + 248);
        *(_DWORD *)buf = 134219777;
        uint64_t v69 = v19;
        __int16 v70 = 2048;
        uint64_t v71 = v20;
        __int16 v72 = 2049;
        uint64_t v73 = v21;
        __int16 v74 = 2049;
        uint64_t v75 = v22;
        __int16 v76 = 2049;
        uint64_t v77 = v24;
        __int16 v78 = 1025;
        int v79 = v23;
        __int16 v80 = 2049;
        uint64_t v81 = v25;
        __int16 v82 = 2048;
        uint64_t v83 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_predict,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld,estimated StateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,EstimatorTimeCfaSec,%f",  buf,  0x4Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934940 != -1) {
          dispatch_once(&qword_101934940, &stru_101893560);
        }
        uint64_t v39 = *(void *)(a1 + 184);
        uint64_t v40 = *(void *)(a1 + 192);
        uint64_t v41 = *(void *)(a1 + 200);
        uint64_t v42 = *(void *)(a1 + 208);
        int v43 = *(unsigned __int8 *)(a1 + 232);
        uint64_t v44 = *(void *)(a1 + 216);
        uint64_t v45 = *(void *)(a1 + 224);
        uint64_t v46 = *(void *)(a1 + 248);
        int v52 = 134219777;
        uint64_t v53 = v39;
        __int16 v54 = 2048;
        uint64_t v55 = v40;
        __int16 v56 = 2049;
        uint64_t v57 = v41;
        __int16 v58 = 2049;
        uint64_t v59 = v42;
        __int16 v60 = 2049;
        uint64_t v61 = v44;
        __int16 v62 = 1025;
        int v63 = v43;
        __int16 v64 = 2049;
        uint64_t v65 = v45;
        __int16 v66 = 2048;
        uint64_t v67 = v46;
        LODWORD(v49) = 78;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_predict,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld,estimated StateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,EstimatorTimeCfaSec,%f",  &v52,  v49);
        double v48 = (uint8_t *)v47;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v47);
        if (v48 != buf) {
          free(v48);
        }
      }
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    double v7 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "CLOutdoorEstimator,predict(),HMM Not initialized",  buf,  2u);
    }

    BOOL v6 = 0LL;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101893560);
      }
      LOWORD(v52) = 0;
      LODWORD(v49) = 2;
      double v8 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "CLOutdoorEstimator,predict(),HMM Not initialized",  &v52,  v49);
      double v10 = v9;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v8);
      goto LABEL_47;
    }
  }

  return v6;
}

uint64_t sub_100FE1288(double *a1, _DWORD *a2)
{
  double v2 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v2 >= 0.0 ? (BOOL v3 = v2 <= 1.0) : (BOOL v3 = 0), !v3))
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    BOOL v4 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "OutdoorEstimatorTransitionProbability,Invalid Indoor Given Indoor Probability",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v13[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "OutdoorEstimatorTransitionProbability,Invalid Indoor Given Indoor Probability",  v13,  2,  v13[0]);
LABEL_29:
    uint64_t v12 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "int32_t CLOutdoorEstimator_Type::OutdoorEstimatorTransitionProbability(const void *, cnmatrix::CNMatrix<max_nx, ma x_nx, T> &) [max_nx = 2U, T = double]",  "%s\n",  v9);
    if (v12 != buf) {
      free(v12);
    }
    return 0xFFFFFFFFLL;
  }

  double v6 = a1[1];
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v6 >= 0.0 ? (BOOL v7 = v6 <= 1.0) : (BOOL v7 = 0), !v7))
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    double v8 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "OutdoorEstimatorTransitionProbability,Invalid Outdoor Given Outdoor Probability",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    LOWORD(v13[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  16LL,  "OutdoorEstimatorTransitionProbability,Invalid Outdoor Given Outdoor Probability",  v13,  2,  v13[0]);
    goto LABEL_29;
  }

  sub_100FE2588(a2, 2u, 2u);
  *(double *)sub_100FE1BA0((uint64_t)a2, 0LL, sub_100272D04(v1, 0LL) = v2;
  *(double *)sub_100FE1BA0((uint64_t)a2, 0LL, 1LL) = 1.0 - v6;
  *(double *)sub_100FE1BA0((uint64_t)a2, 1LL, sub_100272D04(v1, 0LL) = 1.0 - v2;
  int v11 = (double *)sub_100FE1BA0((uint64_t)a2, 1LL, 1LL);
  uint64_t result = 0LL;
  double *v11 = v6;
  return result;
}

uint64_t sub_100FE15B4( _DWORD *a1, unsigned int (*a2)(uint64_t, uint64_t (***)()), uint64_t a3)
{
  if (!a1[30]) {
    sub_100FE1FFC((uint64_t)(a1 + 16), (uint64_t)(a1 + 2));
  }
  unsigned int v6 = a1[18];
  unsigned int v7 = a1[19];
  if (v6 <= v7) {
    int v8 = a1[19];
  }
  else {
    int v8 = a1[18];
  }
  if (v7) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    int v10 = 0;
  }
  else {
    int v10 = v8;
  }
  return sub_100FE25C4((uint64_t)a1, v10, (uint64_t)(a1 + 16), a2, a3);
}

void sub_100FE161C()
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  v0 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator,ProcessEvidence(),Process RouteHint",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    v3[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator,ProcessEvidence(),Process RouteHint",  v3,  2);
    double v2 = (uint8_t *)v1;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::RouteHintEvidence &)",  "%s\n",  v1);
    if (v2 != buf) {
      free(v2);
    }
  }

void sub_100FE17A0(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 160) = a2;
  *(_DWORD *)(a1 + 164) = a3;
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101893560);
  }
  BOOL v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)buf = 67174657;
    int v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_SignalEnvironmentInfo,signalEnvironmentType,%{private}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101893560);
    }
    int v6 = *(_DWORD *)(a1 + 160);
    v9[0] = 67174657;
    v9[1] = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_SignalEnvironmentInfo,signalEnvironmentType,%{private}d",  v9,  8);
    int v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorEstimator::setSignalEnvironmentInfo(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, C LSignalEnvironmentProvider_Type::SignalEnvironmentFidelityLevel)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

void sub_100FE1954(id a1)
{
  qword_101934948 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

uint64_t sub_100FE1980(uint64_t a1)
{
  *(void *)(a1 + 8) = &off_101893590;
  *(void *)a1 = &off_101893538;
  *(void *)(a1 + 32) = 0x100000002LL;
  *(_OWORD *)(a1 + 16) = xmmword_1013BE330;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 64) = &off_101893590;
  double v2 = (_DWORD *)(a1 + 64);
  *(void *)(a1 + 88) = 0x100000002LL;
  *(_OWORD *)(a1 + 72) = xmmword_1013BE330;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 128) = 0x3DDB7CDFD9D7BDBBLL;
  sub_100FE1A58((_DWORD *)(a1 + 8), 0, 0);
  sub_100FE1A58(v2, 0, 0);
  *(_DWORD *)(a1 + 120) = 1;
  return a1;
}

void sub_100FE1A40(_Unwind_Exception *a1)
{
  *double v2 = off_1018935E8;
  *uint64_t v1 = off_1018935E8;
  _Unwind_Resume(a1);
}

_DWORD *sub_100FE1A58(_DWORD *result, int a2, int a3)
{
  if (a2 < 0) {
    sub_10127E6C4();
  }
  if (result[6] < a2) {
    sub_10127E6EC();
  }
  if (a3 < 0) {
    sub_10127E714();
  }
  if (result[7] < a3) {
    sub_10127E73C();
  }
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

uint64_t sub_100FE1AA4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100FE1AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100FE1AD0(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 12);
    if (v5 >= 2)
    {
      if (!a2) {
        sub_10127E764(a1, 0LL, a3);
      }
      int v7 = v5 + v3 - *(_DWORD *)(a1 + 20);
      if (v7 <= 0) {
        sub_10127E788(a1, (uint64_t)a2, a3);
      }
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v8 = *(_DWORD *)(a1 + 16);
      if (v8 >= 3)
      {
        uint64_t v9 = (v8 - 1);
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = 1LL;
        do
        {
          uint64_t v12 = &a2[v11];
          if (!a2[v11])
          {
            uint64_t v13 = *(void *)(v10 + 8 * v11);
            int v14 = v11;
            do
            {
              int v14 = v14 * v7 % (int)v9;
              uint64_t v15 = *(void *)(v10 + 8LL * v14);
              *(void *)(v10 + 8LL * v14) = v13;
              char *v12 = 1;
              uint64_t v12 = &a2[v14];
              uint64_t v13 = v15;
            }

            while (!*v12);
          }

          ++v11;
        }

        while (v11 != v9);
      }
    }
  }

uint64_t sub_100FE1BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_10127E7AC(a1, a2, a3);
  }
  unsigned int v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0) {
    sub_10127E7D0(a1, a2, a3);
  }
  return v3 + 8LL * v4;
}

double sub_100FE1BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_10127E818(a1, a2, a3);
  }
  if ((a2 & 0x80000000) != 0) {
    sub_10127E83C(a1, a2, a3);
  }
  return *(double *)(v3 + 8LL * a2);
}

_DWORD *sub_100FE1C18(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 1)
  {
    unsigned int v5 = *(_DWORD *)(a3 + 28);
    unsigned int v6 = *(_DWORD *)(a1 + 12);
    if (v5 < v6) {
      sub_10127E8AC();
    }
    uint64_t result = sub_100FE1A58((_DWORD *)a3, 1, v6);
    uint64_t v8 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v8)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a3 + 32);
      int v13 = 1;
      do
      {
        double v14 = *(double *)(v11 + 8LL * (v10 * v9));
        uint64_t v15 = v10 - 1;
        unsigned int v16 = v13;
        if (v10 >= 2)
        {
          do
          {
            double v14 = v14 + *(double *)(v11 + 8LL * v16++);
            --v15;
          }

          while (v15);
        }

        *(double *)(v12 + 8 * v9++) = v14;
        v13 += v10;
      }

      while (v9 != v8);
    }
  }

  else
  {
    unsigned int v17 = *(_DWORD *)(a1 + 8);
    if (*(_DWORD *)(a3 + 24) < v17) {
      sub_10127E8D4();
    }
    uint64_t result = sub_100FE1A58((_DWORD *)a3, v17, 1);
    uint64_t v18 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v18)
    {
      uint64_t v19 = *(uint64_t **)(a1 + 32);
      uint64_t v20 = *(void **)(a3 + 32);
      uint64_t v21 = *(unsigned int *)(a1 + 8);
      do
      {
        uint64_t v22 = *v19++;
        *v20++ = v22;
        --v21;
      }

      while (v21);
    }

    unsigned int v23 = *(_DWORD *)(a1 + 12);
    if (v23 >= 2)
    {
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = *(double **)(a3 + 32);
      int v26 = 1;
      unsigned int v27 = v18;
      do
      {
        uint64_t v28 = v18;
        unsigned int v29 = v27;
        double v30 = v25;
        if ((_DWORD)v18)
        {
          do
          {
            double *v30 = *(double *)(v24 + 8LL * v29) + *v30;
            ++v30;
            ++v29;
            --v28;
          }

          while (v28);
        }

        ++v26;
        v27 += v18;
      }

      while (v26 != v23);
    }
  }

  return result;
}

float64x2_t sub_100FE1D70(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 == a2) {
    sub_10127E8FC();
  }
  sub_100FE1A58((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 > 3)
  {
    uint64_t v10 = *(float64x2_t **)(a1 + 32);
    uint64_t v11 = *(float64x2_t **)(a2 + 32);
    uint64_t v12 = (float64x2_t *)((char *)v10 + 8 * (v6 - 2));
    int v13 = (float64x2_t *)((char *)v11 + 8 * (v6 - 2));
    uint64_t v14 = (v6 - 1) >> 1;
    do
    {
      float64x2_t v15 = *v10++;
      *v11++ = vmulq_n_f64(v15, a3);
      --v14;
    }

    while (v14);
    float64x2_t result = vmulq_n_f64(*v12, a3);
    float64x2_t *v13 = result;
  }

  else if ((int)v6 >= 1)
  {
    int v7 = *(double **)(a1 + 32);
    uint64_t v8 = *(double **)(a2 + 32);
    do
    {
      double v9 = *v7++;
      result.f64[0] = v9 * a3;
      *v8++ = v9 * a3;
      --v6;
    }

    while (v6);
  }

  return result;
}

_DWORD *sub_100FE1E2C(_DWORD *result, int a2, int a3)
{
  if (a2 < 0) {
    sub_10127E924();
  }
  if (a3 < 0) {
    sub_10127E94C();
  }
  if (a3 * a2 != result[4]) {
    sub_10127E9C4();
  }
  if (result[6] < a2) {
    sub_10127E974();
  }
  if (result[7] < a3) {
    sub_10127E99C();
  }
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

__n128 sub_100FE1E88(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000002LL;
  *(void *)(a1 + 24) = 0x100000002LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = &off_101893590;
  *(void *)(a1 + 8) = 0LL;
  if (a1 == a2)
  {
    unsigned int v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    uint64_t v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }

  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    unsigned int v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    uint64_t v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }

  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    unsigned int v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }

  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    unsigned int v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }

  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    unsigned int v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }

  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(__int128 **)(a2 + 32);
    uint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      __int128 v15 = *v14++;
      *v6++ = v15;
      --v13;
    }

    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }

  else if ((_DWORD)v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)uint64_t v6 = v9;
      uint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }

    while (v5);
  }

  return result;
}

void sub_100FE1FE8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1018935E8;
  _Unwind_Resume(a1);
}

__n128 sub_100FE1FFC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a1 + 24) < v2) {
      sub_10127E9EC();
    }
    unsigned int v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(a1 + 28) < v3) {
      sub_10127EA14();
    }
    *(_DWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 12) = v3;
    uint64_t v4 = v3 * v2;
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v2;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v10 = *(_OWORD **)(a1 + 32);
      uint64_t v11 = *(__int128 **)(a2 + 32);
      uint64_t v12 = (__n128 *)((char *)v10 + 8 * (v5 - 2));
      uint64_t v13 = (__n128 *)((char *)v11 + 8 * (v5 - 2));
      uint64_t v14 = (v5 - 1) >> 1;
      do
      {
        __int128 v15 = *v11++;
        *v10++ = v15;
        --v14;
      }

      while (v14);
      __n128 result = *v13;
      __n128 *v12 = *v13;
    }

    else if ((int)v4 >= 1)
    {
      uint64_t v6 = *(unint64_t **)(a2 + 32);
      int v7 = *(unint64_t **)(a1 + 32);
      do
      {
        unint64_t v8 = *v6++;
        result.n128_u64[0] = v8;
        *v7++ = v8;
        --v4;
      }

      while (v4);
    }
  }

  return result;
}

uint64_t sub_100FE20AC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_10127EA3C();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_10127EA64();
  }
  return v2 + 8LL * a2;
}

_DWORD *sub_100FE20E4(_DWORD *result, unsigned int a2, int a3)
{
  if (result[6] < a2) {
    sub_10127EAB4();
  }
  if (a3 < 0) {
    sub_10127EADC();
  }
  if (result[7] < a3) {
    sub_10127EB04();
  }
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

void sub_100FE2128(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100FE2148(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 12);
    if (v5 >= 2)
    {
      if (!a2) {
        sub_10127E764(a1, 0LL, a3);
      }
      int v7 = v5 + v3 - *(_DWORD *)(a1 + 20);
      if (v7 <= 0) {
        sub_10127E788(a1, (uint64_t)a2, a3);
      }
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v8 = *(_DWORD *)(a1 + 16);
      if (v8 >= 3)
      {
        uint64_t v9 = (v8 - 1);
        uint64_t v10 = 1LL;
        do
        {
          uint64_t v11 = &a2[v10];
          if (!a2[v10])
          {
            uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8 * v10);
            int v13 = v10;
            do
            {
              int v13 = v13 * v7 % (int)v9;
              uint64_t v14 = *(void *)(a1 + 32);
              uint64_t v15 = *(void *)(v14 + 8LL * v13);
              *(void *)(v14 + 8LL * v13) = v12;
              char *v11 = 1;
              uint64_t v11 = &a2[v13];
              uint64_t v12 = v15;
            }

            while (!*v11);
          }

          ++v10;
        }

        while (v10 != v9);
      }
    }
  }

uint64_t sub_100FE221C(uint64_t result, double a2)
{
  uint64_t v2 = *(int64x2_t **)(result + 32);
  if (!v2) {
    sub_10127EB2C();
  }
  uint64_t v3 = *(unsigned int *)(result + 16);
  if ((int)v3 > 3)
  {
    uint64_t v4 = (int64x2_t *)((char *)v2 + 8 * (v3 - 2));
    uint64_t v5 = (v3 - 1) >> 1;
    int64x2_t v6 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
    do
    {
      *v2++ = v6;
      --v5;
    }

    while (v5);
    *uint64_t v4 = v6;
  }

  else if ((int)v3 >= 1)
  {
    do
    {
      *(double *)v2->i64 = a2;
      uint64_t v2 = (int64x2_t *)((char *)v2 + 8);
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t sub_100FE2280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_10127E818(a1, a2, a3);
  }
  if ((a2 & 0x80000000) != 0) {
    sub_10127E83C(a1, a2, a3);
  }
  return *(void *)(v3 + 8LL * a2);
}

void sub_100FE22B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100FE22D8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x100000002LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = &off_101893618;
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    uint64_t v9 = "this->max_num_rows_ >= num_rows";
    int v10 = 422;
LABEL_11:
    uint64_t v11 = "cnmatrixbase.h";
    uint64_t v12 = "SetMatrixSize";
    goto LABEL_15;
  }

  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5 >= 2)
  {
    uint64_t v9 = "this->max_num_cols_ >= num_cols";
    int v10 = 423;
    goto LABEL_11;
  }

  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v5;
  int v6 = v5 * v3;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v3;
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    uint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
LABEL_14:
    uint64_t v11 = "cnmatrix.h";
    uint64_t v12 = "CNMatrix";
LABEL_15:
    __assert_rtn(v12, v11, v10, v9);
  }

  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
    goto LABEL_14;
  }

  if (v6)
  {
    uint64_t v7 = 0LL;
    do
    {
      *(void *)(*(void *)(a1 + 32) + 8 * v7) = sub_100FE2414(a2, v7);
      ++v7;
    }

    while (v7 < *(int *)(a1 + 16));
  }

  return a1;
}

void sub_100FE23FC(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_101893670;
  _Unwind_Resume(a1);
}

uint64_t sub_100FE2414(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_10127EB54();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_10127EB7C();
  }
  return *(void *)(v2 + 8LL * a2);
}

uint64_t sub_100FE244C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x100000002LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = &off_1018936A0;
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    uint64_t v9 = "this->max_num_rows_ >= num_rows";
    int v10 = 422;
LABEL_11:
    uint64_t v11 = "cnmatrixbase.h";
    uint64_t v12 = "SetMatrixSize";
    goto LABEL_15;
  }

  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5 >= 2)
  {
    uint64_t v9 = "this->max_num_cols_ >= num_cols";
    int v10 = 423;
    goto LABEL_11;
  }

  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v5;
  int v6 = v5 * v3;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v3;
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    uint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
LABEL_14:
    uint64_t v11 = "cnmatrix.h";
    uint64_t v12 = "CNMatrix";
LABEL_15:
    __assert_rtn(v12, v11, v10, v9);
  }

  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
    goto LABEL_14;
  }

  if (v6)
  {
    uint64_t v7 = 0LL;
    do
    {
      *(void *)(*(void *)(a1 + 32) + 8 * v7) = sub_100FE2414(a2, v7);
      ++v7;
    }

    while (v7 < *(int *)(a1 + 16));
  }

  return a1;
}

void sub_100FE2570(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1018936F8;
  _Unwind_Resume(a1);
}

_DWORD *sub_100FE2588(_DWORD *result, unsigned int a2, unsigned int a3)
{
  if (result[6] < a2) {
    sub_10127EBCC();
  }
  if (result[7] < a3) {
    sub_10127EBF4();
  }
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

uint64_t sub_100FE25C4( uint64_t a1, int a2, uint64_t a3, unsigned int (*a4)(uint64_t, uint64_t (***)()), uint64_t a5)
{
  if (a2 <= 0) {
    sub_10127EC1C();
  }
  double v10 = *(double *)(a1 + 128);
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  unsigned int v12 = *(_DWORD *)(a3 + 12);
  if (v11) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (v11 <= v12) {
      unsigned int v11 = *(_DWORD *)(a3 + 12);
    }
    if (v11 != a2) {
      sub_10127EC94();
    }
    uint64_t v14 = 0LL;
    do
    {
      double v15 = sub_100FE1BE0(a3, v14, a3);
      if (v15 < 0.0 || v15 > 1.0) {
        sub_10127EC6C();
      }
      uint64_t v14 = (v14 + 1);
    }

    while (a2 != (_DWORD)v14);
    unsigned int v11 = *(_DWORD *)(a3 + 8);
    unsigned int v12 = *(_DWORD *)(a3 + 12);
  }

  if (v11) {
    BOOL v17 = v12 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v38 = 0x100000002LL;
    uint64_t v39 = 0LL;
    uint64_t v36 = &off_101893590;
    __int128 v37 = 0uLL;
    int32x4_t v18 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000LL), 0);
    v18.i32[1] = 1;
    __int128 v37 = (__int128)v18;
    uint64_t v39 = v40;
    sub_100FE1A58(&v36, a2, 1);
    sub_100FE221C((uint64_t)&v36, 1.0);
    uint64_t v33 = 0x100000002LL;
    uint64_t v31 = &off_101893590;
    __int128 v32 = xmmword_1013BE330;
    uint64_t v34 = (double *)v35;
    sub_100FE1D70((uint64_t)&v36, (uint64_t)&v31, 1.0 / (double)a2);
    sub_100FE1FFC(a1 + 64, (uint64_t)&v31);
  }

  else
  {
    uint64_t v33 = 0x100000002LL;
    uint64_t v31 = &off_101893590;
    __int128 v32 = xmmword_1013BE330;
    uint64_t v34 = (double *)v35;
    uint64_t v19 = (cnprint::CNPrinter *)sub_100FE1C18(a3, 1, (uint64_t)&v31);
    if (DWORD2(v32) != 1) {
      sub_10127E538((uint64_t)v19, v20, v21);
    }
    double v22 = *v34;
    if (*v34 <= 0.0) {
      sub_10127EC44();
    }
    if (fabs(v22 + -1.0) <= v10)
    {
      sub_100FE1E88((uint64_t)&v31, a3);
      sub_100FE1E2C(&v31, a2, 1);
      sub_100FE1FFC(a1 + 64, (uint64_t)&v31);
    }

    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v19) <= 1)
      {
        LOWORD(v31) = 2;
        LOBYTE(v36) = 1;
        cnprint::CNPrinter::Print(&v31, &v36, "WARNING: HMM prediction passed a non-normalized probability vector.");
      }

      sub_100FE1E88((uint64_t)&v36, a3);
      sub_100FE1E2C(&v36, a2, 1);
      uint64_t v33 = 0x100000002LL;
      uint64_t v31 = &off_101893590;
      __int128 v32 = xmmword_1013BE330;
      uint64_t v34 = (double *)v35;
      sub_100FE1D70((uint64_t)&v36, (uint64_t)&v31, 1.0 / v22);
      sub_100FE1FFC(a1 + 64, (uint64_t)&v31);
    }
  }

  *(_DWORD *)(a1 + 120) = 1;
  uint64_t v33 = 0x200000002LL;
  uint64_t v31 = &off_1018937B8;
  __int128 v32 = xmmword_1013BE370;
  uint64_t v34 = (double *)v35;
  if (a4(a5, &v31))
  {
    LOWORD(v36) = 2;
    LOBYTE(v26) = 4;
    cnprint::CNPrinter::Print(&v36, &v26, "ERROR: HMM transition probability function failed.");
    return 27LL;
  }

  else
  {
    BOOL v24 = sub_100FE2A80(a1, a2, (uint64_t)&v31);
    if (v24)
    {
      uint64_t v38 = 0x100000002LL;
      uint64_t v36 = &off_101893590;
      __int128 v37 = xmmword_1013BE330;
      uint64_t v39 = v40;
      sub_100FE2BAC((uint64_t)&v31, a1 + 64, (uint64_t)&v36);
      sub_100FE1FFC(a1 + 8, (uint64_t)&v36);
      uint64_t v28 = 0x100000002LL;
      int v26 = &off_101893590;
      __int128 v27 = xmmword_1013BE330;
      unsigned int v29 = (double *)&v30;
      sub_100FE1C18(a1 + 8, 1, (uint64_t)&v26);
      if (DWORD2(v27) != 1) {
        __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
      }
      double v25 = 1.0 / *v29;
      uint64_t v38 = 0x100000002LL;
      uint64_t v36 = &off_101893590;
      __int128 v37 = xmmword_1013BE330;
      uint64_t v39 = v40;
      sub_100FE1D70(a1 + 8, (uint64_t)&v36, v25);
      sub_100FE1FFC(a1 + 8, (uint64_t)&v36);
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 120) = 0;
    }

    else
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v24) <= 1)
      {
        LOWORD(v36) = 2;
        LOBYTE(v26) = 1;
        cnprint::CNPrinter::Print(&v36, &v26, "ERROR: HMM transition probability matrix is invalid.");
      }

      return 28LL;
    }
  }

  return result;
}

BOOL sub_100FE2A80(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 <= 0) {
    sub_10127ECBC();
  }
  if (*(_DWORD *)(a3 + 8) != a2 || *(_DWORD *)(a3 + 12) != a2) {
    sub_10127ECE4();
  }
  BOOL v6 = 0;
  int v7 = 0;
  double v8 = *(double *)(a1 + 128);
LABEL_8:
  int v9 = 0;
  double v10 = 0.0;
  while (1)
  {
    double v11 = sub_100FE2B6C(a3, v9, v7);
    if (v11 < 0.0 || v11 > 1.0) {
      return v6;
    }
    double v10 = v10 + v11;
    if (a2 == ++v9)
    {
      if (fabs(v10 + -1.0) <= v8)
      {
        BOOL v6 = ++v7 >= a2;
        if (v7 != a2) {
          goto LABEL_8;
        }
      }

      return v6;
    }
  }

void sub_100FE2B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double sub_100FE2B6C(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_10127ED0C();
  }
  unsigned int v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0) {
    sub_10127ED34();
  }
  return *(double *)(v3 + 8LL * v4);
}

void sub_100FE2BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t __ldb = *(unsigned int *)(a1 + 12);
  if ((_DWORD)__ldb != *(_DWORD *)(a2 + 8)) {
    sub_10127EDD4();
  }
  if (a1 == a3) {
    sub_10127ED84();
  }
  if (a2 == a3) {
    sub_10127EDAC();
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  sub_100FE1A58((_DWORD *)a3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a2 + 12));
  else {
    int v9 = __ldb;
  }
  double v10 = *(const double **)(a1 + 32);
  if (v9 > 5)
  {
    cblas_dgemm( CblasColMajor,  CblasNoTrans,  CblasNoTrans,  v7,  v8,  __ldb,  1.0,  v10,  v7,  *(const double **)(a2 + 32),  __ldb,  0.0,  *(double **)(a3 + 32),  *(_DWORD *)(a3 + 8));
  }

  else if ((_DWORD)v8)
  {
    uint64_t v11 = 0LL;
    unsigned int v12 = *(double **)(a2 + 32);
    uint64_t v13 = *(void *)(a3 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        uint64_t v14 = 0LL;
        double v15 = (double *)v10;
        do
        {
          double v16 = 0.0;
          if ((_DWORD)__ldb)
          {
            uint64_t v17 = __ldb;
            int32x4_t v18 = v12;
            uint64_t v19 = v15;
            do
            {
              double v20 = *v18++;
              double v16 = v16 + *v19 * v20;
              v19 += v7;
              --v17;
            }

            while (v17);
          }

          *(double *)(v13 + 8 * (v11 * v7 + v14++)) = v16;
          ++v15;
        }

        while (v14 != v7);
      }

      ++v11;
      v12 += __ldb;
    }

    while (v11 != v8);
  }

void sub_100FE2D0C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100FE2D14(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100FE2D1C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100FE2D24(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100FE2D2C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100FE2D34(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100FE2D3C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100FE2D44(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100FE2D4C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

std::string *sub_100FE2D54@<X0>(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 95) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 163) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  uint64_t result = std::string::operator=((std::string *)(a2 + 104), __str);
  std::string::size_type size = __str->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size) {
    *(_BYTE *)(a2 + 96) = 1;
  }
  return result;
}

void sub_100FE2DC8(_Unwind_Exception *a1)
{
}

void sub_100FE2DDC(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 95) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  uint64_t v3 = (char *)(a2 + 48);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 163) = 0u;
  std::string::operator=((std::string *)(a2 + 48), __str);
  *(_WORD *)(a2 + 97) = 0;
  if (*(char *)(a2 + 71) < 0)
  {
    if (!*(void *)(a2 + 56)) {
      return;
    }
    uint64_t v3 = *(char **)v3;
  }

  else if (!*(_BYTE *)(a2 + 71))
  {
    return;
  }

  unsigned int v4 = (__CFString *)sub_1002A6F04(v3);
  unsigned int v5 = v4;
  if (v4)
  {
    if (sub_1002965E4(v4)) {
      *(_BYTE *)(a2 + 97) = 1;
    }
    if (sub_1002967F4(v5)) {
      *(_BYTE *)(a2 + 98) = 1;
    }
    CFRelease(v5);
  }

void sub_100FE2E94(_Unwind_Exception *a1)
{
}

std::string *sub_100FE2EAC@<X0>(std::string *a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  return std::string::operator=(a3 + 3, a2);
}

void sub_100FE2EDC(_Unwind_Exception *a1)
{
}

void sub_100FE2EF0(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  signed __int8 size = __str->__r_.__value_.__s.__size_;
  if (size >= 0) {
    uint64_t v5 = __str->__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v5 = __str->__r_.__value_.__l.__size_;
  }
  if (size >= 0) {
    BOOL v6 = __str;
  }
  else {
    BOOL v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = (std::string *)((char *)v6 + v5);
  if (v5 >= 31)
  {
    uint64_t v8 = v5;
    int v9 = v6;
    do
    {
      double v10 = (std::string *)memchr(v9, 99, v8 - 30);
      if (!v10) {
        break;
      }
      if (v10->__r_.__value_.__r.__words[0] == 0x6C7070612E6D6F63LL
        && v10->__r_.__value_.__l.__size_ == 0x697461636F6C2E65LL
        && v10->__r_.__value_.__l.__cap_ == 0x636578652E646E6FLL
        && *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[2] + 7) == 0x2D656C6261747563LL)
      {
        if (v10 == v7 || v10 != v6) {
          break;
        }
        *(_DWORD *)(a2 + 95) = 0;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 104) = 0u;
        *(_OWORD *)(a2 + 120) = 0u;
        *(_OWORD *)(a2 + 136) = 0u;
        *(_OWORD *)(a2 + 152) = 0u;
        *(_OWORD *)(a2 + 163) = 0u;
        std::string::basic_string(&__p, __str, 0x1FuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
        std::string::operator=((std::string *)(a2 + 24), &__p);
LABEL_43:
        return;
      }

      int v9 = (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + 1);
      uint64_t v8 = (char *)v7 - (char *)v9;
    }

    while ((char *)v7 - (char *)v9 >= 31);
  }

  if (v5 >= 27)
  {
    uint64_t v14 = v6;
    do
    {
      double v15 = (std::string *)memchr(v14, 99, v5 - 26);
      if (!v15) {
        break;
      }
      if (v15->__r_.__value_.__r.__words[0] == 0x6C7070612E6D6F63LL
        && v15->__r_.__value_.__l.__size_ == 0x697461636F6C2E65LL
        && v15->__r_.__value_.__l.__cap_ == 0x646E75622E646E6FLL
        && *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[2] + 3) == 0x2D656C646E75622ELL)
      {
        if (v15 != v7 && v15 == v6)
        {
          std::string::basic_string(&__p, __str, 0x1BuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
          sub_100FE2DDC(&__p, a2);
          goto LABEL_43;
        }

        break;
      }

      uint64_t v14 = (std::string *)((char *)&v15->__r_.__value_.__l.__data_ + 1);
      uint64_t v5 = (char *)v7 - (char *)v14;
    }

    while ((char *)v7 - (char *)v14 >= 27);
  }

  sub_100FE2D54(__str, a2);
}

void sub_100FE3144( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FE3188(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  if ((_os_feature_enabled_impl("CoreLocation", "cl_pula") & 1) != 0)
  {
    *(_DWORD *)(a2 + 95) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 163) = 0u;
    signed __int8 size = a1->__r_.__value_.__s.__size_;
    if (size >= 0) {
      int64_t v5 = a1->__r_.__value_.__s.__size_;
    }
    else {
      int64_t v5 = a1->__r_.__value_.__l.__size_;
    }
    if (size >= 0) {
      std::string::size_type v6 = (std::string::size_type)a1;
    }
    else {
      std::string::size_type v6 = a1->__r_.__value_.__r.__words[0];
    }
    if (v5 >= 1)
    {
      uint64_t v7 = (_BYTE *)(v6 + v5);
      uint64_t v8 = (const void *)v6;
      do
      {
        int v9 = memchr(v8, 58, v5);
        if (!v9) {
          break;
        }
        if (*v9 == 58)
        {
          if (v9 == v7) {
            break;
          }
          std::string::size_type v10 = (std::string::size_type)&v9[-v6];
          if (v10 == -1LL) {
            break;
          }
          std::string::basic_string(&v15, a1, v10 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
          sub_100FE2EF0(&v15, (uint64_t)v17);
          sub_1011DBE2C(a2, (__int128 *)v17);
          if (v28 < 0) {
            operator delete(__p);
          }
          if (v26 < 0) {
            operator delete(v25);
          }
          if (v24 < 0) {
            operator delete(v23);
          }
          if (v22 < 0) {
            operator delete(v21);
          }
          if (v20 < 0) {
            operator delete(v19);
          }
          if (v18 < 0) {
            operator delete(*(void **)&v17[24]);
          }
          if ((v17[23] & 0x80000000) != 0) {
            operator delete(*(void **)v17);
          }
          std::string::basic_string((std::string *)v17, a1, 0LL, v10, (std::allocator<char> *)&v15);
          *(_OWORD *)a2 = *(_OWORD *)v17;
          *(void *)(a2 + 16) = *(void *)&v17[16];
          return;
        }

        uint64_t v8 = v9 + 1;
        int64_t v5 = v7 - (_BYTE *)v8;
      }

      while (v7 - (_BYTE *)v8 >= 1);
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101893800);
    }
    uint64_t v11 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      unsigned int v12 = (a1->__r_.__value_.__s.__size_ & 0x80u) == 0 ? a1 : (std::string *)a1->__r_.__value_.__r.__words[0];
      *(void *)uint64_t v17 = 68289282LL;
      *(_WORD *)&v17[8] = 2082;
      *(void *)&v17[10] = "";
      *(_WORD *)&v17[18] = 2082;
      *(void *)&v17[20] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#Multi-User clientKey doesn't have userName!, clientKey:%{public, location:escape_only}s}",  v17,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101893800);
      }
    }

    uint64_t v13 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v14 = a1;
      }
      else {
        uint64_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      *(void *)uint64_t v17 = 68289282LL;
      *(_WORD *)&v17[8] = 2082;
      *(void *)&v17[10] = "";
      *(_WORD *)&v17[18] = 2082;
      *(void *)&v17[20] = v14;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Multi-User clientKey doesn't have userName!",  "{msg%{public}.0s:#Multi-User clientKey doesn't have userName!, clientKey:%{public, location:escape_only}s}",  v17,  0x1Cu);
    }
  }

  else
  {
    sub_100FE2EF0(a1, a2);
  }

void sub_100FE3500( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

BOOL sub_100FE3530(char **a1)
{
  char v1 = *((_BYTE *)a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v2 = (uint64_t)a1[1];
  }
  if (v1 >= 0) {
    uint64_t v3 = (char *)a1;
  }
  else {
    uint64_t v3 = *a1;
  }
  unsigned int v4 = &v3[v2];
  if (v2 >= 31)
  {
    uint64_t v5 = v2;
    std::string::size_type v6 = v3;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 99, v5 - 30);
      if (!v7) {
        break;
      }
      if (*(void *)v7 == 0x6C7070612E6D6F63LL
        && *((void *)v7 + 1) == 0x697461636F6C2E65LL
        && *((void *)v7 + 2) == 0x636578652E646E6FLL
        && *(void *)(v7 + 23) == 0x2D656C6261747563LL)
      {
        if (v7 != v4 && v7 == v3) {
          return 0LL;
        }
        break;
      }

      std::string::size_type v6 = v7 + 1;
      uint64_t v5 = v4 - v6;
    }

    while (v4 - v6 >= 31);
  }

  if (v2 >= 27)
  {
    unsigned int v12 = v3;
    do
    {
      uint64_t v13 = (char *)memchr(v12, 99, v2 - 26);
      if (!v13) {
        break;
      }
      if (*(void *)v13 == 0x6C7070612E6D6F63LL
        && *((void *)v13 + 1) == 0x697461636F6C2E65LL
        && *((void *)v13 + 2) == 0x646E75622E646E6FLL
        && *(void *)(v13 + 19) == 0x2D656C646E75622ELL)
      {
        return v13 == v4 || v13 != v3;
      }

      unsigned int v12 = v13 + 1;
      uint64_t v2 = v4 - v12;
    }

    while (v4 - v12 > 26);
  }

  uint64_t v13 = v4;
  return v13 == v4 || v13 != v3;
}

void *sub_100FE36C4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "root");
}

void *sub_100FE36D4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "none");
}

void *sub_100FE36E4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, ":");
}

std::string *sub_100FE36F4(std::string *a1, const std::string *a2)
{
  if (a1[4].__r_.__value_.__s.__data_[1]) {
    return std::string::assign(a1, "root");
  }
  else {
    return std::string::operator=(a1, a2);
  }
}

void sub_100FE370C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 176) && *(_BYTE *)(a1 + 96))
  {
    uint64_t v31 = 0LL;
    uint64_t v2 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      if (!*(void *)(a1 + 56)) {
        goto LABEL_12;
      }
      uint64_t v3 = *(const char **)v2;
    }

    else
    {
      uint64_t v3 = (const char *)(a1 + 48);
      if (!*(_BYTE *)(a1 + 71))
      {
LABEL_12:
        if (*(char *)(a1 + 127) < 0)
        {
          if (*(void *)(a1 + 112)) {
            goto LABEL_14;
          }
        }

        else if (*(_BYTE *)(a1 + 127))
        {
LABEL_14:
          uint64_t v7 = (void *)(a1 + 104);
          id v8 = objc_alloc(&OBJC_CLASS___LSApplicationExtensionRecord);
          id v6 = objc_msgSend( v8,  "initWithBundleIdentifier:error:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7),  &v31);
LABEL_17:
          int v9 = v6;
          if (v6)
          {
            if (*(char *)(a1 + 127) < 0)
            {
              if (!*(void *)(a1 + 112))
              {
LABEL_25:
                *(_BYTE *)(a1 + 178) = 0;
LABEL_60:

                *(_BYTE *)(a1 + 176) = 1;
                return;
              }
            }

            else if (!*(_BYTE *)(a1 + 127))
            {
              goto LABEL_25;
            }

            std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a1 + 104));
            id v11 = objc_msgSend(objc_msgSend(v9, "containingBundleRecord"), "bundleIdentifier");
            if (v11) {
              std::string::assign( (std::string *)(a1 + 104),  (const std::string::value_type *)[v11 UTF8String]);
            }
            goto LABEL_25;
          }

          int v10 = *(unsigned __int8 *)(a1 + 127);
LABEL_28:
          p_vtable = (void **)(a1 + 104);
          if ((v10 & 0x80) != 0)
          {
            if (*(void *)(a1 + 112) != 32LL) {
              goto LABEL_52;
            }
            uint64_t v13 = (uint64_t *)*p_vtable;
          }

          else
          {
            uint64_t v13 = (uint64_t *)(a1 + 104);
            if (v10 != 32)
            {
LABEL_52:
              uint64_t v24 = qword_101934980;
              *(_BYTE *)(a1 + 178) = 0;
              if (v24 == -1)
              {
LABEL_53:
                double v25 = (os_log_s *)qword_101934988;
                if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 68290050;
                  int v33 = 0;
                  __int16 v34 = 2082;
                  uint64_t v35 = "";
                  __int16 v36 = 2082;
                  __int128 v37 = p_vtable;
                  __int16 v38 = 2082;
                  uint64_t v39 = v2;
                  __int16 v40 = 2114;
                  uint64_t v41 = v31;
                  __int16 v42 = 2114;
                  uint64_t v43 = 0LL;
                  _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:The given bundleId or bundlePath is not a plugin or an app, bundleId:%{ public, location:escape_only}s, bundlePath:%{public, location:escape_only}s, errorExtensionRec ord:%{public, location:escape_only}@, errorApplicationRecord:%{public, location:escape_only}@}",  buf,  0x3Au);
                }

                int v9 = 0LL;
                goto LABEL_60;
              }

void sub_100FE3D60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 175);
  }
  sub_100FE370C(a1);
  if (v4)
  {
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
    {
      uint64_t v5 = a1 + 152;
LABEL_11:
      *(_OWORD *)a2 = *(_OWORD *)v5;
      *(void *)(a2 + 16) = *(void *)(v5 + 16);
      return;
    }

    id v6 = *(void **)(a1 + 152);
    unint64_t v7 = *(void *)(a1 + 160);
    goto LABEL_24;
  }

  if (*(char *)(a1 + 127) < 0)
  {
    if (*(void *)(a1 + 112)) {
      goto LABEL_9;
    }
  }

  else if (*(_BYTE *)(a1 + 127))
  {
LABEL_9:
    sub_100FE370C(a1);
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
      uint64_t v5 = a1 + 104;
      goto LABEL_11;
    }

    id v6 = *(void **)(a1 + 104);
    unint64_t v7 = *(void *)(a1 + 112);
LABEL_24:
    sub_1010DD48C((_BYTE *)a2, v6, v7);
    return;
  }

  if (*(char *)(a1 + 71) < 0)
  {
    if (*(void *)(a1 + 56)) {
      goto LABEL_17;
    }
LABEL_26:
    sub_1010DDBC0(&v17, "com.apple.locationd.executable-");
    uint64_t v13 = *(const std::string::value_type **)(a1 + 24);
    uint64_t v12 = a1 + 24;
    id v11 = v13;
    int v14 = *(char *)(v12 + 23);
    if (v14 >= 0) {
      int v9 = (const std::string::value_type *)v12;
    }
    else {
      int v9 = v11;
    }
    if (v14 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(v12 + 8);
    }
    goto LABEL_32;
  }

  if (!*(_BYTE *)(a1 + 71)) {
    goto LABEL_26;
  }
LABEL_17:
  sub_1010DDBC0(&v17, "com.apple.locationd.bundle-");
  int v8 = *(char *)(a1 + 71);
  if (v8 >= 0) {
    int v9 = (const std::string::value_type *)(a1 + 48);
  }
  else {
    int v9 = *(const std::string::value_type **)(a1 + 48);
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    std::string::size_type v10 = *(void *)(a1 + 56);
  }
LABEL_32:
  uint64_t v15 = std::string::append(&v17, v9, v10);
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = v15->__r_.__value_.__l.__cap_;
  *(_OWORD *)a2 = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100FE3ED4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_100FE3EF4(double *result, double *a2)
{
  *(_BYTE *)uint64_t result = (*(unsigned __int8 *)result | *(unsigned __int8 *)a2) != 0;
  *((_BYTE *)result + 28) = (*((unsigned __int8 *)result + 28) | *((unsigned __int8 *)a2 + 28)) != 0;
  *((_BYTE *)result + 29) = (*((unsigned __int8 *)result + 29) | *((unsigned __int8 *)a2 + 29)) != 0;
  *((_BYTE *)result + 30) = (*((unsigned __int8 *)result + 30) | *((unsigned __int8 *)a2 + 30)) != 0;
  double v2 = result[1];
  uint64_t v3 = 0x41DFFFFFFE400000LL;
  if (v2 != 2147483640.0)
  {
    double v4 = a2[1];
    if (v4 != 2147483640.0)
    {
      uint64_t v3 = 0x41DFFFFFFE800000LL;
      if (v2 != 2147483640.0 && v4 != 2147483640.0)
      {
        if (v4 >= v2) {
          uint64_t v3 = *((void *)result + 1);
        }
        else {
          uint64_t v3 = *((void *)a2 + 1);
        }
      }
    }
  }

  *((void *)result + 1) = v3;
  double v6 = a2[2];
  if (v6 >= result[2]) {
    double v6 = result[2];
  }
  result[2] = v6;
  return result;
}

void sub_100FE3FB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((_os_feature_enabled_impl("CoreLocation", "cl_pula") & 1) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)v23;
    *(void *)(a2 + 16) = v24;
    v23[1] = 0LL;
    uint64_t v24 = 0LL;
    v23[0] = 0LL;
    goto LABEL_49;
  }

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_4:
      else {
        size_t v4 = *(void *)(a1 + 8);
      }
      uint64_t v5 = v25;
      sub_1000392EC((uint64_t)v25, v4 + 1);
      if (v25[23] < 0) {
        uint64_t v5 = *(_BYTE **)v25;
      }
      if (v4)
      {
        else {
          double v6 = *(const void **)a1;
        }
        memmove(v5, v6, v4);
      }

      *(_WORD *)&v5[v4] = 58;
      if (v24 >= 0) {
        unint64_t v7 = v23;
      }
      else {
        unint64_t v7 = (void **)v23[0];
      }
      if (v24 >= 0) {
        std::string::size_type v8 = HIBYTE(v24);
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v23[1];
      }
      int v9 = std::string::append((std::string *)v25, (const std::string::value_type *)v7, v8);
      *(std::string *)a2 = *v9;
      v9->__r_.__value_.__l.__size_ = 0LL;
      v9->__r_.__value_.__l.__cap_ = 0LL;
      v9->__r_.__value_.__r.__words[0] = 0LL;
      if ((v25[23] & 0x80000000) != 0)
      {
        std::string::size_type v10 = *(void **)v25;
LABEL_48:
        operator delete(v10);
        goto LABEL_49;
      }

      goto LABEL_49;
    }
  }

  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_4;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101893800);
  }
  id v11 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = v23;
    if (v24 < 0) {
      uint64_t v12 = (void **)v23[0];
    }
    *(void *)double v25 = 68289282LL;
    *(_WORD *)&v25[8] = 2082;
    *(void *)&v25[10] = "";
    *(_WORD *)&v25[18] = 2082;
    *(void *)&v25[20] = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#Multi-User fUserName is empty, userlessKey:%{public, location:escape_only}s}",  v25,  0x1Cu);
  }

  sub_1010DDBC0(&v22, "none");
  sub_1010DDBC0(__p, ":");
  if ((v21 & 0x80u) == 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v14 = v21;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  uint64_t v15 = std::string::append(&v22, (const std::string::value_type *)v13, v14);
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)&v25[16] = v15->__r_.__value_.__l.__cap_;
  *(_OWORD *)double v25 = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  if (v24 >= 0) {
    std::string v17 = v23;
  }
  else {
    std::string v17 = (void **)v23[0];
  }
  if (v24 >= 0) {
    std::string::size_type v18 = HIBYTE(v24);
  }
  else {
    std::string::size_type v18 = (std::string::size_type)v23[1];
  }
  uint64_t v19 = std::string::append((std::string *)v25, (const std::string::value_type *)v17, v18);
  *(std::string *)a2 = *v19;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  if ((v25[23] & 0x80000000) != 0) {
    operator delete(*(void **)v25);
  }
  if ((char)v22.__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type v10 = (void *)v22.__r_.__value_.__r.__words[0];
    goto LABEL_48;
  }

void sub_100FE428C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FE4314(int *a1)
{
  uint64_t v2 = 0LL;
  uint64_t result = 0LL;
  int v4 = *a1;
  while (dword_1013BE51C[v2] != v4)
  {
    uint64_t result = (result + 1);
    if (++v2 == 9) {
      sub_10127EDFC();
    }
  }

  return result;
}

uint64_t sub_100FE435C(unsigned int a1)
{
  if (a1 >= 9) {
    sub_10127EFC8();
  }
  return dword_1013BE51C[a1];
}

void sub_100FE4384(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100FE4644(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t, void))(v1 + 16))(v1, 1LL, 0LL);
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101893820);
    }
    uint64_t v2 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "HealthKitWriter: Data collection completion was nil",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101893820);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  1LL,  "HealthKitWriter: Data collection completion was nil",  v5,  2);
      int v4 = (uint8_t *)v3;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityHealthKitWriter dataCollectorDidRequestCollectionThroughDate:completion:]_block_invoke",  "%s\n",  v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

void sub_100FE4808(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_100FE48F8(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    v1[1540] = v4;
    operator delete(v4);
  }

  operator delete(v1);
  _Unwind_Resume(a1);
}

id sub_100FE4924(__int128 *a1, void *a2)
{
  __int128 v3 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  return [a2 onResultAvailable:&v3];
}

uint64_t sub_100FE4B74(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = a2;
  sub_100FE4BC0(a1, a2);
  return a1;
}

void sub_100FE4BA4(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100FE4BC0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100FE4BFC((void **)a1, v4);
  }

  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }

void sub_100FE4BFC(void **a1, unint64_t a2)
{
  double v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }

    a1[1] = v7;
  }

  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555LL) {
      sub_100007008();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555LL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_1000BB1F4(v4, v11);
    }
    else {
      uint64_t v12 = 0LL;
    }
    std::string::size_type v14 = &v12[48 * v8];
    uint64_t v15 = &v12[48 * v11];
    size_t v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    std::string v17 = &v14[v16];
    uint64_t v19 = (char *)*a1;
    std::string::size_type v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        __int128 v20 = *((_OWORD *)v18 - 3);
        __int128 v21 = *((_OWORD *)v18 - 2);
        *(_OWORD *)(v14 - 20) = *(_OWORD *)(v18 - 20);
        *((_OWORD *)v14 - 3) = v20;
        *((_OWORD *)v14 - 2) = v21;
        v14 -= 48;
        v18 -= 48;
      }

      while (v18 != v19);
      std::string::size_type v18 = (char *)*a1;
    }

    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18) {
      operator delete(v18);
    }
  }

uint64_t sub_100FE4D78(int *a1)
{
  uint64_t v1 = *a1;
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101893840);
  }
  uint64_t v4 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
  {
    int v5 = *a1;
    *(_DWORD *)buf = 67109120;
    int v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "#locctl,#rec,serviceTypeToSiloType,unhandled type,%d",  buf,  8u);
  }

  BOOL v6 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101893840);
    }
    int v7 = *a1;
    v9[0] = 67109120;
    v9[1] = v7;
    unint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#locctl,#rec,serviceTypeToSiloType,unhandled type,%d",  v9);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static CLLocationControllerRecorder_Types::SiloType CLLocationControllerRecorder_Types::Silo::serviceTypeToSiloTyp e(const CLLocationControllerRecorder_Types::ServiceType &)",  "%s\n",  v8);
    return 0LL;
  }

  return result;
}

void *sub_100FE4F50@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  switch(*a1)
  {
    case 0:
      BOOL v3 = "Unknown";
      goto LABEL_13;
    case 1:
      BOOL v3 = "System";
      goto LABEL_13;
    case 2:
      BOOL v3 = "Register";
      goto LABEL_13;
    case 3:
      BOOL v3 = "Unregister";
      goto LABEL_13;
    case 4:
      BOOL v3 = "Notification";
LABEL_13:
      uint64_t result = sub_1010DDBC0(a2, v3);
      break;
    default:
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101893840);
      }
      int v5 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
      {
        int v6 = *a1;
        *(_DWORD *)buf = 67109120;
        int v12 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "#locctl,#rec,messageTypeToString,unhandled type,%d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101893840);
        }
        int v8 = *a1;
        v10[0] = 67109120;
        v10[1] = v8;
        unint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#locctl,#rec,messageTypeToString,unhandled type,%d",  v10);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::string CLLocationControllerRecorder_Types::messageTypeToString(const CLLocationControllerRecorder_Types::MessageType &)",  "%s\n",  v9);
      }

      uint64_t result = sub_1010DDBC0(a2, "<error>");
      break;
  }

  return result;
}

void *sub_100FE5218@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  switch(*a1)
  {
    case 0:
      BOOL v3 = "Unknown";
      goto LABEL_29;
    case 1:
      BOOL v3 = "Client";
      goto LABEL_29;
    case 2:
      BOOL v3 = "DaemonStatus";
      goto LABEL_29;
    case 3:
      BOOL v3 = "ClientManager";
      goto LABEL_29;
    case 4:
      BOOL v3 = "WifiService";
      goto LABEL_29;
    case 5:
      BOOL v3 = "DataProtectionManager";
      goto LABEL_29;
    case 6:
      BOOL v3 = "BluetoothService";
      goto LABEL_29;
    case 7:
      BOOL v3 = "CompanionNotifier";
      goto LABEL_29;
    case 8:
      BOOL v3 = "MotionState";
      goto LABEL_29;
    case 9:
      BOOL v3 = "MotionStateObserver";
      goto LABEL_29;
    case 10:
      BOOL v3 = "SignalEnvironmentProvider";
      goto LABEL_29;
    case 11:
      BOOL v3 = "TelephonyService";
      goto LABEL_29;
    case 12:
      BOOL v3 = "AppMonitor";
      goto LABEL_29;
    case 13:
      BOOL v3 = "WifiLocationProvider";
      goto LABEL_29;
    case 14:
      BOOL v3 = "CellLocationProvider";
      goto LABEL_29;
    case 15:
      BOOL v3 = "GnssLocationProvider";
      goto LABEL_29;
    case 16:
      BOOL v3 = "PipelineLocationProvider";
      goto LABEL_29;
    case 17:
      BOOL v3 = "Wifi2LocationProvider";
      goto LABEL_29;
    case 18:
      BOOL v3 = "AccessoryLocationProvider";
      goto LABEL_29;
    case 19:
      BOOL v3 = "SimulatedLocationProvider";
      goto LABEL_29;
    case 20:
      BOOL v3 = "LoiLocationProvider";
      goto LABEL_29;
    case 21:
      BOOL v3 = "LocationController";
      goto LABEL_29;
    case 22:
      BOOL v3 = "OutdoorService";
      goto LABEL_29;
    case 23:
      BOOL v3 = "RoutineVisit";
      goto LABEL_29;
    case 24:
      BOOL v3 = "InertialOdometry";
      goto LABEL_29;
    case 25:
      BOOL v3 = "MotionStateMediator";
      goto LABEL_29;
    case 26:
      BOOL v3 = "MapRouteHintService";
LABEL_29:
      uint64_t result = sub_1010DDBC0(a2, v3);
      break;
    default:
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101893840);
      }
      int v6 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
      {
        int v7 = *a1;
        *(_DWORD *)buf = 67109120;
        int v12 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "#locctl,#rec,serviceTypeToString,unhandled type,%d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101893840);
        }
        int v8 = *a1;
        v10[0] = 67109120;
        v10[1] = v8;
        unint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#locctl,#rec,serviceTypeToString,unhandled type,%d",  v10);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::string CLLocationControllerRecorder_Types::serviceTypeToString(const CLLocationControllerRecorder_Types::ServiceType &)",  "%s\n",  v9);
      }

      uint64_t result = sub_1010DDBC0(a2, "<error>");
      break;
  }

  return result;
}

void sub_100FE5850(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void *sub_100FE587C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_101893870;
  result[1] = a1;
  *a2 = result;
  return result;
}

id sub_100FE58B4(uint64_t a1)
{
  return objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLDaemonStatus"),  "syncgetReachability");
}

BOOL sub_100FE58D8()
{
  return (sub_1004F97F4() & 0x6000000000000LL) != 0;
}

uint64_t sub_100FE58F8()
{
  unint64_t v0 = sub_1004F97F4();
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  uint64_t v1 = (os_log_s *)qword_1019345E8;
  uint64_t v2 = (v0 >> 49) & 1;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    int v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "CLKappaNotifier can detect %{public}d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    v6[0] = 67240192;
    v6[1] = v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "CLKappaNotifier can detect %{public}d",  v6,  8);
    int v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKappaNotifier_canDetect()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return v2;
}

uint64_t sub_100FE5AB0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100FE5B24;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199FE28 != -1) {
    dispatch_once(&qword_10199FE28, block);
  }
  return qword_1019A4110;
}

uint64_t sub_100FE5B24(uint64_t a1)
{
  uint64_t v2 = operator new(0x258uLL);
  uint64_t result = sub_100FE5B70((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A4110 = (uint64_t)v2;
  return result;
}

void sub_100FE5B5C(_Unwind_Exception *a1)
{
}

uint64_t sub_100FE5B70(uint64_t a1, void *a2)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  uint64_t v3 = qword_1019345E8;
  *(void *)(a1 + 112) = &off_10188C340;
  *(void *)(a1 + 120) = v3;
  *(void *)a1 = off_1018938C0;
  sub_100F05038(a1 + 128, (uint64_t)"idle", (uint64_t)&off_10188C340);
  *(void *)(a1 + 128) = off_101893AA8;
  *(void *)(a1 + 176) = a1;
  sub_100F05038(a1 + 184, (uint64_t)"armed", (uint64_t)&off_10188C340);
  *(void *)(a1 + 184) = off_101893B08;
  *(void *)(a1 + 232) = a1;
  sub_100FF3D58(a1 + 240, a1);
  *(void *)(a1 + 304) = 0LL;
  *(void *)(a1 + 310) = 0LL;
  *(void *)(a1 + 320) = [*(id *)(a1 + 40) newTimer];
  *(_WORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 330) = 0;
  *(void *)(a1 + 336) = off_10182F180;
  uint64_t v4 = operator new(0x20uLL);
  v4[2] = 0LL;
  *uint64_t v4 = off_10182F1B8;
  v4[1] = 0LL;
  *((_DWORD *)v4 + 6) = 31337;
  *(void *)(a1 + 344) = v4 + 3;
  *(void *)(a1 + 352) = v4;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 392) = "com.apple.igneous.enableIgneous";
  *(void *)(a1 + 400) = "com.apple.igneous.disableIgneousWithDelay";
  *(void *)(a1 + 408) = "com.apple.igneous.enableIgneousWithDelay";
  *(_WORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 418) = 0;
  *(void *)(a1 + 420) = 0x5A000000000LL;
  sub_10023AE2C((unsigned __int8 *)&v35, "IgneousMaxMotionTriggerCount", dword_1013BE660, 0);
  *(_DWORD *)(a1 + 428) = HIDWORD(v35);
  *(void *)(a1 + 432) = 0x40A7700000000000LL;
  sub_101204164((unsigned __int8 *)&v35, "IgneousScheduledEnableRenewPeriod", &qword_1013BE668, 0);
  *(void *)(a1 + 440) = v36;
  sub_101204164((unsigned __int8 *)&v35, "IgneousCheckSaewEnablementCadence", &qword_1013BE670, 0);
  *(void *)(a1 + 448) = v36;
  *(void *)(a1 + 456) = 0LL;
  *(void *)(a1 + 464) = 0LL;
  uint64_t v5 = a1 + 480;
  *(void *)(a1 + 472) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 480) = 0LL;
  *(void *)(a1 + 488) = 0LL;
  *(void *)(a1 + 496) = 0LL;
  *(_BYTE *)(a1 + 504) = 14;
  *(void *)(a1 + 512) = 0LL;
  *(void *)(a1 + 505) = 0LL;
  *(_BYTE *)(a1 + 520) = 30;
  *(void *)(a1 + 521) = 0LL;
  *(_DWORD *)(a1 + 529) = 0;
  uint64_t v6 = a1 + 536;
  *(void *)(a1 + 568) = 0LL;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 576) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0LL;
  sub_100F051A4((void *)(a1 + 112), (void *)(a1 + 128));
  sub_100FE6448(a1);
  if (sub_1008FA854(0))
  {
    int v7 = operator new(0x38uLL);
    sub_1003DE40C(v7, *(void **)(a1 + 40), (uint64_t)sub_100FE6868, a1, 0LL);
    *(void *)(a1 + 488) = v7;
    uint64_t v8 = sub_1008FA854(0);
    sub_1006DCB40(v8, 29, *(void *)(a1 + 488), -1.0);
  }

  sub_100C8F484((uint64_t)sub_100FE6A38, a1, *(void **)(a1 + 32), &v35);
  uint64_t v9 = v35;
  uint64_t v35 = 0LL;
  uint64_t v10 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    uint64_t v11 = v35;
    uint64_t v35 = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
  }

  [*(id *)(*(void *)(a1 + 496) + 16) register:*(void *)(*(void *)(a1 + 496) + 8) forNotification:0 registrationInfo:0];
  sub_100A1C6E0((uint64_t)sub_100FE6C10, a1, *(void **)(a1 + 32), &v35);
  uint64_t v12 = v35;
  uint64_t v35 = 0LL;
  uint64_t v13 = *(void *)(a1 + 592);
  *(void *)(a1 + 592) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    uint64_t v14 = v35;
    uint64_t v35 = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
  }

  id v15 =  objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:forClient:",  @"CLEmergencyController",  @"CLKappaNotifier");
  *(void *)(a1 + 304) = v15;
  [v15 startMonitoringEmergencyState:CLISP_ME_TOKEN];
  sub_100E18F18((uint64_t)sub_100FE6DE8, a1, *(void **)(a1 + 32), &v35);
  uint64_t v16 = v35;
  uint64_t v35 = 0LL;
  uint64_t v17 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    uint64_t v18 = v35;
    uint64_t v35 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
  }

  [*(id *)(*(void *)(a1 + 568) + 16) register:*(void *)(*(void *)(a1 + 568) + 8) forNotification:2 registrationInfo:0];
  sub_100DAA9F8((uint64_t)sub_100FE6FC0, a1, *(void **)(a1 + 32), &v35);
  uint64_t v19 = v35;
  uint64_t v35 = 0LL;
  uint64_t v20 = *(void *)v6;
  *(void *)uint64_t v6 = v19;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    uint64_t v21 = v35;
    uint64_t v35 = 0LL;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
  }

  [*(id *)(*(void *)v6 + 16) register:*(void *)(*(void *)v6 + 8) forNotification:0 registrationInfo:0];
  sub_10036B3B4((uint64_t)sub_100FE7198, a1, *(void **)(a1 + 32), &v35);
  uint64_t v22 = v35;
  uint64_t v35 = 0LL;
  uint64_t v23 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    uint64_t v24 = v35;
    uint64_t v35 = 0LL;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    }
  }

  [*(id *)(*(void *)(a1 + 544) + 16) register:*(void *)(*(void *)(a1 + 544) + 8) forNotification:1 registrationInfo:0];
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472LL;
  id v34[2] = sub_100FE736C;
  v34[3] = &unk_10181D3D0;
  v34[4] = a1;
  [*(id *)(a1 + 472) setHandler:v34];
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_100FE757C;
  v33[3] = &unk_10181D3D0;
  v33[4] = a1;
  [*(id *)(a1 + 320) setHandler:v33];
  sub_1003CC884((uint64_t)sub_100FE7584, a1, *(void **)(a1 + 32), &v35);
  uint64_t v25 = v35;
  uint64_t v35 = 0LL;
  uint64_t v26 = *(void *)v5;
  *(void *)uint64_t v5 = v25;
  if (v26)
  {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
    uint64_t v27 = v35;
    uint64_t v35 = 0LL;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
    }
  }

  [*(id *)(*(void *)v5 + 16) register:*(void *)(*(void *)v5 + 8) forNotification:2 registrationInfo:0];
  [*(id *)(*(void *)v5 + 16) register:*(void *)(*(void *)v5 + 8) forNotification:3 registrationInfo:0];
  [*(id *)(*(void *)v5 + 16) register:*(void *)(*(void *)v5 + 8) forNotification:8 registrationInfo:0];
  [*(id *)(*(void *)v5 + 16) register:*(void *)(*(void *)v5 + 8) forNotification:7 registrationInfo:0];
  [*(id *)(a1 + 472) setNextFireDelay:1.0 interval:60.0];
  id v28 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "queue");
  unsigned int v29 = (id *)operator new(8uLL);
  sub_100A87850(v29, (uint64_t)v28);
  sub_100FF4F30((id **)(a1 + 360), v29);
  double Current = CFAbsoluteTimeGetCurrent();
  srand48((uint64_t)Current);
  double v31 = drand48();
  srand48((uint64_t)(Current * v31));
  return a1;
}

void sub_100FE61B8(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  operator delete(v6);
  uint64_t v8 = v1[74];
  v1[74] = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = v1[71];
  v1[71] = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = v1[70];
  v1[70] = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = v1[69];
  v1[69] = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = v1[68];
  v1[68] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = *v5;
  uint64_t *v5 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = v1[62];
  v1[62] = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = *v4;
  *uint64_t v4 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  sub_100FF4F30(v2, 0LL);
  sub_1002B729C(v1 + 42);
  v1[30] = off_10188C380;
  uint64_t v16 = (void *)v1[32];
  if (v16)
  {
    v1[33] = v16;
    operator delete(v16);
  }

  v1[23] = off_10188C380;
  uint64_t v17 = (void *)v1[25];
  if (v17)
  {
    v1[26] = v17;
    operator delete(v17);
  }

  v1[16] = off_10188C380;
  uint64_t v18 = (void *)v1[18];
  if (v18)
  {
    v1[19] = v18;
    operator delete(v18);
  }

  sub_100FE779C((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100FE63AC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101893C48;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100FE642C(_Unwind_Exception *exception_object)
{
}

void sub_100FE6448(uint64_t a1)
{
  if (qword_1019347D0 != -1) {
    dispatch_once(&qword_1019347D0, &stru_101893BB8);
  }
  uint64_t v2 = (os_log_s *)qword_1019347D8;
  if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "initialize Igneous arm status,0", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    LOWORD(v27[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  0LL,  "initialize Igneous arm status,0",  v27,  2);
    uint64_t v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::initIgneousConfig()", "%s\n", v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  uint64_t v26 = 0LL;
  uint64_t v3 = sub_1002F8DDC();
  sub_1002AC7B8(v3, "CLIgneousArmSessionStartTime", &v26);
  uint64_t v4 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v4 + 944LL))(v4);
  int v25 = -1;
  uint64_t v5 = sub_1002F8DDC();
  sub_1002A7CB0(v5, "CLIgneousMaxArmMinutes", &v25);
  int v6 = v25;
  if (v25 < 0) {
    int v6 = 1440;
  }
  *(_DWORD *)(a1 + 424) = v6;
  sub_10023AE2C(buf, "IgneousMaxArmMinutes", (_DWORD *)(a1 + 424), 0);
  *(_DWORD *)(a1 + 424) = v33;
  double v24 = -1.0;
  uint64_t v7 = sub_1002F8DDC();
  sub_1002A82BC(v7, "CLIgneousMaxScheduledArmSec", &v24);
  double v8 = v24;
  if (v24 <= -1.0) {
    double v8 = 3000.0;
  }
  *(double *)(a1 + 432) = v8;
  sub_101204164(buf, "IgneousMaxScheduledArmSec", (void *)(a1 + 432), 0);
  *(void *)(a1 + 432) = *(void *)v34;
  int v23 = -1;
  uint64_t v9 = sub_1002F8DDC();
  sub_1002A7CB0(v9, "CLIgneousMotionTriggerCount", &v23);
  *(_DWORD *)(a1 + 420) = v23 & ~(v23 >> 31);
  if (qword_1019347D0 != -1) {
    dispatch_once(&qword_1019347D0, &stru_101893BB8);
  }
  uint64_t v10 = (os_log_s *)qword_1019347D8;
  if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(_DWORD *)(a1 + 424);
    uint64_t v12 = *(void *)(a1 + 432);
    int v13 = *(_DWORD *)(a1 + 420);
    *(_DWORD *)buf = 67109632;
    int v33 = v11;
    *(_WORD *)__int16 v34 = 2048;
    *(void *)&id v34[2] = v12;
    __int16 v35 = 1024;
    int v36 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "initialize Igneous maxArmMin,%d,maxScheduledArmSec,%f,motionTriggerCount,%d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    int v16 = *(_DWORD *)(a1 + 424);
    uint64_t v17 = *(void *)(a1 + 432);
    int v18 = *(_DWORD *)(a1 + 420);
    v27[0] = 67109632;
    v27[1] = v16;
    __int16 v28 = 2048;
    uint64_t v29 = v17;
    __int16 v30 = 1024;
    int v31 = v18;
    LODWORD(v21) = 24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  0LL,  "initialize Igneous maxArmMin,%d,maxScheduledArmSec,%f,motionTriggerCount,%d",  v27,  v21,  v22);
    uint64_t v20 = (uint8_t *)v19;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::initIgneousConfig()", "%s\n", v19);
    if (v20 != buf) {
      free(v20);
    }
  }

void sub_100FE6868(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101893C18);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLKappaNotifier::onAOP",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    uint64_t v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLKappaNotifier::onAOP, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_100FEABAC(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FE6A18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FE6A38(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101893C18);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLKappaNotifier::onPressureBias",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLKappaNotifier::onPressureBias, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100FEB098((char *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FE6BF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FE6C10(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101893C18);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLKappaNotifier::onSignalEnvironmentNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLKappaNotifier::onSignalEnvironmentNotification, event:%{public, location:escape_o nly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100FEB2CC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FE6DC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FE6DE8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101893C18);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLKappaNotifier::onUserInfoNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLKappaNotifier::onUserInfoNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100FEB658(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FE6FA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FE6FC0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101893C18);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLKappaNotifier::onMotionStateObserverNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLKappaNotifier::onMotionStateObserverNotification, event:%{public, location:escape _only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100FECE48((unsigned __int8 *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FE7178( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FE7198(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101893C18);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    int v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLKappaNotifier::onMotionStateUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    __int16 v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLKappaNotifier::onMotionStateUpdate, event:%{public, location:escape_only}s, thi s:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_100FEB874(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FE734C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FE736C(uint64_t a1)
{
}

void sub_100FE7374(unsigned __int8 *a1)
{
  BOOL v2 = sub_100FEBE94(a1);
  BOOL v3 = sub_100FEC258(a1);
  int v4 = sub_100FEC61C((uint64_t)a1);
  uint64_t v5 = 0x10000LL;
  if (!v4) {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = 256LL;
  if (!v3) {
    uint64_t v6 = 0LL;
  }
  sub_100FECA68((uint64_t)a1, v6 | v2 | v5);
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  BOOL v7 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = a1[328];
    *(_DWORD *)buf = 67109120;
    int v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "timeout fClientArmedRemotely %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v9 = a1[328];
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "timeout fClientArmedRemotely %d",  v12);
    char v11 = (uint8_t *)v10;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::onSlowTimer()", "%s\n", v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  if (a1[328]) {
    sub_100FED098((uint64_t)a1);
  }
}

void sub_100FE757C(uint64_t a1)
{
}

void sub_100FE7584(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101893C18);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Self::onDaemonStatus",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Self::onDaemonStatus, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100FEBADC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FE773C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100FE775C(void *a1)
{
  *a1 = off_10188C380;
  BOOL v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_100FE779C(uint64_t a1)
{
  *(void *)a1 = off_101893C48;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100FE7810(uint64_t a1)
{
  *(void *)a1 = off_1018938C0;
  sub_100FE7984(a1);
  uint64_t v2 = *(void *)(a1 + 592);
  *(void *)(a1 + 592) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 552);
  *(void *)(a1 + 552) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 480);
  *(void *)(a1 + 480) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  sub_100FF4F30((id **)(a1 + 360), 0LL);
  sub_1002B729C((void *)(a1 + 336));
  *(void *)(a1 + 240) = off_10188C380;
  __int16 v10 = *(void **)(a1 + 256);
  if (v10)
  {
    *(void *)(a1 + 264) = v10;
    operator delete(v10);
  }

  *(void *)(a1 + 184) = off_10188C380;
  char v11 = *(void **)(a1 + 200);
  if (v11)
  {
    *(void *)(a1 + 208) = v11;
    operator delete(v11);
  }

  *(void *)(a1 + 128) = off_10188C380;
  char v12 = *(void **)(a1 + 144);
  if (v12)
  {
    *(void *)(a1 + 152) = v12;
    operator delete(v12);
  }

  return sub_100FE779C(a1);
}

void sub_100FE7970(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100FE7810(a1);
  operator delete(v1);
}

void sub_100FE7984(uint64_t a1)
{
  if (sub_1008FA854(0))
  {
    uint64_t v2 = sub_1008FA854(0);
    sub_1006DD2A0(v2, 29, *(void *)(a1 + 488));
    *(void *)(a1 + 488) = 0LL;
  }

  *(_BYTE *)(a1 + 108) = 1;
}

void *sub_100FE79DC@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_100FE7A54()
{
  __int128 v38 = xmmword_1013BE678;
  __int128 v39 = unk_1013BE688;
  *(_OWORD *)__int16 v40 = xmmword_1013BE698;
  *(_OWORD *)&v40[12] = *(__int128 *)((char *)&xmmword_1013BE698 + 12);
  sub_1002A5370(v37);
  uint64_t v0 = sub_1002F8DDC();
  if (sub_1002A8F8C(v0, "Kappa", v37))
  {
    uint64_t v1 = (void *)sub_1002A59CC((uint64_t)v37);
    id v2 = [v1 valueForKey:@"coupled"];
    id v3 = [v1 valueForKey:@"uncoupled"];
    id v4 = [v1 valueForKey:@"skiLiftWindowSec"];
    id v5 = [v1 valueForKey:@"mPlanarMaxRMSThreshold"];
    id v6 = [v1 valueForKey:@"mPlanarEnergyThreshold"];
    id v7 = [v1 valueForKey:@"mPlanarChaosThreshold"];
    id v8 = [v1 valueForKey:@"mPlanarSaturationThreshold"];
    id v9 = [v1 valueForKey:@"mRolloverMaxRMSThreshold"];
    id v10 = [v1 valueForKey:@"mRolloverEnergyThreshold"];
    id v35 = [v1 valueForKey:@"mRolloverChaosThreshold"];
    id v34 = [v1 valueForKey:@"mRolloverSaturationThreshold"];
    if (v2)
    {
      [v2 floatValue];
      DWORD1(v38) = v11;
    }

    if (v3)
    {
      [v3 floatValue];
      DWORD2(v38) = v12;
    }

    if (v4) {
      WORD6(v38) = (unsigned __int16)[v4 unsignedShortValue];
    }
    if (v5)
    {
      [v5 floatValue];
      HIDWORD(v39) = v13;
    }

    if (v6)
    {
      [v6 floatValue];
      *(_DWORD *)__int16 v40 = v14;
    }

    if (v7)
    {
      [v7 floatValue];
      *(_DWORD *)&v40[4] = v15;
    }

    if (v8)
    {
      [v8 floatValue];
      *(_DWORD *)&v40[8] = v16;
    }

    if (v9)
    {
      [v9 floatValue];
      *(_DWORD *)&v40[12] = v17;
    }

    if (v10)
    {
      [v10 floatValue];
      *(_DWORD *)&_BYTE v40[16] = v18;
    }

    if (v35)
    {
      [v35 floatValue];
      *(_DWORD *)&v40[20] = v19;
    }

    if (v34)
    {
      [v34 floatValue];
      *(_DWORD *)&v40[24] = v20;
    }

    id v21 = [v1 valueForKey:@"kill"];
    if (v21 && [v21 BOOLValue])
    {
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v22 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "kill config", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        v36[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  16LL,  "kill config",  v36,  2);
        int v33 = (uint8_t *)v32;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLKappaNotifier::configureAOP() const", "%s\n", v32);
        if (v33 != buf) {
          free(v33);
        }
      }

      LOBYTE(v38) = 0;
    }

    id v23 = [v1 valueForKey:@"martyImpactThreshold"];
    id v24 = [v1 valueForKey:@"martyRotationThreshold"];
    if (v23)
    {
      [v23 floatValue];
      LODWORD(v39) = v25;
    }

    if (v24)
    {
      [v24 floatValue];
      DWORD1(v39) = v26;
    }
  }

  else
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    uint64_t v27 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "using default config", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      v36[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "using default config",  v36,  2);
      int v31 = (uint8_t *)v30;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::configureAOP() const", "%s\n", v30);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  DWORD2(v39) = sub_100FE7FEC();
  sub_100FE820C(v28, 0, &v38, 0x3CuLL);
  return sub_1002A5590(v37);
}

void sub_100FE7F8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

float sub_100FE7FEC()
{
  double v7 = -1.0;
  uint64_t v0 = sub_1002F8DDC();
  sub_1002A82BC(v0, "CLIgneousMotionTriggerProbability", &v7);
  double v1 = v7;
  if (v7 <= -1.0) {
    double v1 = 0.0;
  }
  double v7 = v1;
  sub_101204164(buf, "IgneousMotionTriggerProbability", &v7, 0);
  double v2 = *(double *)&v11[4];
  double v7 = *(double *)&v11[4];
  if (*(double *)&v11[4] > 1.0 || *(double *)&v11[4] < 0.0)
  {
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    id v3 = (os_log_s *)qword_1019347D8;
    if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)int v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "invalid motion trigger probability %f, ignoring",  buf,  0xCu);
    }

    double v2 = 0.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      int v8 = 134217984;
      double v9 = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  17LL,  "invalid motion trigger probability %f, ignoring",  COERCE_DOUBLE(&v8));
      id v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "float CLKappaNotifier::retrieveIgneousMotionTriggerProbability() const",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  return v2;
}

void sub_100FE820C(uint64_t a1, char a2, void *a3, unint64_t a4)
{
  double v7 = (const void *)sub_1008FA854(0);
  if (v7)
  {
    if (v8) {
      sub_10035FD64((uint64_t)v8, a2, a3, a4);
    }
  }

void sub_100FE827C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  id v3 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    int v4 = a2[1];
    int v5 = a2[2];
    int v6 = a2[3];
    int v7 = a2[4];
    int v8 = a2[7];
    int v9 = a2[5];
    int v10 = a2[6];
    *(_DWORD *)buf = 67111168;
    int v40 = 8;
    __int16 v41 = 2048;
    __int16 v42 = a2;
    __int16 v43 = 1024;
    int v44 = v4;
    __int16 v45 = 1024;
    int v46 = v5;
    __int16 v47 = 1024;
    int v48 = v6;
    __int16 v49 = 1024;
    int v50 = v7;
    __int16 v51 = 1024;
    int v52 = v8;
    __int16 v53 = 1024;
    int v54 = v9;
    __int16 v55 = 1024;
    int v56 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "kCompanionCollect %d %p %d %d %d %d/%d %d %d",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    __int16 v24 = a2[2];
    int v25 = a2[3];
    int v26 = a2[4];
    __int16 v27 = a2[5];
    int v28 = a2[6];
    *(_WORD *)id v34 = 2048;
    *(void *)&id v34[2] = a2;
    *(_WORD *)&_BYTE v34[10] = 1024;
    LOWORD(v35) = 1024;
    HIWORD(v35) = v24;
    LOWORD(v36) = HIWORD(v26);
    HIWORD(v36) = 1024;
    LOWORD(v37) = 1024;
    HIWORD(v37) = v27;
    int v38 = v28;
    LODWORD(v32) = 60;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "kCompanionCollect %d %p %d %d %d %d/%d %d %d",  &v33,  v32,  67111168,  *(_DWORD *)v34,  *(_DWORD *)&v34[8],  v35,  v25,  v36,  v37);
    __int16 v30 = (uint8_t *)v29;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)",  "%s\n",  v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  if (a2[3])
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v11 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      int v12 = a2[7];
      *(_DWORD *)buf = 67109120;
      int v40 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "arming marty %d", buf, 8u);
    }

    uint64_t v13 = sub_1002921D0(115, 2);
    if (!(_DWORD)v13) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "arming marty %d",  &v33);
LABEL_58:
    int v31 = (uint8_t *)v14;
    uint64_t v13 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)",  "%s\n",  v14);
    if (v31 != buf) {
      free(v31);
    }
LABEL_21:
    sub_100FE820C(v13, 2, a2, 8uLL);
    return;
  }

  if (a2[5])
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v15 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "arming igneous", buf, 2u);
    }

    uint64_t v13 = sub_1002921D0(115, 2);
    if (!(_DWORD)v13) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    LOWORD(v33) = 0;
    LODWORD(v32) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "arming igneous",  &v33,  v32,  v33);
    goto LABEL_58;
  }

  if (sub_100FE58F8())
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v16 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "I can arm myself", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      double v17 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "I can arm myself",  &v33,  v32);
      int v19 = v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)",  "%s\n",  v17);
LABEL_41:
      if (v19 != buf) {
        free(v19);
      }
    }
  }

  else
  {
    sub_1004F2598();
    if ((sub_1004F97F4() & 0x4000000000000LL) != 0)
    {
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      id v23 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "arming kappa", buf, 2u);
      }

      uint64_t v13 = sub_1002921D0(115, 2);
      if (!(_DWORD)v13) {
        goto LABEL_21;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "arming kappa",  &v33,  v32,  v33);
      goto LABEL_58;
    }

    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v20 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "kCompanionCollect unexpected", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      double v21 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  17LL,  "kCompanionCollect unexpected",  &v33,  v32);
      int v19 = v22;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)",  "%s\n",  v21);
      goto LABEL_41;
    }
  }

void sub_100FE8A3C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  id v3 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    int v4 = a2[1];
    int v5 = a2[2];
    int v6 = a2[3];
    int v7 = a2[4];
    int v8 = a2[7];
    int v9 = a2[5];
    int v10 = a2[6];
    *(_DWORD *)buf = 67111168;
    int v40 = 8;
    __int16 v41 = 2048;
    __int16 v42 = a2;
    __int16 v43 = 1024;
    int v44 = v4;
    __int16 v45 = 1024;
    int v46 = v5;
    __int16 v47 = 1024;
    int v48 = v6;
    __int16 v49 = 1024;
    int v50 = v7;
    __int16 v51 = 1024;
    int v52 = v8;
    __int16 v53 = 1024;
    int v54 = v9;
    __int16 v55 = 1024;
    int v56 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "kCompanionStop %d %p %d %d %d %d/%d %d %d",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    __int16 v24 = a2[2];
    int v25 = a2[3];
    int v26 = a2[4];
    __int16 v27 = a2[5];
    int v28 = a2[6];
    *(_WORD *)id v34 = 2048;
    *(void *)&id v34[2] = a2;
    *(_WORD *)&_BYTE v34[10] = 1024;
    LOWORD(v35) = 1024;
    HIWORD(v35) = v24;
    LOWORD(v36) = HIWORD(v26);
    HIWORD(v36) = 1024;
    LOWORD(v37) = 1024;
    HIWORD(v37) = v27;
    int v38 = v28;
    LODWORD(v32) = 60;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "kCompanionStop %d %p %d %d %d %d/%d %d %d",  &v33,  v32,  67111168,  *(_DWORD *)v34,  *(_DWORD *)&v34[8],  v35,  v25,  v36,  v37);
    __int16 v30 = (uint8_t *)v29;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)",  "%s\n",  v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  if (a2[3])
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v11 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      int v12 = a2[7];
      *(_DWORD *)buf = 67109120;
      int v40 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "disarming marty %d", buf, 8u);
    }

    uint64_t v13 = sub_1002921D0(115, 2);
    if (!(_DWORD)v13) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "disarming marty %d",  &v33);
LABEL_58:
    int v31 = (uint8_t *)v14;
    uint64_t v13 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)",  "%s\n",  v14);
    if (v31 != buf) {
      free(v31);
    }
LABEL_21:
    sub_100FE820C(v13, 2, a2, 8uLL);
    return;
  }

  if (a2[5])
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v15 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "disarming igneous", buf, 2u);
    }

    uint64_t v13 = sub_1002921D0(115, 2);
    if (!(_DWORD)v13) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    LOWORD(v33) = 0;
    LODWORD(v32) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "disarming igneous",  &v33,  v32,  v33);
    goto LABEL_58;
  }

  if (sub_100FE58F8())
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v16 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "I can disarm myself", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      double v17 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "I can disarm myself",  &v33,  v32);
      int v19 = v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)",  "%s\n",  v17);
LABEL_41:
      if (v19 != buf) {
        free(v19);
      }
    }
  }

  else
  {
    sub_1004F2598();
    if ((sub_1004F97F4() & 0x4000000000000LL) != 0)
    {
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      id v23 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "disarming", buf, 2u);
      }

      uint64_t v13 = sub_1002921D0(115, 2);
      if (!(_DWORD)v13) {
        goto LABEL_21;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "disarming",  &v33,  v32,  v33);
      goto LABEL_58;
    }

    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v20 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Unexpected message", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v33) = 0;
      LODWORD(v32) = 2;
      double v21 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  17LL,  "Unexpected message",  &v33,  v32);
      int v19 = v22;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)",  "%s\n",  v21);
      goto LABEL_41;
    }
  }

void sub_100FE91FC(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  switch(v3)
  {
    case 1:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v8 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        int v28 = 1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "arming for client %d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v23 = 67109120;
        int v24 = 1;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "arming for client %d",  &v23);
        int v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }

      int v9 = 24;
      goto LABEL_26;
    case 2:
      int v10 = a2[1];
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v11 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        int v28 = 2;
        __int16 v29 = 1024;
        int v30 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "arming for client %d %d", buf, 0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v23 = 67109376;
        int v24 = 2;
        __int16 v25 = 1024;
        int v26 = v10;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "arming for client %d %d",  &v23,  14);
        double v17 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)",  "%s\n",  v16);
        if (v17 != buf) {
          free(v17);
        }
      }

      if (v10) {
        int v9 = 28;
      }
      else {
        int v9 = 26;
      }
LABEL_26:
      if (sub_100FE58F8())
      {
        id v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLCompanionNotifier");
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_100FE97E8;
        v20[3] = &unk_101860818;
        char v22 = v3;
        int v21 = v9;
        [v12 doAsync:v20];
      }

      return;
    case 4:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v4 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "not forwarding igneous arming", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        LOWORD(v23) = 0;
        double v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "not forwarding igneous arming",  &v23,  2);
        int v7 = v6;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)",  "%s\n",  v5);
LABEL_45:
        if (v7 != buf) {
          free(v7);
        }
      }

      break;
    default:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      uint64_t v13 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "unexpected message", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        LOWORD(v23) = 0;
        double v18 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  17LL,  "unexpected message",  &v23,  2);
        int v7 = v19;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)",  "%s\n",  v18);
        goto LABEL_45;
      }

      break;
  }

id sub_100FE97E8(uint64_t a1, uint64_t a2)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v4 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    int v5 = *(unsigned __int8 *)(a1 + 36);
    int v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "tell the companion to collect for %d msgType %d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v8 = *(unsigned __int8 *)(a1 + 36);
    int v9 = *(_DWORD *)(a1 + 32);
    v12[0] = 67109376;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "tell the companion to collect for %d msgType %d",  v12,  14);
    int v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)_block_invoke",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  return sub_10039FB50(120.0, a2, *(_DWORD *)(a1 + 32), 0LL, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
}

void sub_100FE99EC(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  switch(v3)
  {
    case 1:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v8 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        int v28 = 1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "disarming for client %d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v23 = 67109120;
        int v24 = 1;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "disarming for client %d",  &v23);
        int v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }

      int v9 = 25;
      goto LABEL_26;
    case 2:
      int v10 = a2[1];
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v11 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        int v28 = 2;
        __int16 v29 = 1024;
        int v30 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "disarming for client %d %d", buf, 0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v23 = 67109376;
        int v24 = 2;
        __int16 v25 = 1024;
        int v26 = v10;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "disarming for client %d %d",  &v23,  14);
        __int16 v17 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)",  "%s\n",  v16);
        if (v17 != buf) {
          free(v17);
        }
      }

      if (v10) {
        int v9 = 29;
      }
      else {
        int v9 = 27;
      }
LABEL_26:
      if (sub_100FE58F8())
      {
        id v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLCompanionNotifier");
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_100FE9FD8;
        v20[3] = &unk_101860818;
        char v22 = v3;
        int v21 = v9;
        [v12 doAsync:v20];
      }

      return;
    case 4:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v4 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "not forwarding igneous disarming", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        LOWORD(v23) = 0;
        double v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "not forwarding igneous disarming",  &v23,  2);
        int v7 = v6;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)",  "%s\n",  v5);
LABEL_45:
        if (v7 != buf) {
          free(v7);
        }
      }

      break;
    default:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      __int16 v13 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "unexpected message", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        LOWORD(v23) = 0;
        double v18 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  17LL,  "unexpected message",  &v23,  2);
        int v7 = v19;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)",  "%s\n",  v18);
        goto LABEL_45;
      }

      break;
  }

id sub_100FE9FD8(uint64_t a1, uint64_t a2)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v4 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    int v5 = *(unsigned __int8 *)(a1 + 36);
    int v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "tell the companion to stop collecting for %d msgType %d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v8 = *(unsigned __int8 *)(a1 + 36);
    int v9 = *(_DWORD *)(a1 + 32);
    v12[0] = 67109376;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "tell the companion to stop collecting for %d msgType %d",  v12,  14);
    int v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)_block_invoke",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  return sub_10039FB50(120.0, a2, *(_DWORD *)(a1 + 32), 0LL, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
}

void sub_100FEA1DC(uint64_t a1, _BYTE *a2)
{
  if (*a2 != 2)
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v6 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "unexpected client mode", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  17LL,  "unexpected client mode",  v15,  2);
      goto LABEL_38;
    }

    return;
  }

  int v3 = a2[2];
  if (a2[1] == v3)
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v4 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "invald mode switch", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  17LL,  "invald mode switch",  v15,  2);
LABEL_38:
      id v12 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLKappaNotifier::tellCompanionToMartyModeSwitch(CMMotionCoprocessorReply::SafetyMartyModeSwitch *)",  "%s\n",  v5);
      if (v12 != buf) {
        free(v12);
      }
      return;
    }

    return;
  }

  if (a2[1]) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v3 == 0;
  }
  if (!v8)
  {
    int v9 = 28;
    goto LABEL_25;
  }

  if (a2[1] && !a2[2])
  {
    int v9 = 26;
LABEL_25:
    if (sub_100FE58F8())
    {
      id v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLCompanionNotifier");
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      void v13[2] = sub_100FEA5A8;
      v13[3] = &unk_10185AD00;
      v13[4] = a2;
      int v14 = v9;
      [v10 doAsync:v13];
    }

    return;
  }

  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v11 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "invalid settings", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    v15[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  17LL,  "invalid settings",  v15,  2);
    goto LABEL_38;
  }

id sub_100FEA5A8(uint64_t a1, uint64_t a2)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v4 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    int v5 = **(unsigned __int8 **)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "tell the companion to stop collecting for %d msgType %d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v8 = **(unsigned __int8 **)(a1 + 32);
    int v9 = *(_DWORD *)(a1 + 40);
    v12[0] = 67109376;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "tell the companion to stop collecting for %d msgType %d",  v12,  14);
    int v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::tellCompanionToMartyModeSwitch(CMMotionCoprocessorReply::SafetyMartyModeSwitch *)_block_invoke",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  return sub_10039FB50(120.0, a2, *(_DWORD *)(a1 + 40), 0LL, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
}

void sub_100FEA7B4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a2 == 4)
  {
    int v2 = *(unsigned __int16 *)(a2 + 2);
    double v23 = 0.0;
    BOOL v22 = 0;
    uint64_t v3 = sub_1002F8DDC();
    sub_1002A82BC(v3, "CLIgneousArmSessionStartTime", &v23);
    uint64_t v4 = sub_1002F8DDC();
    sub_1002A6F64(v4, "CLIgneousArmSessionIsCharging", &v22);
    if (v23 != 0.0)
    {
      double v5 = (v23 - floor(v23 / 86400.0) * 86400.0) / 60.0;
      double v6 = (CFAbsoluteTimeGetCurrent() - v23) / 60.0;
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      double v7 = round(v5);
      double v8 = round(v6);
      int v9 = (os_log_s *)qword_1019347D8;
      if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134219008;
        double v35 = v23;
        __int16 v36 = 1024;
        int v37 = (int)v7;
        __int16 v38 = 1024;
        BOOL v39 = v22;
        __int16 v40 = 1024;
        int v41 = (int)v8;
        __int16 v42 = 1024;
        int v43 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "send Igneous analytics,startTime,%f,startTimeInMin,%d,isCharging,%d,sessionDurationInMin,%d,numMotionTrigger,%u",  buf,  0x24u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347D0 != -1) {
          dispatch_once(&qword_1019347D0, &stru_101893BB8);
        }
        int v24 = 134219008;
        double v25 = v23;
        __int16 v26 = 1024;
        int v27 = (int)v7;
        __int16 v28 = 1024;
        BOOL v29 = v22;
        __int16 v30 = 1024;
        int v31 = (int)v8;
        __int16 v32 = 1024;
        int v33 = v2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  2LL,  "send Igneous analytics,startTime,%f,startTimeInMin,%d,isCharging,%d,sessionDurationInMin,%d,numMotionTrigger,%u",  COERCE_DOUBLE(&v24),  36,  (_DWORD)v14,  v15,  (_DWORD)v16);
        __int16 v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::sendAnalyticsEventIgneous(CMMotionCoprocessorReply::SafetyDisarmClient *)",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      int v14 = _NSConcreteStackBlock;
      uint64_t v15 = 3221225472LL;
      int v16 = sub_100FEAAC8;
      __int16 v17 = &unk_101893990;
      BOOL v21 = v22;
      double v18 = v7;
      double v19 = v8;
      __int16 v20 = v2;
      AnalyticsSendEventLazy(@"com.apple.Motion.IgneousArmSession", &v14);
      double v23 = 0.0;
      uint64_t v10 = sub_1002F8DDC();
      sub_1002AC7B8(v10, "CLIgneousArmSessionStartTime", &v23);
      uint64_t v11 = sub_1002F8DDC();
      (*(void (**)(uint64_t))(*(void *)v11 + 944LL))(v11);
    }
  }

NSDictionary *sub_100FEAAC8(uint64_t a1)
{
  v3[0] = @"startTime";
  v4[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", (int)*(double *)(a1 + 32));
  v3[1] = @"isCharging";
  v4[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 50));
  char v3[2] = @"sessionDuration";
  v4[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", (int)*(double *)(a1 + 40));
  v3[3] = @"numMotionTrigger";
  v4[3] = +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 48));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  4LL);
}

void sub_100FEABAC(uint64_t a1, uint64_t a2)
{
  switch(*(_BYTE *)(a2 + 1))
  {
    case 0:
      sub_100F052A0(a1 + 112, 1LL, a2 + 2);
      return;
    case 1:
      sub_100F052A0(a1 + 112, 2LL, a2 + 2);
      return;
    case 2:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      uint64_t v4 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "received arm client from AOP", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        v16[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "received arm client from AOP",  v16,  2);
        uint64_t v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onAOP(const CLMotionCoprocessorInterface::NotificationData *)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }

      uint64_t v5 = a1 + 112;
      uint64_t v6 = a2 + 2;
      uint64_t v7 = 11LL;
      goto LABEL_22;
    case 3:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      double v8 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "received disarm client from AOP", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        v16[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "received disarm client from AOP",  v16,  2);
        __int16 v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onAOP(const CLMotionCoprocessorInterface::NotificationData *)",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      uint64_t v5 = a1 + 112;
      uint64_t v6 = a2 + 2;
      uint64_t v7 = 12LL;
      goto LABEL_22;
    case 4:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v9 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "received marty mode switch from AOP", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        v16[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "received marty mode switch from AOP",  v16,  2);
        uint64_t v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onAOP(const CLMotionCoprocessorInterface::NotificationData *)",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }

      uint64_t v5 = a1 + 112;
      uint64_t v6 = a2 + 2;
      uint64_t v7 = 13LL;
LABEL_22:
      sub_100F052A0(v5, v7, v6);
      break;
    case 5:
      sub_100F052A0(a1 + 112, 3LL, 0LL);
      break;
    default:
      return;
  }

char *sub_100FEB098(char *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    uint64_t v4 = result;
    *(_OWORD *)(result + 504) = *(_OWORD *)a4;
    uint64_t v5 = *(void *)(a4 + 16);
    *(void *)(result + 525) = *(void *)(a4 + 21);
    *((void *)result + 65) = v5;
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    uint64_t v6 = (float *)(v4 + 521);
    uint64_t v7 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      double v8 = *v6;
      double v9 = *(float *)(v4 + 525);
      double v10 = *(float *)(v4 + 529);
      *(_DWORD *)buf = 134218496;
      double v24 = v8;
      __int16 v25 = 2048;
      double v26 = v9;
      __int16 v27 = 2048;
      double v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "PressureInertialFit,x,%f,y,%f,z,%f", buf, 0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      double v11 = *v6;
      double v12 = *(float *)(v4 + 525);
      double v13 = *(float *)(v4 + 529);
      int v17 = 134218496;
      double v18 = v11;
      __int16 v19 = 2048;
      double v20 = v12;
      __int16 v21 = 2048;
      double v22 = v13;
      LODWORD(v16) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "PressureInertialFit,x,%f,y,%f,z,%f",  COERCE_DOUBLE(&v17),  v16);
      uint64_t v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type:: NotificationData &)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    return (char *)[*(id *)(*((void *)v4 + 62) + 16) unregister:*(void *)(*((void *)v4 + 62) + 8) forNotification:0];
  }

  return result;
}

void sub_100FEB2CC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if (!*a3)
  {
    *(_DWORD *)(a1 + 584) = *a4;
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    uint64_t v5 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *a4;
      *(_DWORD *)buf = 67109120;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "signal environment %u", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v7 = *a4;
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "signal environment %u",  v10);
      double v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

void sub_100FEB48C(uint64_t a1, uint64_t a2)
{
  int v3 = sub_1009830E8(a2);
  char v10 = v3;
  if (*(unsigned __int8 *)(a1 + 312) != v3)
  {
    if (v3)
    {
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      uint64_t v4 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Notifying AOP of active emergency", buf, 2u);
      }

      uint64_t v5 = sub_1002921D0(115, 2);
      if ((_DWORD)v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        v9[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "Notifying AOP of active emergency",  v9,  2);
        double v8 = (uint8_t *)v7;
        uint64_t v5 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onEmergencyStateChange(CLEmergencyState)",  "%s\n",  v7);
        if (v8 != buf) {
          free(v8);
        }
      }

      sub_100FE820C(v5, 7, &v10, 1uLL);
      char v6 = v10;
    }

    else
    {
      char v6 = 0;
    }

    *(_BYTE *)(a1 + 312) = v6;
  }

void sub_100FEB658(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    if (*(_BYTE *)(a4 + 56)) {
      int v5 = (int)*(float *)(a4 + 20);
    }
    else {
      int v5 = -1;
    }
    *(_DWORD *)(a1 + 576) = v5;
    *(_DWORD *)(a1 + 580) = *(_DWORD *)(a4 + 4);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    char v6 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 576);
      int v8 = *(_DWORD *)(a1 + 580);
      *(_DWORD *)buf = 67109376;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "age=%d biologicalSex=%d", buf, 0xEu);
    }

    uint64_t v9 = sub_1002921D0(115, 2);
    if ((_DWORD)v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v10 = *(_DWORD *)(a1 + 576);
      int v11 = *(_DWORD *)(a1 + 580);
      v14[0] = 67109376;
      v14[1] = v10;
      __int16 v15 = 1024;
      int v16 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "age=%d biologicalSex=%d",  v14,  14);
      double v13 = (uint8_t *)v12;
      uint64_t v9 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onUserInfoNotification(int, const CLNatalimetryNotifier_Type::Notification &, const C LNatalimetryNotifier_Type::NotificationData &)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    buf[0] = *(_DWORD *)(a1 + 576);
    buf[1] = *(_DWORD *)(a1 + 580);
    sub_100FE820C(v9, 5, buf, 2uLL);
  }

double sub_100FEB874(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1)
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v5 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      unsigned int v6 = *(unsigned __int8 *)(a4 + 96);
      LODWORD(buf) = 67110144;
      HIDWORD(buf) = v6 & 1;
      __int16 v20 = 1024;
      int v21 = (v6 >> 1) & 1;
      __int16 v22 = 1024;
      int v23 = (v6 >> 2) & 1;
      __int16 v24 = 1024;
      int v25 = (v6 >> 3) & 1;
      __int16 v26 = 1024;
      int v27 = (v6 >> 4) & 1;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "(onMotionStateUpdate) EventActivity; hints %d %d %d %d %d",
        (uint8_t *)&buf,
        0x20u);
    }

    uint64_t v7 = sub_1002921D0(115, 2);
    if ((_DWORD)v7)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      unsigned int v11 = *(unsigned __int8 *)(a4 + 96);
      *(_WORD *)__int16 v15 = 1024;
      *(_DWORD *)&v15[2] = (v11 >> 1) & 1;
      int v16 = (v11 >> 3) & 1;
      __int16 v17 = 1024;
      int v18 = (v11 >> 4) & 1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "(onMotionStateUpdate) EventActivity; hints %d %d %d %d %d",
        &v14,
        32,
        67110144,
        *(_DWORD *)v15,
        (v11 >> 2) & 1);
      double v13 = (char *)v12;
      uint64_t v7 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onMotionStateUpdate(int, const CLMotionState_Type::Notification &, const CLMotionStat e_Type::NotificationData &)",  "%s\n",  v12);
    }

    unsigned int v9 = *(unsigned __int8 *)(a4 + 96);
    LOBYTE(buf) = v9 & 1;
    v8.i64[0] = *(void *)&vshl_u16( (uint16x4_t)(*(void *)&vdup_n_s16(v9) & 0xFF00FF00FF00FFLL),  (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01LL;
    *(_DWORD *)((char *)&buf + 1) = vmovn_s16(v8).u32[0];
    sub_100FE820C(v7, 9, &buf, 5uLL);
  }

  return result;
}

void sub_100FEBADC(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  switch(*a3)
  {
    case 2:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v5 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Turning off slow timer", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        v19[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "Turning off slow timer",  v19,  2);
        int v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type ::NotificationData &)",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      unsigned int v6 = *(void **)(a1 + 472);
      double v7 = 1.79769313e308;
      double v8 = 1.79769313e308;
      goto LABEL_14;
    case 3:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      unsigned int v9 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Scheduling slow timer", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        v19[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "Scheduling slow timer",  v19,  2);
        int v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type ::NotificationData &)",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      unsigned int v6 = *(void **)(a1 + 472);
      double v8 = 60.0;
      double v7 = 1.0;
LABEL_14:
      [v6 setNextFireDelay:v7 interval:v8];
      return;
    case 7:
      *(_BYTE *)(a1 + 314) = a4[9];
      goto LABEL_17;
    case 8:
      *(_BYTE *)(a1 + 313) = *a4;
LABEL_17:
      BOOL v10 = sub_100FEBE94((unsigned __int8 *)a1);
      BOOL v11 = sub_100FEC258((unsigned __int8 *)a1);
      int v12 = sub_100FEC61C(a1);
      uint64_t v13 = 0x10000LL;
      if (!v12) {
        uint64_t v13 = 0LL;
      }
      uint64_t v14 = 256LL;
      if (!v11) {
        uint64_t v14 = 0LL;
      }
      sub_100FECA68(a1, v14 | v10 | v13);
      break;
    default:
      return;
  }

BOOL sub_100FEBE94(unsigned __int8 *a1)
{
  if (!a1[316])
  {
    if (qword_10199FE50 != -1) {
      dispatch_once(&qword_10199FE50, &stru_101893BD8);
    }
    if (qword_10199FE58)
    {
      a1[316] = off_101992DA8();
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v2 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        int v3 = a1[316];
        *(_DWORD *)uint64_t buf = 67109120;
        int v29 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "uncached activated state %d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v15 = a1[316];
        int v18 = 67109120;
        int v19 = v15;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "uncached activated state %d",  &v18);
        __int16 v17 = (uint8_t *)v16;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKappaNotifier::shouldEnableKappa()", "%s\n", v16);
        if (v17 != buf) {
          free(v17);
        }
      }
    }
  }

  LOBYTE(v18) = 0;
  sub_1012049AC(buf, "KappaForceOn", (unsigned __int8 *)&v18, 0);
  int v4 = buf[1];
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v5 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    int v6 = a1[313];
    int v7 = a1[315];
    int v8 = a1[316];
    *(_DWORD *)uint64_t buf = 67241216;
    int v29 = v4;
    __int16 v30 = 1026;
    int v31 = 0;
    __int16 v32 = 1026;
    int v33 = v6;
    __int16 v34 = 1026;
    int v35 = v7;
    __int16 v36 = 1026;
    int v37 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "shouldEnableKappa, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v10 = a1[313];
    int v11 = a1[315];
    int v12 = a1[316];
    int v18 = 67241216;
    int v19 = v4;
    __int16 v20 = 1026;
    int v21 = 0;
    __int16 v22 = 1026;
    int v23 = v10;
    __int16 v24 = 1026;
    int v25 = v11;
    __int16 v26 = 1026;
    int v27 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "shouldEnableKappa, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u",  &v18,  32);
    uint64_t v14 = (uint8_t *)v13;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKappaNotifier::shouldEnableKappa()", "%s\n", v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  return v4 != 0;
}

BOOL sub_100FEC258(unsigned __int8 *a1)
{
  if (!a1[316])
  {
    if (qword_10199FE50 != -1) {
      dispatch_once(&qword_10199FE50, &stru_101893BD8);
    }
    if (qword_10199FE58)
    {
      a1[316] = off_101992DA8();
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v2 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        int v3 = a1[316];
        *(_DWORD *)uint64_t buf = 67109120;
        int v29 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "uncached activated state %d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v15 = a1[316];
        int v18 = 67109120;
        int v19 = v15;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "uncached activated state %d",  &v18);
        __int16 v17 = (uint8_t *)v16;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKappaNotifier::shouldEnableMarty()", "%s\n", v16);
        if (v17 != buf) {
          free(v17);
        }
      }
    }
  }

  LOBYTE(v18) = 0;
  sub_1012049AC(buf, "MartyForceOn", (unsigned __int8 *)&v18, 0);
  int v4 = buf[1];
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v5 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    int v6 = a1[313];
    int v7 = a1[315];
    int v8 = a1[316];
    *(_DWORD *)uint64_t buf = 67241216;
    int v29 = v4;
    __int16 v30 = 1026;
    int v31 = 0;
    __int16 v32 = 1026;
    int v33 = v6;
    __int16 v34 = 1026;
    int v35 = v7;
    __int16 v36 = 1026;
    int v37 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "shouldEnableMarty, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v10 = a1[313];
    int v11 = a1[315];
    int v12 = a1[316];
    int v18 = 67241216;
    int v19 = v4;
    __int16 v20 = 1026;
    int v21 = 0;
    __int16 v22 = 1026;
    int v23 = v10;
    __int16 v24 = 1026;
    int v25 = v11;
    __int16 v26 = 1026;
    int v27 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "shouldEnableMarty, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u",  &v18,  32);
    uint64_t v14 = (uint8_t *)v13;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKappaNotifier::shouldEnableMarty()", "%s\n", v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  return v4 != 0;
}

uint64_t sub_100FEC61C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 316))
  {
    if (qword_10199FE50 != -1) {
      dispatch_once(&qword_10199FE50, &stru_101893BD8);
    }
    if (qword_10199FE58)
    {
      *(_BYTE *)(a1 + 316) = off_101992DA8();
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      int v2 = (os_log_s *)qword_1019347D8;
      if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEBUG))
      {
        int v3 = *(unsigned __int8 *)(a1 + 316);
        *(_DWORD *)uint64_t buf = 67109120;
        int v44 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "uncached activated state %d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347D0 != -1) {
          dispatch_once(&qword_1019347D0, &stru_101893BB8);
        }
        int v22 = *(unsigned __int8 *)(a1 + 316);
        int v25 = 67109120;
        int v26 = v22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  2LL,  "uncached activated state %d",  &v25);
        __int16 v24 = (uint8_t *)v23;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKappaNotifier::shouldEnableIgneous()", "%s\n", v23);
        if (v24 != buf) {
          free(v24);
        }
      }
    }
  }

  *(_DWORD *)uint64_t buf = 0;
  uint64_t v4 = sub_1002F8DDC();
  sub_1002A7CB0(v4, "CLIgneousArmMinutes", buf);
  int v5 = *(_DWORD *)buf;
  BOOL v6 = sub_100FF41B0(a1);
  LOBYTE(v25) = 0;
  sub_1012049AC(buf, "IgneousForceInRandomArmSession", (unsigned __int8 *)&v25, 0);
  if (buf[1]) {
    int v7 = 1;
  }
  else {
    int v7 = v6;
  }
  if (qword_1019347D0 != -1) {
    dispatch_once(&qword_1019347D0, &stru_101893BB8);
  }
  int v8 = (os_log_s *)qword_1019347D8;
  if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_INFO))
  {
    int v9 = *(unsigned __int8 *)(a1 + 313);
    int v10 = *(unsigned __int8 *)(a1 + 316);
    int v11 = *(unsigned __int8 *)(a1 + 314);
    int v12 = *(unsigned __int8 *)(a1 + 317);
    int v13 = *(_DWORD *)(a1 + 420);
    *(_DWORD *)uint64_t buf = 67242240;
    int v44 = 0;
    __int16 v45 = 1026;
    int v46 = 0;
    __int16 v47 = 1026;
    int v48 = v9;
    __int16 v49 = 1026;
    int v50 = v10;
    __int16 v51 = 1026;
    int v52 = v11;
    __int16 v53 = 1026;
    int v54 = v7;
    __int16 v55 = 1026;
    int v56 = v5;
    __int16 v57 = 1026;
    int v58 = v12;
    __int16 v59 = 1026;
    int v60 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "shouldEnableIgneous, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u",  buf,  0x38u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    int v15 = *(unsigned __int8 *)(a1 + 313);
    int v16 = *(unsigned __int8 *)(a1 + 316);
    int v17 = *(unsigned __int8 *)(a1 + 314);
    int v18 = *(unsigned __int8 *)(a1 + 317);
    int v19 = *(_DWORD *)(a1 + 420);
    int v25 = 67242240;
    int v26 = 0;
    __int16 v27 = 1026;
    int v28 = 0;
    __int16 v29 = 1026;
    int v30 = v15;
    __int16 v31 = 1026;
    int v32 = v16;
    __int16 v33 = 1026;
    int v34 = v17;
    __int16 v35 = 1026;
    int v36 = v7;
    __int16 v37 = 1026;
    int v38 = v5;
    __int16 v39 = 1026;
    int v40 = v18;
    __int16 v41 = 1026;
    int v42 = v19;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  1LL,  "shouldEnableIgneous, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u",  &v25,  56);
    int v21 = (uint8_t *)v20;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKappaNotifier::shouldEnableIgneous()", "%s\n", v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  return 0LL;
}

void sub_100FECA68(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 8;
  buf[0] = 0;
  uint64_t v5 = sub_1002F8DDC();
  sub_1002A6F64(v5, "CLIgneousArmStatus", (BOOL *)buf);
  int v6 = buf[0];
  if (buf[0]) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = (*(void *)&v2 & 0xFF0000LL) == 0;
  }
  if (!v7)
  {
    if (!*(_BYTE *)(a1 + 416))
    {
      int v10 = *(const char **)(a1 + 392);
      *(void *)uint64_t buf = _NSConcreteStackBlock;
      uint64_t v17 = 3221225472LL;
      *(void *)&__int128 v18 = sub_100FF4228;
      *((void *)&v18 + 1) = &unk_101893BF8;
      uint64_t v19 = a1;
      uint64_t v20 = 0LL;
      int v21 = v10;
      xpc_activity_register(v10, XPC_ACTIVITY_CHECK_IN, buf);
      *(_BYTE *)(a1 + 416) = 1;
    }

    sub_100FF4A08(a1, (unsigned __int16)v2);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    int v11 = (os_log_s *)qword_1019347D8;
    if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240960;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v17) = 1026;
      *(_DWORD *)((char *)&v17 + 2) = v2;
      HIWORD(v17) = 1026;
      LODWORD(v18) = v4;
      WORD2(v18) = 1026;
      *(_DWORD *)((char *)&v18 + 6) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "update AOP arm status,%{public}u, %{public}u, %{public}u, %{public}u",  buf,  0x1Au);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    LOWORD(v14) = 1026;
    *(_DWORD *)((char *)&v14 + 2) = v2;
    HIWORD(v14) = 1026;
    LODWORD(v15) = v4;
    WORD2(v15) = 1026;
    *(_DWORD *)((char *)&v15 + 6) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  2LL,  "update AOP arm status,%{public}u, %{public}u, %{public}u, %{public}u",  &v13,  26,  67240960LL,  v14,  v15);
LABEL_25:
    int v12 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::updateAOPArmStatus(CMMotionCoprocessorCommand::Kappa::EnableClient)",  "%s\n",  v9);
    if (v12 != buf) {
      free(v12);
    }
    return;
  }

  sub_100FF4A08(a1, v2 & 0xFFFFFF);
  if (qword_1019347D0 != -1) {
    dispatch_once(&qword_1019347D0, &stru_101893BB8);
  }
  int v8 = (os_log_s *)qword_1019347D8;
  if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v17) = 1026;
    *(_DWORD *)((char *)&v17 + 2) = v2;
    HIWORD(v17) = 1026;
    LODWORD(v18) = v4;
    WORD2(v18) = 1026;
    *(_DWORD *)((char *)&v18 + 6) = BYTE2(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "update AOP arm status,%{public}u, %{public}u, %{public}u, %{public}u",  buf,  0x1Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    LODWORD(v13) = 67240960;
    HIDWORD(v13) = v6;
    LOWORD(v14) = 1026;
    *(_DWORD *)((char *)&v14 + 2) = v2;
    HIWORD(v14) = 1026;
    LODWORD(v15) = v4;
    WORD2(v15) = 1026;
    *(_DWORD *)((char *)&v15 + 6) = BYTE2(v2);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  2LL,  "update AOP arm status,%{public}u, %{public}u, %{public}u, %{public}u",  &v13,  26,  v13,  v14,  v15);
    goto LABEL_25;
  }

void sub_100FECE48(unsigned __int8 *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v6 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
    {
      int v7 = *(_DWORD *)(a4 + 8);
      int v8 = *(_DWORD *)(a4 + 16);
      *(_DWORD *)uint64_t buf = 67240448;
      int v23 = v7;
      __int16 v24 = 1026;
      int v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "workout type %{public}u, %{public}u", buf, 0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v15 = *(_DWORD *)(a4 + 8);
      int v16 = *(_DWORD *)(a4 + 16);
      v19[0] = 67240448;
      v19[1] = v15;
      __int16 v20 = 1026;
      int v21 = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "workout type %{public}u, %{public}u",  v19,  14);
      __int128 v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, c onst CLMotionStateObserver_Type::NotificationData &)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    int v9 = (*(_DWORD *)(a4 + 8) | *(_DWORD *)(a4 + 16)) != 0;
    if (a1[315] == v9)
    {
      BOOL v10 = 0LL;
    }

    else
    {
      a1[315] = v9;
      BOOL v10 = sub_100FEBE94(a1);
    }

    BOOL v11 = sub_100FEC258(a1);
    int v12 = sub_100FEC61C((uint64_t)a1);
    uint64_t v13 = 0x10000LL;
    if (!v12) {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = 256LL;
    if (!v11) {
      uint64_t v14 = 0LL;
    }
    sub_100FECA68((uint64_t)a1, v14 | v10 | v13);
  }

uint64_t sub_100FED098(uint64_t a1)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v2 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 328);
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v39) = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "checking remotely armed clients for timeout %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v24 = *(unsigned __int8 *)(a1 + 328);
    LODWORD(v37[0]) = 67109120;
    HIDWORD(v37[0]) = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "checking remotely armed clients for timeout %d",  v37);
    int v26 = (uint8_t *)v25;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  v34[0] = 1;
  memset(&v34[1], 0, 7);
  int v4 = sub_100FEE58C();
  sub_1002A5370(v37);
  uint64_t v5 = sub_1002F8DDC();
  if (!sub_1002A8F8C(v5, "Kappa", v37))
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    BOOL v10 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "cannot access timestamps, turning everything off",  buf,  2u);
    }

    uint64_t v6 = sub_1002921D0(115, 2);
    if ((_DWORD)v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v35) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "cannot access timestamps, turning everything off",  &v35,  2);
      int v12 = (uint8_t *)v11;
      uint64_t v6 = sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    goto LABEL_47;
  }

  uint64_t v6 =  -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  sub_1002A59CC((uint64_t)v37));
  int v7 = (void *)v6;
  if ((*(_BYTE *)(a1 + 328) & 1) != 0
    && ((v13 = objc_msgSend( (id)v6,  "objectForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "kappaHeartbeatTimestamp")),  uint64_t v6 = (uint64_t)objc_msgSend( v7,  "objectForKeyedSubscript:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "kappaHeartbeatTimestamp")),  !v13)
     || v6 && ([(id)v6 doubleValue], CFAbsoluteTimeGetCurrent() - v14 > (double)v4)))
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v15 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "kappa timed out", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v35) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "kappa timed out",  &v35,  2);
      int v30 = (uint8_t *)v29;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    uint64_t v6 = (uint64_t)objc_msgSend( v7,  "removeObjectForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "kappaHeartbeatTimestamp"));
    char v9 = 0;
    int v8 = 1;
    *(_WORD *)&v34[1] = 1;
  }

  else
  {
    int v8 = 0;
    char v9 = 1;
  }

  if ((*(_BYTE *)(a1 + 328) & 2) != 0
    && ((v17 = objc_msgSend( v7,  "objectForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "martyHeartbeatTimestamp")),  uint64_t v6 = (uint64_t)objc_msgSend( v7,  "objectForKeyedSubscript:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "martyHeartbeatTimestamp")),  !v17)
     || v6 && ([(id)v6 doubleValue], CFAbsoluteTimeGetCurrent() - v18 > (double)v4)))
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    uint64_t v19 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "marty timed out", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v35) = 0;
      LODWORD(v33) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "marty timed out",  &v35,  v33);
      int v32 = (uint8_t *)v31;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v31);
      if (v32 != buf) {
        free(v32);
      }
    }

    objc_msgSend( v7,  "removeObjectForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp"));
    int v16 = 1;
    *(_WORD *)&v34[3] = 1;
  }

  else
  {
    int v16 = 0;
    if ((v9 & 1) != 0)
    {
      int v8 = 0;
      goto LABEL_46;
    }

    int v8 = 1;
  }

  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  __int16 v20 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    __int16 v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "setting dictionary %@", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v35 = 138412290;
    int v36 = v7;
    LODWORD(v33) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "setting dictionary %@",  &v35,  v33);
    int v28 = (uint8_t *)v27;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  sub_1002AFBC8(v37, (CFDictionaryRef)v7);
  uint64_t v21 = sub_1002F8DDC();
  sub_1002ACE6C(v21, "Kappa", (uint64_t)v37);
  uint64_t v22 = sub_1002F8DDC();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 944LL))(v22);
LABEL_46:
  if (v8 | v16) {
LABEL_47:
  }
    sub_100FE8A3C(v6, v34);
  return sub_1002A5590(v37);
}

void sub_100FED910( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100FED950(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  objc_opt_class(&OBJC_CLASS___NSNumber);
  uint64_t v6 = v5;
  *(void *)&double v7 = objc_opt_class(&OBJC_CLASS___NSDictionary).n128_u64[0];
  char v9 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v4, v7, v6, v8, 0LL),  a2,  0LL);
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  BOOL v10 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    int v35 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "receiving heartbeat %@", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v32 = 138412290;
    uint64_t v33 = v9;
    LODWORD(v29) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "receiving heartbeat %@",  &v32,  v29);
    uint64_t v22 = (uint8_t *)v21;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  id result = -[NSMutableDictionary objectForKey:](v9, "objectForKey:", @"SafetyCompanionHeartbeat");
  if (result)
  {
    unsigned __int8 v12 = objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:]( v9,  "objectForKeyedSubscript:",  @"SafetyCompanionHeartbeat"),  "intValue");
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    id v13 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v35) = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "updating heartbeat timestamps %d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v32 = 67109120;
      LODWORD(v33) = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "updating heartbeat timestamps %d",  &v32);
      int v24 = (uint8_t *)v23;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v23);
      if (v24 != buf) {
        free(v24);
      }
    }

    double Current = CFAbsoluteTimeGetCurrent();
    sub_1002A5370(&v32);
    uint64_t v15 = sub_1002F8DDC();
    if (sub_1002A8F8C(v15, "Kappa", &v32))
    {
      int v16 =  -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  sub_1002A59CC((uint64_t)&v32));
      if ((v12 & 1) != 0) {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v16,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", Current),  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp"));
      }
      if ((v12 & 2) != 0) {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v16,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", Current),  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp"));
      }
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      id v17 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 138412290;
        int v35 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "setting dictionary %@", buf, 0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v30 = 138412290;
        __int16 v31 = v16;
        LODWORD(v29) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "setting dictionary %@",  &v30,  v29);
        int v28 = (uint8_t *)v27;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v27);
        if (v28 != buf) {
          free(v28);
        }
      }

      sub_1002AFBC8(&v32, (CFDictionaryRef)v16);
      uint64_t v18 = sub_1002F8DDC();
      sub_1002ACE6C(v18, "Kappa", (uint64_t)&v32);
      uint64_t v19 = sub_1002F8DDC();
      (*(void (**)(uint64_t))(*(void *)v19 + 944LL))(v19);
    }

    else
    {
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      __int16 v20 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "failed to get dictionary", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        LOWORD(v30) = 0;
        LODWORD(v29) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "failed to get dictionary",  &v30,  v29);
        int v26 = (uint8_t *)v25;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v25);
        if (v26 != buf) {
          free(v26);
        }
      }
    }

    return (id)sub_1002A5590(&v32);
  }

  return result;
}

void sub_100FEE044( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100FEE06C(uint64_t a1)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v2 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 329);
    *(_DWORD *)uint64_t buf = 67109120;
    int v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending heartbeat for %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v8 = *(unsigned __int8 *)(a1 + 329);
    v15[0] = 67109120;
    v15[1] = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "sending heartbeat for %d",  v15);
    BOOL v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::locallyArmedClientHeartbeat()", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  if (*(_BYTE *)(a1 + 329))
  {
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a1 + 329)),  @"SafetyCompanionHeartbeat");
    uint64_t v5 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  +[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:", v4),  1LL,  0LL);
    if (sub_100FE58F8())
    {
      id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLCompanionNotifier");
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      void v13[2] = sub_100FEE414;
      v13[3] = &unk_1018939B8;
      int v14 = 30;
      v13[4] = v5;
      [v6 doAsync:v13];
    }
  }

  else
  {
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    double v7 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "nothing to send, returning", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "nothing to send, returning",  v15,  2);
      unsigned __int8 v12 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::locallyArmedClientHeartbeat()", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

id sub_100FEE414(uint64_t a1, uint64_t a2)
{
  return sub_10039FB50(120.0, a2, *(_DWORD *)(a1 + 40), *(void **)(a1 + 32), 300LL, 1LL, 0LL, 0LL, 0, 0LL);
}

uint64_t sub_100FEE460(uint64_t a1)
{
  *(_WORD *)(a1 + 328) = 0;
  [*(id *)(a1 + 320) setNextFireTime:1.79769313e308];
  sub_1002A5370(v6);
  uint64_t v1 = sub_1002F8DDC();
  if (sub_1002A8F8C(v1, "Kappa", v6))
  {
    int v2 =  -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  sub_1002A59CC((uint64_t)v6));
    -[NSMutableDictionary removeObjectForKey:]( v2,  "removeObjectForKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp"));
    -[NSMutableDictionary removeObjectForKey:]( v2,  "removeObjectForKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp"));
    -[NSMutableDictionary removeObjectForKey:]( v2,  "removeObjectForKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "igneousHeartbeatTimestamp"));
    sub_1002AFBC8(v6, (CFDictionaryRef)v2);
    uint64_t v3 = sub_1002F8DDC();
    sub_1002ACE6C(v3, "Kappa", (uint64_t)v6);
    uint64_t v4 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v4 + 944LL))(v4);
  }

  return sub_1002A5590(v6);
}

void sub_100FEE574( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100FEE58C()
{
  uint64_t v0 = sub_1002F8DDC();
  if (sub_1002A8F8C(v0, "Kappa", v6)) {
    uint64_t v1 = (uint64_t)objc_msgSend( objc_msgSend( (id)sub_1002A59CC((uint64_t)v6),  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "remotelyArmedClientTimeoutSeconds")),  "integerValue");
  }
  else {
    uint64_t v1 = 900LL;
  }
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v2 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "timeout seconds %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    v7[0] = 67109120;
    v7[1] = v1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "timeout seconds %d",  v7);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "int CLKappaNotifier::getRemoteTimeoutSeconds()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_1002A5590(v6);
  return v1;
}

void sub_100FEE79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100FEE7C4(uint64_t a1, unint64_t *a2, char a3)
{
  if ((a3 & 1) != 0) {
    char v5 = -1;
  }
  else {
    char v5 = sub_100FEE984(a1, *a2);
  }
  *(_BYTE *)(a1 + 330) = v5;
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  id v6 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Firing companion stop event", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "Firing companion stop event",  v9,  2);
    int v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::stopCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  sub_100F052A0(a1 + 112, 6LL, (uint64_t)a2);
}

unint64_t sub_100FEE984(uint64_t a1, unint64_t a2)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  uint64_t v3 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67110656;
    unsigned int v12 = (a2 >> 8) & 1;
    __int16 v13 = 1024;
    unsigned int v14 = WORD1(a2) & 1;
    __int16 v15 = 1024;
    unsigned int v16 = BYTE3(a2) & 1;
    __int16 v17 = 1024;
    int v18 = BYTE4(a2) & 1;
    __int16 v19 = 1024;
    int v20 = HIBYTE(a2) & 1;
    __int16 v21 = 1024;
    int v22 = (a2 >> 40) & 1;
    __int16 v23 = 1024;
    int v24 = HIWORD(a2) & 1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "constructOverrideClientBitset %d %d %d %d %d %d %d",  buf,  0x2Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    *(_WORD *)int v8 = 1024;
    *(_DWORD *)&v8[2] = WORD1(a2) & 1;
    LOWORD(v9) = 1024;
    HIWORD(v9) = (HIDWORD(a2) >> 8) & 1;
    int v10 = HIWORD(a2) & 1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "constructOverrideClientBitset %d %d %d %d %d %d %d",  &v7,  44,  67110656,  *(_DWORD *)v8,  BYTE3(a2) & 1,  0x4000000,  v9);
    id v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint8_t CLKappaNotifier::constructOverrideClientBitset(CMSPU::Safety::Command::OverrideClient, BOOL)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  return (a2 >> 23) & 2 | (a2 >> 8) & 1 | (a2 >> 38) & 4;
}

void sub_100FEEBE4(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = (unsigned __int8 *)a1;
  if (*(unsigned __int8 *)(a2 + 3) | *(unsigned __int8 *)(a2 + 5))
  {
    a1 = sub_100FE58F8();
    if ((a1 & 1) == 0)
    {
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v10 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "refusing to arm logging devices for marty/igneous",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "refusing to arm logging devices for marty/igneous",  &v22,  2,  v22);
LABEL_62:
      int v20 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)",  "%s\n",  v11);
      if (v20 != buf) {
        free(v20);
      }
      return;
    }
  }

  if (*(_BYTE *)(a2 + 1))
  {
    a1 = sub_100FEBE94(v5);
    if ((a1 & 1) == 0)
    {
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      unsigned int v12 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "refusing to collect, kappa not allowed",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "refusing to collect, kappa not allowed",  &v22,  2,  v22);
      goto LABEL_62;
    }
  }

  if (*(_BYTE *)(a2 + 3))
  {
    a1 = sub_100FEC258(v5);
    if ((a1 & 1) == 0)
    {
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      __int16 v13 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "refusing to collect, marty not allowed",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "refusing to collect, marty not allowed",  &v22,  2,  v22);
      goto LABEL_62;
    }
  }

  if (!*(_BYTE *)(a2 + 5) || (a1 = sub_100FEC61C((uint64_t)v5), (a1 & 1) != 0))
  {
    if ((a3 & 1) == 0)
    {
      int v6 = sub_100FEE984(a1, *(void *)a2);
      v5[328] |= v6;
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v7 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        int v8 = v5[328];
        *(_DWORD *)uint64_t buf = 67109376;
        int v26 = v6;
        __int16 v27 = 1024;
        int v28 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "arm remote %d remote armed bitmap %d",  buf,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v17 = v5[328];
        LODWORD(v22) = 67109376;
        HIDWORD(v22) = v6;
        __int16 v23 = 1024;
        int v24 = v17;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "arm remote %d remote armed bitmap %d",  &v22,  14);
        __int16 v19 = (uint8_t *)v18;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)",  "%s\n",  v18);
        if (v19 != buf) {
          free(v19);
        }
      }
    }

    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    int v9 = (os_log_s *)qword_1019345E8;
    if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Firing companion collect event", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      LOWORD(v22) = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "Firing companion collect event",  &v22,  v21);
      unsigned int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::onCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    sub_100F052A0((uint64_t)(v5 + 112), 5LL, a2);
    return;
  }

  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  unsigned int v14 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "refusing to collect, igneous not allowed",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    LOWORD(v22) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "refusing to collect, igneous not allowed",  &v22,  2,  v22);
    goto LABEL_62;
  }

uint64_t sub_100FEF320()
{
  uint64_t v0 = sub_1002F8DDC();
  if (sub_1002A8F8C(v0, "Kappa", v6)) {
    uint64_t v1 = (uint64_t)objc_msgSend( objc_msgSend( (id)sub_1002A59CC((uint64_t)v6),  "valueForKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "locallyArmedClientHeartbeatSeconds")),  "integerValue");
  }
  else {
    uint64_t v1 = 300LL;
  }
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  int v2 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "heartbeat timer configured to use %d seconds",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    v7[0] = 67109120;
    v7[1] = v1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "heartbeat timer configured to use %d seconds",  v7);
    char v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "int CLKappaNotifier::getLocalHeartbeatTimerSeconds()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_1002A5590(v6);
  return v1;
}

void sub_100FEF530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

id sub_100FEF558(uint64_t a1, uint64_t a2)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  uint64_t v4 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setting dem os_activity_scope_state_s state = %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "setting dem os_activity_scope_state_s state = %d",  v8);
    int v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::requestDemFlatness(BOOL)", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLDigitalElevationModel"),  "updateComputeDemFlatnessMetric:",  a2);
}

void sub_100FEF7CC(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1019345E0 != -1) {
    dispatch_once(&qword_1019345E0, &stru_101893A78);
  }
  uint64_t v3 = (os_log_s *)qword_1019345E8;
  if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_INFO))
  {
    int v4 = *a2;
    int v5 = a2[1];
    int v6 = a2[2];
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)uint64_t buf = 67109888;
    int v20 = v4;
    __int16 v21 = 1024;
    int v22 = v5;
    __int16 v23 = 1024;
    int v24 = v6;
    __int16 v25 = 1024;
    int v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "inject AOP trigger %d %d %d, delayUsec %d",  buf,  0x1Au);
  }

  uint64_t v8 = sub_1002921D0(115, 2);
  if ((_DWORD)v8)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345E0 != -1) {
      dispatch_once(&qword_1019345E0, &stru_101893A78);
    }
    __int16 v9 = a2[1];
    int v10 = a2[2];
    int v11 = *((_DWORD *)a2 + 1);
    LOWORD(v15) = 1024;
    HIWORD(v15) = v9;
    int v16 = v10;
    __int16 v17 = 1024;
    int v18 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  1LL,  "inject AOP trigger %d %d %d, delayUsec %d",  &v14,  26,  67109888,  v15);
    __int16 v13 = (uint8_t *)v12;
    uint64_t v8 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::injectTrigger(CMMotionCoprocessorCommand::Kappa::Trigger)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  sub_100FE820C(v8, 3, a2, 0x18uLL);
}

uint64_t sub_100FF0498(uint64_t a1)
{
  uint64_t v1 = *(const char **)(*(void *)(a1 + 112) + 40LL);
  if (!strcmp(v1, "triggered")) {
    return 2LL;
  }
  else {
    return strcmp(v1, "armed") == 0;
  }
}

BOOL sub_100FF0BE4()
{
  double v12 = -1.0;
  uint64_t v0 = sub_1002F8DDC();
  sub_1002A82BC(v0, "CLIgneousTriggerProbability", &v12);
  double v1 = v12;
  if (v12 <= -1.0) {
    double v1 = 1.0;
  }
  double v12 = v1;
  sub_101204164(buf, "IgneousTriggerProbability", &v12, 0);
  double v12 = *(double *)((char *)v16 + 4);
  if (*(double *)((char *)v16 + 4) > 1.0 || *(double *)((char *)v16 + 4) < 0.0)
  {
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    int v2 = (os_log_s *)qword_1019347D8;
    if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)int v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "invalid trigger probability %f, ignoring",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      int v13 = 134217984;
      *(double *)int v14 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  17LL,  "invalid trigger probability %f, ignoring",  COERCE_DOUBLE(&v13));
      int v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLKappaNotifier::shouldTriggerIgneous()", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    double v12 = 0.0;
  }

  double v3 = drand48();
  double v4 = v12;
  if (qword_1019347D0 != -1) {
    dispatch_once(&qword_1019347D0, &stru_101893BB8);
  }
  int v5 = (os_log_s *)qword_1019347D8;
  if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    LODWORD(v16[0]) = v3 <= v4;
    WORD2(v16[0]) = 2048;
    *(double *)((char *)v16 + 6) = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "shouldTriggerIgneous,%d,TriggerProb,%f",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    int v13 = 67109376;
    LODWORD(v14[0]) = v3 <= v4;
    WORD2(v14[0]) = 2048;
    *(double *)((char *)v14 + 6) = v12;
    LODWORD(v11) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  0LL,  "shouldTriggerIgneous,%d,TriggerProb,%f",  &v13,  v11);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKappaNotifier::shouldTriggerIgneous()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  return v3 <= v4;
}

void sub_100FF102C(id a1)
{
  qword_10199FE30 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLKappaNotifierSilo");
}

void sub_100FF120C(id a1)
{
  if ((sub_1004F97F4() & 0x6000000000000LL) != 0) {
    byte_10199FE40 = 1;
  }
}

void sub_100FF1238(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        __int16 v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101893C18);
      }
      int v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        double v11 = (void *)(a1 + 8);
        *(_DWORD *)uint64_t buf = 136446466;
        __int16 v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101893C18);
        }
        double v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        __int16 v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        int v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::removeCli ent(int) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::Noti ficationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100FF14AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101992DB0);
}

uint64_t sub_100FF14C0(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)int v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          int v24 = (uint64_t *)v18;
        }
        else {
          int v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)uint64_t buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        *(void *)uint64_t buf = 0LL;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          int v36 = sub_100FF4F88(buf);
          sub_100FF5008((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_101992DB1;
        HIDWORD(v40) = v17;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        __int16 v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        uint64_t v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)uint64_t buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101893C18);
  }
  int v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    __int16 v37 = (void *)(a1 + 8);
    *(_DWORD *)int v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    __int16 v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::registerForNo tification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLKappaNotifier_Type::Notifi cation, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_100FF191C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      __int16 v9 = (uint64_t *)v5;
    }
    else {
      __int16 v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101893C18);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      int v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::clientRegis tered(int, const Notification_T &) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CL KappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100FF1B9C(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            int v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101893C18);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                __int16 v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101893C18);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                uint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::u nregisterForNotification(int, const Notification_T &) [Notification_T = CLKappaNotifier_Type::Notifica tion, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, Registra tionInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100FF1F24(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  void v6[2] = 0LL;
  *uint64_t v6 = off_101893D48;
  v6[1] = 0LL;
  uint64_t v7 = *a3;
  *((void *)&v14 + 1) = v6;
  v6[3] = v7;
  *(void *)&__int128 v14 = v6 + 3;
  int v13 = *a2;
  int v15 = &v13;
  BOOL v8 = sub_10023347C((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_1012CF090, &v15);
  sub_10005F550((uint64_t)(v8 + 8), &v14);
  int v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    BOOL v10 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return 1LL;
}

void sub_100FF1FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100FF200C(uint64_t a1, int *a2, void *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    BOOL v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    unint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v12 = (void *)(a1 + 8);
      int v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      __int16 v68 = v12;
      __int16 v69 = 2050;
      __int16 v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)uint64_t v71 = &v71[8];
      memset(&v71[8], 0, 24);
      __int16 v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = operator new(0x20uLL);
      _DWORD v27[2] = 0LL;
      void *v27 = off_101893D48;
      v27[1] = 0LL;
      v27[3] = *a3;
      *(void *)uint64_t buf = v27 + 3;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_100FF5954(a3);
    if (a5 == -1)
    {
      sub_100FF59D4((void *)a1, a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          __int16 v37 = (uint64_t *)v33;
        }
        else {
          __int16 v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          int v43 = (unint64_t *)v38;
        }
        else {
          int v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        int v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101893C18);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            int v46 = v71;
          }
          else {
            int v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101893C18);
          }
          __int16 v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            __int16 v49 = __p;
          }
          else {
            __int16 v49 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          __int16 v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::notifyC lientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLKapp aNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_ T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      int v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      int v52 = v40 + 3;
      __int16 v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      int v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          __int16 v59 = v53;
        }
        else {
          __int16 v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          int v56 = v53;
        }
        __int16 v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_100FF5008((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_100FF2644( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100FF2690(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136315138;
      __int16 v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101893C18);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::listClients () [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::Notification Data, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101893C18);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      __int16 v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101893C18);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::listClients () [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::Notification Data, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    BOOL v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      unint64_t v11 = (void *)(a1 + 8);
      do
      {
        BOOL v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101893C18);
            }
            int v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              __int128 v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              __int16 v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101893C18);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::lis tClients() [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Ty pe::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                BOOL v12 = v18;
              }

              while (!v19);
            }

            BOOL v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            BOOL v10 = v26;
          }

          while (!v19);
        }

        BOOL v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100FF2C38(id a1)
{
  qword_1019345E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Kappa");
}

uint64_t sub_100FF2C64(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1;
  switch(a2)
  {
    case 5LL:
      sub_100FE827C(a1, a3);
      break;
    case 2LL:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      uint64_t v4 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "AOP is not armed", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        v8[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  16LL,  "AOP is not armed",  v8,  2);
        uint64_t v6 = (uint8_t *)v5;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual State *CLKappaNotifier::Idle::trigger(uint64_t, const void *)",  "%s\n",  v5);
        if (v6 != buf) {
          free(v6);
        }
      }

      break;
    case 1LL:
      if (*a3) {
        return *(void *)(a1 + 48) + 184LL;
      }
      break;
    default:
      return 0LL;
  }

  return v3;
}

uint64_t sub_100FF2E34(uint64_t a1)
{
  return sub_100FEE460(*(void *)(a1 + 48));
}

void sub_100FF2E5C(void *__p)
{
  *std::string __p = off_10188C380;
  int v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_100FF2E9C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = 0LL;
  switch(a2)
  {
    case 1LL:
      if (*a3) {
        goto LABEL_62;
      }
      return *(void *)(a1 + 48) + 128LL;
    case 2LL:
      int v6 = *a3;
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      uint64_t v7 = (os_log_s *)qword_1019347D8;
      if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v60 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "receive AOP trigger,igneousPath,%u",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347D0 != -1) {
          dispatch_once(&qword_1019347D0, &stru_101893BB8);
        }
        int v55 = 67109120;
        int v56 = v6;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  0LL,  "receive AOP trigger,igneousPath,%u",  &v55);
        __int16 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }

      if ((v6 & 1) != 0)
      {
        uint64_t v8 = *(void *)(a1 + 48);
        int v9 = *(_DWORD *)(v8 + 420) + 1;
        *(_DWORD *)(v8 + 420) = v9;
        sub_100FF3B8C(v8, v9);
      }

      return *(void *)(a1 + 48) + 240LL;
    case 5LL:
      sub_100FE827C(0LL, a3);
      goto LABEL_62;
    case 6LL:
      sub_100FE8A3C(0LL, a3);
      goto LABEL_62;
    case 11LL:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      int v22 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "received kAOPArmClient", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        LOWORD(v55) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "received kAOPArmClient",  &v55,  2);
        int v41 = (uint8_t *)v40;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)",  "%s\n",  v40);
        if (v41 != buf) {
          free(v41);
        }
      }

      uint64_t v23 = *(void *)(a1 + 48);
      unsigned __int8 v24 = *a3;
      if ((*(_BYTE *)(v23 + 328) & *a3) == 0)
      {
        char v25 = *(_BYTE *)(v23 + 329);
        if (!v25)
        {
          int v26 = sub_100FEF320();
          if (qword_1019345E0 != -1) {
            dispatch_once(&qword_1019345E0, &stru_101893A78);
          }
          __int16 v27 = (os_log_s *)qword_1019345E8;
          if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 67109120;
            int v60 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "setting heartbeat to %d seconds",  buf,  8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345E0 != -1) {
              dispatch_once(&qword_1019345E0, &stru_101893A78);
            }
            int v55 = 67109120;
            int v56 = v26;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "setting heartbeat to %d seconds",  &v55);
            __int16 v51 = (uint8_t *)v50;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)",  "%s\n",  v50);
            if (v51 != buf) {
              free(v51);
            }
          }

          [*(id *)(*(void *)(a1 + 48) + 320) setNextFireDelay:1.0 interval:(double)v26];
          unsigned __int8 v24 = *a3;
          uint64_t v23 = *(void *)(a1 + 48);
          char v25 = *(_BYTE *)(v23 + 329);
        }

        *(_BYTE *)(v23 + 329) = v25 | v24;
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        uint64_t v28 = (os_log_s *)qword_1019345E8;
        if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
        {
          int v29 = *a3;
          int v30 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 329LL);
          *(_DWORD *)uint64_t buf = 67109376;
          int v60 = v29;
          __int16 v61 = 1024;
          int v62 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "arm client %d locally armed bitmap %d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345E0 != -1) {
            dispatch_once(&qword_1019345E0, &stru_101893A78);
          }
          int v42 = *a3;
          int v43 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 329LL);
          int v55 = 67109376;
          int v56 = v42;
          __int16 v57 = 1024;
          int v58 = v43;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "arm client %d locally armed bitmap %d",  &v55,  14);
          int v45 = (uint8_t *)v44;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)",  "%s\n",  v44);
          if (v45 != buf) {
            free(v45);
          }
        }

        sub_100FE91FC(*(void *)(a1 + 48), a3);
      }

      goto LABEL_62;
    case 12LL:
      if (qword_1019345E0 != -1) {
        dispatch_once(&qword_1019345E0, &stru_101893A78);
      }
      BOOL v10 = (os_log_s *)qword_1019345E8;
      if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "received kAOPDisarmClient", buf, 2u);
      }

      uint64_t v11 = sub_1002921D0(115, 2);
      if ((_DWORD)v11)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        LOWORD(v55) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "received kAOPDisarmClient",  &v55,  2);
        int v39 = (uint8_t *)v38;
        uint64_t v11 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)",  "%s\n",  v38);
        if (v39 != buf) {
          free(v39);
        }
      }

      sub_100FEA7B4(v11, (uint64_t)a3);
      BOOL v12 = *(unsigned __int8 **)(a1 + 48);
      int v13 = *a3;
      int v14 = v12[328];
      if ((v14 & v13) != 0)
      {
        v12[328] = v14 & ~v12[330];
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v15 = (os_log_s *)qword_1019345E8;
        if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(void *)(a1 + 48);
          int v17 = *(unsigned __int8 *)(v16 + 330);
          LODWORD(v16) = *(unsigned __int8 *)(v16 + 328);
          *(_DWORD *)uint64_t buf = 67109376;
          int v60 = v17;
          __int16 v61 = 1024;
          int v62 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "disarm remote %d remote armed bitmap %d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345E0 != -1) {
            dispatch_once(&qword_1019345E0, &stru_101893A78);
          }
          uint64_t v18 = *(void *)(a1 + 48);
          int v19 = *(unsigned __int8 *)(v18 + 330);
          LODWORD(v18) = *(unsigned __int8 *)(v18 + 328);
          int v55 = 67109376;
          int v56 = v19;
          __int16 v57 = 1024;
          int v58 = v18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "disarm remote %d remote armed bitmap %d",  &v55,  14);
          int v21 = (uint8_t *)v20;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)",  "%s\n",  v20);
          if (v21 != buf) {
            free(v21);
          }
        }
      }

      else
      {
        v12[329] &= ~(_BYTE)v13;
        if (qword_1019345E0 != -1) {
          dispatch_once(&qword_1019345E0, &stru_101893A78);
        }
        int v31 = (os_log_s *)qword_1019345E8;
        if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
        {
          int v32 = *a3;
          int v33 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 329LL);
          *(_DWORD *)uint64_t buf = 67109376;
          int v60 = v32;
          __int16 v61 = 1024;
          int v62 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "disarm client %d locally armed bitmap %d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345E0 != -1) {
            dispatch_once(&qword_1019345E0, &stru_101893A78);
          }
          int v46 = *a3;
          int v47 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 329LL);
          int v55 = 67109376;
          int v56 = v46;
          __int16 v57 = 1024;
          int v58 = v47;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "disarm client %d locally armed bitmap %d",  &v55,  14);
          __int16 v49 = (uint8_t *)v48;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)",  "%s\n",  v48);
          if (v49 != buf) {
            free(v49);
          }
        }

        uint64_t v34 = *(void *)(a1 + 48);
        if (!*(_BYTE *)(v34 + 329))
        {
          if (qword_1019345E0 != -1) {
            dispatch_once(&qword_1019345E0, &stru_101893A78);
          }
          int v35 = (os_log_s *)qword_1019345E8;
          if (os_log_type_enabled((os_log_t)qword_1019345E8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "turning off heartbeat", buf, 2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345E0 != -1) {
              dispatch_once(&qword_1019345E0, &stru_101893A78);
            }
            LOWORD(v55) = 0;
            LODWORD(v54) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345E8,  2LL,  "turning off heartbeat",  &v55,  v54);
            __int16 v53 = (uint8_t *)v52;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)",  "%s\n",  v52);
            if (v53 != buf) {
              free(v53);
            }
          }

          [*(id *)(*(void *)(a1 + 48) + 320) setNextFireDelay:1.79769313e308 interval:1.79769313e308];
          uint64_t v34 = *(void *)(a1 + 48);
        }

        sub_100FE99EC(v34, a3);
      }

      goto LABEL_62;
    case 13LL:
      sub_100FEA1DC(*(void *)(a1 + 48), a3);
LABEL_62:
      uint64_t result = a1;
      break;
    default:
      return result;
  }

  return result;
}

id sub_100FF3AEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(v2 + 560);
  if (v3)
  {
    [*(id *)(v3 + 16) register:*(void *)(v3 + 8) forNotification:5 registrationInfo:0];
    uint64_t v2 = *(void *)(a1 + 48);
  }

  return [*(id *)(*(void *)(v2 + 592) + 16) register:*(void *)(*(void *)(v2 + 592) + 8) forNotification:0 registrationInfo:0];
}

id sub_100FF3B48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(v1 + 560);
  if (v2)
  {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:5];
    uint64_t v1 = *(void *)(a1 + 48);
  }

  return [*(id *)(*(void *)(v1 + 592) + 16) unregister:*(void *)(*(void *)(v1 + 592) + 8) forNotification:0];
}

void sub_100FF3B8C(uint64_t a1, int a2)
{
  int v7 = a2;
  uint64_t v2 = sub_1002F8DDC();
  sub_1002AC220(v2, "CLIgneousMotionTriggerCount", &v7);
  uint64_t v3 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v3 + 944LL))(v3);
  if (qword_1019347D0 != -1) {
    dispatch_once(&qword_1019347D0, &stru_101893BB8);
  }
  uint64_t v4 = (os_log_s *)qword_1019347D8;
  if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "save Igneous motion trigger count,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    v8[0] = 67109120;
    v8[1] = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  0LL,  "save Igneous motion trigger count,%d",  v8);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::saveIgneousMotionTriggerCount(int)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

uint64_t sub_100FF3D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_100F05038(a1, (uint64_t)"triggered", a2 + 184);
  *uint64_t v4 = off_101893B68;
  v4[6] = a2;
  id v5 = [*(id *)(a2 + 40) newTimer];
  *(void *)(a1 + 56) = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100FF3E18;
  v7[3] = &unk_10181D3D0;
  _DWORD v7[4] = a1;
  [v5 setHandler:v7];
  return a1;
}

void sub_100FF3DEC(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = off_10188C380;
  uint64_t v3 = (void *)v1[2];
  if (v3)
  {
    v1[3] = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100FF3E18(uint64_t a1)
{
}

uint64_t sub_100FF3E30(uint64_t a1, uint64_t a2)
{
  if (a2 != 2) {
    return 0LL;
  }
  [*(id *)(a1 + 56) setNextFireDelay:660.0 interval:1.79769313e308];
  return *(void *)(a1 + 48) + 240LL;
}

id sub_100FF3E94(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 560LL);
  if (v2)
  {
    [*(id *)(v2 + 16) register:*(void *)(v2 + 8) forNotification:0 registrationInfo:0];
    sub_100FEF558(*(void *)(a1 + 48), 1LL);
  }

  return [*(id *)(a1 + 56) setNextFireDelay:660.0 interval:1.79769313e308];
}

void *sub_100FF3EEC(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 48);
  if (result[70])
  {
    sub_100FEF558((uint64_t)result, 0LL);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 560) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 48) + 560) + 8) forNotification:0];
    uint64_t result = *(void **)(a1 + 48);
  }

  result[46] = 0LL;
  result[47] = 0LL;
  result[48] = 0LL;
  return result;
}

void sub_100FF3F3C(uint64_t a1, char a2)
{
  HIBYTE(v7) = a2;
  uint64_t v2 = sub_1002F8DDC();
  sub_1002AB3FC(v2, "CLIgneousArmStatus", (_BYTE *)&v7 + 7);
  uint64_t v3 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v3 + 944LL))(v3);
  if (qword_1019347D0 != -1) {
    dispatch_once(&qword_1019347D0, &stru_101893BB8);
  }
  uint64_t v4 = (os_log_s *)qword_1019347D8;
  if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v10 = HIBYTE(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "saved Igneous arm status,%{public}d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    v8[0] = 67240192;
    v8[1] = HIBYTE(v7);
    LODWORD(v7) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  2LL,  "saved Igneous arm status,%{public}d",  v8,  v7);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::saveIgneousArmStatus(BOOL)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

void sub_100FF4108(id a1)
{
  qword_1019347D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Igneous");
}

void sub_100FF4134(id a1)
{
  qword_10199FE58 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
}

uint64_t sub_100FF415C()
{
  if (qword_10199FE50 != -1) {
    dispatch_once(&qword_10199FE50, &stru_101893BD8);
  }
  off_101992DA8 = (uint64_t (*)())dlsym((void *)qword_10199FE58, "MAGetActivationState");
  return off_101992DA8();
}

BOOL sub_100FF41B0(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = 0.0;
  uint64_t v3 = sub_1002F8DDC();
  sub_1002A82BC(v3, "CLIgneousScheduledEnableStartTime", &v5);
  return Current > v5 && Current < v5 + *(double *)(a1 + 432);
}

void sub_100FF4228(void *a1, xpc_activity_t activity)
{
  uint64_t v4 = a1[4];
  if (!xpc_activity_get_state(activity))
  {
    sub_100FF4938(v4, activity, a1[5]);
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    double v5 = (os_log_s *)qword_1019347D8;
    if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[6];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v8 = a1[5];
      *(_DWORD *)uint64_t buf = 136315650;
      uint64_t v53 = v6;
      __int16 v54 = 2048;
      CFAbsoluteTime v55 = Current;
      __int16 v56 = 2048;
      uint64_t v57 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "register on DAS,%s,now,%f,delay,%lld",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      uint64_t v34 = qword_1019347D8;
      uint64_t v35 = a1[6];
      CFAbsoluteTime v36 = CFAbsoluteTimeGetCurrent();
      uint64_t v37 = a1[5];
      int v46 = 136315650;
      uint64_t v47 = v35;
      __int16 v48 = 2048;
      CFAbsoluteTime v49 = v36;
      __int16 v50 = 2048;
      uint64_t v51 = v37;
      LODWORD(v45) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v34,  0LL,  "register on DAS,%s,now,%f,delay,%lld",  (const char *)&v46,  v45);
      int v39 = (uint8_t *)v38;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke",  "%s\n",  v38);
      if (v39 != buf) {
        free(v39);
      }
    }
  }

  if (xpc_activity_get_state(activity) == 2)
  {
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    int v9 = (os_log_s *)qword_1019347D8;
    if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[6];
      CFAbsoluteTime v11 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)uint64_t buf = 136315394;
      uint64_t v53 = v10;
      __int16 v54 = 2048;
      CFAbsoluteTime v55 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "get run time on DAS,%s,now,%f", buf, 0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      uint64_t v29 = qword_1019347D8;
      uint64_t v30 = a1[6];
      CFAbsoluteTime v31 = CFAbsoluteTimeGetCurrent();
      int v46 = 136315394;
      uint64_t v47 = v30;
      __int16 v48 = 2048;
      CFAbsoluteTime v49 = v31;
      LODWORD(v45) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  0LL,  "get run time on DAS,%s,now,%f",  (const char *)&v46,  v45);
      int v33 = (uint8_t *)v32;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke",  "%s\n",  v32);
      if (v33 != buf) {
        free(v33);
      }
    }

    BOOL v12 = sub_100FEBE94((unsigned __int8 *)v4);
    BOOL v13 = sub_100FEC258((unsigned __int8 *)v4);
    int v14 = sub_100FEC61C(v4);
    int v15 = 0x10000;
    if (!v14) {
      int v15 = 0;
    }
    int v16 = 256;
    if (!v13) {
      int v16 = 0;
    }
    sub_100FF4A08(v4, v16 | v12 | v15);
    if (xpc_activity_set_state(activity, 5LL))
    {
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      int v17 = (os_log_s *)qword_1019347D8;
      if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = a1[6];
        CFAbsoluteTime v19 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)uint64_t buf = 136315394;
        uint64_t v53 = v18;
        __int16 v54 = 2048;
        CFAbsoluteTime v55 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "finish on DAS,%s,now,%f", buf, 0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347D0 != -1) {
          dispatch_once(&qword_1019347D0, &stru_101893BB8);
        }
        uint64_t v40 = qword_1019347D8;
        uint64_t v41 = a1[6];
        CFAbsoluteTime v42 = CFAbsoluteTimeGetCurrent();
        int v46 = 136315394;
        uint64_t v47 = v41;
        __int16 v48 = 2048;
        CFAbsoluteTime v49 = v42;
        LODWORD(v45) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v40,  0LL,  "finish on DAS,%s,now,%f",  (const char *)&v46,  v45);
        char v44 = (uint8_t *)v43;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke",  "%s\n",  v43);
        if (v44 != buf) {
          free(v44);
        }
      }

      uint64_t v20 = (const char *)a1[6];
      if (!strcmp(v20, *(const char **)(v4 + 392)))
      {
        *(_BYTE *)(v4 + 416) = 0;
      }

      else if (!strcmp(v20, *(const char **)(v4 + 400)))
      {
        *(_BYTE *)(v4 + 417) = 0;
      }

      else if (!strcmp(v20, *(const char **)(v4 + 408)))
      {
        *(_BYTE *)(v4 + 418) = 0;
      }
    }

    else
    {
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      int v21 = (os_log_s *)qword_1019347D8;
      if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = a1[6];
        CFAbsoluteTime v23 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)uint64_t buf = 136315394;
        uint64_t v53 = v22;
        __int16 v54 = 2048;
        CFAbsoluteTime v55 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "error on DAS,%s,now,%f", buf, 0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347D0 != -1) {
          dispatch_once(&qword_1019347D0, &stru_101893BB8);
        }
        uint64_t v24 = qword_1019347D8;
        uint64_t v25 = a1[6];
        CFAbsoluteTime v26 = CFAbsoluteTimeGetCurrent();
        int v46 = 136315394;
        uint64_t v47 = v25;
        __int16 v48 = 2048;
        CFAbsoluteTime v49 = v26;
        LODWORD(v45) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  0LL,  "error on DAS,%s,now,%f",  (const char *)&v46,  v45);
        uint64_t v28 = (uint8_t *)v27;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke",  "%s\n",  v27);
        if (v28 != buf) {
          free(v28);
        }
      }
    }
  }

void sub_100FF4938(uint64_t a1, _xpc_activity_s *a2, int64_t a3)
{
  xpc_object_t v5 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_string(v5, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_int64(v5, XPC_ACTIVITY_DELAY, a3);
  xpc_dictionary_set_int64(v5, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_5_MIN);
  xpc_activity_set_criteria(a2, v5);
  xpc_release(v5);
}

void sub_100FF4A08(uint64_t a1, int a2)
{
  __int16 v18 = a2;
  char v19 = BYTE2(a2);
  sub_100FE820C(a1, 10, &v18, 3uLL);
  buf[0] = 0;
  uint64_t v3 = sub_1002F8DDC();
  sub_1002A6F64(v3, "CLIgneousArmStatus", (BOOL *)buf);
  if (buf[0]) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v19 == 0;
  }
  if (!v4)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v8 = Current;
    double v17 = Current;
    if (qword_1019347D0 != -1) {
      dispatch_once(&qword_1019347D0, &stru_101893BB8);
    }
    int v9 = (os_log_s *)qword_1019347D8;
    if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *(unsigned __int8 *)(a1 + 314);
      *(_DWORD *)uint64_t buf = 134218240;
      double v25 = v8;
      __int16 v26 = 1024;
      int v27 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "save Igneous arm session startTime,%f,isCharging,%d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      int v14 = *(unsigned __int8 *)(a1 + 314);
      int v20 = 134218240;
      double v21 = v8;
      __int16 v22 = 1024;
      int v23 = v14;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  2LL,  "save Igneous arm session startTime,%f,isCharging,%d",  COERCE_DOUBLE(&v20),  18);
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKappaNotifier::_updateAOPArmStatus(CMMotionCoprocessorCommand::Kappa::EnableClient)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    uint64_t v11 = sub_1002F8DDC();
    sub_1002AC7B8(v11, "CLIgneousArmSessionStartTime", &v17);
    uint64_t v12 = sub_1002F8DDC();
    sub_1002AB3FC(v12, "CLIgneousArmSessionIsCharging", (_BYTE *)(a1 + 314));
    uint64_t v13 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v13 + 944LL))(v13);
    *(CFAbsoluteTime *)(a1 + 464) = CFAbsoluteTimeGetCurrent();
    uint64_t v5 = a1;
    char v6 = 1;
    goto LABEL_15;
  }

  if (buf[0] && !v19)
  {
    *(void *)(a1 + 464) = 0LL;
    uint64_t v5 = a1;
    char v6 = 0;
LABEL_15:
    sub_100FF3F3C(v5, v6);
  }

  sub_100FF4C9C(a1);
}

void sub_100FF4C9C(uint64_t a1)
{
  *(_DWORD *)uint64_t buf = 0;
  uint64_t v2 = sub_1002F8DDC();
  sub_1002A7CB0(v2, "CLIgneousArmMinutes", buf);
  int v3 = *(_DWORD *)buf;
  buf[0] = 0;
  uint64_t v4 = sub_1002F8DDC();
  sub_1002A6F64(v4, "CLIgneousArmStatus", (BOOL *)buf);
  int v5 = buf[0];
  double Current = CFAbsoluteTimeGetCurrent();
  if (v5)
  {
    double v7 = Current;
    double v8 = *(double *)(a1 + 464);
    if (v8 > 0.0)
    {
      unsigned int v9 = llround((v7 - v8) / 60.0);
      HIDWORD(v15) = (v3 - v9) & ~((int)(v3 - v9) >> 31);
      *(double *)(a1 + 464) = v7;
      uint64_t v10 = sub_1002F8DDC();
      sub_1002AC220(v10, "CLIgneousArmMinutes", (char *)&v15 + 4);
      uint64_t v11 = sub_1002F8DDC();
      (*(void (**)(uint64_t))(*(void *)v11 + 944LL))(v11);
      if (qword_1019347D0 != -1) {
        dispatch_once(&qword_1019347D0, &stru_101893BB8);
      }
      uint64_t v12 = (os_log_s *)qword_1019347D8;
      if (os_log_type_enabled((os_log_t)qword_1019347D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67240448;
        int v20 = HIDWORD(v15);
        __int16 v21 = 2050;
        double v22 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "saved Igneous arm minutes,%{public}d,now,%{public}f",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347D0 != -1) {
          dispatch_once(&qword_1019347D0, &stru_101893BB8);
        }
        v16[0] = 67240448;
        v16[1] = HIDWORD(v15);
        __int16 v17 = 2050;
        double v18 = v7;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347D8,  2LL,  "saved Igneous arm minutes,%{public}d,now,%{public}f",  v16,  v15);
        int v14 = (uint8_t *)v13;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLKappaNotifier::saveIgneousArmMinutes()", "%s\n", v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

void sub_100FF4F04(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100FF4F30(id **a1, id *a2)
{
  int v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = sub_100A87A08(v3);
    operator delete(v4);
  }

void sub_100FF4F5C(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

CLCppContainer *sub_100FF4F88(void *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  char v6 = sub_100FF50E4;
  double v7 = &unk_10181D3D0;
  double v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

_BYTE *sub_100FF5008(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    double v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32LL);
    sub_100FF50F4(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80LL;
    uint64_t v12 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v15 = (int *)(*(void *)a2 + 32LL);
    uint64_t v13 = sub_1004EF3D4(v12, v15, (uint64_t)&unk_1012CF090, &v15);
    uint64_t result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v14,  v10,  v11,  v13 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v14);
    }
  }

  return result;
}

void sub_100FF50E4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_100FF50F4(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0)
  {
    sub_100FF516C(a1);
  }

  else
  {
    objc_opt_class(&OBJC_CLASS___CLCppContainer);
    if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0) {
      sub_100FF54F4(a1);
    }
  }

void sub_100FF516C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_100FF58A0((uint64_t)&v7 + 7, a1);
    return;
  }

  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101893D18);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BE91FLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101893D18);
      }
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  v7,  v8);
LABEL_21:
      char v6 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLKappaNotifier_Type::NotificationData, Call back = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101893D18);
    }
    uint64_t v5 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BE91FLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101893D18);
      }
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  v7,  v8);
      goto LABEL_21;
    }
  }

id sub_100FF54F4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101893D18);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BE91FLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101893D18);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101893D18);
    }
    char v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BE91FLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101893D18);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLKappaNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_100FF58A0(uint64_t a1, void *a2)
{
  if ([a2 cppObjectPtr]
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D5138))
  {
    goto LABEL_5;
  }

  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)8)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    [a2 cppObjectPtr];
    return;
  }

  uint64_t v3 = (std::__shared_weak_count *)sub_10127F30C();
  sub_100FF5914(v3);
}

void sub_100FF5914(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101893D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100FF5928(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101893D48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

CLCppContainer *sub_100FF5954(void *a1)
{
  id v2 = operator new(8uLL);
  *id v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  char v6 = sub_100FF5DA8;
  uint64_t v7 = &unk_10181D3D0;
  uint64_t v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100FF59D4(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v51 = v9;
        sub_100FF50F4(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        unint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          uint64_t v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            char v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                double v22 = (uint64_t *)v17;
              }
              else {
                double v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                char v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int16 v50 = v19;
              sub_100FF5008(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v51 = v29;
              uint64_t v34 = v29[6];
              unint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      CFAbsoluteTime v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      CFAbsoluteTime v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      unint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      unint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      unint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              __int16 v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101893C18);
              }
              uint64_t v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                double v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                uint64_t v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101893C18);
                }
                double v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                __int16 v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::invokeCli entsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLKappaNotifier_Type::Notific ation, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, Registr ationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

void sub_100FF5DA8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_100FF5DB8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1013BE628;
      v1[3] = unk_1013BE638;
      v1[4] = xmmword_1013BE648;
      v1[0] = xmmword_1013BE608;
      v1[1] = unk_1013BE618;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100FF5E8C(_Unwind_Exception *a1)
{
}

uint64_t sub_100FF61A0(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0LL;
      *(_BYTE *)(a1 + 16) |= 1u;
      while (1)
      {
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          goto LABEL_40;
        }
        v17 += 7;
        BOOL v9 = v18++ >= 9;
        if (v9)
        {
          LODWORD(v19) = 0;
          goto LABEL_42;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v19) = 0;
      }
LABEL_42:
      *(_DWORD *)(a1 + 8) = v19;
    }

    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_36;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          uint64_t v14 = 0LL;
          goto LABEL_38;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v14 = 0LL;
      }
LABEL_38:
      *(_BYTE *)(a1 + 12) = v14 != 0;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100FF66AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10183F330;
  *(_BYTE *)(a1 + 8) = 1;
  uint64_t v3 = (_BYTE *)(a1 + 12820);
  *(void *)(a1 + 24) = 0x10000000000LL;
  *(_DWORD *)(a1 + 20) = 1031798784;
  *(_BYTE *)(a1 + 1056) = 1;
  *(void *)(a1 + 1072) = 0x10000000000LL;
  *(_DWORD *)(a1 + 1068) = 1031798784;
  *(void *)(a1 + 2104) = a2;
  *(void *)(a1 + 2112) = 0LL;
  *(_DWORD *)(a1 + 2120) = 50;
  *(_BYTE *)(a1 + 2124) = 1;
  *(_DWORD *)(a1 + 2144) = 256;
  *(void *)(a1 + 2136) = 1031798784LL;
  *(_BYTE *)(a1 + 3172) = 1;
  *(_DWORD *)(a1 + 3192) = 256;
  *(void *)(a1 + 3184) = 1031798784LL;
  *(_BYTE *)(a1 + 4220) = 1;
  *(_DWORD *)(a1 + 4240) = 256;
  *(void *)(a1 + 4232) = 1031798784LL;
  *(void *)(a1 + 5272) = 0LL;
  *(_DWORD *)(a1 + 5280) = 25;
  *(_BYTE *)(a1 + 5284) = 1;
  *(_DWORD *)(a1 + 5304) = 256;
  *(void *)(a1 + 5296) = 1031798784LL;
  *(_BYTE *)(a1 + 6332) = 1;
  *(_DWORD *)(a1 + 6352) = 256;
  *(void *)(a1 + 6344) = 1031798784LL;
  *(_BYTE *)(a1 + 7380) = 1;
  *(_DWORD *)(a1 + 7400) = 256;
  *(void *)(a1 + 7392) = 1031798784LL;
  sub_100FBFFE8(a1 + 8432);
  *(_BYTE *)(a1 + 10724) = 1;
  *(_OWORD *)(a1 + 10708) = 0u;
  *(_OWORD *)(a1 + 10680) = 0u;
  *(_OWORD *)(a1 + 10696) = 0u;
  *(_OWORD *)(a1 + 10648) = 0u;
  *(_OWORD *)(a1 + 10664) = 0u;
  *(_OWORD *)(a1 + 10632) = 0u;
  *(_DWORD *)(a1 + 10744) = 256;
  *(void *)(a1 + 10736) = 1031798784LL;
  *(_BYTE *)(a1 + 11772) = 1;
  *(_DWORD *)(a1 + 11792) = 256;
  *(void *)(a1 + 11784) = 1031798784LL;
  _BYTE *v3 = 1;
  *(_DWORD *)(a1 + 12840) = 256;
  *(void *)(a1 + 12832) = 1031798784LL;
  v3[1048] = 0;
  *(_DWORD *)(a1 + 13872) = 0;
  *(_DWORD *)(a1 + 5300) = 0;
  *(_DWORD *)(a1 + 6348) = 0;
  *(_DWORD *)(a1 + 7396) = 0;
  *(_DWORD *)(a1 + 2140) = 0;
  *(_DWORD *)(a1 + 3188) = 0;
  *(_DWORD *)(a1 + 4236) = 0;
  *(_OWORD *)(a1 + 13880) = 0u;
  *(void *)(a1 + 13896) = 0LL;
  return a1;
}

float sub_100FF6814( uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, int a7)
{
  if (a7)
  {
    (*(void (**)(uint64_t, unsigned __int16 *, _DWORD *))(*(void *)a1 + 24LL))(a1, a2 + 6, a3);
    (*(void (**)(uint64_t, unsigned __int16 *, _DWORD *))(*(void *)a1 + 24LL))(a1, a2 + 530, a4);
    (*(void (**)(uint64_t, unsigned __int16 *, _DWORD *))(*(void *)a1 + 24LL))(a1, a2 + 1054, a5);
  }

  else
  {
    uint64_t v13 = a1 + 8432;
    sub_100FBFFEC(a1 + 8432, a3, a2 + 14);
    sub_100FBFFEC(v13, a4, a2 + 538);
    sub_100FBFFEC(v13, a5, a2 + 1062);
  }

  for (uint64_t i = 0LL; i != 128; ++i)
  {
    float result = (float)(*(float *)&a3[i] + *(float *)&a4[i]) + *(float *)&a5[i];
    *(float *)(a6 + i * 4) = result;
  }

  return result;
}

uint64_t sub_100FF6904(void *a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_10199FE68);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10199FE68))
  {
    byte_10199FE60 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
    __cxa_guard_release(&qword_10199FE68);
  }

  uint64_t v3 = 0LL;
  v19[0] = a1 + 659;
  v19[1] = a1 + 264;
  _DWORD v19[2] = a1[263];
  do
  {
    char v4 = (void *)sub_1009AF3A0();
    if (v4)
    {
      char v5 = 0;
      int v6 = 0;
      uint64_t v7 = v19[v3];
      do
      {
        char v8 = (*(uint64_t (**)(void *, void))(*v4 + 16LL))(v4, *(unsigned int *)(v7 + 8));
        if (!byte_10199FE60) {
          goto LABEL_8;
        }
        if ((*(unsigned int (**)(void *, void))(*v4 + 32LL))(v4, *(unsigned int *)(v7 + 8)))
        {
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101893DC8);
          }
          BOOL v9 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "Assertion failed: !(ignoreHamming && node->requiresHammingWindow(samples[r]->sampleFreq)), file /Library/C aches/com.apple.xbs/Sources/CoreLocation/Oscar/CMAccelerometerProcessor.cpp, line 181,Hamming required but ignored..",  buf,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101893DC8);
            }
            v17[0] = 0;
            LODWORD(v15) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: !(ignoreHamming && node->requiresHammingWindow(samples[r]->sampleFreq)), file /Library/C aches/com.apple.xbs/Sources/CoreLocation/Oscar/CMAccelerometerProcessor.cpp, line 181,Hamming required but ignored..",  v17,  v15);
            char v16 = (uint8_t *)v10;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CMAccelerometerProcessor::computeFrequencyFeatures()",  "%s\n",  v10);
            if (v16 != buf) {
              free(v16);
            }
          }
        }

        if (!byte_10199FE60) {
LABEL_8:
        }
          v6 |= (*(uint64_t (**)(void *, void))(*v4 + 32LL))(v4, *(unsigned int *)(v7 + 8));
        v5 |= v8;
        char v4 = (void *)v4[1];
      }

      while (v4);
      if ((v5 & 1) != 0)
      {
        uint64_t v11 = v19[v3];
        if (((byte_10199FE60 == 0) & v6) == 1)
        {
          sub_100FF6814((uint64_t)a1, (unsigned __int16 *)v19[v3], v23, v22, v21, (uint64_t)v20, 1);
          for (uint64_t i = (void *)sub_1009AF3A0(); i; uint64_t i = (void *)i[1])
          {
            if ((*(unsigned int (**)(void *, void))(*i + 32LL))(i, *(unsigned int *)(v11 + 8))) {
              (*(void (**)(void *, uint64_t, _DWORD *, _DWORD *, _DWORD *, _BYTE *))(*i + 24LL))( i,  v11,  v23,  v22,  v21,  v20);
            }
          }
        }

        sub_100FF6814((uint64_t)a1, (unsigned __int16 *)v11, v23, v22, v21, (uint64_t)v20, 0);
        for (j = (void *)sub_1009AF3A0(); j; j = (void *)j[1])
        {
          if (byte_10199FE60
            || ((*(uint64_t (**)(void *, void))(*j + 32LL))(j, *(unsigned int *)(v11 + 8)) & 1) == 0)
          {
            (*(void (**)(void *, uint64_t, _DWORD *, _DWORD *, _DWORD *, _BYTE *))(*j + 24LL))( j,  v11,  v23,  v22,  v21,  v20);
          }
        }
      }
    }

    ++v3;
  }

  while (v3 != 3);
  return 1LL;
}

void sub_100FF6CB0(_Unwind_Exception *a1)
{
}

void sub_100FF6CD0(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100FF6CFC( void *a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, signed int a10, _BYTE *a11, uint64_t a12)
{
  *a11 = 0;
  uint64_t v15 = (void *)(a3 + 8);
  sub_100A105C8(a3, *(void **)(a3 + 8));
  *(void *)a3 = v15;
  double v156 = (uint64_t **)a3;
  *(void *)(a3 + 16) = 0LL;
  void *v15 = 0LL;
  sub_1000234D8(a7);
  v180 = 0LL;
  unint64_t v181 = 0LL;
  unint64_t v182 = 0LL;
  uint64_t v177 = (uint64_t)&v177;
  v178 = &v177;
  std::string::size_type v179 = 0LL;
  char v16 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (v16[33] == v16[32])
      {
        sub_1006FF068(&v177, (uint64_t)(v16 + 4), *((_BYTE *)v16 + 280) == 0);
      }

      else
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101893DE8);
        }
        char v17 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "Polygonal fence should not be added for wifi monitoring",  (uint8_t *)&buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101893DE8);
          }
          LOWORD(v201.__r_.__value_.__l.__data_) = 0;
          LODWORD(v154) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Polygonal fence should not be added for wifi monitoring",  &v201,  v154);
          uint64_t v19 = (std::stringbuf::string_type *)v18;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::ma p<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiServic e_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector <CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std: :function<void (const CLFenceManager_Type::Fence &)>)",  "%s\n",  v18);
          if (v19 != &buf) {
            free(v19);
          }
        }
      }

      unint64_t v20 = (void *)v16[1];
      if (v20)
      {
        do
        {
          char v21 = v20;
          unint64_t v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          char v21 = (void *)v16[2];
          _ZF = *v21 == (void)v16;
          char v16 = v21;
        }

        while (!_ZF);
      }

      char v16 = v21;
    }

    while (v21 != a2 + 1);
  }

  sub_100700244((uint64_t)&v177);
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101893DE8);
  }
  int v23 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v24 = a2[2];
    LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v24;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v179;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "Fence: combined fences, %{public}lu, fences to, %{public}lu, fences",  (uint8_t *)&buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101893DE8);
    }
    std::string::size_type v138 = a2[2];
    LODWORD(v201.__r_.__value_.__l.__data_) = 134349312;
    *(std::string::size_type *)((char *)v201.__r_.__value_.__r.__words + 4) = v138;
    WORD2(v201.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 6) = v179;
    LODWORD(v154) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: combined fences, %{public}lu, fences to, %{public}lu, fences",  &v201,  v154);
    __int16 v140 = (std::stringbuf::string_type *)v139;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFe nceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::Acce ssPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Typ e::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CL FenceManager_Type::Fence &)>)",  "%s\n",  v139);
    if (v140 != &buf) {
      free(v140);
    }
  }

  double v25 = v178;
  if (v178 == &v177)
  {
    char v162 = 0;
  }

  else
  {
    char v162 = 0;
    do
    {
      unint64_t v26 = v181;
      if (v181 >= v182)
      {
        uint64_t v27 = sub_100FF8F28((uint64_t *)&v180);
      }

      else
      {
        sub_100945B14(v181, 0, -1);
        uint64_t v27 = v26 + 504;
      }

      unint64_t v181 = v27;
      if (*((_DWORD *)v25 + 50) == -1)
      {
        sub_10127F480();
        abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceMonitorWifiLogic.mm",  72,  "calculateAPsForFences");
        __break(1u);
      }

      int v28 = (std::string::size_type *)(v25 + 2);
      if ((sub_1009465AC(v27 - 504, (uint64_t)a1, (uint64_t)(v25 + 2), *((unsigned __int8 *)v25 + 288), 0) & 1) != 0)
      {
        BOOL v29 = *((_BYTE *)v25 + 288) != 0;
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101893DE8);
        }
        int v30 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v31 = (std::string::size_type)(v25 + 2);
          int v32 = v25 + 5;
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v27 - 152) - *(void *)(v27 - 160)) >> 5);
          uint64_t v34 = "exit";
          if (!*((_BYTE *)v25 + 288)) {
            uint64_t v34 = "entry";
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v32;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          *(void *)v207 = v33;
          *(_WORD *)&v207[8] = 2081;
          *(void *)&v207[10] = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "Fence: Calculator for %{public}s/%{private}s returned %{public}ld desired APs for %{private}s",  (uint8_t *)&buf,  0x2Au);
        }

        v162 |= v29;
        if (sub_1002921D0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101893DE8);
          }
          uint64_t v35 = v25 + 5;
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v27 - 152) - *(void *)(v27 - 160)) >> 5);
          int v37 = "exit";
          if (!*((_BYTE *)v25 + 288)) {
            int v37 = "entry";
          }
          LODWORD(v201.__r_.__value_.__l.__data_) = 136446979;
          *(std::string::size_type *)((char *)v201.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
          WORD2(v201.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v35;
          HIWORD(v201.__r_.__value_.__r.__words[2]) = 2050;
          unint64_t v202 = v36;
          __int16 v203 = 2081;
          *(void *)v204 = v37;
          LODWORD(v154) = 42;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Calculator for %{public}s/%{private}s returned %{public}ld desired APs for %{private}s",  &v201,  v154);
          int v39 = (std::stringbuf::string_type *)v38;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::ma p<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiServic e_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector <CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std: :function<void (const CLFenceManager_Type::Fence &)>)",  "%s\n",  v38);
          if (v39 != &buf) {
            free(v39);
          }
        }
      }

      else
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101893DE8);
        }
        int v40 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
        {
          sub_100923668((uint64_t)(v25 + 2), &buf);
          BOOL v41 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0
              ? &buf
              : (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v201.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v201.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "Fence: Failed to calculate fence %{private}s",  (uint8_t *)&v201,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101893DE8);
          }
          uint64_t v52 = qword_101934878;
          sub_100923668((uint64_t)(v25 + 2), &v201);
          uint64_t v53 = &v201;
          if ((v201.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v53 = (std::stringbuf::string_type *)v201.__r_.__value_.__r.__words[0];
          }
          LODWORD(v192.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
          LODWORD(v154) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v52,  16LL,  "Fence: Failed to calculate fence %{private}s",  &v192,  v154);
          int v55 = v54;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::ma p<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiServic e_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector <CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std: :function<void (const CLFenceManager_Type::Fence &)>)",  "%s\n",  (const char *)v55);
          if (v55 != &buf) {
            free(v55);
          }
        }

        CFAbsoluteTime v42 = (uint64_t *)v25[33];
        if (v42 != v25 + 34)
        {
          do
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101893DE8);
            }
            int v43 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
            {
              sub_100923668((uint64_t)(v42 + 4), &buf);
              BOOL v44 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? &buf
                  : (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v201.__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)v201.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
              _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: combined fence, %{private}s",  (uint8_t *)&v201,  0xCu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101893DE8);
              }
              uint64_t v47 = qword_101934878;
              sub_100923668((uint64_t)(v42 + 4), &v201);
              __int16 v48 = &v201;
              if ((v201.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                __int16 v48 = (std::stringbuf::string_type *)v201.__r_.__value_.__r.__words[0];
              }
              LODWORD(v192.__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
              LODWORD(v154) = 12;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v47,  0LL,  "#Warning Fence: combined fence, %{private}s",  &v192,  v154);
              __int16 v50 = v49;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std ::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWi fiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, i nt, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)",  "%s\n",  (const char *)v50);
              if (v50 != &buf) {
                free(v50);
              }
            }

            double v45 = (uint64_t *)v42[1];
            if (v45)
            {
              do
              {
                int v46 = v45;
                double v45 = (uint64_t *)*v45;
              }

              while (v45);
            }

            else
            {
              do
              {
                int v46 = (uint64_t *)v42[2];
                _ZF = *v46 == (void)v42;
                CFAbsoluteTime v42 = v46;
              }

              while (!_ZF);
            }

            CFAbsoluteTime v42 = v46;
          }

          while (v46 != v25 + 34);
        }

        unint64_t v51 = v181 - 504;
        (**(void (***)(uint64_t))(v181 - 504))(v181 - 504);
        unint64_t v181 = v51;
      }

      double v25 = (uint64_t *)v25[1];
    }

    while (v25 != &v177);
  }

  sub_100FF8CB4((uint64_t)&v180);
  v176[0] = 0LL;
  v176[1] = 0LL;
  v174[1] = 0LL;
  v175 = v176;
  __int16 v173 = v174;
  v174[0] = 0LL;
  v201.__r_.__value_.__s.__data_[0] = 0;
  char v205 = 0;
  uint64_t v56 = (uint64_t)a8;
  if (a4 && (v162 & 1) != 0)
  {
    sub_1003516E4((uint64_t)&v201, a5);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101893DE8);
    }
    uint64_t v57 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      v184.__r_.__value_.__r.__words[0] = v201.__r_.__value_.__r.__words[0];
      sub_1007EC454(&buf);
      __int16 v58 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &buf
          : (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v192.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
      WORD2(v192.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v192.__r_.__value_.__r.__words[1] + 6) = *(_DWORD *)&v204[6];
      _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "Fence: Using associated AP %{private}s, channel %{private}d for exit",  (uint8_t *)&v192,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101893DE8);
      }
      uint64_t v145 = qword_101934878;
      v183.__r_.__value_.__r.__words[0] = v201.__r_.__value_.__r.__words[0];
      sub_1007EC454(&v192);
      if ((v192.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v146 = &v192;
      }
      else {
        std::string v146 = (std::stringbuf::string_type *)v192.__r_.__value_.__r.__words[0];
      }
      LODWORD(v184.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v184.__r_.__value_.__r.__words + 4) = (std::string::size_type)v146;
      WORD2(v184.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v184.__r_.__value_.__r.__words[1] + 6) = *(_DWORD *)&v204[6];
      LODWORD(v154) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v145,  2LL,  "Fence: Using associated AP %{private}s, channel %{private}d for exit",  &v184,  v154);
      double v148 = v147;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CL FenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type:: AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiServi ce_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void(const CLFenceManager_Type::Fence &)>)",  "%s\n",  (const char *)v148);
      if (v148 != &buf) {
        free(v148);
      }
    }
  }

  sub_10094DB14(a6, &v180);
  sub_1000C6980(v169, (uint64_t)&v201);
  int v59 = sub_1009495CC(a1, (uint64_t *)&v180, a10, a9, (uint64_t)v169, v156, &v175, &v173, 0.97, a6);
  int v60 = v59 ^ 1;
  *a11 = v59 ^ 1;
  if (v172 && v171 < 0)
  {
    operator delete(__p);
    int v60 = *a11;
  }

  if (v60)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101893DE8);
    }
    __int16 v61 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: Continuous monitoring is needed in order to supported the monitored fences",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101893DE8);
      }
      LOWORD(v192.__r_.__value_.__l.__data_) = 0;
      LODWORD(v154) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: Continuous monitoring is needed in order to supported the monitored fences",  &v192,  v154);
      __int16 v144 = (std::stringbuf::string_type *)v143;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CL FenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type:: AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiServi ce_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void(const CLFenceManager_Type::Fence &)>)",  "%s\n",  v143);
      if (v144 != &buf) {
        free(v144);
      }
    }
  }

  signed int v62 = 0;
  int v63 = v173;
  if (v173 != v174 && a10 >= 1)
  {
    signed int v62 = 0;
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v160 = _Q0;
    do
    {
      std::string::size_type v68 = (std::string::size_type)v63[5];
      sub_1010DDBC0(&v167, "");
      int v69 = *((_DWORD *)v63 + 23);
      v192.__r_.__value_.__r.__words[0] = v68;
      *(_OWORD *)&v192.__r_.__value_.__r.__words[1] = v167;
      uint64_t v193 = v168;
      __int128 v167 = 0uLL;
      uint64_t v168 = 0LL;
      uint64_t v194 = -1LL;
      int v195 = v69;
      __int128 v196 = v160;
      __int16 v197 = 256;
      int v198 = 0;
      char v199 = 0;
      uint64_t v200 = 0LL;
      uint64_t v70 = sub_1005B46E8((uint64_t)&v192);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101893DE8);
      }
      unint64_t v71 = v70 & 0x20000000000LL;
      __int16 v72 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
      {
        v183.__r_.__value_.__r.__words[0] = (std::string::size_type)v63[5];
        sub_1007EC454(&v184);
        uint64_t v73 = &v184;
        if ((v184.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v73 = (std::string *)v184.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v74 = (std::string::size_type)v63[9];
        int v75 = *((_DWORD *)v63 + 23);
        __int16 v76 = v63[6];
        uint64_t v77 = v63[7];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381955;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v73;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v74;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1025;
        *(_DWORD *)v207 = v75;
        *(_WORD *)&v207[4] = 2049;
        *(void *)&v207[6] = v76;
        *(_WORD *)&v207[14] = 2049;
        *(void *)&v207[16] = v77;
        __int16 v208 = 1025;
        int v209 = v71 >> 41;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "WifiFenceCalculator: Adding exit AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location, % {private}12.8lf, %{private}12.8lf, isLocallyAdministered, %{private}d",  (uint8_t *)&buf,  0x36u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101893DE8);
        }
        uint64_t v82 = qword_101934878;
        std::string::size_type v166 = (std::string::size_type)v63[5];
        sub_1007EC454(&v183);
        uint64_t v83 = &v183;
        if ((v183.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v83 = (std::string *)v183.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v84 = (std::string::size_type)v63[9];
        int v85 = *((_DWORD *)v63 + 23);
        int v86 = v63[6];
        __int16 v87 = v63[7];
        LODWORD(v184.__r_.__value_.__l.__data_) = 136381955;
        *(std::string::size_type *)((char *)v184.__r_.__value_.__r.__words + 4) = (std::string::size_type)v83;
        WORD2(v184.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&v184.__r_.__value_.__r.__words[1] + 6) = v84;
        HIWORD(v184.__r_.__value_.__r.__words[2]) = 1025;
        int v185 = v85;
        __int16 v186 = 2049;
        v187 = v86;
        __int16 v188 = 2049;
        v189 = v87;
        __int16 v190 = 1025;
        int v191 = v71 >> 41;
        LODWORD(v154) = 54;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v82,  2LL,  "WifiFenceCalculator: Adding exit AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location, % {private}12.8lf, %{private}12.8lf, isLocallyAdministered, %{private}d",  &v184,  v154);
        __int16 v89 = v88;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map< CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Ty pe::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWif iService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::functio n<void (const CLFenceManager_Type::Fence &)>)",  "%s\n",  (const char *)v89);
        if (v89 != &buf) {
          free(v89);
        }
      }

      unint64_t v78 = a8[1];
      if (v78 >= a8[2])
      {
        uint64_t v79 = sub_100023888(a8, (uint64_t)&v192);
      }

      else
      {
        sub_100023800((uint64_t)a8, (uint64_t)&v192);
        uint64_t v79 = v78 + 88;
      }

      uint64_t v56 = (uint64_t)a8;
      a8[1] = v79;
      if (SHIBYTE(v193) < 0) {
        operator delete((void *)v192.__r_.__value_.__l.__size_);
      }
      __int16 v80 = v63[1];
      if (v80)
      {
        do
        {
          uint64_t v81 = (void **)v80;
          __int16 v80 = (void *)*v80;
        }

        while (v80);
      }

      else
      {
        do
        {
          uint64_t v81 = (void **)v63[2];
          _ZF = *v81 == v63;
          int v63 = v81;
        }

        while (!_ZF);
      }

      ++v62;
      if (v81 == v174) {
        break;
      }
      int v63 = v81;
    }

    while (v62 < a10);
  }

  sub_100FF8D98(v56);
  uint64_t v90 = v175;
  if (v175 != v176 && v62 < a10)
  {
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v161 = _Q0;
    do
    {
      std::string::size_type v110 = (std::string::size_type)v90[5];
      sub_1010DDBC0(&v164, "");
      int v111 = *((_DWORD *)v90 + 23);
      v192.__r_.__value_.__r.__words[0] = v110;
      *(_OWORD *)&v192.__r_.__value_.__r.__words[1] = v164;
      uint64_t v193 = v165;
      __int128 v164 = 0uLL;
      uint64_t v165 = 0LL;
      uint64_t v194 = -1LL;
      int v195 = v111;
      __int128 v196 = v161;
      __int16 v197 = 256;
      int v198 = 0;
      char v199 = 0;
      uint64_t v200 = 0LL;
      if (sub_10099EDC8(v111))
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101893DE8);
        }
        float v112 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          v183.__r_.__value_.__r.__words[0] = (std::string::size_type)v90[5];
          sub_1007EC454(&v184);
          __int128 v113 = &v184;
          if ((v184.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            __int128 v113 = (std::string *)v184.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v114 = (std::string::size_type)v90[9];
          int v115 = *((_DWORD *)v90 + 23);
          int v116 = v90[6];
          __int128 v117 = v90[7];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136381699;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v113;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v114;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 1025;
          *(_DWORD *)v207 = v115;
          *(_WORD *)&v207[4] = 2049;
          *(void *)&v207[6] = v116;
          *(_WORD *)&v207[14] = 2049;
          *(void *)&v207[16] = v117;
          _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEBUG,  "WifiFenceCalculator: Adding entry AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location , %{private}12.8lf, %{private}12.8lf",  (uint8_t *)&buf,  0x30u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101893DE8);
          }
          uint64_t v130 = qword_101934878;
          std::string::size_type v166 = (std::string::size_type)v90[5];
          sub_1007EC454(&v183);
          double v131 = &v183;
          if ((v183.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            double v131 = (std::string *)v183.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v132 = (std::string::size_type)v90[9];
          int v133 = *((_DWORD *)v90 + 23);
          __int16 v134 = v90[6];
          double v135 = v90[7];
          LODWORD(v184.__r_.__value_.__l.__data_) = 136381699;
          *(std::string::size_type *)((char *)v184.__r_.__value_.__r.__words + 4) = (std::string::size_type)v131;
          WORD2(v184.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&v184.__r_.__value_.__r.__words[1] + 6) = v132;
          HIWORD(v184.__r_.__value_.__r.__words[2]) = 1025;
          int v185 = v133;
          __int16 v186 = 2049;
          v187 = v134;
          __int16 v188 = 2049;
          v189 = v135;
          LODWORD(v154) = 48;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v130,  2LL,  "WifiFenceCalculator: Adding entry AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location , %{private}12.8lf, %{private}12.8lf",  &v184,  v154);
          double v137 = v136;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::ma p<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiServic e_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector <CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std: :function<void (const CLFenceManager_Type::Fence &)>)",  "%s\n",  (const char *)v137);
          if (v137 != &buf) {
            free(v137);
          }
        }

        unint64_t v118 = a7[1];
        if (v118 >= a7[2])
        {
          uint64_t v119 = sub_100023888(a7, (uint64_t)&v192);
        }

        else
        {
          sub_100023800((uint64_t)a7, (uint64_t)&v192);
          uint64_t v119 = v118 + 88;
        }

        a7[1] = v119;
      }

      else
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101893DE8);
        }
        __int16 v120 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          int v121 = v195;
          v183.__r_.__value_.__r.__words[0] = v192.__r_.__value_.__r.__words[0];
          sub_1007EC454(&buf);
          p_std::stringbuf::string_type buf = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v184.__r_.__value_.__l.__data_) = 67174915;
          HIDWORD(v184.__r_.__value_.__r.__words[0]) = v121;
          LOWORD(v184.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v184.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_buf;
          _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_DEBUG,  "Fence: WifiFenceCalculator: Skipped non-2GHz AP, channel, %{private}d, mac, %{private}s",  (uint8_t *)&v184,  0x12u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101893DE8);
          }
          uint64_t v123 = qword_101934878;
          int v124 = v195;
          std::string::size_type v166 = v192.__r_.__value_.__r.__words[0];
          sub_1007EC454(&v184);
          double v125 = &v184;
          if ((v184.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            double v125 = (std::string *)v184.__r_.__value_.__r.__words[0];
          }
          LODWORD(v183.__r_.__value_.__l.__data_) = 67174915;
          HIDWORD(v183.__r_.__value_.__r.__words[0]) = v124;
          LOWORD(v183.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v183.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v125;
          LODWORD(v154) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v123,  2LL,  "Fence: WifiFenceCalculator: Skipped non-2GHz AP, channel, %{private}d, mac, %{private}s",  &v183,  v154);
          double v127 = v126;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::ma p<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiServic e_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector <CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std: :function<void (const CLFenceManager_Type::Fence &)>)",  "%s\n",  (const char *)v127);
          if (v127 != &buf) {
            free(v127);
          }
        }
      }

      if (SHIBYTE(v193) < 0) {
        operator delete((void *)v192.__r_.__value_.__l.__size_);
      }
      __int16 v128 = v90[1];
      if (v128)
      {
        do
        {
          double v129 = (void **)v128;
          __int16 v128 = (void *)*v128;
        }

        while (v128);
      }

      else
      {
        do
        {
          double v129 = (void **)v90[2];
          _ZF = *v129 == v90;
          uint64_t v90 = v129;
        }

        while (!_ZF);
      }

      uint64_t v90 = v129;
    }

    while (v129 != v176);
  }

  sub_100FF8D98((uint64_t)a7);
  unint64_t v92 = 0x2E8BA2E8BA2E8BA3LL * ((a7[1] - *a7) >> 3) + 0x2E8BA2E8BA2E8BA3LL * ((a8[1] - *a8) >> 3);
  if (v92 > a10)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101893DE8);
    }
    __int16 v93 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v92;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a10;
      _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_FAULT,  "Fence: Fence calculator returned more APs (%{public}zu) than maximum (%{public}d)",  (uint8_t *)&buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101893DE8);
      }
      LODWORD(v192.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = v92;
      WORD2(v192.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v192.__r_.__value_.__r.__words[1] + 6) = a10;
      LODWORD(v154) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Fence calculator returned more APs (%{public}zu) than maximum (%{public}d)",  &v192,  v154);
      double v150 = (std::stringbuf::string_type *)v149;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CL FenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type:: AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiServi ce_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void(const CLFenceManager_Type::Fence &)>)",  "%s\n",  v149);
      if (v150 != &buf) {
        free(v150);
      }
    }
  }

  if ((v162 & 1) != 0 && *a9 == a9[1])
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101893DE8);
    }
    uint64_t v94 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v95 = 0x2E8BA2E8BA2E8BA3LL * ((a8[1] - *a8) >> 3);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v95;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: no visible APs, exitAPs, %{public}lu",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101893DE8);
      }
      uint64_t v151 = 0x2E8BA2E8BA2E8BA3LL * ((a8[1] - *a8) >> 3);
      LODWORD(v192.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = v151;
      LODWORD(v154) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: no visible APs, exitAPs, %{public}lu",  &v192,  v154);
      __int16 v153 = (std::stringbuf::string_type *)v152;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CL FenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type:: AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiServi ce_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void(const CLFenceManager_Type::Fence &)>)",  "%s\n",  v152);
      if (v153 != &buf) {
        free(v153);
      }
    }
  }

  uint64_t v96 = v180;
  for (unint64_t i = v181; v96 != (double *)i; v96 += 63)
  {
    if (*((void *)v96 + 44) != *((void *)v96 + 43))
    {
      uint64_t v98 = (void *)*((void *)v96 + 46);
      if (*((void **)v96 + 47) != v98)
      {
        if (*v98) {
          continue;
        }
      }
    }

    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101893DE8);
    }
    uint64_t v99 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      sub_100923668((uint64_t)(v96 + 4), &buf);
      uint64_t v100 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0
           ? &buf
           : (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v96 + 44) - *((void *)v96 + 43)) >> 5);
      LODWORD(v192.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v192.__r_.__value_.__r.__words + 4) = (std::string::size_type)v100;
      WORD2(v192.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v192.__r_.__value_.__r.__words[1] + 6) = v101;
      _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEBUG,  "Fence: request a download for, %{private}s, fChosenAPs, %{public}lu",  (uint8_t *)&v192,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101893DE8);
      }
      uint64_t v103 = qword_101934878;
      sub_100923668((uint64_t)(v96 + 4), &v192);
      __int128 v104 = &v192;
      if ((v192.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v104 = (std::stringbuf::string_type *)v192.__r_.__value_.__r.__words[0];
      }
      unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v96 + 44) - *((void *)v96 + 43)) >> 5);
      LODWORD(v184.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v184.__r_.__value_.__r.__words + 4) = (std::string::size_type)v104;
      WORD2(v184.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v184.__r_.__value_.__r.__words[1] + 6) = v105;
      LODWORD(v154) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v103,  2LL,  "Fence: request a download for, %{private}s, fChosenAPs, %{public}lu",  &v184,  v154);
      float v107 = v106;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CL FenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type:: AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiServi ce_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void(const CLFenceManager_Type::Fence &)>)",  "%s\n",  (const char *)v107);
      if (v107 != &buf) {
        free(v107);
      }
    }

    uint64_t v102 = *(void *)(a12 + 24);
    if (!v102) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, double *))(*(void *)v102 + 48LL))(v102, v96 + 4);
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101893DE8);
  }
  unsigned __int16 v108 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEBUG,  "Fence: calculateAPsForFences end",  (uint8_t *)&buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101893DE8);
    }
    LOWORD(v192.__r_.__value_.__l.__data_) = 0;
    LODWORD(v154) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: calculateAPsForFences end",  &v192,  v154);
    __int16 v142 = (std::stringbuf::string_type *)v141;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFe nceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::Acce ssPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Typ e::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CL FenceManager_Type::Fence &)>)",  "%s\n",  v141);
    if (v142 != &buf) {
      free(v142);
    }
  }

  if (v205 && SHIBYTE(v202) < 0) {
    operator delete((void *)v201.__r_.__value_.__l.__size_);
  }
  sub_100008390((uint64_t)&v173, v174[0]);
  sub_100008390((uint64_t)&v175, v176[0]);
  sub_1009DC9D8(&v177);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  sub_100FF8EA8((void ***)&buf);
}

void sub_100FF8B74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, __int16 a49, uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (LOBYTE(STACK[0x2B8]))
  {
    if (SLOBYTE(STACK[0x27F]) < 0) {
      operator delete((void *)STACK[0x268]);
    }
  }

  sub_100008390((uint64_t)&a49, (void *)a50);
  sub_100008390((uint64_t)&a52, (void *)a53);
  sub_1009DC9D8(&a55);
  STACK[0x2C0] = (unint64_t)&a58;
  sub_100FF8EA8((void ***)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_100FF8CB4(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 3uLL);
  unint64_t v4 = 0xEFBEFBEFBEFBEFBFLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xEFBEFBEFBEFBEFBFLL * v3.i64[1] > v4)
  {
    int v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      char v8 = 0LL;
      uint64_t v9 = 0LL;
    }

    else
    {
      char v8 = (char *)sub_100FF90B0(v7, v4);
    }

    int v10 = v8;
    uint64_t v11 = &v8[504 * v5];
    char v12 = v11;
    uint64_t v13 = &v8[504 * v9];
    sub_100FF903C(v6, &v10);
    return sub_100FF9190((uint64_t)&v10);
  }

  return result;
}

void sub_100FF8D70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100FF8D98(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 3uLL);
  unint64_t v4 = 0x2E8BA2E8BA2E8BA3LL * v3.i64[0];
  unint64_t v5 = v4;
  if (0x2E8BA2E8BA2E8BA3LL * v3.i64[1] > v4)
  {
    int v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      char v8 = 0LL;
      uint64_t v9 = 0LL;
    }

    else
    {
      char v8 = (char *)sub_100023598(v7, v4);
    }

    int v10 = v8;
    uint64_t v11 = &v8[88 * v5];
    char v12 = v11;
    uint64_t v13 = &v8[88 * v9];
    sub_100023524(v6, &v10);
    return sub_100023728((uint64_t)&v10);
  }

  return result;
}

void sub_100FF8E54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_100FF8E7C(id a1)
{
  qword_101934878 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100FF8EA8(void ***a1)
{
  unint64_t v1 = *a1;
  int64x2_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    unint64_t v4 = (void (***)(void))v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = v4 - 63;
      do
      {
        (**v6)(v6);
        BOOL v7 = v6 == v2;
        v6 -= 63;
      }

      while (!v7);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_100FF8F28(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xEFBEFBEFBEFBEFBFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x82082082082082LL) {
    sub_100007008();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0xEFBEFBEFBEFBEFBFLL * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0x41041041041041LL) {
    unint64_t v7 = 0x82082082082082LL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    char v8 = (char *)sub_100FF90B0(v5, v7);
  }
  else {
    char v8 = 0LL;
  }
  uint64_t v11 = v8;
  char v12 = &v8[504 * v3];
  uint64_t v14 = &v8[504 * v7];
  sub_100945B14((uint64_t)v12, 0, -1);
  uint64_t v13 = v12 + 504;
  sub_100FF903C(a1, &v11);
  uint64_t v9 = a1[1];
  sub_100FF9190((uint64_t)&v11);
  return v9;
}

void sub_100FF9028(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100FF903C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100FF90F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100FF90B0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x82082082082083LL) {
    sub_1000070D4();
  }
  return operator new(504 * a2);
}

uint64_t sub_100FF90F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = a7 - 504;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 504LL;
    sub_100951E70(v12, v10 + a3);
  }

  return a6;
}

uint64_t sub_100FF9190(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 504;
    (**(void (***)(uint64_t))(i - 504))(i - 504);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_100FF91E4(uint64_t a1, void *a2, int *a3, char a4, double *a5)
{
  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1013BE9B0;
  *(void *)(a1 + 24) = 0xBFF0000000000000LL;
  *(void *)(a1 + 32) = *a2;
  uint64_t v5 = *(void *)a3;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *a3;
  *(void *)(a1 + 56) = off_101850568;
  *(void *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 136) = a4;
  *(void *)(a1 + 144) = off_10182B230;
  *(_DWORD *)(a1 + 152) = 3;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 208) = a1 + 216;
  double result = *a5;
  *(double *)(a1 + 232) = *a5;
  return result;
}

void sub_100FF9274(uint64_t a1, double *a2, double *a3, void *a4, void *a5)
{
  *(double *)(a1 + 16) = *a2 - *a3;
  *(void *)(a1 + 8) = 0x4188B82000000000LL;
  *a5 = 0x40BC200000000000LL;
  *a4 = *(void *)(a1 + 16);
  *(_BYTE *)(a1 + 1) = 1;
  *(double *)(a1 + 24) = *a2;
  if (*(_BYTE *)(a1 + 136)) {
    sub_100210444((void *)(a1 + 144));
  }
}

BOOL sub_100FF92C8(uint64_t a1, double *a2)
{
  uint64_t v3 = a1 + 56;
  sub_1007C3A68(a1 + 56, a2);
  unint64_t v4 = *(unsigned int *)(a1 + 128);
  unint64_t v5 = *(void *)(a1 + 48);
  if (v5 <= v4) {
    *(double *)(a1 + 40) = *(double *)(a1 + 232) * (sub_100FF9328(v3) * *(double *)(a1 + 232));
  }
  return v5 <= v4;
}

double sub_100FF9328(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 72);
  double result = 0.0;
  if (v1 >= 2)
  {
    unint64_t v3 = *(void *)(a1 + 64);
    double v4 = 0.0;
    uint64_t v5 = *(void *)(a1 + 72);
    double v6 = 0.0;
    do
    {
      double v6 = v6 + v7 * v7;
      double v4 = v4 + v7;
      ++v3;
      --v5;
    }

    while (v5);
    return (v6 - v4 * v4 / (double)v1) / (double)(v1 - 1);
  }

  return result;
}

uint64_t sub_100FF93A0(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v10 = *a2;
  double v53 = *a2 - *a3;
  if (!*(_BYTE *)a1)
  {
    if (sub_100FF92C8(a1, &v53))
    {
      double v13 = *(double *)(a1 + 40);
      if (v13 > 0.0 && v13 < 0.25)
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101893E28);
        }
        uint64_t v27 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v28 = *(void *)(a1 + 40);
          *(_DWORD *)std::stringbuf::string_type buf = 134217984;
          *(void *)&uint8_t buf[4] = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "Estimated,time offset measurement variance(s^2),%.12g",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101893E28);
          }
          double v48 = *(double *)(a1 + 40);
          int v54 = 134217984;
          double v55 = v48;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Estimated,time offset measurement variance(s^2),%.12g",  COERCE_DOUBLE(&v54));
          __int16 v50 = (char *)v49;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)",  "%s\n",  v49);
          if (v50 != buf) {
            free(v50);
          }
        }

        *(_BYTE *)a1 = 1;
        double v10 = *a2;
        goto LABEL_2;
      }

      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101893E28);
      }
      uint64_t v15 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)std::stringbuf::string_type buf = 134217984;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Warning Unacceptable,time offset measurement variance(s^2),%.12g",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101893E28);
        }
        double v45 = *(double *)(a1 + 40);
        int v54 = 134217984;
        double v55 = v45;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning Unacceptable,time offset measurement variance(s^2),%.12g",  COERCE_DOUBLE(&v54));
        uint64_t v47 = (char *)v46;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)",  "%s\n",  v46);
        if (v47 != buf) {
          free(v47);
        }
      }

      *(_BYTE *)a1 = 0;
    }

    uint64_t result = 0LL;
    *a4 = v53;
    *a5 = 7200.0;
    *(double *)(a1 + 24) = *a2;
    return result;
  }

void sub_100FF9BA0(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

NSString *sub_100FF9BCC()
{
  unsigned __int8 v0 = -[NSDictionary initWithContentsOfFile:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithContentsOfFile:",  @"/System/Library/CoreServices/SystemVersion.plist");
  unint64_t v1 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@.%@",  -[NSDictionary objectForKey:](v0, "objectForKey:", @"ProductVersion"),  -[NSDictionary objectForKey:](v0, "objectForKey:", @"ProductBuildVersion"));

  return v1;
}

NSString *sub_100FF9C50()
{
  unsigned __int8 v0 = +[NSLocale preferredLanguages](&OBJC_CLASS___NSLocale, "preferredLanguages");
  if (!-[NSArray count](v0, "count")) {
    return -[NSLocale localeIdentifier]( +[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"),  "localeIdentifier");
  }
  id v1 = -[NSArray objectAtIndex:](v0, "objectAtIndex:", 0LL);
  if (!v1) {
    return -[NSLocale localeIdentifier]( +[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"),  "localeIdentifier");
  }
  id v2 = v1;
  id v3 = -[NSLocale objectForKey:]( +[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"),  "objectForKey:",  NSLocaleCountryCode);
  if ([v3 length]) {
    return +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@_%@", v2, v3);
  }
  else {
    return (NSString *)v2;
  }
}

id sub_100FF9CF8()
{
  if (qword_10199FE80 != -1) {
    dispatch_once(&qword_10199FE80, &stru_101893E48);
  }
  unsigned __int8 v0 = sub_100FF9C50();
  id v1 = objc_alloc_init(&OBJC_CLASS___PBDataWriter);
  [v1 writeBigEndianFixed16:1];
  [v1 writeBigEndianShortThenString:v0];
  [v1 writeBigEndianShortThenString:qword_10199FE70];
  [v1 writeBigEndianShortThenString:qword_10199FE78];
  id v2 = [v1 immutableData];

  return v2;
}

void sub_100FF9DA0(id a1)
{
  qword_10199FE70 =  -[NSBundle bundleIdentifier]( +[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"),  "bundleIdentifier");
  qword_10199FE78 = sub_100FF9BCC();
}

void *sub_100FF9DDC(void *result, uint64_t a2)
{
  *uint64_t result = &off_101893E78;
  result[1] = a2;
  return result;
}

id sub_100FF9DEC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLTilesManager"),  "syncgetRegionPreloadManifest:",  a2);
}

id sub_100FF9E20(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLTilesManager");
  double v4 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "0");
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  uint64_t v8 = *(void *)(a2 + 32);
  return [v3 requestTileDownloadByType:10 path:v4 details:v7];
}

id sub_100FF9E94(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  if (a3) {
    sub_10127F644();
  }
  id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLWifiTilesManager");
  __int128 v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  uint64_t v12 = *(void *)(a2 + 32);
  return [v8 requestTileDownloadForLat:v11 lon:a4 details:a5];
}

void sub_100FF9F04(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100FF9F30()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100FF9F94()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100FFA008(_Unwind_Exception *a1)
{
}

void sub_100FFA084(uint64_t a1, void *a2, int a3)
{
  if ([a2 hasDepartureDate])
  {
    sub_100FFDA18(a1);
    *(_BYTE *)(a1 + 1208) = 0;
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    double v6 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = "low";
      if (a3 == 1) {
        double v7 = "high";
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      double v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: visit, confidence, %s, exit",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: visit, confidence, %s, exit",  &v17);
LABEL_26:
      uint64_t v16 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::onVisit(CLVisit *, CLVehicleStateNotifier_Type::LoiVisitConfidence)",  "%s\n",  v8);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  else if ([a2 hasArrivalDate])
  {
    if (a3 == 1)
    {
      *(_BYTE *)(a1 + 1208) = 0;
      [a2 coordinate];
      double v10 = v9;
      double v12 = v11;
      [a2 horizontalAccuracy];
      sub_100FFDBF4(a1, v10, v12, v13);
    }

    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    uint64_t v14 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = "low";
      if (a3 == 1) {
        uint64_t v15 = "high";
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      double v19 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: visit, confidence, %s, entry",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: visit, confidence, %s, entry",  &v17);
      goto LABEL_26;
    }
  }

void sub_100FFA548(id a1)
{
  qword_10199FE88 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLVehicleStateNotifierSilo");
}

uint64_t sub_100FFA5FC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100FFAAB8;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199FE98 != -1) {
    dispatch_once(&qword_10199FE98, block);
  }
  return qword_1019A4118;
}

void sub_100FFA7D0(uint64_t a1)
{
  *(_BYTE *)(a1 + 1208) = 0;
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_101894038);
  }
  id v2 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: reset vehicular false positive mitigation states",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: reset vehicular false positive mitigation states",  v5,  2);
    double v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::resetVehicularFalsePositiveSuppressionDnd()",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

uint64_t sub_100FFA990(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1292)) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 1104) && !*(_BYTE *)(a1 + 1208)) {
    return 0LL;
  }
  uint64_t result = sub_101024128(*(void *)(a1 + 1112));
  if ((_DWORD)result) {
    return *(_BYTE *)(a1 + 1140) == 0;
  }
  return result;
}

uint64_t sub_100FFAAB8(uint64_t a1)
{
  id v2 = operator new(0x628uLL);
  uint64_t result = sub_100FFAB04((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A4118 = (uint64_t)v2;
  return result;
}

void sub_100FFAAF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100FFAB04(uint64_t a1, void *a2)
{
  double v4 = (void *)sub_100FFB340(a1, "CLVehicleStateNotifier", a2);
  *double v4 = off_101893F18;
  __int128 v5 = (void ***)(v4 + 14);
  bzero(v4 + 14, 0x330uLL);
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v48 = _Q0;
  *(_OWORD *)(a1 + 144) = _Q0;
  *(void *)(a1 + 928) = 0xBFF0000000000000LL;
  CLMotionActivity::getInit(v11);
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_DWORD *)(a1 + 1103) = 0;
  double v12 = operator new(0x20uLL);
  void *v12 = &off_101894168;
  v12[1] = sub_100FFE050;
  _DWORD v12[2] = 0LL;
  v12[3] = a1;
  __int16 v50 = v12;
  double v13 = operator new(0x98uLL);
  sub_1008D74D8((uint64_t)&v51, (uint64_t)v49);
  sub_101023E00(v13, a2, &v51);
  *(void *)(a1 + 1112) = v13;
  uint64_t v14 = (void ***)v54;
  if (v54 == (uint64_t *)&v51)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = &v51;
  }

  else
  {
    if (!v54) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  uint64_t v16 = v50;
  if (v50 == v49)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = v49;
  }

  else
  {
    if (!v50) {
      goto LABEL_11;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_11:
  *(_BYTE *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1133) = 0LL;
  *(_OWORD *)(a1 + 1216) = v48;
  *(void *)(a1 + 1232) = 0LL;
  CLLocationCoordinate2D v18 = kCLLocationCoordinate2DInvalid;
  *(CLLocationCoordinate2D *)(a1 + 1240) = kCLLocationCoordinate2DInvalid;
  *(CLLocationCoordinate2D *)(a1 + 1256) = v18;
  *(_DWORD *)(a1 + 1272) = 0;
  *(void *)(a1 + 1280) = 0LL;
  *(_DWORD *)(a1 + 1288) = 0;
  *(_BYTE *)(a1 + 1292) = 0;
  *(void *)(a1 + 1296) = 0LL;
  sub_100AD558C(a1 + 1304, (uint64_t)"CLVechileStateNotifier", a1, 0.0);
  *(_WORD *)(a1 + 1352) = 0;
  sub_100AEB404(a1 + 1368, "MotionCalibration", *(void *)(a1 + 32));
  uint64_t v19 = a1 + 1560;
  *(_OWORD *)(a1 + 1560) = 0u;
  if (*(void *)(a1 + 40))
  {
    bzero((void *)(a1 + 160), 0x300uLL);
    sub_100D290F0((uint64_t)sub_100FFB3DC, a1, *(void **)(a1 + 32), &v51);
    double v20 = v51;
    double v51 = 0LL;
    double v21 = *v5;
    void *v5 = v20;
    if (v21)
    {
      (*((void (**)(void **))*v21 + 1))(v21);
      double v22 = v51;
      double v51 = 0LL;
      if (v22) {
        (*((void (**)(void **))*v22 + 1))(v22);
      }
    }

    objc_msgSend((*v5)[2], "register:forNotification:registrationInfo:", (*v5)[1], 0, 0, v48);
    sub_10036B3B4((uint64_t)sub_100FFB5B8, a1, *(void **)(a1 + 32), &v51);
    int v23 = v51;
    double v51 = 0LL;
    uint64_t v24 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = v23;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
      double v25 = v51;
      double v51 = 0LL;
      if (v25) {
        (*((void (**)(void **))*v25 + 1))(v25);
      }
    }

    [*(id *)(*(void *)(a1 + 120) + 16) register:*(void *)(*(void *)(a1 + 120) + 8) forNotification:1 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 120) + 16) register:*(void *)(*(void *)(a1 + 120) + 8) forNotification:9 registrationInfo:0];
    *(void *)(a1 + 1072) = -[CLVehicleStateNotifierRoutineAdapter initWithVehicleStateNotifier:]( objc_alloc(&OBJC_CLASS___CLVehicleStateNotifierRoutineAdapter),  "initWithVehicleStateNotifier:",  a1);
    id v26 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLRoutineMonitor");
    *(void *)(a1 + 1080) = v26;
    objc_msgSend(v26, "registerDelegate:inSilo:", *(void *)(a1 + 1072), objc_msgSend(*(id *)(a1 + 32), "silo"));
    [*(id *)(a1 + 1080) startLeechingVisitsForClient:*(void *)(a1 + 1072)];
    [*(id *)(a1 + 1080) startLeechingLowConfidenceVisitsForClient:*(void *)(a1 + 1072)];
    if (objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "isServiceEnabled:",  @"CLCachedLocationController"))
    {
      sub_1005DD0E4((uint64_t)sub_100FFB790, a1, *(void **)(a1 + 32), &v51);
      uint64_t v27 = v51;
      double v51 = 0LL;
      uint64_t v28 = *(void *)(a1 + 128);
      *(void *)(a1 + 128) = v27;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
        double v29 = v51;
        double v51 = 0LL;
        if (v29) {
          (*((void (**)(void **))*v29 + 1))(v29);
        }
      }

      [*(id *)(*(void *)(a1 + 128) + 16) register:*(void *)(*(void *)(a1 + 128) + 8) forNotification:2 registrationInfo:0];
    }

    *(void *)(a1 + 1088) = -[CLVehicleStateNotifierTransitMacMonitorAdapter initWithVehicleStateNotifier:]( objc_alloc(&OBJC_CLASS___CLVehicleStateNotifierTransitMacMonitorAdapter),  "initWithVehicleStateNotifier:",  a1);
    id v30 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLTransitMacMonitor");
    *(void *)(a1 + 1096) = v30;
    objc_msgSend(v30, "registerDelegate:inSilo:", *(void *)(a1 + 1088), objc_msgSend(*(id *)(a1 + 32), "silo"));
    sub_1003CC884((uint64_t)sub_100FFB960, a1, *(void **)(a1 + 32), &v51);
    double v31 = v51;
    double v51 = 0LL;
    uint64_t v32 = *(void *)(a1 + 1296);
    *(void *)(a1 + 1296) = v31;
    if (v32)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
      double v33 = v51;
      double v51 = 0LL;
      if (v33) {
        (*((void (**)(void **))*v33 + 1))(v33);
      }
    }

    [*(id *)(*(void *)(a1 + 1296) + 16) register:*(void *)(*(void *)(a1 + 1296) + 8) forNotification:8 registrationInfo:0];
    sub_100AEB408(a1 + 1368, (uint64_t)sub_100FFBB44, a1, *(void **)(a1 + 32), &v51);
    uint64_t v34 = v51;
    double v51 = 0LL;
    uint64_t v35 = *(void *)v19;
    *(void *)uint64_t v19 = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
      double v36 = v51;
      double v51 = 0LL;
      if (v36) {
        (*((void (**)(void **))*v36 + 1))(v36);
      }
    }

    [*(id *)(*(void *)v19 + 16) register:*(void *)(*(void *)v19 + 8) forNotification:14 registrationInfo:0];
    id v37 =  objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:forClient:",  @"CLClientAuthorizationCache",  @"CLVehicleStateNotifier");
    *(void *)(a1 + 1360) = v37;
    double v38 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle");
    double v51 = _NSConcreteStackBlock;
    uint64_t v52 = 3221225472LL;
    double v53 = sub_100FFC5D0;
    int v54 = (uint64_t *)&unk_1018398E0;
    uint64_t v55 = a1;
    [v37 getAuthorizationContextOfNonZonalClient:v38 withReply:&v51];
    sub_100ACD980((uint64_t)sub_100FFBD14, a1, *(void **)(a1 + 32), &v51);
    double v39 = v51;
    double v51 = 0LL;
    uint64_t v40 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = v39;
    if (v40)
    {
      (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
      double v41 = v51;
      double v51 = 0LL;
      if (v41) {
        (*((void (**)(void **))*v41 + 1))(v41);
      }
    }

    [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:1 registrationInfo:0];
    uint64_t v42 = sub_1006E27E8();
    sub_100413284(v42, &v51);
    sub_1002A6F64((uint64_t)v51, "DisableVehicularFalsePositiveSuppression", (BOOL *)(a1 + 1140));
    int v43 = (std::__shared_weak_count *)v52;
    if (v52)
    {
      BOOL v44 = (unint64_t *)(v52 + 8);
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    int v46 = operator new(0x28uLL);
    sub_100963C2C((uint64_t)v46);
    *(void *)(a1 + 1568) = v46;
  }

  return a1;
}

void sub_100FFB170(_Unwind_Exception *a1)
{
  uint64_t v9 = *v7;
  uint64_t *v7 = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  sub_1008AF1C4(v5);
  sub_100AD5650(v4);
  uint64_t v10 = v1[162];
  v1[162] = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = *v6;
  *double v6 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  sub_1008D493C(v3, 0LL);
  uint64_t v12 = v1[17];
  v1[17] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = v1[16];
  v1[16] = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = v1[15];
  v1[15] = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = *v2;
  *id v2 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  sub_100FFBEEC((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100FFB340(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101894088;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100FFB3C0(_Unwind_Exception *exception_object)
{
}

void sub_100FFB3DC(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101894018);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    double v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVehicleStateNotifier::onVehicleConnectionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    double v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVehicleStateNotifier::onVehicleConnectionNotification, event:%{public, location:e scape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v9 = 0;
  }

  memcpy((void *)(a4 + 144), a3, 0x318uLL);
  sub_100FFD058(a4);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FFB598( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FFB5B8(uint64_t a1, const CLMotionActivity *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101894018);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVehicleStateNotifier::onMotionStateUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVehicleStateNotifier::onMotionStateUpdate, event:%{public, location:escape_only}s , this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100FFC76C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FFB770( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FFB790(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101894018);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100FFDE8C(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FFB940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FFB960(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101894018);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVehicleStateNotifier::onDaemonStatus",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    id v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVehicleStateNotifier::onDaemonStatus, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  if (*a2 == 8)
  {
    *(_BYTE *)(a4 + 1292) = *a3;
    sub_100FFD058(a4);
  }

  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FFBB24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FFBB44(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101894018);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVehicleStateNotifier::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    id v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVehicleStateNotifier::onLocationNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_100FFE37C(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FFBCF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FFBD14(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101894018);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVehicleStateNotifier::onDataProtectionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    id v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVehicleStateNotifier::onDataProtectionNotification, event:%{public, location:esca pe_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  if (*a2 == 1) {
    *(_BYTE *)(a4 + 1106) = *(_BYTE *)(a3 + 4);
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100FFBED0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FFBEEC(uint64_t a1)
{
  *(void *)a1 = off_101894088;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100FFBF60(uint64_t a1)
{
  *(void *)a1 = off_101893F18;

  *(void *)(a1 + 1080) = 0LL;
  *(void *)(a1 + 1072) = 0LL;

  *(void *)(a1 + 1096) = 0LL;
  *(void *)(a1 + 1088) = 0LL;

  *(void *)(a1 + 1360) = 0LL;
  uint64_t v2 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1568);
  if (v3)
  {
    uint64_t v4 = (void *)sub_100963C78(v3);
    operator delete(v4);
  }

  uint64_t v5 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  sub_1008AF1C4(a1 + 1368);
  sub_100AD5650(a1 + 1304);
  uint64_t v6 = *(void *)(a1 + 1296);
  *(void *)(a1 + 1296) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 1120);
  *(void *)(a1 + 1120) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1008D493C((uint64_t *)(a1 + 1112), 0LL);
  uint64_t v8 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  return sub_100FFBEEC(a1);
}

void sub_100FFC0BC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100FFBF60(a1);
  operator delete(v1);
}

uint64_t sub_100FFC0D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0LL;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *(_BYTE *)(a1 + 108) = 1;
  return result;
}

uint64_t sub_100FFC120(uint64_t a1, _DWORD *a2)
{
  if (!*a2) {
    sub_100FFC140(a1);
  }
  return 1LL;
}

void sub_100FFC140(uint64_t a1)
{
  *(_DWORD *)std::stringbuf::string_type buf = 0;
  int v2 = sub_100247620(a1, (int *)buf, 1LL);
  int v3 = v2;
  if (*(_BYTE *)(a1 + 1352))
  {
    if (*(_BYTE *)(a1 + 1104)
      || *(_BYTE *)(a1 + 1105)
      || *(void *)(a1 + 1152) == 2LL
      || !*(_BYTE *)(a1 + 1353)
      || v2 <= 0)
    {
      if (*(int *)(a1 + 1312) >= 1)
      {
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101894038);
        }
        uint64_t v4 = (os_log_s *)qword_1019344F8;
        if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
        {
          int v5 = *(unsigned __int8 *)(a1 + 1104);
          int v6 = *(unsigned __int8 *)(a1 + 1105);
          uint64_t v7 = *(void *)(a1 + 1152);
          int v8 = *(unsigned __int8 *)(a1 + 1353);
          *(_DWORD *)std::stringbuf::string_type buf = 67175681;
          int v30 = v5;
          __int16 v31 = 1025;
          int v32 = v6;
          __int16 v33 = 2049;
          uint64_t v34 = v7;
          __int16 v35 = 1025;
          int v36 = v8;
          __int16 v37 = 1025;
          BOOL v38 = v3 > 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: Releasing power assertion and disabling proactive gps, loi, %{private}d, stationaryWifi, %{privat e}d, state, %{private}lu, auth, %{private}d, clients, %{private}d",  buf,  0x24u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344F0 != -1) {
            dispatch_once(&qword_1019344F0, &stru_101894038);
          }
          int v10 = *(unsigned __int8 *)(a1 + 1104);
          int v11 = *(unsigned __int8 *)(a1 + 1105);
          uint64_t v12 = *(void *)(a1 + 1152);
          int v13 = *(unsigned __int8 *)(a1 + 1353);
          v20[0] = 67175681;
          v20[1] = v10;
          __int16 v21 = 1025;
          int v22 = v11;
          __int16 v23 = 2049;
          uint64_t v24 = v12;
          __int16 v25 = 1025;
          int v26 = v13;
          __int16 v27 = 1025;
          BOOL v28 = v3 > 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: Releasing power assertion and disabling proactive gps, loi, %{private}d, stationaryWifi, %{privat e}d, state, %{private}lu, auth, %{private}d, clients, %{private}d",  v20,  36);
          __int16 v15 = (uint8_t *)v14;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleStateNotifier::checkAndToggleGPS()", "%s\n", v14);
          if (v15 != buf) {
            free(v15);
          }
        }

        sub_100AD5D38(a1 + 1304);
      }

      [*(id *)(*(void *)(a1 + 1560) + 16) unregister:*(void *)(*(void *)(a1 + 1560) + 8) forNotification:0];
      *(_BYTE *)(a1 + 1352) = 0;
    }
  }

  else if (!*(_BYTE *)(a1 + 1104) && !*(_BYTE *)(a1 + 1105) && *(void *)(a1 + 1152) != 2LL)
  {
    if (*(_BYTE *)(a1 + 1353))
    {
      if (v2 >= 1)
      {
        *(_BYTE *)(a1 + 1352) = 1;
        [*(id *)(*(void *)(a1 + 1560) + 16) register:*(void *)(*(void *)(a1 + 1560) + 8) forNotification:0 registrationInfo:0];
        if (*(int *)(a1 + 1312) <= 0)
        {
          if (qword_1019344F0 != -1) {
            dispatch_once(&qword_1019344F0, &stru_101894038);
          }
          uint64_t v9 = (os_log_s *)qword_1019344F8;
          if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: Taking power assertion and enabling proactive gps.",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344F0 != -1) {
              dispatch_once(&qword_1019344F0, &stru_101894038);
            }
            LOWORD(v20[0]) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: Taking power assertion and enabling proactive gps.",  v20,  2);
            __int16 v17 = (uint8_t *)v16;
            sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleStateNotifier::checkAndToggleGPS()", "%s\n", v16);
            if (v17 != buf) {
              free(v17);
            }
          }

          sub_1010DDBC0(__p, "vehicular detection");
          sub_100AD5668(a1 + 1304, (uint64_t *)__p);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

void sub_100FFC58C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FFC5B0(uint64_t a1, _DWORD *a2)
{
  if (!*a2) {
    sub_100FFC140(a1);
  }
  return 1LL;
}

void sub_100FFC5D0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned __int8 v3 = [a2 isAuthorizedForServiceTypeMask:16];
  *(_BYTE *)(v2 + 1353) = v3;
  if ((v3 & 1) == 0)
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    uint64_t v4 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: Motion calibration system service is disabled.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: Motion calibration system service is disabled.",  v7,  2);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::updateLocationAuthorization()_block_invoke",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

void sub_100FFC76C(uint64_t a1, uint64_t a2, const CLMotionActivity *a3, int *a4)
{
  if (a3->type == 9)
  {
    sub_100FFCC6C(a1, (uint64_t)a4);
  }

  else if (a3->type == 1)
  {
    sub_100FFC7C4(a1, a4, a3);
  }

  sub_100FFD058(a1);
  sub_100FFD5A0(a1);
}

__n128 sub_100FFC7C4(uint64_t a1, int *a2, const CLMotionActivity *a3)
{
  uint64_t v5 = a1 + 936;
  if ((CLMotionActivity::isSimilar((CLMotionActivity *)(a1 + 936), (const CLMotionActivity *)a2, a3) & 1) == 0
    && ((CLMotionActivity::isInVehicle((CLMotionActivity *)v5) & 1) != 0
     || CLMotionActivity::isInVehicle((CLMotionActivity *)a2)))
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    int v6 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 936);
      uint64_t v8 = *((void *)a2 + 10);
      int v9 = *a2;
      int v10 = a2[1];
      int v11 = a2[16];
      int v12 = a2[4];
      int v13 = a2[5];
      unsigned int v14 = *((unsigned __int8 *)a2 + 96);
      int v15 = a2[3];
      int v16 = a2[13];
      int v17 = *((unsigned __int8 *)a2 + 48);
      int v18 = a2[25];
      unsigned int v19 = *((unsigned __int8 *)a2 + 68);
      int v20 = *((unsigned __int8 *)a2 + 69);
      unsigned int v21 = *((unsigned __int8 *)a2 + 70);
      int v22 = *((unsigned __int16 *)a2 + 36);
      double v47 = *(double *)(a1 + 1216);
      uint64_t v48 = *(void *)(a1 + 1224);
      *(_DWORD *)std::stringbuf::string_type buf = 67115264;
      int v63 = v7;
      __int16 v64 = 1024;
      int v65 = v9;
      __int16 v66 = 2048;
      uint64_t v67 = v8;
      __int16 v68 = 1024;
      int v69 = v10;
      __int16 v70 = 1024;
      int v71 = v11;
      __int16 v72 = 1024;
      int v73 = v13;
      __int16 v74 = 1024;
      int v75 = v14 & 1;
      __int16 v76 = 1024;
      int v77 = (v14 >> 1) & 1;
      __int16 v78 = 1024;
      int v79 = (v14 >> 4) & 1;
      __int16 v80 = 1024;
      int v81 = (v14 >> 3) & 1;
      __int16 v82 = 1024;
      int v83 = (v14 >> 2) & 1;
      __int16 v84 = 1024;
      int v85 = v15;
      __int16 v86 = 1024;
      int v87 = v12;
      __int16 v88 = 1024;
      int v89 = v16;
      __int16 v90 = 1024;
      int v91 = v17;
      __int16 v92 = 1024;
      int v93 = v18;
      __int16 v94 = 1024;
      int v95 = v19 & 0xF;
      __int16 v96 = 1024;
      unsigned int v97 = v19 >> 4;
      __int16 v98 = 1024;
      int v99 = v20;
      __int16 v100 = 1024;
      int v101 = v21 & 1;
      __int16 v102 = 1024;
      int v103 = (v21 >> 1) & 1;
      __int16 v104 = 1024;
      int v105 = v22;
      __int16 v106 = 1024;
      int v107 = (v21 >> 2) & 1;
      __int16 v108 = 2048;
      double v109 = v47;
      __int16 v110 = 2048;
      uint64_t v111 = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR transition: from,%d,to,%d,time,%f,confidence,%d,vehicleType,%d,constrained,%d,motion,%d,gps,%d,bt,%d,w ifi,%d,bb,%d,mountedState,%d,mountedConfidence,%d,exitState,%d,isVehicleConnected,%d,vehicularConfidence,%d,prev FsmState,%d,curFsmState,%d,fsmEvent,%u,vehToStatic,%d,pedToMove,%d,consecStatic,%u,noRecentLoi,%d,lastLoiEnter,% lf,lastLoiExit,%lf",  buf,  0xA4u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      uint64_t v30 = *((void *)a2 + 10);
      int v31 = *a2;
      int v32 = a2[1];
      int v33 = a2[16];
      int v34 = a2[4];
      int v35 = a2[5];
      unsigned int v36 = *((unsigned __int8 *)a2 + 96);
      int v37 = a2[3];
      int v38 = a2[13];
      int v39 = a2[25];
      unsigned int v40 = *((unsigned __int8 *)a2 + 68);
      unsigned int v41 = *((unsigned __int8 *)a2 + 70);
      int v42 = *((unsigned __int16 *)a2 + 36);
      uint64_t v43 = *(void *)(a1 + 1216);
      uint64_t v44 = *(void *)(a1 + 1224);
      LOWORD(v50) = 1024;
      HIWORD(v50) = v31;
      LOWORD(v51) = 1024;
      HIWORD(v51) = v32;
      LOWORD(v52) = HIWORD(v35);
      HIWORD(v52) = 1024;
      *(_WORD *)double v53 = 1024;
      *(_DWORD *)&v53[2] = (v36 >> 1) & 1;
      *(_DWORD *)int v54 = (v36 >> 3) & 1;
      *(_WORD *)&v54[4] = 1024;
      LOWORD(v55) = 1024;
      HIWORD(v55) = v37;
      LOWORD(v56) = HIWORD(v38);
      HIWORD(v56) = 1024;
      LOWORD(v57) = 1024;
      HIWORD(v57) = v39;
      *(_DWORD *)__int16 v58 = v40 >> 4;
      *(_WORD *)&v58[4] = 1024;
      LOWORD(v59) = 1024;
      HIWORD(v59) = v41 & 1;
      LOWORD(v60) = HIWORD(v42);
      HIWORD(v60) = 1024;
      *(_WORD *)double v61 = 2048;
      *(void *)&v61[2] = v43;
      *(_WORD *)&v61[10] = 2048;
      *(void *)&v61[12] = v44;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR transition: from,%d,to,%d,time,%f,confidence,%d,vehicleType,%d,constrained,%d,motion,%d,gps,%d,bt,%d,w ifi,%d,bb,%d,mountedState,%d,mountedConfidence,%d,exitState,%d,isVehicleConnected,%d,vehicularConfidence,%d,prev FsmState,%d,curFsmState,%d,fsmEvent,%u,vehToStatic,%d,pedToMove,%d,consecStatic,%u,noRecentLoi,%d,lastLoiEnter,% lf,lastLoiExit,%lf",  &v49,  164,  v47,  qword_1019344F8,  67115264,  v50,  v30,  v51,  v33,  v52,  *(_DWORD *)v53,  (v36 >> 4) & 1,  *(_DWORD *)&v54[2],  v55,  v34,  v56,  v57,  v40 & 0xF,  *(_DWORD *)&v58[2],  v59,  (v41 >> 1) & 1,  v60,  *(_DWORD *)v61,  *(double *)&v61[8],  *(double *)&v61[16]);
      int v46 = (uint8_t *)v45;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::feedMotionActivity(const CLMotionActivity &)",  "%s\n",  v45);
      if (v46 != buf) {
        free(v46);
      }
    }
  }

  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  __int128 v23 = *((_OWORD *)a2 + 1);
  __int128 v24 = *((_OWORD *)a2 + 2);
  __int128 v25 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v5 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v5 + 64) = v25;
  *(_OWORD *)(v5 + 16) = v23;
  *(_OWORD *)(v5 + 32) = v24;
  __int128 v26 = *((_OWORD *)a2 + 5);
  __int128 v27 = *((_OWORD *)a2 + 6);
  __int128 v28 = *((_OWORD *)a2 + 7);
  *(void *)(v5 + 128) = *((void *)a2 + 16);
  *(_OWORD *)(v5 + 96) = v27;
  *(_OWORD *)(v5 + 112) = v28;
  *(_OWORD *)(v5 + 80) = v26;
  sub_100FFD058(a1);
  return result;
}

void sub_100FFCC6C(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 20) <= 150.0 && vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a2 + 76)) <= 30.0)
  {
    if (*(_BYTE *)(a1 + 1104))
    {
      double v4 = *(double *)(a1 + 1232) + 60.0;
      if (v4 < sub_100D2EC74(*(double *)(a1 + 1240), *(double *)(a1 + 1248), *(double *)(a2 + 4), *(double *)(a2 + 12)))
      {
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101894038);
        }
        uint64_t v5 = (os_log_s *)qword_1019344F8;
        if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: too far from center of DNDLOI",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344F0 != -1) {
            dispatch_once(&qword_1019344F0, &stru_101894038);
          }
          v12[0] = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: too far from center of DNDLOI",  v12,  2);
          int v11 = (uint8_t *)v10;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::updateVisitByLocation(const CLClientLocation &)",  "%s\n",  v10);
          if (v11 != buf) {
            free(v11);
          }
        }

        sub_100FFDA18(a1);
      }
    }

    else
    {
      int v6 = (double *)(a1 + 1256);
      if (sub_100D2EC74(*(double *)(a1 + 1256), *(double *)(a1 + 1264), *(double *)(a2 + 4), *(double *)(a2 + 12)) >= 10.0
        || !*(_BYTE *)(a1 + 1209)
        || *(double *)(a1 + 1264) == kCLLocationCoordinate2DInvalid.longitude
        || *v6 == kCLLocationCoordinate2DInvalid.latitude)
      {
        *(_OWORD *)int v6 = *(_OWORD *)(a2 + 4);
        if (*(void *)(a1 + 1152) == 2LL || *(_BYTE *)(a1 + 1208) || !*(_BYTE *)(a1 + 1209)) {
          sub_100FFE64C(a1, (_OWORD *)a2);
        }
      }

      else
      {
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101894038);
        }
        int v7 = (os_log_s *)qword_1019344F8;
        if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "VEHICULAR: skipping repeated nearby location",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344F0 != -1) {
            dispatch_once(&qword_1019344F0, &stru_101894038);
          }
          v12[0] = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  2LL,  "VEHICULAR: skipping repeated nearby location",  v12,  2);
          int v9 = (uint8_t *)v8;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::updateVisitByLocation(const CLClientLocation &)",  "%s\n",  v8);
          if (v9 != buf) {
            free(v9);
          }
        }
      }
    }
  }

void sub_100FFD058(uint64_t a1)
{
  uint64_t v2 = sub_100FFA990(a1);
  HIDWORD(v33) = v2;
  if ((v2 & 1) != 0) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = sub_100FFE5D8(v3, v2, (_DWORD *)(a1 + 936), (double *)(a1 + 144));
  }
  BOOL v5 = 0;
  v3.n128_u64[0] = *(void *)(a1 + 144);
  if (v3.n128_f64[0] <= 0.0)
  {
    uint64_t v6 = v4;
  }

  else
  {
    v3.n128_u64[0] = *(void *)(a1 + 152);
    uint64_t v6 = v4;
    if (v3.n128_f64[0] < 0.0)
    {
      BOOL v5 = *(_DWORD *)(a1 + 1136) == 2;
      if (*(_DWORD *)(a1 + 1136) == 2) {
        uint64_t v6 = 2LL;
      }
      else {
        uint64_t v6 = v4;
      }
    }
  }

  else {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v10 = *(_DWORD *)(a1 + 1272) == 1 || *(void *)(a1 + 1280) == 1LL;
  uint64_t v11 = *(void *)(a1 + 1152);
  if (v6 != *(void *)(a1 + 1144)
    || v4 != v11
    || (uint64_t v11 = v4, v8 != *(void *)(a1 + 1160))
    || (uint64_t v11 = v4, *(void *)(a1 + 1168) != v10))
  {
    if (*(_DWORD *)(a1 + 1136) == 3)
    {
      if (v4 != 2 || v11 == 2)
      {
        BOOL v14 = v4 == 2 || v11 != 2;
        else {
          int v12 = 2;
        }
      }

      else
      {
        int v12 = 1;
      }
    }

    else
    {
      int v12 = 2;
    }

    sub_100FFDE20((id *)a1, v12);
    *(void *)(a1 + 1144) = v6;
    *(void *)(a1 + 1152) = v4;
    *(void *)(a1 + 1160) = v8;
    *(void *)(a1 + 1168) = v10;
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    int v16 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(unsigned __int8 *)(a1 + 1104);
      int v18 = *(unsigned __int8 *)(a1 + 1208);
      int v19 = sub_101024128(*(void *)(a1 + 1112));
      int v20 = *(unsigned __int8 *)(a1 + 1140);
      *(_DWORD *)std::stringbuf::string_type buf = 134350848;
      int v51 = (const __CFString *)v4;
      __int16 v52 = 2050;
      uint64_t v53 = v8;
      __int16 v54 = 1026;
      int v55 = HIDWORD(v33);
      __int16 v56 = 1026;
      int v57 = v17;
      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      __int16 v58 = 1026;
      int v59 = v18;
      __int16 v60 = 1026;
      int v61 = v19;
      __int16 v62 = 1026;
      int v63 = v20;
      __int16 v64 = 1026;
      BOOL v65 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{public}u, inFastSuppressi onRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u, dndOverride, %{public}u",  buf,  0x3Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      uint64_t v24 = qword_1019344F8;
      int v25 = *(unsigned __int8 *)(a1 + 1104);
      int v26 = *(unsigned __int8 *)(a1 + 1208);
      int v27 = sub_101024128(*(void *)(a1 + 1112));
      int v28 = *(unsigned __int8 *)(a1 + 1140);
      int v34 = 134350848;
      int v35 = (const __CFString *)v4;
      __int16 v36 = 2050;
      uint64_t v37 = v8;
      __int16 v38 = 1026;
      int v39 = HIDWORD(v33);
      __int16 v40 = 1026;
      int v41 = v25;
      __int16 v42 = 1026;
      int v43 = v26;
      __int16 v44 = 1026;
      int v45 = v27;
      __int16 v46 = 1026;
      int v47 = v28;
      __int16 v48 = 1026;
      BOOL v49 = v5;
      LODWORD(v33) = 58;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  0LL,  "VEHICULAR: state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{public}u, inFastSuppressi onRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u, dndOverride, %{public}u",  &v34,  v33);
      uint64_t v30 = (uint8_t *)v29;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleStateNotifier::updateVehicularDnd()", "%s\n", v29);
      if (v30 != buf) {
        free(v30);
      }
      p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    }

    uint64_t v21 = *(void *)(a1 + 1568);
    if (v21)
    {
      sub_100963E68(v21, v6, v10, v8);
      id v22 = sub_100963D6C(*(void *)(a1 + 1568));
      if (v22)
      {
        AnalyticsSendEvent(@"com.apple.carexperience.vehiclestate", v22);
        __int128 v23 = (os_log_s *)qword_1019344F8;
        if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 138412290;
          int v51 = @"com.apple.carexperience.vehiclestate";
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: submitted metrics, %@",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          int v34 = 138412290;
          int v35 = @"com.apple.carexperience.vehiclestate";
          LODWORD(v33) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: submitted metrics, %@",  &v34,  v33);
          int v32 = (uint8_t *)v31;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleStateNotifier::updateVehicularDnd()", "%s\n", v31);
          if (v32 != buf) {
            free(v32);
          }
        }
      }
    }

    sub_100FFC140(a1);
    sub_100FFF35C((void *)a1);
  }

void sub_100FFD5A0(uint64_t a1)
{
  uint64_t v2 = sub_100FFA990(a1);
  int v4 = v2;
  if ((_DWORD)v2)
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    BOOL v5 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MotionCues] suppressed vehicular", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  2LL,  "[MotionCues] suppressed vehicular",  &v31,  2);
      double v29 = (uint8_t *)v28;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleStateNotifier::updateMotionCues()", "%s\n", v28);
      if (v29 != buf) {
        free(v29);
      }
    }

    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = sub_100FFE5D8(v3, v2, (_DWORD *)(a1 + 936), (double *)(a1 + 144));
  }

  else {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v11 = *(_DWORD *)(a1 + 1272) == 1 || *(void *)(a1 + 1280) == 1LL;
  if (v7 != *(void *)(a1 + 1184) || v9 != *(void *)(a1 + 1192) || *(void *)(a1 + 1200) != v11)
  {
    if (*(_DWORD *)(a1 + 1136) == 3)
    {
      uint64_t v12 = *(void *)(a1 + 1152);
      if (v7 != 2 || v12 == 2)
      {
        BOOL v15 = v7 == 2 || v12 != 2;
        else {
          int v13 = 2;
        }
      }

      else
      {
        int v13 = 1;
      }
    }

    else
    {
      int v13 = 2;
    }

    sub_100FFDE20((id *)a1, v13);
    *(void *)(a1 + 1184) = v7;
    *(void *)(a1 + 1192) = v9;
    *(void *)(a1 + 1200) = v11;
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    int v16 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(unsigned __int8 *)(a1 + 1104);
      int v18 = *(unsigned __int8 *)(a1 + 1208);
      int v19 = sub_101024128(*(void *)(a1 + 1112));
      int v20 = *(unsigned __int8 *)(a1 + 1140);
      *(_DWORD *)std::stringbuf::string_type buf = 134350592;
      uint64_t v46 = v7;
      __int16 v47 = 2050;
      uint64_t v48 = v9;
      __int16 v49 = 1026;
      int v50 = v4;
      __int16 v51 = 1026;
      int v52 = v17;
      __int16 v53 = 1026;
      int v54 = v18;
      __int16 v55 = 1026;
      int v56 = v19;
      __int16 v57 = 1026;
      int v58 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[MotionCues] VEHICULAR: motionCues, state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{ public}u, inFastSuppressionRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      uint64_t v21 = qword_1019344F8;
      int v22 = *(unsigned __int8 *)(a1 + 1104);
      int v23 = *(unsigned __int8 *)(a1 + 1208);
      int v24 = sub_101024128(*(void *)(a1 + 1112));
      int v25 = *(unsigned __int8 *)(a1 + 1140);
      int v31 = 134350592;
      uint64_t v32 = v7;
      __int16 v33 = 2050;
      uint64_t v34 = v9;
      __int16 v35 = 1026;
      int v36 = v4;
      __int16 v37 = 1026;
      int v38 = v22;
      __int16 v39 = 1026;
      int v40 = v23;
      __int16 v41 = 1026;
      int v42 = v24;
      __int16 v43 = 1026;
      int v44 = v25;
      LODWORD(v30) = 52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  0LL,  "[MotionCues] VEHICULAR: motionCues, state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{ public}u, inFastSuppressionRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u",  &v31,  v30);
      int v27 = (uint8_t *)v26;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleStateNotifier::updateMotionCues()", "%s\n", v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    sub_100FFF078(a1);
  }

uint64_t sub_100FFDA18(uint64_t a1)
{
  *(_BYTE *)(a1 + 1104) = 0;
  *(CFAbsoluteTime *)(a1 + 1224) = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(a1 + 1232) = xmmword_1012EA5D0;
  *(void *)(a1 + 1248) = 0xBFF0000000000000LL;
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_101894038);
  }
  uint64_t v2 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "VEHICULAR: exiting DNDLOI", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: exiting DNDLOI",  v6,  2);
    BOOL v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleStateNotifier::exitDndLoi()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100FFC140(a1);
  sub_100FFD058(a1);
  uint64_t result = sub_1008FA854(0);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(result + 128) + 16LL))(result + 128, 1LL);
  }
  return result;
}

uint64_t sub_100FFDBF4(uint64_t a1, double a2, double a3, double a4)
{
  *(_BYTE *)(a1 + 1104) = 1;
  *(CFAbsoluteTime *)(a1 + 1216) = CFAbsoluteTimeGetCurrent();
  double v8 = 0.0;
  if (a4 < 1000.0 && a4 > 0.0) {
    double v8 = a4;
  }
  *(double *)(a1 + 1232) = v8;
  *(double *)(a1 + 1240) = a2;
  *(double *)(a1 + 1248) = a3;
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_101894038);
  }
  uint64_t v10 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 1232);
    *(_DWORD *)std::stringbuf::string_type buf = 134349056;
    uint64_t v19 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: entering DNDLOI, range, %{public}f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    uint64_t v13 = *(void *)(a1 + 1232);
    int v16 = 134349056;
    uint64_t v17 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: entering DNDLOI, range, %{public}f",  &v16,  12);
    BOOL v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::enterDndLoi(CLLocationCoordinate2D, CLLocationAccuracy)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  sub_100FFC140(a1);
  sub_100FFD058(a1);
  uint64_t result = sub_1008FA854(0);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(result + 128) + 16LL))(result + 128, 0LL);
  }
  return result;
}

id *sub_100FFDE20(id *result, int a2)
{
  uint64_t v2 = result;
  if (a2 == 2)
  {
    if (*((_DWORD *)result + 322) != 3) {
      return result;
    }
    uint64_t result = (id *)[result[137] stopMonitoringTransitStateForClient:result[136]];
    int v3 = 4;
    goto LABEL_7;
  }

  if (a2 == 1 && *((_DWORD *)result + 322) != 3)
  {
    uint64_t result = (id *)[result[137] startMonitoringTransitStateForClient:result[136]];
    int v3 = 3;
LABEL_7:
    *((_DWORD *)v2 + 322) = v3;
  }

  return result;
}

void sub_100FFDE8C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_101894038);
  }
  __n128 v6 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *a4;
    *(_DWORD *)std::stringbuf::string_type buf = 67240192;
    int v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: Received transit navigation state: %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    int v8 = *a4;
    v11[0] = 67240192;
    v11[1] = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: Received transit navigation state: %{public}d",  v11,  8);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification(int, const CLCachedLocationController_Type ::Notification &, const CLCachedLocationController_Type::NotificationData &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  *(_DWORD *)(a1 + 1272) = *a4;
  sub_100FFD058(a1);
}

void sub_100FFE050(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if ((*a3 & 0xFFFFFFFE) == 6)
  {
    if (!sub_101024130(*(void *)(a1 + 1112)))
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      int v4 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "VEHICULAR: WiFi dis-associated, update vehicular state",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101894038);
        }
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  1LL,  "VEHICULAR: WiFi dis-associated, update vehicular state",  v14,  2);
        uint64_t v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiSer vice_Type::NotificationData &)",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }

      sub_100FFD058(a1);
    }

    BOOL v5 = sub_101024130(*(void *)(a1 + 1112)) && !sub_101024150(*(void *)(a1 + 1112));
    *(_BYTE *)(a1 + 1105) = v5;
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    __n128 v6 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
    {
      int v7 = *(unsigned __int8 *)(a1 + 1105);
      *(_DWORD *)std::stringbuf::string_type buf = 67174657;
      int v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "VEHICULAR: WiFi isStationary, %{private}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      int v8 = *(unsigned __int8 *)(a1 + 1105);
      v14[0] = 67174657;
      v14[1] = v8;
      LODWORD(v13) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  1LL,  "VEHICULAR: WiFi isStationary, %{private}d",  v14,  v13);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiServi ce_Type::NotificationData &)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    sub_100FFC140(a1);
  }

void sub_100FFE37C(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 == 14)
  {
    int v4 = *(void **)(a1 + 1360);
    *(void *)std::stringbuf::string_type buf = _NSConcreteStackBlock;
    uint64_t v13 = 3221225472LL;
    BOOL v14 = sub_100FFC5D0;
    BOOL v15 = &unk_1018398E0;
    uint64_t v16 = a1;
    objc_msgSend( v4,  "getAuthorizationContextOfNonZonalClient:withReply:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle"),  buf);
    sub_100FFC140(a1);
  }

  else if (*a3)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101894058);
    }
    __n128 v6 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      int v7 = *a3;
      *(_DWORD *)std::stringbuf::string_type buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "#Warning VEHICULAR: Received unhandled location notification, %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101894058);
      }
      int v8 = *a3;
      v11[0] = 67240192;
      v11[1] = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "#Warning VEHICULAR: Received unhandled location notification, %{public}d",  v11,  8);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLVehicleStateNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CL LocationProvider_Type::NotificationData &)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  else
  {
    sub_1008B1A40(a1 + 1368);
  }

uint64_t sub_100FFE5D8(__n128 a1, uint64_t a2, _DWORD *a3, double *a4)
{
  BOOL v6 = a4[1] > 0.0 && *a4 > 0.0;
  a1.n128_f64[0] = *a4;
  if (*a3) {
    return 1LL;
  }
  return v6;
}

void sub_100FFE64C(uint64_t a1, _OWORD *a2)
{
  if (!*(void *)(a1 + 1080))
  {
    sub_100FFA7D0(a1);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    uint64_t v9 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "VEHICULAR: Error retrieving LOIs. CLRoutineMonitor is not supported",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    v18[0] = 0;
    double v10 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  16LL,  "VEHICULAR: Error retrieving LOIs. CLRoutineMonitor is not supported",  v18,  2);
    uint64_t v12 = v11;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)",  "%s\n",  v10);
LABEL_21:
    if (v12 != buf) {
      free(v12);
    }
    return;
  }

  if (*(_BYTE *)(a1 + 1106))
  {
    int v4 = objc_alloc(&OBJC_CLASS___CLLocation);
    __int128 v5 = a2[7];
    v16[6] = a2[6];
    v16[7] = v5;
    v17[0] = a2[8];
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)a2 + 140);
    __int128 v6 = a2[3];
    _DWORD v16[2] = a2[2];
    v16[3] = v6;
    __int128 v7 = a2[5];
    v16[4] = a2[4];
    v16[5] = v7;
    __int128 v8 = a2[1];
    v16[0] = *a2;
    v16[1] = v8;
    -[CLLocation initWithClientLocation:](v4, "initWithClientLocation:", v16);
    objc_msgSend(*(id *)(a1 + 1080), "fetchLocationsOfInterestWithinDistance:ofLocation:withReply:", 150.0);
    return;
  }

  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_101894038);
  }
  uint64_t v13 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "VEHICULAR: Error retrieving LOIs, since device is locked",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    v18[0] = 0;
    double v14 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  1LL,  "VEHICULAR: Error retrieving LOIs, since device is locked",  v18,  2);
    uint64_t v12 = v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)",  "%s\n",  v14);
    goto LABEL_21;
  }

id sub_100FFE9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  __int128 v5 = *(void **)(v3 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_100FFE9FC;
  v7[3] = &unk_101836A38;
  _DWORD v7[4] = a3;
  void v7[5] = a2;
  v7[6] = v4;
  v7[7] = v3;
  return [v5 async:v7];
}

void sub_100FFE9FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 32))
  {
    sub_100FFA7D0(*(void *)(a1 + 56));
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    uint64_t v3 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)std::stringbuf::string_type buf = 138543362;
      uint64_t v42 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "VEHICULAR: Error retrieving LOIs. %{public}@",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    uint64_t v29 = *(void *)(a1 + 32);
    int v39 = 138543362;
    uint64_t v40 = v29;
    double v30 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  16LL,  "VEHICULAR: Error retrieving LOIs. %{public}@",  &v39,  12);
    int v28 = v31;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)_block_invoke",  "%s\n",  v30);
LABEL_49:
    if (v28 != buf) {
      free(v28);
    }
    return;
  }

  if (![*(id *)(a1 + 40) count])
  {
    *(_BYTE *)(v2 + 1209) = 1;
    if (!*(_BYTE *)(v2 + 1208)) {
      return;
    }
    *(_BYTE *)(v2 + 1208) = 0;
    sub_100FFD058(v2);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    uint64_t v11 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: No LOIs near fast suppression range",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    LOWORD(v39) = 0;
    double v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: No LOIs near fast suppression range",  &v39,  2);
LABEL_45:
    int v28 = v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)_block_invoke",  "%s\n",  v13);
    goto LABEL_49;
  }

  if (!*(_BYTE *)(v2 + 1209))
  {
    *(_BYTE *)(v2 + 1209) = 1;
    [*(id *)(a1 + 48) coordinate];
    double v23 = v22;
    double v25 = v24;
    [*(id *)(a1 + 48) horizontalAccuracy];
    sub_100FFDBF4(v2, v23, v25, v26);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    int v27 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: recover visit, confidence, high, entry",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    LOWORD(v39) = 0;
    double v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: recover visit, confidence, high, entry",  &v39,  2);
    goto LABEL_45;
  }

  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v5 = *(void **)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v35;
    while (2)
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v8) {
          objc_enumerationMutation(v5);
        }
        double v10 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
        if (![v10 type] || objc_msgSend(v10, "type") == (id)1)
        {
          if (!*(_BYTE *)(v2 + 1208))
          {
            objc_msgSend(objc_msgSend(v10, "location"), "latitude");
            double v15 = v14;
            objc_msgSend(objc_msgSend(v10, "location"), "longitude");
            double v17 = v16;
            [*(id *)(a1 + 48) coordinate];
            double v19 = v18;
            [*(id *)(a1 + 48) coordinate];
            if (sub_100D2EC74(v15, v17, v19, v20) < 60.0)
            {
              *(_BYTE *)(v2 + 1208) = 1;
              if (qword_1019344F0 != -1) {
                dispatch_once(&qword_1019344F0, &stru_101894038);
              }
              uint64_t v21 = (os_log_s *)qword_1019344F8;
              if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::stringbuf::string_type buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: fast suppression range detected",  buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019344F0 != -1) {
                  dispatch_once(&qword_1019344F0, &stru_101894038);
                }
                LOWORD(v39) = 0;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: fast suppression range detected",  &v39,  2);
                __int16 v33 = (uint8_t *)v32;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)_block_invoke",  "%s\n",  v32);
                if (v33 != buf) {
                  free(v33);
                }
              }

              sub_100FFD058(v2);
            }
          }

          return;
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  *(_BYTE *)(v2 + 1208) = 0;
}

void sub_100FFF078(uint64_t a1)
{
  uint64_t v1 = (id *)&kCMMotionCuesEnterVehicularStateNotification;
  if (*(void *)(a1 + 1184) != 2LL) {
    uint64_t v1 = (id *)&kCMMotionCuesExitVehicularStateNotification;
  }
  id v2 = *v1;
  if (notify_post((const char *)[*v1 UTF8String]))
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    uint64_t v3 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "[MotionCues] VEHICULAR: Could not post state associated with vehicular state changed notification.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      LOWORD(v10) = 0;
      double v4 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  16LL,  "[MotionCues] VEHICULAR: Could not post state associated with vehicular state changed notification.",  &v10,  2);
      id v6 = v5;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLVehicleStateNotifier::notifyMotionCues()", "%s\n", v4);
LABEL_21:
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101894038);
    }
    id v7 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 138412290;
      id v13 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MotionCues] VEHICULAR: successfully posted notification, %@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      int v10 = 138412290;
      id v11 = v2;
      double v8 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "[MotionCues] VEHICULAR: successfully posted notification, %@",  &v10,  12);
      id v6 = v9;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleStateNotifier::notifyMotionCues()", "%s\n", v8);
      goto LABEL_21;
    }
  }

void sub_100FFF35C(void *a1)
{
  if ((sub_1004F97F4() & 0x800000000LL) != 0)
  {
    uint64_t v2 = a1[144];
    uint64_t v3 = a1[145];
    uint64_t v4 = a1[146];
    *(_DWORD *)double v14 = 0;
    *(void *)&__int128 buf = v2;
    *((void *)&buf + 1) = v3;
    uint64_t v16 = v4;
    (*(void (**)(void *, _BYTE *, __int128 *, uint64_t, uint64_t, void))(*a1 + 152LL))( a1,  v14,  &buf,  1LL,  0xFFFFFFFFLL,  0LL);
    *(_DWORD *)double v14 = 1;
    *(void *)&__int128 buf = v2;
    *((void *)&buf + 1) = v3;
    uint64_t v16 = v4;
    (*(void (**)(void *, _BYTE *, __int128 *, uint64_t, uint64_t, void))(*a1 + 152LL))( a1,  v14,  &buf,  1LL,  0xFFFFFFFFLL,  0LL);
    if (sub_100E575B0())
    {
      double v17 = @"Mode";
      double v18 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *((unsigned int *)a1 + 288));
      sub_100E575BC( (uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL),  (uint64_t)"VehicularDetection");
    }

    uint64_t v5 = kCMVehicularStateChangedNotification;
    if (notify_post((const char *)[kCMVehicularStateChangedNotification UTF8String]))
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      id v6 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "VEHICULAR: Could not post state associated with vehicular state changed notification.",  (uint8_t *)&buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101894038);
        }
        *(_WORD *)double v14 = 0;
        double v8 = _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  16LL,  "VEHICULAR: Could not post state associated with vehicular state changed notification.",  v14,  2,  *(void *)v14);
LABEL_13:
        uint64_t v9 = v7;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLVehicleStateNotifier::notifyVehicularDnd()", "%s\n", v8);
LABEL_33:
        if (v9 != &buf) {
          free(v9);
        }
      }
    }

    else if (a1[143] == 2LL {
           && notify_post((const char *)[kCMVehicularStateChangedToVehicularNotification UTF8String]))
    }
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      int v10 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "VEHICULAR: Could not post kCMVehicularStateChangedToVehicularNotification.",  (uint8_t *)&buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101894038);
        }
        *(_WORD *)double v14 = 0;
        double v8 = _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  16LL,  "VEHICULAR: Could not post kCMVehicularStateChangedToVehicularNotification.",  v14,  2,  *(void *)v14);
        goto LABEL_13;
      }
    }

    else
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101894038);
      }
      id v11 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: successfully posted notification, %@",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101894038);
        }
        *(_DWORD *)double v14 = 138412290;
        *(void *)&_DWORD v14[4] = v5;
        double v12 = _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: successfully posted notification, %@",  v14,  12);
        uint64_t v9 = v13;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleStateNotifier::notifyVehicularDnd()", "%s\n", v12);
        goto LABEL_33;
      }
    }
  }

void sub_100FFF7F8(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)__int128 buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101894018);
      }
      int v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        id v11 = (void *)(a1 + 8);
        *(_DWORD *)__int128 buf = 136446466;
        uint64_t v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101894018);
        }
        double v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        double v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        double v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationDa ta>::removeClient(int) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVeh icleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100FFFA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101992E78);
}

uint64_t sub_100FFFA80(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)__int16 v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)__int128 buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 24);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          __int128 v36 = sub_101002178((uint64_t)buf);
          sub_101001800((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_101992E79;
        HIDWORD(v40) = v17;
        *(void *)__int128 buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)__int128 buf = (char *)&v40 + 4;
        int v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)__int128 buf = (char *)&v40 + 4;
        __int16 v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)__int128 buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)__int128 buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101894018);
  }
  double v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&_BYTE buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    __int128 v37 = (void *)(a1 + 8);
    *(_DWORD *)__int16 v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    int v39 = (uint8_t *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>: :registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLVehicleState Notifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_ T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_100FFFEE0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)__int128 buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101894018);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      double v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData >::clientRegistered(int, const Notification_T &) [Notification_T = CLVehicleStateNotifier_Type::Notification, No tificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_101000160(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101894018);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)__int128 buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                __int128 v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101894018);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                __int16 v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::Notifi cationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVehicleStateNo tifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, Notific ationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_1010004E8(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x30uLL);
  *((void *)v6 + 2) = 0LL;
  *(void *)uint64_t v6 = off_101894200;
  *((void *)v6 + 1) = 0LL;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((void *)v6 + 5) = *(void *)(a3 + 16);
  *(void *)&__int128 v13 = v6 + 24;
  *((void *)&v13 + 1) = v6;
  int v12 = *a2;
  uint64_t v14 = &v12;
  int v7 = sub_10023347C((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_1012CF090, &v14);
  sub_10005F550((uint64_t)(v7 + 8), &v13);
  BOOL v8 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    int v9 = (unint64_t *)(*((void *)&v13 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return 1LL;
}

void sub_1010005C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1010005D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v5,  a3,  a4,  0LL);
}

void sub_101000614(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    unint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    int v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)__int128 buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      __int16 v68 = v12;
      __int16 v69 = 2050;
      __int16 v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    uint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)int v71 = &v71[8];
      memset(&v71[8], 0, 24);
      __int16 v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = (char *)operator new(0x30uLL);
      *((void *)v27 + 1) = 0LL;
      *((void *)v27 + 2) = 0LL;
      *(void *)__int16 v27 = off_101894200;
      *(_OWORD *)(v27 + 24) = *(_OWORD *)a3;
      *((void *)v27 + 5) = *(void *)(a3 + 16);
      *(void *)__int128 buf = v27 + 24;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_1010013A4(a3);
    if (a5 == -1)
    {
      sub_10100142C((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          __int128 v37 = (uint64_t *)v33;
        }
        else {
          __int128 v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          __int16 v43 = (unint64_t *)v38;
        }
        else {
          __int16 v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        int v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101894018);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            uint64_t v46 = v71;
          }
          else {
            uint64_t v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)__int128 buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101894018);
          }
          __int16 v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            __int16 v49 = __p;
          }
          else {
            __int16 v49 = (void **)__p[0];
          }
          *(_DWORD *)int v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          __int16 v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::Notification Data>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notificat ion_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::Notific ationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      int v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      int v52 = v40 + 3;
      __int16 v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      int v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          int v59 = v53;
        }
        else {
          int v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          int v56 = v53;
        }
        __int16 v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_101001800((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_101000C54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101000CA0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101894018);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData >::listClients() [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStat eNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894018);
    }
    int v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101894018);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData >::listClients() [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStat eNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    unint64_t v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      int v11 = (void *)(a1 + 8);
      do
      {
        int v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101894018);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)__int128 buf = 136315650;
              __int128 v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101894018);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::Notifica tionData>::listClients() [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                int v12 = v18;
              }

              while (!v19);
            }

            int v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            unint64_t v10 = v26;
          }

          while (!v19);
        }

        unint64_t v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_101001248(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101001274(id a1)
{
  qword_1019344F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1010012A0(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_1010012CC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_101894168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_101001310(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101894168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10100133C(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[2];
  int v3 = (uint64_t (*)(void *, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0) {
    int v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

uint64_t sub_10100135C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_101001398()
{
}

CLCppContainer *sub_1010013A4(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
  v2[2] = *(void *)(a1 + 16);
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  uint64_t v6 = sub_10100191C;
  int v7 = &unk_10181D3D0;
  BOOL v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_10100142C(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int16 v51 = v9;
        id v13 = sub_10100192C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v50 = v19;
              sub_101001800(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int16 v51 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              int v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101894018);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)__int128 buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101894018);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                __int16 v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationDa ta>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLVehicleStateN otifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, Notifi cationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_101001800(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_10100192C(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v14 = (int *)(*(void *)a2 + 32LL);
    int v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    __n128 result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_1010018DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101894200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010018F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101894200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_10100191C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_10100192C(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_1010019A4(a1);
  }
  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_101001D2C(a1);
  }
  else {
    return 0LL;
  }
}

id sub_1010019A4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1010020D8((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101894240);
    }
    int v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x80000001013BED10LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101894240);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101894240);
    }
    uint64_t v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x80000001013BED10LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101894240);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  int v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleStateNotifier_Type::NotificationData, C allback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_101001D2C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101894240);
    }
    int v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BED10LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101894240);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101894240);
    }
    uint64_t v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BED10LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101894240);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  int v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleStateNotifier_Type::NotificationData, C allback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_1010020D8(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D5150))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)24) {
      sub_10127F998();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_10100214C(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

CLCppContainer *sub_101002178(uint64_t a1)
{
  id v2 = operator new(0x18uLL);
  *(_OWORD *)id v2 = *(_OWORD *)a1;
  v2[2] = *(void *)(a1 + 16);
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  uint64_t v6 = sub_101002200;
  int v7 = &unk_10181D3D0;
  uint64_t v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_101002200(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_101002210()
{
  unsigned __int8 v0 = operator new(0x30uLL);
  uint64_t result = sub_1006DC9EC((uint64_t)v0, (uint64_t)"CLPencilMotion", 1);
  void *v0 = off_101894290;
  v0[4] = 0LL;
  v0[5] = 0LL;
  qword_1019A4120 = (uint64_t)v0;
  return result;
}

void sub_101002260(_Unwind_Exception *a1)
{
}

uint64_t sub_101002274()
{
  if (qword_10199FEA0 != -1) {
    dispatch_once(&qword_10199FEA0, &stru_101894260);
  }
  return qword_1019A4120;
}

void *sub_1010022B8(void *a1)
{
  *a1 = off_101894290;
  sub_10000AE14((uint64_t)(a1 + 4));
  return sub_1006DCAA8(a1);
}

void sub_1010022E8(void *a1)
{
  *a1 = off_101894290;
  sub_10000AE14((uint64_t)(a1 + 4));
  id v2 = sub_1006DCAA8(a1);
  operator delete(v2);
}

void sub_10100231C(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v6 = (uint64_t **)(a1 + 32);
    uint64_t v5 = *(uint64_t **)(a1 + 32);
    if (v5) {
      goto LABEL_14;
    }
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018942D8);
    }
    int v7 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Building AccessoryWake device", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018942D8);
      }
      v16[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  1LL,  "Building AccessoryWake device",  v16,  2);
      __int16 v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLPencilMotion::numberOfSpectatorsChanged(int, size_t)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    uint64_t v8 = (uint64_t *)sub_10071542C();
    uint64_t v14 = 0x330000FF00LL;
    char v15 = 0;
    sub_10121B774(v8, (uint64_t)&v14, (uint64_t *)buf);
    sub_10005F550((uint64_t)v6, (__int128 *)buf);
    uint64_t v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      id v10 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v5 = *v6;
    if (*v6)
    {
LABEL_14:
      if (a3) {
        sub_100719D78(v5, (uint64_t)sub_10100255C, a1);
      }
      else {
        sub_100719D78(v5, 0LL, 0LL);
      }
    }
  }

void sub_10100255C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0LL;
  int v16 = 0LL;
  IOHIDEventGetVendorDefinedData(a4, &v16, &v15);
  if (v16) {
    BOOL v6 = v15 <= 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018942D8);
    }
    int v7 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Empty payload, returning", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018942D8);
    }
    LOWORD(v17[0]) = 0;
    double v8 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Empty payload, returning",  v17,  2);
    id v10 = v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLPencilMotion::onIohidEventBounce(void *, void *, void *, IOHIDEventRef)",  "%s\n",  v8);
LABEL_26:
    if (v10 != buf) {
      free(v10);
    }
    return;
  }

  if (v15 == 16)
  {
    *(_OWORD *)__int128 buf = *v16;
    unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
    sub_101171C7C(TimeStamp);
    sub_101002A3C(a1, buf);
    return;
  }

  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018942D8);
  }
  uint64_t v12 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Bad AccessoryMotion report %{public}dB", buf, 8u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018942D8);
    }
    v17[0] = 67240192;
    v17[1] = v15;
    double v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  17LL,  "Bad AccessoryMotion report %{public}dB",  v17,  8);
    id v10 = v14;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLPencilMotion::onIohidEventBounce(void *, void *, void *, IOHIDEventRef)",  "%s\n",  v13);
    goto LABEL_26;
  }

double sub_101002884(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018942D8);
    }
    int v3 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }

    double v4 = 0.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018942D8);
      }
      v10[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  17LL,  "Unrecognized notification",  v10,  2);
      BOOL v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CFTimeInterval CLPencilMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7)
    {
      sub_10071A73C(v7, *a3);
      return *a3;
    }

    else
    {
      return 0.0;
    }
  }

  return v4;
}

uint64_t sub_101002A3C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018942D8);
  }
  double v4 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)__int128 buf = 67109120;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PencilMotion report %u", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018942D8);
    }
    int v7 = *a2;
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "PencilMotion report %u",  v10);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPencilMotion::onMotion(CFTimeInterval, CLPencilMotion::Report &)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  return sub_1006DD528(a1, 0LL, (uint64_t)a2, 16LL);
}

void sub_101002C0C(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_101003080(_Unwind_Exception *a1)
{
}

id sub_10100309C(uint64_t a1, void *a2)
{
  return _[a2 onMslp:a1];
}

void sub_101003CB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010046B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101004BEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101005F1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, void *__p, uint64_t a44, int a45, __int16 a46, char a47, char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101005F40(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 0xF)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    int v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v19 = a2;
      __int16 v20 = 2048;
      uint64_t v21 = 15LL;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 7 7,invalid row %zu > %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v14 = 134218240;
      unint64_t v15 = a2;
      __int16 v16 = 2048;
      uint64_t v17 = 15LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 7 7,invalid row %zu > %zu.",  (size_t)&v14,  22);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T &CMMatrix<double, 15>::operator()(size_t, size_t) [T = double, M = 15, N = 15]",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  if (a3 >= 0xF)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    id v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v19 = a3;
      __int16 v20 = 2048;
      uint64_t v21 = 15LL;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 7 8,invalid col %zu > %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v14 = 134218240;
      unint64_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = 15LL;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 7 8,invalid col %zu > %zu.",  (size_t)&v14,  v13);
      int v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T &CMMatrix<double, 15>::operator()(size_t, size_t) [T = double, M = 15, N = 15]",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  return a1 + 8 * (a2 - a3 + 16 * a3);
}

BOOL sub_10100629C(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_10100CAF8(a2);
  if (result)
  {
    unint64_t v5 = 15LL;
    unint64_t v6 = 14LL;
    while (1)
    {
      unint64_t v7 = v6;
      double v8 = sub_10100CBD8(a2, v6, v6);
      unint64_t v9 = v5;
      if (v5 <= 0xE)
      {
        do
        {
          double v10 = *(double *)sub_10100CF34(a1 + 120, v7, v9);
          double v11 = *(double *)sub_10100CF34(a1 + 120, v7, v9);
          double v8 = v8 + -(v10 * v11) * *(double *)sub_10100D28C(a1, v9++);
        }

        while (v9 != 15);
      }

      *(double *)sub_10100D28C(a1, v7) = v8;
      if (v7)
      {
        unint64_t v12 = v5 - 2;
        do
        {
          unint64_t v13 = v12;
          double v14 = sub_10100CBD8(a2, v12, v7);
          unint64_t v15 = v5;
          if (v5 <= 0xE)
          {
            do
            {
              double v16 = *(double *)sub_10100CF34(a1 + 120, v13, v15);
              double v17 = *(double *)sub_10100CF34(a1 + 120, v7, v15);
              double v14 = v14 + -(v16 * v17) * *(double *)sub_10100D28C(a1, v15++);
            }

            while (v15 != 15);
          }

          double v18 = v14 / *(double *)sub_10100D28C(a1, v7);
          *(double *)sub_10100CF34(a1 + 120, v13, v7) = v18;
          unint64_t v12 = v13 - 1;
        }

        while (v13);
      }

      unint64_t v6 = v7 - 1;
      unint64_t v5 = v7;
      if (!v7) {
        return 1LL;
      }
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    unint64_t v19 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134217984;
      unint64_t v25 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "D(%zu) <= 0 non-positive definite matrix!",  buf,  0xCu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v22 = 134217984;
      unint64_t v23 = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "D(%zu) <= 0 non-positive definite matrix!",  (size_t)&v22);
      uint64_t v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CMFactoredMatrix<double, 15>::factor(const CMMatrix<T, N, N> &) [T = double, N = 15]",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1010065D0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    unint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      uint64_t v15 = 15LL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277 ,invalid index %zu >= %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v8 = 134218240;
      unint64_t v9 = a2;
      __int16 v10 = 2048;
      uint64_t v11 = 15LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277 ,invalid index %zu >= %zu.",  (size_t)&v8,  22);
      unint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T &CMVector<double, 15>::operator[](const size_t) [T = double, N = 15]",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return a1 + 8 * a2;
}

uint64_t sub_1010067A8(uint64_t a1, uint64_t a2)
{
  if (sub_10100D464(a1, 0LL) == 0.0)
  {
    BOOL v4 = 0LL;
    unint64_t v5 = 0LL;
LABEL_7:
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    int v8 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134217984;
      unint64_t v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "D[%zu] == 0, semidefinite matrix!", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v27 = 134217984;
      unint64_t v28 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "D[%zu] == 0, semidefinite matrix!",  (size_t)&v27);
      int v26 = (uint8_t *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CMFactoredMatrix<double, 15>::solve(CMVector<T, N> &) const [T = double, N = 15]",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }
  }

  else
  {
    unint64_t v6 = -1LL;
    while (v6 != 13)
    {
      double v7 = sub_10100D464(a1, v6 + 2);
      ++v6;
      if (v7 == 0.0)
      {
        BOOL v4 = v6 > 0xD;
        unint64_t v5 = v6 + 1;
        goto LABEL_7;
      }
    }

    uint64_t v10 = a1 + 120;
    unint64_t v11 = 14LL;
    uint64_t v12 = 13LL;
    do
    {
      unint64_t v13 = v11;
      unint64_t v11 = v12;
      do
      {
        double v14 = *(double *)sub_1010065D0(a2, v13);
        double v15 = sub_10100D63C(a1 + 120, v11, v13);
        double v16 = (double *)sub_1010065D0(a2, v11);
        double *v16 = *v16 - v14 * v15;
        ++v13;
      }

      while (v13 != 15);
      uint64_t v12 = v11 - 1;
    }

    while (v11);
    do
    {
      double v17 = sub_10100D464(a1, v11);
      double v18 = (double *)sub_1010065D0(a2, v11);
      *double v18 = *v18 / v17;
      ++v11;
    }

    while (v11 != 15);
    unint64_t v19 = 0LL;
    do
    {
      unint64_t v20 = v19++;
      if (v20 <= 0xD)
      {
        unint64_t v21 = v19;
        do
        {
          double v22 = *(double *)sub_1010065D0(a2, v20);
          double v23 = sub_10100D63C(v10, v20, v21);
          BOOL v24 = (double *)sub_1010065D0(a2, v21);
          double *v24 = *v24 - v22 * v23;
          ++v21;
        }

        while (v21 != 15);
      }
    }

    while (v19 != 15);
    return 1LL;
  }

  return v4;
}

void sub_101006D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10049108C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1010073B4(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    double Current = CFAbsoluteTimeGetCurrent();
    id v7 = [*(id *)(*(void *)(a1 + 32) + 16) latestAbsoluteAltitude];
    if (v7)
    {
      int v8 = v7;
      [v7 timestamp];
      if (v9 != 1.79769313e308)
      {
        [v8 altitude];
        double v3 = v10;
        [v8 accuracy];
        double v2 = v11;
      }
    }

    [*(id *)(*(void *)(a1 + 32) + 32) removeAllObjects];
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    id v12 = [a2 countByEnumeratingWithState:&v64 objects:v77 count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v65;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v65 != v13) {
            objc_enumerationMutation(a2);
          }
          double v15 = *(void **)(*((void *)&v64 + 1) + 8LL * (void)i);
          [v15 meanSeaLevelPressure];
          if (v16 >= 80000.0 && v16 <= 115000.0) {
            [*(id *)(*(void *)(a1 + 32) + 32) addObject:v15];
          }
        }

        id v12 = [a2 countByEnumeratingWithState:&v64 objects:v77 count:16];
      }

      while (v12);
    }

    [*(id *)(*(void *)(a1 + 32) + 40) removeAllObjects];
    [*(id *)(a1 + 32) clearRecentMeanSeaLevelPressureArrayInPlist];
    *(void *)(*(void *)(a1 + 32) + 88LL) = 0x7FEFFFFFFFFFFFFFLL;
    double v17 = *(void **)(a1 + 32);
    uint64_t v18 = v17[4];
    sub_1010DDBC0(__p, "finish refreshing mean sea level pressure:");
    [v17 printMeanSeaLevelPressureArray:v18 withPrePhrase:__p];
    if (v63 < 0) {
      operator delete(__p[0]);
    }
    [*(id *)(a1 + 32) getAndSendCurrentEstimateMeanSeaLevelPressureFrom:0];
    unsigned int v19 = [*(id *)(a1 + 32) getLastPressureSample:&v68];
    if (v19)
    {
      double v20 = v68;
      [*(id *)(*(void *)(a1 + 32) + 56) meanSeaLevelPressure];
      float v21 = v20;
      float v23 = v22;
      float v24 = sub_100FADFE8(v21, v23);
      double v25 = v68;
      [*(id *)(*(void *)(a1 + 32) + 56) meanSeaLevelPressure];
      float v26 = v25;
      float v28 = v27;
      sub_100FAE09C(v26, v28);
      LODWORD(v25) = v29;
      [*(id *)(*(void *)(a1 + 32) + 56) uncertainty];
      double v31 = v30 * *(float *)&v25;
      if (v3 == 0.0
        || (uint64_t v32 = *(void *)(a1 + 32), v33 = *(double *)(v32 + 216), v33 == 1.79769313e308)
        || (double v34 = *(double *)(v32 + 112), v34 == 1.79769313e308)
        || (*(_DWORD *)(v32 + 252) & 0x80000000) != 0
        || *(double *)(v32 + 312) == 1.79769313e308)
      {
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_101894348);
        }
        int v39 = (os_log_s *)qword_1019346A8;
        if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v40 = *(void *)(a1 + 32);
          uint64_t v41 = *(void *)(v40 + 216);
          uint64_t v42 = *(void *)(v40 + 112);
          int v43 = *(_DWORD *)(v40 + 252);
          uint64_t v44 = *(void *)(v40 + 312);
          *(_DWORD *)__int128 buf = 134218752;
          uint64_t v79 = v41;
          __int16 v80 = 2048;
          uint64_t v81 = v42;
          __int16 v82 = 1024;
          int v83 = v43;
          __int16 v84 = 2048;
          uint64_t v85 = v44;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "fail to send mslp refresh event to CA,pressureAtRefresh,%f,lastSuccessfulRefreshTimestamp,%f,numberOfRebaseB twRefresh,%d,maxPressure,%f",  buf,  0x26u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346A0 != -1) {
            dispatch_once(&qword_1019346A0, &stru_101894348);
          }
          uint64_t v53 = *(void *)(a1 + 32);
          uint64_t v54 = *(void *)(v53 + 216);
          uint64_t v55 = *(void *)(v53 + 112);
          int v56 = *(_DWORD *)(v53 + 252);
          uint64_t v57 = *(void *)(v53 + 312);
          int v69 = 134218752;
          uint64_t v70 = v54;
          __int16 v71 = 2048;
          uint64_t v72 = v55;
          __int16 v73 = 1024;
          int v74 = v56;
          __int16 v75 = 2048;
          uint64_t v76 = v57;
          LODWORD(v60) = 38;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "fail to send mslp refresh event to CA,pressureAtRefresh,%f,lastSuccessfulRefreshTimestamp,%f,numberOfRebaseB twRefresh,%d,maxPressure,%f",  COERCE_DOUBLE(&v69),  v60,  v61,  *(double *)__p);
          int v59 = (uint8_t *)v58;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke",  "%s\n",  v58);
          if (v59 != buf) {
            free(v59);
          }
        }
      }

      else
      {
        objc_msgSend( (id)v32,  "sentRefreshMslpAnalyticsWithAltitudeCorrection:uncertaintyBeforeCurrentRefresh:uncertaintyAfterCurrentRefresh: refreshDuration:xpcWaitingTime:timeDiffBtwRefresh:pressureDelta:",  v24 - v3,  v2,  v31,  (*(double *)(a1 + 40) - *(double *)(a1 + 48)) / 60.0,  (Current - *(double *)(v32 + 264)) / 60.0,  (Current - v34) / 60.0,  vabdd_f64(v68, v33));
      }
    }

    else
    {
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_101894348);
      }
      BOOL v38 = (os_log_s *)qword_1019346A8;
      if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "current pressure is not available.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_101894348);
        }
        LOWORD(v69) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "current pressure is not available.",  &v69,  2);
        int v52 = (uint8_t *)v51;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke",  "%s\n",  v51);
        if (v52 != buf) {
          free(v52);
        }
      }

      double v31 = 1.79769313e308;
    }

    *(void *)(*(void *)(a1 + 32) + 20sub_100272D04(v1, 0LL) = *(void *)(*(void *)(a1 + 32) + 280LL);
    *(void *)(*(void *)(a1 + 32) + 208LL) = *(void *)(*(void *)(a1 + 32) + 288LL);
    *(_BYTE *)(*(void *)(a1 + 32) + 249LL) = 0;
    *(_DWORD *)(*(void *)(a1 + 32) + 252LL) = 0;
    *(_DWORD *)(*(void *)(a1 + 32) + 256LL) = 0;
    *(_DWORD *)(*(void *)(a1 + 32) + 224LL) = 0;
    *(void *)(*(void *)(a1 + 32) + 304LL) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(*(void *)(a1 + 32) + 312LL) = 0x7FEFFFFFFFFFFFFFLL;
    double v45 = v68;
    if (!v19) {
      double v45 = 1.79769313e308;
    }
    *(double *)(*(void *)(a1 + 32) + 216LL) = v45;
    *(double *)(*(void *)(a1 + 32) + 192LL) = v31;
    *(double *)(*(void *)(a1 + 32) + 112LL) = Current;
    *(double *)(*(void *)(a1 + 32) + 264LL) = Current;
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_101894348);
    }
    int v46 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = *(void *)(*(void *)(a1 + 32) + 264LL);
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v79 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "last refresh timestamp update to,lastRefreshTimestamp,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_101894348);
      }
      uint64_t v48 = *(void *)(*(void *)(a1 + 32) + 264LL);
      int v69 = 134217984;
      uint64_t v70 = v48;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "last refresh timestamp update to,lastRefreshTimestamp,%f",  COERCE_DOUBLE(&v69));
      int v50 = (uint8_t *)v49;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke",  "%s\n",  v49);
      if (v50 != buf) {
        free(v50);
      }
    }

    [*(id *)(a1 + 32) writeInitialHistoricalMeanSeaLevelPressureToMslwithTimestamp:Current];
    [*(id *)(a1 + 32) saveMeanSeaLevelPressureArrayToPlist];
  }

  else
  {
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_101894348);
    }
    int v35 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "finish refreshing mean sea level pressure array with zero element.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_101894348);
      }
      LOWORD(v69) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  2LL,  "finish refreshing mean sea level pressure array with zero element.",  &v69,  2);
      int v37 = (uint8_t *)v36;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke",  "%s\n",  v36);
      if (v37 != buf) {
        free(v37);
      }
    }
  }

void sub_101007CBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_1010083B8(uint64_t a1)
{
  v3[0] = @"altitudeCorrection";
  v4[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v3[1] = @"minMaxPressureDelta";
  v4[1] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 312LL) - *(double *)(*(void *)(a1 + 32) + 304LL));
  char v3[2] = @"pressureDelta";
  v4[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v3[3] = @"numberOfRebase";
  v4[3] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 252LL));
  void v3[4] = @"numberOfTrackEnded";
  void v4[4] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 256LL));
  v3[5] = @"numberOfWeatherUpdate";
  v4[5] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 224LL));
  v3[6] = @"refreshDuration";
  v4[6] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  v3[7] = @"timeDiffBtwRefresh";
  v4[7] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 64));
  _WORD v3[8] = @"travelingDistance";
  v4[8] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 72));
  v3[9] = @"uncertaintyAfterFormerRefresh";
  v4[9] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 192LL));
  v3[10] = @"uncertaintyAfterLatterRefresh";
  v4[10] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 80));
  v3[11] = @"uncertaintyBeforeLatterRefresh";
  v4[11] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 88));
  v3[12] = @"xpcWaitingTime";
  v4[12] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 96));
  v3[13] = @"firstRefreshAfterVisit";
  v4[13] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 249LL));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  14LL);
}

void sub_101008A28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101009994( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_101009F9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  sub_101127D00((PB::Base *)&a22);
  _Unwind_Resume(a1);
}

void sub_10100B05C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10100B300( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10100C498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10100C5BC(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_10100C5EC(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_10100C618(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_1018943B8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  _DWORD v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_10100C74C;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_10100C760;
  v12[3] = &unk_10182EFF0;
  _DWORD v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_10100C724(_Unwind_Exception *a1)
{
}

uint64_t sub_10100C74C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_10100C760(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_10100C77C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10100CA30(a1);
  operator delete(v1);
}

id sub_10100C790(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x10) {
    size_t v8 = 16LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101894388);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315906;
      unint64_t v31 = 0x80000001013BEDFFLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v32 = 2048;
      uint64_t v33 = 16LL;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      __int16 v36 = 1024;
      int v37 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101894388);
      }
      int v22 = 136315906;
      unint64_t v23 = 0x80000001013BEDFFLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v24 = 2048;
      uint64_t v25 = 16LL;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v22,  38,  v17,  LODWORD(v18[0]));
      double v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMMeanSeaLevelPressure>::dispatchDat a(int, const void *, size_t) [T = CLBarometerCalibration_Types::CMMeanSeaLevelPressure]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  uint64_t v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_10100CA88;
  v18[3] = &unk_101861860;
  v18[4] = v12;
  v18[5] = v11;
  __int128 v19 = __dst;
  uint64_t v20 = v10;
  return [v13 async:v18];
}

uint64_t sub_10100CA30(uint64_t a1)
{
  *(void *)a1 = off_1018943B8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_10100CA88(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 64));
  }
  return result;
}

void sub_10100CACC(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_10100CAF8(uint64_t a1)
{
  BOOL v2 = 0;
  unint64_t v3 = 0LL;
LABEL_2:
  unint64_t v4 = v3++;
  unint64_t v5 = v3;
  while (1)
  {
    double v6 = sub_10100CBD8(a1, v4, v5);
    double v7 = v6 - sub_10100CBD8(a1, v5, v4);
    double v8 = sub_10100CBD8(a1, v4, v5);
    double v9 = v8 - sub_10100CBD8(a1, v5, v4);
    if (v7 < 0.0) {
      double v9 = -v9;
    }
    if (v9 > 1.00000002e-16) {
      return v2;
    }
    if (++v5 == 15)
    {
      BOOL v2 = v4 > 0xC;
      if (v3 != 14) {
        goto LABEL_2;
      }
      return 1;
    }
  }

double sub_10100CBD8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 0xF)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    double v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v19 = a2;
      __int16 v20 = 2048;
      uint64_t v21 = 15LL;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 7 0,invalid row %zu > %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v14 = 134218240;
      unint64_t v15 = a2;
      __int16 v16 = 2048;
      uint64_t v17 = 15LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 7 0,invalid row %zu > %zu.",  (size_t)&v14,  22);
      double v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T CMMatrix<double, 15>::operator()(size_t, size_t) const [T = double, M = 15, N = 15]",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  if (a3 >= 0xF)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    uint64_t v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v19 = a3;
      __int16 v20 = 2048;
      uint64_t v21 = 15LL;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 7 1,invalid col %zu > %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v14 = 134218240;
      unint64_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = 15LL;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 7 1,invalid col %zu > %zu.",  (size_t)&v14,  v13);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T CMMatrix<double, 15>::operator()(size_t, size_t) const [T = double, M = 15, N = 15]",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  return *(double *)(a1 + 8 * (a2 - a3 + 16 * a3));
}

uint64_t sub_10100CF34(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    double v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v19 = a3;
      __int16 v20 = 2048;
      uint64_t v21 = 15LL;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h , line 237,invalid col %zu > %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v14 = 134218240;
      unint64_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = 15LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h , line 237,invalid col %zu > %zu.",  (size_t)&v14,  22);
      double v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T &CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 15]",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  if (a3 <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    uint64_t v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v19 = a3;
      __int16 v20 = 2048;
      uint64_t v21 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix .h, line 238,invalid element %zu <= %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v14 = 134218240;
      unint64_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = a2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix .h, line 238,invalid element %zu <= %zu.",  (size_t)&v14,  v13);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T &CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 15]",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  return a1 + 8 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_10100D28C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    unint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      uint64_t v15 = 15LL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h , line 191,invalid row %zu > %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v8 = 134218240;
      unint64_t v9 = a2;
      __int16 v10 = 2048;
      uint64_t v11 = 15LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h , line 191,invalid row %zu > %zu.",  (size_t)&v8,  22);
      double v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T &CMFactoredMatrix<double, 15>::DiagonalMatrix::operator()(size_t) [T = double, N = 15]",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return a1 + 8 * a2;
}

double sub_10100D464(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    unint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      uint64_t v15 = 15LL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h , line 186,invalid row %zu > %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v8 = 134218240;
      unint64_t v9 = a2;
      __int16 v10 = 2048;
      uint64_t v11 = 15LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h , line 186,invalid row %zu > %zu.",  (size_t)&v8,  22);
      double v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T CMFactoredMatrix<double, 15>::DiagonalMatrix::operator()(size_t) const [T = double, N = 15]",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return *(double *)(a1 + 8 * a2);
}

double sub_10100D63C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    double v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v19 = a3;
      __int16 v20 = 2048;
      uint64_t v21 = 15LL;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h , line 231,invalid col %zu > %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v14 = 134218240;
      unint64_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = 15LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h , line 231,invalid col %zu > %zu.",  (size_t)&v14,  22);
      unint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = double, N = 15]",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  if (a3 <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018943F8);
    }
    __int16 v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v19 = a3;
      __int16 v20 = 2048;
      uint64_t v21 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix .h, line 232,invalid element %zu <= %zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018943F8);
      }
      int v14 = 134218240;
      unint64_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = a2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix .h, line 232,invalid element %zu <= %zu.",  (size_t)&v14,  v13);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = double, N = 15]",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  return *(double *)(a1 + 8 * (a2 + (((a3 - 1) * a3) >> 1)));
}

uint64_t sub_10100D994()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199FEA8, (void *)&_mh_execute_header);
}

const char *sub_10100D9D8(unsigned int a1)
{
  if (a1 < 0x30) {
    return off_101894418[a1];
  }
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101894598);
  }
  BOOL v2 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    unsigned int v7 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "toString,Invalid CLLocationProvider notification,%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101894598);
    }
    v5[0] = 67109120;
    v5[1] = a1;
    unint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "toString,Invalid CLLocationProvider notification,%d",  v5);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "const char *CLLocationProvider_Type::toString(CLLocationProvider_Type::Notification)",  "%s\n",  v4);
  }

  return "Unknown";
}

BOOL sub_10100DBA0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) == 3 && *(_DWORD *)(a1 + 132) == 2;
}

BOOL sub_10100DBB8(uint64_t a1, uint64_t a2)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018945B8);
  }
  unint64_t v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 4);
    uint64_t v6 = *(void *)(a1 + 12);
    uint64_t v7 = *(void *)(a1 + 20);
    int v8 = *(_DWORD *)(a1 + 96);
    int v9 = *(_DWORD *)(a1 + 132);
    *(_DWORD *)__int128 buf = 134219008;
    uint64_t v42 = v5;
    __int16 v43 = 2048;
    uint64_t v44 = v6;
    __int16 v45 = 2048;
    uint64_t v46 = v7;
    __int16 v47 = 1024;
    int v48 = v8;
    __int16 v49 = 1024;
    int v50 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "ALTERED: original location: %.8f, %.8f, %.2f, %d, %d",  buf,  0x2Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018945B8);
    }
    uint64_t v18 = *(void *)(a1 + 4);
    uint64_t v19 = *(void *)(a1 + 12);
    uint64_t v20 = *(void *)(a1 + 20);
    int v21 = *(_DWORD *)(a1 + 96);
    int v22 = *(_DWORD *)(a1 + 132);
    int v31 = 134219008;
    uint64_t v32 = v18;
    __int16 v33 = 2048;
    uint64_t v34 = v19;
    __int16 v35 = 2048;
    uint64_t v36 = v20;
    __int16 v37 = 1024;
    int v38 = v21;
    __int16 v39 = 1024;
    int v40 = v22;
    LODWORD(v30) = 44;
    unint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "ALTERED: original location: %.8f, %.8f, %.2f, %d, %d",  COERCE_DOUBLE(&v31),  v30);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLocationProvider_Type::unalterAccessoryLocation(CLClientLocation &, const CLDaemonLocationPrivate &)",  "%s\n",  v23);
  }

  double v10 = *(double *)(a2 + 336);
  if (v10 != -1.0)
  {
    *(_DWORD *)(a1 + 96) = 1;
    *(_DWORD *)(a1 + 132) = 1;
    *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 320);
    *(double *)(a1 + 20) = v10;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018945B8);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 4);
      uint64_t v13 = *(void *)(a1 + 12);
      uint64_t v14 = *(void *)(a1 + 20);
      int v15 = *(_DWORD *)(a1 + 96);
      int v16 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)__int128 buf = 134219008;
      uint64_t v42 = v12;
      __int16 v43 = 2048;
      uint64_t v44 = v13;
      __int16 v45 = 2048;
      uint64_t v46 = v14;
      __int16 v47 = 1024;
      int v48 = v15;
      __int16 v49 = 1024;
      int v50 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "ALTERED:  unaltered location: %.8f, %.8f, %.2f, %d, %d",  buf,  0x2Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018945B8);
      }
      uint64_t v24 = *(void *)(a1 + 4);
      uint64_t v25 = *(void *)(a1 + 12);
      uint64_t v26 = *(void *)(a1 + 20);
      int v27 = *(_DWORD *)(a1 + 96);
      int v28 = *(_DWORD *)(a1 + 132);
      int v31 = 134219008;
      uint64_t v32 = v24;
      __int16 v33 = 2048;
      uint64_t v34 = v25;
      __int16 v35 = 2048;
      uint64_t v36 = v26;
      __int16 v37 = 1024;
      int v38 = v27;
      __int16 v39 = 1024;
      int v40 = v28;
      LODWORD(v30) = 44;
      int v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "ALTERED:  unaltered location: %.8f, %.8f, %.2f, %d, %d",  COERCE_DOUBLE(&v31),  v30);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLocationProvider_Type::unalterAccessoryLocation(CLClientLocation &, const CLDaemonLocationPrivate &)",  "%s\n",  v29);
    }
  }

  return v10 != -1.0;
}

uint64_t sub_10100DFD4(UInt8 *bytes, uint64_t a2, uint64_t a3)
{
  BOOL v6 = 0;
  unsigned int v35 = 0;
  UInt8 v34 = 1;
  if (!*(_BYTE *)a3) {
    BOOL v6 = *((_DWORD *)bytes + 24) == 3 && *((_DWORD *)bytes + 33) == 2;
  }
  uint64_t v8 = *((void *)bytes + 100);
  if (v8 && (*(double *)(sub_1000F0F50(v8) + 76) < *(double *)(a3 + 8) ? (int v9 = 1) : (int v9 = v6), v9 != 1))
  {
    if (*(_BYTE *)(a3 + 3)) {
      int v20 = 1;
    }
    else {
      int v20 = sub_100CBED60(*((int **)bytes + 100));
    }
    unsigned int v35 = v20;
    uint64_t v24 = (const UInt8 *)sub_1000F0F50(*((void *)bytes + 100));
    CFDataRef v18 = CFDataCreate(kCFAllocatorDefault, v24, 156LL * v20);
    UInt8 v34 = *(_BYTE *)(sub_1000F0F58(*((void *)bytes + 100)) + 52);
    if (!*(_BYTE *)(a3 + 2))
    {
      CFDataRef v19 = 0LL;
      if (!v18) {
        goto LABEL_49;
      }
      goto LABEL_38;
    }

    uint64_t v25 = (const UInt8 *)sub_1000F0F58(*((void *)bytes + 100));
    CFDataRef v19 = CFDataCreate(kCFAllocatorDefault, v25, 560LL * v20);
  }

  else
  {
    __int128 v10 = *((_OWORD *)bytes + 7);
    v32[6] = *((_OWORD *)bytes + 6);
    v32[7] = v10;
    v33[0] = *((_OWORD *)bytes + 8);
    *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)(bytes + 140);
    __int128 v11 = *((_OWORD *)bytes + 3);
    uint64_t v32[2] = *((_OWORD *)bytes + 2);
    v32[3] = v11;
    __int128 v12 = *((_OWORD *)bytes + 5);
    _DWORD v32[4] = *((_OWORD *)bytes + 4);
    v32[5] = v12;
    __int128 v13 = *((_OWORD *)bytes + 1);
    v32[0] = *(_OWORD *)bytes;
    v32[1] = v13;
    if (v6)
    {
      uint64_t result = sub_10100DBB8((uint64_t)v32, (uint64_t)(bytes + 160));
      if (!(_DWORD)result) {
        return result;
      }
      int v15 = kCFAllocatorDefault;
      int v16 = (const UInt8 *)v32;
      uint64_t v17 = kCFAllocatorDefault;
    }

    else
    {
      int v15 = kCFAllocatorDefault;
      uint64_t v17 = kCFAllocatorDefault;
      int v16 = bytes;
    }

    CFDataRef v18 = CFDataCreate(v17, v16, 156LL);
    unsigned int v35 = 1;
    UInt8 v34 = bytes[212];
    if (*(_BYTE *)(a3 + 2))
    {
      sub_10086A284((uint64_t)(bytes + 160), bytesa);
      CFDataRef v19 = CFDataCreate(v15, bytesa, 560LL);
    }

    else
    {
      CFDataRef v19 = 0LL;
    }

    uint64_t v21 = *((void *)bytes + 165);
    if (v21 && (sub_1002AB370(a2, "CoarseMetaData", v21) & 1) == 0)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018945B8);
      }
      int v22 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)bytesa = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "Failed to convert Coarse MetaData to nvp",  bytesa,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(bytesa, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018945B8);
        }
        v31[0] = 0;
        unint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  bytesa,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Failed to convert Coarse MetaData to nvp",  v31,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "int CLLocationProvider_Type::locationDataToNvpWithOptions(const CLLocationProvider_Type::NotificationData &, C LNameValuePair &, const CLLocationProvider_Type::LocationDataSerializationOptions &)",  "%s\n",  v23);
        if (v23 != (char *)bytesa)
        {
          free(v23);
          if (!v18) {
            goto LABEL_49;
          }
LABEL_38:
          if (!sub_1002AB370(a2, "Locations", (uint64_t)v18)
            || !sub_1002AC220(a2, "LocationCount", &v35)
            || !sub_1002AB3FC(a2, "ForceMapMatching", (_BYTE *)(a3 + 1))
            || !sub_1002AB3FC(a2, "IsFitnessMatch", &v34))
          {
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_1018945B8);
            }
            uint64_t v26 = (os_log_s *)qword_101934A78;
            if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)bytesa = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "Failed to convert location to nvp",  bytesa,  2u);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(bytesa, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_1018945B8);
              }
              LOWORD(v32[0]) = 0;
              LODWORD(v30) = 2;
              int v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  bytesa,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Failed to convert location to nvp",  v32,  v30);
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "int CLLocationProvider_Type::locationDataToNvpWithOptions(const CLLocationProvider_Type::NotificationDat a &, CLNameValuePair &, const CLLocationProvider_Type::LocationDataSerializationOptions &)",  "%s\n",  v28);
            }

            unsigned int v35 = 0;
          }

          CFRelease(v18);
          goto LABEL_49;
        }
      }
    }
  }

  if (v18) {
    goto LABEL_38;
  }
LABEL_49:
  if (v19)
  {
    if ((sub_1002AB370(a2, "LocationsPrivate", (uint64_t)v19) & 1) == 0)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018945B8);
      }
      int v27 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)bytesa = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "Failed to convert location private to nvp",  bytesa,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(bytesa, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018945B8);
        }
        LOWORD(v32[0]) = 0;
        LODWORD(v30) = 2;
        int v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  bytesa,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Failed to convert location private to nvp",  v32,  v30);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "int CLLocationProvider_Type::locationDataToNvpWithOptions(const CLLocationProvider_Type::NotificationData &, C LNameValuePair &, const CLLocationProvider_Type::LocationDataSerializationOptions &)",  "%s\n",  v29);
      }
    }

    CFRelease(v19);
  }

  return v35;
}

void sub_10100E62C(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10100E658(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10100F520( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location, id a24)
{
}

void sub_10100F574(id a1)
{
  qword_10199FEC0 =  +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___CLEEDHelperXpcInterface);
  objc_opt_class(&OBJC_CLASS___CLEEDRequest);
  uint64_t v2 = v1;
  objc_opt_class(&OBJC_CLASS___CLEEDUploadRequest);
  uint64_t v4 = v3;
  objc_opt_class(&OBJC_CLASS___CLEEDStreamingRequest);
  uint64_t v6 = v5;
  objc_opt_class(&OBJC_CLASS___CLEEDMediaItem);
  uint64_t v8 = v7;
  objc_opt_class(&OBJC_CLASS___CLEEDMitigation);
  uint64_t v10 = v9;
  objc_opt_class(&OBJC_CLASS___NSSet);
  uint64_t v12 = v11;
  *(void *)&double v13 = objc_opt_class(&OBJC_CLASS___NSArray).n128_u64[0];
  int v15 = +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v2, v13, v4, v6, v8, v10, v12, v14, 0LL);
  [(id)qword_10199FEC0 setClasses:v15 forSelector:"fetchAllPendingRequestsWithCompletion:" argumentIndex:0 ofReply:1];
  [(id)qword_10199FEC0 setClasses:v15 forSelector:"mediaUploadList:forRequestID:completion:" argumentIndex:0 ofReply:0];
  [(id)qword_10199FEC0 setClasses:v15 forSelector:"fetchMitigationsWithCompletion:" argumentIndex:0 ofReply:1];
  qword_10199FEC8 =  +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___CLEEDRequestDelegate);
  [(id)qword_10199FEC8 setClasses:v15 forSelector:"notifyMitigationNeeded:" argumentIndex:0 ofReply:0];
}

void sub_10100F6E8(uint64_t a1)
{
  Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  id v3 = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    id v4 = v3;
    if (v3)
    {
      [Weak[10] removeObject:v3];
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101894710);
      }
      uint64_t v5 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = Weak[10];
        *(_DWORD *)__int128 buf = 136446722;
        uint64_t v17 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke_2";
        __int16 v18 = 2114;
        id v19 = v4;
        __int16 v20 = 2114;
        id v21 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#EED2FWK,%{public}s, Connection[%{public}@] invalidated, active connections:%{public}@",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_101894710);
        }
        id v7 = Weak[10];
        int v10 = 136446722;
        uint64_t v11 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke";
        __int16 v12 = 2114;
        id v13 = v4;
        __int16 v14 = 2114;
        id v15 = v7;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2FWK,%{public}s, Connection[%{public}@] invalidated, active connections:%{public}@",  &v10,  32);
        uint64_t v9 = (uint8_t *)v8;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke",  "%s\n",  v8);
        if (v9 != buf) {
          free(v9);
        }
      }
    }
  }

id sub_10100F8F8(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  uint64_t v2 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136446466;
    __int16 v12 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke_2";
    __int16 v13 = 1026;
    unsigned int v14 = [Weak processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "#EED2FWK,%{public}s, Connection to client[%{public}d] interrupted",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    uint64_t v4 = qword_101934898;
    int v7 = 136446466;
    uint64_t v8 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke";
    __int16 v9 = 1026;
    unsigned int v10 = [Weak processIdentifier];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  16LL,  "#EED2FWK,%{public}s, Connection to client[%{public}d] interrupted",  &v7,  18);
    id v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  return [Weak invalidate];
}

uint64_t sub_10100FF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  id v6 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136446722;
    uint64_t v17 = "-[CLEEDHelperService fetchAllPendingRequestsWithCompletion:]_block_invoke";
    __int16 v18 = 2114;
    uint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#EED2FWK,%{public}s, received pending requests from EED, set:%{public}@, error:%{public}@",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    int v10 = 136446722;
    uint64_t v11 = "-[CLEEDHelperService fetchAllPendingRequestsWithCompletion:]_block_invoke";
    __int16 v12 = 2114;
    uint64_t v13 = a2;
    __int16 v14 = 2114;
    uint64_t v15 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  2LL,  "#EED2FWK,%{public}s, received pending requests from EED, set:%{public}@, error:%{public}@",  &v10,  32);
    __int16 v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLEEDHelperService fetchAllPendingRequestsWithCompletion:]_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo"),  "queue"));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_101010460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  id v6 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136446723;
    uint64_t v17 = "-[CLEEDHelperService fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke";
    __int16 v18 = 2113;
    uint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#EED2FWK,%{public}s, received current mediaupload request from EED, request:%{private}@, error:%{public}@",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    int v10 = 136446723;
    uint64_t v11 = "-[CLEEDHelperService fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke";
    __int16 v12 = 2113;
    uint64_t v13 = a2;
    __int16 v14 = 2114;
    uint64_t v15 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  2LL,  "#EED2FWK,%{public}s, received current mediaupload request from EED, request:%{private}@, error:%{public}@",  &v10,  32);
    __int16 v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLEEDHelperService fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo"),  "queue"));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_101010934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  id v6 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136446722;
    uint64_t v17 = "-[CLEEDHelperService fetchCurrentStreamingRequestWithCompletion:]_block_invoke";
    __int16 v18 = 2114;
    uint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#EED2FWK,%{public}s, received current streaming request from EED, request:%{public}@, error:%{public}@",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    int v10 = 136446722;
    uint64_t v11 = "-[CLEEDHelperService fetchCurrentStreamingRequestWithCompletion:]_block_invoke";
    __int16 v12 = 2114;
    uint64_t v13 = a2;
    __int16 v14 = 2114;
    uint64_t v15 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  2LL,  "#EED2FWK,%{public}s, received current streaming request from EED, request:%{public}@, error:%{public}@",  &v10,  32);
    __int16 v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLEEDHelperService fetchCurrentStreamingRequestWithCompletion:]_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo"),  "queue"));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_101010E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  id v6 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136446722;
    uint64_t v17 = "-[CLEEDHelperService fetchMitigationsWithCompletion:]_block_invoke";
    __int16 v18 = 2114;
    uint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#EED2FWK,%{public}s, received mitigations from EED, mitigation:%{public}@, error:%{public}@",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    int v10 = 136446722;
    uint64_t v11 = "-[CLEEDHelperService fetchMitigationsWithCompletion:]_block_invoke";
    __int16 v12 = 2114;
    uint64_t v13 = a2;
    __int16 v14 = 2114;
    uint64_t v15 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  2LL,  "#EED2FWK,%{public}s, received mitigations from EED, mitigation:%{public}@, error:%{public}@",  &v10,  32);
    __int16 v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLEEDHelperService fetchMitigationsWithCompletion:]_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo"),  "queue"));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_101011464(uint64_t a1, uint64_t a2)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  uint64_t v4 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v13 = "-[CLEEDHelperService mediaUploadList:forRequestID:completion:]_block_invoke";
    __int16 v14 = 2114;
    uint64_t v15 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#EED2FWK,%{public}s, received media upload reply from EED, error:%{public}@",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    int v8 = 136446466;
    __int16 v9 = "-[CLEEDHelperService mediaUploadList:forRequestID:completion:]_block_invoke";
    __int16 v10 = 2114;
    uint64_t v11 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  2LL,  "#EED2FWK,%{public}s, received media upload reply from EED, error:%{public}@",  &v8,  22);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLEEDHelperService mediaUploadList:forRequestID:completion:]_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo"),  "queue"));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_101011A88(uint64_t a1, uint64_t a2)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  uint64_t v4 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v13 = "-[CLEEDHelperService streamingSessionEndedForRequestID:completion:]_block_invoke";
    __int16 v14 = 2114;
    uint64_t v15 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#EED2FWK,%{public}s, received streaming session ended reply from EED, error:%{public}@",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    int v8 = 136446466;
    __int16 v9 = "-[CLEEDHelperService streamingSessionEndedForRequestID:completion:]_block_invoke";
    __int16 v10 = 2114;
    uint64_t v11 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  2LL,  "#EED2FWK,%{public}s, received streaming session ended reply from EED, error:%{public}@",  &v8,  22);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLEEDHelperService streamingSessionEndedForRequestID:completion:]_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo"),  "queue"));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1010120D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  id v6 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136446722;
    uint64_t v17 = "-[CLEEDHelperService handleResponse:forRequest:completion:]_block_invoke";
    __int16 v18 = 2114;
    uint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#EED2FWK,%{public}s, received handleResponse reply from EED, updatedRequest:%{public}@, error:%{public}@",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    int v10 = 136446722;
    uint64_t v11 = "-[CLEEDHelperService handleResponse:forRequest:completion:]_block_invoke";
    __int16 v12 = 2114;
    uint64_t v13 = a2;
    __int16 v14 = 2114;
    uint64_t v15 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  2LL,  "#EED2FWK,%{public}s, received handleResponse reply from EED, updatedRequest:%{public}@, error:%{public}@",  &v10,  32);
    __int16 v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLEEDHelperService handleResponse:forRequest:completion:]_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo"),  "queue"));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_101012898(uint64_t a1, void *a2)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  uint64_t v4 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    unsigned int v5 = [*(id *)(a1 + 32) processIdentifier];
    *(_DWORD *)__int128 buf = 136446978;
    uint64_t v19 = "-[CLEEDHelperService notifyNewRequestAvailable]_block_invoke";
    __int16 v20 = 1026;
    unsigned int v21 = v5;
    __int16 v22 = 2114;
    id v23 = [a2 localizedDescription];
    __int16 v24 = 2114;
    id v25 = [a2 localizedFailureReason];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    uint64_t v6 = qword_101934898;
    unsigned int v7 = [*(id *)(a1 + 32) processIdentifier];
    int v10 = 136446978;
    uint64_t v11 = "-[CLEEDHelperService notifyNewRequestAvailable]_block_invoke";
    __int16 v12 = 1026;
    unsigned int v13 = v7;
    __int16 v14 = 2114;
    id v15 = [a2 localizedDescription];
    __int16 v16 = 2114;
    id v17 = [a2 localizedFailureReason];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  16LL,  "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n",  &v10,  38);
    __int16 v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLEEDHelperService notifyNewRequestAvailable]_block_invoke", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

void sub_1010130DC(uint64_t a1, void *a2)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101894710);
  }
  uint64_t v4 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    unsigned int v5 = [*(id *)(a1 + 32) processIdentifier];
    *(_DWORD *)__int128 buf = 136446978;
    uint64_t v19 = "-[CLEEDHelperService notifyMitigationNeeded:]_block_invoke";
    __int16 v20 = 1026;
    unsigned int v21 = v5;
    __int16 v22 = 2114;
    id v23 = [a2 localizedDescription];
    __int16 v24 = 2114;
    id v25 = [a2 localizedFailureReason];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101894710);
    }
    uint64_t v6 = qword_101934898;
    unsigned int v7 = [*(id *)(a1 + 32) processIdentifier];
    int v10 = 136446978;
    uint64_t v11 = "-[CLEEDHelperService notifyMitigationNeeded:]_block_invoke";
    __int16 v12 = 1026;
    unsigned int v13 = v7;
    __int16 v14 = 2114;
    id v15 = [a2 localizedDescription];
    __int16 v16 = 2114;
    id v17 = [a2 localizedFailureReason];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  16LL,  "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n",  &v10,  38);
    __int16 v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLEEDHelperService notifyMitigationNeeded:]_block_invoke", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

void sub_101013320(id a1)
{
  qword_101934898 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_10101375C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_59;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_61;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_61:
        uint64_t v36 = 24LL;
        goto LABEL_78;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_65;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_65:
        uint64_t v36 = 28LL;
        goto LABEL_78;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0LL;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1LL || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v26 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                uint64_t v24 = 0LL;
                goto LABEL_69;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v24 = 0LL;
        }
LABEL_69:
        *(void *)(a1 + 8) = v24;
        goto LABEL_79;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 40) |= 0x10u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1LL || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v30 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v14 |= (unint64_t)(v30 & 0x7F) << v27;
            if (v30 < 0)
            {
              v27 += 7;
              BOOL v9 = v28++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_73;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_73:
        uint64_t v36 = 36LL;
        goto LABEL_78;
      case 5u:
        int v31 = objc_alloc_init(&OBJC_CLASS___ALSLocation);

        *(void *)(a1 + 16) = v31;
        if (PBReaderPlaceMark(a2, v37) && (sub_100B87820((uint64_t)v31, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v37);
LABEL_79:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 6u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 40) |= 8u;
        while (2)
        {
          unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 == -1LL || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v35 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
            v14 |= (unint64_t)(v35 & 0x7F) << v32;
            if (v35 < 0)
            {
              v32 += 7;
              BOOL v9 = v33++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_77;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_77:
        uint64_t v36 = 32LL;
LABEL_78:
        *(_DWORD *)(a1 + v36) = v14;
        goto LABEL_79;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_79;
    }
  }

uint64_t sub_101014A2C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 48) |= 4u;
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v14 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }

        uint64_t v31 = 20LL;
        goto LABEL_69;
      case 2u:
        *(_BYTE *)(a1 + 48) |= 2u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }

        uint64_t v31 = 16LL;
        goto LABEL_69;
      case 3u:
        *(_BYTE *)(a1 + 48) |= 8u;
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 <= 0xFFFFFFFFFFFFFFFBLL && v18 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }

        uint64_t v31 = 24LL;
        goto LABEL_69;
      case 4u:
        *(_BYTE *)(a1 + 48) |= 0x80u;
        unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }

        uint64_t v31 = 44LL;
        goto LABEL_69;
      case 5u:
        *(_BYTE *)(a1 + 48) |= 0x40u;
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }

        uint64_t v31 = 40LL;
        goto LABEL_69;
      case 6u:
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          int v15 = 0;
        }

        uint64_t v31 = 32LL;
        goto LABEL_69;
      case 7u:
        *(_BYTE *)(a1 + 48) |= 0x10u;
        unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }

        uint64_t v31 = 28LL;
LABEL_69:
        *(_DWORD *)(a1 + v31) = v15;
        continue;
      case 8u:
        *(_BYTE *)(a1 + 48) |= 1u;
        unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7LL && v23 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v24 = 0LL;
        }

        *(void *)(a1 + 8) = v24;
        continue;
      case 9u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0LL;
        *(_BYTE *)(a1 + 48) |= 0x20u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      uint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v30 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
      v27 |= (unint64_t)(v30 & 0x7F) << v25;
      if ((v30 & 0x80) == 0) {
        goto LABEL_52;
      }
      v25 += 7;
      BOOL v10 = v26++ >= 9;
      if (v10)
      {
        LODWORD(v27) = 0;
        goto LABEL_54;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v27) = 0;
    }
LABEL_54:
    *(_DWORD *)(a1 + 36) = v27;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_101015B40(unsigned int a1)
{
  if (a1 > 0xD) {
    return 0LL;
  }
  else {
    return (uint64_t)*(&off_101894750 + (int)a1);
  }
}

void sub_101015B60(void *a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_10199FEE8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10199FEE8))
  {
    __cxa_atexit((void (*)(void *))sub_101015C18, &qword_10199FED8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199FEE8);
  }

  if (qword_10199FEF0 != -1) {
    dispatch_once(&qword_10199FEF0, &stru_1018947C0);
  }
  uint64_t v3 = unk_10199FEE0;
  *a1 = qword_10199FED8;
  a1[1] = v3;
  if (v3)
  {
    char v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

void sub_101015C1C(id a1)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  if (*((void *)&v4 + 1))
  {
    unsigned __int8 v2 = (unint64_t *)(*((void *)&v4 + 1) + 8LL);
    do
      unint64_t v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

uint64_t sub_101015C90(_OWORD *a1, _OWORD *a2)
{
  if ((sub_100869780((uint64_t)a2) & 1) == 0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018947E0);
    }
    int v12 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "@WifiPositionWiggleMetrics, invalid location LatLon",  buf,  2u);
    }

    BOOL v13 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (!v13) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018947E0);
    }
    LOWORD(v20[0]) = 0;
    unint64_t v14 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "@WifiPositionWiggleMetrics, invalid location LatLon",  v20,  2,  v20[0]);
LABEL_21:
    unint64_t v19 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiPositionWiggleMetrics::receiveLocation(const CLDaemonLocation &)",  "%s\n",  v14);
    if (v19 != buf) {
      free(v19);
    }
    return 0LL;
  }

  if (*((_DWORD *)a2 + 24) == 4)
  {
    sub_101015F88((uint64_t)a1, (uint64_t)a2);
    __int128 v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    __int128 v5 = a2[2];
    __int128 v6 = a2[3];
    __int128 v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    a1[2] = v5;
    a1[3] = v6;
    __int128 v8 = a2[6];
    __int128 v9 = a2[7];
    __int128 v10 = a2[8];
    *(_OWORD *)((char *)a1 + 140) = *(_OWORD *)((char *)a2 + 140);
    a1[7] = v9;
    a1[8] = v10;
    a1[6] = v8;
    return 1LL;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_1018947E0);
  }
  int v15 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
  {
    int v16 = *((_DWORD *)a2 + 24);
    *(_DWORD *)__int128 buf = 67240192;
    int v22 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "@WifiPositionWiggleMetrics, invalid location type %{public}d",  buf,  8u);
  }

  BOOL v17 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v17)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018947E0);
    }
    int v18 = *((_DWORD *)a2 + 24);
    LODWORD(v20[0]) = 67240192;
    HIDWORD(v20[0]) = v18;
    unint64_t v14 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "@WifiPositionWiggleMetrics, invalid location type %{public}d",  v20,  8,  v20[0]);
    goto LABEL_21;
  }

  return result;
}

void sub_101015F88(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 160) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 169) = *(_OWORD *)&buf[9];
  if (*(_BYTE *)(a1 + 184))
  {
    v12[0] = @"positionWiggleDistance";
    v13[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 160));
    v12[1] = @"positionWiggleTimestampDelta";
    v13[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 168));
    _DWORD v12[2] = @"positionWiggleSpeed";
    void v13[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 176));
    unint64_t v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  v12,  3LL);
    if (*(double *)(a1 + 160) >= 0.0 && *(double *)(a1 + 168) > 0.0 && *(double *)(a1 + 176) >= 0.0)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018947E0);
      }
      __int128 v5 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "@WifiPositionWiggleMetrics, submitting CoreAnalytics event for wifi position wiggle, %{public}@",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_1018947E0);
        }
        int v9 = 138543362;
        __int128 v10 = v3;
        __int128 v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@WifiPositionWiggleMetrics, submitting CoreAnalytics event for wifi position wiggle, %{public}@",  &v9,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiPositionWiggleMetrics::sendCoreAnalyticsEvent(const CLDaemonLocation &)",  "%s\n",  v7);
      }

      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_1010168FC;
      v8[3] = &unk_101820740;
      _DWORD v8[4] = v3;
      AnalyticsSendEventLazy(@"com.apple.clx.wifi.positionwiggle", v8);
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018947E0);
      }
      __int128 v4 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "@WifiPositionWiggleMetrics, error, invalid wifi position wiggle, %{public}@, skip",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_1018947E0);
        }
        int v9 = 138543362;
        __int128 v10 = v3;
        __int128 v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "@WifiPositionWiggleMetrics, error, invalid wifi position wiggle, %{public}@, skip",  &v9,  12);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiPositionWiggleMetrics::sendCoreAnalyticsEvent(const CLDaemonLocation &)",  "%s\n",  v6);
      }
    }
  }

void sub_101016374(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!sub_100869780(a2) || (sub_100869780(a1) & 1) == 0)
  {
LABEL_44:
    char v26 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_45;
  }

  double v6 = *(double *)(a2 + 76);
  double v7 = *(double *)(a1 + 76);
  double v8 = v6 - v7;
  if (v6 - v7 < 0.0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018947E0);
    }
    int v9 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_100869A44(a2, &v34);
      int size = (char)v34.__r_.__value_.__s.__size_;
      std::string::size_type v11 = v34.__r_.__value_.__r.__words[0];
      sub_100869A44(a1, &__p);
      int v12 = &v34;
      if (size < 0) {
        int v12 = (std::stringbuf::string_type *)v11;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 buf = 136381187;
      __int16 v37 = v12;
      __int16 v38 = 2081;
      __int16 v39 = p_p;
      __int16 v40 = 2050;
      double v41 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "@WifiPositionWiggleMetrics, #warning, timestamp out of order, current location, %{private}s, previous location, %{private}s, timestamp delta, %{public}.1f",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018947E0);
    }
    uint64_t v14 = qword_101934858;
    sub_100869A44(a2, &__p);
    int v15 = (char)__p.__r_.__value_.__s.__size_;
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
    sub_100869A44(a1, &v32);
    BOOL v17 = &__p;
    if (v15 < 0) {
      BOOL v17 = (std::stringbuf::string_type *)v16;
    }
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v18 = &v32;
    }
    else {
      int v18 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
    }
    LODWORD(v34.__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(v34.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v34.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
    HIWORD(v34.__r_.__value_.__r.__words[2]) = 2050;
    double v35 = v8;
    unint64_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v14,  0LL,  "@WifiPositionWiggleMetrics, #warning, timestamp out of order, current location, %{private}s, previou s location, %{private}s, timestamp delta, %{public}.1f",  &v34,  32);
    goto LABEL_57;
  }

  if (v6 - v7 == 0.0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018947E0);
    }
    unint64_t v20 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_100869A44(a2, &v34);
      int v21 = (char)v34.__r_.__value_.__s.__size_;
      std::string::size_type v22 = v34.__r_.__value_.__r.__words[0];
      sub_100869A44(a1, &__p);
      unint64_t v23 = &v34;
      if (v21 < 0) {
        unint64_t v23 = (std::stringbuf::string_type *)v22;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v24 = &__p;
      }
      else {
        uint64_t v24 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 buf = 136381187;
      __int16 v37 = v23;
      __int16 v38 = 2081;
      __int16 v39 = v24;
      __int16 v40 = 2050;
      double v41 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "@WifiPositionWiggleMetrics, #warning, timestamp delta is 0, current location, %{private}s, previous location, %{ private}s, timestamp delta, %{public}.1f",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018947E0);
    }
    uint64_t v27 = qword_101934858;
    sub_100869A44(a2, &__p);
    int v28 = (char)__p.__r_.__value_.__s.__size_;
    std::string::size_type v29 = __p.__r_.__value_.__r.__words[0];
    sub_100869A44(a1, &v32);
    char v30 = &__p;
    if (v28 < 0) {
      char v30 = (std::stringbuf::string_type *)v29;
    }
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v31 = &v32;
    }
    else {
      uint64_t v31 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
    }
    LODWORD(v34.__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
    WORD2(v34.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v34.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v31;
    HIWORD(v34.__r_.__value_.__r.__words[2]) = 2050;
    double v35 = v8;
    unint64_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v27,  0LL,  "@WifiPositionWiggleMetrics, #warning, timestamp delta is 0, current location, %{private}s, previous location, %{private}s, timestamp delta, %{public}.1f",  &v34,  32);
LABEL_57:
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<PositionWiggle> CLWifiPositionWiggleMetrics::getPositionWiggle(const CLDaemonLocation &)",  "%s\n",  v19);
    goto LABEL_44;
  }

  double v25 = sub_100D2EC74(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 4), *(double *)(a1 + 12));
  *(double *)a3 = v25;
  *(double *)(a3 + 8) = v8;
  *(double *)(a3 + 16) = v25 / v8;
  char v26 = 1;
LABEL_45:
  *(_BYTE *)(a3 + 24) = v26;
}

void sub_1010168BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010168FC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_101016904(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

char *sub_101016930@<X0>(void *a1@<X8>)
{
  unsigned __int8 v2 = (char *)operator new(0xD8uLL);
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 2) = 0LL;
  *(void *)unsigned __int8 v2 = off_101894810;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((void *)v2 + 26) = 0LL;
  *(void *)(v2 + 36) = 0LL;
  *(void *)(v2 + 28) = 0LL;
  *(_OWORD *)(v2 + 44) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(v2 + 60) = _Q0;
  *(_OWORD *)(v2 + 76) = _Q0;
  *(_OWORD *)(v2 + 92) = _Q0;
  *((_DWORD *)v2 + 27) = 0;
  *((void *)v2 + 15) = 0LL;
  *((void *)v2 + 16) = 0LL;
  *((void *)v2 + 14) = 0xBFF0000000000000LL;
  *((_DWORD *)v2 + 34) = 0;
  *(void *)(v2 + 140) = 0xBFF0000000000000LL;
  *((_DWORD *)v2 + 37) = 0x7FFFFFFF;
  *((void *)v2 + 19) = 0LL;
  *((void *)v2 + 20) = 0LL;
  *((void *)v2 + 21) = 0LL;
  v2[176] = 0;
  a1[1] = v2;
  *((_DWORD *)v2 + 6) = 0xFFFF;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

void sub_1010169D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101894810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010169E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101894810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_101016A14(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  uint64_t v5 = sub_100595C90(a1, &v7, a3, a4);
  *(void *)uint64_t v5 = &off_101894968;
  *(void *)(v5 + 376) = 0LL;
  *(void *)(v5 + 384) = 0LL;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(void *)(v5 + 360) = 0LL;
  *(void *)(v5 + 368) = v5 + 376;
  sub_1004F2598();
  *(_BYTE *)(a1 + 392) = sub_1004F8A40();
  return a1;
}

void sub_101016A88(_Unwind_Exception *a1)
{
  __int128 v4 = *(void **)(v1 + 344);
  if (v4)
  {
    *(void *)(v1 + 352) = v4;
    operator delete(v4);
  }

  sub_100C0CB28(v1);
  _Unwind_Resume(a1);
}

void *sub_101016AB8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = (void *)sub_101016A14(a1, a2, qword_10199FEF8, a3);
  *uint64_t result = off_101894860;
  return result;
}

void sub_101016AEC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10101A134(a1);
  operator delete(v1);
}

uint64_t sub_101016B00()
{
  return 310LL;
}

uint64_t sub_101016B08(uint64_t a1, std::string::value_type *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100C0FAA0(a1, a2);
  sub_100C124C8((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  sub_10101A180((uint64_t)&v50, a1 + 368);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  uint64_t v5 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134218242;
    *(void *)int v61 = v52;
    *(_WORD *)&v61[8] = 2080;
    *(void *)&v61[10] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    *(_DWORD *)std::stringbuf::string_type __p = 134218242;
    *(void *)&__p[4] = v52;
    *(_WORD *)&_BYTE __p[12] = 2080;
    *(void *)&__p[14] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s",  __p,  22);
    __int16 v37 = (uint8_t *)v36;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::Key LatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEn try_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v36);
    if (v37 != buf) {
      free(v37);
    }
  }

  uint64_t v6 = a1 + 376;
  sub_100008390(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 368) = a1 + 376;
  double v8 = v50;
  uint64_t v42 = &v51;
  if (v50 != &v51)
  {
    uint64_t v9 = 0LL;
    *(void *)&__int128 v7 = 134219266LL;
    __int128 v41 = v7;
    while (1)
    {
      *(_OWORD *)__int16 v49 = *(_OWORD *)((char *)v8 + 25);
      uint64_t v47 = 0LL;
      uint64_t v48 = 0LL;
      v46[0] = 0LL;
      v46[1] = 0LL;
      uint64_t v44 = 0LL;
      uint64_t v45 = 0LL;
      sub_100008390(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0LL;
      *(void *)(a1 + 384) = 0LL;
      *(void *)(a1 + 368) = v6;
      clock_t v10 = clock();
      int v11 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t *))(*(void *)a1 + 192LL))(a1, v49, &v47);
      clock_t v12 = clock();
      sub_100008390(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0LL;
      *(void *)(a1 + 384) = 0LL;
      *(void *)(a1 + 368) = v6;
      clock_t v13 = clock();
      int v14 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, void *))(*(void *)a1 + 184LL))(a1, v49, v46);
      clock_t v15 = clock();
      printf("tilestool: mmap, %lu, file, %lu\n", v15 - v13, v12 - v10);
      if (v11 != v14) {
        break;
      }
      int v16 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t *))(*(void *)a1 + 176LL))(a1, v49, &v47);
      if (v16) {
        sub_100C13C70(a1, (unsigned __int16)v48, WORD1(v48), (double *)&v45, (double *)&v44);
      }
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      BOOL v17 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = v52;
        uint64_t v19 = v44;
        uint64_t v20 = v45;
        sub_100C0B75C(v49, (std::stringbuf::string_type *)__p);
        int v21 = __p;
        if (__p[23] < 0) {
          int v21 = *(_BYTE **)__p;
        }
        *(_DWORD *)__int128 buf = v41;
        *(void *)int v61 = v9;
        *(_WORD *)&v61[8] = 2048;
        *(void *)&v61[10] = v18;
        *(_WORD *)&v61[18] = 1024;
        *(_DWORD *)&v61[20] = v16;
        __int16 v62 = 2048;
        uint64_t v63 = v20;
        __int16 v64 = 2048;
        uint64_t v65 = v19;
        __int16 v66 = 2080;
        __int128 v67 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s",  buf,  0x3Au);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101894A30);
        }
        uint64_t v25 = qword_101934A78;
        uint64_t v26 = v52;
        uint64_t v27 = v44;
        uint64_t v28 = v45;
        sub_100C0B75C(v49, &v43);
        std::string::size_type v29 = &v43;
        if ((v43.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type v29 = (std::stringbuf::string_type *)v43.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::stringbuf::string_type __p = v41;
        *(void *)&__p[4] = v9;
        *(_WORD *)&_BYTE __p[12] = 2048;
        *(void *)&__p[14] = v26;
        *(_WORD *)&__p[22] = 1024;
        *(_DWORD *)&_BYTE __p[24] = v16;
        __int16 v54 = 2048;
        uint64_t v55 = v28;
        __int16 v56 = 2048;
        uint64_t v57 = v27;
        __int16 v58 = 2080;
        int v59 = v29;
        LODWORD(v40) = 58;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  2LL,  "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s",  __p,  v40,  (_DWORD)v41,  *((double *)&v41 + 1),  *(double *)&v42,  v43.__r_.__value_.__l.__data_);
        uint64_t v31 = v30;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type: :KeyLatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLo nIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v31);
      }

      if (!v16)
      {
        int v34 = 759;
        double v35 = "isFound";
LABEL_44:
        __assert_rtn("TEST_testBinarySearch", "CLKeyLatLonTileTemplate.h", v34, v35);
      }

      std::string::size_type v22 = (void *)v8[1];
      if (v22)
      {
        do
        {
          unint64_t v23 = v22;
          std::string::size_type v22 = (void *)*v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          unint64_t v23 = (void *)v8[2];
          BOOL v24 = *v23 == (void)v8;
          double v8 = v23;
        }

        while (!v24);
      }

      ++v9;
      double v8 = v23;
      if (v23 == v42) {
        goto LABEL_36;
      }
    }

    int v34 = 742;
    double v35 = "isFound == isFoundMmap";
    goto LABEL_44;
  }

  uint64_t v9 = 0LL;
LABEL_36:
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  std::stringbuf::string_type v32 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109632;
    *(_DWORD *)int v61 = 1;
    *(_WORD *)&v61[4] = 2048;
    *(void *)&v61[6] = v9;
    *(_WORD *)&v61[14] = 2048;
    *(void *)&v61[16] = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "TILE: result: tilestool: pass, %d, tests, %lu, %lu",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    *(void *)std::stringbuf::string_type __p = 0x104000300LL;
    *(_WORD *)&__p[8] = 2048;
    *(void *)&__p[10] = v9;
    *(_WORD *)&__p[18] = 2048;
    *(void *)&__p[20] = v52;
    LODWORD(v40) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: result: tilestool: pass, %d, tests, %lu, %lu",  __p,  v40,  (void)v41);
    __int16 v39 = (uint8_t *)v38;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::Key LatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEn try_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
  }

  sub_100008390((uint64_t)&v50, v51);
  return 1LL;
}

void sub_1010172B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, void *a27)
{
}

void sub_10101730C(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  sub_10059826C(a1, (uint64_t)a2, a3);
  uint64_t v95 = 0LL;
  int v10 = *(unsigned __int16 *)(a3 + 2);
  if (v10 != 7)
  {
    if (v10 == 6)
    {
      *(void *)__int16 v96 = 0x200006ABBALL;
      memset(&v96[8], 0, 32);
      LODWORD(v97) = 0;
      sub_100C0C158(a4, (uint64_t)v96);
      int v11 = (void *)(v9 + 344);
      *(void *)(v9 + 352) = *(void *)(v9 + 344);
      sub_100E72208((char **)(v9 + 344), *(unsigned int *)&v96[12]);
      clock_t v12 = (char *)sub_100599BF4(v9, a2, a3, 0, *(int *)&v96[12], *(int *)&v96[16]);
      if (v12)
      {
        DWORD2(v93) = 0;
        *(void *)&__int128 v93 = 0LL;
        if (*(_DWORD *)&v96[12])
        {
          unint64_t v13 = 0LL;
          do
          {
            sub_100C0B8B0((unsigned __int16 *)&v12[v13 * *(unsigned int *)&v96[16]], (uint64_t)&v93);
            unint64_t v15 = *(void *)(v9 + 352);
            unint64_t v14 = *(void *)(v9 + 360);
            if (v15 >= v14)
            {
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v11) >> 2);
              unint64_t v19 = v18 + 1;
              if (v18 + 1 > 0x1555555555555555LL) {
                sub_100007008();
              }
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 2);
              if (2 * v20 > v19) {
                unint64_t v19 = 2 * v20;
              }
              if (v20 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v21 = 0x1555555555555555LL;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21) {
                std::string::size_type v22 = (char *)sub_1005AADE4(v9 + 360, v21);
              }
              else {
                std::string::size_type v22 = 0LL;
              }
              unint64_t v23 = &v22[12 * v18];
              uint64_t v24 = v93;
              *((_DWORD *)v23 + 2) = DWORD2(v93);
              *(void *)unint64_t v23 = v24;
              uint64_t v26 = *(_DWORD **)(v9 + 344);
              uint64_t v25 = *(_DWORD **)(v9 + 352);
              uint64_t v27 = v23;
              if (v25 != v26)
              {
                do
                {
                  uint64_t v28 = *(void *)(v25 - 3);
                  v25 -= 3;
                  int v29 = v25[2];
                  *(void *)(v27 - 12) = v28;
                  v27 -= 12;
                  *((_DWORD *)v27 + 2) = v29;
                }

                while (v25 != v26);
                uint64_t v25 = (_DWORD *)*v11;
              }

              BOOL v17 = v23 + 12;
              *(void *)(v9 + 344) = v27;
              *(void *)(v9 + 352) = v23 + 12;
              *(void *)(v9 + 360) = &v22[12 * v21];
              if (v25) {
                operator delete(v25);
              }
            }

            else
            {
              uint64_t v16 = v93;
              *(_DWORD *)(v15 + 8) = DWORD2(v93);
              *(void *)unint64_t v15 = v16;
              BOOL v17 = (char *)(v15 + 12);
            }

            *(void *)(v9 + 352) = v17;
            if (!*(_BYTE *)(a5 + 9))
            {
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894A30);
              }
              char v30 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
              {
                int v31 = *(_DWORD *)&v96[12];
                sub_100C0B8E0((unsigned __int16 *)&v93, (std::stringbuf::string_type *)__p);
                std::stringbuf::string_type v32 = __p;
                if (SBYTE3(v109) < 0) {
                  std::stringbuf::string_type v32 = *(_BYTE **)__p;
                }
                *(_DWORD *)__int128 buf = 134218498;
                *(void *)__int128 v113 = v13;
                *(_WORD *)&v113[8] = 1024;
                *(_DWORD *)std::string::size_type v114 = v31;
                *(_WORD *)&v114[4] = 2080;
                *(void *)&v114[6] = v32;
                _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "TILE: index entry, %3lu, %3u, %s",  buf,  0x1Cu);
                if (SBYTE3(v109) < 0) {
                  operator delete(*(void **)__p);
                }
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934A70 != -1) {
                  dispatch_once(&qword_101934A70, &stru_101894A30);
                }
                uint64_t v33 = qword_101934A78;
                int v34 = *(_DWORD *)&v96[12];
                sub_100C0B8E0((unsigned __int16 *)&v93, &v94);
                double v35 = &v94;
                if ((v94.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  double v35 = (std::stringbuf::string_type *)v94.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::stringbuf::string_type __p = 134218498;
                *(void *)&__p[4] = v13;
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = v34;
                *(_WORD *)&__p[18] = 2080;
                double v109 = v35;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  2LL,  "TILE: index entry, %3lu, %3u, %s",  __p,  28,  v85);
                __int16 v37 = v36;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManag er_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHea der &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatL onIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v37);
              }
            }

            ++v13;
          }

          while (v13 < *(unsigned int *)&v96[12]);
        }
      }

      goto LABEL_82;
    }

    unsigned int v44 = 0;
    goto LABEL_57;
  }

  *(_DWORD *)std::stringbuf::string_type __p = 502714;
  *(_OWORD *)&__p[4] = xmmword_101362CA0;
  double v109 = 0LL;
  uint64_t v111 = 0LL;
  uint64_t v110 = 0LL;
  sub_100C0C158(a4, (uint64_t)__p);
  __int16 v38 = (uint64_t **)(v9 + 368);
  sub_100008390(v9 + 368, *(void **)(v9 + 376));
  *(void *)(v9 + 376) = 0LL;
  *(void *)(v9 + 384) = 0LL;
  *(void *)(v9 + 368) = v9 + 376;
  double v90 = *(double *)&v9;
  if (!*(_BYTE *)(a5 + 9))
  {
    __int128 v93 = 0uLL;
    uint64_t v45 = (const char *)sub_100599BF4(v9, a2, a3, 0, *(int *)&__p[12], *(int *)&__p[16]);
    clock_t v12 = (char *)v45;
    if (!v45)
    {
LABEL_82:
      unsigned int v44 = 0;
      goto LABEL_83;
    }

    if (*(_DWORD *)&__p[12])
    {
      unint64_t v47 = 0LL;
      *(void *)&__int128 v46 = 134220290LL;
      __int128 v88 = v46;
      int v87 = v45;
      do
      {
        sub_100C0B704((unsigned __int16 *)&v12[v47 * *(unsigned int *)&__p[16]], (uint64_t)&v93);
        sub_10101AE74(v38, (unsigned __int16 *)&v93, &v93);
        uint64_t v91 = 0LL;
        uint64_t v92 = 0LL;
        sub_100C13C70(v9, WORD4(v93), WORD5(v93), (double *)&v92, (double *)&v91);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101894A30);
        }
        uint64_t v48 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          int v49 = *(_DWORD *)&__p[12];
          uint64_t v50 = *(void *)(v9 + 384);
          sub_100C0B75C((unsigned __int16 *)&v93, (std::stringbuf::string_type *)v96);
          __int16 v51 = v38;
          if (v96[23] >= 0) {
            uint64_t v52 = v96;
          }
          else {
            uint64_t v52 = *(_BYTE **)v96;
          }
          uint64_t v53 = v91;
          uint64_t v54 = v92;
          double v55 = (*(double (**)(uint64_t))(*(void *)v9 + 56LL))(v9);
          double v56 = (*(double (**)(uint64_t))(*(void *)v9 + 64LL))(v9);
          int v57 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 80LL))(v9);
          int v58 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 72LL))(v9);
          *(_DWORD *)__int128 buf = v88;
          *(void *)__int128 v113 = v47;
          *(_WORD *)&v113[8] = 1024;
          *(_DWORD *)std::string::size_type v114 = v49;
          *(_WORD *)&v114[4] = 2048;
          *(void *)&v114[6] = v50;
          __int16 v115 = 2080;
          int v116 = v52;
          __int16 v117 = 2048;
          uint64_t v118 = v54;
          __int16 v119 = 2048;
          uint64_t v120 = v53;
          __int16 v121 = 2048;
          double v122 = v55;
          __int16 v123 = 2048;
          double v124 = v56;
          __int16 v125 = 1024;
          int v126 = v57;
          __int16 v127 = 1024;
          int v128 = v58;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u",  buf,  0x5Au);
          if ((v96[23] & 0x80000000) != 0) {
            operator delete(*(void **)v96);
          }
          __int16 v38 = v51;
          clock_t v12 = (char *)v87;
          *(double *)&uint64_t v9 = v90;
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101894A30);
          }
          uint64_t v59 = qword_101934A78;
          int v60 = *(_DWORD *)&__p[12];
          uint64_t v61 = *(void *)(v9 + 384);
          sub_100C0B75C((unsigned __int16 *)&v93, &v94);
          __int16 v86 = v38;
          if ((v94.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int16 v62 = &v94;
          }
          else {
            __int16 v62 = (std::stringbuf::string_type *)v94.__r_.__value_.__r.__words[0];
          }
          uint64_t v63 = v91;
          uint64_t v64 = v92;
          double v65 = (*(double (**)(uint64_t))(*(void *)v9 + 56LL))(v9);
          double v66 = (*(double (**)(uint64_t))(*(void *)v9 + 64LL))(v9);
          int v67 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 80LL))(v9);
          int v68 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 72LL))(v9);
          *(_DWORD *)__int16 v96 = v88;
          *(void *)&v96[4] = v47;
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = v60;
          *(_WORD *)&v96[18] = 2048;
          *(void *)&v96[20] = v61;
          *(_WORD *)&v96[28] = 2080;
          *(void *)&v96[30] = v62;
          *(_WORD *)&v96[38] = 2048;
          uint64_t v97 = v64;
          __int16 v98 = 2048;
          uint64_t v99 = v63;
          __int16 v100 = 2048;
          double v101 = v65;
          __int16 v102 = 2048;
          double v103 = v66;
          __int16 v104 = 1024;
          int v105 = v67;
          __int16 v106 = 1024;
          int v107 = v68;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v59,  2LL,  "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u",  v96,  90,  v86,  v87,  *(double *)&v88,  *((double *)&v88 + 1),  v89,  v90,  v91,  v92);
          uint64_t v70 = v69;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Typ e::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_Coars eCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v70);
          __int16 v38 = (uint64_t **)v85;
        }

        ++v47;
      }

      while (v47 < *(unsigned int *)&__p[12]);
    }

void sub_101018104( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10101813C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 368);
  uint64_t v7 = sub_10101B080(a1 + 368, a2);
  double v8 = (void **)v7;
  if (a1 + 376 != v7)
  {
    *(_OWORD *)a3 = *(_OWORD *)(v7 + 25);
    return 1LL;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  int v10 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100C0B75C(a2, (std::stringbuf::string_type *)__p);
    int v11 = v142[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "TILE:  getLocationByKey_mmap, key, %s",  buf,  0xCu);
    if ((v142[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    uint64_t v83 = qword_101934A78;
    sub_100C0B75C(a2, (std::stringbuf::string_type *)buf);
    if ((SBYTE7(v136) & 0x80u) == 0) {
      uint64_t v84 = buf;
    }
    else {
      uint64_t v84 = *(_BYTE **)buf;
    }
    *(_DWORD *)uint64_t v130 = 136315138;
    *(void *)&v130[4] = v84;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v83,  2LL,  "TILE:  getLocationByKey_mmap, key, %s",  v130);
    __int16 v86 = v85;
    if (SBYTE7(v136) < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::Key LatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_ Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v86);
    if (v86 != __p) {
      free(v86);
    }
  }

  *(void *)(a1 + 352) = *(void *)(a1 + 344);
  sub_1010DDBC0(v124, "");
  uint64_t v126 = 0LL;
  int v127 = -1;
  uint64_t v128 = 0LL;
  uint64_t v129 = 0LL;
  if ((sub_100596978(a1, (uint64_t)v124) & 1) == 0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    uint64_t v16 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type __p = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe",  __p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      *(_WORD *)__int128 buf = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  16LL,  "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe",  buf,  2);
      __int128 v88 = (char *)v87;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::K eyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesMana ger_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v87);
      if (v88 != __p) {
        free(v88);
      }
    }

    BOOL v9 = 0LL;
    goto LABEL_179;
  }

  clock_t v12 = 0LL;
  unsigned int v106 = 0;
  uint64_t v123 = 0LL;
  int v121 = 0;
  int v122 = 43962;
  uint64_t v118 = 0x200006ABBALL;
  __int128 v119 = 0u;
  __int128 v120 = 0u;
  *(void *)&uint8_t buf[4] = 184LL;
  *(_DWORD *)__int128 buf = 371642;
  int v135 = 381;
  __int128 v136 = 0u;
  __int128 v137 = 0u;
  uint64_t v139 = 0LL;
  uint64_t v138 = 0LL;
  int v140 = 0;
  int v113 = 502714;
  __int128 v114 = xmmword_101362CA0;
  uint64_t v115 = 0LL;
  uint64_t v116 = 0LL;
  uint64_t v117 = 0LL;
  while (1)
  {
    while (1)
    {
      uint64_t v13 = v129;
      if (HIWORD(v122) == 7) {
        break;
      }
      if (HIWORD(v122) == 6)
      {
        sub_100C0C158(v128 + v13, (uint64_t)&v118);
        clock_t v12 = (unsigned __int16 *)(v13 + v128 + v123 + 12);
        if ((unint64_t)v12 + (DWORD2(v119) * DWORD1(v119)) > v126 + v128)
        {
          if (!*(_BYTE *)(a1 + 392)) {
            goto LABEL_162;
          }
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101894A30);
          }
          uint64_t v52 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
          {
            int v53 = DWORD1(v119);
            __int16 v104 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
            LODWORD(v105) = v53;
            sub_100E72C48((uint64_t)buf, (std::stringbuf::string_type *)v130);
            int v54 = v131[9];
            double v55 = *(_BYTE **)v130;
            sub_100C0B75C(a2, &v133);
            double v56 = v130;
            if (v54 < 0) {
              double v56 = v55;
            }
            int v57 = &v133;
            if ((v133.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              int v57 = (std::stringbuf::string_type *)v133.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::stringbuf::string_type __p = 134284803;
            *(void *)&__p[4] = v12;
            *(_WORD *)&_BYTE __p[12] = 1025;
            *(_DWORD *)__int16 v142 = (_DWORD)v105;
            *(_WORD *)&v142[4] = 2049;
            *(void *)&v142[6] = v13;
            *(_WORD *)&v142[14] = 2081;
            *(void *)&v142[16] = v104;
            *(_WORD *)&v142[24] = 2081;
            *(void *)&v142[26] = v56;
            *(_WORD *)&v142[34] = 2081;
            v143[0] = v57;
            _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_FAULT,  "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atO ffset:%{private}lld, %{private}s, %{private}s, %{private}s",  __p,  0x3Au);
            if ((v131[9] & 0x80000000) != 0) {
              operator delete(*(void **)v130);
            }
          }

          if (!sub_1002921D0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101894A30);
          }
          uint64_t v58 = qword_101934A78;
          LODWORD(v105) = DWORD1(v119);
          __int16 v104 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
          sub_100E72C48((uint64_t)buf, &v133);
          int size = (char)v133.__r_.__value_.__s.__size_;
          std::string::size_type v60 = v133.__r_.__value_.__r.__words[0];
          sub_100C0B75C(a2, &v112);
          uint64_t v61 = &v133;
          if (size < 0) {
            uint64_t v61 = (std::stringbuf::string_type *)v60;
          }
          __int16 v62 = &v112;
          if ((v112.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            __int16 v62 = (std::stringbuf::string_type *)v112.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v130 = 134284803;
          *(void *)&v130[4] = v12;
          *(_WORD *)&v130[12] = 1025;
          *(_DWORD *)double v131 = (_DWORD)v105;
          *(_WORD *)&v131[4] = 2049;
          *(void *)&v131[6] = v13;
          *(_WORD *)&v131[14] = 2081;
          *(void *)&v131[16] = v104;
          *(_WORD *)&v131[24] = 2081;
          *(void *)&v131[26] = v61;
          *(_WORD *)&v131[34] = 2081;
          *(void *)std::string::size_type v132 = v62;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v58,  17LL,  "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOff set:%{private}lld, %{private}s, %{private}s, %{private}s",  v130,  58);
          std::stringbuf::string_type v32 = v63;
          goto LABEL_147;
        }
      }

      else
      {
        if (HIWORD(v122) != 5)
        {
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101894A30);
          }
          uint64_t v33 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_ERROR))
          {
            int v34 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
            sub_100E72C48((uint64_t)buf, (std::stringbuf::string_type *)v130);
            double v35 = v131[9] >= 0 ? v130 : *(_BYTE **)v130;
            *(_DWORD *)std::stringbuf::string_type __p = 134218498;
            *(void *)&__p[4] = v13;
            *(_WORD *)&_BYTE __p[12] = 2080;
            *(void *)__int16 v142 = v34;
            *(_WORD *)&v142[8] = 2080;
            *(void *)&v142[10] = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "TILE: unregconized sectionId, %lld, %s, %s",  __p,  0x20u);
            if ((v131[9] & 0x80000000) != 0) {
              operator delete(*(void **)v130);
            }
          }

          if (!sub_1002921D0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101894A30);
          }
          uint64_t v36 = qword_101934A78;
          __int16 v37 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
          sub_100E72C48((uint64_t)buf, &v133);
          if ((v133.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int16 v38 = &v133;
          }
          else {
            __int16 v38 = (std::stringbuf::string_type *)v133.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v130 = 134218498;
          *(void *)&v130[4] = v13;
          *(_WORD *)&v130[12] = 2080;
          *(void *)double v131 = v37;
          *(_WORD *)&v131[8] = 2080;
          *(void *)&v131[10] = v38;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v36,  16LL,  "TILE: unregconized sectionId, %lld, %s, %s",  v130,  32,  v104);
          std::stringbuf::string_type v32 = v39;
LABEL_147:
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Typ e::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLT ilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v32);
          goto LABEL_221;
        }

        sub_100C0B658(v128 + v13, (uint64_t)buf);
      }
    }

    sub_100C0C158(v128 + v13, (uint64_t)&v113);
    uint64_t v14 = v13 + v128 + v123 + 12;
    if (v14 + (unint64_t)(HIDWORD(v114) * DWORD2(v114)) > v126 + v128)
    {
      if (!*(_BYTE *)(a1 + 392)) {
        goto LABEL_162;
      }
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      int v40 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        int v41 = DWORD2(v114);
        __int16 v104 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
        LODWORD(v105) = v41;
        sub_100E72C48((uint64_t)buf, (std::stringbuf::string_type *)v130);
        int v42 = v131[9];
        std::stringbuf::string_type v43 = *(_BYTE **)v130;
        sub_100C0B75C(a2, &v133);
        unsigned int v44 = v130;
        if (v42 < 0) {
          unsigned int v44 = v43;
        }
        uint64_t v45 = &v133;
        if ((v133.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v45 = (std::stringbuf::string_type *)v133.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::stringbuf::string_type __p = 134284803;
        *(void *)&__p[4] = v14;
        *(_WORD *)&_BYTE __p[12] = 1025;
        *(_DWORD *)__int16 v142 = (_DWORD)v105;
        *(_WORD *)&v142[4] = 2049;
        *(void *)&v142[6] = v13;
        *(_WORD *)&v142[14] = 2081;
        *(void *)&v142[16] = v104;
        *(_WORD *)&v142[24] = 2080;
        *(void *)&v142[26] = v44;
        *(_WORD *)&v142[34] = 2081;
        v143[0] = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset: %{private}lld, %{private}s, %{privat}s, %{private}s",  __p,  0x3Au);
        if ((v131[9] & 0x80000000) != 0) {
          operator delete(*(void **)v130);
        }
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      uint64_t v46 = qword_101934A78;
      LODWORD(v105) = DWORD2(v114);
      __int16 v104 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
      sub_100E72C48((uint64_t)buf, &v133);
      int v47 = (char)v133.__r_.__value_.__s.__size_;
      std::string::size_type v48 = v133.__r_.__value_.__r.__words[0];
      sub_100C0B75C(a2, &v112);
      int v49 = &v133;
      if (v47 < 0) {
        int v49 = (std::stringbuf::string_type *)v48;
      }
      uint64_t v50 = &v112;
      if ((v112.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v50 = (std::stringbuf::string_type *)v112.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v130 = 134284803;
      *(void *)&v130[4] = v14;
      *(_WORD *)&v130[12] = 1025;
      *(_DWORD *)double v131 = (_DWORD)v105;
      *(_WORD *)&v131[4] = 2049;
      *(void *)&v131[6] = v13;
      *(_WORD *)&v131[14] = 2081;
      *(void *)&v131[16] = v104;
      *(_WORD *)&v131[24] = 2080;
      *(void *)&v131[26] = v49;
      *(_WORD *)&v131[34] = 2081;
      *(void *)std::string::size_type v132 = v50;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v46,  17LL,  "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{ private}lld, %{private}s, %{privat}s, %{private}s",  v130,  58);
      std::stringbuf::string_type v32 = v51;
      goto LABEL_147;
    }

    sub_100008390((uint64_t)v6, *v8);
    *(void *)(a1 + 384) = 0LL;
    *(void *)(a1 + 368) = v8;
    void *v8 = 0LL;
    int v111 = 0;
    uint64_t v110 = 0LL;
    sub_100C0BA04(&v110, a2);
    unsigned int v108 = DWORD2(v114);
    unsigned int v109 = 0;
    if (!v12)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      uint64_t v64 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_ERROR))
      {
        double v65 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
        sub_100E72C48((uint64_t)buf, (std::stringbuf::string_type *)__p);
        double v66 = v142[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)uint64_t v130 = 136380931;
        *(void *)&v130[4] = v65;
        *(_WORD *)&v130[12] = 2081;
        *(void *)double v131 = v66;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "TILE: no index section before entries section, %{private}s, %{private}s",  v130,  0x16u);
        if ((v142[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      uint64_t v67 = qword_101934A78;
      int v68 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
      sub_100E72C48((uint64_t)buf, (std::stringbuf::string_type *)v130);
      if (v131[9] >= 0) {
        int v69 = v130;
      }
      else {
        int v69 = *(_BYTE **)v130;
      }
      LODWORD(v133.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
      WORD2(v133.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v69;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v67,  16LL,  "TILE: no index section before entries section, %{private}s, %{private}s",  &v133,  22);
      std::stringbuf::string_type v32 = v70;
      if ((v131[9] & 0x80000000) != 0) {
        operator delete(*(void **)v130);
      }
      goto LABEL_147;
    }

    BOOL v15 = sub_10101AEF4(a1, v12, DWORD1(v119), SDWORD2(v119), (unsigned __int16 *)&v110, &v109, &v108);
    if (v109 >= DWORD2(v114) || v108 >= DWORD2(v114)) {
      break;
    }
    if (!v15)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      BOOL v71 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v104) = v109;
        LODWORD(v105) = v108;
        sub_100C0B8E0((unsigned __int16 *)&v110, (std::stringbuf::string_type *)v130);
        if (v131[9] >= 0) {
          uint64_t v72 = v130;
        }
        else {
          uint64_t v72 = *(_BYTE **)v130;
        }
        __int16 v73 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
        sub_100E72C48((uint64_t)buf, &v133);
        if ((v133.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v74 = &v133;
        }
        else {
          int v74 = (std::stringbuf::string_type *)v133.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::stringbuf::string_type __p = 67175683;
        *(_DWORD *)&__p[4] = (_DWORD)v104;
        *(_WORD *)&__p[8] = 1025;
        *(_DWORD *)&__p[10] = (_DWORD)v105;
        *(_WORD *)__int16 v142 = 2081;
        *(void *)&v142[2] = v72;
        *(_WORD *)&v142[10] = 2081;
        *(void *)&v142[12] = v73;
        *(_WORD *)&v142[20] = 2081;
        *(void *)&v142[22] = v74;
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s",  __p,  0x2Cu);
        if ((v131[9] & 0x80000000) != 0) {
          operator delete(*(void **)v130);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      int v105 = (const char *)qword_101934A78;
      unsigned int v97 = v109;
      LODWORD(v104) = v108;
      sub_100C0B8E0((unsigned __int16 *)&v110, &v133);
      if ((v133.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v98 = &v133;
      }
      else {
        __int16 v98 = (std::stringbuf::string_type *)v133.__r_.__value_.__r.__words[0];
      }
      uint64_t v99 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
      sub_100E72C48((uint64_t)buf, &v112);
      if ((v112.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v100 = &v112;
      }
      else {
        __int16 v100 = (std::stringbuf::string_type *)v112.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v130 = 67175683;
      *(_DWORD *)&v130[4] = v97;
      *(_WORD *)&v130[8] = 1025;
      *(_DWORD *)&v130[10] = (_DWORD)v104;
      *(_WORD *)double v131 = 2081;
      *(void *)&v131[2] = v98;
      *(_WORD *)&v131[10] = 2081;
      *(void *)&v131[12] = v99;
      *(_WORD *)&v131[20] = 2081;
      *(void *)&v131[22] = v100;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v105,  2LL,  "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s",  v130,  44);
      std::stringbuf::string_type v32 = v101;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::K eyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesMana ger_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v32);
LABEL_221:
      if (v32 != __p) {
        free(v32);
      }
      goto LABEL_162;
    }

    unsigned int v106 = v108 - v109 + 1;
    sub_10101AE74(v6, a3, a3);
  }

  if (*(_BYTE *)(a1 + 392))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    BOOL v17 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      unint64_t v18 = v130;
      sub_100C0B8E0((unsigned __int16 *)&v110, (std::stringbuf::string_type *)v130);
      if (v131[9] < 0) {
        unint64_t v18 = *(_BYTE **)v130;
      }
      int v105 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
      sub_100E72C48((uint64_t)buf, &v133);
      int v19 = (char)v133.__r_.__value_.__s.__size_;
      std::string::size_type v20 = v133.__r_.__value_.__r.__words[0];
      unsigned int v21 = v109;
      unsigned int v103 = v108;
      LODWORD(v104) = DWORD2(v114);
      sub_100C0B75C(a2, &v112);
      std::string::size_type v22 = &v133;
      if (v19 < 0) {
        std::string::size_type v22 = (std::stringbuf::string_type *)v20;
      }
      unint64_t v23 = &v112;
      if ((v112.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unint64_t v23 = (std::stringbuf::string_type *)v112.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::stringbuf::string_type __p = 136382211;
      *(void *)&__p[4] = v18;
      *(_WORD *)&_BYTE __p[12] = 2081;
      *(void *)__int16 v142 = v105;
      *(_WORD *)&v142[8] = 2081;
      *(void *)&v142[10] = v22;
      *(_WORD *)&v142[18] = 1025;
      *(_DWORD *)&v142[20] = v21;
      *(_WORD *)&v142[24] = 1025;
      *(_DWORD *)&v142[26] = v103;
      *(_WORD *)&v142[30] = 1025;
      *(_DWORD *)&v142[32] = (_DWORD)v104;
      LOWORD(v143[0]) = 2081;
      *(void *)((char *)v143 + 2) = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s",  __p,  0x3Cu);
      if ((v131[9] & 0x80000000) != 0) {
        operator delete(*(void **)v130);
      }
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      int v105 = (const char *)qword_101934A78;
      uint64_t v24 = &v133;
      sub_100C0B8E0((unsigned __int16 *)&v110, &v133);
      if ((v133.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v24 = (std::stringbuf::string_type *)v133.__r_.__value_.__r.__words[0];
      }
      __int16 v104 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
      sub_100E72C48((uint64_t)buf, &v112);
      int v25 = (char)v112.__r_.__value_.__s.__size_;
      std::string::size_type v26 = v112.__r_.__value_.__r.__words[0];
      unsigned int v27 = v108;
      unsigned int v28 = v109;
      HIDWORD(v102) = DWORD2(v114);
      sub_100C0B75C(a2, &v107);
      int v29 = &v112;
      if (v25 < 0) {
        int v29 = (std::stringbuf::string_type *)v26;
      }
      char v30 = &v107;
      if ((v107.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        char v30 = (std::stringbuf::string_type *)v107.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v130 = 136382211;
      *(void *)&v130[4] = v24;
      *(_WORD *)&v130[12] = 2081;
      *(void *)double v131 = v104;
      *(_WORD *)&v131[8] = 2081;
      *(void *)&v131[10] = v29;
      *(_WORD *)&v131[18] = 1025;
      *(_DWORD *)&v131[20] = v28;
      *(_WORD *)&v131[24] = 1025;
      *(_DWORD *)&v131[26] = v27;
      *(_WORD *)&v131[30] = 1025;
      *(_DWORD *)&v131[32] = HIDWORD(v102);
      *(_WORD *)std::string::size_type v132 = 2081;
      *(void *)&v132[2] = v30;
      LODWORD(v102) = 60;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v105,  17LL,  "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s",  v130,  v102);
      std::stringbuf::string_type v32 = v31;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::K eyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesMana ger_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v32);
      goto LABEL_221;
    }
  }

void sub_1010198DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *__p, uint64_t a37, int a38, __int16 a39, char a40, char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_101019A24(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  *(_OWORD *)(a1 + 328) = *(_OWORD *)a2;
  char v40 = 0;
  nullsub_10(0LL);
  uint64_t v42 = v6;
  BOOL v39 = "search";
  char v41 = 1;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  uint64_t v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100C0B75C(a2, &__p);
    double v8 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
       ? &__p
       : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "TILE: getLocationByKey_traverse, key, %s",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    uint64_t v22 = qword_101934A78;
    sub_100C0B75C(a2, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::stringbuf::string_type buf = &buf;
    }
    else {
      p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v46.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v22,  2LL,  "TILE: getLocationByKey_traverse, key, %s",  (const char *)&v46);
    int v25 = v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::Key LatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesMana ger_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  (const char *)v25);
    if (v25 != &__p) {
      free(v25);
    }
  }

  sub_100C0FCEC(a1, &v46);
  BOOL v9 = (const char **)(a1 + 8);
  int v10 = (const char *)(a1 + 8);
  if (sub_100292D28(v10))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    int v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v12 = a1 + 8;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s",  (uint8_t *)&__p,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      std::string::size_type v33 = a1 + 8;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v33;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s",  (const char *)&buf);
      double v35 = (std::stringbuf::string_type *)v34;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::K eyLatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTiles Manager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v34);
      if (v35 != &__p) {
        free(v35);
      }
    }

    std::string::operator=(&v46, (const std::string *)(a1 + 8));
  }

  sub_100C1145C((void *)a1, (uint64_t)&v46, (uint64_t)&v39);
  uint64_t v13 = sub_10101B080(a1 + 368, a2);
  uint64_t v14 = v13;
  uint64_t v15 = a1 + 376;
  if (a1 + 376 != v13) {
    *(_OWORD *)a3 = *(_OWORD *)(v13 + 25);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  uint64_t v16 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100C0B75C(a2, &buf);
    int size = (char)buf.__r_.__value_.__s.__size_;
    std::string::size_type v18 = buf.__r_.__value_.__r.__words[0];
    sub_100C0B75C(a3, &v38);
    int v19 = &buf;
    if (size < 0) {
      int v19 = (std::stringbuf::string_type *)v18;
    }
    if ((v38.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v20 = &v38;
    }
    else {
      std::string::size_type v20 = (std::stringbuf::string_type *)v38.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v15 != v14;
    __p.__r_.__value_.__l.__size_ = 0x820000000000400LL;
    __p.__r_.__value_.__l.__cap_ = (std::string::size_type)v19;
    __int16 v48 = 2080;
    int v49 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s",  (uint8_t *)&__p,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    uint64_t v26 = qword_101934A78;
    sub_100C0B75C(a2, &v38);
    int v27 = (char)v38.__r_.__value_.__s.__size_;
    std::string::size_type v28 = v38.__r_.__value_.__r.__words[0];
    sub_100C0B75C(a3, &v37);
    int v29 = &v38;
    if (v27 < 0) {
      int v29 = (std::stringbuf::string_type *)v28;
    }
    if ((v37.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v30 = &v37;
    }
    else {
      char v30 = (std::stringbuf::string_type *)v37.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v15 != v14;
    buf.__r_.__value_.__l.__size_ = 0x820000000000400LL;
    buf.__r_.__value_.__l.__cap_ = (std::string::size_type)v29;
    __int16 v44 = 2080;
    uint64_t v45 = v30;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v26,  2LL,  "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s",  &buf,  34,  v36,  v37.__r_.__value_.__l.__data_);
    std::stringbuf::string_type v32 = v31;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::Key LatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesMana ger_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  (const char *)v32);
    if (v32 != &__p) {
      free(v32);
    }
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  return v15 != v14;
}

void sub_10101A0CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10101A134(uint64_t a1)
{
  *(void *)a1 = &off_101894968;
  sub_100008390(a1 + 368, *(void **)(a1 + 376));
  uint64_t v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }

  return sub_100C0CB28(a1);
}

uint64_t sub_10101A180(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_10101A1D4((char *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10101A1BC(_Unwind_Exception *a1)
{
}

char *sub_10101A1D4(char *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    __int128 v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t *)(result + 8);
    do
    {
      uint64_t result = sub_10101A258(v5, v6, (unsigned __int16 *)((char *)v4 + 25), (void *)((char *)v4 + 25));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          double v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          double v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          __int128 v4 = v8;
        }

        while (!v9);
      }

      __int128 v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

char *sub_10101A258(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _OWORD *a4)
{
  uint64_t v6 = sub_10101A2DC(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    double v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 25) = *a4;
    sub_1000085FC(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_10101A2DC(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int16 *a5)
{
  unsigned int v5 = *a5;
  unsigned int v6 = *(unsigned __int16 *)((char *)a2 + 25);
  if (v5 == v6)
  {
    unsigned int v7 = a5[1];
    unsigned int v8 = *(unsigned __int16 *)((char *)a2 + 27);
    if (v7 == v8)
    {
      int v9 = *((_DWORD *)a5 + 1);
      int v10 = *(_DWORD *)((char *)a2 + 29);
      if (v9 >= v10)
      {
        if (v10 >= v9) {
          goto LABEL_31;
        }
LABEL_9:
        uint64_t v11 = a2[1];
        if (v11)
        {
          std::string::size_type v12 = (uint64_t *)a2[1];
          do
          {
            a4 = (uint64_t **)v12;
            std::string::size_type v12 = (uint64_t *)*v12;
          }

          while (v12);
        }

        else
        {
          unint64_t v23 = a2;
          do
          {
            a4 = (uint64_t **)v23[2];
            BOOL v17 = *a4 == v23;
            unint64_t v23 = (uint64_t *)a4;
          }

          while (!v17);
        }

        if (a4 != a1 + 1)
        {
          unsigned int v24 = *(unsigned __int16 *)((char *)a4 + 25);
          BOOL v25 = v5 >= v24;
          if (v5 == v24 && (v26 = a5[1], v27 = *(unsigned __int16 *)((char *)a4 + 27), BOOL v25 = v26 >= v27, v26 == v27))
          {
          }

          else if (v25)
          {
            return sub_10101A47C((uint64_t)a1, a3, a5);
          }
        }

        if (v11)
        {
          *a3 = (uint64_t *)a4;
        }

        else
        {
          *a3 = a2;
          return a2 + 1;
        }

        return (uint64_t *)a4;
      }

uint64_t *sub_10101A47C(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  __int128 v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    int v8 = *((_DWORD *)a3 + 1);
    while (1)
    {
      while (1)
      {
        int v9 = v4;
        unsigned int v10 = *(unsigned __int16 *)((char *)v4 + 25);
        if (v6 == v10) {
          break;
        }
        if (v6 >= v10)
        {
          if (v10 >= v6) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }

void sub_10101A50C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_10101A538(uint64_t a1, unsigned __int16 **a2, _DWORD *a3, _DWORD *a4)
{
  int v43 = 0;
  uint64_t v42 = 0LL;
  sub_100C0BA04(&v42, (_DWORD *)(a1 + 328));
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  unsigned int v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a2;
    int v8 = a2[1];
    sub_100C0B8E0((unsigned __int16 *)&v42, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    unsigned int v11 = *a2;
    unsigned int v12 = **a2;
    BOOL v13 = (unsigned __int16)v42 >= v12;
    if ((unsigned __int16)v42 == v12)
    {
      unsigned int v14 = v11[1];
      BOOL v13 = WORD1(v42) >= v14;
      if (WORD1(v42) == v14) {
        BOOL v13 = HIDWORD(v42) >= *((_DWORD *)v11 + 1);
      }
    }

    int v15 = !v13;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218498;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                           * (((char *)v8 - (char *)v9) >> 2);
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    int v48 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d",  (uint8_t *)&buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    uint64_t v24 = qword_101934A78;
    unsigned int v26 = *a2;
    BOOL v25 = a2[1];
    sub_100C0B8E0((unsigned __int16 *)&v42, &v44);
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned int v27 = &v44;
    }
    else {
      unsigned int v27 = (std::stringbuf::string_type *)v44.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v28 = *a2;
    unsigned int v29 = **a2;
    BOOL v30 = (unsigned __int16)v42 >= v29;
    if ((unsigned __int16)v42 == v29)
    {
      unsigned int v31 = v28[1];
      BOOL v30 = WORD1(v42) >= v31;
      if (WORD1(v42) == v31) {
        BOOL v30 = HIDWORD(v42) >= *((_DWORD *)v28 + 1);
      }
    }

    int v32 = !v30;
    LODWORD(__p.__r_.__value_.__l.__data_) = 134218498;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                           * (((char *)v25 - (char *)v26) >> 2);
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
    int v46 = v32;
    LODWORD(v41) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v24,  2LL,  "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d",  &__p,  v41,  v42);
    int v34 = v33;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEn try_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CL TilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  (const char *)v34);
    if (v34 != &buf) {
      free(v34);
    }
  }

  *a4 = 0;
  *a3 = 0;
  uint64_t v16 = *a2;
  BOOL v17 = a2[1];
  __p.__r_.__value_.__s.__data_[0] = 0;
  unsigned int v18 = sub_10101AE00(v16, v17, (unsigned __int16 *)&v42);
  unsigned int v19 = v18;
  if (*a2 == v18)
  {
    *a3 = *((_DWORD *)v18 + 2);
    *a4 = *((_DWORD *)v18 + 2) + 1;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    BOOL v20 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      sub_100C0B8E0(v19, &buf);
      unsigned int v21 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &buf
          : (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "TILE: index search, match, %s",  (uint8_t *)&__p,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      uint64_t v35 = qword_101934A78;
      sub_100C0B8E0(v19, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v36 = &__p;
      }
      else {
        uint64_t v36 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(v44.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v35,  2LL,  "TILE: index search, match, %s",  (const char *)&v44);
      std::stringbuf::string_type v38 = v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLon Entry_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  (const char *)v38);
      if (v38 != &buf) {
        free(v38);
      }
    }

    return 1LL;
  }

  if (a2[1] != v18)
  {
    *a3 = *((_DWORD *)v18 - 1);
    *a4 = *((_DWORD *)v18 + 2);
    return 1LL;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  unint64_t v23 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "TILE: index search, not found",  (uint8_t *)&buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v41) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: index search, not found",  &__p,  v41);
    char v40 = (std::stringbuf::string_type *)v39;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEn try_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CL TilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v39);
    if (v40 != &buf) {
      free(v40);
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_10101AB78(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int16 *a5, _OWORD *a6)
{
  if (!a3)
  {
    uint64_t v21 = 0LL;
    int v13 = 0;
    goto LABEL_20;
  }

  unsigned int v9 = a3;
  int v11 = 0;
  int v12 = 1;
  while (1)
  {
    int v13 = v12;
    memset(buf, 0, sizeof(buf));
    sub_100C0B704((unsigned __int16 *)((v11 + (v9 >> 1)) * a4 + a2), (uint64_t)buf);
    unsigned int v14 = *a5;
    BOOL v15 = *(unsigned __int16 *)buf >= v14;
    if (*(unsigned __int16 *)buf == v14)
    {
      unsigned int v16 = a5[1];
      BOOL v15 = *(unsigned __int16 *)&buf[2] >= v16;
    }

    BOOL v18 = !v15;
LABEL_10:
    BOOL v19 = !v18;
    if (v18) {
      int v20 = (v9 >> 1) + 1;
    }
    else {
      int v20 = 0;
    }
    v11 += v20;
    if (v19) {
      v9 >>= 1;
    }
    else {
      v9 -= (v9 >> 1) + 1;
    }
    int v12 = v13 + 1;
    if (!v9)
    {
      uint64_t v21 = 0LL;
      goto LABEL_20;
    }
  }

  int v17 = *((_DWORD *)a5 + 1);
  if (*(_DWORD *)&buf[4] != v17)
  {
    BOOL v18 = *(_DWORD *)&buf[4] < v17;
    goto LABEL_10;
  }

  *a6 = *(_OWORD *)buf;
  uint64_t v21 = 1LL;
LABEL_20:
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  unsigned int v22 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v21;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    v26[0] = 67109376;
    v26[1] = v21;
    __int16 v27 = 1024;
    int v28 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u",  v26,  14);
    BOOL v25 = (uint8_t *)v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEn try_CoarseCell>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_ T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLa tLonEntry_CoarseCell]",  "%s\n",  v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  return v21;
}

unsigned __int16 *sub_10101AE00(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != result)
  {
    unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)result) >> 2);
    unsigned int v4 = *a3;
    unsigned int v5 = a3[1];
    do
    {
      unint64_t v6 = v3 >> 1;
      unsigned int v7 = &result[6 * (v3 >> 1)];
      unsigned int v8 = *v7;
      BOOL v9 = v8 >= v4;
      if (v8 == v4)
      {
        unsigned int v10 = result[6 * v6 + 1];
        BOOL v9 = v10 >= v5;
        if (v10 == v5) {
          BOOL v9 = *(_DWORD *)&result[6 * v6 + 2] >= *((_DWORD *)a3 + 1);
        }
      }

      if (!v9)
      {
        BOOL result = v7 + 6;
        unint64_t v6 = v3 + ~v6;
      }

      unint64_t v3 = v6;
    }

    while (v6);
  }

  return result;
}

char *sub_10101AE74(uint64_t **a1, unsigned __int16 *a2, _OWORD *a3)
{
  unsigned int v5 = sub_10101A47C((uint64_t)a1, &v9, a2);
  unint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    unint64_t v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 25) = *a3;
    sub_1000085FC(a1, v9, v7, (uint64_t *)v6);
  }

  return v6;
}

BOOL sub_10101AEF4( uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4, unsigned __int16 *a5, _DWORD *a6, _DWORD *a7)
{
  int v26 = 0;
  uint64_t v25 = 0LL;
  if (!a3) {
    goto LABEL_22;
  }
  unsigned int v13 = 0;
  unsigned int v14 = a3;
  do
  {
    sub_100C0B8B0((unsigned __int16 *)((char *)a2 + (v13 + (v14 >> 1)) * a4), (uint64_t)&v25);
    unsigned int v15 = *a5;
    BOOL v16 = (unsigned __int16)v25 >= v15;
    if ((unsigned __int16)v25 == v15)
    {
      unsigned int v17 = a5[1];
      BOOL v16 = WORD1(v25) >= v17;
      if (WORD1(v25) == v17) {
        BOOL v16 = HIDWORD(v25) >= *((_DWORD *)a5 + 1);
      }
    }

    int v18 = !v16;
    unsigned int v19 = v14 >> 1;
    if (v18) {
      v14 -= (v14 >> 1) + 1;
    }
    else {
      v14 >>= 1;
    }
    if (v18) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 0;
    }
    v13 += v20;
  }

  while (v14);
  if (v13) {
    BOOL v21 = v13 >= a3;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    sub_100C0B8B0((unsigned __int16 *)((char *)a2 + v13 * a4), (uint64_t)&v25);
    *a7 = v26;
    sub_100C0B8B0((unsigned __int16 *)((char *)a2 + (v13 - 1) * a4), (uint64_t)&v25);
    BOOL v22 = 1;
    int v23 = v26;
    goto LABEL_29;
  }

  if (v13)
  {
LABEL_22:
    int v23 = 0;
    BOOL v22 = 0;
    *a7 = 0;
    goto LABEL_29;
  }

  sub_100C0B8B0(a2, (uint64_t)&v25);
  if (__PAIR64__(WORD1(v25), (unsigned __int16)v25) == __PAIR64__(a5[1], *a5))
  {
    BOOL v22 = HIDWORD(v25) == *((_DWORD *)a5 + 1);
    if (HIDWORD(v25) == *((_DWORD *)a5 + 1)) {
      int v23 = v26;
    }
    else {
      int v23 = 0;
    }
  }

  else
  {
    BOOL v22 = 0;
    int v23 = 0;
  }

  *a7 = v23;
LABEL_29:
  *a6 = v23;
  return v22;
}

uint64_t sub_10101B080(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t result = sub_10101B0F0(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == result) {
    return v3;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = *(unsigned __int16 *)(result + 25);
  BOOL v7 = v5 >= v6;
  if (v5 != v6 || (unsigned int v8 = a2[1], v9 = *(unsigned __int16 *)(result + 27), v7 = v8 >= v9, v8 != v9))
  {
    if (v7) {
      return result;
    }
    return v3;
  }

  if (*((_DWORD *)a2 + 1) < *(_DWORD *)(result + 29)) {
    return v3;
  }
  return result;
}

uint64_t sub_10101B0F0(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unsigned int v5 = *a2;
    unsigned int v6 = a2[1];
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(a3 + 25);
      BOOL v8 = v7 >= v5;
      else {
        BOOL v10 = !v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        int v12 = (uint64_t *)(a3 + 8);
      }
      else {
        int v12 = (uint64_t *)a3;
      }
      if (v11) {
        uint64_t result = a3;
      }
      a3 = *v12;
    }

    while (*v12);
  }

  return result;
}

uint64_t sub_10101B14C()
{
  unsigned __int8 v0 = operator new(0x10uLL);
  uint64_t result = sub_1002E4C3C(v0, "CLCoarseCellTile-Mutex", 1LL, 1LL);
  qword_10199FEF8 = (uint64_t)v0;
  return result;
}

void sub_10101B18C(_Unwind_Exception *a1)
{
}

double sub_10101B1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100535C94(a1, a2);
  *uint64_t v2 = &off_101894A60;
  *(void *)&double result = 0x1500000029LL;
  v2[1738] = 0x1500000029LL;
  v2[1739] = &unk_1013BEF28;
  return result;
}

void sub_10101B1D8(uint64_t a1, int a2, int a3)
{
  int v4 = a2 - 2 * a3;
  uint64_t v5 = *(void *)(a1 + 2104);
  if (v4 < *(unsigned __int16 *)(v5 + 30))
  {
    int64_t v6 = v4;
    int v7 = a2 - 2 * a3 - 40;
    do
    {
      float v8 = *(float *)sub_100208A44((unsigned __int16 *)(v5 + 28), v6);
      float v9 = *(float *)sub_100208A44((unsigned __int16 *)(*(void *)(a1 + 2104) + 1076LL), v6);
      BOOL v10 = (float *)sub_100208A44((unsigned __int16 *)(*(void *)(a1 + 2104) + 2124LL), v6);
      if (v6 < 40)
      {
        float v11 = *v10;
        if ((v6 & 1) == 0)
        {
LABEL_7:
          uint64_t v12 = *(unsigned __int16 *)(a1 + 2142);
          unint64_t v13 = *(unsigned int *)(a1 + 2144);
          uint64_t v14 = *(unsigned __int16 *)(a1 + 2140);
          if (v14 + v12 >= v13) {
            uint64_t v15 = *(unsigned int *)(a1 + 2144);
          }
          else {
            uint64_t v15 = 0LL;
          }
          *(float *)(a1 + 2148 + 4 * (v14 + v12 - v15)) = v8;
          if (v13 <= v12)
          {
            if (v14 + 1 < v13) {
              LOWORD(v13) = 0;
            }
            *(_WORD *)(a1 + 2140) = v14 + 1 - v13;
          }

          else
          {
            *(_WORD *)(a1 + 2142) = v12 + 1;
          }

          *(_BYTE *)(a1 + 2124) = 1;
          uint64_t v16 = *(unsigned __int16 *)(a1 + 3190);
          unint64_t v17 = *(unsigned int *)(a1 + 3192);
          uint64_t v18 = *(unsigned __int16 *)(a1 + 3188);
          if (v18 + v16 >= v17) {
            uint64_t v19 = *(unsigned int *)(a1 + 3192);
          }
          else {
            uint64_t v19 = 0LL;
          }
          *(float *)(a1 + 3196 + 4 * (v18 + v16 - v19)) = v9;
          if (v17 <= v16)
          {
            if (v18 + 1 < v17) {
              LOWORD(v17) = 0;
            }
            *(_WORD *)(a1 + 3188) = v18 + 1 - v17;
          }

          else
          {
            *(_WORD *)(a1 + 3190) = v16 + 1;
          }

          *(_BYTE *)(a1 + 3172) = 1;
          uint64_t v20 = *(unsigned __int16 *)(a1 + 4238);
          unint64_t v21 = *(unsigned int *)(a1 + 4240);
          uint64_t v22 = *(unsigned __int16 *)(a1 + 4236);
          if (v22 + v20 >= v21) {
            uint64_t v23 = *(unsigned int *)(a1 + 4240);
          }
          else {
            uint64_t v23 = 0LL;
          }
          *(float *)(a1 + 4244 + 4 * (v22 + v20 - v23)) = v11;
          if (v21 <= v20)
          {
            if (v22 + 1 < v21) {
              LOWORD(v21) = 0;
            }
            *(_WORD *)(a1 + 4236) = v22 + 1 - v21;
          }

          else
          {
            *(_WORD *)(a1 + 4238) = v20 + 1;
          }

          *(_BYTE *)(a1 + 4220) = 1;
        }
      }

      else
      {
        float v8 = sub_10101B3F8(a1 + 13904, (unsigned __int16 *)(*(void *)(a1 + 2104) + 28LL), v7);
        float v9 = sub_10101B3F8(a1 + 13904, (unsigned __int16 *)(*(void *)(a1 + 2104) + 1076LL), v7);
        float v11 = sub_10101B3F8(a1 + 13904, (unsigned __int16 *)(*(void *)(a1 + 2104) + 2124LL), v7);
        if ((v6 & 1) == 0) {
          goto LABEL_7;
        }
      }

      ++v6;
      uint64_t v5 = *(void *)(a1 + 2104);
      ++v7;
    }

    while (v6 < *(unsigned __int16 *)(v5 + 30));
  }

  *(void *)(a1 + 2112) = *(void *)v5;
}

float sub_10101B3F8(uint64_t a1, unsigned __int16 *a2, int a3)
{
  if (a3 < 0 || a2[1] <= (unint64_t)(a3 + *(_DWORD *)a1 - 1))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894AD8);
    }
    unint64_t v17 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v18 = *(_DWORD *)a1;
      uint64_t v19 = a2[1];
      *(_DWORD *)std::stringbuf::string_type buf = 67109632;
      int v30 = a3;
      __int16 v31 = 1024;
      int v32 = v18;
      __int16 v33 = 2048;
      uint64_t v34 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "Assertion failed: (offset >= 0) && (offset + fFullTapCount - 1 < samples.size()), file /Library/Caches/com.apple .xbs/Sources/CoreLocation/Oscar/CMSymmetricFirFilter.h, line 37,offset,%d,fullTapCount,%d,samplesSize,%zu.",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894AD8);
      }
      int v20 = *(_DWORD *)a1;
      uint64_t v21 = a2[1];
      LODWORD(v24) = 67109632;
      HIDWORD(v24) = a3;
      __int16 v25 = 1024;
      int v26 = v20;
      __int16 v27 = 2048;
      uint64_t v28 = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: (offset >= 0) && (offset + fFullTapCount - 1 < samples.size()), file /Library/Caches/com.apple .xbs/Sources/CoreLocation/Oscar/CMSymmetricFirFilter.h, line 37,offset,%d,fullTapCount,%d,samplesSize,%zu.",  &v24,  24,  v24);
      uint64_t v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "SampleType CMSymmetricFirFilter<float>::batchFilter(const CMQueue<SampleType> &, int) const [T = float, SampleType = float]",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }
  }

  int v6 = *(_DWORD *)a1;
  else {
    int v7 = v6 + 1;
  }
  if (v6 < 2)
  {
    int v15 = v7 >> 1;
    float v9 = 0.0;
    if ((v6 & 1) == 0) {
      return v9;
    }
    return v9 + (float)(*(float *)sub_100208A44(a2, v15 + a3) * **(float **)(a1 + 8));
  }

  uint64_t v8 = 0LL;
  float v9 = 0.0;
  int v10 = -1;
  do
  {
    float v11 = *(float *)sub_100208A44(a2, a3 + v8);
    uint64_t v12 = (float *)sub_100208A44(a2, a3 + v10 + *(_DWORD *)a1);
    int v13 = *(_DWORD *)a1;
    float v9 = v9 + (float)((float)(v11 + *v12) * *(float *)(*(void *)(a1 + 8) + 4LL * (v10 + *(_DWORD *)(a1 + 4))));
    ++v8;
    else {
      int v14 = v13 + 1;
    }
    int v15 = v14 >> 1;
    --v10;
  }

  while (v8 < v15);
  if ((v13 & 1) != 0) {
    return v9 + (float)(*(float *)sub_100208A44(a2, v15 + a3) * **(float **)(a1 + 8));
  }
  return v9;
}

void sub_10101B6D0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)uint64_t v5 = 0x10000000000LL;
  sub_10101B764((uint64_t)v5, a2 + 16);
  sub_1002E653C(v5);
  sub_100FBFFEC(a1 + 8432, a3, v5);
}

void sub_10101B764(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  if (*(_DWORD *)(a2 + 4) != *(_DWORD *)(a1 + 4))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894AD8);
    }
    int v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 4);
      uint64_t v8 = *(unsigned int *)(a2 + 4);
      *(_DWORD *)std::stringbuf::string_type buf = 134218240;
      uint64_t v18 = v7;
      __int16 v19 = 2048;
      uint64_t v20 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Assertion failed: rhs.capacity() == capacity(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CM Queue.h, line 70,capacity,%zu,%zu.",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894AD8);
      }
      uint64_t v9 = *(unsigned int *)(a1 + 4);
      uint64_t v10 = *(unsigned int *)(a2 + 4);
      int v13 = 134218240;
      uint64_t v14 = v9;
      __int16 v15 = 2048;
      uint64_t v16 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: rhs.capacity() == capacity(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CM Queue.h, line 70,capacity,%zu,%zu.",  (size_t)&v13,  22);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CMQueue<float>::deepCopy(const CMQueue<T> &) [T = float]",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  if (*(_WORD *)(a2 + 2))
  {
    unint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = (_DWORD *)sub_100208A44((unsigned __int16 *)a2, v4);
      sub_1005CAE5C((unsigned __int16 *)a1, v5);
      ++v4;
    }

    while (v4 < *(unsigned __int16 *)(a2 + 2));
  }

void sub_10101B980(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_10101B9AC(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *double result = off_101868780;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    unint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  return result;
}

void *sub_10101B9E0(uint64_t a1, uint64_t a2)
{
  int v3 = 9;
  double result = (void *)sub_100595C90(a1, &v3, qword_10199FF00, a2);
  result[41] = result + 41;
  result[42] = result + 41;
  result[43] = 0LL;
  result[44] = result + 44;
  result[45] = result + 44;
  result[46] = 0LL;
  *double result = off_101894B08;
  return result;
}

void sub_10101BA3C(void *a1)
{
  uint64_t v1 = (void *)sub_10101FC28(a1);
  operator delete(v1);
}

uint64_t sub_10101BA50()
{
  return 380LL;
}

double sub_10101BA58()
{
  return 0.5;
}

uint64_t sub_10101BA60()
{
  return 1000LL;
}

uint64_t sub_10101BA68(uint64_t a1, std::string::value_type *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  v73[0] = (uint64_t)v73;
  v73[1] = (uint64_t)v73;
  uint64_t v74 = 0LL;
  sub_100C0FAA0(a1, a2);
  int v5 = sub_100C124C8((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894CB8);
  }
  int v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = v74;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 16LL))(__p, a1);
    uint64_t v8 = v76[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)std::stringbuf::string_type buf = 134218498;
    *(void *)int v78 = v7;
    *(_WORD *)&v78[8] = 2080;
    *(void *)uint64_t v79 = a2;
    *(_WORD *)&v79[8] = 2080;
    *(void *)&v79[10] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s, id, %s",  buf,  0x20u);
    if ((v76[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894CB8);
    }
    uint64_t v42 = qword_101934A78;
    uint64_t v43 = v74;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16LL))(&v70, a1);
    if (v72 >= 0) {
      std::stringbuf::string_type v44 = &v70;
    }
    else {
      std::stringbuf::string_type v44 = v70;
    }
    *(_DWORD *)std::stringbuf::string_type __p = 134218498;
    *(void *)&__p[4] = v43;
    *(_WORD *)&_BYTE __p[12] = 2080;
    *(void *)uint64_t v76 = a2;
    *(_WORD *)&v76[8] = 2080;
    *(void *)&v76[10] = v44;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v42,  2LL,  "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s, id, %s",  __p,  32,  v50);
    int v46 = v45;
    if (SHIBYTE(v72) < 0) {
      operator delete(v70);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppR ecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationInd exEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v46);
  }

  sub_1001B4C40((void *)(a1 + 328));
  (*(void (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
  double v68 = 0.0;
  double v69 = 0.0;
  int v9 = 0;
  if (v5)
  {
    int v10 = 0;
    while (2)
    {
      int v11 = 0;
      int v12 = v9;
      double v13 = (double)v10;
      LODWORD(v51) = v10;
      HIDWORD(v51) = v9 + 20;
      do
      {
        double v67 = (*(double (**)(uint64_t))(*(void *)a1 + 56LL))(a1) / 20.0 + 0.0;
        double v66 = (*(double (**)(uint64_t))(*(void *)a1 + 64LL))(a1) / 20.0 + 0.0;
        uint64_t v70 = &v70;
        BOOL v71 = &v70;
        uint64_t v72 = 0LL;
        uint64_t v63 = (uint64_t)&v63;
        uint64_t v64 = &v63;
        uint64_t v65 = 0LL;
        double v14 = sub_1008ADB4C(a1 + 48);
        double v69 = v14 + v67 * v13;
        double v15 = sub_1008ADB70(a1 + 48);
        double v68 = v15 + v66 * (double)v11;
        (*(void (**)(uint64_t, double *, double *, double *, double *, void, void, uint64_t *))(*(void *)a1 + 176LL))( a1,  &v69,  &v68,  &v67,  &v66,  0LL,  0LL,  &v63);
        (*(void (**)(uint64_t, double *, double *, double *, double *, uint64_t, void, void **))(*(void *)a1 + 176LL))( a1,  &v69,  &v68,  &v67,  &v66,  1LL,  0LL,  &v70);
        int v52 = v11;
        uint64_t v16 = v71;
        uint64_t v54 = v72;
        uint64_t v55 = v65;
        while (v16 != &v70)
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
          double v17 = sub_1008ADB4C(a1 + 48);
          (*(void (**)(uint64_t, double))(*(void *)a1 + 56LL))(a1, v17);
          (*(void (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
          double v18 = sub_1008ADB70(a1 + 48);
          (*(void (**)(uint64_t, double))(*(void *)a1 + 64LL))(a1, v18);
          uint64_t v16 = (void **)v16[1];
        }

        for (uint64_t i = v64; i != &v63; uint64_t i = (uint64_t *)i[1])
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
          double v20 = sub_1008ADB4C(a1 + 48);
          (*(void (**)(uint64_t, double))(*(void *)a1 + 56LL))(a1, v20);
          (*(void (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
          double v21 = sub_1008ADB70(a1 + 48);
          (*(void (**)(uint64_t, double))(*(void *)a1 + 64LL))(a1, v21);
        }

        sub_10101FE00((uint64_t)v60, (uint64_t)v71, (uint64_t)&v70);
        sub_10101FE00((uint64_t)&v57, (uint64_t)v64, (uint64_t)&v63);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101894CB8);
        }
        uint64_t v22 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 134218752;
          *(double *)int v78 = v69;
          *(_WORD *)&v78[8] = 2048;
          *(double *)uint64_t v79 = v68;
          *(_WORD *)&v79[8] = 2048;
          *(void *)&v79[10] = v59;
          *(_WORD *)&v79[18] = 2048;
          *(void *)&v79[20] = v62;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "TILE: searched for, location, %.10lf, %.10lf, setLinear, %lu, setIndex, %lu",  buf,  0x2Au);
        }

        int v53 = v12;
        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101894CB8);
          }
          *(_DWORD *)std::stringbuf::string_type __p = 134218752;
          *(double *)&__p[4] = v69;
          *(_WORD *)&_BYTE __p[12] = 2048;
          *(double *)uint64_t v76 = v68;
          *(_WORD *)&v76[8] = 2048;
          *(void *)&v76[10] = v59;
          *(_WORD *)&v76[18] = 2048;
          *(void *)&v76[20] = v62;
          LODWORD(v49) = 42;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: searched for, location, %.10lf, %.10lf, setLinear, %lu, setIndex, %lu",  COERCE_DOUBLE(__p),  v49,  v50,  *(void *)&v51);
          std::stringbuf::string_type v37 = (uint8_t *)v36;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type ::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecom mendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v36);
          if (v37 != buf) {
            free(v37);
          }
        }

        uint64_t v23 = v57;
        if (v57 != &v58)
        {
          int v24 = 0;
          do
          {
            (*(void (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
            double v25 = sub_1008ADB4C(a1 + 48);
            (*(void (**)(uint64_t, double))(*(void *)a1 + 56LL))(a1, v25);
            (*(void (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
            double v26 = sub_1008ADB70(a1 + 48);
            (*(void (**)(uint64_t, double))(*(void *)a1 + 64LL))(a1, v26);
            if (&v61 == (void **)sub_101020110((uint64_t)v60, (unsigned __int16 *)&v65))
            {
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              ++v24;
              __int16 v27 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
              {
                sub_100C34680((unsigned __int16 *)&v65, (std::stringbuf::string_type *)__p);
                uint64_t v28 = __p;
                if (v76[9] < 0) {
                  uint64_t v28 = *(_BYTE **)__p;
                }
                *(_DWORD *)std::stringbuf::string_type buf = 136315906;
                *(void *)int v78 = v28;
                *(_WORD *)&v78[8] = 1024;
                *(_DWORD *)uint64_t v79 = v24;
                *(_WORD *)&v79[4] = 2048;
                *(double *)&v79[6] = v69;
                *(_WORD *)&v79[14] = 2048;
                *(double *)&v79[16] = v68;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "TILE: not in index, %s, count, %3u, locationd, %.10lf, %.10lf",  buf,  0x26u);
                if ((v76[9] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934A70 != -1) {
                  dispatch_once(&qword_101934A70, &stru_101894CB8);
                }
                uint64_t v32 = qword_101934A78;
                sub_100C34680((unsigned __int16 *)&v65, &v56);
                __int16 v33 = &v56;
                if ((v56.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  __int16 v33 = (std::stringbuf::string_type *)v56.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::stringbuf::string_type __p = 136315906;
                *(void *)&__p[4] = v33;
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)uint64_t v76 = v24;
                *(_WORD *)&v76[4] = 2048;
                *(double *)&v76[6] = v69;
                *(_WORD *)&v76[14] = 2048;
                *(double *)&v76[16] = v68;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v32,  2LL,  "TILE: not in index, %s, count, %3u, locationd, %.10lf, %.10lf",  __p,  38,  *(double *)&v50,  v51);
                uint64_t v35 = v34;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManage r_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Ty pe::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v35);
              }
            }

            unsigned int v29 = v23[1];
            if (v29)
            {
              do
              {
                int v30 = (void **)v29;
                unsigned int v29 = (void *)*v29;
              }

              while (v29);
            }

            else
            {
              do
              {
                int v30 = (void **)v23[2];
                BOOL v31 = *v30 == v23;
                uint64_t v23 = v30;
              }

              while (!v31);
            }

            uint64_t v23 = v30;
          }

          while (v30 != &v58);
        }

        int v12 = v53 + 1;
        sub_100008390((uint64_t)&v57, v58);
        sub_100008390((uint64_t)v60, v61);
        sub_1001B4C40(&v63);
        sub_1001B4C40(&v70);
        if (v54 != v55)
        {
          uint64_t v38 = 0LL;
          int v9 = v53 + 1;
          goto LABEL_63;
        }

        int v11 = v52 + 1;
      }

      while (v52 != 19);
      int v10 = LODWORD(v51) + 1;
      uint64_t v38 = 1LL;
      int v9 = HIDWORD(v51);
      if (LODWORD(v51) < 0x13) {
        continue;
      }
      break;
    }
  }

  else
  {
    uint64_t v38 = 0LL;
  }

void sub_10101C628( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40)
{
}

void *sub_10101C6C4(uint64_t a1)
{
  return sub_1001B4C40((void *)(a1 + 352));
}

void sub_10101C6F0(void *a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894CB8);
  }
  int v10 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v11 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)std::stringbuf::string_type buf = 67109378;
    *(_DWORD *)std::stringbuf::string_type v112 = v11;
    *(_WORD *)&v112[4] = 2080;
    *(void *)&v112[6] = sub_100C0B634(v11);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "TILE: CLSpatialDataTileTemplate, parsing, sectionId, %d, %s",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894CB8);
    }
    uint64_t v77 = qword_101934A78;
    unsigned int v78 = *(unsigned __int16 *)(a3 + 2);
    uint64_t v79 = sub_100C0B634(v78);
    *(_DWORD *)std::stringbuf::string_type __p = 67109378;
    *(_DWORD *)&__p[4] = v78;
    *(_WORD *)&__p[8] = 2080;
    *(void *)&__p[10] = v79;
    LODWORD(v88) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v77,  2LL,  "TILE: CLSpatialDataTileTemplate, parsing, sectionId, %d, %s",  __p,  v88);
    uint64_t v81 = (uint8_t *)v80;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppR ecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const C LTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTi lesManager_Type::AppRecommendationEntry]",  "%s\n",  v80);
    if (v81 != buf) {
      free(v81);
    }
  }

  int v101 = 568250;
  __int128 v102 = xmmword_1013BEFA0;
  unsigned int v103 = 4;
  int v98 = 633786;
  __int128 v99 = xmmword_1013BEFB0;
  uint64_t v100 = 0xA000600000000LL;
  int v96 = 699322;
  __int128 v97 = xmmword_1013BEFC0;
  int v12 = *(unsigned __int16 *)(a3 + 2);
  if (v12 != 10)
  {
    if (v12 != 9)
    {
      if (v12 == 8)
      {
        sub_100C0C23C(a4, (uint64_t)&v101);
        int v13 = DWORD2(v102);
        int v14 = HIDWORD(v102);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101894CB8);
        }
        double v15 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 67109376;
          *(_DWORD *)std::stringbuf::string_type v112 = DWORD2(v102);
          *(_WORD *)&v112[4] = 1024;
          *(_DWORD *)&v112[6] = HIDWORD(v102);
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "TILE: CLSpatialDataTileTemplate, index, height, %u, width, %u",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101894CB8);
          }
          *(_DWORD *)std::stringbuf::string_type __p = 67109376;
          *(_DWORD *)&__p[4] = DWORD2(v102);
          *(_WORD *)&__p[8] = 1024;
          *(_DWORD *)&__p[10] = HIDWORD(v102);
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: CLSpatialDataTileTemplate, index, height, %u, width, %u",  __p,  14);
          uint64_t v83 = (uint8_t *)v82;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type ::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const voi d *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v82);
          if (v83 != buf) {
            free(v83);
          }
        }

        uint64_t v16 = (v14 * v13);
        double v17 = (uint8_t *)sub_100599BF4((uint64_t)a1, a2, a3, 0, v14 * v13, v103);
        if (v17)
        {
          LODWORD(v93) = 0;
          if ((_DWORD)v16)
          {
            uint64_t v18 = 0LL;
            int v19 = 0;
            do
            {
              sub_100C0C22C((unsigned int *)&v17[v18 * v103], &v93);
              if (!*(_BYTE *)(a5 + 9))
              {
                if (qword_101934A70 != -1) {
                  dispatch_once(&qword_101934A70, &stru_101894CB8);
                }
                double v20 = (os_log_s *)qword_101934A78;
                if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
                {
                  int v21 = v93;
                  sub_101020190((unsigned int *)&v93, (std::stringbuf::string_type *)__p);
                  uint64_t v22 = __p;
                  if (v106[3] < 0) {
                    uint64_t v22 = *(_BYTE **)__p;
                  }
                  *(_DWORD *)std::stringbuf::string_type buf = 134218754;
                  *(void *)std::stringbuf::string_type v112 = v18;
                  *(_WORD *)&v112[8] = 1024;
                  *(_DWORD *)&v112[10] = v16;
                  __int16 v113 = 1024;
                  *(_DWORD *)__int128 v114 = v21 - v19;
                  *(_WORD *)&v114[4] = 2080;
                  *(void *)&v114[6] = v22;
                  _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "TILE: index entry, %3lu, %3u, step, %04d, %s",  buf,  0x22u);
                  if ((v106[3] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934A70 != -1) {
                    dispatch_once(&qword_101934A70, &stru_101894CB8);
                  }
                  int v91 = (const char *)qword_101934A78;
                  int v23 = v93;
                  sub_101020190((unsigned int *)&v93, &v95);
                  int v24 = &v95;
                  if ((v95.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    int v24 = (std::stringbuf::string_type *)v95.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)std::stringbuf::string_type __p = 134218754;
                  *(void *)&__p[4] = v18;
                  *(_WORD *)&_BYTE __p[12] = 1024;
                  *(_DWORD *)&_BYTE __p[14] = v16;
                  __int16 v105 = 1024;
                  *(_DWORD *)unsigned int v106 = v23 - v19;
                  *(_WORD *)&v106[4] = 2080;
                  *(void *)&v106[6] = v24;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v91,  2LL,  "TILE: index entry, %3lu, %3u, step, %04d, %s",  __p,  34,  v89,  v91);
                  double v26 = v25;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesMana ger_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHea der &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRe commendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v26);
                }
              }

              int v19 = v93;
              ++v18;
            }

            while (v16 != v18);
          }

void sub_10101D930(uint64_t a1, double *a2, double *a3, double *a4, double *a5, int a6, int a7, uint64_t *a8)
{
  HIDWORD(v197) = a7;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894CB8);
  }
  *(void *)v213 = a1;
  int v12 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v13 = *a2;
    double v14 = *a3;
    double v15 = *a4;
    double v16 = *a5;
    uint64_t v17 = a8[2];
    *(_DWORD *)std::stringbuf::string_type buf = 134219520;
    *(double *)&uint8_t buf[4] = v13;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(double *)&buf[14] = v14;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v15;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&_BYTE buf[34] = v16;
    *(_WORD *)&buf[42] = 1024;
    *(_DWORD *)&buf[44] = a6;
    *(_WORD *)&buf[48] = 1024;
    *(_DWORD *)v262 = HIDWORD(v197);
    *(_WORD *)&v262[4] = 2048;
    *(void *)&v262[6] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "TILE: getEntriesForArea, input, swLatitude, %.8lf, swLongitude, %.8lf, search, %.8lf, %.8lf, isUseIndex, %d, inclu deRegionalEntries, %d, entries, %lu",  buf,  0x40u);
  }

  int v198 = a5;
  double v199 = *(double *)&a4;
  LODWORD(v197) = a6;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894CB8);
    }
    double v154 = *a2;
    double v155 = *a3;
    double v156 = *a4;
    double v157 = *a5;
    uint64_t v158 = a8[2];
    int v251 = 134219520;
    uint64_t v252 = *(void *)&v154;
    *(_WORD *)v253 = 2048;
    *(double *)&v253[2] = v155;
    *(_WORD *)&v253[10] = 2048;
    *(double *)&v253[12] = v156;
    LOWORD(v254) = 2048;
    *(double *)((char *)&v254 + 2) = v157;
    WORD5(v254) = 1024;
    HIDWORD(v254) = a6;
    __int16 v255 = 1024;
    int v256 = HIDWORD(v197);
    __int16 v257 = 2048;
    uint64_t v258 = v158;
    LODWORD(v191) = 64;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: getEntriesForArea, input, swLatitude, %.8lf, swLongitude, %.8lf, search, %.8lf, %.8lf, isUseIndex, %d, inclu deRegionalEntries, %d, entries, %lu",  COERCE_DOUBLE(&v251),  v191,  v192,  v193,  v195,  a6,  a5);
    __int128 v160 = (char *)v159;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppR ecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTiles Manager_Type::AppRecommendationEntry]",  "%s\n",  v159);
    if (v160 != buf) {
      free(v160);
    }
  }

  double v196 = COERCE_DOUBLE(clock());
  uint64_t v252 = 176LL;
  int v251 = 306106;
  *(_DWORD *)v253 = 381;
  int v259 = 0;
  uint64_t v260 = 0LL;
  *(_OWORD *)&v253[4] = 0u;
  __int128 v254 = 0u;
  int v235 = 568250;
  __int128 v236 = xmmword_1013BEFA0;
  unsigned int v237 = 4;
  uint64_t v234 = 0LL;
  int v233 = 43962;
  int v230 = 633786;
  __int128 v231 = xmmword_1013BEFB0;
  uint64_t v232 = 0xA000600000000LL;
  int v228 = 699322;
  __int128 v229 = xmmword_1013BEFC0;
  double v18 = sub_1008ADB4C(a1 + 48);
  double v19 = sub_1008ADB70(a1 + 48);
  double v20 = (*(double (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
  double v22 = *a2;
  double v23 = *a3;
  double v24 = *a4;
  if (*a2 > v18 || v22 + v24 < v18)
  {
    BOOL v25 = v18 <= v22;
    if (v18 + v20 < v22) {
      BOOL v25 = 0;
    }
  }

  else
  {
    BOOL v25 = 1;
  }

  double v26 = *v198;
  if (v23 > v19 || v23 + v26 < v19)
  {
    BOOL v27 = v19 <= v23;
    if (v19 + v21 < v23) {
      BOOL v27 = 0;
    }
  }

  else
  {
    BOOL v27 = 1;
  }

  if (v25 && v27)
  {
    if (v22 > v18) {
      double v28 = *a2;
    }
    else {
      double v28 = v18;
    }
    if (v23 > v19) {
      double v29 = *a3;
    }
    else {
      double v29 = v19;
    }
    if (v28 + v24 >= v18 + v20) {
      double v30 = v18 + v20 - v28;
    }
    else {
      double v30 = *a4;
    }
    double v31 = v19 + v21;
    if (v29 + v26 >= v31) {
      double v32 = v31 - v29;
    }
    else {
      double v32 = *v198;
    }
    double v214 = v30;
    double v215 = v32;
    char v205 = (char *)sub_100595CF0(a1, &v238, &v239);
    uint64_t v33 = 0LL;
    BOOL v34 = v205 != 0LL;
    if (v205)
    {
      uint64_t v221 = 0LL;
      uint64_t v210 = 0LL;
      if (v238)
      {
        uint64_t v210 = 0LL;
        uint64_t v221 = 0LL;
        uint64_t v33 = 0LL;
        size_t v35 = 0LL;
        while (1)
        {
          uint64_t v36 = v33;
          unint64_t v37 = (unsigned __int16 *)&v205[v35];
          sub_1009831E8((unsigned __int16 *)&v205[v35], (uint64_t)&v233);
          if ((unsigned __int16)v233 != 43962)
          {
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101894CB8);
            }
            uint64_t v74 = (os_log_s *)qword_101934A78;
            if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::stringbuf::string_type buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v233;
              _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "TILE: invalid section, signature, 0x%x, stopping",  buf,  8u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              *(_DWORD *)v241 = 67109120;
              *(_DWORD *)&v241[4] = (unsigned __int16)v233;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: invalid section, signature, 0x%x, stopping",  v241);
              __int128 v164 = (char *)v163;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_ Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const d ouble &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationInd exEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v163);
              if (v164 != buf) {
                free(v164);
              }
            }

void sub_10101FB90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, void *a42)
{
}

uint64_t sub_10101FC28(void *a1)
{
  *a1 = off_101894C00;
  sub_1001B4C40(a1 + 44);
  sub_1001B4C40(a1 + 41);
  return sub_100C0CB28((uint64_t)a1);
}

uint64_t *sub_10101FC68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v6 = *(void *)(a2 + 16);
    *((_DWORD *)i + 6) = *(_DWORD *)(a2 + 24);
    i[2] = v6;
    a2 = *(void *)(a2 + 8);
  }

  if (i == a1) {
    return sub_10101FCC0((uint64_t)a1, a1, a2, a3);
  }
  else {
    return sub_100911DE8((uint64_t)a1, i, a1);
  }
}

uint64_t *sub_10101FCC0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x20uLL);
    int v9 = v8;
    void *v8 = 0LL;
    v8[1] = 0LL;
    uint64_t v10 = *(void *)(a3 + 16);
    *((_DWORD *)v8 + 6) = *(_DWORD *)(a3 + 24);
    v8[2] = v10;
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v12 = 1LL;
    if (v11 != a4)
    {
      double v13 = v8;
      do
      {
        uint64_t v8 = operator new(0x20uLL);
        void *v8 = v13;
        v8[1] = 0LL;
        uint64_t v14 = *(void *)(v11 + 16);
        *((_DWORD *)v8 + 6) = *(_DWORD *)(v11 + 24);
        v8[2] = v14;
        v13[1] = v8;
        ++v12;
        uint64_t v11 = *(void *)(v11 + 8);
        double v13 = v8;
      }

      while (v11 != a4);
    }

    uint64_t v15 = *a2;
    *(void *)(v15 + 8) = v9;
    void *v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v12;
    return v9;
  }

  return a2;
}

void sub_10101FDA0(void *a1)
{
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_10101FDC0(_Unwind_Exception *a1)
{
}

void sub_10101FDD4(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10101FE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10101FE80((uint64_t **)a1, v4, (unsigned __int16 *)(v6 + 16), v6 + 16);
      uint64_t v6 = *(void *)(v6 + 8);
    }

    while (v6 != a3);
  }

  return a1;
}

void sub_10101FE68(_Unwind_Exception *a1)
{
}

char *sub_10101FE80(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v6 = sub_10101FF0C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 25) = *(void *)a4;
    *(_DWORD *)(v7 + 33) = *(_DWORD *)(a4 + 8);
    sub_1000085FC(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_10101FF0C(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int16 *a5)
{
  unsigned int v5 = *a5;
  unsigned int v6 = *(unsigned __int16 *)((char *)a2 + 25);
  unsigned int v7 = a5[1];
  unsigned int v8 = *(unsigned __int16 *)((char *)a2 + 27);
  BOOL v9 = v7 < v8;
  if (v5 != v6) {
    BOOL v9 = v5 < v6;
  }
  if (v9)
  {
LABEL_5:
    uint64_t v10 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v12 = a2;
LABEL_24:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v10)
    {
      uint64_t v11 = (uint64_t *)*a2;
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (uint64_t *)v11[1];
      }

      while (v11);
    }

    else
    {
      uint64_t v17 = a2;
      do
      {
        uint64_t v12 = (uint64_t *)v17[2];
        BOOL v18 = *v12 == (void)v17;
        uint64_t v17 = v12;
      }

      while (v18);
    }

    unsigned int v19 = *(unsigned __int16 *)((char *)v12 + 25);
    unsigned int v20 = *a5;
    BOOL v18 = v19 == v20;
    BOOL v21 = v19 < v20;
    if (v18) {
      BOOL v21 = *(unsigned __int16 *)((char *)v12 + 27) < a5[1];
    }
    if (v21) {
      goto LABEL_24;
    }
    return sub_10102008C((uint64_t)a1, a3, a5);
  }

  BOOL v13 = v8 < v7;
  if (v5 == v6) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = v6 < v5;
  }
  if (v14)
  {
    uint64_t v15 = a2[1];
    if (v15)
    {
      double v16 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v16;
        double v16 = (uint64_t *)*v16;
      }

      while (v16);
    }

    else
    {
      double v22 = a2;
      do
      {
        a4 = (uint64_t **)v22[2];
        BOOL v18 = *a4 == v22;
        double v22 = (uint64_t *)a4;
      }

      while (!v18);
    }

    if (a4 == a1 + 1) {
      goto LABEL_35;
    }
    unsigned int v23 = *(unsigned __int16 *)((char *)a4 + 25);
    BOOL v24 = v7 < *(unsigned __int16 *)((char *)a4 + 27);
    BOOL v18 = v5 == v23;
    BOOL v25 = v5 < v23;
    if (v18) {
      BOOL v25 = v24;
    }
    if (v25)
    {
LABEL_35:
      if (v15)
      {
        *a3 = (uint64_t *)a4;
      }

      else
      {
        *a3 = a2;
        return a2 + 1;
      }

      return (uint64_t *)a4;
    }

    return sub_10102008C((uint64_t)a1, a3, a5);
  }

  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_10102008C(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  double result = (uint64_t *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    do
    {
      while (1)
      {
        unsigned int v8 = v4;
        unsigned int v9 = *(unsigned __int16 *)((char *)v4 + 25);
        unsigned int v10 = *(unsigned __int16 *)((char *)v8 + 27);
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 < v9;
        }
        if (!v11) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v8;
        double result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }

      BOOL v12 = v10 < v7;
      if (v6 == v9) {
        BOOL v13 = v12;
      }
      else {
        BOOL v13 = v9 < v6;
      }
      if (!v13) {
        break;
      }
      double result = v8 + 1;
      unint64_t v4 = (uint64_t *)v8[1];
    }

    while (v4);
  }

  else
  {
    unsigned int v8 = result;
  }

uint64_t sub_101020110(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  uint64_t v7 = v2;
  do
  {
    unsigned int v8 = *(unsigned __int16 *)(v3 + 25);
    BOOL v10 = v8 == v5;
    BOOL v9 = v8 < v5;
    if (v10) {
      BOOL v9 = *(unsigned __int16 *)(v3 + 27) < v6;
    }
    BOOL v10 = !v9;
    if (v9) {
      BOOL v11 = (uint64_t *)(v3 + 8);
    }
    else {
      BOOL v11 = (uint64_t *)v3;
    }
    if (v10) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v11;
  }

  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v12 = *(unsigned __int16 *)(v7 + 25);
  BOOL v13 = v6 < *(unsigned __int16 *)(v7 + 27);
  BOOL v10 = v5 == v12;
  BOOL v14 = v5 < v12;
  if (v10) {
    BOOL v14 = v13;
  }
  if (v14) {
    return v2;
  }
  return v7;
}

uint64_t sub_101020190@<X0>(unsigned int *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_10000CF44(&v8, (uint64_t)"entriesOffset, ", 15LL);
  std::ostream::operator<<(v4, *a1);
  std::stringbuf::str(a2, &v9);
  *(void *)((char *)v7
  uint64_t v8 = v5;
  std::streambuf::~streambuf(&v9);
  return std::ios::~ios(&v10);
}

void sub_101020258(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10102026C()
{
  unsigned __int8 v0 = operator new(0x10uLL);
  uint64_t result = sub_1002E4C3C(v0, "CLAppRecommendationTile-Mutex", 1LL, 1LL);
  qword_10199FF00 = (uint64_t)v0;
  return result;
}

void sub_1010202AC(_Unwind_Exception *a1)
{
}

void *sub_1010202C0(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = *a2;
  uint64_t v5 = a2[1];
  a1[1] = v5;
  if (v5)
  {
    unsigned int v6 = (unint64_t *)(v5 + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  a1[2] = *a3;
  uint64_t v8 = a3[1];
  a1[3] = v8;
  if (v8)
  {
    std::stringbuf v9 = (unint64_t *)(v8 + 16);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  a1[4] = *a4;
  uint64_t v11 = a4[1];
  a1[5] = v11;
  if (v11)
  {
    unsigned int v12 = (unint64_t *)(v11 + 16);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101894CD8);
  }
  BOOL v14 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[Phone side] Setting up CMMobilityCalibrationManager",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    v18[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "[Phone side] Setting up CMMobilityCalibrationManager",  v18,  2);
    uint64_t v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMMobilityCal::CMMobilityCalibrationManager::CMMobilityCalibrationManager(std::shared_ptr<CLMobility::BoutMetricsD elegate>, std::shared_ptr<CLMobility::GaitMetricsDelegate>, std::shared_ptr<CLMobility::PedometerDelegate>)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  return a1;
}

void sub_1010204CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[5];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

NSData *sub_101020504(uint64_t a1, void *a2)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101894CD8);
  }
  uint64_t v3 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    LODWORD(v23) = [a2 count];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "CMMobilityCalibrationManager: Attempt to serialize array of %d entries.",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    uint64_t v10 = qword_101934518;
    int v20 = 67109120;
    LODWORD(v21) = [a2 count];
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  0LL,  "CMMobilityCalibrationManager: Attempt to serialize array of %d entries.",  &v20);
    unsigned int v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CMMobilityCal::CMMobilityCalibrationManager::serializeMessage(NSMutableArray *) const",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  uint64_t v19 = 0LL;
  uint64_t v4 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  a2,  1LL,  &v19);
  if (v19)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    uint64_t v5 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 138412290;
      uint64_t v23 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "CMMobilityCalibrationManager: Error serializing the message: %@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101894CD8);
      }
      int v20 = 138412290;
      uint64_t v21 = v19;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "CMMobilityCalibrationManager: Error serializing the message: %@",  &v20,  12);
      BOOL v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CMMobilityCal::CMMobilityCalibrationManager::serializeMessage(NSMutableArray *) const",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    return 0LL;
  }

  else
  {
    unsigned int v6 = v4;
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    unint64_t v7 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = -[NSData length](v6, "length");
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      LODWORD(v23) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CMMobilityCalibrationManager: Serialization complete, message size: %d bytes.",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101894CD8);
      }
      uint64_t v15 = qword_101934518;
      unsigned int v16 = -[NSData length](v6, "length");
      int v20 = 67109120;
      LODWORD(v21) = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  0LL,  "CMMobilityCalibrationManager: Serialization complete, message size: %d bytes.",  &v20);
      BOOL v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CMMobilityCal::CMMobilityCalibrationManager::serializeMessage(NSMutableArray *) const",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

  return v6;
}

NSData *sub_10102098C(uint64_t *a1, double a2, double a3)
{
  id v6 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  else {
    return 0LL;
  }
}

uint64_t sub_101020A08(uint64_t *a1, void *a2, double a3, double a4)
{
  context = objc_autoreleasePoolPush();
  uint64_t v19 = 0LL;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  unsigned int v17 = sub_101020C3C(a1, &__p, &v19, a3, a4);
  if (v17 == 100)
  {
    id v8 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    if (v20 != v19)
    {
      std::stringbuf v9 = v8;
      unint64_t v10 = 0LL;
      do
      {
        [v9 removeAllObjects];
        uint64_t v11 = objc_alloc(&OBJC_CLASS___CLMobilityCalBoutMetrics);
        unsigned int v12 = -[CLMobilityCalBoutMetrics initWithBoutMetrics:](v11, "initWithBoutMetrics:", (char *)__p + 224 * v10);
        unint64_t v13 = (uint64_t *)(v19 + 24 * v10);
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        while (v15 != v14)
        {
          objc_msgSend( v9,  "addObject:",   -[CLMobilityCalGaitMetrics initWithGaitMetrics:]( [CLMobilityCalGaitMetrics alloc],  "initWithGaitMetrics:",  v15));
          v15 += 96LL;
        }

        v26[1] = @"GaitMetrics";
        v27[0] = v12;
        v26[0] = @"BoutMetrics";
        v27[1] = +[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v9);
        objc_msgSend( a2,  "addObject:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v27,  v26,  2));
        ++v10;
      }

      while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3));
    }
  }

  BOOL v25 = (void **)&v19;
  sub_100006BC8(&v25);
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }

  objc_autoreleasePoolPop(context);
  return v17;
}

void sub_101020BF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17)
{
  a17 = &a11;
  sub_100006BC8((void ***)&a17);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_101020C3C(uint64_t *a1, void **a2, uint64_t *a3, double a4, double a5)
{
  int v101 = 0LL;
  unsigned int v102 = 0LL;
  uint64_t v103 = 0LL;
  unint64_t v10 = (std::__shared_weak_count *)a1[1];
  if (!v10 || v10->__shared_owners_ < 0)
  {
    uint64_t v11 = 0LL;
    int v100 = 0LL;
  }

  else
  {
    int v100 = std::__shared_weak_count::lock(v10);
    if (v100) {
      uint64_t v11 = *a1;
    }
    else {
      uint64_t v11 = 0LL;
    }
  }

  unsigned int v12 = (std::__shared_weak_count *)a1[3];
  if (!v12 || v12->__shared_owners_ < 0)
  {
    uint64_t v13 = 0LL;
    unsigned int v99 = 0LL;
    if (v11) {
      goto LABEL_12;
    }
    goto LABEL_73;
  }

  unsigned int v99 = std::__shared_weak_count::lock(v12);
  if (!v99)
  {
    uint64_t v13 = 0LL;
    if (v11) {
      goto LABEL_12;
    }
LABEL_73:
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    uint64_t v69 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "CMMobilityCalibrationManager: Unable to reference bout metrics DB. Abort query.",  (uint8_t *)&__p,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_78;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    LOWORD(v104[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "CMMobilityCalibrationManager: Unable to reference bout metrics DB. Abort query.",  v104,  2);
    uint64_t v66 = (void **)v87;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const",  "%s\n",  v87);
LABEL_127:
    if (v66 != &__p) {
      free(v66);
    }
LABEL_78:
    uint64_t v68 = 112LL;
    goto LABEL_79;
  }

  uint64_t v13 = a1[2];
  if (!v11) {
    goto LABEL_73;
  }
LABEL_12:
  if (!v13)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    uint64_t v64 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "CMMobilityCalibrationManager: Unable to reference gait metrics DB. Abort query.",  (uint8_t *)&__p,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_78;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    LOWORD(v104[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "CMMobilityCalibrationManager: Unable to reference gait metrics DB. Abort query.",  v104,  2);
    uint64_t v66 = (void **)v65;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const",  "%s\n",  v65);
    goto LABEL_127;
  }

  if (((*(uint64_t (**)(uint64_t, void, void **, double, double))(*(void *)v11 + 24LL))( v11,  0LL,  &v101,  a4,  a5) & 1) != 0)
  {
    a2[1] = *a2;
    sub_100006C08(a3);
    sub_101021BD0(a2, 0x1EuLL);
    sub_101021CD0(a3, 0x1EuLL);
    unsigned int v16 = (__n128 *)v101;
    unsigned int v17 = v102;
    if (v101 == v102)
    {
      unsigned int v18 = 0;
      goto LABEL_106;
    }

    unsigned int v18 = 0;
    uint64_t v98 = (uint64_t)(a2 + 2);
    while ((unint64_t)(0x6DB6DB6DB6DB6DB7LL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5)) < 0x1E)
    {
      if (v18 >= 0x5DC)
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101894CD8);
        }
        signed int v78 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEBUG,  "CMMobilityCalibrationManager: Max allowed number of gait metrics collected - terminate collection.",  (uint8_t *)&__p,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_106;
        }
        bzero(&__p, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101894CD8);
        }
        LOWORD(v104[0]) = 0;
        LODWORD(v97) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CMMobilityCalibrationManager: Max allowed number of gait metrics collected - terminate collection.",  v104,  v97);
        unsigned int v77 = (void **)v96;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteT ime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const",  "%s\n",  v96);
LABEL_144:
        if (v77 != &__p) {
          free(v77);
        }
        goto LABEL_106;
      }

      v14.n128_u64[0] = v16->n128_u64[1];
      v15.n128_u64[0] = v16[1].n128_u64[0];
      if (v15.n128_f64[0] - v14.n128_f64[0] >= 20.0 && v15.n128_f64[0] - v14.n128_f64[0] <= 360.0)
      {
        uint64_t v19 = a3[1];
        if (v19 == *a3 || *(void *)(v19 - 16) != *(void *)(v19 - 24))
        {
          std::stringbuf::string_type __p = 0LL;
          unsigned int v110 = 0LL;
          uint64_t v111 = 0LL;
          sub_101021D80(a3, (uint64_t)&__p);
          if (__p)
          {
            unsigned int v110 = __p;
            operator delete(__p);
          }

          v14.n128_u64[0] = v16->n128_u64[1];
          v15.n128_u64[0] = v16[1].n128_u64[0];
          uint64_t v19 = a3[1];
        }

        int v20 = (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(*(void *)v13 + 24LL))( v13,  v19 - 24,  v14,  v15);
        if (v20 == 100)
        {
          uint64_t v22 = a3[1];
          uint64_t v23 = *(void *)(v22 - 24);
          uint64_t v24 = *(_OWORD **)(v22 - 16);
          if (v24 != (_OWORD *)v23)
          {
            unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - v23) >> 5);
            sub_101022030(v23, v24, 126 - 2 * __clz(v25), 1);
            double v26 = (__n128 *)a2[1];
            unint64_t v27 = (unint64_t)a2[2];
            if ((unint64_t)v26 >= v27)
            {
              uint64_t v37 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v26 - (_BYTE *)*a2) >> 5);
              unint64_t v38 = v37 + 1;
              unint64_t v39 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v27 - (void)*a2) >> 5);
              if (2 * v39 > v38) {
                unint64_t v38 = 2 * v39;
              }
              if (v39 >= 0x92492492492492LL) {
                unint64_t v40 = 0x124924924924924LL;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40) {
                int v41 = (char *)sub_10001B858(v98, v40);
              }
              else {
                int v41 = 0LL;
              }
              int v42 = (__n128 *)&v41[224 * v37];
              __n128 v43 = v16[1];
              *int v42 = *v16;
              v42[1] = v43;
              __n128 v44 = v16[2];
              __n128 v45 = v16[3];
              __n128 v46 = v16[5];
              v42[4] = v16[4];
              v42[5] = v46;
              v42[2] = v44;
              v42[3] = v45;
              __n128 v47 = v16[6];
              __n128 v48 = v16[7];
              __n128 v49 = v16[9];
              v42[8] = v16[8];
              v42[9] = v49;
              v42[6] = v47;
              v42[7] = v48;
              __n128 v14 = v16[10];
              __n128 v15 = v16[11];
              __n128 v50 = v16[13];
              v42[12] = v16[12];
              v42[13] = v50;
              v42[10] = v14;
              v42[11] = v15;
              int v52 = (char *)*a2;
              int v51 = (char *)a2[1];
              float v53 = v42;
              if (v51 != *a2)
              {
                do
                {
                  __n128 v54 = *((__n128 *)v51 - 13);
                  v53[-14] = *((__n128 *)v51 - 14);
                  v53[-13] = v54;
                  __n128 v55 = *((__n128 *)v51 - 12);
                  __n128 v56 = *((__n128 *)v51 - 11);
                  __n128 v57 = *((__n128 *)v51 - 9);
                  v53[-10] = *((__n128 *)v51 - 10);
                  v53[-9] = v57;
                  v53[-12] = v55;
                  v53[-11] = v56;
                  __n128 v58 = *((__n128 *)v51 - 8);
                  __n128 v59 = *((__n128 *)v51 - 7);
                  __n128 v60 = *((__n128 *)v51 - 5);
                  v53[-6] = *((__n128 *)v51 - 6);
                  v53[-5] = v60;
                  v53[-8] = v58;
                  v53[-7] = v59;
                  __n128 v14 = *((__n128 *)v51 - 4);
                  __n128 v15 = *((__n128 *)v51 - 3);
                  __n128 v61 = *((__n128 *)v51 - 2);
                  *(__n128 *)((char *)v53 - 19) = *(__n128 *)(v51 - 19);
                  v53[-3] = v15;
                  v53[-2] = v61;
                  v53[-4] = v14;
                  v53 -= 14;
                  v51 -= 224;
                }

                while (v51 != v52);
                int v51 = (char *)*a2;
              }

              uint64_t v36 = v42 + 14;
              *a2 = v53;
              a2[1] = &v42[14];
              a2[2] = &v41[224 * v40];
              if (v51) {
                operator delete(v51);
              }
            }

            else
            {
              __n128 v28 = v16[1];
              __n128 *v26 = *v16;
              v26[1] = v28;
              __n128 v29 = v16[2];
              __n128 v30 = v16[3];
              __n128 v31 = v16[5];
              v26[4] = v16[4];
              v26[5] = v31;
              void v26[2] = v29;
              v26[3] = v30;
              __n128 v32 = v16[6];
              __n128 v33 = v16[7];
              __n128 v34 = v16[9];
              v26[8] = v16[8];
              v26[9] = v34;
              v26[6] = v32;
              v26[7] = v33;
              __n128 v14 = v16[10];
              __n128 v15 = v16[11];
              __n128 v35 = v16[13];
              v26[12] = v16[12];
              v26[13] = v35;
              v26[10] = v14;
              v26[11] = v15;
              uint64_t v36 = v26 + 14;
            }

            v18 += v25;
            a2[1] = v36;
          }
        }

        else
        {
          if (v20 == 109)
          {
            if (qword_101934510 != -1) {
              dispatch_once(&qword_101934510, &stru_101894CD8);
            }
            uint64_t v21 = (os_log_s *)qword_101934518;
            if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(__p) = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "CMMobilityCalibrationManager: Defering bout processing. Gait Metrics unavailable, likely because device is locked.",  (uint8_t *)&__p,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_101934510 != -1) {
                dispatch_once(&qword_101934510, &stru_101894CD8);
              }
              LOWORD(v104[0]) = 0;
              LODWORD(v97) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CMMobilityCalibrationManager: Defering bout processing. Gait Metrics unavailable, likely because device is locked.",  v104,  v97);
              double v63 = (void **)v62;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbs oluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const",  "%s\n",  v62);
              if (v63 != &__p) {
                free(v63);
              }
            }
          }

          *(void *)(a3[1] - 16) = *(void *)(a3[1] - 24);
        }
      }

      v16 += 14;
      if (v16 == v17) {
        goto LABEL_106;
      }
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    uint64_t v75 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "CMMobilityCalibrationManager: Max allowed number of bouts collected - terminate collection.",  (uint8_t *)&__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101894CD8);
      }
      LOWORD(v104[0]) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CMMobilityCalibrationManager: Max allowed number of bouts collected - terminate collection.",  v104,  v97);
      unsigned int v77 = (void **)v76;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTim e, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const",  "%s\n",  v76);
      goto LABEL_144;
    }

void sub_101021B5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_101021BD0(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7LL * ((v4 - (_BYTE *)*a1) >> 5) < a2)
  {
    if (a2 >= 0x124924924924925LL) {
      sub_100007008();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    id v6 = (char *)sub_10001B858(v3, a2);
    id v7 = &v6[v5];
    std::stringbuf v9 = &v6[224 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        __int128 v13 = *((_OWORD *)v10 - 13);
        *((_OWORD *)v12 - 14) = *((_OWORD *)v10 - 14);
        *((_OWORD *)v12 - 13) = v13;
        __int128 v14 = *((_OWORD *)v10 - 12);
        __int128 v15 = *((_OWORD *)v10 - 11);
        __int128 v16 = *((_OWORD *)v10 - 9);
        *((_OWORD *)v12 - 10) = *((_OWORD *)v10 - 10);
        *((_OWORD *)v12 - 9) = v16;
        *((_OWORD *)v12 - 12) = v14;
        *((_OWORD *)v12 - 11) = v15;
        __int128 v17 = *((_OWORD *)v10 - 8);
        __int128 v18 = *((_OWORD *)v10 - 7);
        __int128 v19 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v19;
        *((_OWORD *)v12 - 8) = v17;
        *((_OWORD *)v12 - 7) = v18;
        __int128 v20 = *((_OWORD *)v10 - 4);
        __int128 v21 = *((_OWORD *)v10 - 3);
        __int128 v22 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 19) = *(_OWORD *)(v10 - 19);
        *((_OWORD *)v12 - 3) = v21;
        *((_OWORD *)v12 - 2) = v22;
        *((_OWORD *)v12 - 4) = v20;
        v12 -= 224;
        v10 -= 224;
      }

      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t sub_101021CD0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_100007008();
    }
    uint64_t v5 = a1[1] - *a1;
    _DWORD v7[4] = result;
    v7[0] = sub_10000701C(result, a2);
    v7[1] = v7[0] + v5;
    void v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_101021EE8(a1, v7);
    return sub_100007504((uint64_t)v7);
  }

  return result;
}

void sub_101021D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_101021D80(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  id v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555LL) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    __int128 v13 = (char *)sub_10000701C(result, v12);
    __int128 v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0LL;
    *((void *)v14 + 2) = 0LL;
    *(void *)__int128 v14 = 0LL;
    *(_OWORD *)__int128 v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    _DWORD v16[2] = v14 + 24;
    sub_101021EE8(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = sub_100007504((uint64_t)v16);
  }

  else
  {
    void *v7 = 0LL;
    v7[1] = 0LL;
    void v7[2] = 0LL;
    *(_OWORD *)id v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }

  a1[1] = (uint64_t)v8;
  return result;
}

void sub_101021EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_101021EBC(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101021EE8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_101021F5C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101021F5C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  _OWORD v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - 8) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 24LL;
      *((void *)&v14 + 1) -= 24LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_101021FFC((uint64_t)v11);
  return v9;
}

uint64_t sub_101021FFC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000074C0(a1);
  }
  return a1;
}

void sub_101022030(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = (uint64_t)a2 - v8;
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (*((double *)a2 - 11) < *(double *)(v8 + 8))
        {
          __int128 v159 = *(_OWORD *)v8;
          __int128 v171 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)int v206 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)&v206[16] = *(_OWORD *)(v8 + 80);
          __int128 v182 = *(_OWORD *)(v8 + 32);
          __int128 v194 = *(_OWORD *)(v8 + 48);
          __int128 v61 = *(a2 - 3);
          __int128 v60 = *(a2 - 2);
          __int128 v62 = *(a2 - 4);
          *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)a2 - 20);
          *(_OWORD *)(v8 + 48) = v61;
          *(_OWORD *)(v8 + 64) = v60;
          *(_OWORD *)(v8 + 32) = v62;
          __int128 v63 = *(a2 - 5);
          *(_OWORD *)unint64_t v8 = *(a2 - 6);
          *(_OWORD *)(v8 + 16) = v63;
          *(a2 - 6) = v159;
          *(a2 - 5) = v171;
          *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v206[12];
          *(a2 - 3) = v194;
          *(a2 - 2) = *(_OWORD *)v206;
          *(a2 - 4) = v182;
        }

        return;
      case 3LL:
        sub_10091BC94(v8, v8 + 96, (uint64_t)(a2 - 6));
        return;
      case 4LL:
        sub_10091C25C(v8, v8 + 96, v8 + 192, (uint64_t)(a2 - 6));
        return;
      case 5LL:
        uint64_t v64 = (__int128 *)(v8 + 96);
        double v65 = (__int128 *)(v8 + 192);
        uint64_t v66 = (__int128 *)(v8 + 288);
        sub_10091C25C(v8, v8 + 96, v8 + 192, v8 + 288);
        if (*((double *)a2 - 11) < *(double *)(v8 + 296))
        {
          __int128 v183 = *(_OWORD *)(v8 + 320);
          __int128 v195 = *(_OWORD *)(v8 + 336);
          *(_OWORD *)int v207 = *(_OWORD *)(v8 + 352);
          *(_OWORD *)&v207[16] = *(_OWORD *)(v8 + 368);
          __int128 v160 = *v66;
          __int128 v172 = *(_OWORD *)(v8 + 304);
          __int128 v67 = *(a2 - 5);
          __int128 *v66 = *(a2 - 6);
          *(_OWORD *)(v8 + 304) = v67;
          __int128 v69 = *(a2 - 3);
          __int128 v68 = *(a2 - 2);
          __int128 v70 = *(a2 - 4);
          *(_OWORD *)(v8 + 364) = *(_OWORD *)((char *)a2 - 20);
          *(_OWORD *)(v8 + 336) = v69;
          *(_OWORD *)(v8 + 352) = v68;
          *(_OWORD *)(v8 + 320) = v70;
          *(a2 - 6) = v160;
          *(a2 - 5) = v172;
          *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v207[12];
          *(a2 - 3) = v195;
          *(a2 - 2) = *(_OWORD *)v207;
          *(a2 - 4) = v183;
          if (*(double *)(v8 + 296) < *(double *)(v8 + 200))
          {
            __int128 v184 = *(_OWORD *)(v8 + 224);
            __int128 v196 = *(_OWORD *)(v8 + 240);
            *(_OWORD *)__int16 v208 = *(_OWORD *)(v8 + 256);
            *(_OWORD *)&v208[16] = *(_OWORD *)(v8 + 272);
            __int128 v161 = *v65;
            __int128 v173 = *(_OWORD *)(v8 + 208);
            __int128 v71 = *(_OWORD *)(v8 + 336);
            *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 320);
            *(_OWORD *)(v8 + 240) = v71;
            *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 352);
            *(_OWORD *)(v8 + 268) = *(_OWORD *)(v8 + 364);
            __int128 v72 = *(_OWORD *)(v8 + 304);
            __int128 *v65 = *v66;
            *(_OWORD *)(v8 + 208) = v72;
            __int128 *v66 = v161;
            *(_OWORD *)(v8 + 304) = v173;
            *(_OWORD *)(v8 + 364) = *(_OWORD *)&v208[12];
            BOOL v73 = *(double *)(v8 + 200) < *(double *)(v8 + 104);
            *(_OWORD *)(v8 + 336) = v196;
            *(_OWORD *)(v8 + 352) = *(_OWORD *)v208;
            *(_OWORD *)(v8 + 320) = v184;
            if (v73)
            {
              __int128 v185 = *(_OWORD *)(v8 + 128);
              __int128 v197 = *(_OWORD *)(v8 + 144);
              *(_OWORD *)int v209 = *(_OWORD *)(v8 + 160);
              *(_OWORD *)&v209[16] = *(_OWORD *)(v8 + 176);
              __int128 v162 = *v64;
              __int128 v174 = *(_OWORD *)(v8 + 112);
              __int128 v74 = *(_OWORD *)(v8 + 240);
              *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 224);
              *(_OWORD *)(v8 + 144) = v74;
              *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 256);
              *(_OWORD *)(v8 + 172) = *(_OWORD *)(v8 + 268);
              __int128 v75 = *(_OWORD *)(v8 + 208);
              __int128 *v64 = *v65;
              *(_OWORD *)(v8 + 112) = v75;
              __int128 *v65 = v162;
              *(_OWORD *)(v8 + 208) = v174;
              *(_OWORD *)(v8 + 268) = *(_OWORD *)&v209[12];
              BOOL v73 = *(double *)(v8 + 104) < *(double *)(v8 + 8);
              *(_OWORD *)(v8 + 240) = v197;
              *(_OWORD *)(v8 + 256) = *(_OWORD *)v209;
              *(_OWORD *)(v8 + 224) = v185;
              if (v73)
              {
                __int128 v163 = *(_OWORD *)v8;
                __int128 v175 = *(_OWORD *)(v8 + 16);
                *(_OWORD *)uint64_t v210 = *(_OWORD *)(v8 + 64);
                *(_OWORD *)&v210[16] = *(_OWORD *)(v8 + 80);
                __int128 v186 = *(_OWORD *)(v8 + 32);
                __int128 v198 = *(_OWORD *)(v8 + 48);
                *(_OWORD *)(v8 + 76) = *(_OWORD *)(v8 + 172);
                __int128 v76 = *(_OWORD *)(v8 + 160);
                __int128 v77 = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 48) = *(_OWORD *)(v8 + 144);
                *(_OWORD *)(v8 + 64) = v76;
                __int128 v78 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)unint64_t v8 = *v64;
                *(_OWORD *)(v8 + 16) = v78;
                *(_OWORD *)(v8 + 32) = v77;
                __int128 *v64 = v163;
                *(_OWORD *)(v8 + 112) = v175;
                *(_OWORD *)(v8 + 172) = *(_OWORD *)&v210[12];
                *(_OWORD *)(v8 + 144) = v198;
                *(_OWORD *)(v8 + 160) = *(_OWORD *)v210;
                *(_OWORD *)(v8 + 128) = v186;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 2303)
        {
          uint64_t v79 = (_OWORD *)(v8 + 96);
          BOOL v81 = (_OWORD *)v8 == a2 || v79 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v81)
            {
              uint64_t v82 = 0LL;
              unint64_t v83 = v8;
              do
              {
                int v84 = v79;
                double v85 = *(double *)(v83 + 104);
                if (v85 < *(double *)(v83 + 8))
                {
                  uint64_t v86 = *(void *)v79;
                  __int128 v187 = *(_OWORD *)(v83 + 144);
                  *(_OWORD *)double v199 = *(_OWORD *)(v83 + 160);
                  *(_OWORD *)&v199[16] = *(_OWORD *)(v83 + 176);
                  __int128 v88 = *(_OWORD *)(v83 + 112);
                  __int128 v87 = *(_OWORD *)(v83 + 128);
                  uint64_t v89 = v82;
                  __int128 v164 = v88;
                  while (1)
                  {
                    int v90 = (_OWORD *)(v8 + v89);
                    __int128 v91 = *(_OWORD *)(v8 + v89 + 48);
                    v90[8] = *(_OWORD *)(v8 + v89 + 32);
                    v90[9] = v91;
                    v90[10] = *(_OWORD *)(v8 + v89 + 64);
                    *(_OWORD *)((char *)v90 + 172) = *(_OWORD *)(v8 + v89 + 76);
                    __int128 v92 = *(_OWORD *)(v8 + v89 + 16);
                    v90[6] = *(_OWORD *)(v8 + v89);
                    v90[7] = v92;
                    if (!v89) {
                      break;
                    }
                    v89 -= 96LL;
                    if (v85 >= *((double *)v90 - 11))
                    {
                      uint64_t v93 = v8 + v89 + 96;
                      goto LABEL_80;
                    }
                  }

                  uint64_t v93 = v8;
LABEL_80:
                  *(void *)uint64_t v93 = v86;
                  *(double *)(v93 + 8) = v85;
                  *(_OWORD *)(v93 + 48) = v187;
                  *(_OWORD *)(v93 + 64) = *(_OWORD *)v199;
                  *(_OWORD *)(v93 + 76) = *(_OWORD *)&v199[12];
                  *(_OWORD *)(v93 + 16) = v164;
                  *(_OWORD *)(v93 + 32) = v87;
                }

                uint64_t v79 = v84 + 6;
                v82 += 96LL;
                unint64_t v83 = (unint64_t)v84;
              }

              while (v84 + 6 != a2);
            }
          }

          else if (!v81)
          {
            do
            {
              uint64_t v138 = (uint64_t)v79;
              double v139 = *(double *)(a1 + 104);
              if (v139 < *(double *)(a1 + 8))
              {
                uint64_t v140 = *(void *)v79;
                __int128 v190 = *(_OWORD *)(a1 + 144);
                *(_OWORD *)int v202 = *(_OWORD *)(a1 + 160);
                *(_OWORD *)&v202[16] = *(_OWORD *)(a1 + 176);
                __int128 v167 = *(_OWORD *)(a1 + 112);
                __int128 v178 = *(_OWORD *)(a1 + 128);
                do
                {
                  __int128 v141 = *(v79 - 3);
                  v79[2] = *(v79 - 4);
                  v79[3] = v141;
                  v79[4] = *(v79 - 2);
                  *(_OWORD *)((char *)v79 + 76) = *(_OWORD *)((char *)v79 - 20);
                  __int128 v142 = *(v79 - 5);
                  _OWORD *v79 = *(v79 - 6);
                  v79[1] = v142;
                  double v143 = *((double *)v79 - 23);
                  v79 -= 6;
                }

                while (v139 < v143);
                *(void *)uint64_t v79 = v140;
                *((double *)v79 + 1) = v139;
                v79[1] = v167;
                *(_OWORD *)((char *)v79 + 76) = *(_OWORD *)&v202[12];
                v79[3] = v190;
                v79[4] = *(_OWORD *)v202;
                v79[2] = v178;
              }

              uint64_t v79 = (_OWORD *)(v138 + 96);
              a1 = v138;
            }

            while ((_OWORD *)(v138 + 96) != a2);
          }

          return;
        }

        if (!a3)
        {
          if ((_OWORD *)v8 == a2) {
            return;
          }
          int64_t v94 = (unint64_t)(v10 - 2) >> 1;
          int64_t v95 = v94;
          do
          {
            int64_t v96 = v95;
            if (v94 >= v95)
            {
              uint64_t v97 = (2 * v95) | 1;
              unint64_t v98 = v8 + 96 * v97;
              if (2 * v96 + 2 < v10 && *(double *)(v8 + 96 * v97 + 8) < *(double *)(v98 + 104))
              {
                v98 += 96LL;
                uint64_t v97 = 2 * v96 + 2;
              }

              double v99 = *(double *)(v8 + 96 * v96 + 8);
              if (*(double *)(v98 + 8) >= v99)
              {
                unint64_t v100 = v8 + 96 * v96;
                uint64_t v101 = *(void *)v100;
                __int128 v165 = *(_OWORD *)(v100 + 16);
                *(_OWORD *)int v200 = *(_OWORD *)(v100 + 64);
                *(_OWORD *)&v200[16] = *(_OWORD *)(v100 + 80);
                __int128 v176 = *(_OWORD *)(v100 + 32);
                __int128 v188 = *(_OWORD *)(v100 + 48);
                do
                {
                  unsigned int v102 = (_OWORD *)v100;
                  unint64_t v100 = v98;
                  __int128 v103 = *(_OWORD *)(v98 + 16);
                  _OWORD *v102 = *(_OWORD *)v98;
                  v102[1] = v103;
                  __int128 v104 = *(_OWORD *)(v98 + 32);
                  __int128 v105 = *(_OWORD *)(v98 + 48);
                  __int128 v106 = *(_OWORD *)(v98 + 64);
                  *(_OWORD *)((char *)v102 + 76) = *(_OWORD *)(v98 + 76);
                  v102[3] = v105;
                  v102[4] = v106;
                  v102[2] = v104;
                  if (v94 < v97) {
                    break;
                  }
                  uint64_t v107 = (2 * v97) | 1;
                  unint64_t v98 = v8 + 96 * v107;
                  uint64_t v108 = 2 * v97 + 2;
                  if (v108 < v10 && *(double *)(v8 + 96 * v107 + 8) < *(double *)(v98 + 104))
                  {
                    v98 += 96LL;
                    uint64_t v107 = v108;
                  }

                  uint64_t v97 = v107;
                }

                while (*(double *)(v98 + 8) >= v99);
                *(void *)unint64_t v100 = v101;
                *(double *)(v100 + 8) = v99;
                *(_OWORD *)(v100 + 48) = v188;
                *(_OWORD *)(v100 + 64) = *(_OWORD *)v200;
                *(_OWORD *)(v100 + 76) = *(_OWORD *)&v200[12];
                *(_OWORD *)(v100 + 16) = v165;
                *(_OWORD *)(v100 + 32) = v176;
              }
            }

            int64_t v95 = v96 - 1;
          }

          while (v96);
          int64_t v109 = v9 / 0x60uLL;
          while (2)
          {
            uint64_t v110 = 0LL;
            __int128 v166 = *(_OWORD *)v8;
            __int128 v177 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)double v211 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v211[16] = *(_OWORD *)(v8 + 80);
            __int128 v189 = *(_OWORD *)(v8 + 32);
            __int128 v201 = *(_OWORD *)(v8 + 48);
            unint64_t v111 = v8;
            do
            {
              std::stringbuf::string_type v112 = (_OWORD *)v111;
              uint64_t v113 = v110 + 1;
              v111 += 96 * (v110 + 1);
              uint64_t v114 = 2 * v110;
              uint64_t v110 = (2 * v110) | 1;
              int64_t v115 = v114 + 2;
              if (v115 < v109 && *((double *)&v112[6 * v113] + 1) < *(double *)(v111 + 104))
              {
                v111 += 96LL;
                uint64_t v110 = v115;
              }

              __int128 v116 = *(_OWORD *)(v111 + 16);
              _OWORD *v112 = *(_OWORD *)v111;
              v112[1] = v116;
              __int128 v117 = *(_OWORD *)(v111 + 32);
              __int128 v118 = *(_OWORD *)(v111 + 48);
              __int128 v119 = *(_OWORD *)(v111 + 64);
              *(_OWORD *)((char *)v112 + 76) = *(_OWORD *)(v111 + 76);
              v112[3] = v118;
              v112[4] = v119;
              v112[2] = v117;
            }

            while (v110 <= (uint64_t)((unint64_t)(v109 - 2) >> 1));
            a2 -= 6;
            if ((_OWORD *)v111 != a2)
            {
              __int128 v120 = a2[1];
              *(_OWORD *)unint64_t v111 = *a2;
              *(_OWORD *)(v111 + 16) = v120;
              __int128 v121 = a2[2];
              __int128 v122 = a2[3];
              __int128 v123 = a2[4];
              *(_OWORD *)(v111 + 76) = *(_OWORD *)((char *)a2 + 76);
              *(_OWORD *)(v111 + 48) = v122;
              *(_OWORD *)(v111 + 64) = v123;
              *(_OWORD *)(v111 + 32) = v121;
              *(_OWORD *)((char *)a2 + 76) = *(_OWORD *)&v211[12];
              a2[3] = v201;
              a2[4] = *(_OWORD *)v211;
              a2[2] = v189;
              *a2 = v166;
              a2[1] = v177;
              uint64_t v124 = v111 - v8 + 96;
              if (v124 >= 97)
              {
                unint64_t v125 = (v124 / 0x60uLL - 2) >> 1;
                double v126 = *(double *)(v111 + 8);
                if (*(double *)(v8 + 96 * v125 + 8) < v126)
                {
                  uint64_t v127 = *(void *)v111;
                  __int128 v146 = *(_OWORD *)(v111 + 16);
                  *(_OWORD *)double v155 = *(_OWORD *)(v111 + 64);
                  *(_OWORD *)&v155[16] = *(_OWORD *)(v111 + 80);
                  __int128 v149 = *(_OWORD *)(v111 + 32);
                  __int128 v152 = *(_OWORD *)(v111 + 48);
                  do
                  {
                    uint64_t v128 = (_OWORD *)v111;
                    unint64_t v111 = v8 + 96 * v125;
                    __int128 v129 = *(_OWORD *)(v111 + 16);
                    *uint64_t v128 = *(_OWORD *)v111;
                    v128[1] = v129;
                    __int128 v130 = *(_OWORD *)(v111 + 32);
                    __int128 v131 = *(_OWORD *)(v111 + 48);
                    __int128 v132 = *(_OWORD *)(v111 + 64);
                    *(_OWORD *)((char *)v128 + 76) = *(_OWORD *)(v111 + 76);
                    v128[3] = v131;
                    v128[4] = v132;
                    v128[2] = v130;
                    if (!v125) {
                      break;
                    }
                    unint64_t v125 = (v125 - 1) >> 1;
                  }

                  while (*(double *)(v8 + 96 * v125 + 8) < v126);
                  *(void *)unint64_t v111 = v127;
                  *(double *)(v111 + 8) = v126;
                  *(_OWORD *)(v111 + 16) = v146;
                  __int128 v133 = v149;
                  __int128 v134 = v152;
                  __int128 v135 = *(_OWORD *)v155;
                  __int128 v136 = *(_OWORD *)&v155[12];
LABEL_112:
                  *(_OWORD *)(v111 + 76) = v136;
                  *(_OWORD *)(v111 + 48) = v134;
                  *(_OWORD *)(v111 + 64) = v135;
                  *(_OWORD *)(v111 + 32) = v133;
                }
              }

              if (v109-- <= 2) {
                return;
              }
              continue;
            }

            break;
          }

          *(_OWORD *)unint64_t v111 = v166;
          *(_OWORD *)(v111 + 16) = v177;
          __int128 v133 = v189;
          __int128 v134 = v201;
          __int128 v135 = *(_OWORD *)v211;
          __int128 v136 = *(_OWORD *)&v211[12];
          goto LABEL_112;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        char v12 = (_OWORD *)(v8 + 96 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x3000)
        {
          sub_10091BC94(a1 + 96 * v11, a1, (uint64_t)(a2 - 6));
        }

        else
        {
          sub_10091BC94(a1, a1 + 96 * v11, (uint64_t)(a2 - 6));
          uint64_t v13 = 3 * v11;
          uint64_t v14 = a1 + 96 * v11 - 96;
          sub_10091BC94(a1 + 96, v14, (uint64_t)(a2 - 12));
          uint64_t v15 = a1 + 96 + 32 * v13;
          sub_10091BC94(a1 + 192, v15, (uint64_t)(a2 - 18));
          sub_10091BC94(v14, (uint64_t)v12, v15);
          __int128 v156 = *(_OWORD *)a1;
          __int128 v168 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)int v203 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v203[16] = *(_OWORD *)(a1 + 80);
          __int128 v179 = *(_OWORD *)(a1 + 32);
          __int128 v191 = *(_OWORD *)(a1 + 48);
          __int128 v17 = v12[3];
          __int128 v16 = v12[4];
          __int128 v18 = v12[2];
          *(_OWORD *)(a1 + 76) = *(_OWORD *)((char *)v12 + 76);
          *(_OWORD *)(a1 + 48) = v17;
          *(_OWORD *)(a1 + 64) = v16;
          *(_OWORD *)(a1 + 32) = v18;
          __int128 v19 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v19;
          _OWORD *v12 = v156;
          v12[1] = v168;
          *(_OWORD *)((char *)v12 + 76) = *(_OWORD *)&v203[12];
          void v12[3] = v191;
          _DWORD v12[4] = *(_OWORD *)v203;
          _DWORD v12[2] = v179;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v20 = *(double *)(a1 + 8);
          uint64_t v42 = *(void *)a1;
          *(_OWORD *)double v154 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v154[16] = *(_OWORD *)(a1 + 80);
          __int128 v148 = *(_OWORD *)(a1 + 32);
          __int128 v151 = *(_OWORD *)(a1 + 48);
          __int128 v145 = *(_OWORD *)(a1 + 16);
          if (v20 >= *((double *)a2 - 11))
          {
            unint64_t v45 = a1 + 96;
            do
            {
              unint64_t v8 = v45;
              double v46 = *(double *)(v45 + 8);
              v45 += 96LL;
            }

            while (v20 >= v46);
          }

          else
          {
            uint64_t v43 = a1;
            do
            {
              unint64_t v8 = v43 + 96;
              double v44 = *(double *)(v43 + 104);
              v43 += 96LL;
            }

            while (v20 >= v44);
          }

          __n128 v47 = (double *)a2;
          if (v8 < (unint64_t)a2)
          {
            __n128 v48 = (double *)a2;
            do
            {
              __n128 v47 = v48 - 12;
              double v49 = *(v48 - 11);
              v48 -= 12;
            }

            while (v20 < v49);
          }

          while (v8 < (unint64_t)v47)
          {
            __int128 v158 = *(_OWORD *)v8;
            __int128 v170 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)char v205 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v205[16] = *(_OWORD *)(v8 + 80);
            __int128 v181 = *(_OWORD *)(v8 + 32);
            __int128 v193 = *(_OWORD *)(v8 + 48);
            __int128 v51 = *((_OWORD *)v47 + 3);
            __int128 v50 = *((_OWORD *)v47 + 4);
            __int128 v52 = *((_OWORD *)v47 + 2);
            *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)v47 + 76);
            *(_OWORD *)(v8 + 48) = v51;
            *(_OWORD *)(v8 + 64) = v50;
            *(_OWORD *)(v8 + 32) = v52;
            __int128 v53 = *((_OWORD *)v47 + 1);
            *(_OWORD *)unint64_t v8 = *(_OWORD *)v47;
            *(_OWORD *)(v8 + 16) = v53;
            *(_OWORD *)__n128 v47 = v158;
            *((_OWORD *)v47 + 1) = v170;
            *(_OWORD *)((char *)v47 + 76) = *(_OWORD *)&v205[12];
            *((_OWORD *)v47 + 3) = v193;
            *((_OWORD *)v47 + 4) = *(_OWORD *)v205;
            *((_OWORD *)v47 + 2) = v181;
            do
            {
              double v54 = *(double *)(v8 + 104);
              v8 += 96LL;
            }

            while (v20 >= v54);
            do
            {
              double v55 = *(v47 - 11);
              v47 -= 12;
            }

            while (v20 < v55);
          }

          if (v8 - 96 != a1)
          {
            __int128 v56 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 16) = v56;
            __int128 v57 = *(_OWORD *)(v8 - 64);
            __int128 v58 = *(_OWORD *)(v8 - 48);
            __int128 v59 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 76) = *(_OWORD *)(v8 - 20);
            *(_OWORD *)(a1 + 48) = v58;
            *(_OWORD *)(a1 + 64) = v59;
            *(_OWORD *)(a1 + 32) = v57;
          }

          a4 = 0;
          *(void *)(v8 - 96) = v42;
          *(double *)(v8 - 88) = v20;
          *(_OWORD *)(v8 - 80) = v145;
          *(_OWORD *)(v8 - 20) = *(_OWORD *)&v154[12];
          *(_OWORD *)(v8 - 48) = v151;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v154;
          *(_OWORD *)(v8 - 64) = v148;
          continue;
        }

        double v20 = *(double *)(a1 + 8);
LABEL_11:
        uint64_t v21 = 0LL;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)__int16 v153 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v153[16] = *(_OWORD *)(a1 + 80);
        __int128 v147 = *(_OWORD *)(a1 + 32);
        __int128 v150 = *(_OWORD *)(a1 + 48);
        __int128 v144 = *(_OWORD *)(a1 + 16);
        do
        {
          double v23 = *(double *)(a1 + v21 + 104);
          v21 += 96LL;
        }

        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = (double *)a2;
        if (v21 == 96)
        {
          __n128 v28 = (double *)a2;
          while (v24 < (unint64_t)v28)
          {
            double v26 = v28 - 12;
            double v29 = *(v28 - 11);
            v28 -= 12;
            if (v29 < v20) {
              goto LABEL_21;
            }
          }

          double v26 = v28;
        }

        else
        {
          do
          {
            double v26 = v25 - 12;
            double v27 = *(v25 - 11);
            v25 -= 12;
          }

          while (v27 >= v20);
        }

BOOL sub_101022C08(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 88) < *(double *)(a1 + 8))
      {
        __int128 v47 = *(_OWORD *)(a1 + 32);
        __int128 v53 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)__int128 v59 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&_BYTE v59[16] = *(_OWORD *)(a1 + 80);
        __int128 v35 = *(_OWORD *)a1;
        __int128 v41 = *(_OWORD *)(a1 + 16);
        __int128 v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        __int128 v8 = *(_OWORD *)(a2 - 48);
        __int128 v7 = *(_OWORD *)(a2 - 32);
        __int128 v9 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 64) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 64) = v47;
        *(_OWORD *)(a2 - 48) = v53;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v59;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v59[12];
        *(_OWORD *)(a2 - 96) = v35;
        *(_OWORD *)(a2 - 80) = v41;
      }

      return result;
    case 3uLL:
      sub_10091BC94(a1, a1 + 96, a2 - 96);
      return 1LL;
    case 4uLL:
      sub_10091C25C(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1LL;
    case 5uLL:
      uint64_t v21 = (__int128 *)(a1 + 96);
      uint64_t v22 = (__int128 *)(a1 + 192);
      double v23 = (__int128 *)(a1 + 288);
      sub_10091C25C(a1, a1 + 96, a1 + 192, a1 + 288);
      __int128 v49 = *(_OWORD *)(a1 + 320);
      __int128 v55 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)__int128 v60 = *(_OWORD *)(a1 + 352);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 368);
      __int128 v37 = *v23;
      __int128 v43 = *(_OWORD *)(a1 + 304);
      __int128 v24 = *(_OWORD *)(a2 - 80);
      __int128 *v23 = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v24;
      __int128 v26 = *(_OWORD *)(a2 - 48);
      __int128 v25 = *(_OWORD *)(a2 - 32);
      __int128 v27 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 364) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 336) = v26;
      *(_OWORD *)(a1 + 352) = v25;
      *(_OWORD *)(a1 + 320) = v27;
      *(_OWORD *)(a2 - 64) = v49;
      *(_OWORD *)(a2 - 48) = v55;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v60;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v60[12];
      *(_OWORD *)(a2 - 96) = v37;
      *(_OWORD *)(a2 - 80) = v43;
      __int128 v50 = *(_OWORD *)(a1 + 224);
      __int128 v56 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)__int128 v61 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 272);
      __int128 v38 = *v22;
      __int128 v44 = *(_OWORD *)(a1 + 208);
      __int128 v28 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v28;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 268) = *(_OWORD *)(a1 + 364);
      __int128 v29 = *(_OWORD *)(a1 + 304);
      *uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 208) = v29;
      __int128 *v23 = v38;
      *(_OWORD *)(a1 + 304) = v44;
      *(_OWORD *)(a1 + 364) = *(_OWORD *)&v61[12];
      BOOL v30 = *(double *)(a1 + 200) < *(double *)(a1 + 104);
      *(_OWORD *)(a1 + 336) = v56;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)v61;
      *(_OWORD *)(a1 + 320) = v50;
      if (!v30) {
        return 1LL;
      }
      __int128 v51 = *(_OWORD *)(a1 + 128);
      __int128 v57 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)__int128 v62 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 176);
      __int128 v39 = *v21;
      __int128 v45 = *(_OWORD *)(a1 + 112);
      __int128 v31 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v31;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 172) = *(_OWORD *)(a1 + 268);
      __int128 v32 = *(_OWORD *)(a1 + 208);
      *uint64_t v21 = *v22;
      *(_OWORD *)(a1 + 112) = v32;
      *uint64_t v22 = v39;
      *(_OWORD *)(a1 + 208) = v45;
      *(_OWORD *)(a1 + 268) = *(_OWORD *)&v62[12];
      BOOL v30 = *(double *)(a1 + 104) < *(double *)(a1 + 8);
      *(_OWORD *)(a1 + 240) = v57;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)v62;
      *(_OWORD *)(a1 + 224) = v51;
      if (!v30) {
        return 1LL;
      }
      __int128 v52 = *(_OWORD *)(a1 + 32);
      __int128 v58 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)__int128 v63 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 80);
      __int128 v40 = *(_OWORD *)a1;
      __int128 v46 = *(_OWORD *)(a1 + 16);
      __int128 v33 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = v33;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 172);
      __int128 v34 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v34;
      *uint64_t v21 = v40;
      *(_OWORD *)(a1 + 112) = v46;
      *(_OWORD *)(a1 + 172) = *(_OWORD *)&v63[12];
      BOOL result = 1LL;
      *(_OWORD *)(a1 + 144) = v58;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)v63;
      *(_OWORD *)(a1 + 128) = v52;
      return result;
    default:
      uint64_t v10 = a1 + 192;
      sub_10091BC94(a1, a1 + 96, a1 + 192);
      uint64_t v11 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1LL;
      }
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    double v14 = *(double *)(v11 + 8);
    if (v14 < *(double *)(v10 + 8))
    {
      uint64_t v15 = *(void *)v11;
      __int128 v48 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)double v54 = *(_OWORD *)(v11 + 64);
      *(_OWORD *)&v54[16] = *(_OWORD *)(v11 + 80);
      uint64_t v16 = v12;
      __int128 v36 = *(_OWORD *)(v11 + 16);
      __int128 v42 = *(_OWORD *)(v11 + 32);
      while (1)
      {
        uint64_t v17 = a1 + v16;
        __int128 v18 = *(_OWORD *)(a1 + v16 + 240);
        *(_OWORD *)(v17 + 320) = *(_OWORD *)(a1 + v16 + 224);
        *(_OWORD *)(v17 + 336) = v18;
        *(_OWORD *)(v17 + 352) = *(_OWORD *)(a1 + v16 + 256);
        __int128 v19 = *(_OWORD *)(a1 + v16 + 208);
        *(_OWORD *)(v17 + 288) = *(_OWORD *)(a1 + v16 + 192);
        *(_OWORD *)(v17 + 304) = v19;
        *(_OWORD *)(a1 + v16 + 364) = *(_OWORD *)(a1 + v16 + 268);
        if (v16 == -192) {
          break;
        }
        v16 -= 96LL;
        if (v14 >= *(double *)(v17 + 104))
        {
          uint64_t v20 = a1 + v16 + 288;
          goto LABEL_13;
        }
      }

      uint64_t v20 = a1;
LABEL_13:
      *(void *)uint64_t v20 = v15;
      *(double *)(v20 + 8) = v14;
      *(_OWORD *)(v20 + 48) = v48;
      *(_OWORD *)(v20 + 64) = *(_OWORD *)v54;
      *(_OWORD *)(v20 + 76) = *(_OWORD *)&v54[12];
      ++v13;
      *(_OWORD *)(v20 + 16) = v36;
      *(_OWORD *)(v20 + 32) = v42;
      if (v13 == 8) {
        return v11 + 96 == a2;
      }
    }

    uint64_t v10 = v11;
    v12 += 96LL;
    v11 += 96LL;
    if (v11 == a2) {
      return 1LL;
    }
  }

uint64_t sub_101022FE0(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = sub_100D54F8C(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v7 = off_101894D08;
  *(void *)(v7 + 184) = 0LL;
  *(_WORD *)(v7 + 192) = 0;
  __int128 v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonBackgroundActivitySession(ctor) #clbas",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v8, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101894D90);
  }
  __int128 v9 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    *(_DWORD *)std::stringbuf::string_type buf = 68289794;
    int v16 = 0;
    __int16 v17 = 2082;
    __int128 v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = "activity";
    __int16 v21 = 2114;
    uint64_t v22 = v10;
    __int16 v23 = 2050;
    uint64_t v24 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLDaemonBackgroundActivitySession(ctor) #clbas, event:%{public, location:escape_only} s, ClientKeyPath:%{public, location:escape_only}@, this:%{public}p}",  buf,  0x30u);
  }

  uint64_t v11 = *(void *)(a1 + 24);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1010231BC;
  void v13[3] = &unk_101836E00;
  v13[4] = a1;
  sub_100558E24(v11, (uint64_t)v13);
  *(_BYTE *)(a1 + 193) = sub_100D55504(a1);
  sub_100D57F8C(a1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_101023194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_1010231BC(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = (uint64_t)[*(id *)(v3 + 16) isEqual:sub_100019240((uint64_t)a2)];
  if ((_DWORD)result)
  {
    uint64_t v6 = *(void *)(v3 + 184);
    *(void *)(v3 + 184) = v5[23];
    v5[23] = v6;
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101894DB0);
    }
    uint64_t v7 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24LL))(a2);
      uint64_t v9 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v8;
      __int16 v19 = 2114;
      uint64_t v20 = v9;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#clbas consumeMatchingButterfly, dicType:%{public}d, ClientKeyPath:%{public, lo cation:escape_only}@, this:%{public}p}",  (uint8_t *)&v13,  0x2Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101894DB0);
      }
    }

    uint64_t v10 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      int v11 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24LL))(a2);
      uint64_t v12 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#clbas consumeMatchingButterfly",  "{msg%{public}.0s:#clbas consumeMatchingButterfly, dicType:%{public}d, ClientKeyPath:%{public, lo cation:escape_only}@, this:%{public}p}",  (uint8_t *)&v13,  0x2Cu);
    }

    return 1LL;
  }

  return result;
}

uint64_t sub_101023414(uint64_t a1)
{
  *(void *)a1 = off_101894D08;
  sub_100D56EF4(a1, 3);
  sub_101023AD0((uint64_t **)(a1 + 184), 0LL);
  return sub_100D555B4(a1);
}

void sub_10102345C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_101023414(a1);
  operator delete(v1);
}

void sub_101023470(uint64_t a1, CLConnectionMessage **a2)
{
  unint64_t v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44LL)
    {
LABEL_7:
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101894D90);
      }
      uint64_t v6 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        uint64_t v8 = CLConnectionMessage::name(*a2);
        uint64_t v9 = *(char *)(v8 + 23) >= 0 ? (uint64_t *)v8 : *(uint64_t **)v8;
        int v16 = 68289794;
        int v17 = 0;
        __int16 v18 = 2082;
        __int16 v19 = "";
        __int16 v20 = 2114;
        uint64_t v21 = v7;
        __int16 v22 = 2050;
        uint64_t v23 = a1;
        __int16 v24 = 2082;
        __int128 v25 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning #clbas received unhandled message, ClientKeyPath:%{public, location:esca pe_only}@, this:%{public}p, message:%{public, location:escape_only}s}",  (uint8_t *)&v16,  0x30u);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101894D90);
        }
      }

      uint64_t v10 = (os_log_s *)qword_101934978;
      if (os_signpost_enabled((os_log_t)qword_101934978))
      {
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v12 = (uint64_t *)CLConnectionMessage::name(*a2);
        else {
          int v13 = (uint64_t *)*v12;
        }
        int v16 = 68289794;
        int v17 = 0;
        __int16 v18 = 2082;
        __int16 v19 = "";
        __int16 v20 = 2114;
        uint64_t v21 = v11;
        __int16 v22 = 2050;
        uint64_t v23 = a1;
        __int16 v24 = 2082;
        __int128 v25 = v13;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Warning #clbas received unhandled message",  "{msg%{public}.0s:#Warning #clbas received unhandled message, ClientKeyPath:%{public, location:esca pe_only}@, this:%{public}p, message:%{public, location:escape_only}s}",  (uint8_t *)&v16,  0x30u);
      }

      return;
    }

    unint64_t v4 = (void *)*v4;
  }

  else if (v5 != 44)
  {
    goto LABEL_7;
  }

  if (memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL)) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101894D90);
  }
  int v14 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    int v16 = 68289538;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2114;
    uint64_t v21 = v15;
    __int16 v22 = 2050;
    uint64_t v23 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#clbas setting destroyUponDisconnection as True, ClientKeyPath:%{public, location:esc ape_only}@, this:%{public}p}",  (uint8_t *)&v16,  0x26u);
  }

  *(_BYTE *)(a1 + 48) = 1;
}

uint64_t sub_101023758()
{
  return 3LL;
}

uint64_t sub_101023760()
{
  return 0LL;
}

void sub_101023768(uint64_t a1)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101894D90);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#clbas authContext has changed, ClientKeyPath:%{public, location:escape_only}@, thi s:%{public}p}",  (uint8_t *)&v6,  0x26u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101894D90);
    }
  }

  unint64_t v4 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#clbas authContext has changed",  "{msg%{public}.0s:#clbas authContext has changed, ClientKeyPath:%{public, location:escape_only}@, thi s:%{public}p}",  (uint8_t *)&v6,  0x26u);
  }

  sub_100D57F8C(a1);
}

uint64_t sub_101023914(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

NSDictionary *sub_10102391C(uint64_t a1)
{
  v4[0] = @"SessionActive";
  uint64_t v2 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 192));
  v4[1] = @"SDKAtLeast2024";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  2LL);
}

uint64_t sub_1010239BC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 192)) {
    return 0LL;
  }
  unsigned __int8 v3 = [*(id *)(a1 + 40) diagnosticMask];
  else {
    uint64_t v1 = v3 & 3 | 0x10LL;
  }
  if ([*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:16]
    && [*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:0x40000]
    && [*(id *)(a1 + 40) inUseLevelIsAtLeast:4])
  {
    v1 |= 0x1000uLL;
  }

  if (([*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:0x100000] & 1) == 0
    && [*(id *)(a1 + 40) transientAwareRegistrationResult] == 4)
  {
    return v1 | 0x1000;
  }

  return v1;
}

void sub_101023A78(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_101023AA4(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101023AD0(uint64_t **a1, uint64_t *a2)
{
  unsigned __int8 v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    unint64_t v4 = sub_101023AFC(v3);
    operator delete(v4);
  }

uint64_t *sub_101023AFC(uint64_t *a1)
{
  return a1;
}

void *sub_101023B3C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_101023B88@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    *a2 = &off_101894E40;
    a2[1] = result;
    a2[3] = a2;
  }

  else
  {
    uint64_t v2 = sub_10127FB30();
    return sub_101023BB0(v2);
  }

  return result;
}

uint64_t sub_101023BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_10001A504(a1 + 8, a3);
  *(void *)(a1 + 40) = 0LL;
  sub_1000C6980((_BYTE *)(a1 + 48), (uint64_t)&byte_1019A18B0);
  *(_BYTE *)(a1 + 144) = 0;
  sub_10034FF34((uint64_t)sub_101023E04, a1, *(void **)a1, &v8);
  uint64_t v4 = v8;
  uint64_t v8 = 0LL;
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v6 = v8;
    uint64_t v8 = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:1 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:6 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:7 registrationInfo:0];
  return a1;
}

void sub_101023C98(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void **)(v2 + 32);
  if (v5 == v1)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v1;
  }

  else
  {
    if (!v5) {
      goto LABEL_11;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101023D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v9;
  if (v9 == v8)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v8;
    goto LABEL_5;
  }

  if (v9)
  {
    uint64_t v6 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return a1;
}

void sub_101023DC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_101023E04(int a1, int *a2, unsigned __int8 *a3, id *a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101894DF0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiServiceClient::onWifiNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101894DF0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      __int16 v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiServiceClient::onWifiNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_101024228((uint64_t)a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101023FCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101023FEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3 == (void *)(a1 + 8))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)(a1 + 8);
    goto LABEL_10;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

id sub_1010240A4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if ((_DWORD)v2 == 1)
  {
    a1 = sub_10127FC98();
    goto LABEL_6;
  }

  if ((_DWORD)v2 == 6)
  {
LABEL_6:
    a1 = sub_10127FDF8(a1);
    goto LABEL_7;
  }

  if ((_DWORD)v2 != 7) {
    return [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:v2 registrationInfo:0];
  }
LABEL_7:
  uint64_t v4 = sub_10127FF58(a1);
  return (id)sub_1010240E8(v4);
}

id sub_1010240E8(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == 1)
  {
    a1 = sub_1012800B8();
    goto LABEL_6;
  }

  if (v2 == 6)
  {
LABEL_6:
    a1 = sub_101280218(a1);
    goto LABEL_7;
  }

  if (v2 != 7) {
    return objc_msgSend( *(id *)(*(void *)(a1 + 40) + 16),  "unregister:forNotification:",  *(void *)(*(void *)(a1 + 40) + 8));
  }
LABEL_7:
  uint64_t v4 = sub_101280378(a1);
  return (id)sub_101024128(v4);
}

uint64_t sub_101024128(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

BOOL sub_101024130(uint64_t a1)
{
  return *(_BYTE *)(a1 + 136) && *(_DWORD *)(a1 + 88) > 0;
}

uint64_t sub_101024150(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 113);
}

_BYTE *sub_101024158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 136) && *(int *)(a1 + 88) > 0)
  {
    *(void *)a2 = *(void *)(a1 + 48);
    uint64_t result = (_BYTE *)(a2 + 8);
    if (*(char *)(a1 + 79) < 0)
    {
      uint64_t result = sub_1010DD48C(result, *(void **)(a1 + 56), *(void *)(a1 + 64));
    }

    else
    {
      *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 56);
      *(void *)(a2 + 24) = *(void *)(a1 + 72);
    }

    __int128 v7 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 48) = v7;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 112);
    uint64_t v6 = *(void *)(a1 + 128);
  }

  else
  {
    *(void *)a2 = qword_1019A1910;
    uint64_t result = (_BYTE *)(a2 + 8);
    if (byte_1019A1918[23] < 0)
    {
      uint64_t result = sub_1010DD48C(result, *(void **)byte_1019A1918, *(unint64_t *)&byte_1019A1918[8]);
    }

    else
    {
      *(_OWORD *)uint64_t result = *(_OWORD *)byte_1019A1918;
      *(void *)(a2 + 24) = *(void *)&byte_1019A1918[16];
    }

    __int128 v5 = xmmword_1019A1940;
    *(_OWORD *)(a2 + 32) = xmmword_1019A1930;
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = xmmword_1019A1950;
    uint64_t v6 = qword_1019A1960;
  }

  *(void *)(a2 + 80) = v6;
  return result;
}

uint64_t sub_101024228(uint64_t a1, int a2, int *a3, unsigned __int8 *a4)
{
  if ((*a3 - 6) >= 2)
  {
    if (*a3 == 1)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894E10);
      }
      char v11 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *a3;
        int v13 = *(unsigned __int8 *)(a1 + 144);
        int v14 = *a4;
        *(_DWORD *)std::stringbuf::string_type buf = 67109632;
        int v31 = v12;
        LOWORD(__p) = 1024;
        *(_DWORD *)((char *)&__p + 2) = v13;
        HIWORD(__p) = 1024;
        int v33 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "notification, %d, kNotificationPower, fIsWifiPowered, %d, data.power, %d",  buf,  0x14u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101894E10);
        }
        int v21 = *(unsigned __int8 *)(a1 + 144);
        int v22 = *a4;
        __int16 v26 = 1024;
        BOOL v27 = v21;
        __int16 v28 = 1024;
        int v29 = v22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "notification, %d, kNotificationPower, fIsWifiPowered, %d, data.power, %d",  v25,  20,  67109632);
        __int16 v24 = (uint8_t *)v23;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiServiceClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiServic e_Type::NotificationData &)",  "%s\n",  v23);
        if (v24 != buf) {
          free(v24);
        }
      }

      *(_BYTE *)(a1 + 144) = *a4;
    }
  }

  else
  {
    if (a4[96]) {
      BOOL v8 = *((_DWORD *)a4 + 12) <= 0;
    }
    else {
      BOOL v8 = 1;
    }
    int v9 = !v8;
    if (*(_BYTE *)(a1 + 136)) {
      BOOL v10 = *(_DWORD *)(a1 + 88) > 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894E10);
    }
    uint64_t v15 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *a3;
      *(_DWORD *)std::stringbuf::string_type buf = 67240704;
      int v31 = v16;
      LOWORD(__p) = 1026;
      *(_DWORD *)((char *)&__p + 2) = v10;
      HIWORD(__p) = 1026;
      int v33 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "notification, %{public}d, kNotificationLinkStatus/Roam, wasAssociated, %{public}d, isAssociated, %{public}d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894E10);
      }
      int v18 = *a3;
      v25[0] = 67240704;
      v25[1] = v18;
      __int16 v26 = 1026;
      BOOL v27 = v10;
      __int16 v28 = 1026;
      int v29 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "notification, %{public}d, kNotificationLinkStatus/Roam, wasAssociated, %{public}d, isAssociated, %{public}d",  v25,  20);
      __int16 v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiServiceClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_ Type::NotificationData &)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    sub_10099F24C((uint64_t)(a4 + 8), (uint64_t)buf);
    sub_100351804(a1 + 48, (uint64_t)buf);
    if (v35 && v34 < 0) {
      operator delete(__p);
    }
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    *(_DWORD *)std::stringbuf::string_type buf = a2;
    return (*(uint64_t (**)(uint64_t, uint8_t *, int *, unsigned __int8 *))(*(void *)result + 48LL))( result,  buf,  a3,  a4);
  }

  return result;
}

void sub_10102464C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_101024658(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_101024684(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010246B0(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_1010246E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101894E40;
  result[1] = v3;
  return result;
}

uint64_t sub_101024718(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101894E40;
  a2[1] = v2;
  return result;
}

uint64_t sub_101024734(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8), *a2);
}

uint64_t sub_101024748(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_101024784()
{
}

uint64_t sub_101024790()
{
  qword_1019A4140 = 0LL;
  return __cxa_atexit((void (*)(void *))sub_101023B3C, &unk_1019A4128, (void *)&_mh_execute_header);
}

uint64_t sub_1010247B0(uint64_t a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_101894F60;
  *(void *)(a1 + 72) = off_101895028;
  *(void *)(a1 + 480) = off_101895078;
  sub_100B14CF0((void *)(a1 + 488), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 504), 0LL, 0LL);
  *(_WORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(void *)(a1 + 544) = -1LL;
  *(_DWORD *)(a1 + 552) = -1;
  *(void *)(a1 + 560) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 568) = 0LL;
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0LL;
  *(_BYTE *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 596) = xmmword_1013BF180;
  *(void *)(a1 + 612) = 0LL;
  LODWORD(__p[0]) = 8500;
  sub_101206440((unsigned __int8 *)(a1 + 620), "StepCounterAnalyticsEpochTrigger", __p, 0);
  *(_WORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 716) = 0;
  *(_OWORD *)(a1 + 684) = 0u;
  *(_OWORD *)(a1 + 700) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  return a1;
}

void sub_1010248FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_10102492C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  int v12 = (void *)(a1 + 8);
  *(void *)a1 = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 8));
  void *v12 = &off_10182BDA0;
  *(void *)a1 = off_101895168;
  *(void *)(a1 + 72) = off_101895210;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_101895168;
  *(void *)(a1 + 72) = off_101895210;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 400) = 12000;
  *(void *)(a1 + 408) = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 416));
  *(void *)(a1 + 416) = &off_10182BDA0;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  uint64_t v15 = (int *)(a1 + 400);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 400));
  int v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    int *v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101895250);
  }
  __int16 v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101895250);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    __int16 v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLStepCountEntry>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDa taProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_101024CD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[51] = off_10182BD58;
  sub_1001B9C98(v27);
  sub_10046CA00(v26);
  sub_100D8A88C(a12);
  void *v24 = off_10182BD58;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_101024D78()
{
}

void *sub_101024D80(void *a1)
{
  a1[9] = off_101895210;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_101895168;
  a1[51] = off_10182BD58;
  sub_1001B9C98(a1 + 52);
  sub_10046CA00(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_10182BD58;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_101024DFC(void *a1)
{
  *a1 = off_101894F60;
  a1[9] = off_101895028;
  a1[60] = off_101895078;
  sub_101024E48((uint64_t)a1, 0LL, 0LL);
  return sub_101024D80(a1);
}

void sub_101024E48(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0LL) == (a3 != 0LL))
  {

    *(void *)(a1 + 536) = a2;
    char v6 = *(const void **)(a1 + 528);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 528) = _Block_copy(a3);
    }
  }

  else
  {
    uint64_t v7 = sub_1012804D8();
    sub_101024EBC(v7);
  }

void *sub_101024EC0(uint64_t a1)
{
  return sub_101024DFC((void *)(a1 - 72));
}

void *sub_101024EC8(uint64_t a1)
{
  return sub_101024DFC((void *)(a1 - 480));
}

void sub_101024ED0(void *a1)
{
  uint64_t v1 = sub_101024DFC(a1);
  operator delete(v1);
}

void sub_101024EE4(uint64_t a1)
{
  uint64_t v1 = sub_101024DFC((void *)(a1 - 72));
  operator delete(v1);
}

void sub_101024EFC(uint64_t a1)
{
  uint64_t v1 = sub_101024DFC((void *)(a1 - 480));
  operator delete(v1);
}

void sub_101024F14(uint64_t a1)
{
  if (sub_1003C1048(*(void *)(a1 + 80)))
  {
    sub_101025124(a1);
    sub_1003B59A0( *(void *)(a1 + 80),  "StepCountHistory",  (const char **)&qword_10199FF08,  (const std::string::value_type **)&qword_1019A02C8,  0);
    *(void *)(a1 + 488) = sub_1003BF158( *(void *)(a1 + 80),  "INSERT INTO StepCountHistory (startTime, timestamp, count, distance, rawdistance, floorsAs cended, floorsDescended, pace, activeTime, firstStepTime, pushCount, workoutType, elevatio nAscended, elevationDescended, distanceSource, currentCadence, distanceMobility, pedometer ArmConstrainedState) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 496) = v2;
    if (!sub_100B14D64((void *)(a1 + 488))) {
      sub_1003B8E64(*(void *)(a1 + 80));
    }
    *(void *)(a1 + 504) = sub_1003BF158( *(void *)(a1 + 80),  "SELECT * FROM StepCountHistory ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 512) = v3;
    *(_DWORD *)(a1 + 132) = sub_101025740(a1);
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    uint64_t v4 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Device is locked and we are unable to open the database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Device is locked and we are unable to open the database",  v7,  2);
      char v6 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLStepCountRecorderDb::prepareSQLStatements()", "%s\n", v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

void sub_101025124(uint64_t a1)
{
  if (sub_1003B747C(*(void *)(a1 + 80), "StepCountHistory"))
  {
    uint64_t v2 = 0LL;
    int v3 = 0;
    uint64_t v7 = &dword_10199FFD0;
    do
    {
      BOOL v8 = off_101894EB0[v2 + 4];
      __int128 v44 = v8;
      int v45 = 5;
      __int16 v46 = 0;
      char v47 = 0;
      char v48 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "StepCountHistory", v8, (uint64_t)&v44) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)buf);
        int v9 = sub_10000CF44(&v50, (uint64_t)"ALTER TABLE StepCountHistory", 28LL);
        BOOL v10 = sub_10000CF44(v9, (uint64_t)" ADD COLUMN ", 12LL);
        size_t v11 = strlen(v8);
        int v12 = sub_10000CF44(v10, (uint64_t)v8, v11);
        uint64_t v13 = sub_10000CF44(v12, (uint64_t)" ", 1LL);
        uint64_t v14 = (const char *)sub_1003BCC40(*v7);
        size_t v15 = strlen(v14);
        char v16 = sub_10000CF44(v13, (uint64_t)v14, v15);
        sub_10000CF44(v16, (uint64_t)";", 1LL);
        uint64_t v17 = *(void *)(a1 + 80);
        std::stringbuf::str(&v41, &v51);
        if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v18 = &v41;
        }
        else {
          int v18 = (std::stringbuf::string_type *)v41.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v17, (char *)v18, &v39);
        uint64_t v19 = v39.__r_.__value_.__r.__words[0];
        v39.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v20 = *(void *)(a1 + 80);
        int v21 = (sqlite3_stmt *)sub_100019240(v19);
        sub_1003BB2BC(v20, v21);
        sub_10000CE18((uint64_t)&v41);
        if (!strcmp(*((const char **)v7 - 1), "pedometerArmConstrainedState"))
        {
          BOOL v27 = sub_10000CF44(&v41.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE StepCountHistory SET ", 28LL);
          size_t v28 = strlen(v8);
          uint64_t v29 = sub_10000CF44(v27, (uint64_t)v8, v28);
          BOOL v30 = sub_10000CF44(v29, (uint64_t)" = ", 3LL);
          int v24 = (void *)std::ostream::operator<<(v30, 255LL);
          __int128 v25 = ";";
          uint64_t v26 = 1LL;
        }

        else
        {
          int v22 = sub_10000CF44(&v41.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE StepCountHistory SET ", 28LL);
          size_t v23 = strlen(v8);
          int v24 = sub_10000CF44(v22, (uint64_t)v8, v23);
          __int128 v25 = " = 0;";
          uint64_t v26 = 5LL;
        }

        sub_10000CF44(v24, (uint64_t)v25, v26);
        uint64_t v31 = *(void *)(a1 + 80);
        std::stringbuf::str(&v39, &v42);
        if ((v39.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v32 = &v39;
        }
        else {
          __int128 v32 = (std::stringbuf::string_type *)v39.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v31, (char *)v32, &v40);
        uint64_t v33 = v40;
        uint64_t v40 = 0LL;
        uint64_t v34 = *(void *)(a1 + 80);
        char v35 = (sqlite3_stmt *)sub_100019240(v33);
        sub_1003BB2BC(v34, v35);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
        }
        v41.__r_.__value_.__r.__words[0] = v4;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + *(void *)(v4 - 24)) = v6;
        v41.__r_.__value_.__l.__cap_ = v5;
        std::streambuf::~streambuf(&v42);
        std::ios::~ios(&v43);
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
        }
        *(void *)std::stringbuf::string_type buf = v4;
        *(void *)&buf[*(void *)(v4 - 24)] = v6;
        std::string::size_type v50 = v5;
        std::streambuf::~streambuf(&v51);
        std::ios::~ios(&v52);
        int v3 = 1;
      }

      v7 += 12;
      ++v2;
    }

    while (v2 != 15);
    if (((v3 | sub_101025804( a1,  "StepCountHistory",  (const char **)&qword_10199FF08,  (const std::string::value_type **)&qword_1019A02C8)) & 1) != 0) {
      sub_1003BF200(*(void *)(a1 + 80), "StepCountHistory");
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    __int128 v36 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "StepCountHistory table doesn't even exist",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      LOWORD(v41.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "StepCountHistory table doesn't even exist",  &v41,  2);
      __int128 v38 = (uint8_t *)v37;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLStepCountRecorderDb::alterTableIfNecessary()", "%s\n", v37);
      if (v38 != buf) {
        free(v38);
      }
    }
  }

void sub_1010256A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a24);
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  sub_1011F8850((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t sub_101025740(uint64_t a1)
{
  uint64_t v3 = v8;
  std::string::size_type v4 = (sqlite3_stmt *)sub_100019240(v8);
  int v5 = sqlite3_step(v4);
  if (v5 == 100)
  {
    std::string::size_type v6 = (sqlite3_stmt *)sub_100019240(v3);
    uint64_t v1 = sqlite3_column_int(v6, 0);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (v5 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_1010257E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101025804(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101895250);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895250);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      __int128 v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLStepCountEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnIn fo *, const char **) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    int v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)double v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    size_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      char v16 = v143;
    }
    else {
      char v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    int v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      int v21 = &__p;
    }
    else {
      int v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    int v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v27 = &__p;
      }
      else {
        BOOL v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      size_t v28 = v143;
    }
    else {
      size_t v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    BOOL v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = &v139;
    }
    else {
      uint64_t v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    __int128 v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::stringbuf::string_type v41 = &__p;
    }
    else {
      std::stringbuf::string_type v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    std::stringbuf v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    __int16 v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v47 = &__p;
      }
      else {
        char v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      char v48 = v143;
    }
    else {
      char v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    std::string::size_type v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v54 = buf;
    }
    else {
      double v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    __int128 v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v60 = buf;
    }
    else {
      __int128 v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int128 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v69 = &__p;
    }
    else {
      __int128 v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    __int128 v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    __int128 v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v75 = &__p;
      }
      else {
        __int128 v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    __int128 v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      uint64_t v79 = &__p;
    }
    else {
      uint64_t v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    float v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    int v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v85 = &__p;
      }
      else {
        double v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      uint64_t v86 = v143;
    }
    else {
      uint64_t v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    __int128 v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    int v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int64_t v95 = &__p;
    }
    else {
      int64_t v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    int64_t v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      unsigned int v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unsigned int v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v103 = &__p;
        }
        else {
          __int128 v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        __int128 v104 = v141;
      }
      else {
        __int128 v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      __int128 v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      std::stringbuf::string_type v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v114 = buf;
      }
      else {
        uint64_t v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      __int128 v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v121 = &__p;
      }
      else {
        __int128 v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      __int128 v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895250);
      }
      unint64_t v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101895250);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        __int128 v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLStepCountEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::Column Info *, const char **) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895250);
      }
      uint64_t v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101895250);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        __int128 v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<CLStepCountEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::Column Info *, const char **) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_10102699C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void sub_101026CBC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(void *)(a3 + 48) = 0LL;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v106 = a1 + 112;
  (*(void (**)(void))(v10 + 16))();
  __int16 v108 = 256;
  if (a4 <= a5)
  {
    __int128 v117 = 0u;
    __int128 v118 = 0u;
    __int128 v115 = 0u;
    __int128 v116 = 0u;
    __int128 v113 = 0u;
    __int128 v114 = 0u;
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    __int128 v110 = 0u;
    memset(v109, 0, sizeof(v109));
    __int128 v104 = 0u;
    __int128 v105 = 0u;
    __int128 v102 = 0u;
    __int128 v103 = 0u;
    __int128 v100 = 0u;
    __int128 v101 = 0u;
    __int128 v98 = 0u;
    __int128 v99 = 0u;
    __int128 v96 = 0u;
    __int128 v97 = 0u;
    __int128 v94 = 0u;
    __int128 v95 = 0u;
    __int128 v92 = 0u;
    __int128 v93 = 0u;
    __int128 v90 = 0u;
    __int128 v91 = 0u;
    __int128 v88 = 0u;
    __int128 v89 = 0u;
    __int128 v86 = 0u;
    __int128 v87 = 0u;
    __int128 v84 = 0u;
    __int128 v85 = 0u;
    __int128 v82 = 0u;
    __int128 v83 = 0u;
    __int128 v80 = 0u;
    __int128 v81 = 0u;
    __int128 v78 = 0u;
    __int128 v79 = 0u;
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    __int128 v74 = 0u;
    __int128 v75 = 0u;
    __int128 v73 = 0u;
    if (sub_1010278B4(a1, a2, (uint64_t)v109, (uint64_t)&v95, a4)
      && sub_1010278B4(a1, a2, (uint64_t)&v84, (uint64_t)&v73, a5))
    {
      double v18 = *((double *)v109 + 1);
      double v19 = *((double *)&v95 + 1);
      double v20 = 0.0;
      double v21 = 0.0;
      uint64_t v22 = *((void *)&v84 + 1);
      uint64_t v23 = *((void *)&v73 + 1);
      LODWORD(v16) = v117;
      LODWORD(v17) = v104;
      int v24 = DWORD2(v109[1]);
      int v25 = DWORD2(v96);
      int v26 = v88;
      int v27 = DWORD1(v88);
      int v28 = v77;
      int v29 = DWORD1(v77);
      LODWORD(v15) = v93;
      LODWORD(v14) = v82;
      if (a2 == 1
        && (*(double *)&v109[1] == 0.0 || *(double *)&v96 == 0.0 || *(double *)&v85 == 0.0 || *(double *)&v74 == 0.0))
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        __int128 v53 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "#Warning First step time invalid.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101895138);
          }
          v72[0] = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "#Warning First step time invalid.",  v72,  2);
          __int128 v57 = (uint8_t *)v56;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLStepDistance CLStepCountRecorderDb::queryStepCount(CFAbsoluteTime, CFAbsoluteTime, QueryTimeType) const",  "%s\n",  v56);
          if (v57 != buf) {
            free(v57);
          }
        }
      }

      else
      {
        uint64_t v30 = (uint64_t)((double)DWORD2(v109[1]) + v21 * ((double)DWORD2(v96) - (double)DWORD2(v109[1])));
        uint64_t v31 = (uint64_t)((double)v112 + v21 * ((double)v99 - (double)v112));
        uint64_t v32 = (uint64_t)((double)DWORD1(v112) + v21 * ((double)DWORD1(v99) - (double)DWORD1(v112)));
        uint64_t v33 = (uint64_t)((double)v16 + v21 * ((double)v17 - (double)v16));
        uint64_t v34 = (uint64_t)((double)DWORD2(v85) + v20 * ((double)DWORD2(v74) - (double)DWORD2(v85)));
        uint64_t v35 = (uint64_t)((double)v88 + v20 * ((double)v77 - (double)v88));
        uint64_t v36 = (uint64_t)((double)DWORD1(v88) + v20 * ((double)DWORD1(v77) - (double)DWORD1(v88)));
        double v37 = (double)v15 + v20 * ((double)v14 - (double)v15);
        uint64_t v38 = (uint64_t)v37;
        if (v34 < v30 || v38 < v33 || v35 < v31 || v36 < v32)
        {
          uint64_t v70 = (uint64_t)((double)v16 + v21 * ((double)v17 - (double)v16));
          uint64_t v71 = (uint64_t)((double)DWORD1(v112) + v21 * ((double)DWORD1(v99) - (double)DWORD1(v112)));
          uint64_t v69 = (uint64_t)((double)v112 + v21 * ((double)v99 - (double)v112));
          int v67 = DWORD1(v112);
          int v68 = DWORD1(v99);
          int v65 = v112;
          int v66 = DWORD2(v74);
          int v63 = v99;
          int v64 = DWORD2(v85);
          uint64_t v61 = (uint64_t)((double)v88 + v20 * ((double)v77 - (double)v88));
          uint64_t v62 = (uint64_t)((double)DWORD1(v88) + v20 * ((double)DWORD1(v77) - (double)DWORD1(v88)));
          uint64_t v59 = (uint64_t)v37;
          uint64_t v60 = (uint64_t)((double)DWORD2(v109[1]) + v21 * ((double)DWORD2(v96) - (double)DWORD2(v109[1])));
          uint64_t v58 = (uint64_t)((double)DWORD2(v85) + v20 * ((double)DWORD2(v74) - (double)DWORD2(v85)));
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101895138);
          }
          __int128 v51 = (os_log_s *)qword_101934518;
          if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 68295938;
            *(_DWORD *)unsigned __int8 v120 = 0;
            *(_WORD *)&v120[4] = 2082;
            *(void *)&v120[6] = "";
            *(_WORD *)&v120[14] = 2050;
            *(double *)&v120[16] = a4;
            __int16 v121 = 2050;
            double v122 = a5;
            __int16 v123 = 2050;
            double v124 = v18;
            __int16 v125 = 2050;
            double v126 = v19;
            __int16 v127 = 1026;
            *(_DWORD *)uint64_t v128 = v24;
            *(_WORD *)&v128[4] = 1026;
            *(_DWORD *)&v128[6] = v25;
            LOWORD(v129) = 1026;
            *(_DWORD *)((char *)&v129 + 2) = v65;
            HIWORD(v129) = 1026;
            int v130 = v63;
            __int16 v131 = 1026;
            int v132 = v67;
            __int16 v133 = 1026;
            int v134 = v68;
            __int16 v135 = 2050;
            uint64_t v136 = v22;
            __int16 v137 = 2050;
            uint64_t v138 = v23;
            __int16 v139 = 1026;
            int v140 = v64;
            __int16 v141 = 1026;
            int v142 = v66;
            __int16 v143 = 1026;
            int v144 = v26;
            __int16 v145 = 1026;
            int v146 = v28;
            __int16 v147 = 1026;
            int v148 = v27;
            __int16 v149 = 1026;
            int v150 = v29;
            __int16 v151 = 2050;
            uint64_t v152 = v60;
            __int16 v153 = 2050;
            uint64_t v154 = v58;
            __int16 v155 = 2050;
            uint64_t v156 = v70;
            __int16 v157 = 2050;
            uint64_t v158 = v59;
            __int16 v159 = 2050;
            uint64_t v160 = v69;
            __int16 v161 = 2050;
            uint64_t v162 = v61;
            __int16 v163 = 2050;
            uint64_t v164 = v71;
            __int16 v165 = 2050;
            uint64_t v166 = v62;
            __int16 v167 = 1026;
            int v168 = a2;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Steps were found to be non monotonically increasing, startTime:%{public}.6f , endTime:%{public}.6f, startLeft.startTime:%{public}.6f, startRight.startTime:%{p ublic}.6f, startLeft.count:%{public}u, startRight.count:%{public}u, startLeft.floorsAscended :%{public}u, startRight.floorsAscended:%{public}u, startLeft.floorsDescended:%{public}u, startRi ght.floorsDescended:%{public}u, endLeft.startTime:%{public}.6f, endRight.startTime:%{publi c}.6f, endLeft.count:%{public}u, endRight.count:%{public}u, endLeft.floorsAscended:%{public} u, endRight.floorsAscended:%{public}u, endLeft.floorsDescended:%{public}u, endRight.floorsDescen ded:%{public}u, startCount:%{public}ld, endCount:%{public}ld, startPushCount:%{public}ld,  endPushCount:%{public}ld, startFloorAscended:%{public}ld, endFloorAscended:%{public}ld, startF loorDescended:%{public}ld, endFloorDescended:%{public}ld, queryTimeType:%{public}d}",  buf,  0xECu);
            if (qword_101934510 != -1) {
              dispatch_once(&qword_101934510, &stru_101895138);
            }
          }

          uint64_t v52 = qword_101934518;
          if (os_signpost_enabled((os_log_t)qword_101934518))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 68295938;
            *(_DWORD *)unsigned __int8 v120 = 0;
            *(_WORD *)&v120[4] = 2082;
            *(void *)&v120[6] = "";
            *(_WORD *)&v120[14] = 2050;
            *(double *)&v120[16] = a4;
            __int16 v121 = 2050;
            double v122 = a5;
            __int16 v123 = 2050;
            double v124 = *((double *)v109 + 1);
            __int16 v125 = 2050;
            double v126 = *((double *)&v95 + 1);
            __int16 v127 = 1026;
            *(_DWORD *)uint64_t v128 = v24;
            *(_WORD *)&v128[4] = 1026;
            *(_DWORD *)&v128[6] = v25;
            LOWORD(v129) = 1026;
            *(_DWORD *)((char *)&v129 + 2) = v65;
            HIWORD(v129) = 1026;
            int v130 = v63;
            __int16 v131 = 1026;
            int v132 = v67;
            __int16 v133 = 1026;
            int v134 = v68;
            __int16 v135 = 2050;
            uint64_t v136 = *((void *)&v84 + 1);
            __int16 v137 = 2050;
            uint64_t v138 = *((void *)&v73 + 1);
            __int16 v139 = 1026;
            int v140 = v64;
            __int16 v141 = 1026;
            int v142 = v66;
            __int16 v143 = 1026;
            int v144 = v26;
            __int16 v145 = 1026;
            int v146 = v28;
            __int16 v147 = 1026;
            int v148 = v27;
            __int16 v149 = 1026;
            int v150 = v29;
            __int16 v151 = 2050;
            uint64_t v152 = v60;
            __int16 v153 = 2050;
            uint64_t v154 = v58;
            __int16 v155 = 2050;
            uint64_t v156 = v70;
            __int16 v157 = 2050;
            uint64_t v158 = v59;
            __int16 v159 = 2050;
            uint64_t v160 = v69;
            __int16 v161 = 2050;
            uint64_t v162 = v61;
            __int16 v163 = 2050;
            uint64_t v164 = v71;
            __int16 v165 = 2050;
            uint64_t v166 = v62;
            __int16 v167 = 1026;
            int v168 = a2;
            char v47 = "Steps were found to be non monotonically increasing";
            char v48 = "{msg%{public}.0s:Steps were found to be non monotonically increasing, startTime:%{public"
                  "}.6f, endTime:%{public}.6f, startLeft.startTime:%{public}.6f, startRight.startTime"
                  ":%{public}.6f, startLeft.count:%{public}u, startRight.count:%{public}u, startLeft.floo"
                  "rsAscended:%{public}u, startRight.floorsAscended:%{public}u, startLeft.floorsDescended:%{pub"
                  "lic}u, startRight.floorsDescended:%{public}u, endLeft.startTime:%{public}.6f, endRight.s"
                  "tartTime:%{public}.6f, endLeft.count:%{public}u, endRight.count:%{public}u, endLeft.fl"
                  "oorsAscended:%{public}u, endRight.floorsAscended:%{public}u, endLeft.floorsDescended:%{publi"
                  "c}u, endRight.floorsDescended:%{public}u, startCount:%{public}ld, endCount:%{public}ld, "
                  "startPushCount:%{public}ld, endPushCount:%{public}ld, startFloorAscended:%{public}ld, endF"
                  "loorAscended:%{public}ld, startFloorDescended:%{public}ld, endFloorDescended:%{public}ld, "
                  "queryTimeType:%{public}d}";
            std::string::size_type v49 = (os_log_s *)v52;
            uint32_t v50 = 236;
            goto LABEL_43;
          }
        }

        else
        {
          double v39 = *(double *)&v110 + v21 * (*(double *)&v97 - *(double *)&v110);
          double v40 = *((double *)&v110 + 1) + v21 * (*((double *)&v97 + 1) - *((double *)&v110 + 1));
          double v41 = *((double *)&v113 + 1) + v21 * (*((double *)&v100 + 1) - *((double *)&v113 + 1));
          double v42 = *(double *)&v86 + v20 * (*(double *)&v75 - *(double *)&v86);
          double v43 = *((double *)&v86 + 1) + v20 * (*((double *)&v75 + 1) - *((double *)&v86 + 1));
          double v44 = *((double *)&v89 + 1) + v20 * (*((double *)&v78 + 1) - *((double *)&v89 + 1));
          if (v42 - v39 >= 0.0 && v43 - v40 >= 0.0 && v44 - v41 >= 0.0)
          {
            double v54 = *(double *)&v111 + v21 * (*(double *)&v98 - *(double *)&v111);
            double v55 = *(double *)&v87 + v20 * (*(double *)&v76 - *(double *)&v87);
            *(_DWORD *)a3 = (int)((double)v34 - (double)v30);
            *(double *)(a3 + 8) = v42 - v39;
            *(double *)(a3 + 16) = v43 - v40;
            *(double *)(a3 + 24) = v55 - v54;
            *(_DWORD *)(a3 + 32) = (int)((double)v35 - (double)v31);
            *(_DWORD *)(a3 + 36) = (int)((double)v36 - (double)v32);
            *(double *)(a3 + 40) = v44 - v41;
            *(_DWORD *)(a3 + 48) = (int)((double)v38 - (double)v33);
          }

          else
          {
            if (qword_101934510 != -1) {
              dispatch_once(&qword_101934510, &stru_101895138);
            }
            size_t v45 = (os_log_s *)qword_101934518;
            if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::stringbuf::string_type buf = 68290562;
              *(_DWORD *)unsigned __int8 v120 = 0;
              *(_WORD *)&v120[4] = 2082;
              *(void *)&v120[6] = "";
              *(_WORD *)&v120[14] = 2050;
              *(double *)&v120[16] = v39;
              __int16 v121 = 2050;
              double v122 = v42;
              __int16 v123 = 2050;
              double v124 = v40;
              __int16 v125 = 2050;
              double v126 = v43;
              __int16 v127 = 2050;
              *(double *)uint64_t v128 = v41;
              *(_WORD *)&v128[8] = 2050;
              double v129 = v44;
              _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Invalid delta distance and time., startDistance:%{public}f, endDistan ce:%{public}f, startRawDistance:%{public}f, endRawDistance:%{public}f, startActi veTime:%{public}f, endActiveTime:%{public}f}",  buf,  0x4Eu);
              if (qword_101934510 != -1) {
                dispatch_once(&qword_101934510, &stru_101895138);
              }
            }

            uint64_t v46 = qword_101934518;
            if (os_signpost_enabled((os_log_t)qword_101934518))
            {
              *(_DWORD *)std::stringbuf::string_type buf = 68290562;
              *(_DWORD *)unsigned __int8 v120 = 0;
              *(_WORD *)&v120[4] = 2082;
              *(void *)&v120[6] = "";
              *(_WORD *)&v120[14] = 2050;
              *(double *)&v120[16] = v39;
              __int16 v121 = 2050;
              double v122 = v42;
              __int16 v123 = 2050;
              double v124 = v40;
              __int16 v125 = 2050;
              double v126 = v43;
              __int16 v127 = 2050;
              *(double *)uint64_t v128 = v41;
              *(_WORD *)&v128[8] = 2050;
              double v129 = v44;
              char v47 = "Invalid delta distance and time.";
              char v48 = "{msg%{public}.0s:Invalid delta distance and time., startDistance:%{public}f, endDi"
                    "stance:%{public}f, startRawDistance:%{public}f, endRawDistance:%{public}f, s"
                    "tartActiveTime:%{public}f, endActiveTime:%{public}f}";
              std::string::size_type v49 = (os_log_s *)v46;
              uint32_t v50 = 78;
LABEL_43:
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v49,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v47,  v48,  buf,  v50);
            }
          }
        }
      }
    }

    if (!HIBYTE(v108)) {
      return;
    }
    goto LABEL_50;
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101895138);
  }
  size_t v11 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134349568;
    *(double *)unsigned __int8 v120 = a4;
    *(_WORD *)&v120[8] = 2050;
    *(double *)&v120[10] = a5;
    *(_WORD *)&v120[18] = 1026;
    *(_DWORD *)&v120[20] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "Assumption failed: startTime (%{public}f) was found to be newer than endTime (%{public}f), queryTimeType %{public}d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    LODWORD(v109[0]) = 134349568;
    *(double *)((char *)v109 + 4) = a4;
    WORD6(v109[0]) = 2050;
    *(double *)((char *)v109 + 14) = a5;
    WORD3(v109[1]) = 1026;
    DWORD2(v109[1]) = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Assumption failed: startTime (%{public}f) was found to be newer than endTime (%{public}f), queryTimeType %{public}d",  v109,  28);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLStepDistance CLStepCountRecorderDb::queryStepCount(CFAbsoluteTime, CFAbsoluteTime, QueryTimeType) const",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

void sub_10102787C(_Unwind_Exception *a1)
{
}

uint64_t sub_1010278B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10 = "startTime";
  if (a2 == 1 && (sub_1004F97F4() & 2) != 0) {
    uint64_t v10 = "firstStepTime";
  }
  sub_1010DDBC0(&v75, v10);
  sub_10000CE18((uint64_t)v71);
  sub_10000CE18((uint64_t)v67);
  size_t v11 = sub_10000CF44(&v72, (uint64_t)"SELECT * FROM StepCountHistory WHERE ", 37LL);
  if ((v77 & 0x80u) == 0) {
    __int128 v12 = &v75;
  }
  else {
    __int128 v12 = v75;
  }
  if ((v77 & 0x80u) == 0) {
    uint64_t v13 = v77;
  }
  else {
    uint64_t v13 = v76;
  }
  unint64_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" >= ? ORDER BY startTime ASC LIMIT 1", 36LL);
  unint64_t v15 = sub_10000CF44(&v68, (uint64_t)"SELECT * FROM StepCountHistory WHERE ", 37LL);
  if ((v77 & 0x80u) == 0) {
    unint64_t v16 = &v75;
  }
  else {
    unint64_t v16 = v75;
  }
  if ((v77 & 0x80u) == 0) {
    uint64_t v17 = v77;
  }
  else {
    uint64_t v17 = v76;
  }
  double v18 = sub_10000CF44(v15, (uint64_t)v16, v17);
  sub_10000CF44(v18, (uint64_t)" <= ? ORDER BY startTime DESC LIMIT 1", 37LL);
  uint64_t v19 = *(void *)(a1 + 80);
  std::stringbuf::str(&v78, &v69);
  if ((v78.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    double v20 = &v78;
  }
  else {
    double v20 = (std::stringbuf::string_type *)v78.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v19, (char *)v20, v91);
  uint64_t v21 = *(void *)v91;
  uint64_t v66 = *(void *)v91;
  *(void *)__int128 v91 = 0LL;
  uint64_t v22 = *(void *)(a1 + 80);
  std::stringbuf::str(&v78, &v73);
  if ((v78.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v23 = &v78;
  }
  else {
    uint64_t v23 = (std::stringbuf::string_type *)v78.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v22, (char *)v23, v91);
  uint64_t v24 = *(void *)v91;
  uint64_t v65 = *(void *)v91;
  *(void *)__int128 v91 = 0LL;
  int v25 = (sqlite3_stmt *)sub_100019240(v21);
  if (!sub_1003B7480(v25, 1, a5) || (int v26 = (sqlite3_stmt *)sub_100019240(v24), !sub_1003B7480(v26, 1, a5)))
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    char v47 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      char v48 = "StartTime";
      if (a2 == 1) {
        char v48 = "FirstStepTime";
      }
      LODWORD(v78.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
      WORD2(v78.__r_.__value_.__r.__words[1]) = 2050;
      *(double *)((char *)&v78.__r_.__value_.__r.__words[1] + 6) = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_FAULT,  "Failed to search list for %{public}s %{public}f",  (uint8_t *)&v78,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v78, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      uint64_t v62 = "StartTime";
      if (a2 == 1) {
        uint64_t v62 = "FirstStepTime";
      }
      *(_DWORD *)__int128 v91 = 136446466;
      *(void *)&v91[4] = v62;
      *(_WORD *)&v91[12] = 2050;
      *(double *)&v91[14] = a5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v78,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Failed to search list for %{public}s %{public}f",  v91,  22);
      int v64 = (std::stringbuf::string_type *)v63;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLStepCountRecorderDb::searchListUL(QueryTimeType, CFAbsoluteTime, CLStepCountEntry &, CLStepCountEntry &) const",  "%s\n",  v63);
      if (v64 != &v78) {
        free(v64);
      }
    }

    goto LABEL_40;
  }

  int v27 = sub_101028E2C(&v66, (uint64_t)&v78);
  int v28 = sub_101028E2C(&v65, (uint64_t)v91);
  int v29 = v79;
  *(_DWORD *)(a3 + 96) = v78.__r_.__value_.__l.__data_;
  *(int8x16_t *)a3 = vextq_s8( *(int8x16_t *)&v78.__r_.__value_.__r.__words[1],  *(int8x16_t *)&v78.__r_.__value_.__r.__words[1],  8uLL);
  uint64_t v30 = v86;
  *(void *)(a3 + 16) = v85;
  *(_DWORD *)(a3 + 24) = v29;
  *(_OWORD *)(a3 + 32) = v80;
  uint64_t v31 = v82;
  *(void *)(a3 + 48) = v81;
  uint64_t v32 = v83;
  uint64_t v33 = v84;
  *(void *)(a3 + 64) = v31;
  *(void *)(a3 + 72) = v32;
  *(void *)(a3 + 144) = v30;
  *(void *)(a3 + 156) = v87;
  *(_BYTE *)(a3 + 152) = v88;
  *(_BYTE *)(a3 + 166) = v89;
  *(void *)(a3 + 80) = v90;
  *(void *)(a3 + 88) = v33;
  *(int8x16_t *)a4 = vextq_s8(*(int8x16_t *)&v91[8], *(int8x16_t *)&v91[8], 8uLL);
  uint64_t v34 = v99;
  *(void *)(a4 + 16) = v98;
  *(_OWORD *)(a4 + 32) = v93;
  uint64_t v35 = v95;
  *(void *)(a4 + 48) = v94;
  uint64_t v36 = v96;
  uint64_t v37 = v97;
  *(void *)(a4 + 64) = v35;
  *(void *)(a4 + 72) = v36;
  int v38 = v92;
  *(_DWORD *)(a4 + 96) = *(_DWORD *)v91;
  *(_DWORD *)(a4 + 24) = v38;
  *(void *)(a4 + 144) = v34;
  *(void *)(a4 + 156) = v100;
  *(_BYTE *)(a4 + 152) = v101;
  *(_BYTE *)(a4 + 166) = v102;
  *(void *)(a4 + 80) = v103;
  *(void *)(a4 + 88) = v37;
  if (v28 | v27)
  {
    if (!v27)
    {
      int8x16_t v50 = *(int8x16_t *)a3;
      __int128 v51 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a4 + 32) = v51;
      *(int8x16_t *)a4 = v50;
      __int128 v52 = *(_OWORD *)(a3 + 48);
      __int128 v53 = *(_OWORD *)(a3 + 64);
      __int128 v54 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a4 + 80) = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a4 + 96) = v54;
      *(_OWORD *)(a4 + 48) = v52;
      *(_OWORD *)(a4 + 64) = v53;
      __int128 v55 = *(_OWORD *)(a3 + 112);
      __int128 v56 = *(_OWORD *)(a3 + 128);
      __int128 v57 = *(_OWORD *)(a3 + 160);
      *(_OWORD *)(a4 + 144) = *(_OWORD *)(a3 + 144);
      *(_OWORD *)(a4 + 160) = v57;
      *(_OWORD *)(a4 + 112) = v55;
      *(_OWORD *)(a4 + 128) = v56;
      goto LABEL_42;
    }

    if (!v28)
    {
      int8x16_t v39 = *(int8x16_t *)a4;
      __int128 v40 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a3 + 32) = v40;
      *(int8x16_t *)a3 = v39;
      __int128 v41 = *(_OWORD *)(a4 + 48);
      __int128 v42 = *(_OWORD *)(a4 + 64);
      __int128 v43 = *(_OWORD *)(a4 + 96);
      *(_OWORD *)(a3 + 80) = *(_OWORD *)(a4 + 80);
      *(_OWORD *)(a3 + 96) = v43;
      *(_OWORD *)(a3 + 48) = v41;
      *(_OWORD *)(a3 + 64) = v42;
      __int128 v44 = *(_OWORD *)(a4 + 112);
      __int128 v45 = *(_OWORD *)(a4 + 128);
      __int128 v46 = *(_OWORD *)(a4 + 160);
      *(_OWORD *)(a3 + 144) = *(_OWORD *)(a4 + 144);
      *(_OWORD *)(a3 + 160) = v46;
      *(_OWORD *)(a3 + 112) = v44;
      *(_OWORD *)(a3 + 128) = v45;
      goto LABEL_42;
    }

void sub_101027EE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
  }
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
  }
  sub_1011F8850((uint64_t)&a14);
  sub_1011F8850((uint64_t)&a49);
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101027FA0(uint64_t *a1, uint64_t a2, char **a3)
{
  uint64_t v164 = a3;
  int v5 = objc_msgSend( +[CMPedometerData maxPedometerEntries](CMPedometerData, "maxPedometerEntries"),  "intValue");
  uint64_t v6 = a1[14];
  v199[1] = (uint64_t)(a1 + 14);
  *(void *)&double v162 = a1 + 14;
  (*(void (**)(void))(v6 + 16))();
  __int16 v200 = 256;
  if ((sub_100D8A92C(a1 + 9) & 1) != 0)
  {
    theString2 = (const __CFString *)sub_1003B76B4(a1[10]);
    if (theString2)
    {
      sub_1003C0D54(a1[10], "SELECT * FROM StepCountHistory WHERE id >= ? ORDER BY id ASC LIMIT ?", buf);
      uint64_t v161 = *(void *)buf;
      v199[0] = *(void *)buf;
      uint64_t v7 = *(const __CFString **)(a2 + 104);
      if (v7 && CFStringCompare(v7, theString2, 1uLL))
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        uint64_t v8 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning Potential DB reset, returning all records to clients",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101895138);
          }
          LOWORD(v201[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "#Warning Potential DB reset, returning all records to clients",  v201,  2);
          __int16 v145 = (uint8_t *)v144;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const",  "%s\n",  v144);
          if (v145 != buf) {
            free(v145);
          }
        }

        int v9 = (sqlite3_stmt *)sub_100019240(v161);
        if (sub_1003C28BC(v9, 1, 1))
        {
          uint64_t v10 = (sqlite3_stmt *)sub_100019240(v161);
          if (sub_1003C28BC(v10, 2, v5))
          {
            while (!sub_101028E2C(v199, (uint64_t)&v180))
            {
              int v11 = v180;
              uint64_t v12 = v181;
              uint64_t v14 = v190;
              uint64_t v13 = v191;
              int v15 = v183;
              uint64_t v17 = v184;
              uint64_t v16 = v185;
              uint64_t v18 = v186;
              int v19 = v187;
              int v20 = v188;
              uint64_t v21 = v189;
              int v22 = v192;
              int v23 = v193;
              int v24 = v194;
              int v25 = v195;
              char v26 = v196;
              char v27 = v197;
              uint64_t v28 = v198;
              unint64_t v29 = (unint64_t)v164[1];
              unint64_t v30 = (unint64_t)v164[2];
              if (v29 >= v30)
              {
                uint64_t v156 = v182;
                int v159 = v183;
                uint64_t v33 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v29 - (void)*v164) >> 4);
                unint64_t v34 = v33 + 1;
                unint64_t v35 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v30 - (void)*v164) >> 4);
                if (2 * v35 > v34) {
                  unint64_t v34 = 2 * v35;
                }
                if (v35 >= 0xBA2E8BA2E8BA2ELL) {
                  unint64_t v36 = 0x1745D1745D1745DLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36) {
                  uint64_t v37 = (char *)sub_100CAB0E8((uint64_t)(v164 + 2), v36);
                }
                else {
                  uint64_t v37 = 0LL;
                }
                int v38 = &v37[176 * v33];
                *(void *)int v38 = v156;
                *((void *)v38 + 1) = v12;
                *((void *)v38 + 2) = v13;
                *((_DWORD *)v38 + 6) = v159;
                *((void *)v38 + 4) = v17;
                *((void *)v38 + 5) = v16;
                *((void *)v38 + 6) = v18;
                *((_DWORD *)v38 + 16) = v19;
                *((_DWORD *)v38 + 17) = v20;
                *((void *)v38 + 9) = v21;
                *((void *)v38 + 10) = v28;
                *((void *)v38 + 11) = v14;
                *((_DWORD *)v38 + 24) = v11;
                *((void *)v38 + 13) = theString2;
                __int128 v39 = v179;
                *((_OWORD *)v38 + 7) = v178;
                *((_OWORD *)v38 + 8) = v39;
                *((_DWORD *)v38 + 36) = v22;
                *((_DWORD *)v38 + 37) = v23;
                v38[152] = v26;
                v38[155] = v177;
                *(_WORD *)(v38 + 153) = v176;
                *((_DWORD *)v38 + 39) = v24;
                *((_DWORD *)v38 + 40) = v25;
                v38[166] = v27;
                v38[175] = v221;
                *(void *)(v38 + 167) = v220;
                __int128 v41 = *v164;
                __int128 v40 = v164[1];
                __int128 v42 = v38;
                if (v40 == *v164)
                {
                  __int128 v51 = v164;
                }

                else
                {
                  do
                  {
                    __int128 v43 = *((_OWORD *)v40 - 11);
                    __int128 v44 = *((_OWORD *)v40 - 9);
                    *((_OWORD *)v42 - 10) = *((_OWORD *)v40 - 10);
                    *((_OWORD *)v42 - 9) = v44;
                    *((_OWORD *)v42 - 11) = v43;
                    __int128 v45 = *((_OWORD *)v40 - 8);
                    __int128 v46 = *((_OWORD *)v40 - 7);
                    __int128 v47 = *((_OWORD *)v40 - 5);
                    *((_OWORD *)v42 - 6) = *((_OWORD *)v40 - 6);
                    *((_OWORD *)v42 - 5) = v47;
                    *((_OWORD *)v42 - 8) = v45;
                    *((_OWORD *)v42 - 7) = v46;
                    __int128 v48 = *((_OWORD *)v40 - 4);
                    __int128 v49 = *((_OWORD *)v40 - 3);
                    __int128 v50 = *((_OWORD *)v40 - 1);
                    *((_OWORD *)v42 - 2) = *((_OWORD *)v40 - 2);
                    *((_OWORD *)v42 - 1) = v50;
                    *((_OWORD *)v42 - 4) = v48;
                    *((_OWORD *)v42 - 3) = v49;
                    v42 -= 176;
                    v40 -= 176;
                  }

                  while (v40 != v41);
                  __int128 v51 = v164;
                  __int128 v40 = *v164;
                }

                uint64_t v32 = v38 + 176;
                *__int128 v51 = v42;
                v51[1] = v38 + 176;
                v51[2] = &v37[176 * v36];
                if (v40) {
                  operator delete(v40);
                }
              }

              else
              {
                *(void *)unint64_t v29 = v182;
                *(void *)(v29 + 8) = v12;
                *(void *)(v29 + 16) = v13;
                *(_DWORD *)(v29 + 24) = v15;
                *(void *)(v29 + 32) = v17;
                *(void *)(v29 + 40) = v16;
                *(void *)(v29 + 48) = v18;
                *(_DWORD *)(v29 + 64) = v19;
                *(_DWORD *)(v29 + 68) = v20;
                *(void *)(v29 + 72) = v21;
                *(void *)(v29 + 80) = v28;
                *(void *)(v29 + 88) = v14;
                *(_DWORD *)(v29 + 96) = v11;
                *(void *)(v29 + 104) = theString2;
                __int128 v31 = v179;
                *(_OWORD *)(v29 + 112) = v178;
                *(_OWORD *)(v29 + 128) = v31;
                *(_DWORD *)(v29 + 144) = v22;
                *(_DWORD *)(v29 + 148) = v23;
                *(_BYTE *)(v29 + 152) = v26;
                *(_BYTE *)(v29 + 155) = v177;
                *(_WORD *)(v29 + 153) = v176;
                *(_DWORD *)(v29 + 156) = v24;
                *(_DWORD *)(v29 + 160) = v25;
                *(_BYTE *)(v29 + 166) = v27;
                *(_BYTE *)(v29 + 175) = v221;
                uint64_t v32 = (char *)(v29 + 176);
                *(void *)(v29 + 167) = v220;
              }

              v164[1] = v32;
            }
          }
        }
      }

      else if ((*(unsigned int (**)(uint64_t *, __int128 *))(*a1 + 104))(a1, &v165) {
             || (int)v171 >= *(_DWORD *)(a2 + 96)
      }
             && DWORD2(v166) >= *(_DWORD *)(a2 + 24)
             && *(double *)&v167 >= *(double *)(a2 + 32)
             && v174 >= *(_DWORD *)(a2 + 144))
      {
        __int128 v54 = (sqlite3_stmt *)sub_100019240(v161);
        if (sub_1003C28BC(v54, 1, *(_DWORD *)(a2 + 96)))
        {
          __int128 v55 = (sqlite3_stmt *)sub_100019240(v161);
          if (sub_1003C28BC(v55, 2, v5))
          {
            while (!sub_101028E2C(v199, (uint64_t)&v180))
            {
              int v56 = v180;
              uint64_t v57 = v181;
              uint64_t v59 = v190;
              uint64_t v58 = v191;
              int v60 = v183;
              uint64_t v62 = v184;
              uint64_t v61 = v185;
              uint64_t v63 = v186;
              int v64 = v187;
              int v65 = v188;
              uint64_t v66 = v189;
              int v67 = v192;
              int v68 = v193;
              int v69 = v194;
              int v70 = v195;
              char v71 = v196;
              char v72 = v197;
              uint64_t v73 = v198;
              unint64_t v74 = (unint64_t)v164[1];
              unint64_t v75 = (unint64_t)v164[2];
              if (v74 >= v75)
              {
                uint64_t v157 = v182;
                int v160 = v183;
                uint64_t v77 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v74 - (void)*v164) >> 4);
                unint64_t v78 = v77 + 1;
                unint64_t v79 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v75 - (void)*v164) >> 4);
                if (2 * v79 > v78) {
                  unint64_t v78 = 2 * v79;
                }
                if (v79 >= 0xBA2E8BA2E8BA2ELL) {
                  unint64_t v80 = 0x1745D1745D1745DLL;
                }
                else {
                  unint64_t v80 = v78;
                }
                if (v80) {
                  uint64_t v81 = (char *)sub_100CAB0E8((uint64_t)(v164 + 2), v80);
                }
                else {
                  uint64_t v81 = 0LL;
                }
                uint64_t v82 = &v81[176 * v77];
                *(void *)uint64_t v82 = v157;
                *((void *)v82 + 1) = v57;
                *((void *)v82 + 2) = v58;
                *((_DWORD *)v82 + 6) = v160;
                *((void *)v82 + 4) = v62;
                *((void *)v82 + 5) = v61;
                *((void *)v82 + 6) = v63;
                *((_DWORD *)v82 + 16) = v64;
                *((_DWORD *)v82 + 17) = v65;
                *((void *)v82 + 9) = v66;
                *((void *)v82 + 10) = v73;
                *((void *)v82 + 11) = v59;
                *((_DWORD *)v82 + 24) = v56;
                *((void *)v82 + 13) = theString2;
                *((_DWORD *)v82 + 36) = v67;
                *((_DWORD *)v82 + 37) = v68;
                v82[152] = v71;
                *((_DWORD *)v82 + 39) = v69;
                *((_DWORD *)v82 + 40) = v70;
                v82[166] = v72;
                uint64_t v84 = *v164;
                uint64_t v83 = v164[1];
                uint64_t v85 = v82;
                if (v83 == *v164)
                {
                  uint64_t v94 = v164;
                }

                else
                {
                  do
                  {
                    __int128 v86 = *((_OWORD *)v83 - 11);
                    __int128 v87 = *((_OWORD *)v83 - 9);
                    *((_OWORD *)v85 - 10) = *((_OWORD *)v83 - 10);
                    *((_OWORD *)v85 - 9) = v87;
                    *((_OWORD *)v85 - 11) = v86;
                    __int128 v88 = *((_OWORD *)v83 - 8);
                    __int128 v89 = *((_OWORD *)v83 - 7);
                    __int128 v90 = *((_OWORD *)v83 - 5);
                    *((_OWORD *)v85 - 6) = *((_OWORD *)v83 - 6);
                    *((_OWORD *)v85 - 5) = v90;
                    *((_OWORD *)v85 - 8) = v88;
                    *((_OWORD *)v85 - 7) = v89;
                    __int128 v91 = *((_OWORD *)v83 - 4);
                    __int128 v92 = *((_OWORD *)v83 - 3);
                    __int128 v93 = *((_OWORD *)v83 - 1);
                    *((_OWORD *)v85 - 2) = *((_OWORD *)v83 - 2);
                    *((_OWORD *)v85 - 1) = v93;
                    *((_OWORD *)v85 - 4) = v91;
                    *((_OWORD *)v85 - 3) = v92;
                    v85 -= 176;
                    v83 -= 176;
                  }

                  while (v83 != v84);
                  uint64_t v94 = v164;
                  uint64_t v83 = *v164;
                }

                uint64_t v76 = v82 + 176;
                const char *v94 = v85;
                v94[1] = v82 + 176;
                v94[2] = &v81[176 * v80];
                if (v83) {
                  operator delete(v83);
                }
              }

              else
              {
                *(void *)unint64_t v74 = v182;
                *(void *)(v74 + 8) = v57;
                *(void *)(v74 + 16) = v58;
                *(_DWORD *)(v74 + 24) = v60;
                *(void *)(v74 + 32) = v62;
                *(void *)(v74 + 40) = v61;
                *(void *)(v74 + 48) = v63;
                *(_DWORD *)(v74 + 64) = v64;
                *(_DWORD *)(v74 + 68) = v65;
                *(void *)(v74 + 72) = v66;
                *(void *)(v74 + 80) = v73;
                *(void *)(v74 + 88) = v59;
                *(_DWORD *)(v74 + 96) = v56;
                *(void *)(v74 + 104) = theString2;
                *(_DWORD *)(v74 + 144) = v67;
                *(_DWORD *)(v74 + 148) = v68;
                *(_BYTE *)(v74 + 152) = v71;
                *(_DWORD *)(v74 + 156) = v69;
                *(_DWORD *)(v74 + 160) = v70;
                uint64_t v76 = (char *)(v74 + 176);
                *(_BYTE *)(v74 + 166) = v72;
              }

              v164[1] = v76;
            }
          }
        }
      }

      else
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        uint64_t v96 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
        {
          int v97 = *(_DWORD *)(a2 + 96);
          int v98 = *(_DWORD *)(a2 + 24);
          uint64_t v99 = *(void *)(a2 + 32);
          uint64_t v100 = *(void *)(a2 + 88);
          int v101 = *(_DWORD *)(a2 + 144);
          *(_DWORD *)std::stringbuf::string_type buf = 67111424;
          *(_DWORD *)&uint8_t buf[4] = v171;
          __int16 v223 = 1024;
          int v224 = v97;
          __int16 v225 = 1024;
          int v226 = DWORD2(v166);
          __int16 v227 = 1024;
          int v228 = v98;
          __int16 v229 = 2048;
          uint64_t v230 = v167;
          __int16 v231 = 2048;
          uint64_t v232 = v99;
          __int16 v233 = 2048;
          uint64_t v234 = *((void *)&v170 + 1);
          __int16 v235 = 2048;
          uint64_t v236 = v100;
          __int16 v237 = 1024;
          int v238 = v174;
          __int16 v239 = 1024;
          int v240 = v101;
          _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "#Warning Step count has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.count,% u,record.count,%u,mru.distance,%f,record.distance,%f,mru.activeTime,%f,record.activeTime,%f,mru.pushCount,%d ,record.pushCount,%d",  buf,  0x4Eu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101895138);
          }
          int v146 = *(_DWORD *)(a2 + 96);
          int v147 = *(_DWORD *)(a2 + 24);
          uint64_t v148 = *(void *)(a2 + 32);
          uint64_t v149 = *(void *)(a2 + 88);
          int v150 = *(_DWORD *)(a2 + 144);
          v201[0] = 67111424;
          v201[1] = v171;
          __int16 v202 = 1024;
          int v203 = v146;
          __int16 v204 = 1024;
          int v205 = DWORD2(v166);
          __int16 v206 = 1024;
          int v207 = v147;
          __int16 v208 = 2048;
          uint64_t v209 = v167;
          __int16 v210 = 2048;
          uint64_t v211 = v148;
          __int16 v212 = 2048;
          uint64_t v213 = *((void *)&v170 + 1);
          __int16 v214 = 2048;
          uint64_t v215 = v149;
          __int16 v216 = 1024;
          int v217 = v174;
          __int16 v218 = 1024;
          int v219 = v150;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "#Warning Step count has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.count,% u,record.count,%u,mru.distance,%f,record.distance,%f,mru.activeTime,%f,record.activeTime,%f,mru.pushCount,%d ,record.pushCount,%d",  v201,  78,  v153,  v154,  v155,  v158,  *(double *)&v161,  v162,  (_DWORD)theString2,  (_DWORD)v164);
          uint64_t v152 = (uint8_t *)v151;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const",  "%s\n",  v151);
          if (v152 != buf) {
            free(v152);
          }
        }

        CLWriteStackshot("Step count has rolled back!!", 0LL);
        *((void *)&v171 + 1) = theString2;
        unint64_t v102 = (unint64_t)v164[2];
        uint64_t v103 = v164[1];
        if ((unint64_t)v103 >= v102)
        {
          uint64_t v113 = 0x2E8BA2E8BA2E8BA3LL * ((v103 - *v164) >> 4);
          unint64_t v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) > 0x1745D1745D1745DLL) {
LABEL_112:
          }
            sub_100007008();
          unint64_t v115 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v102 - (void)*v164) >> 4);
          if (2 * v115 > v114) {
            unint64_t v114 = 2 * v115;
          }
          if (v115 >= 0xBA2E8BA2E8BA2ELL) {
            unint64_t v116 = 0x1745D1745D1745DLL;
          }
          else {
            unint64_t v116 = v114;
          }
          if (v116) {
            __int128 v117 = (char *)sub_100CAB0E8((uint64_t)(v164 + 2), v116);
          }
          else {
            __int128 v117 = 0LL;
          }
          __int128 v118 = &v117[176 * v113];
          std::string::size_type v119 = &v117[176 * v116];
          __int128 v120 = v165;
          __int128 v121 = v167;
          *((_OWORD *)v118 + 1) = v166;
          *((_OWORD *)v118 + 2) = v121;
          *(_OWORD *)__int128 v118 = v120;
          __int128 v122 = v168;
          __int128 v123 = v169;
          __int128 v124 = v171;
          *((_OWORD *)v118 + 5) = v170;
          *((_OWORD *)v118 + 6) = v124;
          *((_OWORD *)v118 + 3) = v122;
          *((_OWORD *)v118 + 4) = v123;
          __int128 v125 = v172;
          __int128 v126 = v173;
          __int128 v127 = v175;
          *((_OWORD *)v118 + 9) = v174;
          *((_OWORD *)v118 + 10) = v127;
          *((_OWORD *)v118 + 7) = v125;
          *((_OWORD *)v118 + 8) = v126;
          __int128 v112 = v118 + 176;
          double v129 = *v164;
          uint64_t v128 = v164[1];
          if (v128 == *v164)
          {
            uint64_t v138 = v164;
          }

          else
          {
            do
            {
              __int128 v130 = *((_OWORD *)v128 - 11);
              __int128 v131 = *((_OWORD *)v128 - 9);
              *((_OWORD *)v118 - 10) = *((_OWORD *)v128 - 10);
              *((_OWORD *)v118 - 9) = v131;
              *((_OWORD *)v118 - 11) = v130;
              __int128 v132 = *((_OWORD *)v128 - 8);
              __int128 v133 = *((_OWORD *)v128 - 7);
              __int128 v134 = *((_OWORD *)v128 - 5);
              *((_OWORD *)v118 - 6) = *((_OWORD *)v128 - 6);
              *((_OWORD *)v118 - 5) = v134;
              *((_OWORD *)v118 - 8) = v132;
              *((_OWORD *)v118 - 7) = v133;
              __int128 v135 = *((_OWORD *)v128 - 4);
              __int128 v136 = *((_OWORD *)v128 - 3);
              __int128 v137 = *((_OWORD *)v128 - 1);
              *((_OWORD *)v118 - 2) = *((_OWORD *)v128 - 2);
              *((_OWORD *)v118 - 1) = v137;
              *((_OWORD *)v118 - 4) = v135;
              *((_OWORD *)v118 - 3) = v136;
              v118 -= 176;
              v128 -= 176;
            }

            while (v128 != v129);
            uint64_t v138 = v164;
            uint64_t v128 = *v164;
          }

          *uint64_t v138 = v118;
          v138[1] = v112;
          v138[2] = v119;
          if (v128) {
            operator delete(v128);
          }
        }

        else
        {
          __int128 v104 = v165;
          __int128 v105 = v167;
          *((_OWORD *)v103 + 1) = v166;
          *((_OWORD *)v103 + 2) = v105;
          *(_OWORD *)uint64_t v103 = v104;
          __int128 v106 = v168;
          __int128 v107 = v169;
          __int128 v108 = v171;
          *((_OWORD *)v103 + 5) = v170;
          *((_OWORD *)v103 + 6) = v108;
          *((_OWORD *)v103 + 3) = v106;
          *((_OWORD *)v103 + 4) = v107;
          __int128 v109 = v172;
          __int128 v110 = v173;
          __int128 v111 = v175;
          *((_OWORD *)v103 + 9) = v174;
          *((_OWORD *)v103 + 10) = v111;
          *((_OWORD *)v103 + 7) = v109;
          *((_OWORD *)v103 + 8) = v110;
          __int128 v112 = v103 + 176;
        }

        v164[1] = v112;
      }

      if (v161) {
        (*(void (**)(uint64_t))(*(void *)v161 + 8LL))(v161);
      }
      uint64_t v53 = 100LL;
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      uint64_t v95 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "#Warning DB UUID un-initialized", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        LOWORD(v165) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "#Warning DB UUID un-initialized",  &v165,  2);
        __int16 v143 = (uint8_t *)v142;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const",  "%s\n",  v142);
        if (v143 != buf) {
          free(v143);
        }
      }

      uint64_t v53 = 103LL;
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    __int128 v52 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "StepCountHistory not accessible", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      LOWORD(v165) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "StepCountHistory not accessible",  &v165,  2);
      __int16 v141 = (uint8_t *)v140;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const",  "%s\n",  v140);
      if (v141 != buf) {
        free(v141);
      }
    }

    uint64_t v53 = 109LL;
  }

  (*(void (**)(double))(**(void **)&v162 + 24LL))(COERCE_DOUBLE(*(void *)&v162));
  return v53;
}

void sub_101028DC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  sub_1011C52D0((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_101028E2C(uint64_t *a1, uint64_t a2)
{
  std::string::size_type v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  int v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v9, 3);
  uint64_t v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v10, 4);
  int v11 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v11, 5);
  uint64_t v12 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v12, 6);
  uint64_t v13 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 60) = sqlite3_column_int(v13, 7);
  uint64_t v14 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v14, 8);
  int v15 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v15, 9);
  uint64_t v16 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v16, 10);
  uint64_t v17 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 88) = sqlite3_column_int(v17, 11);
  uint64_t v18 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 92) = sqlite3_column_int(v18, 12);
  int v19 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 96) = sqlite3_column_int(v19, 13);
  int v20 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 100) = sqlite3_column_int(v20, 14);
  uint64_t v21 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 105) = sqlite3_column_int(v21, 15);
  int v22 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v22, 16);
  int v23 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v23, 17);
  int v24 = (sqlite3_stmt *)sub_100019240(*a1);
  char v25 = sqlite3_column_int(v24, 18);
  uint64_t result = 0LL;
  *(_BYTE *)(a2 + 104) = v25;
  return result;
}

uint64_t sub_101028FFC(uint64_t a1, char **a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v7 = a1 + 112;
  uint64_t v9 = v7 - 40;
  v61[1] = v7;
  uint64_t v59 = v7;
  (*(void (**)(void))(v8 + 16))();
  __int16 v62 = 256;
  if ((sub_100D8A92C(v9) & 1) != 0)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM StepCountHistory WHERE startTime BETWEEN ? and ? ORDER BY startTime ASC",  buf);
    uint64_t v56 = *(void *)buf;
    v61[0] = *(void *)buf;
    if (a4 >= a3)
    {
      uint64_t v10 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
      if (sub_1003B7480(v10, 1, a3))
      {
        int v11 = (sqlite3_stmt *)sub_100019240(v56);
        if (sub_1003B7480(v11, 2, a4))
        {
          while (!sub_101028E2C(v61, (uint64_t)buf))
          {
            int v12 = *(_DWORD *)buf;
            uint64_t v13 = v64;
            uint64_t v15 = v73;
            uint64_t v14 = v74;
            int v16 = v66;
            uint64_t v18 = v67;
            uint64_t v17 = v68;
            uint64_t v19 = v69;
            int v20 = v70;
            int v21 = v71;
            uint64_t v22 = v72;
            int v23 = v75;
            int v24 = v76;
            int v26 = v77;
            int v25 = v78;
            char v27 = v79;
            char v28 = v80;
            uint64_t v29 = v81;
            unint64_t v30 = (unint64_t)a2[1];
            unint64_t v31 = (unint64_t)a2[2];
            if (v30 >= v31)
            {
              int v57 = v66;
              uint64_t v58 = v65;
              uint64_t v33 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v30 - (void)*a2) >> 4);
              unint64_t v34 = v33 + 1;
              unint64_t v35 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v31 - (void)*a2) >> 4);
              if (2 * v35 > v34) {
                unint64_t v34 = 2 * v35;
              }
              if (v35 >= 0xBA2E8BA2E8BA2ELL) {
                unint64_t v36 = 0x1745D1745D1745DLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36) {
                uint64_t v37 = (char *)sub_100CAB0E8((uint64_t)(a2 + 2), v36);
              }
              else {
                uint64_t v37 = 0LL;
              }
              int v38 = &v37[176 * v33];
              *(void *)int v38 = v58;
              *((void *)v38 + 1) = v13;
              *((void *)v38 + 2) = v14;
              *((_DWORD *)v38 + 6) = v57;
              *((void *)v38 + 4) = v18;
              *((void *)v38 + 5) = v17;
              *((void *)v38 + 6) = v19;
              *((_DWORD *)v38 + 16) = v20;
              *((_DWORD *)v38 + 17) = v21;
              *((void *)v38 + 9) = v22;
              *((void *)v38 + 10) = v29;
              *((void *)v38 + 11) = v15;
              *((_DWORD *)v38 + 24) = v12;
              *((_DWORD *)v38 + 36) = v23;
              *((_DWORD *)v38 + 37) = v24;
              v38[152] = v27;
              *((_DWORD *)v38 + 39) = v26;
              *((_DWORD *)v38 + 40) = v25;
              v38[166] = v28;
              __int128 v40 = *a2;
              __int128 v39 = a2[1];
              __int128 v41 = v38;
              if (v39 == *a2)
              {
                __int128 v50 = a2;
              }

              else
              {
                do
                {
                  __int128 v42 = *((_OWORD *)v39 - 11);
                  __int128 v43 = *((_OWORD *)v39 - 9);
                  *((_OWORD *)v41 - 10) = *((_OWORD *)v39 - 10);
                  *((_OWORD *)v41 - 9) = v43;
                  *((_OWORD *)v41 - 11) = v42;
                  __int128 v44 = *((_OWORD *)v39 - 8);
                  __int128 v45 = *((_OWORD *)v39 - 7);
                  __int128 v46 = *((_OWORD *)v39 - 5);
                  *((_OWORD *)v41 - 6) = *((_OWORD *)v39 - 6);
                  *((_OWORD *)v41 - 5) = v46;
                  *((_OWORD *)v41 - 8) = v44;
                  *((_OWORD *)v41 - 7) = v45;
                  __int128 v47 = *((_OWORD *)v39 - 4);
                  __int128 v48 = *((_OWORD *)v39 - 3);
                  __int128 v49 = *((_OWORD *)v39 - 1);
                  *((_OWORD *)v41 - 2) = *((_OWORD *)v39 - 2);
                  *((_OWORD *)v41 - 1) = v49;
                  *((_OWORD *)v41 - 4) = v47;
                  *((_OWORD *)v41 - 3) = v48;
                  v41 -= 176;
                  v39 -= 176;
                }

                while (v39 != v40);
                __int128 v50 = a2;
                __int128 v39 = *a2;
              }

              uint64_t v32 = v38 + 176;
              *__int128 v50 = v41;
              v50[1] = v38 + 176;
              v50[2] = &v37[176 * v36];
              if (v39) {
                operator delete(v39);
              }
            }

            else
            {
              *(void *)unint64_t v30 = v65;
              *(void *)(v30 + 8) = v13;
              *(void *)(v30 + 16) = v14;
              *(_DWORD *)(v30 + 24) = v16;
              *(void *)(v30 + 32) = v18;
              *(void *)(v30 + 40) = v17;
              *(void *)(v30 + 48) = v19;
              *(_DWORD *)(v30 + 64) = v20;
              *(_DWORD *)(v30 + 68) = v21;
              *(void *)(v30 + 72) = v22;
              *(void *)(v30 + 80) = v29;
              *(void *)(v30 + 88) = v15;
              *(_DWORD *)(v30 + 96) = v12;
              *(_DWORD *)(v30 + 144) = v23;
              *(_DWORD *)(v30 + 148) = v24;
              *(_BYTE *)(v30 + 152) = v27;
              *(_DWORD *)(v30 + 156) = v26;
              *(_DWORD *)(v30 + 160) = v25;
              uint64_t v32 = (char *)(v30 + 176);
              *(_BYTE *)(v30 + 166) = v28;
            }

            a2[1] = v32;
          }
        }
      }
    }

    if (v56) {
      (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
    }
    uint64_t v52 = 100LL;
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    __int128 v51 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "StepCountHistory not accessible", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      LOWORD(v61[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "StepCountHistory not accessible",  v61,  2);
      __int128 v55 = (uint8_t *)v54;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLStepCountRecorderDb::queryStepCountInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLS tepCountEntry> &) const",  "%s\n",  v54);
      if (v55 != buf) {
        free(v55);
      }
    }

    uint64_t v52 = 109LL;
  }

  (*(void (**)(uint64_t))(*(void *)v59 + 24LL))(v59);
  return v52;
}

void sub_101029488( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_1010294D8(uint64_t a1, char **a2, double a3, double a4)
{
  return sub_101028FFC(a1 - 480, a2, a3, a4);
}

uint64_t sub_1010294E0(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16LL))(a1 + 112);
  else {
    uint64_t v4 = 0LL;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  return v4;
}

void sub_101029568(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

double sub_10102957C(unsigned __int8 *a1, int a2)
{
  a1[680] = 1;
  int v3 = a1[592];
  uint64_t v4 = qword_101934510;
  a1[681] = v3 != a2;
  if (v3 == a2)
  {
    if (v4 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v5 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v20 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "setPushCounting, fEnablePushCounting already set to %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v15 = 67109120;
      int v16 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "setPushCounting, fEnablePushCounting already set to %d",  &v15);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLStepCountRecorderDb::setPushCounting(BOOL)", "%s\n", v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  else
  {
    if (v4 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    uint64_t v10 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a1[592];
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      int v20 = v11;
      __int16 v21 = 1024;
      int v22 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "setPushCounting, fEnablePushCounting changing from %d to %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v12 = a1[592];
      int v15 = 67109376;
      int v16 = v12;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "setPushCounting, fEnablePushCounting changing from %d to %d",  &v15,  14);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLStepCountRecorderDb::setPushCounting(BOOL)", "%s\n", v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    a1[592] = a2;
    return sub_1010298B0((uint64_t)a1);
  }

  return result;
}

double sub_1010298B0(uint64_t a1)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101895138);
  }
  uint64_t v2 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "CLStepCountRecorderDb::resetCurrentCount called",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "CLStepCountRecorderDb::resetCurrentCount called",  v6,  2);
    int v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLStepCountRecorderDb::resetCurrentCount()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  double result = NAN;
  *(void *)(a1 + 544) = -1LL;
  *(_DWORD *)(a1 + 552) = -1;
  *(void *)(a1 + 560) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 600) = -1LL;
  return result;
}

uint64_t sub_101029A64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 596) = a2;
  return result;
}

uint64_t sub_101029A6C(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM StepCountHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    int v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    *(_DWORD *)(a1 + 132) = 0;
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_101029B04(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101029B24(uint64_t a1)
{
  return sub_101029A6C(a1 - 72);
}

uint64_t sub_101029B2C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1LL);
    sub_1003C0D54(a1[10], "DELETE FROM StepCountHistory WHERE startTime > ?", buf);
    uint64_t v5 = *(void *)buf;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sub_1003B7480(v6, 1, *(double *)(a2 + 8)))
    {
      uint64_t v7 = a1[10];
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
      sub_1003BB2BC(v7, v8);
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      uint64_t v9 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Failed to delete records", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        v14[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Failed to delete records",  v14,  2);
        uint64_t v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLStepCountRecorderDb::deleteRecordsAfterInsertUL(const CLStepCountEntry &)",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }
    }

    uint64_t v10 = a1[10];
    else {
      uint64_t v11 = *(void *)(v10 + 88);
    }
    uint64_t result = sub_1003C1EC0(v10, v11);
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_101029D5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101029D88(uint64_t a1, double a2)
{
  if (sub_100D8A92C(a1 + 72))
  {
    sub_1003C0D54(*(void *)(a1 + 80), "UPDATE StepCountHistory SET startTime = startTime + ?", buf);
    uint64_t v4 = *(void *)buf;
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sub_1003B7480(v5, 1, a2))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v4);
      sub_1003BB2BC(v6, v7);
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      uint64_t v8 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to shift records", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        v11[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Failed to shift records",  v11,  2);
        uint64_t v10 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLStepCountRecorderDb::shiftRecordsByUL(CFTimeInterval)",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }
    }

    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

void sub_101029F90(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101029FBC(uint64_t a1, __int128 *a2, int a3)
{
  if (sub_100D8A92C(a1 + 72))
  {
    __int128 v6 = a2[9];
    __int128 v79 = a2[8];
    __int128 v80 = v6;
    __int128 v81 = a2[10];
    __int128 v7 = a2[5];
    __int128 v75 = a2[4];
    __int128 v76 = v7;
    __int128 v8 = a2[7];
    __int128 v77 = a2[6];
    __int128 v78 = v8;
    __int128 v9 = a2[1];
    __int128 v71 = *a2;
    __int128 v72 = v9;
    __int128 v10 = a2[3];
    __int128 v73 = a2[2];
    __int128 v74 = v10;
    unsigned int v70 = 0;
    double v69 = 0.0;
    uint64_t v68 = 0LL;
    uint64_t v67 = 0LL;
    uint64_t v66 = 0LL;
    uint64_t v65 = 0LL;
    uint64_t v64 = 0LL;
    int v63 = 0;
    if (!a3)
    {
LABEL_16:
      if (*(_BYTE *)(a1 + 592)) {
        *(void *)&__int128 v76 = 0LL;
      }
      sub_10102AADC(a1, (uint64_t)&v71);
      sub_100B14CF8((uint64_t *)(a1 + 488), buf);
      uint64_t v19 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
      if (sub_1003B7480(v19, 1, *((double *)&v71 + 1)))
      {
        int v20 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
        if (sub_1003B7480(v20, 2, *(double *)&v71))
        {
          __int16 v21 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
          if (sub_1003C28BC(v21, 3, SDWORD2(v72)))
          {
            int v22 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
            if (sub_1003B7480(v22, 4, *(double *)&v73))
            {
              int v23 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
              if (sub_1003B7480(v23, 5, *((double *)&v73 + 1)))
              {
                int v24 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                if (sub_1003C2AF0(v24, 6, v75))
                {
                  int v25 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                  if (sub_1003C2AF0(v25, 7, SDWORD1(v75)))
                  {
                    int v26 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                    double v27 = *((double *)&v75 + 1);
                    if (*(_BYTE *)(a1 + 592)) {
                      double v27 = 0.0;
                    }
                    if (sub_1003B7480(v26, 8, v27))
                    {
                      char v28 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                      if (sub_1003B7480(v28, 9, *((double *)&v76 + 1)))
                      {
                        uint64_t v29 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                        if (sub_1003B7480(v29, 10, *(double *)&v72))
                        {
                          unint64_t v30 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                          if (sub_1003C2AF0(v30, 11, v80))
                          {
                            unint64_t v31 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                            if (sub_1003C2AF0(v31, 12, *(_DWORD *)(a1 + 596)))
                            {
                              uint64_t v32 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                              if (sub_1003C2AF0(v32, 13, SHIDWORD(v80)))
                              {
                                uint64_t v33 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                                if (sub_1003C2AF0(v33, 14, v81))
                                {
                                  unint64_t v34 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                                  if (sub_1003C28BC(v34, 15, BYTE6(v81)))
                                  {
                                    unint64_t v35 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                                    if (sub_1003B7480(v35, 16, *(double *)&v76))
                                    {
                                      unint64_t v36 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                                      if (sub_1003B7480(v36, 17, *(double *)&v74))
                                      {
                                        uint64_t v37 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                                        if (sub_1003C28BC(v37, 18, BYTE8(v80)))
                                        {
                                          uint64_t v38 = *(void *)(a1 + 80);
                                          __int128 v39 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                                          sub_1003BB2BC(v38, v39);
                                          ++*(_DWORD *)(a1 + 132);
                                          if (a3)
                                          {
                                            if (*(void *)(a1 + 528))
                                            {
                                              LODWORD(v77) = sub_1003C1068(*(void *)(a1 + 80));
                                              *((void *)&v77 + 1) = sub_1003B76B4(*(void *)(a1 + 80));
                                              DWORD1(v80) = *(_DWORD *)(a1 + 596);
                                              __int128 v40 = *(void **)(a1 + 536);
                                              if (v40)
                                              {
                                                v50[1] = 3221225472LL;
                                                __int128 v58 = v78;
                                                __int128 v59 = v79;
                                                __int128 v60 = v80;
                                                __int128 v61 = v81;
                                                __int128 v54 = v74;
                                                __int128 v55 = v75;
                                                __int128 v56 = v76;
                                                __int128 v57 = v77;
                                                __int128 v51 = v71;
                                                __int128 v52 = v72;
                                                v50[0] = _NSConcreteStackBlock;
                                                v50[2] = sub_10102AEE8;
                                                v50[3] = &unk_101895098;
                                                v50[4] = a1;
                                                __int128 v53 = v73;
                                                [v40 async:v50];
                                              }

                                              else
                                              {
                                                (*(void (**)(void))(*(void *)(a1 + 528) + 16LL))();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      uint64_t v48 = *(void *)buf;
      *(void *)std::stringbuf::string_type buf = 0LL;
      if (v48) {
        (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
      }
      return;
    }

    __int128 v11 = a2[9];
    v62[8] = a2[8];
    v62[9] = v11;
    v62[10] = a2[10];
    __int128 v12 = a2[5];
    v62[4] = a2[4];
    v62[5] = v12;
    __int128 v13 = a2[7];
    v62[6] = a2[6];
    v62[7] = v13;
    __int128 v14 = a2[1];
    v62[0] = *a2;
    v62[1] = v14;
    __int128 v15 = a2[3];
    v62[2] = a2[2];
    v62[3] = v15;
    unsigned int v16 = sub_10102A880( a1,  (uint64_t)v62,  &v70,  &v69,  (double *)&v68,  (double *)&v67,  (_DWORD *)&v66 + 1,  (int *)&v66,  (double *)&v65,  (_DWORD *)&v64 + 1,  &v64,  &v63);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    __int16 v17 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v70;
      __int16 v87 = 2048;
      double v88 = v69;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "CLStepCountRecorderDb::insertRecordUL,toAbsoluteEntry,absoluteCount,%d,absoluteCalibratedDistance,%lf",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v82 = 67109376;
      unsigned int v83 = v70;
      __int16 v84 = 2048;
      double v85 = v69;
      LODWORD(v49) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "CLStepCountRecorderDb::insertRecordUL,toAbsoluteEntry,absoluteCount,%d,absoluteCalibratedDistance,%lf",  &v82,  v49);
      __int128 v45 = (uint8_t *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLStepCountRecorderDb::insertRecordUL(const CLStepCountEntry &, BOOL)",  "%s\n",  v44);
      if (v45 != buf) {
        free(v45);
      }
    }

    if (!v16) {
      goto LABEL_15;
    }
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v18 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#Warning toAbsoluteEntry returned %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v82 = 67109120;
      unsigned int v83 = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "#Warning toAbsoluteEntry returned %d",  &v82);
      __int128 v47 = (uint8_t *)v46;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLStepCountRecorderDb::insertRecordUL(const CLStepCountEntry &, BOOL)",  "%s\n",  v46);
      if (v47 != buf) {
        free(v47);
      }
    }

    if (v16 != 2)
    {
LABEL_15:
      DWORD2(v72) = v70;
      *(double *)&__int128 v73 = v69;
      *((void *)&v73 + 1) = v68;
      *(void *)&__int128 v74 = v67;
      *(void *)&__int128 v75 = __PAIR64__(v66, HIDWORD(v66));
      *((void *)&v76 + 1) = v65;
      LODWORD(v80) = HIDWORD(v64);
      HIDWORD(v80) = v64;
      LODWORD(v81) = v63;
      goto LABEL_16;
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    __int128 v41 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Database inaccessible for insertRecordUL",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      LOWORD(v71) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Database inaccessible for insertRecordUL",  &v71,  2);
      __int128 v43 = (uint8_t *)v42;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLStepCountRecorderDb::insertRecordUL(const CLStepCountEntry &, BOOL)",  "%s\n",  v42);
      if (v43 != buf) {
        free(v43);
      }
    }
  }

void sub_10102A854(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x370];
  STACK[0x370] = 0LL;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8LL))(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10102A880( uint64_t a1, uint64_t a2, unsigned int *a3, double *a4, double *a5, double *a6, _DWORD *a7, int *a8, double *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v42 = 0u;
  int v41 = 0;
  uint64_t result = sub_10102C57C(a1, *(_DWORD *)(a2 + 24), &v41, &v42);
  if ((_DWORD)result == 2) {
    return result;
  }
  int v21 = v41 + *(_DWORD *)(a2 + 24);
  int v22 = *(unsigned __int8 *)(a1 + 592);
  unsigned int v23 = DWORD2(v43);
  int v24 = v51;
  unsigned int v25 = v21 - v51;
  int v26 = v21 - DWORD2(v43);
  if (*(_BYTE *)(a1 + 592)) {
    unsigned int v25 = DWORD2(v43);
  }
  *a3 = v25;
  if (!v22) {
    int v26 = v24;
  }
  *a10 = v26;
  unsigned int v27 = *a3;
  if (!(*a3 | v26))
  {
    *a4 = 0.0;
    *a5 = 0.0;
    *a6 = 0.0;
    *a7 = 0;
    *(_DWORD *)(a1 + 548) = 0;
    *a8 = 0;
    *(_DWORD *)(a1 + 552) = 0;
    *a9 = 0.0;
    *(void *)(a1 + 560) = 0LL;
    *a11 = 0;
    *(_DWORD *)(a1 + 600) = 0;
    *a12 = 0;
    *(_DWORD *)(a1 + 604) = 0;
    return result;
  }

  if (v22)
  {
    char v28 = a12;
    uint64_t v29 = v45;
    *a5 = *((double *)&v44 + 1);
  }

  else
  {
    double v30 = *((double *)&v44 + 1);
    if (v27 > v23) {
      double v30 = *((double *)&v44 + 1) + *(double *)(a2 + 40);
    }
    *a5 = v30;
    uint64_t v29 = v45;
    char v28 = a12;
    if (v27 >= v23)
    {
      *a6 = *(double *)&v45 + *(double *)(a2 + 48);
      double v31 = *(double *)&v44 + *(double *)(a2 + 32);
      goto LABEL_14;
    }
  }

  *(void *)a6 = v29;
  double v31 = *(double *)&v44;
LABEL_14:
  *a4 = v31;
  __int128 v32 = *(_OWORD *)(a2 + 144);
  v40[8] = *(_OWORD *)(a2 + 128);
  v40[9] = v32;
  v40[10] = *(_OWORD *)(a2 + 160);
  __int128 v33 = *(_OWORD *)(a2 + 80);
  v40[4] = *(_OWORD *)(a2 + 64);
  v40[5] = v33;
  __int128 v34 = *(_OWORD *)(a2 + 112);
  v40[6] = *(_OWORD *)(a2 + 96);
  v40[7] = v34;
  __int128 v35 = *(_OWORD *)(a2 + 16);
  v40[0] = *(_OWORD *)a2;
  v40[1] = v35;
  __int128 v36 = *(_OWORD *)(a2 + 48);
  v40[2] = *(_OWORD *)(a2 + 32);
  v40[3] = v36;
  v39[8] = v50;
  v39[9] = v51;
  v39[10] = v52;
  v39[4] = v46;
  v39[5] = v47;
  v39[6] = v48;
  v39[7] = v49;
  v39[0] = v42;
  v39[1] = v43;
  v39[2] = v44;
  v39[3] = v45;
  sub_10102CED0(a1, (uint64_t)v40, (uint64_t)v39);
  if (*(_BYTE *)(a1 + 592))
  {
    int v37 = DWORD1(v46);
    *a7 = v46;
    double v38 = *((double *)&v47 + 1);
  }

  else
  {
    *a7 = *(_DWORD *)(a1 + 572) + *(_DWORD *)(a2 + 64);
    int v37 = *(_DWORD *)(a1 + 576) + *(_DWORD *)(a2 + 68);
    double v38 = *(double *)(a2 + 88) + *(double *)(a1 + 584);
  }

  uint64_t result = 0LL;
  *a8 = v37;
  *a9 = v38;
  *a11 = *(_DWORD *)(a1 + 608) + *(_DWORD *)(a2 + 156);
  *char v28 = *(_DWORD *)(a1 + 612) + *(_DWORD *)(a2 + 160);
  return result;
}

double sub_10102AADC(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 684);
  unsigned int v4 = *(_DWORD *)(a2 + 24);
  if (v3 >= 1 && v4 >= v3)
  {
    int v6 = v4 - v3;
    double v7 = *(double *)(a2 + 32) - *(double *)(a1 + 688);
    double v8 = *(double *)(a1 + 712);
    double v9 = *(double *)(a2 + 88);
    double v10 = *(double *)(a1 + 696);
    double v12 = *(double *)(a2 + 8);
    double v11 = *(double *)(a2 + 16);
    double v13 = *(double *)(a1 + 704);
    int v14 = *(unsigned __int8 *)(a2 + 152);
    *(_DWORD *)(a1 + 632) += v4 - v3;
    if (*(_BYTE *)(a1 + 680) && !*(_BYTE *)(a1 + 681))
    {
      ++*(_DWORD *)(a1 + 636);
      *(_DWORD *)(a1 + 640) += v6;
    }

    *(_WORD *)(a1 + 680) = 0;
    BOOL v16 = v7 > 0.0 && v4 == v3;
    if (v16 && v14 == 1)
    {
      ++*(_DWORD *)(a1 + 644);
    }

    else if (v16 && v14 != 1)
    {
      ++*(_DWORD *)(a1 + 648);
    }

    double v19 = v9 - v10;
    if (v4 == v3 && v19 > 0.0) {
      ++*(_DWORD *)(a1 + 652);
    }
    double v20 = (double)v6;
    if (v6 >= 1)
    {
      double v21 = v7 / v20;
      if (v21 < 0.01) {
        ++*(_DWORD *)(a1 + 656);
      }
      if (v21 > 2.0) {
        ++*(_DWORD *)(a1 + 660);
      }
    }

    if (v20 / v19 > 20.0) {
      ++*(_DWORD *)(a1 + 664);
    }
    if (v6 >= 21 && v12 - v8 < 3.0) {
      ++*(_DWORD *)(a1 + 668);
    }
    if (v6 >= 1 && v11 == 0.0) {
      ++*(_DWORD *)(a1 + 672);
    }
    if (v4 == v3 && v11 - v13 > 0.0)
    {
      ++*(_DWORD *)(a1 + 676);
      unsigned int v4 = v3;
    }
  }

  *(_DWORD *)(a1 + 684) = v4;
  *(void *)(a1 + 688) = *(void *)(a2 + 32);
  *(void *)(a1 + 696) = *(void *)(a2 + 88);
  *(void *)(a1 + 704) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 712) = result;
  HIDWORD(v23) = -1030792151 * *(_DWORD *)(a1 + 616);
  LODWORD(v23) = HIDWORD(v23);
  if ((v23 >> 1) <= 0x51EB851)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v24 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(a1 + 616);
      int v26 = *(_DWORD *)(a1 + 632);
      int v27 = *(_DWORD *)(a1 + 636);
      int v28 = *(_DWORD *)(a1 + 640);
      *(_DWORD *)std::stringbuf::string_type buf = 67109888;
      int v41 = v25;
      __int16 v42 = 1024;
      int v43 = v26;
      __int16 v44 = 1024;
      int v45 = v27;
      __int16 v46 = 1024;
      int v47 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "fCA_runningNumEpochs: %d, countStepCountFailures log, fCA_numSteps: %d, fCA_droppedStepsOccurence: %d, fCA_recNumSteps: %d.",  buf,  0x1Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v30 = *(_DWORD *)(a1 + 632);
      int v31 = *(_DWORD *)(a1 + 636);
      int v32 = *(_DWORD *)(a1 + 640);
      LOWORD(v36) = 1024;
      HIWORD(v36) = v30;
      int v37 = v31;
      __int16 v38 = 1024;
      int v39 = v32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "fCA_runningNumEpochs: %d, countStepCountFailures log, fCA_numSteps: %d, fCA_droppedStepsOccurence: %d, fCA_recNumSteps: %d.",  &v35,  26,  67109888,  v36);
      __int128 v34 = (uint8_t *)v33;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountRecorderDb::countStepCountFailures(const CLStepCountEntry &)",  "%s\n",  v33);
      if (v34 != buf) {
        free(v34);
      }
    }
  }

  unsigned int v29 = *(_DWORD *)(a1 + 616) + 1;
  *(_DWORD *)(a1 + 616) = v29;
  if (v29 > *(_DWORD *)(a1 + 624))
  {
    sub_10102DB34((_DWORD *)a1);
    double result = 0.0;
    *(_OWORD *)(a1 + 648) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 632) = 0u;
    *(_DWORD *)(a1 + 616) = 0;
  }

  return result;
}

uint64_t sub_10102AEE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 528LL);
  __int128 v2 = *(_OWORD *)(a1 + 152);
  __int128 v3 = *(_OWORD *)(a1 + 184);
  _WORD v8[8] = *(_OWORD *)(a1 + 168);
  v8[9] = v3;
  v8[10] = *(_OWORD *)(a1 + 200);
  __int128 v4 = *(_OWORD *)(a1 + 88);
  __int128 v5 = *(_OWORD *)(a1 + 120);
  _DWORD v8[4] = *(_OWORD *)(a1 + 104);
  void v8[5] = v5;
  _BYTE v8[6] = *(_OWORD *)(a1 + 136);
  v8[7] = v2;
  __int128 v6 = *(_OWORD *)(a1 + 56);
  v8[2] = *(_OWORD *)(a1 + 72);
  void v8[3] = v4;
  v8[0] = *(_OWORD *)(a1 + 40);
  v8[1] = v6;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v8);
}

BOOL sub_10102AF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a3 + 16) == 0.0
      && *(_DWORD *)(a2 + 24) == *(_DWORD *)(a3 + 24)
      && *(double *)(a2 + 72) == *(double *)(a3 + 72)
      && *(_DWORD *)(a2 + 144) == *(_DWORD *)(a3 + 144)
      && *(_DWORD *)(a2 + 148) == *(_DWORD *)(a3 + 148)
}

uint64_t sub_10102AFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_101028E2C(&v25, (uint64_t)&v11);
  if (!(_DWORD)v4)
  {
    *(int8x16_t *)a2 = vextq_s8(v12, v12, 8uLL);
    uint64_t v5 = v20;
    *(void *)(a2 + 16) = v19;
    *(_OWORD *)(a2 + 32) = v14;
    uint64_t v6 = v16;
    *(void *)(a2 + 48) = v15;
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    *(void *)(a2 + 64) = v6;
    *(void *)(a2 + 72) = v7;
    *(_DWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 24) = v13;
    *(void *)(a2 + 144) = v5;
    *(void *)(a2 + 156) = v21;
    *(_BYTE *)(a2 + 152) = v22;
    *(_BYTE *)(a2 + 166) = v23;
    *(void *)(a2 + 80) = v24;
    *(void *)(a2 + 88) = v8;
  }

  uint64_t v9 = v25;
  uint64_t v25 = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  return v4;
}

void sub_10102B0AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10102B0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v11;
  uint64_t v25 = v11;
  uint64_t v5 = sub_101028E2C(&v25, (uint64_t)&v11);
  if (!(_DWORD)v5)
  {
    *(int8x16_t *)a2 = vextq_s8(v12, v12, 8uLL);
    uint64_t v6 = v20;
    *(void *)(a2 + 16) = v19;
    *(_OWORD *)(a2 + 32) = v14;
    uint64_t v7 = v16;
    *(void *)(a2 + 48) = v15;
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    *(void *)(a2 + 64) = v7;
    *(void *)(a2 + 72) = v8;
    *(_DWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 24) = v13;
    *(void *)(a2 + 144) = v6;
    *(void *)(a2 + 156) = v21;
    *(_BYTE *)(a2 + 152) = v22;
    *(_BYTE *)(a2 + 166) = v23;
    *(void *)(a2 + 80) = v24;
    *(void *)(a2 + 88) = v9;
  }

  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return v5;
}

void sub_10102B1BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10102B1DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  return result;
}

uint64_t sub_10102B20C(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v4 = a1 + 112;
  uint64_t v6 = v4 - 40;
  uint64_t v84 = v4;
  (*(void (**)(void))(v5 + 16))();
  __int16 v86 = 256;
  if (!sub_100D8A92C(v6))
  {
    uint64_t v12 = -1LL;
LABEL_42:
    if ((_BYTE)v86) {
      pthread_mutex_unlock(v85);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v84 + 24LL))(v84);
    }
    return v12;
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101895138);
  }
  uint64_t v7 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "StepCountRecorderDb: running aggregateRecords",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    LOWORD(v87) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "StepCountRecorderDb: running aggregateRecords",  &v87,  2);
    uint64_t v64 = (char *)v63;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v63);
  }

  __int128 v81 = 0LL;
  int v82 = 0LL;
  unsigned int v83 = 0LL;
  sub_1003C0D54(*(void *)(a1 + 80), "SELECT * FROM StepCountHistory ORDER BY startTime ASC", buf);
  uint64_t v70 = *(void *)buf;
  if (!*(void *)buf)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v13 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "StepCountRecorderDb: failed to prepare queryGetAllAsc #InvalidPreparedSQLStatement",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    LOWORD(v87) = 0;
    LODWORD(v68) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "StepCountRecorderDb: failed to prepare queryGetAllAsc #InvalidPreparedSQLStatement",  &v87,  v68);
    uint64_t v11 = (char *)v65;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v65);
    goto LABEL_124;
  }

  int v8 = sub_101028E2C(&v70, (uint64_t)v79);
  if (v8 == 1) {
    goto LABEL_36;
  }
  if (v8 == 2)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    uint64_t v9 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "Failed to examine the most last record for data aggregation.",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    LOWORD(v87) = 0;
    LODWORD(v68) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Failed to examine the most last record for data aggregation.",  &v87,  v68);
    uint64_t v11 = (char *)v10;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v10);
LABEL_124:
LABEL_24:
    __int128 v14 = 0LL;
LABEL_25:
    uint64_t v12 = -1LL;
    goto LABEL_37;
  }

  int v15 = sub_101028E2C(&v70, (uint64_t)&v71);
  if (v15 == 1)
  {
LABEL_36:
    __int128 v14 = 0LL;
    uint64_t v12 = 0LL;
  }

  else
  {
    if (v15 == 2)
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      uint64_t v16 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "Failed to examine the second to last record for data aggregation.",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      LOWORD(v87) = 0;
      LODWORD(v68) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Failed to examine the second to last record for data aggregation.",  &v87,  v68);
      uint64_t v11 = (char *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v17);
      goto LABEL_124;
    }

    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v20 = a2[1];
    if (*(double *)(v20 - 16) == 1.79769313e308 && Current - *((double *)v79 + 1) > *(double *)(v20 - 24))
    {
      sub_10102C020(&v81, v79);
      uint64_t v12 = 0LL;
      __int128 v14 = v81;
    }

    else
    {
      __int128 v14 = 0LL;
      uint64_t v12 = 1LL;
    }

    int v21 = 0;
LABEL_51:
    while (!v21)
    {
      do
      {
        if (v20 == *a2)
        {
          uint64_t v20 = *a2;
LABEL_77:
          v79[4] = v75;
          v79[5] = v76;
          v79[6] = v77;
          uint64_t v80 = v78;
          v79[0] = v71;
          v79[1] = v72;
          v79[2] = v73;
          v79[3] = v74;
          int v21 = sub_101028E2C(&v70, (uint64_t)&v71);
          ++v12;
          goto LABEL_51;
        }

        double v22 = *(double *)(v20 - 24);
        v20 -= 24LL;
      }

      while (Current - *((double *)&v71 + 1) < v22);
      double v23 = *(double *)(v20 + 8);
      v20 += 24LL;
      uint64_t v24 = v82;
      if (v82 >= v83)
      {
        unint64_t v29 = 0xEEEEEEEEEEEEEEEFLL * ((v82 - v14) >> 3);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0x222222222222222LL)
        {
          __int128 v81 = v14;
          sub_100007008();
        }

        if (0xDDDDDDDDDDDDDDDELL * ((v83 - v14) >> 3) > v30) {
          unint64_t v30 = 0xDDDDDDDDDDDDDDDELL * ((v83 - v14) >> 3);
        }
        if (0xEEEEEEEEEEEEEEEFLL * ((v83 - v14) >> 3) >= 0x111111111111111LL) {
          unint64_t v31 = 0x222222222222222LL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31)
        {
          if (v31 > 0x222222222222222LL)
          {
            __int128 v81 = v14;
            sub_1000070D4();
          }

          int v32 = (char *)operator new(120 * v31);
        }

        else
        {
          int v32 = 0LL;
        }

        __int128 v33 = v76;
        __int128 v34 = &v32[120 * v29];
        *((_OWORD *)v34 + 4) = v75;
        *((_OWORD *)v34 + 5) = v33;
        *((_OWORD *)v34 + 6) = v77;
        *((void *)v34 + 14) = v78;
        __int128 v35 = v72;
        *(_OWORD *)__int128 v34 = v71;
        *((_OWORD *)v34 + 1) = v35;
        __int128 v36 = v74;
        *((_OWORD *)v34 + 2) = v73;
        *((_OWORD *)v34 + 3) = v36;
        if (v24 == v14)
        {
          __int16 v44 = &v32[120 * v29];
        }

        else
        {
          int v37 = &v32[120 * v29];
          do
          {
            __int128 v38 = *(_OWORD *)(v24 - 120);
            __int128 v39 = *(_OWORD *)(v24 - 104);
            __int128 v40 = *(_OWORD *)(v24 - 88);
            *(_OWORD *)(v37 - 72) = *(_OWORD *)(v24 - 72);
            *(_OWORD *)(v37 - 88) = v40;
            *(_OWORD *)(v37 - 104) = v39;
            *(_OWORD *)(v37 - 120) = v38;
            __int128 v41 = *(_OWORD *)(v24 - 56);
            __int128 v42 = *(_OWORD *)(v24 - 40);
            __int128 v43 = *(_OWORD *)(v24 - 24);
            __int16 v44 = v37 - 120;
            *((void *)v37 - 1) = *((void *)v24 - 1);
            *(_OWORD *)(v37 - 24) = v43;
            *(_OWORD *)(v37 - 40) = v42;
            *(_OWORD *)(v37 - 56) = v41;
            v24 -= 120;
            v37 -= 120;
          }

          while (v24 != v14);
        }

        int v45 = &v32[120 * v31];
        int v28 = v34 + 120;
        int v82 = v34 + 120;
        unsigned int v83 = v45;
        if (v14) {
          operator delete(v14);
        }
        __int128 v14 = v44;
      }

      else
      {
        __int128 v25 = v76;
        *((_OWORD *)v82 + 4) = v75;
        *((_OWORD *)v24 + 5) = v25;
        *((_OWORD *)v24 + 6) = v77;
        *((void *)v24 + 14) = v78;
        __int128 v26 = v72;
        *(_OWORD *)uint64_t v24 = v71;
        *((_OWORD *)v24 + 1) = v26;
        __int128 v27 = v74;
        int v28 = v24 + 120;
        *((_OWORD *)v24 + 2) = v73;
        *((_OWORD *)v24 + 3) = v27;
      }

      int v82 = v28;
      int v21 = sub_101028E2C(&v70, (uint64_t)&v71);
    }

    if (v21 == 2)
    {
      __int128 v81 = v14;
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      __int16 v46 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_FAULT,  "Failed to iterate through records for data aggregation.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        LOWORD(v87) = 0;
        LODWORD(v68) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Failed to iterate through records for data aggregation.",  &v87,  v68);
        __int128 v48 = (char *)v47;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v47);
      }

      goto LABEL_25;
    }

    __int128 v81 = v14;
    sub_1003C0454(*(void *)(a1 + 80));
    if (!v12)
    {
      if ((*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 104LL))(a1, &v87))
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        __int16 v62 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_FAULT,  "Failed to retrieve most recent record for data aggregation.",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101895138);
          }
          v69[0] = 0;
          LODWORD(v68) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Failed to retrieve most recent record for data aggregation.",  v69,  v68);
          uint64_t v67 = (char *)v66;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v66);
        }

        sub_1003C0E18(*(void *)(a1 + 80));
        goto LABEL_25;
      }

      *(double *)&v88[4] = Current - *(double *)(a2[1] - 24);
      (*(void (**)(uint64_t, int *, void))(*(void *)a1 + 120LL))(a1, &v87, 0LL);
      uint64_t v12 = 1LL;
    }

    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM StepCountHistory WHERE id = ?", buf);
    uint64_t v49 = *(void *)buf;
    __int128 v50 = v82;
    if (v14 != v82)
    {
      __int128 v51 = v14;
      do
      {
        __int128 v52 = (sqlite3_stmt *)sub_100019240(v49);
        if (sub_1003C28BC(v52, 1, *(_DWORD *)v51))
        {
          uint64_t v53 = *(void *)(a1 + 80);
          __int128 v54 = (sqlite3_stmt *)sub_100019240(v49);
          sub_1003BB2BC(v53, v54);
          --*(_DWORD *)(a1 + 132);
        }

        else
        {
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101895138);
          }
          __int128 v55 = (os_log_s *)qword_101934518;
          if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
          {
            uint64_t v56 = *((void *)v51 + 1);
            *(_DWORD *)std::stringbuf::string_type buf = 134349056;
            *(void *)&uint8_t buf[4] = v56;
            _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_FAULT,  "Failed to delete marked records with timestamp of %{public}f",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934510 != -1) {
              dispatch_once(&qword_101934510, &stru_101895138);
            }
            uint64_t v57 = *((void *)v51 + 1);
            int v87 = 134349056;
            *(void *)double v88 = v57;
            LODWORD(v68) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "Failed to delete marked records with timestamp of %{public}f",  &v87,  v68);
            __int128 v59 = (char *)v58;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v58);
          }
        }

        v51 += 120;
      }

      while (v51 != v50);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v60 = *(void *)(a1 + 80);
    else {
      uint64_t v61 = *(void *)(v60 + 88);
    }
    sub_1003C1EC0(v60, v61);
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
    }
  }

void sub_10102BF6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, uint64_t a49, char a50)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_1011C52D0((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_10102C020(char **a1, __int128 *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    int v13 = *a1;
    unint64_t v14 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 3);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0x222222222222222LL) {
      sub_100007008();
    }
    unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - (void)v13) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x111111111111111LL) {
      unint64_t v17 = 0x222222222222222LL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 > 0x222222222222222LL) {
        sub_1000070D4();
      }
      uint64_t v18 = (char *)operator new(120 * v17);
    }

    else
    {
      uint64_t v18 = 0LL;
    }

    __int128 v19 = a2[5];
    uint64_t v20 = &v18[120 * v14];
    *((_OWORD *)v20 + 4) = a2[4];
    *((_OWORD *)v20 + 5) = v19;
    *((_OWORD *)v20 + 6) = a2[6];
    *((void *)v20 + 14) = *((void *)a2 + 14);
    __int128 v21 = a2[1];
    *(_OWORD *)uint64_t v20 = *a2;
    *((_OWORD *)v20 + 1) = v21;
    __int128 v22 = a2[2];
    __int128 v23 = a2[3];
    uint64_t v12 = v20 + 120;
    *((_OWORD *)v20 + 2) = v22;
    *((_OWORD *)v20 + 3) = v23;
    if (v5 != v13)
    {
      do
      {
        __int128 v24 = *(_OWORD *)(v5 - 120);
        __int128 v25 = *(_OWORD *)(v5 - 104);
        __int128 v26 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v20 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v20 - 88) = v26;
        *(_OWORD *)(v20 - 104) = v25;
        *(_OWORD *)(v20 - 120) = v24;
        __int128 v27 = *(_OWORD *)(v5 - 56);
        __int128 v28 = *(_OWORD *)(v5 - 40);
        __int128 v29 = *(_OWORD *)(v5 - 24);
        *((void *)v20 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v20 - 24) = v29;
        *(_OWORD *)(v20 - 40) = v28;
        *(_OWORD *)(v20 - 56) = v27;
        v20 -= 120;
        v5 -= 120;
      }

      while (v5 != v13);
      uint64_t v5 = *a1;
    }

    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v18[120 * v17];
    if (v5) {
      operator delete(v5);
    }
  }

  else
  {
    __int128 v6 = *a2;
    __int128 v7 = a2[1];
    __int128 v8 = a2[3];
    *((_OWORD *)v5 + 2) = a2[2];
    *((_OWORD *)v5 + 3) = v8;
    *(_OWORD *)uint64_t v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    __int128 v9 = a2[4];
    __int128 v10 = a2[5];
    __int128 v11 = a2[6];
    *((void *)v5 + 14) = *((void *)a2 + 14);
    *((_OWORD *)v5 + 5) = v10;
    *((_OWORD *)v5 + 6) = v11;
    *((_OWORD *)v5 + 4) = v9;
    uint64_t v12 = v5 + 120;
  }

  a1[1] = v12;
}

uint64_t sub_10102C1B8(uint64_t a1, uint64_t *a2)
{
  return sub_10102B20C(a1 - 72, a2);
}

uint64_t sub_10102C1C0(uint64_t a1, double a2, double a3)
{
  return v4[0];
}

uint64_t sub_10102C1E8(uint64_t a1, double a2, double a3)
{
  return v4[0];
}

uint64_t sub_10102C214(uint64_t a1, char **a2)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v3 = a1 + 112;
  uint64_t v5 = v3 - 40;
  v69[1] = v3;
  uint64_t v47 = v3;
  (*(void (**)(void))(v4 + 16))();
  __int16 v70 = 256;
  if (sub_100D8A92C(v5))
  {
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * FROM StepCountHistory ORDER BY startTime ASC", v51);
    uint64_t v46 = v51[0];
    v69[0] = v51[0];
    while (!sub_101028E2C(v69, (uint64_t)v51))
    {
      int v6 = v51[0];
      uint64_t v7 = v51[1];
      uint64_t v9 = v60;
      uint64_t v8 = v61;
      int v10 = v53;
      uint64_t v12 = v54;
      uint64_t v11 = v55;
      uint64_t v13 = v56;
      int v14 = v57;
      int v15 = v58;
      uint64_t v16 = v59;
      int v18 = v62;
      int v17 = v63;
      int v19 = v64;
      int v20 = v65;
      char v21 = v66;
      char v22 = v67;
      uint64_t v23 = v68;
      unint64_t v24 = (unint64_t)a2[1];
      unint64_t v25 = (unint64_t)a2[2];
      if (v24 >= v25)
      {
        int v48 = v53;
        uint64_t v49 = v52;
        uint64_t v27 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v24 - (void)*a2) >> 4);
        unint64_t v28 = v27 + 1;
        unint64_t v29 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v25 - (void)*a2) >> 4);
        if (2 * v29 > v28) {
          unint64_t v28 = 2 * v29;
        }
        if (v29 >= 0xBA2E8BA2E8BA2ELL) {
          unint64_t v30 = 0x1745D1745D1745DLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30) {
          unint64_t v31 = (char *)sub_100CAB0E8((uint64_t)(a2 + 2), v30);
        }
        else {
          unint64_t v31 = 0LL;
        }
        int v32 = &v31[176 * v27];
        *(void *)int v32 = v49;
        *((void *)v32 + 1) = v7;
        *((void *)v32 + 2) = v8;
        *((_DWORD *)v32 + 6) = v48;
        *((void *)v32 + 4) = v12;
        *((void *)v32 + 5) = v11;
        *((void *)v32 + 6) = v13;
        *((_DWORD *)v32 + 16) = v14;
        *((_DWORD *)v32 + 17) = v15;
        *((void *)v32 + 9) = v16;
        *((void *)v32 + 10) = v23;
        *((void *)v32 + 11) = v9;
        *((_DWORD *)v32 + 24) = v6;
        *((_DWORD *)v32 + 36) = v18;
        *((_DWORD *)v32 + 37) = v17;
        v32[152] = v21;
        *((_DWORD *)v32 + 39) = v19;
        *((_DWORD *)v32 + 40) = v20;
        v32[166] = v22;
        __int128 v34 = *a2;
        __int128 v33 = a2[1];
        __int128 v35 = v32;
        if (v33 == *a2)
        {
          __int16 v44 = a2;
        }

        else
        {
          do
          {
            __int128 v36 = *((_OWORD *)v33 - 11);
            __int128 v37 = *((_OWORD *)v33 - 9);
            *((_OWORD *)v35 - 10) = *((_OWORD *)v33 - 10);
            *((_OWORD *)v35 - 9) = v37;
            *((_OWORD *)v35 - 11) = v36;
            __int128 v38 = *((_OWORD *)v33 - 8);
            __int128 v39 = *((_OWORD *)v33 - 7);
            __int128 v40 = *((_OWORD *)v33 - 5);
            *((_OWORD *)v35 - 6) = *((_OWORD *)v33 - 6);
            *((_OWORD *)v35 - 5) = v40;
            *((_OWORD *)v35 - 8) = v38;
            *((_OWORD *)v35 - 7) = v39;
            __int128 v41 = *((_OWORD *)v33 - 4);
            __int128 v42 = *((_OWORD *)v33 - 3);
            __int128 v43 = *((_OWORD *)v33 - 1);
            *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
            *((_OWORD *)v35 - 1) = v43;
            *((_OWORD *)v35 - 4) = v41;
            *((_OWORD *)v35 - 3) = v42;
            v35 -= 176;
            v33 -= 176;
          }

          while (v33 != v34);
          __int16 v44 = a2;
          __int128 v33 = *a2;
        }

        __int128 v26 = v32 + 176;
        *__int16 v44 = v35;
        v44[1] = v32 + 176;
        v44[2] = &v31[176 * v30];
        if (v33) {
          operator delete(v33);
        }
      }

      else
      {
        *(void *)unint64_t v24 = v52;
        *(void *)(v24 + 8) = v7;
        *(void *)(v24 + 16) = v8;
        *(_DWORD *)(v24 + 24) = v10;
        *(void *)(v24 + 32) = v12;
        *(void *)(v24 + 40) = v11;
        *(void *)(v24 + 48) = v13;
        *(_DWORD *)(v24 + 64) = v14;
        *(_DWORD *)(v24 + 68) = v15;
        *(void *)(v24 + 72) = v16;
        *(void *)(v24 + 80) = v23;
        *(void *)(v24 + 88) = v9;
        *(_DWORD *)(v24 + 96) = v6;
        *(_DWORD *)(v24 + 144) = v18;
        *(_DWORD *)(v24 + 148) = v17;
        *(_BYTE *)(v24 + 152) = v21;
        *(_DWORD *)(v24 + 156) = v19;
        *(_DWORD *)(v24 + 160) = v20;
        __int128 v26 = (char *)(v24 + 176);
        *(_BYTE *)(v24 + 166) = v22;
      }

      a2[1] = v26;
    }

    if (v46) {
      (*(void (**)(uint64_t))(*(void *)v46 + 8LL))(v46);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v47 + 24LL))(v47);
}

void sub_10102C4F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_10102C534(uint64_t a1)
{
  uint64_t v1 = (_WORD *)(a1 + 112);
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16LL))(a1 + 112);
  v1[204] = 257;
  return (*(uint64_t (**)(_WORD *))(*(void *)v1 + 24LL))(v1);
}

uint64_t sub_10102C57C(uint64_t a1, unsigned int a2, _DWORD *a3, _OWORD *a4)
{
  if (a2 == -1)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    uint64_t v8 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "currentCount passed to getCountOffset is invalid",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      LOWORD(v53) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "currentCount passed to getCountOffset is invalid",  &v53,  2);
      uint64_t v47 = (uint8_t *)v46;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)",  "%s\n",  v46);
      if (v47 != buf) {
        free(v47);
      }
    }
  }

  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v53 = 0u;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 104LL))(a1, &v53);
  if ((_DWORD)v9)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v10 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v71 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Call to getMostRecentRecordUL failed, returning %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v64 = 67109120;
      int v65 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Call to getMostRecentRecordUL failed, returning %d",  &v64);
      __int128 v41 = (uint8_t *)v40;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)",  "%s\n",  v40);
      if (v41 != buf) {
        free(v41);
      }
    }

    int v11 = 0;
  }

  else
  {
    int v11 = v62 + DWORD2(v54);
  }

  if (*(_BYTE *)(a1 + 520))
  {
    *(_DWORD *)(a1 + 568) = -a2;
    *(_BYTE *)(a1 + 520) = 0;
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    uint64_t v12 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(a1 + 544);
      int v14 = *(_DWORD *)(a1 + 568);
      *(_DWORD *)std::stringbuf::string_type buf = 67109632;
      int v71 = v13;
      __int16 v72 = 1024;
      unsigned int v73 = a2;
      __int16 v74 = 1024;
      int v75 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Reset requested.  Counts (prev: %d cur:%d). New fOffset (%d).",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v42 = *(_DWORD *)(a1 + 544);
      int v43 = *(_DWORD *)(a1 + 568);
      int v64 = 67109632;
      int v65 = v42;
      __int16 v66 = 1024;
      unsigned int v67 = a2;
      __int16 v68 = 1024;
      int v69 = v43;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Reset requested.  Counts (prev: %d cur:%d). New fOffset (%d).",  &v64,  20,  (_DWORD)v53);
      int v45 = (uint8_t *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)",  "%s\n",  v44);
      if (v45 != buf) {
        free(v45);
      }
    }
  }

  if ((_DWORD)v9 != 2)
  {
    unsigned int v15 = *(_DWORD *)(a1 + 544);
    if (v15 == -1)
    {
      *(_DWORD *)(a1 + 568) = v11 - a2;
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      uint64_t v23 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *(_DWORD *)(a1 + 544);
        int v25 = *(_DWORD *)(a1 + 568);
        *(_DWORD *)std::stringbuf::string_type buf = 67109632;
        int v71 = v24;
        __int16 v72 = 1024;
        unsigned int v73 = a2;
        __int16 v74 = 1024;
        int v75 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Reset current step count.  Counts (prev: %d cur:%d). New fOffset (%d).",  buf,  0x14u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        int v26 = *(_DWORD *)(a1 + 544);
        int v27 = *(_DWORD *)(a1 + 568);
        int v64 = 67109632;
        int v65 = v26;
        __int16 v66 = 1024;
        unsigned int v67 = a2;
        __int16 v68 = 1024;
        int v69 = v27;
        LODWORD(v52) = 20;
        double v22 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Reset current step count.  Counts (prev: %d cur:%d). New fOffset (%d).",  &v64,  v52);
        goto LABEL_41;
      }
    }

    else if (a2 > 0x63 || a2 >= v15)
    {
      BOOL v29 = a2 >= v15;
      unsigned int v30 = a2 - v15;
      if (!v29 || v30 >= 0x65)
      {
        *(_DWORD *)(a1 + 568) = v11 - a2;
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        unint64_t v31 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
        {
          int v32 = *(_DWORD *)(a1 + 544);
          int v33 = *(_DWORD *)(a1 + 568);
          *(_DWORD *)std::stringbuf::string_type buf = 67240704;
          int v71 = v32;
          __int16 v72 = 1026;
          unsigned int v73 = a2;
          __int16 v74 = 1026;
          int v75 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_FAULT,  "An error in step counts is highly likely.  Treating current count as new 0.  Count (prev: %{public}d cur:%{p ublic}d). New fOffset (%{public}d).",  buf,  0x14u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101895138);
          }
          int v48 = *(_DWORD *)(a1 + 544);
          int v49 = *(_DWORD *)(a1 + 568);
          int v64 = 67240704;
          int v65 = v48;
          __int16 v66 = 1026;
          unsigned int v67 = a2;
          __int16 v68 = 1026;
          int v69 = v49;
          LODWORD(v52) = 20;
          double v50 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "An error in step counts is highly likely.  Treating current count as new 0.  Count (prev: %{public}d c ur:%{public}d). New fOffset (%{public}d).",  &v64,  v52);
          unint64_t v28 = v51;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)",  "%s\n",  v50);
          goto LABEL_42;
        }
      }
    }

    else
    {
      *(_DWORD *)(a1 + 568) = v11 - a2;
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      uint64_t v16 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *(_DWORD *)(a1 + 544);
        int v18 = *(_DWORD *)(a1 + 568);
        *(_DWORD *)std::stringbuf::string_type buf = 67109632;
        int v71 = v17;
        __int16 v72 = 1024;
        unsigned int v73 = a2;
        __int16 v74 = 1024;
        int v75 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Oscar restart detected.  Count (prev: %d cur:%d). New fOffset (%d).",  buf,  0x14u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        int v19 = *(_DWORD *)(a1 + 544);
        int v20 = *(_DWORD *)(a1 + 568);
        int v64 = 67109632;
        int v65 = v19;
        __int16 v66 = 1024;
        unsigned int v67 = a2;
        __int16 v68 = 1024;
        int v69 = v20;
        LODWORD(v52) = 20;
        double v22 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Oscar restart detected.  Count (prev: %d cur:%d). New fOffset (%d).",  &v64,  v52);
LABEL_41:
        unint64_t v28 = v21;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)",  "%s\n",  v22);
LABEL_42:
        if (v28 != buf) {
          free(v28);
        }
      }
    }
  }

  *a3 = *(_DWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 544) = a2;
  __int128 v34 = v62;
  a4[8] = v61;
  a4[9] = v34;
  a4[10] = v63;
  __int128 v35 = v58;
  a4[4] = v57;
  a4[5] = v35;
  __int128 v36 = v60;
  a4[6] = v59;
  a4[7] = v36;
  __int128 v37 = v54;
  *a4 = v53;
  a4[1] = v37;
  __int128 v38 = v56;
  a4[2] = v55;
  a4[3] = v38;
  return v9;
}

uint64_t sub_10102CED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (int32x2_t *)(a1 + 548);
  if (*(_BYTE *)(a1 + 521))
  {
    *(int32x2_t *)(a1 + 572) = vneg_s32(*(int32x2_t *)(a2 + 64));
    *(double *)(a1 + 584) = -*(double *)(a2 + 88);
    *(_BYTE *)(a1 + 521) = 0;
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    uint64_t v7 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 572);
      int v9 = *(_DWORD *)(a1 + 576);
      uint64_t v10 = *(void *)(a1 + 584);
      *(_DWORD *)std::stringbuf::string_type buf = 67109632;
      int v76 = v8;
      __int16 v77 = 1024;
      int v78 = v9;
      __int16 v79 = 2048;
      uint64_t v80 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Reset requested.  New offset (%d, %d, %f).",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v55 = *(_DWORD *)(a1 + 572);
      int v56 = *(_DWORD *)(a1 + 576);
      uint64_t v57 = *(void *)(a1 + 584);
      LODWORD(v70) = 67109632;
      HIDWORD(v70) = v55;
      __int16 v71 = 1024;
      int v72 = v56;
      __int16 v73 = 2048;
      uint64_t v74 = v57;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Reset requested.  New offset (%d, %d, %f).",  &v70,  24,  v70);
      __int128 v59 = (uint8_t *)v58;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)",  "%s\n",  v58);
      if (v59 != buf) {
        free(v59);
      }
    }

    *(int32x2_t *)(a1 + 608) = vneg_s32(*(int32x2_t *)(a2 + 156));
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v11 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(_DWORD *)(a1 + 608);
      int v13 = *(_DWORD *)(a1 + 612);
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      int v76 = v12;
      __int16 v77 = 1024;
      int v78 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Reset requested.  New elevation offset (%d, %d).",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v60 = *(_DWORD *)(a1 + 608);
      int v61 = *(_DWORD *)(a1 + 612);
      LODWORD(v70) = 67109376;
      HIDWORD(v70) = v60;
      __int16 v71 = 1024;
      int v72 = v61;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Reset requested.  New elevation offset (%d, %d).",  &v70,  14);
      __int128 v63 = (uint8_t *)v62;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)",  "%s\n",  v62);
      if (v63 != buf) {
        free(v63);
      }
    }
  }

  unsigned int v14 = v6->i32[0];
  if (v6->i32[0] == -1
    || (unsigned __int32 v15 = *(_DWORD *)(a1 + 552), v15 == -1)
    || (double v16 = *(double *)(a1 + 560), v16 == 1.79769313e308))
  {
    v6[3] = vsub_s32(*(int32x2_t *)(a3 + 64), *(int32x2_t *)(a2 + 64));
    *(double *)(a1 + 584) = *(double *)(a3 + 88) - *(double *)(a2 + 88);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v17 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      int v18 = *(_DWORD *)(a1 + 572);
      int v19 = *(_DWORD *)(a1 + 576);
      uint64_t v20 = *(void *)(a1 + 584);
      *(_DWORD *)std::stringbuf::string_type buf = 67109632;
      int v76 = v18;
      __int16 v77 = 1024;
      int v78 = v19;
      __int16 v79 = 2048;
      uint64_t v80 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Locationd restart detected.  New offset (%d, %d, %f).",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v50 = *(_DWORD *)(a1 + 572);
      int v51 = *(_DWORD *)(a1 + 576);
      uint64_t v52 = *(void *)(a1 + 584);
      LODWORD(v70) = 67109632;
      HIDWORD(v70) = v50;
      __int16 v71 = 1024;
      int v72 = v51;
      __int16 v73 = 2048;
      uint64_t v74 = v52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Locationd restart detected.  New offset (%d, %d, %f).",  &v70,  24,  v70);
      __int128 v54 = (uint8_t *)v53;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)",  "%s\n",  v53);
      if (v54 != buf) {
        free(v54);
      }
    }

    *(int32x2_t *)(a1 + 608) = vsub_s32(*(int32x2_t *)(a3 + 156), *(int32x2_t *)(a2 + 156));
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    char v21 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      int v22 = *(_DWORD *)(a1 + 608);
      int v23 = *(_DWORD *)(a1 + 612);
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      int v76 = v22;
      __int16 v77 = 1024;
      int v78 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "Locationd restart detected.  New elevation offset (%d, %d).",  buf,  0xEu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_25;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    double v37 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Locationd restart detected.  New elevation offset (%d, %d).",  &v70);
    goto LABEL_71;
  }

  int32x2_t v25 = *(int32x2_t *)(a2 + 64);
  BOOL v26 = v25.i32[0] >= v14 || v25.i32[0] >= 0x14u;
  if (v26
    && (v25.i32[1] < v15 ? (v27 = v25.i32[1] >= 0x14u) : (v27 = 1), v27 && (double v28 = *(double *)(a2 + 88), v28 >= v16)))
  {
    BOOL v26 = v25.i32[0] >= v14;
    unsigned int v38 = v25.i32[0] - v14;
    if (!v26 || v38 > 0x14 || (v26 = v25.i32[1] >= v15, unsigned int v39 = v25.i32[1] - v15, !v26) || v39 >= 0x15)
    {
      v6[3] = vsub_s32(*(int32x2_t *)(a3 + 64), v25);
      *(double *)(a1 + 584) = *(double *)(a3 + 88) - v28;
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      __int128 v40 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
      {
        int v41 = *(_DWORD *)(a1 + 572);
        int v42 = *(_DWORD *)(a1 + 576);
        uint64_t v43 = *(void *)(a1 + 584);
        *(_DWORD *)std::stringbuf::string_type buf = 67240704;
        int v76 = v41;
        __int16 v77 = 1026;
        int v78 = v42;
        __int16 v79 = 2050;
        uint64_t v80 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "An error in floor counts is highly likely.  Treating current count as new 0.  New offset (%{public}d, %{public }d, %{public}f).",  buf,  0x18u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        int v44 = *(_DWORD *)(a1 + 572);
        int v45 = *(_DWORD *)(a1 + 576);
        uint64_t v46 = *(void *)(a1 + 584);
        LODWORD(v70) = 67240704;
        HIDWORD(v70) = v44;
        __int16 v71 = 1026;
        int v72 = v45;
        __int16 v73 = 2050;
        uint64_t v74 = v46;
        LODWORD(v69) = 24;
        double v47 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "An error in floor counts is highly likely.  Treating current count as new 0.  New offset (%{public}d, %{ public}d, %{public}f).",  &v70,  v69);
        int v49 = v48;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)",  "%s\n",  v47);
        goto LABEL_72;
      }
    }
  }

  else
  {
    v6[3] = vsub_s32(*(int32x2_t *)(a3 + 64), v25);
    *(double *)(a1 + 584) = *(double *)(a3 + 88) - *(double *)(a2 + 88);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    BOOL v29 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      int v30 = *(_DWORD *)(a1 + 572);
      int v31 = *(_DWORD *)(a1 + 576);
      uint64_t v32 = *(void *)(a1 + 584);
      *(_DWORD *)std::stringbuf::string_type buf = 67109632;
      int v76 = v30;
      __int16 v77 = 1024;
      int v78 = v31;
      __int16 v79 = 2048;
      uint64_t v80 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "Oscar restart detected.  New offset (%d, %d, %f).",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      int v64 = *(_DWORD *)(a1 + 572);
      int v65 = *(_DWORD *)(a1 + 576);
      uint64_t v66 = *(void *)(a1 + 584);
      LODWORD(v70) = 67109632;
      HIDWORD(v70) = v64;
      __int16 v71 = 1024;
      int v72 = v65;
      __int16 v73 = 2048;
      uint64_t v74 = v66;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Oscar restart detected.  New offset (%d, %d, %f).",  &v70,  24,  v70);
      __int16 v68 = (uint8_t *)v67;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)",  "%s\n",  v67);
      if (v68 != buf) {
        free(v68);
      }
    }

    *(int32x2_t *)(a1 + 608) = vsub_s32(*(int32x2_t *)(a3 + 156), *(int32x2_t *)(a2 + 156));
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v33 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(_DWORD *)(a1 + 608);
      int v35 = *(_DWORD *)(a1 + 612);
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      int v76 = v34;
      __int16 v77 = 1024;
      int v78 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "Oscar restart detected.  New elevation offset (%d, %d).",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      double v37 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Oscar restart detected.  New elevation offset (%d, %d).",  &v70);
LABEL_71:
      int v49 = v36;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)",  "%s\n",  v37);
LABEL_72:
      if (v49 != buf) {
        free(v49);
      }
    }
  }

uint64_t sub_10102DA78(void *a1, void *a2)
{
  uint64_t v5 = a1 + 14;
  uint64_t v4 = a1[14];
  int v9 = a1 + 14;
  (*(void (**)(void *))(v4 + 16))(a1 + 14);
  __int16 v10 = 256;
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = (*(uint64_t (**)(void *, _OWORD *))(*a1 + 176LL))(a1, v8);
  if (!(_DWORD)v6) {
    *a2 = *((void *)&v8[0] + 1);
  }
  (*(void (**)(void *))(*v5 + 24LL))(v5);
  return v6;
}

void sub_10102DB20(_Unwind_Exception *a1)
{
}

void sub_10102DB34(_DWORD *a1)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101895138);
  }
  __int128 v2 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Attempt to send core anaytics from StepCountRecorderDb",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Attempt to send core anaytics from StepCountRecorderDb",  &v42,  2);
    uint64_t v20 = (uint8_t *)v19;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLStepCountRecorderDb::sendAnalytics()", "%s\n", v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101895138);
  }
  uint64_t v3 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    int v4 = a1[158];
    int v5 = a1[166];
    int v6 = a1[168];
    int v7 = a1[169];
    int v8 = a1[163];
    int v9 = a1[162];
    int v10 = a1[161];
    int v11 = a1[167];
    int v12 = a1[165];
    int v13 = a1[164];
    int v14 = a1[159];
    int v15 = a1[160];
    *(_DWORD *)std::stringbuf::string_type buf = 67111936;
    int v60 = v4;
    __int16 v61 = 1024;
    int v62 = v5;
    __int16 v63 = 1024;
    int v64 = v6;
    __int16 v65 = 1024;
    int v66 = v7;
    __int16 v67 = 1024;
    int v68 = v8;
    __int16 v69 = 1024;
    int v70 = v9;
    __int16 v71 = 1024;
    int v72 = v10;
    __int16 v73 = 1024;
    int v74 = v11;
    __int16 v75 = 1024;
    int v76 = v12;
    __int16 v77 = 1024;
    int v78 = v13;
    __int16 v79 = 1024;
    int v80 = v14;
    __int16 v81 = 1024;
    int v82 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Step Counter Core Analytics: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d",  buf,  0x4Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v21 = a1[166];
    int v22 = a1[168];
    int v23 = a1[169];
    int v24 = a1[162];
    int v25 = a1[161];
    int v26 = a1[167];
    int v27 = a1[165];
    int v28 = a1[164];
    int v29 = a1[159];
    int v30 = a1[160];
    LOWORD(v43) = 1024;
    HIWORD(v43) = v21;
    LOWORD(v44) = HIWORD(v23);
    HIWORD(v44) = 1024;
    __int16 v45 = 1024;
    int v46 = v24;
    __int16 v47 = 1024;
    int v48 = v25;
    __int16 v49 = 1024;
    int v50 = v26;
    __int16 v51 = 1024;
    int v52 = v27;
    __int16 v53 = 1024;
    int v54 = v28;
    __int16 v55 = 1024;
    int v56 = v29;
    __int16 v57 = 1024;
    int v58 = v30;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Step Counter Core Analytics: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d",  &v42,  74,  v36,  (_DWORD)v37,  v38,  (_DWORD)v39,  (_DWORD)v40,  (_DWORD)v41,  67111936,  v43,  v22,  v44);
    uint64_t v32 = (uint8_t *)v31;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLStepCountRecorderDb::sendAnalytics()", "%s\n", v31);
    if (v32 != buf) {
      free(v32);
    }
  }

  *(void *)&double v16 = objc_opt_class(&OBJC_CLASS___MCProfileConnection).n128_u64[0];
  if (v17
    && (objc_msgSend( +[MCProfileConnection sharedConnection]( MCProfileConnection,  "sharedConnection",  v16),  "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    double v37 = _NSConcreteStackBlock;
    uint64_t v38 = 3221225472LL;
    unsigned int v39 = sub_10102E0AC;
    __int128 v40 = &unk_101820718;
    int v41 = a1;
    AnalyticsSendEventLazy(@"com.apple.CoreMotion.Pedometer.DroppedStepsEval", &v37);
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101895138);
    }
    int v18 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "StepCountRecorderDb: Not authorized to submit analytics without IHA",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      LOWORD(v42) = 0;
      LODWORD(v35) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "StepCountRecorderDb: Not authorized to submit analytics without IHA",  &v42,  v35);
      int v34 = (uint8_t *)v33;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLStepCountRecorderDb::sendAnalytics()", "%s\n", v33);
      if (v34 != buf) {
        free(v34);
      }
    }
  }

NSDictionary *sub_10102E0AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = @"binNumSteps";
  v4[0] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)(round((double)*(int *)(v1 + 632) / 1000.0) * 1000.0));
  v3[1] = @"countCadenceEstimateHigh";
  v4[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 664));
  char v3[2] = @"countFirstStepTimeNotUpdated";
  void v4[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 672));
  v3[3] = @"countFirstStepTimeUpdatedUnexpectedly";
  v4[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 676));
  void v3[4] = @"countNonZeroActiveTimeWithZeroCounts";
  void v4[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 652));
  v3[5] = @"countNonZeroDistWithZeroCountsNoStroller";
  v4[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 648));
  v3[6] = @"countNonZeroDistWithZeroCountsStroller";
  v4[6] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 644));
  v3[7] = @"countStepCountJumpsUnexpectedly";
  v4[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 668));
  _WORD v3[8] = @"countStepEstimateHigh";
  v4[8] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 660));
  v3[9] = @"countStepEstimateLow";
  v4[9] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 656));
  v3[10] = @"droppedStepsOccurence";
  v4[10] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 636));
  v3[11] = @"recNumSteps";
  v4[11] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 640));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  12LL);
}

uint64_t sub_10102E284(void *a1, void **a2, double a3, double a4)
{
  int v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v71);
  if ((SHIBYTE(v72) & 0x80000000) == 0)
  {
    if (HIBYTE(v72)) {
      goto LABEL_3;
    }
LABEL_39:
    sub_101280660(v10);
    goto LABEL_40;
  }

  int v4 = (std::stringbuf *)v71[1];
  operator delete(v71[0]);
  if (!v4) {
    goto LABEL_39;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v71);
  int v11 = sub_10000CF44(&v72, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if ((SBYTE7(v59) & 0x80u) == 0) {
    int v12 = __p;
  }
  else {
    int v12 = (void **)__p[0];
  }
  if ((SBYTE7(v59) & 0x80u) == 0) {
    uint64_t v13 = BYTE7(v59);
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  int v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1[10];
  int v4 = &v73;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v73);
  if ((SBYTE7(v59) & 0x80u) == 0) {
    double v16 = (char *)__p;
  }
  else {
    double v16 = (char *)__p[0];
  }
  sub_1003C0D54(v15, v16, &v69);
  uint64_t v5 = v69;
  uint64_t v69 = 0LL;
  uint64_t v70 = v5;
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    int v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v70, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        uint64_t v20 = a2[1];
        unint64_t v21 = (unint64_t)a2[2];
        if ((unint64_t)v20 >= v21)
        {
          uint64_t v31 = 0x2E8BA2E8BA2E8BA3LL * (((char *)v20 - (_BYTE *)*a2) >> 4);
          unint64_t v32 = v31 + 1;
          unint64_t v33 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v21 - (void)*a2) >> 4);
          if (2 * v33 > v32) {
            unint64_t v32 = 2 * v33;
          }
          if (v33 >= 0xBA2E8BA2E8BA2ELL) {
            unint64_t v34 = 0x1745D1745D1745DLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34) {
            uint64_t v35 = (char *)sub_100CAB0E8((uint64_t)(a2 + 2), v34);
          }
          else {
            uint64_t v35 = 0LL;
          }
          int v36 = &v35[176 * v31];
          __int128 v37 = *(_OWORD *)__p;
          __int128 v38 = v60;
          *((_OWORD *)v36 + 1) = v59;
          *((_OWORD *)v36 + 2) = v38;
          *(_OWORD *)int v36 = v37;
          __int128 v39 = v61;
          __int128 v40 = v62;
          __int128 v41 = v64;
          *((_OWORD *)v36 + 5) = v63;
          *((_OWORD *)v36 + 6) = v41;
          *((_OWORD *)v36 + 3) = v39;
          *((_OWORD *)v36 + 4) = v40;
          __int128 v42 = v65;
          __int128 v43 = v66;
          __int128 v44 = v68;
          *((_OWORD *)v36 + 9) = v67;
          *((_OWORD *)v36 + 10) = v44;
          *((_OWORD *)v36 + 7) = v42;
          *((_OWORD *)v36 + 8) = v43;
          int v46 = (char *)*a2;
          __int16 v45 = (char *)a2[1];
          __int16 v47 = v36;
          if (v45 != *a2)
          {
            do
            {
              __int128 v48 = *((_OWORD *)v45 - 11);
              __int128 v49 = *((_OWORD *)v45 - 9);
              *((_OWORD *)v47 - 10) = *((_OWORD *)v45 - 10);
              *((_OWORD *)v47 - 9) = v49;
              *((_OWORD *)v47 - 11) = v48;
              __int128 v50 = *((_OWORD *)v45 - 8);
              __int128 v51 = *((_OWORD *)v45 - 7);
              __int128 v52 = *((_OWORD *)v45 - 5);
              *((_OWORD *)v47 - 6) = *((_OWORD *)v45 - 6);
              *((_OWORD *)v47 - 5) = v52;
              *((_OWORD *)v47 - 8) = v50;
              *((_OWORD *)v47 - 7) = v51;
              __int128 v53 = *((_OWORD *)v45 - 4);
              __int128 v54 = *((_OWORD *)v45 - 3);
              __int128 v55 = *((_OWORD *)v45 - 1);
              *((_OWORD *)v47 - 2) = *((_OWORD *)v45 - 2);
              *((_OWORD *)v47 - 1) = v55;
              *((_OWORD *)v47 - 4) = v53;
              *((_OWORD *)v47 - 3) = v54;
              v47 -= 176;
              v45 -= 176;
            }

            while (v45 != v46);
            __int16 v45 = (char *)*a2;
          }

          int v30 = v36 + 176;
          *a2 = v47;
          a2[1] = v36 + 176;
          a2[2] = &v35[176 * v34];
          if (v45) {
            operator delete(v45);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)__p;
          __int128 v23 = v60;
          v20[1] = v59;
          void v20[2] = v23;
          *uint64_t v20 = v22;
          __int128 v24 = v61;
          __int128 v25 = v62;
          __int128 v26 = v64;
          v20[5] = v63;
          v20[6] = v26;
          v20[3] = v24;
          void v20[4] = v25;
          __int128 v27 = v65;
          __int128 v28 = v66;
          __int128 v29 = v68;
          v20[9] = v67;
          v20[10] = v29;
          v20[7] = v27;
          v20[8] = v28;
          int v30 = v20 + 11;
        }

        a2[1] = v30;
      }

      uint64_t v5 = v70;
      goto LABEL_42;
    }
  }

void sub_10102E664( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_10102E6CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101895250);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      int v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895250);
      }
      int v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)std::stringbuf::string_type buf = 134349056;
        *(void *)__int128 v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101895250);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLStepCountEntry>::setDatabaseAccessible() [T = CLStepCountEntry, DataProtec tionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101895250);
    }
    int v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)std::stringbuf::string_type buf = 68289539;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      int v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    double v16 = (void *)(v14 + 8 * (v13 / 0x17));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 176 * (v13 % 0x17);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x17)) + 176 * (v22 % 0x17);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101895138);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101895138);
        }
        LOWORD(v41) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        __int128 v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLStepCountEntry>::setDatabaseAccessible() [T = CLStepCountEntry, DataProtec tionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 176LL;
      if (v17 - *v16 == 4048)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101895250);
    }
    int v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      int v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895250);
      }
    }

    uint64_t v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v21 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      int v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  __int128 v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      __int128 v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 11LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 23LL;
  }

  *(void *)(a1 + 208) = v32;
LABEL_61:
  unint64_t v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_10102EE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_10102EE44(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3 = *a3;
  __int128 v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  __int128 v5 = a3[3];
  __int128 v6 = a3[4];
  __int128 v7 = a3[6];
  *(_OWORD *)(a2 + 80) = a3[5];
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  __n128 result = (__n128)a3[7];
  __int128 v9 = a3[8];
  __int128 v10 = a3[10];
  *(_OWORD *)(a2 + 144) = a3[9];
  *(_OWORD *)(a2 + 160) = v10;
  *(__n128 *)(a2 + 112) = result;
  *(_OWORD *)(a2 + 128) = v9;
  return result;
}

id *sub_10102EE78(uint64_t a1, __int128 *a2, char a3)
{
  v41[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v41[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v41);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104LL))(a1, v39);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895250);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101895250);
        }
        LOWORD(v42) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v42,  2);
        double v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLStepCountEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStepCoun tEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *((double *)a2 + 1);
    double v8 = v40;
    double v9 = v7 - v40;
    if (v7 - v40 < 0.0) {
      double v9 = -(v7 - v40);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895250);
      }
      __int128 v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)std::stringbuf::string_type buf = 134349312;
        double v47 = v40;
        __int16 v48 = 2050;
        uint64_t v49 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101895250);
        }
        uint64_t v30 = *((void *)a2 + 1);
        int v42 = 134349312;
        double v43 = v40;
        __int16 v44 = 2050;
        uint64_t v45 = v30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v42,  22);
        uint64_t v32 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLStepCountEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStepCoun tEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v31);
        if (v32 != buf) {
          free(v32);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *((double *)a2 + 1);
      double v8 = v40;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101895250);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)std::stringbuf::string_type buf = 134217984;
          double v47 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101895250);
          }
          double v33 = *((double *)a2 + 1);
          int v42 = 134217984;
          double v43 = v33;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v42));
          uint64_t v35 = (uint8_t *)v34;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLStepCountEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStepCo untEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v34);
          if (v35 != buf) {
            free(v35);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v38 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_101895250);
        double v18 = v38;
      }

      double v19 = v17 - v18;
      uint64_t v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 134217984;
        double v47 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101895250);
        }
        int v42 = 134217984;
        double v43 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v42));
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLStepCountEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStepCoun tEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, v39, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_10102F5E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, id a35)
{
}

uint64_t sub_10102F614(uint64_t a1)
{
  return sub_10102E6CC(a1 - 72);
}

void sub_10102F61C(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_10102F648(uint64_t *a1, char **a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v65);
  if ((SHIBYTE(v66) & 0x80000000) == 0)
  {
    if (HIBYTE(v66)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_1012807CC(v4);
LABEL_44:
    sub_100007008();
  }

  __int128 v51 = v65[1];
  operator delete(v65[0]);
  if (!v51) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v65);
    int v6 = sub_10000CF44(&v66, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v53) & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((SBYTE7(v53) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v53);
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if (SBYTE7(v53) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v67);
    if ((SBYTE7(v53) & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    sub_1003C0D54(v10, v11, &v63);
    uint64_t v12 = v63;
    uint64_t v63 = 0LL;
    uint64_t v64 = v12;
    if (SBYTE7(v53) < 0) {
      operator delete(__p[0]);
    }
    sub_1003C0454(a1[10]);
    while (!sub_1001BA11C((uint64_t)a1, &v64, (uint64_t)__p))
    {
      double v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        uint64_t v24 = 0x2E8BA2E8BA2E8BA3LL * ((v13 - *a2) >> 4);
        unint64_t v25 = v24 + 1;
        unint64_t v26 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v14 - (void)*a2) >> 4);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0xBA2E8BA2E8BA2ELL) {
          unint64_t v27 = 0x1745D1745D1745DLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27) {
          __int128 v28 = (char *)sub_100CAB0E8((uint64_t)(a2 + 2), v27);
        }
        else {
          __int128 v28 = 0LL;
        }
        uint64_t v29 = &v28[176 * v24];
        __int128 v30 = *(_OWORD *)__p;
        __int128 v31 = v54;
        *((_OWORD *)v29 + 1) = v53;
        *((_OWORD *)v29 + 2) = v31;
        *(_OWORD *)uint64_t v29 = v30;
        __int128 v32 = v55;
        __int128 v33 = v56;
        __int128 v34 = v58;
        *((_OWORD *)v29 + 5) = v57;
        *((_OWORD *)v29 + 6) = v34;
        *((_OWORD *)v29 + 3) = v32;
        *((_OWORD *)v29 + 4) = v33;
        __int128 v35 = v59;
        __int128 v36 = v60;
        __int128 v37 = v62;
        *((_OWORD *)v29 + 9) = v61;
        *((_OWORD *)v29 + 10) = v37;
        *((_OWORD *)v29 + 7) = v35;
        *((_OWORD *)v29 + 8) = v36;
        unsigned int v39 = *a2;
        double v38 = a2[1];
        double v40 = v29;
        if (v38 != *a2)
        {
          do
          {
            __int128 v41 = *((_OWORD *)v38 - 11);
            __int128 v42 = *((_OWORD *)v38 - 9);
            *((_OWORD *)v40 - 10) = *((_OWORD *)v38 - 10);
            *((_OWORD *)v40 - 9) = v42;
            *((_OWORD *)v40 - 11) = v41;
            __int128 v43 = *((_OWORD *)v38 - 8);
            __int128 v44 = *((_OWORD *)v38 - 7);
            __int128 v45 = *((_OWORD *)v38 - 5);
            *((_OWORD *)v40 - 6) = *((_OWORD *)v38 - 6);
            *((_OWORD *)v40 - 5) = v45;
            *((_OWORD *)v40 - 8) = v43;
            *((_OWORD *)v40 - 7) = v44;
            __int128 v46 = *((_OWORD *)v38 - 4);
            __int128 v47 = *((_OWORD *)v38 - 3);
            __int128 v48 = *((_OWORD *)v38 - 1);
            *((_OWORD *)v40 - 2) = *((_OWORD *)v38 - 2);
            *((_OWORD *)v40 - 1) = v48;
            *((_OWORD *)v40 - 4) = v46;
            *((_OWORD *)v40 - 3) = v47;
            v40 -= 176;
            v38 -= 176;
          }

          while (v38 != v39);
          double v38 = *a2;
        }

        __int128 v23 = v29 + 176;
        *a2 = v40;
        a2[1] = v29 + 176;
        a2[2] = &v28[176 * v27];
        if (v38) {
          operator delete(v38);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)__p;
        __int128 v16 = v54;
        *((_OWORD *)v13 + 1) = v53;
        *((_OWORD *)v13 + 2) = v16;
        *(_OWORD *)double v13 = v15;
        __int128 v17 = v55;
        __int128 v18 = v56;
        __int128 v19 = v58;
        *((_OWORD *)v13 + 5) = v57;
        *((_OWORD *)v13 + 6) = v19;
        *((_OWORD *)v13 + 3) = v17;
        *((_OWORD *)v13 + 4) = v18;
        __int128 v20 = v59;
        __int128 v21 = v60;
        __int128 v22 = v62;
        *((_OWORD *)v13 + 9) = v61;
        *((_OWORD *)v13 + 10) = v22;
        *((_OWORD *)v13 + 7) = v20;
        *((_OWORD *)v13 + 8) = v21;
        __int128 v23 = v13 + 176;
      }

      a2[1] = v23;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v49 = v64;
    uint64_t v64 = 0LL;
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
    }
    *(void **)((char *)v65
    uint64_t v66 = v50;
    std::streambuf::~streambuf(&v67);
    return std::ios::~ios(&v68);
  }

  return result;
}

void sub_10102F9E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
  }
  sub_1011F8850((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_10102FA4C(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    __int128 v20 = (_Unwind_Exception *)sub_101280938(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  __int128 v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_10102FCAC(void *a1, double a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_101280AA4(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_10102FEE4(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_101280C10(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  __int128 v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_10103010C(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101030138()
{
  qword_10199FF08 = (uint64_t)"id";
  dword_10199FF10 = 1;
  word_10199FF14 = 257;
  byte_10199FF18 = 0;
  byte_10199FF30 = 0;
  qword_10199FF38 = (uint64_t)"startTime";
  dword_10199FF40 = 2;
  word_10199FF44 = 0;
  byte_10199FF48 = 0;
  byte_10199FF60 = 0;
  qword_10199FF68 = (uint64_t)"timestamp";
  dword_10199FF70 = 2;
  word_10199FF74 = 0;
  byte_10199FF78 = 0;
  byte_10199FF90 = 0;
  qword_10199FF98 = (uint64_t)"count";
  dword_10199FFA0 = 1;
  word_10199FFA4 = 0;
  byte_10199FFA8 = 0;
  byte_10199FFC0 = 0;
  qword_10199FFC8 = (uint64_t)"distance";
  dword_10199FFD0 = 2;
  word_10199FFD4 = 0;
  byte_10199FFD8 = 0;
  byte_10199FFF0 = 0;
  qword_10199FFF8 = (uint64_t)"rawdistance";
  dword_1019A0000 = 2;
  word_1019A0004 = 0;
  byte_1019A0008 = 0;
  byte_1019A0020 = 0;
  qword_1019A0028 = (uint64_t)"floorsAscended";
  dword_1019A0030 = 1;
  word_1019A0034 = 0;
  byte_1019A0038 = 0;
  byte_1019A0050 = 0;
  qword_1019A0058 = (uint64_t)"floorsDescended";
  dword_1019A0060 = 1;
  word_1019A0064 = 0;
  byte_1019A0068 = 0;
  byte_1019A0080 = 0;
  qword_1019A0088 = (uint64_t)"pace";
  dword_1019A0090 = 2;
  word_1019A0094 = 0;
  byte_1019A0098 = 0;
  byte_1019A00B0 = 0;
  qword_1019A00B8 = (uint64_t)"activeTime";
  dword_1019A00C0 = 2;
  word_1019A00C4 = 0;
  byte_1019A00C8 = 0;
  byte_1019A00E0 = 0;
  qword_1019A00E8 = (uint64_t)"firstStepTime";
  dword_1019A00F0 = 2;
  word_1019A00F4 = 0;
  byte_1019A00F8 = 0;
  byte_1019A0110 = 0;
  qword_1019A0118 = (uint64_t)"pushCount";
  dword_1019A0120 = 1;
  word_1019A0124 = 0;
  byte_1019A0128 = 0;
  byte_1019A0140 = 0;
  qword_1019A0148 = (uint64_t)"workoutType";
  dword_1019A0150 = 1;
  word_1019A0154 = 0;
  byte_1019A0158 = 0;
  byte_1019A0170 = 0;
  qword_1019A0178 = (uint64_t)"elevationAscended";
  dword_1019A0180 = 1;
  word_1019A0184 = 0;
  byte_1019A0188 = 0;
  byte_1019A01A0 = 0;
  qword_1019A01A8 = (uint64_t)"elevationDescended";
  dword_1019A01B0 = 1;
  word_1019A01B4 = 0;
  byte_1019A01B8 = 0;
  byte_1019A01D0 = 0;
  qword_1019A01D8 = (uint64_t)"distanceSource";
  dword_1019A01E0 = 1;
  word_1019A01E4 = 0;
  byte_1019A01E8 = 0;
  byte_1019A0200 = 0;
  qword_1019A0208 = (uint64_t)"currentCadence";
  dword_1019A0210 = 2;
  word_1019A0214 = 0;
  byte_1019A0218 = 0;
  byte_1019A0230 = 0;
  qword_1019A0238 = (uint64_t)"distanceMobility";
  dword_1019A0240 = 2;
  word_1019A0244 = 0;
  byte_1019A0248 = 0;
  byte_1019A0260 = 0;
  qword_1019A0268 = (uint64_t)"pedometerArmConstrainedState";
  dword_1019A0270 = 1;
  word_1019A0274 = 0;
  byte_1019A0278 = 0;
  byte_1019A0290 = 0;
  qword_1019A0298 = 0LL;
  dword_1019A02A0 = 5;
  word_1019A02A4 = 0;
  byte_1019A02A8 = 0;
  byte_1019A02C0 = 0;
  qword_1019A02C8 = (uint64_t)"startTime";
  unk_1019A02D0 = 0LL;
}

void sub_10103042C(id a1)
{
  qword_1019A0330 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLStepCountNotifierSilo");
}

uint64_t sub_1010304E0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1010311F8;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_1019A0350 != -1) {
    dispatch_once(&qword_1019A0350, block);
  }
  return qword_1019A4148;
}

uint64_t sub_101030690(uint64_t a1, uint64_t a2)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101895618);
  }
  __int128 v4 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "CLStepCountNotifier::receiveWorkoutDistanceAnalyticsMessage: Data received",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101895618);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  1LL,  "CLStepCountNotifier::receiveWorkoutDistanceAnalyticsMessage: Data received",  v8,  2);
    double v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountNotifier::receiveWorkoutDistanceAnalyticsMessage(NSData *)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return sub_100A8CC74(*(std::mutex **)(a1 + 760), a2);
}

uint64_t sub_101030854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1008FA854(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 + 32) + 16LL))(v4 + 32, a2);
  if ((_DWORD)a2)
  {
    uint64_t v6 = sub_1008FA854(0);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_101034EB4;
    v9[3] = &unk_10181D3D0;
    _DWORD v9[4] = a1;
    (*(void (**)(uint64_t, void *))(*(void *)(v6 + 32) + 48LL))(v6 + 32, v9);
    uint64_t v7 = sub_1008FA854(0);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_101034F18;
    void v8[3] = &unk_1018954A0;
    _DWORD v8[4] = a1;
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)(v7 + 32) + 40LL))(v7 + 32, v8);
  }

  return result;
}

void sub_101030980(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = sub_10102DA78(*(void **)(a1 + 128), &v31);
  double v9 = *a2;
  if (!v8)
  {
    if (v9 < v31) {
      double v9 = v31;
    }
    *a2 = v9;
  }

  sub_101026CBC(*(void *)(a1 + 128), 0, a4, v9, *a3);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_1018955B8);
  }
  uint64_t v10 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    double v11 = *a2;
    double v12 = *a3;
    int v13 = *(_DWORD *)a4;
    uint64_t v14 = *(void *)(a4 + 8);
    uint64_t v15 = *(void *)(a4 + 16);
    int v16 = *(_DWORD *)(a4 + 32);
    int v17 = *(_DWORD *)(a4 + 36);
    uint64_t v18 = *(void *)(a4 + 40);
    *(_DWORD *)std::stringbuf::string_type buf = 134219776;
    double v49 = v11;
    __int16 v50 = 2048;
    double v51 = v12;
    __int16 v52 = 1024;
    int v53 = v13;
    __int16 v54 = 2048;
    uint64_t v55 = v14;
    __int16 v56 = 2048;
    uint64_t v57 = v15;
    __int16 v58 = 1024;
    int v59 = v16;
    __int16 v60 = 1024;
    int v61 = v17;
    __int16 v62 = 2048;
    uint64_t v63 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Query (%f, %f): %d, %f, %f, %d, %d, %f",  buf,  0x46u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018955B8);
    }
    double v19 = *a2;
    double v20 = *a3;
    int v21 = *(_DWORD *)a4;
    uint64_t v22 = *(void *)(a4 + 8);
    uint64_t v23 = *(void *)(a4 + 16);
    int v24 = *(_DWORD *)(a4 + 32);
    int v25 = *(_DWORD *)(a4 + 36);
    uint64_t v26 = *(void *)(a4 + 40);
    int v32 = 134219776;
    double v33 = v19;
    __int16 v34 = 2048;
    double v35 = v20;
    __int16 v36 = 1024;
    int v37 = v21;
    __int16 v38 = 2048;
    uint64_t v39 = v22;
    __int16 v40 = 2048;
    uint64_t v41 = v23;
    __int16 v42 = 1024;
    int v43 = v24;
    __int16 v44 = 1024;
    int v45 = v25;
    __int16 v46 = 2048;
    uint64_t v47 = v26;
    LODWORD(v29) = 70;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Query (%f, %f): %d, %f, %f, %d, %d, %f",  COERCE_DOUBLE(&v32),  v29,  v30,  v31);
    __int128 v28 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLStepDistance CLStepCountNotifier::query(CFAbsoluteTime &, CFAbsoluteTime &) const",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

id sub_1010310D0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) silo];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_101031138;
  v4[3] = &unk_10181A288;
  void v4[4] = *(void *)(a1 + 32);
  return [v2 async:v4];
}

id sub_101031138(uint64_t a1)
{
  return objc_msgSend( objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "vendor"),  "proxyForService:",  @"CLOutdoorService"),  "resume");
}

void sub_1010311C8(id a1)
{
  if (sub_1004F7000())
  {
    if (sub_1008FA690()) {
      byte_1019A0340 = 1;
    }
  }

uint64_t sub_1010311F8(uint64_t a1)
{
  id v2 = operator new(0x1A48uLL);
  uint64_t result = sub_101031244((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A4148 = (uint64_t)v2;
  return result;
}

void sub_101031230(_Unwind_Exception *a1)
{
}

uint64_t sub_101031244(uint64_t a1, void *a2)
{
  __int128 v3 = (void *)sub_1010321C0(a1, "CLStepCountNotifier", a2);
  void v3[14] = off_1018953D0;
  uint64_t v4 = (uint64_t)(v3 + 14);
  v3[15] = off_101895418;
  __int128 v5 = v3 + 15;
  void *v3 = off_1018952C0;
  uint64_t v6 = operator new(0x2D0uLL);
  sub_101024DF8(v6, 0LL);
  sub_101038EF4((void *)(a1 + 128), (uint64_t)v6);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 136);
  uint64_t v105 = *(void *)(a1 + 128);
  __int128 v106 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  sub_1001B4E14(a1 + 144, &v105);
  uint64_t v10 = v106;
  if (v106)
  {
    double v11 = (unint64_t *)&v106->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  *(void *)(a1 + 192) = objc_alloc_init(&OBJC_CLASS___CLRunningFormHealthKitWriter);
  int v13 = objc_alloc(&OBJC_CLASS___CMStrideCalibrator);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 136);
  uint64_t v103 = *(void *)(a1 + 128);
  __int128 v104 = v15;
  if (v15)
  {
    int v16 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  id v18 = -[CMStrideCalibrator initInUniverse:stepCountDb:](v13, "initInUniverse:stepCountDb:", v14, &v103);
  double v19 = v104;
  if (v104)
  {
    double v20 = (unint64_t *)&v104->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  *(void *)(a1 + 200) = v18;
  *(void *)(a1 + 208) = objc_alloc_init(&OBJC_CLASS___CLStepDistanceEstimator);
  sub_100E1DC80((void *)(a1 + 216), "PedestrianOdometer", *(void **)(a1 + 32), 0, 5.0, 5.0, 30.0);
  uint64_t v92 = a1 + 216;
  sub_100E1E5EC((void *)(a1 + 360), "PedestrianElevation", *(void **)(a1 + 32), 0, 5.0, 5.5, 30.0);
  sub_101038FE0((void *)(a1 + 760));
  uint64_t v91 = a1 + 760;
  sub_10098A9BC(a1 + 776, a1 + 216, *(void *)(a1 + 192));
  sub_100CBB130(a1 + 2928, a1 + 360, *(void *)(a1 + 192));
  uint64_t v22 = (_BYTE *)(a1 + 6232);
  *(_BYTE *)(a1 + 6232) = 0;
  *(void *)(a1 + 6240) = 0LL;
  *(void *)(a1 + 6568) = 26LL;
  *(_OWORD *)(a1 + 6576) = xmmword_1013BF2B8;
  *(_OWORD *)(a1 + 6592) = unk_1013BF2C8;
  *(_OWORD *)(a1 + 6608) = xmmword_1013BF2D8;
  *(_OWORD *)(a1 + 6620) = *(__int128 *)((char *)&xmmword_1013BF2D8 + 12);
  *(_BYTE *)(a1 + 6636) = 0;
  *(_DWORD *)(a1 + 6640) = 2;
  uint64_t v23 = a1 + 6648;
  *(_OWORD *)(a1 + 6648) = 0u;
  *(_OWORD *)(a1 + 6664) = 0u;
  *(_OWORD *)(a1 + 6680) = 0u;
  *(_OWORD *)(a1 + 6704) = 0u;
  *(void *)(a1 + 6720) = objc_alloc_init(&OBJC_CLASS___CLGestureReportReceiver);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_1018955B8);
  }
  int v24 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "CLStepCountNotifier is being constructed",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018955B8);
    }
    LOWORD(v107) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "CLStepCountNotifier is being constructed",  &v107,  2,  v91,  v92,  a1 + 144,  a1 + 128);
    double v85 = (char *)v84;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLStepCountNotifier::CLStepCountNotifier(id<CLIntersiloUniverse>)",  "%s\n",  v84);
    if (v85 != buf) {
      free(v85);
    }
  }

  uint64_t v25 = sub_1008FA854(0);
  BOOL v102 = 0;
  uint64_t v26 = sub_1006E27E8();
  sub_100413284(v26, buf);
  char v27 = sub_1002A6F64(*(uint64_t *)buf, "StepCountingDisableAggregation", &v102);
  char v28 = v27;
  double v29 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v30 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      if ((v28 & 1) != 0) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
  }

  if ((v27 & 1) == 0) {
LABEL_29:
  }
    BOOL v102 = 0;
LABEL_30:
  BOOL v101 = 0;
  uint64_t v32 = sub_1006E27E8();
  sub_100413284(v32, buf);
  char v33 = sub_1002A6F64(*(uint64_t *)buf, "StepCountingDisableExpiration", &v101);
  char v34 = v33;
  double v35 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v36 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      if ((v34 & 1) != 0) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
  }

  if ((v33 & 1) == 0) {
LABEL_35:
  }
    BOOL v101 = 0;
LABEL_36:
  double v100 = 1.0;
  uint64_t v38 = sub_1006E27E8();
  sub_100413284(v38, buf);
  char v39 = sub_1002A82BC(*(uint64_t *)buf, "StepCountingEmulationTimeRate", &v100);
  char v40 = v39;
  uint64_t v41 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v42 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if ((v40 & 1) != 0) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
  }

  if ((v39 & 1) == 0) {
LABEL_41:
  }
    double v100 = 1.0;
LABEL_42:
  uint64_t v44 = sub_1006E27E8();
  sub_100413284(v44, buf);
  char v45 = sub_1002A6F64(*(uint64_t *)buf, "StepCountingDetailedLogging", (BOOL *)(a1 + 6232));
  char v46 = v45;
  uint64_t v47 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_46;
  }
  __int128 v48 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
  {
LABEL_46:
    if ((v45 & 1) != 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }

  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  if ((v46 & 1) == 0) {
LABEL_47:
  }
    *uint64_t v22 = 1;
LABEL_48:
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_1018955B8);
  }
  __int16 v50 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    int v51 = *v22;
    *(_DWORD *)std::stringbuf::string_type buf = 134218752;
    *(double *)&uint8_t buf[4] = v100;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v102;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v101;
    LOWORD(v116) = 1024;
    *(_DWORD *)((char *)&v116 + 2) = v51;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_INFO,  "Configuration: speedUpRate %f, aggregationDisabled %d, expirationDisabled %d, detailedLogging %d",  buf,  0x1Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018955B8);
    }
    int v86 = *v22;
    int v107 = 134218752;
    double v108 = v100;
    __int16 v109 = 1024;
    BOOL v110 = v102;
    __int16 v111 = 1024;
    BOOL v112 = v101;
    __int16 v113 = 1024;
    int v114 = v86;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Configuration: speedUpRate %f, aggregationDisabled %d, expirationDisabled %d, detailedLogging %d",  COERCE_DOUBLE(&v107),  30,  v91,  v92);
    double v88 = (char *)v87;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLStepCountNotifier::CLStepCountNotifier(id<CLIntersiloUniverse>)",  "%s\n",  v87);
    if (v88 != buf) {
      free(v88);
    }
  }

  *(_BYTE *)(a1 + 184) = *v22;
  if (!v102)
  {
    if (v100 <= 1.0) {
      double v52 = 1.0;
    }
    else {
      double v52 = 1.0 / v100;
    }
    sub_10103225C(a1, !v101, v52);
    sub_1010322EC(a1);
  }

  *(void *)(a1 + 6248) = 0xBFF0000000000000LL;
  *(void *)(a1 + 62sub_1011C52D0(v1 - 56) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 6264) = 0u;
  *(_OWORD *)(a1 + 6280) = 0u;
  *(_OWORD *)(a1 + 6296) = 0u;
  *(_OWORD *)(a1 + 6312) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_OWORD *)(a1 + 6376) = 0u;
  *(_OWORD *)(a1 + 6392) = 0u;
  *(_OWORD *)(a1 + 6408) = 0u;
  uint64_t v53 = *(void *)(a1 + 128);
  __int16 v54 = *(void **)(a1 + 40);
  *(void *)std::stringbuf::string_type buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472LL;
  *(void *)&uint8_t buf[16] = sub_1010343FC;
  unint64_t v116 = &unk_101895450;
  uint64_t v117 = a1;
  sub_101024E48(v53, v54, buf);
  sub_100468458((uint64_t)sub_101032444, a1, *(void **)(a1 + 32), buf);
  uint64_t v55 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v56 = *(void *)v23;
  *(void *)uint64_t v23 = v55;
  if (v56)
  {
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
    uint64_t v57 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v57) {
      (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
    }
  }

  [*(id *)(*(void *)v23 + 16) register:*(void *)(*(void *)v23 + 8) forNotification:1 registrationInfo:0];
  [*(id *)(*(void *)v23 + 16) register:*(void *)(*(void *)v23 + 8) forNotification:2 registrationInfo:0];
  [*(id *)(*(void *)v23 + 16) register:*(void *)(*(void *)v23 + 8) forNotification:0 registrationInfo:0];
  sub_100DAA9F8((uint64_t)sub_10103261C, a1, *(void **)(a1 + 32), buf);
  uint64_t v58 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v59 = *(void *)(a1 + 6656);
  *(void *)(a1 + 66sub_1011C52D0(v1 - 56) = v58;
  if (v59)
  {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
    uint64_t v60 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v60) {
      (*(void (**)(uint64_t))(*(void *)v60 + 8LL))(v60);
    }
  }

  [*(id *)(*(void *)(a1 + 6656) + 16) register:*(void *)(*(void *)(a1 + 6656) + 8) forNotification:0 registrationInfo:0];
  sub_100E18F18((uint64_t)sub_1010327F4, a1, *(void **)(a1 + 32), buf);
  uint64_t v61 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v62 = *(void *)(a1 + 6664);
  *(void *)(a1 + 6664) = v61;
  if (v62)
  {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
    uint64_t v63 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v63) {
      (*(void (**)(uint64_t))(*(void *)v63 + 8LL))(v63);
    }
  }

  [*(id *)(*(void *)(a1 + 6664) + 16) register:*(void *)(*(void *)(a1 + 6664) + 8) forNotification:2 registrationInfo:0];
  uint64_t v64 = operator new(0x38uLL);
  sub_1003DE40C(v64, *(void **)(a1 + 40), (uint64_t)sub_1010329CC, a1, 0LL);
  *(void *)(a1 + 6680) = v64;
  __int128 v65 = operator new(0x38uLL);
  sub_1003DE40C(v65, *(void **)(a1 + 40), (uint64_t)sub_101032B80, a1, 0LL);
  *(void *)(a1 + 6688) = v65;
  uint64_t v66 = sub_1008FA854(0);
  sub_1006DCB40(v66, 9, *(void *)(a1 + 6688), -1.0);
  std::stringbuf v67 = operator new(0x38uLL);
  sub_1003DE40C(v67, *(void **)(a1 + 40), (uint64_t)sub_101032D50, a1, 0LL);
  *(void *)(a1 + 6696) = v67;
  sub_1005C4E40((uint64_t)sub_101032F20, a1, *(void **)(a1 + 32), buf);
  uint64_t v68 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v69 = *(void *)(a1 + 6672);
  *(void *)(a1 + 6672) = v68;
  if (v69)
  {
    (*(void (**)(uint64_t))(*(void *)v69 + 8LL))(v69);
    uint64_t v70 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v70) {
      (*(void (**)(uint64_t))(*(void *)v70 + 8LL))(v70);
    }
  }

  [*(id *)(*(void *)(a1 + 6672) + 16) register:*(void *)(*(void *)(a1 + 6672) + 8) forNotification:0 registrationInfo:0];
  sub_10060B0A4((uint64_t)sub_1010330F8, a1, *(void **)(a1 + 32), buf);
  uint64_t v71 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v72 = *(void *)(a1 + 6712);
  *(void *)(a1 + 6712) = v71;
  if (v72)
  {
    (*(void (**)(uint64_t))(*(void *)v72 + 8LL))(v72);
    uint64_t v73 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v73) {
      (*(void (**)(uint64_t))(*(void *)v73 + 8LL))(v73);
    }
  }

  [*(id *)(*(void *)(a1 + 6712) + 16) register:*(void *)(*(void *)(a1 + 6712) + 8) forNotification:4 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 6712) + 16) register:*(void *)(*(void *)(a1 + 6712) + 8) forNotification:0 registrationInfo:0];
  [*(id *)(a1 + 6720) setDelegate:v5];
  sub_100CBB1CC(a1 + 2928, v4);
  uint64_t v74 = *(void **)(a1 + 200);
  v99[0] = _NSConcreteStackBlock;
  v99[1] = 3221225472LL;
  v99[2] = sub_1010332D0;
  v99[3] = &unk_101895430;
  v99[4] = a1;
  [v74 setCalibrationTrackCallback:v99];
  __int16 v75 = *(void **)(a1 + 208);
  v97[0] = xmmword_1013BF2B8;
  v97[1] = unk_1013BF2C8;
  v98[0] = xmmword_1013BF2D8;
  *(_OWORD *)((char *)v98 + 12) = *(__int128 *)((char *)&xmmword_1013BF2D8 + 12);
  [v75 feedBodyMetrics:v97];
  buf[0] = 0;
  sub_1012049AC(&v95, "StepFusionUseOdometryOnly", buf, 0);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_1018955B8);
  }
  int v76 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v96;
    _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Setting StepFusionUseOdometryOnly to %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018955B8);
    }
    int v107 = 67109120;
    LODWORD(v108) = v96;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Setting StepFusionUseOdometryOnly to %d",  &v107);
    __int128 v90 = (char *)v89;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLStepCountNotifier::CLStepCountNotifier(id<CLIntersiloUniverse>)",  "%s\n",  v89);
    if (v90 != buf) {
      free(v90);
    }
  }

  *(_BYTE *)(a1 + 2906) = v96;
  __int16 v77 = *(std::__shared_weak_count **)(a1 + 768);
  uint64_t v93 = *(void *)(a1 + 760);
  uint64_t v94 = v77;
  if (v77)
  {
    int v78 = (unint64_t *)&v77->__shared_owners_;
    do
      unint64_t v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }

  sub_1009927AC(a1 + 776, &v93);
  int v80 = v94;
  if (v94)
  {
    __int16 v81 = (unint64_t *)&v94->__shared_owners_;
    do
      unint64_t v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }

  return a1;
}

void sub_101031FD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  double v20 = v14 + 838;
  uint64_t v21 = v14[839];
  v14[839] = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  uint64_t v22 = *v20;
  *double v20 = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  uint64_t v23 = v14[834];
  v14[834] = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  uint64_t v24 = v14[833];
  v14[833] = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  uint64_t v25 = v14[832];
  v14[832] = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  uint64_t v26 = *v15;
  uint64_t *v15 = 0LL;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  sub_100CBB1C8(v18);
  sub_10098AA40(v17);
  sub_10000AE14(a11);
  sub_100E245B0(v16);
  sub_100E24548(a12);
  sub_1001B4FBC(a13);
  sub_10000AE14(a14);
  sub_1010332DC((uint64_t)v14);
  _Unwind_Resume(a1);
}

uint64_t sub_1010321C0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101895648;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + sub_1011C52D0(v1 - 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_101032240(_Unwind_Exception *exception_object)
{
}

void sub_10103225C(uint64_t a1, int a2, double a3)
{
  __int128 v5 = (void **)(a1 + 144);
  sub_101033700(a1 + 144, a3 * 129600.0, a3 * 60.0);
  sub_101033700((uint64_t)v5, a3 * 259200.0, a3 * 300.0);
  if (a2) {
    sub_101033A10(v5, a3 * 604800.0);
  }
}

void sub_1010322EC(uint64_t a1)
{
  int v15 = 86400;
  uint64_t v2 = sub_1006E27E8();
  sub_100413284(v2, &v13);
  int v3 = sub_1002A7CB0(v13, "StepCountingAggregateTimerInterval", &v15);
  uint64_t v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  if (v3) {
    uint64_t v7 = 1000000000LL * v15;
  }
  else {
    uint64_t v7 = 86400000000000LL;
  }
  int v8 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0,  0,  (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
  *(void *)(a1 + 6240) = v8;
  dispatch_source_set_timer(v8, 0LL, v7, 0xDF8475800uLL);
  char v9 = *(_BYTE *)(a1 + 6232);
  uint64_t v10 = *(dispatch_source_s **)(a1 + 6240);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_101033CC4;
  handler[3] = &unk_101833458;
  handler[4] = a1;
  char v12 = v9;
  dispatch_source_set_event_handler(v10, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 6240));
}

void sub_101032430( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_101032444(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountNotifier::onMotionStateMediatorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountNotifier::onMotionStateMediatorNotification, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1010353BC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010325FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10103261C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountNotifier::onMotionStateObserverNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountNotifier::onMotionStateObserverNotification, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_101035CA8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010327D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010327F4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountNotifier::onUserInfoUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountNotifier::onUserInfoUpdate, event:%{public, location:escape_only}s, th is:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_101035CF0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010329AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010329CC(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    int v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountNotifier::onActivePedStateCoprocessorData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    uint64_t v4 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      char v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountNotifier::onActivePedStateCoprocessorData, event:%{public, location:esca pe_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v6 = 0;
  }

  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_101032B64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101032B80(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountNotifier::onActivePedStateCoprocessorDataSpectator",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    __int128 v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountNotifier::onActivePedStateCoprocessorDataSpectator, event:%{public, loca tion:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_101035FB4((_DWORD *)a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101032D30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101032D50(void *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountNotifier::onPedometerPathStraightnessUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    __int128 v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountNotifier::onPedometerPathStraightnessUpdate, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_101036074(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101032F00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101032F20(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountNotifier::onWatchOrientationSettingsNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountNotifier::onWatchOrientationSettingsNotification, event:%{public, locati on:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_101036370(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010330D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010330F8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountNotifier::onFitnessTrackingNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountNotifier::onFitnessTrackingNotification, event:%{public, location:escape _only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1010365C0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010332B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010332D0(uint64_t a1, uint64_t a2)
{
  return sub_100CBCC18(*(void *)(a1 + 32) + 2928LL, a2);
}

uint64_t sub_1010332DC(uint64_t a1)
{
  *(void *)a1 = off_101895648;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

void *sub_101033350(void *a1)
{
  *a1 = off_1018952C0;
  a1[14] = off_1018953D0;
  a1[15] = off_101895418;
  sub_101033634((uint64_t)a1);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_1018955B8);
  }
  uint64_t v2 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLStepCountNotifier is shutting down", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018955B8);
    }
    v12[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "CLStepCountNotifier is shutting down",  v12,  2);
    char v11 = (uint8_t *)v10;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual CLStepCountNotifier::~CLStepCountNotifier()", "%s\n", v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  uint64_t v3 = a1[839];
  a1[839] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = a1[838];
  a1[838] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = a1[834];
  a1[834] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = a1[833];
  a1[833] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = a1[832];
  a1[832] = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = a1[831];
  a1[831] = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  sub_100CBB1C8(a1 + 366);
  sub_10098AA40((uint64_t)(a1 + 97));
  sub_10000AE14((uint64_t)(a1 + 95));
  sub_100E245B0((uint64_t)(a1 + 45));
  sub_100E24548((uint64_t)(a1 + 27));
  sub_1001B4FBC((uint64_t)(a1 + 18));
  sub_10000AE14((uint64_t)(a1 + 16));
  sub_1010332DC((uint64_t)a1);
  return a1;
}

void sub_1010335D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_1010335E0(uint64_t a1)
{
  return sub_101033350((void *)(a1 - 112));
}

void *sub_1010335E8(uint64_t a1)
{
  return sub_101033350((void *)(a1 - 120));
}

void sub_1010335F0(void *a1)
{
  uint64_t v1 = sub_101033350(a1);
  operator delete(v1);
}

void sub_101033604(uint64_t a1)
{
  uint64_t v1 = sub_101033350((void *)(a1 - 112));
  operator delete(v1);
}

void sub_10103361C(uint64_t a1)
{
  uint64_t v1 = sub_101033350((void *)(a1 - 120));
  operator delete(v1);
}

void sub_101033634(uint64_t a1)
{
  *(_BYTE *)(a1 + 108) = 1;

  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 192) = 0LL;

  *(void *)(a1 + 6720) = 0LL;
  uint64_t v2 = *(dispatch_source_s **)(a1 + 6240);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 6240));
    *(void *)(a1 + 6240) = 0LL;
  }

  uint64_t v3 = *(void *)(a1 + 6648);
  *(void *)(a1 + 6648) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 6656);
  *(void *)(a1 + 66sub_1011C52D0(v1 - 56) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 6664);
  *(void *)(a1 + 6664) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = sub_1008FA854(0);
  sub_1006DD2A0(v6, 7, *(void *)(a1 + 6680));
  uint64_t v7 = sub_1008FA854(0);
  sub_1006DD2A0(v7, 9, *(void *)(a1 + 6688));
}

void sub_101033700(uint64_t a1, double a2, double a3)
{
  if (a2 < 0.0 || a3 < 0.0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101895790);
    }
    uint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      double v29 = a2;
      __int16 v30 = 2050;
      double v31 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Programmer error, this rule is not valid (age: %{public}f, interval:%{public}f).",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101895790);
      }
      int v24 = 134349312;
      double v25 = a2;
      __int16 v26 = 2050;
      double v27 = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Programmer error, this rule is not valid (age: %{public}f, interval:%{public}f).",  &v24,  22);
      int v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLActivityAggregator<CLStepCountEntry>::addAggregationRule(CFTimeInterval, CFTimeInterval) [T = CLStepCount Entry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  else
  {
    uint64_t v6 = *(double **)a1;
    if (a2 == 0.0 && *v6 == 0.0)
    {
      v6[1] = a3;
    }

    else
    {
      unint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = a1 + 16;
      unint64_t v12 = *(void *)(a1 + 16);
      if (v10 >= v12)
      {
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v6) >> 3);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v6) >> 3);
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x555555555555555LL) {
          unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          __int16 v18 = (char *)sub_10000701C(v11, v17);
        }
        else {
          __int16 v18 = 0LL;
        }
        uint64_t v19 = (double *)&v18[24 * v14];
        double v20 = &v18[24 * v17];
        *uint64_t v19 = a2;
        v19[1] = a3;
        *((_BYTE *)v19 + 16) = 0;
        int v13 = (char *)(v19 + 3);
        uint64_t v22 = *(double **)a1;
        uint64_t v21 = *(double **)(a1 + 8);
        if (v21 != *(double **)a1)
        {
          do
          {
            __int128 v23 = *(_OWORD *)(v21 - 3);
            *((_BYTE *)v19 - 8) = *((_BYTE *)v21 - 8);
            *(_OWORD *)(v19 - 3) = v23;
            v19 -= 3;
            v21 -= 3;
          }

          while (v21 != v22);
          uint64_t v21 = *(double **)a1;
        }

        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v13;
        *(void *)(a1 + 16) = v20;
        if (v21) {
          operator delete(v21);
        }
      }

      else
      {
        *(double *)unint64_t v10 = a2;
        *(double *)(v10 + 8) = a3;
        int v13 = (char *)(v10 + 24);
        *(_BYTE *)(v10 + 16) = 0;
      }

      *(void *)(a1 + 8) = v13;
    }
  }

void sub_101033A10(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    int v9 = a1[2];
    uint64_t v7 = (uint64_t)(a1 + 2);
    uint64_t v8 = v9;
    unint64_t v10 = *(void *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a1) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555LL) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        unint64_t v16 = (char *)sub_10000701C(v7, v15);
      }
      else {
        unint64_t v16 = 0LL;
      }
      unint64_t v17 = &v16[24 * v12];
      __int16 v18 = &v16[24 * v15];
      *(double *)unint64_t v17 = a2;
      *((void *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      uint64_t v11 = v17 + 24;
      double v20 = (char *)*a1;
      uint64_t v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          __int128 v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }

        while (v19 != v20);
        uint64_t v19 = (char *)*a1;
      }

      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      *(double *)unint64_t v10 = a2;
      *(void *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      uint64_t v11 = (char *)(v10 + 24);
    }

    a1[1] = v11;
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101895790);
    }
    uint64_t v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349056;
      double v25 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Programmer error, this expiration rule with time %{public}fis not valid.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101895790);
      }
      int v22 = 134349056;
      double v23 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Programmer error, this expiration rule with time %{public}fis not valid.",  &v22,  12);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLActivityAggregator<CLStepCountEntry>::setExpirationRule(CFTimeInterval) [T = CLStepCountEntry, DataProtec tionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

void sub_101033CC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "CLStepCountNotifier.aggregation_timer");
  if (*(_BYTE *)(a1 + 40))
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018955B8);
    }
    uint64_t v4 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Aggregating records due to timer!", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Aggregating records due to timer!",  v7,  2);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountNotifier::setUpAggregateOnTimer()_block_invoke",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  sub_101033E88(v2 + 144);
}

uint64_t sub_101033E88(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40)) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101895790);
  }
  uint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v3 = sub_101171D38();
    int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)std::stringbuf::string_type buf = 134218240;
    *(double *)__int16 v36 = v3;
    *(_WORD *)&_WORD v36[8] = 1024;
    int v37 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Aggregating records start %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101895790);
    }
    uint64_t v16 = qword_101934A78;
    double v17 = sub_101171D38();
    int v18 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)char v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "Aggregating records start %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    double v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CLAc tivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101895790);
  }
  uint64_t v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v7 = sub_101171D38();
    int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)std::stringbuf::string_type buf = 134218240;
    *(double *)__int16 v36 = v7;
    *(_WORD *)&_WORD v36[8] = 1024;
    int v37 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Aggregating records stop %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101895790);
    }
    uint64_t v21 = qword_101934A78;
    double v22 = sub_101171D38();
    int v23 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v32 = 134218240;
    *(double *)char v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    int v34 = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  2LL,  "Aggregating records stop %f, count ~%d",  COERCE_DOUBLE(&v32),  18);
    double v25 = (uint8_t *)v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CLAc tivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  uint64_t v9 = *(void *)(a1 + 24);
  double v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_101039110(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101895790);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      int v13 = *(_DWORD *)(v12 + 132);
      int v14 = sub_101039110(v12, (double **)a1);
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      *(_DWORD *)__int16 v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101895790);
      }
      uint64_t v26 = qword_101934A78;
      uint64_t v27 = *(void *)(a1 + 24);
      int v28 = *(_DWORD *)(v27 + 132);
      int v29 = sub_101039110(v27, (double **)a1);
      int v32 = 67109376;
      *(_DWORD *)char v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v26,  0LL,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  &v32,  14);
      double v31 = (uint8_t *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CL ActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v30);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  return v5;
}

void sub_1010343FC(uint64_t a1, uint64_t a2)
{
  double v3 = *(_BYTE **)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 144);
  __src[8] = *(_OWORD *)(a2 + 128);
  __src[9] = v4;
  __src[10] = *(_OWORD *)(a2 + 160);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __src[4] = *(_OWORD *)(a2 + 64);
  __src[5] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 112);
  __src[6] = *(_OWORD *)(a2 + 96);
  __src[7] = v6;
  __int128 v7 = *(_OWORD *)(a2 + 16);
  __src[0] = *(_OWORD *)a2;
  __src[1] = v7;
  __int128 v8 = *(_OWORD *)(a2 + 48);
  __src[2] = *(_OWORD *)(a2 + 32);
  __src[3] = v8;
  if (v3[6232])
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018955B8);
    }
    uint64_t v9 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a2 + 8);
      int v11 = *(_DWORD *)(a2 + 24);
      uint64_t v12 = *(void *)(a2 + 32);
      int v13 = *(_DWORD *)(a2 + 64);
      int v14 = *(_DWORD *)(a2 + 68);
      int v15 = *(_DWORD *)(a2 + 96);
      int v16 = *(_DWORD *)(a2 + 144);
      *(_DWORD *)std::stringbuf::string_type buf = 134219520;
      uint64_t v44 = v10;
      __int16 v45 = 1024;
      int v46 = v11;
      __int16 v47 = 2048;
      uint64_t v48 = v12;
      __int16 v49 = 1024;
      int v50 = v13;
      __int16 v51 = 1024;
      int v52 = v14;
      __int16 v53 = 1024;
      int v54 = v15;
      __int16 v55 = 1024;
      int v56 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "StepCount, %f, %d, %f, %d, %d, %d, %d",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      uint64_t v19 = *(void *)(a2 + 8);
      int v20 = *(_DWORD *)(a2 + 24);
      uint64_t v21 = *(void *)(a2 + 32);
      int v22 = *(_DWORD *)(a2 + 64);
      int v23 = *(_DWORD *)(a2 + 68);
      int v24 = *(_DWORD *)(a2 + 96);
      int v25 = *(_DWORD *)(a2 + 144);
      int v29 = 134219520;
      uint64_t v30 = v19;
      __int16 v31 = 1024;
      int v32 = v20;
      __int16 v33 = 2048;
      uint64_t v34 = v21;
      __int16 v35 = 1024;
      int v36 = v22;
      __int16 v37 = 1024;
      int v38 = v23;
      __int16 v39 = 1024;
      int v40 = v24;
      __int16 v41 = 1024;
      int v42 = v25;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "StepCount, %f, %d, %f, %d, %d, %d, %d",  COERCE_DOUBLE(&v29),  52,  *(double *)__src,  DWORD2(__src[0]),  LODWORD(__src[1]),  DWORD2(__src[1]),  LODWORD(__src[2]));
      uint64_t v27 = (uint8_t *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountNotifier::setUpdateFinishedHandler()_block_invoke",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }
  }

  *(_DWORD *)std::stringbuf::string_type buf = 0;
  (*(void (**)(_BYTE *, uint8_t *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v3 + 152LL))( v3,  buf,  __src,  1LL,  0xFFFFFFFFLL,  0LL);
  memcpy(v3 + 6248, __src, 0x140uLL);
  sub_100CBBD00((uint64_t)(v3 + 2928), a2);
  double v17 = objc_autoreleasePoolPush();
  int v18 = objc_alloc_init(&OBJC_CLASS___ALActivityLog);
  -[ALActivityLog setTimestamp:](v18, "setTimestamp:", *(double *)(a2 + 8));
  -[ALActivityLog setStepCountData:]( v18,  "setStepCountData:",  objc_alloc_init(&OBJC_CLASS___ALCLStepCountEntry));
  -[ALCLStepCountEntry setCount:]( -[ALActivityLog stepCountData](v18, "stepCountData"),  "setCount:",  *(unsigned int *)(a2 + 24));
  -[ALCLStepCountEntry setDistance:]( -[ALActivityLog stepCountData](v18, "stepCountData"),  "setDistance:",  *(double *)(a2 + 32));
  -[ALCLStepCountEntry setFloorsAscended:]( -[ALActivityLog stepCountData](v18, "stepCountData"),  "setFloorsAscended:",  *(unsigned int *)(a2 + 64));
  -[ALCLStepCountEntry setFloorsDescended:]( -[ALActivityLog stepCountData](v18, "stepCountData"),  "setFloorsDescended:",  *(unsigned int *)(a2 + 68));
  -[ALCLStepCountEntry setPace:](-[ALActivityLog stepCountData](v18, "stepCountData"), "setPace:", *(double *)(a2 + 72));
  objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLActivityLogger"),  "logData:",  v18);
  objc_autoreleasePoolPop(v17);
}

void *sub_1010347AC@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_101034824(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (*a2 == 4)
  {
    uint64_t v4 = sub_1008FA854(0);
    sub_1006DCB40(v4, 35, *(void *)(a1 + 6696), -1.0);
  }

  else if (v3 == 2)
  {
    if (!*(_BYTE *)(a1 + 6636))
    {
      uint64_t v5 = sub_1008FA854(0);
      sub_1006DCB40(v5, 7, *(void *)(a1 + 6680), -1.0);
      *(_BYTE *)(a1 + 6636) = 1;
      *(_DWORD *)(a1 + 6640) = 2;
    }
  }

  else if (!v3 && *(double *)(a1 + 6248) > 0.0)
  {
    int v7 = 0;
    (*(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v7,  a1 + 6248,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  return 1LL;
}

uint64_t sub_1010348F4(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 4)
  {
    uint64_t v4 = sub_1008FA854(0);
    sub_1006DD2A0(v4, 35, *(void *)(a1 + 6696));
  }

  else if (*a2 == 2)
  {
    if (*(_BYTE *)(a1 + 6636))
    {
      int v6 = 2;
      if (!sub_100247620(a1, &v6, 1LL))
      {
        uint64_t v3 = sub_1008FA854(0);
        sub_1006DD2A0(v3, 7, *(void *)(a1 + 6680));
        *(_BYTE *)(a1 + 6636) = 0;
        *(_DWORD *)(a1 + 6640) = 2;
      }
    }
  }

  return 1LL;
}

void *sub_101034994(void *result, uint64_t **a2)
{
  uint64_t v2 = **a2;
  if (v2 != (*a2)[1])
  {
    uint64_t v4 = result;
    uint64_t v5 = (int64x2_t *)(result + 97);
    uint64_t v6 = (uint64_t)(result + 45);
    do
    {
      int v7 = (void *)v4[26];
      if (v7) {
        [v7 updateEntryDistanceAndPace:v2];
      }
      else {
        memset(__src, 0, sizeof(__src));
      }
      LODWORD(__dst[0]) = 1;
      if (sub_100247620((uint64_t)v4, (int *)__dst, 1LL))
      {
        int v10 = 1;
        memcpy(__dst, __src, sizeof(__dst));
        (*(void (**)(void *, int *, uint64_t *, uint64_t, uint64_t, void))(*v4 + 152LL))( v4,  &v10,  __dst,  1LL,  0xFFFFFFFFLL,  0LL);
        __int128 v8 = (dispatch_queue_t *)sub_100B354EC();
        sub_100B370F8(v8, (uint64_t)&__src[216], (uint64_t)&__src[224]);
      }

      sub_10098AA44(v5, (uint64_t)__src, (uint64_t)__dst);
      sub_101034B10(v4, __dst);
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete((void *)__dst[0]);
      }

      uint64_t result = sub_100E1E944(v6, *(double *)(v2 + 8));
      v2 += 176LL;
    }

    while (v2 != (*a2)[1]);
  }

  return result;
}

void sub_101034AF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101034B10(_BYTE *a1, uint64_t *a2)
{
  int v25 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "CLStepCountNotifier.recordAndNotifyFusedStepDistance");
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    *(void *)&__int128 v4 = 134219520LL;
    __int128 v26 = v4;
    do
    {
      if (a1[6232])
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        int v7 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = *(void *)(v5 + 8);
          int v9 = *(_DWORD *)(v5 + 24);
          uint64_t v11 = *(void *)(v5 + 32);
          uint64_t v10 = *(void *)(v5 + 40);
          uint64_t v12 = *(void *)(v5 + 80);
          uint64_t v13 = *(void *)(v5 + 48);
          int v14 = *(unsigned __int8 *)(v5 + 152);
          *(_DWORD *)std::stringbuf::string_type buf = v26;
          *(void *)&uint8_t buf[4] = v8;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v9;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v10;
          *(_WORD *)&_BYTE buf[28] = 2048;
          *(void *)&buf[30] = v11;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&buf[40] = v12;
          LOWORD(v42) = 2048;
          *(void *)((char *)&v42 + 2) = v13;
          WORD5(v42) = 1024;
          HIDWORD(v42) = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Adding Fused entry, time, %f, count, %d, raw_dist(m), %f, fused_dist(m), %f, cadence(steps/s), %f, mobility_ dist(m), %f, arm_cstr_state, %d",  buf,  0x40u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_1018955B8);
          }
          uint64_t v15 = *(void *)(v5 + 8);
          int v16 = *(_DWORD *)(v5 + 24);
          uint64_t v18 = *(void *)(v5 + 32);
          uint64_t v17 = *(void *)(v5 + 40);
          uint64_t v19 = *(void *)(v5 + 80);
          uint64_t v20 = *(void *)(v5 + 48);
          int v21 = *(unsigned __int8 *)(v5 + 152);
          int v27 = v26;
          uint64_t v28 = v15;
          __int16 v29 = 1024;
          int v30 = v16;
          __int16 v31 = 2048;
          uint64_t v32 = v17;
          __int16 v33 = 2048;
          uint64_t v34 = v18;
          __int16 v35 = 2048;
          uint64_t v36 = v19;
          __int16 v37 = 2048;
          uint64_t v38 = v20;
          __int16 v39 = 1024;
          int v40 = v21;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding Fused entry, time, %f, count, %d, raw_dist(m), %f, fused_dist(m), %f, cadence(steps/s), %f, mobility_ dist(m), %f, arm_cstr_state, %d",  COERCE_DOUBLE(&v27),  64,  v24,  *(double *)&v25,  *(double *)&v26,  *((double *)&v26 + 1));
          int v23 = (char *)v22;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountNotifier::recordAndNotifyFusedStepDistance(const std::vector<CLStepDistanceFusionResult> &)",  "%s\n",  v22);
          if (v23 != buf) {
            free(v23);
          }
        }
      }

      *(_DWORD *)std::stringbuf::string_type buf = 3;
      if (sub_100247620((uint64_t)a1, (int *)buf, 1LL) && *(double *)(v5 + 176) > 0.0)
      {
        int v27 = 3;
        __int128 v57 = 0u;
        __int128 v58 = 0u;
        __int128 v55 = 0u;
        __int128 v56 = 0u;
        __int128 v53 = 0u;
        __int128 v54 = 0u;
        __int128 v51 = 0u;
        __int128 v52 = 0u;
        __int128 v49 = 0u;
        __int128 v50 = 0u;
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        __int128 v45 = 0u;
        __int128 v46 = 0u;
        __int128 v43 = 0u;
        __int128 v44 = 0u;
        __int128 v42 = 0u;
        memset(&buf[16], 0, 32);
        *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(v5 + 176);
        (*(void (**)(_BYTE *, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v27,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
      }

      sub_101034E60((uint64_t)(a1 + 144), v5);
      v5 += 192LL;
    }

    while (v5 != v6);
  }
}

uint64_t sub_101034E60(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10103A0E0(*(void *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 41))
  {
    uint64_t result = sub_100D8A92C(*(void *)(a1 + 24) + 72LL);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 41) = 1;
      return sub_101033E88(a1);
    }
  }

  return result;
}

id sub_101034EB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_101034F0C;
  v4[3] = &unk_10181D3D0;
  void v4[4] = v1;
  return [v2 async:v4];
}

double sub_101034F0C(uint64_t a1)
{
  return sub_1010298B0(*(void *)(*(void *)(a1 + 32) + 128LL));
}

void sub_101034F18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768LL;
  _OWORD v11[2] = sub_101034FEC;
  void v11[3] = &unk_101895470;
  uint64_t v5 = *a2;
  __int128 v4 = (std::__shared_weak_count *)a2[1];
  _DWORD v11[4] = v2;
  v11[5] = v5;
  uint64_t v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  [v3 async:v11];
  uint64_t v8 = v12;
  if (v12)
  {
    int v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_101034FD8(_Unwind_Exception *a1)
{
}

void sub_101034FEC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(uint64_t **)(a1 + 48);
  v8[0] = *(uint64_t **)(a1 + 40);
  v8[1] = v3;
  if (v3)
  {
    __int128 v4 = (unint64_t *)(v3 + 1);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  sub_101034994(v2, v8);
  if (v3)
  {
    uint64_t v6 = (unint64_t *)(v3 + 1);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      (*(void (**)(uint64_t *))(*v3 + 16))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }

void sub_10103507C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101035090(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_1010350B4(uint64_t a1)
{
  return sub_10000AE14(a1 + 40);
}

unint64_t sub_1010350BC()
{
  if (qword_1019A4148) {
    return 1LL;
  }
  else {
    return ((unint64_t)sub_1004F97F4() >> 25) & 1;
  }
}

unint64_t sub_1010350E8()
{
  return ((unint64_t)sub_1004F97F4() >> 27) & 1;
}

unint64_t sub_101035100()
{
  return ((unint64_t)sub_1004F97F4() >> 37) & 1;
}

uint64_t sub_101035118()
{
  unint64_t v0 = sub_1004F97F4();
  if ((v0 & 0x4000000) == 0 || qword_1019A4148 || (sub_1004F97F4() & 0x2000000) != 0) {
    return (v0 >> 26) & 1;
  }
  uint64_t v2 = sub_101280F40();
  return sub_101035158(v2);
}

void sub_101035158(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2 != 19)
  {
    if (v2 == 1)
    {
      uint64_t v3 = (double *)(a1 + 216);
      goto LABEL_8;
    }

    if (v2) {
      return;
    }
  }

  uint64_t v3 = (double *)(a1 + 216);
  if (*(void *)(a2 + 224) != 1LL)
  {
LABEL_8:
    double v4 = 5.0;
    double v5 = 5.0;
    goto LABEL_6;
  }

  double v4 = 150.0;
  double v5 = 150.0;
LABEL_6:
  sub_1010351A4(v3, v4, v5);
}

void sub_1010351A4(double *a1, double a2, double a3)
{
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_1018955D8);
  }
  uint64_t v6 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 1);
    uint64_t v9 = *((void *)a1 + 2);
    *(_DWORD *)std::stringbuf::string_type buf = 136316162;
    uint64_t v27 = v8;
    __int16 v28 = 2048;
    uint64_t v29 = v7;
    __int16 v30 = 2048;
    double v31 = a2;
    __int16 v32 = 2048;
    uint64_t v33 = v9;
    __int16 v34 = 2048;
    double v35 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, thresh old(after), %.3f",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018955D8);
    }
    uint64_t v10 = *((void *)a1 + 12);
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = *((void *)a1 + 2);
    int v16 = 136316162;
    uint64_t v17 = v11;
    __int16 v18 = 2048;
    uint64_t v19 = v10;
    __int16 v20 = 2048;
    double v21 = a2;
    __int16 v22 = 2048;
    uint64_t v23 = v12;
    __int16 v24 = 2048;
    double v25 = a3;
    LODWORD(v15) = 52;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, thresh old(after), %.3f",  (const char *)&v16,  v15);
    int v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNatalieInput<CLOdometerEntry>::modifyTimeouts(CFTimeInterval, CFTimeInterval) [Data_T = CLOdometerEntry]",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  a1[12] = a2;
  a1[2] = a3;
}

void sub_1010353BC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  switch(*a3)
  {
    case 0:
      sub_10099296C((void *)(a1 + 1464), (__int128 *)a4);
      break;
    case 1:
      uint64_t v12 = *(void *)(a1 + 6568);
      if (v12 != *(void *)(a4 + 144))
      {
        int v13 = *(_DWORD *)(a1 + 6616);
        sub_1004F2598();
        int v14 = sub_1001B9A1C();
        unsigned int v15 = sub_100672D30(*(void *)(a4 + 144));
        unsigned int v16 = (0x304001u >> v15) & 1;
        if (v15 > 0x15) {
          unsigned int v16 = 0;
        }
        if (!v13) {
          unsigned int v16 = 0;
        }
        if (v14) {
          int v17 = v16;
        }
        else {
          int v17 = 0;
        }
        sub_10102957C(*(unsigned __int8 **)(a1 + 128), v17);
        sub_101029A64(*(void *)(a1 + 128), *(void *)(a4 + 144));
        uint64_t v12 = *(void *)(a4 + 144);
      }

      *(void *)(a1 + 6568) = v12;
      sub_1009914C4(a1 + 776, (int *)a4);
      sub_1004F2598();
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      __int16 v18 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)(a1 + 6568);
        LODWORD(buf[0]) = 134217984;
        *(void *)((char *)buf + 4) = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "step counting overrideActivityType,%lu,",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        uint64_t v20 = *(void *)(a1 + 6568);
        int v28 = 134217984;
        uint64_t v29 = v20;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "step counting overrideActivityType,%lu,",  &v28);
        uint64_t v11 = (char *)v21;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notificatio n &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v21);
        goto LABEL_30;
      }

      break;
    case 2:
      sub_100CBB208(a1 + 2928, a4);
      if (*(void *)(a4 + 224) == 1LL && *(void *)(a4 + 16) == 1LL)
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        uint64_t v23 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
        {
          uint64_t v24 = *(void *)(a4 + 112);
          LODWORD(buf[0]) = 134217984;
          *(void *)((char *)buf + 4) = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "Flushing buffered step distance on workout end, workout type, %lu",  (uint8_t *)buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_1018955B8);
          }
          uint64_t v25 = *(void *)(a4 + 112);
          int v28 = 134217984;
          uint64_t v29 = v25;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Flushing buffered step distance on workout end, workout type, %lu",  &v28);
          uint64_t v27 = (char *)v26;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notificat ion &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v26);
        }

        sub_1009913CC(a1 + 776, (uint64_t)buf);
        sub_101034B10((_BYTE *)a1, (uint64_t *)buf);
        if (*(void *)&buf[0])
        {
          *((void *)&buf[0] + 1) = *(void *)&buf[0];
          operator delete(*(void **)&buf[0]);
        }
      }

      sub_100991708(a1 + 776, a4);
      sub_101035158(a1, a4);
      break;
    case 3:
    case 4:
    case 5:
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      uint64_t v7 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
      {
        int v8 = *a3;
        LODWORD(buf[0]) = 67240192;
        DWORD1(buf[0]) = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Unexpected CLMotionStateMediator_Type: %{public}d",  (uint8_t *)buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        int v9 = *a3;
        int v28 = 67240192;
        LODWORD(v29) = v9;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Unexpected CLMotionStateMediator_Type: %{public}d",  &v28,  8);
        uint64_t v11 = (char *)v10;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notificatio n &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v10);
LABEL_30:
      }

      break;
    default:
      return;
  }

void sub_10103594C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101035988(uint64_t a1)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101895618);
  }
  uint64_t v2 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101895618);
    }
    v13[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()",  v13,  2);
    int v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  uint64_t v3 = sub_100A8A3A0(*(void *)(a1 + 760));
  if (v3 && (double v4 = v3, -[NSData length](v3, "length")))
  {
    id v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLCompanionNotifier");
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    _DWORD v12[2] = sub_101037118;
    void v12[3] = &unk_101840D20;
    _DWORD v12[4] = v4;
    [v5 doAsync:v12];
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101895618);
    }
    uint64_t v6 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics: No data to send",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101895618);
      }
      v13[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  0LL,  "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics: No data to send",  v13,  v11);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

void sub_101035CA8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    sub_1004F2598();
    if (sub_1004F7500()) {
      sub_100A89E7C(*(std::mutex **)(a1 + 760), a4);
    }
  }

void sub_101035CF0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 <= 5)
  {
    if (*a3 == 2)
    {
      int v9 = (__int128 *)(a1 + 6576);
      int v10 = *(_DWORD *)(a4 + 40);
      if (*(_DWORD *)(a1 + 6616) != v10)
      {
        sub_1004F2598();
        int v11 = sub_1001B9A1C();
        unsigned int v12 = sub_100672D30(*(void *)(a1 + 6568));
        unsigned int v13 = (0x304001u >> v12) & 1;
        if (v12 > 0x15) {
          unsigned int v13 = 0;
        }
        if (!v11) {
          unsigned int v13 = 0;
        }
        if (v10) {
          int v14 = v13;
        }
        else {
          int v14 = 0;
        }
        sub_10102957C(*(unsigned __int8 **)(a1 + 128), v14);
      }

      __int128 v15 = *(_OWORD *)a4;
      __int128 v16 = *(_OWORD *)(a4 + 16);
      __int128 v17 = *(_OWORD *)(a4 + 32);
      *(__int128 *)((char *)v9 + 44) = *(_OWORD *)(a4 + 44);
      v9[1] = v16;
      v9[2] = v17;
      __int128 *v9 = v15;
      __int16 v18 = *(void **)(a1 + 200);
      __int128 v19 = *(_OWORD *)(a4 + 16);
      v30[0] = *(_OWORD *)a4;
      v30[1] = v19;
      v31[0] = *(_OWORD *)(a4 + 32);
      *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(a4 + 44);
      [v18 feedBodyMetrics:v30];
      int v20 = *(_DWORD *)(a4 + 8);
      double v21 = +[CMPedometerTableStepCadenceToStrideLength sharedInstance]( &OBJC_CLASS___CMPedometerTableStepCadenceToStrideLength,  "sharedInstance");
      LODWORD(v22) = v20;
      -[CMPedometerTableStepCadenceToStrideLength setUserHeight:](v21, "setUserHeight:", v22);
      sub_100991840(a1 + 776, v9);
      sub_100CBBC98(a1 + 2928, v9);
      uint64_t v23 = *(void **)(a1 + 208);
      __int128 v24 = v9[1];
      v28[0] = *v9;
      v28[1] = v24;
      v29[0] = v9[2];
      *(_OWORD *)((char *)v29 + 12) = *(__int128 *)((char *)v9 + 44);
      [v23 feedBodyMetrics:v28];
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      id v5 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *a3;
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        int v34 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning Unhandled notification type, %d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        int v25 = *a3;
        v32[0] = 67109120;
        v32[1] = v25;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "#Warning Unhandled notification type, %d",  v32);
        uint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountNotifier::onUserInfoUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNata limetryNotifier_Type::NotificationData &)",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }
    }
  }

_DWORD *sub_101035FB4(_DWORD *result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 >= 2)
  {
    int v3 = v2 != 2;
    if (result[1660] != v3)
    {
      uint64_t v4 = *(void *)(a2 + 8);
      result[1660] = v3;
      int v26 = 2;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v22 = 0u;
      uint64_t v25 = 0LL;
      __int128 v21 = 0u;
      __int128 v20 = 0u;
      __int128 v19 = 0u;
      __int128 v18 = 0u;
      __int128 v17 = 0u;
      __int128 v16 = 0u;
      __int128 v15 = 0u;
      __int128 v14 = 0u;
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      __int128 v10 = 0u;
      __int128 v11 = 0u;
      __int128 v8 = 0u;
      __int128 v9 = 0u;
      __int128 v6 = 0u;
      __int128 v7 = 0u;
      uint64_t v5 = v4;
      LODWORD(v6) = v3;
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, int *, uint64_t *, uint64_t, uint64_t, void))(*(void *)result + 152LL))( result,  &v26,  &v5,  1LL,  0xFFFFFFFFLL,  0LL);
    }
  }

  return result;
}

uint64_t sub_101036074(uint64_t a1, void *a2)
{
  *(_DWORD *)std::stringbuf::string_type buf = 4;
  uint64_t result = sub_100247620(a1, (int *)buf, 1LL);
  if ((_DWORD)result)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018955B8);
    }
    uint64_t v5 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *a2;
      uint64_t v7 = a2[1];
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3];
      *(_DWORD *)std::stringbuf::string_type buf = 134219008;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = v8;
      *(_WORD *)&buf[32] = 2048;
      *(void *)&_BYTE buf[34] = v9;
      *(_WORD *)&buf[42] = 2048;
      *(void *)&buf[44] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "PathStraightnessMetric,timestamp,%.3f, straightness,%.3f,confidence,%.3f,startTime,%.3f,stopTime,%.3f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      uint64_t v13 = a2[2];
      uint64_t v14 = a2[3];
      int v18 = 134219008;
      uint64_t v19 = v11;
      __int16 v20 = 2048;
      uint64_t v21 = v12;
      __int16 v22 = 2048;
      uint64_t v23 = v13;
      __int16 v24 = 2048;
      uint64_t v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = v11;
      LODWORD(v17) = 52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "PathStraightnessMetric,timestamp,%.3f, straightness,%.3f,confidence,%.3f,startTime,%.3f,stopTime,%.3f",  COERCE_DOUBLE(&v18),  v17);
      __int128 v16 = (char *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountNotifier::onPedometerPathStraightnessUpdate(const CLMotionCoprocessorInterface::NotificationData *)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    int v18 = 4;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    memset(&buf[32], 0, 32);
    __int128 v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)a2;
    *(_OWORD *)&uint8_t buf[16] = v10;
    return (*(uint64_t (**)(uint64_t, int *, _BYTE *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v18,  buf,  0LL,  0xFFFFFFFFLL,  0LL);
  }

  return result;
}

void sub_1010362EC(uint64_t a1, uint64_t *a2)
{
  int8x16_t v4 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 1)), *(float64x2_t *)(a2 + 3));
  int8x16_t v12 = vextq_s8(v4, v4, 4uLL);
  float32x4_t v7 = *(float32x4_t *)(a2 + 5);
  uint64_t v5 = a2[7];
  sub_100833700((float32x4_t *)&v12, v7);
  v8[0] = v12;
  v8[1] = v7;
  uint64_t v6 = *a2;
  uint64_t v9 = v5;
  uint64_t v10 = v6;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_100CBC758(a1 + 2928, (uint64_t)v8);
}

uint64_t sub_101036370(uint64_t result, uint64_t a2, _DWORD *a3, int *a4)
{
  if (!*a3)
  {
    uint64_t v5 = result;
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_1018955F8);
    }
    uint64_t v6 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *a4;
      int v7 = a4[1];
      *(_DWORD *)std::stringbuf::string_type buf = 67240448;
      int v17 = v7;
      __int16 v18 = 1026;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Watch orientation settings updated, crown, %{public}d, wrist, %{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_1018955F8);
      }
      int v10 = *a4;
      int v9 = a4[1];
      v13[0] = 67240448;
      v13[1] = v9;
      __int16 v14 = 1026;
      int v15 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "Watch orientation settings updated, crown, %{public}d, wrist, %{public}d",  v13,  14);
      int8x16_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStepCountNotifier::onWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_T ype::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    return sub_100CBCC10(v5 + 2928, a4);
  }

  return result;
}

void sub_101036550(uint64_t a1, uint64_t a2)
{
}

void sub_101036588(uint64_t a1, uint64_t a2)
{
}

void sub_1010365C0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v4 = *a3;
  if (*a3 <= 8)
  {
    if (((1 << v4) & 0x1EE) != 0)
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      uint64_t v6 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
      {
        int v7 = *a3;
        *(_DWORD *)std::stringbuf::string_type buf = 67240192;
        int v15 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Fitness Tracking: Invalid notification type %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        int v10 = *a3;
        v13[0] = 67240192;
        v13[1] = v10;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Fitness Tracking: Invalid notification type %{public}d",  v13,  8);
        int8x16_t v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLStepCountNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notificatio n &, const CLFitnessTrackingNotifier_Type::NotificationData &)",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }
    }

    else if (v4)
    {
      sub_100CBD1D8(a1 + 2928, *(_DWORD *)a4);
    }

    else
    {
      int v8 = (void *)(a1 + 216);
      int v9 = (void *)(a1 + 360);
      if (*(_BYTE *)(a4 + 3))
      {
        sub_1003DACCC(v9);
        sub_1003DAB0C(v8);
      }

      else
      {
        sub_1003DA904(v9);
        sub_1003DA724(v8);
      }
    }
  }

BOOL sub_101036850(uint64_t a1)
{
  uint64_t v2 = sub_100DDA4D4();
  if (v2)
  {
    if (!*(void *)(a1 + 6704))
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      int v3 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Initializing Device Motion dispatcher",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        v15[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Initializing Device Motion dispatcher",  v15,  2);
        uint64_t v13 = (uint8_t *)v12;
        sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLStepCountNotifier::enableDeviceMotion()", "%s\n", v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      int v4 =  -[CLDeviceMotionProperties initWithMode:]( objc_alloc(&OBJC_CLASS___CLDeviceMotionProperties),  "initWithMode:",  3LL);
      uint64_t v5 = operator new(0x38uLL);
      sub_1011C06A0(v5, *(void **)(a1 + 40), (uint64_t)sub_101036BB8, a1, v4);
      uint64_t v6 = *(void *)(a1 + 6704);
      *(void *)(a1 + 6704) = v5;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
      }
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018955B8);
    }
    int v7 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Subscribing for DeviceMotion from pedometer",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      v15[0] = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Subscribing for DeviceMotion from pedometer",  v15,  v14);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLStepCountNotifier::enableDeviceMotion()", "%s\n", v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    uint64_t v8 = sub_100DDA4D4();
    sub_100DDAEA4(v8, *(void *)(a1 + 6704), 0.01);
  }

  return v2 != 0;
}

void sub_101036B9C(_Unwind_Exception *a1)
{
}

void sub_101036BB8(uint64_t *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    int v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStepCountNotifier::onDeviceMotionData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    uint64_t v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStepCountNotifier::onDeviceMotionData, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_1010362EC(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101036D68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101036D88(uint64_t a1)
{
  return sub_101036850(a1 - 112);
}

BOOL sub_101036D90(uint64_t a1)
{
  uint64_t v2 = sub_100DDA4D4();
  if (v2)
  {
    if (*(void *)(a1 + 6704))
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      int v3 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Unregistering device motion for pedometer",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        v11[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Unregistering device motion for pedometer",  v11,  2);
        uint64_t v8 = (uint8_t *)v7;
        sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLStepCountNotifier::disableDeviceMotion()", "%s\n", v7);
        if (v8 != buf) {
          free(v8);
        }
      }

      uint64_t v4 = sub_100DDA4D4();
      sub_100DDB140(v4, *(void *)(a1 + 6704));
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      uint64_t v5 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "stopActive: Device motion dispatcher not initialized, nothing to do",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        v11[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "stopActive: Device motion dispatcher not initialized, nothing to do",  v11,  2);
        __int16 v10 = (uint8_t *)v9;
        sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLStepCountNotifier::disableDeviceMotion()", "%s\n", v9);
        if (v10 != buf) {
          free(v10);
        }
      }
    }
  }

  return v2 != 0;
}

BOOL sub_101037070(uint64_t a1)
{
  return sub_101036D90(a1 - 112);
}

BOOL sub_101037078(uint64_t a1)
{
  return sub_100253308(a1 + 360);
}

BOOL sub_1010370A0(uint64_t a1)
{
  return sub_100253308(a1 + 248);
}

id sub_1010370C8(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a1 + 200);
  if (result) {
    return _[result onRunningFormMetrics:a2];
  }
  return result;
}

id sub_1010370DC(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a1 + 88);
  if (result) {
    return _[result onRunningFormMetrics:a2];
  }
  return result;
}

id sub_1010370F0(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a1 + 200);
  if (result) {
    return _[result queryStrideLengthTracks:a2];
  }
  return result;
}

id sub_101037104(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a1 + 88);
  if (result) {
    return _[result queryStrideLengthTracks:a2];
  }
  return result;
}

id sub_101037118(uint64_t a1, uint64_t a2)
{
  return sub_10039FB50(300.0, a2, 37, *(void **)(a1 + 32), 300LL, 0LL, 1LL, 1LL, 0, 0LL);
}

uint64_t sub_101037160(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1018958A0;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_101037234(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLStepCountNotifier");
  sub_101037160((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  void *v8 = off_1018954D0;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1010372D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_1010372FC(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::stringbuf::string_type buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101895598);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        *(_DWORD *)std::stringbuf::string_type buf = 136446466;
        uint64_t v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101895598);
        }
        __int16 v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        int v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::r emoveClient(int) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNot ifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_101037570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101993000);
}

uint64_t sub_101037584(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)__int128 v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          __int16 v24 = (uint64_t *)v18;
        }
        else {
          __int16 v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int128 v29 = (uint64_t *)v25;
        }
        else {
          __int128 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)&buf[0] = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 320);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          __int128 v36 = sub_10103A664(buf);
          sub_101039768((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_101993001;
        HIDWORD(v40) = v17;
        *(void *)&buf[0] = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)&buf[0] = (char *)&v40 + 4;
        __int128 v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)&buf[0] = (char *)&v40 + 4;
        __int128 v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)&buf[0] = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895598);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    __int128 v37 = (void *)(a1 + 8);
    *(_DWORD *)__int128 v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    __int128 v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::regis terForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLStepCountNotifier_ Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, Re gistrationInfo_T = char]",  "%s\n",  v38);
    return 0LL;
  }

  return result;
}

BOOL sub_101037A10(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101895598);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      __int16 v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::cli entRegistered(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Type::Notification, Notificatio nData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_101037C90(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101895598);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::stringbuf::string_type buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                __int128 v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101895598);
                }
                __int128 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int128 v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                __int128 v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::Notification Data>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Ty pe::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_101038018(uint64_t a1, int *a2, const void *a3)
{
  uint64_t v6 = operator new(0x158uLL);
  void v6[2] = 0LL;
  *uint64_t v6 = off_101895830;
  v6[1] = 0LL;
  memcpy(v6 + 3, a3, 0x140uLL);
  *(void *)&__int128 v13 = v6 + 3;
  *((void *)&v13 + 1) = v6;
  int v12 = *a2;
  uint64_t v14 = &v12;
  int v7 = sub_10023347C((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_1012CF090, &v14);
  sub_10005F550((uint64_t)(v7 + 8), &v13);
  BOOL v8 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    int v9 = (unint64_t *)(*((void *)&v13 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return 1LL;
}

void sub_101038100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_101038114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v5,  a3,  a4,  0LL);
}

void sub_10103817C(uint64_t a1, unsigned int *a2, const void *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    unint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    int v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::stringbuf::string_type buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      uint64_t v68 = v12;
      __int16 v69 = 2050;
      uint64_t v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    uint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)uint64_t v71 = &v71[8];
      memset(&v71[8], 0, 24);
      uint64_t v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = operator new(0x158uLL);
      void v27[2] = 0LL;
      void *v27 = off_101895830;
      v27[1] = 0LL;
      memcpy(v27 + 3, a3, 0x140uLL);
      *(void *)std::stringbuf::string_type buf = v27 + 3;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        __int128 v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_10103930C(a3);
    if (a5 == -1)
    {
      sub_101039394((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          __int128 v37 = (uint64_t *)v33;
        }
        else {
          __int128 v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          __int128 v43 = (unint64_t *)v38;
        }
        else {
          __int128 v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        uint64_t v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101895598);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            __int128 v46 = v71;
          }
          else {
            __int128 v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)std::stringbuf::string_type buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101895598);
          }
          __int128 v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            __int128 v49 = __p;
          }
          else {
            __int128 v49 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          __int128 v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>: :notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, N otificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      uint64_t v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      __int128 v52 = v40 + 3;
      __int128 v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      __int128 v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          uint64_t v59 = v53;
        }
        else {
          uint64_t v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          __int128 v56 = v53;
        }
        __int128 v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_101039768((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_1010387C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10103880C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      __int128 v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101895598);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::lis tClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Ty pe::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895598);
    }
    int v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::stringbuf::string_type buf = 136315394;
      __int128 v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101895598);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::lis tClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Ty pe::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    unint64_t v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      int v11 = (void *)(a1 + 8);
      do
      {
        int v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101895598);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::stringbuf::string_type buf = 136315650;
              __int128 v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101895598);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationDa ta>::listClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStep CountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                int v12 = v18;
              }

              while (!v19);
            }

            int v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            unint64_t v10 = v26;
          }

          while (!v19);
        }

        unint64_t v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_101038DB8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10103A604(a1);
  operator delete(v1);
}

void sub_101038DCC(uint64_t a1, int a2, void *a3)
{
  if (v5)
  {
    int v6 = a2;
    (*(void (**)(void, int *, uint64_t, void))(a1 + 24))(0LL, &v6, v5, *(void *)(a1 + 32));
  }

void sub_101038E18(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101038E44(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_101038E70(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_101038E9C(id a1)
{
  qword_101934748 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

void sub_101038EC8(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void *sub_101038EF4(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_101895728;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_101038F3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101038F5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

uint64_t sub_101038F74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_101038FB4(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_101038FE0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x168uLL);
  uint64_t result = sub_101039028(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_101039014(_Unwind_Exception *a1)
{
}

void *sub_101039028(void *a1)
{
  a1[2] = 0LL;
  *a1 = off_1018957C0;
  a1[1] = 0LL;
  sub_100A89720(a1 + 3);
  return a1;
}

void sub_101039060(_Unwind_Exception *a1)
{
}

void sub_101039074(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018957C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101039088(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018957C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1010390AC(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 24);
  sub_1001B4C40((void *)(a1 + 336));
  std::mutex::~mutex((std::mutex *)(a1 + 88));
  std::mutex::~mutex(v2);
}

void sub_1010390E4(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101039110(uint64_t a1, double **a2)
{
  int v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  int v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }

    while (v6 != v2);
  }

  if (v4 != 1.79769313e308)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101895800);
    }
    int v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning No expiration rule was added so the number of records will be unbounded.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895800);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Warning No expiration rule was added so the number of records will be unbounded.",  v15,  2);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLActivityRecorderDb<CLStepCountEntry>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLStepCountEn try, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  return v7;
}

CLCppContainer *sub_10103930C(const void *a1)
{
  uint64_t v2 = operator new(0x140uLL);
  memcpy(v2, a1, 0x140uLL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_101039884;
  v4[3] = &unk_10181D3D0;
  void v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  320LL);
}

void sub_101039394(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    double v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      double v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          double v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int128 v51 = v9;
        sub_101039894(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int128 v50 = v19;
              sub_101039768(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int128 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int128 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int128 v51 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  __int128 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int128 v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              __int128 v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101895598);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::stringbuf::string_type buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101895598);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                __int128 v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::i nvokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLStepCountNotifier_T ype::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_101039768(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32LL);
    sub_101039894(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80LL;
    int v12 = (uint64_t **)(*(void *)a3 + 40LL);
    int v15 = (int *)(*(void *)a2 + 32LL);
    uint64_t v13 = sub_1004EF3D4(v12, v15, (uint64_t)&unk_1012CF090, &v15);
    uint64_t result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v14,  v10,  v11,  v13 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v14);
    }
  }

  return result;
}

void sub_101039844(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101895830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101039858(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101895830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_101039884(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_101039894(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0)
  {
    sub_10103990C(a1);
  }

  else
  {
    objc_opt_class(&OBJC_CLASS___CLCppContainer);
    if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0) {
      sub_101039C94(a1);
    }
  }

void sub_10103990C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_10103A040((uint64_t)&v7 + 7, a1);
    return;
  }

  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101895870);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BF6F3LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101895870);
      }
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  v7,  v8);
LABEL_21:
      int v6 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStepCountNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101895870);
    }
    double v5 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BF6F3LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101895870);
      }
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  v7,  v8);
      goto LABEL_21;
    }
  }

id sub_101039C94(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101895870);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BF6F3LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101895870);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101895870);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001013BF6F3LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101895870);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStepCountNotifier_Type::NotificationData, Call back = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_10103A040(uint64_t a1, void *a2)
{
  if ([a2 cppObjectPtr]
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D5168))
  {
    goto LABEL_5;
  }

  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)320)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    [a2 cppObjectPtr];
    return;
  }

  uint64_t v3 = (void *)sub_1012810B4();
  sub_10103A0B4(v3);
}

void sub_10103A0B4(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_10103A0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v23[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v24 = 256;
  v23[0] = *(double *)(a2 + 8);
  if (sub_100D8AB44(v6, v23))
  {
    if (sub_100D8A92C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80LL))(a1, a2, 0LL);
    }

    else if (!*(_BYTE *)(a1 + 128))
    {
      uint64_t v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 400))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_100ABDAF8(a1 + 176, 1);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101895800);
        }
        unint64_t v14 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Maximum number of entries exceeded, throwing out oldest entry.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101895800);
          }
          v22[0] = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Maximum number of entries exceeded, throwing out oldest entry.",  v22,  2);
          int v20 = (uint8_t *)v19;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityRecorderDb<CLStepCountEntry>::addSuspectRecord(const T &) [T = CLStepCountEntry, DataProtecti onPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v19);
          if (v20 != buf) {
            free(v20);
          }
        }
      }

      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018955B8);
      }
      int v15 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Buffer was added to since db was inaccesible.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018955B8);
        }
        v22[0] = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Buffer was added to since db was inaccesible.",  v22,  v21);
        int v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityRecorderDb<CLStepCountEntry>::addSuspectRecord(const T &) [T = CLStepCountEntry, DataProtection Policy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      __n128 v7 = sub_10046CDA4(v12, (__int128 *)a2);
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101895800);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      int v28 = "";
      __int16 v29 = 1026;
      int v30 = (int)v23[0];
      __int16 v31 = 2082;
      int v32 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CL database error, record contains invalid time, invalid time:%{public}d, name: %{public, location:escape_only}s}",  buf,  0x22u);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895800);
      }
    }

    id v10 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      __int16 v11 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      int v28 = "";
      __int16 v29 = 1026;
      int v30 = (int)v23[0];
      __int16 v31 = 2082;
      int v32 = v11;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CL database error, record contains invalid time",  "{msg%{public}.0s:CL database error, record contains invalid time, invalid time:%{public}d, name: %{public, location:escape_only}s}",  buf,  0x22u);
    }
  }

  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24LL))(v5, v7);
}

void sub_10103A5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_10103A604(uint64_t a1)
{
  *(void *)a1 = &off_1018958A0;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_10103A664(const void *a1)
{
  id v2 = operator new(0x140uLL);
  memcpy(v2, a1, 0x140uLL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10103A6EC;
  v4[3] = &unk_10181D3D0;
  void v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  320LL);
}

void sub_10103A6EC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_10103A6FC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1013BF280;
      v1[3] = unk_1013BF290;
      v1[4] = xmmword_1013BF2A0;
      v1[0] = xmmword_1013BF260;
      v1[1] = unk_1013BF270;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_10103A7D0(_Unwind_Exception *a1)
{
}

uint64_t sub_10103A7E8()
{
  dword_1019A0308 = 800;
  __cxa_atexit((void (*)(void *))sub_100355650, qword_1019A02F0, (void *)&_mh_execute_header);
  sub_1010DDBC0(qword_1019A0310, "DmFp");
  dword_1019A0328 = 200;
  return __cxa_atexit((void (*)(void *))sub_100355650, qword_1019A0310, (void *)&_mh_execute_header);
}

void sub_10103A95C(_Unwind_Exception *a1)
{
}

id sub_10103A970(uint64_t a1, void *a2)
{
  return _[a2 onKFFilteredPressure:a1];
}

void sub_10103AF40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10103AFB4(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_10103AFE0(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = (void *)sub_100C6AAF0((uint64_t)a1, a2, a3, a4, a5);
  *uint64_t v6 = off_1018958E8;
  v6[6] = off_10182F180;
  __n128 v7 = operator new(0x20uLL);
  void v7[2] = 0LL;
  void *v7 = off_10182F1B8;
  v7[1] = 0LL;
  *((_DWORD *)v7 + 6) = 31337;
  a1[7] = v7 + 3;
  a1[8] = v7;
  a1[11] = 0LL;
  a1[10] = 0LL;
  a1[9] = a1 + 10;
  return a1;
}

void sub_10103B05C(_Unwind_Exception *a1)
{
}

uint64_t sub_10103B074(uint64_t a1)
{
  *(void *)a1 = off_1018958E8;
  uint64_t v2 = (void *)(a1 + 80);
  uint64_t v3 = a1 + 72;
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4 != (void *)(a1 + 80))
  {
    do
    {
      [(id)v4[5] invalidate];

      void v4[5] = 0LL;
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          uint64_t v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }

        while (!v7);
      }

      uint64_t v4 = v6;
    }

    while (v6 != v2);
  }

  sub_100008390(v3, *(void **)(a1 + 80));
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 72) = v2;
  sub_100008390(v3, 0LL);
  sub_1002B729C((void *)(a1 + 48));
  return sub_100C6AB50(a1);
}

void sub_10103B138(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10103B074(a1);
  operator delete(v1);
}

void *sub_10103B14C@<X0>(uint64_t a1@<X8>)
{
  v11[0] = &off_101895998;
  v11[1] = sub_10103B3C0;
  _OWORD v11[2] = 0LL;
  uint64_t v12 = v11;
  sub_1010DDBC0(v13, "kCLConnectionMessageActivityAlarmStart");
  sub_10089C32C((uint64_t)&v14, (uint64_t)v11);
  v9[0] = &off_101895A48;
  v9[1] = sub_10103BB98;
  v9[2] = 0LL;
  id v10 = v9;
  sub_1010DDBC0(v15, "kCLConnectionMessageActivityAlarmAvailable");
  sub_10089C32C((uint64_t)v16, (uint64_t)v9);
  sub_10103C844(a1, (unsigned __int8 *)v13, 2LL);
  for (uint64_t i = 0LL; i != -14; i -= 7LL)
  {
    uint64_t v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      uint64_t v3 = &v16[i * 8];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0) {
      operator delete((void *)v15[i]);
    }
  }

  uint64_t v5 = v10;
  if (v10 == v9)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v10)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  uint64_t result = v12;
  if (v12 == v11)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v11;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  else if (v12)
  {
    uint64_t v8 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  return result;
}

void sub_10103B2F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  for (uint64_t i = 56LL; i != -56; i -= 56LL)
    sub_10026E430(v17 + i);
  int v20 = a13;
  if (a13 == &a10)
  {
    uint64_t v21 = 4LL;
    int v20 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_8;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_8:
  int v22 = a17;
  if (a17 == &a14)
  {
    uint64_t v23 = 4LL;
    int v22 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_13;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_10103B3C0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  unsigned int v37 = 0;
  int v38 = 0;
  double v36 = 0.0;
  if (+[CMActivityAlarmLocal activityAlarmAvailable](&OBJC_CLASS___CMActivityAlarmLocal, "activityAlarmAvailable"))
  {
    if (sub_1009AF224(&v38, &v37, &v36, a3))
    {
      if (a2)
      {
        if (qword_101934500 != -1) {
          dispatch_once(&qword_101934500, &stru_101895968);
        }
        BOOL v7 = (os_log_s *)qword_101934508;
        if (os_log_type_enabled((os_log_t)qword_101934508, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v37;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v36;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v38;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Primed for activity alarm %d with duration %f (internal id %d)",  buf,  0x18u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934500 != -1) {
            dispatch_once(&qword_101934500, &stru_101895968);
          }
          LODWORD(v39) = 67109632;
          HIDWORD(v39) = v37;
          *(_WORD *)int v40 = 2048;
          *(double *)&v40[2] = v36;
          __int16 v41 = 1024;
          int v42 = v38;
          LODWORD(v31) = 24;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934508,  1LL,  "Primed for activity alarm %d with duration %f (internal id %d)",  &v39,  v31,  v32);
          int v28 = (uint8_t *)v27;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)",  "%s\n",  v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        id v8 = [*(id *)(a1 + 8) silo];
        sub_1002B68E8(a1 + 48, &v39);
        uint64_t v9 = objc_alloc(&OBJC_CLASS___CMActivityAlarmLocal);
        uint64_t v10 = v37;
        double v11 = v36;
        id v12 = [v8 queue];
        unint64_t v13 = *(void **)(a1 + 24);
        if (v13)
        {
          [v13 clientName];
        }

        else
        {
          uint64_t v53 = 0LL;
          __int128 v51 = 0u;
          __int128 v52 = 0u;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          __int128 v47 = 0u;
          __int128 v48 = 0u;
          __int128 v45 = 0u;
          __int128 v46 = 0u;
          __int128 v44 = 0u;
          memset(buf, 0, sizeof(buf));
        }

        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3321888768LL;
        _OWORD v33[2] = sub_10103C11C;
        v33[3] = &unk_101895908;
        v33[4] = a1;
        void v33[5] = v39;
        uint64_t v34 = *(std::__shared_weak_count **)v40;
        if (*(void *)v40)
        {
          int v22 = (unint64_t *)(*(void *)v40 + 16LL);
          do
            unint64_t v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }

        int v35 = v38;
        __int16 v24 = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:forClient:withHandler:]( v9,  "initWithTrigger:duration:onQueue:forClient:withHandler:",  v10,  v12,  buf,  v33,  v11);
        if (SHIBYTE(v52) < 0) {
          operator delete(*((void **)&v51 + 1));
        }
        if (SBYTE7(v51) < 0) {
          operator delete((void *)v50);
        }
        if (SHIBYTE(v49) < 0) {
          operator delete(*((void **)&v48 + 1));
        }
        if (SHIBYTE(v47) < 0) {
          operator delete(*((void **)&v46 + 1));
        }
        if (SBYTE7(v46) < 0) {
          operator delete((void *)v45);
        }
        if (SHIBYTE(v44) < 0) {
          operator delete(*(void **)&buf[24]);
        }
        if (!*(void *)(a1 + 88)) {
          sub_100C6AC8C(a1);
        }
        *(void *)std::stringbuf::string_type buf = &v38;
        sub_10000C858((uint64_t **)(a1 + 72), &v38, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5] = v24;
        if (v34) {
          std::__shared_weak_count::__release_weak(v34);
        }
        if (*(void *)v40) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v40);
        }
      }

      else
      {
        uint64_t v15 = *(void *)(a1 + 80);
        if (v15)
        {
          uint64_t v16 = a1 + 80;
          do
          {
            int v17 = *(_DWORD *)(v15 + 32);
            BOOL v18 = v17 < v38;
            if (v17 >= v38) {
              BOOL v19 = (uint64_t *)v15;
            }
            else {
              BOOL v19 = (uint64_t *)(v15 + 8);
            }
            if (!v18) {
              uint64_t v16 = v15;
            }
            uint64_t v15 = *v19;
          }

          while (*v19);
          if (v16 != a1 + 80 && v38 >= *(_DWORD *)(v16 + 32))
          {
            if (qword_101934500 != -1) {
              dispatch_once(&qword_101934500, &stru_101895968);
            }
            int v20 = (os_log_s *)qword_101934508;
            if (os_log_type_enabled((os_log_t)qword_101934508, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::stringbuf::string_type buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v37;
              *(_WORD *)&uint8_t buf[8] = 2048;
              *(double *)&buf[10] = v36;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v38;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Invalidated activity alarm %d with duration %f (internal id %d)",  buf,  0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934500 != -1) {
                dispatch_once(&qword_101934500, &stru_101895968);
              }
              LODWORD(v39) = 67109632;
              HIDWORD(v39) = v37;
              *(_WORD *)int v40 = 2048;
              *(double *)&v40[2] = v36;
              __int16 v41 = 1024;
              int v42 = v38;
              LODWORD(v31) = 24;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934508,  1LL,  "Invalidated activity alarm %d with duration %f (internal id %d)",  &v39,  v31,  v32);
              int v30 = (uint8_t *)v29;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)",  "%s\n",  v29);
              if (v30 != buf) {
                free(v30);
              }
            }

            uint64_t v21 = *(void **)(v16 + 40);
            [v21 invalidate];
            sub_1000087E8((uint64_t **)(a1 + 72), (uint64_t *)v16);
            operator delete((void *)v16);

            if (!*(void *)(a1 + 88)) {
              sub_100C6AC8C(a1);
            }
          }
        }
      }
    }
  }

  else
  {
    if (qword_101934500 != -1) {
      dispatch_once(&qword_101934500, &stru_101895968);
    }
    uint64_t v14 = (os_log_s *)qword_101934508;
    if (os_log_type_enabled((os_log_t)qword_101934508, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Activity alarms not available.  Requested alarm will not be listened for.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934500 != -1) {
        dispatch_once(&qword_101934500, &stru_101895968);
      }
      LOWORD(v39) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934508,  0LL,  "#Warning Activity alarms not available.  Requested alarm will not be listened for.",  &v39,  2);
      int v26 = (uint8_t *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }
  }
}

void sub_10103BB0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, std::__shared_weak_count *a24, uint64_t a25, uint64_t a26, char a27)
{
  _Unwind_Resume(a1);
}

void sub_10103BB98(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v4 = CMAvailable;
  uint64_t v5 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  +[CMActivityAlarmLocal activityAlarmAvailable](&OBJC_CLASS___CMActivityAlarmLocal, "activityAlarmAvailable"));
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  CLConnectionMessage::sendReply(*a2);
}

void sub_10103BC5C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_10103BC84(uint64_t a1, int a2, void *a3)
{
  int v19 = a2;
  if (qword_101934500 != -1) {
    dispatch_once(&qword_101934500, &stru_101895968);
  }
  uint64_t v6 = (os_log_s *)qword_101934508;
  if (os_log_type_enabled((os_log_t)qword_101934508, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "activity alarm triggered. (internal id %d)",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934500 != -1) {
      dispatch_once(&qword_101934500, &stru_101895968);
    }
    LODWORD(v20[0]) = 67109120;
    HIDWORD(v20[0]) = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934508,  2LL,  "activity alarm triggered. (internal id %d)",  v20);
    uint64_t v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityAlarmSubscription::onActivityAlarm(int, CMActivityAlarm *, NSError *)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  uint64_t v7 = *(void *)(a1 + 80);
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v8 = a1 + 80;
  do
  {
    int v9 = *(_DWORD *)(v7 + 32);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      double v11 = (uint64_t *)v7;
    }
    else {
      double v11 = (uint64_t *)(v7 + 8);
    }
    if (!v10) {
      uint64_t v8 = v7;
    }
    uint64_t v7 = *v11;
  }

  while (*v11);
  if (v8 != a1 + 80 && *(_DWORD *)(v8 + 32) <= a2)
  {
    sub_1002A5370(buf);
    unsigned int v18 = [a3 trigger];
    [a3 duration];
    v20[0] = v13;
    sub_1009AF1C0(&v19, &v18, v20, (uint64_t)buf);
    v20[0] = sub_1002A59CC((uint64_t)buf);
    sub_10103C074(a1, v20);
    sub_1002475A8(a1 + 72, &v19);

    if (!*(void *)(a1 + 88)) {
      sub_100C6AC8C(a1);
    }
    sub_1002A5590(buf);
  }

  else
  {
LABEL_16:
    if (qword_101934500 != -1) {
      dispatch_once(&qword_101934500, &stru_101895968);
    }
    id v12 = (os_log_s *)qword_101934508;
    if (os_log_type_enabled((os_log_t)qword_101934508, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "activity alarm triggered, but invalidated.  ignoring.  (internal id %d)",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934500 != -1) {
        dispatch_once(&qword_101934500, &stru_101895968);
      }
      LODWORD(v20[0]) = 67109120;
      HIDWORD(v20[0]) = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934508,  1LL,  "activity alarm triggered, but invalidated.  ignoring.  (internal id %d)",  v20);
      int v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityAlarmSubscription::onActivityAlarm(int, CMActivityAlarm *, NSError *)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }
  }

void sub_10103C04C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10103C074(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_10103C108(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10103C11C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v9 = 0LL;
  BOOL v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  char v12 = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4 || *(void *)(v4 + 8) == -1LL)
  {
    if (qword_101934500 != -1) {
      dispatch_once(&qword_101934500, &stru_101895968);
    }
    unint64_t v5 = (os_log_s *)qword_101934508;
    if (os_log_type_enabled((os_log_t)qword_101934508, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning CLDaemonClient got activity alarm callback after destruction... ignoring",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934500 != -1) {
        dispatch_once(&qword_101934500, &stru_101895968);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934508,  0LL,  "#Warning CLDaemonClient got activity alarm callback after destruction... ignoring",  v8,  2);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)_block_invoke",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else
  {
    sub_10103BC84(v3, *(_DWORD *)(a1 + 56), a2);
    *((_BYTE *)v10 + 24) = 1;
  }

  _Block_object_dispose(&v9, 8);
}

void sub_10103C2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_10103C318(id a1)
{
  qword_101934508 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

__n128 sub_10103C344(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101895998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_10103C380(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101895998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_10103C3A4(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_10103C3AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10103C3E8()
{
}

void sub_10103C3F4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10103C478(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_10103C460( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10103C478(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    BOOL v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101895A08);
    }
    uint64_t v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101895A08);
      }
    }

    char v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_10103C65C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10103C678(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_10103C6A4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101895A48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_10103C6E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101895A48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_10103C704(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10103C70C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10103C748()
{
}

void sub_10103C754(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    unint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  int v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  BOOL v10 = v17;
  if (v17)
  {
    uint64_t v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    uint64_t v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_10103C828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_10103C844(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_10103C8BC(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_10103C8A8(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_10103C8BC(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_10103CB3C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_10103CB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_10103CB3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_10103CBB0(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10103CB98(_Unwind_Exception *a1)
{
}

void *sub_10103CBB0(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10103CC08(_Unwind_Exception *exception_object)
{
}

void sub_10103CCC8(id a1)
{
  qword_1019A04B8 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLSwimNotifierSilo");
}

uint64_t sub_10103CD7C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10103EB48;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_1019A04D8 != -1) {
    dispatch_once(&qword_1019A04D8, block);
  }
  return qword_1019A4150;
}

void sub_10103CF1C(id a1)
{
  if (sub_1004F7000())
  {
    uint64_t v1 = sub_1006E2838();
    if (sub_1004588D4(v1))
    {
      uint64_t v2 = sub_1006E2838();
      if (sub_100E0DFC0(v2))
      {
        sub_1004F2598();
        if (sub_1001B9A1C())
        {
          if ((sub_1004F97F4() & 0x40000000) != 0) {
            byte_1019A04C8 = 1;
          }
        }
      }
    }
  }

void sub_10103D0B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t sub_10103D0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_10020DA30(a1 + 168, a2, (uint64_t)a3);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  while (v5 != v6)
  {
    *(_DWORD *)(v5 + 104) -= *(_DWORD *)(v5 + 144);
    v5 += 152LL;
  }

  return result;
}

uint64_t sub_10103D35C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = v8;
  if (v8 == 100)
  {
    sub_1007BD348((uint64_t *)__p, (unsigned __int8 *)v10);
    __int128 v5 = v10[3];
    *(_OWORD *)(a3 + 32) = v10[2];
    *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v5;
    *(_OWORD *)(a3 + 64) = v10[4];
    *(void *)(a3 + 80) = v11;
    __int128 v6 = v10[1];
    *(_OWORD *)a3 = v10[0];
    *(_OWORD *)(a3 + 16) = v6;
    uint64_t v4 = v8;
  }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v4;
}

void sub_10103D40C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10103D4A4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10103E054(a1, "CLSwimNotifier", a2);
  *(void *)uint64_t v3 = off_101895B10;
  *(void *)(v3 + 112) = 0LL;
  *(_BYTE *)(v3 + 120) = 0;
  uint64_t v4 = (BOOL *)(v3 + 120);
  *(_OWORD *)(v3 + 12_Block_object_dispose(va, 8) = 0u;
  __int128 v5 = (void **)(v3 + 128);
  *(_OWORD *)(v3 + 144) = 0u;
  *(void *)(v3 + 160) = 0LL;
  sub_10020B018(v3 + 168);
  *(_OWORD *)(a1 + 236_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(void *)(a1 + 2392) = 0LL;
  *(void *)(a1 + 240_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 2400) = 0LL;
  *(void *)(a1 + 2413) = 0LL;
  *(void *)(a1 + 2424) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 2432) =  objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:forClient:",  @"CLMotionStateMediator",  @"CLSwimNotifier");
  sub_100468458((uint64_t)sub_10103E0F0, a1, *(void **)(a1 + 32), buf);
  uint64_t v6 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v7 = *(void *)(a1 + 2392);
  *(void *)(a1 + 2392) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    uint64_t v8 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  [*(id *)(*(void *)(a1 + 2392) + 16) register:*(void *)(*(void *)(a1 + 2392) + 8) forNotification:2 registrationInfo:0];
  sub_1005C4E40((uint64_t)sub_10103E2C8, a1, *(void **)(a1 + 32), buf);
  uint64_t v9 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v10 = *(void *)(a1 + 2400);
  *(void *)(a1 + 2400) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    uint64_t v11 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
  }

  [*(id *)(*(void *)(a1 + 2400) + 16) register:*(void *)(*(void *)(a1 + 2400) + 8) forNotification:0 registrationInfo:0];
  sub_100E18F18((uint64_t)sub_10103E4A0, a1, *(void **)(a1 + 32), buf);
  uint64_t v12 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v13 = *(void *)(a1 + 2408);
  *(void *)(a1 + 240_Block_object_dispose(va, 8) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    uint64_t v14 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
  }

  [*(id *)(*(void *)(a1 + 2408) + 16) register:*(void *)(*(void *)(a1 + 2408) + 8) forNotification:2 registrationInfo:0];
  double v67 = 3600.0;
  uint64_t v15 = sub_1006E27E8();
  sub_100413284(v15, buf);
  sub_1002A82BC(*(uint64_t *)buf, "SwimAggregateTimerInterval", &v67);
  float v16 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v66 = 0x4122750000000000LL;
  uint64_t v19 = sub_1006E27E8();
  sub_100413284(v19, buf);
  sub_1002A82BC(*(uint64_t *)buf, "SwimAggregateTimerExpiration", &v66);
  unint64_t v20 = v70;
  if (v70)
  {
    size_t v21 = (unint64_t *)&v70->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  [*(id *)(a1 + 2424) setNextFireDelay:v67 interval:v67];
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472LL;
  v65[2] = sub_10103E698;
  v65[3] = &unk_101830538;
  v65[4] = a1;
  v65[5] = v66;
  [*(id *)(a1 + 2424) setHandler:v65];
  sub_10027EB5C((uint64_t)sub_10103E724, a1, *(void **)(a1 + 32), buf);
  uint64_t v23 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v24 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v23;
  if (v24)
  {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    uint64_t v25 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    }
  }

  uint64_t v26 = sub_1006E27E8();
  sub_100413284(v26, buf);
  sub_1002A6F64(*(uint64_t *)buf, "SwimDistributionsByLOI", v4);
  __int16 v27 = v70;
  if (v70)
  {
    int v28 = (unint64_t *)&v70->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101895CB0);
  }
  int v30 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v31 = *v4;
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "SwimDistributionsByLOI set to %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    BOOL v59 = *v4;
    v68[0] = 67109120;
    v68[1] = v59;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  0LL,  "SwimDistributionsByLOI set to %d",  v68);
    uint64_t v61 = (uint8_t *)v60;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLSwimNotifier::CLSwimNotifier(id<CLIntersiloUniverse>)", "%s\n", v60);
    if (v61 != buf) {
      free(v61);
    }
  }

  if (*v4)
  {
    int v32 = operator new(0xC0uLL);
    sub_100AEB404(v32, "MotionCalibration", *(void *)(a1 + 32));
    uint64_t v33 = *v5;
    os_log_s *v5 = v32;
    if (v33)
    {
      (*(void (**)(void *))(*(void *)v33 + 8LL))(v33);
      int v32 = *v5;
    }

    sub_100AEB408((uint64_t)v32, (uint64_t)sub_10103E8FC, a1, *(void **)(a1 + 32), buf);
    uint64_t v34 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    uint64_t v35 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
      uint64_t v36 = *(void *)buf;
      *(void *)std::stringbuf::string_type buf = 0LL;
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8LL))(v36);
      }
    }

    *(void *)(a1 + 152) = objc_alloc_init(&OBJC_CLASS___CLSwimNotifierIntersiloDelegate);
    id v37 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLRoutineMonitor");
    *(void *)(a1 + 144) = v37;
    [v37 registerDelegate:*(void *)(a1 + 152) inSilo:*(void *)(a1 + 40)];
    [*(id *)(a1 + 144) setDelegateEntityName:"CLSwimNotifier"];
  }

  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101895CB0);
  }
  int v38 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "Swim Notifier instantiated", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    LOWORD(v68[0]) = 0;
    LODWORD(v64) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "Swim Notifier instantiated",  v68,  v64);
    uint64_t v63 = (uint8_t *)v62;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLSwimNotifier::CLSwimNotifier(id<CLIntersiloUniverse>)", "%s\n", v62);
    if (v63 != buf) {
      free(v63);
    }
  }

  HIWORD(v64) = 0;
  uint64_t v39 = sub_1006E27E8();
  sub_100413284(v39, buf);
  sub_1002A6F64(*(uint64_t *)buf, "LogMotionStateReplay", (BOOL *)&v64 + 7);
  int v40 = v70;
  if (v70)
  {
    __int16 v41 = (unint64_t *)&v70->__shared_owners_;
    do
      unint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  uint64_t v43 = sub_1006E27E8();
  sub_100413284(v43, buf);
  sub_1002A6F64(*(uint64_t *)buf, "LogSwimming", (BOOL *)&v64 + 6);
  __int128 v44 = v70;
  if (v70)
  {
    __int128 v45 = (unint64_t *)&v70->__shared_owners_;
    do
      unint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  if (HIBYTE(v64))
  {
    *(_WORD *)(a1 + 241_Block_object_dispose(va, 8) = 256;
    if (BYTE6(v64))
    {
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      __int128 v47 = (os_log_s *)qword_1019344E8;
      if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "LogMotionStateReplay and LogSwimming are both set - LogMotionStateReplay takes precedence in the Swim Notifier",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_101895CB0);
        }
        LOWORD(v68[0]) = 0;
        LODWORD(v64) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "LogMotionStateReplay and LogSwimming are both set - LogMotionStateReplay takes precedence in the Swim Notifier",  v68,  v64);
        __int128 v49 = (uint8_t *)v48;
        sub_10029211C("Generic", 1LL, 0, 2LL, "CLSwimNotifier::CLSwimNotifier(id<CLIntersiloUniverse>)", "%s\n", v48);
        if (v49 != buf) {
          free(v49);
        }
      }
    }
  }

  else if (BYTE6(v64))
  {
    *(_WORD *)(a1 + 241_Block_object_dispose(va, 8) = 257;
  }

  uint64_t v50 = sub_1006E27E8();
  sub_100413284(v50, buf);
  sub_1002A6F64(*(uint64_t *)buf, "SimulateSwimming", (BOOL *)(a1 + 2416));
  __int128 v51 = v70;
  if (v70)
  {
    __int128 v52 = (unint64_t *)&v70->__shared_owners_;
    do
      unint64_t v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }

  uint64_t v54 = sub_1006E27E8();
  sub_100413284(v54, buf);
  sub_1002A6F64(*(uint64_t *)buf, "SimulateSwimmingSession", (BOOL *)(a1 + 2417));
  int v55 = v70;
  if (v70)
  {
    __int128 v56 = (unint64_t *)&v70->__shared_owners_;
    do
      unint64_t v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }

  [*(id *)(a1 + 2432) addClient:CLISP_ME_TOKEN prepareSessionEndForSessionType:19];
  return a1;
}

void sub_10103DEE0(_Unwind_Exception *a1)
{
  uint64_t v6 = v1[301];
  v1[301] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = v1[300];
  v1[300] = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = (void **)(v1 + 294);
  uint64_t v9 = *v4;
  *uint64_t v4 = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *v8;
  void *v8 = 0LL;
  if (v10) {
    operator delete(v10);
  }
  sub_10020B09C(v2);
  uint64_t v11 = v1[20];
  v1[20] = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = v1[17];
  v1[17] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = *v3;
  uint64_t *v3 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = v1[14];
  v1[14] = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  sub_10103EAD4((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10103E054(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101895F20;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + sub_1011C52D0(v1 - 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  return a1;
}

void sub_10103E0D4(_Unwind_Exception *exception_object)
{
}

void sub_10103E0F0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895C90);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLSwimNotifier::onMotionStateMediatorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLSwimNotifier::onMotionStateMediatorNotification, event:%{public, location:escape_ only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_101041268(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10103E2A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10103E2C8(uint64_t a1, _DWORD *a2, void *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895C90);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLSwimNotifier::onWatchOrientationSettingsNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLSwimNotifier::onWatchOrientationSettingsNotification, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_101041658(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10103E480( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10103E4A0(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895C90);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLSwimNotifier::onNataliemetryUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    uint64_t v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      size_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLSwimNotifier::onNataliemetryUpdate, event:%{public, location:escape_only}s, thi s:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  if (*a2 == 2)
  {
    uint64_t v9 = *(void *)(a4 + 160);
    if (v9)
    {
      uint64_t v10 = (_OWORD *)(v9 + 165992);
      __int128 v11 = *a3;
      __int128 v12 = a3[1];
      __int128 v13 = a3[2];
      *(_OWORD *)((char *)v10 + 44) = *(__int128 *)((char *)a3 + 44);
      v10[1] = v12;
      v10[2] = v13;
      _OWORD *v10 = v11;
    }
  }

  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10103E67C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10103E698(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = operator new(0x18uLL);
  __int128 v5 = v3 + 3;
  uint64_t v6 = (char *)(v3 + 3);
  void *v3 = v2;
  v3[1] = 0x7FEFFFFFFFFFFFFFLL;
  *((_BYTE *)v3 + 16) = 0;
  std::stringbuf::string_type __p = v3;
  sub_10020EBD0(v1 + 168, &__p);
  if (__p)
  {
    __int128 v5 = __p;
    operator delete(__p);
  }

void sub_10103E708( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10103E724(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895C90);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLSwimNotifier::onOdometerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLSwimNotifier::onOdometerNotification, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1010416B4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10103E8DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10103E8FC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895C90);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLSwimNotifier::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLSwimNotifier::onLocationNotification, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1010419E8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10103EAB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10103EAD4(uint64_t a1)
{
  *(void *)a1 = off_101895F20;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_10103EB48(uint64_t a1)
{
  uint64_t v2 = operator new(0x988uLL);
  uint64_t result = sub_10103D4A4((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A4150 = (uint64_t)v2;
  return result;
}

void sub_10103EB80(_Unwind_Exception *a1)
{
}

uint64_t sub_10103EB94(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10103EC08;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_1019A04E8 != -1) {
    dispatch_once(&qword_1019A04E8, block);
  }
  return byte_1019A04E0;
}

id sub_10103EC08(uint64_t a1)
{
  id result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", @"CLSwimNotifier");
  byte_1019A04E0 = (char)result;
  return result;
}

uint64_t sub_10103EC34(uint64_t a1)
{
  *(void *)a1 = off_101895B10;

  *(void *)(a1 + 2424) = 0LL;
  [*(id *)(a1 + 2432) removeClient:CLISP_ME_TOKEN prepareSessionEndForSessionType:19];

  *(void *)(a1 + 2432) = 0LL;
  (*(void (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  uint64_t v2 = *(void *)(a1 + 2408);
  *(void *)(a1 + 240_Block_object_dispose(va, 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 2400);
  *(void *)(a1 + 2400) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2392);
  *(void *)(a1 + 2392) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  __int128 v5 = *(void **)(a1 + 2352);
  *(void *)(a1 + 2352) = 0LL;
  if (v5) {
    operator delete(v5);
  }
  sub_10020B09C(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  return sub_10103EAD4(a1);
}

void sub_10103ED68(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10103EC34(a1);
  operator delete(v1);
}

void sub_10103ED7C(uint64_t a1)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101895CB0);
  }
  uint64_t v2 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSwimNotifier is shutting down.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "CLSwimNotifier is shutting down.",  v10,  2);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLSwimNotifier::shutdown()", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  sub_10103EFAC(a1);
  uint64_t v3 = *(void *)(a1 + 2392);
  *(void *)(a1 + 2392) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2400);
  *(void *)(a1 + 2400) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 2408);
  *(void *)(a1 + 240_Block_object_dispose(va, 8) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }

  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 1;
}

void sub_10103EFAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2392);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:5];
  }
  if (*(_BYTE *)(a1 + 2420))
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v3 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "[SwimOdom] Unregistering for odometer updates",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      v14[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "[SwimOdom] Unregistering for odometer updates",  v14,  2);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimNotifier::turnOffSwimTrackingIfNecessary()", "%s\n", v7);
      if (v8 != buf) {
        free(v8);
      }
    }

    [*(id *)(*(void *)(a1 + 112) + 16) unregister:*(void *)(*(void *)(a1 + 112) + 8) forNotification:2];
    [*(id *)(*(void *)(a1 + 112) + 16) unregister:*(void *)(*(void *)(a1 + 112) + 8) forNotification:4];
    *(_BYTE *)(a1 + 2420) = 0;
  }

  if (*(void *)(a1 + 136))
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v4 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "[LOI] Unregistering for location updates",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "[LOI] Unregistering for location updates",  v14,  v13);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimNotifier::turnOffSwimTrackingIfNecessary()", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0];
  }

  if (*(void *)(a1 + 160))
  {
    sub_101040720((void *)a1);
    uint64_t v5 = *(void *)(a1 + 160);
    *(void *)(a1 + 160) = 0LL;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v6 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Swim Controller released", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "Swim Controller released",  v14,  v13);
      __int128 v12 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimNotifier::turnOffSwimTrackingIfNecessary()", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

void *sub_10103F40C@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_10103F484(uint64_t a1, int *a2)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101895CB0);
  }
  uint64_t v4 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
  {
    v14[0] = *a2;
    int v5 = v14[0];
    int v6 = sub_100247620(a1, v14, 1LL);
    *(_DWORD *)std::stringbuf::string_type buf = 67109376;
    int v18 = v5;
    __int16 v19 = 1024;
    int v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Added client for %d, count %d", buf, 0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v8 = qword_1019344E8;
    int v9 = *a2;
    int v13 = v9;
    int v10 = sub_100247620(a1, &v13, 1LL);
    v14[0] = 67109376;
    v14[1] = v9;
    __int16 v15 = 1024;
    int v16 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  1LL,  "Added client for %d, count %d",  v14,  14);
    __int128 v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSwimNotifier::registerForNotificationInternal(const CLSwimNotifier_Type::Notification &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  return 1LL;
}

id sub_10103F688(uint64_t a1, uint64_t a2)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101895CB0);
  }
  uint64_t v4 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "[LOI] Calling fetchLocationsOfInterestWithinDistance",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "[LOI] Calling fetchLocationsOfInterestWithinDistance",  v10,  2);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimNotifier::getLOIsForLocation(CLLocation *)", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  int v5 = *(void **)(a1 + 144);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10103F864;
  void v9[3] = &unk_101838AD8;
  _DWORD v9[4] = a1;
  return [v5 fetchLocationsOfInterestWithinDistance:a2 ofLocation:v9 withReply:200.0];
}

id sub_10103F864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10103F8C0;
  v6[3] = &unk_101895BE8;
  v6[5] = a2;
  v6[6] = v3;
  _DWORD v6[4] = a3;
  return [v4 async:v6];
}

void sub_10103F8C0(void *a1)
{
  if (a1[4])
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v2 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = a1[4];
      *(_DWORD *)std::stringbuf::string_type buf = 138412290;
      uint64_t v26 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Error retrieving the RT LOIs. %@", buf, 0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      uint64_t v4 = a1[4];
      int v23 = 138412290;
      uint64_t v24 = v4;
      double v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  16LL,  "Error retrieving the RT LOIs. %@",  &v23,  12);
      uint64_t v7 = v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLSwimNotifier::getLOIsForLocation(CLLocation *)_block_invoke",  "%s\n",  v5);
LABEL_10:
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else if (a1[5])
  {
    uint64_t v8 = a1[6];
    id v9 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    int v10 = (void *)a1[5];
    id v11 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v19;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v13) {
            objc_enumerationMutation(v10);
          }
          objc_msgSend(v9, "addObject:", objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * (void)i), "identifier"));
        }

        id v12 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }

      while (v12);
    }

    sub_10020CD2C(v8 + 168, v9);
  }

  else
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    __int16 v15 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[LOI] Found nil locationsOfInterest",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      LOWORD(v23) = 0;
      double v16 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  0LL,  "[LOI] Found nil locationsOfInterest",  &v23,  2);
      uint64_t v7 = v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimNotifier::getLOIsForLocation(CLLocation *)_block_invoke",  "%s\n",  v16);
      goto LABEL_10;
    }
  }

_BYTE *sub_10103FC5C(_BYTE *result)
{
  if (result[120])
  {
    uint64_t v1 = result;
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v2 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "[LOI] Registering for location updates",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "[LOI] Registering for location updates",  v5,  2);
      uint64_t v4 = (uint8_t *)v3;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimNotifier::requestLocation()", "%s\n", v3);
      if (v4 != buf) {
        free(v4);
      }
    }

    return [*(id *)(*((void *)v1 + 17) + 16) register:*(void *)(*((void *)v1 + 17) + 8) forNotification:0 registrationInfo:0];
  }

  return result;
}

void sub_10103FE08(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 160))
  {
    if (*(_BYTE *)(a1 + 2416))
    {
      uint64_t v4 = operator new(0x288F0uLL);
      sub_10083F3E8((uint64_t)v4, a1 + 168);
    }

    else if (*(_BYTE *)(a1 + 2417))
    {
      if (a2 == 1)
      {
        uint64_t v4 = operator new(0x28918uLL);
        sub_100F59C60((uint64_t)v4, a1 + 168);
      }

      else
      {
        uint64_t v4 = operator new(0x28910uLL);
        sub_1007C5178((uint64_t)v4, a1 + 168);
      }
    }

    else
    {
      uint64_t v4 = operator new(0x288C0uLL);
      sub_1006AACD8((uint64_t)v4, a1 + 168);
    }

    uint64_t v5 = *(void *)(a1 + 160);
    *(void *)(a1 + 160) = v4;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    sub_100DAD6A8(*(void *)(a1 + 160) + 114712LL, (void *)(a1 + 2384));
    sub_101040248(a1);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    int v6 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "SwimController is ready", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      v14[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "SwimController is ready",  v14,  2);
      id v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimNotifier::turnOnSwimTrackingIfNecessary(CMSwimWorkoutLocation)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  uint64_t v7 = *(void *)(a1 + 2392);
  if (v7) {
    [*(id *)(v7 + 16) register:*(void *)(v7 + 8) forNotification:5 registrationInfo:0];
  }
  if (a2 != 1 || *(_BYTE *)(a1 + 2420))
  {
    if (!a2) {
      sub_10103FC5C((_BYTE *)a1);
    }
  }

  else
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v8 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "[SwimOdom] Registering for odometer updates",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "[SwimOdom] Registering for odometer updates",  v14,  v13);
      int v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimNotifier::turnOnSwimTrackingIfNecessary(CMSwimWorkoutLocation)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    [*(id *)(*(void *)(a1 + 112) + 16) register:*(void *)(*(void *)(a1 + 112) + 8) forNotification:2 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 112) + 16) register:*(void *)(*(void *)(a1 + 112) + 8) forNotification:4 registrationInfo:0];
    *(_BYTE *)(a1 + 2420) = 1;
  }

void sub_101040220(_Unwind_Exception *a1)
{
}

void sub_101040248(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2352);
  if (!v2)
  {
    uint64_t v2 = operator new(0x640uLL);
    sub_100E61B08((uint64_t)v2);
    uint64_t v3 = *(void **)(a1 + 2352);
    *(void *)(a1 + 2352) = v2;
    if (v3)
    {
      operator delete(v3);
      uint64_t v2 = *(void **)(a1 + 2352);
    }
  }

  sub_10104094C(a1, (uint64_t)buf);
  sub_100E61D24((uint64_t)v2, (uint64_t)buf);
  if (!*(void *)(a1 + 2360))
  {
    uint64_t v4 = operator new(0x38uLL);
    sub_101043F90(v4, *(void **)(a1 + 40), (uint64_t)sub_101040A6C, a1, 0LL);
    *(void *)(a1 + 2360) = v4;
    uint64_t v5 = sub_1006FE6A0();
    sub_1006DCB40(v5, 0, *(void *)(a1 + 2360), 0.00999999978);
  }

  if (!*(void *)(a1 + 2368))
  {
    int v6 = operator new(0x38uLL);
    sub_101212E7C(v6, *(void **)(a1 + 40), (uint64_t)sub_101040A7C, a1, 0LL);
    *(void *)(a1 + 236_Block_object_dispose(va, 8) = v6;
    uint64_t v7 = sub_1006E5C40();
    sub_1006DCB40(v7, 0, *(void *)(a1 + 2368), 0.00999999978);
  }

  if (!*(void *)(a1 + 2376))
  {
    uint64_t v8 = operator new(0x38uLL);
    sub_100B75FB0(v8, *(void **)(a1 + 40), (uint64_t)sub_101040A8C, a1, 0LL);
    *(void *)(a1 + 2376) = v8;
    uint64_t v9 = sub_1006FE6A0();
    sub_1006DCB40(v9, 1, *(void *)(a1 + 2376), 1.0);
  }

  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101895CB0);
  }
  int v10 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "swim fusion setup", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    v13[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "swim fusion setup",  v13,  2);
    id v12 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimNotifier::setupSensorFusion()", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

void sub_1010404F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10104051C(uint64_t a1, int *a2)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101895CB0);
  }
  uint64_t v4 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
  {
    v14[0] = *a2;
    int v5 = v14[0];
    int v6 = sub_100247620(a1, v14, 1LL);
    *(_DWORD *)std::stringbuf::string_type buf = 67109376;
    int v18 = v5;
    __int16 v19 = 1024;
    int v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Removed client for %d, count %d", buf, 0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v8 = qword_1019344E8;
    int v9 = *a2;
    int v13 = v9;
    int v10 = sub_100247620(a1, &v13, 1LL);
    v14[0] = 67109376;
    v14[1] = v9;
    __int16 v15 = 1024;
    int v16 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  1LL,  "Removed client for %d, count %d",  v14,  14);
    id v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSwimNotifier::unregisterForNotificationInternal(const CLSwimNotifier_Type::Notification &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  return 1LL;
}

void sub_101040720(void *a1)
{
  if (a1[295])
  {
    uint64_t v2 = sub_1006FE6A0();
    sub_1006DD2A0(v2, 0, a1[295]);
    uint64_t v3 = a1[295];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    a1[295] = 0LL;
  }

  if (a1[296])
  {
    uint64_t v4 = sub_1006E5C40();
    sub_1006DD2A0(v4, 0, a1[296]);
    uint64_t v5 = a1[296];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    a1[296] = 0LL;
  }

  if (a1[297])
  {
    uint64_t v6 = sub_1006FE6A0();
    sub_1006DD2A0(v6, 1, a1[297]);
    uint64_t v7 = a1[297];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    a1[297] = 0LL;
  }

  uint64_t v8 = (void *)a1[294];
  a1[294] = 0LL;
  if (v8) {
    operator delete(v8);
  }
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_101895CB0);
  }
  int v9 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "swim fusion teardown", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    v12[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "swim fusion teardown",  v12,  2);
    id v11 = (uint8_t *)v10;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimNotifier::teardownSensorFusion()", "%s\n", v10);
    if (v11 != buf) {
      free(v11);
    }
  }

void sub_10104094C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0LL;
  if (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:",  @"CLGyroCalibrationDatabase"),  "syncgetBiasFit:",  &v5)) {
    BOOL v3 = v5 == 1;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    if ((CFAbsoluteTimeGetCurrent() - v6) / 3600.0 > 0.0 && (CFAbsoluteTimeGetCurrent() - v6) / 3600.0 >= 255.0)
    {
      LOBYTE(v4) = -1;
    }

    else if ((CFAbsoluteTimeGetCurrent() - v6) / 3600.0 <= 0.0)
    {
      LOBYTE(v4) = 0;
    }

    else
    {
      int v4 = (int)((CFAbsoluteTimeGetCurrent() - v6) / 3600.0);
    }

    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
    *(_BYTE *)(a2 + 24) = v4;
  }

uint64_t sub_101040A6C(uint64_t a1, uint64_t a2)
{
  return sub_101040BA8(a2, a1);
}

float32x2_t *sub_101040A7C(uint64_t a1, uint64_t a2)
{
  return sub_1010410A8(a2, a1);
}

void *sub_101040A8C(uint64_t a1, uint64_t a2)
{
  return sub_101041248(a2, a1);
}

uint64_t sub_101040A9C(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[20];
  if (!v3) {
    sub_10128139C();
  }
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  uint64_t result = sub_1006AB084(v3, a2, (uint64_t)&v6);
  if ((result & 1) != 0)
  {
    _DWORD v14[4] = v10;
    v14[5] = v11;
    uint64_t v15 = *(void *)&v12[0];
    v14[0] = v6;
    v14[1] = v7;
    int v14[2] = v8;
    void v14[3] = v9;
    __int128 v18 = *(_OWORD *)((char *)&v12[1] + 12);
    __int128 v17 = *(_OWORD *)((char *)v12 + 12);
    uint64_t v20 = v13;
    int v19 = HIDWORD(v12[2]);
    int v16 = DWORD2(v12[0]) - v13;
    int v5 = 0;
    return (*(uint64_t (**)(void *, int *, _OWORD *, void, uint64_t, void))(*a1 + 152LL))( a1,  &v5,  v14,  0LL,  0xFFFFFFFFLL,  0LL);
  }

  return result;
}

uint64_t sub_101040BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 2352);
  if (v3)
  {
    uint64_t result = sub_100E61B0C(v3, (float32x2_t *)(a2 + 8), (double *)a2);
    if ((_DWORD)result)
    {
      uint64_t v6 = *(void *)(a1 + 2352);
      int v7 = *(_DWORD *)(v6 + 100);
      uint64_t v15 = *(void *)(v6 + 92);
      int v16 = v7;
      sub_1009581CC(v6);
      int v17 = v8;
      int v18 = v9;
      int v19 = v10;
      float v20 = sub_100833470((float *)(*(void *)(a1 + 2352) + 16LL));
      int v21 = v11;
      int v22 = v12;
      __int128 v23 = *(_OWORD *)(*(void *)(a1 + 2352) + 16LL);
      double v24 = *(double *)a2;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      if (*(_BYTE *)(a1 + 2418)) {
        uint64_t v13 = sub_101040C68((uint64_t *)a2);
      }
      if (*(_BYTE *)(a1 + 2419)) {
        sub_101040DE8(v13, (uint64_t)&v15);
      }
      return sub_101040A9C((void *)a1, (uint64_t)&v15);
    }
  }

  else
  {
    __int16 v14 = (uint64_t *)sub_101281510();
    return sub_101040C68(v14);
  }

  return result;
}

uint64_t sub_101040C68(uint64_t *a1)
{
  int v16 = &off_1018578A8;
  int v20 = *((_DWORD *)a1 + 4);
  uint64_t v2 = a1[1];
  uint64_t v18 = *a1;
  uint64_t v19 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  __int16 v21 = *((_WORD *)a1 + 10);
  char v22 = *((_BYTE *)a1 + 22);
  uint64_t v3 = sub_100E00E14();
  sub_100E022E0(v3, (uint64_t)&v16);
  sub_101125260(v13);
  sub_10113A5E4(v13);
  v15 |= 1u;
  *(CFAbsoluteTime *)&v13[77] = Current;
  uint64_t v4 = v14;
  uint64_t v5 = *a1;
  *(_BYTE *)(v14 + 36) |= 1u;
  *(void *)(v4 + _Block_object_dispose(va, 8) = v5;
  uint64_t v6 = v14;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v14 + 36) |= 4u;
  *(_DWORD *)(v6 + 20) = v5;
  uint64_t v7 = v14;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v14 + 36) |= 8u;
  *(_DWORD *)(v7 + 24) = v5;
  uint64_t v8 = v14;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v14 + 36) |= 0x10u;
  *(_DWORD *)(v8 + 2_Block_object_dispose(va, 8) = v5;
  uint64_t v9 = v14;
  int v10 = *((unsigned __int16 *)a1 + 10);
  *(_BYTE *)(v14 + 36) |= 2u;
  *(_DWORD *)(v9 + 16) = v10;
  uint64_t v11 = v14;
  LOBYTE(v10) = *((_BYTE *)a1 + 22);
  *(_BYTE *)(v14 + 36) |= 0x20u;
  *(_BYTE *)(v11 + 32) = v10;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_101895CD0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v13);
  }
  return sub_101127D00((PB::Base *)v13);
}

void sub_101040DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_101040DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = &off_101857DD0;
  uint64_t v35 = *(void *)(a2 + 56);
  float64x2_t v3 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 44));
  float64x2_t v36 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 36));
  float64x2_t v37 = v3;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *((void *)&v4 + 1) = *(void *)a2;
  __int128 v39 = v4;
  LODWORD(v3.f64[0]) = *(_DWORD *)(a2 + 8);
  int v38 = *(_DWORD *)(a2 + 12);
  int v40 = LODWORD(v3.f64[0]);
  uint64_t v42 = 0LL;
  int v41 = 0;
  int v43 = -16776961;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = sub_100E00E14();
  sub_100E022E0(v5, (uint64_t)&v33);
  sub_101125260(v30);
  sub_10113AB24(v30);
  v32 |= 1u;
  *(CFAbsoluteTime *)&v30[77] = Current;
  uint64_t v6 = v31;
  uint64_t v7 = *(void *)(a2 + 56);
  *(_DWORD *)(v31 + 96) |= 0x10u;
  *(void *)(v6 + 40) = v7;
  uint64_t v8 = v31;
  double v9 = *(float *)(a2 + 36);
  *(_DWORD *)(v31 + 96) |= 2u;
  *(double *)(v8 + 16) = v9;
  uint64_t v10 = v31;
  double v11 = *(float *)(a2 + 40);
  *(_DWORD *)(v31 + 96) |= 4u;
  *(double *)(v10 + 24) = v11;
  uint64_t v12 = v31;
  double v13 = *(float *)(a2 + 44);
  *(_DWORD *)(v31 + 96) |= 8u;
  *(double *)(v12 + 32) = v13;
  uint64_t v14 = v31;
  double v15 = *(float *)(a2 + 48);
  *(_DWORD *)(v31 + 96) |= 1u;
  *(double *)(v14 + _Block_object_dispose(va, 8) = v15;
  uint64_t v16 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v31 + 96) |= 0x1000u;
  *(_DWORD *)(v16 + 76) = LODWORD(v15);
  uint64_t v17 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v31 + 96) |= 0x2000u;
  *(_DWORD *)(v17 + 80) = LODWORD(v15);
  uint64_t v18 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v31 + 96) |= 0x4000u;
  *(_DWORD *)(v18 + 84) = LODWORD(v15);
  uint64_t v19 = v31;
  LODWORD(v15) = *(_DWORD *)a2;
  *(_DWORD *)(v31 + 96) |= 0x200u;
  *(_DWORD *)(v19 + 64) = LODWORD(v15);
  uint64_t v20 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v31 + 96) |= 0x400u;
  *(_DWORD *)(v20 + 6_Block_object_dispose(va, 8) = LODWORD(v15);
  uint64_t v21 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v31 + 96) |= 0x800u;
  *(_DWORD *)(v21 + 72) = LODWORD(v15);
  uint64_t v22 = v31;
  *(_DWORD *)(v31 + 96) |= 0x40u;
  *(_DWORD *)(v22 + 52) = 0;
  uint64_t v23 = v31;
  *(_DWORD *)(v31 + 96) |= 0x80u;
  *(_DWORD *)(v23 + sub_1011C52D0(v1 - 56) = 0;
  uint64_t v24 = v31;
  *(_DWORD *)(v31 + 96) |= 0x100u;
  *(_DWORD *)(v24 + 60) = 0;
  uint64_t v25 = v31;
  *(_DWORD *)(v31 + 96) |= 0x20u;
  *(_DWORD *)(v25 + 4_Block_object_dispose(va, 8) = 255;
  uint64_t v26 = v31;
  *(_DWORD *)(v31 + 96) |= 0x10000u;
  *(_BYTE *)(v26 + 92) = 0;
  uint64_t v27 = v31;
  *(_DWORD *)(v31 + 96) |= 0x20000u;
  *(_BYTE *)(v27 + 93) = 0;
  uint64_t v28 = v31;
  *(_DWORD *)(v31 + 96) |= 0x8000u;
  *(_DWORD *)(v28 + 8_Block_object_dispose(va, 8) = 255;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_101895CD0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v30);
  }
  return sub_101127D00((PB::Base *)v30);
}

void sub_101041090( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float32x2_t *sub_1010410A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 2352);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 2418))
    {
      sub_1010410F0((uint64_t *)a2);
      uint64_t v3 = *(void *)(a1 + 2352);
    }

    return sub_100E61C40(v3, (float32x2_t *)(a2 + 8), (double *)a2);
  }

  else
  {
    uint64_t v6 = (uint64_t *)sub_101281684();
    return (float32x2_t *)sub_1010410F0(v6);
  }

uint64_t sub_1010410F0(uint64_t *a1)
{
  uint64_t v14 = &off_101858658;
  int v18 = *((_DWORD *)a1 + 4);
  uint64_t v2 = a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_100E00E14();
  sub_100E022E0(v3, (uint64_t)&v14);
  sub_101125260(v10);
  sub_10113A53C(v10);
  v13 |= 1u;
  CFAbsoluteTime v12 = Current;
  sub_1010E0B98(v11);
  uint64_t v4 = *((void *)v11 + 1);
  uint64_t v5 = *a1;
  *(_BYTE *)(v4 + 32) |= 1u;
  *(void *)(v4 + _Block_object_dispose(va, 8) = v5;
  uint64_t v6 = *((void *)v11 + 1);
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v6 + 32) |= 4u;
  *(_DWORD *)(v6 + 20) = v5;
  uint64_t v7 = *((void *)v11 + 1);
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v7 + 32) |= 8u;
  *(_DWORD *)(v7 + 24) = v5;
  uint64_t v8 = *((void *)v11 + 1);
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v8 + 32) |= 0x10u;
  *(_DWORD *)(v8 + 2_Block_object_dispose(va, 8) = v5;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_101895CD0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v10);
  }
  return sub_101127D00((PB::Base *)v10);
}

void sub_101041230(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_101041248(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 2352);
  if (v2) {
    return sub_100E61CF0(v2, *(float *)(a2 + 8));
  }
  uint64_t v4 = sub_1012817F8();
  return (void *)sub_101041268(v4);
}

void sub_101041268(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 5)
  {
    uint64_t v12 = *(void *)(a1 + 160);
    if (v12) {
      sub_1006AAE60(v12, a4);
    }
  }

  else if (*a3 == 2)
  {
    uint64_t v6 = *(void *)(a4 + 112);
    if (v6 == 19 && *(void *)(a4 + 16) == 1LL)
    {
      sub_101041528(a1, *(double *)(a4 + 8));
      uint64_t v6 = *(void *)(a4 + 112);
    }

    if (v6 == 19) {
      sub_10103FE08(a1, *(void *)(a4 + 128));
    }
    uint64_t v8 = *(void *)(a1 + 160);
    if (v8)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      if (sub_1006ACEAC(v8, a4, (uint64_t)buf, Current))
      {
        uint64_t v10 = *(void *)(a1 + 2352);
        unsigned int v20 = vcvtas_u32_f32(*(float *)(v10 + 552));
        uint64_t v11 = sub_100957938((uint64_t)v21);
        *(_OWORD *)(v10 + 52_Block_object_dispose(va, 8) = *(_OWORD *)v21;
        *(_OWORD *)(v10 + 540) = *(_OWORD *)&v21[12];
        *(void *)uint64_t v21 = &off_1018676C8;
        sub_100A18A4C(v11, (uint64_t *)buf);
      }
    }

    if (!sub_10020EBD8(a1 + 168)) {
      sub_10103EFAC(a1);
    }
  }

  else
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v14 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
    {
      int v15 = *a3;
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Unexpected CLMotionStateMediator notification type %d received in CLSwimNotifier",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      int v16 = *a3;
      *(_DWORD *)uint64_t v21 = 67109120;
      *(_DWORD *)&v21[4] = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "Unexpected CLMotionStateMediator notification type %d received in CLSwimNotifier",  v21);
      int v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLSwimNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, co nst CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

uint64_t sub_101041528(uint64_t result, double a2)
{
  uint64_t v2 = *(void *)(result + 160);
  if (v2)
  {
    uint64_t v4 = result;
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1006ACFB8((uint64_t *)v2, 1, *(double *)(v2 + 712), Current, a2);
    uint64_t result = sub_1006AC0F4(v2, (uint64_t)v7);
    if ((_DWORD)result)
    {
      void v14[3] = v7[3];
      _DWORD v14[4] = v7[4];
      v14[5] = v7[5];
      v14[0] = v7[0];
      uint64_t v15 = v8;
      v14[1] = v7[1];
      int v14[2] = v7[2];
      __int128 v18 = v11;
      __int128 v17 = v10;
      uint64_t v20 = v13;
      int v19 = v12;
      int v16 = v9 - v13;
      int v6 = 0;
      return (*(uint64_t (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)v4 + 152LL))( v4,  &v6,  v14,  0LL,  0xFFFFFFFFLL,  0LL);
    }
  }

  return result;
}

void sub_101041658(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  if (*a3)
  {
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 160);
    if (v6) {
      sub_100DAD6A8(v6 + 114712, a4);
    }
    *(void *)(a1 + 2384) = *a4;
  }

void sub_1010416B4(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  if (*a3 == 4 || *a3 == 2)
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v8 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
    {
      int v9 = *a3;
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v22 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[SwimOdom] Received an odometer update of type: %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      int v13 = *a3;
      int v19 = 67109120;
      int v20 = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "[SwimOdom] Received an odometer update of type: %d",  &v19);
      uint64_t v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimNotifier::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometer Notifier_Type::NotificationData &)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    uint64_t v10 = *(void *)(a1 + 160);
    if (v10) {
      sub_1006AC154(v10, a4);
    }
  }

  else
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    __int128 v11 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
    {
      int v12 = *a3;
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v22 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[SwimOdom] Received unhandled notification, %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      int v16 = *a3;
      int v19 = 67109120;
      int v20 = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "[SwimOdom] Received unhandled notification, %d",  &v19);
      __int128 v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimNotifier::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometer Notifier_Type::NotificationData &)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

void sub_1010419E8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3)
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    uint64_t v5 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
    {
      int v6 = *a3;
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)__int128 v44 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received unhandled notification, %d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      int v21 = *a3;
      int v33 = 67109120;
      LODWORD(v34) = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "Received unhandled notification, %d",  &v33);
      uint64_t v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocation Provider_Type::NotificationData &)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }
  }

  else if (*(_BYTE *)(a1 + 120))
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_101895CB0);
    }
    int v9 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289539;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      *(_WORD *)&_BYTE v44[14] = 1040;
      *(_DWORD *)&v44[16] = 156;
      *(_WORD *)__int128 v45 = 2097;
      *(void *)&v45[2] = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:[LOI] Received a location, location:%{private, location:CLClientLocation}.*P}",  buf,  0x22u);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
    }

    uint64_t v10 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a4 + 4);
      uint64_t v12 = *(void *)(a4 + 12);
      uint64_t v13 = *(void *)(a4 + 20);
      uint64_t v14 = *(void *)(a4 + 88);
      uint64_t v15 = *(void *)(a4 + 76);
      *(_DWORD *)std::stringbuf::string_type buf = 134284545;
      *(void *)__int128 v44 = v11;
      *(_WORD *)&v44[8] = 2049;
      *(void *)&v44[10] = v12;
      *(_WORD *)&v44[18] = 2048;
      *(void *)__int128 v45 = v13;
      *(_WORD *)&v45[8] = 2048;
      uint64_t v46 = v14;
      __int16 v47 = 2048;
      uint64_t v48 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[LOI] Received a location,lat: %{private}lf, long: %{private}lf, accuracy: %lf, lifespan: %lf, timestamp: %lf",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101895CB0);
      }
      uint64_t v24 = *(void *)(a4 + 4);
      uint64_t v25 = *(void *)(a4 + 12);
      uint64_t v26 = *(void *)(a4 + 20);
      uint64_t v27 = *(void *)(a4 + 88);
      uint64_t v28 = *(void *)(a4 + 76);
      int v33 = 134284545;
      uint64_t v34 = v24;
      __int16 v35 = 2049;
      uint64_t v36 = v25;
      __int16 v37 = 2048;
      uint64_t v38 = v26;
      __int16 v39 = 2048;
      uint64_t v40 = v27;
      __int16 v41 = 2048;
      uint64_t v42 = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "[LOI] Received a location,lat: %{private}lf, long: %{private}lf, accuracy: %lf, lifespan: %lf, timestamp: %lf",  &v33,  52);
      int v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSwimNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocation Provider_Type::NotificationData &)",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    if (CFAbsoluteTimeGetCurrent() < *(double *)(a4 + 76) + 60.0)
    {
      int v16 = objc_alloc(&OBJC_CLASS___CLLocation);
      __int128 v17 = *(_OWORD *)(a4 + 112);
      v31[6] = *(_OWORD *)(a4 + 96);
      v31[7] = v17;
      v32[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)(a4 + 140);
      __int128 v18 = *(_OWORD *)(a4 + 48);
      _OWORD v31[2] = *(_OWORD *)(a4 + 32);
      v31[3] = v18;
      __int128 v19 = *(_OWORD *)(a4 + 80);
      v31[4] = *(_OWORD *)(a4 + 64);
      v31[5] = v19;
      __int128 v20 = *(_OWORD *)(a4 + 16);
      v31[0] = *(_OWORD *)a4;
      v31[1] = v20;
      sub_10103F688( a1,  (uint64_t)-[CLLocation initWithClientLocation:](v16, "initWithClientLocation:", v31));
      [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0];
    }
  }

void sub_101041EA0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLSwimNotifier");
  sub_101041F68((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  void *v8 = off_101895C18;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_101041F3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_101041F68(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1018960C0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_10104203C(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::stringbuf::string_type buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101895C90);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        *(_DWORD *)std::stringbuf::string_type buf = 136446466;
        int v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101895C90);
        }
        uint64_t v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        __int128 v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::removeClien t(int) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::Notifica tionData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_1010422B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_1019930C8);
}

uint64_t sub_1010422C4(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)int v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          unint64_t v29 = (uint64_t *)v25;
        }
        else {
          unint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)&buf[0] = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        uint64_t v47 = 0LL;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          uint64_t v36 = sub_101044EF4((uint64_t)buf);
          sub_1010448C4((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_1019930C9;
        HIDWORD(v40) = v17;
        *(void *)&buf[0] = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)&buf[0] = (char *)&v40 + 4;
        uint64_t v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)&buf[0] = (char *)&v40 + 4;
        int v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)&buf[0] = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101895C90);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    __int16 v37 = (void *)(a1 + 8);
    *(_DWORD *)int v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    __int16 v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::registerForNoti fication(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSwimNotifier_Type::Notificat ion, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    return 0LL;
  }

  return result;
}

BOOL sub_10104273C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101895C90);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::clientRegiste red(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwi mNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1010429BC(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101895C90);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::stringbuf::string_type buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                __int16 v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101895C90);
                }
                unint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  unint64_t v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                int v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::unr egisterForNotification(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notificatio n, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_101042D44(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  __int128 v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v11;
  *(_OWORD *)(a3 + 16) = v12;
  __int128 v13 = *(_OWORD *)(v11 + 32);
  __int128 v14 = *(_OWORD *)(v11 + 48);
  __int128 v15 = *(_OWORD *)(v11 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v11 + 64);
  *(_OWORD *)(a3 + 80) = v15;
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v14;
  __int128 v16 = *(_OWORD *)(v11 + 96);
  __int128 v17 = *(_OWORD *)(v11 + 112);
  __int128 v18 = *(_OWORD *)(v11 + 128);
  *(void *)(a3 + 144) = *(void *)(v11 + 144);
  *(_OWORD *)(a3 + 112) = v17;
  *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = v18;
  *(_OWORD *)(a3 + 96) = v16;
  return 1LL;
}

uint64_t sub_101042DCC(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0xB0uLL);
  __int128 v7 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 120) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 136) = v7;
  *(_OWORD *)(v6 + 152) = *(_OWORD *)(a3 + 128);
  __int128 v8 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + sub_1011C52D0(v1 - 56) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 72) = v8;
  __int128 v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 8_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 104) = v9;
  __int128 v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((void *)v6 + 2) = 0LL;
  *(void *)int v6 = off_101896050;
  *((void *)v6 + 1) = 0LL;
  *((void *)v6 + 21) = *(void *)(a3 + 144);
  *(_OWORD *)(v6 + 40) = v10;
  *(void *)&__int128 v17 = v6 + 24;
  *((void *)&v17 + 1) = v6;
  int v16 = *a2;
  __int128 v18 = &v16;
  uint64_t v11 = sub_10023347C((uint64_t **)(a1 + 56), &v16, (uint64_t)&unk_1012CF090, &v18);
  sub_10005F550((uint64_t)(v11 + 8), &v17);
  __int128 v12 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1))
  {
    __int128 v13 = (unint64_t *)(*((void *)&v17 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  return 1LL;
}

void sub_101042ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_101042EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0LL;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v5,  a3,  a4,  0LL);
}

void sub_101042F68(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    __int128 v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    uint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::stringbuf::string_type buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v71 = 2082;
      uint64_t v72 = v12;
      __int16 v73 = 2050;
      uint64_t v74 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    __int128 v15 = (__n128 *)(a1 + 64);
    unint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    __int128 v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        __int128 v17 = v14;
      }
      unint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)__int16 v75 = &v75[8];
      memset(&v75[8], 0, 24);
      int v76 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v75);
      __int128 v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v74;
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v76;
      if (v76)
      {
        int v25 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v75, *(void **)&v75[8]);
    }

    if (a4)
    {
      __int16 v27 = (char *)operator new(0xB0uLL);
      __int128 v28 = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(v27 + 120) = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(v27 + 136) = v28;
      *(_OWORD *)(v27 + 152) = *(_OWORD *)(a3 + 128);
      __int128 v29 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v27 + sub_1011C52D0(v1 - 56) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v27 + 72) = v29;
      __int128 v30 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v27 + 8_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v27 + 104) = v30;
      __int128 v31 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v27 + 24) = *(_OWORD *)a3;
      *((void *)v27 + 2) = 0LL;
      *(void *)__int16 v27 = off_101896050;
      *((void *)v27 + 1) = 0LL;
      *((void *)v27 + 21) = *(void *)(a3 + 144);
      *(_OWORD *)(v27 + 40) = v31;
      *(void *)std::stringbuf::string_type buf = v27 + 24;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v32 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v33 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    char v35 = sub_101044448(a3);
    if (a5 == -1)
    {
      sub_1010444F0((void *)a1, (int *)a2, v35);
    }

    else
    {
      uint64_t v36 = a1 + 88;
      uint64_t v37 = *(void *)(a1 + 88);
      if (!v37) {
        goto LABEL_48;
      }
      uint64_t v38 = a1 + 88;
      do
      {
        int v39 = *(_DWORD *)(v37 + 32);
        BOOL v40 = v39 < a5;
        if (v39 >= a5) {
          __int16 v41 = (uint64_t *)v37;
        }
        else {
          __int16 v41 = (uint64_t *)(v37 + 8);
        }
        if (!v40) {
          uint64_t v38 = v37;
        }
        uint64_t v37 = *v41;
      }

      while (*v41);
      if (v38 == v36 || *(_DWORD *)(v38 + 32) > a5) {
LABEL_48:
      }
        uint64_t v38 = a1 + 88;
      uint64_t v68 = v38;
      unint64_t v42 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v43 = *a2;
      char v44 = (__n128 *)(a1 + 64);
      do
      {
        int v45 = *(_DWORD *)(v42 + 32);
        BOOL v46 = v45 < v43;
        if (v45 >= v43) {
          uint64_t v47 = (unint64_t *)v42;
        }
        else {
          uint64_t v47 = (unint64_t *)(v42 + 8);
        }
        if (!v46) {
          char v44 = (__n128 *)v42;
        }
        unint64_t v42 = *v47;
      }

      while (*v47);
      if (v44 == v15 || v43 < (signed __int32)v44[2].n128_u32[0])
      {
LABEL_59:
        double v67 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101895C90);
        }
        uint64_t v48 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          __int128 v49 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v75, a1, a2);
          if (v75[23] >= 0) {
            uint64_t v50 = v75;
          }
          else {
            uint64_t v50 = *(_BYTE **)v75;
          }
          *(_DWORD *)std::stringbuf::string_type buf = 136315650;
          *(void *)&uint8_t buf[4] = v49;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v50;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v75[23] & 0x80000000) != 0) {
            operator delete(*(void **)v75);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101895C90);
          }
          __int128 v51 = (void *)(a1 + 8);
          uint64_t v52 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v66 >= 0) {
            unint64_t v53 = __p;
          }
          else {
            unint64_t v53 = (void **)__p[0];
          }
          *(_DWORD *)__int16 v75 = 136315650;
          *(void *)&v75[4] = v51;
          *(_WORD *)&v75[12] = 1024;
          *(_DWORD *)&v75[14] = a5;
          *(_WORD *)&v75[18] = 2080;
          *(void *)&v75[20] = v53;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v52,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v75,
            28,
            v64);
          int v55 = v54;
          if (v66 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::notifyCli entsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLSwimNo tifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v55);
          if (v55 != buf) {
            free(v55);
          }
        }

        goto LABEL_83;
      }

      double v67 = v44;
      if (v38 == v36) {
        goto LABEL_60;
      }
      uint64_t v58 = v44[3].n128_i64[0];
      __int128 v56 = v44 + 3;
      unint64_t v57 = (__n128 *)v58;
      if (!v58) {
        goto LABEL_60;
      }
      int v59 = *(_DWORD *)(v38 + 32);
      uint64_t v60 = v56;
      do
      {
        int v61 = v57[1].n128_i32[3];
        BOOL v62 = v61 < v59;
        if (v61 >= v59) {
          uint64_t v63 = v57;
        }
        else {
          uint64_t v63 = (__n128 *)&v57->n128_i8[8];
        }
        if (!v62) {
          uint64_t v60 = v57;
        }
        unint64_t v57 = (__n128 *)v63->n128_u64[0];
      }

      while (v63->n128_u64[0]);
      sub_1010448C4((_BYTE *)a1, (uint64_t)&v68, (uint64_t)&v67, v35);
    }

void sub_1010435DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101043628(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      uint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101895C90);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      int v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData , NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101895C90);
    }
    __int128 v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::stringbuf::string_type buf = 136315394;
      uint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101895C90);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      int v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      __int128 v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData , NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    __int128 v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      uint64_t v11 = (void *)(a1 + 8);
      do
      {
        __int128 v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101895C90);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::stringbuf::string_type buf = 136315650;
              uint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101895C90);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              int v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::listC lients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type:: NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            __int128 v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                __int128 v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                __int128 v12 = v18;
              }

              while (!v19);
            }

            __int128 v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            __int128 v10 = v26;
          }

          while (!v19);
        }

        __int128 v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_101043BD4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_101044E94(a1);
  operator delete(v1);
}

void sub_101043BE8(uint64_t a1, int a2, void *a3)
{
  if (v5)
  {
    int v6 = a2;
    (*(void (**)(void, int *, uint64_t, void))(a1 + 24))(0LL, &v6, v5, *(void *)(a1 + 32));
  }

void sub_101043C34(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101043C60(id a1)
{
  qword_1019344E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_101043C90(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_101043CC4()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &off_101895D20;
  return result;
}

void sub_101043CE8(uint64_t a1, void *a2)
{
  *a2 = &off_101895D20;
}

double sub_101043D00(uint64_t a1, double **a2)
{
  uint64_t v2 = *a2;
  double result = **a2;
  double v4 = 0.0;
  while (v2 != a2[1])
  {
    double v4 = v4 + v2[2];
    v2 += 3;
  }

  return result;
}

uint64_t sub_101043D2C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_101043D68()
{
}

void *sub_101043D7C()
{
  double result = operator new(0x10uLL);
  *double result = &off_101895DA0;
  return result;
}

void sub_101043DA0(uint64_t a1, void *a2)
{
  *a2 = &off_101895DA0;
}

double sub_101043DB8(uint64_t a1, double **a2)
{
  uint64_t v2 = a2[1];
  double result = **a2;
  double v4 = 0.0;
  if (*a2 != v2)
  {
    uint64_t v5 = *a2;
    do
    {
      double v4 = v4 + v5[2];
      v5 += 3;
    }

    while (v5 != v2);
  }

  return result;
}

uint64_t sub_101043E08(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_101043E44()
{
}

void *sub_101043E58()
{
  double result = operator new(0x10uLL);
  *double result = &off_101895E20;
  return result;
}

void sub_101043E7C(uint64_t a1, void *a2)
{
  *a2 = &off_101895E20;
}

BOOL sub_101043E94(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_101043EA4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_101043EE0()
{
}

void *sub_101043EF4()
{
  double result = operator new(0x10uLL);
  *double result = &off_101895EA0;
  return result;
}

void sub_101043F18(uint64_t a1, void *a2)
{
  *a2 = &off_101895EA0;
}

BOOL sub_101043F30(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_101043F48(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_101043F84()
{
}

void *sub_101043F90(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_101896000;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  int v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1010440C4;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1010440D8;
  _OWORD v12[3] = &unk_10182EFF0;
  _DWORD v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_10104409C(_Unwind_Exception *a1)
{
}

uint64_t sub_1010440C4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1010440D8(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1010440F4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1010443AC(a1);
  operator delete(v1);
}

id sub_101044108(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x18) {
    size_t v8 = 24LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101895CF0);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 136315906;
      unint64_t v33 = 0x80000001013BFF52LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v34 = 2048;
      uint64_t v35 = 24LL;
      __int16 v36 = 2048;
      unint64_t v37 = a4;
      __int16 v38 = 1024;
      int v39 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895CF0);
      }
      int v24 = 136315906;
      unint64_t v25 = 0x80000001013BFF52LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 24LL;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v24,  38,  v17,  LODWORD(v18[0]));
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Sample>::dispatchData(int, const void *, size_t) [T = CLGyro::Sample]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  __int128 v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_101044404;
  v18[3] = &unk_10185F638;
  v18[4] = v12;
  v18[5] = v11;
  __int128 v19 = __dst;
  uint64_t v20 = v23;
  uint64_t v21 = v10;
  return [v13 async:v18];
}

uint64_t sub_1010443AC(uint64_t a1)
{
  *(void *)a1 = off_101896000;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_101044404(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 72));
  }
  return result;
}

CLCppContainer *sub_101044448(uint64_t a1)
{
  uint64_t v2 = operator new(0x98uLL);
  __int128 v3 = *(_OWORD *)(a1 + 112);
  v2[6] = *(_OWORD *)(a1 + 96);
  v2[7] = v3;
  v2[8] = *(_OWORD *)(a1 + 128);
  *((void *)v2 + 1_Block_object_dispose(va, 8) = *(void *)(a1 + 144);
  __int128 v4 = *(_OWORD *)(a1 + 48);
  v2[2] = *(_OWORD *)(a1 + 32);
  v2[3] = v4;
  __int128 v5 = *(_OWORD *)(a1 + 80);
  v2[4] = *(_OWORD *)(a1 + 64);
  v2[5] = v5;
  __int128 v6 = *(_OWORD *)(a1 + 16);
  *uint64_t v2 = *(_OWORD *)a1;
  v2[1] = v6;
  size_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472LL;
  uint64_t v10 = sub_1010449E0;
  uint64_t v11 = &unk_10181D3D0;
  uint64_t v12 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_1010444F0(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    __int128 v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int128 v51 = v9;
        sub_1010449F0(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        unint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          char v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            __int128 v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                __int128 v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v50 = v19;
              sub_1010448C4(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              unint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  unint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int128 v51 = v29;
              uint64_t v34 = v29[6];
              unint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      unint64_t v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      unint64_t v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      unint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      unint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      unint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              uint64_t v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101895C90);
              }
              int v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                unint64_t v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::stringbuf::string_type buf = 136446466;
                unint64_t v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101895C90);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                unint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::invokeClien tsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSwimNotifier_Type::Notificati on, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_1010448C4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    __int128 v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32LL);
    sub_1010449F0(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80LL;
    uint64_t v12 = (uint64_t **)(*(void *)a3 + 40LL);
    char v15 = (int *)(*(void *)a2 + 32LL);
    uint64_t v13 = sub_1004EF3D4(v12, v15, (uint64_t)&unk_1012CF090, &v15);
    uint64_t result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v14,  v10,  v11,  v13 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v14);
    }
  }

  return result;
}

void sub_1010449A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101896050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010449B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101896050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1010449E0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_1010449F0(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0)
  {
    sub_101044A68(a1);
  }

  else
  {
    objc_opt_class(&OBJC_CLASS___CLCppContainer);
    if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0) {
      sub_101044C20(a1);
    }
  }

void sub_101044A68(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_101044DF4((uint64_t)&v7, a1);
    return;
  }

  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101896090);
    }
    uint64_t v3 = qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0LL;
      __int16 v12 = 2080;
      unint64_t v13 = 0x80000001013BFFC0LL & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = (os_log_s *)v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
LABEL_12:
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101896090);
    }
    uint64_t v6 = qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0LL;
      __int16 v12 = 2080;
      unint64_t v13 = 0x80000001013BFFC0LL & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = (os_log_s *)v6;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
      goto LABEL_12;
    }
  }

id sub_101044C20(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101896090);
    }
    uint64_t v3 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x80000001013BFFC0LL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101896090);
    }
    uint64_t v7 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x80000001013BFFC0LL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }

  _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has cha nged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  (uint8_t *)&v8,  0x20u);
  return 0LL;
}

void sub_101044DF4(uint64_t a1, void *a2)
{
  if ([a2 cppObjectPtr]
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D5180))
  {
    goto LABEL_5;
  }

  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)152)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    [a2 cppObjectPtr];
    return;
  }

  uint64_t v3 = (void *)sub_101281B48();
  sub_101044E68(v3);
}

void sub_101044E68(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_101044E94(uint64_t a1)
{
  *(void *)a1 = &off_1018960C0;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_101044EF4(uint64_t a1)
{
  id v2 = operator new(0x98uLL);
  __int128 v3 = *(_OWORD *)(a1 + 112);
  v2[6] = *(_OWORD *)(a1 + 96);
  v2[7] = v3;
  v2[8] = *(_OWORD *)(a1 + 128);
  *((void *)v2 + 1_Block_object_dispose(va, 8) = *(void *)(a1 + 144);
  __int128 v4 = *(_OWORD *)(a1 + 48);
  v2[2] = *(_OWORD *)(a1 + 32);
  v2[3] = v4;
  __int128 v5 = *(_OWORD *)(a1 + 80);
  v2[4] = *(_OWORD *)(a1 + 64);
  v2[5] = v5;
  __int128 v6 = *(_OWORD *)(a1 + 16);
  *id v2 = *(_OWORD *)a1;
  v2[1] = v6;
  int v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472LL;
  __int16 v10 = sub_101044F9C;
  uint64_t v11 = &unk_10181D3D0;
  __int16 v12 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_101044F9C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_101044FAC()
{
  xmmword_1019A0360 = xmmword_1013BBF70;
  *(_OWORD *)algn_1019A0370 = xmmword_1013BBF80;
  xmmword_1019A0380 = xmmword_1013BBF90;
  unk_1019A0390 = xmmword_1013BBFA0;
  xmmword_1019A03A0 = xmmword_1013BBFB0;
  unk_1019A03B0 = xmmword_1013BBFC0;
  xmmword_1019A03C0 = xmmword_1013BBFD0;
  *(_OWORD *)algn_1019A03D0 = xmmword_1013BBFE0;
  xmmword_1019A03E0 = xmmword_1013BBFF0;
  unk_1019A03F0 = xmmword_1013BC000;
  xmmword_1019A0400 = xmmword_1013BC010;
  unk_1019A0410 = xmmword_1013BC020;
  qword_1019A0420 = (uint64_t)&off_101895D20;
  qword_1019A0438 = (uint64_t)&qword_1019A0420;
  __cxa_atexit((void (*)(void *))sub_10027C560, &qword_1019A0420, (void *)&_mh_execute_header);
  qword_1019A0440 = (uint64_t)&off_101895DA0;
  qword_1019A0458 = (uint64_t)&qword_1019A0440;
  __cxa_atexit((void (*)(void *))sub_10027C560, &qword_1019A0440, (void *)&_mh_execute_header);
  qword_1019A0460 = (uint64_t)&off_101895E20;
  qword_1019A0478 = (uint64_t)&qword_1019A0460;
  __cxa_atexit((void (*)(void *))sub_10027C5AC, &qword_1019A0460, (void *)&_mh_execute_header);
  qword_1019A0480 = (uint64_t)&off_101895EA0;
  qword_1019A0498 = (uint64_t)&qword_1019A0480;
  __cxa_atexit((void (*)(void *))sub_10027C5AC, &qword_1019A0480, (void *)&_mh_execute_header);
  sub_1010DDBC0(qword_1019A04A0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A04A0, (void *)&_mh_execute_header);
}

double sub_10104511C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
  if (v2)
  {
    __int128 v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  *(_BYTE *)(a1 + 21) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1013C0114;
  *(_OWORD *)(a1 + 40) = unk_1013C0124;
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = xmmword_1013C0134;
  *(void *)&double result = 1092616192LL;
  *(_OWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(__int128 *)((char *)&xmmword_1013C0134 + 12);
  return result;
}

__n128 sub_101045168(uint64_t a1, uint64_t a2)
{
  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_1018960F8);
  }
  unint64_t v4 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 21)) {
      __int128 v5 = "update";
    }
    else {
      __int128 v5 = "init";
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    char v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "SteadinessClassifier: Received user info (%{public}s)",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_1018960F8);
    }
    if (*(_BYTE *)(a1 + 21)) {
      uint64_t v9 = "update";
    }
    else {
      uint64_t v9 = "init";
    }
    int v12 = 136446210;
    unint64_t v13 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  2LL,  "SteadinessClassifier: Received user info (%{public}s)",  &v12,  12);
    uint64_t v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::WalkingSteadinessClassifier::handleUserInfoUpdate(const CLBodyMetrics &)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  __n128 result = *(__n128 *)a2;
  __int128 v7 = *(_OWORD *)(a2 + 16);
  __int128 v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  *(__n128 *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 21) = 1;
  return result;
}

void sub_101045370( void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, double **a5@<X4>, double **a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  *(_OWORD *)a7 = xmmword_1013C0114;
  *(_OWORD *)(a7 + 16) = unk_1013C0124;
  *(_OWORD *)(a7 + 32) = xmmword_1013C0134;
  *(_OWORD *)(a7 + 44) = *(__int128 *)((char *)&xmmword_1013C0134 + 12);
  *(_WORD *)(a7 + 60) = 0;
  *(_BYTE *)(a7 + 62) = 0;
  *(_OWORD *)(a7 + 144) = 0u;
  unint64_t v13 = (void *)(a7 + 144);
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_WORD *)(a7 + 12_Block_object_dispose(va, 8) = 0;
  *(void *)(a7 + 132) = 0LL;
  *(_BYTE *)(a7 + 140) = 0;
  int64x2_t v14 = vdupq_n_s64(0xFFF0000000000000LL);
  *(int64x2_t *)(a7 + 160) = v14;
  *(int64x2_t *)(a7 + 176) = v14;
  *(_OWORD *)(a7 + 192) = 0u;
  *(_OWORD *)(a7 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a7 + 224) = 0u;
  *(_DWORD *)(a7 + 240) = 0;
  *(int64x2_t *)(a7 + 24_Block_object_dispose(va, 8) = v14;
  char v15 = (double *)(a7 + 248);
  *(void *)(a7 + 264) = 0xFFF0000000000000LL;
  *(int64x2_t *)(a7 + 272) = v14;
  *(int64x2_t *)(a7 + 28_Block_object_dispose(va, 8) = v14;
  *(int64x2_t *)(a7 + 304) = v14;
  *(int64x2_t *)(a7 + 320) = v14;
  *(int64x2_t *)(a7 + 336) = v14;
  *(int64x2_t *)(a7 + 352) = v14;
  *(int64x2_t *)(a7 + 36_Block_object_dispose(va, 8) = v14;
  *(int64x2_t *)(a7 + 384) = v14;
  *(_OWORD *)(a7 + 400) = 0u;
  *(_OWORD *)(a7 + 416) = 0u;
  *(_OWORD *)(a7 + 432) = 0u;
  *(_DWORD *)(a7 + 44_Block_object_dispose(va, 8) = 0;
  *(void *)(a7 + 4sub_1011C52D0(v1 - 56) = 0xFFF0000000000000LL;
  *(int64x2_t *)(a7 + 464) = v14;
  *(int64x2_t *)(a7 + 480) = v14;
  *(int64x2_t *)(a7 + 496) = v14;
  *(int64x2_t *)(a7 + 512) = v14;
  *(void *)(a7 + 52_Block_object_dispose(va, 8) = 0xFFF0000000000000LL;
  *(_OWORD *)(a7 + 536) = 0u;
  *(_OWORD *)(a7 + 552) = 0u;
  *(_OWORD *)(a7 + 56_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(a7 + 584) = 0;
  *(int64x2_t *)(a7 + 592) = v14;
  *(int64x2_t *)(a7 + 60_Block_object_dispose(va, 8) = v14;
  *(_OWORD *)(a7 + 624) = 0u;
  *(_OWORD *)(a7 + 640) = 0u;
  *(_OWORD *)(a7 + 6sub_1011C52D0(v1 - 56) = 0u;
  *(_DWORD *)(a7 + 672) = 0;
  *(void *)(a7 + 680) = 0xFFF0000000000000LL;
  *(int64x2_t *)(a7 + 68_Block_object_dispose(va, 8) = v14;
  *(int64x2_t *)(a7 + 704) = v14;
  *(int64x2_t *)(a7 + 720) = v14;
  *(int64x2_t *)(a7 + 736) = v14;
  *(int64x2_t *)(a7 + 752) = v14;
  *(int64x2_t *)(a7 + 76_Block_object_dispose(va, 8) = v14;
  *(int64x2_t *)(a7 + 784) = v14;
  *(int64x2_t *)(a7 + 800) = v14;
  *(int64x2_t *)(a7 + 816) = v14;
  *(int64x2_t *)(a7 + 832) = v14;
  *(int64x2_t *)(a7 + 84_Block_object_dispose(va, 8) = v14;
  *(int64x2_t *)(a7 + 864) = v14;
  *(int64x2_t *)(a7 + 880) = v14;
  *(int64x2_t *)(a7 + 896) = v14;
  *(void *)(a7 + 912) = 0xFFF0000000000000LL;
  *(_BYTE *)(a7 + 920) = 0;
  *(int64x2_t *)(a7 + 92_Block_object_dispose(va, 8) = v14;
  *(int64x2_t *)(a7 + 944) = v14;
  *(int64x2_t *)(a7 + 960) = v14;
  *(int64x2_t *)(a7 + 976) = v14;
  *(void *)(a7 + 992) = 0xFFF0000000000000LL;
  uint64_t v16 = a7 + 1000;
  *(_WORD *)(a7 + 1000) = 0;
  *(_BYTE *)(a7 + 1002) = 0;
  *(_DWORD *)(a7 + 10sub_1011C52D0(v1 - 56) = 0;
  *(_OWORD *)(a7 + 1040) = 0u;
  *(_DWORD *)(v16 + 31) = 0;
  *(void *)(a7 + 1024) = 0LL;
  *(_OWORD *)(a7 + 100_Block_object_dispose(va, 8) = 0u;
  *(void *)(a7 + 1112) = 0LL;
  *(_OWORD *)(a7 + 1096) = 0u;
  *(void *)(v16 + 85) = 0LL;
  *(void *)(a7 + 1072) = 0LL;
  *(void *)(a7 + 1064) = 0LL;
  *(void *)(a7 + 1080) = 0LL;
  *(double *)(a7 + 72) = a8;
  *(double *)(a7 + 96) = a8;
  *(_BYTE *)(a7 + 129) = a3;
  *(_DWORD *)(a7 + 108_Block_object_dispose(va, 8) = a4;
  __int128 v17 = *(_OWORD *)(a1 + 3);
  __int128 v18 = *(_OWORD *)(a1 + 5);
  __int128 v19 = *(_OWORD *)(a1 + 7);
  *(_OWORD *)(a7 + 44) = *(_OWORD *)((char *)a1 + 68);
  *(_OWORD *)(a7 + 16) = v18;
  *(_OWORD *)(a7 + 32) = v19;
  *(_OWORD *)a7 = v17;
  double v20 = sub_100CFC150(a8);
  *(double *)(a7 + 80) = v20 + -604800.0;
  *(double *)(a7 + 8_Block_object_dispose(va, 8) = v20;
  if (*((_BYTE *)a1 + 21))
  {
    if (*((_BYTE *)a1 + 80) && *((float *)a1 + 11) < 18.0)
    {
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      BOOL v21 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_ERROR))
      {
        double v22 = *((float *)a1 + 11);
        *(_DWORD *)std::stringbuf::string_type buf = 134283521;
        *(double *)&uint8_t buf[4] = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "#warning: Attempted a classification despite invalid user age: %{private}.1f. Exiting.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_1018960F8);
        }
        double v52 = *((float *)a1 + 11);
        int v88 = 134283521;
        double v89 = v52;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  16LL,  "#warning: Attempted a classification despite invalid user age: %{private}.1f. Exiting.",  &v88,  12);
        __int16 v54 = (uint8_t *)v53;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const st d::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vect or<HealthKitQuantitySample> &) const",  "%s\n",  v53);
        if (v54 != buf) {
          free(v54);
        }
      }

      *(_DWORD *)(a7 + 136) |= 8u;
      *(void *)(a7 + 96) = 0LL;
    }

    else
    {
      double v85 = 0LL;
      int v86 = 0LL;
      uint64_t v87 = 0LL;
      if (((*(uint64_t (**)(void, void, void **, double, double))(*(void *)*a1 + 24LL))( *a1,  0LL,  &v85,  v20 + -2592000.0,  v20) & 1) != 0)
      {
        *(_BYTE *)(a7 + 1092) |= sub_10104632C((uint64_t)a1, &v85);
        if (v86 != v85) {
          sub_101048554( (uint64_t)v85,  v86,  126 - 2 * __clz(0x6DB6DB6DB6DB6DB7LL * (((char *)v86 - (_BYTE *)v85) >> 5)),  1);
        }
        unint64_t v82 = 0LL;
        unsigned int v83 = 0LL;
        uint64_t v84 = 0LL;
        if (((*(uint64_t (**)(void, uint64_t, void **, double, double))(*(void *)*a1 + 24LL))( *a1,  1LL,  &v82,  v20 + -2592000.0,  v20) & 1) != 0)
        {
          if (v83 != v82) {
            sub_10104A3AC( (uint64_t)v82,  v83,  126 - 2 * __clz(0x6DB6DB6DB6DB6DB7LL * (((char *)v83 - (_BYTE *)v82) >> 5)),  1);
          }
          *(_BYTE *)(a7 + 1092) |= sub_10104632C((uint64_t)a1, &v82);
          double v23 = *(double *)(a7 + 88);
          int v80 = 0LL;
          uint64_t v81 = 0LL;
          std::stringbuf::string_type __p = 0LL;
          int v24 = sub_10104BBB0(&__p, v82, (uint64_t)v83, 0x6DB6DB6DB6DB6DB7LL * (((char *)v83 - (_BYTE *)v82) >> 5));
          sub_1010468D8(v23, (uint64_t)v24, a7, (uint64_t *)&__p);
          if (__p)
          {
            int v80 = __p;
            operator delete(__p);
          }

          sub_1004C8240((uint64_t)(a1 + 2), (uint64_t *)&v82, (uint64_t)(a1 + 3), (uint64_t *)buf, *(double *)(a7 + 88));
          memcpy(v13, buf, 0x309uLL);
          *(_OWORD *)(a7 + 104) = *(_OWORD *)(a7 + 144);
          double v25 = *(double *)(a7 + 88);
          if (!*(_BYTE *)(a7 + 920))
          {
            *(double *)(a7 + 96) = v25 + 86400.0;
            *(_DWORD *)(a7 + 132) |= 1u;
          }

          *(double *)(a7 + 976) = sub_100FAC134(a5, a6, v15, v25);
          *(void *)(a7 + 984) = v26;
          *(void *)(a7 + 992) = v27;
          *(double *)(a7 + 120) = sub_10070CDF4((double *)(a7 + 976), *(double *)(a7 + 112));
          if (!*((_BYTE *)a1 + 81))
          {
            if (qword_101934480 != -1) {
              dispatch_once(&qword_101934480, &stru_1018960F8);
            }
            int v28 = (os_log_s *)qword_101934488;
            if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::stringbuf::string_type buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "No height set, setting nextClassificationTime to the past for historical compute",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934480 != -1) {
                dispatch_once(&qword_101934480, &stru_1018960F8);
              }
              LOWORD(v8_Block_object_dispose(va, 8) = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "No height set, setting nextClassificationTime to the past for historical compute",  &v88,  2);
              uint64_t v72 = (uint8_t *)v71;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, co nst std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, con st std::vector<HealthKitQuantitySample> &) const",  "%s\n",  v71);
              if (v72 != buf) {
                free(v72);
              }
            }

            *(void *)(a7 + 96) = 0LL;
            *(_DWORD *)(a7 + 132) |= 0x20u;
          }

          double v78 = 0.0;
          if (sub_101046A08(a1, &v78, *(double *)(a7 + 72)))
          {
            *(double *)(a7 + 96) = fmax(*(double *)(a7 + 96), v78);
            *(_DWORD *)(a7 + 132) |= 0x80u;
          }

          __int16 v75 = 0LL;
          int v76 = 0LL;
          uint64_t v77 = 0LL;
          unint64_t v29 = sub_100021A84( &v75,  *(const void **)a2,  *(void *)(a2 + 8),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
          sub_101046C90((uint64_t)v29, a7, (uint64_t *)&v75);
          if (v75)
          {
            int v76 = v75;
            operator delete(v75);
          }

          sub_100B8437C( a5,  a6,  (uint64_t *)v15,  (int *)(a7 + 1096),  (uint64_t)buf,  *(double *)(a7 + 88),  *(double *)(a7 + 120));
          __int128 v30 = *(_OWORD *)&buf[16];
          *(_OWORD *)(a7 + 92_Block_object_dispose(va, 8) = *(_OWORD *)buf;
          *(_OWORD *)(a7 + 944) = v30;
          *(_OWORD *)(a7 + 960) = *(_OWORD *)&buf[32];
          __int128 v31 = *(_OWORD *)(a7 + 944);
          v74[0] = *(_OWORD *)(a7 + 928);
          v74[1] = v31;
          v74[2] = *(_OWORD *)(a7 + 960);
          if (sub_10070CCC0((uint64_t)v74))
          {
            *(_DWORD *)(a7 + 132) |= 0x40u;
            *(double *)(a7 + 96) = *(double *)(a7 + 88) + 604800.0;
            if (qword_101934480 != -1) {
              dispatch_once(&qword_101934480, &stru_1018960F8);
            }
            int v32 = (os_log_s *)qword_101934488;
            if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::stringbuf::string_type buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "SteadinessClassifier: score suppressed.",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934480 != -1) {
                dispatch_once(&qword_101934480, &stru_1018960F8);
              }
              LOWORD(v8_Block_object_dispose(va, 8) = 0;
              LODWORD(v73) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "SteadinessClassifier: score suppressed.",  &v88,  v73);
              uint64_t v70 = (uint8_t *)v69;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, co nst std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, con st std::vector<HealthKitQuantitySample> &) const",  "%s\n",  v69);
              if (v70 != buf) {
                free(v70);
              }
            }
          }

          if (*(void *)(a7 + 132))
          {
            double v33 = *(double *)(a7 + 96);
          }

          else
          {
            *(_BYTE *)(a7 + 12_Block_object_dispose(va, 8) = 1;
            double v33 = *(double *)(a7 + 88) + 604800.0;
            *(double *)(a7 + 96) = v33;
          }

          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_1018960F8);
          }
          int v37 = (os_log_s *)qword_101934488;
          if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v38 = *(void *)(a7 + 80);
            uint64_t v39 = *(void *)(a7 + 88);
            uint64_t v40 = *(void *)(a7 + 112);
            uint64_t v41 = *(void *)(a7 + 120);
            int v42 = *(unsigned __int8 *)(a7 + 128);
            int v44 = *(_DWORD *)(a7 + 132);
            int v43 = *(_DWORD *)(a7 + 136);
            uint64_t v46 = *(void *)(a7 + 96);
            uint64_t v45 = *(void *)(a7 + 104);
            int v47 = *(unsigned __int8 *)(a7 + 140);
            *(_DWORD *)std::stringbuf::string_type buf = 134351361;
            *(void *)&uint8_t buf[4] = v38;
            *(_WORD *)&_BYTE buf[12] = 2050;
            *(void *)&buf[14] = v39;
            *(_WORD *)&buf[22] = 2049;
            *(void *)&_BYTE buf[24] = v45;
            *(_WORD *)&uint8_t buf[32] = 2049;
            *(void *)&_BYTE buf[34] = v40;
            *(_WORD *)&buf[42] = 2049;
            *(void *)&buf[44] = v41;
            *(_WORD *)&buf[52] = 1026;
            *(_DWORD *)&buf[54] = v42;
            *(_WORD *)&buf[58] = 1026;
            *(_DWORD *)&buf[60] = v43;
            *(_WORD *)&_BYTE buf[64] = 1026;
            *(_DWORD *)&buf[66] = v44;
            *(_WORD *)&buf[70] = 2050;
            *(void *)&buf[72] = v46;
            *(_WORD *)&buf[80] = 1026;
            *(_DWORD *)&buf[82] = v47;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "CLMobility::SteadinessResult,hkStartTime,%{public}.2f,hkEndTime,%{public}.2f,rawSteadinessScore,%{private} .2f, unadjustedScore,%{private}.2f,walkingSteadiness,%{private}.2f,writeToHealthKit,%{public}d,errorStatus ,%{public}d,rejectionStatus,%{public}d,nextClassificationTime,%{public}.2f,dataSourcesUnavailable,%{public}d",  buf,  0x56u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934480 != -1) {
              dispatch_once(&qword_101934480, &stru_1018960F8);
            }
            double v57 = *(double *)(a7 + 80);
            uint64_t v58 = *(void *)(a7 + 88);
            uint64_t v59 = *(void *)(a7 + 112);
            uint64_t v60 = *(void *)(a7 + 120);
            int v61 = *(unsigned __int8 *)(a7 + 128);
            int v63 = *(_DWORD *)(a7 + 132);
            int v62 = *(_DWORD *)(a7 + 136);
            uint64_t v65 = *(void *)(a7 + 96);
            uint64_t v64 = *(void *)(a7 + 104);
            int v66 = *(unsigned __int8 *)(a7 + 140);
            int v88 = 134351361;
            double v89 = v57;
            __int16 v90 = 2050;
            uint64_t v91 = v58;
            __int16 v92 = 2049;
            uint64_t v93 = v64;
            __int16 v94 = 2049;
            uint64_t v95 = v59;
            __int16 v96 = 2049;
            uint64_t v97 = v60;
            __int16 v98 = 1026;
            int v99 = v61;
            __int16 v100 = 1026;
            int v101 = v62;
            __int16 v102 = 1026;
            int v103 = v63;
            __int16 v104 = 2050;
            uint64_t v105 = v65;
            __int16 v106 = 1026;
            int v107 = v66;
            LODWORD(v73) = 86;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "CLMobility::SteadinessResult,hkStartTime,%{public}.2f,hkEndTime,%{public}.2f,rawSteadinessScore,%{private} .2f, unadjustedScore,%{private}.2f,walkingSteadiness,%{private}.2f,writeToHealthKit,%{public}d,errorStatus ,%{public}d,rejectionStatus,%{public}d,nextClassificationTime,%{public}.2f,dataSourcesUnavailable,%{public}d",  &v88,  v73);
            uint64_t v68 = (uint8_t *)v67;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, cons t std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const s td::vector<HealthKitQuantitySample> &) const",  "%s\n",  v67);
            if (v68 != buf) {
              free(v68);
            }
          }
        }

        else
        {
          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_1018960F8);
          }
          uint64_t v36 = (os_log_s *)qword_101934488;
          if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934480 != -1) {
              dispatch_once(&qword_101934480, &stru_1018960F8);
            }
            LOWORD(v8_Block_object_dispose(va, 8) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable",  &v88,  2);
            __int128 v56 = (uint8_t *)v55;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, cons t std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const s td::vector<HealthKitQuantitySample> &) const",  "%s\n",  v55);
            if (v56 != buf) {
              free(v56);
            }
          }

          *(_BYTE *)(a7 + 140) = 1;
          *(_DWORD *)(a7 + 136) |= 2u;
        }

        if (v82)
        {
          unsigned int v83 = (__int128 *)v82;
          operator delete(v82);
        }
      }

      else
      {
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_1018960F8);
        }
        uint64_t v35 = (os_log_s *)qword_101934488;
        if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_1018960F8);
          }
          LOWORD(v8_Block_object_dispose(va, 8) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable",  &v88,  2);
          __int128 v51 = (uint8_t *)v50;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std:: vector<HealthKitQuantitySample> &) const",  "%s\n",  v50);
          if (v51 != buf) {
            free(v51);
          }
        }

        *(_BYTE *)(a7 + 140) = 1;
        *(_DWORD *)(a7 + 136) |= 2u;
      }

      if (v85)
      {
        int v86 = (__int128 *)v85;
        operator delete(v85);
      }
    }
  }

  else
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_1018960F8);
    }
    uint64_t v34 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "SteadinessClassifier unable to classify because UserInfo not set",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      LOWORD(v8_Block_object_dispose(va, 8) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  16LL,  "SteadinessClassifier unable to classify because UserInfo not set",  &v88,  2);
      uint64_t v49 = (uint8_t *)v48;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std: :vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<H ealthKitQuantitySample> &) const",  "%s\n",  v48);
      if (v49 != buf) {
        free(v49);
      }
    }

    *(_BYTE *)(a7 + 140) = 1;
    *(_DWORD *)(a7 + 136) |= 1u;
  }

void sub_10104629C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, uint64_t a27, void *a28, uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10104632C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (*a2 == v2)
  {
    uint64_t v53 = 0LL;
    int v52 = 0;
    int v4 = 0;
  }

  else
  {
    int v4 = 0;
    uint64_t v53 = 0LL;
    int v52 = 0;
    __int128 v5 = (_OWORD *)(a1 + 24);
    double v6 = sqrt(*(float *)(a1 + 32) / 1.70000005);
    uint64_t v7 = *a2 + 112LL;
    do
    {
      if (*(_BYTE *)(a1 + 81)) {
        BOOL v8 = *(_BYTE *)(v7 + 100) == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        double v9 = *(double *)v7;
        double v10 = *(double *)(v7 + 16);
        int v11 = *(_DWORD *)(v7 + 80);
        int v12 = *(_DWORD *)(v7 - 60);
        if (v12) {
          int v13 = 42;
        }
        else {
          int v13 = -1;
        }
        int v14 = v13 & v11;
        if (v11 == 32 || v14 == 0)
        {
          double v16 = (v9 + -0.109999999) * v6 + 0.109999999;
          *(double *)uint64_t v7 = v16;
          __int128 v17 = v5[1];
          v58[0] = *v5;
          v58[1] = v17;
          v59[0] = v5[2];
          *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)((char *)v5 + 44);
          else {
            int v18 = 32;
          }
          *(_DWORD *)(v7 + 80) = *(_DWORD *)(v7 + 80) & 0xFFFFFFDF | v18;
          ++v4;
          int v12 = *(_DWORD *)(v7 - 60);
        }

        int v19 = *(_DWORD *)(v7 + 88);
        if (v12) {
          int v20 = 42;
        }
        else {
          int v20 = -1;
        }
        if (v19 == 32 || (v20 & v19) == 0)
        {
          double v21 = (1.0 - v6) * (0.109999999 / (v9 / v10)) + v6 * v10;
          *(double *)(v7 + 16) = v21;
          __int128 v22 = v5[1];
          v56[0] = *v5;
          v56[1] = v22;
          v57[0] = v5[2];
          *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)((char *)v5 + 44);
          else {
            int v23 = 32;
          }
          *(_DWORD *)(v7 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(v7 + 88) & 0xFFFFFFDF | v23;
          LODWORD(v53) = v53 + 1;
        }

        uint64_t v24 = *(void *)(v7 - 40);
        if (((v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 <= 0x3FE
          || (v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
          || v24 == 0x7FF0000000000000LL
          || (v24 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          sub_101046ECC(a1, (double *)(v7 - 40), 0.0101029578, 0.989080385, -0.016843409);
        }

        uint64_t v28 = *(void *)(v7 - 32);
        if (((v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 <= 0x3FE
          || (v28 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
          || v28 == 0x7FF0000000000000LL
          || (v28 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          sub_101046ECC(a1, (double *)(v7 - 32), 0.0156722755, 0.991972931, -0.026228411);
        }

        uint64_t v32 = *(void *)(v7 - 48);
        if (((v32 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 <= 0x3FE
          || (v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
          || v32 == 0x7FF0000000000000LL
          || (v32 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          sub_101046ECC(a1, (double *)(v7 - 48), 0.0612694881, 0.983050659, -0.0937741748);
          ++HIDWORD(v53);
        }
      }

      if (*(_BYTE *)(a1 + 82) && *(_BYTE *)(a1 + 81) && (!*(_BYTE *)(v7 + 108) || !*(_BYTE *)(v7 + 100)))
      {
        int v36 = *(_DWORD *)(v7 + 84);
        int v37 = *(_DWORD *)(v7 - 60) ? 42 : -1;
        if (v36 == 32 || (v37 & v36) == 0)
        {
          double v38 = *(double *)(v7 + 8);
          double v39 = v38 + sub_101047078(*(float *)(a1 + 36), *(float *)(a1 + 32));
          *(double *)(v7 + _Block_object_dispose(va, 8) = v39;
          *(_OWORD *)&v55[12] = *(_OWORD *)((char *)v5 + 44);
          __int128 v40 = v5[2];
          __int128 v41 = *v5;
          v54[1] = v5[1];
          *(_OWORD *)int v55 = v40;
          v54[0] = v41;
          else {
            int v42 = 32;
          }
          *(_DWORD *)(v7 + 84) = *(_DWORD *)(v7 + 84) & 0xFFFFFFDF | v42;
          ++v52;
        }
      }

      uint64_t v43 = v7 + 112;
      v7 += 224LL;
    }

    while (v43 != v2);
  }

  BOOL v46 = v4 <= 0 && (int)v53 <= 0 && v52 <= 0 && SHIDWORD(v53) <= 0;
  uint64_t v47 = !v46;
  if (!v46)
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_1018960F8);
    }
    uint64_t v48 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67240960;
      int v68 = v4;
      __int16 v69 = 1026;
      int v70 = v53;
      __int16 v71 = 1026;
      int v72 = v52;
      __int16 v73 = 1026;
      int v74 = HIDWORD(v53);
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_INFO,  "Applied bout metrics correction (speeds=%{public}d, stepLengths=%{public}d, doubleSupportPercentages=%{public}d, entropyModelStepLengthFeatures=%{public}d)",  buf,  0x1Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      v60[0] = 67240960;
      v60[1] = v4;
      __int16 v61 = 1026;
      int v62 = v53;
      __int16 v63 = 1026;
      int v64 = v52;
      __int16 v65 = 1026;
      int v66 = HIDWORD(v53);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "Applied bout metrics correction (speeds=%{public}d, stepLengths=%{public}d, doubleSupportPercentages=%{public}d, entropyModelStepLengthFeatures=%{public}d)",  v60,  26);
      __int128 v51 = (uint8_t *)v50;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMobility::WalkingSteadinessClassifier::correctBoutMetrics(std::vector<BoutMetrics> &) const",  "%s\n",  v50);
      if (v51 != buf) {
        free(v51);
      }
    }
  }

  return v47;
}

void sub_1010468D8(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)(a3 + 64) = 0LL;
  __int128 v5 = (__int128 *)a4[1];
  if (v5 != (__int128 *)*a4)
  {
    sub_10104C954(*a4, v5, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7LL * (((uint64_t)v5 - *a4) >> 5)), 1);
    double v8 = sub_100CFC150(*(double *)(*a4 + 8));
    uint64_t v9 = a4[1];
    double v10 = *(double *)(v9 - 216);
    if (v8 < v10)
    {
      int v11 = *(_DWORD *)(a3 + 64);
      int v12 = *(_DWORD *)(a3 + 68);
      uint64_t v13 = *a4;
      do
      {
        double v14 = v8;
        double v8 = v8 + 86400.0;
        if (v13 != v9)
        {
          uint64_t v15 = 0LL;
          uint64_t v16 = v13;
          do
          {
            double v17 = *(double *)(v16 + 8);
            if (v17 >= v14 && v17 < v8)
            {
              int v19 = *(_DWORD *)(v16 + 52) ? 42 : -1;
              if ((v19 & *(_DWORD *)(v16 + 192)) == 0) {
                ++v15;
              }
            }

            v16 += 224LL;
          }

          while (v16 != v9);
          if (v15 >= 4)
          {
            if (v8 > a1 + -2419200.0) {
              *(_DWORD *)(a3 + 6_Block_object_dispose(va, 8) = ++v12;
            }
            if (v8 > a1 + -604800.0) {
              *(_DWORD *)(a3 + 64) = ++v11;
            }
          }
        }
      }

      while (v8 < v10);
    }
  }

uint64_t sub_101046A08(void *a1, double *a2, double a3)
{
  int v11 = 0;
  int v14 = 0;
  __int128 v12 = 0u;
  memset(v13, 0, sizeof(v13));
  __int128 v15 = xmmword_101338660;
  int64x2_t v16 = vdupq_n_s64(0xFFF0000000000000LL);
  int64x2_t v17 = v16;
  unint64_t v18 = 0xFFF0000000000000LL;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  int v25 = 1071225242;
  char v26 = 0;
  int v27 = 1116213084;
  char v28 = 0;
  int v5 = (*(uint64_t (**)(void, int *))(*(void *)*a1 + 32LL))(*a1, &v11);
  uint64_t result = 0LL;
  if (v5)
  {
    double v7 = sub_100CFC150(*(double *)&v12) + 604800.0;
    if (v7 > a3)
    {
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      double v8 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 134349312;
        uint64_t v34 = v12;
        __int16 v35 = 2050;
        double v36 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Insufficient time since first bout (%{public}.2f). Retrying on %{public}.2f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_1018960F8);
        }
        int v29 = 134349312;
        uint64_t v30 = v12;
        __int16 v31 = 2050;
        double v32 = v7;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "Insufficient time since first bout (%{public}.2f). Retrying on %{public}.2f",  &v29,  22);
        double v10 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMobility::WalkingSteadinessClassifier::isInsufficientTimeSinceFirstBout(CFAbsoluteTime, CFAbsoluteTime &) const",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }

      *a2 = v7;
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void sub_101046C90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = a3[1];
  if (v4 != *a3)
  {
    sub_10104BC7C(*a3, v4, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a3) >> 3)), 1);
    double v6 = *(double *)(a3[1] - 16);
    if (*(double *)(a2 + 72) < v6 + 604800.0)
    {
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      double v7 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a2 + 72);
        *(_DWORD *)std::stringbuf::string_type buf = 134349312;
        uint64_t v17 = v8;
        __int16 v18 = 2050;
        double v19 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "SteadinessClassifier unable to classify, insufficient time since previous steadiness endTime, classificationTi me=%{public}.2f, previousSteadinessEndTime=%{public}.2f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_1018960F8);
        }
        uint64_t v9 = *(void *)(a2 + 72);
        int v12 = 134349312;
        uint64_t v13 = v9;
        __int16 v14 = 2050;
        double v15 = v6;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  16LL,  "SteadinessClassifier unable to classify, insufficient time since previous steadiness endTime, classificationTi me=%{public}.2f, previousSteadinessEndTime=%{public}.2f",  &v12,  22);
        int v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMobility::WalkingSteadinessClassifier::checkInsufficientTimeSinceSteadinessSample(WalkingSteadinessClas sifier::Result &, std::vector<HealthKitQuantitySample>) const",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }

      *(_DWORD *)(a2 + 132) |= 2u;
      *(double *)(a2 + 96) = fmax(*(double *)(a2 + 96), v6 + 604800.0);
    }
  }

void sub_101046ECC(uint64_t a1, double *a2, double a3, double a4, double a5)
{
  if (*(_BYTE *)(a1 + 81))
  {
    *a2 = *a2 * a4 + *(float *)(a1 + 32) * a3 + a5;
  }

  else
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_1018960F8);
    }
    int v5 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Attempted to correct entropy model feature without height being set",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  16LL,  "Attempted to correct entropy model feature without height being set",  v8,  2);
      double v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMobility::WalkingSteadinessClassifier::entropyModelFeatureHeightCorrection(double &, double, double, double) const",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

double sub_101047078(double a1, double a2)
{
  double v2 = a1 / (a2 * a2);
  double v3 = 45.0;
  if (v2 <= 45.0)
  {
    if (v2 >= 15.0)
    {
      double v3 = a1 / (a2 * a2);
      return v3 * 0.265899333 + -7.14436752;
    }

    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_1018960F8);
    }
    double v6 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134283777;
      double v11 = v2;
      __int16 v12 = 2049;
      uint64_t v13 = 0x402E000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "BMI below min threshold, %{private}.2f, setting it to Min threshold, %{private}.2f",  buf,  0x16u);
    }

    double v3 = 15.0;
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      *(_DWORD *)uint64_t v9 = 134283777;
      *(double *)&_DWORD v9[4] = v2;
      *(_WORD *)&v9[12] = 2049;
      *(void *)&v9[14] = 0x402E000000000000LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "BMI below min threshold, %{private}.2f, setting it to Min threshold, %{private}.2f",  v9,  22,  *(_OWORD *)v9,  *(void *)&v9[16]);
      goto LABEL_19;
    }
  }

  else
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_1018960F8);
    }
    unint64_t v4 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134283777;
      double v11 = v2;
      __int16 v12 = 2049;
      uint64_t v13 = 0x4046800000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "BMI above max threshold, %{private}.2f, setting it to Max threshold, %{private}.2f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      *(_DWORD *)uint64_t v9 = 134283777;
      *(double *)&_DWORD v9[4] = v2;
      *(_WORD *)&v9[12] = 2049;
      *(void *)&v9[14] = 0x4046800000000000LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "BMI above max threshold, %{private}.2f, setting it to Max threshold, %{private}.2f",  v9,  22,  *(_OWORD *)v9,  *(void *)&v9[16]);
LABEL_19:
      double v7 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static double CLMobility::WalkingSteadinessClassifier::doubleSupportBMIBiasCorrection(double, double)",  "%s\n",  v5);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return v3 * 0.265899333 + -7.14436752;
}

void sub_101047390( uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(_WORD *)a5 = 0;
  *(_BYTE *)(a5 + 2) = 0;
  *(void *)(a5 + 16) = 0LL;
  *(void *)(a5 + 24) = 0LL;
  *(void *)(a5 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a5 + 31) = 0;
  *(void *)(a5 + 40) = 0LL;
  *(void *)(a5 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a5 + sub_1011C52D0(v1 - 56) = 0;
  *(void *)(a5 + 72) = 0LL;
  *(void *)(a5 + 80) = 0LL;
  *(void *)(a5 + 64) = 0LL;
  if (*a1 != a1[1])
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_1018960F8);
    }
    __int16 v12 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = a1[1];
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a1) >> 3);
      uint64_t v15 = *(void *)*a1;
      uint64_t v16 = *(void *)(v13 - 16);
      *(_DWORD *)std::stringbuf::string_type buf = 134218496;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v15;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[SteadinessEvent] Evaluating %ld sample(s) from (%.2f->%.2f)",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      uint64_t v62 = a1[1];
      unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((v62 - *a1) >> 3);
      uint64_t v64 = *(void *)*a1;
      uint64_t v65 = *(void *)(v62 - 16);
      int v90 = 134218496;
      *(void *)uint64_t v91 = v63;
      *(_WORD *)&v91[8] = 2048;
      *(void *)&v91[10] = v64;
      *(_WORD *)&v91[18] = 2048;
      *(void *)&v91[20] = v65;
      LODWORD(v75) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "[SteadinessEvent] Evaluating %ld sample(s) from (%.2f->%.2f)",  &v90,  v75,  v77);
      double v67 = (char *)v66;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vec tor<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const",  "%s\n",  v66);
      if (v67 != buf) {
        free(v67);
      }
    }

    unint64_t v17 = a1[1];
    unint64_t v18 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a1) >> 3));
    if (v17 == *a1) {
      uint64_t v19 = 0LL;
    }
    else {
      uint64_t v19 = v18;
    }
    sub_10104E158(*a1, v17, v19, 1);
    uint64_t v20 = *a1;
    uint64_t v21 = a1[1];
    double v22 = *(double *)(v21 - 16);
    uint64_t v87 = 0LL;
    int v88 = 0LL;
    uint64_t v89 = 0LL;
    for (*(void *)std::stringbuf::string_type buf = &v87; v20 != v21; v20 += 24LL)
    {
    }

    sub_101048170((double **)&v87, (uint64_t)&v83);
    double v25 = sub_101048254(v23, a2);
    double v26 = v24;
    if (v24 <= 0.0 || v22 >= v24 + 7862400.0 + -0.0001) {
      BOOL v27 = v22 < v25 + 2419200.0 + -0.0001 && v25 > 0.0;
    }
    else {
      BOOL v27 = 1;
    }
    *(_BYTE *)(a5 + 33) = v27;
    BOOL v28 = v22 < v25 + 7862400.0 + -0.0001 && v25 > 0.0;
    *(_BYTE *)(a5 + 32) = v28;
    double v29 = vabdd_f64(a6, v22);
    *(_BYTE *)(a5 + 34) = v29 < 1209600.0;
    BOOL v30 = *(_BYTE *)a4 && v22 - *(double *)(a4 + 8) > 16934400.0 && v84 + v85 >= 604800.0;
    BOOL v31 = 0;
    int v32 = !v27;
    if (v29 < 1209600.0 && !v28 && v32 != 0)
    {
      int v34 = v84 + v85 >= 2419200.0 || v30;
      BOOL v31 = v34 == 1 && v86 == 2;
    }

    if (v29 >= 1209600.0) {
      int v32 = 0;
    }
    if (v32 == 1 && (v85 >= 2419200.0 ? (int v38 = 1) : (int v38 = v30), v38 == 1))
    {
      HIDWORD(v76) = 0;
      BOOL v39 = v86 == 3;
      if (v24 > 0.0 && v86 == 3)
      {
        std::stringbuf::string_type __p = 0LL;
        uint64_t v81 = 0LL;
        uint64_t v82 = 0LL;
        uint64_t v40 = *a1;
        uint64_t v41 = a1[1];
        *(void *)std::stringbuf::string_type buf = &__p;
        while (v40 != v41)
        {
          v40 += 24LL;
        }

        sub_101048170((double **)&__p, (uint64_t)&v77);
        double v52 = v77;
        HIDWORD(v76) = v77 < 4838400.0;
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_1018960F8);
        }
        uint64_t v53 = (os_log_s *)qword_101934488;
        if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 67109888;
          *(_DWORD *)&uint8_t buf[4] = v52 < 4838400.0;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v52;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v79;
          *(_WORD *)&_BYTE buf[28] = 2048;
          *(double *)&buf[30] = v78;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "[SteadinessEvent] EvaluateRepeatVeryLow: isRepeatVeryLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f",  buf,  0x26u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_1018960F8);
          }
          int v90 = 67109888;
          *(_DWORD *)uint64_t v91 = v52 < 4838400.0;
          *(_WORD *)&v91[4] = 2048;
          *(double *)&v91[6] = v52;
          *(_WORD *)&v91[14] = 2048;
          *(void *)&v91[16] = v79;
          *(_WORD *)&_BYTE v91[24] = 2048;
          *(double *)&v91[26] = v78;
          LODWORD(v76) = 38;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "[SteadinessEvent] EvaluateRepeatVeryLow: isRepeatVeryLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f",  &v90,  v76,  v77,  v78);
          int v74 = (char *)v73;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std: :vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL , const HealthKitPregnancyState) const",  "%s\n",  v73);
          if (v74 != buf) {
            free(v74);
          }
        }

        if (__p)
        {
          uint64_t v81 = __p;
          operator delete(__p);
        }

        BOOL v39 = 1;
      }
    }

    else
    {
      BOOL v39 = 0;
      HIDWORD(v76) = 0;
    }

    if (v25 > 0.0 && v31)
    {
      std::stringbuf::string_type __p = 0LL;
      uint64_t v81 = 0LL;
      uint64_t v82 = 0LL;
      uint64_t v44 = *a1;
      uint64_t v43 = a1[1];
      *(void *)std::stringbuf::string_type buf = &__p;
      while (v44 != v43)
      {
        v44 += 24LL;
      }

      sub_101048170((double **)&__p, (uint64_t)&v77);
      double v48 = v77;
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      uint64_t v49 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v48 < 4838400.0;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(double *)&buf[10] = v48;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v79;
        *(_WORD *)&_BYTE buf[28] = 2048;
        *(double *)&buf[30] = v78;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "[SteadinessEvent] EvaluateRepeatLow: isRepeatLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f",  buf,  0x26u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_1018960F8);
        }
        int v90 = 67109888;
        *(_DWORD *)uint64_t v91 = v48 < 4838400.0;
        *(_WORD *)&v91[4] = 2048;
        *(double *)&v91[6] = v48;
        *(_WORD *)&v91[14] = 2048;
        *(void *)&v91[16] = v79;
        *(_WORD *)&_BYTE v91[24] = 2048;
        *(double *)&v91[26] = v78;
        LODWORD(v76) = 38;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "[SteadinessEvent] EvaluateRepeatLow: isRepeatLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f",  &v90,  v76,  v77,  v78);
        int v72 = (char *)v71;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::v ector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, co nst HealthKitPregnancyState) const",  "%s\n",  v71);
        if (v72 != buf) {
          free(v72);
        }
      }

      if (__p)
      {
        uint64_t v81 = __p;
        operator delete(__p);
      }

      if (v48 < 4838400.0)
      {
        if (v30) {
          unsigned int v50 = 7;
        }
        else {
          unsigned int v50 = 3;
        }
        *(double *)(a5 + 40) = v22;
        *(double *)(a5 + 4_Block_object_dispose(va, 8) = v22;
        int v45 = 1;
        goto LABEL_104;
      }
    }

    else if (!v31)
    {
      if (!v39)
      {
        unsigned int v50 = 0;
        int v51 = 0;
        int v45 = 0;
        goto LABEL_105;
      }

      *(double *)(a5 + 40) = v22;
      *(double *)(a5 + 4_Block_object_dispose(va, 8) = v22;
      int v45 = 0;
      if (HIDWORD(v76))
      {
        int v46 = 4;
        int v47 = 8;
      }

      else
      {
        int v46 = 2;
        int v47 = 6;
      }

      if (v30) {
        unsigned int v50 = v47;
      }
      else {
        unsigned int v50 = v46;
      }
LABEL_104:
      *(_DWORD *)(a5 + sub_1011C52D0(v1 - 56) = v50;
      int v51 = 1;
      *(_BYTE *)a5 = 1;
LABEL_105:
      double v54 = v83;
      double v55 = v84;
      double v56 = v84 / 3628800.0 * 100.0;
      *(double *)(a5 + _Block_object_dispose(va, 8) = v83 / 3628800.0 * 100.0;
      *(double *)(a5 + 16) = v56;
      double v57 = v85;
      double v58 = v85 / 3628800.0 * 100.0;
      *(double *)(a5 + 24) = v58;
      double v59 = v54 + v55 + v57;
      *(double *)(a5 + 64) = v59;
      *(_BYTE *)(a5 + 1) = a3;
      if (v51 && (a3 & 1) != 0)
      {
        *(_BYTE *)(a5 + 2) = 1;
        *(double *)(a5 + 72) = v25;
        *(double *)(a5 + 80) = v26;
        if (v39)
        {
          *(double *)(a5 + 80) = v22;
          double v26 = v22;
        }

        else if (v31)
        {
          *(double *)(a5 + 72) = v22;
          double v25 = v22;
        }
      }

      else
      {
        *(double *)(a5 + 72) = v25;
        *(double *)(a5 + 80) = v26;
      }

      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_1018960F8);
      }
      uint64_t v60 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v61 = v50;
        *(_DWORD *)std::stringbuf::string_type buf = 134548737;
        if (!v51) {
          uint64_t v61 = 0LL;
        }
        *(void *)&uint8_t buf[4] = v61;
        *(_WORD *)&_BYTE buf[12] = 2049;
        *(double *)&buf[14] = v56;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&_BYTE buf[24] = v58;
        *(_WORD *)&uint8_t buf[32] = 2049;
        *(void *)&_BYTE buf[34] = v86;
        __int16 v111 = 1025;
        BOOL v112 = v28;
        __int16 v113 = 1025;
        BOOL v114 = v27;
        __int16 v115 = 1026;
        BOOL v116 = v29 < 1209600.0;
        __int16 v117 = 1025;
        int v118 = a3;
        __int16 v119 = 1025;
        int v120 = HIDWORD(v76);
        __int16 v121 = 1025;
        int v122 = v45;
        __int16 v123 = 2049;
        double v124 = v59;
        __int16 v125 = 2049;
        double v126 = v25;
        __int16 v127 = 2049;
        double v128 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "[SteadinessEvent] steadinessEvent, %{sensitive}ld, percentLow, %{private}.2f, percentVeryLow, %{private}.2f, m ostRecentClassification, %{private}ld, isBlockoutPeriodLow, %{private}d, isBlockoutPeriodVeryLow, %{private}d, isSampleRecent, %{public}d, userOnboardedNotifications, %{private}d, isRepeatVeryLow, %{private}d, isRepeatLo w, %{private}d, totalValidDuration, %{private}.2f, mostRecentLowNotificationTime, %{private}.2f, mostRecentVer yLowNotificationTime, %{private}.2f",  buf,  0x6Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_1018960F8);
        }
        uint64_t v68 = v50;
        if (!v51) {
          uint64_t v68 = 0LL;
        }
        int v90 = 134548737;
        *(void *)uint64_t v91 = v68;
        *(_WORD *)&v91[8] = 2049;
        *(double *)&v91[10] = v56;
        *(_WORD *)&v91[18] = 2049;
        *(double *)&v91[20] = v58;
        *(_WORD *)&v91[28] = 2049;
        *(void *)&v91[30] = v86;
        __int16 v92 = 1025;
        BOOL v93 = v28;
        __int16 v94 = 1025;
        BOOL v95 = v27;
        __int16 v96 = 1026;
        BOOL v97 = v29 < 1209600.0;
        __int16 v98 = 1025;
        int v99 = a3;
        __int16 v100 = 1025;
        int v101 = HIDWORD(v76);
        __int16 v102 = 1025;
        int v103 = v45;
        __int16 v104 = 2049;
        double v105 = v59;
        __int16 v106 = 2049;
        double v107 = v25;
        __int16 v108 = 2049;
        double v109 = v26;
        LODWORD(v76) = 108;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "[SteadinessEvent] steadinessEvent, %{sensitive}ld, percentLow, %{private}.2f, percentVeryLow, %{private}.2f, m ostRecentClassification, %{private}ld, isBlockoutPeriodLow, %{private}d, isBlockoutPeriodVeryLow, %{private}d, isSampleRecent, %{public}d, userOnboardedNotifications, %{private}d, isRepeatVeryLow, %{private}d, isRepeatLo w, %{private}d, totalValidDuration, %{private}.2f, mostRecentLowNotificationTime, %{private}.2f, mostRecentVer yLowNotificationTime, %{private}.2f",  &v90,  *(void *)&v76);
        int v70 = (char *)v69;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::v ector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, co nst HealthKitPregnancyState) const",  "%s\n",  v69);
        if (v70 != buf) {
          free(v70);
        }
      }

      if (v87)
      {
        int v88 = v87;
        operator delete(v87);
      }

      return;
    }

    int v45 = 0;
    if (v30) {
      unsigned int v50 = 5;
    }
    else {
      unsigned int v50 = 1;
    }
    *(double *)(a5 + 40) = v22;
    *(double *)(a5 + 4_Block_object_dispose(va, 8) = v22;
    goto LABEL_104;
  }

  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_1018960F8);
  }
  __int16 v35 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "[SteadinessEvent] No steadiness samples, no event detected",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_1018960F8);
    }
    LOWORD(v90) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  2LL,  "[SteadinessEvent] No steadiness samples, no event detected",  &v90,  2);
    int v37 = (char *)v36;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vecto r<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const Heal thKitPregnancyState) const",  "%s\n",  v36);
    if (v37 != buf) {
      free(v37);
    }
  }

void sub_101048110( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_101048170(double **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(_DWORD *)(a2 + 24) = 1;
  double v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    double v5 = 0.0;
    double v6 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
    do
    {
      if (sub_100CD3348((uint64_t)&v13, v3[2] * 100.0))
      {
        double v10 = *v3;
        double v9 = v3[1];
        if (*v3 < v7) {
          double v10 = v7;
        }
        double v11 = v9 - v10;
        int v12 = v14;
        switch(v14)
        {
          case 1:
            double v8 = v11 + v8;
            *(double *)a2 = v8;
            break;
          case 3:
            double v6 = v11 + v6;
            *(double *)(a2 + 16) = v6;
            break;
          case 2:
            double v5 = v11 + v5;
            *(double *)(a2 + _Block_object_dispose(va, 8) = v5;
            break;
        }

        *(_DWORD *)(a2 + 24) = v12;
        double v7 = v9;
      }

      v3 += 3;
    }

    while (v3 != v4);
  }

double sub_101048254(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2) {
    return 0.0;
  }
  double v4 = 0.0;
  double v5 = 0.0;
  do
  {
    switch(*(_DWORD *)(v3 + 16))
    {
      case 1:
      case 3:
        break;
      case 2:
      case 4:
        break;
      default:
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_1018960F8);
        }
        double v6 = (os_log_s *)qword_101934488;
        if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_FAULT))
        {
          uint64_t v7 = *(void *)(v3 + 16);
          *(_DWORD *)std::stringbuf::string_type buf = 134545665;
          uint64_t v16 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Unexpected event type value: %{sensitive}ld",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_1018960F8);
          }
          uint64_t v8 = *(void *)(v3 + 16);
          int v13 = 134545665;
          uint64_t v14 = v8;
          LODWORD(v12) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  17LL,  "Unexpected event type value: %{sensitive}ld",  &v13,  v12);
          double v10 = (uint8_t *)v9;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::pair<CFAbsoluteTime, CFAbsoluteTime> CLMobility::WalkingSteadinessClassifier::mostRecentLowAndVeryLowEv entTimes(const std::vector<HealthKitCategorySample> &) const",  "%s\n",  v9);
          if (v10 != buf) {
            free(v10);
          }
        }

        break;
    }

    v3 += 24LL;
  }

  while (v3 != v2);
  return v4;
}

double sub_1010484B4@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  double v6 = sub_100CFC150(a3);
  double v7 = sub_100CFC150(a2);
  double v8 = v7 + -31536000.0;
  *a1 = v7 + -31536000.0;
  a1[1] = a3;
  a1[2] = v7 + -31536000.0;
  a1[3] = v6;
  double result = v7 + -2592000.0;
  a1[4] = result;
  a1[5] = v6;
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v8;
  a1[9] = a3;
  return result;
}

void sub_101048528(id a1)
{
  qword_101934488 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_101048554(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = (uint64_t)a2 - v8;
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (*((double *)a2 - 27) < *(double *)(v8 + 8))
        {
          __int128 v270 = *(_OWORD *)v8;
          __int128 v282 = *(_OWORD *)(v8 + 16);
          __int128 v317 = *(_OWORD *)(v8 + 64);
          __int128 v329 = *(_OWORD *)(v8 + 80);
          __int128 v293 = *(_OWORD *)(v8 + 32);
          __int128 v305 = *(_OWORD *)(v8 + 48);
          __int128 v365 = *(_OWORD *)(v8 + 128);
          __int128 v377 = *(_OWORD *)(v8 + 144);
          __int128 v341 = *(_OWORD *)(v8 + 96);
          __int128 v353 = *(_OWORD *)(v8 + 112);
          *(_OWORD *)v413 = *(_OWORD *)(v8 + 192);
          *(_OWORD *)&v413[16] = *(_OWORD *)(v8 + 208);
          __int128 v389 = *(_OWORD *)(v8 + 160);
          __int128 v401 = *(_OWORD *)(v8 + 176);
          __int128 v90 = *(a2 - 13);
          *(_OWORD *)unint64_t v8 = *(a2 - 14);
          *(_OWORD *)(v8 + 16) = v90;
          __int128 v91 = *(a2 - 12);
          __int128 v92 = *(a2 - 11);
          __int128 v93 = *(a2 - 9);
          *(_OWORD *)(v8 + 64) = *(a2 - 10);
          *(_OWORD *)(v8 + 80) = v93;
          *(_OWORD *)(v8 + 32) = v91;
          *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v92;
          __int128 v94 = *(a2 - 8);
          __int128 v95 = *(a2 - 7);
          __int128 v96 = *(a2 - 5);
          *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = *(a2 - 6);
          *(_OWORD *)(v8 + 144) = v96;
          *(_OWORD *)(v8 + 96) = v94;
          *(_OWORD *)(v8 + 112) = v95;
          __int128 v97 = *(a2 - 4);
          __int128 v98 = *(a2 - 3);
          __int128 v99 = *(a2 - 2);
          *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 176) = v98;
          *(_OWORD *)(v8 + 192) = v99;
          *(_OWORD *)(v8 + 160) = v97;
          *(a2 - 14) = v270;
          *(a2 - 13) = v282;
          *(a2 - 10) = v317;
          *(a2 - 9) = v329;
          *(a2 - 12) = v293;
          *(a2 - 11) = v305;
          *(a2 - 6) = v365;
          *(a2 - 5) = v377;
          *(a2 - _Block_object_dispose(va, 8) = v341;
          *(a2 - 7) = v353;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v413[13];
          *(a2 - 3) = v401;
          *(a2 - 2) = *(_OWORD *)v413;
          *(a2 - 4) = v389;
        }

        return;
      case 3LL:
        sub_10104972C((__int128 *)v8, (__int128 *)(v8 + 224), a2 - 14);
        return;
      case 4LL:
        sub_10104A10C(v8, v8 + 224, v8 + 448, (uint64_t)(a2 - 14));
        return;
      case 5LL:
        __int16 v100 = (__int128 *)(v8 + 224);
        int v101 = (__int128 *)(v8 + 448);
        __int16 v102 = (__int128 *)(v8 + 672);
        sub_10104A10C(v8, v8 + 224, v8 + 448, v8 + 672);
        if (*((double *)a2 - 27) < *(double *)(v8 + 680))
        {
          __int128 v318 = *(_OWORD *)(v8 + 736);
          __int128 v330 = *(_OWORD *)(v8 + 752);
          __int128 v294 = *(_OWORD *)(v8 + 704);
          __int128 v306 = *(_OWORD *)(v8 + 720);
          __int128 v366 = *(_OWORD *)(v8 + 800);
          __int128 v378 = *(_OWORD *)(v8 + 816);
          __int128 v342 = *(_OWORD *)(v8 + 768);
          __int128 v354 = *(_OWORD *)(v8 + 784);
          *(_OWORD *)v414 = *(_OWORD *)(v8 + 864);
          *(_OWORD *)&v414[16] = *(_OWORD *)(v8 + 880);
          __int128 v390 = *(_OWORD *)(v8 + 832);
          __int128 v402 = *(_OWORD *)(v8 + 848);
          __int128 v271 = *v102;
          __int128 v283 = *(_OWORD *)(v8 + 688);
          __int128 v103 = *(a2 - 13);
          __int128 *v102 = *(a2 - 14);
          *(_OWORD *)(v8 + 68_Block_object_dispose(va, 8) = v103;
          __int128 v104 = *(a2 - 12);
          __int128 v105 = *(a2 - 11);
          __int128 v106 = *(a2 - 9);
          *(_OWORD *)(v8 + 736) = *(a2 - 10);
          *(_OWORD *)(v8 + 752) = v106;
          *(_OWORD *)(v8 + 704) = v104;
          *(_OWORD *)(v8 + 720) = v105;
          __int128 v107 = *(a2 - 8);
          __int128 v108 = *(a2 - 7);
          __int128 v109 = *(a2 - 5);
          *(_OWORD *)(v8 + 800) = *(a2 - 6);
          *(_OWORD *)(v8 + 816) = v109;
          *(_OWORD *)(v8 + 76_Block_object_dispose(va, 8) = v107;
          *(_OWORD *)(v8 + 784) = v108;
          __int128 v110 = *(a2 - 4);
          __int128 v111 = *(a2 - 3);
          __int128 v112 = *(a2 - 2);
          *(_OWORD *)(v8 + 877) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 84_Block_object_dispose(va, 8) = v111;
          *(_OWORD *)(v8 + 864) = v112;
          *(_OWORD *)(v8 + 832) = v110;
          *(a2 - 14) = v271;
          *(a2 - 13) = v283;
          *(a2 - 10) = v318;
          *(a2 - 9) = v330;
          *(a2 - 12) = v294;
          *(a2 - 11) = v306;
          *(a2 - 6) = v366;
          *(a2 - 5) = v378;
          *(a2 - _Block_object_dispose(va, 8) = v342;
          *(a2 - 7) = v354;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v414[13];
          *(a2 - 3) = v402;
          *(a2 - 2) = *(_OWORD *)v414;
          *(a2 - 4) = v390;
          if (*(double *)(v8 + 680) < *(double *)(v8 + 456))
          {
            __int128 v391 = *(_OWORD *)(v8 + 608);
            __int128 v403 = *(_OWORD *)(v8 + 624);
            *(_OWORD *)v415 = *(_OWORD *)(v8 + 640);
            *(_OWORD *)&v415[16] = *(_OWORD *)(v8 + 656);
            __int128 v343 = *(_OWORD *)(v8 + 544);
            __int128 v355 = *(_OWORD *)(v8 + 560);
            __int128 v367 = *(_OWORD *)(v8 + 576);
            __int128 v379 = *(_OWORD *)(v8 + 592);
            __int128 v295 = *(_OWORD *)(v8 + 480);
            __int128 v307 = *(_OWORD *)(v8 + 496);
            __int128 v319 = *(_OWORD *)(v8 + 512);
            __int128 v331 = *(_OWORD *)(v8 + 528);
            __int128 v272 = *v101;
            __int128 v284 = *(_OWORD *)(v8 + 464);
            __int128 v113 = *(_OWORD *)(v8 + 848);
            *(_OWORD *)(v8 + 60_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 832);
            *(_OWORD *)(v8 + 624) = v113;
            *(_OWORD *)(v8 + 640) = *(_OWORD *)(v8 + 864);
            *(_OWORD *)(v8 + 653) = *(_OWORD *)(v8 + 877);
            __int128 v114 = *(_OWORD *)(v8 + 784);
            *(_OWORD *)(v8 + 544) = *(_OWORD *)(v8 + 768);
            *(_OWORD *)(v8 + 560) = v114;
            __int128 v115 = *(_OWORD *)(v8 + 816);
            *(_OWORD *)(v8 + 576) = *(_OWORD *)(v8 + 800);
            *(_OWORD *)(v8 + 592) = v115;
            __int128 v116 = *(_OWORD *)(v8 + 720);
            *(_OWORD *)(v8 + 480) = *(_OWORD *)(v8 + 704);
            *(_OWORD *)(v8 + 496) = v116;
            __int128 v117 = *(_OWORD *)(v8 + 752);
            *(_OWORD *)(v8 + 512) = *(_OWORD *)(v8 + 736);
            *(_OWORD *)(v8 + 52_Block_object_dispose(va, 8) = v117;
            __int128 v118 = *(_OWORD *)(v8 + 688);
            __int128 *v101 = *v102;
            *(_OWORD *)(v8 + 464) = v118;
            *(_OWORD *)(v8 + 832) = v391;
            *(_OWORD *)(v8 + 84_Block_object_dispose(va, 8) = v403;
            *(_OWORD *)(v8 + 864) = *(_OWORD *)v415;
            *(_OWORD *)(v8 + 877) = *(_OWORD *)&v415[13];
            *(_OWORD *)(v8 + 76_Block_object_dispose(va, 8) = v343;
            *(_OWORD *)(v8 + 784) = v355;
            *(_OWORD *)(v8 + 800) = v367;
            *(_OWORD *)(v8 + 816) = v379;
            *(_OWORD *)(v8 + 704) = v295;
            *(_OWORD *)(v8 + 720) = v307;
            *(_OWORD *)(v8 + 736) = v319;
            *(_OWORD *)(v8 + 752) = v331;
            BOOL v119 = *(double *)(v8 + 456) < *(double *)(v8 + 232);
            __int128 *v102 = v272;
            *(_OWORD *)(v8 + 68_Block_object_dispose(va, 8) = v284;
            if (v119)
            {
              __int128 v392 = *(_OWORD *)(v8 + 384);
              __int128 v404 = *(_OWORD *)(v8 + 400);
              *(_OWORD *)v416 = *(_OWORD *)(v8 + 416);
              *(_OWORD *)&v416[16] = *(_OWORD *)(v8 + 432);
              __int128 v344 = *(_OWORD *)(v8 + 320);
              __int128 v356 = *(_OWORD *)(v8 + 336);
              __int128 v368 = *(_OWORD *)(v8 + 352);
              __int128 v380 = *(_OWORD *)(v8 + 368);
              __int128 v296 = *(_OWORD *)(v8 + 256);
              __int128 v308 = *(_OWORD *)(v8 + 272);
              __int128 v320 = *(_OWORD *)(v8 + 288);
              __int128 v332 = *(_OWORD *)(v8 + 304);
              __int128 v273 = *v100;
              __int128 v285 = *(_OWORD *)(v8 + 240);
              __int128 v120 = *(_OWORD *)(v8 + 624);
              *(_OWORD *)(v8 + 384) = *(_OWORD *)(v8 + 608);
              *(_OWORD *)(v8 + 400) = v120;
              *(_OWORD *)(v8 + 416) = *(_OWORD *)(v8 + 640);
              *(_OWORD *)(v8 + 429) = *(_OWORD *)(v8 + 653);
              __int128 v121 = *(_OWORD *)(v8 + 560);
              *(_OWORD *)(v8 + 320) = *(_OWORD *)(v8 + 544);
              *(_OWORD *)(v8 + 336) = v121;
              __int128 v122 = *(_OWORD *)(v8 + 592);
              *(_OWORD *)(v8 + 352) = *(_OWORD *)(v8 + 576);
              *(_OWORD *)(v8 + 36_Block_object_dispose(va, 8) = v122;
              __int128 v123 = *(_OWORD *)(v8 + 496);
              *(_OWORD *)(v8 + 2sub_1011C52D0(v1 - 56) = *(_OWORD *)(v8 + 480);
              *(_OWORD *)(v8 + 272) = v123;
              __int128 v124 = *(_OWORD *)(v8 + 528);
              *(_OWORD *)(v8 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 512);
              *(_OWORD *)(v8 + 304) = v124;
              __int128 v125 = *(_OWORD *)(v8 + 464);
              __int128 *v100 = *v101;
              *(_OWORD *)(v8 + 240) = v125;
              *(_OWORD *)(v8 + 60_Block_object_dispose(va, 8) = v392;
              *(_OWORD *)(v8 + 624) = v404;
              *(_OWORD *)(v8 + 640) = *(_OWORD *)v416;
              *(_OWORD *)(v8 + 653) = *(_OWORD *)&v416[13];
              *(_OWORD *)(v8 + 544) = v344;
              *(_OWORD *)(v8 + 560) = v356;
              *(_OWORD *)(v8 + 576) = v368;
              *(_OWORD *)(v8 + 592) = v380;
              *(_OWORD *)(v8 + 480) = v296;
              *(_OWORD *)(v8 + 496) = v308;
              *(_OWORD *)(v8 + 512) = v320;
              *(_OWORD *)(v8 + 52_Block_object_dispose(va, 8) = v332;
              BOOL v119 = *(double *)(v8 + 232) < *(double *)(v8 + 8);
              __int128 *v101 = v273;
              *(_OWORD *)(v8 + 464) = v285;
              if (v119)
              {
                __int128 v274 = *(_OWORD *)v8;
                __int128 v286 = *(_OWORD *)(v8 + 16);
                __int128 v321 = *(_OWORD *)(v8 + 64);
                __int128 v333 = *(_OWORD *)(v8 + 80);
                __int128 v297 = *(_OWORD *)(v8 + 32);
                __int128 v309 = *(_OWORD *)(v8 + 48);
                __int128 v369 = *(_OWORD *)(v8 + 128);
                __int128 v381 = *(_OWORD *)(v8 + 144);
                __int128 v345 = *(_OWORD *)(v8 + 96);
                __int128 v357 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v417 = *(_OWORD *)(v8 + 192);
                *(_OWORD *)&v417[16] = *(_OWORD *)(v8 + 208);
                __int128 v393 = *(_OWORD *)(v8 + 160);
                __int128 v405 = *(_OWORD *)(v8 + 176);
                __int128 v126 = *(_OWORD *)(v8 + 304);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 288);
                *(_OWORD *)(v8 + 80) = v126;
                __int128 v127 = *(_OWORD *)(v8 + 272);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 256);
                *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v127;
                __int128 v128 = *(_OWORD *)(v8 + 368);
                *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 352);
                *(_OWORD *)(v8 + 144) = v128;
                __int128 v129 = *(_OWORD *)(v8 + 336);
                *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 320);
                *(_OWORD *)(v8 + 112) = v129;
                *(_OWORD *)(v8 + 205) = *(_OWORD *)(v8 + 429);
                __int128 v130 = *(_OWORD *)(v8 + 416);
                __int128 v131 = *(_OWORD *)(v8 + 384);
                *(_OWORD *)(v8 + 176) = *(_OWORD *)(v8 + 400);
                *(_OWORD *)(v8 + 192) = v130;
                *(_OWORD *)(v8 + 160) = v131;
                __int128 v132 = *(_OWORD *)(v8 + 240);
                *(_OWORD *)unint64_t v8 = *v100;
                *(_OWORD *)(v8 + 16) = v132;
                *(_OWORD *)(v8 + 384) = v393;
                *(_OWORD *)(v8 + 400) = v405;
                *(_OWORD *)(v8 + 416) = *(_OWORD *)v417;
                *(_OWORD *)(v8 + 429) = *(_OWORD *)&v417[13];
                *(_OWORD *)(v8 + 320) = v345;
                *(_OWORD *)(v8 + 336) = v357;
                *(_OWORD *)(v8 + 352) = v369;
                *(_OWORD *)(v8 + 36_Block_object_dispose(va, 8) = v381;
                *(_OWORD *)(v8 + 2sub_1011C52D0(v1 - 56) = v297;
                *(_OWORD *)(v8 + 272) = v309;
                *(_OWORD *)(v8 + 28_Block_object_dispose(va, 8) = v321;
                *(_OWORD *)(v8 + 304) = v333;
                __int128 *v100 = v274;
                *(_OWORD *)(v8 + 240) = v286;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 5375)
        {
          __int128 v133 = (__int128 *)(v8 + 224);
          BOOL v135 = (__int128 *)v8 == a2 || v133 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v135)
            {
              uint64_t v136 = 0LL;
              unint64_t v137 = v8;
              do
              {
                uint64_t v138 = v133;
                double v139 = *(double *)(v137 + 232);
                if (v139 < *(double *)(v137 + 8))
                {
                  uint64_t v140 = *(void *)v133;
                  __int128 v394 = *(_OWORD *)(v137 + 400);
                  *(_OWORD *)v406 = *(_OWORD *)(v137 + 416);
                  *(_OWORD *)&v406[16] = *(_OWORD *)(v137 + 432);
                  __int128 v346 = *(_OWORD *)(v137 + 336);
                  __int128 v358 = *(_OWORD *)(v137 + 352);
                  __int128 v370 = *(_OWORD *)(v137 + 368);
                  __int128 v382 = *(_OWORD *)(v137 + 384);
                  __int128 v298 = *(_OWORD *)(v137 + 272);
                  __int128 v310 = *(_OWORD *)(v137 + 288);
                  __int128 v322 = *(_OWORD *)(v137 + 304);
                  __int128 v334 = *(_OWORD *)(v137 + 320);
                  __int128 v142 = *(_OWORD *)(v137 + 240);
                  __int128 v141 = *(_OWORD *)(v137 + 256);
                  uint64_t v143 = v136;
                  __int128 v275 = v142;
                  while (1)
                  {
                    int v144 = (double *)(v8 + v143);
                    __int128 v145 = *(_OWORD *)(v8 + v143 + 176);
                    *((_OWORD *)v144 + 24) = *(_OWORD *)(v8 + v143 + 160);
                    *((_OWORD *)v144 + 25) = v145;
                    *((_OWORD *)v144 + 26) = *(_OWORD *)(v8 + v143 + 192);
                    *(_OWORD *)(v8 + v143 + 429) = *(_OWORD *)(v8 + v143 + 205);
                    __int128 v146 = *(_OWORD *)(v8 + v143 + 112);
                    *((_OWORD *)v144 + 20) = *(_OWORD *)(v8 + v143 + 96);
                    *((_OWORD *)v144 + 21) = v146;
                    __int128 v147 = *(_OWORD *)(v8 + v143 + 144);
                    *((_OWORD *)v144 + 22) = *(_OWORD *)(v8 + v143 + 128);
                    *((_OWORD *)v144 + 23) = v147;
                    __int128 v148 = *(_OWORD *)(v8 + v143 + 48);
                    *((_OWORD *)v144 + 16) = *(_OWORD *)(v8 + v143 + 32);
                    *((_OWORD *)v144 + 17) = v148;
                    __int128 v149 = *(_OWORD *)(v8 + v143 + 80);
                    *((_OWORD *)v144 + 1_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + v143 + 64);
                    *((_OWORD *)v144 + 19) = v149;
                    __int128 v150 = *(_OWORD *)(v8 + v143 + 16);
                    *((_OWORD *)v144 + 14) = *(_OWORD *)(v8 + v143);
                    *((_OWORD *)v144 + 15) = v150;
                    if (!v143) {
                      break;
                    }
                    v143 -= 224LL;
                    if (v139 >= *(v144 - 27))
                    {
                      uint64_t v151 = v8 + v143 + 224;
                      goto LABEL_80;
                    }
                  }

                  uint64_t v151 = v8;
LABEL_80:
                  *(void *)uint64_t v151 = v140;
                  *(double *)(v151 + _Block_object_dispose(va, 8) = v139;
                  *(_OWORD *)(v151 + 176) = v394;
                  *(_OWORD *)(v151 + 192) = *(_OWORD *)v406;
                  *(_OWORD *)(v151 + 205) = *(_OWORD *)&v406[13];
                  *(_OWORD *)(v151 + 112) = v346;
                  *(_OWORD *)(v151 + 12_Block_object_dispose(va, 8) = v358;
                  *(_OWORD *)(v151 + 144) = v370;
                  *(_OWORD *)(v151 + 160) = v382;
                  *(_OWORD *)(v151 + 4_Block_object_dispose(va, 8) = v298;
                  *(_OWORD *)(v151 + 64) = v310;
                  *(_OWORD *)(v151 + 80) = v322;
                  *(_OWORD *)(v151 + 96) = v334;
                  *(_OWORD *)(v151 + 16) = v275;
                  *(_OWORD *)(v151 + 32) = v141;
                }

                __int128 v133 = v138 + 14;
                v136 += 224LL;
                unint64_t v137 = (unint64_t)v138;
              }

              while (v138 + 14 != a2);
            }
          }

          else if (!v135)
          {
            do
            {
              uint64_t v220 = v133;
              double v221 = *(double *)(a1 + 232);
              if (v221 < *(double *)(a1 + 8))
              {
                uint64_t v222 = *(void *)v133;
                __int128 v397 = *(_OWORD *)(a1 + 400);
                *(_OWORD *)v409 = *(_OWORD *)(a1 + 416);
                *(_OWORD *)&v409[16] = *(_OWORD *)(a1 + 432);
                __int128 v349 = *(_OWORD *)(a1 + 336);
                __int128 v361 = *(_OWORD *)(a1 + 352);
                __int128 v373 = *(_OWORD *)(a1 + 368);
                __int128 v385 = *(_OWORD *)(a1 + 384);
                __int128 v301 = *(_OWORD *)(a1 + 272);
                __int128 v313 = *(_OWORD *)(a1 + 288);
                __int128 v325 = *(_OWORD *)(a1 + 304);
                __int128 v337 = *(_OWORD *)(a1 + 320);
                __int128 v278 = *(_OWORD *)(a1 + 240);
                __int128 v289 = *(_OWORD *)(a1 + 256);
                do
                {
                  uint64_t v223 = a1 + 224;
                  __int128 v224 = *(_OWORD *)(a1 + 176);
                  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(a1 + 400) = v224;
                  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 192);
                  __int128 v225 = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(a1 + 336) = v225;
                  __int128 v226 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v226;
                  __int128 v227 = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(a1 + 272) = v227;
                  __int128 v228 = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(a1 + 304) = v228;
                  __int128 v229 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(a1 + 224) = *(_OWORD *)a1;
                  *(_OWORD *)(a1 + 240) = v229;
                  BOOL v119 = v221 < *(double *)(a1 - 216);
                  __int128 v230 = *(_OWORD *)(a1 + 205);
                  a1 -= 224LL;
                  *(_OWORD *)(v223 + 205) = v230;
                }

                while (v119);
                *(void *)(a1 + 224) = v222;
                *(double *)(a1 + 232) = v221;
                *(_OWORD *)(a1 + 240) = v278;
                *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = v313;
                *(_OWORD *)(a1 + 304) = v325;
                *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = v289;
                *(_OWORD *)(a1 + 272) = v301;
                *(_OWORD *)(a1 + 352) = v361;
                *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v373;
                *(_OWORD *)(a1 + 320) = v337;
                *(_OWORD *)(a1 + 336) = v349;
                *(_OWORD *)(a1 + 429) = *(_OWORD *)&v409[13];
                *(_OWORD *)(a1 + 400) = v397;
                *(_OWORD *)(a1 + 416) = *(_OWORD *)v409;
                *(_OWORD *)(a1 + 384) = v385;
              }

              __int128 v133 = v220 + 14;
              a1 = (uint64_t)v220;
            }

            while (v220 + 14 != a2);
          }

          return;
        }

        if (!a3)
        {
          int64_t v152 = (unint64_t)(v10 - 2) >> 1;
          int64_t v153 = v152;
          do
          {
            int64_t v154 = v153;
            if (v152 >= v153)
            {
              uint64_t v155 = (2 * v153) | 1;
              unint64_t v156 = v8 + 224 * v155;
              if (2 * v153 + 2 < v10 && *(double *)(v8 + 224 * v155 + 8) < *(double *)(v156 + 232))
              {
                v156 += 224LL;
                uint64_t v155 = 2 * v153 + 2;
              }

              double v157 = *(double *)(v8 + 224 * v153 + 8);
              if (*(double *)(v156 + 8) >= v157)
              {
                unint64_t v158 = v8 + 224 * v153;
                uint64_t v159 = *(void *)v158;
                __int128 v276 = *(_OWORD *)(v158 + 16);
                __int128 v311 = *(_OWORD *)(v158 + 64);
                __int128 v323 = *(_OWORD *)(v158 + 80);
                __int128 v287 = *(_OWORD *)(v158 + 32);
                __int128 v299 = *(_OWORD *)(v158 + 48);
                __int128 v359 = *(_OWORD *)(v158 + 128);
                __int128 v371 = *(_OWORD *)(v158 + 144);
                __int128 v335 = *(_OWORD *)(v158 + 96);
                __int128 v347 = *(_OWORD *)(v158 + 112);
                *(_OWORD *)v407 = *(_OWORD *)(v158 + 192);
                *(_OWORD *)&v407[16] = *(_OWORD *)(v158 + 208);
                __int128 v383 = *(_OWORD *)(v158 + 160);
                __int128 v395 = *(_OWORD *)(v158 + 176);
                do
                {
                  int v160 = (_OWORD *)v158;
                  unint64_t v158 = v156;
                  __int128 v161 = *(_OWORD *)(v156 + 16);
                  *int v160 = *(_OWORD *)v156;
                  v160[1] = v161;
                  __int128 v162 = *(_OWORD *)(v156 + 32);
                  __int128 v163 = *(_OWORD *)(v156 + 48);
                  __int128 v164 = *(_OWORD *)(v156 + 80);
                  v160[4] = *(_OWORD *)(v156 + 64);
                  v160[5] = v164;
                  v160[2] = v162;
                  v160[3] = v163;
                  __int128 v165 = *(_OWORD *)(v156 + 96);
                  __int128 v166 = *(_OWORD *)(v156 + 112);
                  __int128 v167 = *(_OWORD *)(v156 + 144);
                  v160[8] = *(_OWORD *)(v156 + 128);
                  v160[9] = v167;
                  v160[6] = v165;
                  v160[7] = v166;
                  __int128 v168 = *(_OWORD *)(v156 + 160);
                  __int128 v169 = *(_OWORD *)(v156 + 176);
                  __int128 v170 = *(_OWORD *)(v156 + 192);
                  *(_OWORD *)((char *)v160 + 205) = *(_OWORD *)(v156 + 205);
                  v160[11] = v169;
                  v160[12] = v170;
                  v160[10] = v168;
                  if (v152 < v155) {
                    break;
                  }
                  uint64_t v171 = (2 * v155) | 1;
                  unint64_t v156 = v8 + 224 * v171;
                  uint64_t v172 = 2 * v155 + 2;
                  if (v172 < v10 && *(double *)(v8 + 224 * v171 + 8) < *(double *)(v156 + 232))
                  {
                    v156 += 224LL;
                    uint64_t v171 = v172;
                  }

                  uint64_t v155 = v171;
                }

                while (*(double *)(v156 + 8) >= v157);
                *(void *)unint64_t v158 = v159;
                *(double *)(v158 + _Block_object_dispose(va, 8) = v157;
                *(_OWORD *)(v158 + 176) = v395;
                *(_OWORD *)(v158 + 192) = *(_OWORD *)v407;
                *(_OWORD *)(v158 + 205) = *(_OWORD *)&v407[13];
                *(_OWORD *)(v158 + 112) = v347;
                *(_OWORD *)(v158 + 12_Block_object_dispose(va, 8) = v359;
                *(_OWORD *)(v158 + 144) = v371;
                *(_OWORD *)(v158 + 160) = v383;
                *(_OWORD *)(v158 + 4_Block_object_dispose(va, 8) = v299;
                *(_OWORD *)(v158 + 64) = v311;
                *(_OWORD *)(v158 + 80) = v323;
                *(_OWORD *)(v158 + 96) = v335;
                *(_OWORD *)(v158 + 16) = v276;
                *(_OWORD *)(v158 + 32) = v287;
              }
            }

            int64_t v153 = v154 - 1;
          }

          while (v154);
          uint64_t v173 = (((unint64_t)v9 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
          while (2)
          {
            uint64_t v174 = 0LL;
            __int128 v277 = *(_OWORD *)v8;
            __int128 v288 = *(_OWORD *)(v8 + 16);
            __int128 v324 = *(_OWORD *)(v8 + 64);
            __int128 v336 = *(_OWORD *)(v8 + 80);
            __int128 v300 = *(_OWORD *)(v8 + 32);
            __int128 v312 = *(_OWORD *)(v8 + 48);
            __int128 v372 = *(_OWORD *)(v8 + 128);
            __int128 v384 = *(_OWORD *)(v8 + 144);
            __int128 v348 = *(_OWORD *)(v8 + 96);
            __int128 v360 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v418 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v418[16] = *(_OWORD *)(v8 + 208);
            __int128 v396 = *(_OWORD *)(v8 + 160);
            __int128 v408 = *(_OWORD *)(v8 + 176);
            unint64_t v175 = v8;
            do
            {
              __int16 v176 = (_OWORD *)v175;
              uint64_t v177 = v174 + 1;
              v175 += 224 * (v174 + 1);
              uint64_t v178 = 2 * v174;
              uint64_t v174 = (2 * v174) | 1;
              uint64_t v179 = v178 + 2;
              if (v179 < v173 && *((double *)&v176[14 * v177] + 1) < *(double *)(v175 + 232))
              {
                v175 += 224LL;
                uint64_t v174 = v179;
              }

              __int128 v180 = *(_OWORD *)(v175 + 16);
              *__int16 v176 = *(_OWORD *)v175;
              v176[1] = v180;
              __int128 v181 = *(_OWORD *)(v175 + 32);
              __int128 v182 = *(_OWORD *)(v175 + 48);
              __int128 v183 = *(_OWORD *)(v175 + 80);
              v176[4] = *(_OWORD *)(v175 + 64);
              v176[5] = v183;
              v176[2] = v181;
              v176[3] = v182;
              __int128 v184 = *(_OWORD *)(v175 + 96);
              __int128 v185 = *(_OWORD *)(v175 + 112);
              __int128 v186 = *(_OWORD *)(v175 + 144);
              v176[8] = *(_OWORD *)(v175 + 128);
              v176[9] = v186;
              v176[6] = v184;
              v176[7] = v185;
              __int128 v187 = *(_OWORD *)(v175 + 160);
              __int128 v188 = *(_OWORD *)(v175 + 176);
              __int128 v189 = *(_OWORD *)(v175 + 192);
              *(_OWORD *)((char *)v176 + 205) = *(_OWORD *)(v175 + 205);
              v176[11] = v188;
              v176[12] = v189;
              v176[10] = v187;
            }

            while (v174 <= (uint64_t)((unint64_t)(v173 - 2) >> 1));
            a2 -= 14;
            if ((__int128 *)v175 != a2)
            {
              __int128 v190 = a2[1];
              *(_OWORD *)unint64_t v175 = *a2;
              *(_OWORD *)(v175 + 16) = v190;
              __int128 v191 = a2[2];
              __int128 v192 = a2[3];
              __int128 v193 = a2[5];
              *(_OWORD *)(v175 + 64) = a2[4];
              *(_OWORD *)(v175 + 80) = v193;
              *(_OWORD *)(v175 + 32) = v191;
              *(_OWORD *)(v175 + 4_Block_object_dispose(va, 8) = v192;
              __int128 v194 = a2[6];
              __int128 v195 = a2[7];
              __int128 v196 = a2[9];
              *(_OWORD *)(v175 + 12_Block_object_dispose(va, 8) = a2[8];
              *(_OWORD *)(v175 + 144) = v196;
              *(_OWORD *)(v175 + 96) = v194;
              *(_OWORD *)(v175 + 112) = v195;
              __int128 v197 = a2[10];
              __int128 v198 = a2[11];
              __int128 v199 = a2[12];
              *(_OWORD *)(v175 + 205) = *(__int128 *)((char *)a2 + 205);
              *(_OWORD *)(v175 + 176) = v198;
              *(_OWORD *)(v175 + 192) = v199;
              *(_OWORD *)(v175 + 160) = v197;
              *a2 = v277;
              a2[1] = v288;
              a2[4] = v324;
              a2[5] = v336;
              a2[2] = v300;
              a2[3] = v312;
              a2[8] = v372;
              a2[9] = v384;
              a2[6] = v348;
              a2[7] = v360;
              *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v418[13];
              a2[11] = v408;
              a2[12] = *(_OWORD *)v418;
              a2[10] = v396;
              uint64_t v200 = v175 - v8 + 224;
              if (v200 >= 225)
              {
                double v202 = *(double *)(v175 + 8);
                if (*(double *)(v8 + 224 * v201 + 8) < v202)
                {
                  uint64_t v203 = *(void *)v175;
                  __int128 v233 = *(_OWORD *)(v175 + 16);
                  __int128 v242 = *(_OWORD *)(v175 + 64);
                  __int128 v245 = *(_OWORD *)(v175 + 80);
                  __int128 v236 = *(_OWORD *)(v175 + 32);
                  __int128 v239 = *(_OWORD *)(v175 + 48);
                  __int128 v254 = *(_OWORD *)(v175 + 128);
                  __int128 v257 = *(_OWORD *)(v175 + 144);
                  __int128 v248 = *(_OWORD *)(v175 + 96);
                  __int128 v251 = *(_OWORD *)(v175 + 112);
                  *(_OWORD *)CFAbsoluteTime v266 = *(_OWORD *)(v175 + 192);
                  *(_OWORD *)&v266[16] = *(_OWORD *)(v175 + 208);
                  __int128 v260 = *(_OWORD *)(v175 + 160);
                  __int128 v263 = *(_OWORD *)(v175 + 176);
                  do
                  {
                    __int16 v204 = (_OWORD *)v175;
                    unint64_t v175 = v8 + 224 * v201;
                    __int128 v205 = *(_OWORD *)(v175 + 16);
                    *__int16 v204 = *(_OWORD *)v175;
                    v204[1] = v205;
                    __int128 v206 = *(_OWORD *)(v175 + 32);
                    __int128 v207 = *(_OWORD *)(v175 + 48);
                    __int128 v208 = *(_OWORD *)(v175 + 80);
                    v204[4] = *(_OWORD *)(v175 + 64);
                    v204[5] = v208;
                    v204[2] = v206;
                    v204[3] = v207;
                    __int128 v209 = *(_OWORD *)(v175 + 96);
                    __int128 v210 = *(_OWORD *)(v175 + 112);
                    __int128 v211 = *(_OWORD *)(v175 + 144);
                    v204[8] = *(_OWORD *)(v175 + 128);
                    v204[9] = v211;
                    v204[6] = v209;
                    v204[7] = v210;
                    __int128 v212 = *(_OWORD *)(v175 + 160);
                    __int128 v213 = *(_OWORD *)(v175 + 176);
                    __int128 v214 = *(_OWORD *)(v175 + 192);
                    *(_OWORD *)((char *)v204 + 205) = *(_OWORD *)(v175 + 205);
                    v204[11] = v213;
                    v204[12] = v214;
                    _BYTE v204[10] = v212;
                    if (!v201) {
                      break;
                    }
                    unint64_t v201 = (v201 - 1) >> 1;
                  }

                  while (*(double *)(v8 + 224 * v201 + 8) < v202);
                  *(void *)unint64_t v175 = v203;
                  *(double *)(v175 + _Block_object_dispose(va, 8) = v202;
                  *(_OWORD *)(v175 + 16) = v233;
                  *(_OWORD *)(v175 + 64) = v242;
                  *(_OWORD *)(v175 + 80) = v245;
                  *(_OWORD *)(v175 + 32) = v236;
                  *(_OWORD *)(v175 + 4_Block_object_dispose(va, 8) = v239;
                  *(_OWORD *)(v175 + 12_Block_object_dispose(va, 8) = v254;
                  *(_OWORD *)(v175 + 144) = v257;
                  *(_OWORD *)(v175 + 96) = v248;
                  *(_OWORD *)(v175 + 112) = v251;
                  __int128 v215 = v260;
                  __int128 v216 = v263;
                  __int128 v217 = *(_OWORD *)v266;
                  __int128 v218 = *(_OWORD *)&v266[13];
LABEL_112:
                  *(_OWORD *)(v175 + 205) = v218;
                  *(_OWORD *)(v175 + 176) = v216;
                  *(_OWORD *)(v175 + 192) = v217;
                  *(_OWORD *)(v175 + 160) = v215;
                }
              }

              if (v173-- <= 2) {
                return;
              }
              continue;
            }

            break;
          }

          *(_OWORD *)unint64_t v175 = v277;
          *(_OWORD *)(v175 + 16) = v288;
          *(_OWORD *)(v175 + 64) = v324;
          *(_OWORD *)(v175 + 80) = v336;
          *(_OWORD *)(v175 + 32) = v300;
          *(_OWORD *)(v175 + 4_Block_object_dispose(va, 8) = v312;
          *(_OWORD *)(v175 + 12_Block_object_dispose(va, 8) = v372;
          *(_OWORD *)(v175 + 144) = v384;
          *(_OWORD *)(v175 + 96) = v348;
          *(_OWORD *)(v175 + 112) = v360;
          __int128 v215 = v396;
          __int128 v216 = v408;
          __int128 v217 = *(_OWORD *)v418;
          __int128 v218 = *(_OWORD *)&v418[13];
          goto LABEL_112;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        uint64_t v12 = (__int128 *)(v8 + 224 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x7000)
        {
          sub_10104972C((__int128 *)(a1 + 224 * v11), (__int128 *)a1, a2 - 14);
        }

        else
        {
          sub_10104972C((__int128 *)a1, (__int128 *)(a1 + 224 * v11), a2 - 14);
          uint64_t v13 = 224 * v11;
          uint64_t v14 = (__int128 *)(224 * v11 + a1 - 224);
          sub_10104972C((__int128 *)(a1 + 224), v14, a2 - 28);
          uint64_t v15 = (__int128 *)(a1 + 224 + v13);
          sub_10104972C((__int128 *)(a1 + 448), v15, a2 - 42);
          sub_10104972C(v14, v12, v15);
          __int128 v267 = *(_OWORD *)a1;
          __int128 v279 = *(_OWORD *)(a1 + 16);
          __int128 v314 = *(_OWORD *)(a1 + 64);
          __int128 v326 = *(_OWORD *)(a1 + 80);
          __int128 v290 = *(_OWORD *)(a1 + 32);
          __int128 v302 = *(_OWORD *)(a1 + 48);
          __int128 v362 = *(_OWORD *)(a1 + 128);
          __int128 v374 = *(_OWORD *)(a1 + 144);
          __int128 v338 = *(_OWORD *)(a1 + 96);
          __int128 v350 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v410 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v410[16] = *(_OWORD *)(a1 + 208);
          __int128 v386 = *(_OWORD *)(a1 + 160);
          __int128 v398 = *(_OWORD *)(a1 + 176);
          __int128 v16 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v16;
          __int128 v17 = v12[2];
          __int128 v18 = v12[3];
          __int128 v19 = v12[5];
          *(_OWORD *)(a1 + 64) = v12[4];
          *(_OWORD *)(a1 + 80) = v19;
          *(_OWORD *)(a1 + 32) = v17;
          *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v18;
          __int128 v20 = v12[6];
          __int128 v21 = v12[7];
          __int128 v22 = v12[9];
          *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v12[8];
          *(_OWORD *)(a1 + 144) = v22;
          *(_OWORD *)(a1 + 96) = v20;
          *(_OWORD *)(a1 + 112) = v21;
          __int128 v23 = v12[10];
          __int128 v24 = v12[11];
          __int128 v25 = v12[12];
          *(_OWORD *)(a1 + 205) = *(__int128 *)((char *)v12 + 205);
          *(_OWORD *)(a1 + 176) = v24;
          *(_OWORD *)(a1 + 192) = v25;
          *(_OWORD *)(a1 + 160) = v23;
          __int128 *v12 = v267;
          v12[1] = v279;
          _DWORD v12[4] = v314;
          void v12[5] = v326;
          _DWORD v12[2] = v290;
          _OWORD v12[3] = v302;
          _WORD v12[8] = v362;
          v12[9] = v374;
          v12[6] = v338;
          v12[7] = v350;
          *(__int128 *)((char *)v12 + 205) = *(_OWORD *)&v410[13];
          v12[11] = v398;
          v12[12] = *(_OWORD *)v410;
          v12[10] = v386;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v26 = *(double *)(a1 + 8);
          uint64_t v60 = *(void *)a1;
          __int128 v241 = *(_OWORD *)(a1 + 64);
          __int128 v244 = *(_OWORD *)(a1 + 80);
          __int128 v235 = *(_OWORD *)(a1 + 32);
          __int128 v238 = *(_OWORD *)(a1 + 48);
          __int128 v253 = *(_OWORD *)(a1 + 128);
          __int128 v256 = *(_OWORD *)(a1 + 144);
          __int128 v247 = *(_OWORD *)(a1 + 96);
          __int128 v250 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)__int16 v265 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v265[16] = *(_OWORD *)(a1 + 208);
          __int128 v259 = *(_OWORD *)(a1 + 160);
          __int128 v262 = *(_OWORD *)(a1 + 176);
          __int128 v232 = *(_OWORD *)(a1 + 16);
          if (v26 >= *((double *)a2 - 27))
          {
            unint64_t v63 = a1 + 224;
            do
            {
              unint64_t v8 = v63;
              double v64 = *(double *)(v63 + 8);
              v63 += 224LL;
            }

            while (v26 >= v64);
          }

          else
          {
            uint64_t v61 = a1;
            do
            {
              unint64_t v8 = v61 + 224;
              double v62 = *(double *)(v61 + 232);
              v61 += 224LL;
            }

            while (v26 >= v62);
          }

          uint64_t v65 = a2;
          if (v8 < (unint64_t)a2)
          {
            int v66 = a2;
            do
            {
              uint64_t v65 = v66 - 14;
              double v67 = *((double *)v66 - 27);
              v66 -= 14;
            }

            while (v26 < v67);
          }

          while (v8 < (unint64_t)v65)
          {
            __int128 v269 = *(_OWORD *)v8;
            __int128 v281 = *(_OWORD *)(v8 + 16);
            __int128 v316 = *(_OWORD *)(v8 + 64);
            __int128 v328 = *(_OWORD *)(v8 + 80);
            __int128 v292 = *(_OWORD *)(v8 + 32);
            __int128 v304 = *(_OWORD *)(v8 + 48);
            __int128 v364 = *(_OWORD *)(v8 + 128);
            __int128 v376 = *(_OWORD *)(v8 + 144);
            __int128 v340 = *(_OWORD *)(v8 + 96);
            __int128 v352 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v412 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v412[16] = *(_OWORD *)(v8 + 208);
            __int128 v388 = *(_OWORD *)(v8 + 160);
            __int128 v400 = *(_OWORD *)(v8 + 176);
            __int128 v68 = v65[1];
            *(_OWORD *)unint64_t v8 = *v65;
            *(_OWORD *)(v8 + 16) = v68;
            __int128 v69 = v65[2];
            __int128 v70 = v65[3];
            __int128 v71 = v65[5];
            *(_OWORD *)(v8 + 64) = v65[4];
            *(_OWORD *)(v8 + 80) = v71;
            *(_OWORD *)(v8 + 32) = v69;
            *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v70;
            __int128 v72 = v65[6];
            __int128 v73 = v65[7];
            __int128 v74 = v65[9];
            *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = v65[8];
            *(_OWORD *)(v8 + 144) = v74;
            *(_OWORD *)(v8 + 96) = v72;
            *(_OWORD *)(v8 + 112) = v73;
            __int128 v75 = v65[10];
            __int128 v76 = v65[11];
            __int128 v77 = v65[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v65 + 205);
            *(_OWORD *)(v8 + 176) = v76;
            *(_OWORD *)(v8 + 192) = v77;
            *(_OWORD *)(v8 + 160) = v75;
            __int128 *v65 = v269;
            v65[1] = v281;
            v65[4] = v316;
            v65[5] = v328;
            v65[2] = v292;
            v65[3] = v304;
            v65[8] = v364;
            v65[9] = v376;
            void v65[6] = v340;
            v65[7] = v352;
            *(__int128 *)((char *)v65 + 205) = *(_OWORD *)&v412[13];
            v65[11] = v400;
            v65[12] = *(_OWORD *)v412;
            v65[10] = v388;
            do
            {
              double v78 = *(double *)(v8 + 232);
              v8 += 224LL;
            }

            while (v26 >= v78);
            do
            {
              double v79 = *((double *)v65 - 27);
              v65 -= 14;
            }

            while (v26 < v79);
          }

          if (v8 - 224 != a1)
          {
            __int128 v80 = *(_OWORD *)(v8 - 208);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
            *(_OWORD *)(a1 + 16) = v80;
            __int128 v81 = *(_OWORD *)(v8 - 192);
            __int128 v82 = *(_OWORD *)(v8 - 176);
            __int128 v83 = *(_OWORD *)(v8 - 144);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
            *(_OWORD *)(a1 + 80) = v83;
            *(_OWORD *)(a1 + 32) = v81;
            *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v82;
            __int128 v84 = *(_OWORD *)(v8 - 128);
            __int128 v85 = *(_OWORD *)(v8 - 112);
            __int128 v86 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 144) = v86;
            *(_OWORD *)(a1 + 96) = v84;
            *(_OWORD *)(a1 + 112) = v85;
            __int128 v87 = *(_OWORD *)(v8 - 64);
            __int128 v88 = *(_OWORD *)(v8 - 48);
            __int128 v89 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
            *(_OWORD *)(a1 + 176) = v88;
            *(_OWORD *)(a1 + 192) = v89;
            *(_OWORD *)(a1 + 160) = v87;
          }

          a4 = 0;
          *(void *)(v8 - 224) = v60;
          *(double *)(v8 - 216) = v26;
          *(_OWORD *)(v8 - 20_Block_object_dispose(va, 8) = v232;
          *(_OWORD *)(v8 - 160) = v241;
          *(_OWORD *)(v8 - 144) = v244;
          *(_OWORD *)(v8 - 192) = v235;
          *(_OWORD *)(v8 - 176) = v238;
          *(_OWORD *)(v8 - 96) = v253;
          *(_OWORD *)(v8 - 80) = v256;
          *(_OWORD *)(v8 - 12_Block_object_dispose(va, 8) = v247;
          *(_OWORD *)(v8 - 112) = v250;
          *(_OWORD *)(v8 - 19) = *(_OWORD *)&v265[13];
          *(_OWORD *)(v8 - 4_Block_object_dispose(va, 8) = v262;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v265;
          *(_OWORD *)(v8 - 64) = v259;
          continue;
        }

        double v26 = *(double *)(a1 + 8);
LABEL_11:
        uint64_t v27 = 0LL;
        uint64_t v28 = *(void *)a1;
        __int128 v240 = *(_OWORD *)(a1 + 64);
        __int128 v243 = *(_OWORD *)(a1 + 80);
        __int128 v252 = *(_OWORD *)(a1 + 128);
        __int128 v255 = *(_OWORD *)(a1 + 144);
        *(_OWORD *)int v264 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v264[16] = *(_OWORD *)(a1 + 208);
        __int128 v258 = *(_OWORD *)(a1 + 160);
        __int128 v261 = *(_OWORD *)(a1 + 176);
        __int128 v246 = *(_OWORD *)(a1 + 96);
        __int128 v249 = *(_OWORD *)(a1 + 112);
        __int128 v234 = *(_OWORD *)(a1 + 32);
        __int128 v237 = *(_OWORD *)(a1 + 48);
        __int128 v231 = *(_OWORD *)(a1 + 16);
        do
        {
          double v29 = *(double *)(a1 + v27 + 232);
          v27 += 224LL;
        }

        while (v29 < v26);
        unint64_t v30 = a1 + v27;
        BOOL v31 = a2;
        if (v27 == 224)
        {
          int v34 = a2;
          while (v30 < (unint64_t)v34)
          {
            int v32 = v34 - 14;
            double v35 = *((double *)v34 - 27);
            v34 -= 14;
            if (v35 < v26) {
              goto LABEL_21;
            }
          }

          int v32 = v34;
        }

        else
        {
          do
          {
            int v32 = v31 - 14;
            double v33 = *((double *)v31 - 27);
            v31 -= 14;
          }

          while (v33 >= v26);
        }

double sub_10104972C(__int128 *a1, __int128 *a2, __int128 *a3)
{
  double result = *((double *)a2 + 1);
  double v4 = *((double *)a3 + 1);
  if (result >= *((double *)a1 + 1))
  {
    if (v4 < result)
    {
      __int128 v96 = a2[10];
      __int128 v100 = a2[11];
      *(_OWORD *)__int128 v104 = a2[12];
      *(_OWORD *)&v104[16] = a2[13];
      __int128 v80 = a2[6];
      __int128 v84 = a2[7];
      __int128 v88 = a2[8];
      __int128 v92 = a2[9];
      __int128 v64 = a2[2];
      __int128 v68 = a2[3];
      __int128 v72 = a2[4];
      __int128 v76 = a2[5];
      __int128 v56 = *a2;
      __int128 v60 = a2[1];
      __int128 v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      __int128 v16 = a3[2];
      __int128 v17 = a3[3];
      __int128 v18 = a3[5];
      a2[4] = a3[4];
      a2[5] = v18;
      a2[2] = v16;
      a2[3] = v17;
      __int128 v19 = a3[6];
      __int128 v20 = a3[7];
      __int128 v21 = a3[9];
      a2[8] = a3[8];
      a2[9] = v21;
      a2[6] = v19;
      a2[7] = v20;
      __int128 v22 = a3[10];
      __int128 v23 = a3[11];
      __int128 v24 = a3[12];
      *(__int128 *)((char *)a2 + 205) = *(__int128 *)((char *)a3 + 205);
      a2[11] = v23;
      a2[12] = v24;
      a2[10] = v22;
      a3[10] = v96;
      a3[11] = v100;
      a3[12] = *(_OWORD *)v104;
      *(__int128 *)((char *)a3 + 205) = *(_OWORD *)&v104[13];
      a3[6] = v80;
      a3[7] = v84;
      a3[8] = v88;
      a3[9] = v92;
      a3[2] = v64;
      a3[3] = v68;
      a3[4] = v72;
      a3[5] = v76;
      *a3 = v56;
      a3[1] = v60;
      double result = *((double *)a2 + 1);
      if (result < *((double *)a1 + 1))
      {
        __int128 v97 = a1[10];
        __int128 v101 = a1[11];
        *(_OWORD *)__int128 v105 = a1[12];
        *(_OWORD *)&v105[16] = a1[13];
        __int128 v81 = a1[6];
        __int128 v85 = a1[7];
        __int128 v89 = a1[8];
        __int128 v93 = a1[9];
        __int128 v65 = a1[2];
        __int128 v69 = a1[3];
        __int128 v73 = a1[4];
        __int128 v77 = a1[5];
        __int128 v57 = *a1;
        __int128 v61 = a1[1];
        __int128 v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        __int128 v26 = a2[2];
        __int128 v27 = a2[3];
        __int128 v28 = a2[5];
        a1[4] = a2[4];
        a1[5] = v28;
        a1[2] = v26;
        a1[3] = v27;
        __int128 v29 = a2[6];
        __int128 v30 = a2[7];
        __int128 v31 = a2[9];
        a1[8] = a2[8];
        a1[9] = v31;
        a1[6] = v29;
        a1[7] = v30;
        __int128 v32 = a2[10];
        __int128 v33 = a2[11];
        __int128 v34 = a2[12];
        *(__int128 *)((char *)a1 + 205) = *(__int128 *)((char *)a2 + 205);
        a1[11] = v33;
        a1[12] = v34;
        a1[10] = v32;
        a2[10] = v97;
        a2[11] = v101;
        a2[12] = *(_OWORD *)v105;
        *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v105[13];
        a2[6] = v81;
        a2[7] = v85;
        a2[8] = v89;
        a2[9] = v93;
        a2[2] = v65;
        a2[3] = v69;
        a2[4] = v73;
        a2[5] = v77;
        double result = *(double *)&v57;
        *a2 = v57;
        a2[1] = v61;
      }
    }
  }

  else
  {
    if (v4 >= result)
    {
      __int128 v98 = a1[10];
      __int128 v102 = a1[11];
      *(_OWORD *)__int128 v106 = a1[12];
      *(_OWORD *)&v106[16] = a1[13];
      __int128 v82 = a1[6];
      __int128 v86 = a1[7];
      __int128 v90 = a1[8];
      __int128 v94 = a1[9];
      __int128 v66 = a1[2];
      __int128 v70 = a1[3];
      __int128 v74 = a1[4];
      __int128 v78 = a1[5];
      __int128 v58 = *a1;
      __int128 v62 = a1[1];
      __int128 v35 = a2[1];
      *a1 = *a2;
      a1[1] = v35;
      __int128 v36 = a2[2];
      __int128 v37 = a2[3];
      __int128 v38 = a2[5];
      a1[4] = a2[4];
      a1[5] = v38;
      a1[2] = v36;
      a1[3] = v37;
      __int128 v39 = a2[6];
      __int128 v40 = a2[7];
      __int128 v41 = a2[9];
      a1[8] = a2[8];
      a1[9] = v41;
      a1[6] = v39;
      a1[7] = v40;
      __int128 v42 = a2[10];
      __int128 v43 = a2[11];
      __int128 v44 = a2[12];
      *(__int128 *)((char *)a1 + 205) = *(__int128 *)((char *)a2 + 205);
      a1[11] = v43;
      a1[12] = v44;
      a1[10] = v42;
      a2[10] = v98;
      a2[11] = v102;
      a2[12] = *(_OWORD *)v106;
      *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v106[13];
      a2[6] = v82;
      a2[7] = v86;
      a2[8] = v90;
      a2[9] = v94;
      a2[2] = v66;
      a2[3] = v70;
      a2[4] = v74;
      a2[5] = v78;
      *a2 = v58;
      a2[1] = v62;
      double result = *((double *)a3 + 1);
      __int128 v95 = a2[10];
      __int128 v99 = a2[11];
      *(_OWORD *)__int128 v103 = a2[12];
      *(_OWORD *)&v103[16] = a2[13];
      __int128 v79 = a2[6];
      __int128 v83 = a2[7];
      __int128 v87 = a2[8];
      __int128 v91 = a2[9];
      __int128 v63 = a2[2];
      __int128 v67 = a2[3];
      __int128 v71 = a2[4];
      __int128 v75 = a2[5];
      __int128 v55 = *a2;
      __int128 v59 = a2[1];
      __int128 v45 = a3[1];
      *a2 = *a3;
      a2[1] = v45;
      __int128 v46 = a3[2];
      __int128 v47 = a3[3];
      __int128 v48 = a3[5];
      a2[4] = a3[4];
      a2[5] = v48;
      a2[2] = v46;
      a2[3] = v47;
      __int128 v49 = a3[6];
      __int128 v50 = a3[7];
      __int128 v51 = a3[9];
      a2[8] = a3[8];
      a2[9] = v51;
      a2[6] = v49;
      a2[7] = v50;
      __int128 v52 = a3[10];
      __int128 v53 = a3[11];
      __int128 v54 = a3[12];
      *(__int128 *)((char *)a2 + 205) = *(__int128 *)((char *)a3 + 205);
      a2[11] = v53;
      a2[12] = v54;
      a2[10] = v52;
    }

    else
    {
      __int128 v95 = a1[10];
      __int128 v99 = a1[11];
      *(_OWORD *)__int128 v103 = a1[12];
      *(_OWORD *)&v103[16] = a1[13];
      __int128 v79 = a1[6];
      __int128 v83 = a1[7];
      __int128 v87 = a1[8];
      __int128 v91 = a1[9];
      __int128 v63 = a1[2];
      __int128 v67 = a1[3];
      __int128 v71 = a1[4];
      __int128 v75 = a1[5];
      __int128 v55 = *a1;
      __int128 v59 = a1[1];
      __int128 v5 = a3[1];
      *a1 = *a3;
      a1[1] = v5;
      __int128 v6 = a3[2];
      __int128 v7 = a3[3];
      __int128 v8 = a3[5];
      a1[4] = a3[4];
      a1[5] = v8;
      a1[2] = v6;
      a1[3] = v7;
      __int128 v9 = a3[6];
      __int128 v10 = a3[7];
      __int128 v11 = a3[9];
      a1[8] = a3[8];
      a1[9] = v11;
      a1[6] = v9;
      a1[7] = v10;
      __int128 v12 = a3[10];
      __int128 v13 = a3[11];
      __int128 v14 = a3[12];
      *(__int128 *)((char *)a1 + 205) = *(__int128 *)((char *)a3 + 205);
      a1[11] = v13;
      a1[12] = v14;
      a1[10] = v12;
    }

    a3[10] = v95;
    a3[11] = v99;
    a3[12] = *(_OWORD *)v103;
    *(__int128 *)((char *)a3 + 205) = *(_OWORD *)&v103[13];
    a3[6] = v79;
    a3[7] = v83;
    a3[8] = v87;
    a3[9] = v91;
    a3[2] = v63;
    a3[3] = v67;
    a3[4] = v71;
    a3[5] = v75;
    double result = *(double *)&v55;
    *a3 = v55;
    a3[1] = v59;
  }

  return result;
}

BOOL sub_101049AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7LL * ((a2 - a1) >> 5);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (*(double *)(a2 - 216) < *(double *)(a1 + 8))
      {
        __int128 v123 = *(_OWORD *)(a1 + 160);
        __int128 v129 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)BOOL v135 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v135[16] = *(_OWORD *)(a1 + 208);
        __int128 v99 = *(_OWORD *)(a1 + 96);
        __int128 v105 = *(_OWORD *)(a1 + 112);
        __int128 v111 = *(_OWORD *)(a1 + 128);
        __int128 v117 = *(_OWORD *)(a1 + 144);
        __int128 v75 = *(_OWORD *)(a1 + 32);
        __int128 v81 = *(_OWORD *)(a1 + 48);
        __int128 v87 = *(_OWORD *)(a1 + 64);
        __int128 v93 = *(_OWORD *)(a1 + 80);
        __int128 v63 = *(_OWORD *)a1;
        __int128 v69 = *(_OWORD *)(a1 + 16);
        __int128 v6 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 224);
        *(_OWORD *)(a1 + 16) = v6;
        __int128 v7 = *(_OWORD *)(a2 - 192);
        __int128 v8 = *(_OWORD *)(a2 - 176);
        __int128 v9 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v8;
        __int128 v10 = *(_OWORD *)(a2 - 128);
        __int128 v11 = *(_OWORD *)(a2 - 112);
        __int128 v12 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 144) = v12;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 112) = v11;
        __int128 v13 = *(_OWORD *)(a2 - 64);
        __int128 v14 = *(_OWORD *)(a2 - 48);
        __int128 v15 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a2 - 64) = v123;
        *(_OWORD *)(a2 - 4_Block_object_dispose(va, 8) = v129;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v135;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v135[13];
        *(_OWORD *)(a2 - 12_Block_object_dispose(va, 8) = v99;
        *(_OWORD *)(a2 - 112) = v105;
        *(_OWORD *)(a2 - 96) = v111;
        *(_OWORD *)(a2 - 80) = v117;
        *(_OWORD *)(a2 - 192) = v75;
        *(_OWORD *)(a2 - 176) = v81;
        *(_OWORD *)(a2 - 160) = v87;
        *(_OWORD *)(a2 - 144) = v93;
        *(_OWORD *)(a2 - 224) = v63;
        *(_OWORD *)(a2 - 20_Block_object_dispose(va, 8) = v69;
      }

      return result;
    case 3LL:
      sub_10104972C((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a2 - 224));
      return 1LL;
    case 4LL:
      sub_10104A10C(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1LL;
    case 5LL:
      __int128 v31 = (__int128 *)(a1 + 224);
      __int128 v32 = (__int128 *)(a1 + 448);
      __int128 v33 = (__int128 *)(a1 + 672);
      sub_10104A10C(a1, a1 + 224, a1 + 448, a1 + 672);
      __int128 v125 = *(_OWORD *)(a1 + 832);
      __int128 v131 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)uint64_t v136 = *(_OWORD *)(a1 + 864);
      *(_OWORD *)&v136[16] = *(_OWORD *)(a1 + 880);
      __int128 v101 = *(_OWORD *)(a1 + 768);
      __int128 v107 = *(_OWORD *)(a1 + 784);
      __int128 v113 = *(_OWORD *)(a1 + 800);
      __int128 v119 = *(_OWORD *)(a1 + 816);
      __int128 v77 = *(_OWORD *)(a1 + 704);
      __int128 v83 = *(_OWORD *)(a1 + 720);
      __int128 v89 = *(_OWORD *)(a1 + 736);
      __int128 v95 = *(_OWORD *)(a1 + 752);
      __int128 v65 = *v33;
      __int128 v71 = *(_OWORD *)(a1 + 688);
      __int128 v34 = *(_OWORD *)(a2 - 208);
      __int128 *v33 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)(a1 + 68_Block_object_dispose(va, 8) = v34;
      __int128 v35 = *(_OWORD *)(a2 - 192);
      __int128 v36 = *(_OWORD *)(a2 - 176);
      __int128 v37 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 704) = v35;
      *(_OWORD *)(a1 + 720) = v36;
      __int128 v38 = *(_OWORD *)(a2 - 128);
      __int128 v39 = *(_OWORD *)(a2 - 112);
      __int128 v40 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 816) = v40;
      *(_OWORD *)(a1 + 76_Block_object_dispose(va, 8) = v38;
      *(_OWORD *)(a1 + 784) = v39;
      __int128 v41 = *(_OWORD *)(a2 - 64);
      __int128 v42 = *(_OWORD *)(a2 - 48);
      __int128 v43 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 877) = *(_OWORD *)(a2 - 19);
      *(_OWORD *)(a1 + 84_Block_object_dispose(va, 8) = v42;
      *(_OWORD *)(a1 + 864) = v43;
      *(_OWORD *)(a1 + 832) = v41;
      *(_OWORD *)(a2 - 64) = v125;
      *(_OWORD *)(a2 - 4_Block_object_dispose(va, 8) = v131;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v136;
      *(_OWORD *)(a2 - 19) = *(_OWORD *)&v136[13];
      *(_OWORD *)(a2 - 12_Block_object_dispose(va, 8) = v101;
      *(_OWORD *)(a2 - 112) = v107;
      *(_OWORD *)(a2 - 96) = v113;
      *(_OWORD *)(a2 - 80) = v119;
      *(_OWORD *)(a2 - 192) = v77;
      *(_OWORD *)(a2 - 176) = v83;
      *(_OWORD *)(a2 - 160) = v89;
      *(_OWORD *)(a2 - 144) = v95;
      *(_OWORD *)(a2 - 224) = v65;
      *(_OWORD *)(a2 - 20_Block_object_dispose(va, 8) = v71;
      __int128 v126 = *(_OWORD *)(a1 + 608);
      __int128 v132 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)unint64_t v137 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)&v137[16] = *(_OWORD *)(a1 + 656);
      __int128 v102 = *(_OWORD *)(a1 + 544);
      __int128 v108 = *(_OWORD *)(a1 + 560);
      __int128 v114 = *(_OWORD *)(a1 + 576);
      __int128 v120 = *(_OWORD *)(a1 + 592);
      __int128 v78 = *(_OWORD *)(a1 + 480);
      __int128 v84 = *(_OWORD *)(a1 + 496);
      __int128 v90 = *(_OWORD *)(a1 + 512);
      __int128 v96 = *(_OWORD *)(a1 + 528);
      __int128 v66 = *v32;
      __int128 v72 = *(_OWORD *)(a1 + 464);
      __int128 v44 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a1 + 60_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 624) = v44;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 653) = *(_OWORD *)(a1 + 877);
      __int128 v45 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 560) = v45;
      __int128 v46 = *(_OWORD *)(a1 + 816);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a1 + 592) = v46;
      __int128 v47 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 496) = v47;
      __int128 v48 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = v48;
      __int128 v49 = *(_OWORD *)(a1 + 688);
      __int128 *v32 = *v33;
      *(_OWORD *)(a1 + 464) = v49;
      *(_OWORD *)(a1 + 832) = v126;
      *(_OWORD *)(a1 + 84_Block_object_dispose(va, 8) = v132;
      *(_OWORD *)(a1 + 864) = *(_OWORD *)v137;
      *(_OWORD *)(a1 + 877) = *(_OWORD *)&v137[13];
      *(_OWORD *)(a1 + 76_Block_object_dispose(va, 8) = v102;
      *(_OWORD *)(a1 + 784) = v108;
      *(_OWORD *)(a1 + 800) = v114;
      *(_OWORD *)(a1 + 816) = v120;
      *(_OWORD *)(a1 + 704) = v78;
      *(_OWORD *)(a1 + 720) = v84;
      *(_OWORD *)(a1 + 736) = v90;
      *(_OWORD *)(a1 + 752) = v96;
      BOOL v50 = *(double *)(a1 + 456) < *(double *)(a1 + 232);
      __int128 *v33 = v66;
      *(_OWORD *)(a1 + 68_Block_object_dispose(va, 8) = v72;
      if (!v50) {
        return 1LL;
      }
      __int128 v127 = *(_OWORD *)(a1 + 384);
      __int128 v133 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)uint64_t v138 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&v138[16] = *(_OWORD *)(a1 + 432);
      __int128 v103 = *(_OWORD *)(a1 + 320);
      __int128 v109 = *(_OWORD *)(a1 + 336);
      __int128 v115 = *(_OWORD *)(a1 + 352);
      __int128 v121 = *(_OWORD *)(a1 + 368);
      __int128 v79 = *(_OWORD *)(a1 + 256);
      __int128 v85 = *(_OWORD *)(a1 + 272);
      __int128 v91 = *(_OWORD *)(a1 + 288);
      __int128 v97 = *(_OWORD *)(a1 + 304);
      __int128 v67 = *v31;
      __int128 v73 = *(_OWORD *)(a1 + 240);
      __int128 v51 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 400) = v51;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 429) = *(_OWORD *)(a1 + 653);
      __int128 v52 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 336) = v52;
      __int128 v53 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v53;
      __int128 v54 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 272) = v54;
      __int128 v55 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 304) = v55;
      __int128 v56 = *(_OWORD *)(a1 + 464);
      *__int128 v31 = *v32;
      *(_OWORD *)(a1 + 240) = v56;
      *(_OWORD *)(a1 + 60_Block_object_dispose(va, 8) = v127;
      *(_OWORD *)(a1 + 624) = v133;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v138;
      *(_OWORD *)(a1 + 653) = *(_OWORD *)&v138[13];
      *(_OWORD *)(a1 + 544) = v103;
      *(_OWORD *)(a1 + 560) = v109;
      *(_OWORD *)(a1 + 576) = v115;
      *(_OWORD *)(a1 + 592) = v121;
      *(_OWORD *)(a1 + 480) = v79;
      *(_OWORD *)(a1 + 496) = v85;
      *(_OWORD *)(a1 + 512) = v91;
      *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = v97;
      BOOL v50 = *(double *)(a1 + 232) < *(double *)(a1 + 8);
      __int128 *v32 = v67;
      *(_OWORD *)(a1 + 464) = v73;
      if (!v50) {
        return 1LL;
      }
      __int128 v128 = *(_OWORD *)(a1 + 160);
      __int128 v134 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)double v139 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v139[16] = *(_OWORD *)(a1 + 208);
      __int128 v104 = *(_OWORD *)(a1 + 96);
      __int128 v110 = *(_OWORD *)(a1 + 112);
      __int128 v116 = *(_OWORD *)(a1 + 128);
      __int128 v122 = *(_OWORD *)(a1 + 144);
      __int128 v80 = *(_OWORD *)(a1 + 32);
      __int128 v86 = *(_OWORD *)(a1 + 48);
      __int128 v92 = *(_OWORD *)(a1 + 64);
      __int128 v98 = *(_OWORD *)(a1 + 80);
      __int128 v68 = *(_OWORD *)a1;
      __int128 v74 = *(_OWORD *)(a1 + 16);
      __int128 v57 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 176) = v57;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 205) = *(_OWORD *)(a1 + 429);
      __int128 v58 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 112) = v58;
      __int128 v59 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 144) = v59;
      __int128 v60 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v60;
      __int128 v61 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 80) = v61;
      __int128 v62 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)a1 = *v31;
      *(_OWORD *)(a1 + 16) = v62;
      *(_OWORD *)(a1 + 384) = v128;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v139;
      *(_OWORD *)(a1 + 429) = *(_OWORD *)&v139[13];
      *(_OWORD *)(a1 + 320) = v104;
      *(_OWORD *)(a1 + 336) = v110;
      *(_OWORD *)(a1 + 352) = v116;
      *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v122;
      *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = v80;
      *(_OWORD *)(a1 + 272) = v86;
      *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = v92;
      *(_OWORD *)(a1 + 304) = v98;
      BOOL result = 1LL;
      *__int128 v31 = v68;
      *(_OWORD *)(a1 + 240) = v74;
      return result;
    default:
      uint64_t v16 = a1 + 448;
      sub_10104972C((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
      uint64_t v17 = a1 + 672;
      if (a1 + 672 == a2) {
        return 1LL;
      }
      uint64_t v18 = 0LL;
      int v19 = 0;
      break;
  }

  while (1)
  {
    double v20 = *(double *)(v17 + 8);
    if (v20 < *(double *)(v16 + 8))
    {
      uint64_t v21 = *(void *)v17;
      __int128 v124 = *(_OWORD *)(v17 + 176);
      *(_OWORD *)__int128 v130 = *(_OWORD *)(v17 + 192);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v17 + 208);
      __int128 v100 = *(_OWORD *)(v17 + 112);
      __int128 v106 = *(_OWORD *)(v17 + 128);
      __int128 v112 = *(_OWORD *)(v17 + 144);
      __int128 v118 = *(_OWORD *)(v17 + 160);
      __int128 v76 = *(_OWORD *)(v17 + 48);
      __int128 v82 = *(_OWORD *)(v17 + 64);
      __int128 v88 = *(_OWORD *)(v17 + 80);
      __int128 v94 = *(_OWORD *)(v17 + 96);
      uint64_t v22 = v18;
      __int128 v64 = *(_OWORD *)(v17 + 16);
      __int128 v70 = *(_OWORD *)(v17 + 32);
      while (1)
      {
        uint64_t v23 = a1 + v22;
        __int128 v24 = *(_OWORD *)(a1 + v22 + 624);
        *(_OWORD *)(v23 + 832) = *(_OWORD *)(a1 + v22 + 608);
        *(_OWORD *)(v23 + 84_Block_object_dispose(va, 8) = v24;
        *(_OWORD *)(v23 + 864) = *(_OWORD *)(a1 + v22 + 640);
        __int128 v25 = *(_OWORD *)(a1 + v22 + 560);
        *(_OWORD *)(v23 + 76_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + v22 + 544);
        *(_OWORD *)(v23 + 784) = v25;
        __int128 v26 = *(_OWORD *)(a1 + v22 + 592);
        *(_OWORD *)(v23 + 800) = *(_OWORD *)(a1 + v22 + 576);
        *(_OWORD *)(v23 + 816) = v26;
        __int128 v27 = *(_OWORD *)(a1 + v22 + 496);
        *(_OWORD *)(v23 + 704) = *(_OWORD *)(a1 + v22 + 480);
        *(_OWORD *)(v23 + 720) = v27;
        __int128 v28 = *(_OWORD *)(a1 + v22 + 528);
        *(_OWORD *)(v23 + 736) = *(_OWORD *)(a1 + v22 + 512);
        *(_OWORD *)(v23 + 752) = v28;
        __int128 v29 = *(_OWORD *)(a1 + v22 + 464);
        *(_OWORD *)(v23 + 672) = *(_OWORD *)(a1 + v22 + 448);
        *(_OWORD *)(v23 + 68_Block_object_dispose(va, 8) = v29;
        *(_OWORD *)(a1 + v22 + 877) = *(_OWORD *)(a1 + v22 + 653);
        if (v22 == -448) {
          break;
        }
        v22 -= 224LL;
        if (v20 >= *(double *)(v23 + 232))
        {
          uint64_t v30 = a1 + v22 + 672;
          goto LABEL_13;
        }
      }

      uint64_t v30 = a1;
LABEL_13:
      *(void *)uint64_t v30 = v21;
      *(double *)(v30 + _Block_object_dispose(va, 8) = v20;
      *(_OWORD *)(v30 + 176) = v124;
      *(_OWORD *)(v30 + 192) = *(_OWORD *)v130;
      *(_OWORD *)(v30 + 205) = *(_OWORD *)&v130[13];
      *(_OWORD *)(v30 + 112) = v100;
      *(_OWORD *)(v30 + 12_Block_object_dispose(va, 8) = v106;
      *(_OWORD *)(v30 + 144) = v112;
      *(_OWORD *)(v30 + 160) = v118;
      *(_OWORD *)(v30 + 4_Block_object_dispose(va, 8) = v76;
      *(_OWORD *)(v30 + 64) = v82;
      *(_OWORD *)(v30 + 80) = v88;
      *(_OWORD *)(v30 + 96) = v94;
      ++v19;
      *(_OWORD *)(v30 + 16) = v64;
      *(_OWORD *)(v30 + 32) = v70;
      if (v19 == 8) {
        return v17 + 224 == a2;
      }
    }

    uint64_t v16 = v17;
    v18 += 224LL;
    v17 += 224LL;
    if (v17 == a2) {
      return 1LL;
    }
  }

double sub_10104A10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result = *(double *)(a4 + 8);
  if (result < *(double *)(a3 + 8))
  {
    __int128 v69 = *(_OWORD *)(a3 + 160);
    __int128 v72 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)__int128 v75 = *(_OWORD *)(a3 + 192);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a3 + 208);
    __int128 v57 = *(_OWORD *)(a3 + 96);
    __int128 v60 = *(_OWORD *)(a3 + 112);
    __int128 v63 = *(_OWORD *)(a3 + 128);
    __int128 v66 = *(_OWORD *)(a3 + 144);
    __int128 v45 = *(_OWORD *)(a3 + 32);
    __int128 v48 = *(_OWORD *)(a3 + 48);
    __int128 v51 = *(_OWORD *)(a3 + 64);
    __int128 v54 = *(_OWORD *)(a3 + 80);
    __int128 v39 = *(_OWORD *)a3;
    __int128 v42 = *(_OWORD *)(a3 + 16);
    __int128 v9 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v9;
    __int128 v10 = *(_OWORD *)(a4 + 32);
    __int128 v11 = *(_OWORD *)(a4 + 48);
    __int128 v12 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 80) = v12;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v11;
    __int128 v13 = *(_OWORD *)(a4 + 96);
    __int128 v14 = *(_OWORD *)(a4 + 112);
    __int128 v15 = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 144) = v15;
    *(_OWORD *)(a3 + 96) = v13;
    *(_OWORD *)(a3 + 112) = v14;
    __int128 v16 = *(_OWORD *)(a4 + 160);
    __int128 v17 = *(_OWORD *)(a4 + 176);
    __int128 v18 = *(_OWORD *)(a4 + 192);
    *(_OWORD *)(a3 + 205) = *(_OWORD *)(a4 + 205);
    *(_OWORD *)(a3 + 176) = v17;
    *(_OWORD *)(a3 + 192) = v18;
    *(_OWORD *)(a3 + 160) = v16;
    *(_OWORD *)(a4 + 160) = v69;
    *(_OWORD *)(a4 + 176) = v72;
    *(_OWORD *)(a4 + 192) = *(_OWORD *)v75;
    *(_OWORD *)(a4 + 205) = *(_OWORD *)&v75[13];
    *(_OWORD *)(a4 + 96) = v57;
    *(_OWORD *)(a4 + 112) = v60;
    *(_OWORD *)(a4 + 12_Block_object_dispose(va, 8) = v63;
    *(_OWORD *)(a4 + 144) = v66;
    *(_OWORD *)(a4 + 32) = v45;
    *(_OWORD *)(a4 + 4_Block_object_dispose(va, 8) = v48;
    *(_OWORD *)(a4 + 64) = v51;
    *(_OWORD *)(a4 + 80) = v54;
    *(_OWORD *)a4 = v39;
    *(_OWORD *)(a4 + 16) = v42;
    double result = *(double *)(a3 + 8);
    if (result < *(double *)(a2 + 8))
    {
      __int128 v70 = *(_OWORD *)(a2 + 160);
      __int128 v73 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)__int128 v76 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)&v76[16] = *(_OWORD *)(a2 + 208);
      __int128 v58 = *(_OWORD *)(a2 + 96);
      __int128 v61 = *(_OWORD *)(a2 + 112);
      __int128 v64 = *(_OWORD *)(a2 + 128);
      __int128 v67 = *(_OWORD *)(a2 + 144);
      __int128 v46 = *(_OWORD *)(a2 + 32);
      __int128 v49 = *(_OWORD *)(a2 + 48);
      __int128 v52 = *(_OWORD *)(a2 + 64);
      __int128 v55 = *(_OWORD *)(a2 + 80);
      __int128 v40 = *(_OWORD *)a2;
      __int128 v43 = *(_OWORD *)(a2 + 16);
      __int128 v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v19;
      __int128 v20 = *(_OWORD *)(a3 + 32);
      __int128 v21 = *(_OWORD *)(a3 + 48);
      __int128 v22 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v22;
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v21;
      __int128 v23 = *(_OWORD *)(a3 + 96);
      __int128 v24 = *(_OWORD *)(a3 + 112);
      __int128 v25 = *(_OWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(a2 + 144) = v25;
      *(_OWORD *)(a2 + 96) = v23;
      *(_OWORD *)(a2 + 112) = v24;
      __int128 v26 = *(_OWORD *)(a3 + 160);
      __int128 v27 = *(_OWORD *)(a3 + 176);
      __int128 v28 = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 205) = *(_OWORD *)(a3 + 205);
      *(_OWORD *)(a2 + 176) = v27;
      *(_OWORD *)(a2 + 192) = v28;
      *(_OWORD *)(a2 + 160) = v26;
      *(_OWORD *)(a3 + 160) = v70;
      *(_OWORD *)(a3 + 176) = v73;
      *(_OWORD *)(a3 + 192) = *(_OWORD *)v76;
      *(_OWORD *)(a3 + 205) = *(_OWORD *)&v76[13];
      *(_OWORD *)(a3 + 96) = v58;
      *(_OWORD *)(a3 + 112) = v61;
      *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = v64;
      *(_OWORD *)(a3 + 144) = v67;
      *(_OWORD *)(a3 + 32) = v46;
      *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v49;
      *(_OWORD *)(a3 + 64) = v52;
      *(_OWORD *)(a3 + 80) = v55;
      *(_OWORD *)a3 = v40;
      *(_OWORD *)(a3 + 16) = v43;
      double result = *(double *)(a2 + 8);
      if (result < *(double *)(a1 + 8))
      {
        __int128 v71 = *(_OWORD *)(a1 + 160);
        __int128 v74 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)__int128 v77 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v77[16] = *(_OWORD *)(a1 + 208);
        __int128 v59 = *(_OWORD *)(a1 + 96);
        __int128 v62 = *(_OWORD *)(a1 + 112);
        __int128 v65 = *(_OWORD *)(a1 + 128);
        __int128 v68 = *(_OWORD *)(a1 + 144);
        __int128 v47 = *(_OWORD *)(a1 + 32);
        __int128 v50 = *(_OWORD *)(a1 + 48);
        __int128 v53 = *(_OWORD *)(a1 + 64);
        __int128 v56 = *(_OWORD *)(a1 + 80);
        __int128 v41 = *(_OWORD *)a1;
        __int128 v44 = *(_OWORD *)(a1 + 16);
        __int128 v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        __int128 v30 = *(_OWORD *)(a2 + 32);
        __int128 v31 = *(_OWORD *)(a2 + 48);
        __int128 v32 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v32;
        *(_OWORD *)(a1 + 32) = v30;
        *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v31;
        __int128 v33 = *(_OWORD *)(a2 + 96);
        __int128 v34 = *(_OWORD *)(a2 + 112);
        __int128 v35 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v35;
        *(_OWORD *)(a1 + 96) = v33;
        *(_OWORD *)(a1 + 112) = v34;
        __int128 v36 = *(_OWORD *)(a2 + 160);
        __int128 v37 = *(_OWORD *)(a2 + 176);
        __int128 v38 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 205);
        *(_OWORD *)(a1 + 176) = v37;
        *(_OWORD *)(a1 + 192) = v38;
        *(_OWORD *)(a1 + 160) = v36;
        *(_OWORD *)(a2 + 160) = v71;
        *(_OWORD *)(a2 + 176) = v74;
        *(_OWORD *)(a2 + 192) = *(_OWORD *)v77;
        *(_OWORD *)(a2 + 205) = *(_OWORD *)&v77[13];
        *(_OWORD *)(a2 + 96) = v59;
        *(_OWORD *)(a2 + 112) = v62;
        *(_OWORD *)(a2 + 12_Block_object_dispose(va, 8) = v65;
        *(_OWORD *)(a2 + 144) = v68;
        *(_OWORD *)(a2 + 32) = v47;
        *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v50;
        *(_OWORD *)(a2 + 64) = v53;
        *(_OWORD *)(a2 + 80) = v56;
        double result = *(double *)&v41;
        *(_OWORD *)a2 = v41;
        *(_OWORD *)(a2 + 16) = v44;
      }
    }
  }

  return result;
}

void sub_10104A3AC(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = (uint64_t)a2 - v8;
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (*((double *)a2 - 27) < *(double *)(v8 + 8))
        {
          __int128 v270 = *(_OWORD *)v8;
          __int128 v282 = *(_OWORD *)(v8 + 16);
          __int128 v317 = *(_OWORD *)(v8 + 64);
          __int128 v329 = *(_OWORD *)(v8 + 80);
          __int128 v293 = *(_OWORD *)(v8 + 32);
          __int128 v305 = *(_OWORD *)(v8 + 48);
          __int128 v365 = *(_OWORD *)(v8 + 128);
          __int128 v377 = *(_OWORD *)(v8 + 144);
          __int128 v341 = *(_OWORD *)(v8 + 96);
          __int128 v353 = *(_OWORD *)(v8 + 112);
          *(_OWORD *)v413 = *(_OWORD *)(v8 + 192);
          *(_OWORD *)&v413[16] = *(_OWORD *)(v8 + 208);
          __int128 v389 = *(_OWORD *)(v8 + 160);
          __int128 v401 = *(_OWORD *)(v8 + 176);
          __int128 v90 = *(a2 - 13);
          *(_OWORD *)unint64_t v8 = *(a2 - 14);
          *(_OWORD *)(v8 + 16) = v90;
          __int128 v91 = *(a2 - 12);
          __int128 v92 = *(a2 - 11);
          __int128 v93 = *(a2 - 9);
          *(_OWORD *)(v8 + 64) = *(a2 - 10);
          *(_OWORD *)(v8 + 80) = v93;
          *(_OWORD *)(v8 + 32) = v91;
          *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v92;
          __int128 v94 = *(a2 - 8);
          __int128 v95 = *(a2 - 7);
          __int128 v96 = *(a2 - 5);
          *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = *(a2 - 6);
          *(_OWORD *)(v8 + 144) = v96;
          *(_OWORD *)(v8 + 96) = v94;
          *(_OWORD *)(v8 + 112) = v95;
          __int128 v97 = *(a2 - 4);
          __int128 v98 = *(a2 - 3);
          __int128 v99 = *(a2 - 2);
          *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 176) = v98;
          *(_OWORD *)(v8 + 192) = v99;
          *(_OWORD *)(v8 + 160) = v97;
          *(a2 - 14) = v270;
          *(a2 - 13) = v282;
          *(a2 - 10) = v317;
          *(a2 - 9) = v329;
          *(a2 - 12) = v293;
          *(a2 - 11) = v305;
          *(a2 - 6) = v365;
          *(a2 - 5) = v377;
          *(a2 - _Block_object_dispose(va, 8) = v341;
          *(a2 - 7) = v353;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v413[13];
          *(a2 - 3) = v401;
          *(a2 - 2) = *(_OWORD *)v413;
          *(a2 - 4) = v389;
        }

        return;
      case 3LL:
        sub_10104972C((__int128 *)v8, (__int128 *)(v8 + 224), a2 - 14);
        return;
      case 4LL:
        sub_10104A10C(v8, v8 + 224, v8 + 448, (uint64_t)(a2 - 14));
        return;
      case 5LL:
        __int128 v100 = (__int128 *)(v8 + 224);
        __int128 v101 = (__int128 *)(v8 + 448);
        __int128 v102 = (__int128 *)(v8 + 672);
        sub_10104A10C(v8, v8 + 224, v8 + 448, v8 + 672);
        if (*((double *)a2 - 27) < *(double *)(v8 + 680))
        {
          __int128 v318 = *(_OWORD *)(v8 + 736);
          __int128 v330 = *(_OWORD *)(v8 + 752);
          __int128 v294 = *(_OWORD *)(v8 + 704);
          __int128 v306 = *(_OWORD *)(v8 + 720);
          __int128 v366 = *(_OWORD *)(v8 + 800);
          __int128 v378 = *(_OWORD *)(v8 + 816);
          __int128 v342 = *(_OWORD *)(v8 + 768);
          __int128 v354 = *(_OWORD *)(v8 + 784);
          *(_OWORD *)v414 = *(_OWORD *)(v8 + 864);
          *(_OWORD *)&v414[16] = *(_OWORD *)(v8 + 880);
          __int128 v390 = *(_OWORD *)(v8 + 832);
          __int128 v402 = *(_OWORD *)(v8 + 848);
          __int128 v271 = *v102;
          __int128 v283 = *(_OWORD *)(v8 + 688);
          __int128 v103 = *(a2 - 13);
          __int128 *v102 = *(a2 - 14);
          *(_OWORD *)(v8 + 68_Block_object_dispose(va, 8) = v103;
          __int128 v104 = *(a2 - 12);
          __int128 v105 = *(a2 - 11);
          __int128 v106 = *(a2 - 9);
          *(_OWORD *)(v8 + 736) = *(a2 - 10);
          *(_OWORD *)(v8 + 752) = v106;
          *(_OWORD *)(v8 + 704) = v104;
          *(_OWORD *)(v8 + 720) = v105;
          __int128 v107 = *(a2 - 8);
          __int128 v108 = *(a2 - 7);
          __int128 v109 = *(a2 - 5);
          *(_OWORD *)(v8 + 800) = *(a2 - 6);
          *(_OWORD *)(v8 + 816) = v109;
          *(_OWORD *)(v8 + 76_Block_object_dispose(va, 8) = v107;
          *(_OWORD *)(v8 + 784) = v108;
          __int128 v110 = *(a2 - 4);
          __int128 v111 = *(a2 - 3);
          __int128 v112 = *(a2 - 2);
          *(_OWORD *)(v8 + 877) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 84_Block_object_dispose(va, 8) = v111;
          *(_OWORD *)(v8 + 864) = v112;
          *(_OWORD *)(v8 + 832) = v110;
          *(a2 - 14) = v271;
          *(a2 - 13) = v283;
          *(a2 - 10) = v318;
          *(a2 - 9) = v330;
          *(a2 - 12) = v294;
          *(a2 - 11) = v306;
          *(a2 - 6) = v366;
          *(a2 - 5) = v378;
          *(a2 - _Block_object_dispose(va, 8) = v342;
          *(a2 - 7) = v354;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v414[13];
          *(a2 - 3) = v402;
          *(a2 - 2) = *(_OWORD *)v414;
          *(a2 - 4) = v390;
          if (*(double *)(v8 + 680) < *(double *)(v8 + 456))
          {
            __int128 v391 = *(_OWORD *)(v8 + 608);
            __int128 v403 = *(_OWORD *)(v8 + 624);
            *(_OWORD *)v415 = *(_OWORD *)(v8 + 640);
            *(_OWORD *)&v415[16] = *(_OWORD *)(v8 + 656);
            __int128 v343 = *(_OWORD *)(v8 + 544);
            __int128 v355 = *(_OWORD *)(v8 + 560);
            __int128 v367 = *(_OWORD *)(v8 + 576);
            __int128 v379 = *(_OWORD *)(v8 + 592);
            __int128 v295 = *(_OWORD *)(v8 + 480);
            __int128 v307 = *(_OWORD *)(v8 + 496);
            __int128 v319 = *(_OWORD *)(v8 + 512);
            __int128 v331 = *(_OWORD *)(v8 + 528);
            __int128 v272 = *v101;
            __int128 v284 = *(_OWORD *)(v8 + 464);
            __int128 v113 = *(_OWORD *)(v8 + 848);
            *(_OWORD *)(v8 + 60_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 832);
            *(_OWORD *)(v8 + 624) = v113;
            *(_OWORD *)(v8 + 640) = *(_OWORD *)(v8 + 864);
            *(_OWORD *)(v8 + 653) = *(_OWORD *)(v8 + 877);
            __int128 v114 = *(_OWORD *)(v8 + 784);
            *(_OWORD *)(v8 + 544) = *(_OWORD *)(v8 + 768);
            *(_OWORD *)(v8 + 560) = v114;
            __int128 v115 = *(_OWORD *)(v8 + 816);
            *(_OWORD *)(v8 + 576) = *(_OWORD *)(v8 + 800);
            *(_OWORD *)(v8 + 592) = v115;
            __int128 v116 = *(_OWORD *)(v8 + 720);
            *(_OWORD *)(v8 + 480) = *(_OWORD *)(v8 + 704);
            *(_OWORD *)(v8 + 496) = v116;
            __int128 v117 = *(_OWORD *)(v8 + 752);
            *(_OWORD *)(v8 + 512) = *(_OWORD *)(v8 + 736);
            *(_OWORD *)(v8 + 52_Block_object_dispose(va, 8) = v117;
            __int128 v118 = *(_OWORD *)(v8 + 688);
            __int128 *v101 = *v102;
            *(_OWORD *)(v8 + 464) = v118;
            *(_OWORD *)(v8 + 832) = v391;
            *(_OWORD *)(v8 + 84_Block_object_dispose(va, 8) = v403;
            *(_OWORD *)(v8 + 864) = *(_OWORD *)v415;
            *(_OWORD *)(v8 + 877) = *(_OWORD *)&v415[13];
            *(_OWORD *)(v8 + 76_Block_object_dispose(va, 8) = v343;
            *(_OWORD *)(v8 + 784) = v355;
            *(_OWORD *)(v8 + 800) = v367;
            *(_OWORD *)(v8 + 816) = v379;
            *(_OWORD *)(v8 + 704) = v295;
            *(_OWORD *)(v8 + 720) = v307;
            *(_OWORD *)(v8 + 736) = v319;
            *(_OWORD *)(v8 + 752) = v331;
            BOOL v119 = *(double *)(v8 + 456) < *(double *)(v8 + 232);
            __int128 *v102 = v272;
            *(_OWORD *)(v8 + 68_Block_object_dispose(va, 8) = v284;
            if (v119)
            {
              __int128 v392 = *(_OWORD *)(v8 + 384);
              __int128 v404 = *(_OWORD *)(v8 + 400);
              *(_OWORD *)v416 = *(_OWORD *)(v8 + 416);
              *(_OWORD *)&v416[16] = *(_OWORD *)(v8 + 432);
              __int128 v344 = *(_OWORD *)(v8 + 320);
              __int128 v356 = *(_OWORD *)(v8 + 336);
              __int128 v368 = *(_OWORD *)(v8 + 352);
              __int128 v380 = *(_OWORD *)(v8 + 368);
              __int128 v296 = *(_OWORD *)(v8 + 256);
              __int128 v308 = *(_OWORD *)(v8 + 272);
              __int128 v320 = *(_OWORD *)(v8 + 288);
              __int128 v332 = *(_OWORD *)(v8 + 304);
              __int128 v273 = *v100;
              __int128 v285 = *(_OWORD *)(v8 + 240);
              __int128 v120 = *(_OWORD *)(v8 + 624);
              *(_OWORD *)(v8 + 384) = *(_OWORD *)(v8 + 608);
              *(_OWORD *)(v8 + 400) = v120;
              *(_OWORD *)(v8 + 416) = *(_OWORD *)(v8 + 640);
              *(_OWORD *)(v8 + 429) = *(_OWORD *)(v8 + 653);
              __int128 v121 = *(_OWORD *)(v8 + 560);
              *(_OWORD *)(v8 + 320) = *(_OWORD *)(v8 + 544);
              *(_OWORD *)(v8 + 336) = v121;
              __int128 v122 = *(_OWORD *)(v8 + 592);
              *(_OWORD *)(v8 + 352) = *(_OWORD *)(v8 + 576);
              *(_OWORD *)(v8 + 36_Block_object_dispose(va, 8) = v122;
              __int128 v123 = *(_OWORD *)(v8 + 496);
              *(_OWORD *)(v8 + 2sub_1011C52D0(v1 - 56) = *(_OWORD *)(v8 + 480);
              *(_OWORD *)(v8 + 272) = v123;
              __int128 v124 = *(_OWORD *)(v8 + 528);
              *(_OWORD *)(v8 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 512);
              *(_OWORD *)(v8 + 304) = v124;
              __int128 v125 = *(_OWORD *)(v8 + 464);
              __int128 *v100 = *v101;
              *(_OWORD *)(v8 + 240) = v125;
              *(_OWORD *)(v8 + 60_Block_object_dispose(va, 8) = v392;
              *(_OWORD *)(v8 + 624) = v404;
              *(_OWORD *)(v8 + 640) = *(_OWORD *)v416;
              *(_OWORD *)(v8 + 653) = *(_OWORD *)&v416[13];
              *(_OWORD *)(v8 + 544) = v344;
              *(_OWORD *)(v8 + 560) = v356;
              *(_OWORD *)(v8 + 576) = v368;
              *(_OWORD *)(v8 + 592) = v380;
              *(_OWORD *)(v8 + 480) = v296;
              *(_OWORD *)(v8 + 496) = v308;
              *(_OWORD *)(v8 + 512) = v320;
              *(_OWORD *)(v8 + 52_Block_object_dispose(va, 8) = v332;
              BOOL v119 = *(double *)(v8 + 232) < *(double *)(v8 + 8);
              __int128 *v101 = v273;
              *(_OWORD *)(v8 + 464) = v285;
              if (v119)
              {
                __int128 v274 = *(_OWORD *)v8;
                __int128 v286 = *(_OWORD *)(v8 + 16);
                __int128 v321 = *(_OWORD *)(v8 + 64);
                __int128 v333 = *(_OWORD *)(v8 + 80);
                __int128 v297 = *(_OWORD *)(v8 + 32);
                __int128 v309 = *(_OWORD *)(v8 + 48);
                __int128 v369 = *(_OWORD *)(v8 + 128);
                __int128 v381 = *(_OWORD *)(v8 + 144);
                __int128 v345 = *(_OWORD *)(v8 + 96);
                __int128 v357 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v417 = *(_OWORD *)(v8 + 192);
                *(_OWORD *)&v417[16] = *(_OWORD *)(v8 + 208);
                __int128 v393 = *(_OWORD *)(v8 + 160);
                __int128 v405 = *(_OWORD *)(v8 + 176);
                __int128 v126 = *(_OWORD *)(v8 + 304);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 288);
                *(_OWORD *)(v8 + 80) = v126;
                __int128 v127 = *(_OWORD *)(v8 + 272);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 256);
                *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v127;
                __int128 v128 = *(_OWORD *)(v8 + 368);
                *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 352);
                *(_OWORD *)(v8 + 144) = v128;
                __int128 v129 = *(_OWORD *)(v8 + 336);
                *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 320);
                *(_OWORD *)(v8 + 112) = v129;
                *(_OWORD *)(v8 + 205) = *(_OWORD *)(v8 + 429);
                __int128 v130 = *(_OWORD *)(v8 + 416);
                __int128 v131 = *(_OWORD *)(v8 + 384);
                *(_OWORD *)(v8 + 176) = *(_OWORD *)(v8 + 400);
                *(_OWORD *)(v8 + 192) = v130;
                *(_OWORD *)(v8 + 160) = v131;
                __int128 v132 = *(_OWORD *)(v8 + 240);
                *(_OWORD *)unint64_t v8 = *v100;
                *(_OWORD *)(v8 + 16) = v132;
                *(_OWORD *)(v8 + 384) = v393;
                *(_OWORD *)(v8 + 400) = v405;
                *(_OWORD *)(v8 + 416) = *(_OWORD *)v417;
                *(_OWORD *)(v8 + 429) = *(_OWORD *)&v417[13];
                *(_OWORD *)(v8 + 320) = v345;
                *(_OWORD *)(v8 + 336) = v357;
                *(_OWORD *)(v8 + 352) = v369;
                *(_OWORD *)(v8 + 36_Block_object_dispose(va, 8) = v381;
                *(_OWORD *)(v8 + 2sub_1011C52D0(v1 - 56) = v297;
                *(_OWORD *)(v8 + 272) = v309;
                *(_OWORD *)(v8 + 28_Block_object_dispose(va, 8) = v321;
                *(_OWORD *)(v8 + 304) = v333;
                __int128 *v100 = v274;
                *(_OWORD *)(v8 + 240) = v286;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 5375)
        {
          __int128 v133 = (__int128 *)(v8 + 224);
          BOOL v135 = (__int128 *)v8 == a2 || v133 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v135)
            {
              uint64_t v136 = 0LL;
              unint64_t v137 = v8;
              do
              {
                uint64_t v138 = v133;
                double v139 = *(double *)(v137 + 232);
                if (v139 < *(double *)(v137 + 8))
                {
                  uint64_t v140 = *(void *)v133;
                  __int128 v394 = *(_OWORD *)(v137 + 400);
                  *(_OWORD *)v406 = *(_OWORD *)(v137 + 416);
                  *(_OWORD *)&v406[16] = *(_OWORD *)(v137 + 432);
                  __int128 v346 = *(_OWORD *)(v137 + 336);
                  __int128 v358 = *(_OWORD *)(v137 + 352);
                  __int128 v370 = *(_OWORD *)(v137 + 368);
                  __int128 v382 = *(_OWORD *)(v137 + 384);
                  __int128 v298 = *(_OWORD *)(v137 + 272);
                  __int128 v310 = *(_OWORD *)(v137 + 288);
                  __int128 v322 = *(_OWORD *)(v137 + 304);
                  __int128 v334 = *(_OWORD *)(v137 + 320);
                  __int128 v142 = *(_OWORD *)(v137 + 240);
                  __int128 v141 = *(_OWORD *)(v137 + 256);
                  uint64_t v143 = v136;
                  __int128 v275 = v142;
                  while (1)
                  {
                    int v144 = (double *)(v8 + v143);
                    __int128 v145 = *(_OWORD *)(v8 + v143 + 176);
                    *((_OWORD *)v144 + 24) = *(_OWORD *)(v8 + v143 + 160);
                    *((_OWORD *)v144 + 25) = v145;
                    *((_OWORD *)v144 + 26) = *(_OWORD *)(v8 + v143 + 192);
                    *(_OWORD *)(v8 + v143 + 429) = *(_OWORD *)(v8 + v143 + 205);
                    __int128 v146 = *(_OWORD *)(v8 + v143 + 112);
                    *((_OWORD *)v144 + 20) = *(_OWORD *)(v8 + v143 + 96);
                    *((_OWORD *)v144 + 21) = v146;
                    __int128 v147 = *(_OWORD *)(v8 + v143 + 144);
                    *((_OWORD *)v144 + 22) = *(_OWORD *)(v8 + v143 + 128);
                    *((_OWORD *)v144 + 23) = v147;
                    __int128 v148 = *(_OWORD *)(v8 + v143 + 48);
                    *((_OWORD *)v144 + 16) = *(_OWORD *)(v8 + v143 + 32);
                    *((_OWORD *)v144 + 17) = v148;
                    __int128 v149 = *(_OWORD *)(v8 + v143 + 80);
                    *((_OWORD *)v144 + 1_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + v143 + 64);
                    *((_OWORD *)v144 + 19) = v149;
                    __int128 v150 = *(_OWORD *)(v8 + v143 + 16);
                    *((_OWORD *)v144 + 14) = *(_OWORD *)(v8 + v143);
                    *((_OWORD *)v144 + 15) = v150;
                    if (!v143) {
                      break;
                    }
                    v143 -= 224LL;
                    if (v139 >= *(v144 - 27))
                    {
                      uint64_t v151 = v8 + v143 + 224;
                      goto LABEL_80;
                    }
                  }

                  uint64_t v151 = v8;
LABEL_80:
                  *(void *)uint64_t v151 = v140;
                  *(double *)(v151 + _Block_object_dispose(va, 8) = v139;
                  *(_OWORD *)(v151 + 176) = v394;
                  *(_OWORD *)(v151 + 192) = *(_OWORD *)v406;
                  *(_OWORD *)(v151 + 205) = *(_OWORD *)&v406[13];
                  *(_OWORD *)(v151 + 112) = v346;
                  *(_OWORD *)(v151 + 12_Block_object_dispose(va, 8) = v358;
                  *(_OWORD *)(v151 + 144) = v370;
                  *(_OWORD *)(v151 + 160) = v382;
                  *(_OWORD *)(v151 + 4_Block_object_dispose(va, 8) = v298;
                  *(_OWORD *)(v151 + 64) = v310;
                  *(_OWORD *)(v151 + 80) = v322;
                  *(_OWORD *)(v151 + 96) = v334;
                  *(_OWORD *)(v151 + 16) = v275;
                  *(_OWORD *)(v151 + 32) = v141;
                }

                __int128 v133 = v138 + 14;
                v136 += 224LL;
                unint64_t v137 = (unint64_t)v138;
              }

              while (v138 + 14 != a2);
            }
          }

          else if (!v135)
          {
            do
            {
              uint64_t v220 = v133;
              double v221 = *(double *)(a1 + 232);
              if (v221 < *(double *)(a1 + 8))
              {
                uint64_t v222 = *(void *)v133;
                __int128 v397 = *(_OWORD *)(a1 + 400);
                *(_OWORD *)v409 = *(_OWORD *)(a1 + 416);
                *(_OWORD *)&v409[16] = *(_OWORD *)(a1 + 432);
                __int128 v349 = *(_OWORD *)(a1 + 336);
                __int128 v361 = *(_OWORD *)(a1 + 352);
                __int128 v373 = *(_OWORD *)(a1 + 368);
                __int128 v385 = *(_OWORD *)(a1 + 384);
                __int128 v301 = *(_OWORD *)(a1 + 272);
                __int128 v313 = *(_OWORD *)(a1 + 288);
                __int128 v325 = *(_OWORD *)(a1 + 304);
                __int128 v337 = *(_OWORD *)(a1 + 320);
                __int128 v278 = *(_OWORD *)(a1 + 240);
                __int128 v289 = *(_OWORD *)(a1 + 256);
                do
                {
                  uint64_t v223 = a1 + 224;
                  __int128 v224 = *(_OWORD *)(a1 + 176);
                  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(a1 + 400) = v224;
                  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 192);
                  __int128 v225 = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(a1 + 336) = v225;
                  __int128 v226 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v226;
                  __int128 v227 = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(a1 + 272) = v227;
                  __int128 v228 = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(a1 + 304) = v228;
                  __int128 v229 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(a1 + 224) = *(_OWORD *)a1;
                  *(_OWORD *)(a1 + 240) = v229;
                  BOOL v119 = v221 < *(double *)(a1 - 216);
                  __int128 v230 = *(_OWORD *)(a1 + 205);
                  a1 -= 224LL;
                  *(_OWORD *)(v223 + 205) = v230;
                }

                while (v119);
                *(void *)(a1 + 224) = v222;
                *(double *)(a1 + 232) = v221;
                *(_OWORD *)(a1 + 240) = v278;
                *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = v313;
                *(_OWORD *)(a1 + 304) = v325;
                *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = v289;
                *(_OWORD *)(a1 + 272) = v301;
                *(_OWORD *)(a1 + 352) = v361;
                *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v373;
                *(_OWORD *)(a1 + 320) = v337;
                *(_OWORD *)(a1 + 336) = v349;
                *(_OWORD *)(a1 + 429) = *(_OWORD *)&v409[13];
                *(_OWORD *)(a1 + 400) = v397;
                *(_OWORD *)(a1 + 416) = *(_OWORD *)v409;
                *(_OWORD *)(a1 + 384) = v385;
              }

              __int128 v133 = v220 + 14;
              a1 = (uint64_t)v220;
            }

            while (v220 + 14 != a2);
          }

          return;
        }

        if (!a3)
        {
          int64_t v152 = (unint64_t)(v10 - 2) >> 1;
          int64_t v153 = v152;
          do
          {
            int64_t v154 = v153;
            if (v152 >= v153)
            {
              uint64_t v155 = (2 * v153) | 1;
              unint64_t v156 = v8 + 224 * v155;
              if (2 * v153 + 2 < v10 && *(double *)(v8 + 224 * v155 + 8) < *(double *)(v156 + 232))
              {
                v156 += 224LL;
                uint64_t v155 = 2 * v153 + 2;
              }

              double v157 = *(double *)(v8 + 224 * v153 + 8);
              if (*(double *)(v156 + 8) >= v157)
              {
                unint64_t v158 = v8 + 224 * v153;
                uint64_t v159 = *(void *)v158;
                __int128 v276 = *(_OWORD *)(v158 + 16);
                __int128 v311 = *(_OWORD *)(v158 + 64);
                __int128 v323 = *(_OWORD *)(v158 + 80);
                __int128 v287 = *(_OWORD *)(v158 + 32);
                __int128 v299 = *(_OWORD *)(v158 + 48);
                __int128 v359 = *(_OWORD *)(v158 + 128);
                __int128 v371 = *(_OWORD *)(v158 + 144);
                __int128 v335 = *(_OWORD *)(v158 + 96);
                __int128 v347 = *(_OWORD *)(v158 + 112);
                *(_OWORD *)v407 = *(_OWORD *)(v158 + 192);
                *(_OWORD *)&v407[16] = *(_OWORD *)(v158 + 208);
                __int128 v383 = *(_OWORD *)(v158 + 160);
                __int128 v395 = *(_OWORD *)(v158 + 176);
                do
                {
                  int v160 = (_OWORD *)v158;
                  unint64_t v158 = v156;
                  __int128 v161 = *(_OWORD *)(v156 + 16);
                  *int v160 = *(_OWORD *)v156;
                  v160[1] = v161;
                  __int128 v162 = *(_OWORD *)(v156 + 32);
                  __int128 v163 = *(_OWORD *)(v156 + 48);
                  __int128 v164 = *(_OWORD *)(v156 + 80);
                  v160[4] = *(_OWORD *)(v156 + 64);
                  v160[5] = v164;
                  v160[2] = v162;
                  v160[3] = v163;
                  __int128 v165 = *(_OWORD *)(v156 + 96);
                  __int128 v166 = *(_OWORD *)(v156 + 112);
                  __int128 v167 = *(_OWORD *)(v156 + 144);
                  v160[8] = *(_OWORD *)(v156 + 128);
                  v160[9] = v167;
                  v160[6] = v165;
                  v160[7] = v166;
                  __int128 v168 = *(_OWORD *)(v156 + 160);
                  __int128 v169 = *(_OWORD *)(v156 + 176);
                  __int128 v170 = *(_OWORD *)(v156 + 192);
                  *(_OWORD *)((char *)v160 + 205) = *(_OWORD *)(v156 + 205);
                  v160[11] = v169;
                  v160[12] = v170;
                  v160[10] = v168;
                  if (v152 < v155) {
                    break;
                  }
                  uint64_t v171 = (2 * v155) | 1;
                  unint64_t v156 = v8 + 224 * v171;
                  uint64_t v172 = 2 * v155 + 2;
                  if (v172 < v10 && *(double *)(v8 + 224 * v171 + 8) < *(double *)(v156 + 232))
                  {
                    v156 += 224LL;
                    uint64_t v171 = v172;
                  }

                  uint64_t v155 = v171;
                }

                while (*(double *)(v156 + 8) >= v157);
                *(void *)unint64_t v158 = v159;
                *(double *)(v158 + _Block_object_dispose(va, 8) = v157;
                *(_OWORD *)(v158 + 176) = v395;
                *(_OWORD *)(v158 + 192) = *(_OWORD *)v407;
                *(_OWORD *)(v158 + 205) = *(_OWORD *)&v407[13];
                *(_OWORD *)(v158 + 112) = v347;
                *(_OWORD *)(v158 + 12_Block_object_dispose(va, 8) = v359;
                *(_OWORD *)(v158 + 144) = v371;
                *(_OWORD *)(v158 + 160) = v383;
                *(_OWORD *)(v158 + 4_Block_object_dispose(va, 8) = v299;
                *(_OWORD *)(v158 + 64) = v311;
                *(_OWORD *)(v158 + 80) = v323;
                *(_OWORD *)(v158 + 96) = v335;
                *(_OWORD *)(v158 + 16) = v276;
                *(_OWORD *)(v158 + 32) = v287;
              }
            }

            int64_t v153 = v154 - 1;
          }

          while (v154);
          uint64_t v173 = (((unint64_t)v9 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
          while (2)
          {
            uint64_t v174 = 0LL;
            __int128 v277 = *(_OWORD *)v8;
            __int128 v288 = *(_OWORD *)(v8 + 16);
            __int128 v324 = *(_OWORD *)(v8 + 64);
            __int128 v336 = *(_OWORD *)(v8 + 80);
            __int128 v300 = *(_OWORD *)(v8 + 32);
            __int128 v312 = *(_OWORD *)(v8 + 48);
            __int128 v372 = *(_OWORD *)(v8 + 128);
            __int128 v384 = *(_OWORD *)(v8 + 144);
            __int128 v348 = *(_OWORD *)(v8 + 96);
            __int128 v360 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v418 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v418[16] = *(_OWORD *)(v8 + 208);
            __int128 v396 = *(_OWORD *)(v8 + 160);
            __int128 v408 = *(_OWORD *)(v8 + 176);
            unint64_t v175 = v8;
            do
            {
              __int16 v176 = (_OWORD *)v175;
              uint64_t v177 = v174 + 1;
              v175 += 224 * (v174 + 1);
              uint64_t v178 = 2 * v174;
              uint64_t v174 = (2 * v174) | 1;
              uint64_t v179 = v178 + 2;
              if (v179 < v173 && *((double *)&v176[14 * v177] + 1) < *(double *)(v175 + 232))
              {
                v175 += 224LL;
                uint64_t v174 = v179;
              }

              __int128 v180 = *(_OWORD *)(v175 + 16);
              *__int16 v176 = *(_OWORD *)v175;
              v176[1] = v180;
              __int128 v181 = *(_OWORD *)(v175 + 32);
              __int128 v182 = *(_OWORD *)(v175 + 48);
              __int128 v183 = *(_OWORD *)(v175 + 80);
              v176[4] = *(_OWORD *)(v175 + 64);
              v176[5] = v183;
              v176[2] = v181;
              v176[3] = v182;
              __int128 v184 = *(_OWORD *)(v175 + 96);
              __int128 v185 = *(_OWORD *)(v175 + 112);
              __int128 v186 = *(_OWORD *)(v175 + 144);
              v176[8] = *(_OWORD *)(v175 + 128);
              v176[9] = v186;
              v176[6] = v184;
              v176[7] = v185;
              __int128 v187 = *(_OWORD *)(v175 + 160);
              __int128 v188 = *(_OWORD *)(v175 + 176);
              __int128 v189 = *(_OWORD *)(v175 + 192);
              *(_OWORD *)((char *)v176 + 205) = *(_OWORD *)(v175 + 205);
              v176[11] = v188;
              v176[12] = v189;
              v176[10] = v187;
            }

            while (v174 <= (uint64_t)((unint64_t)(v173 - 2) >> 1));
            a2 -= 14;
            if ((__int128 *)v175 != a2)
            {
              __int128 v190 = a2[1];
              *(_OWORD *)unint64_t v175 = *a2;
              *(_OWORD *)(v175 + 16) = v190;
              __int128 v191 = a2[2];
              __int128 v192 = a2[3];
              __int128 v193 = a2[5];
              *(_OWORD *)(v175 + 64) = a2[4];
              *(_OWORD *)(v175 + 80) = v193;
              *(_OWORD *)(v175 + 32) = v191;
              *(_OWORD *)(v175 + 4_Block_object_dispose(va, 8) = v192;
              __int128 v194 = a2[6];
              __int128 v195 = a2[7];
              __int128 v196 = a2[9];
              *(_OWORD *)(v175 + 12_Block_object_dispose(va, 8) = a2[8];
              *(_OWORD *)(v175 + 144) = v196;
              *(_OWORD *)(v175 + 96) = v194;
              *(_OWORD *)(v175 + 112) = v195;
              __int128 v197 = a2[10];
              __int128 v198 = a2[11];
              __int128 v199 = a2[12];
              *(_OWORD *)(v175 + 205) = *(__int128 *)((char *)a2 + 205);
              *(_OWORD *)(v175 + 176) = v198;
              *(_OWORD *)(v175 + 192) = v199;
              *(_OWORD *)(v175 + 160) = v197;
              *a2 = v277;
              a2[1] = v288;
              a2[4] = v324;
              a2[5] = v336;
              a2[2] = v300;
              a2[3] = v312;
              a2[8] = v372;
              a2[9] = v384;
              a2[6] = v348;
              a2[7] = v360;
              *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v418[13];
              a2[11] = v408;
              a2[12] = *(_OWORD *)v418;
              a2[10] = v396;
              uint64_t v200 = v175 - v8 + 224;
              if (v200 >= 225)
              {
                double v202 = *(double *)(v175 + 8);
                if (*(double *)(v8 + 224 * v201 + 8) < v202)
                {
                  uint64_t v203 = *(void *)v175;
                  __int128 v233 = *(_OWORD *)(v175 + 16);
                  __int128 v242 = *(_OWORD *)(v175 + 64);
                  __int128 v245 = *(_OWORD *)(v175 + 80);
                  __int128 v236 = *(_OWORD *)(v175 + 32);
                  __int128 v239 = *(_OWORD *)(v175 + 48);
                  __int128 v254 = *(_OWORD *)(v175 + 128);
                  __int128 v257 = *(_OWORD *)(v175 + 144);
                  __int128 v248 = *(_OWORD *)(v175 + 96);
                  __int128 v251 = *(_OWORD *)(v175 + 112);
                  *(_OWORD *)CFAbsoluteTime v266 = *(_OWORD *)(v175 + 192);
                  *(_OWORD *)&v266[16] = *(_OWORD *)(v175 + 208);
                  __int128 v260 = *(_OWORD *)(v175 + 160);
                  __int128 v263 = *(_OWORD *)(v175 + 176);
                  do
                  {
                    __int16 v204 = (_OWORD *)v175;
                    unint64_t v175 = v8 + 224 * v201;
                    __int128 v205 = *(_OWORD *)(v175 + 16);
                    *__int16 v204 = *(_OWORD *)v175;
                    v204[1] = v205;
                    __int128 v206 = *(_OWORD *)(v175 + 32);
                    __int128 v207 = *(_OWORD *)(v175 + 48);
                    __int128 v208 = *(_OWORD *)(v175 + 80);
                    v204[4] = *(_OWORD *)(v175 + 64);
                    v204[5] = v208;
                    v204[2] = v206;
                    v204[3] = v207;
                    __int128 v209 = *(_OWORD *)(v175 + 96);
                    __int128 v210 = *(_OWORD *)(v175 + 112);
                    __int128 v211 = *(_OWORD *)(v175 + 144);
                    v204[8] = *(_OWORD *)(v175 + 128);
                    v204[9] = v211;
                    v204[6] = v209;
                    v204[7] = v210;
                    __int128 v212 = *(_OWORD *)(v175 + 160);
                    __int128 v213 = *(_OWORD *)(v175 + 176);
                    __int128 v214 = *(_OWORD *)(v175 + 192);
                    *(_OWORD *)((char *)v204 + 205) = *(_OWORD *)(v175 + 205);
                    v204[11] = v213;
                    v204[12] = v214;
                    _BYTE v204[10] = v212;
                    if (!v201) {
                      break;
                    }
                    unint64_t v201 = (v201 - 1) >> 1;
                  }

                  while (*(double *)(v8 + 224 * v201 + 8) < v202);
                  *(void *)unint64_t v175 = v203;
                  *(double *)(v175 + _Block_object_dispose(va, 8) = v202;
                  *(_OWORD *)(v175 + 16) = v233;
                  *(_OWORD *)(v175 + 64) = v242;
                  *(_OWORD *)(v175 + 80) = v245;
                  *(_OWORD *)(v175 + 32) = v236;
                  *(_OWORD *)(v175 + 4_Block_object_dispose(va, 8) = v239;
                  *(_OWORD *)(v175 + 12_Block_object_dispose(va, 8) = v254;
                  *(_OWORD *)(v175 + 144) = v257;
                  *(_OWORD *)(v175 + 96) = v248;
                  *(_OWORD *)(v175 + 112) = v251;
                  __int128 v215 = v260;
                  __int128 v216 = v263;
                  __int128 v217 = *(_OWORD *)v266;
                  __int128 v218 = *(_OWORD *)&v266[13];
LABEL_112:
                  *(_OWORD *)(v175 + 205) = v218;
                  *(_OWORD *)(v175 + 176) = v216;
                  *(_OWORD *)(v175 + 192) = v217;
                  *(_OWORD *)(v175 + 160) = v215;
                }
              }

              if (v173-- <= 2) {
                return;
              }
              continue;
            }

            break;
          }

          *(_OWORD *)unint64_t v175 = v277;
          *(_OWORD *)(v175 + 16) = v288;
          *(_OWORD *)(v175 + 64) = v324;
          *(_OWORD *)(v175 + 80) = v336;
          *(_OWORD *)(v175 + 32) = v300;
          *(_OWORD *)(v175 + 4_Block_object_dispose(va, 8) = v312;
          *(_OWORD *)(v175 + 12_Block_object_dispose(va, 8) = v372;
          *(_OWORD *)(v175 + 144) = v384;
          *(_OWORD *)(v175 + 96) = v348;
          *(_OWORD *)(v175 + 112) = v360;
          __int128 v215 = v396;
          __int128 v216 = v408;
          __int128 v217 = *(_OWORD *)v418;
          __int128 v218 = *(_OWORD *)&v418[13];
          goto LABEL_112;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        __int128 v12 = (__int128 *)(v8 + 224 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x7000)
        {
          sub_10104972C((__int128 *)(a1 + 224 * v11), (__int128 *)a1, a2 - 14);
        }

        else
        {
          sub_10104972C((__int128 *)a1, (__int128 *)(a1 + 224 * v11), a2 - 14);
          uint64_t v13 = 224 * v11;
          __int128 v14 = (__int128 *)(224 * v11 + a1 - 224);
          sub_10104972C((__int128 *)(a1 + 224), v14, a2 - 28);
          __int128 v15 = (__int128 *)(a1 + 224 + v13);
          sub_10104972C((__int128 *)(a1 + 448), v15, a2 - 42);
          sub_10104972C(v14, v12, v15);
          __int128 v267 = *(_OWORD *)a1;
          __int128 v279 = *(_OWORD *)(a1 + 16);
          __int128 v314 = *(_OWORD *)(a1 + 64);
          __int128 v326 = *(_OWORD *)(a1 + 80);
          __int128 v290 = *(_OWORD *)(a1 + 32);
          __int128 v302 = *(_OWORD *)(a1 + 48);
          __int128 v362 = *(_OWORD *)(a1 + 128);
          __int128 v374 = *(_OWORD *)(a1 + 144);
          __int128 v338 = *(_OWORD *)(a1 + 96);
          __int128 v350 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v410 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v410[16] = *(_OWORD *)(a1 + 208);
          __int128 v386 = *(_OWORD *)(a1 + 160);
          __int128 v398 = *(_OWORD *)(a1 + 176);
          __int128 v16 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v16;
          __int128 v17 = v12[2];
          __int128 v18 = v12[3];
          __int128 v19 = v12[5];
          *(_OWORD *)(a1 + 64) = v12[4];
          *(_OWORD *)(a1 + 80) = v19;
          *(_OWORD *)(a1 + 32) = v17;
          *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v18;
          __int128 v20 = v12[6];
          __int128 v21 = v12[7];
          __int128 v22 = v12[9];
          *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v12[8];
          *(_OWORD *)(a1 + 144) = v22;
          *(_OWORD *)(a1 + 96) = v20;
          *(_OWORD *)(a1 + 112) = v21;
          __int128 v23 = v12[10];
          __int128 v24 = v12[11];
          __int128 v25 = v12[12];
          *(_OWORD *)(a1 + 205) = *(__int128 *)((char *)v12 + 205);
          *(_OWORD *)(a1 + 176) = v24;
          *(_OWORD *)(a1 + 192) = v25;
          *(_OWORD *)(a1 + 160) = v23;
          __int128 *v12 = v267;
          v12[1] = v279;
          _DWORD v12[4] = v314;
          void v12[5] = v326;
          _DWORD v12[2] = v290;
          _OWORD v12[3] = v302;
          _WORD v12[8] = v362;
          v12[9] = v374;
          v12[6] = v338;
          v12[7] = v350;
          *(__int128 *)((char *)v12 + 205) = *(_OWORD *)&v410[13];
          v12[11] = v398;
          v12[12] = *(_OWORD *)v410;
          v12[10] = v386;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v26 = *(double *)(a1 + 8);
          uint64_t v60 = *(void *)a1;
          __int128 v241 = *(_OWORD *)(a1 + 64);
          __int128 v244 = *(_OWORD *)(a1 + 80);
          __int128 v235 = *(_OWORD *)(a1 + 32);
          __int128 v238 = *(_OWORD *)(a1 + 48);
          __int128 v253 = *(_OWORD *)(a1 + 128);
          __int128 v256 = *(_OWORD *)(a1 + 144);
          __int128 v247 = *(_OWORD *)(a1 + 96);
          __int128 v250 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)__int16 v265 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v265[16] = *(_OWORD *)(a1 + 208);
          __int128 v259 = *(_OWORD *)(a1 + 160);
          __int128 v262 = *(_OWORD *)(a1 + 176);
          __int128 v232 = *(_OWORD *)(a1 + 16);
          if (v26 >= *((double *)a2 - 27))
          {
            unint64_t v63 = a1 + 224;
            do
            {
              unint64_t v8 = v63;
              double v64 = *(double *)(v63 + 8);
              v63 += 224LL;
            }

            while (v26 >= v64);
          }

          else
          {
            uint64_t v61 = a1;
            do
            {
              unint64_t v8 = v61 + 224;
              double v62 = *(double *)(v61 + 232);
              v61 += 224LL;
            }

            while (v26 >= v62);
          }

          __int128 v65 = a2;
          if (v8 < (unint64_t)a2)
          {
            __int128 v66 = a2;
            do
            {
              __int128 v65 = v66 - 14;
              double v67 = *((double *)v66 - 27);
              v66 -= 14;
            }

            while (v26 < v67);
          }

          while (v8 < (unint64_t)v65)
          {
            __int128 v269 = *(_OWORD *)v8;
            __int128 v281 = *(_OWORD *)(v8 + 16);
            __int128 v316 = *(_OWORD *)(v8 + 64);
            __int128 v328 = *(_OWORD *)(v8 + 80);
            __int128 v292 = *(_OWORD *)(v8 + 32);
            __int128 v304 = *(_OWORD *)(v8 + 48);
            __int128 v364 = *(_OWORD *)(v8 + 128);
            __int128 v376 = *(_OWORD *)(v8 + 144);
            __int128 v340 = *(_OWORD *)(v8 + 96);
            __int128 v352 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v412 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v412[16] = *(_OWORD *)(v8 + 208);
            __int128 v388 = *(_OWORD *)(v8 + 160);
            __int128 v400 = *(_OWORD *)(v8 + 176);
            __int128 v68 = v65[1];
            *(_OWORD *)unint64_t v8 = *v65;
            *(_OWORD *)(v8 + 16) = v68;
            __int128 v69 = v65[2];
            __int128 v70 = v65[3];
            __int128 v71 = v65[5];
            *(_OWORD *)(v8 + 64) = v65[4];
            *(_OWORD *)(v8 + 80) = v71;
            *(_OWORD *)(v8 + 32) = v69;
            *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v70;
            __int128 v72 = v65[6];
            __int128 v73 = v65[7];
            __int128 v74 = v65[9];
            *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = v65[8];
            *(_OWORD *)(v8 + 144) = v74;
            *(_OWORD *)(v8 + 96) = v72;
            *(_OWORD *)(v8 + 112) = v73;
            __int128 v75 = v65[10];
            __int128 v76 = v65[11];
            __int128 v77 = v65[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v65 + 205);
            *(_OWORD *)(v8 + 176) = v76;
            *(_OWORD *)(v8 + 192) = v77;
            *(_OWORD *)(v8 + 160) = v75;
            __int128 *v65 = v269;
            v65[1] = v281;
            v65[4] = v316;
            v65[5] = v328;
            v65[2] = v292;
            v65[3] = v304;
            v65[8] = v364;
            v65[9] = v376;
            void v65[6] = v340;
            v65[7] = v352;
            *(__int128 *)((char *)v65 + 205) = *(_OWORD *)&v412[13];
            v65[11] = v400;
            v65[12] = *(_OWORD *)v412;
            v65[10] = v388;
            do
            {
              double v78 = *(double *)(v8 + 232);
              v8 += 224LL;
            }

            while (v26 >= v78);
            do
            {
              double v79 = *((double *)v65 - 27);
              v65 -= 14;
            }

            while (v26 < v79);
          }

          if (v8 - 224 != a1)
          {
            __int128 v80 = *(_OWORD *)(v8 - 208);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
            *(_OWORD *)(a1 + 16) = v80;
            __int128 v81 = *(_OWORD *)(v8 - 192);
            __int128 v82 = *(_OWORD *)(v8 - 176);
            __int128 v83 = *(_OWORD *)(v8 - 144);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
            *(_OWORD *)(a1 + 80) = v83;
            *(_OWORD *)(a1 + 32) = v81;
            *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v82;
            __int128 v84 = *(_OWORD *)(v8 - 128);
            __int128 v85 = *(_OWORD *)(v8 - 112);
            __int128 v86 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 144) = v86;
            *(_OWORD *)(a1 + 96) = v84;
            *(_OWORD *)(a1 + 112) = v85;
            __int128 v87 = *(_OWORD *)(v8 - 64);
            __int128 v88 = *(_OWORD *)(v8 - 48);
            __int128 v89 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
            *(_OWORD *)(a1 + 176) = v88;
            *(_OWORD *)(a1 + 192) = v89;
            *(_OWORD *)(a1 + 160) = v87;
          }

          a4 = 0;
          *(void *)(v8 - 224) = v60;
          *(double *)(v8 - 216) = v26;
          *(_OWORD *)(v8 - 20_Block_object_dispose(va, 8) = v232;
          *(_OWORD *)(v8 - 160) = v241;
          *(_OWORD *)(v8 - 144) = v244;
          *(_OWORD *)(v8 - 192) = v235;
          *(_OWORD *)(v8 - 176) = v238;
          *(_OWORD *)(v8 - 96) = v253;
          *(_OWORD *)(v8 - 80) = v256;
          *(_OWORD *)(v8 - 12_Block_object_dispose(va, 8) = v247;
          *(_OWORD *)(v8 - 112) = v250;
          *(_OWORD *)(v8 - 19) = *(_OWORD *)&v265[13];
          *(_OWORD *)(v8 - 4_Block_object_dispose(va, 8) = v262;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v265;
          *(_OWORD *)(v8 - 64) = v259;
          continue;
        }

        double v26 = *(double *)(a1 + 8);
LABEL_11:
        uint64_t v27 = 0LL;
        uint64_t v28 = *(void *)a1;
        __int128 v240 = *(_OWORD *)(a1 + 64);
        __int128 v243 = *(_OWORD *)(a1 + 80);
        __int128 v252 = *(_OWORD *)(a1 + 128);
        __int128 v255 = *(_OWORD *)(a1 + 144);
        *(_OWORD *)int v264 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v264[16] = *(_OWORD *)(a1 + 208);
        __int128 v258 = *(_OWORD *)(a1 + 160);
        __int128 v261 = *(_OWORD *)(a1 + 176);
        __int128 v246 = *(_OWORD *)(a1 + 96);
        __int128 v249 = *(_OWORD *)(a1 + 112);
        __int128 v234 = *(_OWORD *)(a1 + 32);
        __int128 v237 = *(_OWORD *)(a1 + 48);
        __int128 v231 = *(_OWORD *)(a1 + 16);
        do
        {
          double v29 = *(double *)(a1 + v27 + 232);
          v27 += 224LL;
        }

        while (v29 < v26);
        unint64_t v30 = a1 + v27;
        __int128 v31 = a2;
        if (v27 == 224)
        {
          __int128 v34 = a2;
          while (v30 < (unint64_t)v34)
          {
            __int128 v32 = v34 - 14;
            double v35 = *((double *)v34 - 27);
            v34 -= 14;
            if (v35 < v26) {
              goto LABEL_21;
            }
          }

          __int128 v32 = v34;
        }

        else
        {
          do
          {
            __int128 v32 = v31 - 14;
            double v33 = *((double *)v31 - 27);
            v31 -= 14;
          }

          while (v33 >= v26);
        }

BOOL sub_10104B584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7LL * ((a2 - a1) >> 5);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (*(double *)(a2 - 216) < *(double *)(a1 + 8))
      {
        __int128 v123 = *(_OWORD *)(a1 + 160);
        __int128 v129 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)BOOL v135 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v135[16] = *(_OWORD *)(a1 + 208);
        __int128 v99 = *(_OWORD *)(a1 + 96);
        __int128 v105 = *(_OWORD *)(a1 + 112);
        __int128 v111 = *(_OWORD *)(a1 + 128);
        __int128 v117 = *(_OWORD *)(a1 + 144);
        __int128 v75 = *(_OWORD *)(a1 + 32);
        __int128 v81 = *(_OWORD *)(a1 + 48);
        __int128 v87 = *(_OWORD *)(a1 + 64);
        __int128 v93 = *(_OWORD *)(a1 + 80);
        __int128 v63 = *(_OWORD *)a1;
        __int128 v69 = *(_OWORD *)(a1 + 16);
        __int128 v6 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 224);
        *(_OWORD *)(a1 + 16) = v6;
        __int128 v7 = *(_OWORD *)(a2 - 192);
        __int128 v8 = *(_OWORD *)(a2 - 176);
        __int128 v9 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v8;
        __int128 v10 = *(_OWORD *)(a2 - 128);
        __int128 v11 = *(_OWORD *)(a2 - 112);
        __int128 v12 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 144) = v12;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 112) = v11;
        __int128 v13 = *(_OWORD *)(a2 - 64);
        __int128 v14 = *(_OWORD *)(a2 - 48);
        __int128 v15 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a2 - 64) = v123;
        *(_OWORD *)(a2 - 4_Block_object_dispose(va, 8) = v129;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v135;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v135[13];
        *(_OWORD *)(a2 - 12_Block_object_dispose(va, 8) = v99;
        *(_OWORD *)(a2 - 112) = v105;
        *(_OWORD *)(a2 - 96) = v111;
        *(_OWORD *)(a2 - 80) = v117;
        *(_OWORD *)(a2 - 192) = v75;
        *(_OWORD *)(a2 - 176) = v81;
        *(_OWORD *)(a2 - 160) = v87;
        *(_OWORD *)(a2 - 144) = v93;
        *(_OWORD *)(a2 - 224) = v63;
        *(_OWORD *)(a2 - 20_Block_object_dispose(va, 8) = v69;
      }

      return result;
    case 3LL:
      sub_10104972C((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a2 - 224));
      return 1LL;
    case 4LL:
      sub_10104A10C(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1LL;
    case 5LL:
      __int128 v31 = (__int128 *)(a1 + 224);
      __int128 v32 = (__int128 *)(a1 + 448);
      double v33 = (__int128 *)(a1 + 672);
      sub_10104A10C(a1, a1 + 224, a1 + 448, a1 + 672);
      __int128 v125 = *(_OWORD *)(a1 + 832);
      __int128 v131 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)uint64_t v136 = *(_OWORD *)(a1 + 864);
      *(_OWORD *)&v136[16] = *(_OWORD *)(a1 + 880);
      __int128 v101 = *(_OWORD *)(a1 + 768);
      __int128 v107 = *(_OWORD *)(a1 + 784);
      __int128 v113 = *(_OWORD *)(a1 + 800);
      __int128 v119 = *(_OWORD *)(a1 + 816);
      __int128 v77 = *(_OWORD *)(a1 + 704);
      __int128 v83 = *(_OWORD *)(a1 + 720);
      __int128 v89 = *(_OWORD *)(a1 + 736);
      __int128 v95 = *(_OWORD *)(a1 + 752);
      __int128 v65 = *v33;
      __int128 v71 = *(_OWORD *)(a1 + 688);
      __int128 v34 = *(_OWORD *)(a2 - 208);
      __int128 *v33 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)(a1 + 68_Block_object_dispose(va, 8) = v34;
      __int128 v35 = *(_OWORD *)(a2 - 192);
      __int128 v36 = *(_OWORD *)(a2 - 176);
      __int128 v37 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 704) = v35;
      *(_OWORD *)(a1 + 720) = v36;
      __int128 v38 = *(_OWORD *)(a2 - 128);
      __int128 v39 = *(_OWORD *)(a2 - 112);
      __int128 v40 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 816) = v40;
      *(_OWORD *)(a1 + 76_Block_object_dispose(va, 8) = v38;
      *(_OWORD *)(a1 + 784) = v39;
      __int128 v41 = *(_OWORD *)(a2 - 64);
      __int128 v42 = *(_OWORD *)(a2 - 48);
      __int128 v43 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 877) = *(_OWORD *)(a2 - 19);
      *(_OWORD *)(a1 + 84_Block_object_dispose(va, 8) = v42;
      *(_OWORD *)(a1 + 864) = v43;
      *(_OWORD *)(a1 + 832) = v41;
      *(_OWORD *)(a2 - 64) = v125;
      *(_OWORD *)(a2 - 4_Block_object_dispose(va, 8) = v131;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v136;
      *(_OWORD *)(a2 - 19) = *(_OWORD *)&v136[13];
      *(_OWORD *)(a2 - 12_Block_object_dispose(va, 8) = v101;
      *(_OWORD *)(a2 - 112) = v107;
      *(_OWORD *)(a2 - 96) = v113;
      *(_OWORD *)(a2 - 80) = v119;
      *(_OWORD *)(a2 - 192) = v77;
      *(_OWORD *)(a2 - 176) = v83;
      *(_OWORD *)(a2 - 160) = v89;
      *(_OWORD *)(a2 - 144) = v95;
      *(_OWORD *)(a2 - 224) = v65;
      *(_OWORD *)(a2 - 20_Block_object_dispose(va, 8) = v71;
      __int128 v126 = *(_OWORD *)(a1 + 608);
      __int128 v132 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)unint64_t v137 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)&v137[16] = *(_OWORD *)(a1 + 656);
      __int128 v102 = *(_OWORD *)(a1 + 544);
      __int128 v108 = *(_OWORD *)(a1 + 560);
      __int128 v114 = *(_OWORD *)(a1 + 576);
      __int128 v120 = *(_OWORD *)(a1 + 592);
      __int128 v78 = *(_OWORD *)(a1 + 480);
      __int128 v84 = *(_OWORD *)(a1 + 496);
      __int128 v90 = *(_OWORD *)(a1 + 512);
      __int128 v96 = *(_OWORD *)(a1 + 528);
      __int128 v66 = *v32;
      __int128 v72 = *(_OWORD *)(a1 + 464);
      __int128 v44 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a1 + 60_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 624) = v44;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 653) = *(_OWORD *)(a1 + 877);
      __int128 v45 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 560) = v45;
      __int128 v46 = *(_OWORD *)(a1 + 816);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a1 + 592) = v46;
      __int128 v47 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 496) = v47;
      __int128 v48 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = v48;
      __int128 v49 = *(_OWORD *)(a1 + 688);
      __int128 *v32 = *v33;
      *(_OWORD *)(a1 + 464) = v49;
      *(_OWORD *)(a1 + 832) = v126;
      *(_OWORD *)(a1 + 84_Block_object_dispose(va, 8) = v132;
      *(_OWORD *)(a1 + 864) = *(_OWORD *)v137;
      *(_OWORD *)(a1 + 877) = *(_OWORD *)&v137[13];
      *(_OWORD *)(a1 + 76_Block_object_dispose(va, 8) = v102;
      *(_OWORD *)(a1 + 784) = v108;
      *(_OWORD *)(a1 + 800) = v114;
      *(_OWORD *)(a1 + 816) = v120;
      *(_OWORD *)(a1 + 704) = v78;
      *(_OWORD *)(a1 + 720) = v84;
      *(_OWORD *)(a1 + 736) = v90;
      *(_OWORD *)(a1 + 752) = v96;
      BOOL v50 = *(double *)(a1 + 456) < *(double *)(a1 + 232);
      __int128 *v33 = v66;
      *(_OWORD *)(a1 + 68_Block_object_dispose(va, 8) = v72;
      if (!v50) {
        return 1LL;
      }
      __int128 v127 = *(_OWORD *)(a1 + 384);
      __int128 v133 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)uint64_t v138 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&v138[16] = *(_OWORD *)(a1 + 432);
      __int128 v103 = *(_OWORD *)(a1 + 320);
      __int128 v109 = *(_OWORD *)(a1 + 336);
      __int128 v115 = *(_OWORD *)(a1 + 352);
      __int128 v121 = *(_OWORD *)(a1 + 368);
      __int128 v79 = *(_OWORD *)(a1 + 256);
      __int128 v85 = *(_OWORD *)(a1 + 272);
      __int128 v91 = *(_OWORD *)(a1 + 288);
      __int128 v97 = *(_OWORD *)(a1 + 304);
      __int128 v67 = *v31;
      __int128 v73 = *(_OWORD *)(a1 + 240);
      __int128 v51 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 400) = v51;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 429) = *(_OWORD *)(a1 + 653);
      __int128 v52 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 336) = v52;
      __int128 v53 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v53;
      __int128 v54 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 272) = v54;
      __int128 v55 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 304) = v55;
      __int128 v56 = *(_OWORD *)(a1 + 464);
      *__int128 v31 = *v32;
      *(_OWORD *)(a1 + 240) = v56;
      *(_OWORD *)(a1 + 60_Block_object_dispose(va, 8) = v127;
      *(_OWORD *)(a1 + 624) = v133;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v138;
      *(_OWORD *)(a1 + 653) = *(_OWORD *)&v138[13];
      *(_OWORD *)(a1 + 544) = v103;
      *(_OWORD *)(a1 + 560) = v109;
      *(_OWORD *)(a1 + 576) = v115;
      *(_OWORD *)(a1 + 592) = v121;
      *(_OWORD *)(a1 + 480) = v79;
      *(_OWORD *)(a1 + 496) = v85;
      *(_OWORD *)(a1 + 512) = v91;
      *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = v97;
      BOOL v50 = *(double *)(a1 + 232) < *(double *)(a1 + 8);
      __int128 *v32 = v67;
      *(_OWORD *)(a1 + 464) = v73;
      if (!v50) {
        return 1LL;
      }
      __int128 v128 = *(_OWORD *)(a1 + 160);
      __int128 v134 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)double v139 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v139[16] = *(_OWORD *)(a1 + 208);
      __int128 v104 = *(_OWORD *)(a1 + 96);
      __int128 v110 = *(_OWORD *)(a1 + 112);
      __int128 v116 = *(_OWORD *)(a1 + 128);
      __int128 v122 = *(_OWORD *)(a1 + 144);
      __int128 v80 = *(_OWORD *)(a1 + 32);
      __int128 v86 = *(_OWORD *)(a1 + 48);
      __int128 v92 = *(_OWORD *)(a1 + 64);
      __int128 v98 = *(_OWORD *)(a1 + 80);
      __int128 v68 = *(_OWORD *)a1;
      __int128 v74 = *(_OWORD *)(a1 + 16);
      __int128 v57 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 176) = v57;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 205) = *(_OWORD *)(a1 + 429);
      __int128 v58 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 112) = v58;
      __int128 v59 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 144) = v59;
      __int128 v60 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v60;
      __int128 v61 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 80) = v61;
      __int128 v62 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)a1 = *v31;
      *(_OWORD *)(a1 + 16) = v62;
      *(_OWORD *)(a1 + 384) = v128;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v139;
      *(_OWORD *)(a1 + 429) = *(_OWORD *)&v139[13];
      *(_OWORD *)(a1 + 320) = v104;
      *(_OWORD *)(a1 + 336) = v110;
      *(_OWORD *)(a1 + 352) = v116;
      *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v122;
      *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = v80;
      *(_OWORD *)(a1 + 272) = v86;
      *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = v92;
      *(_OWORD *)(a1 + 304) = v98;
      BOOL result = 1LL;
      *__int128 v31 = v68;
      *(_OWORD *)(a1 + 240) = v74;
      return result;
    default:
      uint64_t v16 = a1 + 448;
      sub_10104972C((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
      uint64_t v17 = a1 + 672;
      if (a1 + 672 == a2) {
        return 1LL;
      }
      uint64_t v18 = 0LL;
      int v19 = 0;
      break;
  }

  while (1)
  {
    double v20 = *(double *)(v17 + 8);
    if (v20 < *(double *)(v16 + 8))
    {
      uint64_t v21 = *(void *)v17;
      __int128 v124 = *(_OWORD *)(v17 + 176);
      *(_OWORD *)__int128 v130 = *(_OWORD *)(v17 + 192);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v17 + 208);
      __int128 v100 = *(_OWORD *)(v17 + 112);
      __int128 v106 = *(_OWORD *)(v17 + 128);
      __int128 v112 = *(_OWORD *)(v17 + 144);
      __int128 v118 = *(_OWORD *)(v17 + 160);
      __int128 v76 = *(_OWORD *)(v17 + 48);
      __int128 v82 = *(_OWORD *)(v17 + 64);
      __int128 v88 = *(_OWORD *)(v17 + 80);
      __int128 v94 = *(_OWORD *)(v17 + 96);
      uint64_t v22 = v18;
      __int128 v64 = *(_OWORD *)(v17 + 16);
      __int128 v70 = *(_OWORD *)(v17 + 32);
      while (1)
      {
        uint64_t v23 = a1 + v22;
        __int128 v24 = *(_OWORD *)(a1 + v22 + 624);
        *(_OWORD *)(v23 + 832) = *(_OWORD *)(a1 + v22 + 608);
        *(_OWORD *)(v23 + 84_Block_object_dispose(va, 8) = v24;
        *(_OWORD *)(v23 + 864) = *(_OWORD *)(a1 + v22 + 640);
        __int128 v25 = *(_OWORD *)(a1 + v22 + 560);
        *(_OWORD *)(v23 + 76_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + v22 + 544);
        *(_OWORD *)(v23 + 784) = v25;
        __int128 v26 = *(_OWORD *)(a1 + v22 + 592);
        *(_OWORD *)(v23 + 800) = *(_OWORD *)(a1 + v22 + 576);
        *(_OWORD *)(v23 + 816) = v26;
        __int128 v27 = *(_OWORD *)(a1 + v22 + 496);
        *(_OWORD *)(v23 + 704) = *(_OWORD *)(a1 + v22 + 480);
        *(_OWORD *)(v23 + 720) = v27;
        __int128 v28 = *(_OWORD *)(a1 + v22 + 528);
        *(_OWORD *)(v23 + 736) = *(_OWORD *)(a1 + v22 + 512);
        *(_OWORD *)(v23 + 752) = v28;
        __int128 v29 = *(_OWORD *)(a1 + v22 + 464);
        *(_OWORD *)(v23 + 672) = *(_OWORD *)(a1 + v22 + 448);
        *(_OWORD *)(v23 + 68_Block_object_dispose(va, 8) = v29;
        *(_OWORD *)(a1 + v22 + 877) = *(_OWORD *)(a1 + v22 + 653);
        if (v22 == -448) {
          break;
        }
        v22 -= 224LL;
        if (v20 >= *(double *)(v23 + 232))
        {
          uint64_t v30 = a1 + v22 + 672;
          goto LABEL_13;
        }
      }

      uint64_t v30 = a1;
LABEL_13:
      *(void *)uint64_t v30 = v21;
      *(double *)(v30 + _Block_object_dispose(va, 8) = v20;
      *(_OWORD *)(v30 + 176) = v124;
      *(_OWORD *)(v30 + 192) = *(_OWORD *)v130;
      *(_OWORD *)(v30 + 205) = *(_OWORD *)&v130[13];
      *(_OWORD *)(v30 + 112) = v100;
      *(_OWORD *)(v30 + 12_Block_object_dispose(va, 8) = v106;
      *(_OWORD *)(v30 + 144) = v112;
      *(_OWORD *)(v30 + 160) = v118;
      *(_OWORD *)(v30 + 4_Block_object_dispose(va, 8) = v76;
      *(_OWORD *)(v30 + 64) = v82;
      *(_OWORD *)(v30 + 80) = v88;
      *(_OWORD *)(v30 + 96) = v94;
      ++v19;
      *(_OWORD *)(v30 + 16) = v64;
      *(_OWORD *)(v30 + 32) = v70;
      if (v19 == 8) {
        return v17 + 224 == a2;
      }
    }

    uint64_t v16 = v17;
    v18 += 224LL;
    v17 += 224LL;
    if (v17 == a2) {
      return 1LL;
    }
  }

void *sub_10104BBB0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    BOOL result = sub_10104BC28(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8 - 3);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10104BC0C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10104BC28(void *a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925LL) {
    sub_100007008();
  }
  BOOL result = (char *)sub_10001B858((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

void sub_10104BC7C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = a2 - v8;
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (*(double *)(a2 - 16) < *(double *)(v8 + 8))
        {
          uint64_t v115 = *(void *)(v8 + 16);
          __int128 v109 = *(_OWORD *)v8;
          __int128 v47 = *(_OWORD *)(a2 - 24);
          *(void *)(v8 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)unint64_t v8 = v47;
          *(void *)(a2 - _Block_object_dispose(va, 8) = v115;
          *(_OWORD *)(a2 - 24) = v109;
        }

        return;
      case 3LL:
        sub_10104C524((__int128 *)v8, (double *)(v8 + 24), (double *)(a2 - 24));
        return;
      case 4LL:
        sub_10104C888(v8, v8 + 24, v8 + 48, a2 - 24);
        return;
      case 5LL:
        __int128 v48 = (__int128 *)(v8 + 24);
        __int128 v49 = (__int128 *)(v8 + 48);
        BOOL v50 = (__int128 *)(v8 + 72);
        sub_10104C888(v8, v8 + 24, v8 + 48, v8 + 72);
        if (*(double *)(a2 - 16) < *(double *)(v8 + 80))
        {
          __int128 v51 = *v50;
          uint64_t v52 = *(void *)(v8 + 88);
          uint64_t v53 = *(void *)(a2 - 8);
          *BOOL v50 = *(_OWORD *)(a2 - 24);
          *(void *)(v8 + 8_Block_object_dispose(va, 8) = v53;
          *(void *)(a2 - _Block_object_dispose(va, 8) = v52;
          *(_OWORD *)(a2 - 24) = v51;
          if (*(double *)(v8 + 80) < *(double *)(v8 + 56))
          {
            uint64_t v54 = *(void *)(v8 + 64);
            __int128 v55 = *v49;
            *__int128 v49 = *v50;
            *(void *)(v8 + 64) = *(void *)(v8 + 88);
            *BOOL v50 = v55;
            *(void *)(v8 + 8_Block_object_dispose(va, 8) = v54;
            if (*(double *)(v8 + 56) < *(double *)(v8 + 32))
            {
              uint64_t v56 = *(void *)(v8 + 40);
              __int128 v57 = *v48;
              *__int128 v48 = *v49;
              *(void *)(v8 + 40) = *(void *)(v8 + 64);
              *__int128 v49 = v57;
              *(void *)(v8 + 64) = v56;
              if (*(double *)(v8 + 32) < *(double *)(v8 + 8))
              {
                uint64_t v116 = *(void *)(v8 + 16);
                __int128 v110 = *(_OWORD *)v8;
                *(_OWORD *)unint64_t v8 = *v48;
                *(void *)(v8 + 16) = *(void *)(v8 + 40);
                *__int128 v48 = v110;
                *(void *)(v8 + 40) = v116;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 575)
        {
          __int128 v58 = (void *)(v8 + 24);
          BOOL v60 = v8 == a2 || v58 == (void *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              uint64_t v61 = 0LL;
              unint64_t v62 = v8;
              do
              {
                __int128 v63 = v58;
                double v64 = *(double *)(v62 + 32);
                if (v64 < *(double *)(v62 + 8))
                {
                  uint64_t v65 = *v58;
                  uint64_t v66 = *(void *)(v62 + 40);
                  uint64_t v67 = v61;
                  while (1)
                  {
                    uint64_t v68 = v8 + v67;
                    *(_OWORD *)(v68 + 24) = *(_OWORD *)(v8 + v67);
                    *(void *)(v68 + 40) = *(void *)(v8 + v67 + 16);
                    if (!v67) {
                      break;
                    }
                    v67 -= 24LL;
                    if (v64 >= *(double *)(v68 - 16))
                    {
                      uint64_t v69 = v8 + v67 + 24;
                      goto LABEL_79;
                    }
                  }

                  uint64_t v69 = v8;
LABEL_79:
                  *(void *)uint64_t v69 = v65;
                  *(double *)(v69 + _Block_object_dispose(va, 8) = v64;
                  *(void *)(v69 + 16) = v66;
                }

                __int128 v58 = v63 + 3;
                v61 += 24LL;
                unint64_t v62 = (unint64_t)v63;
              }

              while (v63 + 3 != (void *)a2);
            }
          }

          else if (!v60)
          {
            do
            {
              __int128 v100 = v58;
              double v101 = *(double *)(a1 + 32);
              if (v101 < *(double *)(a1 + 8))
              {
                uint64_t v102 = *v58;
                uint64_t v103 = *(void *)(a1 + 40);
                __int128 v104 = (double *)v58;
                do
                {
                  *(_OWORD *)__int128 v104 = *(_OWORD *)(v104 - 3);
                  _DWORD v104[2] = *(v104 - 1);
                  double v105 = *(v104 - 5);
                  v104 -= 3;
                }

                while (v101 < v105);
                *(void *)__int128 v104 = v102;
                v104[1] = v101;
                *((void *)v104 + 2) = v103;
              }

              v58 += 3;
              a1 = (uint64_t)v100;
            }

            while (v100 + 3 != (void *)a2);
          }

          return;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v70 = (unint64_t)(v10 - 2) >> 1;
            int64_t v71 = v70;
            do
            {
              int64_t v72 = v71;
              if (v70 >= v71)
              {
                uint64_t v73 = (2 * v71) | 1;
                unint64_t v74 = v8 + 24 * v73;
                if (2 * v72 + 2 < v10 && *(double *)(v8 + 24 * v73 + 8) < *(double *)(v74 + 32))
                {
                  v74 += 24LL;
                  uint64_t v73 = 2 * v72 + 2;
                }

                double v75 = *(double *)(v8 + 24 * v72 + 8);
                if (*(double *)(v74 + 8) >= v75)
                {
                  unint64_t v76 = v8 + 24 * v72;
                  uint64_t v77 = *(void *)v76;
                  uint64_t v78 = *(void *)(v76 + 16);
                  do
                  {
                    unint64_t v79 = v76;
                    unint64_t v76 = v74;
                    __int128 v80 = *(_OWORD *)v74;
                    *(void *)(v79 + 16) = *(void *)(v74 + 16);
                    *(_OWORD *)unint64_t v79 = v80;
                    if (v70 < v73) {
                      break;
                    }
                    uint64_t v81 = (2 * v73) | 1;
                    unint64_t v74 = v8 + 24 * v81;
                    uint64_t v82 = 2 * v73 + 2;
                    if (v82 < v10 && *(double *)(v8 + 24 * v81 + 8) < *(double *)(v74 + 32))
                    {
                      v74 += 24LL;
                      uint64_t v81 = v82;
                    }

                    uint64_t v73 = v81;
                  }

                  while (*(double *)(v74 + 8) >= v75);
                  *(void *)unint64_t v76 = v77;
                  *(double *)(v76 + _Block_object_dispose(va, 8) = v75;
                  *(void *)(v76 + 16) = v78;
                }
              }

              int64_t v71 = v72 - 1;
            }

            while (v72);
            int64_t v83 = v9 / 0x18uLL;
            do
            {
              uint64_t v84 = 0LL;
              uint64_t v117 = *(void *)(v8 + 16);
              __int128 v111 = *(_OWORD *)v8;
              unint64_t v85 = v8;
              do
              {
                unint64_t v86 = v85;
                uint64_t v87 = v84 + 1;
                v85 += 24 * (v84 + 1);
                uint64_t v88 = 2 * v84;
                uint64_t v84 = (2 * v84) | 1;
                int64_t v89 = v88 + 2;
                if (v89 < v83 && *(double *)(v86 + 24 * v87 + 8) < *(double *)(v85 + 32))
                {
                  v85 += 24LL;
                  uint64_t v84 = v89;
                }

                __int128 v90 = *(_OWORD *)v85;
                *(void *)(v86 + 16) = *(void *)(v85 + 16);
                *(_OWORD *)unint64_t v86 = v90;
              }

              while (v84 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              a2 -= 24LL;
              if (v85 == a2)
              {
                *(void *)(v85 + 16) = v117;
                *(_OWORD *)unint64_t v85 = v111;
              }

              else
              {
                __int128 v91 = *(_OWORD *)a2;
                *(void *)(v85 + 16) = *(void *)(a2 + 16);
                *(_OWORD *)unint64_t v85 = v91;
                *(void *)(a2 + 16) = v117;
                *(_OWORD *)a2 = v111;
                uint64_t v92 = v85 - v8 + 24;
                if (v92 >= 25)
                {
                  unint64_t v93 = (v92 / 0x18uLL - 2) >> 1;
                  double v94 = *(double *)(v85 + 8);
                  if (*(double *)(v8 + 24 * v93 + 8) < v94)
                  {
                    uint64_t v95 = *(void *)v85;
                    uint64_t v96 = *(void *)(v85 + 16);
                    do
                    {
                      unint64_t v97 = v85;
                      unint64_t v85 = v8 + 24 * v93;
                      __int128 v98 = *(_OWORD *)v85;
                      *(void *)(v97 + 16) = *(void *)(v85 + 16);
                      *(_OWORD *)unint64_t v97 = v98;
                      if (!v93) {
                        break;
                      }
                      unint64_t v93 = (v93 - 1) >> 1;
                    }

                    while (*(double *)(v8 + 24 * v93 + 8) < v94);
                    *(void *)unint64_t v85 = v95;
                    *(double *)(v85 + _Block_object_dispose(va, 8) = v94;
                    *(void *)(v85 + 16) = v96;
                  }
                }
              }
            }

            while (v83-- > 2);
          }

          return;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        unint64_t v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_10104C524((__int128 *)(a1 + 24 * v11), (double *)a1, (double *)(a2 - 24));
        }

        else
        {
          sub_10104C524((__int128 *)a1, (double *)(a1 + 24 * v11), (double *)(a2 - 24));
          uint64_t v13 = 3 * v11;
          __int128 v14 = (double *)(a1 + 24 * v11 - 24);
          sub_10104C524((__int128 *)(a1 + 24), v14, (double *)(a2 - 48));
          __int128 v15 = (double *)(a1 + 24 + 8 * v13);
          sub_10104C524((__int128 *)(a1 + 48), v15, (double *)(a2 - 72));
          sub_10104C524((__int128 *)v14, (double *)v12, v15);
          uint64_t v112 = *(void *)(a1 + 16);
          __int128 v106 = *(_OWORD *)a1;
          uint64_t v16 = *(void *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(void *)(a1 + 16) = v16;
          *(void *)(v12 + 16) = v112;
          *(_OWORD *)unint64_t v12 = v106;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v17 = *(double *)(a1 + 8);
          if (v17 >= *(double *)(a2 - 16))
          {
            unint64_t v36 = a1 + 24;
            do
            {
              unint64_t v8 = v36;
              if (v36 >= a2) {
                break;
              }
              double v37 = *(double *)(v36 + 8);
              v36 += 24LL;
            }

            while (v17 >= v37);
          }

          else
          {
            uint64_t v34 = a1;
            do
            {
              unint64_t v8 = v34 + 24;
              double v35 = *(double *)(v34 + 32);
              v34 += 24LL;
            }

            while (v17 >= v35);
          }

          unint64_t v38 = a2;
          if (v8 < a2)
          {
            unint64_t v39 = a2;
            do
            {
              unint64_t v38 = v39 - 24;
              double v40 = *(double *)(v39 - 16);
              v39 -= 24LL;
            }

            while (v17 < v40);
          }

          double v41 = *(double *)a1;
          uint64_t v42 = *(void *)(a1 + 16);
          while (v8 < v38)
          {
            uint64_t v114 = *(void *)(v8 + 16);
            __int128 v108 = *(_OWORD *)v8;
            __int128 v43 = *(_OWORD *)v38;
            *(void *)(v8 + 16) = *(void *)(v38 + 16);
            *(_OWORD *)unint64_t v8 = v43;
            *(void *)(v38 + 16) = v114;
            *(_OWORD *)unint64_t v38 = v108;
            do
            {
              double v44 = *(double *)(v8 + 32);
              v8 += 24LL;
            }

            while (v17 >= v44);
            do
            {
              double v45 = *(double *)(v38 - 16);
              v38 -= 24LL;
            }

            while (v17 < v45);
          }

          if (v8 - 24 != a1)
          {
            __int128 v46 = *(_OWORD *)(v8 - 24);
            *(void *)(a1 + 16) = *(void *)(v8 - 8);
            *(_OWORD *)a1 = v46;
          }

          a4 = 0;
          *(double *)(v8 - 24) = v41;
          *(double *)(v8 - 16) = v17;
          *(void *)(v8 - _Block_object_dispose(va, 8) = v42;
          continue;
        }

        double v17 = *(double *)(a1 + 8);
LABEL_11:
        uint64_t v18 = 0LL;
        double v19 = *(double *)a1;
        uint64_t v20 = *(void *)(a1 + 16);
        do
        {
          double v21 = *(double *)(a1 + v18 + 32);
          v18 += 24LL;
        }

        while (v21 < v17);
        unint64_t v22 = a1 + v18;
        unint64_t v23 = a2;
        if (v18 == 24)
        {
          unint64_t v26 = a2;
          while (v22 < v26)
          {
            unint64_t v24 = v26 - 24;
            double v27 = *(double *)(v26 - 16);
            v26 -= 24LL;
            if (v27 < v17) {
              goto LABEL_21;
            }
          }

          unint64_t v24 = v26;
        }

        else
        {
          do
          {
            unint64_t v24 = v23 - 24;
            double v25 = *(double *)(v23 - 16);
            v23 -= 24LL;
          }

          while (v25 >= v17);
        }

__int128 *sub_10104C524(__int128 *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a3[1];
  if (v3 >= *((double *)result + 1))
  {
    if (v4 < v3)
    {
      uint64_t v8 = *((void *)a2 + 2);
      __int128 v9 = *(_OWORD *)a2;
      uint64_t v10 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v10;
      *(_OWORD *)a3 = v9;
      *((void *)a3 + 2) = v8;
      if (a2[1] < *((double *)result + 1))
      {
        uint64_t v11 = *((void *)result + 2);
        __int128 v12 = *result;
        uint64_t v13 = *((void *)a2 + 2);
        *BOOL result = *(_OWORD *)a2;
        *((void *)result + 2) = v13;
        *(_OWORD *)a2 = v12;
        *((void *)a2 + 2) = v11;
      }
    }
  }

  else
  {
    if (v4 >= v3)
    {
      uint64_t v14 = *((void *)result + 2);
      __int128 v15 = *result;
      uint64_t v16 = *((void *)a2 + 2);
      *BOOL result = *(_OWORD *)a2;
      *((void *)result + 2) = v16;
      *(_OWORD *)a2 = v15;
      *((void *)a2 + 2) = v14;
      if (a3[1] >= a2[1]) {
        return result;
      }
      uint64_t v5 = *((void *)a2 + 2);
      __int128 v6 = *(_OWORD *)a2;
      uint64_t v17 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v17;
    }

    else
    {
      uint64_t v5 = *((void *)result + 2);
      __int128 v6 = *result;
      uint64_t v7 = *((void *)a3 + 2);
      *BOOL result = *(_OWORD *)a3;
      *((void *)result + 2) = v7;
    }

    *(_OWORD *)a3 = v6;
    *((void *)a3 + 2) = v5;
  }

  return result;
}

BOOL sub_10104C614(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        __int128 v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(void *)(a2 - _Block_object_dispose(va, 8) = v6;
      }

      return result;
    case 3uLL:
      sub_10104C524((__int128 *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1LL;
    case 4uLL:
      sub_10104C888(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1LL;
    case 5uLL:
      double v19 = (__int128 *)(a1 + 24);
      uint64_t v20 = (__int128 *)(a1 + 48);
      double v21 = (__int128 *)(a1 + 72);
      sub_10104C888(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        uint64_t v22 = *(void *)(a1 + 88);
        __int128 v23 = *v21;
        uint64_t v24 = *(void *)(a2 - 8);
        *double v21 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v24;
        *(_OWORD *)(a2 - 24) = v23;
        *(void *)(a2 - _Block_object_dispose(va, 8) = v22;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          uint64_t v25 = *(void *)(a1 + 64);
          __int128 v26 = *v20;
          *uint64_t v20 = *v21;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *double v21 = v26;
          *(void *)(a1 + 8_Block_object_dispose(va, 8) = v25;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            uint64_t v27 = *(void *)(a1 + 40);
            __int128 v28 = *v19;
            *double v19 = *v20;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *uint64_t v20 = v28;
            *(void *)(a1 + 64) = v27;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              uint64_t v29 = *(void *)(a1 + 16);
              __int128 v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *double v19 = v30;
              *(void *)(a1 + 40) = v29;
            }
          }
        }
      }

      return 1LL;
    default:
      uint64_t v9 = a1 + 48;
      sub_10104C524((__int128 *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = *(void *)(v10 + 16);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 8_Block_object_dispose(va, 8) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24LL;
        if (v13 >= *(double *)(v17 + 32))
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }

      uint64_t v18 = a1;
LABEL_13:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + _Block_object_dispose(va, 8) = v13;
      *(void *)(v18 + 16) = v15;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }

    uint64_t v9 = v10;
    v11 += 24LL;
    v10 += 24LL;
    if (v10 == a2) {
      return 1LL;
    }
  }

__n128 sub_10104C888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }

  return result;
}

void sub_10104C954(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = (uint64_t)a2 - v8;
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (*((double *)a2 - 27) < *(double *)(v8 + 8))
        {
          __int128 v270 = *(_OWORD *)v8;
          __int128 v282 = *(_OWORD *)(v8 + 16);
          __int128 v317 = *(_OWORD *)(v8 + 64);
          __int128 v329 = *(_OWORD *)(v8 + 80);
          __int128 v293 = *(_OWORD *)(v8 + 32);
          __int128 v305 = *(_OWORD *)(v8 + 48);
          __int128 v365 = *(_OWORD *)(v8 + 128);
          __int128 v377 = *(_OWORD *)(v8 + 144);
          __int128 v341 = *(_OWORD *)(v8 + 96);
          __int128 v353 = *(_OWORD *)(v8 + 112);
          *(_OWORD *)v413 = *(_OWORD *)(v8 + 192);
          *(_OWORD *)&v413[16] = *(_OWORD *)(v8 + 208);
          __int128 v389 = *(_OWORD *)(v8 + 160);
          __int128 v401 = *(_OWORD *)(v8 + 176);
          __int128 v90 = *(a2 - 13);
          *(_OWORD *)unint64_t v8 = *(a2 - 14);
          *(_OWORD *)(v8 + 16) = v90;
          __int128 v91 = *(a2 - 12);
          __int128 v92 = *(a2 - 11);
          __int128 v93 = *(a2 - 9);
          *(_OWORD *)(v8 + 64) = *(a2 - 10);
          *(_OWORD *)(v8 + 80) = v93;
          *(_OWORD *)(v8 + 32) = v91;
          *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v92;
          __int128 v94 = *(a2 - 8);
          __int128 v95 = *(a2 - 7);
          __int128 v96 = *(a2 - 5);
          *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = *(a2 - 6);
          *(_OWORD *)(v8 + 144) = v96;
          *(_OWORD *)(v8 + 96) = v94;
          *(_OWORD *)(v8 + 112) = v95;
          __int128 v97 = *(a2 - 4);
          __int128 v98 = *(a2 - 3);
          __int128 v99 = *(a2 - 2);
          *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 176) = v98;
          *(_OWORD *)(v8 + 192) = v99;
          *(_OWORD *)(v8 + 160) = v97;
          *(a2 - 14) = v270;
          *(a2 - 13) = v282;
          *(a2 - 10) = v317;
          *(a2 - 9) = v329;
          *(a2 - 12) = v293;
          *(a2 - 11) = v305;
          *(a2 - 6) = v365;
          *(a2 - 5) = v377;
          *(a2 - _Block_object_dispose(va, 8) = v341;
          *(a2 - 7) = v353;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v413[13];
          *(a2 - 3) = v401;
          *(a2 - 2) = *(_OWORD *)v413;
          *(a2 - 4) = v389;
        }

        return;
      case 3LL:
        sub_10104972C((__int128 *)v8, (__int128 *)(v8 + 224), a2 - 14);
        return;
      case 4LL:
        sub_10104A10C(v8, v8 + 224, v8 + 448, (uint64_t)(a2 - 14));
        return;
      case 5LL:
        __int128 v100 = (__int128 *)(v8 + 224);
        double v101 = (__int128 *)(v8 + 448);
        uint64_t v102 = (__int128 *)(v8 + 672);
        sub_10104A10C(v8, v8 + 224, v8 + 448, v8 + 672);
        if (*((double *)a2 - 27) < *(double *)(v8 + 680))
        {
          __int128 v318 = *(_OWORD *)(v8 + 736);
          __int128 v330 = *(_OWORD *)(v8 + 752);
          __int128 v294 = *(_OWORD *)(v8 + 704);
          __int128 v306 = *(_OWORD *)(v8 + 720);
          __int128 v366 = *(_OWORD *)(v8 + 800);
          __int128 v378 = *(_OWORD *)(v8 + 816);
          __int128 v342 = *(_OWORD *)(v8 + 768);
          __int128 v354 = *(_OWORD *)(v8 + 784);
          *(_OWORD *)v414 = *(_OWORD *)(v8 + 864);
          *(_OWORD *)&v414[16] = *(_OWORD *)(v8 + 880);
          __int128 v390 = *(_OWORD *)(v8 + 832);
          __int128 v402 = *(_OWORD *)(v8 + 848);
          __int128 v271 = *v102;
          __int128 v283 = *(_OWORD *)(v8 + 688);
          __int128 v103 = *(a2 - 13);
          __int128 *v102 = *(a2 - 14);
          *(_OWORD *)(v8 + 68_Block_object_dispose(va, 8) = v103;
          __int128 v104 = *(a2 - 12);
          __int128 v105 = *(a2 - 11);
          __int128 v106 = *(a2 - 9);
          *(_OWORD *)(v8 + 736) = *(a2 - 10);
          *(_OWORD *)(v8 + 752) = v106;
          *(_OWORD *)(v8 + 704) = v104;
          *(_OWORD *)(v8 + 720) = v105;
          __int128 v107 = *(a2 - 8);
          __int128 v108 = *(a2 - 7);
          __int128 v109 = *(a2 - 5);
          *(_OWORD *)(v8 + 800) = *(a2 - 6);
          *(_OWORD *)(v8 + 816) = v109;
          *(_OWORD *)(v8 + 76_Block_object_dispose(va, 8) = v107;
          *(_OWORD *)(v8 + 784) = v108;
          __int128 v110 = *(a2 - 4);
          __int128 v111 = *(a2 - 3);
          __int128 v112 = *(a2 - 2);
          *(_OWORD *)(v8 + 877) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 84_Block_object_dispose(va, 8) = v111;
          *(_OWORD *)(v8 + 864) = v112;
          *(_OWORD *)(v8 + 832) = v110;
          *(a2 - 14) = v271;
          *(a2 - 13) = v283;
          *(a2 - 10) = v318;
          *(a2 - 9) = v330;
          *(a2 - 12) = v294;
          *(a2 - 11) = v306;
          *(a2 - 6) = v366;
          *(a2 - 5) = v378;
          *(a2 - _Block_object_dispose(va, 8) = v342;
          *(a2 - 7) = v354;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v414[13];
          *(a2 - 3) = v402;
          *(a2 - 2) = *(_OWORD *)v414;
          *(a2 - 4) = v390;
          if (*(double *)(v8 + 680) < *(double *)(v8 + 456))
          {
            __int128 v391 = *(_OWORD *)(v8 + 608);
            __int128 v403 = *(_OWORD *)(v8 + 624);
            *(_OWORD *)v415 = *(_OWORD *)(v8 + 640);
            *(_OWORD *)&v415[16] = *(_OWORD *)(v8 + 656);
            __int128 v343 = *(_OWORD *)(v8 + 544);
            __int128 v355 = *(_OWORD *)(v8 + 560);
            __int128 v367 = *(_OWORD *)(v8 + 576);
            __int128 v379 = *(_OWORD *)(v8 + 592);
            __int128 v295 = *(_OWORD *)(v8 + 480);
            __int128 v307 = *(_OWORD *)(v8 + 496);
            __int128 v319 = *(_OWORD *)(v8 + 512);
            __int128 v331 = *(_OWORD *)(v8 + 528);
            __int128 v272 = *v101;
            __int128 v284 = *(_OWORD *)(v8 + 464);
            __int128 v113 = *(_OWORD *)(v8 + 848);
            *(_OWORD *)(v8 + 60_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 832);
            *(_OWORD *)(v8 + 624) = v113;
            *(_OWORD *)(v8 + 640) = *(_OWORD *)(v8 + 864);
            *(_OWORD *)(v8 + 653) = *(_OWORD *)(v8 + 877);
            __int128 v114 = *(_OWORD *)(v8 + 784);
            *(_OWORD *)(v8 + 544) = *(_OWORD *)(v8 + 768);
            *(_OWORD *)(v8 + 560) = v114;
            __int128 v115 = *(_OWORD *)(v8 + 816);
            *(_OWORD *)(v8 + 576) = *(_OWORD *)(v8 + 800);
            *(_OWORD *)(v8 + 592) = v115;
            __int128 v116 = *(_OWORD *)(v8 + 720);
            *(_OWORD *)(v8 + 480) = *(_OWORD *)(v8 + 704);
            *(_OWORD *)(v8 + 496) = v116;
            __int128 v117 = *(_OWORD *)(v8 + 752);
            *(_OWORD *)(v8 + 512) = *(_OWORD *)(v8 + 736);
            *(_OWORD *)(v8 + 52_Block_object_dispose(va, 8) = v117;
            __int128 v118 = *(_OWORD *)(v8 + 688);
            __int128 *v101 = *v102;
            *(_OWORD *)(v8 + 464) = v118;
            *(_OWORD *)(v8 + 832) = v391;
            *(_OWORD *)(v8 + 84_Block_object_dispose(va, 8) = v403;
            *(_OWORD *)(v8 + 864) = *(_OWORD *)v415;
            *(_OWORD *)(v8 + 877) = *(_OWORD *)&v415[13];
            *(_OWORD *)(v8 + 76_Block_object_dispose(va, 8) = v343;
            *(_OWORD *)(v8 + 784) = v355;
            *(_OWORD *)(v8 + 800) = v367;
            *(_OWORD *)(v8 + 816) = v379;
            *(_OWORD *)(v8 + 704) = v295;
            *(_OWORD *)(v8 + 720) = v307;
            *(_OWORD *)(v8 + 736) = v319;
            *(_OWORD *)(v8 + 752) = v331;
            BOOL v119 = *(double *)(v8 + 456) < *(double *)(v8 + 232);
            __int128 *v102 = v272;
            *(_OWORD *)(v8 + 68_Block_object_dispose(va, 8) = v284;
            if (v119)
            {
              __int128 v392 = *(_OWORD *)(v8 + 384);
              __int128 v404 = *(_OWORD *)(v8 + 400);
              *(_OWORD *)v416 = *(_OWORD *)(v8 + 416);
              *(_OWORD *)&v416[16] = *(_OWORD *)(v8 + 432);
              __int128 v344 = *(_OWORD *)(v8 + 320);
              __int128 v356 = *(_OWORD *)(v8 + 336);
              __int128 v368 = *(_OWORD *)(v8 + 352);
              __int128 v380 = *(_OWORD *)(v8 + 368);
              __int128 v296 = *(_OWORD *)(v8 + 256);
              __int128 v308 = *(_OWORD *)(v8 + 272);
              __int128 v320 = *(_OWORD *)(v8 + 288);
              __int128 v332 = *(_OWORD *)(v8 + 304);
              __int128 v273 = *v100;
              __int128 v285 = *(_OWORD *)(v8 + 240);
              __int128 v120 = *(_OWORD *)(v8 + 624);
              *(_OWORD *)(v8 + 384) = *(_OWORD *)(v8 + 608);
              *(_OWORD *)(v8 + 400) = v120;
              *(_OWORD *)(v8 + 416) = *(_OWORD *)(v8 + 640);
              *(_OWORD *)(v8 + 429) = *(_OWORD *)(v8 + 653);
              __int128 v121 = *(_OWORD *)(v8 + 560);
              *(_OWORD *)(v8 + 320) = *(_OWORD *)(v8 + 544);
              *(_OWORD *)(v8 + 336) = v121;
              __int128 v122 = *(_OWORD *)(v8 + 592);
              *(_OWORD *)(v8 + 352) = *(_OWORD *)(v8 + 576);
              *(_OWORD *)(v8 + 36_Block_object_dispose(va, 8) = v122;
              __int128 v123 = *(_OWORD *)(v8 + 496);
              *(_OWORD *)(v8 + 2sub_1011C52D0(v1 - 56) = *(_OWORD *)(v8 + 480);
              *(_OWORD *)(v8 + 272) = v123;
              __int128 v124 = *(_OWORD *)(v8 + 528);
              *(_OWORD *)(v8 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 512);
              *(_OWORD *)(v8 + 304) = v124;
              __int128 v125 = *(_OWORD *)(v8 + 464);
              __int128 *v100 = *v101;
              *(_OWORD *)(v8 + 240) = v125;
              *(_OWORD *)(v8 + 60_Block_object_dispose(va, 8) = v392;
              *(_OWORD *)(v8 + 624) = v404;
              *(_OWORD *)(v8 + 640) = *(_OWORD *)v416;
              *(_OWORD *)(v8 + 653) = *(_OWORD *)&v416[13];
              *(_OWORD *)(v8 + 544) = v344;
              *(_OWORD *)(v8 + 560) = v356;
              *(_OWORD *)(v8 + 576) = v368;
              *(_OWORD *)(v8 + 592) = v380;
              *(_OWORD *)(v8 + 480) = v296;
              *(_OWORD *)(v8 + 496) = v308;
              *(_OWORD *)(v8 + 512) = v320;
              *(_OWORD *)(v8 + 52_Block_object_dispose(va, 8) = v332;
              BOOL v119 = *(double *)(v8 + 232) < *(double *)(v8 + 8);
              __int128 *v101 = v273;
              *(_OWORD *)(v8 + 464) = v285;
              if (v119)
              {
                __int128 v274 = *(_OWORD *)v8;
                __int128 v286 = *(_OWORD *)(v8 + 16);
                __int128 v321 = *(_OWORD *)(v8 + 64);
                __int128 v333 = *(_OWORD *)(v8 + 80);
                __int128 v297 = *(_OWORD *)(v8 + 32);
                __int128 v309 = *(_OWORD *)(v8 + 48);
                __int128 v369 = *(_OWORD *)(v8 + 128);
                __int128 v381 = *(_OWORD *)(v8 + 144);
                __int128 v345 = *(_OWORD *)(v8 + 96);
                __int128 v357 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v417 = *(_OWORD *)(v8 + 192);
                *(_OWORD *)&v417[16] = *(_OWORD *)(v8 + 208);
                __int128 v393 = *(_OWORD *)(v8 + 160);
                __int128 v405 = *(_OWORD *)(v8 + 176);
                __int128 v126 = *(_OWORD *)(v8 + 304);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 288);
                *(_OWORD *)(v8 + 80) = v126;
                __int128 v127 = *(_OWORD *)(v8 + 272);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 256);
                *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v127;
                __int128 v128 = *(_OWORD *)(v8 + 368);
                *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 352);
                *(_OWORD *)(v8 + 144) = v128;
                __int128 v129 = *(_OWORD *)(v8 + 336);
                *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 320);
                *(_OWORD *)(v8 + 112) = v129;
                *(_OWORD *)(v8 + 205) = *(_OWORD *)(v8 + 429);
                __int128 v130 = *(_OWORD *)(v8 + 416);
                __int128 v131 = *(_OWORD *)(v8 + 384);
                *(_OWORD *)(v8 + 176) = *(_OWORD *)(v8 + 400);
                *(_OWORD *)(v8 + 192) = v130;
                *(_OWORD *)(v8 + 160) = v131;
                __int128 v132 = *(_OWORD *)(v8 + 240);
                *(_OWORD *)unint64_t v8 = *v100;
                *(_OWORD *)(v8 + 16) = v132;
                *(_OWORD *)(v8 + 384) = v393;
                *(_OWORD *)(v8 + 400) = v405;
                *(_OWORD *)(v8 + 416) = *(_OWORD *)v417;
                *(_OWORD *)(v8 + 429) = *(_OWORD *)&v417[13];
                *(_OWORD *)(v8 + 320) = v345;
                *(_OWORD *)(v8 + 336) = v357;
                *(_OWORD *)(v8 + 352) = v369;
                *(_OWORD *)(v8 + 36_Block_object_dispose(va, 8) = v381;
                *(_OWORD *)(v8 + 2sub_1011C52D0(v1 - 56) = v297;
                *(_OWORD *)(v8 + 272) = v309;
                *(_OWORD *)(v8 + 28_Block_object_dispose(va, 8) = v321;
                *(_OWORD *)(v8 + 304) = v333;
                __int128 *v100 = v274;
                *(_OWORD *)(v8 + 240) = v286;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 5375)
        {
          __int128 v133 = (__int128 *)(v8 + 224);
          BOOL v135 = (__int128 *)v8 == a2 || v133 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v135)
            {
              uint64_t v136 = 0LL;
              unint64_t v137 = v8;
              do
              {
                uint64_t v138 = v133;
                double v139 = *(double *)(v137 + 232);
                if (v139 < *(double *)(v137 + 8))
                {
                  uint64_t v140 = *(void *)v133;
                  __int128 v394 = *(_OWORD *)(v137 + 400);
                  *(_OWORD *)v406 = *(_OWORD *)(v137 + 416);
                  *(_OWORD *)&v406[16] = *(_OWORD *)(v137 + 432);
                  __int128 v346 = *(_OWORD *)(v137 + 336);
                  __int128 v358 = *(_OWORD *)(v137 + 352);
                  __int128 v370 = *(_OWORD *)(v137 + 368);
                  __int128 v382 = *(_OWORD *)(v137 + 384);
                  __int128 v298 = *(_OWORD *)(v137 + 272);
                  __int128 v310 = *(_OWORD *)(v137 + 288);
                  __int128 v322 = *(_OWORD *)(v137 + 304);
                  __int128 v334 = *(_OWORD *)(v137 + 320);
                  __int128 v142 = *(_OWORD *)(v137 + 240);
                  __int128 v141 = *(_OWORD *)(v137 + 256);
                  uint64_t v143 = v136;
                  __int128 v275 = v142;
                  while (1)
                  {
                    int v144 = (double *)(v8 + v143);
                    __int128 v145 = *(_OWORD *)(v8 + v143 + 176);
                    *((_OWORD *)v144 + 24) = *(_OWORD *)(v8 + v143 + 160);
                    *((_OWORD *)v144 + 25) = v145;
                    *((_OWORD *)v144 + 26) = *(_OWORD *)(v8 + v143 + 192);
                    *(_OWORD *)(v8 + v143 + 429) = *(_OWORD *)(v8 + v143 + 205);
                    __int128 v146 = *(_OWORD *)(v8 + v143 + 112);
                    *((_OWORD *)v144 + 20) = *(_OWORD *)(v8 + v143 + 96);
                    *((_OWORD *)v144 + 21) = v146;
                    __int128 v147 = *(_OWORD *)(v8 + v143 + 144);
                    *((_OWORD *)v144 + 22) = *(_OWORD *)(v8 + v143 + 128);
                    *((_OWORD *)v144 + 23) = v147;
                    __int128 v148 = *(_OWORD *)(v8 + v143 + 48);
                    *((_OWORD *)v144 + 16) = *(_OWORD *)(v8 + v143 + 32);
                    *((_OWORD *)v144 + 17) = v148;
                    __int128 v149 = *(_OWORD *)(v8 + v143 + 80);
                    *((_OWORD *)v144 + 1_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + v143 + 64);
                    *((_OWORD *)v144 + 19) = v149;
                    __int128 v150 = *(_OWORD *)(v8 + v143 + 16);
                    *((_OWORD *)v144 + 14) = *(_OWORD *)(v8 + v143);
                    *((_OWORD *)v144 + 15) = v150;
                    if (!v143) {
                      break;
                    }
                    v143 -= 224LL;
                    if (v139 >= *(v144 - 27))
                    {
                      uint64_t v151 = v8 + v143 + 224;
                      goto LABEL_80;
                    }
                  }

                  uint64_t v151 = v8;
LABEL_80:
                  *(void *)uint64_t v151 = v140;
                  *(double *)(v151 + _Block_object_dispose(va, 8) = v139;
                  *(_OWORD *)(v151 + 176) = v394;
                  *(_OWORD *)(v151 + 192) = *(_OWORD *)v406;
                  *(_OWORD *)(v151 + 205) = *(_OWORD *)&v406[13];
                  *(_OWORD *)(v151 + 112) = v346;
                  *(_OWORD *)(v151 + 12_Block_object_dispose(va, 8) = v358;
                  *(_OWORD *)(v151 + 144) = v370;
                  *(_OWORD *)(v151 + 160) = v382;
                  *(_OWORD *)(v151 + 4_Block_object_dispose(va, 8) = v298;
                  *(_OWORD *)(v151 + 64) = v310;
                  *(_OWORD *)(v151 + 80) = v322;
                  *(_OWORD *)(v151 + 96) = v334;
                  *(_OWORD *)(v151 + 16) = v275;
                  *(_OWORD *)(v151 + 32) = v141;
                }

                __int128 v133 = v138 + 14;
                v136 += 224LL;
                unint64_t v137 = (unint64_t)v138;
              }

              while (v138 + 14 != a2);
            }
          }

          else if (!v135)
          {
            do
            {
              uint64_t v220 = v133;
              double v221 = *(double *)(a1 + 232);
              if (v221 < *(double *)(a1 + 8))
              {
                uint64_t v222 = *(void *)v133;
                __int128 v397 = *(_OWORD *)(a1 + 400);
                *(_OWORD *)v409 = *(_OWORD *)(a1 + 416);
                *(_OWORD *)&v409[16] = *(_OWORD *)(a1 + 432);
                __int128 v349 = *(_OWORD *)(a1 + 336);
                __int128 v361 = *(_OWORD *)(a1 + 352);
                __int128 v373 = *(_OWORD *)(a1 + 368);
                __int128 v385 = *(_OWORD *)(a1 + 384);
                __int128 v301 = *(_OWORD *)(a1 + 272);
                __int128 v313 = *(_OWORD *)(a1 + 288);
                __int128 v325 = *(_OWORD *)(a1 + 304);
                __int128 v337 = *(_OWORD *)(a1 + 320);
                __int128 v278 = *(_OWORD *)(a1 + 240);
                __int128 v289 = *(_OWORD *)(a1 + 256);
                do
                {
                  uint64_t v223 = a1 + 224;
                  __int128 v224 = *(_OWORD *)(a1 + 176);
                  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(a1 + 400) = v224;
                  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 192);
                  __int128 v225 = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(a1 + 336) = v225;
                  __int128 v226 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v226;
                  __int128 v227 = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(a1 + 272) = v227;
                  __int128 v228 = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(a1 + 304) = v228;
                  __int128 v229 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(a1 + 224) = *(_OWORD *)a1;
                  *(_OWORD *)(a1 + 240) = v229;
                  BOOL v119 = v221 < *(double *)(a1 - 216);
                  __int128 v230 = *(_OWORD *)(a1 + 205);
                  a1 -= 224LL;
                  *(_OWORD *)(v223 + 205) = v230;
                }

                while (v119);
                *(void *)(a1 + 224) = v222;
                *(double *)(a1 + 232) = v221;
                *(_OWORD *)(a1 + 240) = v278;
                *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = v313;
                *(_OWORD *)(a1 + 304) = v325;
                *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = v289;
                *(_OWORD *)(a1 + 272) = v301;
                *(_OWORD *)(a1 + 352) = v361;
                *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v373;
                *(_OWORD *)(a1 + 320) = v337;
                *(_OWORD *)(a1 + 336) = v349;
                *(_OWORD *)(a1 + 429) = *(_OWORD *)&v409[13];
                *(_OWORD *)(a1 + 400) = v397;
                *(_OWORD *)(a1 + 416) = *(_OWORD *)v409;
                *(_OWORD *)(a1 + 384) = v385;
              }

              __int128 v133 = v220 + 14;
              a1 = (uint64_t)v220;
            }

            while (v220 + 14 != a2);
          }

          return;
        }

        if (!a3)
        {
          int64_t v152 = (unint64_t)(v10 - 2) >> 1;
          int64_t v153 = v152;
          do
          {
            int64_t v154 = v153;
            if (v152 >= v153)
            {
              uint64_t v155 = (2 * v153) | 1;
              unint64_t v156 = v8 + 224 * v155;
              if (2 * v153 + 2 < v10 && *(double *)(v8 + 224 * v155 + 8) < *(double *)(v156 + 232))
              {
                v156 += 224LL;
                uint64_t v155 = 2 * v153 + 2;
              }

              double v157 = *(double *)(v8 + 224 * v153 + 8);
              if (*(double *)(v156 + 8) >= v157)
              {
                unint64_t v158 = v8 + 224 * v153;
                uint64_t v159 = *(void *)v158;
                __int128 v276 = *(_OWORD *)(v158 + 16);
                __int128 v311 = *(_OWORD *)(v158 + 64);
                __int128 v323 = *(_OWORD *)(v158 + 80);
                __int128 v287 = *(_OWORD *)(v158 + 32);
                __int128 v299 = *(_OWORD *)(v158 + 48);
                __int128 v359 = *(_OWORD *)(v158 + 128);
                __int128 v371 = *(_OWORD *)(v158 + 144);
                __int128 v335 = *(_OWORD *)(v158 + 96);
                __int128 v347 = *(_OWORD *)(v158 + 112);
                *(_OWORD *)v407 = *(_OWORD *)(v158 + 192);
                *(_OWORD *)&v407[16] = *(_OWORD *)(v158 + 208);
                __int128 v383 = *(_OWORD *)(v158 + 160);
                __int128 v395 = *(_OWORD *)(v158 + 176);
                do
                {
                  int v160 = (_OWORD *)v158;
                  unint64_t v158 = v156;
                  __int128 v161 = *(_OWORD *)(v156 + 16);
                  *int v160 = *(_OWORD *)v156;
                  v160[1] = v161;
                  __int128 v162 = *(_OWORD *)(v156 + 32);
                  __int128 v163 = *(_OWORD *)(v156 + 48);
                  __int128 v164 = *(_OWORD *)(v156 + 80);
                  v160[4] = *(_OWORD *)(v156 + 64);
                  v160[5] = v164;
                  v160[2] = v162;
                  v160[3] = v163;
                  __int128 v165 = *(_OWORD *)(v156 + 96);
                  __int128 v166 = *(_OWORD *)(v156 + 112);
                  __int128 v167 = *(_OWORD *)(v156 + 144);
                  v160[8] = *(_OWORD *)(v156 + 128);
                  v160[9] = v167;
                  v160[6] = v165;
                  v160[7] = v166;
                  __int128 v168 = *(_OWORD *)(v156 + 160);
                  __int128 v169 = *(_OWORD *)(v156 + 176);
                  __int128 v170 = *(_OWORD *)(v156 + 192);
                  *(_OWORD *)((char *)v160 + 205) = *(_OWORD *)(v156 + 205);
                  v160[11] = v169;
                  v160[12] = v170;
                  v160[10] = v168;
                  if (v152 < v155) {
                    break;
                  }
                  uint64_t v171 = (2 * v155) | 1;
                  unint64_t v156 = v8 + 224 * v171;
                  uint64_t v172 = 2 * v155 + 2;
                  if (v172 < v10 && *(double *)(v8 + 224 * v171 + 8) < *(double *)(v156 + 232))
                  {
                    v156 += 224LL;
                    uint64_t v171 = v172;
                  }

                  uint64_t v155 = v171;
                }

                while (*(double *)(v156 + 8) >= v157);
                *(void *)unint64_t v158 = v159;
                *(double *)(v158 + _Block_object_dispose(va, 8) = v157;
                *(_OWORD *)(v158 + 176) = v395;
                *(_OWORD *)(v158 + 192) = *(_OWORD *)v407;
                *(_OWORD *)(v158 + 205) = *(_OWORD *)&v407[13];
                *(_OWORD *)(v158 + 112) = v347;
                *(_OWORD *)(v158 + 12_Block_object_dispose(va, 8) = v359;
                *(_OWORD *)(v158 + 144) = v371;
                *(_OWORD *)(v158 + 160) = v383;
                *(_OWORD *)(v158 + 4_Block_object_dispose(va, 8) = v299;
                *(_OWORD *)(v158 + 64) = v311;
                *(_OWORD *)(v158 + 80) = v323;
                *(_OWORD *)(v158 + 96) = v335;
                *(_OWORD *)(v158 + 16) = v276;
                *(_OWORD *)(v158 + 32) = v287;
              }
            }

            int64_t v153 = v154 - 1;
          }

          while (v154);
          uint64_t v173 = (((unint64_t)v9 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
          while (2)
          {
            uint64_t v174 = 0LL;
            __int128 v277 = *(_OWORD *)v8;
            __int128 v288 = *(_OWORD *)(v8 + 16);
            __int128 v324 = *(_OWORD *)(v8 + 64);
            __int128 v336 = *(_OWORD *)(v8 + 80);
            __int128 v300 = *(_OWORD *)(v8 + 32);
            __int128 v312 = *(_OWORD *)(v8 + 48);
            __int128 v372 = *(_OWORD *)(v8 + 128);
            __int128 v384 = *(_OWORD *)(v8 + 144);
            __int128 v348 = *(_OWORD *)(v8 + 96);
            __int128 v360 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v418 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v418[16] = *(_OWORD *)(v8 + 208);
            __int128 v396 = *(_OWORD *)(v8 + 160);
            __int128 v408 = *(_OWORD *)(v8 + 176);
            unint64_t v175 = v8;
            do
            {
              __int16 v176 = (_OWORD *)v175;
              uint64_t v177 = v174 + 1;
              v175 += 224 * (v174 + 1);
              uint64_t v178 = 2 * v174;
              uint64_t v174 = (2 * v174) | 1;
              uint64_t v179 = v178 + 2;
              if (v179 < v173 && *((double *)&v176[14 * v177] + 1) < *(double *)(v175 + 232))
              {
                v175 += 224LL;
                uint64_t v174 = v179;
              }

              __int128 v180 = *(_OWORD *)(v175 + 16);
              *__int16 v176 = *(_OWORD *)v175;
              v176[1] = v180;
              __int128 v181 = *(_OWORD *)(v175 + 32);
              __int128 v182 = *(_OWORD *)(v175 + 48);
              __int128 v183 = *(_OWORD *)(v175 + 80);
              v176[4] = *(_OWORD *)(v175 + 64);
              v176[5] = v183;
              v176[2] = v181;
              v176[3] = v182;
              __int128 v184 = *(_OWORD *)(v175 + 96);
              __int128 v185 = *(_OWORD *)(v175 + 112);
              __int128 v186 = *(_OWORD *)(v175 + 144);
              v176[8] = *(_OWORD *)(v175 + 128);
              v176[9] = v186;
              v176[6] = v184;
              v176[7] = v185;
              __int128 v187 = *(_OWORD *)(v175 + 160);
              __int128 v188 = *(_OWORD *)(v175 + 176);
              __int128 v189 = *(_OWORD *)(v175 + 192);
              *(_OWORD *)((char *)v176 + 205) = *(_OWORD *)(v175 + 205);
              v176[11] = v188;
              v176[12] = v189;
              v176[10] = v187;
            }

            while (v174 <= (uint64_t)((unint64_t)(v173 - 2) >> 1));
            a2 -= 14;
            if ((__int128 *)v175 != a2)
            {
              __int128 v190 = a2[1];
              *(_OWORD *)unint64_t v175 = *a2;
              *(_OWORD *)(v175 + 16) = v190;
              __int128 v191 = a2[2];
              __int128 v192 = a2[3];
              __int128 v193 = a2[5];
              *(_OWORD *)(v175 + 64) = a2[4];
              *(_OWORD *)(v175 + 80) = v193;
              *(_OWORD *)(v175 + 32) = v191;
              *(_OWORD *)(v175 + 4_Block_object_dispose(va, 8) = v192;
              __int128 v194 = a2[6];
              __int128 v195 = a2[7];
              __int128 v196 = a2[9];
              *(_OWORD *)(v175 + 12_Block_object_dispose(va, 8) = a2[8];
              *(_OWORD *)(v175 + 144) = v196;
              *(_OWORD *)(v175 + 96) = v194;
              *(_OWORD *)(v175 + 112) = v195;
              __int128 v197 = a2[10];
              __int128 v198 = a2[11];
              __int128 v199 = a2[12];
              *(_OWORD *)(v175 + 205) = *(__int128 *)((char *)a2 + 205);
              *(_OWORD *)(v175 + 176) = v198;
              *(_OWORD *)(v175 + 192) = v199;
              *(_OWORD *)(v175 + 160) = v197;
              *a2 = v277;
              a2[1] = v288;
              a2[4] = v324;
              a2[5] = v336;
              a2[2] = v300;
              a2[3] = v312;
              a2[8] = v372;
              a2[9] = v384;
              a2[6] = v348;
              a2[7] = v360;
              *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v418[13];
              a2[11] = v408;
              a2[12] = *(_OWORD *)v418;
              a2[10] = v396;
              uint64_t v200 = v175 - v8 + 224;
              if (v200 >= 225)
              {
                double v202 = *(double *)(v175 + 8);
                if (*(double *)(v8 + 224 * v201 + 8) < v202)
                {
                  uint64_t v203 = *(void *)v175;
                  __int128 v233 = *(_OWORD *)(v175 + 16);
                  __int128 v242 = *(_OWORD *)(v175 + 64);
                  __int128 v245 = *(_OWORD *)(v175 + 80);
                  __int128 v236 = *(_OWORD *)(v175 + 32);
                  __int128 v239 = *(_OWORD *)(v175 + 48);
                  __int128 v254 = *(_OWORD *)(v175 + 128);
                  __int128 v257 = *(_OWORD *)(v175 + 144);
                  __int128 v248 = *(_OWORD *)(v175 + 96);
                  __int128 v251 = *(_OWORD *)(v175 + 112);
                  *(_OWORD *)CFAbsoluteTime v266 = *(_OWORD *)(v175 + 192);
                  *(_OWORD *)&v266[16] = *(_OWORD *)(v175 + 208);
                  __int128 v260 = *(_OWORD *)(v175 + 160);
                  __int128 v263 = *(_OWORD *)(v175 + 176);
                  do
                  {
                    __int16 v204 = (_OWORD *)v175;
                    unint64_t v175 = v8 + 224 * v201;
                    __int128 v205 = *(_OWORD *)(v175 + 16);
                    *__int16 v204 = *(_OWORD *)v175;
                    v204[1] = v205;
                    __int128 v206 = *(_OWORD *)(v175 + 32);
                    __int128 v207 = *(_OWORD *)(v175 + 48);
                    __int128 v208 = *(_OWORD *)(v175 + 80);
                    v204[4] = *(_OWORD *)(v175 + 64);
                    v204[5] = v208;
                    v204[2] = v206;
                    v204[3] = v207;
                    __int128 v209 = *(_OWORD *)(v175 + 96);
                    __int128 v210 = *(_OWORD *)(v175 + 112);
                    __int128 v211 = *(_OWORD *)(v175 + 144);
                    v204[8] = *(_OWORD *)(v175 + 128);
                    v204[9] = v211;
                    v204[6] = v209;
                    v204[7] = v210;
                    __int128 v212 = *(_OWORD *)(v175 + 160);
                    __int128 v213 = *(_OWORD *)(v175 + 176);
                    __int128 v214 = *(_OWORD *)(v175 + 192);
                    *(_OWORD *)((char *)v204 + 205) = *(_OWORD *)(v175 + 205);
                    v204[11] = v213;
                    v204[12] = v214;
                    _BYTE v204[10] = v212;
                    if (!v201) {
                      break;
                    }
                    unint64_t v201 = (v201 - 1) >> 1;
                  }

                  while (*(double *)(v8 + 224 * v201 + 8) < v202);
                  *(void *)unint64_t v175 = v203;
                  *(double *)(v175 + _Block_object_dispose(va, 8) = v202;
                  *(_OWORD *)(v175 + 16) = v233;
                  *(_OWORD *)(v175 + 64) = v242;
                  *(_OWORD *)(v175 + 80) = v245;
                  *(_OWORD *)(v175 + 32) = v236;
                  *(_OWORD *)(v175 + 4_Block_object_dispose(va, 8) = v239;
                  *(_OWORD *)(v175 + 12_Block_object_dispose(va, 8) = v254;
                  *(_OWORD *)(v175 + 144) = v257;
                  *(_OWORD *)(v175 + 96) = v248;
                  *(_OWORD *)(v175 + 112) = v251;
                  __int128 v215 = v260;
                  __int128 v216 = v263;
                  __int128 v217 = *(_OWORD *)v266;
                  __int128 v218 = *(_OWORD *)&v266[13];
LABEL_112:
                  *(_OWORD *)(v175 + 205) = v218;
                  *(_OWORD *)(v175 + 176) = v216;
                  *(_OWORD *)(v175 + 192) = v217;
                  *(_OWORD *)(v175 + 160) = v215;
                }
              }

              if (v173-- <= 2) {
                return;
              }
              continue;
            }

            break;
          }

          *(_OWORD *)unint64_t v175 = v277;
          *(_OWORD *)(v175 + 16) = v288;
          *(_OWORD *)(v175 + 64) = v324;
          *(_OWORD *)(v175 + 80) = v336;
          *(_OWORD *)(v175 + 32) = v300;
          *(_OWORD *)(v175 + 4_Block_object_dispose(va, 8) = v312;
          *(_OWORD *)(v175 + 12_Block_object_dispose(va, 8) = v372;
          *(_OWORD *)(v175 + 144) = v384;
          *(_OWORD *)(v175 + 96) = v348;
          *(_OWORD *)(v175 + 112) = v360;
          __int128 v215 = v396;
          __int128 v216 = v408;
          __int128 v217 = *(_OWORD *)v418;
          __int128 v218 = *(_OWORD *)&v418[13];
          goto LABEL_112;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        uint64_t v12 = (__int128 *)(v8 + 224 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x7000)
        {
          sub_10104972C((__int128 *)(a1 + 224 * v11), (__int128 *)a1, a2 - 14);
        }

        else
        {
          sub_10104972C((__int128 *)a1, (__int128 *)(a1 + 224 * v11), a2 - 14);
          uint64_t v13 = 224 * v11;
          uint64_t v14 = (__int128 *)(224 * v11 + a1 - 224);
          sub_10104972C((__int128 *)(a1 + 224), v14, a2 - 28);
          uint64_t v15 = (__int128 *)(a1 + 224 + v13);
          sub_10104972C((__int128 *)(a1 + 448), v15, a2 - 42);
          sub_10104972C(v14, v12, v15);
          __int128 v267 = *(_OWORD *)a1;
          __int128 v279 = *(_OWORD *)(a1 + 16);
          __int128 v314 = *(_OWORD *)(a1 + 64);
          __int128 v326 = *(_OWORD *)(a1 + 80);
          __int128 v290 = *(_OWORD *)(a1 + 32);
          __int128 v302 = *(_OWORD *)(a1 + 48);
          __int128 v362 = *(_OWORD *)(a1 + 128);
          __int128 v374 = *(_OWORD *)(a1 + 144);
          __int128 v338 = *(_OWORD *)(a1 + 96);
          __int128 v350 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v410 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v410[16] = *(_OWORD *)(a1 + 208);
          __int128 v386 = *(_OWORD *)(a1 + 160);
          __int128 v398 = *(_OWORD *)(a1 + 176);
          __int128 v16 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v16;
          __int128 v17 = v12[2];
          __int128 v18 = v12[3];
          __int128 v19 = v12[5];
          *(_OWORD *)(a1 + 64) = v12[4];
          *(_OWORD *)(a1 + 80) = v19;
          *(_OWORD *)(a1 + 32) = v17;
          *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v18;
          __int128 v20 = v12[6];
          __int128 v21 = v12[7];
          __int128 v22 = v12[9];
          *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v12[8];
          *(_OWORD *)(a1 + 144) = v22;
          *(_OWORD *)(a1 + 96) = v20;
          *(_OWORD *)(a1 + 112) = v21;
          __int128 v23 = v12[10];
          __int128 v24 = v12[11];
          __int128 v25 = v12[12];
          *(_OWORD *)(a1 + 205) = *(__int128 *)((char *)v12 + 205);
          *(_OWORD *)(a1 + 176) = v24;
          *(_OWORD *)(a1 + 192) = v25;
          *(_OWORD *)(a1 + 160) = v23;
          __int128 *v12 = v267;
          v12[1] = v279;
          _DWORD v12[4] = v314;
          void v12[5] = v326;
          _DWORD v12[2] = v290;
          _OWORD v12[3] = v302;
          _WORD v12[8] = v362;
          v12[9] = v374;
          v12[6] = v338;
          v12[7] = v350;
          *(__int128 *)((char *)v12 + 205) = *(_OWORD *)&v410[13];
          v12[11] = v398;
          v12[12] = *(_OWORD *)v410;
          v12[10] = v386;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v26 = *(double *)(a1 + 8);
          uint64_t v60 = *(void *)a1;
          __int128 v241 = *(_OWORD *)(a1 + 64);
          __int128 v244 = *(_OWORD *)(a1 + 80);
          __int128 v235 = *(_OWORD *)(a1 + 32);
          __int128 v238 = *(_OWORD *)(a1 + 48);
          __int128 v253 = *(_OWORD *)(a1 + 128);
          __int128 v256 = *(_OWORD *)(a1 + 144);
          __int128 v247 = *(_OWORD *)(a1 + 96);
          __int128 v250 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)__int16 v265 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v265[16] = *(_OWORD *)(a1 + 208);
          __int128 v259 = *(_OWORD *)(a1 + 160);
          __int128 v262 = *(_OWORD *)(a1 + 176);
          __int128 v232 = *(_OWORD *)(a1 + 16);
          if (v26 >= *((double *)a2 - 27))
          {
            unint64_t v63 = a1 + 224;
            do
            {
              unint64_t v8 = v63;
              double v64 = *(double *)(v63 + 8);
              v63 += 224LL;
            }

            while (v26 >= v64);
          }

          else
          {
            uint64_t v61 = a1;
            do
            {
              unint64_t v8 = v61 + 224;
              double v62 = *(double *)(v61 + 232);
              v61 += 224LL;
            }

            while (v26 >= v62);
          }

          uint64_t v65 = a2;
          if (v8 < (unint64_t)a2)
          {
            uint64_t v66 = a2;
            do
            {
              uint64_t v65 = v66 - 14;
              double v67 = *((double *)v66 - 27);
              v66 -= 14;
            }

            while (v26 < v67);
          }

          while (v8 < (unint64_t)v65)
          {
            __int128 v269 = *(_OWORD *)v8;
            __int128 v281 = *(_OWORD *)(v8 + 16);
            __int128 v316 = *(_OWORD *)(v8 + 64);
            __int128 v328 = *(_OWORD *)(v8 + 80);
            __int128 v292 = *(_OWORD *)(v8 + 32);
            __int128 v304 = *(_OWORD *)(v8 + 48);
            __int128 v364 = *(_OWORD *)(v8 + 128);
            __int128 v376 = *(_OWORD *)(v8 + 144);
            __int128 v340 = *(_OWORD *)(v8 + 96);
            __int128 v352 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v412 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v412[16] = *(_OWORD *)(v8 + 208);
            __int128 v388 = *(_OWORD *)(v8 + 160);
            __int128 v400 = *(_OWORD *)(v8 + 176);
            __int128 v68 = v65[1];
            *(_OWORD *)unint64_t v8 = *v65;
            *(_OWORD *)(v8 + 16) = v68;
            __int128 v69 = v65[2];
            __int128 v70 = v65[3];
            __int128 v71 = v65[5];
            *(_OWORD *)(v8 + 64) = v65[4];
            *(_OWORD *)(v8 + 80) = v71;
            *(_OWORD *)(v8 + 32) = v69;
            *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v70;
            __int128 v72 = v65[6];
            __int128 v73 = v65[7];
            __int128 v74 = v65[9];
            *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = v65[8];
            *(_OWORD *)(v8 + 144) = v74;
            *(_OWORD *)(v8 + 96) = v72;
            *(_OWORD *)(v8 + 112) = v73;
            __int128 v75 = v65[10];
            __int128 v76 = v65[11];
            __int128 v77 = v65[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v65 + 205);
            *(_OWORD *)(v8 + 176) = v76;
            *(_OWORD *)(v8 + 192) = v77;
            *(_OWORD *)(v8 + 160) = v75;
            __int128 *v65 = v269;
            v65[1] = v281;
            v65[4] = v316;
            v65[5] = v328;
            v65[2] = v292;
            v65[3] = v304;
            v65[8] = v364;
            v65[9] = v376;
            void v65[6] = v340;
            v65[7] = v352;
            *(__int128 *)((char *)v65 + 205) = *(_OWORD *)&v412[13];
            v65[11] = v400;
            v65[12] = *(_OWORD *)v412;
            v65[10] = v388;
            do
            {
              double v78 = *(double *)(v8 + 232);
              v8 += 224LL;
            }

            while (v26 >= v78);
            do
            {
              double v79 = *((double *)v65 - 27);
              v65 -= 14;
            }

            while (v26 < v79);
          }

          if (v8 - 224 != a1)
          {
            __int128 v80 = *(_OWORD *)(v8 - 208);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
            *(_OWORD *)(a1 + 16) = v80;
            __int128 v81 = *(_OWORD *)(v8 - 192);
            __int128 v82 = *(_OWORD *)(v8 - 176);
            __int128 v83 = *(_OWORD *)(v8 - 144);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
            *(_OWORD *)(a1 + 80) = v83;
            *(_OWORD *)(a1 + 32) = v81;
            *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v82;
            __int128 v84 = *(_OWORD *)(v8 - 128);
            __int128 v85 = *(_OWORD *)(v8 - 112);
            __int128 v86 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 144) = v86;
            *(_OWORD *)(a1 + 96) = v84;
            *(_OWORD *)(a1 + 112) = v85;
            __int128 v87 = *(_OWORD *)(v8 - 64);
            __int128 v88 = *(_OWORD *)(v8 - 48);
            __int128 v89 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
            *(_OWORD *)(a1 + 176) = v88;
            *(_OWORD *)(a1 + 192) = v89;
            *(_OWORD *)(a1 + 160) = v87;
          }

          a4 = 0;
          *(void *)(v8 - 224) = v60;
          *(double *)(v8 - 216) = v26;
          *(_OWORD *)(v8 - 20_Block_object_dispose(va, 8) = v232;
          *(_OWORD *)(v8 - 160) = v241;
          *(_OWORD *)(v8 - 144) = v244;
          *(_OWORD *)(v8 - 192) = v235;
          *(_OWORD *)(v8 - 176) = v238;
          *(_OWORD *)(v8 - 96) = v253;
          *(_OWORD *)(v8 - 80) = v256;
          *(_OWORD *)(v8 - 12_Block_object_dispose(va, 8) = v247;
          *(_OWORD *)(v8 - 112) = v250;
          *(_OWORD *)(v8 - 19) = *(_OWORD *)&v265[13];
          *(_OWORD *)(v8 - 4_Block_object_dispose(va, 8) = v262;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v265;
          *(_OWORD *)(v8 - 64) = v259;
          continue;
        }

        double v26 = *(double *)(a1 + 8);
LABEL_11:
        uint64_t v27 = 0LL;
        uint64_t v28 = *(void *)a1;
        __int128 v240 = *(_OWORD *)(a1 + 64);
        __int128 v243 = *(_OWORD *)(a1 + 80);
        __int128 v252 = *(_OWORD *)(a1 + 128);
        __int128 v255 = *(_OWORD *)(a1 + 144);
        *(_OWORD *)int v264 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v264[16] = *(_OWORD *)(a1 + 208);
        __int128 v258 = *(_OWORD *)(a1 + 160);
        __int128 v261 = *(_OWORD *)(a1 + 176);
        __int128 v246 = *(_OWORD *)(a1 + 96);
        __int128 v249 = *(_OWORD *)(a1 + 112);
        __int128 v234 = *(_OWORD *)(a1 + 32);
        __int128 v237 = *(_OWORD *)(a1 + 48);
        __int128 v231 = *(_OWORD *)(a1 + 16);
        do
        {
          double v29 = *(double *)(a1 + v27 + 232);
          v27 += 224LL;
        }

        while (v29 < v26);
        unint64_t v30 = a1 + v27;
        double v31 = a2;
        if (v27 == 224)
        {
          uint64_t v34 = a2;
          while (v30 < (unint64_t)v34)
          {
            __int128 v32 = v34 - 14;
            double v35 = *((double *)v34 - 27);
            v34 -= 14;
            if (v35 < v26) {
              goto LABEL_21;
            }
          }

          __int128 v32 = v34;
        }

        else
        {
          do
          {
            __int128 v32 = v31 - 14;
            double v33 = *((double *)v31 - 27);
            v31 -= 14;
          }

          while (v33 >= v26);
        }

BOOL sub_10104DB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7LL * ((a2 - a1) >> 5);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (*(double *)(a2 - 216) < *(double *)(a1 + 8))
      {
        __int128 v123 = *(_OWORD *)(a1 + 160);
        __int128 v129 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)BOOL v135 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v135[16] = *(_OWORD *)(a1 + 208);
        __int128 v99 = *(_OWORD *)(a1 + 96);
        __int128 v105 = *(_OWORD *)(a1 + 112);
        __int128 v111 = *(_OWORD *)(a1 + 128);
        __int128 v117 = *(_OWORD *)(a1 + 144);
        __int128 v75 = *(_OWORD *)(a1 + 32);
        __int128 v81 = *(_OWORD *)(a1 + 48);
        __int128 v87 = *(_OWORD *)(a1 + 64);
        __int128 v93 = *(_OWORD *)(a1 + 80);
        __int128 v63 = *(_OWORD *)a1;
        __int128 v69 = *(_OWORD *)(a1 + 16);
        __int128 v6 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 224);
        *(_OWORD *)(a1 + 16) = v6;
        __int128 v7 = *(_OWORD *)(a2 - 192);
        __int128 v8 = *(_OWORD *)(a2 - 176);
        __int128 v9 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v8;
        __int128 v10 = *(_OWORD *)(a2 - 128);
        __int128 v11 = *(_OWORD *)(a2 - 112);
        __int128 v12 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 144) = v12;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 112) = v11;
        __int128 v13 = *(_OWORD *)(a2 - 64);
        __int128 v14 = *(_OWORD *)(a2 - 48);
        __int128 v15 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a2 - 64) = v123;
        *(_OWORD *)(a2 - 4_Block_object_dispose(va, 8) = v129;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v135;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v135[13];
        *(_OWORD *)(a2 - 12_Block_object_dispose(va, 8) = v99;
        *(_OWORD *)(a2 - 112) = v105;
        *(_OWORD *)(a2 - 96) = v111;
        *(_OWORD *)(a2 - 80) = v117;
        *(_OWORD *)(a2 - 192) = v75;
        *(_OWORD *)(a2 - 176) = v81;
        *(_OWORD *)(a2 - 160) = v87;
        *(_OWORD *)(a2 - 144) = v93;
        *(_OWORD *)(a2 - 224) = v63;
        *(_OWORD *)(a2 - 20_Block_object_dispose(va, 8) = v69;
      }

      return result;
    case 3LL:
      sub_10104972C((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a2 - 224));
      return 1LL;
    case 4LL:
      sub_10104A10C(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1LL;
    case 5LL:
      double v31 = (__int128 *)(a1 + 224);
      __int128 v32 = (__int128 *)(a1 + 448);
      double v33 = (__int128 *)(a1 + 672);
      sub_10104A10C(a1, a1 + 224, a1 + 448, a1 + 672);
      __int128 v125 = *(_OWORD *)(a1 + 832);
      __int128 v131 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)uint64_t v136 = *(_OWORD *)(a1 + 864);
      *(_OWORD *)&v136[16] = *(_OWORD *)(a1 + 880);
      __int128 v101 = *(_OWORD *)(a1 + 768);
      __int128 v107 = *(_OWORD *)(a1 + 784);
      __int128 v113 = *(_OWORD *)(a1 + 800);
      __int128 v119 = *(_OWORD *)(a1 + 816);
      __int128 v77 = *(_OWORD *)(a1 + 704);
      __int128 v83 = *(_OWORD *)(a1 + 720);
      __int128 v89 = *(_OWORD *)(a1 + 736);
      __int128 v95 = *(_OWORD *)(a1 + 752);
      __int128 v65 = *v33;
      __int128 v71 = *(_OWORD *)(a1 + 688);
      __int128 v34 = *(_OWORD *)(a2 - 208);
      __int128 *v33 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)(a1 + 68_Block_object_dispose(va, 8) = v34;
      __int128 v35 = *(_OWORD *)(a2 - 192);
      __int128 v36 = *(_OWORD *)(a2 - 176);
      __int128 v37 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 704) = v35;
      *(_OWORD *)(a1 + 720) = v36;
      __int128 v38 = *(_OWORD *)(a2 - 128);
      __int128 v39 = *(_OWORD *)(a2 - 112);
      __int128 v40 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 816) = v40;
      *(_OWORD *)(a1 + 76_Block_object_dispose(va, 8) = v38;
      *(_OWORD *)(a1 + 784) = v39;
      __int128 v41 = *(_OWORD *)(a2 - 64);
      __int128 v42 = *(_OWORD *)(a2 - 48);
      __int128 v43 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 877) = *(_OWORD *)(a2 - 19);
      *(_OWORD *)(a1 + 84_Block_object_dispose(va, 8) = v42;
      *(_OWORD *)(a1 + 864) = v43;
      *(_OWORD *)(a1 + 832) = v41;
      *(_OWORD *)(a2 - 64) = v125;
      *(_OWORD *)(a2 - 4_Block_object_dispose(va, 8) = v131;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v136;
      *(_OWORD *)(a2 - 19) = *(_OWORD *)&v136[13];
      *(_OWORD *)(a2 - 12_Block_object_dispose(va, 8) = v101;
      *(_OWORD *)(a2 - 112) = v107;
      *(_OWORD *)(a2 - 96) = v113;
      *(_OWORD *)(a2 - 80) = v119;
      *(_OWORD *)(a2 - 192) = v77;
      *(_OWORD *)(a2 - 176) = v83;
      *(_OWORD *)(a2 - 160) = v89;
      *(_OWORD *)(a2 - 144) = v95;
      *(_OWORD *)(a2 - 224) = v65;
      *(_OWORD *)(a2 - 20_Block_object_dispose(va, 8) = v71;
      __int128 v126 = *(_OWORD *)(a1 + 608);
      __int128 v132 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)unint64_t v137 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)&v137[16] = *(_OWORD *)(a1 + 656);
      __int128 v102 = *(_OWORD *)(a1 + 544);
      __int128 v108 = *(_OWORD *)(a1 + 560);
      __int128 v114 = *(_OWORD *)(a1 + 576);
      __int128 v120 = *(_OWORD *)(a1 + 592);
      __int128 v78 = *(_OWORD *)(a1 + 480);
      __int128 v84 = *(_OWORD *)(a1 + 496);
      __int128 v90 = *(_OWORD *)(a1 + 512);
      __int128 v96 = *(_OWORD *)(a1 + 528);
      __int128 v66 = *v32;
      __int128 v72 = *(_OWORD *)(a1 + 464);
      __int128 v44 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a1 + 60_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 624) = v44;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 653) = *(_OWORD *)(a1 + 877);
      __int128 v45 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 560) = v45;
      __int128 v46 = *(_OWORD *)(a1 + 816);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a1 + 592) = v46;
      __int128 v47 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 496) = v47;
      __int128 v48 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = v48;
      __int128 v49 = *(_OWORD *)(a1 + 688);
      __int128 *v32 = *v33;
      *(_OWORD *)(a1 + 464) = v49;
      *(_OWORD *)(a1 + 832) = v126;
      *(_OWORD *)(a1 + 84_Block_object_dispose(va, 8) = v132;
      *(_OWORD *)(a1 + 864) = *(_OWORD *)v137;
      *(_OWORD *)(a1 + 877) = *(_OWORD *)&v137[13];
      *(_OWORD *)(a1 + 76_Block_object_dispose(va, 8) = v102;
      *(_OWORD *)(a1 + 784) = v108;
      *(_OWORD *)(a1 + 800) = v114;
      *(_OWORD *)(a1 + 816) = v120;
      *(_OWORD *)(a1 + 704) = v78;
      *(_OWORD *)(a1 + 720) = v84;
      *(_OWORD *)(a1 + 736) = v90;
      *(_OWORD *)(a1 + 752) = v96;
      BOOL v50 = *(double *)(a1 + 456) < *(double *)(a1 + 232);
      __int128 *v33 = v66;
      *(_OWORD *)(a1 + 68_Block_object_dispose(va, 8) = v72;
      if (!v50) {
        return 1LL;
      }
      __int128 v127 = *(_OWORD *)(a1 + 384);
      __int128 v133 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)uint64_t v138 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&v138[16] = *(_OWORD *)(a1 + 432);
      __int128 v103 = *(_OWORD *)(a1 + 320);
      __int128 v109 = *(_OWORD *)(a1 + 336);
      __int128 v115 = *(_OWORD *)(a1 + 352);
      __int128 v121 = *(_OWORD *)(a1 + 368);
      __int128 v79 = *(_OWORD *)(a1 + 256);
      __int128 v85 = *(_OWORD *)(a1 + 272);
      __int128 v91 = *(_OWORD *)(a1 + 288);
      __int128 v97 = *(_OWORD *)(a1 + 304);
      __int128 v67 = *v31;
      __int128 v73 = *(_OWORD *)(a1 + 240);
      __int128 v51 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 400) = v51;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 429) = *(_OWORD *)(a1 + 653);
      __int128 v52 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 336) = v52;
      __int128 v53 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v53;
      __int128 v54 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 272) = v54;
      __int128 v55 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 304) = v55;
      __int128 v56 = *(_OWORD *)(a1 + 464);
      *double v31 = *v32;
      *(_OWORD *)(a1 + 240) = v56;
      *(_OWORD *)(a1 + 60_Block_object_dispose(va, 8) = v127;
      *(_OWORD *)(a1 + 624) = v133;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v138;
      *(_OWORD *)(a1 + 653) = *(_OWORD *)&v138[13];
      *(_OWORD *)(a1 + 544) = v103;
      *(_OWORD *)(a1 + 560) = v109;
      *(_OWORD *)(a1 + 576) = v115;
      *(_OWORD *)(a1 + 592) = v121;
      *(_OWORD *)(a1 + 480) = v79;
      *(_OWORD *)(a1 + 496) = v85;
      *(_OWORD *)(a1 + 512) = v91;
      *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = v97;
      BOOL v50 = *(double *)(a1 + 232) < *(double *)(a1 + 8);
      __int128 *v32 = v67;
      *(_OWORD *)(a1 + 464) = v73;
      if (!v50) {
        return 1LL;
      }
      __int128 v128 = *(_OWORD *)(a1 + 160);
      __int128 v134 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)double v139 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v139[16] = *(_OWORD *)(a1 + 208);
      __int128 v104 = *(_OWORD *)(a1 + 96);
      __int128 v110 = *(_OWORD *)(a1 + 112);
      __int128 v116 = *(_OWORD *)(a1 + 128);
      __int128 v122 = *(_OWORD *)(a1 + 144);
      __int128 v80 = *(_OWORD *)(a1 + 32);
      __int128 v86 = *(_OWORD *)(a1 + 48);
      __int128 v92 = *(_OWORD *)(a1 + 64);
      __int128 v98 = *(_OWORD *)(a1 + 80);
      __int128 v68 = *(_OWORD *)a1;
      __int128 v74 = *(_OWORD *)(a1 + 16);
      __int128 v57 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 176) = v57;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 205) = *(_OWORD *)(a1 + 429);
      __int128 v58 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 112) = v58;
      __int128 v59 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 144) = v59;
      __int128 v60 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v60;
      __int128 v61 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 80) = v61;
      __int128 v62 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)a1 = *v31;
      *(_OWORD *)(a1 + 16) = v62;
      *(_OWORD *)(a1 + 384) = v128;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v139;
      *(_OWORD *)(a1 + 429) = *(_OWORD *)&v139[13];
      *(_OWORD *)(a1 + 320) = v104;
      *(_OWORD *)(a1 + 336) = v110;
      *(_OWORD *)(a1 + 352) = v116;
      *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v122;
      *(_OWORD *)(a1 + 2sub_1011C52D0(v1 - 56) = v80;
      *(_OWORD *)(a1 + 272) = v86;
      *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = v92;
      *(_OWORD *)(a1 + 304) = v98;
      BOOL result = 1LL;
      *double v31 = v68;
      *(_OWORD *)(a1 + 240) = v74;
      return result;
    default:
      uint64_t v16 = a1 + 448;
      sub_10104972C((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
      uint64_t v17 = a1 + 672;
      if (a1 + 672 == a2) {
        return 1LL;
      }
      uint64_t v18 = 0LL;
      int v19 = 0;
      break;
  }

  while (1)
  {
    double v20 = *(double *)(v17 + 8);
    if (v20 < *(double *)(v16 + 8))
    {
      uint64_t v21 = *(void *)v17;
      __int128 v124 = *(_OWORD *)(v17 + 176);
      *(_OWORD *)__int128 v130 = *(_OWORD *)(v17 + 192);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v17 + 208);
      __int128 v100 = *(_OWORD *)(v17 + 112);
      __int128 v106 = *(_OWORD *)(v17 + 128);
      __int128 v112 = *(_OWORD *)(v17 + 144);
      __int128 v118 = *(_OWORD *)(v17 + 160);
      __int128 v76 = *(_OWORD *)(v17 + 48);
      __int128 v82 = *(_OWORD *)(v17 + 64);
      __int128 v88 = *(_OWORD *)(v17 + 80);
      __int128 v94 = *(_OWORD *)(v17 + 96);
      uint64_t v22 = v18;
      __int128 v64 = *(_OWORD *)(v17 + 16);
      __int128 v70 = *(_OWORD *)(v17 + 32);
      while (1)
      {
        uint64_t v23 = a1 + v22;
        __int128 v24 = *(_OWORD *)(a1 + v22 + 624);
        *(_OWORD *)(v23 + 832) = *(_OWORD *)(a1 + v22 + 608);
        *(_OWORD *)(v23 + 84_Block_object_dispose(va, 8) = v24;
        *(_OWORD *)(v23 + 864) = *(_OWORD *)(a1 + v22 + 640);
        __int128 v25 = *(_OWORD *)(a1 + v22 + 560);
        *(_OWORD *)(v23 + 76_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + v22 + 544);
        *(_OWORD *)(v23 + 784) = v25;
        __int128 v26 = *(_OWORD *)(a1 + v22 + 592);
        *(_OWORD *)(v23 + 800) = *(_OWORD *)(a1 + v22 + 576);
        *(_OWORD *)(v23 + 816) = v26;
        __int128 v27 = *(_OWORD *)(a1 + v22 + 496);
        *(_OWORD *)(v23 + 704) = *(_OWORD *)(a1 + v22 + 480);
        *(_OWORD *)(v23 + 720) = v27;
        __int128 v28 = *(_OWORD *)(a1 + v22 + 528);
        *(_OWORD *)(v23 + 736) = *(_OWORD *)(a1 + v22 + 512);
        *(_OWORD *)(v23 + 752) = v28;
        __int128 v29 = *(_OWORD *)(a1 + v22 + 464);
        *(_OWORD *)(v23 + 672) = *(_OWORD *)(a1 + v22 + 448);
        *(_OWORD *)(v23 + 68_Block_object_dispose(va, 8) = v29;
        *(_OWORD *)(a1 + v22 + 877) = *(_OWORD *)(a1 + v22 + 653);
        if (v22 == -448) {
          break;
        }
        v22 -= 224LL;
        if (v20 >= *(double *)(v23 + 232))
        {
          uint64_t v30 = a1 + v22 + 672;
          goto LABEL_13;
        }
      }

      uint64_t v30 = a1;
LABEL_13:
      *(void *)uint64_t v30 = v21;
      *(double *)(v30 + _Block_object_dispose(va, 8) = v20;
      *(_OWORD *)(v30 + 176) = v124;
      *(_OWORD *)(v30 + 192) = *(_OWORD *)v130;
      *(_OWORD *)(v30 + 205) = *(_OWORD *)&v130[13];
      *(_OWORD *)(v30 + 112) = v100;
      *(_OWORD *)(v30 + 12_Block_object_dispose(va, 8) = v106;
      *(_OWORD *)(v30 + 144) = v112;
      *(_OWORD *)(v30 + 160) = v118;
      *(_OWORD *)(v30 + 4_Block_object_dispose(va, 8) = v76;
      *(_OWORD *)(v30 + 64) = v82;
      *(_OWORD *)(v30 + 80) = v88;
      *(_OWORD *)(v30 + 96) = v94;
      ++v19;
      *(_OWORD *)(v30 + 16) = v64;
      *(_OWORD *)(v30 + 32) = v70;
      if (v19 == 8) {
        return v17 + 224 == a2;
      }
    }

    uint64_t v16 = v17;
    v18 += 224LL;
    v17 += 224LL;
    if (v17 == a2) {
      return 1LL;
    }
  }

void sub_10104E158(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = a2 - v8;
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (*(double *)(a2 - 16) < *(double *)(v8 + 8))
        {
          uint64_t v115 = *(void *)(v8 + 16);
          __int128 v109 = *(_OWORD *)v8;
          __int128 v47 = *(_OWORD *)(a2 - 24);
          *(void *)(v8 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)unint64_t v8 = v47;
          *(void *)(a2 - _Block_object_dispose(va, 8) = v115;
          *(_OWORD *)(a2 - 24) = v109;
        }

        return;
      case 3LL:
        sub_10104C524((__int128 *)v8, (double *)(v8 + 24), (double *)(a2 - 24));
        return;
      case 4LL:
        sub_10104C888(v8, v8 + 24, v8 + 48, a2 - 24);
        return;
      case 5LL:
        __int128 v48 = (__int128 *)(v8 + 24);
        __int128 v49 = (__int128 *)(v8 + 48);
        BOOL v50 = (__int128 *)(v8 + 72);
        sub_10104C888(v8, v8 + 24, v8 + 48, v8 + 72);
        if (*(double *)(a2 - 16) < *(double *)(v8 + 80))
        {
          __int128 v51 = *v50;
          uint64_t v52 = *(void *)(v8 + 88);
          uint64_t v53 = *(void *)(a2 - 8);
          *BOOL v50 = *(_OWORD *)(a2 - 24);
          *(void *)(v8 + 8_Block_object_dispose(va, 8) = v53;
          *(void *)(a2 - _Block_object_dispose(va, 8) = v52;
          *(_OWORD *)(a2 - 24) = v51;
          if (*(double *)(v8 + 80) < *(double *)(v8 + 56))
          {
            uint64_t v54 = *(void *)(v8 + 64);
            __int128 v55 = *v49;
            *__int128 v49 = *v50;
            *(void *)(v8 + 64) = *(void *)(v8 + 88);
            *BOOL v50 = v55;
            *(void *)(v8 + 8_Block_object_dispose(va, 8) = v54;
            if (*(double *)(v8 + 56) < *(double *)(v8 + 32))
            {
              uint64_t v56 = *(void *)(v8 + 40);
              __int128 v57 = *v48;
              *__int128 v48 = *v49;
              *(void *)(v8 + 40) = *(void *)(v8 + 64);
              *__int128 v49 = v57;
              *(void *)(v8 + 64) = v56;
              if (*(double *)(v8 + 32) < *(double *)(v8 + 8))
              {
                uint64_t v116 = *(void *)(v8 + 16);
                __int128 v110 = *(_OWORD *)v8;
                *(_OWORD *)unint64_t v8 = *v48;
                *(void *)(v8 + 16) = *(void *)(v8 + 40);
                *__int128 v48 = v110;
                *(void *)(v8 + 40) = v116;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 575)
        {
          __int128 v58 = (void *)(v8 + 24);
          BOOL v60 = v8 == a2 || v58 == (void *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              uint64_t v61 = 0LL;
              unint64_t v62 = v8;
              do
              {
                __int128 v63 = v58;
                double v64 = *(double *)(v62 + 32);
                if (v64 < *(double *)(v62 + 8))
                {
                  uint64_t v65 = *v58;
                  uint64_t v66 = *(void *)(v62 + 40);
                  uint64_t v67 = v61;
                  while (1)
                  {
                    uint64_t v68 = v8 + v67;
                    *(_OWORD *)(v68 + 24) = *(_OWORD *)(v8 + v67);
                    *(void *)(v68 + 40) = *(void *)(v8 + v67 + 16);
                    if (!v67) {
                      break;
                    }
                    v67 -= 24LL;
                    if (v64 >= *(double *)(v68 - 16))
                    {
                      uint64_t v69 = v8 + v67 + 24;
                      goto LABEL_79;
                    }
                  }

                  uint64_t v69 = v8;
LABEL_79:
                  *(void *)uint64_t v69 = v65;
                  *(double *)(v69 + _Block_object_dispose(va, 8) = v64;
                  *(void *)(v69 + 16) = v66;
                }

                __int128 v58 = v63 + 3;
                v61 += 24LL;
                unint64_t v62 = (unint64_t)v63;
              }

              while (v63 + 3 != (void *)a2);
            }
          }

          else if (!v60)
          {
            do
            {
              __int128 v100 = v58;
              double v101 = *(double *)(a1 + 32);
              if (v101 < *(double *)(a1 + 8))
              {
                uint64_t v102 = *v58;
                uint64_t v103 = *(void *)(a1 + 40);
                __int128 v104 = (double *)v58;
                do
                {
                  *(_OWORD *)__int128 v104 = *(_OWORD *)(v104 - 3);
                  _DWORD v104[2] = *(v104 - 1);
                  double v105 = *(v104 - 5);
                  v104 -= 3;
                }

                while (v101 < v105);
                *(void *)__int128 v104 = v102;
                v104[1] = v101;
                *((void *)v104 + 2) = v103;
              }

              v58 += 3;
              a1 = (uint64_t)v100;
            }

            while (v100 + 3 != (void *)a2);
          }

          return;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v70 = (unint64_t)(v10 - 2) >> 1;
            int64_t v71 = v70;
            do
            {
              int64_t v72 = v71;
              if (v70 >= v71)
              {
                uint64_t v73 = (2 * v71) | 1;
                unint64_t v74 = v8 + 24 * v73;
                if (2 * v72 + 2 < v10 && *(double *)(v8 + 24 * v73 + 8) < *(double *)(v74 + 32))
                {
                  v74 += 24LL;
                  uint64_t v73 = 2 * v72 + 2;
                }

                double v75 = *(double *)(v8 + 24 * v72 + 8);
                if (*(double *)(v74 + 8) >= v75)
                {
                  unint64_t v76 = v8 + 24 * v72;
                  uint64_t v77 = *(void *)v76;
                  uint64_t v78 = *(void *)(v76 + 16);
                  do
                  {
                    unint64_t v79 = v76;
                    unint64_t v76 = v74;
                    __int128 v80 = *(_OWORD *)v74;
                    *(void *)(v79 + 16) = *(void *)(v74 + 16);
                    *(_OWORD *)unint64_t v79 = v80;
                    if (v70 < v73) {
                      break;
                    }
                    uint64_t v81 = (2 * v73) | 1;
                    unint64_t v74 = v8 + 24 * v81;
                    uint64_t v82 = 2 * v73 + 2;
                    if (v82 < v10 && *(double *)(v8 + 24 * v81 + 8) < *(double *)(v74 + 32))
                    {
                      v74 += 24LL;
                      uint64_t v81 = v82;
                    }

                    uint64_t v73 = v81;
                  }

                  while (*(double *)(v74 + 8) >= v75);
                  *(void *)unint64_t v76 = v77;
                  *(double *)(v76 + _Block_object_dispose(va, 8) = v75;
                  *(void *)(v76 + 16) = v78;
                }
              }

              int64_t v71 = v72 - 1;
            }

            while (v72);
            int64_t v83 = v9 / 0x18uLL;
            do
            {
              uint64_t v84 = 0LL;
              uint64_t v117 = *(void *)(v8 + 16);
              __int128 v111 = *(_OWORD *)v8;
              unint64_t v85 = v8;
              do
              {
                unint64_t v86 = v85;
                uint64_t v87 = v84 + 1;
                v85 += 24 * (v84 + 1);
                uint64_t v88 = 2 * v84;
                uint64_t v84 = (2 * v84) | 1;
                int64_t v89 = v88 + 2;
                if (v89 < v83 && *(double *)(v86 + 24 * v87 + 8) < *(double *)(v85 + 32))
                {
                  v85 += 24LL;
                  uint64_t v84 = v89;
                }

                __int128 v90 = *(_OWORD *)v85;
                *(void *)(v86 + 16) = *(void *)(v85 + 16);
                *(_OWORD *)unint64_t v86 = v90;
              }

              while (v84 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              a2 -= 24LL;
              if (v85 == a2)
              {
                *(void *)(v85 + 16) = v117;
                *(_OWORD *)unint64_t v85 = v111;
              }

              else
              {
                __int128 v91 = *(_OWORD *)a2;
                *(void *)(v85 + 16) = *(void *)(a2 + 16);
                *(_OWORD *)unint64_t v85 = v91;
                *(void *)(a2 + 16) = v117;
                *(_OWORD *)a2 = v111;
                uint64_t v92 = v85 - v8 + 24;
                if (v92 >= 25)
                {
                  unint64_t v93 = (v92 / 0x18uLL - 2) >> 1;
                  double v94 = *(double *)(v85 + 8);
                  if (*(double *)(v8 + 24 * v93 + 8) < v94)
                  {
                    uint64_t v95 = *(void *)v85;
                    uint64_t v96 = *(void *)(v85 + 16);
                    do
                    {
                      unint64_t v97 = v85;
                      unint64_t v85 = v8 + 24 * v93;
                      __int128 v98 = *(_OWORD *)v85;
                      *(void *)(v97 + 16) = *(void *)(v85 + 16);
                      *(_OWORD *)unint64_t v97 = v98;
                      if (!v93) {
                        break;
                      }
                      unint64_t v93 = (v93 - 1) >> 1;
                    }

                    while (*(double *)(v8 + 24 * v93 + 8) < v94);
                    *(void *)unint64_t v85 = v95;
                    *(double *)(v85 + _Block_object_dispose(va, 8) = v94;
                    *(void *)(v85 + 16) = v96;
                  }
                }
              }
            }

            while (v83-- > 2);
          }

          return;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        unint64_t v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_10104C524((__int128 *)(a1 + 24 * v11), (double *)a1, (double *)(a2 - 24));
        }

        else
        {
          sub_10104C524((__int128 *)a1, (double *)(a1 + 24 * v11), (double *)(a2 - 24));
          uint64_t v13 = 3 * v11;
          __int128 v14 = (double *)(a1 + 24 * v11 - 24);
          sub_10104C524((__int128 *)(a1 + 24), v14, (double *)(a2 - 48));
          __int128 v15 = (double *)(a1 + 24 + 8 * v13);
          sub_10104C524((__int128 *)(a1 + 48), v15, (double *)(a2 - 72));
          sub_10104C524((__int128 *)v14, (double *)v12, v15);
          uint64_t v112 = *(void *)(a1 + 16);
          __int128 v106 = *(_OWORD *)a1;
          uint64_t v16 = *(void *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(void *)(a1 + 16) = v16;
          *(void *)(v12 + 16) = v112;
          *(_OWORD *)unint64_t v12 = v106;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v17 = *(double *)(a1 + 8);
          if (v17 >= *(double *)(a2 - 16))
          {
            unint64_t v36 = a1 + 24;
            do
            {
              unint64_t v8 = v36;
              if (v36 >= a2) {
                break;
              }
              double v37 = *(double *)(v36 + 8);
              v36 += 24LL;
            }

            while (v17 >= v37);
          }

          else
          {
            uint64_t v34 = a1;
            do
            {
              unint64_t v8 = v34 + 24;
              double v35 = *(double *)(v34 + 32);
              v34 += 24LL;
            }

            while (v17 >= v35);
          }

          unint64_t v38 = a2;
          if (v8 < a2)
          {
            unint64_t v39 = a2;
            do
            {
              unint64_t v38 = v39 - 24;
              double v40 = *(double *)(v39 - 16);
              v39 -= 24LL;
            }

            while (v17 < v40);
          }

          double v41 = *(double *)a1;
          uint64_t v42 = *(void *)(a1 + 16);
          while (v8 < v38)
          {
            uint64_t v114 = *(void *)(v8 + 16);
            __int128 v108 = *(_OWORD *)v8;
            __int128 v43 = *(_OWORD *)v38;
            *(void *)(v8 + 16) = *(void *)(v38 + 16);
            *(_OWORD *)unint64_t v8 = v43;
            *(void *)(v38 + 16) = v114;
            *(_OWORD *)unint64_t v38 = v108;
            do
            {
              double v44 = *(double *)(v8 + 32);
              v8 += 24LL;
            }

            while (v17 >= v44);
            do
            {
              double v45 = *(double *)(v38 - 16);
              v38 -= 24LL;
            }

            while (v17 < v45);
          }

          if (v8 - 24 != a1)
          {
            __int128 v46 = *(_OWORD *)(v8 - 24);
            *(void *)(a1 + 16) = *(void *)(v8 - 8);
            *(_OWORD *)a1 = v46;
          }

          a4 = 0;
          *(double *)(v8 - 24) = v41;
          *(double *)(v8 - 16) = v17;
          *(void *)(v8 - _Block_object_dispose(va, 8) = v42;
          continue;
        }

        double v17 = *(double *)(a1 + 8);
LABEL_11:
        uint64_t v18 = 0LL;
        double v19 = *(double *)a1;
        uint64_t v20 = *(void *)(a1 + 16);
        do
        {
          double v21 = *(double *)(a1 + v18 + 32);
          v18 += 24LL;
        }

        while (v21 < v17);
        unint64_t v22 = a1 + v18;
        unint64_t v23 = a2;
        if (v18 == 24)
        {
          unint64_t v26 = a2;
          while (v22 < v26)
          {
            unint64_t v24 = v26 - 24;
            double v27 = *(double *)(v26 - 16);
            v26 -= 24LL;
            if (v27 < v17) {
              goto LABEL_21;
            }
          }

          unint64_t v24 = v26;
        }

        else
        {
          do
          {
            unint64_t v24 = v23 - 24;
            double v25 = *(double *)(v23 - 16);
            v23 -= 24LL;
          }

          while (v25 >= v17);
        }

BOOL sub_10104EA00(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        __int128 v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(void *)(a2 - _Block_object_dispose(va, 8) = v6;
      }

      return result;
    case 3uLL:
      sub_10104C524((__int128 *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1LL;
    case 4uLL:
      sub_10104C888(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1LL;
    case 5uLL:
      double v19 = (__int128 *)(a1 + 24);
      uint64_t v20 = (__int128 *)(a1 + 48);
      double v21 = (__int128 *)(a1 + 72);
      sub_10104C888(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        uint64_t v22 = *(void *)(a1 + 88);
        __int128 v23 = *v21;
        uint64_t v24 = *(void *)(a2 - 8);
        *double v21 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v24;
        *(_OWORD *)(a2 - 24) = v23;
        *(void *)(a2 - _Block_object_dispose(va, 8) = v22;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          uint64_t v25 = *(void *)(a1 + 64);
          __int128 v26 = *v20;
          *uint64_t v20 = *v21;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *double v21 = v26;
          *(void *)(a1 + 8_Block_object_dispose(va, 8) = v25;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            uint64_t v27 = *(void *)(a1 + 40);
            __int128 v28 = *v19;
            *double v19 = *v20;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *uint64_t v20 = v28;
            *(void *)(a1 + 64) = v27;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              uint64_t v29 = *(void *)(a1 + 16);
              __int128 v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *double v19 = v30;
              *(void *)(a1 + 40) = v29;
            }
          }
        }
      }

      return 1LL;
    default:
      uint64_t v9 = a1 + 48;
      sub_10104C524((__int128 *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = *(void *)(v10 + 16);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 8_Block_object_dispose(va, 8) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24LL;
        if (v13 >= *(double *)(v17 + 32))
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }

      uint64_t v18 = a1;
LABEL_13:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + _Block_object_dispose(va, 8) = v13;
      *(void *)(v18 + 16) = v15;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }

    uint64_t v9 = v10;
    v11 += 24LL;
    v10 += 24LL;
    if (v10 == a2) {
      return 1LL;
    }
  }

void ***sub_10104EC74(void ***a1, __int128 *a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (char *)(*a1)[1];
  uint64_t v6 = *a1;
  uint64_t v9 = (char *)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  uint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      uint64_t v16 = (char *)sub_10000701C(v7, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = &v16[24 * v12];
    uint64_t v18 = &v16[24 * v15];
    __int128 v19 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v17 = v19;
    uint64_t v11 = v17 + 24;
    double v21 = (char *)*v4;
    uint64_t v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        __int128 v22 = *(_OWORD *)(v20 - 24);
        *((void *)v17 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }

      while (v20 != v21);
      uint64_t v20 = (char *)*v4;
    }

    *unint64_t v4 = v17;
    v4[1] = v11;
    void v4[2] = v18;
    if (v20) {
      operator delete(v20);
    }
  }

  else
  {
    __int128 v10 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v10;
    uint64_t v11 = v5 + 24;
  }

  v4[1] = v11;
  return a1;
}

uint64_t sub_10104EDA4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = a3[1];
  if (*a3 == v7 || (uint64_t v8 = *a4, v9 = a4[1], *a4 == v9))
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101896118);
    }
    __int128 v22 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (a3[1] - *a3) >> 5;
      uint64_t v24 = 0x6DB6DB6DB6DB6DB7LL * ((a4[1] - *a4) >> 3);
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      double v54 = *(double *)&v23;
      __int16 v55 = 2050;
      double v56 = *(double *)&v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "HRSteadyStateEstimator: Insufficient samples for HRSS estimation (numHR:%{public}lu, numWR:%{public}lu)",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_58;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101896118);
    }
    uint64_t v25 = (a3[1] - *a3) >> 5;
    uint64_t v26 = 0x6DB6DB6DB6DB6DB7LL * ((a4[1] - *a4) >> 3);
    int v49 = 134349312;
    double v50 = *(double *)&v25;
    __int16 v51 = 2050;
    double v52 = *(double *)&v26;
    uint64_t v27 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "HRSteadyStateEstimator: Insufficient samples for HRSS estimation (numHR:%{public}lu, numWR:%{public}lu)",  &v49,  22);
    goto LABEL_68;
  }

  double v10 = *(double *)(v7 - 24);
  double v11 = *(double *)(a2 + 56);
  if (v11 + 180.0 >= v10) {
    double v12 = v10;
  }
  else {
    double v12 = v11 + 180.0;
  }
  if (v11 >= v12 + -30.0) {
    double v13 = *(double *)(a2 + 56);
  }
  else {
    double v13 = v12 + -30.0;
  }
  do
  {
    double v14 = *(double *)(v8 + 8);
    BOOL v15 = v14 > v13 && v14 < v12;
    if (v15 && *(double *)(v8 + 16) > 5.0)
    {
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_101896118);
      }
      uint64_t v16 = (os_log_s *)qword_101934778;
      if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
      {
        double v17 = *(double *)(v8 + 8);
        double v18 = *(double *)(v8 + 16);
        *(_DWORD *)std::stringbuf::string_type buf = 134349312;
        double v54 = v17;
        __int16 v55 = 2050;
        double v56 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "HRSteadyStateEstimator: Found METs above threshold during steady state period (startTime:%{public}f, METs:%{public}f)",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101896118);
        }
        double v19 = *(double *)(v8 + 8);
        double v20 = *(double *)(v8 + 16);
        int v49 = 134349312;
        double v50 = v19;
        __int16 v51 = 2050;
        double v52 = v20;
        LODWORD(v4_Block_object_dispose(va, 8) = 22;
        double v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "HRSteadyStateEstimator: Found METs above threshold during steady state period (startTime:%{publi c}f, METs:%{public}f)",  &v49,  v48);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLHRSteadyStateEstimator::getEstimate(HRRecoveryResult &, const std::vector<HRRecoveryInputHR> &, const s td::vector<HRRecoveryInputWR> &)",  "%s\n",  v21);
      }
    }

    v8 += 56LL;
  }

  while (v8 != v9);
  double v28 = *(double *)(a2 + 56);
  double v29 = v28 + 120.0;
  if (v28 + 120.0 >= v12) {
    double v29 = v12;
  }
  if (v28 < v29 + -30.0) {
    double v28 = v29 + -30.0;
  }
  uint64_t v30 = *a3;
  uint64_t v31 = a3[1];
  if (*a3 == v31) {
    goto LABEL_53;
  }
  double v32 = 0.0;
  double v33 = 0.0;
  double v34 = 0.0;
  double v35 = 0.0;
  do
  {
    double v36 = *(double *)(v30 + 8);
    double v37 = *(double *)(v30 + 16);
    BOOL v38 = v36 > v13;
    BOOL v39 = v36 < v12;
    if (v38 && v39) {
      double v40 = *(double *)(v30 + 16);
    }
    else {
      double v40 = -0.0;
    }
    double v33 = v33 + v40;
    if (v38 && v39) {
      double v32 = v32 + 1.0;
    }
    BOOL v41 = v36 > v28;
    BOOL v42 = v36 < v29;
    if (!v41 || !v42) {
      double v37 = -0.0;
    }
    double v35 = v35 + v37;
    if (v41 && v42) {
      double v34 = v34 + 1.0;
    }
    v30 += 32LL;
  }

  while (v30 != v31);
  if (v32 == 0.0)
  {
LABEL_53:
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101896118);
    }
    __int128 v43 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      double v54 = v13;
      __int16 v55 = 2050;
      double v56 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "HRSteadyStateEstimator: No HRSS estimate due to no HR samples in steady state period (start:%{public}f, end:%{public}f",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_58;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101896118);
    }
    int v49 = 134349312;
    double v50 = v13;
    __int16 v51 = 2050;
    double v52 = v12;
    LODWORD(v4_Block_object_dispose(va, 8) = 22;
    uint64_t v27 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "HRSteadyStateEstimator: No HRSS estimate due to no HR samples in steady state period (start:%{ public}f, end:%{public}f",  &v49,  v48);
LABEL_68:
    __int128 v47 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLHRSteadyStateEstimator::getEstimate(HRRecoveryResult &, const std::vector<HRRecoveryInputHR> &, const std:: vector<HRRecoveryInputWR> &)",  "%s\n",  v27);
    if (v47 != buf) {
      free(v47);
    }
LABEL_58:
    int v44 = 7;
LABEL_59:
    uint64_t result = 0LL;
    *(_DWORD *)a2 = v44;
    return result;
  }

  double v46 = v33 / v32;
  if (v35 / v34 < v33 / v32) {
    double v46 = v35 / v34;
  }
  *(double *)(a2 + 72) = v46;
  if (v46 > *(double *)(a2 + 64))
  {
    int v44 = 8;
    goto LABEL_59;
  }

  return 1LL;
}

void sub_10104F3B0(id a1)
{
  qword_101934778 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

float sub_10104F3DC(float a1, float a2)
{
  return fmax((a1 * 3.5 + -7.0) / 10.8 * a2, 0.0);
}

float sub_10104F410(uint64_t a1)
{
  float result = *(float *)(a1 + 44);
  if (result <= 7.0) {
    return *(float *)(a1 + 16);
  }
  return result;
}

BOOL sub_10104F428(float a1)
{
  return a1 <= 10.0 && a1 >= 1.0;
}

BOOL sub_10104F444(unint64_t a1)
{
  return sub_10104F460(a1) != 66;
}

uint64_t sub_10104F460(unint64_t a1)
{
  if (a1 > 0x42) {
    return 4LL;
  }
  else {
    return qword_1013C0150[a1];
  }
}

float sub_10104F480(void *a1, __n128 *a2)
{
  for (uint64_t i = a1[5]; i; uint64_t i = a1[5])
  {
    unint64_t v5 = a1[4];
    if (vabdd_f64( *(double *)(*(void *)(a1[1] + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v5),  a2->n128_f64[0]) <= 60.0) {
      break;
    }
    a1[4] = v5 + 1;
    a1[5] = i - 1;
    sub_100232D40((uint64_t)a1, 1);
  }

  return sub_10104F598(a1);
}

__n128 sub_10104F510(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10104F644(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

float sub_10104F598(void *a1)
{
  uint64_t v1 = a1[1];
  if (a1[2] == v1)
  {
    unint64_t v2 = a1[5];
  }

  else
  {
    unint64_t v3 = a1[4];
    unint64_t v2 = a1[5];
    uint64_t v4 = (uint64_t *)(v1 + 8 * (v3 >> 8));
    uint64_t v5 = *v4;
    uint64_t v6 = *v4 + 16LL * v3;
    uint64_t v7 = *(void *)(v1 + (((v2 + v3) >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * (v2 + v3);
    if (v6 != v7)
    {
      float v8 = 0.0;
      do
      {
        uint64_t v9 = v6 + 16;
        if (v6 + 16 - v5 == 4096)
        {
          uint64_t v10 = v4[1];
          ++v4;
          uint64_t v5 = v10;
          uint64_t v9 = v10;
        }

        float v8 = v8 + *(float *)(v6 + 8);
        uint64_t v6 = v9;
      }

      while (v9 != v7);
      if (v2) {
        return v8 / (float)v2;
      }
      return 0.0;
    }
  }

  float v8 = 0.0;
  if (v2) {
    return v8 / (float)v2;
  }
  return 0.0;
}

float sub_10104F628(uint64_t a1)
{
  return (double)*(unint64_t *)(a1 + 40) / 23.4375;
}

void sub_10104F644(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    float v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)float v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      float v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        float v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10104F90C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_10104F958(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *(void *)(a2 + 4);
  float v2 = *(double *)(a2 + 168);
  int v3 = *(_DWORD *)(a2 + 12);
  float v16 = v2;
  int v17 = v3;
  int32x2_t v18 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  int v19 = *(_DWORD *)(a2 + 28);
  __int128 v20 = *(_OWORD *)(a2 + 40);
  int v4 = *(_DWORD *)(a2 + 60);
  int v5 = *(_DWORD *)(a2 + 124);
  int v6 = *(_DWORD *)(a2 + 128);
  int v21 = *(_DWORD *)(a2 + 56);
  int v22 = v5;
  int v23 = v4;
  int v24 = v6;
  int v25 = *(_DWORD *)(a2 + 184);
  uint64_t v26 = *(void *)(a2 + 192);
  int v7 = *(_DWORD *)(a2 + 224);
  int v27 = *(_DWORD *)(a2 + 200);
  int v28 = v7;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v8 = sub_10104F460(*(void *)(a2 + 152));
  float v9 = 0.0;
  if (v8 == 17) {
    float v9 = 1.0;
  }
  _OWORD v11[2] = 27LL;
  char v12 = 1;
  uint64_t v13 = &off_1018962E8;
  float v29 = v9;
  v11[0] = &off_1018964F8;
  v11[1] = &off_101896138;
  int v14 = 1056964608;
  return sub_10104FA44((uint64_t)v11, (uint64_t)&v15);
}

float sub_10104FA44(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_11;
  }
  unint64_t v4 = 0LL;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + sub_10104FC1C((void *)a1, a2, v4++);
    unint64_t v6 = *(void *)(a1 + 16);
  }

  while (v4 < v6);
  if (!v6)
  {
LABEL_11:
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_101281CBC();
    }
    __assert_rtn("evaluateForest", "CMRandomForestXGBoostedRegression.h", 49, "false");
  }

  return v5 + *(float *)(a1 + 40);
}

uint64_t sub_10104FAEC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 16) <= a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_101281E18();
    }
    __assert_rtn("findLeaf", "CMRandomForest.h", 56, "false");
  }

  unint64_t v3 = 0LL;
  unint64_t v4 = (void *)(*(void *)(a1 + 8) + 16 * a3);
  do
  {
    if (v3 >= v4[1])
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_101281DA4();
      }
      __assert_rtn("findLeaf", "CMRandomForest.h", 91, "false");
    }

    unint64_t v5 = *(unsigned __int16 *)(*v4 + 10 * v3 + 4);
    if (v5 >= 0x1D)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_101281D30();
      }
      __assert_rtn("findLeaf", "CMRandomForest.h", 65, "false");
    }

    unint64_t v6 = (float *)(*v4 + 10 * v3);
    float v7 = *(float *)(a2 + 4 * v5);
    uint64_t v8 = (unsigned __int16 *)v6 + 3;
    float v10 = *v6;
    float v9 = (unsigned __int16 *)(v6 + 2);
    BOOL v11 = v7 > v10;
    if (v7 >= v10) {
      char v12 = v9;
    }
    else {
      char v12 = v8;
    }
    if (!v11) {
      float v9 = v8;
    }
    if (*(_BYTE *)(a1 + 24)) {
      float v9 = v12;
    }
    int v13 = (__int16)*v9;
    unint64_t v3 = *v9;
  }

  while ((v13 & 0x80000000) == 0);
  return (__int16)~(_WORD)v3;
}

float sub_10104FC1C(void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  if (v5 == -1) {
    return 0.0;
  }
  uint64_t v6 = a1[4];
  if (*(void *)(v6 + 16 * a3 + 8) <= (unint64_t)(unsigned __int16)v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_101281E8C();
    }
    __assert_rtn("evaluateTree", "CMRandomForestRegression.h", 58, "false");
  }

  return *(float *)(*(void *)(v6 + 16 * a3) + 4LL * (unsigned __int16)v5);
}

void sub_10104FCB4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

double sub_10104FCD8@<D0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
  return CFAbsoluteTimeGetCurrent();
}

  ;
}

uint64_t sub_10104FCE8(uint64_t a1, void *a2)
{
  *(void *)a1 = off_101896560;
  *(void *)(a1 + _Block_object_dispose(va, 8) = [a2 newTimer];
  uint64_t v4 = 0x40D5180000000000LL;
  sub_101204164((unsigned __int8 *)(a1 + 16), "WorkoutEffortAnalyticsTimerSnoozeIntervalSeconds", &v4, 0);
  uint64_t v4 = 0x40AC200000000000LL;
  sub_101204164((unsigned __int8 *)(a1 + 40), "WorkoutEffortAnalyticsTimerFireDelay", &v4, 0);
  [*(id *)(a1 + 8) setNextFireDelay:*(double *)(a1 + 48) interval:*(double *)(a1 + 24)];
  return a1;
}

uint64_t sub_10104FD84(uint64_t a1)
{
  *(void *)a1 = off_101896560;
  [*(id *)(a1 + 8) invalidate];

  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  return a1;
}

void sub_10104FDCC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10104FD84(a1);
  operator delete(v1);
}

void sub_10104FDE0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3321888768LL;
    v9[2] = sub_10105002C;
    void v9[3] = &unk_101896578;
    unint64_t v3 = v10;
    sub_10001A504((uint64_t)v10, a2);
    [*(id *)(a1 + 8) setHandler:v9];
    if (v11 == v10)
    {
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v11) {
        return;
      }
      uint64_t v4 = 5LL;
      unint64_t v3 = v11;
    }

    (*(void (**)(void *))(*v3 + 8 * v4))(v3);
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896610);
    }
    int v5 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "AnalyticsLogger, timer unexpectedly nil when setting handler function",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  17LL,  "AnalyticsLogger, timer unexpectedly nil when setting handler function",  v8,  2);
      float v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLWorkoutEffortAnalyticsLogger::Timer::setHandler(OnTimerFireHandler)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

void sub_10104FFE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20 == v20)
  {
    uint64_t v22 = 4LL;
  }

  else
  {
    if (!a20) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
    __int128 v20 = a20;
  }

  (*(void (**)(void *))(*v20 + 8 * v22))(v20);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10105002C(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, CFAbsoluteTime *))(*(void *)v2 + 48LL))(v2, &Current);
}

uint64_t sub_101050074(uint64_t a1, uint64_t a2)
{
  return sub_10001A504(a1 + 32, a2 + 32);
}

void *sub_101050080(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  __n128 result = *(void **)(a1 + 56);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    __n128 result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1010500B4(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = off_1018965B8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 16) = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v15 = 0x402C000000000000LL;
  sub_101204164((unsigned __int8 *)(a1 + 24), "WorkoutEffortAnalyticsDaysToDelayAnalyticsLogging", &v15, 0);
  *(void *)(a1 + sub_1011C52D0(v1 - 56) = *a3;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 64) = v8;
  if (v8)
  {
    float v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 3;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  BOOL v11 = *(void (****)(void, void *))(a1 + 8);
  if (v11)
  {
    v16[0] = &off_101896640;
    v16[1] = a1;
    int v17 = v16;
    (**v11)(v11, v16);
    char v12 = v17;
    if (v17 == v16)
    {
      uint64_t v13 = 4LL;
      char v12 = v16;
      goto LABEL_12;
    }

    if (v17)
    {
      uint64_t v13 = 5LL;
LABEL_12:
      (*(void (**)(void))(*v12 + 8 * v13))();
    }
  }

  return a1;
}

void sub_10105021C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  int32x2_t v18 = a13;
  if (a13 == v16)
  {
    uint64_t v19 = 4LL;
    int32x2_t v18 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*(void *)v18 + 8 * v19))();
LABEL_6:
  sub_101053FB4(v15);
  sub_10000AE14(v14);
  sub_10000AE14(v13);
  _Unwind_Resume(a1);
}

void *sub_101050278(void *a1)
{
  *a1 = off_1018965B8;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_101053FB4(a1 + 9);
  sub_10000AE14((uint64_t)(a1 + 7));
  sub_10000AE14(v2);
  return a1;
}

void sub_1010502C4(void *a1)
{
  uint64_t v1 = sub_101050278(a1);
  operator delete(v1);
}

void sub_1010502D8(uint64_t a1, double a2)
{
  if (*(_DWORD *)(a1 + 120) != 3 || *(void *)(a1 + 112))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896610);
    }
    uint64_t v4 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "AnalyticsLogger, update, metrics aggregation triggered while existing query was running, progress will be lost",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      LOWORD(v21) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  17LL,  "AnalyticsLogger, update, metrics aggregation triggered while existing query was running, progress will be lost",  &v21,  *(void *)&v20);
      float v16 = (uint8_t *)v15;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWorkoutEffortAnalyticsLogger::update(CFAbsoluteTime)", "%s\n", v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  sub_101050910(a1);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1) & 1) != 0)
  {
    double v5 = sub_101050ABC(a1, a2);
    *(double *)(a1 + 4_Block_object_dispose(va, 8) = v5;
    int v6 = vcvtmd_s64_f64(v5 / 86400.0);
    HIDWORD(v20) = 0x7FFFFFFF;
    uint64_t v7 = sub_1002F8DDC();
    if (sub_1002A7CB0( v7,  (const char *)[@"WorkoutEffortAnalyticsDayLastEventSent" UTF8String],  (_DWORD *)&v20 + 1)
      && SHIDWORD(v20) >= v6)
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      uint64_t v8 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 48);
        *(_DWORD *)std::stringbuf::string_type buf = 134218752;
        double v30 = a2;
        __int16 v31 = 2048;
        uint64_t v32 = v9;
        __int16 v33 = 1024;
        int v34 = v6;
        __int16 v35 = 1024;
        int v36 = HIDWORD(v20);
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "AnalyticsLogger, update, already logged metrics, updateTime, %.2f, dayOfInterestStartTime, %.2f, dayOfInterest , %d, dayLastEventSent, %d",  buf,  0x22u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "AnalyticsLogger, update, already logged metrics, updateTime, %.2f, dayOfInterestStartTime, %.2f, dayOfInterest , %d, dayLastEventSent, %d",  &v21);
LABEL_27:
        char v12 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortAnalyticsLogger::update(CFAbsoluteTime)",  "%s\n",  v10);
        if (v12 != buf) {
          free(v12);
        }
      }
    }

    else
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      uint64_t v13 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 48);
        *(_DWORD *)std::stringbuf::string_type buf = 134218752;
        double v30 = a2;
        __int16 v31 = 2048;
        uint64_t v32 = v14;
        __int16 v33 = 1024;
        int v34 = v6;
        __int16 v35 = 1024;
        int v36 = HIDWORD(v20);
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "AnalyticsLogger, update, attempting to log metrics for new day, updateTime, %.2f, dayOfInterestStartTime, %.2f , dayOfInterest, %d, dayLastEventSent, %d",  buf,  0x22u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        uint64_t v17 = *(void *)(a1 + 48);
        int v21 = 134218752;
        double v22 = a2;
        __int16 v23 = 2048;
        uint64_t v24 = v17;
        __int16 v25 = 1024;
        int v26 = v6;
        __int16 v27 = 1024;
        int v28 = HIDWORD(v20);
        LODWORD(v20) = 34;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "AnalyticsLogger, update, attempting to log metrics for new day, updateTime, %.2f, dayOfInterestStartTime, %.2f , dayOfInterest, %d, dayLastEventSent, %d",  COERCE_DOUBLE(&v21),  v20);
        uint64_t v19 = (uint8_t *)v18;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortAnalyticsLogger::update(CFAbsoluteTime)",  "%s\n",  v18);
        if (v19 != buf) {
          free(v19);
        }
      }

      *(_DWORD *)(a1 + 120) = 0;
      sub_101050B44(a1);
    }
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896610);
    }
    BOOL v11 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "AnalyticsLogger, update, IHA disabled, no work needed",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "AnalyticsLogger, update, IHA disabled, no work needed");
      goto LABEL_27;
    }
  }

void *sub_101050910(uint64_t a1)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101896610);
  }
  uint64_t v2 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AnalyticsLogger, resetting query state", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896610);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  1LL,  "AnalyticsLogger, resetting query state",  v6,  2);
    double v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutEffortAnalyticsLogger::resetQueryState()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  *(_DWORD *)(a1 + 120) = 3;
  __n128 result = sub_1010541DC((void *)(a1 + 72), 0LL, 0LL);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  return result;
}

double sub_101050ABC(uint64_t a1, double a2)
{
  uint64_t v4 = -[NSTimeZone secondsFromGMTForDate:]( +[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"),  "secondsFromGMTForDate:",  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:"));
}

void sub_101050B44(uint64_t a1)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101896610);
  }
  uint64_t v2 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
  {
    sub_101051334(*(_DWORD *)(a1 + 120), &v40);
    if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v3 = &v40;
    }
    else {
      uint64_t v3 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    unint64_t v4 = *(void *)(a1 + 112);
    if (v4 < 2) {
      unsigned int v5 = 3;
    }
    else {
      unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
    }
                     + 112 * (*(void *)(a1 + 104) % 0x24uLL)
                     + 80);
    sub_101051334(v5, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136315650;
    __int128 v43 = v3;
    __int16 v44 = 2048;
    *(void *)uint64_t v45 = v4;
    *(_WORD *)&v45[8] = 2080;
    *(void *)&_BYTE v45[10] = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "AnalyticsLogger, runNextPendingQuery, workoutsQueryState, %s, eventDataQueueSize, %zu, nextEventDataQueryState, %s",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896610);
    }
    uint64_t v28 = qword_1019347E8;
    sub_101051334(*(_DWORD *)(a1 + 120), &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      float v29 = &__p;
    }
    else {
      float v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v30 = *(void *)(a1 + 112);
    if (v30 < 2) {
      unsigned int v31 = 3;
    }
    else {
      unsigned int v31 = *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
    }
                      + 112 * (*(void *)(a1 + 104) % 0x24uLL)
                      + 80);
    sub_101051334(v31, &v38);
    if ((v38.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v32 = &v38;
    }
    else {
      uint64_t v32 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    LODWORD(v40.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
    WORD2(v40.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = v30;
    HIWORD(v40.__r_.__value_.__r.__words[2]) = 2080;
    BOOL v41 = v32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  1LL,  "AnalyticsLogger, runNextPendingQuery, workoutsQueryState, %s, eventDataQueueSize, %zu, nextEventDataQueryState, %s",  (const char *)&v40,  32,  v38.__r_.__value_.__l.__data_);
    int v34 = v33;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutEffortAnalyticsLogger::runNextPendingQuery()", "%s\n", v34);
  }

  if (*(_DWORD *)(a1 + 120) == 2)
  {
    if (*(void *)(a1 + 112))
    {
      unint64_t v7 = *(void *)(a1 + 104);
      uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * (v7 / 0x24));
      unint64_t v9 = v7 % 0x24;
      if (*(_DWORD *)(v8 + 112 * v9 + 80) == 2)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1) & 1) != 0)
        {
          unint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
              + 112 * (*(void *)(a1 + 104) % 0x24uLL);
          uint64_t v11 = *(void *)(v10 + 56);
          for (uint64_t i = *(void *)(v10 + 64); v11 != i; v11 += 56LL)
          {
            sub_100BEF53C(buf, (const unsigned __int8 *)v11);
            __int128 v13 = *(_OWORD *)(v11 + 16);
            __int128 v14 = *(_OWORD *)(v11 + 32);
            uint64_t v47 = *(void *)(v11 + 48);
            *(_OWORD *)&v45[2] = v13;
            __int128 v46 = v14;
            unint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
                + 112 * (*(void *)(a1 + 104) % 0x24uLL);
            BOOL v16 = *(_BYTE *)(v15 + 48) != 0;
            v40.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
            uint64_t v17 = sub_1010555B8((uint64_t **)(v15 + 88), buf, (uint64_t)&unk_1012CF090, (const unsigned __int8 **)&v40);
            uint64_t v19 = sub_101051BA4(v18, (uint64_t)v17, v16, (uint64_t)buf, (uint64_t)(v17 + 6));
            (*(void (**)(uint64_t, NSDictionary *))(*(void *)a1 + 16LL))(a1, v19);
          }

          ++*(void *)(a1 + 128);
          sub_101051D58((int64x2_t *)(a1 + 72));
          sub_101050B44(a1);
        }

        else
        {
          if (qword_1019347E0 != -1) {
            dispatch_once(&qword_1019347E0, &stru_101896610);
          }
          __int16 v27 = (os_log_s *)qword_1019347E8;
          if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "AnalyticsLogger, IHA disabled, aborting sending aggregated metrics",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019347E0 != -1) {
              dispatch_once(&qword_1019347E0, &stru_101896610);
            }
            LOWORD(v40.__r_.__value_.__l.__data_) = 0;
            LODWORD(v37) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  1LL,  "AnalyticsLogger, IHA disabled, aborting sending aggregated metrics",  &v40,  v37);
            int v36 = (uint8_t *)v35;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortAnalyticsLogger::runNextPendingQuery()",  "%s\n",  v35);
            if (v36 != buf) {
              free(v36);
            }
          }

          sub_101050910(a1);
        }
      }

      else
      {
        sub_1010517AC(a1, v8 + 112 * v9);
      }
    }

    else
    {
      sub_101050910(a1);
      LODWORD(__p.__r_.__value_.__l.__data_) = vcvtmd_s64_f64(*(double *)(a1 + 48) / 86400.0);
      uint64_t v20 = sub_1002F8DDC();
      sub_1002AC220( v20,  (const char *)[@"WorkoutEffortAnalyticsDayLastEventSent" UTF8String],  &__p);
      uint64_t v21 = sub_1002F8DDC();
      (*(void (**)(uint64_t))(*(void *)v21 + 944LL))(v21);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      double v22 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v23 = *(std::string **)(a1 + 48);
        *(_DWORD *)std::stringbuf::string_type buf = 134218240;
        __int128 v43 = v23;
        __int16 v44 = 1024;
        *(_DWORD *)uint64_t v45 = __p.__r_.__value_.__l.__data_;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "AnalyticsLogger, successfully completed logging events for day of interest, startTime, %.2f, wholeDay, %d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        std::string::size_type v24 = *(void *)(a1 + 48);
        LODWORD(v40.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v24;
        WORD2(v40.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = __p.__r_.__value_.__l.__data_;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "AnalyticsLogger, successfully completed logging events for day of interest, startTime, %.2f, wholeDay, %d",  COERCE_DOUBLE(&v40),  18);
        int v26 = (uint8_t *)v25;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutEffortAnalyticsLogger::runNextPendingQuery()", "%s\n", v25);
        if (v26 != buf) {
          free(v26);
        }
      }
    }
  }

  else
  {
    sub_1010513A8(a1);
  }

void sub_1010512FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_101051334@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  if (a1 >= 4) {
    unint64_t v4 = "Unhandled query state";
  }
  else {
    unint64_t v4 = off_1018967D0[a1];
  }
  return std::string::assign(a2, v4);
}

void sub_10105138C(_Unwind_Exception *exception_object)
{
}

void sub_1010513A8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 120))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896610);
    }
    uint64_t v2 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_FAULT))
    {
      sub_101051334(*(_DWORD *)(a1 + 120), __p);
      uint64_t v3 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "AnalyticsLogger, queryWorkouts, called in unexpected state, %s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      uint64_t v4 = qword_1019347E8;
      sub_101051334(*(_DWORD *)(a1 + 120), &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v18 = 136315138;
      uint64_t v19 = p_buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v4,  17LL,  "AnalyticsLogger, queryWorkouts, called in unexpected state, %s",  (const char *)&v18);
      unint64_t v7 = v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWorkoutEffortAnalyticsLogger::queryWorkouts()",  "%s\n",  (const char *)v7);
      if (v7 != __p) {
        free(v7);
      }
    }
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8)
    {
      *(_DWORD *)(a1 + 120) = 1;
      double v9 = *(double *)(a1 + 48);
      v15[0] = &off_1018966C0;
      v15[1] = a1;
      BOOL v16 = v15;
      (*(void (**)(uint64_t, uint64_t, void *, double, double))(*(void *)v8 + 24LL))( v8,  10LL,  v15,  v9,  v9 + 86399.0);
      unint64_t v10 = v16;
      if (v16 == v15)
      {
        uint64_t v11 = 4LL;
        unint64_t v10 = v15;
      }

      else
      {
        if (!v16) {
          return;
        }
        uint64_t v11 = 5LL;
      }

      (*(void (**)(void))(*v10 + 8 * v11))();
    }

    else
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      char v12 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "AnalyticsLogger, queryWorkouts, hk query wrapper object unexpectedly nil",  (uint8_t *)__p,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  17LL,  "AnalyticsLogger, queryWorkouts, hk query wrapper object unexpectedly nil",  &buf,  2);
        __int128 v14 = (std::string *)v13;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWorkoutEffortAnalyticsLogger::queryWorkouts()", "%s\n", v13);
        if (v14 != __p) {
          free(v14);
        }
      }

      sub_101050910(a1);
    }
  }

void sub_10105176C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  BOOL v16 = a14;
  if (a14 == v14)
  {
    uint64_t v17 = 4LL;
    BOOL v16 = &a11;
  }

  else
  {
    if (!a14) {
      goto LABEL_6;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1010517AC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 80))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896610);
    }
    uint64_t v3 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_FAULT))
    {
      sub_101051334(*(_DWORD *)(a2 + 80), __p);
      uint64_t v4 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "AnalyticsLogger, queryWorkoutEffort, called in unexpected state, %s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      uint64_t v5 = qword_1019347E8;
      sub_101051334(*(_DWORD *)(a2 + 80), &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v19 = 136315138;
      uint64_t v20 = p_buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v5,  17LL,  "AnalyticsLogger, queryWorkoutEffort, called in unexpected state, %s",  (const char *)&v19);
      uint64_t v8 = v7;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWorkoutEffortAnalyticsLogger::queryWorkoutEffort(EventData &)",  "%s\n",  (const char *)v8);
      if (v8 != __p) {
        free(v8);
      }
    }
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10)
    {
      *(_DWORD *)(a2 + 80) = 1;
      v16[0] = &off_101896750;
      v16[1] = a1;
      uint64_t v17 = v16;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 32LL))(v10, a2, v16);
      uint64_t v11 = v17;
      if (v17 == v16)
      {
        uint64_t v12 = 4LL;
        uint64_t v11 = v16;
      }

      else
      {
        if (!v17) {
          return;
        }
        uint64_t v12 = 5LL;
      }

      (*(void (**)(void))(*v11 + 8 * v12))();
    }

    else
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      __int128 v13 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "AnalyticsLogger, queryWorkoutEffort, hk query wrapper object unexpectedly nil",  (uint8_t *)__p,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  17LL,  "AnalyticsLogger, queryWorkoutEffort, hk query wrapper object unexpectedly nil",  &buf,  2);
        unint64_t v15 = (std::string *)v14;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWorkoutEffortAnalyticsLogger::queryWorkoutEffort(EventData &)",  "%s\n",  v14);
        if (v15 != __p) {
          free(v15);
        }
      }

      sub_101050910(a1);
    }
  }

void sub_101051B64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  BOOL v16 = a14;
  if (a14 == v14)
  {
    uint64_t v17 = 4LL;
    BOOL v16 = &a11;
  }

  else
  {
    if (!a14) {
      goto LABEL_6;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_101051BA4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(float *)(a5 + 56) == -1.0)
  {
    double v8 = -1.0;
  }

  else
  {
    a1 = *(double *)(a5 + 48) - *(double *)(a4 + 24);
    double v8 = a1 / 3600.0;
  }

  v11[0] = @"estimatedEffort";
  LODWORD(a1) = *(_DWORD *)(a5 + 88);
  v12[0] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", a1);
  v12[1] = &off_1018D5198;
  v11[1] = @"estimatedEffortPreBiasCorrection";
  _OWORD v11[2] = @"userEnteredEffort";
  LODWORD(v9) = *(_DWORD *)(a5 + 56);
  _DWORD v12[2] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v9);
  void v11[3] = @"isMultisport";
  _OWORD v12[3] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3);
  _DWORD v11[4] = @"swimWorkoutLocation";
  _DWORD v12[4] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a4 + 48));
  v11[5] = @"workoutLocation";
  void v12[5] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a4 + 40));
  void v11[6] = @"workoutType";
  v12[6] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a4 + 32));
  v11[7] = @"totalDuration";
  v12[7] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  (*(double *)(a4 + 24) - *(double *)(a4 + 16)) / 60.0);
  _WORD v11[8] = @"timeFromWorkoutEndToUserEntry";
  _WORD v12[8] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v8);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  9LL);
}

uint64_t sub_101051D58(int64x2_t *a1)
{
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1012CE4D0);
  return sub_100D593A8((uint64_t)a1, 1);
}

void sub_101051DCC(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a2 == 100)
  {
    if (*(_DWORD *)(a1 + 120) != 1)
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      int v6 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
      {
        sub_101051334(*(_DWORD *)(v3 + 120), &__p);
        unint64_t v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
           ? &__p
           : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "AnalyticsLogger, queryWorkouts, #warning returned to unexpected query state, %s",  (uint8_t *)&buf,  0xCu);
      }

      uint64_t v3 = a1;
      if (sub_1002921D0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        uint64_t v17 = qword_1019347E8;
        sub_101051334(*(_DWORD *)(a1 + 120), &buf);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        LODWORD(v24.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v17,  1LL,  "AnalyticsLogger, queryWorkouts, #warning returned to unexpected query state, %s",  (const char *)&v24);
        uint64_t v20 = v19;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortAnalyticsLogger::handleWorkoutQueryResults(CMError, const std::vector<CLWorkoutEffortHealt hKitQueryInterface::WorkoutSessionSample> &)",  "%s\n",  (const char *)v20);
        if (v20 != &__p) {
          free(v20);
        }
        uint64_t v3 = a1;
      }
    }

    uint64_t v22 = v3;
    *(_DWORD *)(v3 + 120) = 2;
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    if (*a3 != v9)
    {
      __int16 v23 = (void *)(v3 + 72);
      do
      {
        sub_100BEF53C((unsigned __int8 *)&buf, (const unsigned __int8 *)v8);
        sub_100BEF53C((unsigned __int8 *)&buf.__r_.__value_.__s.__data_[16], (const unsigned __int8 *)(v8 + 16));
        __int128 v10 = *(_OWORD *)(v8 + 32);
        char v29 = *(_BYTE *)(v8 + 48);
        __int128 v28 = v10;
        unsigned int v31 = 0LL;
        uint64_t v32 = 0LL;
        std::string::size_type v30 = 0LL;
        sub_101053C80( (unsigned __int8 *)&v30,  *(void *)(v8 + 56),  *(void *)(v8 + 64),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(v8 + 64) - *(void *)(v8 + 56)) >> 3));
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        uint64_t v11 = (os_log_s *)qword_1019347E8;
        if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
        {
          sub_1010523C0((uint64_t)&buf, &__p);
          p_p = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(v24.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "AnalyticsLogger, queryWorkouts, appending queue with workoutSessionSample, %s",  (uint8_t *)&v24,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1019347E0 != -1) {
            dispatch_once(&qword_1019347E0, &stru_101896610);
          }
          uint64_t v13 = qword_1019347E8;
          sub_1010523C0((uint64_t)&buf, &v24);
          __int128 v14 = &v24;
          if ((v24.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            __int128 v14 = (std::stringbuf::string_type *)v24.__r_.__value_.__r.__words[0];
          }
          int v25 = 136315138;
          int v26 = v14;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v13,  1LL,  "AnalyticsLogger, queryWorkouts, appending queue with workoutSessionSample, %s",  (const char *)&v25);
          if ((char)v24.__r_.__value_.__s.__size_ < 0)
          {
            BOOL v16 = v15;
            operator delete(v24.__r_.__value_.__l.__data_);
            unint64_t v15 = v16;
          }

          uint64_t v21 = (std::stringbuf::string_type *)v15;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortAnalyticsLogger::handleWorkoutQueryResults(CMError, const std::vector<CLWorkoutEffortHea lthKitQueryInterface::WorkoutSessionSample> &)",  "%s\n",  v15);
          if (v21 != &__p) {
            free(v21);
          }
        }

        sub_100BEF53C((unsigned __int8 *)&__p, (const unsigned __int8 *)&buf);
        sub_100BEF53C( (unsigned __int8 *)&__p.__r_.__value_.__s.__data_[16],  (const unsigned __int8 *)&buf.__r_.__value_.__s.__data_[16]);
        __int128 v34 = v28;
        char v35 = v29;
        uint64_t v37 = 0LL;
        uint64_t v38 = 0LL;
        int v36 = 0LL;
        sub_101053C80( (unsigned __int8 *)&v36,  (uint64_t)v30,  (uint64_t)v31,  0x6DB6DB6DB6DB6DB7LL * ((v31 - (_BYTE *)v30) >> 3));
        int v39 = 0;
        v41[0] = 0LL;
        v41[1] = 0LL;
        std::string v40 = v41;
        sub_10105274C(v23, (uint64_t)&__p);
        sub_100008390((uint64_t)&v40, v41[0]);
        if (v36)
        {
          uint64_t v37 = v36;
          operator delete(v36);
        }

        if (v30)
        {
          unsigned int v31 = v30;
          operator delete(v30);
        }

        v8 += 80LL;
      }

      while (v8 != v9);
    }

    sub_101050B44(v22);
  }

  else
  {
    sub_101050910(a1);
  }

void sub_10105237C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31, uint64_t a32, char a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010523C0@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = v26;
  *(_DWORD *)((char *)&v26 + *(void *)(v26 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v26 + *(void *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v27.__loc_.__locale_ + *(void *)(v4 - 24)) = (std::locale::__imp *)2;
  uint64_t v5 = sub_10000CF44(&v26, (uint64_t)"hkBuilderId, ", 13LL);
  sub_100BEF5DC((const unsigned __int8 *)a1, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)", ", 2LL);
  uint64_t v9 = sub_10000CF44(&v26, (uint64_t)"overviewId, ", 12LL);
  sub_100BEF5DC((const unsigned __int8 *)(a1 + 16), &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v10 = &__p;
  }
  else {
    __int128 v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v11 = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v11 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = sub_10000CF44(v9, (uint64_t)v10, v11);
  sub_10000CF44(v12, (uint64_t)", ", 2LL);
  sub_10000CF44(&v26, (uint64_t)"startTime, ", 11LL);
  uint64_t v13 = (void *)std::ostream::operator<<(*(double *)(a1 + 32));
  sub_10000CF44(v13, (uint64_t)", ", 2LL);
  sub_10000CF44(&v26, (uint64_t)"endTime, ", 9LL);
  __int128 v14 = (void *)std::ostream::operator<<(*(double *)(a1 + 40));
  sub_10000CF44(v14, (uint64_t)", ", 2LL);
  unint64_t v15 = sub_10000CF44(&v26, (uint64_t)"isMultisport, ", 14LL);
  BOOL v16 = (void *)std::ostream::operator<<(v15, *(unsigned __int8 *)(a1 + 48));
  sub_10000CF44(v16, (uint64_t)", ", 2LL);
  uint64_t v17 = sub_10000CF44(&v26, (uint64_t)"totalWorkoutCount, ", 19LL);
  std::ostream::operator<<(v17, 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3));
  if (*(void *)(a1 + 64) != *(void *)(a1 + 56))
  {
    uint64_t v18 = 0LL;
    unint64_t v19 = 0LL;
    do
    {
      sub_10000CF44(&v26, (uint64_t)", ", 2LL);
      uint64_t v20 = sub_10000CF44(&v26, (uint64_t)"workoutIdx, ", 12LL);
      uint64_t v21 = (void *)std::ostream::operator<<(v20, v19);
      sub_10000CF44(v21, (uint64_t)", ", 2LL);
      sub_101053D70(*(void *)(a1 + 56) + v18, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v22 = &__p;
      }
      else {
        uint64_t v22 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v23 = __p.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v23 = __p.__r_.__value_.__l.__size_;
      }
      sub_10000CF44(&v26, (uint64_t)v22, v23);
      ++v19;
      v18 += 56LL;
    }

    while (0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3) > v19);
  }

  std::stringbuf::str(a2, &v27);
  std::streambuf::~streambuf(&v27);
  return std::ios::~ios(&v28);
}

void sub_101052708( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

unsigned __int8 *sub_10105274C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 5;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 36 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0LL;
  }
  if (v7 == a1[5] + a1[4])
  {
    sub_1010558C4(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }

  if (v6 == v5)
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    unint64_t v8 = a1[5] + a1[4];
    uint64_t v9 = *(void *)(v5 + 8 * (v8 / 0x24)) + 112 * (v8 % 0x24);
  }

  __n128 result = sub_101055BD8((uint64_t)v4, v9, a2);
  ++*v4;
  return result;
}

uint64_t sub_101052814(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_101052850(uint64_t a1, int a2, void *a3)
{
  if (*(void *)(a1 + 112))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    unint64_t v5 = *(void *)(a1 + 104);
    unint64_t v6 = v5 / 0x24;
    uint64_t v7 = *(void *)(v4 + 8 * (v5 / 0x24));
    unint64_t v8 = v5 % 0x24;
    if (*(_DWORD *)(v7 + 112 * v8 + 80) == 1)
    {
      *(void *)&v40[8] = 0LL;
      *(void *)&_BYTE v40[16] = 0LL;
      *(void *)std::string v40 = &v40[8];
      if (a2 == 100) {
        char v10 = sub_101053080(a1, (uint64_t)v40, *(void *)(v4 + 8 * v6) + 112 * v8, a3);
      }
      else {
        char v10 = 0;
      }
      unint64_t v15 = *(void *)(a1 + 128);
      if ((v10 & 1) != 0 || v15 < 2)
      {
        if (v15 > 1) {
          char v19 = 1;
        }
        else {
          char v19 = v10;
        }
        if ((v19 & 1) == 0)
        {
          if (qword_1019347E0 != -1) {
            dispatch_once(&qword_1019347E0, &stru_101896610);
          }
          uint64_t v22 = (os_log_s *)qword_1019347E8;
          if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
          {
            __p.__r_.__value_.__r.__words[0] = 67109376LL;
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = a2;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "AnalyticsLogger, queryWorkoutEffort, failed but no events were sent yet so try again later, matchSuccess, %d, error, %d",  (uint8_t *)&__p,  0xEu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1019347E0 != -1) {
              dispatch_once(&qword_1019347E0, &stru_101896610);
            }
            buf.__r_.__value_.__r.__words[0] = 67109376LL;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = a2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  1LL,  "AnalyticsLogger, queryWorkoutEffort, failed but no events were sent yet so try again later, matchSuccess, %d, error, %d",  &buf,  14);
            int v36 = (std::string *)v35;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutE ffortHealthKitQueryInterface::EffortScoreSet> &)",  "%s\n",  v35);
            if (v36 != &__p) {
              free(v36);
            }
          }

          sub_101050910(a1);
          goto LABEL_45;
        }

        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        uint64_t v20 = (os_log_s *)qword_1019347E8;
        if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "AnalyticsLogger, queryWorkoutEffort, succeeded adding matched scores to front of queue",  (uint8_t *)&__p,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1019347E0 != -1) {
            dispatch_once(&qword_1019347E0, &stru_101896610);
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  1LL,  "AnalyticsLogger, queryWorkoutEffort, succeeded adding matched scores to front of queue",  &buf,  2);
          __int128 v34 = (std::string *)v33;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEff ortHealthKitQueryInterface::EffortScoreSet> &)",  "%s\n",  v33);
          if (v34 != &__p) {
            free(v34);
          }
        }

        unint64_t v21 = *(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
            + 112 * (*(void *)(a1 + 104) % 0x24uLL);
        *(_DWORD *)(v21 + 80) = 2;
        if ((_BYTE *)(v21 + 88) != v40) {
          sub_101055DA0((uint64_t **)(v21 + 88), *(void **)v40, &v40[8]);
        }
      }

      else
      {
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        BOOL v16 = (os_log_s *)qword_1019347E8;
        if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
        {
          std::string::size_type v17 = *(void *)(a1 + 128);
          uint64_t v18 = *(void *)(a1 + 112);
          __p.__r_.__value_.__r.__words[0] = 67109888LL;
          LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = a2;
          HIWORD(__p.__r_.__value_.__r.__words[1]) = 2048;
          __p.__r_.__value_.__l.__cap_ = v17;
          __int16 v42 = 2048;
          uint64_t v43 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "AnalyticsLogger, queryWorkoutEffort, failed trying to log remaining workouts, matchSuccess, %d, error, %d, c ountSent, %zu, countRemaining, %zu",  (uint8_t *)&__p,  0x22u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1019347E0 != -1) {
            dispatch_once(&qword_1019347E0, &stru_101896610);
          }
          std::string::size_type v29 = *(void *)(a1 + 128);
          uint64_t v30 = *(void *)(a1 + 112);
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = a2;
          HIWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
          buf.__r_.__value_.__l.__cap_ = v29;
          __int16 v38 = 2048;
          uint64_t v39 = v30;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  1LL,  "AnalyticsLogger, queryWorkoutEffort, failed trying to log remaining workouts, matchSuccess, %d, error, %d, c ountSent, %zu, countRemaining, %zu",  &buf,  34,  0x4000400uLL,  buf.__r_.__value_.__l.__size_);
          uint64_t v32 = (std::string *)v31;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEff ortHealthKitQueryInterface::EffortScoreSet> &)",  "%s\n",  v31);
          if (v32 != &__p) {
            free(v32);
          }
        }

        sub_101051D58((int64x2_t *)(a1 + 72));
      }

      sub_101050B44(a1);
LABEL_45:
      sub_100008390((uint64_t)v40, *(void **)&v40[8]);
      return;
    }
  }

  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101896610);
  }
  uint64_t v11 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_FAULT))
  {
    std::string::size_type v12 = *(void *)(a1 + 112);
    unsigned int v13 = v12 < 2
        ? 3
        : *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
                    + 112 * (*(void *)(a1 + 104) % 0x24uLL)
                    + 80);
    sub_101051334(v13, &__p);
    __int128 v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218242;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v12;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "AnalyticsLogger, queryWorkoutEffort, returned to unexpected event data queue state, size, %zu, nextEventQueryState, %s",  (uint8_t *)&buf,  0x16u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896610);
    }
    unint64_t v23 = *(void *)(a1 + 112);
    if (v23 < 2) {
      unsigned int v24 = 3;
    }
    else {
      unsigned int v24 = *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
    }
                      + 112 * (*(void *)(a1 + 104) % 0x24uLL)
                      + 80);
    uint64_t v25 = qword_1019347E8;
    sub_101051334(v24, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string v40 = 134218242;
    *(void *)&v40[4] = v23;
    *(_WORD *)&v40[12] = 2080;
    *(void *)&v40[14] = p_buf;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v25,  17LL,  "AnalyticsLogger, queryWorkoutEffort, returned to unexpected event data queue state, size, %zu, nextEventQueryState, %s",  (size_t)v40,  22);
    uint64_t v28 = v27;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEffortHea lthKitQueryInterface::EffortScoreSet> &)",  "%s\n",  (const char *)v28);
    if (v28 != &__p) {
      free(v28);
    }
  }

  sub_101050910(a1);
}

void sub_101053050( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

uint64_t sub_101053080(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v6 = (void *)(a2 + 8);
  sub_100008390(a2, *(void **)(a2 + 8));
  *(void *)a2 = v6;
  *(void *)(a2 + 16) = 0LL;
  *unint64_t v6 = 0LL;
  uint64_t v7 = *(void *)(a3 + 56);
  uint64_t v8 = *(void *)(a3 + 64);
  if (v7 != v8)
  {
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v70 = _Q0;
    do
    {
      sub_100BEF53C((unsigned __int8 *)&v87, (const unsigned __int8 *)v7);
      __int128 v14 = *(_OWORD *)(v7 + 16);
      __int128 v15 = *(_OWORD *)(v7 + 32);
      *(void *)&__int128 v90 = *(void *)(v7 + 48);
      __int128 v88 = v14;
      __int128 v89 = v15;
      __int128 v81 = 0u;
      __int128 v82 = 0u;
      __int128 v79 = 0u;
      __int128 v80 = 0u;
      *(_OWORD *)std::string __p = 0u;
      __int128 v78 = 0u;
      sub_100BEF518((unsigned __int8 *)__p);
      sub_100BEF518((unsigned __int8 *)&v78);
      __int128 v79 = v70;
      *(void *)&__int128 v80 = 0xBFF0000000000000LL;
      DWORD2(v80) = -1082130432;
      __int128 v81 = v70;
      *(void *)&__int128 v82 = 0xBFF0000000000000LL;
      DWORD2(v82) = -1082130432;
      *(void *)std::string buf = &v87;
      BOOL v16 = sub_1010555B8( (uint64_t **)a2,  (const unsigned __int8 *)&v87,  (uint64_t)&unk_1012CF090,  (const unsigned __int8 **)buf);
      __int128 v17 = v80;
      __int128 v19 = v81;
      __int128 v18 = v82;
      *((_OWORD *)v16 + 5) = v79;
      *((_OWORD *)v16 + 6) = v17;
      *((_OWORD *)v16 + 7) = v19;
      *((_OWORD *)v16 + _Block_object_dispose(va, 8) = v18;
      __int128 v20 = v78;
      v7 += 56LL;
      *((_OWORD *)v16 + 3) = *(_OWORD *)__p;
      *((_OWORD *)v16 + 4) = v20;
    }

    while (v7 != v8);
  }

  unint64_t v21 = (_OWORD *)*a4;
  uint64_t v22 = (_OWORD *)a4[1];
  if (v22 == (_OWORD *)*a4) {
    goto LABEL_47;
  }
  do
  {
    sub_100BEF53C((unsigned __int8 *)&v87, (const unsigned __int8 *)v21);
    sub_100BEF53C((unsigned __int8 *)&v88, (const unsigned __int8 *)v21 + 16);
    __int128 v23 = v21[2];
    __int128 v24 = v21[3];
    __int128 v25 = v21[4];
    *(_OWORD *)&v91[12] = *(_OWORD *)((char *)v21 + 76);
    __int128 v90 = v24;
    *(_OWORD *)__int128 v91 = v25;
    __int128 v89 = v23;
    if (sub_100BEF5C0((const unsigned __int8 *)&v87, (const unsigned __int8 *)a3))
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      __int16 v44 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_ERROR))
      {
        sub_100BEF5DC((const unsigned __int8 *)a3, __p);
        int v45 = SBYTE7(v78);
        __int128 v46 = (void **)__p[0];
        sub_100BEF5DC((const unsigned __int8 *)&v87, buf);
        uint64_t v47 = __p;
        if (v45 < 0) {
          uint64_t v47 = v46;
        }
        if (v86 >= 0) {
          uint64_t v48 = buf;
        }
        else {
          uint64_t v48 = *(uint8_t **)buf;
        }
        *(_DWORD *)int64_t v71 = 136315394;
        *(void *)&v71[4] = v47;
        *(_WORD *)&v71[12] = 2080;
        *(void *)&v71[14] = v48;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "AnalyticsLogger, at least one effort set returned did not match expectedHkBuilderId, %s, foundHkBuilderId, %s",  v71,  0x16u);
        if (v86 < 0) {
          operator delete(*(void **)buf);
        }
        if (SBYTE7(v78) < 0) {
          operator delete(__p[0]);
        }
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_43;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      uint64_t v62 = qword_1019347E8;
      sub_100BEF5DC((const unsigned __int8 *)a3, buf);
      int v63 = v86;
      double v64 = *(uint8_t **)buf;
      sub_100BEF5DC((const unsigned __int8 *)&v87, v71);
      uint64_t v65 = buf;
      if (v63 < 0) {
        uint64_t v65 = v64;
      }
      if (v72 >= 0) {
        uint64_t v66 = v71;
      }
      else {
        uint64_t v66 = *(_BYTE **)v71;
      }
      int v73 = 136315394;
      unint64_t v74 = v65;
      __int16 v75 = 2080;
      unint64_t v76 = v66;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v62,  16LL,  "AnalyticsLogger, at least one effort set returned did not match expectedHkBuilderId, %s, foundHkBuilderId, %s",  (const char *)&v73,  22);
      __int128 v59 = v67;
      if (v72 < 0) {
        operator delete(*(void **)v71);
      }
      if (v86 < 0) {
        operator delete(*(void **)buf);
      }
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CL WorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInt erface::EffortScoreSet> &) const",  "%s\n",  v59);
      goto LABEL_79;
    }

    v21 += 6;
  }

  while (v21 != v22);
  uint64_t v26 = (_OWORD *)*a4;
  if (!*(_BYTE *)(a3 + 48))
  {
    sub_100BEF560((unsigned __int8 *)__p, "00000000-0000-0000-0000-000000000000");
    if (sub_100BEF5A4((const unsigned __int8 *)v26 + 16, (const unsigned __int8 *)__p))
    {
      uint64_t v49 = *(void **)(a3 + 56);
      if (*(void **)(a3 + 64) != v49)
      {
        uint64_t v50 = (_OWORD *)*a4;
        __p[0] = v49;
        __int16 v51 = sub_1010555B8( (uint64_t **)a2,  (const unsigned __int8 *)v49,  (uint64_t)&unk_1012CF090,  (const unsigned __int8 **)__p);
        __int128 v52 = v50[1];
        *((_OWORD *)v51 + 3) = *v50;
        *((_OWORD *)v51 + 4) = v52;
        __int128 v53 = v50[2];
        __int128 v54 = v50[3];
        __int128 v55 = v50[5];
        *((_OWORD *)v51 + 7) = v50[4];
        *((_OWORD *)v51 + _Block_object_dispose(va, 8) = v55;
        *((_OWORD *)v51 + 5) = v53;
        *((_OWORD *)v51 + 6) = v54;
LABEL_47:
        char v28 = 1;
        return v28 & 1;
      }

      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      BOOL v60 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "AnalyticsLogger, non-multisport workout did not have an associated workout activity as expected",  (uint8_t *)__p,  2u);
      }

      if (!sub_1002921D0(115, 0))
      {
LABEL_43:
        char v28 = 0;
        return v28 & 1;
      }

      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      LOWORD(v87) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  16LL,  "AnalyticsLogger, non-multisport workout did not have an associated workout activity as expected",  &v87,  2);
      __int128 v59 = (char *)v61;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CL WorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInt erface::EffortScoreSet> &) const",  "%s\n",  v61);
    }

    else
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      __int128 v57 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_ERROR,  "AnalyticsLogger, non-multisport workout did not associate effort as expected",  (uint8_t *)__p,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_43;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      LOWORD(v87) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  16LL,  "AnalyticsLogger, non-multisport workout did not associate effort as expected",  &v87,  2);
      __int128 v59 = (char *)v58;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CL WorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInt erface::EffortScoreSet> &) const",  "%s\n",  v58);
    }

void sub_1010539F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

double sub_101053A28(uint64_t a1, uint64_t a2)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101896610);
  }
  uint64_t v3 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "AnalyticsLogger, sending analytics, %@", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896610);
    }
    int v8 = 138412290;
    uint64_t v9 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  1LL,  "AnalyticsLogger, sending analytics, %@",  &v8,  12);
    unint64_t v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWorkoutEffortAnalyticsLogger::sendAnalytics(NSDictionary * _Nonnull) const",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_101053C10;
  v7[3] = &unk_101820740;
  _DWORD v7[4] = a2;
  *(void *)&double result = AnalyticsSendEventLazy(@"com.apple.CoreMotion.Fitness.WorkoutEffort", v7).n128_u64[0];
  return result;
}

uint64_t sub_101053C10(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_101053C18()
{
  *(void *)&double v0 = objc_opt_class(&OBJC_CLASS___MCProfileConnection).n128_u64[0];
  if (v1) {
    objc_msgSend( +[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection", v0),  "isHealthDataSubmissionAllowed");
  }
}

void sub_101053C54(id a1)
{
  qword_1019347E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

unsigned __int8 *sub_101053C80(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_10010EEB0(result, a4);
    return sub_101053CEC(v6, a2, a3);
  }

  return result;
}

void sub_101053CD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_101053CEC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 1);
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      double result = sub_100BEF53C((unsigned __int8 *)(v4 + v7), (const unsigned __int8 *)(a2 + v7));
      __int128 v8 = *(_OWORD *)(a2 + v7 + 16);
      __int128 v9 = *(_OWORD *)(a2 + v7 + 32);
      *((void *)result + 6) = *(void *)(a2 + v7 + 48);
      *((_OWORD *)result + 1) = v8;
      *((_OWORD *)result + 2) = v9;
      v7 += 56LL;
    }

    while (a2 + v7 != a3);
    v4 += v7;
  }

  *((void *)v3 + 1) = v4;
  return result;
}

void sub_101053D68(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_101053D70@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = v19;
  *(_DWORD *)((char *)&v19 + *(void *)(v19 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v19 + *(void *)(v19 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v20.__loc_.__locale_ + *(void *)(v4 - 24)) = (std::locale::__imp *)2;
  unint64_t v5 = sub_10000CF44(&v19, (uint64_t)"sessionId, ", 11LL);
  sub_100BEF5DC((const unsigned __int8 *)a1, __p);
  if ((v18 & 0x80u) == 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  __int128 v8 = sub_10000CF44(v5, (uint64_t)v6, v7);
  sub_10000CF44(v8, (uint64_t)", ", 2LL);
  sub_10000CF44(&v19, (uint64_t)"startTime, ", 11LL);
  __int128 v9 = (void *)std::ostream::operator<<(*(double *)(a1 + 16));
  sub_10000CF44(v9, (uint64_t)", ", 2LL);
  sub_10000CF44(&v19, (uint64_t)"endTime, ", 9LL);
  char v10 = (void *)std::ostream::operator<<(*(double *)(a1 + 24));
  sub_10000CF44(v10, (uint64_t)", ", 2LL);
  uint64_t v11 = sub_10000CF44(&v19, (uint64_t)"workoutType, ", 13LL);
  std::string::size_type v12 = (void *)std::ostream::operator<<(v11, *(void *)(a1 + 32));
  sub_10000CF44(v12, (uint64_t)", ", 2LL);
  unsigned int v13 = sub_10000CF44(&v19, (uint64_t)"workoutLocationType, ", 21LL);
  __int128 v14 = (void *)std::ostream::operator<<(v13, *(void *)(a1 + 40));
  sub_10000CF44(v14, (uint64_t)", ", 2LL);
  __int128 v15 = sub_10000CF44(&v19, (uint64_t)"swimWorkoutLocation, ", 21LL);
  std::ostream::operator<<(v15, *(void *)(a1 + 48));
  std::stringbuf::str(a2, &v20);
  std::streambuf::~streambuf(&v20);
  return std::ios::~ios(&v21);
}

void sub_101053F84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_101053FB4(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  uint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    uint64_t v4 = (void **)a1[1];
  }

  else
  {
    unint64_t v5 = a1[4];
    unint64_t v6 = &v3[v5 / 0x24];
    uint64_t v7 = (uint64_t)*v6 + 112 * (v5 % 0x24);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x24] + 112 * ((a1[5] + v5) % 0x24);
    if (v7 != v8)
    {
      do
      {
        sub_1010540F0((uint64_t)v2, v7);
        v7 += 112LL;
        if (v7 - (void)*v6 == 4032)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }

      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      uint64_t v4 = (void **)a1[2];
    }
  }

  *uint64_t v2 = 0LL;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8LL);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }

    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 18LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 36LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    unsigned int v13 = *v3++;
    operator delete(v13);
  }

  return sub_1000EA11C((uint64_t)a1);
}

void sub_1010540F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }

void *sub_101054138(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_101896640;
  result[1] = v3;
  return result;
}

uint64_t sub_10105416C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101896640;
  a2[1] = v2;
  return result;
}

void sub_101054188(uint64_t a1, double *a2)
{
}

uint64_t sub_101054194(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1010541D0()
{
}

void *sub_1010541DC(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1[5];
  if (v5 >= a3)
  {
    unint64_t v11 = a1[4];
    uint64_t v12 = a1[1];
    unsigned int v13 = (uint64_t *)(v12 + 8 * (v11 / 0x24));
    if (a1[2] == v12) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = *v13 + 112 * (v11 % 0x24);
    }
    sub_10105467C(a2, a2 + 112 * a3, v13, v14, v16);
    return (void *)sub_10105449C((uint64_t)a1, (void *)v16[1], v16[2]);
  }

  else
  {
    uint64_t v6 = a2 + 112 * v5;
    unint64_t v7 = a1[4];
    uint64_t v8 = a1[1];
    uint64_t v9 = (uint64_t *)(v8 + 8 * (v7 / 0x24));
    if (a1[2] == v8) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = *v9 + 112 * (v7 % 0x24);
    }
    sub_10105467C(a2, v6, v9, v10, v16);
    return sub_1010542F8(a1, v6, a3 - a1[5]);
  }

void *sub_1010542F8(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1 + 5;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 36 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0LL;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  if (a3 > v10)
  {
    sub_1010549F8(a1, a3 - v10);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }

  uint64_t v12 = (void *)(v6 + 8 * (v9 / 0x24));
  if (v7 == v6) {
    unint64_t v13 = 0LL;
  }
  else {
    unint64_t v13 = *v12 + 112 * (v9 % 0x24);
  }
  std::stringbuf v20 = (void *)(v6 + 8 * (v9 / 0x24));
  unint64_t v21 = v13;
  double result = sub_101054FAC(&v20, a3);
  uint64_t v15 = v21;
  if (v13 != v21)
  {
    BOOL v16 = v20;
    do
    {
      if (v12 == v16) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = *v12 + 4032LL;
      }
      if (v13 == v17)
      {
        uint64_t v17 = v13;
      }

      else
      {
        uint64_t v18 = 0LL;
        do
        {
          double result = sub_101055060((uint64_t)v5, v13 + v18, a2 + v18);
          v18 += 112LL;
        }

        while (v13 + v18 != v17);
        a2 += v18;
      }

      *v5 += 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v17 - v13) >> 4);
      if (v12 == v16) {
        break;
      }
      unint64_t v19 = v12[1];
      ++v12;
      unint64_t v13 = v19;
    }

    while (v19 != v15);
  }

  return result;
}

void sub_101054478(_Unwind_Exception *a1)
{
  *v1 += 0x6DB6DB6DB6DB6DB7LL * (v2 >> 4);
  _Unwind_Resume(a1);
}

uint64_t sub_10105449C(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = (void *)(result + 40);
  unint64_t v5 = *(void *)(result + 32);
  unint64_t v6 = v5 + *(void *)(result + 40);
  uint64_t v7 = *(void *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  unint64_t v9 = (void *)(v7 + 8 * (v6 / 0x24));
  if (v8 == v7) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *v9 + 112 * (v6 % 0x24);
  }
  if (v10 != a3)
  {
    uint64_t v11 = (a3 - *a2) >> 4;
    uint64_t v12 = 36 * (v9 - a2) + 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v10 - *v9) >> 4) - 0x6DB6DB6DB6DB6DB7LL * v11;
    if (v12 >= 1)
    {
      unint64_t v13 = (void *)(v7 + 8 * (v5 / 0x24));
      if (v8 == v7) {
        unint64_t v14 = 0LL;
      }
      else {
        unint64_t v14 = *v13 + 112 * (v5 % 0x24);
      }
      if (a3 == v14) {
        uint64_t v15 = 0LL;
      }
      else {
        uint64_t v15 = 36 * (a2 - v13) + 0x6DB6DB6DB6DB6DB7LL * v11 - 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v14 - *v13) >> 4);
      }
      unint64_t v19 = v13;
      unint64_t v20 = v14;
      sub_101054FAC(&v19, v15);
      uint64_t v16 = v20;
      if (v20 != v10)
      {
        uint64_t v17 = v19;
        do
        {
          sub_1010540F0((uint64_t)v4, v16);
          v16 += 112LL;
          if (v16 - *v17 == 4032)
          {
            uint64_t v18 = v17[1];
            ++v17;
            uint64_t v16 = v18;
          }
        }

        while (v16 != v10);
      }

      *v4 -= v12;
      do
        double result = sub_101055544(v3, 1);
      while ((result & 1) != 0);
    }
  }

  return result;
}

void sub_10105467C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t v5 = a3;
  uint64_t v6 = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = a2;
    unint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      uint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * ((v9 - a4 + 4032) >> 4);
      if (0x6DB6DB6DB6DB6DB7LL * ((v8 - v6) >> 4) < v10) {
        uint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * ((v8 - v6) >> 4);
      }
      uint64_t v11 = sub_101054760((uint64_t)&v14, v6, v6 + 112 * v10, a4);
      if (v11 == v8) {
        break;
      }
      uint64_t v6 = v11;
      uint64_t v13 = *v5++;
      uint64_t v9 = v13;
      a4 = v13;
    }

    a4 = v12;
    if (*(v5 - 1) + 4032 == v12) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }

  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
}

uint64_t sub_101054760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0LL;
  do
  {
    uint64_t v8 = a4 + v7;
    uint64_t v9 = a2 + v7;
    __int128 v10 = *(_OWORD *)(a2 + v7);
    __int128 v11 = *(_OWORD *)(a2 + v7 + 16);
    __int128 v12 = *(_OWORD *)(a2 + v7 + 32);
    *(_BYTE *)(v8 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + v7 + 48);
    *(_OWORD *)(v8 + 16) = v11;
    *(_OWORD *)(v8 + 32) = v12;
    *(_OWORD *)uint64_t v8 = v10;
    if (a2 != a4)
    {
      sub_101054838( (unsigned __int8 **)(v8 + 56),  *(void *)(v9 + 56),  *(void *)(v9 + 64),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(v9 + 64) - *(void *)(v9 + 56)) >> 3));
      *(_DWORD *)(v8 + 80) = *(_DWORD *)(v9 + 80);
      sub_101055DA0((uint64_t **)(v8 + 88), *(void **)(v9 + 88), (void *)(a2 + 96 + v7));
    }

    v7 += 112LL;
  }

  while (a2 + v7 != v6);
  return v6;
}

unsigned __int8 *sub_101054838(unsigned __int8 **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  double result = *a1;
  if (0x6DB6DB6DB6DB6DB7LL * ((v8 - (uint64_t)result) >> 3) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if (a4 > 0x492492492492492LL) {
      sub_100007008();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x249249249249249LL) {
      unint64_t v12 = 0x492492492492492LL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_10010EEB0(a1, v12);
    uint64_t v13 = (unsigned __int8 *)a1;
    uint64_t v14 = v6;
    a3 = v5;
    return sub_101053CEC(v13, v14, a3);
  }

  uint64_t v15 = a1[1];
  if (0x6DB6DB6DB6DB6DB7LL * ((v15 - result) >> 3) < a4)
  {
    uint64_t v14 = a2 + 8 * ((v15 - result) >> 3);
    if (v15 != result)
    {
      uint64_t v16 = 8 * ((v15 - result) >> 3);
      do
      {
        __int128 v17 = *(_OWORD *)v6;
        __int128 v18 = *(_OWORD *)(v6 + 16);
        __int128 v19 = *(_OWORD *)(v6 + 32);
        *((void *)result + 6) = *(void *)(v6 + 48);
        *((_OWORD *)result + 1) = v18;
        *((_OWORD *)result + 2) = v19;
        *(_OWORD *)double result = v17;
        result += 56;
        v6 += 56LL;
        v16 -= 56LL;
      }

      while (v16);
    }

    uint64_t v13 = (unsigned __int8 *)a1;
    return sub_101053CEC(v13, v14, a3);
  }

  if (a2 == a3)
  {
    unint64_t v20 = result;
  }

  else
  {
    unint64_t v20 = result;
    do
    {
      __int128 v21 = *(_OWORD *)v6;
      __int128 v22 = *(_OWORD *)(v6 + 16);
      __int128 v23 = *(_OWORD *)(v6 + 32);
      *((void *)result + 6) = *(void *)(v6 + 48);
      *((_OWORD *)result + 1) = v22;
      *((_OWORD *)result + 2) = v23;
      *(_OWORD *)double result = v21;
      result += 56;
      v6 += 56LL;
      v20 += 56;
    }

    while (v6 != a3);
  }

  a1[1] = v20;
  return result;
}

void sub_1010549F8(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0x24) {
    unint64_t v6 = v5 / 0x24 + 1;
  }
  else {
    unint64_t v6 = v5 / 0x24;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0x24) {
    unint64_t v8 = v7 / 0x24;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0x24)
  {
    for (a1[4] = v7 - 36 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      __int128 v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          __int128 v29 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v28);
          __int128 v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            char v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)char v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          __int128 v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          __int128 v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }

          std::stringbuf v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFC0uLL);
          sub_1000EC960(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0xFC0uLL);
          sub_1000ECA74((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 35LL;
          }
          else {
            uint64_t v64 = 36LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - 36 * v8;
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              __int128 v79 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v78);
              __int128 v81 = &v79[8 * (v78 >> 2)];
              __int128 v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                unint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)unint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              __int128 v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              __int16 v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }

              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __int128 v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0LL;
      }
      uint64_t v38 = -36LL * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        __int128 v88 = operator new(0xFC0uLL);
        sub_1000ECB90(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        __int128 v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000071BC((uint64_t)v91, v48);
              __int16 v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                __int128 v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)__int128 v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              double v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }

              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          __int128 v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      __int128 v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_1000ECCA4((uint64_t)__p, v57);
      }

      __int128 v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_101054F38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101054FAC(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 + 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(result[1] - *(void *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 35 - v3;
      unint64_t v6 = &v2[-(v5 / 0x24)];
      *double result = v6;
      unint64_t v4 = *v6 + 112 * (36 * (v5 / 0x24) - v5) + 3920;
    }

    else
    {
      *double result = &v2[v3 / 0x24];
      unint64_t v4 = v2[v3 / 0x24] + 112 * (v3 % 0x24);
    }

    result[1] = v4;
  }

  return result;
}

uint64_t *sub_101055060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a3 + 32);
  char v6 = *(_BYTE *)(a3 + 48);
  *(void *)(a2 + sub_1011C52D0(v1 - 56) = 0LL;
  *(_BYTE *)(a2 + 4_Block_object_dispose(va, 8) = v6;
  *(_OWORD *)(a2 + 32) = v5;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  sub_101053C80( (unsigned __int8 *)(a2 + 56),  *(void *)(a3 + 56),  *(void *)(a3 + 64),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 3));
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  return sub_101055114((uint64_t *)(a2 + 88), (const unsigned __int8 **)(a3 + 88));
}

void sub_1010550F8(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t *sub_101055114(uint64_t *a1, const unsigned __int8 **a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_101055168(a1, *a2, a2 + 1);
  return a1;
}

void sub_101055150(_Unwind_Exception *a1)
{
}

uint64_t *sub_101055168(uint64_t *result, const unsigned __int8 *a2, const unsigned __int8 **a3)
{
  if (a2 != (const unsigned __int8 *)a3)
  {
    unint64_t v4 = a2;
    __int128 v5 = (uint64_t **)result;
    char v6 = result + 1;
    do
    {
      double result = sub_1010551EC(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      unint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = (const unsigned __int8 **)v7;
          unint64_t v7 = *(unsigned __int8 **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unint64_t v8 = (const unsigned __int8 **)*((void *)v4 + 2);
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const unsigned __int8 *)v8;
        }

        while (!v9);
      }

      unint64_t v4 = (const unsigned __int8 *)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_1010551EC(uint64_t **a1, uint64_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  char v6 = (uint64_t **)sub_10105526C(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    sub_1010553F0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000085FC(a1, (uint64_t)v10, v6, v8);
    return v8;
  }

  return result;
}

const unsigned __int8 *sub_10105526C( void *a1, uint64_t *a2, const unsigned __int8 **a3, uint64_t *a4, const unsigned __int8 *a5)
{
  uint64_t v9 = (const unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || sub_100BEF58C(a5, (const unsigned __int8 *)a2 + 32))
  {
    if ((uint64_t *)*a1 == a2)
    {
      unint64_t v12 = (const unsigned __int8 *)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 8;
      }

      else
      {
        *a3 = (const unsigned __int8 *)a2;
        return (const unsigned __int8 *)a2;
      }
    }

    uint64_t v11 = (const unsigned __int8 *)*a2;
    if (*a2)
    {
      do
      {
        unint64_t v12 = v11;
        uint64_t v11 = (const unsigned __int8 *)*((void *)v11 + 1);
      }

      while (v11);
    }

    else
    {
      uint64_t v16 = a2;
      do
      {
        unint64_t v12 = (const unsigned __int8 *)v16[2];
        BOOL v17 = *(void *)v12 == (void)v16;
        uint64_t v16 = (uint64_t *)v12;
      }

      while (v17);
    }

    return (const unsigned __int8 *)sub_10105545C((uint64_t)a1, a3, a5);
  }

  if (sub_100BEF58C((const unsigned __int8 *)a2 + 32, a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (const unsigned __int8 *)a2[1];
      do
      {
        uint64_t v15 = v14;
        unint64_t v14 = *(const unsigned __int8 **)v14;
      }

      while (v14);
    }

    else
    {
      uint64_t v18 = (const unsigned __int8 *)a2;
      do
      {
        uint64_t v15 = (const unsigned __int8 *)*((void *)v18 + 2);
        BOOL v17 = *(void *)v15 == (void)v18;
        uint64_t v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = (const unsigned __int8 *)a2;
    }

    return (const unsigned __int8 *)a4;
  }

  *a3 = (const unsigned __int8 *)a2;
  *a4 = (uint64_t)a2;
  return (const unsigned __int8 *)a4;
}

uint64_t sub_1010553F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x90uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_1010554EC((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_101055444(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void *sub_10105545C(uint64_t a1, void *a2, const unsigned __int8 *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        unint64_t v8 = (const unsigned __int8 *)(v4 + 32);
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }

uint64_t sub_1010554EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100BEF53C((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  sub_100BEF53C(v4 + 16, (const unsigned __int8 *)(a2 + 16));
  sub_100BEF53C((unsigned __int8 *)(a1 + 32), (const unsigned __int8 *)(a2 + 32));
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  return a1;
}

uint64_t sub_101055544(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 36 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x24) {
    a2 = 1;
  }
  if (v5 < 0x48) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

uint64_t *sub_1010555B8(uint64_t **a1, const unsigned __int8 *a2, uint64_t a3, const unsigned __int8 **a4)
{
  __int128 v6 = (uint64_t **)sub_10105545C((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_10105564C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000085FC(a1, v9, v6, v8);
    return v8;
  }

  return result;
}

uint64_t sub_10105564C@<X0>(uint64_t a1@<X0>, const unsigned __int8 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = operator new(0x90uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_1010556B8((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1010556A0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1010556B8(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v3 = sub_100BEF53C((unsigned __int8 *)a1, a2);
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  uint64_t v4 = v3 + 32;
  *((_OWORD *)v3 + 1) = 0u;
  sub_100BEF518(v3 + 16);
  sub_100BEF518(v4);
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = _Q0;
  *(void *)(a1 + 64) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_OWORD *)(a1 + 80) = _Q0;
  *(void *)(a1 + 96) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 104) = -1082130432;
  return a1;
}

void *sub_10105572C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1018966C0;
  result[1] = v3;
  return result;
}

uint64_t sub_101055760(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018966C0;
  a2[1] = v2;
  return result;
}

void sub_10105577C(uint64_t a1, int *a2, __int128 *a3)
{
  int v3 = *a2;
  __int128 v4 = *a3;
  uint64_t v5 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0LL;
  *((void *)a3 + 2) = 0LL;
  *(void *)a3 = 0LL;
  sub_101051DCC(*(void *)(a1 + 8), v3, (uint64_t *)&v4);
  __int128 v6 = (void **)&v4;
  sub_101055838(&v6);
}

void sub_1010557D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_101055838(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1010557F0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10105582C()
{
}

void sub_101055838(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_101055878((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_101055878(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 80LL)
  {
    __int128 v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }

  a1[1] = v2;
}

void sub_1010558C4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x24;
  unint64_t v4 = v2 - 36;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    __int128 v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      __int128 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_101055B8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101055BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100BEF53C((unsigned __int8 *)(a2 + 16), (const unsigned __int8 *)(a3 + 16));
  __int128 v6 = *(_OWORD *)(a3 + 32);
  *(_BYTE *)(a2 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v6;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + sub_1011C52D0(v1 - 56) = 0LL;
  *(_OWORD *)(a2 + sub_1011C52D0(v1 - 56) = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(void *)(a3 + 64) = 0LL;
  *(void *)(a3 + 72) = 0LL;
  *(void *)(a3 + sub_1011C52D0(v1 - 56) = 0LL;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = *(void *)(a3 + 88);
  int v7 = (void *)(a3 + 96);
  uint64_t v8 = *(void *)(a3 + 96);
  *(void *)(a2 + 96) = v8;
  uint64_t v9 = a2 + 96;
  uint64_t v10 = *(void *)(a3 + 104);
  *(void *)(a2 + 104) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a3 + 8_Block_object_dispose(va, 8) = v7;
    void *v7 = 0LL;
    *(void *)(a3 + 104) = 0LL;
  }

  else
  {
    *(void *)(a2 + 8_Block_object_dispose(va, 8) = v9;
  }

  return result;
}

void *sub_101055C88(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_101896750;
  result[1] = v3;
  return result;
}

uint64_t sub_101055CBC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101896750;
  a2[1] = v2;
  return result;
}

void sub_101055CD8(uint64_t a1, int *a2, __int128 *a3)
{
  int v3 = *a2;
  __int128 v5 = *a3;
  unint64_t v4 = (void *)v5;
  uint64_t v6 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0LL;
  *((void *)a3 + 2) = 0LL;
  *(void *)a3 = 0LL;
  sub_101052850(*(void *)(a1 + 8), v3, &v5);
  if (v4) {
    operator delete(v4);
  }
}

void sub_101055D3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101055D58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_101055D94()
{
}

uint64_t **sub_101055DA0(uint64_t **result, void *a2, void *a3)
{
  __int128 v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v18 = result;
    uint64_t v19 = v8;
    int64_t v20 = v8;
    if (v8)
    {
      uint64_t v19 = sub_100115560((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          __int128 v10 = *((_OWORD *)v9 + 8);
          __int128 v12 = *((_OWORD *)v9 + 5);
          __int128 v11 = *((_OWORD *)v9 + 6);
          *((_OWORD *)v8 + 7) = *((_OWORD *)v9 + 7);
          *((_OWORD *)v8 + _Block_object_dispose(va, 8) = v10;
          *((_OWORD *)v8 + 5) = v12;
          *((_OWORD *)v8 + 6) = v11;
          __int128 v13 = *((_OWORD *)v9 + 4);
          *((_OWORD *)v8 + 3) = *((_OWORD *)v9 + 3);
          *((_OWORD *)v8 + 4) = v13;
          sub_101055F18(v5, (uint64_t)v8);
          uint64_t v8 = v19;
          int64_t v20 = v19;
          if (v19) {
            uint64_t v19 = sub_100115560((uint64_t)v19);
          }
          BOOL v14 = (void *)v9[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              BOOL v14 = (void *)*v14;
            }

            while (v14);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v15 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v15);
          }

          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }

        while (a2 != a3);
      }
    }

    uint64_t result = (uint64_t **)sub_1001155B4((uint64_t)&v18);
  }

  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_101055F9C((uint64_t)v5, (uint64_t)(a2 + 4));
      uint64_t v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          uint64_t v17 = (void *)a2[2];
          BOOL v15 = *v17 == (void)a2;
          a2 = v17;
        }

        while (!v15);
      }

      a2 = v17;
    }

    while (v17 != a3);
  }

  return result;
}

void sub_101055F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_101055F18(uint64_t **a1, uint64_t a2)
{
  __int128 v5 = a1 + 1;
  unint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        __int128 v5 = (uint64_t **)v4;
        unint64_t v4 = *v5;
        uint64_t v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }

      unint64_t v4 = v5[1];
    }

    while (v4);
    uint64_t v6 = v5 + 1;
  }

  else
  {
    uint64_t v6 = a1 + 1;
  }

uint64_t *sub_101055F9C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t **)(a1 + 8);
  int v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    __int128 v5 = (const unsigned __int8 *)(v8 + 4);
    do
    {
      while (1)
      {
        unint64_t v4 = (uint64_t **)v3;
        int v3 = *v4;
        uint64_t v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }

      int v3 = v4[1];
    }

    while (v3);
    uint64_t v6 = v4 + 1;
  }

  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 8);
  }

void sub_101056030( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10105604C(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(const unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1LL;
    do
    {
      if ((sub_100BEF58C(a2, v2 + 32) & 1) == 0)
      {
        v2 += 8;
      }

      uint64_t v2 = *(const unsigned __int8 **)v2;
    }

    while (v2);
  }

  return 0LL;
}

uint64_t sub_1010560B4(uint64_t a1, char a2, int a3)
{
  if (byte_1019A0507 >= 0) {
    uint64_t v6 = (char *)&qword_1019A04F0;
  }
  else {
    uint64_t v6 = (char *)qword_1019A04F0;
  }
  sub_1010DDBC0(__p, "");
  sub_1010565AC(a1, v6, a3, (uint64_t)__p, 1, 30.0);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_101896800;
  *(void *)(a1 + 72) = off_1018968B8;
  sub_100B14CF0((void *)(a1 + 408), 0LL, 0LL);
  *(_BYTE *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 44_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = (void **)(a1 + 456);
  uint64_t v18 = a1 + 112;
  (*(void (**)(uint64_t))(v7 + 16))(a1 + 112);
  __int16 v19 = 256;
  sub_1010DDBC0(__p, "ExertionRatingSessionSummary");
  sub_101056A2C(a1, (uint64_t *)__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if ((a2 & 1) != 0)
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    uint64_t v9 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortSessionSummary, bias corrector enabled, initializing new DB",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896948);
      }
      __int16 v17 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortSessionSummary, bias corrector enabled, initializing new DB",  &v17,  2);
      BOOL v14 = (void **)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWorkoutEffortSessionSummaryDb::CLWorkoutEffortSessionSummaryDb(BOOL, BOOL)",  "%s\n",  v13);
      if (v14 != __p) {
        free(v14);
      }
    }

    std::string::operator=((std::string *)(a1 + 432), (const std::string *)&qword_1019A04F0);
    *(_BYTE *)(a1 + 424) = 1;
    sub_101056E7C(a1, (std::string::size_type *)__p);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)__p;
    *(void *)(a1 + 472) = v21;
    (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    __int128 v10 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutEffortSessionSummary, bias corrector disabled, will purge db if exists",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896948);
      }
      __int16 v17 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "CLWorkoutEffortSessionSummary, bias corrector disabled, will purge db if exists",  &v17,  2);
      uint64_t v16 = (void **)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWorkoutEffortSessionSummaryDb::CLWorkoutEffortSessionSummaryDb(BOOL, BOOL)",  "%s\n",  v15);
      if (v16 != __p) {
        free(v16);
      }
    }

    if (byte_1019A0507 >= 0) {
      __int128 v11 = (char *)&qword_1019A04F0;
    }
    else {
      __int128 v11 = (char *)qword_1019A04F0;
    }
    sub_1010DDBC0(__p, v11);
    sub_101056A2C(a1, (uint64_t *)__p);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    *(_BYTE *)(a1 + 424) = 0;
  }

  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24LL))(a1 + 112);
  return a1;
}

void sub_101056500( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_1010565AC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  __int128 v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  void *v12 = &off_101826EF8;
  *(void *)a1 = off_101896BE8;
  *(void *)(a1 + 72) = off_101896C90;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_101896BE8;
  *(void *)(a1 + 72) = off_101896C90;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 264) = 0xBFF0000000000000LL;
  *(void *)(a1 + 272) = 0xBFF0000000000000LL;
  *(void *)(a1 + 280) = 66LL;
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = xmmword_1013C5280;
  __asm { FMOV            V0.2S, #-1.0 }

  *(void *)(a1 + 312) = _D0;
  *(_DWORD *)(a1 + 320) = -1082130432;
  *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 12000;
  *(void *)(a1 + 336) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 344));
  *(void *)(a1 + 344) = &off_101826EF8;
  uint64_t v18 = *(void *)(a1 + 112);
  uint64_t v34 = a1 + 112;
  (*(void (**)(void))(v18 + 16))();
  __int16 v36 = 256;
  if (a3)
  {
    *(void *)(a1 + 264) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v34 + 24LL))(v34);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v33 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v19 = sub_1006E27E8();
  sub_100413284(v19, buf);
  uint64_t v20 = (int *)(a1 + 328);
  char v21 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 328));
  unint64_t v22 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  if ((v21 & 1) == 0) {
    *uint64_t v20 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101896CD0);
  }
  unint64_t v25 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *v20;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101896CD0);
    }
    int v29 = *v20;
    v37[0] = 67109120;
    v37[1] = v29;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v37);
    __int128 v31 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorde rDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLWork outEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

  int v27 = HIBYTE(v36);
  *(void *)(a1 + 264) = 0xBFF0000000000000LL;
  if (v27)
  {
    if ((_BYTE)v36)
    {
      pthread_mutex_unlock(v35);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_101056980( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[42] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_10105DD74(v26);
  sub_100D8A88C(a12);
  void *v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_101056A24()
{
}

void sub_101056A2C(uint64_t a1, uint64_t *a2)
{
  if ((sub_100D8A92C(a1 + 72) & 1) == 0)
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    uint64_t v8 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortSessionSummary, DB not accessible",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortSessionSummary, DB not accessible");
LABEL_45:
    BOOL v15 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortSessionSummaryDb::deleteTableIfPresent(const std::string &)",  "%s\n",  v9);
    if (v15 != buf) {
      free(v15);
    }
    return;
  }

  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  if ((sub_1003B747C(*(void *)(a1 + 80), v4) & 1) != 0)
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    __int128 v5 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v6 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutEffortSessionSummaryDb, Dropping the old table - %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896948);
      }
      else {
        __int128 v12 = (uint64_t *)*a2;
      }
      int v16 = 136315138;
      __int16 v17 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "CLWorkoutEffortSessionSummaryDb, Dropping the old table - %s",  (const char *)&v16);
      BOOL v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortSessionSummaryDb::deleteTableIfPresent(const std::string &)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    sub_1003C0454(*(void *)(a1 + 80));
    else {
      uint64_t v7 = (uint64_t *)*a2;
    }
    sub_1003C0200(*(void *)(a1 + 80), v7);
    sub_1003C05BC(*(void *)(a1 + 80));
    return;
  }

  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101896948);
  }
  __int128 v10 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    else {
      __int128 v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v19 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortSessionSummaryDb, %s table not present",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortSessionSummaryDb, %s table not present",  &v16);
    goto LABEL_45;
  }

void sub_101056E7C(uint64_t a1@<X0>, std::string::size_type *a2@<X8>)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2 + 1;
  do
  {
    __int128 v5 = (&off_101896968)[v3];
    if (v5)
    {
      else {
        size_t v6 = a2[1];
      }
      size_t v7 = strlen((&off_101896968)[v3]);
      sub_1000392EC((uint64_t)&v26, v6 + v7);
      if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v8 = &v26;
      }
      else {
        uint64_t v8 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if (v6)
      {
        else {
          uint64_t v9 = (const void *)*a2;
        }
        memmove(v8, v9, v6);
      }

      __int128 v10 = (char *)v8 + v6;
      if (v7) {
        memmove(v10, v5, v7);
      }
      v10[v7] = 0;
      __int128 v11 = std::string::append(&v26, ", ");
      std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
      *(void *)std::string __p = v11->__r_.__value_.__l.__size_;
      *(void *)&__p[7] = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 size = v11->__r_.__value_.__s.__size_;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      *a2 = v12;
      *uint64_t v4 = *(void *)__p;
      *(std::string::size_type *)((char *)a2 + 15) = *(void *)&__p[7];
      *((_BYTE *)a2 + 23) = size;
    }

    v3 += 6LL;
  }

  while (v3 != 78);
  if (*((char *)a2 + 23) < 0)
  {
    BOOL v15 = (uint64_t *)*a2;
    uint64_t v14 = a2[1] - 1;
    a2[1] = v14;
  }

  else
  {
    uint64_t v14 = *((unsigned __int8 *)a2 + 23) - 1LL;
    *((_BYTE *)a2 + 23) = v14 & 0x7F;
    BOOL v15 = (uint64_t *)a2;
  }

  *((_BYTE *)v15 + v14) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    __int16 v17 = (uint64_t *)*a2;
    uint64_t v16 = a2[1] - 1;
    a2[1] = v16;
  }

  else
  {
    uint64_t v16 = *((unsigned __int8 *)a2 + 23) - 1LL;
    *((_BYTE *)a2 + 23) = v16 & 0x7F;
    __int16 v17 = (uint64_t *)a2;
  }

  *((_BYTE *)v17 + v16) = 0;
  else {
    size_t v18 = a2[1];
  }
  sub_1000392EC((uint64_t)&v26, v18 + 6);
  if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v19 = &v26;
  }
  else {
    uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    else {
      uint64_t v20 = (const void *)*a2;
    }
    memmove(v19, v20, v18);
  }

  strcpy((char *)v19 + v18, " from ");
  (*(void (**)(_BYTE *__return_ptr))(*(void *)a1 + 64LL))(__p);
  if (v28 >= 0) {
    char v21 = __p;
  }
  else {
    char v21 = *(const std::string::value_type **)__p;
  }
  unint64_t v22 = std::string::append(&v26, v21);
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  v29[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v24 = v22->__r_.__value_.__s.__size_;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  *a2 = v23;
  *uint64_t v4 = v29[0];
  *(std::string::size_type *)((char *)a2 + 15) = *(void *)((char *)v29 + 7);
  *((_BYTE *)a2 + 23) = v24;
  if (v28 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_101057174( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1010571C8(void *a1)
{
  a1[9] = off_101896C90;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_101896BE8;
  a1[42] = off_101826EC8;
  sub_1001B9C98(a1 + 43);
  sub_10105DD74(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_101057244(uint64_t a1)
{
  *(void *)a1 = off_101896800;
  *(void *)(a1 + 72) = off_1018968B8;
  return sub_1010571C8((void *)a1);
}

void *sub_10105729C(uint64_t a1)
{
  return sub_101057244(a1 - 72);
}

void sub_1010572A4(uint64_t a1)
{
  uint64_t v1 = sub_101057244(a1);
  operator delete(v1);
}

void sub_1010572B8(uint64_t a1)
{
  uint64_t v1 = sub_101057244(a1 - 72);
  operator delete(v1);
}

uint64_t sub_1010572D0(uint64_t a1, uint64_t a2, double a3)
{
  if (*(_BYTE *)(a1 + 424))
  {
    uint64_t v7 = a1 + 112;
    uint64_t v6 = *(void *)(a1 + 112);
    *(void *)std::string buf = a1 + 112;
    (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
    __int16 v21 = 256;
    if (*(double *)(*(void *)(a2 + 8) - 16LL) == 1.79769313e308 && sub_100D8A92C(a1 + 72))
    {
      sub_1003C0454(*(void *)(a1 + 80));
      sub_100B14CF8((uint64_t *)(a1 + 408), v19);
      if (sub_100019240(v19[0])
        && (uint64_t v8 = (sqlite3_stmt *)sub_100019240(v19[0]),
            sub_1003B7480(v8, 1, a3 - *(double *)(*(void *)(a2 + 8) - 24LL))))
      {
        uint64_t v9 = *(void *)(a1 + 80);
        __int128 v10 = (sqlite3_stmt *)sub_100019240(v19[0]);
        sub_1003BB2BC(v9, v10);
        uint64_t v11 = (*(int (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
      }

      else
      {
        uint64_t v11 = -1LL;
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      uint64_t v13 = *(void *)(a1 + 80);
      else {
        uint64_t v14 = *(void *)(v13 + 88);
      }
      sub_1003C1EC0(v13, v14);
      uint64_t v15 = v19[0];
      v19[0] = 0LL;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
      }
    }

    else
    {
      uint64_t v11 = -1LL;
    }

    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    std::string::size_type v12 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896948);
      }
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled",  v19,  2);
      size_t v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLWorkoutEffortSessionSummaryDb::aggregateRecords(const CLAggregationRules &, CFAbsoluteTime)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    return -1LL;
  }

  return v11;
}

void sub_101057584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1010575D4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 424))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    return sub_1010572D0(a1, a2, Current);
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    uint64_t v6 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896948);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled",  v9,  2);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual long CLWorkoutEffortSessionSummaryDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }

    return -1LL;
  }

uint64_t sub_1010577A4(uint64_t a1, uint64_t a2)
{
  return sub_1010575D4(a1 - 72, a2);
}

uint64_t sub_1010577AC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 424))
  {
    uint64_t v3 = a1 + 112;
    uint64_t v2 = *(void *)(a1 + 112);
    uint64_t v4 = a1 + 72;
    uint64_t v22 = a1 + 112;
    (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
    __int16 v23 = 256;
    if (!sub_100D8A92C(v4))
    {
LABEL_31:
      uint64_t v9 = 0xFFFFFFFFLL;
LABEL_32:
      (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
      return v9;
    }

    sub_10000CE18((uint64_t)buf);
    __int128 v5 = sub_10000CF44(&v25, (uint64_t)"SELECT COUNT(*) FROM ", 21LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, uint64_t))(*(void *)a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    sub_10000CF44(v5, (uint64_t)p_p, size);
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v9 = (uint64_t)&__p;
    std::stringbuf::str(&__p, &v26);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v10 = &__p;
    }
    else {
      __int128 v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v8, (char *)v10, &v20);
    uint64_t v11 = v20;
    uint64_t v20 = 0LL;
    if (sub_100019240(v11) && (std::string::size_type v12 = (sqlite3_stmt *)sub_100019240(v11), sqlite3_step(v12) == 100))
    {
      uint64_t v13 = (sqlite3_stmt *)sub_100019240(v11);
      uint64_t v9 = sqlite3_column_int(v13, 0);
      char v14 = 0;
      if (!v11)
      {
LABEL_28:
        uint64_t v25 = v16;
        std::streambuf::~streambuf(&v26);
        std::ios::~ios(&v27);
        if ((v14 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
    }

    else
    {
      char v14 = 1;
      if (!v11) {
        goto LABEL_28;
      }
    }

    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    goto LABEL_28;
  }

  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101896948);
  }
  uint64_t v15 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    LOWORD(v22) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled",  &v22,  2);
    uint64_t v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual int CLWorkoutEffortSessionSummaryDb::getNumberOfRecords() const",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  return 0xFFFFFFFFLL;
}

void sub_101057B10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  sub_1011F8850((uint64_t)&a22);
  sub_1011C52D0((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_101057B94(uint64_t a1)
{
  return sub_1010577AC(a1 - 72);
}

void sub_101057B9C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 424))
  {
    sub_101057D54(a1, a2);
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    uint64_t v2 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896948);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled",  v5,  2);
      uint64_t v4 = (uint8_t *)v3;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortSessionSummaryDb::insertRecord(const CLWorkoutEffortSessionSummaryDbRow &)",  "%s\n",  v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

uint64_t sub_101057D54(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v23[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v24 = 256;
  v23[0] = *(double *)(a2 + 40);
  if (sub_100D8AB44(v6, v23))
  {
    if (sub_100D8A92C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80LL))(a1, a2, 0LL);
    }

    else if (!*(_BYTE *)(a1 + 128))
    {
      std::string::size_type v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 328))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_10105DEDC(a1 + 176, 1);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101896CD0);
        }
        char v14 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Maximum number of entries exceeded, throwing out oldest entry.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101896CD0);
          }
          v22[0] = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Maximum number of entries exceeded, throwing out oldest entry.",  v22,  2);
          uint64_t v20 = (uint8_t *)v19;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::addSus pectRecord(const T &) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataP rotectionPolicy]",  "%s\n",  v19);
          if (v20 != buf) {
            free(v20);
          }
        }
      }

      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101896CF0);
      }
      uint64_t v15 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Buffer was added to since db was inaccesible.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101896CF0);
        }
        v22[0] = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Buffer was added to since db was inaccesible.",  v22,  v21);
        size_t v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::addSuspe ctRecord(const T &) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      __n128 v7 = sub_10105DE08(v12, (__int128 *)a2);
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101896CD0);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      char v28 = "";
      __int16 v29 = 1026;
      int v30 = (int)v23[0];
      __int16 v31 = 2082;
      __int128 v32 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CL database error, record contains invalid time, invalid time:%{public}d, name: %{public, location:escape_only}s}",  buf,  0x22u);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101896CD0);
      }
    }

    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      uint64_t v11 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      char v28 = "";
      __int16 v29 = 1026;
      int v30 = (int)v23[0];
      __int16 v31 = 2082;
      __int128 v32 = v11;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CL database error, record contains invalid time",  "{msg%{public}.0s:CL database error, record contains invalid time, invalid time:%{public}d, name: %{public, location:escape_only}s}",  buf,  0x22u);
    }
  }

  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24LL))(v5, v7);
}

void sub_10105824C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_101058278(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  if (sub_100019240(*a1))
  {
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
    *(void *)a2 = sqlite3_column_int64(v6, 0);
    __n128 v7 = (sqlite3_stmt *)sub_100019240(*a1);
    *(double *)(a2 + 40) = sqlite3_column_double(v7, 1);
    uint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
    *(double *)(a2 + 4_Block_object_dispose(va, 8) = sqlite3_column_double(v8, 2);
    uint64_t v9 = (sqlite3_stmt *)sub_100019240(*a1);
    __int128 v10 = sqlite3_column_text(v9, 3);
    uuid_parse((const char *)v10, (unsigned __int8 *)(a2 + 8));
    uint64_t v11 = (sqlite3_stmt *)sub_100019240(*a1);
    std::string::size_type v12 = sqlite3_column_text(v11, 4);
    uuid_parse((const char *)v12, (unsigned __int8 *)(a2 + 24));
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(*a1);
    *(void *)(a2 + sub_1011C52D0(v1 - 56) = sqlite3_column_int(v13, 5);
    char v14 = (sqlite3_stmt *)sub_100019240(*a1);
    *(void *)(a2 + 64) = sqlite3_column_int(v14, 6);
    uint64_t v15 = (sqlite3_stmt *)sub_100019240(*a1);
    *(void *)(a2 + 72) = sqlite3_column_int(v15, 7);
    uint64_t v16 = (sqlite3_stmt *)sub_100019240(*a1);
    *(double *)(a2 + 80) = sqlite3_column_double(v16, 8);
    __int16 v17 = (sqlite3_stmt *)sub_100019240(*a1);
    float v18 = sqlite3_column_double(v17, 9);
    *(float *)(a2 + 8_Block_object_dispose(va, 8) = v18;
    uint64_t v19 = (sqlite3_stmt *)sub_100019240(*a1);
    float v20 = sqlite3_column_double(v19, 10);
    *(float *)(a2 + 92) = v20;
    uint64_t v21 = (sqlite3_stmt *)sub_100019240(*a1);
    double v22 = sqlite3_column_double(v21, 11);
    uint64_t result = 0LL;
    *(float *)&double v22 = v22;
    *(_DWORD *)(a2 + 96) = LODWORD(v22);
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    __int16 v24 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Null statement passed", buf, 2u);
    }

    BOOL v25 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v25)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896948);
      }
      v28[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  16LL,  "Null statement passed",  v28,  2);
      __int16 v27 = (uint8_t *)v26;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void formatFromStatement(const CLSqliteScopedStatement &, CLWorkoutEffortSessionSummaryDbRow &)",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_101058560(uint64_t result, char **a2)
{
  if (*(_BYTE *)(result + 424))
  {
    uint64_t v3 = result;
    uint64_t v5 = result + 112;
    uint64_t v4 = *(void *)(result + 112);
    uint64_t v6 = result + 72;
    uint64_t v48 = result + 112;
    (*(void (**)(uint64_t))(v4 + 16))(result + 112);
    __int16 v49 = 256;
    if (sub_100D8A92C(v6))
    {
      a2[1] = *a2;
      else {
        size_t v7 = *(void *)(v3 + 464);
      }
      uint64_t v8 = __p;
      sub_1000392EC((uint64_t)__p, v7 + 24);
      if (v47 < 0) {
        uint64_t v8 = (void **)__p[0];
      }
      if (v7)
      {
        else {
          uint64_t v9 = *(const void **)(v3 + 456);
        }
        memmove(v8, v9, v7);
      }

      strcpy((char *)v8 + v7, " ORDER BY start_time ASC");
      if (v47 >= 0) {
        __int128 v10 = (char *)__p;
      }
      else {
        __int128 v10 = (char *)__p[0];
      }
      sub_1003C0D54(*(void *)(v3 + 80), v10, &v50);
      uint64_t v44 = v50;
      uint64_t v45 = v50;
      sub_1003C0454(*(void *)(v3 + 80));
      __asm { FMOV            V1.2D, #-1.0 }

      *(_OWORD *)&v52[8] = _Q1;
      *(_OWORD *)&v52[24] = xmmword_1013C5290;
      *(void *)&v52[40] = 2LL;
      __asm { FMOV            V0.2S, #-1.0 }

      *((void *)&v53 + 1) = _D0;
      LODWORD(v54) = -1082130432;
      while (!sub_101058278(&v45, (uint64_t)&v50))
      {
        unint64_t v17 = (unint64_t)a2[1];
        unint64_t v18 = (unint64_t)a2[2];
        if (v17 >= v18)
        {
          uint64_t v25 = 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v17 - (void)*a2) >> 3);
          unint64_t v26 = v25 + 1;
          unint64_t v27 = 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v18 - (void)*a2) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x13B13B13B13B13BLL) {
            unint64_t v28 = 0x276276276276276LL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28) {
            __int16 v29 = (char *)sub_1003F7F84((uint64_t)(a2 + 2), v28);
          }
          else {
            __int16 v29 = 0LL;
          }
          int v30 = &v29[104 * v25];
          __int128 v31 = v50;
          __int128 v32 = *(_OWORD *)v52;
          *((_OWORD *)v30 + 1) = v51;
          *((_OWORD *)v30 + 2) = v32;
          *(_OWORD *)int v30 = v31;
          __int128 v33 = *(_OWORD *)&v52[16];
          __int128 v34 = *(_OWORD *)&v52[32];
          __int128 v35 = v53;
          *((void *)v30 + 12) = v54;
          *((_OWORD *)v30 + 4) = v34;
          *((_OWORD *)v30 + 5) = v35;
          *((_OWORD *)v30 + 3) = v33;
          __int128 v37 = *a2;
          __int16 v36 = a2[1];
          uint64_t v38 = v30;
          if (v36 != *a2)
          {
            do
            {
              __int128 v39 = *(_OWORD *)(v36 - 104);
              __int128 v40 = *(_OWORD *)(v36 - 88);
              *(_OWORD *)(v38 - 72) = *(_OWORD *)(v36 - 72);
              *(_OWORD *)(v38 - 8_Block_object_dispose(va, 8) = v40;
              *(_OWORD *)(v38 - 104) = v39;
              __int128 v41 = *(_OWORD *)(v36 - 56);
              __int128 v42 = *(_OWORD *)(v36 - 40);
              __int128 v43 = *(_OWORD *)(v36 - 24);
              *((_DWORD *)v38 - 2) = *((_DWORD *)v36 - 2);
              *(_OWORD *)(v38 - 24) = v43;
              *(_OWORD *)(v38 - 40) = v42;
              *(_OWORD *)(v38 - sub_1011C52D0(v1 - 56) = v41;
              v38 -= 104;
              v36 -= 104;
            }

            while (v36 != v37);
            __int16 v36 = *a2;
          }

          __int16 v24 = v30 + 104;
          *a2 = v38;
          a2[1] = v30 + 104;
          a2[2] = &v29[104 * v28];
          if (v36) {
            operator delete(v36);
          }
        }

        else
        {
          __int128 v19 = v50;
          __int128 v20 = *(_OWORD *)v52;
          *(_OWORD *)(v17 + 16) = v51;
          *(_OWORD *)(v17 + 32) = v20;
          *(_OWORD *)unint64_t v17 = v19;
          __int128 v21 = *(_OWORD *)&v52[16];
          __int128 v22 = *(_OWORD *)&v52[32];
          __int128 v23 = v53;
          *(void *)(v17 + 96) = v54;
          *(_OWORD *)(v17 + 64) = v22;
          *(_OWORD *)(v17 + 80) = v23;
          *(_OWORD *)(v17 + 4_Block_object_dispose(va, 8) = v21;
          __int16 v24 = (char *)(v17 + 104);
        }

        a2[1] = v24;
      }

      sub_1003C05BC(*(void *)(v3 + 80));
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
      }
      if (v47 < 0) {
        operator delete(__p[0]);
      }
    }

    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  }

  return result;
}

void sub_1010588C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1011C52D0((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_101058930(uint64_t a1, __int128 **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = *(void **)(a3 + 16);
    while (1)
    {
      if (*(void **)(a3 + 8) == v5)
      {
        BOOL v7 = 1;
      }

      else
      {
        uint64_t v6 = *(void **)(a3 + 8);
        while (*v6 != *((void *)v4 + 7))
        {
          if (++v6 == v5)
          {
            uint64_t v6 = *(void **)(a3 + 16);
            break;
          }
        }

        BOOL v7 = v6 != v5;
      }

      uint64_t v4 = (__int128 *)((char *)v4 + 104);
      if (v4 == v3) {
        return;
      }
    }

    if (v4 != v3)
    {
      uint64_t v9 = (__int128 *)((char *)v4 + 104);
      if ((__int128 *)((char *)v4 + 104) == v3)
      {
        __int128 v10 = v4;
      }

      else
      {
        __int128 v10 = v4;
        do
        {
          uint64_t v11 = v9;
          unint64_t v13 = *(void **)(a3 + 8);
          std::string::size_type v12 = *(void **)(a3 + 16);
          if (v13 == v12)
          {
            BOOL v14 = 1;
          }

          else
          {
            while (*v13 != *((void *)v4 + 20))
            {
              if (++v13 == v12)
              {
                unint64_t v13 = *(void **)(a3 + 16);
                break;
              }
            }

            BOOL v14 = v13 != v12;
          }

          if (*((double *)v4 + 19) - *((double *)v4 + 18) >= *(double *)a3 && v14)
          {
            __int128 v16 = *v11;
            __int128 v17 = v11[2];
            v10[1] = v11[1];
            v10[2] = v17;
            __int128 *v10 = v16;
            __int128 v18 = v11[3];
            __int128 v19 = v11[4];
            __int128 v20 = v11[5];
            *((_DWORD *)v10 + 24) = *((_DWORD *)v11 + 24);
            _DWORD v10[4] = v19;
            _OWORD v10[5] = v20;
            v10[3] = v18;
            __int128 v10 = (__int128 *)((char *)v10 + 104);
          }

          uint64_t v9 = (__int128 *)((char *)v11 + 104);
          uint64_t v4 = v11;
        }

        while ((__int128 *)((char *)v11 + 104) != v3);
        uint64_t v3 = a2[1];
      }

      if (v10 != v3) {
        a2[1] = v10;
      }
    }
  }

uint64_t sub_101058AAC(_BYTE *a1, unsigned int a2, uint64_t a3, char **a4)
{
  if (a1[424] && (sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    a4[1] = *a4;
    uint64_t v58 = 0LL;
    __int128 v59 = 0LL;
    uint64_t v60 = 0LL;
    uint64_t v8 = (*(uint64_t (**)(_BYTE *, void **))(*(void *)a1 + 40LL))(a1, &v58);
    sub_101058930(v8, (__int128 **)&v58, a3);
    int v9 = 0;
    __int128 v10 = v59;
    v57[0] = 0LL;
    v57[1] = 0LL;
    double v56 = v57;
    while (1)
    {
      if (v10 == v58)
      {
LABEL_30:
        __int128 v39 = *a4;
        __int128 v40 = a4[1];
        unint64_t v41 = (unint64_t)(v40 - 104);
        if (*a4 != v40 && v41 > (unint64_t)v39)
        {
          unint64_t v43 = (unint64_t)(v39 + 104);
          do
          {
            __int128 v62 = *(_OWORD *)(v43 - 56);
            __int128 v63 = *(_OWORD *)(v43 - 40);
            __int128 v64 = *(_OWORD *)(v43 - 24);
            uint64_t v65 = *(void *)(v43 - 8);
            out[0] = *(_OWORD *)(v43 - 104);
            out[1] = *(_OWORD *)(v43 - 88);
            out[2] = *(_OWORD *)(v43 - 72);
            __int128 v45 = *(_OWORD *)(v41 + 16);
            __int128 v44 = *(_OWORD *)(v41 + 32);
            *(_OWORD *)(v43 - 104) = *(_OWORD *)v41;
            *(_OWORD *)(v43 - 8_Block_object_dispose(va, 8) = v45;
            *(_OWORD *)(v43 - 72) = v44;
            __int128 v47 = *(_OWORD *)(v41 + 64);
            __int128 v46 = *(_OWORD *)(v41 + 80);
            int v48 = *(_DWORD *)(v41 + 96);
            *(_OWORD *)(v43 - sub_1011C52D0(v1 - 56) = *(_OWORD *)(v41 + 48);
            *(_DWORD *)(v43 - _Block_object_dispose(va, 8) = v48;
            *(_OWORD *)(v43 - 24) = v46;
            *(_OWORD *)(v43 - 40) = v47;
            *(_OWORD *)(v41 + 32) = out[2];
            *(_OWORD *)(v41 + 16) = out[1];
            *(_OWORD *)unint64_t v41 = out[0];
            *(_DWORD *)(v41 + 96) = v65;
            *(_OWORD *)(v41 + 80) = v64;
            *(_OWORD *)(v41 + 64) = v63;
            *(_OWORD *)(v41 + 4_Block_object_dispose(va, 8) = v62;
            v41 -= 104LL;
            BOOL v49 = v43 >= v41;
            v43 += 104LL;
          }

          while (!v49);
        }

        sub_1000229D4((uint64_t)&v56, v57[0]);
        if (v58)
        {
          __int128 v59 = (const unsigned __int8 *)v58;
          operator delete(v58);
        }

        return 100LL;
      }

      uuid_unparse(v10 - 96, (char *)out);
      sub_1010DDBC0(__p, (char *)out);
      if (++v9 <= a2) {
        break;
      }
      char v11 = 0;
LABEL_26:
      if (v55 < 0)
      {
        operator delete(__p[0]);
        if ((v11 & 1) == 0) {
          goto LABEL_30;
        }
      }

      else if ((v11 & 1) == 0)
      {
        goto LABEL_30;
      }
    }

    sub_10002276C((uint64_t **)&v56, (const void **)__p, (uint64_t)__p);
LABEL_9:
    v10 -= 104;
    unint64_t v12 = (unint64_t)a4[1];
    unint64_t v13 = (unint64_t)a4[2];
    if (v12 >= v13)
    {
      uint64_t v20 = 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v12 - (void)*a4) >> 3);
      unint64_t v21 = v20 + 1;
      unint64_t v22 = 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v13 - (void)*a4) >> 3);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x13B13B13B13B13BLL) {
        unint64_t v23 = 0x276276276276276LL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23) {
        __int16 v24 = (char *)sub_1003F7F84((uint64_t)(a4 + 2), v23);
      }
      else {
        __int16 v24 = 0LL;
      }
      uint64_t v25 = &v24[104 * v20];
      __int128 v26 = *(_OWORD *)v10;
      __int128 v27 = *((_OWORD *)v10 + 2);
      *((_OWORD *)v25 + 1) = *((_OWORD *)v10 + 1);
      *((_OWORD *)v25 + 2) = v27;
      *(_OWORD *)uint64_t v25 = v26;
      __int128 v28 = *((_OWORD *)v10 + 3);
      __int128 v29 = *((_OWORD *)v10 + 4);
      __int128 v30 = *((_OWORD *)v10 + 5);
      *((void *)v25 + 12) = *((void *)v10 + 12);
      *((_OWORD *)v25 + 4) = v29;
      *((_OWORD *)v25 + 5) = v30;
      *((_OWORD *)v25 + 3) = v28;
      __int128 v32 = *a4;
      __int128 v31 = a4[1];
      __int128 v33 = v25;
      if (v31 != *a4)
      {
        do
        {
          __int128 v34 = *(_OWORD *)(v31 - 104);
          __int128 v35 = *(_OWORD *)(v31 - 88);
          *(_OWORD *)(v33 - 72) = *(_OWORD *)(v31 - 72);
          *(_OWORD *)(v33 - 8_Block_object_dispose(va, 8) = v35;
          *(_OWORD *)(v33 - 104) = v34;
          __int128 v36 = *(_OWORD *)(v31 - 56);
          __int128 v37 = *(_OWORD *)(v31 - 40);
          __int128 v38 = *(_OWORD *)(v31 - 24);
          *((_DWORD *)v33 - 2) = *((_DWORD *)v31 - 2);
          *(_OWORD *)(v33 - 24) = v38;
          *(_OWORD *)(v33 - 40) = v37;
          *(_OWORD *)(v33 - sub_1011C52D0(v1 - 56) = v36;
          v33 -= 104;
          v31 -= 104;
        }

        while (v31 != v32);
        __int128 v31 = *a4;
      }

      __int128 v19 = v25 + 104;
      *a4 = v33;
      a4[1] = v25 + 104;
      a4[2] = &v24[104 * v23];
      if (v31) {
        operator delete(v31);
      }
    }

    else
    {
      __int128 v14 = *(_OWORD *)v10;
      __int128 v15 = *((_OWORD *)v10 + 2);
      *(_OWORD *)(v12 + 16) = *((_OWORD *)v10 + 1);
      *(_OWORD *)(v12 + 32) = v15;
      *(_OWORD *)unint64_t v12 = v14;
      __int128 v16 = *((_OWORD *)v10 + 3);
      __int128 v17 = *((_OWORD *)v10 + 4);
      __int128 v18 = *((_OWORD *)v10 + 5);
      *(void *)(v12 + 96) = *((void *)v10 + 12);
      *(_OWORD *)(v12 + 64) = v17;
      *(_OWORD *)(v12 + 80) = v18;
      *(_OWORD *)(v12 + 4_Block_object_dispose(va, 8) = v16;
      __int128 v19 = (char *)(v12 + 104);
    }

    a4[1] = v19;
    char v11 = 1;
    goto LABEL_26;
  }

  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101896948);
  }
  __int128 v51 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(out[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortSessionSummary, DB not enabled or accessible",  (uint8_t *)out,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(out, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    LOWORD(v5_Block_object_dispose(va, 8) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  out,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortSessionSummary, DB not enabled or accessible",  &v58,  2);
    __int128 v53 = (char *)v52;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLWorkoutEffortSessionSummaryDb::getLastNSessions(unsigned int, const CLWorkoutEffortSessionSummaryDb::Que ryRules &, std::vector<CLWorkoutEffortSessionSummaryDbRow> &) const",  "%s\n",  v52);
  }

  return 109LL;
}

void sub_101058FA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101058FF8(uint64_t result)
{
  if (*(_BYTE *)(result + 424))
  {
    uint64_t v1 = (void *)result;
    uint64_t result = sub_1003C1048(*(void *)(result + 80));
    if ((_DWORD)result)
    {
      sub_101059218((uint64_t)v1);
      uint64_t v2 = v1[10];
      (*(void (**)(void **__return_ptr, void *))(*v1 + 64LL))(__p, v1);
      if (v14 >= 0) {
        uint64_t v3 = (char *)__p;
      }
      else {
        uint64_t v3 = (char *)__p[0];
      }
      sub_1003B59A0(v2, v3, (const char **)&off_101896968, (const std::string::value_type **)&off_1019930D0, 0);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      sub_10000CE18((uint64_t)__p);
      uint64_t v4 = sub_10000CF44(&v14, (uint64_t)"DELETE FROM ", 12LL);
      uint64_t v5 = &v12;
      (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*v1 + 64LL))(&v12, v1);
      if ((v12.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v5 = (std::stringbuf::string_type *)v12.__r_.__value_.__r.__words[0];
      }
      size_t v6 = strlen((const char *)v5);
      BOOL v7 = sub_10000CF44(v4, (uint64_t)v5, v6);
      sub_10000CF44(v7, (uint64_t)" WHERE start_time < ?", 21LL);
      uint64_t v8 = v1[10];
      std::stringbuf::str(&v12, &v15);
      if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v9 = &v12;
      }
      else {
        int v9 = (std::stringbuf::string_type *)v12.__r_.__value_.__r.__words[0];
      }
      v1[51] = sub_1003BF158(v8, (char *)v9);
      v1[52] = v10;
      *(void **)((char *)__p
      uint64_t v14 = v11;
      std::streambuf::~streambuf(&v15);
      return std::ios::~ios(&v16);
    }
  }

  return result;
}

void sub_1010591C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_101059218(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 424)) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 80);
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 64LL))(__p);
  if (v54 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  int v4 = sub_1003B747C(v2, v3);
  int v5 = v4;
  if (SHIBYTE(v54) < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
  }

  else if (!v4)
  {
    return;
  }

  uint64_t v6 = 0LL;
  int v7 = 0;
  uint64_t v11 = "workout_type";
  do
  {
    __int128 v57 = v11;
    int v58 = 5;
    __int16 v59 = 0;
    char v60 = 0;
    char v61 = 0;
    uint64_t v12 = *(void *)(a1 + 80);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 64LL))(__p, a1);
    if (v54 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    char v14 = sub_1003BC790(v12, (const char *)v13, v11, (uint64_t)&v57);
    char v15 = v14;
    if (SHIBYTE(v54) < 0)
    {
      operator delete(__p[0]);
      if ((v15 & 1) != 0) {
        goto LABEL_50;
      }
    }

    else if ((v14 & 1) != 0)
    {
      goto LABEL_50;
    }

    sub_1003C0454(*(void *)(a1 + 80));
    sub_10000CE18((uint64_t)__p);
    uint64_t v16 = sub_10000CF44(&v54, (uint64_t)"ALTER TABLE ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, uint64_t))(*(void *)a1 + 64LL))(&v50, a1);
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v17 = &v50;
    }
    else {
      __int128 v17 = (std::stringbuf::string_type *)v50.__r_.__value_.__r.__words[0];
    }
    size_t v18 = strlen((const char *)v17);
    __int128 v19 = sub_10000CF44(v16, (uint64_t)v17, v18);
    uint64_t v20 = sub_10000CF44(v19, (uint64_t)" ADD COLUMN ", 12LL);
    size_t v21 = strlen(v11);
    unint64_t v22 = sub_10000CF44(v20, (uint64_t)v11, v21);
    unint64_t v23 = sub_10000CF44(v22, (uint64_t)" ", 1LL);
    __int16 v24 = (const char *)sub_1003BCC40((int)(&off_101896968)[v6 + 31]);
    size_t v25 = strlen(v24);
    __int128 v26 = sub_10000CF44(v23, (uint64_t)v24, v25);
    sub_10000CF44(v26, (uint64_t)";", 1LL);
    uint64_t v27 = *(void *)(a1 + 80);
    std::stringbuf::str(&v50, &v55);
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v28 = &v50;
    }
    else {
      __int128 v28 = (std::stringbuf::string_type *)v50.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v27, (char *)v28, &v49);
    uint64_t v29 = v49.__r_.__value_.__r.__words[0];
    v49.__r_.__value_.__r.__words[0] = 0LL;
    if (sub_100019240(v29))
    {
      uint64_t v30 = *(void *)(a1 + 80);
      __int128 v31 = (sqlite3_stmt *)sub_100019240(v29);
      sub_1003BB2BC(v30, v31);
    }

    sub_10000CE18((uint64_t)&v50);
    __int128 v32 = sub_10000CF44(&v50.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, uint64_t))(*(void *)a1 + 64LL))(&v49, a1);
    if ((v49.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v33 = &v49;
    }
    else {
      __int128 v33 = (std::stringbuf::string_type *)v49.__r_.__value_.__r.__words[0];
    }
    size_t v34 = strlen((const char *)v33);
    __int128 v35 = sub_10000CF44(v32, (uint64_t)v33, v34);
    __int128 v36 = sub_10000CF44(v35, (uint64_t)" SET ", 5LL);
    size_t v37 = strlen(v11);
    __int128 v38 = sub_10000CF44(v36, (uint64_t)v11, v37);
    sub_10000CF44(v38, (uint64_t)" = 0;", 5LL);
    uint64_t v39 = *(void *)(a1 + 80);
    std::stringbuf::str(&v49, &v51);
    if ((v49.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v40 = &v49;
    }
    else {
      __int128 v40 = (std::stringbuf::string_type *)v49.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v39, (char *)v40, &v48);
    uint64_t v41 = v48;
    uint64_t v48 = 0LL;
    if (sub_100019240(v41))
    {
      uint64_t v42 = *(void *)(a1 + 80);
      unint64_t v43 = (sqlite3_stmt *)sub_100019240(v41);
      sub_1003BB2BC(v42, v43);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    if (v41) {
      (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
    }
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + *(v8 - 3)) = (std::string::size_type)v10;
    v50.__r_.__value_.__l.__cap_ = v9;
    std::streambuf::~streambuf(&v51);
    std::ios::~ios(&v52);
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
    __p[0] = v8;
    *(void **)((char *)__p + *(v8 - 3)) = v10;
    int64_t v54 = v9;
    std::streambuf::~streambuf(&v55);
    std::ios::~ios(&v56);
    int v7 = 1;
LABEL_50:
    uint64_t v11 = (&off_101896968)[v6 + 36];
    v6 += 6LL;
  }

  while (v6 != 42);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 64LL))(__p, a1);
  if (v54 >= 0) {
    __int128 v44 = (char *)__p;
  }
  else {
    __int128 v44 = (char *)__p[0];
  }
  int v45 = sub_10105A4F0(a1, v44, (const char **)&off_101896968, (const std::string::value_type **)&off_1019930D0);
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  if (((v7 | v45) & 1) != 0)
  {
    uint64_t v46 = *(void *)(a1 + 80);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 64LL))(__p, a1);
    if (v54 >= 0) {
      __int128 v47 = (char *)__p;
    }
    else {
      __int128 v47 = (char *)__p[0];
    }
    sub_1003BF200(v46, v47);
    if (SHIBYTE(v54) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_101059788( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101059854(uint64_t result)
{
  if (*(_BYTE *)(result + 424))
  {
    uint64_t v1 = (void *)result;
    uint64_t v3 = result + 112;
    uint64_t v2 = *(void *)(result + 112);
    uint64_t v4 = result + 72;
    v21[19] = result + 112;
    (*(void (**)(uint64_t))(v2 + 16))(result + 112);
    __int16 v22 = 256;
    if (sub_100D8A92C(v4))
    {
      sub_10000CE18((uint64_t)v18);
      int v5 = sub_10000CF44(&v19, (uint64_t)"DELETE FROM ", 12LL);
      p_p = &__p;
      (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*v1 + 64LL))(&__p, v1);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      size_t v7 = strlen((const char *)p_p);
      sub_10000CF44(v5, (uint64_t)p_p, v7);
      uint64_t v8 = v1[10];
      std::stringbuf::str(&__p, &v20);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v9 = &__p;
      }
      else {
        std::string::size_type v9 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(v8, (char *)v9, &v16);
      uint64_t v10 = v16;
      uint64_t v16 = 0LL;
      if (sub_100019240(v10))
      {
        uint64_t v11 = v1[10];
        uint64_t v12 = (sqlite3_stmt *)sub_100019240(v10);
        sub_1003BB2BC(v11, v12);
        uint64_t v13 = v1[10];
        else {
          uint64_t v14 = *(void *)(v13 + 88);
        }
        sub_1003C1EC0(v13, v14);
      }

      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
      }
      *(void *)((char *)v18
      uint64_t v19 = v15;
      std::streambuf::~streambuf(&v20);
      std::ios::~ios(v21);
    }

    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }

  return result;
}

void sub_101059A40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a16);
  sub_1011C52D0(v16 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_101059AAC(uint64_t a1)
{
  return sub_101059854(a1 - 72);
}

void sub_101059ABC(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 424))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    __int128 v26 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled",  (uint8_t *)&__p,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    *(_WORD *)__int128 v38 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled",  v38,  2);
    __int128 v28 = (std::stringbuf::string_type *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWorkoutEffortSessionSummaryDb::insertRecordUL(const CLWorkoutEffortSessionSummaryDbRow &, BOOL)",  "%s\n",  v27);
LABEL_52:
    if (v28 != &__p) {
      free(v28);
    }
    return;
  }

  uuid_unparse((const unsigned __int8 *)(a2 + 8), out);
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    uuid_unparse((const unsigned __int8 *)(a2 + 24), __s);
    sub_10000CE18((uint64_t)v38);
    uint64_t v4 = sub_10000CF44(&v40[2], (uint64_t)"INSERT INTO ", 12LL);
    p_p = &__p;
    (*(void (**)(std::stringbuf::string_type *__return_ptr, uint64_t))(*(void *)a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    size_t v6 = strlen((const char *)p_p);
    size_t v7 = sub_10000CF44(v4, (uint64_t)p_p, v6);
    sub_10000CF44( v7,  (uint64_t)"(start_time, end_time, session_id, overview_id, workout_type, workout_location, swim_location, hr_max, es timated_workout_effort, estimated_workout_effort_pre_bias_correction, user_effort_response) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  237LL);
    uint64_t v8 = *(void *)(a1 + 80);
    std::stringbuf::str(&__p, &v41);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v9 = &__p;
    }
    else {
      std::string::size_type v9 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v8, (char *)v9, v37);
    uint64_t v10 = v37[0];
    v37[0] = 0LL;
    if (!sub_100019240(v10)) {
      goto LABEL_25;
    }
    uint64_t v11 = (sqlite3_stmt *)sub_100019240(v10);
    uint64_t v12 = (sqlite3_stmt *)sub_100019240(v10);
    uint64_t v13 = (sqlite3_stmt *)sub_100019240(v10);
    if (!sub_1003BC1F0(v13, 3, out)) {
      goto LABEL_25;
    }
    uint64_t v14 = (sqlite3_stmt *)sub_100019240(v10);
    if (!sub_1003BC1F0(v14, 4, __s)) {
      goto LABEL_25;
    }
    uint64_t v15 = (sqlite3_stmt *)sub_100019240(v10);
    if (!sub_1003C28BC(v15, 5, *(_DWORD *)(a2 + 56))) {
      goto LABEL_25;
    }
    uint64_t v16 = (sqlite3_stmt *)sub_100019240(v10);
    if (!sub_1003C28BC(v16, 6, *(_DWORD *)(a2 + 64))
      || (__int128 v17 = (sqlite3_stmt *)sub_100019240(v10), !sub_1003C28BC(v17, 7, *(_DWORD *)(a2 + 72)))
      || (size_t v18 = (sqlite3_stmt *)sub_100019240(v10), !sub_1003B7480(v18, 8, *(double *)(a2 + 80)))
      || (uint64_t v19 = (sqlite3_stmt *)sub_100019240(v10), !sub_1003B7480(v19, 9, *(float *)(a2 + 88)))
      || (std::stringbuf v20 = (sqlite3_stmt *)sub_100019240(v10), !sub_1003B7480(v20, 10, *(float *)(a2 + 92)))
      || (size_t v21 = (sqlite3_stmt *)sub_100019240(v10), !sub_1003B7480(v21, 11, *(float *)(a2 + 96)))
      || (uint64_t v22 = *(void *)(a1 + 80), v23 = (sqlite3_stmt *)sub_100019240(v10), !sub_1003BB2BC(v22, v23)))
    {
LABEL_25:
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896948);
      }
      __int16 v24 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "CLWorkoutEffortSessionSummary, unable to insert record.",  (uint8_t *)&__p,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896948);
        }
        LOWORD(v37[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  17LL,  "CLWorkoutEffortSessionSummary, unable to insert record.",  v37,  2);
        __int128 v36 = (std::stringbuf::string_type *)v35;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLWorkoutEffortSessionSummaryDb::insertRecordUL(const CLWorkoutEffortSessionSummaryDbRow &, BOOL)",  "%s\n",  v35);
        if (v36 != &__p) {
          free(v36);
        }
      }
    }

    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
    *(void *)&v40[2] = v25;
    std::streambuf::~streambuf(&v41);
    std::ios::~ios(&v42);
    return;
  }

  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101896948);
  }
  uint64_t v29 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v30 = *(void *)(a2 + 40);
    std::string::size_type v31 = *(void *)(a2 + 48);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134349570;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v30;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v31;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2082;
    uint64_t v46 = out;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "CLWorkoutEffortSessionSummary, database isn't available for entry with startTime, %{public}f, endTime, %{public}f, sessionId, %{public}s",  (uint8_t *)&__p,  0x20u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    uint64_t v32 = *(void *)(a2 + 40);
    uint64_t v33 = *(void *)(a2 + 48);
    *(_DWORD *)__int128 v38 = 134349570;
    *(void *)&v38[4] = v32;
    __int16 v39 = 2050;
    *(void *)__int128 v40 = v33;
    *(_WORD *)&v40[8] = 2082;
    v41.__vftable = (std::stringbuf_vtbl *)out;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  16LL,  "CLWorkoutEffortSessionSummary, database isn't available for entry with startTime, %{public}f, endTime, %{public}f, sessionId, %{public}s",  v38,  32);
    __int128 v28 = (std::stringbuf::string_type *)v34;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLWorkoutEffortSessionSummaryDb::insertRecordUL(const CLWorkoutEffortSessionSummaryDbRow &, BOOL)",  "%s\n",  v34);
    goto LABEL_52;
  }

void sub_10105A1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  sub_1011F8850((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10105A20C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120LL))(a1, a2, 0LL);
}

uint64_t sub_10105A21C()
{
  return 0LL;
}

uint64_t sub_10105A224(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 424))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    uint64_t v10 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896948);
      }
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled",  v15,  2);
      uint64_t v13 = (void **)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLActivityDB::ActivityCode CLWorkoutEffortSessionSummaryDb::getMostRecentRecordUL(CLWorkoutEffortSession SummaryDbRow &) const",  "%s\n",  v12);
      if (v13 != __p) {
        free(v13);
      }
    }

    return 2LL;
  }

  else {
    size_t v4 = *(void *)(a1 + 464);
  }
  uint64_t v5 = __p;
  sub_1000392EC((uint64_t)__p, v4 + 25);
  if (v17 < 0) {
    uint64_t v5 = (void **)__p[0];
  }
  if (v4)
  {
    else {
      size_t v6 = *(const void **)(a1 + 456);
    }
    memmove(v5, v6, v4);
  }

  strcpy((char *)v5 + v4, " ORDER BY id DESC LIMIT 1");
  if (v17 >= 0) {
    size_t v7 = (char *)__p;
  }
  else {
    size_t v7 = (char *)__p[0];
  }
  sub_1003C0D54(*(void *)(a1 + 80), v7, &v14);
  uint64_t v8 = v14;
  v15[0] = v14;
  uint64_t v9 = sub_101058278(v15, a2);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  return v9;
}

void sub_10105A4B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10105A4F0(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101896CD0);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101896CD0);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      __int128 v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbC onstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLWorkoutEffort::SessionSumma ry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)uint64_t v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    uint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      uint64_t v16 = v143;
    }
    else {
      uint64_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    size_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      size_t v21 = &__p;
    }
    else {
      size_t v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    uint64_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    __int128 v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      __int128 v28 = v143;
    }
    else {
      __int128 v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    std::string::size_type v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v34 = &v139;
    }
    else {
      size_t v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    __int128 v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::stringbuf v41 = &__p;
    }
    else {
      std::stringbuf v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    uint64_t v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v47 = &__p;
      }
      else {
        __int128 v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      uint64_t v48 = v143;
    }
    else {
      uint64_t v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    std::stringbuf::string_type v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int64_t v54 = buf;
    }
    else {
      int64_t v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    uint64_t v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    int v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v60 = buf;
    }
    else {
      char v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int128 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v69 = &__p;
    }
    else {
      uint64_t v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    uint64_t v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v75 = &__p;
      }
      else {
        __int16 v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    int64_t v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      __int128 v79 = &__p;
    }
    else {
      __int128 v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    uint64_t v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v85 = &__p;
      }
      else {
        unint64_t v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      uint64_t v86 = v143;
    }
    else {
      uint64_t v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    __int128 v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v95 = &__p;
    }
    else {
      uint64_t v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    uint64_t v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v103 = &__p;
        }
        else {
          uint64_t v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        __int128 v104 = v141;
      }
      else {
        __int128 v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      __int128 v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v114 = buf;
      }
      else {
        uint64_t v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      uint64_t v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v121 = &__p;
      }
      else {
        __int128 v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      __int128 v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101896CD0);
      }
      __int128 v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101896CD0);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        uint64_t v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::migrateD bConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLWorkoutEffort::SessionS ummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101896CD0);
      }
      __int128 v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101896CD0);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        __int128 v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::migrateD bConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLWorkoutEffort::SessionS ummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_10105B688( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10105B9A8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 424))
  {
    uint64_t v5 = a1 + 112;
    uint64_t v4 = *(void *)(a1 + 112);
    uint64_t v6 = a1 + 72;
    uint64_t v26 = a1 + 112;
    (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
    __int16 v27 = 256;
    if (sub_100D8A92C(v6))
    {
      uuid_unparse((const unsigned __int8 *)(a2 + 8), out);
      sub_10000CE18((uint64_t)buf);
      size_t v7 = sub_10000CF44(&v30, (uint64_t)"UPDATE ", 7LL);
      (*(void (**)(std::stringbuf::string_type *__return_ptr, uint64_t))(*(void *)a1 + 64LL))(&__p, a1);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = __p.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = __p.__r_.__value_.__l.__size_;
      }
      __int128 v10 = sub_10000CF44(v7, (uint64_t)p_p, size);
      sub_10000CF44(v10, (uint64_t)" SET user_effort_response = ? where session_id = ?;", 51LL);
      uint64_t v11 = *(void *)(a1 + 80);
      std::stringbuf::str(&__p, &v31);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v12 = &__p;
      }
      else {
        __int128 v12 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(v11, (char *)v12, &v24);
      uint64_t v13 = v24;
      uint64_t v24 = 0LL;
      if (sub_100019240(v13))
      {
        uint64_t v14 = (sqlite3_stmt *)sub_100019240(v13);
        if (sub_1003B7480(v14, 1, *(float *)(a2 + 96)))
        {
          uint64_t v15 = (sqlite3_stmt *)sub_100019240(v13);
          if (sub_1003BC1F0(v15, 2, out))
          {
            uint64_t v16 = *(void *)(a1 + 80);
            std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v13);
            if (sub_1003BB2BC(v16, v17))
            {
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
              }
              sub_1011F8850((uint64_t)buf);
              uint64_t v18 = 1LL;
              goto LABEL_35;
            }
          }
        }
      }

      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
      }
      uint64_t v30 = v20;
      std::streambuf::~streambuf(&v31);
      std::ios::~ios(&v32);
    }

    uint64_t v18 = 0LL;
LABEL_35:
    (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
    return v18;
  }

  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101896948);
  }
  std::string::size_type v19 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101896948);
    }
    *(_WORD *)uuid_string_t out = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled",  out,  2);
    int v23 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutEffortSessionSummaryDb::updateUserEnteredWorkoutEffort(const CLWorkoutEffortSessionSummaryDbRow)",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

  return 0LL;
}

void sub_10105BD64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a28);
  sub_1011C52D0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10105BDE8(void *a1, void **a2, double a3, double a4)
{
  uint64_t v8 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v56);
  if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    if (HIBYTE(v57)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_101281F00(v8);
    __break(1u);
  }

  __int128 v51 = v56[1];
  operator delete(v56[0]);
  if (!v51) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v56);
  uint64_t v9 = sub_10000CF44(&v57, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 64LL))(v60, a1);
  if (v60[23] >= 0) {
    __int128 v10 = v60;
  }
  else {
    __int128 v10 = *(_BYTE **)v60;
  }
  if (v60[23] >= 0) {
    uint64_t v11 = v60[23];
  }
  else {
    uint64_t v11 = *(void *)&v60[8];
  }
  __int128 v12 = sub_10000CF44(v9, (uint64_t)v10, v11);
  sub_10000CF44(v12, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if ((v60[23] & 0x80000000) != 0) {
    operator delete(*(void **)v60);
  }
  uint64_t v13 = a1[10];
  std::stringbuf::str((std::stringbuf::string_type *)v60, &v58);
  if (v60[23] >= 0) {
    uint64_t v14 = v60;
  }
  else {
    uint64_t v14 = *(char **)v60;
  }
  sub_1003C0D54(v13, v14, &v54);
  uint64_t v15 = v54;
  uint64_t v54 = 0LL;
  uint64_t v55 = v15;
  if ((v60[23] & 0x80000000) != 0) {
    operator delete(*(void **)v60);
  }
  uint64_t v16 = (sqlite3_stmt *)sub_100019240(v15);
  if (sub_1003B7480(v16, 1, a3) && (std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v15), sub_1003B7480(v17, 2, a4)))
  {
    __asm { FMOV            V0.2D, #-1.0 }

    *(_OWORD *)&v61[8] = _Q0;
    *(_OWORD *)&_BYTE v61[24] = xmmword_1013C5290;
    *(void *)&v61[40] = 2LL;
    __asm { FMOV            V0.2S, #-1.0 }

    *((void *)&v62 + 1) = _Q0;
    LODWORD(v63) = -1082130432;
    while (1)
    {
      uint64_t v23 = sub_1001BA11C((uint64_t)a1, &v55, (uint64_t)v60);
      if ((_DWORD)v23) {
        break;
      }
      uint64_t v24 = (char *)a2[1];
      size_t v25 = (char *)a2[2];
      if (v24 >= v25)
      {
        uint64_t v32 = 0x4EC4EC4EC4EC4EC5LL * ((v24 - (_BYTE *)*a2) >> 3);
        unint64_t v33 = v32 + 1;
        unint64_t v34 = 0x4EC4EC4EC4EC4EC5LL * ((v25 - (_BYTE *)*a2) >> 3);
        if (2 * v34 > v33) {
          unint64_t v33 = 2 * v34;
        }
        if (v34 >= 0x13B13B13B13B13BLL) {
          unint64_t v35 = 0x276276276276276LL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35) {
          __int128 v36 = (char *)sub_1003F7F84((uint64_t)(a2 + 2), v35);
        }
        else {
          __int128 v36 = 0LL;
        }
        __int128 v37 = &v36[104 * v32];
        __int128 v38 = *(_OWORD *)v60;
        __int128 v39 = *(_OWORD *)v61;
        *((_OWORD *)v37 + 1) = *(_OWORD *)&v60[16];
        *((_OWORD *)v37 + 2) = v39;
        *(_OWORD *)__int128 v37 = v38;
        __int128 v40 = *(_OWORD *)&v61[16];
        __int128 v41 = *(_OWORD *)&v61[32];
        __int128 v42 = v62;
        *((void *)v37 + 12) = v63;
        *((_OWORD *)v37 + 4) = v41;
        *((_OWORD *)v37 + 5) = v42;
        *((_OWORD *)v37 + 3) = v40;
        std::string::size_type v44 = (char *)*a2;
        int v43 = (char *)a2[1];
        size_t v45 = v37;
        if (v43 != *a2)
        {
          do
          {
            __int128 v46 = *(_OWORD *)(v43 - 104);
            __int128 v47 = *(_OWORD *)(v43 - 88);
            *(_OWORD *)(v45 - 72) = *(_OWORD *)(v43 - 72);
            *(_OWORD *)(v45 - 8_Block_object_dispose(va, 8) = v47;
            *(_OWORD *)(v45 - 104) = v46;
            __int128 v48 = *(_OWORD *)(v43 - 56);
            __int128 v49 = *(_OWORD *)(v43 - 40);
            __int128 v50 = *(_OWORD *)(v43 - 24);
            *((_DWORD *)v45 - 2) = *((_DWORD *)v43 - 2);
            *(_OWORD *)(v45 - 24) = v50;
            *(_OWORD *)(v45 - 40) = v49;
            *(_OWORD *)(v45 - sub_1011C52D0(v1 - 56) = v48;
            v45 -= 104;
            v43 -= 104;
          }

          while (v43 != v44);
          int v43 = (char *)*a2;
        }

        std::stringbuf v31 = v37 + 104;
        *a2 = v45;
        a2[1] = v37 + 104;
        a2[2] = &v36[104 * v35];
        if (v43) {
          operator delete(v43);
        }
      }

      else
      {
        __int128 v26 = *(_OWORD *)v60;
        __int128 v27 = *(_OWORD *)v61;
        *((_OWORD *)v24 + 1) = *(_OWORD *)&v60[16];
        *((_OWORD *)v24 + 2) = v27;
        *(_OWORD *)uint64_t v24 = v26;
        __int128 v28 = *(_OWORD *)&v61[16];
        __int128 v29 = *(_OWORD *)&v61[32];
        __int128 v30 = v62;
        *((void *)v24 + 12) = v63;
        *((_OWORD *)v24 + 4) = v29;
        *((_OWORD *)v24 + 5) = v30;
        *((_OWORD *)v24 + 3) = v28;
        std::stringbuf v31 = v24 + 104;
      }

      a2[1] = v31;
    }

    uint64_t v15 = v55;
  }

  else
  {
    uint64_t v23 = 2LL;
  }

  uint64_t v55 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  *(void **)((char *)v56
  uint64_t v57 = v52;
  std::streambuf::~streambuf(&v58);
  std::ios::~ios(&v59);
  return v23;
}

void sub_10105C1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10105C268(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101896CD0);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101896CD0);
      }
      size_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)std::string buf = 134349056;
        *(void *)std::string::size_type v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101896CD0);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>:: setDatabaseAccessible() [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataP rotectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101896CD0);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    uint64_t v16 = (void *)(v14 + 8 * (v13 / 0x27));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 104 * (v13 % 0x27);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x27)) + 104 * (v22 % 0x27);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101896CF0);
      }
      uint64_t v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101896CF0);
        }
        LOWORD(v41) = 0;
        LODWORD(v3_Block_object_dispose(va, 8) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        __int128 v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>:: setDatabaseAccessible() [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataP rotectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 104LL;
      if (v17 - *v16 == 4056)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101896CD0);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      std::string::size_type v19 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101896CD0);
      }
    }

    uint64_t v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      size_t v21 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 1;
  }

  __int128 v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      __int128 v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 19LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 39LL;
  }

  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v32;
LABEL_61:
  unint64_t v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_10105C9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

char *sub_10105C9E0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[455] < 0) {
    return (char *)sub_1010DD48C((_BYTE *)a2, *((void **)result + 54), *((void *)result + 55));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 27);
  *(void *)(a2 + 16) = *((void *)result + 56);
  return result;
}

__n128 sub_10105CA0C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3 = *a3;
  __int128 v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  __n128 result = (__n128)a3[3];
  __int128 v6 = a3[4];
  __int128 v7 = a3[5];
  *(_DWORD *)(a2 + 96) = *((_DWORD *)a3 + 24);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(__n128 *)(a2 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10105CA38(uint64_t a1)
{
  return sub_10105C268(a1 - 72);
}

char *sub_10105CA40@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[383] < 0) {
    return (char *)sub_1010DD48C((_BYTE *)a2, *((void **)result + 45), *((void *)result + 46));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 360);
  *(void *)(a2 + 16) = *((void *)result + 47);
  return result;
}

void sub_10105CA6C(id a1)
{
  qword_1019347E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t sub_10105CA98(uint64_t *a1, char **a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v50);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    if (HIBYTE(v51)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10128206C(v4);
    __break(1u);
  }

  __int16 v47 = v50[1];
  operator delete(v50[0]);
  if (!v47) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v50);
    __int128 v6 = sub_10000CF44(&v51, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 64))(v54, a1);
    if (v54[23] >= 0) {
      __int128 v7 = v54;
    }
    else {
      __int128 v7 = *(_BYTE **)v54;
    }
    if (v54[23] >= 0) {
      uint64_t v8 = v54[23];
    }
    else {
      uint64_t v8 = *(void *)&v54[8];
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((v54[23] & 0x80000000) != 0) {
      operator delete(*(void **)v54);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)v54, &v52);
    if (v54[23] >= 0) {
      uint64_t v11 = v54;
    }
    else {
      uint64_t v11 = *(char **)v54;
    }
    sub_1003C0D54(v10, v11, &v48);
    uint64_t v12 = v48;
    uint64_t v48 = 0LL;
    uint64_t v49 = v12;
    if ((v54[23] & 0x80000000) != 0) {
      operator delete(*(void **)v54);
    }
    sub_1003C0454(a1[10]);
    __asm { FMOV            V0.2D, #-1.0 }

    *(_OWORD *)&v55[8] = _Q0;
    *(_OWORD *)&v55[24] = xmmword_1013C5290;
    *(void *)&v55[40] = 2LL;
    __asm { FMOV            V0.2S, #-1.0 }

    *((void *)&v56 + 1) = _Q0;
    LODWORD(v57) = -1082130432;
    while (!sub_1001BA11C((uint64_t)a1, &v49, (uint64_t)v54))
    {
      unint64_t v18 = (unint64_t)a2[1];
      unint64_t v19 = (unint64_t)a2[2];
      if (v18 >= v19)
      {
        uint64_t v26 = 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v18 - (void)*a2) >> 3);
        unint64_t v27 = v26 + 1;
        unint64_t v28 = 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v19 - (void)*a2) >> 3);
        if (2 * v28 > v27) {
          unint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x13B13B13B13B13BLL) {
          unint64_t v29 = 0x276276276276276LL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29) {
          unint64_t v30 = (char *)sub_1003F7F84((uint64_t)(a2 + 2), v29);
        }
        else {
          unint64_t v30 = 0LL;
        }
        uint64_t v31 = &v30[104 * v26];
        __int128 v32 = *(_OWORD *)v54;
        __int128 v33 = *(_OWORD *)v55;
        *((_OWORD *)v31 + 1) = *(_OWORD *)&v54[16];
        *((_OWORD *)v31 + 2) = v33;
        *(_OWORD *)uint64_t v31 = v32;
        __int128 v34 = *(_OWORD *)&v55[16];
        __int128 v35 = *(_OWORD *)&v55[32];
        __int128 v36 = v56;
        *((void *)v31 + 12) = v57;
        *((_OWORD *)v31 + 4) = v35;
        *((_OWORD *)v31 + 5) = v36;
        *((_OWORD *)v31 + 3) = v34;
        uint64_t v38 = *a2;
        __int128 v37 = a2[1];
        unsigned int v39 = v31;
        if (v37 != *a2)
        {
          do
          {
            __int128 v40 = *(_OWORD *)(v37 - 104);
            __int128 v41 = *(_OWORD *)(v37 - 88);
            *(_OWORD *)(v39 - 72) = *(_OWORD *)(v37 - 72);
            *(_OWORD *)(v39 - 8_Block_object_dispose(va, 8) = v41;
            *(_OWORD *)(v39 - 104) = v40;
            __int128 v42 = *(_OWORD *)(v37 - 56);
            __int128 v43 = *(_OWORD *)(v37 - 40);
            __int128 v44 = *(_OWORD *)(v37 - 24);
            *((_DWORD *)v39 - 2) = *((_DWORD *)v37 - 2);
            *(_OWORD *)(v39 - 24) = v44;
            *(_OWORD *)(v39 - 40) = v43;
            *(_OWORD *)(v39 - sub_1011C52D0(v1 - 56) = v42;
            v39 -= 104;
            v37 -= 104;
          }

          while (v37 != v38);
          __int128 v37 = *a2;
        }

        unint64_t v25 = v31 + 104;
        *a2 = v39;
        a2[1] = v31 + 104;
        a2[2] = &v30[104 * v29];
        if (v37) {
          operator delete(v37);
        }
      }

      else
      {
        __int128 v20 = *(_OWORD *)v54;
        __int128 v21 = *(_OWORD *)v55;
        *(_OWORD *)(v18 + 16) = *(_OWORD *)&v54[16];
        *(_OWORD *)(v18 + 32) = v21;
        *(_OWORD *)unint64_t v18 = v20;
        __int128 v22 = *(_OWORD *)&v55[16];
        __int128 v23 = *(_OWORD *)&v55[32];
        __int128 v24 = v56;
        *(void *)(v18 + 96) = v57;
        *(_OWORD *)(v18 + 64) = v23;
        *(_OWORD *)(v18 + 80) = v24;
        *(_OWORD *)(v18 + 4_Block_object_dispose(va, 8) = v22;
        unint64_t v25 = (char *)(v18 + 104);
      }

      a2[1] = v25;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v45 = v49;
    uint64_t v49 = 0LL;
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
    }
    *(void **)((char *)v50
    uint64_t v51 = v46;
    std::streambuf::~streambuf(&v52);
    return std::ios::~ios(&v53);
  }

  return result;
}

void sub_10105CE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1011F8850((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_10105CED0(uint64_t a1, __int128 *a2, char a3)
{
  v41[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v41[1] = 0LL;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v41);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v51 = _Q0;
  __int128 v52 = xmmword_1013C5290;
  uint64_t v53 = 2LL;
  __asm { FMOV            V0.2S, #-1.0 }

  uint64_t v54 = _Q0;
  int v55 = -1082130432;
  int v11 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 104LL))(a1, v50);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v11)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101896CD0);
      }
      unint64_t v19 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101896CD0);
        }
        LOWORD(v42) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v42,  2);
        __int128 v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>:: sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActiv ityDB::ClassBDataProtectionPolicy]",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      goto LABEL_43;
    }

    double v12 = *((double *)a2 + 5);
    double v13 = *(double *)&v51;
    double v14 = v12 - *(double *)&v51;
    if (v14 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101896CD0);
      }
      uint64_t v15 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *((void *)a2 + 5);
        *(_DWORD *)std::string buf = 134349312;
        double v47 = *(double *)&v51;
        __int16 v48 = 2050;
        uint64_t v49 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101896CD0);
        }
        uint64_t v32 = *((void *)a2 + 5);
        int v42 = 134349312;
        double v43 = *(double *)&v51;
        __int16 v44 = 2050;
        uint64_t v45 = v32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v42,  22);
        __int128 v34 = (uint8_t *)v33;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>:: sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActiv ityDB::ClassBDataProtectionPolicy]",  "%s\n",  v33);
        if (v34 != buf) {
          free(v34);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v12 = *((double *)a2 + 5);
      double v13 = *(double *)&v51;
    }

    if (v12 < v13)
    {
      if (v13 - v12 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101896CD0);
        }
        unint64_t v17 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v18 = *((double *)a2 + 5);
          *(_DWORD *)std::string buf = 134217984;
          double v47 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101896CD0);
          }
          double v35 = *((double *)a2 + 5);
          int v42 = 134217984;
          double v43 = v35;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v42));
          __int128 v37 = (uint8_t *)v36;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy> ::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLA ctivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v36);
          if (v37 != buf) {
            free(v37);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v22 = v12 - v13;
      double v23 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v40 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_101896CD0);
        double v23 = v40;
      }

      double v24 = v22 - v23;
      unint64_t v25 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v47 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101896CD0);
        }
        int v42 = 134217984;
        double v43 = v24;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v42));
        unsigned int v39 = (uint8_t *)v38;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>:: sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActiv ityDB::ClassBDataProtectionPolicy]",  "%s\n",  v38);
        if (v39 != buf) {
          free(v39);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v24);
    }

    (*(void (**)(uint64_t, _BYTE *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, v50, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_10105D65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10105D688(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    __int128 v20 = (_Unwind_Exception *)sub_1012821D8(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  unint64_t v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    __int128 v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v11 = &__p;
    }
    else {
      int v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 40)))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_10105D8E8(void *a1, double a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_101282344(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    __int128 v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v11 = &__p;
    }
    else {
      int v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_10105DB20(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_1012824B0(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  uint64_t v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_10105DD48(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10105DD74(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 19LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 39LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    __int128 v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

__n128 sub_10105DE08(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 39 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10105DF64(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x27)) + 104 * (v7 % 0x27);
  __int128 v9 = *a2;
  __int128 v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v9;
  __n128 result = (__n128)a2[3];
  __int128 v12 = a2[4];
  __int128 v13 = a2[5];
  *(void *)(v8 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  *(__n128 *)(v8 + 4_Block_object_dispose(va, 8) = result;
  ++a1[5];
  return result;
}

uint64_t sub_10105DEDC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x27) {
    a2 = 1;
  }
  if (v2 < 0x4E) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 39LL;
  }

  return v4 ^ 1u;
}

void sub_10105DF38(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10105DF64(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x27;
  unint64_t v4 = v2 - 39;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      __int128 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10105E22C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10105E278()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1019A04F0, (void *)&_mh_execute_header);
}

float sub_10105E2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *(void *)(a2 + 4);
  float v3 = *(double *)(a2 + 168);
  int v4 = *(_DWORD *)(a2 + 12);
  float v30 = v3;
  int v31 = v4;
  int32x2_t v32 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  int v33 = *(_DWORD *)(a2 + 28);
  __int128 v34 = *(_OWORD *)(a2 + 40);
  int v5 = *(_DWORD *)(a2 + 60);
  int v6 = *(_DWORD *)(a2 + 124);
  int v7 = *(_DWORD *)(a2 + 128);
  int v35 = *(_DWORD *)(a2 + 56);
  int v36 = v6;
  int v37 = v5;
  int v38 = v7;
  int v39 = *(_DWORD *)(a2 + 184);
  uint64_t v40 = *(void *)(a2 + 192);
  int v8 = *(_DWORD *)(a2 + 224);
  int v41 = *(_DWORD *)(a2 + 200);
  int v42 = v8;
  float v9 = 0.0;
  if (sub_10104F460(*(void *)(a2 + 152)) == 5) {
    float v10 = 1.0;
  }
  else {
    float v10 = 0.0;
  }
  float v24 = v10;
  if (sub_10104F460(*(void *)(a2 + 152)) == 7) {
    float v11 = 1.0;
  }
  else {
    float v11 = 0.0;
  }
  float v23 = v11;
  if (sub_10104F460(*(void *)(a2 + 152)) == 9) {
    float v12 = 1.0;
  }
  else {
    float v12 = 0.0;
  }
  if (sub_10104F460(*(void *)(a2 + 152)) == 11) {
    float v13 = 1.0;
  }
  else {
    float v13 = 0.0;
  }
  if (sub_10104F460(*(void *)(a2 + 152)) == 12) {
    float v14 = 1.0;
  }
  else {
    float v14 = 0.0;
  }
  if (sub_10104F460(*(void *)(a2 + 152)) == 18) {
    float v15 = 1.0;
  }
  else {
    float v15 = 0.0;
  }
  if (sub_10104F460(*(void *)(a2 + 152)) == 19) {
    float v16 = 1.0;
  }
  else {
    float v16 = 0.0;
  }
  if (sub_10104F460(*(void *)(a2 + 152)) == 14) {
    float v17 = 1.0;
  }
  else {
    float v17 = 0.0;
  }
  if (sub_10104F460(*(void *)(a2 + 152)) == 22) {
    float v9 = 1.0;
  }
  uint64_t v18 = (float *)operator new(0x24uLL);
  *uint64_t v18 = v24;
  v18[1] = v23;
  void v18[2] = v12;
  v18[3] = v13;
  v18[4] = v14;
  v18[5] = v15;
  void v18[6] = v16;
  v18[7] = v17;
  _WORD v18[8] = v9;
  __int128 v19 = *(_OWORD *)v18;
  __int128 v20 = *((_OWORD *)v18 + 1);
  int v45 = *((_DWORD *)v18 + 8);
  _DWORD v25[2] = 29LL;
  char v26 = 1;
  __int128 v27 = &off_101896EE0;
  __int128 v43 = v19;
  __int128 v44 = v20;
  v25[0] = &off_1018964F8;
  v25[1] = &off_101896D10;
  int v28 = 1056964608;
  float v21 = sub_10104FA44((uint64_t)v25, (uint64_t)&v29);
  operator delete(v18);
  return v21;
}

void sub_10105E49C(_Unwind_Exception *a1)
{
}

void sub_10105E4B0(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 == v10)
  {
    unint64_t v13 = 0LL;
    float v14 = 0.0;
  }

  else
  {
    unint64_t v13 = 0LL;
    float v14 = 0.0;
    do
    {
      float v15 = a1 - *(double *)(v11 + 40);
      if (v15 >= 2592000.0) {
        break;
      }
      if (*(void *)(v11 + 56) == a4)
      {
        float v16 = *(float *)(v11 + 96);
        if (a4 != 19 || *(void *)(v11 + 72) == a6)
        {
          else {
            float v17 = *(float *)(v11 + 92);
          }
          BOOL v18 = sub_10104F428(v17);
          BOOL v19 = sub_10104F428(v16);
          if (v18 && v19)
          {
            else {
              float v21 = 2.0;
            }
            else {
              float v22 = -2.0;
            }
            float v14 = v14 + v22;
            ++v13;
          }

          if (v13 > 9) {
            break;
          }
          uint64_t v10 = a3[1];
        }
      }

      v11 += 104LL;
    }

    while (v11 != v10);
  }

  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_1018970F0);
  }
  float v23 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = 0x4EC4EC4EC4EC4EC5LL * ((a3[1] - *a3) >> 3);
    if (v13) {
      double v25 = (float)(v14 / (float)v13);
    }
    else {
      double v25 = 0.0;
    }
    *(_DWORD *)std::string buf = 134219264;
    uint64_t v43 = v24;
    __int16 v44 = 1024;
    int v45 = a4;
    __int16 v46 = 1024;
    int v47 = a5;
    __int16 v48 = 1024;
    int v49 = a6;
    __int16 v50 = 2048;
    double v51 = v25;
    __int16 v52 = 2048;
    unint64_t v53 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "BiasCorrector, numHistoricalData, %zu, workoutType, %d, workoutLocation, %d, swimLocation, %d avgDelta, %f, countMatch, %zu",  buf,  0x32u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_1018970F0);
    }
    uint64_t v26 = 0x4EC4EC4EC4EC4EC5LL * ((a3[1] - *a3) >> 3);
    if (v13) {
      double v27 = (float)(v14 / (float)v13);
    }
    else {
      double v27 = 0.0;
    }
    int v30 = 134219264;
    uint64_t v31 = v26;
    __int16 v32 = 1024;
    int v33 = a4;
    __int16 v34 = 1024;
    int v35 = a5;
    __int16 v36 = 1024;
    int v37 = a6;
    __int16 v38 = 2048;
    double v39 = v27;
    __int16 v40 = 2048;
    unint64_t v41 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "BiasCorrector, numHistoricalData, %zu, workoutType, %d, workoutLocation, %d, swimLocation, %d avgDelta, %f, countMatch, %zu",  (size_t)&v30,  50);
    uint64_t v29 = (uint8_t *)v28;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLWorkoutEffortBiasCorrector::computeAvgUserBiasForWorkoutTypeCorrection(const CFAbsoluteTime, const std::ve ctor<CLWorkoutEffort::SessionSummary> &, const CMWorkoutType, const CMWorkoutLocationType, const CMSwimWorkoutLocation) const",  "%s\n",  v28);
    if (v29 != buf) {
      free(v29);
    }
  }

uint64_t sub_10105E848(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)a1 = a2;
  *(double *)(a1 + _Block_object_dispose(va, 8) = a6;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  sub_10105E4B0(a6, a1, a2, a3, a4, a5);
  *(_DWORD *)(a1 + 40) = v7;
  return a1;
}

void sub_10105E880(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a3 + 16);
  if (**(void **)a1 != *(void *)(*(void *)a1 + 8LL))
  {
    float v7 = sub_10105EB00((uint64_t)a1, (uint64_t)a2, (uint64_t)a2);
    float v9 = a1[10];
    int v8 = a1 + 10;
    float v10 = v9;
    float v11 = -2.0;
    if (v9 >= -2.0)
    {
      float v12 = (float *)&unk_1013CB2BC;
      if (v10 <= 2.0) {
        float v12 = v8;
      }
      float v11 = *v12;
    }

    float v13 = v11 + a2[4];
    *(float *)(a3 + 16) = v13;
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_1018970F0);
    }
    float v14 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      double v15 = a2[4];
      double v16 = *v8;
      *(_DWORD *)std::string buf = 134218752;
      double v31 = v15;
      __int16 v32 = 2048;
      double v33 = v13;
      __int16 v34 = 2048;
      double v35 = v16;
      __int16 v36 = 2048;
      double v37 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "BiasCorrector, rawScore, %f, correctedScore, %f, avgUserBias, %f, recentHighEffortBonus, %f",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_1018970F0);
      }
      double v17 = a2[4];
      double v18 = *v8;
      int v22 = 134218752;
      double v23 = v17;
      __int16 v24 = 2048;
      double v25 = v13;
      __int16 v26 = 2048;
      double v27 = v18;
      __int16 v28 = 2048;
      double v29 = v7;
      LODWORD(v21) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "BiasCorrector, rawScore, %f, correctedScore, %f, avgUserBias, %f, recentHighEffortBonus, %f",  COERCE_DOUBLE(&v22),  v21);
      __int128 v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWorkoutEffort::Result CLWorkoutEffortBiasCorrector::correctBias(const CLWorkoutEffort::Result &) const",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }
  }

float sub_10105EB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 8LL);
  if (**(void **)a1 == v3) {
    return 0.0;
  }
  double v5 = *(double *)(v3 - 56);
  float v6 = *(float *)(v3 - 12);
  float v7 = *(float *)(a3 + 16);
  double v8 = v5 - *(double *)a3;
  if (v8 < 0.0) {
    double v8 = 0.0;
  }
  float v9 = 0.0;
  if (v8 < 14400.0)
  {
    float v10 = v8 / -14400.0 + 1.0;
    float v11 = (float)(v6 - v7) * v10;
    float v12 = 2.0;
    if (v11 <= 2.0) {
      float v12 = v11;
    }
    if (v11 >= 0.0) {
      float v9 = v12;
    }
    else {
      float v9 = 0.0;
    }
  }

  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_1018970F0);
  }
  float v13 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    double v14 = *(double *)a3;
    *(_DWORD *)std::string buf = 134219008;
    double v31 = v9;
    __int16 v32 = 2048;
    double v33 = v6;
    __int16 v34 = 2048;
    double v35 = v7;
    __int16 v36 = 2048;
    double v37 = v5;
    __int16 v38 = 2048;
    double v39 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "BiasCorrector, recentHighEffortBonus, %f, lastScore, %f, currentScore, %f, lastEndTime, %f, currentStartTime, %f",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_1018970F0);
    }
    double v15 = *(double *)a3;
    int v20 = 134219008;
    double v21 = v9;
    __int16 v22 = 2048;
    double v23 = v6;
    __int16 v24 = 2048;
    double v25 = v7;
    __int16 v26 = 2048;
    double v27 = v5;
    __int16 v28 = 2048;
    double v29 = v15;
    LODWORD(v19) = 52;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "BiasCorrector, recentHighEffortBonus, %f, lastScore, %f, currentScore, %f, lastEndTime, %f, currentStartTime, %f",  COERCE_DOUBLE(&v20),  v19);
    double v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLWorkoutEffortBiasCorrector::computeRecentHighEffortBiasCorrection(const std::vector<CLWorkoutEffort::Sessi onSummary> &, const CLWorkoutEffort::Result &) const",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  return v9;
}

void sub_10105EDA4(id a1)
{
  qword_1019347E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

float sub_10105EDD0(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *(void *)(a2 + 4);
  float v2 = *(double *)(a2 + 168);
  int v3 = *(_DWORD *)(a2 + 12);
  float v16 = v2;
  int v17 = v3;
  int32x2_t v18 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  int v19 = *(_DWORD *)(a2 + 28);
  __int128 v20 = *(_OWORD *)(a2 + 40);
  int v4 = *(_DWORD *)(a2 + 60);
  int v5 = *(_DWORD *)(a2 + 124);
  int v6 = *(_DWORD *)(a2 + 128);
  int v21 = *(_DWORD *)(a2 + 56);
  int v22 = v5;
  int v23 = v4;
  int v24 = v6;
  int v25 = *(_DWORD *)(a2 + 184);
  uint64_t v26 = *(void *)(a2 + 192);
  int v7 = *(_DWORD *)(a2 + 224);
  int v27 = *(_DWORD *)(a2 + 200);
  int v28 = v7;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v8 = sub_10104F460(*(void *)(a2 + 152));
  float v9 = 0.0;
  if (v8 == 4) {
    float v9 = 1.0;
  }
  _OWORD v11[2] = 50LL;
  char v12 = 1;
  float v13 = &off_101897430;
  float v29 = v9;
  v11[0] = &off_1018964F8;
  v11[1] = &off_101897110;
  int v14 = 1056964608;
  return sub_10104FA44((uint64_t)v11, (uint64_t)&v15);
}

void *sub_10105EEBC(uint64_t a1, const void *a2)
{
  __n128 result = memcpy((void *)(a1 + 64), a2, 0x590uLL);
  *(_BYTE *)(a1 + 1489) = 1;
  return result;
}

__n128 sub_10105EEEC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  *(_BYTE *)(a1 + 148_Block_object_dispose(va, 8) = 1;
  return result;
}

__n128 sub_10105EF10@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(_BYTE *)(a1 + 1488))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897790);
    }
    __int128 v4 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "WorkoutEffortInputCollector, no valid body metrics detected",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897790);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  16LL,  "WorkoutEffortInputCollector, no valid body metrics detected",  v9,  2);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const CLBodyMetrics CLWorkoutEffortInputCollector::getBodyMetrics()",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  __int128 v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  __n128 result = *(__n128 *)(a1 + 44);
  *(__n128 *)(a2 + 44) = result;
  return result;
}

BOOL sub_10105F0C4(_BYTE *a1)
{
  return a1[1488] && a1[56] && a1[57] && a1[58] != 0;
}

double sub_10105F0F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 1489)
    && *(_BYTE *)(a1 + 1488)
    && *(_BYTE *)(a1 + 56)
    && *(_BYTE *)(a1 + 57)
    && *(_BYTE *)(a1 + 58))
  {
    float32x2_t v2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 1448));
    *(void *)a2 = *(void *)(a1 + 80);
    *(float32x2_t *)(a2 + _Block_object_dispose(va, 8) = v2;
    *(void *)(a2 + 16) = *(void *)(a1 + 1440);
    __int128 v3 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 40) = v3;
    *(_OWORD *)(a2 + sub_1011C52D0(v1 - 56) = *(_OWORD *)(a1 + 32);
    __int128 v4 = *(_OWORD *)(a1 + 44);
    *(_OWORD *)(a2 + 6_Block_object_dispose(va, 8) = v4;
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 424);
  }

  else
  {
    *(void *)&__int128 v4 = 0LL;
    *(_OWORD *)(a2 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + sub_1011C52D0(v1 - 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(void *)a2 = 0xBFF0000000000000LL;
    *(void *)(a2 + 16) = 0xBFF0000000000000LL;
  }

  return *(double *)&v4;
}

void sub_10105F188(id a1)
{
  qword_1019347E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

float sub_10105F1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *(void *)(a2 + 4);
  float v3 = *(double *)(a2 + 168);
  int v4 = *(_DWORD *)(a2 + 12);
  float v20 = v3;
  int v21 = v4;
  int32x2_t v22 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  int v23 = *(_DWORD *)(a2 + 28);
  __int128 v24 = *(_OWORD *)(a2 + 40);
  int v5 = *(_DWORD *)(a2 + 60);
  int v6 = *(_DWORD *)(a2 + 124);
  int v7 = *(_DWORD *)(a2 + 128);
  int v25 = *(_DWORD *)(a2 + 56);
  int v26 = v6;
  int v27 = v5;
  int v28 = v7;
  int v29 = *(_DWORD *)(a2 + 184);
  uint64_t v30 = *(void *)(a2 + 192);
  int v8 = *(_DWORD *)(a2 + 224);
  int v31 = *(_DWORD *)(a2 + 200);
  int v32 = v8;
  float v9 = 0.0;
  if (sub_10104F460(*(void *)(a2 + 152)) == 15) {
    float v10 = 1.0;
  }
  else {
    float v10 = 0.0;
  }
  if (sub_10104F460(*(void *)(a2 + 152)) == 16) {
    float v11 = 1.0;
  }
  else {
    float v11 = 0.0;
  }
  if (sub_10104F460(*(void *)(a2 + 152)) == 24) {
    float v9 = 1.0;
  }
  char v12 = (float *)operator new(0xCuLL);
  float *v12 = v10;
  v12[1] = v11;
  _DWORD v12[2] = v9;
  uint64_t v35 = 0LL;
  uint64_t v37 = 0LL;
  uint64_t v36 = 0LL;
  uint64_t v33 = *(void *)v12;
  int v34 = *((_DWORD *)v12 + 2);
  uint64_t v15[2] = 50LL;
  char v16 = 1;
  int v17 = &off_101897AD0;
  v15[0] = &off_1018964F8;
  v15[1] = &off_1018977B0;
  int v18 = 1056964608;
  float v13 = sub_10104FA44((uint64_t)v15, (uint64_t)&v19);
  operator delete(v12);
  return v13;
}

void sub_10105F30C(_Unwind_Exception *a1)
{
}

BOOL sub_10105F328(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a1 + 16) != 1
      || uuid_compare((const unsigned __int8 *)(a1 + 120), (const unsigned __int8 *)(a2 + 64)) != 0;
}

BOOL sub_10105F360(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a1 + 16) != 1
      || uuid_compare((const unsigned __int8 *)(a1 + 120), (const unsigned __int8 *)(a2 + 64)) != 0;
}

BOOL sub_10105F39C(void *a1, void *a2)
{
  return a2[14] != a1[21] || a2[15] != a1[22] || a2[16] != a1[23];
}

uint64_t sub_10105F3EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_101897E30;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 9LL;
  *(_WORD *)(a1 + 16) = 512;
  sub_10001A504(a1 + 24, a2);
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = 0u;
  *(_OWORD *)(a1 + 273) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  return a1;
}

uint64_t sub_10105F470(uint64_t result, __int128 *a2)
{
  switch(*((void *)a2 + 2))
  {
    case 8LL:
      __int128 v2 = a2[13];
      __int128 v71 = a2[12];
      __int128 v72 = v2;
      uint64_t v73 = *((void *)a2 + 28);
      __int128 v3 = a2[9];
      __int128 v67 = a2[8];
      __int128 v68 = v3;
      __int128 v4 = a2[11];
      __int128 v69 = a2[10];
      __int128 v70 = v4;
      __int128 v5 = a2[5];
      __int128 v63 = a2[4];
      __int128 v64 = v5;
      __int128 v6 = a2[7];
      __int128 v65 = a2[6];
      __int128 v66 = v6;
      __int128 v7 = a2[1];
      __int128 v59 = *a2;
      __int128 v60 = v7;
      __int128 v8 = a2[3];
      __int128 v61 = a2[2];
      __int128 v62 = v8;
      int v9 = 6;
      goto LABEL_10;
    case 9LL:
      __int128 v10 = a2[13];
      __int128 v71 = a2[12];
      __int128 v72 = v10;
      uint64_t v73 = *((void *)a2 + 28);
      __int128 v11 = a2[9];
      __int128 v67 = a2[8];
      __int128 v68 = v11;
      __int128 v12 = a2[11];
      __int128 v69 = a2[10];
      __int128 v70 = v12;
      __int128 v13 = a2[5];
      __int128 v63 = a2[4];
      __int128 v64 = v13;
      __int128 v14 = a2[7];
      __int128 v65 = a2[6];
      __int128 v66 = v14;
      __int128 v15 = a2[1];
      __int128 v59 = *a2;
      __int128 v60 = v15;
      __int128 v16 = a2[3];
      __int128 v61 = a2[2];
      __int128 v62 = v16;
      int v9 = 7;
      goto LABEL_10;
    case 0xALL:
      __int128 v17 = a2[13];
      __int128 v71 = a2[12];
      __int128 v72 = v17;
      uint64_t v73 = *((void *)a2 + 28);
      __int128 v18 = a2[9];
      __int128 v67 = a2[8];
      __int128 v68 = v18;
      __int128 v19 = a2[11];
      __int128 v69 = a2[10];
      __int128 v70 = v19;
      __int128 v20 = a2[5];
      __int128 v63 = a2[4];
      __int128 v64 = v20;
      __int128 v21 = a2[7];
      __int128 v65 = a2[6];
      __int128 v66 = v21;
      __int128 v22 = a2[1];
      __int128 v59 = *a2;
      __int128 v60 = v22;
      __int128 v23 = a2[3];
      __int128 v61 = a2[2];
      __int128 v62 = v23;
      int v9 = 8;
      goto LABEL_10;
    case 0xDLL:
      __int128 v24 = a2[13];
      __int128 v71 = a2[12];
      __int128 v72 = v24;
      uint64_t v73 = *((void *)a2 + 28);
      __int128 v25 = a2[9];
      __int128 v67 = a2[8];
      __int128 v68 = v25;
      __int128 v26 = a2[11];
      __int128 v69 = a2[10];
      __int128 v70 = v26;
      __int128 v27 = a2[5];
      __int128 v63 = a2[4];
      __int128 v64 = v27;
      __int128 v28 = a2[7];
      __int128 v65 = a2[6];
      __int128 v66 = v28;
      __int128 v29 = a2[1];
      __int128 v59 = *a2;
      __int128 v60 = v29;
      __int128 v30 = a2[3];
      __int128 v61 = a2[2];
      __int128 v62 = v30;
      int v9 = 1;
      goto LABEL_10;
    case 0xELL:
      __int128 v31 = a2[13];
      __int128 v71 = a2[12];
      __int128 v72 = v31;
      uint64_t v73 = *((void *)a2 + 28);
      __int128 v32 = a2[9];
      __int128 v67 = a2[8];
      __int128 v68 = v32;
      __int128 v33 = a2[11];
      __int128 v69 = a2[10];
      __int128 v70 = v33;
      __int128 v34 = a2[5];
      __int128 v63 = a2[4];
      __int128 v64 = v34;
      __int128 v35 = a2[7];
      __int128 v65 = a2[6];
      __int128 v66 = v35;
      __int128 v36 = a2[1];
      __int128 v59 = *a2;
      __int128 v60 = v36;
      __int128 v37 = a2[3];
      __int128 v61 = a2[2];
      __int128 v62 = v37;
      int v9 = 5;
      goto LABEL_10;
    case 0xFLL:
      __int128 v38 = a2[13];
      __int128 v71 = a2[12];
      __int128 v72 = v38;
      uint64_t v73 = *((void *)a2 + 28);
      __int128 v39 = a2[9];
      __int128 v67 = a2[8];
      __int128 v68 = v39;
      __int128 v40 = a2[11];
      __int128 v69 = a2[10];
      __int128 v70 = v40;
      __int128 v41 = a2[5];
      __int128 v63 = a2[4];
      __int128 v64 = v41;
      __int128 v42 = a2[7];
      __int128 v65 = a2[6];
      __int128 v66 = v42;
      __int128 v43 = a2[1];
      __int128 v59 = *a2;
      __int128 v60 = v43;
      __int128 v44 = a2[3];
      __int128 v61 = a2[2];
      __int128 v62 = v44;
      int v9 = 2;
      goto LABEL_10;
    case 0x10LL:
      __int128 v45 = a2[13];
      __int128 v71 = a2[12];
      __int128 v72 = v45;
      uint64_t v73 = *((void *)a2 + 28);
      __int128 v46 = a2[9];
      __int128 v67 = a2[8];
      __int128 v68 = v46;
      __int128 v47 = a2[11];
      __int128 v69 = a2[10];
      __int128 v70 = v47;
      __int128 v48 = a2[5];
      __int128 v63 = a2[4];
      __int128 v64 = v48;
      __int128 v49 = a2[7];
      __int128 v65 = a2[6];
      __int128 v66 = v49;
      __int128 v50 = a2[1];
      __int128 v59 = *a2;
      __int128 v60 = v50;
      __int128 v51 = a2[3];
      __int128 v61 = a2[2];
      __int128 v62 = v51;
      int v9 = 3;
      goto LABEL_10;
    case 0x11LL:
      __int128 v52 = a2[13];
      __int128 v71 = a2[12];
      __int128 v72 = v52;
      uint64_t v73 = *((void *)a2 + 28);
      __int128 v53 = a2[9];
      __int128 v67 = a2[8];
      __int128 v68 = v53;
      __int128 v54 = a2[11];
      __int128 v69 = a2[10];
      __int128 v70 = v54;
      __int128 v55 = a2[5];
      __int128 v63 = a2[4];
      __int128 v64 = v55;
      __int128 v56 = a2[7];
      __int128 v65 = a2[6];
      __int128 v66 = v56;
      __int128 v57 = a2[1];
      __int128 v59 = *a2;
      __int128 v60 = v57;
      __int128 v58 = a2[3];
      __int128 v61 = a2[2];
      __int128 v62 = v58;
      int v9 = 4;
LABEL_10:
      __n128 result = sub_100CCCC8C(result, v9, (uint64_t)&v59);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10105F744(uint64_t a1, int a2, double a3)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F08);
  }
  __int128 v6 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 168);
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v7;
    LOWORD(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 2) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutEffortWorkoutStateTracker, #Warning, prepareSessionEnd type mismatch, trackingWorkoutType, %d, prepareSes sionEndWorkoutType, %d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F08);
    }
    uint64_t v16 = *(void *)(a1 + 168);
    v19[0] = 67109376;
    v19[1] = v16;
    __int16 v20 = 1024;
    int v21 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "CLWorkoutEffortWorkoutStateTracker, #Warning, prepareSessionEnd type mismatch, trackingWorkoutType, %d, prepareSes sionEndWorkoutType, %d",  v19,  14);
    __int128 v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortWorkoutStateTracker::prepareSessionEnd(CMWorkoutType, CFAbsoluteTime)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  uint64_t v8 = *(void *)(a1 + 56);
  __int128 v9 = *(_OWORD *)(a1 + 232);
  __int128 v10 = *(_OWORD *)(a1 + 264);
  __int128 v36 = *(_OWORD *)(a1 + 248);
  __int128 v37 = v10;
  uint64_t v38 = *(void *)(a1 + 280);
  __int128 v11 = *(_OWORD *)(a1 + 168);
  __int128 v12 = *(_OWORD *)(a1 + 200);
  __int128 v32 = *(_OWORD *)(a1 + 184);
  __int128 v33 = v12;
  __int128 v34 = *(_OWORD *)(a1 + 216);
  __int128 v35 = v9;
  __int128 v13 = *(_OWORD *)(a1 + 104);
  __int128 v14 = *(_OWORD *)(a1 + 136);
  __int128 v28 = *(_OWORD *)(a1 + 120);
  __int128 v29 = v14;
  __int128 v30 = *(_OWORD *)(a1 + 152);
  __int128 v31 = v11;
  __int128 v26 = *(_OWORD *)(a1 + 88);
  __int128 v27 = v13;
  *(void *)std::string buf = v8;
  double v23 = a3;
  uint64_t v24 = 15LL;
  double v25 = a3;
  return sub_100CCCC8C(a1, 2, (uint64_t)buf);
}

BOOL sub_10105F994(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v3 = sub_1002F8DDC();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 936LL))(v3);
  if (!sub_10105FD18(v4, uu) || uuid_is_null(uu)) {
    return 0LL;
  }
  uuid_unparse(uu, out);
  uuid_unparse(a2, out);
  int v7 = uuid_compare(a2, uu);
  BOOL v5 = v7 == 0;
  if (v7)
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F08);
    }
    uint64_t v8 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      __int128 v19 = (char *)&v23;
      __int16 v20 = 2080;
      int v21 = out;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "CLWorkoutEffortWorkoutStateTracker, different sessionId found in cache, clearing value, cachedSessionId, %s, cur rentSessionId, %s",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F08);
      }
      int v14 = 136315394;
      __int128 v15 = &v23;
      __int16 v16 = 2080;
      __int128 v17 = out;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  17LL,  "CLWorkoutEffortWorkoutStateTracker, different sessionId found in cache, clearing value, cachedSessionId, %s, cur rentSessionId, %s",  (const char *)&v14,  22);
      __int128 v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWorkoutEffortWorkoutStateTracker::evaluateDidRecoverFromCrash(unsigned char *) const",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    sub_10105FF70();
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F08);
    }
    __int128 v9 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      __int128 v19 = out;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutEffortWorkoutStateTracker, inferring crash recovery, saved session id found, %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F08);
      }
      int v23 = 136315138;
      uint64_t v24 = out;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "CLWorkoutEffortWorkoutStateTracker, inferring crash recovery, saved session id found, %s",  (const char *)&v23);
      __int128 v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutEffortWorkoutStateTracker::evaluateDidRecoverFromCrash(unsigned char *) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  return v5;
}

BOOL sub_10105FD18(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_1002F8DDC();
  if (sub_1002A8560(v3, "WorkoutEffortSessionId", &__p))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F08);
    }
    uint64_t v4 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      __int16 v16 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutEffortWorkoutStateTracker, retrieving session id, %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F08);
      }
      __int128 v9 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v13 = 136315138;
      int v14 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "CLWorkoutEffortWorkoutStateTracker, retrieving session id, %s",  (const char *)&v13);
      __int128 v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutEffortWorkoutStateTracker::getSessionIdFromCache(uuid_t &) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v6 = &__p;
    }
    else {
      __int128 v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    BOOL v7 = uuid_parse((const char *)v6, a2) == 0;
  }

  else
  {
    BOOL v7 = 0LL;
  }

  return v7;
}

void sub_10105FF4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10105FF70()
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F08);
  }
  double v0 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutEffortWorkoutStateTracker, clearing session id from daemon cache.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F08);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "CLWorkoutEffortWorkoutStateTracker, clearing session id from daemon cache.",  v4,  2);
    uint64_t v3 = (uint8_t *)v2;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortWorkoutStateTracker::clearSessionIdInCache() const",  "%s\n",  v2);
    if (v3 != buf) {
      free(v3);
    }
  }

  uint64_t v1 = sub_1002F8DDC();
  sub_1002A667C(v1, "WorkoutEffortSessionId", 0xFFFFFFFFLL);
}

uint64_t sub_101060108(int a1, unsigned __int8 *uu)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F08);
  }
  __int128 v2 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    __int128 v11 = out;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutEffortWorkoutStateTracker, saving session id to daemon cache, %s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F08);
    }
    int v8 = 136315138;
    __int128 v9 = out;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "CLWorkoutEffortWorkoutStateTracker, saving session id to daemon cache, %s",  (const char *)&v8);
    BOOL v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortWorkoutStateTracker::saveSessionIdInCache(const uuid_t &) const",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  uint64_t v3 = sub_1002F8DDC();
  sub_1002ACA84(v3, "WorkoutEffortSessionId", out);
  uint64_t v4 = sub_1002F8DDC();
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 944LL))(v4);
}

void sub_1010602DC(id a1)
{
  qword_1019347E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t sub_101060308(uint64_t a1, __int128 *a2)
{
  __int128 v3 = a2[13];
  __int128 v33 = a2[12];
  __int128 v34 = v3;
  uint64_t v4 = *((void *)a2 + 28);
  __int128 v5 = a2[9];
  __int128 v29 = a2[8];
  __int128 v30 = v5;
  __int128 v6 = a2[11];
  __int128 v31 = a2[10];
  __int128 v32 = v6;
  __int128 v7 = a2[5];
  __int128 v25 = a2[4];
  __int128 v26 = v7;
  __int128 v8 = a2[7];
  __int128 v27 = a2[6];
  __int128 v28 = v8;
  __int128 v9 = a2[1];
  __int128 v21 = *a2;
  __int128 v22 = v9;
  __int128 v10 = a2[3];
  __int128 v23 = a2[2];
  __int128 v24 = v10;
  __int128 v11 = v31;
  *(_OWORD *)(a1 + 232) = v32;
  __int128 v12 = v34;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v33;
  *(_OWORD *)(a1 + 264) = v12;
  __int128 v13 = v27;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v28;
  __int128 v14 = v30;
  *(_OWORD *)(a1 + 184) = v29;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v11;
  __int128 v15 = v23;
  *(_OWORD *)(a1 + 104) = v24;
  __int128 v16 = v26;
  *(_OWORD *)(a1 + 120) = v25;
  *(void *)&__int128 v22 = 0LL;
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v13;
  __int128 v17 = v22;
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = v21;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v15;
  uint64_t v35 = v4;
  *(void *)(a1 + 280) = v4;
  *(_OWORD *)(a1 + 72) = v17;
  uint64_t v18 = *(void *)(a1 + 48);
  if (!v18) {
    sub_100008BDC();
  }
  (*(void (**)(uint64_t, __int128 *))(*(void *)v18 + 48LL))(v18, &v21);
  BOOL v19 = sub_10105F994(a1, (const unsigned __int8 *)&v25);
  *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = v19;
  return sub_101060108(v19, (unsigned __int8 *)&v25);
}

uint64_t sub_10106043C(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *(_OWORD *)(a1 + 232);
  uint64_t v4 = a1 + 56;
  __int128 v5 = *(_OWORD *)(a1 + 264);
  __int128 v63 = *(_OWORD *)(a1 + 248);
  __int128 v64 = v5;
  __int128 v6 = *(_OWORD *)(a1 + 168);
  __int128 v7 = *(_OWORD *)(a1 + 200);
  __int128 v59 = *(_OWORD *)(a1 + 184);
  __int128 v60 = v7;
  __int128 v61 = *(_OWORD *)(a1 + 216);
  __int128 v62 = v3;
  __int128 v8 = *(_OWORD *)(a1 + 104);
  __int128 v9 = *(_OWORD *)(a1 + 136);
  __int128 v55 = *(_OWORD *)(a1 + 120);
  __int128 v56 = v9;
  __int128 v57 = *(_OWORD *)(a1 + 152);
  __int128 v58 = v6;
  __int128 v10 = *(_OWORD *)(a1 + 72);
  __int128 v51 = *(_OWORD *)(a1 + 56);
  __int128 v52 = v10;
  __int128 v53 = *(_OWORD *)(a1 + 88);
  __int128 v54 = v8;
  *((void *)&v52 + 1) = *((void *)a2 + 3);
  *((void *)&v51 + 1) = *((void *)&v52 + 1);
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v53;
  __int128 v11 = v58;
  *(_OWORD *)(a1 + 152) = v57;
  __int128 v12 = v55;
  *(_OWORD *)(a1 + 136) = v56;
  *(_OWORD *)(a1 + 120) = v12;
  *(_OWORD *)(a1 + 104) = v8;
  __int128 v13 = v62;
  *(_OWORD *)(a1 + 216) = v61;
  __int128 v14 = v59;
  *(_OWORD *)(a1 + 200) = v60;
  *(_OWORD *)(a1 + 184) = v14;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v11;
  __int128 v15 = v63;
  *(_OWORD *)(a1 + 264) = v64;
  *(void *)&__int128 v52 = 1LL;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v15;
  *(_OWORD *)(a1 + 232) = v13;
  __int128 v16 = v51;
  *(_OWORD *)(a1 + 72) = v52;
  uint64_t v65 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v65;
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = v16;
  uint64_t v17 = *(void *)(a1 + 48);
  if (!v17) {
    goto LABEL_4;
  }
  (*(void (**)(uint64_t, __int128 *))(*(void *)v17 + 48LL))(v17, &v51);
  __int128 v19 = a2[13];
  __int128 v48 = a2[12];
  __int128 v49 = v19;
  uint64_t v50 = *((void *)a2 + 28);
  __int128 v20 = a2[9];
  __int128 v44 = a2[8];
  __int128 v45 = v20;
  __int128 v21 = a2[11];
  __int128 v46 = a2[10];
  __int128 v47 = v21;
  __int128 v22 = a2[5];
  __int128 v40 = a2[4];
  __int128 v41 = v22;
  __int128 v23 = a2[7];
  __int128 v42 = a2[6];
  __int128 v43 = v23;
  __int128 v24 = a2[1];
  __int128 v36 = *a2;
  __int128 v37 = v24;
  __int128 v25 = a2[3];
  __int128 v38 = a2[2];
  __int128 v39 = v25;
  *(void *)&__int128 v37 = 0LL;
  __int128 v26 = v49;
  *(_OWORD *)(v4 + 192) = v48;
  *(_OWORD *)(v4 + 20_Block_object_dispose(va, 8) = v26;
  *(void *)(v4 + 224) = v50;
  __int128 v27 = v45;
  *(_OWORD *)(v4 + 12_Block_object_dispose(va, 8) = v44;
  *(_OWORD *)(v4 + 144) = v27;
  __int128 v28 = v47;
  *(_OWORD *)(v4 + 160) = v46;
  *(_OWORD *)(v4 + 176) = v28;
  __int128 v29 = v41;
  *(_OWORD *)(v4 + 64) = v40;
  *(_OWORD *)(v4 + 80) = v29;
  __int128 v30 = v43;
  *(_OWORD *)(v4 + 96) = v42;
  *(_OWORD *)(v4 + 112) = v30;
  __int128 v31 = v39;
  *(_OWORD *)(v4 + 32) = v38;
  *(_OWORD *)(v4 + 4_Block_object_dispose(va, 8) = v31;
  __int128 v32 = v37;
  *(_OWORD *)uint64_t v4 = v36;
  *(_OWORD *)(v4 + 16) = v32;
  uint64_t v33 = *(void *)(a1 + 48);
  if (!v33) {
LABEL_4:
  }
    sub_100008BDC();
  (*(void (**)(uint64_t, __int128 *))(*(void *)v33 + 48LL))(v33, &v36);
  BOOL v34 = sub_10105F994(a1, (const unsigned __int8 *)&v40);
  *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = v34;
  return sub_101060108(v34, (unsigned __int8 *)&v40);
}

uint64_t sub_10106063C(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = a2[2];
  *(_OWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  __int128 v7 = a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v7;
  __int128 v10 = a2[11];
  __int128 v11 = a2[12];
  __int128 v12 = a2[13];
  *(void *)(a1 + 280) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 264) = v12;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v11;
  *(_OWORD *)(a1 + 232) = v10;
  uint64_t v13 = *(void *)(a1 + 48);
  if (!v13) {
    sub_100008BDC();
  }
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48LL))(v13);
  return sub_101060108(v15, (unsigned __int8 *)a2 + 64);
}

uint64_t sub_1010606D8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[13];
  __int128 v31 = a2[12];
  __int128 v32 = v2;
  uint64_t v3 = *((void *)a2 + 28);
  __int128 v4 = a2[9];
  __int128 v27 = a2[8];
  __int128 v28 = v4;
  __int128 v5 = a2[11];
  __int128 v29 = a2[10];
  __int128 v30 = v5;
  __int128 v6 = a2[5];
  __int128 v23 = a2[4];
  __int128 v24 = v6;
  __int128 v7 = a2[7];
  __int128 v25 = a2[6];
  __int128 v26 = v7;
  __int128 v8 = a2[1];
  __int128 v19 = *a2;
  __int128 v20 = v8;
  __int128 v9 = a2[3];
  __int128 v21 = a2[2];
  __int128 v22 = v9;
  __int128 v10 = v29;
  *(_OWORD *)(a1 + 232) = v30;
  __int128 v11 = v32;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v31;
  *(_OWORD *)(a1 + 264) = v11;
  __int128 v12 = v25;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v26;
  __int128 v13 = v28;
  *(_OWORD *)(a1 + 184) = v27;
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 216) = v10;
  __int128 v14 = v21;
  *(_OWORD *)(a1 + 104) = v22;
  __int128 v15 = v24;
  *(_OWORD *)(a1 + 120) = v23;
  *(void *)&__int128 v20 = 16LL;
  *(_OWORD *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 152) = v12;
  __int128 v16 = v20;
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = v19;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v14;
  uint64_t v33 = v3;
  *(void *)(a1 + 280) = v3;
  *(_OWORD *)(a1 + 72) = v16;
  uint64_t v17 = *(void *)(a1 + 48);
  if (!v17) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v17 + 48LL))(v17, &v19);
}

uint64_t sub_1010607E4(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[13];
  __int128 v31 = a2[12];
  __int128 v32 = v2;
  uint64_t v3 = *((void *)a2 + 28);
  __int128 v4 = a2[9];
  __int128 v27 = a2[8];
  __int128 v28 = v4;
  __int128 v5 = a2[11];
  __int128 v29 = a2[10];
  __int128 v30 = v5;
  __int128 v6 = a2[5];
  __int128 v23 = a2[4];
  __int128 v24 = v6;
  __int128 v7 = a2[7];
  __int128 v25 = a2[6];
  __int128 v26 = v7;
  __int128 v8 = a2[1];
  __int128 v19 = *a2;
  __int128 v20 = v8;
  __int128 v9 = a2[3];
  __int128 v21 = a2[2];
  __int128 v22 = v9;
  __int128 v10 = v29;
  *(_OWORD *)(a1 + 232) = v30;
  __int128 v11 = v32;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v31;
  *(_OWORD *)(a1 + 264) = v11;
  __int128 v12 = v25;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v26;
  __int128 v13 = v28;
  *(_OWORD *)(a1 + 184) = v27;
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 216) = v10;
  __int128 v14 = v21;
  *(_OWORD *)(a1 + 104) = v22;
  __int128 v15 = v24;
  *(_OWORD *)(a1 + 120) = v23;
  *(void *)&__int128 v20 = 17LL;
  *(_OWORD *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 152) = v12;
  __int128 v16 = v20;
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = v19;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v14;
  uint64_t v33 = v3;
  *(void *)(a1 + 280) = v3;
  *(_OWORD *)(a1 + 72) = v16;
  uint64_t v17 = *(void *)(a1 + 48);
  if (!v17) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v17 + 48LL))(v17, &v19);
}

void sub_1010608F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a1 + 232);
  __int128 v5 = *(_OWORD *)(a1 + 264);
  __int128 v31 = *(_OWORD *)(a1 + 248);
  __int128 v32 = v5;
  __int128 v6 = *(_OWORD *)(a1 + 168);
  __int128 v7 = *(_OWORD *)(a1 + 200);
  __int128 v27 = *(_OWORD *)(a1 + 184);
  __int128 v28 = v7;
  __int128 v29 = *(_OWORD *)(a1 + 216);
  __int128 v30 = v4;
  __int128 v8 = *(_OWORD *)(a1 + 104);
  __int128 v9 = *(_OWORD *)(a1 + 136);
  __int128 v23 = *(_OWORD *)(a1 + 120);
  __int128 v24 = v9;
  __int128 v25 = *(_OWORD *)(a1 + 152);
  __int128 v26 = v6;
  __int128 v10 = *(_OWORD *)(a1 + 72);
  __int128 v19 = *(_OWORD *)(a1 + 56);
  __int128 v20 = v10;
  __int128 v21 = *(_OWORD *)(a1 + 88);
  __int128 v22 = v8;
  *((void *)&v20 + 1) = v2;
  *((void *)&v19 + 1) = v3;
  __int128 v11 = v29;
  *(_OWORD *)(a1 + 232) = v30;
  __int128 v12 = v32;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v31;
  *(_OWORD *)(a1 + 264) = v12;
  __int128 v13 = v25;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v26;
  __int128 v14 = v28;
  *(_OWORD *)(a1 + 184) = v27;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v11;
  __int128 v15 = v21;
  *(_OWORD *)(a1 + 104) = v22;
  __int128 v16 = v24;
  *(_OWORD *)(a1 + 120) = v23;
  uint64_t v33 = *(void *)(a1 + 280);
  *(void *)&__int128 v20 = 10LL;
  *(void *)(a1 + 280) = v33;
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v15;
  __int128 v17 = v20;
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = v19;
  *(_OWORD *)(a1 + 72) = v17;
  uint64_t v18 = *(void *)(a1 + 48);
  if (!v18) {
    sub_100008BDC();
  }
  (*(void (**)(uint64_t, __int128 *))(*(void *)v18 + 48LL))(v18, &v19);
  sub_10105FF70();
}

void sub_101060A30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a1 + 232);
  __int128 v5 = *(_OWORD *)(a1 + 264);
  __int128 v31 = *(_OWORD *)(a1 + 248);
  __int128 v32 = v5;
  __int128 v6 = *(_OWORD *)(a1 + 168);
  __int128 v7 = *(_OWORD *)(a1 + 200);
  __int128 v27 = *(_OWORD *)(a1 + 184);
  __int128 v28 = v7;
  __int128 v29 = *(_OWORD *)(a1 + 216);
  __int128 v30 = v4;
  __int128 v8 = *(_OWORD *)(a1 + 104);
  __int128 v9 = *(_OWORD *)(a1 + 136);
  __int128 v23 = *(_OWORD *)(a1 + 120);
  __int128 v24 = v9;
  __int128 v25 = *(_OWORD *)(a1 + 152);
  __int128 v26 = v6;
  __int128 v10 = *(_OWORD *)(a1 + 72);
  __int128 v19 = *(_OWORD *)(a1 + 56);
  __int128 v20 = v10;
  __int128 v21 = *(_OWORD *)(a1 + 88);
  __int128 v22 = v8;
  *((void *)&v20 + 1) = v2;
  *((void *)&v19 + 1) = v3;
  __int128 v11 = v29;
  *(_OWORD *)(a1 + 232) = v30;
  __int128 v12 = v32;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v31;
  *(_OWORD *)(a1 + 264) = v12;
  __int128 v13 = v25;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v26;
  __int128 v14 = v28;
  *(_OWORD *)(a1 + 184) = v27;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v11;
  __int128 v15 = v21;
  *(_OWORD *)(a1 + 104) = v22;
  __int128 v16 = v24;
  *(_OWORD *)(a1 + 120) = v23;
  uint64_t v33 = *(void *)(a1 + 280);
  *(void *)&__int128 v20 = 1LL;
  *(void *)(a1 + 280) = v33;
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v15;
  __int128 v17 = v20;
  *(_OWORD *)(a1 + sub_1011C52D0(v1 - 56) = v19;
  *(_OWORD *)(a1 + 72) = v17;
  uint64_t v18 = *(void *)(a1 + 48);
  if (!v18) {
    sub_100008BDC();
  }
  (*(void (**)(uint64_t, __int128 *))(*(void *)v18 + 48LL))(v18, &v19);
  sub_10105FF70();
}

uint64_t sub_101060B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  __int128 v5 = sub_101204164((unsigned __int8 *)a1, "WorkoutEffortDurationThresholdForEstimateSave", &qword_1013DE498, 0);
  LOBYTE(v20) = 1;
  sub_1012049AC(v5 + 24, "ShouldWriteWorkoutEffortToHealthKit", (unsigned __int8 *)&v20, 0);
  *(_BYTE *)(a1 + 27) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1013DE4A0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = unk_1013DE4B0;
  *(_OWORD *)(a1 + 64) = xmmword_1013DE4C0;
  *(_OWORD *)(a1 + 76) = *(__int128 *)((char *)&xmmword_1013DE4C0 + 12);
  bzero((void *)(a1 + 96), 0x592uLL);
  *(void *)(a1 + 152_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 1536) = 4;
  *(void *)(a1 + 1544) = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v19 = _Q0;
  *(_OWORD *)(a1 + 1552) = _Q0;
  __asm { FMOV            V8.2S, #-1.0 }

  *(void *)(a1 + 156_Block_object_dispose(va, 8) = _D8;
  *(_WORD *)(a1 + 1576) = 1;
  __int128 v12 = operator new(8uLL);
  sub_10106747C(v12);
  *(void *)(a1 + 1584) = v12;
  v23[0] = &off_101897FD0;
  v23[1] = a1;
  __int128 v24 = v23;
  sub_10105F3EC(a1 + 1592, (uint64_t)v23);
  __int128 v13 = v24;
  if (v24 == v23)
  {
    uint64_t v14 = 4LL;
    __int128 v13 = v23;
    goto LABEL_5;
  }

  if (v24)
  {
    uint64_t v14 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }

  *(void *)(a1 + 188_Block_object_dispose(va, 8) = 0LL;
  LOBYTE(v20) = 0;
  sub_1012049AC((unsigned __int8 *)(a1 + 1896), "EnableWorkoutEffortBiasCorrection", (unsigned __int8 *)&v20, 0);
  sub_1010657AC(a1 + 1904, a1 + 1592);
  *(void *)(a1 + 2152) = a3;
  *(void *)(a1 + 2160) = 0LL;
  *(void *)(a1 + 2176) = 0LL;
  *(void *)(a1 + 216_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 2224) = v19;
  *(_OWORD *)(a1 + 2240) = xmmword_1013C5290;
  *(void *)(a1 + 22sub_1011C52D0(v1 - 56) = 2LL;
  *(void *)(a1 + 2272) = _D8;
  *(_DWORD *)(a1 + 2280) = -1082130432;
  sub_101065530(&v21, &v20);
  *(_OWORD *)(a1 + 228_Block_object_dispose(va, 8) = v20;
  unsigned __int8 v22 = *(_BYTE *)(a1 + 1897);
  sub_101065394(&v22, (void *)(a1 + 2304));
  sub_101065620(&v21, &v20);
  sub_101060EDC(&v20, (uint64_t *)(a1 + 2288), (void *)(a1 + 2320));
  __int128 v15 = (std::__shared_weak_count *)*((void *)&v20 + 1);
  if (*((void *)&v20 + 1))
  {
    __int128 v16 = (unint64_t *)(*((void *)&v20 + 1) + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return a1;
}

void sub_101060DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  __int128 v7 = *(void **)(v3 + 2160);
  if (v7)
  {
    *(void *)(v3 + 216_Block_object_dispose(va, 8) = v7;
    operator delete(v7);
  }

  __int128 v8 = *(void **)(v3 + 1888);
  *(void *)(v3 + 188_Block_object_dispose(va, 8) = 0LL;
  if (v8) {
    operator delete(v8);
  }
  __int128 v9 = *(void **)(v3 + 1640);
  if (v9 == (void *)(v3 + 1616))
  {
    uint64_t v10 = 4LL;
    __int128 v9 = (void *)(v3 + 1616);
  }

  else
  {
    if (!v9) {
      goto LABEL_10;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_10:
  uint64_t v11 = *(void *)(v3 + 1584);
  *(void *)(v3 + 1584) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = *(void *)(v3 + 1544);
  *(void *)(v3 + 1544) = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  sub_100EDA268((void **)(v3 + 1528), 0LL);
  _Unwind_Resume(a1);
}

void sub_101060ED4()
{
}

void sub_101060EDC(__int128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  __int128 v6 = operator new(0x88uLL);
  __int128 v7 = v6;
  __int128 v19 = *a1;
  *(void *)a1 = 0LL;
  *((void *)a1 + 1) = 0LL;
  __int128 v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v17 = *a2;
  uint64_t v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_101050274((uint64_t)v6, &v19, &v17);
  *a3 = v7;
  uint64_t v11 = v18;
  if (v18)
  {
    uint64_t v12 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v19 + 1);
  if (*((void *)&v19 + 1))
  {
    __int128 v15 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

void sub_101060FCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_101060FF4(uint64_t result)
{
  *(_BYTE *)(result + 27) = 1;
  return result;
}

uint64_t sub_101061000(uint64_t result)
{
  *(_BYTE *)(result + 27) = 0;
  return result;
}

void sub_101061008(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 1608) == 1)
  {
    uint64_t v4 = a1 + 1904;
    uint64_t v5 = a1 + 32;
    v6.n128_f64[0] = sub_10105F0F4(a1 + 32, (uint64_t)v16);
    sub_1010657B0((__n128 *)v4, (unint64_t *)v16, (__n128 *)v15, v6);
    uint64_t v7 = *(void *)(a1 + 1528);
    if (v7)
    {
      sub_10105F0F4(v5, (uint64_t)v15);
      sub_1010680F0(v7, (unint64_t *)v15, (uint64_t)v16);
      sub_101066728((int *)(a1 + 1536), (uint64_t)v16, v15);
    }

    __int128 v8 = *(_OWORD *)(a1 + 1568);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)(a1 + 1552);
    *(_OWORD *)&v16[16] = v8;
    if (*(_BYTE *)(a1 + 1897))
    {
      __int128 v9 = *(float **)(a1 + 1888);
      if (v9)
      {
        sub_10105E880(v9, (float *)v16, (uint64_t)v15);
        *(_OWORD *)unint64_t v16 = *(_OWORD *)v15;
        *(_OWORD *)&v16[10] = *(_OWORD *)&v15[10];
      }
    }

    *(double *)&_WORD v16[8] = a2;
    v16[24] = 1;
    uint64_t v10 = sub_101061134(a1, (uint64_t)v16);
    uint64_t v11 = *(void *)(a1 + 1528);
    if (v11)
    {
      __int128 v12 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)__int128 v15 = *(_OWORD *)v4;
      *(_OWORD *)&uint8_t v15[16] = v12;
      __int128 v13 = *(_OWORD *)(a1 + 1568);
      v14[0] = *(_OWORD *)(a1 + 1552);
      v14[1] = v13;
      sub_101061A34(v10, (uint64_t)v15, (const char *)v14, (uint64_t)v16, v11 + 472, 0);
    }
  }

uint64_t sub_101061134(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 1584))
  {
    double v4 = *(double *)a2;
    double v5 = *(double *)(a2 + 8);
    double v6 = v5 - *(double *)a2;
    double v7 = *(double *)(a1 + 8);
    __int128 v8 = (const unsigned __int8 *)(a1 + 1712);
    uint64_t v68 = *(void *)(a1 + 1872);
    if (*(_BYTE *)(a1 + 25) && *(_BYTE *)(a1 + 27))
    {
      BOOL v9 = sub_10105F0C4((_BYTE *)(a1 + 32));
      if (v68) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v9;
      }
      BOOL v11 = v4 <= v5 && v10;
    }

    else
    {
      BOOL v11 = 0;
    }

    if (*(_BYTE *)(a2 + 25)) {
      BOOL v12 = v6 < v7;
    }
    else {
      BOOL v12 = 1;
    }
    BOOL v17 = !v12 && *(_BYTE *)(a1 + 1880) == 0;
    if (*(_BYTE *)(a2 + 24)) {
      int v18 = 1;
    }
    else {
      int v18 = v17;
    }
    uint64_t v14 = v11 & v18;
    uuid_unparse((const unsigned __int8 *)(a1 + 1728), out);
    uuid_unparse(v8, v101);
    if (*(_BYTE *)(a2 + 24))
    {
      if (!v17) {
        *(_DWORD *)(a2 + 16) = 0;
      }
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      __int128 v19 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
      {
        BOOL v63 = v17;
        BOOL v59 = v11;
        double v20 = *(float *)(a2 + 16);
        int v21 = *(unsigned __int8 *)(a2 + 24);
        double v23 = *(double *)a2;
        uint64_t v22 = *(void *)(a2 + 8);
        if (*(_BYTE *)(a1 + 25)) {
          int v57 = *(unsigned __int8 *)(a1 + 27);
        }
        else {
          int v57 = 0;
        }
        BOOL v29 = sub_10105F0C4((_BYTE *)(a1 + 32));
        int v30 = *(unsigned __int8 *)(a2 + 25);
        int v31 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)std::string buf = 67112962;
        int v104 = v14;
        __int16 v105 = 2048;
        double v106 = v20;
        __int16 v107 = 1024;
        int v108 = v21;
        __int16 v109 = 2048;
        double v110 = v23;
        __int16 v111 = 2048;
        uint64_t v112 = v22;
        __int16 v113 = 2080;
        uint64_t v114 = v101;
        __int16 v115 = 2080;
        uint64_t v116 = out;
        __int16 v117 = 1024;
        BOOL v11 = v59;
        BOOL v118 = v59;
        __int16 v119 = 1024;
        BOOL v17 = v63;
        BOOL v120 = v63;
        __int16 v121 = 1024;
        int v122 = v57;
        __int16 v123 = 1024;
        BOOL v124 = v29;
        __int16 v125 = 1024;
        BOOL v126 = v68 == 0;
        __int16 v127 = 1024;
        BOOL v128 = v4 <= v5;
        __int16 v129 = 1024;
        int v130 = v30;
        __int16 v131 = 1024;
        BOOL v132 = v6 >= v7;
        __int16 v133 = 1024;
        int v134 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, en dTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmS et, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d",  buf,  0x76u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        BOOL v65 = v17;
        BOOL v32 = v11;
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101897F50);
        }
        uint64_t v61 = qword_1019347E8;
        double v33 = *(float *)(a2 + 16);
        int v34 = *(unsigned __int8 *)(a2 + 24);
        double v35 = *(double *)a2;
        uint64_t v36 = *(void *)(a2 + 8);
        __int128 v67 = v8;
        unsigned int v56 = v14;
        if (*(_BYTE *)(a1 + 25)) {
          int v37 = *(unsigned __int8 *)(a1 + 27);
        }
        else {
          int v37 = 0;
        }
        BOOL v48 = sub_10105F0C4((_BYTE *)(a1 + 32));
        int v49 = *(unsigned __int8 *)(a2 + 25);
        int v50 = *(unsigned __int8 *)(a1 + 1880);
        int v69 = 67112962;
        int v70 = v14;
        __int16 v71 = 2048;
        double v72 = v33;
        __int16 v73 = 1024;
        int v74 = v34;
        __int16 v75 = 2048;
        double v76 = v35;
        __int16 v77 = 2048;
        uint64_t v78 = v36;
        __int16 v79 = 2080;
        uint64_t v80 = v101;
        __int16 v81 = 2080;
        std::string::size_type v82 = out;
        __int16 v83 = 1024;
        BOOL v84 = v32;
        __int16 v85 = 1024;
        BOOL v86 = v65;
        __int16 v87 = 1024;
        int v88 = v37;
        __int16 v89 = 1024;
        BOOL v90 = v48;
        __int16 v91 = 1024;
        BOOL v92 = v68 == 0;
        __int16 v93 = 1024;
        BOOL v94 = v4 <= v5;
        __int16 v95 = 1024;
        int v96 = v49;
        __int16 v97 = 1024;
        BOOL v98 = v6 >= v7;
        __int16 v99 = 1024;
        int v100 = v50;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v61,  1LL,  "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, en dTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmS et, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d",  &v69,  118);
        goto LABEL_64;
      }
    }

    else
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      __int128 v24 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v64 = v17;
        BOOL v60 = v11;
        double v25 = *(float *)(a2 + 16);
        int v26 = *(unsigned __int8 *)(a2 + 24);
        double v28 = *(double *)a2;
        uint64_t v27 = *(void *)(a2 + 8);
        if (*(_BYTE *)(a1 + 25)) {
          int v58 = *(unsigned __int8 *)(a1 + 27);
        }
        else {
          int v58 = 0;
        }
        BOOL v38 = sub_10105F0C4((_BYTE *)(a1 + 32));
        int v39 = *(unsigned __int8 *)(a2 + 25);
        int v40 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)std::string buf = 67112962;
        int v104 = v14;
        __int16 v105 = 2048;
        double v106 = v25;
        __int16 v107 = 1024;
        int v108 = v26;
        __int16 v109 = 2048;
        double v110 = v28;
        __int16 v111 = 2048;
        uint64_t v112 = v27;
        __int16 v113 = 2080;
        uint64_t v114 = v101;
        __int16 v115 = 2080;
        uint64_t v116 = out;
        __int16 v117 = 1024;
        BOOL v11 = v60;
        BOOL v118 = v60;
        __int16 v119 = 1024;
        BOOL v17 = v64;
        BOOL v120 = v64;
        __int16 v121 = 1024;
        int v122 = v58;
        __int16 v123 = 1024;
        BOOL v124 = v38;
        __int16 v125 = 1024;
        BOOL v126 = v68 == 0;
        __int16 v127 = 1024;
        BOOL v128 = v4 <= v5;
        __int16 v129 = 1024;
        int v130 = v39;
        __int16 v131 = 1024;
        BOOL v132 = v6 >= v7;
        __int16 v133 = 1024;
        int v134 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, en dTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmS et, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d",  buf,  0x76u);
      }

      if (sub_1002921D0(115, 2))
      {
        BOOL v66 = v17;
        BOOL v42 = v11;
        unsigned int v56 = v14;
        __int128 v67 = v8;
        bzero(buf, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101897F50);
        }
        uint64_t v62 = qword_1019347E8;
        double v43 = *(float *)(a2 + 16);
        int v44 = *(unsigned __int8 *)(a2 + 24);
        double v45 = *(double *)a2;
        uint64_t v46 = *(void *)(a2 + 8);
        if (*(_BYTE *)(a1 + 25)) {
          int v47 = *(unsigned __int8 *)(a1 + 27);
        }
        else {
          int v47 = 0;
        }
        BOOL v52 = sub_10105F0C4((_BYTE *)(a1 + 32));
        int v53 = *(unsigned __int8 *)(a2 + 25);
        int v54 = *(unsigned __int8 *)(a1 + 1880);
        int v69 = 67112962;
        int v70 = v14;
        __int16 v71 = 2048;
        double v72 = v43;
        __int16 v73 = 1024;
        int v74 = v44;
        __int16 v75 = 2048;
        double v76 = v45;
        __int16 v77 = 2048;
        uint64_t v78 = v46;
        __int16 v79 = 2080;
        uint64_t v80 = v101;
        __int16 v81 = 2080;
        std::string::size_type v82 = out;
        __int16 v83 = 1024;
        BOOL v84 = v42;
        __int16 v85 = 1024;
        BOOL v86 = v66;
        __int16 v87 = 1024;
        int v88 = v47;
        __int16 v89 = 1024;
        BOOL v90 = v52;
        __int16 v91 = 1024;
        BOOL v92 = v68 == 0;
        __int16 v93 = 1024;
        BOOL v94 = v4 <= v5;
        __int16 v95 = 1024;
        int v96 = v53;
        __int16 v97 = 1024;
        BOOL v98 = v6 >= v7;
        __int16 v99 = 1024;
        int v100 = v54;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v62,  0LL,  "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, en dTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmS et, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d",  &v69,  118);
LABEL_64:
        __int128 v55 = (uint8_t *)v51;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutEffortManager::attemptWriteToHealthKit(CLWorkoutEffort::Result &) const",  "%s\n",  v51);
        if (v55 != buf) {
          free(v55);
        }
        __int128 v8 = v67;
        uint64_t v14 = v56;
        if (!v56) {
          return v14;
        }
LABEL_54:
        (*(void (**)(void, uint64_t, const unsigned __int8 *))(**(void **)(a1 + 1584) + 16LL))( *(void *)(a1 + 1584),  a2,  v8);
        return v14;
      }
    }

    if (!(_DWORD)v14) {
      return v14;
    }
    goto LABEL_54;
  }

  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F50);
  }
  __int128 v13 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "WorkoutEffortManager, attemptWriteToHealthKit, fHealthKitWriter unexpectedly nil",  buf,  2u);
  }

  uint64_t v14 = 0LL;
  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    LOWORD(v69) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  16LL,  "WorkoutEffortManager, attemptWriteToHealthKit, fHealthKitWriter unexpectedly nil",  &v69,  2);
    unint64_t v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWorkoutEffortManager::attemptWriteToHealthKit(CLWorkoutEffort::Result &) const",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
    return 0LL;
  }

  return v14;
}

void sub_101061A34(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a6)
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    BOOL v9 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1010DDBC0(&v84, "baseResult");
      sub_1010634D8(a2, &v84, &v85);
      if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v10 = &v85;
      }
      else {
        BOOL v10 = (std::stringbuf::string_type *)v85.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v83, "xgbResult");
      BOOL v11 = &v94;
      sub_1010634D8((uint64_t)a3, &v83, &v94);
      if ((v94.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        BOOL v11 = (std::stringbuf::string_type *)v94.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v82, "finalBiasCorrectedResult");
      sub_1010634D8(a4, &v82, &v93);
      int size = (char)v93.__r_.__value_.__s.__size_;
      std::string::size_type v13 = v93.__r_.__value_.__r.__words[0];
      sub_1010637F8(a5 + 136, &__p);
      uint64_t v14 = &v93;
      if (size < 0) {
        uint64_t v14 = (std::stringbuf::string_type *)v13;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      BOOL v90 = v14;
      __int16 v91 = 2080;
      BOOL v92 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "WorkoutEffort ML features at session end, %s, %s, %s, %s",  (uint8_t *)&buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      uint64_t v40 = qword_1019347E8;
      sub_1010DDBC0(&v80, "baseResult");
      sub_1010634D8(a2, &v80, &v94);
      if ((v94.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v41 = &v94;
      }
      else {
        __int128 v41 = (std::stringbuf::string_type *)v94.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v79, "xgbResult");
      sub_1010634D8((uint64_t)a3, &v79, &v93);
      uint64_t v42 = a4;
      if ((v93.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v43 = &v93;
      }
      else {
        double v43 = (std::stringbuf::string_type *)v93.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v78, "finalBiasCorrectedResult");
      uint64_t v44 = a5;
      sub_1010634D8(v42, &v78, &__p);
      int v45 = (char)__p.__r_.__value_.__s.__size_;
      std::string::size_type v46 = __p.__r_.__value_.__r.__words[0];
      sub_1010637F8(v44 + 136, &v77);
      int v47 = &__p;
      if (v45 < 0) {
        int v47 = (std::stringbuf::string_type *)v46;
      }
      if ((v77.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v48 = &v77;
      }
      else {
        BOOL v48 = (std::stringbuf::string_type *)v77.__r_.__value_.__r.__words[0];
      }
      LODWORD(v85.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
      WORD2(v85.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v43;
      HIWORD(v85.__r_.__value_.__r.__words[2]) = 2080;
      BOOL v86 = v47;
      __int16 v87 = 2080;
      int v88 = v48;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v40,  0LL,  "WorkoutEffort ML features at session end, %s, %s, %s, %s",  (const char *)&v85,  42,  v69,  a3);
      int v50 = v49;
      a5 = v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Resul t &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const",  "%s\n",  (const char *)v50);
      if (v50 != &buf) {
        free(v50);
      }
    }

    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    unint64_t v16 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1010639B0((float *)(a5 + 12), &buf);
      int v17 = (char)buf.__r_.__value_.__s.__size_;
      std::string::size_type v18 = buf.__r_.__value_.__r.__words[0];
      sub_101063FD0((float *)(a5 + 184), &v85);
      p_std::stringbuf::string_type buf = &buf;
      if (v17 < 0) {
        p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)v18;
      }
      if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v20 = &v85;
      }
      else {
        double v20 = (std::stringbuf::string_type *)v85.__r_.__value_.__r.__words[0];
      }
      LODWORD(v94.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      WORD2(v94.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v20;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "WorkoutEffort ML features at session end, %s, %s",  (uint8_t *)&v94,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      uint64_t v21 = qword_1019347E8;
      sub_1010639B0((float *)(a5 + 12), &v85);
      int v22 = (char)v85.__r_.__value_.__s.__size_;
      std::string::size_type v23 = v85.__r_.__value_.__r.__words[0];
      sub_101063FD0((float *)(a5 + 184), &v94);
      __int128 v24 = &v85;
      if (v22 < 0) {
        __int128 v24 = (std::stringbuf::string_type *)v23;
      }
      if ((v94.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v25 = &v94;
      }
      else {
        double v25 = (std::stringbuf::string_type *)v94.__r_.__value_.__r.__words[0];
      }
      LODWORD(v93.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      WORD2(v93.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v93.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
      LODWORD(v6_Block_object_dispose(va, 8) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v21,  0LL,  "WorkoutEffort ML features at session end, %s, %s",  (const char *)&v93,  v68);
      uint64_t v27 = v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Resul t &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const",  "%s\n",  (const char *)v27);
LABEL_167:
      if (v27 != &buf) {
        free(v27);
      }
    }
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    double v28 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
    {
      sub_1010DDBC0(&v76, "baseResult");
      sub_1010634D8(a2, &v76, &v85);
      if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v29 = &v85;
      }
      else {
        BOOL v29 = (std::stringbuf::string_type *)v85.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v75, "xgbResult");
      int v30 = &v94;
      sub_1010634D8((uint64_t)a3, &v75, &v94);
      if ((v94.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v30 = (std::stringbuf::string_type *)v94.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v74, "finalBiasCorrectedResult");
      sub_1010634D8(a4, &v74, &v93);
      int v31 = (char)v93.__r_.__value_.__s.__size_;
      std::string::size_type v32 = v93.__r_.__value_.__r.__words[0];
      sub_1010637F8(a5 + 136, &__p);
      double v33 = &v93;
      if (v31 < 0) {
        double v33 = (std::stringbuf::string_type *)v32;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v34 = &__p;
      }
      else {
        int v34 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      BOOL v90 = v33;
      __int16 v91 = 2080;
      BOOL v92 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "WorkoutEffort ML features update, %s, %s, %s, %s",  (uint8_t *)&buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      uint64_t v51 = qword_1019347E8;
      sub_1010DDBC0(&v73, "baseResult");
      sub_1010634D8(a2, &v73, &v94);
      if ((v94.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v52 = &v94;
      }
      else {
        BOOL v52 = (std::stringbuf::string_type *)v94.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v72, "xgbResult");
      sub_1010634D8((uint64_t)a3, &v72, &v93);
      uint64_t v53 = a4;
      if ((v93.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v54 = &v93;
      }
      else {
        int v54 = (std::stringbuf::string_type *)v93.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v71, "finalBiasCorrectedResult");
      uint64_t v55 = a5;
      sub_1010634D8(v53, &v71, &__p);
      int v56 = (char)__p.__r_.__value_.__s.__size_;
      std::string::size_type v57 = __p.__r_.__value_.__r.__words[0];
      sub_1010637F8(v55 + 136, &v77);
      int v58 = &__p;
      if (v56 < 0) {
        int v58 = (std::stringbuf::string_type *)v57;
      }
      if ((v77.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v59 = &v77;
      }
      else {
        BOOL v59 = (std::stringbuf::string_type *)v77.__r_.__value_.__r.__words[0];
      }
      LODWORD(v85.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
      WORD2(v85.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v54;
      HIWORD(v85.__r_.__value_.__r.__words[2]) = 2080;
      BOOL v86 = v58;
      __int16 v87 = 2080;
      int v88 = v59;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v51,  1LL,  "WorkoutEffort ML features update, %s, %s, %s, %s",  (const char *)&v85,  42,  v69,  a3);
      uint64_t v61 = v60;
      a5 = v55;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Resul t &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const",  "%s\n",  (const char *)v61);
      if (v61 != &buf) {
        free(v61);
      }
    }

    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    double v35 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
    {
      sub_1010639B0((float *)(a5 + 12), &buf);
      int v36 = (char)buf.__r_.__value_.__s.__size_;
      std::string::size_type v37 = buf.__r_.__value_.__r.__words[0];
      sub_101063FD0((float *)(a5 + 184), &v85);
      BOOL v38 = &buf;
      if (v36 < 0) {
        BOOL v38 = (std::stringbuf::string_type *)v37;
      }
      if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v39 = &v85;
      }
      else {
        int v39 = (std::stringbuf::string_type *)v85.__r_.__value_.__r.__words[0];
      }
      LODWORD(v94.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
      WORD2(v94.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v39;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "WorkoutEffort ML features update, %s, %s",  (uint8_t *)&v94,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      uint64_t v62 = qword_1019347E8;
      sub_1010639B0((float *)(a5 + 12), &v85);
      int v63 = (char)v85.__r_.__value_.__s.__size_;
      std::string::size_type v64 = v85.__r_.__value_.__r.__words[0];
      sub_101063FD0((float *)(a5 + 184), &v94);
      BOOL v65 = &v85;
      if (v63 < 0) {
        BOOL v65 = (std::stringbuf::string_type *)v64;
      }
      if ((v94.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v66 = &v94;
      }
      else {
        BOOL v66 = (std::stringbuf::string_type *)v94.__r_.__value_.__r.__words[0];
      }
      LODWORD(v93.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
      WORD2(v93.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v93.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v66;
      LODWORD(v6_Block_object_dispose(va, 8) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v62,  1LL,  "WorkoutEffort ML features update, %s, %s",  (const char *)&v93,  v68);
      uint64_t v27 = v67;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Resul t &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const",  "%s\n",  (const char *)v27);
      goto LABEL_167;
    }
  }

void sub_1010626E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void sub_101062954(uint64_t a1, double *a2)
{
}

double sub_101062984(uint64_t a1, uint64_t a2)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F50);
  }
  double v4 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Feeding Body metrics, estimating HR max,min and vo2Max",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "Feeding Body metrics, estimating HR max,min and vo2Max",  v8,  2);
    double v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::feedBodyMetrics(const CLBodyMetrics &)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  *(void *)&double result = sub_10105EEEC(a1 + 32, a2).n128_u64[0];
  return result;
}

uint64_t sub_101062B24(uint64_t a1, __int128 *a2)
{
  return sub_10105F470(a1 + 1592, a2);
}

void sub_101062B2C(uint64_t a1, uint64_t a2)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F50);
  }
  double v4 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)a2;
    double v6 = *(double *)(a2 + 8);
    if (v6 == 1.79769313e308) {
      double v6 = -1.0;
    }
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v9 = *(void *)(a2 + 112);
    uint64_t v10 = *(void *)(a2 + 120);
    uint64_t v11 = *(void *)(a2 + 128);
    *(_DWORD *)std::stringbuf::string_type buf = 134219520;
    uint64_t v41 = v7;
    __int16 v42 = 2048;
    uint64_t v43 = v5;
    __int16 v44 = 2048;
    double v45 = v6;
    __int16 v46 = 1024;
    int v47 = v8;
    __int16 v48 = 1024;
    int v49 = v9;
    __int16 v50 = 1024;
    int v51 = v10;
    __int16 v52 = 1024;
    int v53 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "WorkoutEffortManager, respondToWorkoutEvent, eventTime, %f, startTime, %f, endTime, %f, eventType, %d, workoutType , %d, locationType, %d, genericWorkoutLabel ,%d",  buf,  0x38u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    uint64_t v16 = *(void *)a2;
    double v17 = *(double *)(a2 + 8);
    if (v17 == 1.79769313e308) {
      double v17 = -1.0;
    }
    uint64_t v19 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 24);
    uint64_t v20 = *(void *)(a2 + 112);
    uint64_t v21 = *(void *)(a2 + 120);
    uint64_t v22 = *(void *)(a2 + 128);
    int v26 = 134219520;
    uint64_t v27 = v18;
    __int16 v28 = 2048;
    uint64_t v29 = v16;
    __int16 v30 = 2048;
    double v31 = v17;
    __int16 v32 = 1024;
    int v33 = v19;
    __int16 v34 = 1024;
    int v35 = v20;
    __int16 v36 = 1024;
    int v37 = v21;
    __int16 v38 = 1024;
    int v39 = v22;
    LODWORD(v25) = 56;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "WorkoutEffortManager, respondToWorkoutEvent, eventTime, %f, startTime, %f, endTime, %f, eventType, %d, workoutType , %d, locationType, %d, genericWorkoutLabel ,%d",  COERCE_DOUBLE(&v26),  v25);
    __int128 v24 = (uint8_t *)v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::respondToWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
  }

  uint64_t v12 = *(void *)(a2 + 16);
  switch(v12)
  {
    case 9LL:
      uint64_t v13 = *(void *)(a1 + 1528);
      if (v13) {
        sub_1010679BC(v13, (uint64_t *)a2);
      }
      break;
    case 10LL:
      sub_101063420(a1, *(double *)(a2 + 24));
      break;
    case 11LL:
    case 12LL:
    case 13LL:
    case 14LL:
    case 15LL:
      return;
    case 16LL:
      uint64_t v14 = *(double **)(a1 + 1528);
      if (v14) {
        sub_1010679C4(v14, *(double *)(a2 + 24));
      }
      break;
    case 17LL:
      __int128 v15 = *(double **)(a1 + 1528);
      if (v15) {
        sub_1010679E0(v15, *(double *)(a2 + 24));
      }
      break;
    default:
      if (v12 == 1)
      {
        sub_10106317C(a1, *(double *)(a2 + 8));
      }

      else if (!v12)
      {
        sub_101062E60(a1, *(double *)a2);
      }

      break;
  }

void sub_101062E60(uint64_t a1, double a2)
{
  double v4 = operator new(0x2D8uLL);
  sub_1010679B8(v4, a1 + 1648, __p);
  uint64_t v5 = a1 + 1528;
  buf.__r_.__value_.__r.__words[0] = 0LL;
  sub_100EDA268((void **)(a1 + 1528), v4);
  sub_100EDA268(&buf, 0LL);
  if (*(void *)(a1 + 1528))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    double v6 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10106415C((float *)(*(void *)v5 + 476LL), __p);
      uint64_t v7 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
         ? __p
         : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "WorkoutEffortManager, body metrics on workout start, %{private}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      uint64_t v10 = qword_1019347E8;
      sub_10106415C((float *)(*(void *)v5 + 476LL), &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::stringbuf::string_type buf = &buf;
      }
      else {
        p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      }
      int v15 = 136380675;
      uint64_t v16 = p_buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v10,  0LL,  "WorkoutEffortManager, body metrics on workout start, %{private}s",  &v15,  12);
      uint64_t v13 = v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::onWorkoutStart(CFAbsoluteTime)",  "%s\n",  (const char *)v13);
      if (v13 != __p) {
        free(v13);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1897))
  {
    sub_101064280(a1);
    uuid_copy((unsigned __int8 *)(a1 + 2192), (const unsigned __int8 *)(a1 + 1712));
    uuid_copy((unsigned __int8 *)(a1 + 2208), (const unsigned __int8 *)(a1 + 1728));
    *(_OWORD *)(a1 + 2240) = *(_OWORD *)(a1 + 1760);
    *(void *)(a1 + 22sub_1011C52D0(v1 - 56) = *(void *)(a1 + 1776);
    sub_101064620((void *)a1);
  }

  uint64_t v8 = operator new(0x30uLL);
  sub_10105E848( (uint64_t)v8,  (uint64_t *)(a1 + 2160),  *(void *)(a1 + 1760),  *(void *)(a1 + 1768),  *(void *)(a1 + 1776),  a2);
  uint64_t v9 = *(void **)(a1 + 1888);
  *(void *)(a1 + 188_Block_object_dispose(va, 8) = v8;
  if (v9) {
    operator delete(v9);
  }
}

void sub_10106315C(_Unwind_Exception *a1)
{
}

void sub_10106317C(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 1528);
  if (v4) {
    sub_101066728((int *)(a1 + 1536), v4 + 472, buf);
  }
  __int128 v5 = *(_OWORD *)(a1 + 1568);
  *(_OWORD *)double v17 = *(_OWORD *)(a1 + 1552);
  *(_OWORD *)&v17[16] = v5;
  if (*(_BYTE *)(a1 + 1897))
  {
    double v6 = *(float **)(a1 + 1888);
    if (v6)
    {
      sub_10105E880(v6, (float *)v17, (uint64_t)buf);
      *(_OWORD *)double v17 = *(_OWORD *)buf;
      *(_OWORD *)&v17[10] = *(_OWORD *)&buf[10];
    }
  }

  *(double *)&_WORD v17[8] = a2;
  v17[24] = 0;
  uint64_t v7 = sub_101061134(a1, (uint64_t)v17);
  if (*(void *)(a1 + 2152))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    uint64_t v8 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortManager, onWorkoutStop, sending score to clients",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortManager, onWorkoutStop, sending score to clients",  v16,  2);
      int v15 = (char *)v14;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutEffortManager::onWorkoutStop(CFAbsoluteTime)", "%s\n", v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    uint64_t v7 = (*(uint64_t (**)(void, _BYTE *))(**(void **)(a1 + 2152) + 16LL))(*(void *)(a1 + 2152), v17);
  }

  uint64_t v9 = (_OWORD *)(a1 + 1552);
  uint64_t v10 = *(void *)(a1 + 1528);
  if (v10)
  {
    __int128 v11 = *(_OWORD *)(a1 + 1920);
    *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 1904);
    *(_OWORD *)&uint8_t buf[16] = v11;
    __int128 v12 = *(_OWORD *)(a1 + 1568);
    v16[0] = *v9;
    v16[1] = v12;
    sub_101061A34(v7, (uint64_t)buf, (const char *)v16, (uint64_t)v17, v10 + 472, 1);
    if (!*(_BYTE *)(a1 + 1897)) {
      goto LABEL_18;
    }
    sub_101064778(a1, *(void *)(a1 + 1528) + 472LL);
  }

  if (*(_BYTE *)(a1 + 1897))
  {
    __int128 v13 = *(_OWORD *)(a1 + 1568);
    *(_OWORD *)std::stringbuf::string_type buf = *v9;
    *(_OWORD *)&uint8_t buf[16] = v13;
    sub_101064934(a1, (uint64_t)buf);
    sub_101064B34(a1);
    sub_101064CD0((void *)a1);
  }

double sub_101063420(uint64_t a1, double a2)
{
  uint64_t v4 = *(void **)(a1 + 1888);
  *(void *)(a1 + 188_Block_object_dispose(va, 8) = 0LL;
  if (v4) {
    operator delete(v4);
  }
  *(void *)(a1 + 2216) = 0LL;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 2224) = _Q0;
  *(_OWORD *)(a1 + 2240) = xmmword_1013C5290;
  *(void *)(a1 + 22sub_1011C52D0(v1 - 56) = 2LL;
  *(void *)(a1 + 2264) = 0LL;
  __asm { FMOV            V0.2S, #-1.0 }

  *(double *)(a1 + 2272) = result;
  *(_DWORD *)(a1 + 2280) = -1082130432;
  return result;
}

uint64_t sub_1010634BC(uint64_t a1, int a2, double a3)
{
  return 1LL;
}

uint64_t sub_1010634D8@<X0>(uint64_t a1@<X0>, std::string *a2@<X1>, std::stringbuf::string_type *a3@<X8>)
{
  uint64_t v6 = v46;
  *(_DWORD *)((char *)&v46 + *(void *)(v46 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v46 + *(void *)(v46 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v47.__loc_.__locale_ + *(void *)(v6 - 24)) = (std::locale::__imp *)2;
  if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (a2->__r_.__value_.__s.__size_) {
      goto LABEL_3;
    }
LABEL_6:
    sub_1010DDBC0(&v44, "");
    goto LABEL_8;
  }

  if (!a2->__r_.__value_.__l.__size_) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = std::string::append(a2, "_");
  if ((char)v7->__r_.__value_.__s.__size_ < 0)
  {
    sub_1010DD48C(&v44, v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
  }

  else
  {
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type cap = v7->__r_.__value_.__l.__cap_;
    __int128 v44 = v8;
  }

void sub_1010637E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1010637F8@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = v11;
  *(_DWORD *)((char *)&v11 + *(void *)(v11 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v11 + *(void *)(v11 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v12.__loc_.__locale_ + *(void *)(v4 - 24)) = (std::locale::__imp *)2;
  sub_10000CF44(&v11, (uint64_t)"startTime, ", 11LL);
  __int128 v5 = (void *)std::ostream::operator<<(*(double *)a1);
  sub_10000CF44(v5, (uint64_t)", ", 2LL);
  sub_10000CF44(&v11, (uint64_t)"endTime, ", 9LL);
  uint64_t v6 = (void *)std::ostream::operator<<(*(double *)(a1 + 8));
  sub_10000CF44(v6, (uint64_t)", ", 2LL);
  uint64_t v7 = sub_10000CF44(&v11, (uint64_t)"workoutType, ", 13LL);
  __int128 v8 = (void *)std::ostream::operator<<(v7, *(void *)(a1 + 16));
  sub_10000CF44(v8, (uint64_t)", ", 2LL);
  sub_10000CF44(&v11, (uint64_t)"sessionDurationActiveMinutes, ", 30LL);
  std::string::size_type v9 = (void *)std::ostream::operator<<(*(double *)(a1 + 40));
  sub_10000CF44(v9, (uint64_t)", ", 2LL);
  sub_10000CF44(&v11, (uint64_t)"sessionDurationTotalMinutes, ", 29LL);
  std::ostream::operator<<(*(double *)(a1 + 32));
  std::stringbuf::str(a2, &v12);
  std::streambuf::~streambuf(&v12);
  return std::ios::~ios(&v13);
}

void sub_10106399C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1010639B0@<X0>(float *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  *(_DWORD *)((char *)&v66 + *(void *)(v66 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v66 + *(void *)(v66 - 24) + 8) & 0xFFFFFEFB | 4;
  uint64_t v4 = sub_10000CF44(&v66, (uint64_t)"hrByHrMaxMax, ", 14LL);
  __int128 v5 = (void *)std::ostream::operator<<(v4, *a1);
  sub_10000CF44(v5, (uint64_t)", ", 2LL);
  uint64_t v6 = sub_10000CF44(&v66, (uint64_t)"hrByHrMaxMin, ", 14LL);
  uint64_t v7 = (void *)std::ostream::operator<<(v6, a1[1]);
  sub_10000CF44(v7, (uint64_t)", ", 2LL);
  __int128 v8 = sub_10000CF44(&v66, (uint64_t)"hrByHrMaxStd, ", 14LL);
  std::string::size_type v9 = (void *)std::ostream::operator<<(v8, a1[2]);
  sub_10000CF44(v9, (uint64_t)", ", 2LL);
  uint64_t v10 = sub_10000CF44(&v66, (uint64_t)"hrByHrMaxAvg, ", 14LL);
  uint64_t v11 = (void *)std::ostream::operator<<(v10, a1[3]);
  sub_10000CF44(v11, (uint64_t)", ", 2LL);
  std::stringbuf v12 = sub_10000CF44(&v66, (uint64_t)"hrByHrMaxRange, ", 16LL);
  uint64_t v13 = (void *)std::ostream::operator<<(v12, a1[4]);
  sub_10000CF44(v13, (uint64_t)", ", 2LL);
  uint64_t v14 = sub_10000CF44(&v66, (uint64_t)"fractionSessionWithHrAvailable, ", 32LL);
  int v15 = (void *)std::ostream::operator<<(v14, a1[5]);
  sub_10000CF44(v15, (uint64_t)", ", 2LL);
  int v16 = sub_10000CF44(&v66, (uint64_t)"observedHrMax, ", 15LL);
  uint64_t v17 = (void *)std::ostream::operator<<(v16, a1[6]);
  sub_10000CF44(v17, (uint64_t)", ", 2LL);
  uint64_t v18 = sub_10000CF44(&v66, (uint64_t)"hrAbove83Time, ", 15LL);
  uint64_t v19 = (void *)std::ostream::operator<<(v18, a1[11]);
  sub_10000CF44(v19, (uint64_t)", ", 2LL);
  uint64_t v20 = sub_10000CF44(&v66, (uint64_t)"hrAbove90Time, ", 15LL);
  int v21 = (void *)std::ostream::operator<<(v20, a1[12]);
  sub_10000CF44(v21, (uint64_t)", ", 2LL);
  uint64_t v22 = sub_10000CF44(&v66, (uint64_t)"hrAbove93Time, ", 15LL);
  uint64_t v23 = (void *)std::ostream::operator<<(v22, a1[13]);
  sub_10000CF44(v23, (uint64_t)", ", 2LL);
  __int128 v24 = sub_10000CF44(&v66, (uint64_t)"hrAbove93o5Time, ", 17LL);
  double v25 = (void *)std::ostream::operator<<(v24, a1[14]);
  sub_10000CF44(v25, (uint64_t)", ", 2LL);
  int v26 = sub_10000CF44(&v66, (uint64_t)"hrAbove94Time, ", 15LL);
  uint64_t v27 = (void *)std::ostream::operator<<(v26, a1[15]);
  sub_10000CF44(v27, (uint64_t)", ", 2LL);
  uint64_t v28 = sub_10000CF44(&v66, (uint64_t)"hrAbove94o5Time, ", 17LL);
  uint64_t v29 = (void *)std::ostream::operator<<(v28, a1[16]);
  sub_10000CF44(v29, (uint64_t)", ", 2LL);
  __int16 v30 = sub_10000CF44(&v66, (uint64_t)"hrAbove95Time, ", 15LL);
  double v31 = (void *)std::ostream::operator<<(v30, a1[17]);
  sub_10000CF44(v31, (uint64_t)", ", 2LL);
  int v32 = sub_10000CF44(&v66, (uint64_t)"hrAbove95o5Time, ", 17LL);
  uint64_t v33 = (void *)std::ostream::operator<<(v32, a1[18]);
  sub_10000CF44(v33, (uint64_t)", ", 2LL);
  uint64_t v34 = sub_10000CF44(&v66, (uint64_t)"hrAbove96Time, ", 15LL);
  int v35 = (void *)std::ostream::operator<<(v34, a1[19]);
  sub_10000CF44(v35, (uint64_t)", ", 2LL);
  __int16 v36 = sub_10000CF44(&v66, (uint64_t)"hrAbove97Time, ", 15LL);
  int v37 = (void *)std::ostream::operator<<(v36, a1[20]);
  sub_10000CF44(v37, (uint64_t)", ", 2LL);
  int v38 = sub_10000CF44(&v66, (uint64_t)"hrAbove98Time, ", 15LL);
  uint64_t v39 = (void *)std::ostream::operator<<(v38, a1[21]);
  sub_10000CF44(v39, (uint64_t)", ", 2LL);
  uint64_t v40 = sub_10000CF44(&v66, (uint64_t)"hrAbove99Time, ", 15LL);
  uint64_t v41 = (void *)std::ostream::operator<<(v40, a1[22]);
  sub_10000CF44(v41, (uint64_t)", ", 2LL);
  __int16 v42 = sub_10000CF44(&v66, (uint64_t)"hrAbove100Time, ", 16LL);
  uint64_t v43 = (void *)std::ostream::operator<<(v42, a1[23]);
  sub_10000CF44(v43, (uint64_t)", ", 2LL);
  __int128 v44 = sub_10000CF44(&v66, (uint64_t)"hrAbove101Time, ", 16LL);
  double v45 = (void *)std::ostream::operator<<(v44, a1[24]);
  sub_10000CF44(v45, (uint64_t)", ", 2LL);
  uint64_t v46 = sub_10000CF44(&v66, (uint64_t)"hrAbove102Time, ", 16LL);
  std::stringbuf v47 = (void *)std::ostream::operator<<(v46, a1[25]);
  sub_10000CF44(v47, (uint64_t)", ", 2LL);
  uint64_t v48 = sub_10000CF44(&v66, (uint64_t)"hrAbove103Time, ", 16LL);
  int v49 = (void *)std::ostream::operator<<(v48, a1[26]);
  sub_10000CF44(v49, (uint64_t)", ", 2LL);
  __int16 v50 = sub_10000CF44(&v66, (uint64_t)"hrAbove104Time, ", 16LL);
  int v51 = (void *)std::ostream::operator<<(v50, a1[27]);
  sub_10000CF44(v51, (uint64_t)", ", 2LL);
  __int16 v52 = sub_10000CF44(&v66, (uint64_t)"hrAbove83Ratio, ", 16LL);
  int v53 = (void *)std::ostream::operator<<(v52, a1[28]);
  sub_10000CF44(v53, (uint64_t)", ", 2LL);
  int v54 = sub_10000CF44(&v66, (uint64_t)"hrAbove90Ratio, ", 16LL);
  uint64_t v55 = (void *)std::ostream::operator<<(v54, a1[29]);
  sub_10000CF44(v55, (uint64_t)", ", 2LL);
  int v56 = sub_10000CF44(&v66, (uint64_t)"hrAbove93Ratio, ", 16LL);
  uint64_t v57 = (void *)std::ostream::operator<<(v56, a1[30]);
  sub_10000CF44(v57, (uint64_t)", ", 2LL);
  int v58 = sub_10000CF44(&v66, (uint64_t)"activityWalkingRatio, ", 22LL);
  BOOL v59 = (void *)std::ostream::operator<<(v58, a1[7]);
  sub_10000CF44(v59, (uint64_t)", ", 2LL);
  BOOL v60 = sub_10000CF44(&v66, (uint64_t)"activityRunningRatio, ", 22LL);
  uint64_t v61 = (void *)std::ostream::operator<<(v60, a1[8]);
  sub_10000CF44(v61, (uint64_t)", ", 2LL);
  uint64_t v62 = sub_10000CF44(&v66, (uint64_t)"activityCyclingRatio, ", 22LL);
  int v63 = (void *)std::ostream::operator<<(v62, a1[9]);
  sub_10000CF44(v63, (uint64_t)", ", 2LL);
  std::string::size_type v64 = sub_10000CF44(&v66, (uint64_t)"activityOtherRatio, ", 20LL);
  std::ostream::operator<<(v64, a1[10]);
  std::stringbuf::str(a2, &v67);
  std::streambuf::~streambuf(&v67);
  return std::ios::~ios(&v68);
}

void sub_101063FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_101063FD0@<X0>(float *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  *(_DWORD *)((char *)&v13 + *(void *)(v13 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v13 + *(void *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
  uint64_t v4 = sub_10000CF44(&v13, (uint64_t)"estimatedEffortBLHRMax, ", 24LL);
  __int128 v5 = (void *)std::ostream::operator<<(v4, *a1);
  sub_10000CF44(v5, (uint64_t)", ", 2LL);
  uint64_t v6 = sub_10000CF44(&v13, (uint64_t)"estimatedEffortBLHRMin, ", 24LL);
  uint64_t v7 = (void *)std::ostream::operator<<(v6, a1[1]);
  sub_10000CF44(v7, (uint64_t)", ", 2LL);
  __int128 v8 = sub_10000CF44(&v13, (uint64_t)"estimatedEffortBLHRAvg, ", 24LL);
  std::string::size_type v9 = (void *)std::ostream::operator<<(v8, a1[2]);
  sub_10000CF44(v9, (uint64_t)", ", 2LL);
  uint64_t v10 = sub_10000CF44(&v13, (uint64_t)"estimatedEffortBLHRStd, ", 24LL);
  uint64_t v11 = (void *)std::ostream::operator<<(v10, a1[3]);
  sub_10000CF44(v11, (uint64_t)", ", 2LL);
  std::stringbuf::str(a2, &v14);
  std::streambuf::~streambuf(&v14);
  return std::ios::~ios(&v15);
}

void sub_101064148(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10106415C@<X0>(float *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  *(_DWORD *)((char *)&v8 + *(void *)(v8 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v8 + *(void *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  uint64_t v4 = sub_10000CF44(&v8, (uint64_t)"vo2Max, ", 8LL);
  __int128 v5 = (void *)std::ostream::operator<<(v4, *a1);
  sub_10000CF44(v5, (uint64_t)", ", 2LL);
  uint64_t v6 = sub_10000CF44(&v8, (uint64_t)"hrMax, ", 7LL);
  std::ostream::operator<<(v6, a1[1]);
  std::stringbuf::str(a2, &v9);
  std::streambuf::~streambuf(&v9);
  return std::ios::~ios(&v10);
}

void sub_10106426C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_101064280(uint64_t a1)
{
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v13 = 0u;
  uint64_t v2 = *(void *)(a1 + 2160);
  if (v2 != *(void *)(a1 + 2168)) {
    *(void *)(a1 + 216_Block_object_dispose(va, 8) = v2;
  }
  int v3 = sub_101058AAC(*(_BYTE **)(a1 + 2304), 0x1Eu, (uint64_t)__p, (char **)(a1 + 2160));
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F50);
  }
  uint64_t v4 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(*(void *)(a1 + 2168) - *(void *)(a1 + 2160)) >> 3);
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    uint64_t v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got %zu historical records from db", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    uint64_t v7 = 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(*(void *)(a1 + 2168) - *(void *)(a1 + 2160)) >> 3);
    int v14 = 134217984;
    uint64_t v15 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  1LL,  "Got %zu historical records from db",  (size_t)&v14);
    std::stringbuf v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutEffortManager::prepareHistoricalSessionData()", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  if (v3 != 100)
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    uint64_t v6 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      LODWORD(v17) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Reteriving historical session from db failed with error : %u",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      int v14 = 67109120;
      LODWORD(v15) = v3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  16LL,  "Reteriving historical session from db failed with error : %u",  &v14);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWorkoutEffortManager::prepareHistoricalSessionData()", "%s\n", v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  if (__p[1])
  {
    *(void **)&__int128 v13 = __p[1];
    operator delete(__p[1]);
  }

void sub_1010645FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101064620(void *result)
{
  if (result[286])
  {
    uint64_t v1 = result;
    uint64_t v2 = result[270];
    if (result[271] != v2)
    {
      unint64_t v3 = 0LL;
      uint64_t v4 = 8LL;
      do
      {
        uuid_unparse((const unsigned __int8 *)(v2 + v4), out);
         -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  +[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", out, 4LL));
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v1[286] + 16LL))(v1[286]);
        ++v3;
        uint64_t v2 = v1[270];
        v4 += 104LL;
      }

      while (0x4EC4EC4EC4EC4EC5LL * ((v1[271] - v2) >> 3) > v3);
    }
  }

  return result;
}

void sub_101064778(uint64_t a1, uint64_t a2)
{
  *(double *)(a1 + 2264) = *(float *)(a2 + 36);
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F50);
  }
  unint64_t v3 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 2264);
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    uint64_t v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "WorkoutEffortManager, updating session summary with ML features, hrMax, %f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    uint64_t v5 = *(void *)(a1 + 2264);
    int v8 = 134217984;
    uint64_t v9 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "WorkoutEffortManager, updating session summary with ML features, hrMax, %f",  COERCE_DOUBLE(&v8));
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::updateSessionMLFeatures(const CLWorkoutEffort::MLFeatures &)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

void sub_101064934(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 2272) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 2224) = *(_OWORD *)a2;
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F50);
  }
  unint64_t v3 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    double v4 = *(float *)(a1 + 2272);
    uint64_t v5 = *(void *)(a1 + 2224);
    uint64_t v6 = *(void *)(a1 + 2232);
    *(_DWORD *)std::stringbuf::string_type buf = 134218496;
    double v20 = v4;
    __int16 v21 = 2048;
    uint64_t v22 = v5;
    __int16 v23 = 2048;
    uint64_t v24 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "updateSessionEstimatedEffort %f, %f, %f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    double v7 = *(float *)(a1 + 2272);
    uint64_t v8 = *(void *)(a1 + 2224);
    uint64_t v9 = *(void *)(a1 + 2232);
    int v13 = 134218496;
    double v14 = v7;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    LODWORD(v12) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "updateSessionEstimatedEffort %f, %f, %f",  COERCE_DOUBLE(&v13),  v12);
    uint64_t v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::updateSessionEstimatedEffort(const CLWorkoutEffort::Result &)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

void sub_101064B34(uint64_t a1)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F50);
  }
  uint64_t v2 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inserting current session info in DB", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "Inserting current session info in DB",  v5,  2);
    double v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutEffortManager::writeCurrentSessionToDb()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_101057B9C(*(void *)(a1 + 2304), a1 + 2184);
}

void sub_101064CD0(void *a1)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101897F50);
  }
  uint64_t v2 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Updating user response in db", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    LOWORD(v20[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "Updating user response in db",  v20,  2);
    __int16 v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutEffortManager::updateUserResponseInDb()", "%s\n", v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  unint64_t v3 = (_OWORD *)a1[270];
  for (i = (_OWORD *)a1[271]; v3 != i; unint64_t v3 = (_OWORD *)((char *)v3 + 104))
  {
    __int128 v5 = *v3;
    __int128 v6 = v3[2];
    v20[1] = v3[1];
    void v20[2] = v6;
    v20[0] = v5;
    __int128 v7 = v3[3];
    __int128 v8 = v3[4];
    __int128 v9 = v3[5];
    uint64_t v21 = *((void *)v3 + 12);
    void v20[4] = v8;
    v20[5] = v9;
    v20[3] = v7;
    uint64_t v10 = a1[288];
    memmove(__dst, v3, 0x68uLL);
    if ((sub_10105B9A8(v10, (uint64_t)__dst) & 1) == 0)
    {
      uuid_unparse((const unsigned __int8 *)v20 + 8, out);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      uint64_t v11 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 136315138;
        __int16 v23 = out;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to update user response for session %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101897F50);
        }
        int v16 = 136315138;
        __int16 v17 = out;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  16LL,  "Failed to update user response for session %s",  (const char *)&v16);
        int v13 = (uint8_t *)v12;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWorkoutEffortManager::updateUserResponseInDb()", "%s\n", v12);
        if (v13 != buf) {
          free(v13);
        }
      }
    }
  }

void sub_101065040(uint64_t a1, int a2, double a3, double a4, double a5)
{
  if (a2 == 100)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    __int128 v8 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "WorkoutEffortManager, Got healthkit user response callback for workout",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      LOWORD(v1_Block_object_dispose(va, 8) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "WorkoutEffortManager, Got healthkit user response callback for workout",  &v18,  2);
      double v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::queryHealthKitForUserResponse()_block_invoke",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    float v9 = a5;
    *(float *)(*(void *)(v7 + 2160) + 104LL * *(int *)(a1 + 48) + 96) = v9;
  }

  else
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101897F50);
    }
    uint64_t v11 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)std::stringbuf::string_type buf = 138412546;
      uint64_t v23 = v12;
      __int16 v24 = 1024;
      int v25 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "WorkoutEffortManager, Failed HKQuery for workout %@, with error %d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101897F50);
      }
      uint64_t v15 = *(void *)(a1 + 32);
      int v18 = 138412546;
      uint64_t v19 = v15;
      __int16 v20 = 1024;
      int v21 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "WorkoutEffortManager, Failed HKQuery for workout %@, with error %d",  &v18,  18);
      __int16 v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortManager::queryHealthKitForUserResponse()_block_invoke",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }
  }

void sub_101065368(id a1)
{
  qword_1019347E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

void *sub_101065394@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x1F8uLL);
  double result = sub_1010653EC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1010653D8(_Unwind_Exception *a1)
{
}

void *sub_1010653EC(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101897F80;
  sub_101057240(a1 + 3, *a2, 0LL);
  return a1;
}

void sub_10106542C(_Unwind_Exception *a1)
{
}

void sub_101065440(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101897F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101065454(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101897F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_101065478(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void *sub_101065490(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_101897FD0;
  result[1] = v3;
  return result;
}

uint64_t sub_1010654C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101897FD0;
  a2[1] = v2;
  return result;
}

void sub_1010654E0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1010654E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_101065524()
{
}

void *sub_101065530@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x28uLL);
  double result = sub_101065588(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101065574(_Unwind_Exception *a1)
{
}

void *sub_101065588(void *a1, uint64_t *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101898050;
  sub_10106823C(a1 + 3, *a2);
  return a1;
}

void sub_1010655C4(_Unwind_Exception *a1)
{
}

void sub_1010655D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101898050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010655EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101898050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_101065610(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_101065620@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x58uLL);
  double result = sub_101065678(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101065664(_Unwind_Exception *a1)
{
}

void *sub_101065678(void *a1, void *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1018980A0;
  sub_10104FD80(a1 + 3, *a2);
  return a1;
}

void sub_1010656B4(_Unwind_Exception *a1)
{
}

void sub_1010656C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018980A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010656DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018980A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_101065700(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 8LL))(a1 + 24);
}

uint64_t sub_101065710(uint64_t a1, uint64_t a2)
{
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)a1 = _Q0;
  __asm { FMOV            V1.2S, #-1.0 }

  *(void *)(a1 + 16) = _D1;
  *(_WORD *)(a1 + 24) = 1;
  *(void *)(a1 + sub_1011C52D0(v1 - 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(void *)(a1 + 32) = &off_1018981B8;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = &off_101898210;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = _Q0;
  sub_101066F6C(a1 + 128, 1, 1, 0.1, 1.2, 0.7);
  *(void *)(a1 + 240) = a2;
  return a1;
}

void sub_1010657B0(__n128 *a1@<X0>, unint64_t *a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7 = (uint64_t)&a1[2];
  sub_101066D70((uint64_t)&a1[2], a2, a4);
  __n128 v8 = v48;
  v8.n128_f32[0] = v49;
  if (v49 > 10.0) {
    v8.n128_f32[0] = 10.0;
  }
  if (v8.n128_f32[0] >= 1.0) {
    float v9 = v8.n128_f32[0];
  }
  else {
    float v9 = 1.0;
  }
  sub_101066D70((uint64_t)&a1[5], a2, v8);
  a1[9].n128_u32[2] = v47;
  sub_101066FB8((uint64_t)&a1[8], (float *)a2);
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_1018980E0);
  }
  uint64_t v10 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v11 = *a2;
    sub_101066E8C(v7, (uint64_t)a2);
    double v13 = v12;
    float v14 = sub_101066F20((uint64_t)&a1[5], (uint64_t)a2);
    double v15 = a1[11].n128_f32[0];
    double v16 = a1[11].n128_f32[1];
    *(_DWORD *)std::stringbuf::string_type buf = 134219264;
    unint64_t v58 = v11;
    __int16 v59 = 2048;
    *(double *)BOOL v60 = v13;
    *(_WORD *)&_BYTE v60[8] = 2048;
    *(double *)&v60[10] = v14;
    *(_WORD *)&v60[18] = 2048;
    *(double *)&v60[20] = *(float *)&v45;
    *(_WORD *)&v60[28] = 2048;
    *(double *)&v60[30] = v15;
    *(_WORD *)&v60[38] = 2048;
    double v61 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "WorkoutEffortEstimator update model details, startTime, %f, estimateScoreBloodLactateHR, %f, estimateScoreBaseHR, %f, estimateScoreACDepletionHR, %f, amountDepletedHR, %f, acDepletionRegressionFloorHR, %f",  buf,  0x3Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_1018980E0);
    }
    uint64_t v25 = qword_1019347E8;
    unint64_t v26 = *a2;
    sub_101066E8C(v7, (uint64_t)a2);
    double v28 = v27;
    float v29 = sub_101066F20((uint64_t)&a1[5], (uint64_t)a2);
    double v30 = a1[11].n128_f32[0];
    double v31 = a1[11].n128_f32[1];
    int v52 = 134219264;
    unint64_t v53 = v26;
    __int16 v54 = 2048;
    *(double *)uint64_t v55 = v28;
    *(_WORD *)&v55[8] = 2048;
    *(double *)&v55[10] = v29;
    *(_WORD *)&v55[18] = 2048;
    *(double *)&v55[20] = *(float *)&v45;
    *(_WORD *)&_BYTE v55[28] = 2048;
    *(double *)&v55[30] = v30;
    *(_WORD *)&v55[38] = 2048;
    double v56 = v31;
    LODWORD(v42) = 62;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  2LL,  "WorkoutEffortEstimator update model details, startTime, %f, estimateScoreBloodLactateHR, %f, estimateScoreBaseHR, %f, estimateScoreACDepletionHR, %f, amountDepletedHR, %f, acDepletionRegressionFloorHR, %f",  COERCE_DOUBLE(&v52),  v42,  v43,  v44,  v45,  v46);
    uint64_t v33 = (uint8_t *)v32;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWorkoutEffort::Result CLWorkoutEffortBasePhysiogicalEstimator::update(const CLWorkoutEffort::Input &)",  "%s\n",  v32);
    if (v33 != buf) {
      free(v33);
    }
  }

  *a1 = v48;
  a1[1].n128_f32[0] = v9;
  a1[1].n128_u32[1] = v50;
  a1[1].n128_u16[4] = v51;
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_1018980E0);
  }
  __int16 v17 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
  {
    unint64_t v18 = *a2;
    int v19 = a1[1].n128_u8[9];
    unint64_t v20 = a1->n128_u64[0];
    uint64_t v21 = a1->n128_i64[1];
    double v22 = a1[1].n128_f32[0];
    uint64_t v23 = *(void *)(a1[15].n128_u64[0] + 168);
    *(_DWORD *)std::stringbuf::string_type buf = 134219264;
    unint64_t v58 = v18;
    __int16 v59 = 1024;
    *(_DWORD *)BOOL v60 = v19;
    *(_WORD *)&v60[4] = 2048;
    *(void *)&v60[6] = v20;
    *(_WORD *)&v60[14] = 2048;
    *(void *)&v60[16] = v21;
    *(_WORD *)&v60[24] = 2048;
    *(double *)&v60[26] = v22;
    *(_WORD *)&v60[34] = 1024;
    *(_DWORD *)&v60[36] = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "WorkoutEffortEstimatorBase update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workoutType, %d",  buf,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_1018980E0);
    }
    unint64_t v34 = *a2;
    int v35 = a1[1].n128_u8[9];
    unint64_t v36 = a1->n128_u64[0];
    uint64_t v37 = a1->n128_i64[1];
    double v38 = a1[1].n128_f32[0];
    uint64_t v39 = *(void *)(a1[15].n128_u64[0] + 168);
    int v52 = 134219264;
    unint64_t v53 = v34;
    __int16 v54 = 1024;
    *(_DWORD *)uint64_t v55 = v35;
    *(_WORD *)&v55[4] = 2048;
    *(void *)&v55[6] = v36;
    *(_WORD *)&v55[14] = 2048;
    *(void *)&v55[16] = v37;
    *(_WORD *)&v55[24] = 2048;
    *(double *)&v55[26] = v38;
    *(_WORD *)&v55[34] = 1024;
    *(_DWORD *)&v55[36] = v39;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  1LL,  "WorkoutEffortEstimatorBase update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workoutType, %d",  COERCE_DOUBLE(&v52),  54,  v43,  v44,  v45,  LODWORD(v46));
    uint64_t v41 = (uint8_t *)v40;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWorkoutEffort::Result CLWorkoutEffortBasePhysiogicalEstimator::update(const CLWorkoutEffort::Input &)",  "%s\n",  v40);
    if (v41 != buf) {
      free(v41);
    }
  }

  __n128 v24 = a1[1];
  *a3 = *a1;
  a3[1] = v24;
}

void sub_101065CB4(uint64_t a1, double a2)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_1018980E0);
  }
  double v4 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    double v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "WorkoutEffortEstimator reset, startTime, %f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_1018980E0);
    }
    int v7 = 134217984;
    double v8 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "WorkoutEffortEstimator reset, startTime, %f",  COERCE_DOUBLE(&v7));
    __int128 v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortBasePhysiogicalEstimator::reset(CFAbsoluteTime)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_101066E7C(a1 + 32, a2);
  sub_101066E7C(a1 + 80, a2);
  sub_10106744C(a1 + 128, a2);
}