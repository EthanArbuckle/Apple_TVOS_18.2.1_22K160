BOOL sub_100117540(uint64_t a1, void *a2, void *a3)
{
  return *a2 < *a3;
}

uint64_t sub_100117554(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = bswap64(*a2);
  unint64_t v4 = bswap64(*a3);
  if (v3 == v4 && (unint64_t v3 = bswap64(a2[1]), v4 = bswap64(a3[1]), v3 == v4))
  {
    unsigned int v5 = 0;
  }

  else if (v3 < v4)
  {
    unsigned int v5 = -1;
  }

  else
  {
    unsigned int v5 = 1;
  }

  return v5 >> 31;
}

BOOL sub_1001175A0(uint64_t a1, const void **a2, const void **a3)
{
  return sub_100022920((uint64_t)&v4, a2, a3);
}

double sub_1001175C0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = a2;
  return result;
}

uint64_t sub_1001175D8(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 16);
  sub_10005B848(&v3);
  sub_1001178B4((uint64_t *)(a1 + 8), 0LL);
  return a1;
}

void sub_100117620(uint64_t a1)
{
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0LL;
  uint64_t v4 = v2;
  unsigned int v5 = (void **)&v3;
  sub_10005B848(&v5);
  *(_DWORD *)a1 = 0;
  sub_1001178B4((uint64_t *)(a1 + 8), 0LL);
}

void sub_10011767C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v23 = 0;
  sub_100018E34(&v23);
  uint64_t v10 = sub_100017338((ssize_t)&v23);
  if (*(_BYTE *)(a5 + 16))
  {
    uint64_t v13 = *(void *)a5;
    uint64_t v12 = *(void *)(a5 + 8);
  }

  else
  {
    uint64_t v13 = v10;
    uint64_t v12 = v11;
  }

  CFAbsoluteTime Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  v15 = *(void **)a2;
  unint64_t v16 = *(void *)(a2 + 8);
  v24[0] = *(_DWORD *)(a2 + 16);
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)(a2 + 19);
  int v17 = *(char *)(a2 + 23);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  sub_100019D7C((unsigned int *)&v23);
  v18 = operator new(0x90uLL);
  uint64_t v19 = (uint64_t)v18;
  *(void *)&__int128 v25 = v13;
  *((void *)&v25 + 1) = v12;
  CFAbsoluteTime v26 = Current_1;
  if ((v17 & 0x80000000) == 0)
  {
    *(void *)&__int128 __p = v15;
    *((void *)&__p + 1) = v16;
    LODWORD(v28) = v24[0];
    *(_DWORD *)((char *)&v28 + 3) = *(_DWORD *)((char *)v24 + 3);
    HIBYTE(v28) = v17;
    *(void *)&__int128 v29 = a3;
    *((void *)&v29 + 1) = a4;
    uint64_t v20 = *(void *)(a1 + 40);
    _OWORD *v18 = v25;
    v21 = (char *)v18 + 24;
    *(CFAbsoluteTime *)(v19 + 16) = v26;
LABEL_7:
    *(_OWORD *)v21 = __p;
    *((void *)v21 + 2) = v28;
    goto LABEL_8;
  }

  sub_1010DD48C(&__p, v15, v16);
  int v22 = SHIBYTE(v28);
  *(void *)&__int128 v29 = a3;
  *((void *)&v29 + 1) = a4;
  uint64_t v20 = *(void *)(a1 + 40);
  *(_OWORD *)uint64_t v19 = v25;
  *(CFAbsoluteTime *)(v19 + 16) = v26;
  v21 = (char *)(v19 + 24);
  if ((v22 & 0x80000000) == 0) {
    goto LABEL_7;
  }
  sub_1010DD48C(v21, (void *)__p, *((unint64_t *)&__p + 1));
LABEL_8:
  *(_OWORD *)(v19 + 48) = v29;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 112) = 0u;
  *(void *)(v19 + 128) = 0LL;
  *(void *)(v19 + 136) = v20;
  sub_1001178B4((uint64_t *)(a1 + 8), v19);
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  *(_DWORD *)a1 = 1;
  if (v17 < 0) {
    operator delete(v15);
  }
}

void sub_10011785C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  operator delete(v22);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_1001178B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_100118448(v3);
    operator delete(v4);
  }

uint64_t *sub_1001178E0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  double result = *(uint64_t **)(a1 + 8);
  if (result) {
    return (uint64_t *)sub_1001178F0(result, a2, a3);
  }
  return result;
}

uint64_t **sub_1001178F0(uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (__int128 *)a1[11];
  if ((__int128 *)a1[12] == v4)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    uint64_t v11 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Error - recording transaction does not have any valid recording events",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
      LOWORD(v23[0]) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error - recording transaction does not have any valid recording events",  v23,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMicroLocationRecorder::RecordingTransaction::updateFingerprintMetaInfoOfCurrentRecording(const CLMicroLoc ationFingerprintConfiguration &, CLMicroLocationRecordingCompletionMetaInformation::RecordingMetaInformation &)",  "%s\n",  v13);
    }

    *(_DWORD *)(a3 + 48) = 1;
    *(_DWORD *)buf = 1;
    return sub_10004A8FC((uint64_t **)(a3 + 24), (int *)buf, buf);
  }

  else
  {
    sub_1000865CC(v23);
    char v29 = 1;
    __int128 v35 = *v4;
    char v36 = 1;
    sub_10013A418(a1 + 8, (uint64_t)v23, (uint64_t)&v35, a2, buf);
    if (v29) {
      sub_100086708(v23);
    }
    if (v22)
    {
      sub_10001AD40((uint64_t)v23, (uint64_t)buf);
      __int128 v25 = v15;
      uint64_t v26 = v16;
      sub_10001B204((uint64_t)v27, (uint64_t)&v17);
      sub_10001B494((uint64_t)v28, (uint64_t)v18);
      __int128 v30 = *(_OWORD *)&v18[40];
      int v31 = v19;
      uint64_t v34 = 0LL;
      __int128 __p = 0LL;
      v33 = 0LL;
      sub_10001B72C(&__p, v20, v21, (v21 - (uint64_t)v20) >> 2);
      v7 = v24;
      if (v24)
      {
        uint64_t v8 = 0LL;
        v9 = v24;
        do
        {
          if (*((_DWORD *)v9 + 6) == 1) {
            ++v8;
          }
          v9 = (uint64_t *)*v9;
        }

        while (v9);
        uint64_t v10 = v24;
        do
        {
          if (*((_DWORD *)v10 + 6) == 5) {
            v9 = (uint64_t *)((char *)v9 + 1);
          }
          uint64_t v10 = (uint64_t *)*v10;
        }

        while (v10);
        do
        {
          if (*((_DWORD *)v7 + 6) == 6) {
            uint64_t v10 = (uint64_t *)((char *)v10 + 1);
          }
          v7 = (uint64_t *)*v7;
        }

        while (v7);
      }

      else
      {
        v9 = 0LL;
        uint64_t v8 = 0LL;
        uint64_t v10 = 0LL;
      }

      *(void *)a3 = v8;
      *(void *)(a3 + 8) = v9;
      *(void *)(a3 + 16) = v10;
      *(_DWORD *)(a3 + 48) = 0;
      if (__p)
      {
        v33 = __p;
        operator delete(__p);
      }

      sub_100019CEC((uint64_t)v28);
      sub_100019CEC((uint64_t)v27);
      sub_10001AA60((uint64_t)v23);
    }

    else
    {
      *(_DWORD *)(a3 + 48) = 1;
      v23[0] = 1;
      sub_10004A8FC((uint64_t **)(a3 + 24), v23, v23);
    }

    return (uint64_t **)sub_10003F6D4((uint64_t)buf);
  }

void sub_100117C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100117CA8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(v1 + 88);
  for (uint64_t i = *(void *)(v1 + 96); v2 != i; v2 += 240LL)
  {
    *(_DWORD *)(v2 + 208) |= 0x2000u;
    *(_BYTE *)(v2 + 157) = 1;
  }

  return result;
}

uint64_t sub_100117CDC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(v1 + 88);
  for (uint64_t i = *(void *)(v1 + 96); v2 != i; v2 += 240LL)
  {
    *(_DWORD *)(v2 + 208) |= 0x800u;
    *(_BYTE *)(v2 + 156) = 1;
  }

  return result;
}

uint64_t sub_100117D10(uint64_t a1, unsigned int a2, int **a3)
{
  v6 = *a3;
  v7 = a3[1];
  if (*a3 != v7)
  {
    do
    {
      sub_10009471C(*v6, buf);
      if (v25 >= 0) {
        uint64_t v8 = buf;
      }
      else {
        uint64_t v8 = *(uint8_t **)buf;
      }
      if (v25 >= 0) {
        uint64_t v9 = HIBYTE(v25);
      }
      else {
        uint64_t v9 = *(void *)v23;
      }
      uint64_t v10 = sub_10000CF44(&v19, (uint64_t)v8, v9);
      sub_10000CF44(v10, (uint64_t)" ", 1LL);
      if (SHIBYTE(v25) < 0) {
        operator delete(*(void **)buf);
      }
      ++v6;
    }

    while (v6 != v7);
  }

  std::stringbuf::str(&__p, &v20);
  if (((char)__p.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (__p.__r_.__value_.__s.__size_)
    {
      uint64_t v11 = --__p.__r_.__value_.__s.__size_;
      p_p = &__p;
      goto LABEL_16;
    }

void sub_100117F8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_100117FD8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v22 = a2;
  __int16 v24 = 0LL;
  uint64_t v25 = 0LL;
  int v23 = 0LL;
  sub_10001B72C(&v23, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  unsigned int v14 = v22;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v15 = 0LL;
  sub_10001B72C(&v15, v23, (uint64_t)v24, (v24 - (_BYTE *)v23) >> 2);
  if (v4 != v5)
  {
    v6 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    v7 = "set_confidencelevel";
    while (sub_100064130(v14))
    {
      *(_DWORD *)(v4 + 208) |= 0x4000u;
      *(_DWORD *)(v4 + 200) = v14;
      *(_DWORD *)(v4 + 192) = 0;
      uint64_t v8 = (unsigned int *)v15;
      uint64_t v9 = v16;
      if (v15 != v16)
      {
        while (1)
        {
          unsigned int v10 = *v8;
          if (!sub_100064148(*v8)) {
            break;
          }
          int v11 = *(_DWORD *)(v4 + 192);
          if (v11 == *(_DWORD *)(v4 + 196))
          {
            sub_10004AAFC(v4 + 184, v11 + 1);
            int v11 = *(_DWORD *)(v4 + 192);
          }

          uint64_t v12 = *(void *)(v4 + 184);
          *(_DWORD *)(v4 + 192) = v11 + 1;
          *(_DWORD *)(v12 + 4LL * v11) = v10;
          if (++v8 == v9) {
            goto LABEL_9;
          }
        }

        int v13 = 20332;
        v7 = "add_confidencereasons";
        v6 = "::CLMicroLocationProto::ConfidenceReason_IsValid(value)";
LABEL_18:
        __assert_rtn(v7, "microlocation.pb.h", v13, v6);
      }

void sub_1001181A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001181DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v5 = *(void **)(a1 + 240);
    if (!v5)
    {
      uint64_t v5 = operator new(0x10uLL);
      sub_10000D870((uint64_t)v5, v4);
      v6 = *(void **)(a1 + 240);
      *(void *)(a1 + 240) = v5;
      if (v6)
      {
        operator delete(v6);
        uint64_t v5 = *(void **)(a1 + 240);
      }
    }

    uint64_t v7 = sub_10000EE28((uint64_t)v5, a2);
    sub_10011AE20(a1);
    return v7;
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    uint64_t v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning Can't insert because the database is invalid",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
      v11[0] = 0;
      unsigned int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Can't insert because the database is invalid",  v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::insertOrReplace(const std::vector<TableEntry> &) [TableEntry = CLMicroLocationReco rdingLabelsTable::Entry]",  "%s\n",  v10);
    }

    return 0LL;
  }

void sub_1001183EC(_Unwind_Exception *a1)
{
}

uint64_t sub_100118408(uint64_t a1, uint64_t a2)
{
  *(CFAbsoluteTime *)a1 = j__CFAbsoluteTimeGetCurrent_1();
  *(void *)(a1 + 8) = mach_continuous_time();
  if ((a2 & 0xFF00000000LL) != 0) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t sub_100118448(uint64_t a1)
{
  uint64_t v2 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "com.apple.locationd.microlocation-recording-transaction-commit");
  if (qword_1019348E0 != -1) {
    dispatch_once(&qword_1019348E0, &stru_10181FA68);
  }
  uint64_t v3 = (os_log_s *)qword_1019348E8;
  if (os_log_type_enabled((os_log_t)qword_1019348E8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = (char *)operator new(0x28uLL);
    *(void *)(v4 + 29) = 0LL;
    *(_OWORD *)int v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    sub_10000AE6C(a1, v4);
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 4);
    unint64_t v6 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
    uint64_t v8 = 68289794LL;
    __int16 v9 = 2082;
    unsigned int v10 = "";
    __int16 v11 = 2082;
    uint64_t v12 = v4;
    __int16 v13 = 2050;
    unint64_t v14 = v5;
    __int16 v15 = 2050;
    unint64_t v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationRecorder: commiting recording transaction, Recording UUID:%{public, lo cation:escape_only}s, Num records:%{public}lu, Num measurements:%{public}lu}",  (uint8_t *)&v8,  0x30u);
    operator delete(v4);
  }

  sub_100118654(*(void *)(a1 + 136), (uint64_t *)(a1 + 88));
  sub_100118880(*(void *)(a1 + 136), (uint64_t *)(a1 + 64));
  sub_1001181DC(*(void *)(a1 + 136), (uint64_t *)(a1 + 112));

  uint64_t v8 = a1 + 112;
  sub_100012948((void ***)&v8);
  uint64_t v8 = a1 + 88;
  sub_10001A350((void ***)&v8);
  uint64_t v8 = a1 + 64;
  sub_10003F8A8((void ***)&v8);
  return a1;
}

void sub_100118628(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    operator delete(v2);
    sub_100006BB8(exception_object);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100118654(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unint64_t v5 = *(void **)(a1 + 232);
    if (!v5)
    {
      unint64_t v5 = operator new(0x10uLL);
      sub_1001424C8((uint64_t)v5, v4);
      unint64_t v6 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v5;
      if (v6)
      {
        operator delete(v6);
        unint64_t v5 = *(void **)(a1 + 232);
      }
    }

    uint64_t v7 = sub_100142548((uint64_t)v5, a2);
    sub_10011B0EC(a1);
    return v7;
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    __int16 v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning Can't insert because the database is invalid",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
      v11[0] = 0;
      unsigned int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Can't insert because the database is invalid",  v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::insertOrReplace(const std::vector<TableEntry> &) [TableEntry = CLMicroLocationReco rdingEventsTable::Entry]",  "%s\n",  v10);
    }

    return 0LL;
  }

void sub_100118864(_Unwind_Exception *a1)
{
}

uint64_t sub_100118880(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unint64_t v5 = *(void **)(a1 + 216);
    if (!v5)
    {
      unint64_t v5 = operator new(0x10uLL);
      sub_1000C8AE8((uint64_t)v5, v4);
      unint64_t v6 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = v5;
      if (v6)
      {
        operator delete(v6);
        unint64_t v5 = *(void **)(a1 + 216);
      }
    }

    uint64_t v7 = sub_1000C8B14((uint64_t)v5, a2);
    sub_10011B3B8(a1);
    return v7;
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    __int16 v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning Can't insert because the database is invalid",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
      v11[0] = 0;
      unsigned int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Can't insert because the database is invalid",  v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::insertOrReplace(const std::vector<TableEntry> &) [TableEntry = CLMicroLocationMeas urementTable::Entry]",  "%s\n",  v10);
    }

    return 0LL;
  }

void sub_100118A90(_Unwind_Exception *a1)
{
}

uint64_t sub_100118AAC(uint64_t result, double *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    unint64_t v6 = (uint64_t *)result;
    uint64_t v7 = (uint64_t *)(result + 64);
    uint64_t v8 = (uint64_t *)(a2 + 1);
    unint64_t v9 = *(void *)(result + 72);
    do
    {
      unsigned int v10 = *(_DWORD *)(v3 + 80);
      if (v9 >= v6[10])
      {
        double result = sub_10011B6DC(v7, v6, a2, v8, v3, &v10);
        unint64_t v9 = result;
      }

      else
      {
        double result = sub_10011B688((uint64_t)v7, v6, a2, v8, v3, &v10);
        v9 += 120LL;
      }

      v6[9] = v9;
      v3 += 88LL;
    }

    while (v3 != v4);
  }

  return result;
}

void sub_100118B54(uint64_t a1, uint64_t a2)
{
  LOBYTE(v32) = 0;
  char v33 = 0;
  memset(&v22, 0, sizeof(v22));
  LOBYTE(v30) = 0;
  char v31 = 0;
  int v4 = *(_DWORD *)(a2 + 72);
  if (v4 != 1)
  {
    if (v4 != 13 || (*(_BYTE *)(a2 + 129) & 4) == 0) {
      goto LABEL_27;
    }
    uint64_t v5 = *(void *)(a2 + 88);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A0980 + 88);
    }
    if ((*(_BYTE *)(v5 + 44) & 8) == 0) {
      goto LABEL_27;
    }
    sub_1001014F0(*(uint64_t ***)(v5 + 24), buf);
    __int128 v32 = *(_OWORD *)buf;
    char v33 = buf[16];
    uint64_t v6 = *(void *)(a2 + 88);
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 44) & 4) == 0)
      {
LABEL_20:
        if ((*(_BYTE *)(v6 + 44) & 0x10) != 0) {
          goto LABEL_26;
        }
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v6 = *(void *)(qword_1019A0980 + 88);
      if ((*(_BYTE *)(v6 + 44) & 4) == 0)
      {
LABEL_19:
        uint64_t v6 = *(void *)(qword_1019A0980 + 88);
        goto LABEL_20;
      }
    }

    std::string::operator=(&v22, *(const std::string **)(v6 + 16));
    uint64_t v6 = *(void *)(a2 + 88);
    if (v6) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  if ((*(_BYTE *)(a2 + 128) & 4) == 0) {
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A0980 + 16);
  }
  if ((*(_BYTE *)(v7 + 44) & 8) == 0) {
    goto LABEL_27;
  }
  sub_1001014F0(*(uint64_t ***)(v7 + 24), buf);
  __int128 v32 = *(_OWORD *)buf;
  char v33 = buf[16];
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6)
  {
    uint64_t v6 = *(void *)(qword_1019A0980 + 16);
    if ((*(_BYTE *)(v6 + 44) & 4) == 0)
    {
LABEL_24:
      uint64_t v6 = *(void *)(qword_1019A0980 + 16);
      goto LABEL_25;
    }

void sub_100118FD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100119074(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double a5)
{
  double v10 = a5;
  unint64_t v7 = a1[16];
  uint64_t v6 = (uint64_t)(a1 + 16);
  unint64_t v8 = *(void *)(v6 - 8);
  if (v8 >= v7)
  {
    uint64_t result = sub_10011BA6C(a1 + 14, a2, a3, a4, &v10);
  }

  else
  {
    sub_10011BB80(v6, *(void *)(v6 - 8), a2, a3, a4, &v10);
    uint64_t result = v8 + 64;
    a1[15] = v8 + 64;
  }

  a1[15] = result;
  return result;
}

void sub_1001190F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1001190F8(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    sub_10122D0D8();
  }
  __int128 v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  return sub_100118AAC(v3, (double *)&v5, a3);
}

void sub_100119134(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  if (!v3) {
    sub_10122D254();
  }
  sub_100118B54(v3, a2);
  unint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  if (v4 == v5)
  {
    int64x2_t v6 = vdupq_n_s64(v4);
  }

  else
  {
    do
    {
      sub_100118B54(a1[1], v4);
      v4 += 136LL;
    }

    while (v4 != v5);
    int64x2_t v6 = *((int64x2_t *)a1 + 1);
  }

  int64x2_t v8 = v6;
  a1[2] = 0LL;
  a1[3] = 0LL;
  uint64_t v7 = a1[4];
  a1[4] = 0LL;
  uint64_t v9 = v7;
  double v10 = &v8;
  sub_10005B848((void ***)&v10);
}

void sub_1001191C0(uint64_t a1)
{
  __int128 v1 = *(_OWORD *)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0LL;
  uint64_t v3 = (void **)&v1;
  sub_10005B848(&v3);
}

void sub_100119200(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == 1)
  {
    sub_100119134(a1, a2);
  }

  else
  {
    unint64_t v3 = a1[3];
    if (v3 >= a1[4])
    {
      uint64_t v4 = sub_10005B8D4(a1 + 2);
    }

    else
    {
      sub_1000865CC(a1[3]);
      uint64_t v4 = v3 + 136;
      a1[3] = v3 + 136;
    }

    a1[3] = v4;
  }

void sub_100119264(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10011926C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (v40) {
    BOOL v7 = v38 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    int64x2_t v8 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLMicroLocationRecorder: received invalid truth label, Client:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
    }

    double v10 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      else {
        __int16 v11 = *(void **)a2;
      }
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = v11;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLMicroLocationRecorder: received invalid truth label",  "{msg%{public}.0s:CLMicroLocationRecorder: received invalid truth label, Client:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    return 0LL;
  }

  else if (*(_DWORD *)a1 == 1)
  {
    __int16 v13 = *(uint64_t **)(a1 + 8);
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    sub_100119074(v13, v37, a2, v39, Current_1);
    return 1LL;
  }

  else
  {
    uint64_t v15 = v37[0];
    uint64_t v16 = v37[1];
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1010DD48C(__p, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a2;
      uint64_t v25 = *(void *)(a2 + 16);
    }

    uint64_t v17 = v39[0];
    uint64_t v18 = v39[1];
    double v19 = j__CFAbsoluteTimeGetCurrent_1();
    sub_10000D89C((uint64_t)buf, v15, v16, (__int128 *)__p, v17, v18, v19);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    __int128 v28 = *(_OWORD *)buf;
    if (SHIBYTE(v34) < 0)
    {
      sub_1010DD48C(&v29, *(void **)&buf[16], *(unint64_t *)&buf[24]);
    }

    else
    {
      __int128 v29 = *(_OWORD *)&buf[16];
      uint64_t v30 = v34;
    }

    __int128 v31 = v35;
    uint64_t v32 = v36;
    uint64_t v22 = 0LL;
    int v23 = 0LL;
    __int128 v21 = 0LL;
    __int16 v26 = &v21;
    char v27 = 0;
    __int128 v21 = (char *)operator new(0x40uLL);
    uint64_t v22 = (uint64_t)v21;
    int v23 = v21 + 64;
    uint64_t v22 = sub_10011BC30((uint64_t)&v23, &v28, (__int128 *)buf, (uint64_t)v21);
    uint64_t v12 = sub_1001181DC(*(void *)(a1 + 40), (uint64_t *)&v21);
    __int16 v26 = &v21;
    sub_100012948((void ***)&v26);
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)v29);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(*(void **)&buf[16]);
    }
  }

  return v12;
}

void sub_1001195B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100119624(uint64_t a1, const std::string *a2, _OWORD *a3, __int128 *a4)
{
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = operator new(0x10uLL);
  *(void *)&__p[16] = v9 + 1;
  _OWORD *v9 = *a3;
  *(void *)std::stringbuf::string_type __p = v9;
  *(void *)&__p[8] = v9 + 1;
  sub_100027D90(v8, (uint64_t)__p, &v39);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }

  if (v39 == v40)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    int v23 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      __int16 v24 = (char *)operator new(0x28uLL);
      *(void *)(v24 + 29) = 0LL;
      *(_OWORD *)__int16 v24 = 0u;
      *((_OWORD *)v24 + 1) = 0u;
      sub_10000AE6C((uint64_t)a3, v24);
      *(void *)std::stringbuf::string_type __p = 68289282LL;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(void *)&__p[20] = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Did not find matching entry for cached trigger UUID, Cached trigger UUID:%{public, location:escape_only}s}",  __p,  0x1Cu);
      operator delete(v24);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
    }

    uint64_t v25 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      __int16 v26 = (char *)operator new(0x28uLL);
      *(void *)(v26 + 29) = 0LL;
      *(_OWORD *)__int16 v26 = 0u;
      *((_OWORD *)v26 + 1) = 0u;
      sub_10000AE6C((uint64_t)a3, v26);
      *(void *)std::stringbuf::string_type __p = 68289282LL;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(void *)&__p[20] = v26;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Did not find matching entry for cached trigger UUID",  "{msg%{public}.0s:Did not find matching entry for cached trigger UUID, Cached trigger UUID:%{public, location:escape_only}s}",  __p,  0x1Cu);
      operator delete(v26);
    }

    uint64_t v27 = 0LL;
  }

  else
  {
    if (0xEEEEEEEEEEEEEEEFLL * ((v40 - v39) >> 4) >= 2)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
      double v10 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        __int16 v11 = (char *)operator new(0x28uLL);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1012C8460;
        *(_OWORD *)__int16 v11 = 0u;
        *((_OWORD *)v11 + 1) = 0u;
        *(void *)(v11 + 29) = 0LL;
        sub_10000AE6C((uint64_t)a3, v11);
        p_str = &__str;
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(void *)std::stringbuf::string_type __p = 68289538LL;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2082;
        *(void *)&__p[20] = p_str;
        *(_WORD *)&__p[28] = 2050;
        *(void *)&__p[30] = 0xEEEEEEEEEEEEEEEFLL * ((v40 - v39) >> 4);
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Found too many matching entries for cached trigger UUID, Cached trigger UUID:%{pu blic, location:escape_only}s, Number of matches:%{public}lu}",  __p,  0x26u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181FA48);
        }
      }

      __int16 v13 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        unint64_t v14 = (char *)operator new(0x28uLL);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1012C8460;
        *(_OWORD *)unint64_t v14 = 0u;
        *((_OWORD *)v14 + 1) = 0u;
        *(void *)(v14 + 29) = 0LL;
        sub_10000AE6C((uint64_t)a3, v14);
        uint64_t v15 = &__str;
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(void *)std::stringbuf::string_type __p = 68289538LL;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2082;
        *(void *)&__p[20] = v15;
        *(_WORD *)&__p[28] = 2050;
        *(void *)&__p[30] = 0xEEEEEEEEEEEEEEEFLL * ((v40 - v39) >> 4);
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Found too many matching entries for cached trigger UUID",  "{msg%{public}.0s:Found too many matching entries for cached trigger UUID, Cached trigger UUID:%{pu blic, location:escape_only}s, Number of matches:%{public}lu}",  __p,  0x26u);
      }
    }

    uint64_t v16 = v39;
    sub_100063618((uint64_t)v35);
    v38 |= 2u;
    uint64_t v17 = v36;
    if (v36 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v17 = (std::string *)operator new(0x18uLL);
      v17->__r_.__value_.__r.__words[0] = 0LL;
      v17->__r_.__value_.__l.__size_ = 0LL;
      v17->__r_.__value_.__l.__cap_ = 0LL;
      uint64_t v36 = v17;
    }

    std::string::operator=(v17, a2);
    memset(&__str, 0, sizeof(__str));
    if ((sub_100013090((uint64_t)a4, &__str) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)__p);
      *(void *)std::stringbuf::string_type __p = &off_101818CB0;
      sub_1000139B0((uint64_t)__p);
    }

    v38 |= 4u;
    uint64_t v18 = v37;
    if (v37 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v18 = (std::string *)operator new(0x18uLL);
      v18->__r_.__value_.__r.__words[0] = 0LL;
      v18->__r_.__value_.__l.__size_ = 0LL;
      v18->__r_.__value_.__l.__cap_ = 0LL;
      v37 = v18;
    }

    std::string::operator=(v18, &__str);
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    sub_100119EA4((uint64_t)v35, 0, 0, 3u, (uint64_t)v34, Current_1);
    uint64_t v20 = *(void *)v16;
    uint64_t v21 = *(void *)(v16 + 8);
    double v22 = *(double *)(v16 + 16);
    if (*(char *)(v16 + 47) < 0)
    {
      sub_1010DD48C(__dst, *(void **)(v16 + 24), *(void *)(v16 + 32));
    }

    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v16 + 24);
      uint64_t v33 = *(void *)(v16 + 40);
    }

    __int128 v48 = *a4;
    char v49 = 1;
    sub_100141FA4( (uint64_t)__p,  v20,  v21,  (__int128 *)__dst,  (uint64_t)v34,  &v48,  *(void *)(v16 + 48),  *(void *)(v16 + 56),  v22);
    if (SHIBYTE(v33) < 0) {
      operator delete(__dst[0]);
    }
    std::string __str = *(std::string *)__p;
    if (SHIBYTE(v51) < 0)
    {
      sub_1010DD48C(&v44, *(void **)&__p[24], *(unint64_t *)&__p[32]);
    }

    else
    {
      __int128 v44 = *(_OWORD *)&__p[24];
      uint64_t v45 = v51;
    }

    v46[0] = v52[0];
    *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)((char *)v52 + 12);
    sub_1000865CC(v47);
    *(_OWORD *)&v47[136] = *(_OWORD *)&v53[136];
    v47[152] = v53[152];
    uint64_t v30 = 0LL;
    __int128 v31 = 0LL;
    __int128 v29 = 0LL;
    v41 = (void **)&v29;
    char v42 = 0;
    __int128 v29 = (char *)operator new(0xF0uLL);
    uint64_t v30 = (uint64_t)v29;
    __int128 v31 = v29 + 240;
    uint64_t v30 = sub_100061924((uint64_t)&v31, (__int128 *)&__str, &v48, (uint64_t)v29);
    sub_100086708(v47);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
    uint64_t v27 = sub_100118654(*(void *)(a1 + 40), (uint64_t *)&v29);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    sub_10001A350((void ***)&__str);
    sub_100086708(v53);
    if (SHIBYTE(v51) < 0) {
      operator delete(*(void **)&__p[24]);
    }
    sub_100086708(v34);
    sub_100073F80((wireless_diagnostics::google::protobuf::MessageLite *)v35);
  }

  *(void *)std::stringbuf::string_type __p = &v39;
  sub_10001A350((void ***)__p);
  return v27;
}

void sub_100119D74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40)
{
  STACK[0x230] = (unint64_t)&a40;
  sub_10001A350((void ***)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_100119EA4( uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unsigned int v12 = *(_DWORD *)(a1 + 32);
  if (!sub_100064160(v12))
  {
    unint64_t v14 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v15 = 19803;
    uint64_t v16 = "set_eventtype";
    goto LABEL_6;
  }

  int v13 = *(_DWORD *)(a5 + 128);
  *(_DWORD *)(a5 + 72) = v12;
  *(double *)(a5 + 8) = a6;
  *(_BYTE *)(a5 + 77) = a2;
  *(_DWORD *)(a5 + 128) = v13 | 0x2803;
  *(_BYTE *)(a5 + 76) = a3;
  if ((sub_100064130(a4) & 1) == 0)
  {
    unint64_t v14 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v15 = 20312;
    uint64_t v16 = "set_confidencelevel";
LABEL_6:
    __assert_rtn(v16, "microlocation.pb.h", v15, v14);
  }

  *(_DWORD *)(a5 + 128) |= 0x4000u;
  *(_DWORD *)(a5 + 120) = a4;
  sub_100101F80(a5, a1);
}

void sub_100119F88(_Unwind_Exception *a1)
{
}

uint64_t sub_100119F9C(uint64_t a1, const std::string *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  if ([a4 compare:a5] == (id)1)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    __int16 v11 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "recordTruthLabelBetweenDates, startDate is later than endDate",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
      LOWORD(v65.__vftable) = 0;
      uint64_t v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "recordTruthLabelBetweenDates, startDate is later than endDate",  &v65,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecorder::recordTruthLabelBetweenDates(const std::string &, NSUUID *const, NSDate *const, NS Date *const, const std::string &)",  "%s\n",  v40);
      if (v40 != buf) {
        free(v40);
      }
    }

    return 0LL;
  }

  else
  {
    [a4 timeIntervalSinceReferenceDate];
    std::to_string(&v62, v13);
    [a5 timeIntervalSinceReferenceDate];
    std::to_string(&v61, v14);
    sub_1000C7998(1u, (char **)&v59);
    int v15 = v59;
    uint64_t v16 = v60;
    if (v59 == v60) {
      goto LABEL_47;
    }
    uint64_t v17 = v59;
    while (*v17 != 14)
    {
      if (++v17 == v60) {
        goto LABEL_21;
      }
    }

    if (v17 != v60)
    {
      for (uint64_t i = v17 + 1; i != v16; ++i)
      {
        if (*i != 14) {
          *v17++ = *i;
        }
      }
    }

    if (v17 != v16)
    {
      uint64_t v16 = v17;
      v60 = v17;
    }

void sub_10011A868( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *__p, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, void *a45, uint64_t a46, int a47, __int16 a48, char a49, char a50)
{
  if (__p) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void **sub_10011A9B8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x111111111111112LL) {
      sub_100007008();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10001D66C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 240 * v6;
    sub_10001D5F8(a1, v7);
    return sub_10001D7FC(v7);
  }

  return result;
}

void sub_10011AA54(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10011AA68(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      sub_100007008();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10001275C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 6);
    sub_1000126E8(a1, v7);
    return sub_1000128C0((uint64_t)v7);
  }

  return result;
}

void sub_10011AAE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10011AAF8(void *a1, __int128 **a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = a1 + 11;
    uint64_t v6 = a1 + 13;
    unint64_t v7 = a1[12];
    do
    {
      if (v7 >= *v6)
      {
        unint64_t v7 = sub_10001D43C(v5, v2);
      }

      else
      {
        sub_10001D548((uint64_t)v6, v7, v2);
        v7 += 240LL;
        a1[12] = v7;
      }

      a1[12] = v7;
      v2 += 15;
    }

    while (v2 != v3);
  }

void sub_10011AB84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 96) = v2;
  _Unwind_Resume(a1);
}

void sub_10011AB8C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = a1 + 14;
    unint64_t v6 = a1[15];
    do
    {
      if (v6 >= a1[16])
      {
        unint64_t v6 = sub_10011C1E0(v5, v2);
      }

      else
      {
        sub_10011C160((uint64_t)v5, v2);
        v6 += 64LL;
      }

      a1[15] = v6;
      v2 += 64LL;
    }

    while (v2 != v3);
  }

void sub_10011AC04(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10011AC30(id a1)
{
  qword_1019348E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MicrolocationQE");
}

uint64_t sub_10011AC5C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  else {
    unint64_t v13 = v7;
  }
  __int128 v21 = a1 + 2;
  if (v13) {
    double v14 = (char *)sub_10001275C((uint64_t)(a1 + 2), v13);
  }
  else {
    double v14 = 0LL;
  }
  uint64_t v17 = v14;
  uint64_t v18 = &v14[64 * v6];
  uint64_t v20 = &v14[64 * v13];
  sub_10011AD70((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  uint64_t v19 = v18 + 64;
  sub_1000126E8(a1, &v17);
  uint64_t v15 = a1[1];
  sub_1000128C0((uint64_t)&v17);
  return v15;
}

void sub_10011AD5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10011AD70(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, double *a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
    uint64_t v12 = *(void *)(a4 + 16);
  }

  sub_10000D89C(a2, v9, v10, (__int128 *)__p, *a5, a5[1], *a6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10011AE04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10011AE20(uint64_t a1)
{
  unsigned int v2 = sub_100038A08(a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FA48);
  }
  uint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = "MicroLocationLabels";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicate s a serious problem",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    int v7 = 136446210;
    uint64_t v8 = "MicroLocationLabels";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem",  &v7,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::freeSpaceIfFull() [Table = CLMicroLocationRecordingLabelsTable]",  "%s\n",  v6);
  }

  BOOL result = sub_100031140(a1);
  if (result)
  {
    else {
      uint64_t v5 = *(void *)(a1 + 160);
    }
    sub_1003C1EC0(a1 + 72, v5);
    return 1LL;
  }

  return result;
}

uint64_t sub_10011B014()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecordingLabelsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 2500LL;
  }
}

void sub_10011B0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_10011B0EC(uint64_t a1)
{
  unsigned int v2 = sub_1000380E0(a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FA48);
  }
  uint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = "MicroLocationRecordingEvents";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicate s a serious problem",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    int v7 = 136446210;
    uint64_t v8 = "MicroLocationRecordingEvents";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem",  &v7,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::freeSpaceIfFull() [Table = CLMicroLocationRecordingEventsTable]",  "%s\n",  v6);
  }

  BOOL result = sub_100030AF0(a1);
  if (result)
  {
    else {
      uint64_t v5 = *(void *)(a1 + 160);
    }
    sub_1003C1EC0(a1 + 72, v5);
    return 1LL;
  }

  return result;
}

uint64_t sub_10011B2E0()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecordingEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 15150LL;
  }
}

void sub_10011B3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_10011B3B8(uint64_t a1)
{
  unsigned int v2 = sub_100037DF0(a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FA48);
  }
  uint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = "MicroLocationMeasurements";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicate s a serious problem",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    int v7 = 136446210;
    uint64_t v8 = "MicroLocationMeasurements";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem",  &v7,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::freeSpaceIfFull() [Table = CLMicroLocationMeasurementTable]",  "%s\n",  v6);
  }

  BOOL result = sub_10003095C(a1);
  if (result)
  {
    else {
      uint64_t v5 = *(void *)(a1 + 160);
    }
    sub_1003C1EC0(a1 + 72, v5);
    return 1LL;
  }

  return result;
}

uint64_t sub_10011B5AC()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsMeasurementTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 321100LL;
  }
}

void sub_10011B670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10011B688(uint64_t a1, uint64_t *a2, double *a3, uint64_t *a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t result = sub_1000C86A4(v7, *a2, a2[1], *a4, a5, *a6 | (unint64_t)&_mh_execute_header, *a3);
  *(void *)(a1 + 8) = v7 + 120;
  return result;
}

void sub_10011B6D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10011B6DC(uint64_t *a1, uint64_t *a2, double *a3, uint64_t *a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v7 = *a1;
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x222222222222222LL) {
    sub_100007008();
  }
  uint64_t v15 = (uint64_t)(a1 + 2);
  unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v7) >> 3);
  if (2 * v16 > v9) {
    unint64_t v9 = 2 * v16;
  }
  if (v16 >= 0x111111111111111LL) {
    unint64_t v17 = 0x222222222222222LL;
  }
  else {
    unint64_t v17 = v9;
  }
  __int128 v25 = a1 + 2;
  if (v17) {
    uint64_t v18 = (char *)sub_1000BAE04(v15, v17);
  }
  else {
    uint64_t v18 = 0LL;
  }
  __int128 v21 = v18;
  __int128 v22 = &v18[120 * v8];
  uint64_t v23 = (uint64_t)v22;
  __int128 v24 = &v18[120 * v17];
  sub_1000C86A4((uint64_t)v22, *a2, a2[1], *a4, a5, *a6 | (unint64_t)&_mh_execute_header, *a3);
  uint64_t v23 = (uint64_t)(v22 + 120);
  sub_1000CC310(a1, &v21);
  uint64_t v19 = a1[1];
  sub_1000BAFA0((uint64_t)&v21);
  return v19;
}

void sub_10011B800(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10011B814(uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x111111111111111LL) {
    sub_100007008();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v9) {
    unint64_t v9 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888LL) {
    unint64_t v16 = 0x111111111111111LL;
  }
  else {
    unint64_t v16 = v9;
  }
  __int128 v24 = a1 + 2;
  if (v16) {
    unint64_t v17 = (char *)sub_10001D66C((uint64_t)(a1 + 2), v16);
  }
  else {
    unint64_t v17 = 0LL;
  }
  uint64_t v20 = v17;
  __int128 v21 = &v17[240 * v8];
  uint64_t v23 = &v17[240 * v16];
  sub_10011B960((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  __int128 v22 = v21 + 240;
  sub_10001D5F8(a1, &v20);
  uint64_t v18 = a1[1];
  sub_10001D7FC(&v20);
  return v18;
}

void sub_10011B94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10011B960( uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  double v14 = *a4;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a5, *(void *)(a5 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a5;
    uint64_t v16 = *(void *)(a5 + 16);
  }

  __int128 v17 = *(_OWORD *)a7;
  char v18 = *(_BYTE *)(a7 + 16);
  sub_100141FA4(a2, v12, v13, (__int128 *)__p, a6, &v17, *a8, a8[1], v14);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10011BA48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_10011BA6C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  else {
    unint64_t v13 = v7;
  }
  __int128 v21 = a1 + 2;
  if (v13) {
    double v14 = (char *)sub_10001275C((uint64_t)(a1 + 2), v13);
  }
  else {
    double v14 = 0LL;
  }
  __int128 v17 = v14;
  char v18 = &v14[64 * v6];
  uint64_t v20 = &v14[64 * v13];
  sub_10011BB80((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  uint64_t v19 = v18 + 64;
  sub_1000126E8(a1, &v17);
  uint64_t v15 = a1[1];
  sub_1000128C0((uint64_t)&v17);
  return v15;
}

void sub_10011BB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10011BB80(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, double *a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
    uint64_t v12 = *(void *)(a4 + 16);
  }

  sub_10000D89C(a2, v9, v10, (__int128 *)__p, *a5, a5[1], *a6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10011BC14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10011BC30(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v15 = a4;
  uint64_t v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    do
    {
      *(_OWORD *)uint64_t v4 = *(v6 - 1);
      unint64_t v7 = (_BYTE *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        sub_1010DD48C(v7, *(void **)v6, *((void *)v6 + 1));
        uint64_t v9 = v16;
      }

      else
      {
        __int128 v8 = *v6;
        *(void *)(v4 + 32) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v7 = v8;
        uint64_t v9 = v4;
      }

      uint64_t v10 = v6 - 1;
      __int128 v11 = *(__int128 *)((char *)v6 + 24);
      *(void *)(v4 + 56) = *((void *)v6 + 5);
      *(_OWORD *)(v4 + 40) = v11;
      uint64_t v4 = v9 + 64;
      uint64_t v16 = v9 + 64;
      v6 += 4;
    }

    while (v10 + 4 != a3);
  }

  char v14 = 1;
  sub_1000A9DC8((uint64_t)v13);
  return v4;
}

void sub_10011BCFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10011BD10(uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x111111111111111LL) {
    sub_100007008();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v9) {
    unint64_t v9 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888LL) {
    unint64_t v16 = 0x111111111111111LL;
  }
  else {
    unint64_t v16 = v9;
  }
  __int128 v24 = a1 + 2;
  if (v16) {
    __int128 v17 = (char *)sub_10001D66C((uint64_t)(a1 + 2), v16);
  }
  else {
    __int128 v17 = 0LL;
  }
  uint64_t v20 = v17;
  __int128 v21 = &v17[240 * v8];
  uint64_t v23 = &v17[240 * v16];
  sub_10011BE5C((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  __int128 v22 = v21 + 240;
  sub_10001D5F8(a1, &v20);
  uint64_t v18 = a1[1];
  sub_10001D7FC(&v20);
  return v18;
}

void sub_10011BE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10011BE5C( uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  double v14 = *a4;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a5, *(void *)(a5 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a5;
    uint64_t v16 = *(void *)(a5 + 16);
  }

  __int128 v17 = *(_OWORD *)a7;
  char v18 = *(_BYTE *)(a7 + 16);
  sub_100141FA4(a2, v12, v13, (__int128 *)__p, a6, &v17, *a8, a8[1], v14);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10011BF44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_10011BF68(uint64_t *a1, uint64_t *a2, uint64_t a3, char **a4, double *a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  else {
    unint64_t v13 = v7;
  }
  __int128 v21 = a1 + 2;
  if (v13) {
    double v14 = (char *)sub_10001275C((uint64_t)(a1 + 2), v13);
  }
  else {
    double v14 = 0LL;
  }
  __int128 v17 = v14;
  char v18 = &v14[64 * v6];
  uint64_t v20 = &v14[64 * v13];
  sub_10011C07C((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  uint64_t v19 = v18 + 64;
  sub_1000126E8(a1, &v17);
  uint64_t v15 = a1[1];
  sub_1000128C0((uint64_t)&v17);
  return v15;
}

void sub_10011C068(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10011C07C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char **a5, double *a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a4;
    uint64_t v14 = *(void *)(a4 + 16);
  }

  sub_1010DDBC0(__p, *a5);
  sub_10000D994(a2, v9, v10, (__int128 *)__dst, (uint64_t)__p, *a6);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_10011C12C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10011C160(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  unint64_t v5 = (_BYTE *)(v4 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1010DD48C(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)unint64_t v5 = v6;
  }

  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(v4 + 40) = result;
  *(void *)(a1 + 8) = v4 + 64;
  return result;
}

void sub_10011C1D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10011C1E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v21 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10001275C(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  __int128 v11 = &v10[64 * v4];
  v18[0] = v10;
  v18[1] = v11;
  uint64_t v19 = v11;
  uint64_t v20 = &v10[64 * v9];
  *(_OWORD *)__int128 v11 = *(_OWORD *)a2;
  char v12 = v11 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1010DD48C(v12, *(void **)(a2 + 16), *(void *)(a2 + 24));
    __int128 v11 = v19;
  }

  else
  {
    __int128 v13 = *(_OWORD *)(a2 + 16);
    *((void *)v11 + 4) = *(void *)(a2 + 32);
    *(_OWORD *)char v12 = v13;
  }

  uint64_t v14 = &v10[64 * v4];
  __int128 v15 = *(_OWORD *)(a2 + 40);
  *((void *)v14 + 7) = *(void *)(a2 + 56);
  *(_OWORD *)(v14 + 40) = v15;
  uint64_t v19 = v11 + 64;
  sub_1000126E8(a1, v18);
  uint64_t v16 = a1[1];
  sub_1000128C0((uint64_t)v18);
  return v16;
}

void sub_10011C2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

id sub_10011C534(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 32))
  {
    objc_msgSend(*(id *)(v2 + 16), "startSessionForClient:");
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    uint64_t v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Requested PDR fence without an active session! Starting Motion Session}",  buf,  0x12u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
    }

    uint64_t v4 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Requested PDR fence without an active session! Starting Motion Session",  "{msg%{public}.0s:Requested PDR fence without an active session! Starting Motion Session}",  buf,  0x12u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 32LL) = 1;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v5 = qword_1019348D0;
  if (*(_BYTE *)(v2 + 77))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    __int128 v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Fence is already active, setting fence again",  buf,  2u);
    }

    BOOL v7 = sub_1002921D0(115, 0);
    uint64_t v5 = qword_1019348D0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (v5 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
      v15[0] = 0;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Fence is already active, setting fence again",  v15,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLMiLoPedestrianFenceClient setFence]_block_invoke", "%s\n", v14);
      uint64_t v5 = qword_1019348D0;
    }
  }

  if (v5 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  uint64_t v8 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    double v11 = *(float *)(v10 + 72);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 77);
    *(_DWORD *)buf = 68289538;
    int v17 = 0;
    __int16 v18 = 2082;
    uint64_t v19 = "";
    __int16 v20 = 2050;
    double v21 = v11;
    __int16 v22 = 1026;
    int v23 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting PDR fence, fence size in m:%{public}.2f, previous fence state:%{public}hhd}",  buf,  0x22u);
  }

  uint64_t v12 = *(void *)(a1 + 32);
  LODWORD(v9) = *(_DWORD *)(v12 + 72);
  id result = objc_msgSend(*(id *)(v12 + 16), "setFence:forClient:withRadius:", *(void *)(v12 + 40), v9);
  *(_BYTE *)(*(void *)(a1 + 32) + 77LL) = 1;
  return result;
}

void sub_10011C91C(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 77LL))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    uint64_t v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Clearing PDR fence -- will not receive any more fence breach notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
      v6[0] = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Clearing PDR fence -- will not receive any more fence breach notifications",  v6,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLMiLoPedestrianFenceClient clearFence]_block_invoke", "%s\n", v4);
    }

    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 16),  "clearFence:forClient:",  *(void *)(*(void *)(a1 + 32) + 40));
    *(_BYTE *)(*(void *)(a1 + 32) + 77LL) = 0;
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    uint64_t v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "No fence active -- ignoring request to clear fence",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
      v6[0] = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "No fence active -- ignoring request to clear fence",  v6,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLMiLoPedestrianFenceClient clearFence]_block_invoke", "%s\n", v5);
    }
  }

void sub_10011CC54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 32))
  {
    objc_msgSend(*(id *)(v1 + 16), "startSessionForClient:");
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    uint64_t v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      v4[0] = 68289026;
      v4[1] = 0;
      __int16 v5 = 2082;
      __int128 v6 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Starting Motion Session}",  (uint8_t *)v4,  0x12u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 32LL) = 1;
  }

void sub_10011CDAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 32))
  {
    objc_msgSend(*(id *)(v1 + 16), "endSessionForClient:");
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    uint64_t v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      v4[0] = 68289026;
      v4[1] = 0;
      __int16 v5 = 2082;
      __int128 v6 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Ending Motion Session}",  (uint8_t *)v4,  0x12u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 32LL) = 0;
  }

void sub_10011D08C(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) UTF8String];
    std::stringbuf::string_type __p = (void *)68289282;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2082;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Breached PDR fence, fenceId:%{public, location:escape_only}s}",  (uint8_t *)&__p,  0x1Cu);
  }

  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 48LL);
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_1010DDBC0(&__p, (char *)[*(id *)(*(void *)(a1 + 32) + 40) UTF8String]);
  (*(void (**)(uint64_t, void **, double))(v4 + 16))(v4, &__p, Current_1);
  if (SBYTE3(v10) < 0) {
    operator delete(__p);
  }
}

void sub_10011D1D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10011D3C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 64LL) + 16LL))();
}

uint64_t sub_10011D638(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 56LL) + 16LL))();
}

void *sub_10011D670(void *a1, void *a2, uint64_t a3)
{
  *a1 = off_10181FAC0;
  a1[1] = a2;
  a1[2] = a3;
  id v5 = [a2 silo];
  sub_1002F0B04(&v26);
  CFStringRef v6 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsPedestrianFenceRadiusInMeters", 0x8000100u, kCFAllocatorNull);
  sub_1002A827C(v26, (uint64_t)v6, &v25);
  int v8 = v7;
  CFRelease(v6);
  float v9 = v25;
  id v10 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (!v8) {
    float v9 = 3.5;
  }
  if (sub_1004F75F8())
  {
    sub_1002F0B04(&v26);
    CFStringRef v13 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsPedestrianFenceRadiusForIpadInMeters",  0x8000100u,  kCFAllocatorNull);
    sub_1002A827C(v26, (uint64_t)v13, &v25);
    int v15 = v14;
    CFRelease(v13);
    float v9 = v25;
    uint64_t v16 = v27;
    if (v27)
    {
      int v17 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    if (!v15) {
      float v9 = 3.5;
    }
  }

  int v23[4] = a1;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  _DWORD v24[2] = sub_10011D8DC;
  v24[3] = &unk_10181FAF0;
  v24[4] = a1;
  v22[5] = a1;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10011DC78;
  v23[3] = &unk_10181FB10;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10011DDC8;
  v22[3] = &unk_10181FB38;
  v22[4] = @"CLMiLoPDRFence";
  uint64_t v19 = objc_alloc(&OBJC_CLASS___CLMiLoPedestrianFenceClient);
  *(float *)&double v20 = v9;
  a1[3] = -[CLMiLoPedestrianFenceClient initInUniverse:andIdentifier:andRadiusInMeters:andCallback:andStatusCallback:andErrorCallback:]( v19,  "initInUniverse:andIdentifier:andRadiusInMeters:andCallback:andStatusCallback:andErrorCallback:",  a2,  @"CLMiLoPDRFence",  v24,  v22,  v23,  v20);
  a1[4] = [v5 newTimer];
  a1[5] = [v5 newTimer];
  return a1;
}

void sub_10011D8BC(_Unwind_Exception *a1)
{
}

void sub_10011D8DC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  sub_10011DA50(v5);
  (*(void (**)(void, uint64_t, double))(**(void **)(v5 + 16) + 16LL))(*(void *)(v5 + 16), a2, a3);
  sub_100063958(v9);
  if (!sub_10007E3C4(4u)) {
    __assert_rtn("set_status", "microlocation.pb.h", 17711, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v11 |= 4u;
  int v10 = 4;
  uint64_t v6 = *(void *)(v5 + 16);
  int v8 = 0;
  sub_100018E34(&v8);
  *(void *)&__int128 v12 = sub_100017338((ssize_t)&v8);
  *((void *)&v12 + 1) = v7;
  sub_10011DBF0(&v12, (uint64_t)v9, (uint64_t)v13, a3);
  (*(void (**)(uint64_t, _BYTE *))(*(void *)v6 + 32LL))(v6, v13);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v14);
  sub_100019D7C((unsigned int *)&v8);
  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v9);
}

void sub_10011DA10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, char a11)
{
}

id sub_10011DA50(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "stopAllStatusTimers", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "stopAllStatusTimers",  v5,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationMotionBridge::stopAllStatusTimers()", "%s\n", v4);
  }

  [*(id *)(a1 + 32) invalidate];
  return [*(id *)(a1 + 40) invalidate];
}

void sub_10011DBF0(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
}

void sub_10011DC64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10011DC78(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_100063958(v8);
  if (!sub_10007E3C4(0xAu)) {
    __assert_rtn("set_status", "microlocation.pb.h", 17711, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v11 |= 0x24u;
  int v9 = 10;
  int v10 = a2;
  uint64_t v4 = *(void *)(v3 + 16);
  int v7 = 0;
  sub_100018E34(&v7);
  *(void *)&__int128 v12 = sub_100017338((ssize_t)&v7);
  *((void *)&v12 + 1) = v5;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_10011DBF0(&v12, (uint64_t)v8, (uint64_t)v13, Current_1);
  (*(void (**)(uint64_t, _BYTE *))(*(void *)v4 + 32LL))(v4, v13);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v14);
  sub_100019D7C((unsigned int *)&v7);
  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_10011DD88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, char a11)
{
}

void sub_10011DDC8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if ([a2 objectForKey:*(void *)(a1 + 32)])
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    uint64_t v4 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2114;
      __int128 v12 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Received status report for active fence, Status report:%{public, location:escape_only}@}",  (uint8_t *)&v7,  0x1Cu);
    }

    sub_10011DFF4(v3);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    uint64_t v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2114;
      __int128 v12 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Did not receive status report for active fence, Status report:%{public, location:escape_only}@}",  (uint8_t *)&v7,  0x1Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
    }

    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2114;
      __int128 v12 = a2;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Did not receive status report for active fence",  "{msg%{public}.0s:Did not receive status report for active fence, Status report:%{public, location:escape_only}@}",  (uint8_t *)&v7,  0x1Cu);
    }
  }

id sub_10011DFF4(uint64_t a1)
{
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_1002F0B04(buf);
  CFStringRef v3 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMaxTimeAllowedWithoutFenceStatusReport",  0x8000100u,  kCFAllocatorNull);
  int v4 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v3, &v12);
  CFRelease(v3);
  double v5 = v12;
  uint64_t v6 = *(std::__shared_weak_count **)v14;
  if (*(void *)v14)
  {
    int v7 = (unint64_t *)(*(void *)v14 + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (!v4) {
    double v5 = 600.0;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10011E2A4;
  v11[3] = &unk_10181D3D0;
  v11[4] = a1;
  [*(id *)(a1 + 32) setHandler:v11];
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  __int16 v9 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v14 = 2082;
    *(void *)&v14[2] = "";
    __int16 v15 = 2050;
    double v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:stopAllStatusTimersAndStartFenceStatusTimer: setting fence status timer to fire in the futu re, Delay to next fire:%{public}f}",  buf,  0x1Cu);
  }

  return [*(id *)(a1 + 32) setNextFireTime:Current_1 + v5];
}

void sub_10011E1D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10011E22C(uint64_t a1)
{
  *(void *)a1 = off_10181FAC0;

  [*(id *)(a1 + 32) invalidate];
  *(void *)(a1 + 32) = 0LL;
  [*(id *)(a1 + 40) invalidate];

  *(void *)(a1 + 40) = 0LL;
  return a1;
}

void sub_10011E290(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10011E22C(a1);
  operator delete(v1);
}

id sub_10011E2A4(uint64_t a1)
{
  return sub_10011E2AC(*(void *)(a1 + 32));
}

id sub_10011E2AC(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "handleFenceStatusTimerFire", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    v5[0] = 0;
    int v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "handleFenceStatusTimerFire",  v5,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationMotionBridge::handleFenceStatusTimerFire()", "%s\n", v4);
  }

  return sub_10011E444(a1);
}

id sub_10011E444(uint64_t a1)
{
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_1002F0B04(buf);
  CFStringRef v3 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMaxDelayAfterFenceStatusReportTimerFires",  0x8000100u,  kCFAllocatorNull);
  int v4 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v3, &v12);
  CFRelease(v3);
  double v5 = v12;
  uint64_t v6 = *(std::__shared_weak_count **)v14;
  if (*(void *)v14)
  {
    int v7 = (unint64_t *)(*(void *)v14 + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (!v4) {
    double v5 = 30.0;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10011E674;
  v11[3] = &unk_10181D3D0;
  v11[4] = a1;
  [*(id *)(a1 + 40) setHandler:v11];
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  __int16 v9 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v14 = 2082;
    *(void *)&v14[2] = "";
    __int16 v15 = 2050;
    double v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:stopAllStatusTimersAndStartRaceDelayTimer: setting race delay timer to fire in the future , Delay to next fire:%{public}f}",  buf,  0x1Cu);
  }

  return [*(id *)(a1 + 40) setNextFireTime:Current_1 + v5];
}

void sub_10011E624( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10011E674(uint64_t a1)
{
  return sub_10011E67C(*(void *)(a1 + 32));
}

uint64_t sub_10011E67C(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "handleRaceDelayTimerFire", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    v5[0] = 0;
    int v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "handleRaceDelayTimerFire",  v5,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationMotionBridge::handleRaceDelayTimerFire()", "%s\n", v4);
  }

  sub_10011DA50(a1);
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
}

void sub_10011E824(uint64_t a1)
{
  if (!sub_10007E3C4(8u)) {
    __assert_rtn("set_status", "microlocation.pb.h", 17711, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v8 |= 4u;
  int v7 = 8;
  uint64_t v2 = *(void *)(a1 + 16);
  int v5 = 0;
  sub_100018E34(&v5);
  *(void *)&__int128 v9 = sub_100017338((ssize_t)&v5);
  *((void *)&v9 + 1) = v3;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_10011DBF0(&v9, (uint64_t)v6, (uint64_t)v10, Current_1);
  (*(void (**)(uint64_t, _BYTE *))(*(void *)v2 + 32LL))(v2, v10);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v11);
  sub_100019D7C((unsigned int *)&v5);
  [*(id *)(a1 + 24) setFence];
  sub_10011DFF4(a1);
  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v6);
}

void sub_10011E938( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, char a11)
{
}

void sub_10011E978(uint64_t a1)
{
  if (!sub_10007E3C4(9u)) {
    __assert_rtn("set_status", "microlocation.pb.h", 17711, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v8 |= 4u;
  int v7 = 9;
  uint64_t v2 = *(void *)(a1 + 16);
  int v5 = 0;
  sub_100018E34(&v5);
  *(void *)&__int128 v9 = sub_100017338((ssize_t)&v5);
  *((void *)&v9 + 1) = v3;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_10011DBF0(&v9, (uint64_t)v6, (uint64_t)v10, Current_1);
  (*(void (**)(uint64_t, _BYTE *))(*(void *)v2 + 32LL))(v2, v10);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v11);
  sub_100019D7C((unsigned int *)&v5);
  [*(id *)(a1 + 24) clearFence];
  sub_10011DA50(a1);
  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v6);
}

void sub_10011EA8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, char a11)
{
}

id sub_10011EACC(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationMotionBridge::startMotionSession}",  (uint8_t *)v4,  0x12u);
  }

  return [*(id *)(a1 + 24) startSession];
}

id sub_10011EBAC(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationMotionBridge::stopMotionSession}",  (uint8_t *)v4,  0x12u);
  }

  return [*(id *)(a1 + 24) endSession];
}

uint64_t sub_10011EC8C(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &off_10181FB68;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v65 = a1 + 32;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_BYTE *)(a1 + 72) = 0;
  uint64_t v3 = a1 + 72;
  *(_BYTE *)(a1 + 136) = 0;
  id v66 = [a2 silo];
  sub_1002F0B04(buf);
  CFStringRef v4 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMotionStopDetectionModuleEnable",  0x8000100u,  kCFAllocatorNull);
  char v5 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)v4, (BOOL *)&v81);
  CFRelease(v4);
  int v6 = v81;
  int v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v8 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v6) {
    char v10 = 0;
  }
  else {
    char v10 = v5;
  }
  if ((v10 & 1) != 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    uint64_t v11 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289282LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 1026;
      *(_DWORD *)&buf[20] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationStopMotionDetectionBridge CTOR, setting is off so object did not initializ e, Stop detection enabled:%{public}hhd}",  buf,  0x18u);
    }
  }

  else
  {
    sub_1002F0B04(buf);
    double v12 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMotionStopDetectionModuleRadiuses",  0x8000100u,  kCFAllocatorNull);
    BOOL v13 = sub_1002AA610(*(uint64_t *)buf, v12, (CFTypeRef *)&v81);
    CFRelease(v12);
    if (v13)
    {
      v14.n128_f64[0] = sub_100120E3C((const __CFArray *)v81, (uint64_t)__p);
    }

    else
    {
      __int16 v15 = operator new(0x10uLL);
      v80 = v15 + 1;
      __n128 v14 = (__n128)xmmword_1012CF050;
      _OWORD *v15 = xmmword_1012CF050;
      __p[0] = v15;
      __p[1] = v15 + 1;
    }

    double v16 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      int v17 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v14);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    sub_1002F0B04(buf);
    CFStringRef v19 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMotionStopDetectionModuleOngoingTimerTimeout",  0x8000100u,  kCFAllocatorNull);
    int v20 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v19, &v81);
    CFRelease(v19);
    double v21 = *(double *)&v81;
    __int16 v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      int v23 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    if (!v20) {
      double v21 = 5.0;
    }
    sub_1002F0B04(buf);
    float v25 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMotionStopDetectionModuleTimeouts",  0x8000100u,  kCFAllocatorNull);
    BOOL v26 = sub_1002AA610(*(uint64_t *)buf, v25, (CFTypeRef *)&v81);
    CFRelease(v25);
    if (v26)
    {
      v27.n128_f64[0] = sub_100120F98((const __CFArray *)v81, (uint64_t)&v77);
    }

    else
    {
      __int128 v28 = operator new(0x10uLL);
      *((void *)&v78 + 1) = v28 + 1;
      __n128 v27 = (__n128)xmmword_1012CF060;
      *__int128 v28 = xmmword_1012CF060;
      v77 = v28;
      *(void *)&__int128 v78 = v28 + 1;
    }

    __int128 v29 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v30 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v29->__on_zero_shared)(v29, v27);
        std::__shared_weak_count::__release_weak(v29);
      }
    }

    if ((sub_1004F75F8() & 1) != 0)
    {
      sub_1002F0B04(&v81);
      unint64_t v32 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMotionStopDetectionModuleIpadRadii",  0x8000100u,  kCFAllocatorNull);
      BOOL v33 = sub_1002AA610(v81, v32, (CFTypeRef *)&v74.__r_.__value_.__l.__data_);
      CFRelease(v32);
      if (v33)
      {
        v34.n128_f64[0] = sub_1001210F4((const __CFArray *)v74.__r_.__value_.__l.__data_, (uint64_t)buf);
      }

      else
      {
        memset(buf, 0, sizeof(buf));
        v37 = operator new(0x10uLL);
        *(void *)&buf[16] = v37 + 1;
        __n128 v34 = (__n128)xmmword_1012CF070;
        _OWORD *v37 = xmmword_1012CF070;
        *(void *)buf = v37;
        *(void *)&uint8_t buf[8] = v37 + 1;
      }

      BOOL v38 = (std::__shared_weak_count *)*((void *)&v81 + 1);
      if (*((void *)&v81 + 1))
      {
        uint64_t v39 = (unint64_t *)(*((void *)&v81 + 1) + 8LL);
        do
          unint64_t v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v38->__on_zero_shared)(v38, v34);
          std::__shared_weak_count::__release_weak(v38);
        }
      }

      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }

      *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)buf;
      v80 = *(_OWORD **)&buf[16];
      sub_1002F0B04(buf);
      CFStringRef v41 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMotionStopDetectionModuleIpadOngoingTimerTimeout",  0x8000100u,  kCFAllocatorNull);
      int v42 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v41, &v81);
      CFRelease(v41);
      double v21 = *(double *)&v81;
      v43 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        __int128 v44 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }

      if (!v42) {
        double v21 = 300.0;
      }
      sub_1002F0B04(&v81);
      v46 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMotionStopDetectionModuleIpadTimeouts",  0x8000100u,  kCFAllocatorNull);
      BOOL v47 = sub_1002AA610(v81, v46, (CFTypeRef *)&v74.__r_.__value_.__l.__data_);
      CFRelease(v46);
      if (v47)
      {
        v48.n128_f64[0] = sub_100121250((const __CFArray *)v74.__r_.__value_.__l.__data_, (uint64_t)buf);
      }

      else
      {
        memset(buf, 0, sizeof(buf));
        char v49 = operator new(0x10uLL);
        *(void *)&buf[16] = v49 + 1;
        __n128 v48 = (__n128)xmmword_1012CF080;
        *char v49 = xmmword_1012CF080;
        *(void *)buf = v49;
        *(void *)&uint8_t buf[8] = v49 + 1;
      }

      uint64_t v50 = (std::__shared_weak_count *)*((void *)&v81 + 1);
      if (*((void *)&v81 + 1))
      {
        unint64_t v51 = (unint64_t *)(*((void *)&v81 + 1) + 8LL);
        do
          unint64_t v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v50->__on_zero_shared)(v50, v48);
          std::__shared_weak_count::__release_weak(v50);
        }
      }

      if (v77)
      {
        *(void *)&__int128 v78 = v77;
        operator delete(v77);
      }

      uint64_t v35 = *(void **)buf;
      v77 = *(void **)buf;
      __int128 v78 = *(_OWORD *)&buf[8];
      uint64_t v36 = *(void *)&buf[8];
    }

    else
    {
      uint64_t v35 = v77;
      uint64_t v36 = v78;
    }

    v76[0] = _NSConcreteStackBlock;
    v76[1] = 3221225472LL;
    v76[2] = sub_10011F828;
    v76[3] = &unk_10181FAF0;
    v76[4] = a1;
    v75[0] = _NSConcreteStackBlock;
    v75[1] = 3221225472LL;
    v75[2] = sub_10011FBC8;
    v75[3] = &unk_10181FB10;
    v53 = __p[0];
    v75[4] = a1;
    if ((char *)__p[1] - (char *)__p[0] == v36 - (void)v35)
    {
      uint64_t v64 = v3;
      if (__p[1] != __p[0])
      {
        unint64_t v54 = 0LL;
        do
        {
          *(void *)buf = v53[v54];
          *(void *)&uint8_t buf[8] = *((void *)v77 + v54);
          buf[16] = 0;
          BYTE4(v88) = 0;
          sub_10011FD1C((char *)buf, &v74);
          unint64_t v55 = objc_alloc(&OBJC_CLASS___CLMiLoPedestrianFenceClient);
          uint64_t v56 = *(void *)(a1 + 8);
          if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v57 = &v74;
          }
          else {
            uint64_t v57 = (std::stringbuf::string_type *)v74.__r_.__value_.__r.__words[0];
          }
          uint64_t v58 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v57, v64);
          HIDWORD(v59) = *(_DWORD *)&buf[4];
          *(float *)&double v59 = *(double *)buf;
          id v73 = -[CLMiLoPedestrianFenceClient initInUniverse:andIdentifier:andRadiusInMeters:andCallback:andStatusCallback:andErrorCallback:]( v55,  "initInUniverse:andIdentifier:andRadiusInMeters:andCallback:andStatusCallback:andErrorCallback:",  v56,  v58,  v76,  &stru_10181FBB8,  v75,  v59);
          id v72 = [v66 newTimer];
          v82 = &v72;
          v83 = &v74;
          *(void *)&__int128 v81 = buf;
          *((void *)&v81 + 1) = &v73;
          sub_1001214AC(v65, (unsigned __int8 *)&v74, (uint64_t)&unk_1012CF090, (__int128 **)&v83, &v81);
          if (BYTE4(v88) && SBYTE3(v88) < 0) {
            operator delete(*(void **)&buf[16]);
          }
          ++v54;
          v53 = __p[0];
        }

        while (v54 < ((char *)__p[1] - (char *)__p[0]) >> 3);
      }

      *(void *)&__int128 v68 = nan("");
      *((double *)&v68 + 1) = v21;
      sub_1010DDBC0(v69, "ongoingTimer");
      char v71 = 1;
      id v60 = [v66 newTimer];
      *(_OWORD *)buf = v68;
      sub_10004B7D4((uint64_t)&buf[16], (__int128 *)v69);
      uint64_t v89 = 0LL;
      id v90 = v60;
      sub_10011FF64(v64, (uint64_t)buf);
      if (BYTE4(v88) && SBYTE3(v88) < 0) {
        operator delete(*(void **)&buf[16]);
      }
      if (v71 && v70 < 0) {
        operator delete(v69[0]);
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
      std::string v61 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(void *)buf = 68289794LL;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 1026;
        *(_DWORD *)&buf[20] = 1;
        __int16 v85 = 2050;
        int64_t v86 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        __int16 v87 = 2050;
        uint64_t v88 = (uint64_t)(v78 - (void)v77) >> 3;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLMicroLocationStopMotionDetectionBridge CTOR, wrong configuration, object did not init ialize, Stop detection enabled:%{public}hhd, Num Radiuses:%{public}lu, Num Timeouts:%{public}lu}",  buf,  0x2Cu);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181FC58);
        }
      }

      std::string v62 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        *(void *)buf = 68289794LL;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 1026;
        *(_DWORD *)&buf[20] = 1;
        __int16 v85 = 2050;
        int64_t v86 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        __int16 v87 = 2050;
        uint64_t v88 = (uint64_t)(v78 - (void)v77) >> 3;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v62,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLMicroLocationStopMotionDetectionBridge CTOR, wrong configuration, object did not initialize",  "{msg%{public}.0s:CLMicroLocationStopMotionDetectionBridge CTOR, wrong configuration, object did not init ialize, Stop detection enabled:%{public}hhd, Num Radiuses:%{public}lu, Num Timeouts:%{public}lu}",  buf,  0x2Cu);
      }
    }

    if (v77)
    {
      *(void *)&__int128 v78 = v77;
      operator delete(v77);
    }

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  return a1;
}

void sub_10011F6BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *__p, uint64_t a41, uint64_t a42, void *a43, uint64_t a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a43) {
    operator delete(a43);
  }
  sub_1001213AC(v44);
  sub_1001213EC(a10);
  _Unwind_Resume(a1);
}

void sub_10011F828(uint64_t a1, std::string *a2, double a3)
{
}

void sub_10011F830(uint64_t a1, std::string *a2, double a3)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  int v6 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v7 = a2;
    }
    else {
      int v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 68289282;
    int v24 = 0;
    __int16 v25 = 2082;
    BOOL v26 = "";
    __int16 v27 = 2082;
    __int128 v28 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:StopMotionDetectionBridge::onMotionMeasurements, fenceId:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  int v8 = sub_100121918((void *)(a1 + 32), (unsigned __int8 *)a2);
  unint64_t v9 = v8;
  if (v8)
  {
    [*((id *)v8 + 11) setFence];
    [*((id *)v9 + 12) setNextFireTime:a3 + *((double *)v9 + 6)];
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    char v10 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = (a2->__r_.__value_.__s.__size_ & 0x80u) == 0 ? a2 : (std::string *)a2->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289282;
      int v24 = 0;
      __int16 v25 = 2082;
      BOOL v26 = "";
      __int16 v27 = 2082;
      __int128 v28 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:onMotionMeasurements, couldn't find StopMotionDetection element, fenceIdStr:%{publi c, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
    }

    double v12 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v13 = a2;
      }
      else {
        BOOL v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68289282;
      int v24 = 0;
      __int16 v25 = 2082;
      BOOL v26 = "";
      __int16 v27 = 2082;
      __int128 v28 = v13;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "onMotionMeasurements, couldn't find StopMotionDetection element",  "{msg%{public}.0s:onMotionMeasurements, couldn't find StopMotionDetection element, fenceIdStr:%{publi c, location:escape_only}s}",  buf,  0x1Cu);
    }
  }

  sub_100063958(v18);
  if (!sub_10007E3C4(5u)) {
    __assert_rtn("set_status", "microlocation.pb.h", 17711, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  int v19 = 5;
  v21 |= 0xCu;
  __n128 v14 = v20;
  if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    __n128 v14 = (std::string *)operator new(0x18uLL);
    v14->__r_.__value_.__r.__words[0] = 0LL;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    int v20 = v14;
  }

  std::string::operator=(v14, a2);
  uint64_t v15 = *(void *)(a1 + 16);
  int v17 = 0;
  sub_100018E34(&v17);
  *(void *)&__int128 v22 = sub_100017338((ssize_t)&v17);
  *((void *)&v22 + 1) = v16;
  sub_10011DBF0(&v22, (uint64_t)v18, (uint64_t)buf, a3);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v15 + 32LL))(v15, buf);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v29);
  sub_100019D7C((unsigned int *)&v17);
  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v18);
}

void sub_10011FB88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, char a12)
{
}

void sub_10011FBC8(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_100063958(v8);
  if (!sub_10007E3C4(0xAu)) {
    __assert_rtn("set_status", "microlocation.pb.h", 17711, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v11 |= 0x24u;
  int v9 = 10;
  int v10 = a2;
  uint64_t v4 = *(void *)(v3 + 16);
  int v7 = 0;
  sub_100018E34(&v7);
  *(void *)&__int128 v12 = sub_100017338((ssize_t)&v7);
  *((void *)&v12 + 1) = v5;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_10011DBF0(&v12, (uint64_t)v8, (uint64_t)v13, Current_1);
  (*(void (**)(uint64_t, _BYTE *))(*(void *)v4 + 32LL))(v4, v13);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v14);
  sub_100019D7C((unsigned int *)&v7);
  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_10011FCD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, char a11)
{
}

char *sub_10011FD1C@<X0>(char *result@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v2 = (double *)result;
  if (result[40])
  {
    if (result[39] < 0)
    {
      return (char *)sub_1010DD48C(a2, *((void **)result + 2), *((void *)result + 3));
    }

    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)result + 1);
      a2->__r_.__value_.__l.__cap_ = *((void *)result + 4);
    }
  }

  else
  {
    sub_10000CE18((uint64_t)v13);
    uint64_t v4 = v14;
    *(_DWORD *)((char *)&v14 + *(void *)(v14 - 24) + 8) = *(_DWORD *)((_BYTE *)&v14 + *(void *)(v14 - 24) + 8) & 0xFFFFFEFB | 4;
    *(std::locale::__imp **)((char *)&v15.__loc_.__locale_ + *(void *)(v4 - 24)) = (std::locale::__imp *)2;
    uint64_t v5 = (char *)operator new(0x28uLL);
    strcpy(v5, "MiLoStopMotionDetectionFence:radius:");
    sub_10000CF44(&v14, (uint64_t)v5, 36LL);
    int v6 = (void *)std::ostream::operator<<(*v2);
    char v12 = 10;
    strcpy((char *)v11, "m:timeout:");
    sub_10000CF44(v6, (uint64_t)v11, 10LL);
    int v7 = (void *)std::ostream::operator<<(v2[1]);
    char v10 = 3;
    LODWORD(__p) = 6514035;
    sub_10000CF44(v7, (uint64_t)&__p, 3LL);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    operator delete(v5);
    std::stringbuf::str(a2, &v15);
    *(void *)((char *)v13
    uint64_t v14 = v8;
    std::streambuf::~streambuf(&v15);
    return (char *)std::ios::~ios(&v16);
  }

  return result;
}

void sub_10011FF0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
}

uint64_t sub_10011FF64(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = a1 + 16;
  if (v4)
  {
    sub_1000F8B0C(v5, (__n128 *)(a2 + 16));
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }

  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(void *)(v5 + 16) = *(void *)(a2 + 32);
      *(_OWORD *)uint64_t v5 = v6;
      *(void *)(a2 + 24) = 0LL;
      *(void *)(a2 + 32) = 0LL;
      *(void *)(a2 + 16) = 0LL;
      *(_BYTE *)(a1 + 40) = 1;
    }

    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = 1;
  }

  return a1;
}

uint64_t sub_10011FFF4(uint64_t a1)
{
  *(void *)a1 = &off_10181FB68;
  for (uint64_t i = *(uint64_t ***)(a1 + 48); i; uint64_t i = (uint64_t **)*i)
  {

    i[11] = 0LL;
    [i[12] invalidate];

    i[12] = 0LL;
  }

  if (*(_BYTE *)(a1 + 136))
  {
    [*(id *)(a1 + 128) invalidate];

    *(void *)(a1 + 128) = 0LL;
  }

  sub_1001213AC(a1 + 72);
  sub_1001213EC(a1 + 32);
  return a1;
}

void sub_10012008C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10011FFF4(a1);
  operator delete(v1);
}

char *sub_1001200A0(char *result, __n128 a2)
{
  if (result[24])
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)*((void *)result + 6);
    if (v3)
    {
      a2.n128_u64[0] = 68289282LL;
      __n128 v8 = a2;
      do
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181FC58);
        }
        int v4 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = (std::stringbuf::string_type *)(v3 + 2);
          *(_DWORD *)buf = v8.n128_u32[0];
          int v11 = 0;
          __int16 v12 = 2082;
          BOOL v13 = "";
          __int16 v14 = 2082;
          std::stringbuf v15 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:setting stopDetection element to Idle (clear fence and timer), Element ID:%{pub lic, location:escape_only}s}",  buf,  0x1Cu);
        }

        objc_msgSend((id)v3[11], "clearFence", *(_OWORD *)&v8);
        id result = (char *)[(id)v3[12] invalidate];
        uint64_t v3 = (uint64_t *)*v3;
      }

      while (v3);
    }

    if (v2[136])
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
      __int128 v6 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10011FD1C(v2 + 72, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 68289282;
        int v11 = 0;
        __int16 v12 = 2082;
        BOOL v13 = "";
        __int16 v14 = 2082;
        std::stringbuf v15 = p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:setting stopDetection ongoing timer to Idle (clear fence), Element ID:%{public, l ocation:escape_only}s}",  buf,  0x1Cu);
      }

      id result = (char *)[*((id *)v2 + 16) invalidate];
    }

    v2[24] = 0;
  }

  return result;
}

void sub_1001202C8(uint64_t a1)
{
  *(_BYTE *)(a1 + 24) = 1;
  *(double *)&__int128 v2 = j__CFAbsoluteTimeGetCurrent_1();
  uint64_t v3 = *(uint64_t **)(a1 + 48);
  if (v3)
  {
    double v4 = *(double *)&v2;
    *(void *)&__int128 v2 = 68289282LL;
    __int128 v8 = v2;
    do
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
      uint64_t v5 = v3 + 2;
      __int128 v6 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = v3 + 2;
        *(_DWORD *)buf = v8;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2082;
        *(void *)&buf[20] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:starting stopDetection in element (set fence and timer), Element ID:%{public, loc ation:escape_only}s}",  buf,  0x1Cu);
      }

      if (*((char *)v3 + 39) < 0)
      {
        sub_1010DD48C(buf, (void *)v3[2], v3[3]);
      }

      else
      {
        *(_OWORD *)buf = *(_OWORD *)v5;
        *(void *)&buf[16] = v3[4];
      }

      objc_msgSend((id)v3[11], "setFence", v8, v9, v10, v11, v12, v13);
      [(id)v3[12] setNextFireTime:v4 + *((double *)v3 + 6)];
      int v9 = _NSConcreteStackBlock;
      uint64_t v10 = 3321888768LL;
      int v11 = sub_100120524;
      __int16 v12 = &unk_10181FBD8;
      uint64_t v13 = a1;
      if ((buf[23] & 0x80000000) != 0)
      {
        sub_1010DD48C(&__p, *(void **)buf, *(unint64_t *)&buf[8]);
      }

      else
      {
        __int128 __p = *(_OWORD *)buf;
        uint64_t v15 = *(void *)&buf[16];
      }

      [(id)v3[12] setHandler:&v9];
      if (SHIBYTE(v15) < 0) {
        operator delete((void *)__p);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v3 = (uint64_t *)*v3;
    }

    while (v3);
  }

  sub_1001207DC(a1);
}

void sub_1001204E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

void sub_100120524(uint64_t a1)
{
  __int128 v2 = *(void **)(a1 + 32);
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100120550(v2, (const std::string *)(a1 + 40), Current_1);
}

void sub_100120550(void *a1, const std::string *a2, double a3)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  __int128 v6 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v7 = a2;
    }
    else {
      int v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 68289282;
    int v18 = 0;
    __int16 v19 = 2082;
    int v20 = "";
    __int16 v21 = 2082;
    __int128 v22 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:StopMotionDetectionBridge::onTimerTimeout, fenceIdStr:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  (*(void (**)(void *))(*a1 + 16LL))(a1);
  sub_100063958(v12);
  if (!sub_10007E3C4(6u)) {
    __assert_rtn("set_status", "microlocation.pb.h", 17711, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  int v13 = 6;
  v15 |= 0xCu;
  __int128 v8 = v14;
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    __int128 v8 = (std::string *)operator new(0x18uLL);
    v8->__r_.__value_.__r.__words[0] = 0LL;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    __int16 v14 = v8;
  }

  std::string::operator=(v8, a2);
  uint64_t v9 = a1[2];
  int v11 = 0;
  sub_100018E34(&v11);
  *(void *)&__int128 v16 = sub_100017338((ssize_t)&v11);
  *((void *)&v16 + 1) = v10;
  sub_10011DBF0(&v16, (uint64_t)v12, (uint64_t)buf, a3);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v9 + 32LL))(v9, buf);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v23);
  sub_100019D7C((unsigned int *)&v11);
  (*(void (**)(void, double))(*(void *)a1[2] + 16LL))(a1[2], a3);
  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v12);
}

void sub_100120758( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, char a12)
{
}

void *sub_100120798(uint64_t a1, uint64_t a2)
{
  id result = (void *)(a1 + 40);
  __int128 v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(void *)(a2 + 56);
  *(_OWORD *)id result = v3;
  return result;
}

void sub_1001207C8(uint64_t a1)
{
}

void sub_1001207DC(uint64_t a1)
{
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  if (*(_BYTE *)(a1 + 136))
  {
    double v3 = Current_1;
    sub_10011FD1C((char *)(a1 + 72), &__p);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FC58);
    }
    double v4 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2082;
      int v13 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:setting ongoing timer, Element ID:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    [*(id *)(a1 + 128) setNextFireTime:v3 + *(double *)(a1 + 80)];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_100120BF8;
    v6[3] = &unk_10181D3D0;
    v6[4] = a1;
    [*(id *)(a1 + 128) setHandler:v6];
  }

void sub_100120950( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100120978(void *result, __n128 a2)
{
  __int128 v2 = (uint64_t *)result[6];
  if (v2)
  {
    a2.n128_u64[0] = 68289282LL;
    __n128 v5 = a2;
    do
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
      double v3 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        double v4 = v2 + 2;
        *(_DWORD *)buf = v5.n128_u32[0];
        int v7 = 0;
        __int16 v8 = 2082;
        int v9 = "";
        __int16 v10 = 2082;
        int v11 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:starting session for stopDetection element, Element ID:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      id result = objc_msgSend((id)v2[11], "startSession", *(_OWORD *)&v5);
      __int128 v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100120AB8(void *result, __n128 a2)
{
  __int128 v2 = (uint64_t *)result[6];
  if (v2)
  {
    a2.n128_u64[0] = 68289282LL;
    __n128 v5 = a2;
    do
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FC58);
      }
      double v3 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        double v4 = v2 + 2;
        *(_DWORD *)buf = v5.n128_u32[0];
        int v7 = 0;
        __int16 v8 = 2082;
        int v9 = "";
        __int16 v10 = 2082;
        int v11 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:stopping session for stopDetection element, Element ID:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      id result = objc_msgSend((id)v2[11], "endSession", *(_OWORD *)&v5);
      __int128 v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  return result;
}

void sub_100120BF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100120C1C(v1, Current_1);
}

void sub_100120C1C(uint64_t a1, double a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FC58);
  }
  double v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    int v15 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:StopMotionDetectionBridge::ongoingTimerTimeout}",  buf,  0x12u);
  }

  sub_100063958(v8);
  if (!sub_10007E3C4(7u)) {
    __assert_rtn("set_status", "microlocation.pb.h", 17711, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v10 |= 4u;
  int v9 = 7;
  uint64_t v5 = *(void *)(a1 + 16);
  int v7 = 0;
  sub_100018E34(&v7);
  *(void *)&__int128 v11 = sub_100017338((ssize_t)&v7);
  *((void *)&v11 + 1) = v6;
  sub_10011DBF0(&v11, (uint64_t)v8, (uint64_t)buf, a2);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 32LL))(v5, buf);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v16);
  sub_100019D7C((unsigned int *)&v7);
  (*(void (**)(void, double))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16), a2);
  sub_1001207DC(a1);
  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100120DD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, char a12)
{
}

void sub_100120E10(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

double sub_100120E3C@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100120EB8, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_100120E9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100120EB8(const void *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    __int16 v8 = *(void **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)sub_1000071BC(a2 + 16, v12);
      __int16 v8 = *(void **)a2;
      uint64_t v6 = *(void **)(a2 + 8);
    }

    else
    {
      int v13 = 0LL;
    }

    __int16 v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)__int16 v14 = v4;
    CFRange v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v6 = v3;
    CFRange v7 = v6 + 1;
  }

  *(void *)(a2 + 8) = v7;
}

double sub_100120F98@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100121014, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_100120FF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100121014(const void *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    __int16 v8 = *(void **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)sub_1000071BC(a2 + 16, v12);
      __int16 v8 = *(void **)a2;
      uint64_t v6 = *(void **)(a2 + 8);
    }

    else
    {
      int v13 = 0LL;
    }

    __int16 v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)__int16 v14 = v4;
    CFRange v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v6 = v3;
    CFRange v7 = v6 + 1;
  }

  *(void *)(a2 + 8) = v7;
}

double sub_1001210F4@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100121170, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_100121154( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100121170(const void *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    __int16 v8 = *(void **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)sub_1000071BC(a2 + 16, v12);
      __int16 v8 = *(void **)a2;
      uint64_t v6 = *(void **)(a2 + 8);
    }

    else
    {
      int v13 = 0LL;
    }

    __int16 v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)__int16 v14 = v4;
    CFRange v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v6 = v3;
    CFRange v7 = v6 + 1;
  }

  *(void *)(a2 + 8) = v7;
}

double sub_100121250@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_1001212CC, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_1001212B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001212CC(const void *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    __int16 v8 = *(void **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)sub_1000071BC(a2 + 16, v12);
      __int16 v8 = *(void **)a2;
      uint64_t v6 = *(void **)(a2 + 8);
    }

    else
    {
      int v13 = 0LL;
    }

    __int16 v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)__int16 v14 = v4;
    CFRange v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v6 = v3;
    CFRange v7 = v6 + 1;
  }

  *(void *)(a2 + 8) = v7;
}

uint64_t sub_1001213AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001213EC(uint64_t a1)
{
  __int128 v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100121424(uint64_t a1, void *a2)
{
  if (a2)
  {
    __int128 v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100121460((uint64_t)(v2 + 2));
      operator delete(v2);
      __int128 v2 = v3;
    }

    while (v3);
  }

void sub_100121460(uint64_t a1)
{
}

unsigned __int8 *sub_1001214AC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4, __int128 *a5)
{
  unint64_t v10 = (void *)(a1 + 24);
  unint64_t v11 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    unint64_t v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v5 = v11;
      if (v11 >= v13) {
        unint64_t v5 = v11 % v13;
      }
    }

    else
    {
      unint64_t v5 = (v13 - 1) & v11;
    }

    uint64_t v16 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v5);
    if (v16)
    {
      for (uint64_t i = *v16; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v18 = *((void *)i + 1);
        if (v18 == v12)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13) {
              v18 %= v13;
            }
          }

          else
          {
            v18 &= v13 - 1;
          }

          if (v18 != v5) {
            break;
          }
        }
      }
    }
  }

  sub_100121744(a1, v12, a4, a5, (uint64_t)v28);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    BOOL v21 = 1LL;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_100019E10(a1, v24);
    unint64_t v13 = *(void *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        unint64_t v5 = v12 % v13;
      }
      else {
        unint64_t v5 = v12;
      }
    }

    else
    {
      unint64_t v5 = (v13 - 1) & v12;
    }
  }

  __int16 v25 = *(void **)(*(void *)a1 + 8 * v5);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *__int16 v25 = v28[0];
  }

  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8LL);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13) {
          v26 %= v13;
        }
      }

      else
      {
        v26 &= v13 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v28[0];
  v28[0] = 0LL;
  ++*v10;
  sub_1001218D4((uint64_t)v28, 0LL);
  return i;
}

void sub_10012172C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

char *sub_100121744@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, __int128 *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x68uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0LL;
  *((void *)v10 + 1) = a2;
  unint64_t v11 = *a3;
  __int128 v13 = *a4;
  uint64_t v14 = *((void *)a4 + 2);
  unint64_t v15 = v11;
  double result = sub_1001217DC((char *)v10 + 16, &v15, (__int128 **)&v13);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1001217C4(_Unwind_Exception *a1)
{
}

char *sub_1001217DC(char *__dst, __int128 **a2, __int128 **a3)
{
  unint64_t v5 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)v5, *((void *)v5 + 1));
  }

  else
  {
    __int128 v6 = *v5;
    *((void *)__dst + 2) = *((void *)v5 + 2);
    *(_OWORD *)__dst = v6;
  }

  __int128 v10 = **a3;
  sub_10004B7D4((uint64_t)__p, *a3 + 1);
  uint64_t v7 = *(void *)a3[1];
  uint64_t v8 = *(void *)a3[2];
  *(_OWORD *)(__dst + 24) = v10;
  sub_10004B7D4((uint64_t)(__dst + 40), (__int128 *)__p);
  *((void *)__dst + 9) = v7;
  *((void *)__dst + 10) = v8;
  if (v13 && v12 < 0) {
    operator delete(__p[0]);
  }
  return __dst;
}

void sub_100121898( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17 && a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001218D4(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100121460((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

unsigned __int8 *sub_100121918(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_10004B1A4((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  __int128 v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_100022A24(v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      unint64_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

double sub_100121A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = a3;
  return result;
}

id sub_100121A30(void *a1)
{
  if (a1[1]) {
    sub_10122D544();
  }
  a1[1] = -[BMBiomeScheduler initWithIdentifier:targetQueue:waking:]( objc_alloc(&OBJC_CLASS___BMBiomeScheduler),  "initWithIdentifier:targetQueue:waking:",  @"com.apple.locationd.milo.nowplaying",  a1[5],  0LL);
  id v2 = objc_msgSend( objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Media"), "NowPlaying"), "DSLPublisher"),  "subscribeOn:",  a1[1]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100121CEC;
  v6[3] = &unk_10181FCB8;
  v6[4] = a1;
  a1[2] = [v2 sinkWithCompletion:&stru_10181FC98 receiveInput:v6];
  if (a1[3]) {
    sub_10122D3D8();
  }
  a1[3] = -[BMBiomeScheduler initWithIdentifier:targetQueue:waking:]( objc_alloc(&OBJC_CLASS___BMBiomeScheduler),  "initWithIdentifier:targetQueue:waking:",  @"com.apple.locationd.milo.appinfocus",  a1[5],  0LL);
  id v3 = objc_msgSend( objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "App"), "InFocus"), "DSLPublisher"),  "subscribeOn:",  a1[3]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10012206C;
  v5[3] = &unk_10181FCB8;
  v5[4] = a1;
  id result = [v3 sinkWithCompletion:&stru_10181FCD8 receiveInput:v5];
  a1[4] = result;
  return result;
}

void sub_100121B68(id a1, BPSCompletion *a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FCF8);
  }
  id v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "MiLo registration on NowPlaying completed",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FCF8);
    }
    v4[0] = 0;
    id v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "MiLo registration on NowPlaying completed",  v4,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationBiomeMonitor::startMonitoringBiomeEvents()_block_invoke",  "%s\n",  v3);
  }

void sub_100121CEC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [a2 eventBody];
  objc_opt_class(&OBJC_CLASS___BMNowPlayingEvent);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    (*(void (**)(void, id))(*(void *)*v3 + 16))(*v3, [a2 eventBody]);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FCF8);
    }
    unint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "received biome event data doesn't match event type BMNowPlayingEvent",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FCF8);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "received biome event data doesn't match event type BMNowPlayingEvent",  v9,  2);
      unint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationBiomeMonitor::startMonitoringBiomeEvents()_block_invoke",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

void sub_100121EE8(id a1, BPSCompletion *a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181FCF8);
  }
  id v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "MiLo registration on App InFocus completed",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FCF8);
    }
    v4[0] = 0;
    id v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "MiLo registration on App InFocus completed",  v4,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationBiomeMonitor::startMonitoringBiomeEvents()_block_invoke",  "%s\n",  v3);
  }

void sub_10012206C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [a2 eventBody];
  objc_opt_class(&OBJC_CLASS___BMAppInFocus);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    (*(void (**)(void, id))(*(void *)*v3 + 24))(*v3, [a2 eventBody]);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FCF8);
    }
    unint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "received biome event data doesn't match event type BMAppInFocus",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FCF8);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "received biome event data doesn't match event type BMAppInFocus",  v9,  2);
      unint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationBiomeMonitor::startMonitoringBiomeEvents()_block_invoke",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

void sub_100122268(id *a1)
{
  a1[1] = 0LL;
  [a1[2] cancel];

  a1[2] = 0LL;
  a1[3] = 0LL;
  [a1[4] cancel];

  a1[4] = 0LL;
}

void sub_1001222C4(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1001222F0(uint64_t a1)
{
  *(_DWORD *)a1 = 0x1000000;
  *(_WORD *)(a1 + 4) = 0;
  sub_1010DDBC0((void *)(a1 + 8), "unknown");
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 16777473;
  *(_BYTE *)(a1 + 72) = 1;
  return a1;
}

void sub_100122350(uint64_t a1, char a2)
{
  if (*(_BYTE *)(a1 + 4))
  {
    if (*(unsigned __int8 *)(a1 + 4) - 1 < 2)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      id v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
      {
        sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
        int v5 = v46;
        unint64_t v6 = (void **)__p[0];
        sub_1000946B0(a2, v62);
        uint8x8_t v7 = __p;
        if (v5 < 0) {
          uint8x8_t v7 = v6;
        }
        if (v65 >= 0) {
          unint64_t v8 = v62;
        }
        else {
          unint64_t v8 = *(_BYTE **)v62;
        }
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v52 = 2082;
        v53 = "";
        __int16 v54 = 2082;
        unint64_t v55 = v7;
        __int16 v56 = 2082;
        uint64_t v57 = v8;
        __int16 v58 = 2082;
        double v59 = "assert";
        __int16 v60 = 2081;
        std::string v61 = "false";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Can't set new activity, currentActivity:%{public, location:escape_only}s, provi dedNextActivity:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition: %{private, location:escape_only}s}",  buf,  0x3Au);
        if (v65 < 0) {
          operator delete(*(void **)v62);
        }
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
      }

      unint64_t v9 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
        int v10 = v46;
        unint64_t v11 = (void **)__p[0];
        sub_1000946B0(a2, v62);
        uint64_t v12 = __p;
        if (v10 < 0) {
          uint64_t v12 = v11;
        }
        if (v65 >= 0) {
          unint64_t v13 = v62;
        }
        else {
          unint64_t v13 = *(_BYTE **)v62;
        }
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v52 = 2082;
        v53 = "";
        __int16 v54 = 2082;
        unint64_t v55 = v12;
        __int16 v56 = 2082;
        uint64_t v57 = v13;
        __int16 v58 = 2082;
        double v59 = "assert";
        __int16 v60 = 2081;
        std::string v61 = "false";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Can't set new activity",  "{msg%{public}.0s:Can't set new activity, currentActivity:%{public, location:escape_only}s, provi dedNextActivity:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition: %{private, location:escape_only}s}",  buf,  0x3Au);
        if (v65 < 0) {
          operator delete(*(void **)v62);
        }
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
      }

      uint64_t v14 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
        int v15 = v46;
        uint64_t v16 = (void **)__p[0];
        sub_1000946B0(a2, v62);
        uint64_t v17 = __p;
        if (v15 < 0) {
          uint64_t v17 = v16;
        }
        if (v65 >= 0) {
          unint64_t v18 = v62;
        }
        else {
          unint64_t v18 = *(_BYTE **)v62;
        }
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v52 = 2082;
        v53 = "";
        __int16 v54 = 2082;
        unint64_t v55 = v17;
        __int16 v56 = 2082;
        uint64_t v57 = v18;
        __int16 v58 = 2082;
        double v59 = "assert";
        __int16 v60 = 2081;
        std::string v61 = "false";
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Can't set new activity, currentActivity:%{public, location:escape_only}s, provi dedNextActivity:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition: %{private, location:escape_only}s}",  buf,  0x3Au);
        if (v65 < 0) {
          operator delete(*(void **)v62);
        }
        if (v46 < 0) {
          operator delete(__p[0]);
        }
      }

      sub_10122D6E4();
      goto LABEL_105;
    }
  }

  else if ((a2 - 3) <= 0xFDu)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    uint64_t v30 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
      int v31 = v46;
      unint64_t v32 = (void **)__p[0];
      sub_1000946B0(a2, v62);
      BOOL v33 = __p;
      if (v31 < 0) {
        BOOL v33 = v32;
      }
      if (v65 >= 0) {
        __n128 v34 = v62;
      }
      else {
        __n128 v34 = *(_BYTE **)v62;
      }
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v52 = 2082;
      v53 = "";
      __int16 v54 = 2082;
      unint64_t v55 = v33;
      __int16 v56 = 2082;
      uint64_t v57 = v34;
      __int16 v58 = 2082;
      double v59 = "assert";
      __int16 v60 = 2081;
      std::string v61 = "scanActivity == CLMicroLocationUtils::ScanActivity::Localizing || scanActivity == CLMicroLocationUtils::Scan"
            "Activity::Recording";
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Can't set new activity, currentActivity:%{public, location:escape_only}s, provide dNextActivity:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  buf,  0x3Au);
      if (v65 < 0) {
        operator delete(*(void **)v62);
      }
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    uint64_t v35 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
      int v36 = v46;
      v37 = (void **)__p[0];
      sub_1000946B0(a2, v62);
      BOOL v38 = __p;
      if (v36 < 0) {
        BOOL v38 = v37;
      }
      if (v65 >= 0) {
        uint64_t v39 = v62;
      }
      else {
        uint64_t v39 = *(_BYTE **)v62;
      }
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v52 = 2082;
      v53 = "";
      __int16 v54 = 2082;
      unint64_t v55 = v38;
      __int16 v56 = 2082;
      uint64_t v57 = v39;
      __int16 v58 = 2082;
      double v59 = "assert";
      __int16 v60 = 2081;
      std::string v61 = "scanActivity == CLMicroLocationUtils::ScanActivity::Localizing || scanActivity == CLMicroLocationUtils::Scan"
            "Activity::Recording";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v35,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Can't set new activity",  "{msg%{public}.0s:Can't set new activity, currentActivity:%{public, location:escape_only}s, provide dNextActivity:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  buf,  0x3Au);
      if (v65 < 0) {
        operator delete(*(void **)v62);
      }
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    unint64_t v40 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
      int v41 = v46;
      int v42 = (void **)__p[0];
      sub_1000946B0(a2, v62);
      v43 = __p;
      if (v41 < 0) {
        v43 = v42;
      }
      if (v65 >= 0) {
        uint64_t v44 = v62;
      }
      else {
        uint64_t v44 = *(_BYTE **)v62;
      }
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v52 = 2082;
      v53 = "";
      __int16 v54 = 2082;
      unint64_t v55 = v43;
      __int16 v56 = 2082;
      uint64_t v57 = v44;
      __int16 v58 = 2082;
      double v59 = "assert";
      __int16 v60 = 2081;
      std::string v61 = "scanActivity == CLMicroLocationUtils::ScanActivity::Localizing || scanActivity == CLMicroLocationUtils::Scan"
            "Activity::Recording";
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Can't set new activity, currentActivity:%{public, location:escape_only}s, provide dNextActivity:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  buf,  0x3Au);
      if (v65 < 0) {
        operator delete(*(void **)v62);
      }
      if (v46 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_10122D6B0();
LABEL_105:
    __break(1u);
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  float v19 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000946B0(*(_BYTE *)(a1 + 4), buf);
    int v20 = SBYTE3(v55);
    BOOL v21 = *(uint8_t **)buf;
    sub_1000946B0(a2, __p);
    unint64_t v22 = buf;
    if (v20 < 0) {
      unint64_t v22 = v21;
    }
    if (v46 >= 0) {
      unint64_t v23 = __p;
    }
    else {
      unint64_t v23 = (void **)__p[0];
    }
    *(_DWORD *)std::string v62 = 136446466;
    *(void *)&v62[4] = v22;
    __int16 v63 = 2082;
    uint64_t v64 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Advanced from %{public}s to %{public}s",  v62,  0x16u);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE3(v55) < 0) {
      operator delete(*(void **)buf);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    uint64_t v24 = qword_1019348D8;
    sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
    int v25 = v46;
    unint64_t v26 = (void **)__p[0];
    sub_1000946B0(a2, v62);
    __int16 v27 = __p;
    if (v25 < 0) {
      __int16 v27 = v26;
    }
    if (v65 >= 0) {
      __int128 v28 = v62;
    }
    else {
      __int128 v28 = *(_BYTE **)v62;
    }
    int v47 = 136446466;
    __n128 v48 = v27;
    __int16 v49 = 2082;
    uint64_t v50 = v28;
    uint64_t v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  0LL,  "Advanced from %{public}s to %{public}s",  &v47,  22);
    if (v65 < 0) {
      operator delete(*(void **)v62);
    }
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationLogic::State::setScanActivity(CLMicroLocationUtils::ScanActivity)",  "%s\n",  v29);
  }

  *(_BYTE *)(a1 + 4) = a2;
}

void sub_100122CCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100122D1C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 4))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    unint64_t v13 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
      if (v20 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t v29 = 68289795;
      *(_DWORD *)&v29[4] = 0;
      __int16 v30 = 2082;
      int v31 = "";
      __int16 v32 = 2082;
      BOOL v33 = v14;
      __int16 v34 = 2082;
      uint64_t v35 = "assert";
      __int16 v36 = 2081;
      v37 = "false";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Can't clear current activity as it is already invalid, currentActivity:%{public, lo cation:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v29,  0x30u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    int v15 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
      if (v20 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t v29 = 68289795;
      *(_DWORD *)&v29[4] = 0;
      __int16 v30 = 2082;
      int v31 = "";
      __int16 v32 = 2082;
      BOOL v33 = v16;
      __int16 v34 = 2082;
      uint64_t v35 = "assert";
      __int16 v36 = 2081;
      v37 = "false";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Can't clear current activity as it is already invalid",  "{msg%{public}.0s:Can't clear current activity as it is already invalid, currentActivity:%{public, lo cation:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v29,  0x30u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    uint64_t v17 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
      unint64_t v18 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t v29 = 68289795;
      *(_DWORD *)&v29[4] = 0;
      __int16 v30 = 2082;
      int v31 = "";
      __int16 v32 = 2082;
      BOOL v33 = v18;
      __int16 v34 = 2082;
      uint64_t v35 = "assert";
      __int16 v36 = 2081;
      v37 = "false";
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Can't clear current activity as it is already invalid, currentActivity:%{public, lo cation:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v29,  0x30u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm",  102,  "clearScanActivity");
    __break(1u);
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  id v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000946B0(*(_BYTE *)(a1 + 4), v29);
    int v3 = SBYTE3(v33);
    id v4 = *(uint8_t **)v29;
    sub_1000946B0(0, __p);
    int v5 = v29;
    if (v3 < 0) {
      int v5 = v4;
    }
    if (v20 >= 0) {
      unint64_t v6 = __p;
    }
    else {
      unint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v22 = 2082;
    unint64_t v23 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Reversed from %{public}s to %{public}s",  buf,  0x16u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE3(v33) < 0) {
      operator delete(*(void **)v29);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v29, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    uint64_t v7 = qword_1019348D8;
    sub_1000946B0(*(_BYTE *)(a1 + 4), __p);
    int v8 = v20;
    unint64_t v9 = (void **)__p[0];
    sub_1000946B0(0, buf);
    int v10 = __p;
    if (v8 < 0) {
      int v10 = v9;
    }
    if (v24 >= 0) {
      unint64_t v11 = buf;
    }
    else {
      unint64_t v11 = *(_BYTE **)buf;
    }
    int v25 = 136446466;
    unint64_t v26 = v10;
    __int16 v27 = 2082;
    __int128 v28 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v29,  1628LL,  &_mh_execute_header,  v7,  0LL,  "Reversed from %{public}s to %{public}s",  &v25,  22);
    if (v24 < 0) {
      operator delete(*(void **)buf);
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::State::clearScanActivity()", "%s\n", v12);
  }

  *(_BYTE *)(a1 + 4) = 0;
}

void sub_10012327C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001232B4(uint64_t a1, int a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  id v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "not running";
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    if (a2) {
      int v5 = "running";
    }
    __int16 v9 = 2082;
    int v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Rapport, setRapportSessionRunning, session set to:%{public, location:escape_only}s}",  (uint8_t *)v6,  0x1Cu);
  }

  *(_BYTE *)(a1 + 5) = a2;
}

uint64_t sub_1001233BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 8) = off_10181FEC8;
  uint64_t v9 = a1 + 8;
  *(void *)(a1 + 16) = off_10181FF40;
  uint64_t v10 = a1 + 16;
  *(void *)(a1 + 32) = off_101820000;
  uint64_t v11 = a1 + 32;
  *(void *)a1 = off_10181FD28;
  *(void *)(a1 + 40) = off_101820050;
  uint64_t v12 = a1 + 40;
  *(void *)(a1 + 24) = off_10181FF90;
  sub_1001222F0(a1 + 48);
  *(void *)(a1 + 128) = a4;
  *(_BYTE *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 192) = 0;
  sub_1001175C0(a1 + 584, a4);
  sub_100104F4C(a1 + 632, a1, *(void *)(a1 + 128));
  uint64_t v13 = *(void *)(a1 + 128);
  sub_1002F0B04(&v27);
  uint64_t v24 = a3;
  CFStringRef v14 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRapportMonitorMaxEntries", 0x8000100u, kCFAllocatorNull);
  int v15 = sub_1002A77CC(v27, (uint64_t)v14, &v26);
  CFRelease(v14);
  uint64_t v16 = (_OWORD *)(a1 + 1520);
  uint64_t v17 = v26;
  unint64_t v18 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      uint64_t v16 = (_OWORD *)(a1 + 1520);
    }
  }

  uint64_t v21 = 256LL;
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  if (v15) {
    uint64_t v21 = v17;
  }
  *(_DWORD *)(a1 + 1552) = 1065353216;
  *(void *)(a1 + 1560) = v13;
  *(void *)(a1 + 1568) = 0LL;
  *(void *)(a1 + 1584) = 0LL;
  *(void *)(a1 + 1576) = 0LL;
  *(void *)(a1 + 1608) = v21;
  sub_10005786C(a1 + 1616, v9);
  sub_1000E3D9C(a1 + 1808, v10, *(void *)(a1 + 128));
  sub_1000B072C((void *)(a1 + 2048), *(void *)(a1 + 128));
  sub_1000D5270(a1 + 2056, v11, *(void *)(a1 + 128));
  *(void *)(a1 + 2560) = a2;
  *(void *)(a1 + 2568) = v24;
  *(void *)(a1 + 2584) = 0LL;
  *(void *)(a1 + 2600) = 0LL;
  *(void *)(a1 + 2592) = 0LL;
  *(void *)(a1 + 2576) = a5;
  if (a5)
  {
    __int16 v22 = operator new(0xB8uLL);
    sub_1000BD81C((uint64_t)v22, v12, a5);
    *(void *)(a1 + 2552) = v22;
    sub_1001236F0(a1);
    sub_100123D48(a1);
    return a1;
  }

  else
  {
    sub_10122D718();
    uint64_t result = abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm",  305,  "CLMicroLocationLogic");
    __break(1u);
  }

  return result;
}

void sub_100123634( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a19 = v19 + 2584;
  sub_1000129D4((void ***)&a19);
  sub_1000D53CC(v20);
  sub_1000E9F48(v21);
  sub_100123EA8(v23);
  sub_100123EF8(a15);
  sub_1001051A8(a13);
  sub_100117678(a14);
  sub_100123F28(v19 + 136);
  _Unwind_Resume(a1);
}

void sub_1001236F0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  sub_1002F0B04(buf);
  CFStringRef v3 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsEnabled", 0x8000100u, kCFAllocatorNull);
  int v4 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)v3, (BOOL *)v27);
  CFRelease(v3);
  int v5 = LOBYTE(v27[0]);
  unint64_t v6 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (v5) {
    int v9 = v4;
  }
  else {
    int v9 = 0;
  }
  int v10 = *(unsigned __int8 *)(a1 + 49);
  int v11 = *(unsigned __int8 *)(a1 + 50);
  int v12 = *(unsigned __int8 *)(a1 + 51);
  int v13 = *(unsigned __int8 *)(a1 + 118);
  if (*(_BYTE *)(a1 + 51)) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  int v15 = v14;
  if (!*(_BYTE *)(a1 + 50)) {
    int v15 = 0;
  }
  if (!*(_BYTE *)(a1 + 49)) {
    int v15 = 0;
  }
  if (v9 == 1) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  *(_BYTE *)(a1 + 48) = v16;
  sub_1000E9804(a1 + 1808, v16, v13 != 0);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  uint64_t v17 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&uint8_t buf[4] = v9;
    LOWORD(v38) = 1026;
    *(_DWORD *)((char *)&v38 + 2) = v10;
    HIWORD(v38) = 1026;
    int v39 = v11;
    __int16 v40 = 1026;
    int v41 = v12;
    __int16 v42 = 1026;
    int v43 = v13;
    __int16 v44 = 1026;
    int v45 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Enabled state: microlocations defaults enabled: %{public}d; location services enabled: %{public}d; significant loc"
      "ations enabled: %{public}d; platform supported %{public}d; LowPowerMode %{public}d; overall enabled: %{public}d",
      buf,
      0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    v27[0] = 67241472;
    v27[1] = v9;
    __int16 v28 = 1026;
    int v29 = v10;
    __int16 v30 = 1026;
    int v31 = v11;
    __int16 v32 = 1026;
    *(_DWORD *)BOOL v33 = v12;
    *(_WORD *)&v33[4] = 1026;
    int v34 = v13;
    __int16 v35 = 1026;
    int v36 = v16;
    LODWORD(v25) = 38;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Enabled state: microlocations defaults enabled: %{public}d; location services enabled: %{public}d; s"
                    "ignificant locations enabled: %{public}d; platform supported %{public}d; LowPowerMode %{public}d; ov"
                    "erall enabled: %{public}d",
                    v27,
                    v25);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::updateEnabled()", "%s\n", v23);
  }

  if ((v16 & 1) != 0 || !v2)
  {
    if (!v2 && v16)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      uint64_t v20 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "MicroLocations are now re-enabled. Clients should begin getting notifications again",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        LOWORD(v27[0]) = 0;
        LODWORD(v25) = 2;
        uint64_t v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "MicroLocations are now re-enabled. Clients should begin getting notifications again",  v27,  v25);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::updateEnabled()", "%s\n", v24);
      }

      sub_1000303F0(*(void **)(a1 + 128));
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    unint64_t v18 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "MicroLocations have been disabled. Clients will no longer get notifications until we are enabled again.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      LOWORD(v27[0]) = 0;
      LODWORD(v25) = 2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "MicroLocations have been disabled. Clients will no longer get notifications until we are enabled again.",  v27,  v25);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::updateEnabled()", "%s\n", v19);
    }
  }

  if ((v2 != 0) != v16)
  {
    sub_100063B28((uint64_t)v27);
    BYTE2(v29) = v9;
    HIBYTE(v29) = v10;
    LOBYTE(v30) = v11;
    HIBYTE(v30) = v12;
    LOBYTE(v31) = v13;
    *(_DWORD *)&v33[2] |= 0x7Eu;
    BYTE1(v31) = v16;
    HIDWORD(v25) = 0;
    sub_100018E34((int *)&v25 + 1);
    *(void *)&__int128 v26 = sub_100017338((ssize_t)&v25 + 4);
    *((void *)&v26 + 1) = v21;
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    sub_10012C190(&v26, (uint64_t)v27, (uint64_t)buf, Current_1);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)a1 + 152LL))(a1, buf);
    sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v44);
    sub_100019D7C((unsigned int *)&v25 + 1);
    sub_1000894C8((wireless_diagnostics::google::protobuf::MessageLite *)v27);
  }

void sub_100123CF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_100123D48(uint64_t a1)
{
  int v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAnchorDeviceModelAllowedList", 0x8000100u, kCFAllocatorNull);
  BOOL v3 = sub_1002AA610((uint64_t)v10, v2, (CFTypeRef *)&v9);
  CFRelease(v2);
  if (v3)
  {
    sub_10012E830(v9, (uint64_t)&v7);
  }

  else
  {
    __int128 v7 = 0uLL;
    uint64_t v8 = 0LL;
    sub_10012E9DC(&v7, &off_10181DD10, &off_10181DD40, 6uLL);
  }

  int v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  sub_10012EC68((uint64_t *)(a1 + 2584));
  *(_OWORD *)(a1 + 2584) = v7;
  *(void *)(a1 + 2600) = v8;
  uint64_t v8 = 0LL;
  __int128 v7 = 0uLL;
  int v10 = (void **)&v7;
  sub_1000129D4(&v10);
}

void sub_100123E60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100123EA8(uint64_t a1)
{
  BOOL v3 = (void **)(a1 + 72);
  sub_10005B848(&v3);
  BOOL v3 = (void **)(a1 + 48);
  sub_10005B848(&v3);
  sub_100019CEC(a1 + 8);
  return a1;
}

uint64_t sub_100123EF8(uint64_t a1)
{
  return sub_10012EBB0(a1);
}

uint64_t sub_100123F28(uint64_t a1)
{
  BOOL v3 = (void **)(a1 + 32);
  sub_10012E7C0(&v3);
  BOOL v3 = (void **)(a1 + 8);
  sub_10004AB74(&v3);
  return a1;
}

uint64_t sub_100123F7C(uint64_t a1)
{
  *(void *)a1 = off_10181FD28;
  *(void *)(a1 + 8) = off_10181FEC8;
  *(void *)(a1 + 16) = off_10181FF40;
  *(void *)(a1 + 24) = off_10181FF90;
  *(void *)(a1 + 32) = off_101820000;
  *(void *)(a1 + 40) = off_101820050;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  int v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLMicroLocationLogic: DTOR", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    v6[0] = 0;
    int v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "CLMicroLocationLogic: DTOR",  v6,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual CLMicroLocationLogic::~CLMicroLocationLogic()", "%s\n", v5);
  }

  sub_10014A898(a1 + 1520);
  sub_1001095A4(a1 + 632);
  uint64_t v3 = *(void *)(a1 + 2552);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *(void *)buf = a1 + 2584;
  sub_1000129D4((void ***)buf);
  sub_1000D53CC(a1 + 2056);
  *(void *)(a1 + 1808) = off_10181ECD8;
  sub_1000EAA04((void *)(a1 + 2000));
  sub_1000A8814(a1 + 1960);
  sub_100019CEC(a1 + 1872);
  sub_1000EAA98((uint64_t *)(a1 + 1848));
  *(void *)buf = a1 + 1824;
  sub_10004CC28((void ***)buf);
  *(void *)buf = a1 + 1688;
  sub_10005B848((void ***)buf);
  *(void *)buf = a1 + 1664;
  sub_10005B848((void ***)buf);
  sub_100019CEC(a1 + 1624);
  sub_10012EBB0(a1 + 1520);
  sub_1001051A8(a1 + 632);
  sub_100117678(a1 + 584);
  sub_10012E778(a1 + 192);
  *(void *)buf = a1 + 168;
  sub_10012E7C0((void ***)buf);
  *(void *)buf = a1 + 144;
  sub_10004AB74((void ***)buf);
  return a1;
}

void sub_100124244(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100124254(uint64_t a1)
{
  return sub_100123F7C(a1 - 8);
}

uint64_t sub_10012425C(uint64_t a1)
{
  return sub_100123F7C(a1 - 16);
}

uint64_t sub_100124264(uint64_t a1)
{
  return sub_100123F7C(a1 - 24);
}

uint64_t sub_10012426C(uint64_t a1)
{
  return sub_100123F7C(a1 - 32);
}

uint64_t sub_100124274(uint64_t a1)
{
  return sub_100123F7C(a1 - 40);
}

void sub_10012427C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100123F7C(a1);
  operator delete(v1);
}

void sub_100124290(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100123F7C(a1 - 8);
  operator delete(v1);
}

void sub_1001242A8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100123F7C(a1 - 16);
  operator delete(v1);
}

void sub_1001242C0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100123F7C(a1 - 24);
  operator delete(v1);
}

void sub_1001242D8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100123F7C(a1 - 32);
  operator delete(v1);
}

void sub_1001242F0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100123F7C(a1 - 40);
  operator delete(v1);
}

uint64_t sub_100124328(uint64_t a1, uint64_t a2)
{
  return sub_10010BABC(a1 + 632, a2);
}

uint64_t sub_100124330(uint64_t a1, uint64_t a2)
{
  return sub_10010BB4C(a1 + 632, a2);
}

uint64_t sub_100124338(uint64_t a1, uint64_t a2)
{
  return sub_10010BBDC(a1 + 632, a2);
}

uint64_t sub_100124340(uint64_t a1, uint64_t a2)
{
  return sub_10010BC6C(a1 + 632, a2);
}

uint64_t sub_100124348(uint64_t a1, uint64_t a2)
{
  return sub_10010BCFC(a1 + 632, a2);
}

id sub_100124350(uint64_t a1, void *a2)
{
  return sub_1000D5404(a1 + 2056, a2);
}

void sub_100124358(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  int v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLMicroLocationLogic: Settings updated so updating wifi strategies, allowed anchor models, and checking enabled flags",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "CLMicroLocationLogic: Settings updated so updating wifi strategies, allowed anchor models, and checking enabled flags",  v5,  2);
    int v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::reloadSettings()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_1001051C0(a1 + 632);
  sub_100123D48(a1);
  sub_1001236F0(a1);
}

void sub_100124500(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  int v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(a1 + 56);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    int v5 = (char *)operator new(0x28uLL);
    *(_OWORD *)int v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    *(void *)(v5 + 29) = 0LL;
    sub_10000AE6C(a1 + 80, v5);
    int v6 = *(unsigned __int8 *)(a1 + 49);
    int v7 = *(unsigned __int8 *)(a1 + 50);
    sub_1000946B0(*(_BYTE *)(a1 + 52), __p);
    if (v20 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    int v9 = *(_DWORD *)(a1 + 96);
    int v10 = *(_DWORD *)(a1 + 100);
    int v11 = *(unsigned __int8 *)(a1 + 104);
    int v12 = *(unsigned __int8 *)(a1 + 119);
    int v13 = *(unsigned __int8 *)(a1 + 116);
    int v14 = *(_DWORD *)(a1 + 108);
    int v15 = *(_DWORD *)(a1 + 112);
    int v16 = *(unsigned __int8 *)(a1 + 117);
    int v17 = *(unsigned __int8 *)(a1 + 118);
    BOOL v18 = *(_BYTE *)(a1 + 120) == 0;
    *(_DWORD *)buf = 68293123;
    __int16 v23 = 2082;
    int v22 = 0;
    uint64_t v24 = "";
    __int16 v25 = 1026;
    int v26 = v4;
    __int16 v27 = 2081;
    __int16 v28 = v3;
    __int16 v29 = 2081;
    __int16 v30 = v5;
    __int16 v31 = 1026;
    int v32 = v6;
    __int16 v33 = 1026;
    int v34 = v7;
    __int16 v35 = 2081;
    int v36 = v8;
    __int16 v37 = 1026;
    int v38 = v9;
    __int16 v39 = 1026;
    int v40 = v10;
    __int16 v41 = 1026;
    int v42 = v11;
    __int16 v43 = 1026;
    int v44 = v12;
    __int16 v45 = 1026;
    int v46 = v13;
    __int16 v47 = 1026;
    int v48 = v14;
    __int16 v49 = 1026;
    int v50 = v15;
    __int16 v51 = 1026;
    int v52 = v16;
    __int16 v53 = 1026;
    int v54 = v17;
    __int16 v55 = 1026;
    BOOL v56 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationLogic State, enabled:%{public}hhd, LOI Type:%{private, location:es cape_only}s, LOI ID:%{private, location:escape_only}s, locationServicesEnabled:%{public}hhd, significant LocationsEnabled:%{public}hhd, ScanActivity:%{private, location:escape_only}s, Localizing Counter:%{publ ic}d, Recording Counter:%{public}d, displayOn:%{public}hhd, isOnLockScreen:%{public}hhd, isWiFiError RetryEnabled:%{public}hhd, WiFi Error Retry Counter:%{public}d, WiFi Error Retry Disabled Period Counter :%{public}d, isLowNumberOfObservation:%{public}hhd, isLowPowerMode:%{public}hhd, isBluetoothDisabled:%{public}hhd}",  buf,  0x7Eu);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    operator delete(v5);
  }

  sub_1000E96F8(a1 + 1808);
}

void sub_100124730(_Unwind_Exception *a1)
{
}

uint64_t sub_100124750(uint64_t a1)
{
  return a1 + 2584;
}

uint64_t sub_100124758(uint64_t a1, const std::string *a2, void *a3, void *a4, void *a5)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  int v10 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v11 = a2;
    }
    else {
      int v11 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    v13[0] = 68289282;
    v13[1] = 0;
    __int16 v14 = 2082;
    int v15 = "";
    __int16 v16 = 2082;
    int v17 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationLogic: client request donate truth label (time window based), client:% {public, location:escape_only}s}",  (uint8_t *)v13,  0x1Cu);
  }

  return sub_100119F9C(a1 + 584, a2, a3, a4, a5, a1 + 56);
}

std::string *sub_100124884@<X0>(const std::string::value_type *a1@<X1>, uint64_t a2@<X8>)
{
  int v9 = 0;
  sub_100018E34(&v9);
  *(void *)__s = sub_100017338((ssize_t)&v9);
  uint64_t v11 = v4;
  sub_100019D7C((unsigned int *)&v9);
  sub_100063550((void *)a2);
  *(_DWORD *)(a2 + 44) |= 4u;
  int v5 = *(std::string **)(a2 + 16);
  if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v5 = (std::string *)operator new(0x18uLL);
    v5->__r_.__value_.__r.__words[0] = 0LL;
    v5->__r_.__value_.__l.__size_ = 0LL;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    *(void *)(a2 + 16) = v5;
  }

  std::string::assign(v5, a1);
  if (!sub_10006417C(1)) {
    __assert_rtn( "set_receivedeventactiontype",  "microlocation.pb.h",  12856,  "::CLMicroLocationProto::ReceivedEventActionType_IsValid(value)");
  }
  int v6 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 12) = 1;
  *(_DWORD *)(a2 + 44) = v6 | 0xA;
  int v7 = *(std::string **)(a2 + 24);
  if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v7 = (std::string *)operator new(0x18uLL);
    v7->__r_.__value_.__r.__words[0] = 0LL;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    *(void *)(a2 + 24) = v7;
  }

  return std::string::assign(v7, __s, 0x10uLL);
}

void sub_1001249B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
}

uint64_t sub_1001249E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2560) + 112LL))(*(void *)(a1 + 2560));
}

uint64_t sub_1001249F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2552) + 112LL))(*(void *)(a1 + 2552));
}

BOOL sub_100124A04(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = (void *)(a1 + 56);
  int v6 = *(unsigned __int8 *)(a1 + 79);
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v8 = *(void *)(a1 + 64);
    if (v8 != 6) {
      goto LABEL_35;
    }
    int v7 = (void *)*v5;
  }

  else
  {
    if (v6 == 4) {
      goto LABEL_37;
    }
    int v7 = (void *)(a1 + 56);
    if (v6 != 6) {
      return 0LL;
    }
  }

  int v9 = *(_DWORD *)v7;
  int v10 = *((unsigned __int16 *)v7 + 2);
  if (v9 == 1953723747 && v10 == 28015)
  {
    int v13 = *((char *)a2 + 23);
    if (v13 < 0)
    {
      if (a2[1] != 4) {
        goto LABEL_11;
      }
      __int16 v14 = (_DWORD *)*a2;
    }

    else
    {
      __int16 v14 = a2;
      if (v13 != 4) {
        goto LABEL_11;
      }
    }

    if (*v14 == 1701670760) {
      return 1LL;
    }
  }

void sub_100124BD4(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, void *a5)
{
  uint64_t v5 = a1 + 48;
  if (!*(_BYTE *)(a1 + 48)) {
    sub_10122D888();
  }
  char v7 = a3 == 1;
  sub_1001031A0(a2, &v34);
  if (*(char *)(a1 + 79) < 0)
  {
    sub_1010DD48C(__p, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 72);
  }

  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  __int128 v32 = v34;
  char v33 = v35;
  sub_10011767C(a1 + 584, (uint64_t)__p, v12, v13, (uint64_t)&v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  sub_100119134((uint64_t *)(a1 + 584), a2);
  sub_100122350(v5, a3);
  sub_100105728((void *)(a1 + 632), a2, a3, a4, a5);
  if (a3 == 2)
  {
    char v7 = sub_10012501C();
    int v14 = 2;
  }

  else
  {
    if ((*(_BYTE *)(a2 + 128) & 4) != 0)
    {
LABEL_14:
      sub_10005B55C(a1 + 1616, &v25);
      if (!v26) {
        sub_100036CD8();
      }
      sub_100047728((uint64_t *)(a1 + 136), a2, v25.n128_i64[0], v25.n128_i64[1]);
      if (!v26) {
        sub_100036CD8();
      }
      sub_1000E97B0(a1 + 1808, v25.n128_i64[0], v25.n128_i64[1]);
      goto LABEL_17;
    }

    int v14 = 4;
  }

  sub_100063550(buf);
  if (!sub_10006417C(v14)) {
    __assert_rtn( "set_receivedeventactiontype",  "microlocation.pb.h",  12856,  "::CLMicroLocationProto::ReceivedEventActionType_IsValid(value)");
  }
  v31 |= 2u;
  int v29 = v14;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_1000C40E8((uint64_t)buf, 0, 0, 3u, (uint64_t)&v25, Current_1);
  sub_100119134((uint64_t *)(a1 + 584), (uint64_t)&v25);
  sub_100086708(&v25);
  sub_100071810((wireless_diagnostics::google::protobuf::MessageLite *)buf);
  if ((v7 & 1) != 0) {
    goto LABEL_14;
  }
LABEL_17:
  if (qword_1019348E0 != -1) {
    dispatch_once(&qword_1019348E0, &stru_101820190);
  }
  int v16 = (os_log_s *)qword_1019348E8;
  if (os_log_type_enabled((os_log_t)qword_1019348E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000946B0(a3, &v25);
    int v17 = v27 >= 0 ? &v25 : (__n128 *)v25.n128_u64[0];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s started", buf, 0xCu);
    if (v27 < 0) {
      operator delete((void *)v25.n128_u64[0]);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v25, 0x65CuLL);
    if (qword_1019348E0 != -1) {
      dispatch_once(&qword_1019348E0, &stru_101820190);
    }
    uint64_t v18 = qword_1019348E8;
    sub_1000946B0(a3, buf);
    if (v30 >= 0) {
      uint64_t v19 = buf;
    }
    else {
      uint64_t v19 = *(_BYTE **)buf;
    }
    int v23 = 136315138;
    int v24 = v19;
    char v20 = (__n128 *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v25,  1628LL,  &_mh_execute_header,  v18,  0LL,  "%s started",  (const char *)&v23);
    if (v30 < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMicroLocationLogic::onStartRecordingOrLocalizing(const CLMicroLocationProto::RecordingEvent &, cons t CLMicroLocationUtils::ScanActivity, const cl::chrono::CFAbsoluteTimeClock::time_point &, NSMutableDictionary *)",  "%s\n",  (const char *)v20);
    if (v20 != &v25) {
      free(v20);
    }
  }

void sub_100124FD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_10012501C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsLocalizeWithRecordingMeasurements",  0x8000100u,  kCFAllocatorNull);
  unsigned int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return v1;
  }
  else {
    return 0LL;
  }
}

void sub_1001250D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1001250F0(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, void *a5)
{
}

void sub_1001250F8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    sub_10005B55C(a1 + 1616, &v5);
    if (v6) {
      sub_100049FC4(a1 + 136, &v5);
    }
  }

void sub_100125178(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100125180(uint64_t a1, uint64_t a2)
{
}

void sub_100125188(uint64_t a1, uint64_t a2)
{
}

void sub_100125190(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    v7[0] = 0LL;
    v7[1] = 0LL;
    memset(v5, 0, sizeof(v5));
    char v6 = (uint64_t *)v7;
    int v8 = 3;
    int v4 = 3;
    sub_10004A8FC(&v6, &v4, &v4);
    sub_100125248(a1, (uint64_t)v5);
    sub_100008390((uint64_t)&v6, v7[0]);
  }

  else
  {
    sub_1001255DC(a1, 2u);
  }

void sub_10012522C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_100125248(uint64_t a1, uint64_t a2)
{
  int v4 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "com.apple.locationd.microlocation.stop-recording");
  sub_100106460(a1 + 632);
  sub_100126824((unsigned __int8 *)a1);
  if (sub_100104834(a1 + 640))
  {
    *(_DWORD *)buf = 0;
    sub_10004A8FC((uint64_t **)(a2 + 24), (int *)buf, buf);
  }

  if (*(_DWORD *)(a2 + 48) == 4)
  {
    sub_100137504((uint64_t *)buf);
    sub_1001178E0(a1 + 584, (unint64_t *)buf, a2);
    sub_100019CEC((uint64_t)&v13);
  }

  if (sub_10012501C())
  {
    sub_10005B55C(a1 + 1616, &v20);
    __n128 v18 = v20;
    char v19 = v21;
    *(void *)buf = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    memset(v10, 0, 24);
    sub_100125E38(a1, (uint64_t)&v18, (uint64_t *)buf, (uint64_t *)v10, 0);
    std::stringbuf::string_type __p = 0LL;
    int v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    *(void *)buf = 0LL;
    unsigned int v14 = 0;
    if (!v21
      || (__n128 v5 = (uint64_t **)sub_1000E7908(a1 + 1808), sub_100049604((void *)(a1 + 136), &v20, v5, (uint64_t)buf), !v21))
    {
      sub_100036CD8();
    }

    sub_1000E7600(a1 + 1808, (uint64_t *)buf, v20.n128_i64[0], v20.n128_i64[1]);
    sub_100117D10(a1 + 584, v14, (int **)&__p);
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }

    v10[0] = (void **)buf;
    sub_10012EB2C(v10);
  }

  sub_100117620(a1 + 584);
  *(_DWORD *)(a1 + 100) = 0;
  sub_100122D1C(a1 + 48);
  if (qword_1019348E0 != -1) {
    dispatch_once(&qword_1019348E0, &stru_101820190);
  }
  char v6 = (os_log_s *)qword_1019348E8;
  if (os_log_type_enabled((os_log_t)qword_1019348E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Recording stopped", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348E0 != -1) {
      dispatch_once(&qword_1019348E0, &stru_101820190);
    }
    LOWORD(v10[0]) = 0;
    int v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348E8,  0LL,  "Recording stopped",  v10,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationLogic::stopRecording(RecordingMetaInformation &)",  "%s\n",  v9);
  }

  sub_1000E9078(a1 + 1808, a2);
  sub_10005992C(a1 + 1616, *(_DWORD *)(a2 + 48) != 2, 5u);
  unsigned int v7 = *(_DWORD *)(a2 + 48) - 1;
  if (v7 > 3) {
    int v8 = 0LL;
  }
  else {
    int v8 = off_1018201B0[v7];
  }
  (*(void (**)(void, __CFString *))(**(void **)(a1 + 2560) + 64LL))(*(void *)(a1 + 2560), v8);
}

void sub_1001255AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1001255DC(uint64_t a1, unsigned int a2)
{
  int v4 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "com.apple.locationd.microlocation.stop-localizing");
  sub_100106460(a1 + 632);
  sub_10005B55C(a1 + 1616, &v39);
  sub_100126824((unsigned __int8 *)a1);
  __n128 v37 = v39;
  char v38 = v40;
  *(void *)buf = 0LL;
  __int128 v36 = 0uLL;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  sub_100125E38(a1, (uint64_t)&v37, (uint64_t *)buf, &v28, a2);
  std::stringbuf::string_type __p = 0LL;
  char v33 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v28 = 0LL;
  unsigned int v31 = 0;
  if (!v40) {
    goto LABEL_43;
  }
  __n128 v5 = (uint64_t **)sub_1000E7908(a1 + 1808);
  sub_100049604((void *)(a1 + 136), &v39, v5, (uint64_t)&v28);
  sub_100117D10(a1 + 584, v31, (int **)&__p);
  *(_DWORD *)(a1 + 96) = 0;
  sub_100122D1C(a1 + 48);
  if (qword_1019348E0 != -1) {
    dispatch_once(&qword_1019348E0, &stru_101820190);
  }
  char v6 = (os_log_s *)qword_1019348E8;
  if (os_log_type_enabled((os_log_t)qword_1019348E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Localization stopped", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348E0 != -1) {
      dispatch_once(&qword_1019348E0, &stru_101820190);
    }
    LOWORD(v27[0]) = 0;
    int v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348E8,  0LL,  "Localization stopped",  v27,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationLogic::stopLocalizing(LocalizationStopReason)",  "%s\n",  v24);
  }

  BOOL v7 = sub_100059F70(a1 + 1616);
  int v8 = sub_100059F90(a1 + 1616);
  if (sub_100126B60(a1, (uint64_t)&v28, v7, v8))
  {
    if (sub_100059F98(a1 + 1616) && !sub_100094888(a2))
    {
      sub_1002F0B04(buf);
      CFStringRef v10 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsLocalizationRescheduleDelay",  0x8000100u,  kCFAllocatorNull);
      int v11 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v10, v27);
      CFRelease(v10);
      double v12 = *(double *)v27;
      uint64_t v13 = (std::__shared_weak_count *)v36;
      if ((void)v36)
      {
        unsigned int v14 = (unint64_t *)(v36 + 8);
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }

      double v16 = *(double *)(a1 + 1720);
      double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
      double v18 = 5.0;
      if (v11) {
        double v18 = v12;
      }
      double v19 = (v18 - (Current_1 - v16)) * 1000.0;
      BOOL v20 = Current_1 - v16 < v18;
      double v21 = 0.0;
      if (v20) {
        double v21 = v19;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 2560) + 128LL))(*(void *)(a1 + 2560), (uint64_t)v21);
      sub_100124884("InternalClientLogic", (uint64_t)v27);
      sub_1000C40E8((uint64_t)v27, 0, 0, 3u, (uint64_t)buf, Current_1);
      sub_10005868C(a1 + 1616, (uint64_t)buf, 1);
      sub_100086708(buf);
      sub_100071810((wireless_diagnostics::google::protobuf::MessageLite *)v27);
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      int v9 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        LOWORD(v36) = 2082;
        *(void *)((char *)&v36 + 2) = "";
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:decided to reschedule a localization but not rescheduling because not spectating}",  buf,  0x12u);
      }
    }
  }

  sub_100117620(a1 + 584);
  if (!v40) {
LABEL_43:
  }
    sub_100036CD8();
  sub_1000E7600(a1 + 1808, &v28, v39.n128_i64[0], v39.n128_i64[1]);
  BOOL v22 = sub_100094888(a2);
  if ((sub_10005992C(a1 + 1616, !v22, 5u) & 1) == 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v23 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Cannot serve queued record requests because we're no longer enabled",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      LOWORD(v27[0]) = 0;
      LODWORD(v26) = 2;
      __n128 v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Cannot serve queued record requests because we're no longer enabled",  v27,  v26);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationLogic::stopLocalizing(LocalizationStopReason)",  "%s\n",  v25);
    }

    (*(void (**)(void, const __CFString *))(**(void **)(a1 + 2560) + 64LL))( *(void *)(a1 + 2560),  @"requestMicroLocationRecordingScan failed internally, MicroLocation is not enabled");
  }

  if (__p)
  {
    char v33 = __p;
    operator delete(__p);
  }

  *(void *)buf = &v28;
  sub_10012EB2C((void ***)buf);
}

void sub_100125C08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_100125C7C(uint64_t a1, int a2)
{
}

void sub_100125C84(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (v15)
  {
    __n128 v12 = v14;
    char v13 = v15;
    sub_100125E38(a1, (uint64_t)&v12, a2, a3, 0);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    char v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:updateLocalizationConfidenceAndReasonsIfNeeded, no current localization}",  (uint8_t *)&v8,  0x12u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    BOOL v7 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "updateLocalizationConfidenceAndReasonsIfNeeded, no current localization",  "{msg%{public}.0s:updateLocalizationConfidenceAndReasonsIfNeeded, no current localization}",  (uint8_t *)&v8,  0x12u);
    }
  }

void sub_100125E38(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int a5)
{
  if (*(_BYTE *)(a2 + 16))
  {
    std::stringbuf::string_type __p = 0LL;
    __int16 v85 = 0LL;
    int64_t v86 = 0LL;
    __int128 v81 = 0LL;
    v82 = 0LL;
    v83 = 0LL;
    if (sub_100104834(a1 + 640))
    {
      uint64_t v10 = (v85 - (_BYTE *)__p) >> 2;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = v86 - (_BYTE *)__p;
      if ((v86 - (_BYTE *)__p) >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13) {
        __n128 v14 = (char *)sub_10000956C((uint64_t)&v86, v13);
      }
      else {
        __n128 v14 = 0LL;
      }
      char v15 = &v14[4 * v10];
      *(_DWORD *)char v15 = 0;
      std::stringbuf::string_type __p = v15;
      int64_t v86 = &v14[4 * v13];
      __int16 v85 = v15 + 4;
      double v16 = v82;
      if (v82 >= v83)
      {
        double v18 = (char *)v81;
        uint64_t v19 = (v82 - (_BYTE *)v81) >> 2;
        unint64_t v20 = v19 + 1;
        uint64_t v21 = v83 - (_BYTE *)v81;
        if ((v83 - (_BYTE *)v81) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          int v23 = (char *)sub_10000956C((uint64_t)&v83, v22);
          double v18 = (char *)v81;
          double v16 = v82;
        }

        else
        {
          int v23 = 0LL;
        }

        int v24 = &v23[4 * v19];
        __n128 v25 = &v23[4 * v22];
        *(_DWORD *)int v24 = 0;
        uint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v26 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }

        __int128 v81 = v24;
        v82 = v17;
        v83 = v25;
        if (v18) {
          operator delete(v18);
        }
      }

      else
      {
        *(_DWORD *)v82 = 0;
        uint64_t v17 = v16 + 4;
      }

      v82 = v17;
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      char v27 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        int v88 = 0;
        __int16 v89 = 2082;
        id v90 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:update confidence of localization request due to wifi scan error}",  buf,  0x12u);
      }
    }

    if (a5)
    {
      if ((sub_100094860(a5) & 0xFF00000000LL) != 0)
      {
        uint64_t v28 = v85;
        if (v85 >= v86)
        {
          __int128 v32 = (char *)__p;
          uint64_t v33 = (v85 - (_BYTE *)__p) >> 2;
          unint64_t v34 = v33 + 1;
          uint64_t v35 = v86 - (_BYTE *)__p;
          if ((v86 - (_BYTE *)__p) >> 1 > v34) {
            unint64_t v34 = v35 >> 1;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            __n128 v37 = (char *)sub_10000956C((uint64_t)&v86, v36);
            __int128 v32 = (char *)__p;
            uint64_t v28 = v85;
          }

          else
          {
            __n128 v37 = 0LL;
          }

          char v38 = &v37[4 * v33];
          __n128 v39 = &v37[4 * v36];
          *(_DWORD *)char v38 = 1;
          uint64_t v29 = v38 + 4;
          while (v28 != v32)
          {
            int v40 = *((_DWORD *)v28 - 1);
            v28 -= 4;
            *((_DWORD *)v38 - 1) = v40;
            v38 -= 4;
          }

          std::stringbuf::string_type __p = v38;
          __int16 v85 = v29;
          int64_t v86 = v39;
          if (v32) {
            operator delete(v32);
          }
        }

        else
        {
          *(_DWORD *)__int16 v85 = 1;
          uint64_t v29 = v28 + 4;
        }

        __int16 v85 = v29;
        unint64_t v41 = sub_100094860(a5);
        int v42 = v41;
        if ((v41 & 0xFF00000000LL) == 0) {
          sub_100036CD8();
        }
        __int16 v43 = v82;
        if (v82 >= v83)
        {
          __int16 v45 = (char *)v81;
          uint64_t v46 = (v82 - (_BYTE *)v81) >> 2;
          unint64_t v47 = v46 + 1;
          uint64_t v48 = v83 - (_BYTE *)v81;
          if ((v83 - (_BYTE *)v81) >> 1 > v47) {
            unint64_t v47 = v48 >> 1;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            int v50 = (char *)sub_10000956C((uint64_t)&v83, v49);
            __int16 v45 = (char *)v81;
            __int16 v43 = v82;
          }

          else
          {
            int v50 = 0LL;
          }

          __int16 v51 = &v50[4 * v46];
          int v52 = &v50[4 * v49];
          *(_DWORD *)__int16 v51 = v42;
          int v44 = v51 + 4;
          while (v43 != v45)
          {
            int v53 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v51 - 1) = v53;
            v51 -= 4;
          }

          __int128 v81 = v51;
          v82 = v44;
          v83 = v52;
          if (v45) {
            operator delete(v45);
          }
        }

        else
        {
          *(_DWORD *)v82 = v41;
          int v44 = v43 + 4;
        }

        v82 = v44;
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        int v54 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          int v88 = 0;
          __int16 v89 = 2082;
          id v90 = "";
          __int16 v91 = 2050;
          uint64_t v92 = a5;
          __int16 v93 = 1026;
          int v94 = 1;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:update confidence of localization request due to localization stop reason, stopRe ason:%{public}lu, confidence level:%{public}d}",  buf,  0x22u);
        }
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        uint64_t v30 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289282;
          int v88 = 0;
          __int16 v89 = 2082;
          id v90 = "";
          __int16 v91 = 2050;
          uint64_t v92 = a5;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:stopReason != LocalizationStopReason::CompletedSuccessfully, but stopReasonToConfiden ceReason returned nullopt! shouldn't happen, stopReason:%{public}lu}",  buf,  0x1Cu);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101820170);
          }
        }

        unsigned int v31 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          *(_DWORD *)buf = 68289282;
          int v88 = 0;
          __int16 v89 = 2082;
          id v90 = "";
          __int16 v91 = 2050;
          uint64_t v92 = a5;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v31,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "stopReason != LocalizationStopReason::CompletedSuccessfully, but stopReasonToConfidenceReason returned nullo pt! shouldn't happen",  "{msg%{public}.0s:stopReason != LocalizationStopReason::CompletedSuccessfully, but stopReasonToConfiden ceReason returned nullopt! shouldn't happen, stopReason:%{public}lu}",  buf,  0x1Cu);
        }
      }
    }

    uint64_t v56 = *a3;
    uint64_t v55 = a3[1];
    if (*a3 != v55 && v55 - v56 == a4[1] - *a4)
    {
      unint64_t v57 = 0LL;
      do
      {
        __int16 v58 = v85;
        if (v85 >= v86)
        {
          __int16 v60 = (char *)__p;
          uint64_t v61 = (v85 - (_BYTE *)__p) >> 2;
          unint64_t v62 = v61 + 1;
          uint64_t v63 = v86 - (_BYTE *)__p;
          if ((v86 - (_BYTE *)__p) >> 1 > v62) {
            unint64_t v62 = v63 >> 1;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64)
          {
            char v65 = (char *)sub_10000956C((uint64_t)&v86, v64);
            __int16 v60 = (char *)__p;
            __int16 v58 = v85;
          }

          else
          {
            char v65 = 0LL;
          }

          id v66 = &v65[4 * v61];
          *(_DWORD *)id v66 = *(_DWORD *)(v56 + 4 * v57);
          double v59 = v66 + 4;
          while (v58 != v60)
          {
            int v67 = *((_DWORD *)v58 - 1);
            v58 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }

          std::stringbuf::string_type __p = v66;
          __int16 v85 = v59;
          int64_t v86 = &v65[4 * v64];
          if (v60) {
            operator delete(v60);
          }
        }

        else
        {
          *(_DWORD *)__int16 v85 = *(_DWORD *)(v56 + 4 * v57);
          double v59 = v58 + 4;
        }

        __int16 v85 = v59;
        uint64_t v68 = *a4;
        v69 = v82;
        if (v82 >= v83)
        {
          char v71 = (char *)v81;
          uint64_t v72 = (v82 - (_BYTE *)v81) >> 2;
          unint64_t v73 = v72 + 1;
          uint64_t v74 = v83 - (_BYTE *)v81;
          if ((v83 - (_BYTE *)v81) >> 1 > v73) {
            unint64_t v73 = v74 >> 1;
          }
          else {
            unint64_t v75 = v73;
          }
          if (v75)
          {
            v76 = (char *)sub_10000956C((uint64_t)&v83, v75);
            char v71 = (char *)v81;
            v69 = v82;
          }

          else
          {
            v76 = 0LL;
          }

          v77 = &v76[4 * v72];
          *(_DWORD *)v77 = *(_DWORD *)(v68 + 4 * v57);
          char v70 = v77 + 4;
          while (v69 != v71)
          {
            int v78 = *((_DWORD *)v69 - 1);
            v69 -= 4;
            *((_DWORD *)v77 - 1) = v78;
            v77 -= 4;
          }

          __int128 v81 = v77;
          v82 = v70;
          v83 = &v76[4 * v75];
          if (v71) {
            operator delete(v71);
          }
        }

        else
        {
          *(_DWORD *)v82 = *(_DWORD *)(v68 + 4 * v57);
          char v70 = v69 + 4;
        }

        v82 = v70;
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        v79 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          int v80 = *(_DWORD *)(*a3 + 4 * v57);
          *(_DWORD *)buf = 68289282;
          int v88 = 0;
          __int16 v89 = 2082;
          id v90 = "";
          __int16 v91 = 1026;
          LODWORD(v92) = v80;
          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:update confidence of localization request, confidence level:%{public}d}",  buf,  0x18u);
        }

        ++v57;
        uint64_t v56 = *a3;
      }

      while (v57 < (a3[1] - *a3) >> 2);
    }

    if (!*(_BYTE *)(a2 + 16)) {
      sub_100036CD8();
    }
    sub_100049BCC(a1 + 136, (void *)a2, (uint64_t *)&__p, &v81);
    if (v81)
    {
      v82 = (char *)v81;
      operator delete(v81);
    }

    if (__p)
    {
      __int16 v85 = (char *)__p;
      operator delete(__p);
    }
  }

void sub_1001266FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100126744(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
}

uint64_t sub_10012674C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2560) + 128LL))(*(void *)(a1 + 2560));
}

uint64_t sub_10012675C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2552) + 128LL))(*(void *)(a1 + 2552));
}

void sub_10012676C(uint64_t a1, int a2)
{
}

void sub_100126774(uint64_t a1, int a2)
{
}

void sub_10012677C(uint64_t a1)
{
  uint64_t v1 = a1 + 632;
  sub_100109B8C((_BYTE *)(a1 + 632));
  sub_1001099E0(v1, 0);
}

void sub_1001267A8(uint64_t a1)
{
  uint64_t v1 = a1 + 624;
  sub_100109B8C((_BYTE *)(a1 + 624));
  sub_1001099E0(v1, 0);
}

void sub_1001267D4(uint64_t a1)
{
  uint64_t v1 = (_BYTE *)(a1 + 632);
  sub_100109844(a1 + 632);
  sub_100109D40(v1);
}

void sub_1001267FC(uint64_t a1)
{
  uint64_t v1 = (_BYTE *)(a1 + 624);
  sub_100109844(a1 + 624);
  sub_100109D40(v1);
}

uint64_t sub_100126824(unsigned __int8 *a1)
{
  int v2 = a1[52];
  if (v2 == 1)
  {
    int v3 = 1;
  }

  else if (v2 == 2)
  {
    int v3 = sub_10012501C();
  }

  else
  {
    int v3 = 0;
  }

  int v4 = a1[104];
  sub_1002F0B04(buf);
  CFStringRef v5 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsUwbRangeLocalizationMinValidSessionTime",  0x8000100u,  kCFAllocatorNull);
  int v6 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v5, &v16);
  CFRelease(v5);
  uint64_t v7 = v16;
  int v8 = *(std::__shared_weak_count **)v18;
  if (*(void *)v18)
  {
    int v9 = (unint64_t *)(*(void *)v18 + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v6) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = 2500LL;
  }
  uint64_t result = sub_10010BA6C((uint64_t)(a1 + 632), v11);
  int v13 = result;
  if (!v4 || !a1[120])
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    __n128 v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v18 = 2082;
      *(void *)&void v18[2] = "";
      __int16 v19 = 1026;
      BOOL v20 = v4 == 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting all BLE measurements as ignored, displayStateOff:%{public}hhd}",  buf,  0x18u);
    }

    if (v3)
    {
      sub_10005B55C((uint64_t)(a1 + 1616), (__n128 *)buf);
      if (!v18[8]) {
        sub_100036CD8();
      }
      sub_1000498CC((uint64_t)(a1 + 136), buf);
    }

    uint64_t result = sub_100117CA8((uint64_t)(a1 + 584));
  }

  if (v13)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    char v15 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v18 = 2082;
      *(void *)&void v18[2] = "";
      __int16 v19 = 1026;
      BOOL v20 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting all UWB measurements as ignored, NI session not resumed:%{public}hhd}",  buf,  0x18u);
    }

    if (v3)
    {
      sub_10005B55C((uint64_t)(a1 + 1616), (__n128 *)buf);
      if (!v18[8]) {
        sub_100036CD8();
      }
      sub_100049A4C((uint64_t)(a1 + 136), buf);
    }

    return sub_100117CDC((uint64_t)(a1 + 584));
  }

  return result;
}

void sub_100126B10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100126B60(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a4)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v4 = (os_log_s *)qword_1019348D8;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT);
    uint64_t v6 = 0LL;
    if (v5)
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v55 = 2082;
      *(void *)&v55[2] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:shouldRescheduleLocalization, will not reschedule, currently in motion}",  buf,  0x12u);
      return 0LL;
    }

    return v6;
  }

  uint64_t v8 = a1;
  int v9 = *(_DWORD *)(a2 + 24);
  uint64_t v11 = *(_DWORD **)(a2 + 32);
  unint64_t v10 = *(_DWORD **)(a2 + 40);
  if (v11 == v10)
  {
    int v14 = 0;
    unsigned int v50 = 0;
  }

  else
  {
    uint64_t v12 = *(_DWORD **)(a2 + 32);
    do
    {
      if (*v12 == 1) {
        goto LABEL_11;
      }
      ++v12;
    }

    while (v12 != v10);
    uint64_t v12 = *(_DWORD **)(a2 + 40);
    do
    {
LABEL_11:
      if (*v11 <= 7u && ((1 << *v11) & 0x89) != 0)
      {
        int v14 = 1;
        goto LABEL_18;
      }

      ++v11;
    }

    while (v11 != v10);
    int v14 = 0;
LABEL_18:
    if (v9 == 3 || v12 == v10)
    {
      unsigned int v50 = 0;
    }

    else if (a3)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      unsigned int v16 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v55 = 2082;
        *(void *)&v55[2] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:shouldRescheduleLocalization, will not reschedule a motion trigger due to motion reason}",  buf,  0x12u);
      }

      unsigned int v50 = 0;
      uint64_t v8 = a1;
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      uint64_t v17 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v55 = 2082;
        *(void *)&v55[2] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:shouldRescheduleLocalization, will reschedule a localization trigger due to motion duri ng prediction}",  buf,  0x12u);
      }

      unsigned int v50 = 1;
    }
  }

  uint64_t v51 = v8;
  BOOL v18 = sub_10005A28C(v8 + 1616);
  if (((v9 != 3) & v14 & v18) != 1)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v24 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v55 = 2082;
      *(void *)&v55[2] = "";
      __int16 v56 = 1026;
      *(_DWORD *)unint64_t v57 = v9 != 3;
      *(_WORD *)&v57[4] = 1026;
      *(_DWORD *)&v57[6] = v14;
      __int16 v58 = 1026;
      BOOL v59 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:shouldRescheduleLocalization, result is valid or low latency mode is disabled, resetting retry states, confidenceLevelAllowReschedule:%{public}hhd, localizationRetryReasonExists:%{public}hhd, isLowLatencyMode:%{public}hhd}",  buf,  0x24u);
    }

    *(_DWORD *)(v51 + 108) = 0;
    *(_DWORD *)(v51 + 112) = 0;
    *(_BYTE *)(v51 + 116) = 1;
    return v50;
  }

  __int16 v19 = *(int **)(a2 + 32);
  for (uint64_t i = *(int **)(a2 + 40); v19 != i; ++v19)
  {
    int v21 = *v19;
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    unint64_t v22 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10009471C(v21, __p);
      int v23 = __p;
      if (v53 < 0) {
        int v23 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v55 = 2082;
      *(void *)&v55[2] = "";
      __int16 v56 = 2082;
      *(void *)unint64_t v57 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:shouldRescheduleLocalization, result contains reason:, reason:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (v53 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  if (!*(_BYTE *)(v51 + 116))
  {
    int v35 = *(_DWORD *)(v51 + 112);
    *(_DWORD *)(v51 + 112) = v35 + 1;
    sub_1002F0B04(buf);
    CFStringRef v36 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMaximumLocalizeNumRetryDisabledDueToWiFiError",  0x8000100u,  kCFAllocatorNull);
    int v37 = sub_1002A7D20(*(uint64_t *)buf, (uint64_t)v36, __p);
    CFRelease(v36);
    int v38 = (int)__p[0];
    __n128 v39 = *(std::__shared_weak_count **)v55;
    if (*(void *)v55)
    {
      int v40 = (unint64_t *)(*(void *)v55 + 8LL);
      do
        unint64_t v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }

    if (v37) {
      int v42 = v38;
    }
    else {
      int v42 = 30;
    }
    if (v35 >= v42)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      unint64_t v47 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        int v48 = *(_DWORD *)(v51 + 112) - 1;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v55 = 2082;
        *(void *)&v55[2] = "";
        __int16 v56 = 1026;
        *(_DWORD *)unint64_t v57 = v48;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:shouldRescheduleLocalization, reached invalid result retry disabled count limit, re try disabled trigger count:%{public}d}",  buf,  0x18u);
      }

      *(_BYTE *)(v51 + 116) = 1;
      *(_DWORD *)(v51 + 112) = 0;
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      __int16 v43 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        int v44 = *(_DWORD *)(v51 + 112);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v55 = 2082;
        *(void *)&v55[2] = "";
        __int16 v56 = 1026;
        *(_DWORD *)unint64_t v57 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:shouldRescheduleLocalization, will not retry, retry disabled trigger count:%{public}d}",  buf,  0x18u);
      }
    }

    return v50;
  }

  int v25 = *(_DWORD *)(v51 + 108);
  *(_DWORD *)(v51 + 108) = v25 + 1;
  sub_1002F0B04(buf);
  CFStringRef v26 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMaximumLocalizeNumRetryDueToWiFiError",  0x8000100u,  kCFAllocatorNull);
  int v27 = sub_1002A7D20(*(uint64_t *)buf, (uint64_t)v26, __p);
  CFRelease(v26);
  int v28 = (int)__p[0];
  uint64_t v29 = *(std::__shared_weak_count **)v55;
  if (*(void *)v55)
  {
    uint64_t v30 = (unint64_t *)(*(void *)v55 + 8LL);
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  if (v27) {
    int v32 = v28;
  }
  else {
    int v32 = 5;
  }
  if (v25 >= v32)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    __int16 v45 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      int v46 = *(_DWORD *)(v51 + 108) - 1;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v55 = 2082;
      *(void *)&v55[2] = "";
      __int16 v56 = 1026;
      *(_DWORD *)unint64_t v57 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:shouldRescheduleLocalization, reached invalid result reschedule limit, retried number:%{public}d}",  buf,  0x18u);
    }

    *(_BYTE *)(v51 + 116) = 0;
    *(_DWORD *)(v51 + 108) = 0;
    return v50;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  uint64_t v33 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    int v34 = *(_DWORD *)(v51 + 108);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v55 = 2082;
    *(void *)&v55[2] = "";
    __int16 v56 = 1026;
    *(_DWORD *)unint64_t v57 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:shouldRescheduleLocalization, will reschedule a localization trigger due to invalid result , retried count:%{public}d}",  buf,  0x18u);
  }

  return 1LL;
}

void sub_1001273F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10012741C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  int v4 = (void **)a1;
  sub_10012EB2C(&v4);
  return a1;
}

uint64_t *sub_100127460(uint64_t *result, uint64_t *a2)
{
  int v3 = result;
  int v4 = *((unsigned __int8 *)result + 52);
  if (v4 == 1)
  {
    sub_100118408((uint64_t)&v5, 0LL);
    sub_1001190F8((uint64_t)(v3 + 73), &v5, a2);
    return sub_1000478C8(v3 + 17, a2);
  }

  if (v4 == 2)
  {
    sub_100118408((uint64_t)&v6, 0LL);
    sub_1001190F8((uint64_t)(v3 + 73), &v6, a2);
    uint64_t result = (uint64_t *)sub_10012501C();
  }

  return result;
}

void sub_1001274FC(unsigned __int8 *p_vtable, os_log_s *a2, double a3)
{
  int v15 = 0;
  sub_100018E34(&v15);
  *(void *)&__int128 v16 = sub_100017338((ssize_t)&v15);
  *((void *)&v16 + 1) = v6;
  sub_100063770((uint64_t)__p);
  sub_10012796C(&v16, (uint64_t)__p, (uint64_t)buf, a3);
  (*(void (**)(unsigned __int8 *, uint8_t *))(*(void *)p_vtable + 152LL))(p_vtable, buf);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v18[24]);
  sub_1000792F0((wireless_diagnostics::google::protobuf::MessageLite *)__p);
  sub_100019D7C((unsigned int *)&v15);
  LODWORD(v7) = p_vtable[52];
  if ((_DWORD)v7 == 1)
  {
    sub_1001255DC((uint64_t)p_vtable, 0);
    goto LABEL_31;
  }

  if ((_DWORD)v7 == 2) {
    goto LABEL_29;
  }
  if (!p_vtable[52])
  {
    p_vtable = (unsigned __int8 *)&OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    uint64_t v7 = &OBJC_METACLASS___CLPrivacyManager.vtable;
    uint64_t v8 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_1000946B0(0, __p);
      if (v14 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v18 = 2082;
      *(void *)&void v18[2] = "";
      *(_WORD *)&_BYTE v18[10] = 2082;
      *(void *)&v18[12] = v9;
      *(_WORD *)&v18[20] = 2082;
      *(void *)&v18[22] = "assert";
      *(_WORD *)&v18[30] = 2081;
      __int16 v19 = "false";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid MiLo current activity, state:%{public, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    unint64_t v10 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_1000946B0(0, __p);
      if (v14 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v18 = 2082;
      *(void *)&void v18[2] = "";
      *(_WORD *)&_BYTE v18[10] = 2082;
      *(void *)&v18[12] = v11;
      *(_WORD *)&v18[20] = 2082;
      *(void *)&v18[22] = "assert";
      *(_WORD *)&v18[30] = 2081;
      __int16 v19 = "false";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid MiLo current activity",  "{msg%{public}.0s:Invalid MiLo current activity, state:%{public, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    a2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      p_vtable = (unsigned __int8 *)__p;
      sub_1000946B0(0, __p);
      if (v14 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v18 = 2082;
      *(void *)&void v18[2] = "";
      *(_WORD *)&_BYTE v18[10] = 2082;
      *(void *)&v18[12] = v12;
      *(_WORD *)&v18[20] = 2082;
      *(void *)&v18[22] = "assert";
      *(_WORD *)&v18[30] = 2081;
      __int16 v19 = "false";
      _os_log_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Invalid MiLo current activity, state:%{public, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm",  750,  "onScanActivityCompleted");
    __break(1u);
LABEL_29:
    *(void *)&v18[24] = 0LL;
    __int16 v19 = 0LL;
    *(void *)buf = 0LL;
    *(void *)BOOL v18 = 0LL;
    *(void *)&v18[8] = 0LL;
    *(void *)&v18[16] = &v18[24];
    int v20 = 4;
    sub_100125248((uint64_t)p_vtable, (uint64_t)buf);
    sub_100008390((uint64_t)&v18[16], *(void **)&v18[24]);
  }

void sub_100127918( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
}

void sub_10012796C(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
}

void sub_1001279E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_1001279F4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = sub_10005A544((uint64_t)&__p);
  v16[0] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "TriggerType",  sub_10010C140((__n128 *)(a1 + 632), (__n128 *)&__p).n128_f64[0]);
  v17[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v5);
  v16[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "NumLocalizations");
  v17[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2 == 1);
  v16[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "NumRecordings");
  v17[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2 == 2);
  v16[3] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "WiFiScanDuration");
  v17[3] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)&__p.__r_.__value_.__l.__data_);
  v16[4] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "BTScanDuration");
  v17[4] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)&__p.__r_.__value_.__l.__size_);
  v16[5] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "BleActiveScanRate");
  v17[5] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  LODWORD(__p.__r_.__value_.__r.__words[2]));
  uint64_t v6 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  6LL);
  v13[0] = 0;
  char v15 = 0;
  sub_1010DDBC0(v10, "ScanEvent");
  sub_1002B732C(a1 + 2048, (uint64_t)v13, (uint64_t)v10, (const __CFDictionary *)v6);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v15)
  {
    uint64_t v7 = v14;
    if (v14 == v13)
    {
      uint64_t v8 = 4LL;
      uint64_t v7 = v13;
      goto LABEL_10;
    }

    if (v14)
    {
      uint64_t v8 = 5LL;
LABEL_10:
      (*(void (**)(void))(*v7 + 8 * v8))();
    }
  }

  return sub_10010C154(a1 + 632);
}

void sub_100127C44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, uint64_t a22, uint64_t a23, char *a24, char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    CFStringRef v26 = a24;
    if (a24 == &a21)
    {
      uint64_t v27 = 4LL;
      CFStringRef v26 = &a21;
    }

    else
    {
      if (!a24) {
        goto LABEL_9;
      }
      uint64_t v27 = 5LL;
    }

    (*(void (**)(void))(*(void *)v26 + 8 * v27))();
  }

uint64_t sub_100127CC0(uint64_t a1, double *a2, uint64_t a3, int a4, unsigned int a5)
{
  double v8 = *a2;
  sub_100124884("InternalClientMotion", (uint64_t)v10);
  sub_1000C40E8((uint64_t)v10, 0, 0, 3u, (uint64_t)v11, v8);
  sub_100071810((wireless_diagnostics::google::protobuf::MessageLite *)v10);
  sub_1000578AC((unsigned __int8 *)(a1 + 1616), (uint64_t)v11, 1, a4, a5);
  return sub_100086708(v11);
}

void sub_100127D54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_100127D78(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 1808;
  sub_1000E7704(v4);
  sub_1002F0B04(&v20);
  CFStringRef v5 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMotionStopDetectionModuleEnable",  0x8000100u,  kCFAllocatorNull);
  char v6 = sub_1002A6FD4(v20, (uint64_t)v5, &v19);
  CFRelease(v5);
  BOOL v7 = v19;
  double v8 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v7) {
    char v11 = 0;
  }
  else {
    char v11 = v6;
  }
  if ((v11 & 1) == 0)
  {
    sub_1002F0B04(&v20);
    CFStringRef v12 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMotionInvalidateConfidenceOnMotion",  0x8000100u,  kCFAllocatorNull);
    int v13 = sub_1002A6FD4(v20, (uint64_t)v12, &v19);
    CFRelease(v12);
    BOOL v14 = v19;
    char v15 = v21;
    if (v21)
    {
      __int128 v16 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    int v18 = v13 ^ 1;
    if (v14) {
      int v18 = 1;
    }
    if (!a2)
    {
      if (v18) {
        sub_1000E773C(v4, 1);
      }
    }
  }

void sub_100127F04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_100127F74(uint64_t a1, int a2)
{
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  double v18 = Current_1;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192LL))(a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  char v6 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    int v21 = 0;
    __int16 v22 = 2082;
    uint64_t v23 = "";
    __int16 v24 = 1026;
    int v25 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:onInMotion - setting medium confidence and resetting localization error retries, Screen On:%{public}hhd}",  buf,  0x18u);
  }

  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 116) = 1;
  sub_100063958(v14);
  if (!sub_10007E3C4(0))
  {
    unint64_t v10 = "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)";
    int v11 = 17711;
    CFStringRef v12 = "set_status";
    goto LABEL_16;
  }

  v17 |= 4u;
  int v15 = 0;
  if (v5) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = 2;
  }
  if (!sub_1000641E0(v7))
  {
    unint64_t v10 = "::CLMicroLocationProto::MotionEvent_ScreenStatus_IsValid(value)";
    int v11 = 17804;
    CFStringRef v12 = "set_screenon";
LABEL_16:
    __assert_rtn(v12, "microlocation.pb.h", v11, v10);
  }

  v17 |= 0x10u;
  unsigned int v16 = v7;
  int v13 = 0;
  sub_100018E34(&v13);
  *(void *)&__int128 v19 = sub_100017338((ssize_t)&v13);
  *((void *)&v19 + 1) = v8;
  sub_10011DBF0(&v19, (uint64_t)v14, (uint64_t)buf, Current_1);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)a1 + 152LL))(a1, buf);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v26);
  sub_100019D7C((unsigned int *)&v13);
  sub_100059850(a1 + 1616);
  if (a2)
  {
    unsigned int v9 = a2 == 2;
  }

  else
  {
    sub_100127D78(a1, 0);
    unsigned int v9 = 0;
  }

  sub_100127CC0(a1, &v18, 0LL, 1, v9);
  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v14);
}

void sub_1001281CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, char a11)
{
}

void sub_100128210(uint64_t a1)
{
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  double v15 = Current_1;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192LL))(a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 1026;
    int v22 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:onStopMotion, ScreenOn:%{public}hhd}",  buf,  0x18u);
  }

  sub_100063958(v11);
  if (!sub_10007E3C4(1u))
  {
    unsigned int v7 = "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)";
    int v8 = 17711;
    unsigned int v9 = "set_status";
    goto LABEL_16;
  }

  v14 |= 4u;
  int v12 = 1;
  if (v3) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  if (!sub_1000641E0(v5))
  {
    unsigned int v7 = "::CLMicroLocationProto::MotionEvent_ScreenStatus_IsValid(value)";
    int v8 = 17804;
    unsigned int v9 = "set_screenon";
LABEL_16:
    __assert_rtn(v9, "microlocation.pb.h", v8, v7);
  }

  v14 |= 0x10u;
  unsigned int v13 = v5;
  int v10 = 0;
  sub_100018E34(&v10);
  *(void *)&__int128 v16 = sub_100017338((ssize_t)&v10);
  *((void *)&v16 + 1) = v6;
  sub_10011DBF0(&v16, (uint64_t)v11, (uint64_t)buf, Current_1);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)a1 + 152LL))(a1, buf);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v23);
  sub_100019D7C((unsigned int *)&v10);
  sub_100059924(a1 + 1616);
  if (v3)
  {
    sub_1000594D8(a1 + 1616, 0LL);
    sub_100127CC0(a1, &v15, 0LL, 0, 0);
  }

  else
  {
    sub_100127D78(a1, 0);
  }

  sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v11);
}

void sub_10012844C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, char a11)
{
}

void sub_10012848C(unsigned __int8 *a1)
{
  int v2 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 192LL))(a1);
  int v3 = a1 + 1616;
  if (sub_100059F98((uint64_t)v3) && v2)
  {
    sub_100063578(&v9);
    v13 |= 4u;
    uint64_t v4 = v11;
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v4 = (std::string *)operator new(0x18uLL);
      v4->__r_.__value_.__r.__words[0] = 0LL;
      v4->__r_.__value_.__l.__size_ = 0LL;
      v4->__r_.__value_.__l.__cap_ = 0LL;
      uint64_t v11 = v4;
    }

    std::string::assign(v4, "InternalClientMac");
    if (!sub_10006418C(1)) {
      __assert_rtn( "set_recordingrequesttype",  "microlocation.pb.h",  13116,  "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
    }
    v13 |= 2u;
    int v10 = 1;
    v8[0] = 0;
    sub_100018E34(v8);
    *(void *)__s = sub_100017338((ssize_t)v8);
    uint64_t v15 = v5;
    sub_100019D7C((unsigned int *)v8);
    v13 |= 8u;
    uint64_t v6 = v12;
    if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v6 = (std::string *)operator new(0x18uLL);
      v6->__r_.__value_.__r.__words[0] = 0LL;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      int v12 = v6;
    }

    std::string::assign(v6, __s, 0x10uLL);
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    sub_1000E2E30((uint64_t)&v9, 0, 0, 3u, (uint64_t)v8, Current_1);
    sub_100059020(v3, (uint64_t)v8);
    sub_100086708(v8);
    sub_1000721B8((wireless_diagnostics::google::protobuf::MessageLite *)&v9);
  }

void sub_10012861C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100128664(uint64_t a1)
{
}

uint64_t sub_100128670(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = sub_100128B74();
  sub_1002F0B04(buf);
  CFStringRef v7 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsScanDurationIncrement", 0x8000100u, kCFAllocatorNull);
  int v8 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v7, v41);
  CFRelease(v7);
  uint64_t v9 = v41[0];
  int v10 = *(std::__shared_weak_count **)v43;
  if (*(void *)v43)
  {
    uint64_t v11 = (unint64_t *)(*(void *)v43 + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v8) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = 500LL;
  }
  if (!v13) {
    return 0LL;
  }
  int v14 = *(unsigned __int8 *)(a1 + 52);
  if (!*(_BYTE *)(a1 + 52))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v25 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Logic, shouldExtendWifiScan was called when activity is NotSet",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      LOWORD(v41[0]) = 0;
      int v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Logic, shouldExtendWifiScan was called when activity is NotSet",  v41,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "cl::chrono::milliseconds CLMicroLocationLogic::requestWifiScanExtension(cl::chrono::milliseconds, size_t)",  "%s\n",  v40);
    }

    return 0LL;
  }

  signed int v15 = vcvtpd_s64_f64((double)a2 / (double)v13);
  if (v14 == 1)
  {
    sub_1002F0B04(buf);
    CFStringRef v27 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsLocalizingDurationMaximumIncrements",  0x8000100u,  kCFAllocatorNull);
    int v28 = sub_1002A7D20(*(uint64_t *)buf, (uint64_t)v27, v41);
    CFRelease(v27);
    int v29 = v41[0];
    uint64_t v30 = *(std::__shared_weak_count **)v43;
    if (*(void *)v43)
    {
      unint64_t v31 = (unint64_t *)(*(void *)v43 + 8LL);
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    if (v28) {
      int v33 = v29;
    }
    else {
      int v33 = 4;
    }
    int v34 = *(_DWORD *)(a1 + 96);
    int v8 = v33 - v34;
    if (v33 - v34 >= v15) {
      signed int v24 = v15;
    }
    else {
      signed int v24 = v33 - v34;
    }
    *(_DWORD *)(a1 + 96) = v24 + v34;
  }

  else if (v14 == 2)
  {
    sub_1002F0B04(buf);
    CFStringRef v16 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsRecordingDurationMaximumIncrements",  0x8000100u,  kCFAllocatorNull);
    int v17 = sub_1002A7D20(*(uint64_t *)buf, (uint64_t)v16, v41);
    CFRelease(v16);
    int v18 = v41[0];
    __int16 v19 = *(std::__shared_weak_count **)v43;
    if (*(void *)v43)
    {
      uint64_t v20 = (unint64_t *)(*(void *)v43 + 8LL);
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

    if (v17) {
      int v22 = v18;
    }
    else {
      int v22 = 4;
    }
    int v23 = *(_DWORD *)(a1 + 100);
    int v8 = v22 - v23;
    if (v22 - v23 >= v15) {
      signed int v24 = v15;
    }
    else {
      signed int v24 = v22 - v23;
    }
    *(_DWORD *)(a1 + 100) = v24 + v23;
  }

  else
  {
    signed int v24 = 0;
  }

  uint64_t v35 = v13 * v24;
  if (v6 > a3) {
    uint64_t v26 = v35;
  }
  else {
    uint64_t v26 = 0LL;
  }
  uint64_t v36 = *(unsigned __int8 *)(a1 + 52);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  int v37 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v38 = sub_100128B74();
    *(_DWORD *)buf = 68291074;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v43 = 2082;
    *(void *)&v43[2] = "";
    __int16 v44 = 1026;
    BOOL v45 = v6 <= a3;
    __int16 v46 = 2050;
    unint64_t v47 = a3;
    __int16 v48 = 2050;
    uint64_t v49 = v38;
    __int16 v50 = 2050;
    uint64_t v51 = a2;
    __int16 v52 = 2050;
    uint64_t v53 = v13;
    __int16 v54 = 2050;
    uint64_t v55 = v8;
    __int16 v56 = 2050;
    uint64_t v57 = v26;
    __int16 v58 = 2050;
    uint64_t v59 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLMicroLocationLogic:requestWifiScanExtension, requirement for min num measurements met :%{public}hhd, Num measurements:%{public}lu, Minimum num of measurements for scan extension:%{public}lu, requestedExtension:%{public}lld, singleScanIncrement:%{public}lld, remainingExtensions:%{public}lu,  extendDuration:%{public}lld, scanActivity:%{public, location:CLMicroLocationUtils::ScanActivity}lld}",  buf,  0x5Eu);
  }

  return v26;
}

void sub_100128B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100128B74()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumWiFiNumberOfMeasurementsForScanExtension",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  uint64_t v2 = v7;
  int v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 2LL;
  }
}

void sub_100128C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100128C4C(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)&__int128 v57 = a3;
  *((void *)&v57 + 1) = a4;
  sub_1002F0B04(&v58);
  memset(buf, 0, 24);
  CFStringRef v8 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsOverrideCurrentRTLOIType", 0x8000100u, kCFAllocatorNull);
  BOOL v9 = sub_1002A85D0((uint64_t)v58.__r_.__value_.__l.__data_, (uint64_t)v8, (std::string *)buf);
  CFRelease(v8);
  if (v9)
  {
    if ((buf[23] & 0x80000000) != 0) {
      sub_1010DD48C(&__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else {
      std::string __p = *(std::string *)buf;
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      sub_1010DD48C(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }

    else
    {
      std::string __str = __p;
    }
  }

  else
  {
    sub_1010DDBC0(&__str, "");
  }

  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  size = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
  if (v58.__r_.__value_.__l.__size_)
  {
    uint64_t v13 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  std::string::size_type v15 = __str.__r_.__value_.__s.__size_;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v15 = __str.__r_.__value_.__l.__size_;
  }
  if (v15) {
    std::string::operator=(a2, &__str);
  }
  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    sub_1010DD48C(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }

  else
  {
    *(_OWORD *)__dst = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    std::string::size_type cap = a2->__r_.__value_.__l.__cap_;
  }

  BOOL v16 = sub_100124A04(a1, (uint64_t *)__dst, v10, v11, a5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__dst[0]);
  }
  if (v16)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v17 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      memset(&v58, 0, sizeof(v58));
      if ((sub_100013090(a1 + 80, &v58) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
        sub_1000139B0((uint64_t)&__p);
      }

      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v18 = &v58;
      }
      else {
        int v18 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      __int16 v19 = (std::string *)(a1 + 56);
      memset(&v46, 0, sizeof(v46));
      if ((sub_100013090((uint64_t)&v57, &v46) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
        sub_1000139B0((uint64_t)&__p);
      }

      uint64_t v20 = &v46;
      if ((v46.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v20 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      unint64_t v21 = a2;
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2081;
      *(void *)&buf[20] = v18;
      __int16 v51 = 2081;
      __int16 v52 = v19;
      __int16 v53 = 2081;
      __int16 v54 = v20;
      __int16 v55 = 2081;
      __int16 v56 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Not allowed to switch to new LOI, Current LOI ID:%{private, location:escape_only}s, Current LOI Type:%{private, location:escape_only}s, New LOI ID:%{private, location:escape_only}s, New LOI Type:%{private, location:escape_only}s}",  buf,  0x3Au);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    int v22 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      memset(&v58, 0, sizeof(v58));
      if ((sub_100013090(a1 + 80, &v58) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
        sub_1000139B0((uint64_t)&__p);
      }

      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v23 = &v58;
      }
      else {
        int v23 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      signed int v24 = (std::string *)(a1 + 56);
      memset(&v46, 0, sizeof(v46));
      if ((sub_100013090((uint64_t)&v57, &v46) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
        sub_1000139B0((uint64_t)&__p);
      }

      int v25 = &v46;
      if ((v46.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v25 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2081;
      *(void *)&buf[20] = v23;
      __int16 v51 = 2081;
      __int16 v52 = v24;
      __int16 v53 = 2081;
      __int16 v54 = v25;
      __int16 v55 = 2081;
      __int16 v56 = a2;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Not allowed to switch to new LOI",  "{msg%{public}.0s:Not allowed to switch to new LOI, Current LOI ID:%{private, location:escape_only}s, Current LOI Type:%{private, location:escape_only}s, New LOI ID:%{private, location:escape_only}s, New LOI Type:%{private, location:escape_only}s}",  buf,  0x3Au);
    }
  }

  else
  {
    if ((char)a2->__r_.__value_.__s.__size_ < 0)
    {
      sub_1010DD48C(v44, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }

    else
    {
      *(_OWORD *)__int16 v44 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      std::string::size_type v45 = a2->__r_.__value_.__l.__cap_;
    }

    std::string::size_type v26 = *(void *)(a1 + 72);
    __int128 v27 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v44;
    *(void *)(a1 + 72) = v45;
    *(_OWORD *)__int16 v44 = v27;
    std::string::size_type v45 = v26;
    if (SHIBYTE(v26) < 0) {
      operator delete(v44[0]);
    }
    *(_OWORD *)(a1 + sub_10000AE14(v1 - 80) = v57;
    sub_100129684(a1);
    sub_1000E7280(a1 + 1808, (uint64_t *)a2, v57, *((uint64_t *)&v57 + 1));
    int v28 = sub_100059F98(a1 + 1616);
    sub_1000639AC((uint64_t)&__p);
    if (!sub_1000641B4(a5)) {
      __assert_rtn("set_reason", "microlocation.pb.h", 18183, "::CLMicroLocationProto::ChangedLoiReason_IsValid(value)");
    }
    int v40 = a5;
    v43 |= 0x14u;
    int v29 = (std::string *)__p.__r_.__value_.__l.__cap_;
    if ((_UNKNOWN *)__p.__r_.__value_.__l.__cap_ == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      int v29 = (std::string *)operator new(0x18uLL);
      v29->__r_.__value_.__r.__words[0] = 0LL;
      v29->__r_.__value_.__l.__size_ = 0LL;
      v29->__r_.__value_.__l.__cap_ = 0LL;
      __p.__r_.__value_.__l.__cap_ = (std::string::size_type)v29;
    }

    std::string::operator=(v29, a2);
    memset(&v58, 0, sizeof(v58));
    if ((sub_100013090((uint64_t)&v57, &v58) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)buf);
      *(void *)buf = &off_101818CB0;
      sub_1000139B0((uint64_t)buf);
    }

    v43 |= 8u;
    uint64_t v30 = v41;
    if (v41 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v30 = (std::string *)operator new(0x18uLL);
      v30->__r_.__value_.__r.__words[0] = 0LL;
      v30->__r_.__value_.__l.__size_ = 0LL;
      v30->__r_.__value_.__l.__cap_ = 0LL;
      unint64_t v41 = v30;
    }

    std::string::operator=(v30, &v58);
    v43 |= 0x20u;
    char v42 = v28;
    LODWORD(v46.__r_.__value_.__l.__data_) = 0;
    sub_100018E34((int *)&v46);
    v58.__r_.__value_.__r.__words[0] = sub_100017338((ssize_t)&v46);
    v58.__r_.__value_.__l.__size_ = v31;
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    sub_100129F78(&v58, (uint64_t)&__p, (uint64_t)buf, Current_1);
    (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 152LL))(a1, buf);
    sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)((char *)&v52 + 2));
    sub_100019D7C((unsigned int *)&v46);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v33 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      memset(&v46, 0, sizeof(v46));
      if ((sub_100013090((uint64_t)&v57, &v46) & 1) == 0)
      {
        uint64_t v38 = std::bad_cast::bad_cast((std::bad_cast *)&v58);
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
        sub_1000139B0((uint64_t)v38);
      }

      int v34 = (char)v46.__r_.__value_.__s.__size_;
      std::string::size_type v35 = v46.__r_.__value_.__r.__words[0];
      sub_1001013B8(a5, &v58);
      uint64_t v36 = &v46;
      if (v34 < 0) {
        uint64_t v36 = (std::string *)v35;
      }
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v37 = &v58;
      }
      else {
        int v37 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2081;
      *(void *)&buf[20] = a2;
      __int16 v51 = 2081;
      __int16 v52 = v36;
      __int16 v53 = 2081;
      __int16 v54 = v37;
      __int16 v55 = 1025;
      LODWORD(v56) = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Set current LOI., type:%{private, location:escape_only}s, id:%{private, locatio n:escape_only}s, reason:%{private, location:escape_only}s, is spectating:%{private}hhd}",  buf,  0x36u);
    }

    sub_10007F684((wireless_diagnostics::google::protobuf::MessageLite *)&__p);
  }

void sub_100129534( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, std::bad_cast a44, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44.__vftable);
  }
  sub_10000AE14(v49 - 112);
  _Unwind_Resume(a1);
}

void sub_100129684(uint64_t a1)
{
  __int128 v39 = *(_OWORD *)(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
  {
    sub_1010DD48C(__dst, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }

  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 72);
  }

  sub_10002B9E4(*(void *)(a1 + 128), &v39, v36);
  if (!v38)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    uint64_t v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      memset(__p, 0, 24);
      if ((sub_100013090((uint64_t)&v39, (std::string *)__p) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)v32);
        *(void *)unint64_t v32 = &off_101818CB0;
        sub_1000139B0((uint64_t)v32);
      }

      int v3 = __p;
      if (__p[23] < 0) {
        int v3 = *(_BYTE **)__p;
      }
      uint64_t v4 = __dst;
      if (v29 < 0) {
        uint64_t v4 = (void **)__dst[0];
      }
      *(_DWORD *)buf = 136380931;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&_BYTE buf[12] = 2081;
      *(void *)&buf[14] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Don't have a current wifi channel histogram for this LOI id %{private}s. Using histogram using LOI type only %{private}s.",  buf,  0x16u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v32, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      uint64_t v20 = qword_1019348D8;
      sub_10004DBD4((uint64_t)&v39, (std::string *)__p);
      if (__p[23] >= 0) {
        unint64_t v21 = __p;
      }
      else {
        unint64_t v21 = *(_BYTE **)__p;
      }
      int v22 = __dst;
      if (v29 < 0) {
        int v22 = (void **)__dst[0];
      }
      *(_DWORD *)buf = 136380931;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&_BYTE buf[12] = 2081;
      *(void *)&buf[14] = v22;
      int v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v32,  1628LL,  &_mh_execute_header,  v20,  2LL,  "Don't have a current wifi channel histogram for this LOI id %{private}s. Using histogram using LOI type only %{private}s.",  buf,  22);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::reloadWifiChannelHistogram()", "%s\n", v23);
    }

    uint64_t v5 = *(void *)(a1 + 128);
    *(void *)std::string __p = 0LL;
    *(void *)&__p[8] = 0LL;
    sub_10002B9E4(v5, (__int128 *)__p, v32);
    sub_1000A77B0((uint64_t)v36, (uint64_t)v32);
    sub_1000A7938((uint64_t)v32);
    if (!v38)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      unint64_t v6 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v7 = __dst;
        if (v29 < 0) {
          unsigned int v7 = (void **)__dst[0];
        }
        *(_DWORD *)unint64_t v32 = 136380675;
        *(void *)&v32[4] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Don't have wifi channel histogram for current LOI type %{private}s. Using default wifi histogram",  v32,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(v32, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        signed int v24 = __dst;
        if (v29 < 0) {
          signed int v24 = (void **)__dst[0];
        }
        *(_DWORD *)std::string __p = 136380675;
        *(void *)&__p[4] = v24;
        LODWORD(v26) = 12;
        int v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v32,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Don't have wifi channel histogram for current LOI type %{private}s. Using default wifi histogram",  __p,  v26);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::reloadWifiChannelHistogram()", "%s\n", v25);
      }
    }
  }

  CFStringRef v8 = operator new(0x68uLL);
  *(void *)&buf[16] = (char *)v8 + 104;
  *CFStringRef v8 = xmmword_1012CB930;
  v8[1] = xmmword_1012CB940;
  void v8[2] = xmmword_1012CB950;
  v8[3] = xmmword_1012CB960;
  v8[4] = xmmword_1012CB970;
  v8[5] = xmmword_1012CB980;
  *((void *)v8 + 12) = 13LL;
  *(void *)buf = v8;
  *(void *)&uint8_t buf[8] = (char *)v8 + 104;
  if (v38)
  {
    sub_1000ED9B0((uint64_t)&v37, (void **)v32);
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    *(_OWORD *)buf = *(_OWORD *)v32;
    *(void *)&buf[16] = v33;
  }

  sub_10010B9F0(a1 + 632, (uint64_t)buf);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  BOOL v9 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Reloaded wifi channel histogram", v32, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v32, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    *(_WORD *)std::string __p = 0;
    LODWORD(v26) = 2;
    __int16 v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v32,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Reloaded wifi channel histogram",  __p,  v26);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::reloadWifiChannelHistogram()", "%s\n", v19);
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    sub_10000CE18((uint64_t)v32);
    uint64_t v10 = *(unsigned int **)buf;
    for (uint64_t i = *(unsigned int **)&buf[8]; v10 != i; v10 += 2)
    {
      unint64_t v12 = sub_10000CF44(&v33, (uint64_t)"channel: ", 9LL);
      uint64_t v13 = (void *)std::ostream::operator<<(v12, *v10);
      unint64_t v14 = sub_10000CF44(v13, (uint64_t)" count: ", 8LL);
      std::string::size_type v15 = (void *)std::ostream::operator<<(v14, v10[1]);
      sub_10000CF44(v15, (uint64_t)", ", 2LL);
    }

    std::stringbuf::str(&v27, &v34);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    BOOL v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      int v17 = &v27;
      if ((v27.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v17 = (std::stringbuf::string_type *)v27.__r_.__value_.__r.__words[0];
      }
      *(void *)std::string __p = 68289283LL;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2081;
      *(void *)&__p[20] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Wifi channel histogram:, Histogram:%{private, location:escape_only}s}",  __p,  0x1Cu);
    }

    int v33 = v18;
    std::streambuf::~streambuf(&v34);
    std::ios::~ios(&v35);
  }

  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  sub_1000A7938((uint64_t)v36);
  if (SHIBYTE(v29) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100129EC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, std::bad_cast a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100129F78(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
}

void sub_100129FEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10012A000(uint64_t a1)
{
  uint64_t v2 = a1 + 1520;
  sub_10014AD20((std::string *)(a1 + 1520), (const std::string *)(a1 + 56));
  sub_10014AD28(v2, (__n128 *)(a1 + 80));
  if (*(_BYTE *)(a1 + 53))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Rapport, rapport session already running",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      v7[0] = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Rapport, rapport session already running",  v7,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::startRapportSessionIfStopped()", "%s\n", v4);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    uint64_t v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Rapport, start rapport session", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      v7[0] = 0;
      unint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Rapport, start rapport session",  v7,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::startRapportSessionIfStopped()", "%s\n", v6);
    }

    (*(void (**)(void))(**(void **)(a1 + 2560) + 88LL))(*(void *)(a1 + 2560));
    sub_1001232B4(a1 + 48, 1);
  }

double sub_10012A2F8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 53))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    uint64_t v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Rapport, stopping rapport session", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      v7[0] = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Rapport, stopping rapport session",  v7,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::stopRapportSessionIfRunning()", "%s\n", v5);
    }

    (*(void (**)(void))(**(void **)(a1 + 2560) + 96LL))(*(void *)(a1 + 2560));
    sub_10014A898(a1 + 1520);
    sub_10014A894(a1 + 1520);
    sub_1001232B4(a1 + 48, 0);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Rapport, rapport session already stopped",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      v7[0] = 0;
      unint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Rapport, rapport session already stopped",  v7,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::stopRapportSessionIfRunning()", "%s\n", v6);
    }
  }

  sub_10014AD20((std::string *)(a1 + 1520), (const std::string *)(a1 + 56));
  *(void *)&double result = sub_10014AD28(a1 + 1520, (__n128 *)(a1 + 80)).n128_u64[0];
  return result;
}

void sub_10012A608(void **a1, int a2)
{
  uint64_t v4 = (uint64_t)(a1 + 202);
  int v5 = sub_100059F98((uint64_t)(a1 + 202));
  if (a2)
  {
    if ((v5 & 1) == 0) {
      (*(void (**)(void *))(*a1[320] + 72LL))(a1[320]);
    }
    sub_10010830C((uint64_t)(a1 + 79));
    sub_1002F0B04(buf);
    CFStringRef v6 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRapportUsageEnabled", 0x8000100u, kCFAllocatorNull);
    char v7 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)v6, (BOOL *)v22);
    CFRelease(v6);
    int v8 = v22[0];
    BOOL v9 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    if (v8) {
      char v12 = 0;
    }
    else {
      char v12 = v7;
    }
    if ((v12 & 1) != 0) {
      sub_10012A2F8((uint64_t)a1);
    }
    else {
      sub_10012A000((uint64_t)a1);
    }
    sub_100059DDC(v4, 1);
    if (sub_10012ABC8())
    {
      ((void (*)(void **))(*a1)[36])(a1);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      BOOL v16 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Starting Motion Session MiLo is starting spectating",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        *(_WORD *)int v22 = 0;
        LODWORD(v21) = 2;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Starting Motion Session MiLo is starting spectating",  v22,  v21);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMicroLocationLogic::onUpdateSpectating(BOOL)",  "%s\n",  v20);
      }

      sub_100063958(v22);
      if (!sub_10007E3C4(2u)) {
        __assert_rtn( "set_status",  "microlocation.pb.h",  17711,  "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
      }
      v24 |= 4u;
      int v23 = 2;
      HIDWORD(v21) = 0;
      sub_100018E34((int *)&v21 + 1);
      *(void *)&__int128 v25 = sub_100017338((ssize_t)&v21 + 4);
      *((void *)&v25 + 1) = v17;
      double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
      sub_10011DBF0(&v25, (uint64_t)v22, (uint64_t)buf, Current_1);
      ((void (*)(void **, uint8_t *))(*a1)[19])(a1, buf);
LABEL_33:
      sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v28);
      sub_100019D7C((unsigned int *)&v21 + 1);
      sub_10007E5A4((wireless_diagnostics::google::protobuf::MessageLite *)v22);
    }
  }

  else
  {
    if (v5) {
      (*(void (**)(void *))(*a1[320] + 80LL))(a1[320]);
    }
    sub_10010918C((uint64_t)(a1 + 79));
    sub_100109844((uint64_t)(a1 + 79));
    sub_100109D40((_BYTE *)a1 + 632);
    sub_10012A2F8((uint64_t)a1);
    sub_10012AC9C((uint64_t)a1, 1u);
    sub_100049EDC((uint64_t)(a1 + 17));
    sub_100059DDC(v4, 0);
    if (sub_10012ABC8())
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      uint64_t v13 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Stopping PDR Fence because MiLo is no longer spectating",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        *(_WORD *)int v22 = 0;
        LODWORD(v21) = 2;
        __int16 v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Stopping PDR Fence because MiLo is no longer spectating",  v22,  v21);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMicroLocationLogic::onUpdateSpectating(BOOL)",  "%s\n",  v19);
      }

      sub_100063958(v22);
      if (!sub_10007E3C4(3u)) {
        __assert_rtn( "set_status",  "microlocation.pb.h",  17711,  "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
      }
      v24 |= 4u;
      int v23 = 3;
      HIDWORD(v21) = 0;
      sub_100018E34((int *)&v21 + 1);
      *(void *)&__int128 v25 = sub_100017338((ssize_t)&v21 + 4);
      *((void *)&v25 + 1) = v14;
      double v15 = j__CFAbsoluteTimeGetCurrent_1();
      sub_10011DBF0(&v25, (uint64_t)v22, (uint64_t)buf, v15);
      ((void (*)(void **, uint8_t *))(*a1)[19])(a1, buf);
      goto LABEL_33;
    }
  }

void sub_10012AB64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, char a12)
{
}

uint64_t sub_10012ABC8()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsPedestrianFenceWhenSpectatingEnabled",  0x8000100u,  kCFAllocatorNull);
  unsigned int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  int v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return v1;
  }
  else {
    return 0LL;
  }
}

void sub_10012AC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10012AC9C(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 52);
  if (v3 == 2)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    uint64_t v4 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v9) = 2082;
      *(void *)((char *)&v9 + 2) = "";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:interrupting an ongoing recording}",  buf,  0x12u);
    }

    sub_1001051C8((_BYTE *)(a1 + 632));
    v11[0] = 0LL;
    v11[1] = 0LL;
    *(void *)buf = 0LL;
    __int128 v9 = 0uLL;
    uint64_t v10 = (uint64_t *)v11;
    int v12 = 2;
    int v7 = 2;
    sub_10004A8FC(&v10, &v7, &v7);
    sub_100125248(a1, (uint64_t)buf);
    sub_100008390((uint64_t)&v10, v11[0]);
  }

  else if (v3 == 1)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    CFStringRef v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v9) = 2082;
      *(void *)((char *)&v9 + 2) = "";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:interrupting an ongoing localization}",  buf,  0x12u);
    }

    sub_1001051C8((_BYTE *)(a1 + 632));
    sub_1001255DC(a1, a2);
  }

  else if (!*(_BYTE *)(a1 + 52))
  {
    sub_1001191C0(a1 + 584);
  }

void sub_10012AEBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void sub_10012AEE0(uint64_t a1, int a2)
{
}

void sub_10012AEE8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  if (sub_1000232EC(a3, (std::locale::__imp **)(a1 + 2584))) {
    sub_100149F9C(a1 + 1520, a2, a4);
  }
}

void sub_10012AF40(uint64_t a1, int a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = "disabled";
    if (a2) {
      unint64_t v5 = "enabled";
    }
    *(_DWORD *)buf = 136446210;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Location services set to %{public}s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    CFStringRef v6 = "disabled";
    if (a2) {
      CFStringRef v6 = "enabled";
    }
    int v9 = 136446210;
    uint64_t v10 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Location services set to %{public}s",  &v9,  12);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::setLocationServicesEnabled(BOOL)", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  *(_BYTE *)(a1 + 49) = a2;
  sub_1001236F0(a1);
}

void sub_10012B128(uint64_t a1, int a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    unint64_t v5 = "False";
    if (a2) {
      unint64_t v5 = "True";
    }
    *(_DWORD *)buf = 136446210;
    int v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Platform support for milo is set to %{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    CFStringRef v6 = "False";
    if (a2) {
      CFStringRef v6 = "True";
    }
    int v9 = 136446210;
    uint64_t v10 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Platform support for milo is set to %{public}s",  &v9,  12);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::setPlatformSupport(BOOL)", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  *(_BYTE *)(a1 + 51) = a2;
}

void sub_10012B308(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  BOOL v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Got request to reset Location data. Dropping microlocation tables",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Got request to reset Location data. Dropping microlocation tables",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::onResetLocationData()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_100024718(*(void **)(a1 + 128));
  sub_1000B072C(buf, *(void *)(a1 + 128));
  sub_1000B2298((uint64_t)buf);
  sub_1000E741C((void *)(a1 + 1808));
}

void sub_10012B4BC(uint64_t a1, uint64_t a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v5 = *(void *)a2;
    }
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2081;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Got request to reset semi-supervised model related data for, clientIdentifier:%{priva te, location:escape_only}s}",  (uint8_t *)v6,  0x1Cu);
  }

  sub_100027568(*(void *)(a1 + 128), a2);
  sub_1000E741C((void *)(a1 + 1808));
}

#error "10012B628: call analysis failed (funcsize=28)"
uint64_t sub_10012B644(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  os_log_s *v6;
  double Current_1;
  _BYTE v8[48];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v4 = (unsigned __int8 *)(a1 + 1616);
  double result = sub_100059F98(a1 + 1616);
  if ((_DWORD)result && !*(_BYTE *)(a1 + 116))
  {
    *(_DWORD *)(a1 + 108) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 116) = 1;
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    CFStringRef v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      uint64_t v10 = 0;
      unint64_t v11 = 2082;
      int v12 = "";
      uint64_t v13 = 2082;
      uint64_t v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:localization retries have been exhausted, reset counters and trying another localization , reason:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    sub_100124884("InternalClientLogic", (uint64_t)v8);
    sub_1000C40E8((uint64_t)v8, 0, 0, 3u, (uint64_t)buf, Current_1);
    sub_100071810((wireless_diagnostics::google::protobuf::MessageLite *)v8);
    sub_1000578AC(v4, (uint64_t)buf, 1, 0, 0);
    return sub_100086708(buf);
  }

  return result;
}

void sub_10012B7B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10012B7E4(uint64_t a1)
{
  uint64_t v1 = a1 + 1616;
  uint64_t result = sub_100059F98(a1 + 1616);
  if ((_DWORD)result)
  {
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    sub_100124884("InternalClientScreenOnFallback", (uint64_t)v4);
    sub_1000C40E8((uint64_t)v4, 0, 0, 3u, (uint64_t)v5, Current_1);
    sub_100071810((wireless_diagnostics::google::protobuf::MessageLite *)v4);
    sub_10005AFA0(v1, (uint64_t)v5);
    return sub_100086708(v5);
  }

  return result;
}

void sub_10012B86C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_10012B890(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t sub_10012B898(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

void sub_10012B8A0(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 118) = a2;
  sub_1001236F0(a1);
}

void sub_10012B8A8()
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  CFStringRef v0 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "Models have been regenerated. Doing nothing",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    v3[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Models have been regenerated. Doing nothing",  v3,  2);
    BOOL v2 = (uint8_t *)v1;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationLogic::onModelGenerated(CLMicroLocationProto::Model::ModelType)",  "%s\n",  v1);
    if (v2 != buf) {
      free(v2);
    }
  }

void sub_10012BA2C(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  BOOL v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Models have been regenerated, Letting service Manager know",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Models have been regenerated, Letting service Manager know",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLogic::onLearningCompleted()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_10012A2F8(a1);
  sub_1000E96A0((void *)(a1 + 1808));
  sub_1001095A4(a1 + 632);
}

void sub_10012BBD8(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 40);
  if (*(_BYTE *)(a2 + 88)) {
    BOOL v4 = v3 < 1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (*(_BYTE *)(a1 + 80))
    {
LABEL_6:
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      if (sub_10099EDC8(v3)) {
        int v6 = 2;
      }
      else {
        int v6 = 5;
      }
      unsigned int v17 = v6;
      __int16 v7 = (void *)(a1 + 56);
      *(void *)buf = j__CFAbsoluteTimeGetCurrent_1();
      char v16 = 1;
      __p.__r_.__value_.__r.__words[0] = *(void *)a2;
      uint64_t v19 = sub_10012ECA0(&v18);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      unint64_t v11 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = (char *)operator new(0x28uLL);
        *(void *)(v12 + 29) = 0LL;
        *(_OWORD *)int v12 = 0u;
        *((_OWORD *)v12 + 1) = 0u;
        sub_10000AE6C(a1 + 80, v12);
        sub_1007EC454(&__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v14 = *(_DWORD *)(a2 + 40);
        *(_DWORD *)buf = 68290563;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2081;
        __int128 v25 = v7;
        __int16 v26 = 2081;
        std::stringbuf::string_type v27 = v12;
        __int16 v28 = 1026;
        int v29 = 1;
        __int16 v30 = 2081;
        std::string::size_type v31 = p_p;
        __int16 v32 = 2050;
        uint64_t v33 = v17;
        __int16 v34 = 1026;
        int v35 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationLogic, onAssociatedState event, currentRTLOIType:%{private, locati on:escape_only}s, currentRtLoiId:%{private, location:escape_only}s, IsAssociated:%{public}hhd, MAC A ddress:%{private, location:escape_only}s, Band:%{public}lu, Channel:%{public}d}",  buf,  0x46u);
        operator delete(v12);
      }

      sub_10012BF54(*(void *)(a1 + 128), &v18);
      *(void *)buf = &v18;
      sub_1000BB320((void ***)buf);
    }

    else
    {
      uint64_t v8 = 0LL;
      while (v8 != 15)
      {
        if (*(unsigned __int8 *)(a1 + 81 + v8++))
        {
          break;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      uint64_t v10 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v22 = 2082;
        int v23 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationLogic, onAssociatedState event ignored - nil currentRtLoiId}",  buf,  0x12u);
      }
    }
  }

void sub_10012BF0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  a17 = &a14;
  sub_1000BB320((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10012BF54(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v5 = *(void **)(a1 + 272);
    if (!v5)
    {
      uint64_t v5 = operator new(0x10uLL);
      sub_10013EB1C((uint64_t)v5, v4);
      int v6 = *(void **)(a1 + 272);
      *(void *)(a1 + 272) = v5;
      if (v6)
      {
        operator delete(v6);
        uint64_t v5 = *(void **)(a1 + 272);
      }
    }

    uint64_t v7 = sub_10013FAF0((uint64_t)v5, a2);
    sub_10012EE04(a1);
    return v7;
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    __int16 v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning Can't insert because the database is invalid",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      v11[0] = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Can't insert because the database is invalid",  v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::insertOrReplace(const std::vector<TableEntry> &) [TableEntry = CLMicroLocationAsso ciatedStateTable::Entry]",  "%s\n",  v10);
    }

    return 0LL;
  }

void sub_10012C164(_Unwind_Exception *a1)
{
}

uint64_t sub_10012C180(uint64_t a1, void *a2)
{
  return sub_1000D57B0(a1 + 2056, a2);
}

void sub_10012C188(uint64_t a1)
{
}

void sub_10012C190(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
}

void sub_10012C204( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10012C218(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

BOOL sub_10012C220(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 56);
  int v2 = *(char *)(a1 + 79);
  if (v2 < 0)
  {
    if (*(void *)(a1 + 64) != 7LL) {
      return 0LL;
    }
    uint64_t v1 = (uint64_t *)*v1;
  }

  else if (v2 != 7)
  {
    return 0LL;
  }

  int v3 = *(_DWORD *)v1;
  int v4 = *(_DWORD *)((char *)v1 + 3);
  return v3 == 1852534389 && v4 == 1853321070;
}

uint64_t sub_10012C278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (uint64_t *)a2;
  sub_10002F570(*(void *)(a1 + 128), a2, &v22);
  if (v23)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "CLMicroLocationLogic got previously stored LOI Group ID for LOI ID",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      LOWORD(__p) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "CLMicroLocationLogic got previously stored LOI Group ID for LOI ID",  &__p,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "boost::uuids::uuid CLMicroLocationLogic::getLoiGroupIdForLoi(const boost::uuids::uuid &, const std::vector<boost ::uuids::uuid> &)",  "%s\n",  v13);
    }

    if (!v23) {
      sub_100036CD8();
    }
    return v22;
  }

  else
  {
    sub_10002F85C(*(void *)(a1 + 128), a3, &__p);
    if (v20 == __p)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      unint64_t v11 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "CLMicroLocationLogic never before seen LOI, so starting with this LOI ID as the group ID",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        v18[0] = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "CLMicroLocationLogic never before seen LOI, so starting with this LOI ID as the group ID",  v18,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "boost::uuids::uuid CLMicroLocationLogic::getLoiGroupIdForLoi(const boost::uuids::uuid &, const std::vector<boo st::uuids::uuid> &)",  "%s\n",  v15);
      }

      uint64_t v10 = __p;
    }

    else
    {
      if ((unint64_t)(v20 - (_BYTE *)__p) >= 0x11)
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        uint64_t v8 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "CLMicroLocationLogic received multiple Loi Group IDs for LOI -- this should never happen",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101820170);
          }
          v18[0] = 0;
          char v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "CLMicroLocationLogic received multiple Loi Group IDs for LOI -- this should never happen",  v18,  2);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "boost::uuids::uuid CLMicroLocationLogic::getLoiGroupIdForLoi(const boost::uuids::uuid &, const std::vector<b oost::uuids::uuid> &)",  "%s\n",  v16);
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
      __int16 v9 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CLMicroLocationNotifier got previously stored LOI Group ID for list of LOI IDs",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820170);
        }
        v18[0] = 0;
        LODWORD(v17) = 2;
        int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "CLMicroLocationNotifier got previously stored LOI Group ID for list of LOI IDs",  v18,  v17);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "boost::uuids::uuid CLMicroLocationLogic::getLoiGroupIdForLoi(const boost::uuids::uuid &, const std::vector<boo st::uuids::uuid> &)",  "%s\n",  v14);
      }

      uint64_t v10 = __p;
      int v4 = (uint64_t *)__p;
    }

    uint64_t v7 = *v4;
    if (v10)
    {
      uint64_t v20 = v10;
      operator delete(v10);
    }
  }

  return v7;
}

void sub_10012C818( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10012C848(uint64_t a1, uint64_t a2, _OWORD *a3, const void **a4)
{
  v27[0] = sub_10012C278(a1, (uint64_t)a3, (uint64_t)a4);
  v27[1] = v8;
  __int16 v9 = *a4;
  uint64_t v10 = (uint64_t)a4[1];
  unint64_t v11 = (v10 - (uint64_t)*a4) >> 4;
  __int128 v25 = 0LL;
  unint64_t v26 = 0LL;
  std::string __p = 0LL;
  sub_1000577B4(&__p, v9, v10, v11);
  int v12 = v25;
  if ((unint64_t)v25 >= v26)
  {
    uint64_t v14 = (v25 - (_BYTE *)__p) >> 4;
    unint64_t v15 = v14 + 1;
    uint64_t v16 = v26 - (void)__p;
    else {
      unint64_t v17 = v15;
    }
    if (v17) {
      uint64_t v18 = (char *)sub_100037038((uint64_t)&v26, v17);
    }
    else {
      uint64_t v18 = 0LL;
    }
    uint64_t v19 = &v18[16 * v14];
    uint64_t v20 = &v18[16 * v17];
    *(_OWORD *)uint64_t v19 = *a3;
    uint64_t v13 = v19 + 16;
    uint64_t v22 = (char *)__p;
    uint64_t v21 = v25;
    if (v25 != __p)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v21 - 1);
        v19 -= 16;
        v21 -= 16;
      }

      while (v21 != v22);
      uint64_t v21 = (char *)__p;
    }

    std::string __p = v19;
    __int128 v25 = v13;
    unint64_t v26 = (unint64_t)v20;
    if (v21) {
      operator delete(v21);
    }
  }

  else
  {
    *(_OWORD *)__int128 v25 = *a3;
    uint64_t v13 = v12 + 16;
  }

  __int128 v25 = v13;
  sub_10002FB48(*(void *)(a1 + 128), (uint64_t)v27, (uint64_t)&__p, a2);
  if (__p)
  {
    __int128 v25 = (char *)__p;
    operator delete(__p);
  }

  return v27[0];
}

void sub_10012C9D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

uint64_t sub_10012C9F8(uint64_t a1, uint64_t a2, _OWORD *a3, const void **a4)
{
  return sub_10012C848(a1 - 32, a2, a3, a4);
}

void sub_10012CA00(uint64_t a1)
{
  if (sub_100031790(*(void *)(a1 + 128))) {
    sub_1001091B0((uint64_t *)(a1 + 632));
  }
}

uint64_t sub_10012CA40@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  double v12 = a5;
  uint64_t v6 = a1 + 1520;
  sub_10014A3A8(a1 + 1520, &v12, a2, a3, (uint64_t)v11);
  sub_10014A898(v6);
  sub_10014A894(v6);
  uint64_t v7 = (void *)v11[2];
  a4[1] = 0LL;
  a4[2] = 0LL;
  *a4 = 0LL;
  unint64_t v8 = 0LL;
  if (v7)
  {
    __int16 v9 = v7;
    do
    {
      ++v8;
      __int16 v9 = (void *)*v9;
    }

    while (v9);
  }

  sub_10012F0D0(a4, v7, 0LL, v8);
  return sub_10012EBB0((uint64_t)v11);
}

void sub_10012CACC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10012CAE0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, double *a6)
{
  __int128 v20 = *a5;
  char v21 = *((_BYTE *)a5 + 16);
  __int16 v9 = sub_100103054(1, a3, a4, (uint64_t)&v20);
  else {
    std::string __p = *(std::string *)a2;
  }
  char v15 = 1;
  sub_100102D00(&__p, v9, (uint64_t)v16);
  int v13 = 0;
  sub_100018E34(&v13);
  *(void *)&__int128 v17 = sub_100017338((ssize_t)&v13);
  *((void *)&v17 + 1) = v10;
  sub_1000C14EC(&v17, (uint64_t)v16, (uint64_t)v18, *a6);
  (*(void (**)(unsigned __int8 *, _BYTE *))(*(void *)a1 + 152LL))(a1, v18);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v19);
  sub_100019D7C((unsigned int *)&v13);
  sub_1000E2E30((uint64_t)v16, 0, 0, 3u, (uint64_t)v18, *a6);
  int v11 = sub_100059020(a1 + 1616, (uint64_t)v18);
  sub_100086708(v18);
  sub_1000721B8((wireless_diagnostics::google::protobuf::MessageLite *)v16);
  return v11 != 5;
}

void sub_10012CC6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

BOOL sub_10012CCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, double *a6)
{
  return sub_10012CAE0((unsigned __int8 *)(a1 - 24), a2, a3, a4, a5, a6);
}

void sub_10012CCE4( unsigned __int8 *a1@<X0>, const std::string *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X5>, int a7@<W6>, __n128 *a8@<X8>)
{
  __s.n128_u64[0] = a3;
  __s.n128_u64[1] = a4;
  sub_100063550(&v22);
  v27 |= 4u;
  uint64_t v14 = v24;
  if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v14 = (std::string *)operator new(0x18uLL);
    v14->__r_.__value_.__r.__words[0] = 0LL;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    __int16 v24 = v14;
  }

  std::string::operator=(v14, a2);
  if (!sub_10006417C(1)) {
    __assert_rtn( "set_receivedeventactiontype",  "microlocation.pb.h",  12856,  "::CLMicroLocationProto::ReceivedEventActionType_IsValid(value)");
  }
  int v23 = 1;
  v27 |= 0xAu;
  char v15 = v25;
  if (v25 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    char v15 = (std::string *)operator new(0x18uLL);
    v15->__r_.__value_.__r.__words[0] = 0LL;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    __int128 v25 = v15;
  }

  std::string::assign(v15, (const std::string::value_type *)&__s, 0x10uLL);
  if (*(_BYTE *)(a5 + 16))
  {
    v27 |= 0x10u;
    uint64_t v16 = v26;
    if (v26 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v16 = (std::string *)operator new(0x18uLL);
      v16->__r_.__value_.__r.__words[0] = 0LL;
      v16->__r_.__value_.__l.__size_ = 0LL;
      v16->__r_.__value_.__l.__cap_ = 0LL;
      unint64_t v26 = v16;
    }

    std::string::assign(v16, (const std::string::value_type *)a5, 0x10uLL);
  }

  int v21 = 0;
  sub_100018E34(&v21);
  *(void *)&__int128 v28 = sub_100017338((ssize_t)&v21);
  *((void *)&v28 + 1) = v17;
  sub_1000C16C0(&v28, (uint64_t)&v22, (uint64_t)v29, *a6);
  (*(void (**)(unsigned __int8 *, _BYTE *))(*(void *)a1 + 152LL))(a1, v29);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v30);
  sub_100019D7C((unsigned int *)&v21);
  sub_1000C40E8((uint64_t)&v22, 0, 0, 3u, (uint64_t)v29, *a6);
  uint64_t v18 = a1 + 1616;
  int v19 = sub_1000578AC(v18, (uint64_t)v29, a7, 0, 0);
  if (v19 == 3)
  {
    sub_10005B570((uint64_t)v18, a8);
LABEL_15:
    char v20 = 0;
    goto LABEL_16;
  }

  if (v19 != 4)
  {
    sub_10005B55C((uint64_t)v18, a8);
    goto LABEL_15;
  }

  *a8 = __s;
  char v20 = 1;
  a8[1].n128_u8[0] = 1;
LABEL_16:
  a8[1].n128_u8[1] = v20;
  sub_100086708(v29);
  sub_100071810((wireless_diagnostics::google::protobuf::MessageLite *)&v22);
}

void sub_10012CF4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10012CFA0( uint64_t a1@<X0>, const std::string *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X5>, int a7@<W6>, __n128 *a8@<X8>)
{
}

uint64_t sub_10012CFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return sub_10011926C( a1 + 584,  a2,  -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v8),  -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v7));
}

uint64_t sub_10012D050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10012CFA8(a1 - 24, a2, a3, a4, a5, a6);
}

uint64_t sub_10012D058(uint64_t a1, const std::string *a2, uint64_t a3, void *a4, void *a5)
{
  return sub_100124758( a1,  a2,  -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a3),  a4,  a5);
}

uint64_t sub_10012D0C0(uint64_t a1, const std::string *a2, uint64_t a3, void *a4, void *a5)
{
  return sub_10012D058(a1 - 24, a2, a3, a4, a5);
}

uint64_t sub_10012D0C8(uint64_t a1, const std::string *a2, _OWORD *a3, __int128 *a4)
{
  return sub_100119624(a1 + 584, a2, a3, a4);
}

uint64_t sub_10012D0D0(uint64_t a1, const std::string *a2, _OWORD *a3, __int128 *a4)
{
  return sub_100119624(a1 + 560, a2, a3, a4);
}

BOOL sub_10012D0D8(uint64_t a1, uint64_t *a2)
{
  int v17 = 1;
  int v4 = (unsigned __int8 *)(a1 + 1616);
  BOOL v5 = sub_10005A28C(a1 + 1616);
  BOOL v6 = sub_100059FA0((uint64_t)v4, a2, &v17);
  if (!v6) {
    goto LABEL_15;
  }
  if (!v5)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    uint64_t v10 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = (char *)operator new(0x28uLL);
      *(void *)(v11 + 29) = 0LL;
      *(_OWORD *)int v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      sub_10000AE6C((uint64_t)a2, v11);
      *(_DWORD *)buf = 68289282;
      int v19 = 0;
      __int16 v20 = 2082;
      int v21 = "";
      __int16 v22 = 2082;
      int v23 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:first service to connect to low-latency: invalidating caches, ServiceUUID:%{public, location:escape_only}s}",  buf,  0x1Cu);
      operator delete(v11);
    }

    sub_100127D78(a1, 1);
    goto LABEL_14;
  }

  BOOL v7 = sub_10012D498(a1, *a2, a2[1]);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  unint64_t v8 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v9 = (char *)operator new(0x28uLL);
    *(void *)(v9 + 29) = 0LL;
    *(_OWORD *)__int16 v9 = 0u;
    *((_OWORD *)v9 + 1) = 0u;
    sub_10000AE6C((uint64_t)a2, v9);
    *(_DWORD *)buf = 68289538;
    int v19 = 0;
    __int16 v20 = 2082;
    int v21 = "";
    __int16 v22 = 2082;
    int v23 = v9;
    __int16 v24 = 1026;
    BOOL v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:service connects to low-latency while already in low-latency, ServiceUUID:%{public, l ocation:escape_only}s, CachedLocalizationSuccess:%{public}hhd}",  buf,  0x22u);
    operator delete(v9);
  }

  if (!v7)
  {
LABEL_14:
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    sub_100124884("InternalClientLogic", (uint64_t)v16);
    sub_1000C40E8((uint64_t)v16, 0, 0, 3u, (uint64_t)buf, Current_1);
    sub_100071810((wireless_diagnostics::google::protobuf::MessageLite *)v16);
    sub_1000578AC(v4, (uint64_t)buf, 1, 0, 0);
    sub_100086708(buf);
  }

void sub_10012D44C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

BOOL sub_10012D498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[0] = a2;
  v24[1] = a3;
  uint64_t v4 = a1 + 1808;
  sub_1000E7910(a1 + 1808, a2, a3, &v14);
  if (v14)
  {
    LOBYTE(v22[0]) = 0;
    char v23 = 0;
    std::string __p = 0LL;
    __int16 v20 = 0LL;
    uint64_t v21 = 0LL;
    memset(v18, 0, 20);
    *(void *)buf = 0LL;
    BOOL v5 = sub_100048E94(a1 + 136, &v14, (uint64_t)v22, (uint64_t)buf);
    if (v5)
    {
      if (!v23) {
        sub_100036CD8();
      }
      sub_1000E7600(v4, (uint64_t *)buf, v22[0], v22[1]);
    }

    if (__p)
    {
      __int16 v20 = __p;
      operator delete(__p);
    }

    uint64_t v16 = buf;
    sub_10012EB2C((void ***)&v16);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    BOOL v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      BOOL v7 = (char *)operator new(0x28uLL);
      *(void *)(v7 + 29) = 0LL;
      *(_OWORD *)BOOL v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      sub_10000AE6C((uint64_t)v24, v7);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v18[0]) = 2082;
      *(void *)((char *)v18 + 2) = "";
      WORD1(v18[1]) = 2082;
      *(void *)((char *)&v18[1] + 4) = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:calcCachedLocalizationResults, didn't find model for requested service, Service Uuid :%{public, location:escape_only}s}",  buf,  0x1Cu);
      operator delete(v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    unint64_t v8 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      __int16 v9 = (char *)operator new(0x28uLL);
      *(void *)(v9 + 29) = 0LL;
      *(_OWORD *)__int16 v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      sub_10000AE6C((uint64_t)v24, v9);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v18[0]) = 2082;
      *(void *)((char *)v18 + 2) = "";
      WORD1(v18[1]) = 2082;
      *(void *)((char *)&v18[1] + 4) = v9;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "calcCachedLocalizationResults, didn't find model for requested service",  "{msg%{public}.0s:calcCachedLocalizationResults, didn't find model for requested service, Service Uuid :%{public, location:escape_only}s}",  buf,  0x1Cu);
      operator delete(v9);
    }

    BOOL v5 = 0LL;
  }

  uint64_t v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  return v5;
}

void sub_10012D748( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
}

BOOL sub_10012D78C(uint64_t a1, uint64_t *a2)
{
  return sub_10012D0D8(a1 - 24, a2);
}

BOOL sub_10012D794(uint64_t a1, void *a2)
{
  return sub_10005A06C(a1 + 1616, a2);
}

BOOL sub_10012D79C(uint64_t a1, void *a2)
{
  return sub_10005A06C(a1 + 1592, a2);
}

void sub_10012D7A4( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = a1 + 1808;
  std::string __p = 0LL;
  unint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  sub_100007590(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  sub_1000E4128(v10, a2, a3, (uint64_t)&__p, a5, a6);
  if (__p)
  {
    unint64_t v12 = __p;
    operator delete(__p);
  }

void sub_10012D830( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012D84C( uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, __n128 *a6@<X8>)
{
  v29[0] = a3;
  v29[1] = a4;
  sub_1000E4DC4(a1 + 1808, a2, a3, a4, a5, a6);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  __int16 v9 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = (char)a2[23];
    int v11 = *(uint64_t **)a2;
    int v12 = (char)a5[23];
    uint64_t v13 = *(uint64_t **)a5;
    uint64_t v14 = (char *)operator new(0x28uLL);
    *(_OWORD *)uint64_t v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *(void *)(v14 + 29) = 0LL;
    sub_10000AE6C((uint64_t)v29, v14);
    unint64_t v15 = a6[2].n128_u64[1];
    if (v12 >= 0) {
      uint64_t v16 = (uint64_t *)a5;
    }
    else {
      uint64_t v16 = v13;
    }
    if (v10 >= 0) {
      int v17 = (uint64_t *)a2;
    }
    else {
      int v17 = v11;
    }
    v18[0] = 68290051;
    v18[1] = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2081;
    __int16 v22 = v17;
    __int16 v23 = 2081;
    __int16 v24 = v16;
    __int16 v25 = 2081;
    unint64_t v26 = v14;
    __int16 v27 = 1025;
    int v28 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationLogic::deleteService, clientId:%{private, location:escape_only}s, us erId:%{private, location:escape_only}s, serviceId:%{private, location:escape_only}s, result:%{private}d}",  (uint8_t *)v18,  0x36u);
    operator delete(v14);
  }

void sub_10012D9D4(_Unwind_Exception *a1)
{
}

void sub_10012D9E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
}

uint64_t sub_10012D9F0( uint64_t a1, size_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void **a7)
{
  return sub_1000E50F4((uint64_t *)(a1 + 1808), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10012D9F8( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  return sub_1000E68F4((void *)(a1 + 1808), a2, a3, a4, a7);
}

uint64_t sub_10012DA04(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, int a6)
{
  return sub_1000E7530(a1 + 1808, a2, a3, a4, a5, a6);
}

uint64_t sub_10012DA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  __int128 v8 = *a6;
  char v9 = *((_BYTE *)a6 + 16);
  return sub_1000E7788(a1 + 1808, a2, a3, a4, a5, (uint64_t)&v8, a7);
}

uint64_t sub_10012DA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2568) + 16LL))( *(void *)(a1 + 2568),  a2,  a3);
}

uint64_t sub_10012DABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2552) + 16LL))( *(void *)(a1 + 2552),  a2,  a3);
}

uint64_t sub_10012DB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2568) + 24LL))( *(void *)(a1 + 2568),  a2,  a3,  a4,  a5);
}

uint64_t sub_10012DB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2552) + 24LL))( *(void *)(a1 + 2552),  a2,  a3,  a4,  a5);
}

uint64_t sub_10012DBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2568) + 32LL))( *(void *)(a1 + 2568),  a2,  a3,  a4,  a5);
}

uint64_t sub_10012DC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2552) + 32LL))( *(void *)(a1 + 2552),  a2,  a3,  a4,  a5);
}

uint64_t sub_10012DCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (qword_1019348E0 != -1) {
    dispatch_once(&qword_1019348E0, &stru_101820190);
  }
  BOOL v5 = (os_log_s *)qword_1019348E8;
  if (os_log_type_enabled((os_log_t)qword_1019348E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)a4 + 48)) {
      BOOL v6 = "YES";
    }
    else {
      BOOL v6 = "NO";
    }
    v56[0] = 0LL;
    v56[1] = 0LL;
    uint64_t v57 = 0LL;
    BOOL v7 = &v58;
    sub_100048820((char *)a4 + 56, (uint64_t)v56, (uint64_t)&v58);
    if (v59 < 0) {
      BOOL v7 = v58;
    }
    __int128 v8 = operator new(0x28uLL);
    __int16 v54 = v8;
    __int128 v55 = xmmword_1012C8460;
    *__int128 v8 = 0u;
    v8[1] = 0u;
    *(void *)((char *)v8 + 29) = 0LL;
    sub_10000AE6C(a2, v8);
    if (v55 >= 0) {
      char v9 = &v54;
    }
    else {
      char v9 = (void **)v54;
    }
    int v10 = *(unsigned __int8 *)(a3 + 16);
    if (*(_BYTE *)(a3 + 16))
    {
      int v11 = (char *)operator new(0x28uLL);
      __int16 v52 = (void **)v11;
      __int128 v53 = xmmword_1012C8460;
      *(_OWORD *)int v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      *(void *)(v11 + 29) = 0LL;
      sub_10000AE6C(a3, v11);
      int v12 = (void **)&v52;
      if (v53 < 0) {
        int v12 = v52;
      }
    }

    else
    {
      __p[0] = 0LL;
      __p[1] = 0LL;
      int v12 = __p;
      uint64_t v51 = 0LL;
    }

    uint64_t v13 = (a4[1] - *a4) >> 5;
    *(void *)buf = 68290307LL;
    *(_WORD *)uint64_t v61 = 2082;
    *(void *)&v61[2] = "";
    __int16 v62 = 2081;
    uint64_t v63 = (void *)v6;
    __int16 v64 = 2081;
    char v65 = v7;
    __int16 v66 = 2081;
    int v67 = v9;
    __int16 v68 = 2081;
    v69 = v12;
    __int16 v70 = 2049;
    uint64_t v71 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Localizer results, model, isStable:%{private, location:escape_only}s, clientIdentif ier:%{private, location:escape_only}s, serviceUUID:%{private, location:escape_only}s, requestId:%{privat e, location:escape_only}s, numberOfMicroLocations:%{private}lu}",  buf,  0x44u);
    if (v10)
    {
      if (SHIBYTE(v53) < 0)
      {
        uint64_t v14 = v52;
LABEL_22:
        operator delete(v14);
      }
    }

    else if (SHIBYTE(v51) < 0)
    {
      uint64_t v14 = (void **)__p[0];
      goto LABEL_22;
    }

    if (SHIBYTE(v55) < 0) {
      operator delete(v54);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete(v58);
    }
    if (SHIBYTE(v57) < 0) {
      operator delete(v56[0]);
    }
  }

  sub_1002F0B04(buf);
  CFStringRef v15 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsNumberOfLoggedProbabilityResults",  0x8000100u,  kCFAllocatorNull);
  int v16 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v15, &v58);
  CFRelease(v15);
  unsigned int v17 = v58;
  uint64_t v18 = *(std::__shared_weak_count **)v61;
  if (*(void *)v61)
  {
    __int16 v19 = (unint64_t *)(*(void *)v61 + 8LL);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  if (v16) {
    unsigned int v21 = v17;
  }
  else {
    unsigned int v21 = 20;
  }
  uint64_t v22 = *a4;
  uint64_t v23 = a4[1];
  unsigned int v24 = 0;
  if (*a4 != v23 && v21 != 0)
  {
    uint64_t v26 = v22 + 32;
    do
    {
      if (qword_1019348E0 != -1) {
        dispatch_once(&qword_1019348E0, &stru_101820190);
      }
      __int16 v27 = (os_log_s *)qword_1019348E8;
      if (os_log_type_enabled((os_log_t)qword_1019348E8, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = operator new(0x28uLL);
        std::string v58 = v28;
        __int128 v59 = xmmword_1012C8460;
        *int v28 = 0u;
        v28[1] = 0u;
        *(void *)((char *)v28 + 29) = 0LL;
        sub_10000AE6C(v26 - 32, v28);
        int v29 = SHIBYTE(v59);
        uint64_t v30 = (void **)v58;
        std::string::size_type v31 = *(void **)(v26 - 16);
        __int16 v54 = 0LL;
        __int128 v55 = 0uLL;
        sub_100048820((char *)a4 + 56, (uint64_t)&v54, (uint64_t)v56);
        __int16 v32 = &v58;
        if (v29 < 0) {
          __int16 v32 = v30;
        }
        uint64_t v33 = v56;
        if (v57 < 0) {
          uint64_t v33 = (void **)v56[0];
        }
        *(void *)buf = 68289795LL;
        *(_WORD *)uint64_t v61 = 2082;
        *(void *)&v61[2] = "";
        __int16 v62 = 2081;
        uint64_t v63 = v32;
        __int16 v64 = 2049;
        char v65 = v31;
        __int16 v66 = 2081;
        int v67 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Localizer results, cluster, microLocationId:%{private, location:escape_only}s,  probability:%{private}.6f, clientIdentifier:%{private, location:escape_only}s}",  buf,  0x30u);
        if (SHIBYTE(v57) < 0) {
          operator delete(v56[0]);
        }
        if (SHIBYTE(v55) < 0) {
          operator delete(v54);
        }
        if (SHIBYTE(v59) < 0) {
          operator delete(v58);
        }
      }

      ++v24;
      if (v26 == v23) {
        break;
      }
      v26 += 32LL;
    }

    while (v24 < v21);
    uint64_t v22 = *a4;
    uint64_t v23 = a4[1];
  }

  unint64_t v34 = v24;
  if (v24 < (unint64_t)((v23 - v22) >> 5))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *a4;
      if (v24 < (unint64_t)((a4[1] - *a4) >> 5))
      {
        unsigned int v36 = v24 + 1;
        do
        {
          if (qword_1019348E0 != -1) {
            dispatch_once(&qword_1019348E0, &stru_101820190);
          }
          uint64_t v37 = (os_log_s *)qword_1019348E8;
          if (os_log_type_enabled((os_log_t)qword_1019348E8, OS_LOG_TYPE_DEBUG))
          {
            char v38 = operator new(0x28uLL);
            std::string v58 = v38;
            __int128 v59 = xmmword_1012C8460;
            *char v38 = 0u;
            v38[1] = 0u;
            *(void *)((char *)v38 + 29) = 0LL;
            sub_10000AE6C(v35 + 32 * v34, v38);
            int v39 = SHIBYTE(v59);
            int v40 = (void **)v58;
            unint64_t v41 = *(void **)(v35 + 32 * v34 + 16);
            __int16 v54 = 0LL;
            __int128 v55 = 0uLL;
            sub_100048820((char *)a4 + 56, (uint64_t)&v54, (uint64_t)v56);
            char v42 = &v58;
            if (v39 < 0) {
              char v42 = v40;
            }
            int v43 = v56;
            if (v57 < 0) {
              int v43 = (void **)v56[0];
            }
            *(void *)buf = 68289795LL;
            *(_WORD *)uint64_t v61 = 2082;
            *(void *)&v61[2] = "";
            __int16 v62 = 2081;
            uint64_t v63 = v42;
            __int16 v64 = 2049;
            char v65 = v41;
            __int16 v66 = 2081;
            int v67 = v43;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Localizer results, cluster, microLocationId:%{private, location:escape_only}s , probability:%{private}.6f, clientIdentifier:%{private, location:escape_only}s}",  buf,  0x30u);
            if (SHIBYTE(v57) < 0) {
              operator delete(v56[0]);
            }
            if (SHIBYTE(v55) < 0) {
              operator delete(v54);
            }
            if (SHIBYTE(v59) < 0) {
              operator delete(v58);
            }
          }

          unint64_t v34 = v36;
          uint64_t v35 = *a4;
          ++v36;
        }

        while (v34 < (a4[1] - *a4) >> 5);
      }
    }
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2560) + 40LL))( *(void *)(a1 + 2560),  a2,  a3,  a4,  a5);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2568) + 40LL))( *(void *)(a1 + 2568),  a2,  a3,  a4,  a5);
}

void sub_10012E3B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10012E470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return sub_10012DCAC(a1 - 16, a2, a3, a4, a5);
}

uint64_t sub_10012E478(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2560) + 48LL))(*(void *)(a1 + 2560));
}

uint64_t sub_10012E488(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2544) + 48LL))(*(void *)(a1 + 2544));
}

BOOL sub_10012E498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000E7804(a1 + 1808, a2, a3, a4, a5, a6, a7);
}

BOOL sub_10012E4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000E7878(a1 + 1808, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10012E4A8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  return sub_1000E999C((void *)(a1 + 1808), a2, a3, a4);
}

uint64_t sub_10012E4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2568) + 56LL))( *(void *)(a1 + 2568),  a2,  a3,  a4);
}

uint64_t sub_10012E508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2552) + 56LL))( *(void *)(a1 + 2552),  a2,  a3,  a4);
}

BOOL sub_10012E560(uint64_t a1)
{
  return sub_10005A28C(a1 + 1616);
}

uint64_t sub_10012E568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  return sub_1000E94E4(a1 + 1808, a2, a3, a4, a5);
}

uint64_t sub_10012E570(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2560) + 104LL))(*(void *)(a1 + 2560));
}

uint64_t sub_10012E580(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2536) + 104LL))(*(void *)(a1 + 2536));
}

BOOL sub_10012E590(uint64_t a1, uint64_t *a2, int a3)
{
  return sub_1000E7588(a1 + 1808, a2, a3);
}

BOOL sub_10012E598(uint64_t a1, uint64_t *a2)
{
  return sub_1000E75C8(a1 + 1808, a2);
}

uint64_t sub_10012E5A0(uint64_t a1, __int128 *a2)
{
  return -1LL;
}

uint64_t sub_10012E5BC(uint64_t a1, __int128 *a2)
{
  return -1LL;
}

uint64_t sub_10012E5D8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4 = a1 + 2056;
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) == 0LL) {
    BOOL v6 = (unsigned __int8 *)a3;
  }
  else {
    BOOL v6 = *(unsigned __int8 **)a3;
  }
  if ((v5 & 0x80u) != 0LL) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  uint64_t v7 = sub_100011CE8((uint64_t)&v10, v6, &v6[v5]);
  sub_1000D56A4(v4, v7, v8, a2);
  return -1LL;
}

void sub_10012E644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  else {
    std::string __p = *(std::string *)a2;
  }
  sub_100128C4C(a1, &__p, a3, a4, a5);
}

void sub_10012E6D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012E6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

void sub_10012E6F4(uint64_t a1, uint64_t a2)
{
}

void sub_10012E6FC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10012E70C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2560) + 136LL))(*(void *)(a1 + 2560));
}

uint64_t sub_10012E71C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2528) + 136LL))(*(void *)(a1 + 2528));
}

uint64_t sub_10012E72C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2560) + 144LL))(*(void *)(a1 + 2560));
}

uint64_t sub_10012E73C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2528) + 144LL))(*(void *)(a1 + 2528));
}

void sub_10012E74C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10012E778(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 384))
  {
    sub_100086708(a1 + 248);
    sub_10003F6D4(a1 + 48);
    int v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
  }

  return a1;
}

void sub_10012E7C0(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100046EB0(v4 - 192);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10012E830(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = 0uLL;
  uint64_t v5 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_10012E8D0, &v4);
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  uint64_t v5 = 0LL;
  __int128 v4 = 0uLL;
  BOOL v6 = (void **)&v4;
  sub_1000129D4(&v6);
}

void sub_10012E8B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1000129D4(&a12);
  _Unwind_Resume(a1);
}

void sub_10012E8D0(void *a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >= a2[2])
  {
    uint64_t v5 = sub_10112142C(a2, (__int128 *)__p);
  }

  else
  {
    if (SHIBYTE(v7) < 0)
    {
      sub_1010DD48C((_BYTE *)a2[1], __p[0], (unint64_t)__p[1]);
    }

    else
    {
      __int128 v4 = *(_OWORD *)__p;
      *(void *)(v3 + 16) = v7;
      *(_OWORD *)unint64_t v3 = v4;
    }

    uint64_t v5 = v3 + 24;
    a2[1] = v3 + 24;
  }

  a2[1] = v5;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10012E964( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10012E98C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID()) {
    sub_10122DB88();
  }
  return sub_1010DDBC0(a2, (char *)[a1 UTF8String]);
}

void *sub_10012E9DC(void *result, char **a2, char **a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    sub_100006E1C(result, a4);
    uint64_t result = sub_10012EA60((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10012EA40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000129D4(&a9);
  _Unwind_Resume(a1);
}

void *sub_10012EA60(uint64_t a1, char **a2, char **a3, void *a4)
{
  CFTypeID v4 = a4;
  uint64_t v10 = a4;
  int v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    BOOL v6 = a2;
    do
    {
      sub_1010DDBC0(v4, *v6++);
      CFTypeID v4 = v11 + 3;
      v11 += 3;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_100036EC8((uint64_t)v8);
  return v4;
}

void sub_10012EAEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10012EB00(id a1)
{
  qword_1019348E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MicrolocationQE");
}

void sub_10012EB2C(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216LL;
        sub_10004CB30((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_10012EBB0(uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10012EBE8(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_10012EC24((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }

    while (v3);
  }

void sub_10012EC24(uint64_t a1)
{
}

void sub_10012EC68(uint64_t *a1)
{
  if (*a1)
  {
    sub_100012A14(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t sub_10012ECA0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8E38E38E38E38E39LL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_100007008();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0x8E38E38E38E38E39LL * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0x1C71C71C71C71C7LL) {
    unint64_t v7 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_100046304(v5, v7);
  }
  else {
    uint64_t v8 = 0LL;
  }
  int v11 = v8;
  int v12 = &v8[72 * v3];
  uint64_t v14 = &v8[72 * v7];
  sub_10013EBE4(v12);
  uint64_t v13 = v12 + 72;
  sub_1000BB5D0(a1, &v11);
  uint64_t v9 = a1[1];
  sub_1000BB768((uint64_t)&v11);
  return v9;
}

void sub_10012EDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_10012EE04(uint64_t a1)
{
  unsigned int v2 = sub_100038F08(a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  unint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = "MicroLocationAssociatedState";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicate s a serious problem",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
    int v7 = 136446210;
    uint64_t v8 = "MicroLocationAssociatedState";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem",  &v7,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::freeSpaceIfFull() [Table = CLMicroLocationAssociatedStateTable]",  "%s\n",  v6);
  }

  BOOL result = sub_100031468(a1);
  if (result)
  {
    else {
      uint64_t v5 = *(void *)(a1 + 160);
    }
    sub_1003C1EC0(a1 + 72, v5);
    return 1LL;
  }

  return result;
}

uint64_t sub_10012EFF8()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAssociatedStateTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 1000LL;
  }
}

void sub_10012F0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_10012F0D0(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_10010E150(result, a4);
    BOOL result = (void *)sub_10012F154((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10012F134( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000AD0FC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10012F154(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      sub_10012F1FC(a1, v4, (uint64_t)(v6 + 2));
      unint64_t v6 = (void *)*v6;
      uint64_t v4 = v12 + 80;
      v12 += 80LL;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_10012F2AC((uint64_t)v9);
  return v4;
}

void sub_10012F1E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_10012F1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  unint64_t v5 = (_BYTE *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_1010DD48C(v5, *(void **)(a3 + 16), *(void *)(a3 + 24));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)unint64_t v5 = v6;
  }

  unsigned int v7 = (_BYTE *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    sub_1010DD48C(v7, *(void **)(a3 + 40), *(void *)(a3 + 48));
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(_OWORD *)unsigned int v7 = v8;
  }

  __n128 result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

void sub_10012F290(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10012F2AC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10012F2E0((uint64_t *)a1);
  }
  return a1;
}

void sub_10012F2E0(uint64_t *a1)
{
  unsigned int v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 80LL;
      sub_100046498(v5, v3);
    }

    while (v3 != v4);
  }

uint64_t sub_10012F330(void *a1, uint64_t *a2)
{
  *sub_1002A51A4(a1) = &off_1018201E0;
  uint64_t v4 = objc_autoreleasePoolPush();
  int v5 = *((char *)a2 + 23);
  if (v5 >= 0) {
    __int128 v6 = a2;
  }
  else {
    __int128 v6 = (uint64_t *)*a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v7 = a2[1];
  }
  __int128 v8 = +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v6, v7),  0LL,  0LL);
  if (v8 && (uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary), (objc_opt_isKindOfClass(v8, v9) & 1) != 0))
  {
    sub_1002A5550((int)v11, v8);
    sub_1002A55A8(v12, (uint64_t)v11);
    v12[0] = &off_1018201E0;
    sub_1002A576C((uint64_t)a1, (uint64_t)v12);
    sub_1002A5554(v12);
    sub_1002A5590(v11);
    objc_autoreleasePoolPop(v4);
    return (uint64_t)a1;
  }

  else
  {
    sub_10122DD00();
    uint64_t result = abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettingsTypes.mm",  17,  "CLMicroLocationDictionary");
    __break(1u);
  }

  return result;
}

void sub_10012F44C(_Unwind_Exception *a1)
{
}

CFStringRef sub_10012F490()
{
  return @"MicroLocationSettings";
}

void sub_10012F49C(void *a1)
{
  uint64_t v1 = sub_1002A5554(a1);
  operator delete(v1);
}

void sub_10012F4B0(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10012F4DC(double *a1@<X1>, _BYTE *a2@<X8>)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_1018205C0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Force Recording received", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018205C0);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Force Recording received",  v9,  2);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::tuple<BOOL, const CLMicroLocationProto::RecordingEvent> CLMicroLocationLegacyEventForcedRecording::handleEv ent(const cl::chrono::CFAbsoluteTimeClock::time_point &)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  double v5 = *a1;
  sub_100063644((uint64_t)v8);
  sub_10012F734((uint64_t)v8, 0, 0, 3u, (uint64_t)v9, v5);
  buf[0] = 1;
  sub_1000865CC(v11);
  *a2 = buf[0];
  sub_1000865CC(a2 + 8);
  sub_100086708(v11);
  sub_100086708(v9);
  sub_10007474C((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_10012F6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_100086708(v4);
  sub_100086708(va1);
  sub_10007474C((wireless_diagnostics::google::protobuf::MessageLite *)va);
  _Unwind_Resume(a1);
}

void sub_10012F734( uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unsigned int v12 = *(_DWORD *)(a1 + 8);
  if (!sub_100064160(v12))
  {
    uint64_t v14 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v15 = 19803;
    uint64_t v16 = "set_eventtype";
    goto LABEL_6;
  }

  int v13 = *(_DWORD *)(a5 + 128);
  *(_DWORD *)(a5 + 72) = v12;
  *(double *)(a5 + 8) = a6;
  *(_BYTE *)(a5 + 77) = a2;
  *(_DWORD *)(a5 + 128) = v13 | 0x2803;
  *(_BYTE *)(a5 + 76) = a3;
  if ((sub_100064130(a4) & 1) == 0)
  {
    uint64_t v14 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v15 = 20312;
    uint64_t v16 = "set_confidencelevel";
LABEL_6:
    __assert_rtn(v16, "microlocation.pb.h", v15, v14);
  }

  *(_DWORD *)(a5 + 128) |= 0x4000u;
  *(_DWORD *)(a5 + 120) = a4;
  sub_100101BB4(a5, a1);
}

void sub_10012F818(_Unwind_Exception *a1)
{
}

void sub_10012F82C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10012F858(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0LL;
  uint64_t v5 = 0LL;
  switch(*(_DWORD *)(a2 + 72))
  {
    case 1:
      if ((*(_BYTE *)(a2 + 128) & 4) == 0) {
        goto LABEL_6;
      }
      uint64_t v6 = *(void *)(a2 + 16);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_1019A0980 + 16);
      }
      if ((*(_BYTE *)(v6 + 44) & 2) == 0) {
        goto LABEL_6;
      }
      uint64_t v5 = 0LL;
      if (*(_DWORD *)(v6 + 12) == 3) {
        uint64_t v3 = 1LL;
      }
      else {
        uint64_t v3 = 2LL;
      }
      break;
    case 2:
      sub_1002F0B04(&v39);
      uint64_t v8 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsAppLaunchReasonRecordingAllowedList",  0x8000100u,  kCFAllocatorNull);
      BOOL v9 = sub_1002AA610((uint64_t)v39, v8, (CFTypeRef *)&v45);
      CFRelease(v8);
      if (v9)
      {
        sub_10012FED8((const __CFArray *)v45, (uint64_t)&v42);
      }

      else
      {
        uint64_t v42 = 0LL;
        uint64_t v43 = 0LL;
        uint64_t v44 = 0LL;
        sub_10012E9DC(&v42, &off_10181DD40, (char **)&stru_10181DD88, 9uLL);
      }

      uint64_t v14 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          unint64_t v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }

      uint64_t v17 = *(void *)(a2 + 24);
      if (!v17) {
        uint64_t v17 = *(void *)(qword_1019A0980 + 24);
      }
      uint64_t v18 = sub_1000AC7C8(v42, v43, *(unsigned __int8 ***)(v17 + 24));
      if (v18 == v43) {
        uint64_t v5 = 0LL;
      }
      else {
        uint64_t v5 = 0x300000000LL;
      }
      sub_1002F0B04(&v45);
      __int16 v19 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsAppLaunchLocalizationReasonDenyList",  0x8000100u,  kCFAllocatorNull);
      BOOL v20 = sub_1002AA610((uint64_t)v45, v19, (CFTypeRef *)&v47);
      CFRelease(v19);
      if (v20)
      {
        sub_100130034(v47, (uint64_t)&v39);
      }

      else
      {
        int v39 = 0LL;
        int v40 = 0LL;
        uint64_t v41 = 0LL;
        sub_10012E9DC(&v39, &off_1018205E0, (char **)&stru_1018205E8, 1uLL);
      }

      unsigned int v21 = v46;
      if (v46)
      {
        uint64_t v22 = (unint64_t *)&v46->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      uint64_t v24 = *(void *)(a2 + 24);
      if (!v24) {
        uint64_t v24 = *(void *)(qword_1019A0980 + 24);
      }
      uint64_t v25 = sub_1000AC7C8((uint64_t)v39, (uint64_t)v40, *(unsigned __int8 ***)(v24 + 24));
      uint64_t v26 = *(void *)(a2 + 24);
      uint64_t v27 = v26;
      if (!v26) {
        uint64_t v27 = *(void *)(qword_1019A0980 + 24);
      }
      uint64_t v28 = *(void *)(v27 + 16);
      if (!v28) {
        uint64_t v28 = *(void *)(qword_1019A08A0 + 16);
      }
      if (*(_BYTE *)(v28 + 8)) {
        goto LABEL_64;
      }
      if (!v26) {
        uint64_t v26 = *(void *)(qword_1019A0980 + 24);
      }
      uint64_t v29 = *(void *)(v26 + 16);
      if (!v29) {
        uint64_t v29 = *(void *)(qword_1019A08A0 + 16);
      }
      BOOL v30 = !*(_BYTE *)(v29 + 9) || a3 == 0;
      if (!v30 && v25 == (void)v40)
      {
LABEL_64:
        sub_1002F0B04(&v45);
        CFStringRef v32 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsForceLocalizeOnAllowedApps",  0x8000100u,  kCFAllocatorNull);
        unsigned __int8 v33 = sub_1002A6FD4((uint64_t)v45, (uint64_t)v32, (BOOL *)&v47);
        CFRelease(v32);
        int v34 = v47;
        uint64_t v35 = v46;
        if (v46)
        {
          unsigned int v36 = (unint64_t *)&v46->__shared_owners_;
          do
            unint64_t v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }

        if ((v33 & (v34 != 0)) != 0) {
          uint64_t v3 = 1LL;
        }
        else {
          uint64_t v3 = 2LL;
        }
      }

      else
      {
        uint64_t v3 = 0LL;
      }

      std::string::size_type v45 = (void **)&v39;
      sub_1000129D4(&v45);
      int v39 = (void **)&v42;
      sub_1000129D4(&v39);
      break;
    case 3:
    case 6:
    case 8:
    case 0xB:
      return v5 | v3;
    case 4:
      uint64_t v5 = 0LL;
      uint64_t v3 = 3LL;
      break;
    case 5:
    case 0xC:
LABEL_6:
      uint64_t v5 = 0LL;
      uint64_t v3 = 2LL;
      break;
    case 7:
      uint64_t v3 = 0LL;
      uint64_t v5 = (uint64_t)&_mh_execute_header;
      break;
    case 9:
      uint64_t v10 = *(void *)(a2 + 56);
      if (!v10) {
        uint64_t v10 = *(void *)(qword_1019A0980 + 56);
      }
      uint64_t v3 = 2LL * *(unsigned __int8 *)(v10 + 68);
      int v11 = *(unsigned __int8 *)(v10 + 69);
      goto LABEL_17;
    case 0xA:
      uint64_t v12 = *(void *)(a2 + 64);
      if (!v12) {
        uint64_t v12 = *(void *)(qword_1019A0980 + 64);
      }
      uint64_t v3 = 2LL * *(unsigned __int8 *)(v12 + 52);
      int v11 = *(unsigned __int8 *)(v12 + 53);
LABEL_17:
      if (v11) {
        uint64_t v5 = 0x300000000LL;
      }
      else {
        uint64_t v5 = 0LL;
      }
      break;
    case 0xD:
      uint64_t v13 = *(void *)(a2 + 88);
      if (!v13) {
        uint64_t v13 = *(void *)(qword_1019A0980 + 88);
      }
      uint64_t v3 = 0LL;
      if (*(_DWORD *)(v13 + 12) == 2) {
        uint64_t v5 = 0x200000000LL;
      }
      else {
        uint64_t v5 = 0x300000000LL;
      }
      break;
    default:
      uint64_t v5 = 0LL;
      break;
  }

  return v5 | v3;
}

void sub_10012FCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  sub_10000AE14((uint64_t)va2);
  *(void *)(v2 - 56) = va;
  sub_1000129D4((void ***)(v2 - 56));
  va_copy((va_list)v4, va1);
  sub_1000129D4((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_10012FD3C(double a1, double a2, uint64_t a3, int a4, uint64_t a5, unsigned __int8 a6)
{
  int v8 = a6;
  double v9 = a1 - *(double *)&a5;
  BOOL v10 = a1 - *(double *)&a5 < a2;
  if (!a6) {
    BOOL v10 = 0;
  }
  BOOL v11 = a4 == 3 && v10;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_1018205E8);
  }
  uint64_t v12 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v13 = *(void *)&v9;
    __int16 v16 = 2082;
    v15[0] = 68290050;
    if (!v8) {
      unint64_t v13 = 0xBFF0000000000000LL;
    }
    v15[1] = 0;
    uint64_t v17 = "";
    __int16 v18 = 1026;
    int v19 = a4;
    __int16 v20 = 2050;
    unint64_t v21 = v13;
    __int16 v22 = 2050;
    double v23 = a2;
    __int16 v24 = 1026;
    BOOL v25 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:isThrottle, type:%{public}d, time since last allowed timestamp(sec):%{public}.2 f, throttle duration(sec):%{public}.2f, isThrottle:%{public}hhd}",  (uint8_t *)v15,  0x32u);
  }

  return v11;
}

uint64_t sub_10012FE88(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(_BYTE *)(result + 8)) {
    *(_BYTE *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t sub_10012FEA4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(_BYTE *)(result + 24)) {
    *(_BYTE *)(result + 24) = 1;
  }
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t sub_10012FEC0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_10012FECC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_10012FED8(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = 0uLL;
  uint64_t v5 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_10012FF78, &v4);
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  uint64_t v5 = 0LL;
  __int128 v4 = 0uLL;
  uint64_t v6 = (void **)&v4;
  sub_1000129D4(&v6);
}

void sub_10012FF58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1000129D4(&a12);
  _Unwind_Resume(a1);
}

void sub_10012FF78(void *a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >= a2[2])
  {
    uint64_t v5 = sub_10112142C(a2, (__int128 *)__p);
  }

  else
  {
    if (SHIBYTE(v7) < 0)
    {
      sub_1010DD48C((_BYTE *)a2[1], __p[0], (unint64_t)__p[1]);
    }

    else
    {
      __int128 v4 = *(_OWORD *)__p;
      *(void *)(v3 + 16) = v7;
      *(_OWORD *)unint64_t v3 = v4;
    }

    uint64_t v5 = v3 + 24;
    a2[1] = v3 + 24;
  }

  a2[1] = v5;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10013000C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100130034(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = 0uLL;
  uint64_t v5 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_1001300D4, &v4);
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  uint64_t v5 = 0LL;
  __int128 v4 = 0uLL;
  uint64_t v6 = (void **)&v4;
  sub_1000129D4(&v6);
}

void sub_1001300B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1000129D4(&a12);
  _Unwind_Resume(a1);
}

void sub_1001300D4(void *a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >= a2[2])
  {
    uint64_t v5 = sub_10112142C(a2, (__int128 *)__p);
  }

  else
  {
    if (SHIBYTE(v7) < 0)
    {
      sub_1010DD48C((_BYTE *)a2[1], __p[0], (unint64_t)__p[1]);
    }

    else
    {
      __int128 v4 = *(_OWORD *)__p;
      *(void *)(v3 + 16) = v7;
      *(_OWORD *)unint64_t v3 = v4;
    }

    uint64_t v5 = v3 + 24;
    a2[1] = v3 + 24;
  }

  a2[1] = v5;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100130168( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100130190(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1001301BC(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934F70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934F70))
  {
    sub_100133408((std::string *)&xmmword_101934F58);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934F58, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934F70);
  }

  if (byte_101934F6F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934F58, *((unint64_t *)&xmmword_101934F58 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934F58;
    *(void *)(a1 + 16) = unk_101934F68;
  }

void sub_10013026C(_Unwind_Exception *a1)
{
}

void sub_100130284(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934F90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934F90))
  {
    sub_100133578((std::string *)&xmmword_101934F78);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934F78, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934F90);
  }

  if (byte_101934F8F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934F78, *((unint64_t *)&xmmword_101934F78 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934F78;
    *(void *)(a1 + 16) = unk_101934F88;
  }

void sub_100130334(_Unwind_Exception *a1)
{
}

void sub_10013034C(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + 8) = v2;
  if (v2)
  {
    sub_1003B59A0(*a1, "MiLoCustomLoiTable", (const char **)&off_101820628, 0LL, 0);
    char v3 = sub_1003B747C(*a1, "MiLoCustomLoiTable");
    *((_BYTE *)a1 + 8) = v3;
    if ((v3 & 1) != 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820608);
      }
      __int128 v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v12 = "MiLoCustomLoiTable";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820608);
        }
        uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %s",  &v9);
LABEL_19:
        uint64_t v7 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMiLoCustomLoiTable::initTable()", "%s\n");
LABEL_29:
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820608);
      }
      int v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v12 = "MiLoCustomLoiTable";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create table: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820608);
        }
        int v9 = 136446210;
        BOOL v10 = "MiLoCustomLoiTable";
        uint64_t v7 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMiLoCustomLoiTable::initTable()", "%s\n");
        goto LABEL_29;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820608);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Database is not connected so we can't intialize our table",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820608);
      }
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Database is not connected so we can't intialize our table");
      goto LABEL_19;
    }
  }

uint64_t sub_100130738(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_10013034C((uint64_t *)a1);
  return a1;
}

uint64_t sub_100130764(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_101993A9F >= 0) {
      uint64_t v5 = (char *)&xmmword_101993A88;
    }
    else {
      uint64_t v5 = (char *)xmmword_101993A88;
    }
    sub_1003C0D54(v4, v5, &v31);
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      uint64_t v7 = *a2 + 24LL;
      while (1)
      {
        int v8 = (sqlite3_stmt *)sub_100019240(v31);
        if (*(char *)(v7 - 1) < 0)
        {
          sub_1010DD48C(__dst, *(void **)(v7 - 24), *(void *)(v7 - 16));
        }

        else
        {
          __int128 v9 = *(_OWORD *)(v7 - 24);
          uint64_t v30 = *(void *)(v7 - 8);
          *(_OWORD *)__dst = v9;
        }

        memset(&__p, 0, sizeof(__p));
        if ((sub_100013090(v7, &__p) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&buf);
          *(void *)&__int128 buf = &off_101818CB0;
          sub_1000139B0((uint64_t)&buf);
        }

        double v10 = *(double *)(v7 + 16);
        BOOL v11 = v30 >= 0 ? (char *)__dst : (char *)__dst[0];
        if (!sub_1003BC1F0(v8, 2, v11)) {
          break;
        }
        uint64_t v12 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101820608);
          }
          uint64_t v17 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_101993A9F >= 0) {
              __int16 v18 = &xmmword_101993A88;
            }
            else {
              __int16 v18 = (__int128 *)xmmword_101993A88;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{public}s",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101820608);
            }
            if (byte_101993A9F >= 0) {
              int v19 = &xmmword_101993A88;
            }
            else {
              int v19 = (__int128 *)xmmword_101993A88;
            }
            int v32 = 136446210;
            unsigned __int8 v33 = v19;
            LODWORD(v27) = 12;
            __int16 v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{public}s",  &v32,  v27);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMiLoCustomLoiTable::insertOrReplace(const std::vector<CLMiLoCustomLoiTable::Entry> &)",  "%s\n",  v20);
          }

void sub_100130D88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, std::bad_cast a31)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a28) {
    (*(void (**)(uint64_t))(*(void *)a28 + 8LL))(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100130E00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    uint64_t v15 = *(void *)(a2 + 16);
  }

  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  CFAbsoluteTime Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  if (SHIBYTE(v15) < 0)
  {
    sub_1010DD48C(__p, __dst[0], (unint64_t)__dst[1]);
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)__dst;
    uint64_t v18 = v15;
  }

  uint64_t v19 = v8;
  uint64_t v20 = v7;
  CFAbsoluteTime v21 = Current_1;
  sub_100131920(v16, (__int128 *)__p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v6 = sub_100130764(a1, v16);
  if ((v6 & 1) == 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820608);
    }
    double v10 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "#Warning Failed to add Service Id to LOI Id mapping",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820608);
      }
      v13[0] = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "#Warning Failed to add Service Id to LOI Id mapping",  v13,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMiLoCustomLoiTable::addServiceToCustomLoiMapping(const std::string &, const boost::uuids::uuid &)",  "%s\n",  v12);
    }
  }

  __p[0] = v16;
  sub_1001336CC((void ***)__p);
  return v6;
}

void sub_100131070( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, char *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  std::string __p = &a19;
  sub_1001336CC((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_1001310C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v47.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v47, "DELETE FROM ");
    uint64_t v6 = std::string::append(&v47, "MiLoCustomLoiTable");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v8 = std::string::append(&v48, " WHERE (");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    double v10 = std::string::append(&v49, "ServiceId");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    char v46 = 2;
    strcpy(__s, "=");
    uint64_t v12 = std::string::append(&v50, __s, 2uLL);
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    int v14 = *(char *)(a2 + 23);
    if (v14 >= 0) {
      uint64_t v15 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v15 = *(const std::string::value_type **)a2;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(a2 + 8);
    }
    uint64_t v17 = std::string::append(&v51, v15, v16);
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    char v44 = 6;
    strcpy(v43, " AND ");
    uint64_t v19 = std::string::append(&v52, v43, 6uLL);
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    CFAbsoluteTime v21 = std::string::append(&v53, "LoiId");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    char v42 = 2;
    strcpy(v41, "=");
    double v23 = std::string::append(&v54, v41, 2uLL);
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    memset(&__p, 0, sizeof(__p));
    if ((sub_100013090(a3, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)v59);
      *(void *)__int128 v59 = &off_101818CB0;
      sub_1000139B0((uint64_t)v59);
    }

    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v27 = std::string::append(&v55, (const std::string::value_type *)p_p, size);
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    HIBYTE(v61) = 2;
    strcpy(v59, ")");
    uint64_t v29 = std::string::append(&v56, v59, 2uLL);
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    int64_t cap = v29->__r_.__value_.__l.__cap_;
    __int128 v57 = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    if (SHIBYTE(v61) < 0) {
      operator delete(*(void **)v59);
    }
    if (v42 < 0) {
      operator delete(*(void **)v41);
    }
    if (v44 < 0) {
      operator delete(*(void **)v43);
    }
    if (v46 < 0) {
      operator delete(*(void **)__s);
    }
    if (cap >= 0) {
      uint64_t v31 = (char *)&v57;
    }
    else {
      uint64_t v31 = (char *)v57;
    }
    sub_1003C0D54(*(void *)a1, v31, v59);
    int v32 = *(void **)v59;
    unsigned __int8 v33 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v59);
    if (v33)
    {
      BOOL v34 = sub_1003BB2BC(*(void *)a1, v33);
      if (!v32) {
        goto LABEL_51;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820608);
      }
      unint64_t v37 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 v59 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)v59,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(v59, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820608);
        }
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        int v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v59,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v56,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMiLoCustomLoiTable::removeServiceToCustomLoiMapping(const std::string &, const boost::uuids::uuid &)",  "%s\n",  v39);
        if (v39 != v59) {
          free(v39);
        }
      }

      BOOL v34 = 0LL;
      if (!v32) {
        goto LABEL_51;
      }
    }

    (*(void (**)(void *))(*(void *)v32 + 8LL))(v32);
LABEL_51:
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v57);
    }
    return v34;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820608);
  }
  uint64_t v35 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v59 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so can't remove service to custom LOI mapping",  (uint8_t *)v59,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v59, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820608);
    }
    LOWORD(v57) = 0;
    char v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v59,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so can't remove service to custom LOI mapping",  &v57,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMiLoCustomLoiTable::removeServiceToCustomLoiMapping(const std::string &, const boost::uuids::uuid &)",  "%s\n",  v38);
    if (v38 != v59) {
      free(v38);
    }
  }

  return 0LL;
}

void sub_10013178C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8LL))(v68);
  }
  if (a68 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100131920(uint64_t *a1, __int128 *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555LL) {
      sub_100007008();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555LL;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      uint64_t v15 = (char *)sub_1000BB1F4(result, v14);
    }
    else {
      uint64_t v15 = 0LL;
    }
    std::string::size_type v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    __int128 v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string::size_type v16 = v17;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v18 = *(__int128 *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    v19[2] = v16 + 48;
    sub_100133758(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_1001338F0((uint64_t)v19);
  }

  else
  {
    __int128 v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v9 = *(__int128 *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }

  a1[1] = v10;
  return result;
}

void sub_100131A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100131A78(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v46 = 0uLL;
  unint64_t v47 = 0LL;
  v37.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v37, "SELECT ");
  unint64_t v6 = std::string::append(&v37, "ServiceId");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  char v36 = 6;
  strcpy(__s, " FROM ");
  __int128 v8 = std::string::append(&v38, __s, 6uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v10 = std::string::append(&v39, "MiLoCustomLoiTable");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  char v34 = 7;
  strcpy(v33, " WHERE ");
  unint64_t v12 = std::string::append(&v40, v33, 7uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v14 = std::string::append(&v41, "LoiId");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  char v32 = 2;
  strcpy(v31, "=");
  std::string::size_type v16 = std::string::append(&v42, v31, 2uLL);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  memset(&__p, 0, sizeof(__p));
  if ((sub_100013090(a2, &__p) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v48);
    *(void *)&__int128 v48 = &off_101818CB0;
    sub_1000139B0((uint64_t)&v48);
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  __int128 v20 = std::string::append(&v43, (const std::string::value_type *)p_p, size);
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  HIBYTE(v49) = 1;
  strcpy((char *)&v48, "");
  __int128 v22 = std::string::append(&v50, (const std::string::value_type *)&v48, 1uLL);
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  int64_t cap = v22->__r_.__value_.__l.__cap_;
  __int128 v44 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (v32 < 0) {
    operator delete(*(void **)v31);
  }
  if (v34 < 0) {
    operator delete(*(void **)v33);
  }
  if (v36 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    __int128 v24 = (char *)&v44;
  }
  else {
    __int128 v24 = (char *)v44;
  }
  sub_1003C0D54(*a1, v24, &v48);
  uint64_t v25 = v48;
  uint64_t v26 = (sqlite3_stmt *)sub_100019240(v48);
  while (j__sqlite3_step(v26) == 100)
  {
    sub_100011CB8(v26, 0, &v48);
    uint64_t v27 = (__int128 *)*((void *)&v46 + 1);
    if (*((void *)&v46 + 1) >= v47)
    {
      uint64_t v29 = sub_100013DF0((uint64_t *)&v46, &v48);
    }

    else
    {
      if (SHIBYTE(v49) < 0)
      {
        sub_1010DD48C(*((_BYTE **)&v46 + 1), (void *)v48, *((unint64_t *)&v48 + 1));
      }

      else
      {
        __int128 v28 = v48;
        *(void *)(*((void *)&v46 + 1) + 16LL) = v49;
        __int128 *v27 = v28;
      }

      uint64_t v29 = (uint64_t)v27 + 24;
    }

    *((void *)&v46 + 1) = v29;
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)v48);
    }
  }

  sqlite3_reset(v26);
  *(_OWORD *)a3 = v46;
  *(void *)(a3 + 16) = v47;
  unint64_t v47 = 0LL;
  __int128 v46 = 0uLL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v44);
  }
  *(void *)&__int128 v48 = &v46;
  sub_1000129D4((void ***)&v48);
}

void sub_100131F00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,std::bad_cast a62)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  a62.__vftable = (std::bad_cast_vtbl *)&a58;
  sub_1000129D4((void ***)&a62);
  _Unwind_Resume(a1);
}

void sub_100132260(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v46 = 0uLL;
  unint64_t v47 = 0LL;
  if (*(_BYTE *)(a1 + 8))
  {
    v39.__r_.__value_.__s.__size_ = 16;
    strcpy((char *)&v39, "SELECT DISTINCT ");
    unint64_t v6 = std::string::append(&v39, "LoiId");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v8 = std::string::append(&v40, " FROM ");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v10 = std::string::append(&v41, "MiLoCustomLoiTable");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v12 = std::string::append(&v42, " ORDER BY ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v14 = std::string::append(&v43, "LastSeenTimeStamp");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v16 = std::string::append(&v48, " DESC LIMIT ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v38, a2);
    if ((v38.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v18 = &v38;
    }
    else {
      __int128 v18 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v38.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v38.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v38.__r_.__value_.__l.__size_;
    }
    __int128 v20 = std::string::append(&v49, (const std::string::value_type *)v18, size);
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t cap = v20->__r_.__value_.__l.__cap_;
    __int128 __p = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    sub_1003C0D54(*(void *)a1, p_p, &v49);
    std::string::size_type v23 = v49.__r_.__value_.__r.__words[0];
    __int128 v24 = (sqlite3_stmt *)sub_100019240((uint64_t)v49.__r_.__value_.__l.__data_);
    while (j__sqlite3_step(v24) == 100)
    {
      sub_100011CB8(v24, 0, &v49);
      sub_10010147C((uint64_t)&v49, (uint64_t)&v48);
      if (!v48.__r_.__value_.__s.__data_[16]) {
        sub_100036CD8();
      }
      uint64_t v25 = *((void *)&v46 + 1);
      if (*((void *)&v46 + 1) >= (unint64_t)v47)
      {
        uint64_t v27 = (uint64_t)(*((void *)&v46 + 1) - v46) >> 4;
        unint64_t v28 = v27 + 1;
        uint64_t v29 = (uint64_t)&v47[-v46];
        else {
          unint64_t v30 = v28;
        }
        if (v30) {
          uint64_t v31 = (char *)sub_100037038((uint64_t)&v47, v30);
        }
        else {
          uint64_t v31 = 0LL;
        }
        char v32 = &v31[16 * v27];
        *(_OWORD *)char v32 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        unsigned __int8 v33 = (char *)*((void *)&v46 + 1);
        char v34 = (char *)v46;
        uint64_t v35 = v32;
        if (*((void *)&v46 + 1) != (void)v46)
        {
          do
          {
            *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
            v35 -= 16;
            v33 -= 16;
          }

          while (v33 != v34);
          unsigned __int8 v33 = (char *)v46;
        }

        uint64_t v26 = v32 + 16;
        *(void *)&__int128 v46 = v35;
        *((void *)&v46 + 1) = v32 + 16;
        unint64_t v47 = &v31[16 * v30];
        if (v33) {
          operator delete(v33);
        }
      }

      else
      {
        **((_OWORD **)&v46 + 1) = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        uint64_t v26 = (_OWORD *)(v25 + 16);
      }

      *((void *)&v46 + 1) = v26;
    }

    sqlite3_reset(v24);
    *(_OWORD *)a3 = v46;
    *(void *)(a3 + 16) = v47;
    unint64_t v47 = 0LL;
    __int128 v46 = 0uLL;
    if (v23) {
      (*(void (**)(std::string::size_type))(*(void *)v23 + 8LL))(v23);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)__p);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820608);
    }
    char v36 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v49.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select distinct Custom Loi Ids",  (uint8_t *)&v49,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v49, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820608);
      }
      LOWORD(__p) = 0;
      std::string v37 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v49,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select distinct Custom Loi Ids",  &__p,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<boost::uuids::uuid> CLMiLoCustomLoiTable::getAllCustomLoiIds(uint32_t)",  "%s\n",  (const char *)v37);
      if (v37 != &v49) {
        free(v37);
      }
    }

    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
  }

  if ((void)v46)
  {
    *((void *)&v46 + 1) = v46;
    operator delete((void *)v46);
  }

void sub_1001327A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

#error "100132A4C: call analysis failed (funcsize=98)"
void sub_100132A7C()
{
  __cxa_end_catch();
  JUMPOUT(0x10013288CLL);
}

void sub_100132A90(void *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  JUMPOUT(0x1001328C0LL);
}

void sub_100132AA0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    __int128 v55 = 0uLL;
    v56[0] = 0LL;
    v47.__r_.__value_.__s.__size_ = 16;
    strcpy((char *)&v47, "SELECT DISTINCT ");
    __int128 v8 = std::string::append(&v47, "LoiId");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v10 = std::string::append(&v48, "\tFROM ");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v12 = std::string::append(&v49, "MiLoCustomLoiTable");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v14 = std::string::append(&v50, " \tWHERE ");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v16 = std::string::append(&v51, "ServiceId");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v18 = std::string::append(&v52, " IN (SELECT ServiceUUID FROM MiLoServices WHERE UserId==");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    int v20 = *(char *)(a2 + 23);
    if (v20 >= 0) {
      __int128 v21 = (const std::string::value_type *)a2;
    }
    else {
      __int128 v21 = *(const std::string::value_type **)a2;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(a2 + 8);
    }
    std::string::size_type v23 = std::string::append(&v60, v21, v22);
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v25 = std::string::append(&v57, ") LIMIT ");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v46, a3);
    if ((v46.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v27 = &v46;
    }
    else {
      uint64_t v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if ((v46.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v46.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v46.__r_.__value_.__l.__size_;
    }
    uint64_t v29 = std::string::append(&__str, (const std::string::value_type *)v27, size);
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    int64_t cap = v29->__r_.__value_.__l.__cap_;
    __int128 __p = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    sub_1003C0D54(*(void *)a1, p_p, &__str);
    std::string::size_type v32 = __str.__r_.__value_.__r.__words[0];
    unsigned __int8 v33 = (sqlite3_stmt *)sub_100019240((uint64_t)__str.__r_.__value_.__l.__data_);
    while (j__sqlite3_step(v33) == 100)
    {
      sub_100011CB8(v33, 0, &__str);
      memset(&v60, 0, sizeof(v60));
      std::string::operator=(&v60, &__str);
      char v34 = (_OWORD *)*((void *)&v55 + 1);
      if (*((void *)&v55 + 1) >= v56[0])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v55 + 1) - v55) >> 3);
        unint64_t v37 = v36 + 1;
        if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        else {
          unint64_t v38 = v37;
        }
        __int128 v59 = v56;
        if (v38) {
          std::string v39 = (char *)sub_10000701C((uint64_t)v56, v38);
        }
        else {
          std::string v39 = 0LL;
        }
        std::string::size_type v40 = (std::string::size_type)&v39[24 * v36];
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
        v57.__r_.__value_.__l.__size_ = v40;
        std::string v58 = &v39[24 * v38];
        __int128 v41 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
        *(void *)(v40 + 16) = v60.__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string::size_type v40 = v41;
        memset(&v60, 0, sizeof(v60));
        v57.__r_.__value_.__l.__cap_ = v40 + 24;
        sub_100013F10((uint64_t *)&v55, &v57);
        uint64_t v42 = *((void *)&v55 + 1);
        sub_100014098((uint64_t)&v57);
        *((void *)&v55 + 1) = v42;
      }

      else
      {
        __int128 v35 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
        *(void *)(*((void *)&v55 + 1) + 16LL) = v60.__r_.__value_.__l.__cap_;
        *char v34 = v35;
        *((void *)&v55 + 1) = (char *)v34 + 24;
      }
    }

    sqlite3_reset(v33);
    *(_OWORD *)a4 = v55;
    *(void *)(a4 + 16) = v56[0];
    v56[0] = 0LL;
    __int128 v55 = 0uLL;
    if (v32) {
      (*(void (**)(std::string::size_type))(*(void *)v32 + 8LL))(v32);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
    sub_1000129D4((void ***)&__str);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820608);
    }
    std::string v43 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select GroupIDs for current user",  (uint8_t *)&__str,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__str, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820608);
      }
      LOWORD(v57.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__str,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select GroupIDs for current user",  &v57,  2);
      std::string::size_type v45 = (std::string *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<std::string> CLMiLoCustomLoiTable::selectLoiIdsForCurrentUser(const std::string &, uint32_t)",  "%s\n",  v44);
      if (v45 != &__str) {
        free(v45);
      }
    }

    *(void *)a4 = 0LL;
    *(void *)(a4 + 8) = 0LL;
    *(void *)(a4 + 16) = 0LL;
  }

void sub_100133090(_Unwind_Exception *a1)
{
}

void sub_1001333DC(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

double sub_100133408@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_10013344C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100133468(std::string *a1)
{
  return sub_100046740(a1);
}

uint64_t sub_10013349C(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  BOOL v2 = std::string::append(&v7, "ServiceId");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100133544( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_100133578@<D0>(std::string *a1@<X8>)
{
  uint64_t v2 = 4LL;
  do
  {
    if (v2 == 4)
    {
      v8.__r_.__value_.__s.__size_ = 0;
      v8.__r_.__value_.__s.__data_[0] = 0;
    }

    else
    {
      v8.__r_.__value_.__s.__size_ = 2;
      strcpy((char *)&v8, ", ");
    }

    __int128 v3 = std::string::append(&v8, "?");
    __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t cap = v3->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 __p = v4;
    v3->__r_.__value_.__l.__size_ = 0LL;
    v3->__r_.__value_.__l.__cap_ = 0LL;
    v3->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string::size_type v5 = __p;
    }
    else {
      std::string::size_type v5 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v6 = HIBYTE(cap);
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(&v11, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    --v2;
  }

  while (v2);
  std::string::append(&v11, ")");
  double result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_100133680( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001336CC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10013370C((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_10013370C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48LL)
  {
  }

  a1[1] = v2;
}

uint64_t sub_100133758(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001337CC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1001337CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(a3 - 48) = 0LL;
      __int128 v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48LL;
      v7 -= 48LL;
      a3 -= 48LL;
    }

    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }

  char v14 = 1;
  sub_100133878((uint64_t)v13);
  return a6;
}

uint64_t sub_100133878(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1001338AC(a1);
  }
  return a1;
}

void sub_1001338AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 48LL;
  }

uint64_t sub_1001338F0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100133924(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 6;
      *(void *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

uint64_t sub_100133978()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MiLoCustomLoiTable");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_1001301BC((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    __int128 v4 = v17;
  }
  else {
    __int128 v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_100130284((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    __int128 v10 = __p;
  }
  else {
    __int128 v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  unint64_t v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_101993A98 = v12->__r_.__value_.__l.__cap_;
  xmmword_101993A88 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_101993A88,  (void *)&_mh_execute_header);
}

void sub_100133B64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100133C10(uint64_t *a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820760);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    else {
      __int128 v3 = (uint64_t *)*a1;
    }
    *(_DWORD *)__int128 buf = 136315138;
    std::string::size_type v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Microlocation error report: %s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820760);
    }
    else {
      std::string::size_type v5 = (uint64_t *)*a1;
    }
    int v8 = 136315138;
    __int128 v9 = v5;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Microlocation error report: %s",  (const char *)&v8);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMicroLocationErrorHandling::reportError(const std::string &)",  "%s\n",  v6);
  }

  uint64_t result = sub_100133E20();
  if ((_DWORD)result)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100133EF8;
    v7[3] = &unk_101820718;
    v7[4] = a1;
    return AnalyticsSendEventLazy(@"com.apple.MicroLocation.ErrorCases", v7);
  }

  return result;
}

uint64_t sub_100133E20()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAnalyticsSendEventEnabled", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  __int128 v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100133EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

NSDictionary *sub_100133EF8(uint64_t a1)
{
  __int128 v3 = @"errorType";
  int v1 = *(uint64_t **)(a1 + 32);
  __int128 v4 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v4,  &v3,  1LL);
}

uint64_t sub_100133F84(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820760);
  }
  BOOL v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Microlocation error report: %@", buf, 0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820760);
    }
    int v6 = 138412290;
    uint64_t v7 = a1;
    __int128 v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Microlocation error report: %@",  &v6,  12);
    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMicroLocationErrorHandling::reportError(NSString *)", "%s\n", v4);
  }

  uint64_t result = sub_100133E20();
  if ((_DWORD)result)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_100134174;
    void v5[3] = &unk_101820740;
    v5[4] = a1;
    return AnalyticsSendEventLazy(@"com.apple.MicroLocation.ErrorCases", v5);
  }

  return result;
}

NSDictionary *sub_100134174(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int128 v3 = @"errorType";
  uint64_t v4 = v1;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v4,  &v3,  1LL);
}

void sub_1001341E0(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10013420C(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934FB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934FB0))
  {
    sub_100136F48((std::string *)&xmmword_101934F98);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934F98, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934FB0);
  }

  if (byte_101934FAF < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934F98, *((unint64_t *)&xmmword_101934F98 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934F98;
    *(void *)(a1 + 16) = unk_101934FA8;
  }

void sub_1001342BC(_Unwind_Exception *a1)
{
}

void sub_1001342D4(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934FD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934FD0))
  {
    sub_100012F3C((std::string *)&xmmword_101934FB8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934FB8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934FD0);
  }

  if (byte_101934FCF < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934FB8, *((unint64_t *)&xmmword_101934FB8 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934FB8;
    *(void *)(a1 + 16) = unk_101934FC8;
  }

void sub_100134384(_Unwind_Exception *a1)
{
}

uint64_t sub_10013439C(uint64_t a1, _OWORD *a2, int a3, uint64_t a4, double a5)
{
  *(_OWORD *)a1 = *a2;
  *(double *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 24) = a3;
  sub_10008146C(a1 + 32, a4);
  return a1;
}

void sub_1001343D8(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + 8) = v2;
  if (v2)
  {
    sub_100134810(a1);
    sub_1003B59A0(*a1, "MicroLocationLoggedEvents", (const char **)&off_1018207A0, 0LL, 0);
    char v3 = sub_1003B747C(*a1, "MicroLocationLoggedEvents");
    *((_BYTE *)a1 + 8) = v3;
    if ((v3 & 1) != 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820780);
      }
      uint64_t v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136380675;
        std::string::size_type v11 = "MicroLocationLoggedEvents";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %{private}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820780);
        }
        LODWORD(v9) = 136380675;
        *(void *)((char *)&v9 + 4) = "MicroLocationLoggedEvents";
        uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %{private}s",  &v9,  12,  v9);
LABEL_19:
        uint64_t v7 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationLoggedEventsTable::initTable()", "%s\n");
LABEL_29:
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820780);
      }
      uint64_t v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136446210;
        std::string::size_type v11 = "MicroLocationLoggedEvents";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create table: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820780);
        }
        LODWORD(v9) = 136446210;
        *(void *)((char *)&v9 + 4) = "MicroLocationLoggedEvents";
        uint64_t v7 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMicroLocationLoggedEventsTable::initTable()", "%s\n");
        goto LABEL_29;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820780);
    }
    int v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Database is not connected so we can't intialize our table",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820780);
      }
      LOWORD(v9) = 0;
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Database is not connected so we can't intialize our table",  &v9,  2,  v9);
      goto LABEL_19;
    }
  }

uint64_t sub_1001347E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_1001343D8((uint64_t *)a1);
  return a1;
}

uint64_t sub_100134810(uint64_t *a1)
{
  uint64_t result = sub_1003B747C(*a1, "MicroLocationLoggedEvents");
  if ((_DWORD)result) {
    return sub_10000C98C(*a1, (uint64_t)&off_1018207A0, 5LL, "MicroLocationLoggedEvents");
  }
  return result;
}

uint64_t sub_100134864(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_101993AB7 >= 0) {
      uint64_t v5 = (char *)&xmmword_101993AA0;
    }
    else {
      uint64_t v5 = (char *)xmmword_101993AA0;
    }
    sub_1003C0D54(v4, v5, &v35);
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      while (1)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v35);
        memset(&v34, 0, sizeof(v34));
        if ((sub_100013090(v7, &v34) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&buf);
          *(void *)&__int128 buf = &off_101818CB0;
          sub_1000139B0((uint64_t)&buf);
        }

        double v9 = *(double *)(v7 + 16);
        __int128 __p = 0LL;
        uint64_t v32 = 0LL;
        uint64_t v10 = v7 + 32;
        uint64_t v33 = 0LL;
        wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v10, &__p);
        sqlite3_int64 v11 = *(unsigned int *)(v10 - 8);
        unint64_t v12 = v33 >= 0 ? &__p : (void **)__p;
        uint64_t v13 = v33 >= 0 ? HIBYTE(v33) : v32;
        char v14 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v12, v13);
        __int128 v15 = (v34.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v34 : (std::string *)v34.__r_.__value_.__r.__words[0];
        if (!sub_1003BC1F0(v8, 1, (char *)v15)
          || !sub_1003B7480(v8, 2, v9)
          || !sub_1003C2D24(v8, 3, v11)
          || !sub_1003C2F58(v8, 4, v14))
        {
          break;
        }

        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101820780);
          }
          std::string v20 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_101993AB7 >= 0) {
              std::string v21 = &xmmword_101993AA0;
            }
            else {
              std::string v21 = (__int128 *)xmmword_101993AA0;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{public}s",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101820780);
            }
            if (byte_101993AB7 >= 0) {
              std::string v22 = &xmmword_101993AA0;
            }
            else {
              std::string v22 = (__int128 *)xmmword_101993AA0;
            }
            int v36 = 136446210;
            unint64_t v37 = v22;
            LODWORD(v30) = 12;
            std::string v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{public}s",  &v36,  v30);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationLoggedEventsTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v23);
          }

void sub_100134EB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, std::bad_cast a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8LL))(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_100134F30( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  v53.__r_.__value_.__s.__size_ = 15;
  strcpy((char *)&v53, "SELECT * FROM (");
  char v52 = 7;
  strcpy(__s, "SELECT ");
  uint64_t v10 = std::string::append(&v53, __s, 7uLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  sub_10013420C((uint64_t)__p);
  if ((v50 & 0x80u) == 0) {
    unint64_t v12 = __p;
  }
  else {
    unint64_t v12 = (void **)__p[0];
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v13 = v50;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  char v14 = std::string::append(&v54, (const std::string::value_type *)v12, v13);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v16 = std::string::append(&v55, " FROM ");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  int v18 = *(char *)(a2 + 23);
  if (v18 >= 0) {
    char v19 = (const std::string::value_type *)a2;
  }
  else {
    char v19 = *(const std::string::value_type **)a2;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 8);
  }
  std::string v21 = std::string::append(&v56, v19, v20);
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  std::string v23 = std::string::append(&v57, " ORDER BY ");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v25 = std::string::append(&v58, "ReceivedTimestamp");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v27 = std::string::append(&v59, " DESC LIMIT ");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v48, a3);
  if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v29 = &v48;
  }
  else {
    uint64_t v29 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v48.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v48.__r_.__value_.__l.__size_;
  }
  uint64_t v31 = std::string::append(&v64, (const std::string::value_type *)v29, size);
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v33 = std::string::append(&v60, ") ORDER BY ");
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  int v35 = *(char *)(a4 + 23);
  if (v35 >= 0) {
    int v36 = (const std::string::value_type *)a4;
  }
  else {
    int v36 = *(const std::string::value_type **)a4;
  }
  if (v35 >= 0) {
    std::string::size_type v37 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v37 = *(void *)(a4 + 8);
  }
  unint64_t v38 = std::string::append(&v63, v36, v37);
  __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  int64_t cap = v38->__r_.__value_.__l.__cap_;
  *(_OWORD *)uint64_t v61 = v39;
  v38->__r_.__value_.__l.__size_ = 0LL;
  v38->__r_.__value_.__l.__cap_ = 0LL;
  v38->__r_.__value_.__r.__words[0] = 0LL;
  if (v52 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    uint64_t v40 = (char *)v61;
  }
  else {
    uint64_t v40 = (char *)v61[0];
  }
  sub_1003C0D54(a1, v40, &v63);
  std::string::size_type v41 = v63.__r_.__value_.__r.__words[0];
  uint64_t v42 = (sqlite3_stmt *)sub_100019240((uint64_t)v63.__r_.__value_.__l.__data_);
  memset(&v60, 0, sizeof(v60));
  while (j__sqlite3_step(v42) == 100)
  {
    v64.__r_.__value_.__r.__words[0] = sub_100011C2C(v42, 0);
    v64.__r_.__value_.__l.__size_ = v43;
    v59.__r_.__value_.__r.__words[0] = sqlite3_column_double(v42, 1);
    LODWORD(v58.__r_.__value_.__l.__data_) = sqlite3_column_int64(v42, 2);
    sub_100136CF0(v42, 3, (uint64_t)&v63);
    std::string::size_type v44 = v60.__r_.__value_.__l.__size_;
    if (v60.__r_.__value_.__l.__size_ >= v60.__r_.__value_.__l.__cap_)
    {
      std::string::size_type v47 = sub_100136E00((uint64_t *)&v60, &v64, (uint64_t *)&v59, (int *)&v58, (uint64_t)&v63);
    }

    else
    {
      std::string::size_type v45 = v59.__r_.__value_.__r.__words[0];
      int data = (int)v58.__r_.__value_.__l.__data_;
      *(_OWORD *)v60.__r_.__value_.__l.__size_ = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
      *(void *)(v44 + 16) = v45;
      *(_DWORD *)(v44 + 24) = data;
      sub_10008146C(v44 + 32, &v63);
      std::string::size_type v47 = v44 + 336;
    }

    v60.__r_.__value_.__l.__size_ = v47;
    sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v63);
  }

  sqlite3_reset(v42);
  *a5 = v60;
  memset(&v60, 0, sizeof(v60));
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  sub_100043754((void ***)&v63);
  if (v41) {
    (*(void (**)(std::string::size_type))(*(void *)v41 + 8LL))(v41);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v61[0]);
  }
}

void sub_1001353E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void **buf)
{
  __int128 buf = &a47;
  sub_100043754(&buf);
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100135764( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, unsigned int a5@<W4>, std::string *a6@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    unint64_t v73 = 0LL;
    uint64_t v74 = 0LL;
    unint64_t v75 = 0LL;
    if (*(_BYTE *)(a2 + 24))
    {
      sub_1010DDBC0(&v78, "ReceivedTimestamp");
      __s.__r_.__value_.__s.__size_ = 3;
      strcpy((char *)&__s, " > ");
      unint64_t v12 = std::string::append(&v78, (const std::string::value_type *)&__s, 3uLL);
      __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0LL;
      v12->__r_.__value_.__l.__cap_ = 0LL;
      v12->__r_.__value_.__r.__words[0] = 0LL;
      if (!*(_BYTE *)(a2 + 24)) {
        sub_100036CD8();
      }
      int v14 = *(char *)(a2 + 23);
      if (v14 >= 0) {
        __int128 v15 = (const std::string::value_type *)a2;
      }
      else {
        __int128 v15 = *(const std::string::value_type **)a2;
      }
      if (v14 >= 0) {
        std::string::size_type v16 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v16 = *(void *)(a2 + 8);
      }
      __int128 v17 = std::string::append(&v72, v15, v16);
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
      v76.__r_.__value_.__r.__words[0] = v17->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 size = v17->__r_.__value_.__s.__size_;
      v17->__r_.__value_.__l.__size_ = 0LL;
      v17->__r_.__value_.__l.__cap_ = 0LL;
      v17->__r_.__value_.__r.__words[0] = 0LL;
      std::string::size_type v20 = v74;
      if ((unint64_t)v74 >= v75)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (v74 - v73);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        else {
          unint64_t v25 = v24;
        }
        __int128 v81 = &v75;
        if (v25) {
          __int128 v26 = (char *)sub_10000701C((uint64_t)&v75, v25);
        }
        else {
          __int128 v26 = 0LL;
        }
        std::string::size_type v27 = (std::string::size_type)&v26[24 * v23];
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        buf.__r_.__value_.__l.__size_ = v27;
        int v80 = &v26[24 * v25];
        *(void *)std::string::size_type v27 = v18;
        *(void *)(v27 + 8) = v76.__r_.__value_.__r.__words[0];
        *(void *)(v27 + 15) = *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v27 + 23) = size;
        v76.__r_.__value_.__r.__words[0] = 0LL;
        *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7) = 0LL;
        buf.__r_.__value_.__l.__cap_ = v27 + 24;
        sub_100013F10((uint64_t *)&v73, &buf);
        std::string v21 = v74;
        sub_100014098((uint64_t)&buf);
      }

      else
      {
        *uint64_t v74 = v18;
        v20[1] = v76.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v20 + 15) = *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words
                                                                                  + 7);
        *((_BYTE *)v20 + 23) = size;
        std::string v21 = v20 + 3;
      }

      uint64_t v74 = v21;
    }

    if (*(_BYTE *)(a3 + 24))
    {
      sub_1010DDBC0(&v78, "ReceivedTimestamp");
      __s.__r_.__value_.__s.__size_ = 3;
      strcpy((char *)&__s, "<= ");
      __int128 v28 = std::string::append(&v78, (const std::string::value_type *)&__s, 3uLL);
      __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0LL;
      v28->__r_.__value_.__l.__cap_ = 0LL;
      v28->__r_.__value_.__r.__words[0] = 0LL;
      if (!*(_BYTE *)(a3 + 24)) {
        sub_100036CD8();
      }
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v31 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v31 = *(const std::string::value_type **)a3;
      }
      if (v30 >= 0) {
        std::string::size_type v32 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v32 = *(void *)(a3 + 8);
      }
      uint64_t v33 = std::string::append(&v72, v31, v32);
      std::string::size_type v34 = v33->__r_.__value_.__r.__words[0];
      v76.__r_.__value_.__r.__words[0] = v33->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v35 = v33->__r_.__value_.__s.__size_;
      v33->__r_.__value_.__l.__size_ = 0LL;
      v33->__r_.__value_.__l.__cap_ = 0LL;
      v33->__r_.__value_.__r.__words[0] = 0LL;
      int v36 = v74;
      if ((unint64_t)v74 >= v75)
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v74 - v73);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        else {
          unint64_t v40 = v39;
        }
        __int128 v81 = &v75;
        if (v40) {
          std::string::size_type v41 = (char *)sub_10000701C((uint64_t)&v75, v40);
        }
        else {
          std::string::size_type v41 = 0LL;
        }
        std::string::size_type v42 = (std::string::size_type)&v41[24 * v38];
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
        buf.__r_.__value_.__l.__size_ = v42;
        int v80 = &v41[24 * v40];
        *(void *)std::string::size_type v42 = v34;
        *(void *)(v42 + 8) = v76.__r_.__value_.__r.__words[0];
        *(void *)(v42 + 15) = *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v42 + 23) = v35;
        v76.__r_.__value_.__r.__words[0] = 0LL;
        *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7) = 0LL;
        buf.__r_.__value_.__l.__cap_ = v42 + 24;
        sub_100013F10((uint64_t *)&v73, &buf);
        std::string::size_type v37 = v74;
        sub_100014098((uint64_t)&buf);
      }

      else
      {
        *uint64_t v74 = v34;
        v36[1] = v76.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v36 + 15) = *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words
                                                                                  + 7);
        *((_BYTE *)v36 + 23) = v35;
        std::string::size_type v37 = v36 + 3;
      }

      uint64_t v74 = v37;
    }

    std::string::size_type v44 = *a4;
    std::string::size_type v43 = a4[1];
    if (v44 != v43)
    {
      memset(&v72, 0, sizeof(v72));
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
      do
      {
        std::to_string(&buf, *v44);
        sub_1000936E8((uint64_t **)&__s, (__int128 *)&buf);
        ++v44;
      }

      while (v44 != v43);
      sub_1010DDBC0(&v76, "EventType");
      char v70 = 5;
      strcpy(v69, " IN (");
      std::string::size_type v45 = std::string::append(&v76, v69, 5uLL);
      __int128 v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__l.__cap_ = v45->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0LL;
      v45->__r_.__value_.__l.__cap_ = 0LL;
      v45->__r_.__value_.__r.__words[0] = 0LL;
      sub_1000910EC(",", (uint64_t *)&v72, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v48 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v48 = __p.__r_.__value_.__l.__size_;
      }
      std::string v49 = std::string::append(&__s, (const std::string::value_type *)p_p, v48);
      __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__l.__cap_ = v49->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0LL;
      v49->__r_.__value_.__l.__cap_ = 0LL;
      v49->__r_.__value_.__r.__words[0] = 0LL;
      std::string v51 = std::string::append(&v78, ")");
      std::string::size_type v52 = v51->__r_.__value_.__r.__words[0];
      v77[0] = v51->__r_.__value_.__l.__size_;
      *(void *)((char *)v77 + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v53 = v51->__r_.__value_.__s.__size_;
      v51->__r_.__value_.__l.__size_ = 0LL;
      v51->__r_.__value_.__l.__cap_ = 0LL;
      v51->__r_.__value_.__r.__words[0] = 0LL;
      std::string v54 = v74;
      if ((unint64_t)v74 >= v75)
      {
        unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (v74 - v73);
        unint64_t v58 = v57 + 1;
        if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        else {
          unint64_t v59 = v58;
        }
        __int128 v81 = &v75;
        if (v59) {
          std::string v60 = (char *)sub_10000701C((uint64_t)&v75, v59);
        }
        else {
          std::string v60 = 0LL;
        }
        std::string::size_type v61 = (std::string::size_type)&v60[24 * v57];
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        buf.__r_.__value_.__l.__size_ = v61;
        int v80 = &v60[24 * v59];
        uint64_t v62 = v77[0];
        *(void *)std::string::size_type v61 = v52;
        *(void *)(v61 + 8) = v62;
        *(void *)(v61 + 15) = *(void *)((char *)v77 + 7);
        *(_BYTE *)(v61 + 23) = v53;
        v77[0] = 0LL;
        *(void *)((char *)v77 + 7) = 0LL;
        buf.__r_.__value_.__l.__cap_ = v61 + 24;
        sub_100013F10((uint64_t *)&v73, &buf);
        std::string v56 = v74;
        sub_100014098((uint64_t)&buf);
      }

      else
      {
        std::string::size_type v55 = v77[0];
        *uint64_t v74 = v52;
        v54[1] = v55;
        *(std::string::size_type *)((char *)v54 + 15) = *(void *)((char *)v77 + 7);
        *((_BYTE *)v54 + 23) = v53;
        std::string v56 = v54 + 3;
      }

      uint64_t v74 = v56;
      if (v70 < 0) {
        operator delete(*(void **)v69);
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
      sub_1000129D4((void ***)&buf);
    }

    sub_1010DDBC0(&buf, "");
    if (v73 != v74)
    {
      sub_1000910EC(" AND ", (uint64_t *)&v73, &v72);
      std::string v63 = std::string::insert(&v72, 0LL, " WHERE ");
      std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
      v78.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v65 = v63->__r_.__value_.__s.__size_;
      v63->__r_.__value_.__l.__size_ = 0LL;
      v63->__r_.__value_.__l.__cap_ = 0LL;
      v63->__r_.__value_.__r.__words[0] = 0LL;
      buf.__r_.__value_.__r.__words[0] = v64;
      buf.__r_.__value_.__l.__size_ = v78.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 7);
      buf.__r_.__value_.__s.__size_ = v65;
    }

    uint64_t v66 = *(void *)a1;
    std::operator+<char>(&v72, "MicroLocationLoggedEvents", &buf);
    sub_1010DDBC0(&v78, "ReceivedTimestamp");
    sub_100134F30(v66, (uint64_t)&v72, a5, (uint64_t)&v78, a6);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    sub_1000129D4((void ***)&buf);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820780);
    }
    __int128 v22 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820780);
      }
      LOWORD(v73) = 0;
      int v67 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select",  &v73,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationLoggedEventsTable::Entry> CLMicroLocationLoggedEventsTable::selectByFields(const std: :optional<std::string> &, const std::optional<std::string> &, const std::vector<CLMicroLocationProto::EventType> &, uint32_t)",  "%s\n",  (const char *)v67);
      if (v67 != &buf) {
        free(v67);
      }
    }

    a6->__r_.__value_.__r.__words[0] = 0LL;
    a6->__r_.__value_.__l.__size_ = 0LL;
    a6->__r_.__value_.__l.__cap_ = 0LL;
  }

void sub_100136064( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, char *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, char **__p, uint64_t a49, int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  std::string __p = &a30;
  sub_1000129D4((void ***)&__p);
  a30 = &a37;
  sub_1000129D4((void ***)&a30);
  _Unwind_Resume(a1);
}

void sub_100136220( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, unsigned int a5@<W4>, std::string *a6@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    uint64_t v15 = *(void *)(a2 + 16);
  }

  char v16 = 1;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v12 = *(void *)(a3 + 16);
  }

  char v13 = 1;
  sub_100135764(a1, (uint64_t)__dst, (uint64_t)__p, a4, a5, a6);
  if (v13 && SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (v16)
  {
    if (SHIBYTE(v15) < 0) {
      operator delete(__dst[0]);
    }
  }

void sub_100136314( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (a22)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_100136358(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  LOBYTE(v13[0]) = 0;
  char v15 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }

  char v12 = 1;
  sub_100135764(a1, (uint64_t)v13, (uint64_t)__p, a3, 1u, &v16);
  if (v12 && SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (v15 && v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::size_type v7 = v16.__r_.__value_.__r.__words[0];
  if (v16.__r_.__value_.__r.__words[0] == v16.__r_.__value_.__l.__size_)
  {
    char v9 = 0;
    *(_BYTE *)a4 = 0;
  }

  else
  {
    __int128 v8 = *(_OWORD *)v16.__r_.__value_.__l.__data_;
    *(_OWORD *)(a4 + 12) = *(_OWORD *)(v16.__r_.__value_.__r.__words[0] + 12);
    *(_OWORD *)a4 = v8;
    sub_10008146C(a4 + 32, v7 + 32);
    char v9 = 1;
  }

  *(_BYTE *)(a4 + 336) = v9;
  v13[0] = &v16;
  sub_100043754((void ***)v13);
}

void sub_100136460( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23)
{
  if (a23)
  {
    if (a22 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_1001364BC(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v42.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v42, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v42, "MicroLocationLoggedEvents");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v6 = std::string::append(&v43, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v8 = std::string::append(&v44, "ReceivedTimestamp");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v10 = std::string::append(&v45, " IN (");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    char v12 = std::string::append(&v46, "SELECT ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    char v14 = std::string::append(&v47, "ReceivedTimestamp");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    std::string v16 = std::string::append(&v48, " FROM ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v18 = std::string::append(&v49, "MicroLocationLoggedEvents");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v20 = std::string::append(&v50, " ORDER BY ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v22 = std::string::append(&v51, "ReceivedTimestamp");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v24 = std::string::append(&v52, " LIMIT ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v41, a2);
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v26 = &v41;
    }
    else {
      __int128 v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v41.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    __int128 v28 = std::string::append(&v53, (const std::string::value_type *)v26, size);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    int v30 = std::string::append(&v56, ")");
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t cap = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string::size_type v32 = (char *)__p;
    }
    else {
      std::string::size_type v32 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v32, &v56);
    std::string::size_type v33 = v56.__r_.__value_.__r.__words[0];
    std::string::size_type v34 = (sqlite3_stmt *)sub_100019240((uint64_t)v56.__r_.__value_.__l.__data_);
    if (v34)
    {
      BOOL v35 = sub_1003BB2BC(*(void *)a1, v34);
      if (!v33) {
        goto LABEL_42;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820780);
      }
      unint64_t v38 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v56,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v56, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820780);
        }
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        unint64_t v40 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v53,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationLoggedEventsTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v40);
        if (v40 != &v56) {
          free(v40);
        }
      }

      BOOL v35 = 0LL;
      if (!v33) {
        goto LABEL_42;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v33 + 8LL))(v33);
LABEL_42:
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    return v35;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820780);
  }
  int v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v56.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't deleteOldestRows",  (uint8_t *)&v56,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v56, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820780);
    }
    LOWORD(__p[0]) = 0;
    unint64_t v39 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't deleteOldestRows",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationLoggedEventsTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v39);
    if (v39 != &v56) {
      free(v39);
    }
  }

  return 0LL;
}

void sub_100136B34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100136CC4(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100136CF0@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sqlite3_column_blob(a1, a2);
  int v7 = sqlite3_column_bytes(a1, a2);
  if (!v6) {
    sub_10122DEC4();
  }
  int v8 = v7;
  sub_100063A08(a3);
  uint64_t result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v9, v6, v8);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1010DDBC0(&v12, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_101819400;
  }

  return result;
}

void sub_100136DB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_100081760(v15);
      _Unwind_Resume(a1);
    }
  }

  else if (!v17)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_100136E00(uint64_t *a1, _OWORD *a2, uint64_t *a3, int *a4, uint64_t a5)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0xC30C30C30C30C3LL) {
    sub_100007008();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  unint64_t v14 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v6) >> 4);
  if (2 * v14 > v8) {
    unint64_t v8 = 2 * v14;
  }
  if (v14 >= 0x61861861861861LL) {
    unint64_t v15 = 0xC30C30C30C30C3LL;
  }
  else {
    unint64_t v15 = v8;
  }
  __int128 v25 = a1 + 2;
  if (v15) {
    std::string v16 = (char *)sub_100043968(v13, v15);
  }
  else {
    std::string v16 = 0LL;
  }
  int v17 = &v16[336 * v7];
  v22[0] = v16;
  v22[1] = v17;
  __int128 v23 = v17;
  unint64_t v24 = &v16[336 * v15];
  uint64_t v18 = *a3;
  int v19 = *a4;
  *(_OWORD *)int v17 = *a2;
  *((void *)v17 + 2) = v18;
  *((_DWORD *)v17 + 6) = v19;
  sub_10008146C(v17 + 32, a5);
  v23 += 336;
  sub_1000438F4(a1, v22);
  uint64_t v20 = a1[1];
  sub_100043A5C((uint64_t)v22);
  return v20;
}

void sub_100136F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

double sub_100136F48@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100136F8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100136FA8(std::string *a1)
{
  return sub_100012E60(a1);
}

uint64_t sub_100136FE4(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  BOOL v2 = std::string::append(&v7, "EventUUID");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100137080( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001370B4(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  BOOL v2 = std::string::append(&v7, "EventType");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_10013715C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100137190(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  BOOL v2 = std::string::append(&v7, "Event");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100137238( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013726C()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MicroLocationLoggedEvents");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_10013420C((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_1001342D4((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_101993AB0 = v12->__r_.__value_.__l.__cap_;
  xmmword_101993AA0 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_101993AA0,  (void *)&_mh_execute_header);
}

void sub_100137458( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100137504@<X0>(uint64_t *a1@<X8>)
{
  __int128 v1 = a1;
  *a1 = sub_100137A80();
  *((_BYTE *)v1 + 8) = sub_100137B58();
  char v2 = sub_100137C2C();
  *((_OWORD *)v1 + 1) = 0u;
  v1 += 2;
  *((_BYTE *)v1 - 7) = v2;
  *((_OWORD *)v1 + 1) = 0u;
  uint64_t v52 = (uint64_t)v1;
  *((_DWORD *)v1 + 8) = 1065353216;
  char v3 = sub_100137D04();
  sub_1002F0B04(&v57);
  CFStringRef v4 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumWiFiDurationForFingerprintRecording",  0x8000100u,  kCFAllocatorNull);
  int v5 = sub_1002A832C((uint64_t)v57, (uint64_t)v4, &v56);
  CFRelease(v4);
  double v6 = v56;
  __int128 v7 = v58;
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (!v5) {
    double v6 = 0.0;
  }
  sub_1002F0B04(&v57);
  CFStringRef v10 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumWiFiNumberOfMeasurementsForFingerprintRecording",  0x8000100u,  kCFAllocatorNull);
  int v11 = sub_1002A77CC((uint64_t)v57, (uint64_t)v10, &v56);
  CFRelease(v10);
  uint64_t v12 = LODWORD(v56);
  __int128 v13 = v58;
  if (v58)
  {
    unint64_t v14 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (v11) {
    uint64_t v16 = v12;
  }
  else {
    uint64_t v16 = 1LL;
  }
  uint64_t v51 = v16;
  uint64_t v50 = sub_100137DDC();
  char v17 = sub_100137EB4();
  sub_1002F0B04(&v57);
  CFStringRef v18 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumBleDurationForFingerprintRecording",  0x8000100u,  kCFAllocatorNull);
  int v19 = sub_1002A832C((uint64_t)v57, (uint64_t)v18, &v56);
  CFRelease(v18);
  double v20 = v56;
  std::string v21 = v58;
  if (v58)
  {
    std::string v22 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  if (!v19) {
    double v20 = 0.0;
  }
  sub_1002F0B04(&v57);
  CFStringRef v24 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumBleNumberOfMeasurementsForFingerprintRecording",  0x8000100u,  kCFAllocatorNull);
  int v25 = sub_1002A77CC((uint64_t)v57, (uint64_t)v24, &v56);
  CFRelease(v24);
  uint64_t v26 = LODWORD(v56);
  std::string::size_type v27 = v58;
  if (v58)
  {
    __int128 v28 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  if (!v25) {
    uint64_t v26 = 0LL;
  }
  uint64_t v30 = sub_100137F8C();
  else {
    char v31 = 0;
  }
  sub_1002F0B04(&v57);
  CFStringRef v32 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumUwbRangeDurationForFingerprintRecording",  0x8000100u,  kCFAllocatorNull);
  int v33 = sub_1002A832C((uint64_t)v57, (uint64_t)v32, &v56);
  CFRelease(v32);
  double v34 = v56;
  BOOL v35 = v58;
  if (v58)
  {
    int v36 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  sub_1002F0B04(&v57);
  CFStringRef v38 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumUwbNumberOfMeasurementsForFingerprintRecording",  0x8000100u,  kCFAllocatorNull);
  int v39 = sub_1002A77CC((uint64_t)v57, (uint64_t)v38, &v56);
  CFRelease(v38);
  uint64_t v49 = LODWORD(v56);
  uint64_t v40 = v58;
  if (v58)
  {
    std::string v41 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  uint64_t v43 = sub_10013813C();
  LODWORD(v56) = 1;
  unint64_t v57 = &v56;
  std::string v44 = sub_10013B930(v52, (unsigned int *)&v56, (uint64_t)&unk_1012CF090, (_DWORD **)&v57);
  v44[24] = v3;
  *(_DWORD *)(v44 + 25) = *(_DWORD *)v55;
  *((_DWORD *)v44 + 7) = *(_DWORD *)&v55[3];
  *((double *)v44 + 4) = v6;
  *((void *)v44 + 5) = v51;
  *((void *)v44 + 6) = v50;
  LODWORD(v56) = 5;
  unint64_t v57 = &v56;
  std::string v45 = sub_10013B930(v52, (unsigned int *)&v56, (uint64_t)&unk_1012CF090, (_DWORD **)&v57);
  v45[24] = v17;
  *(_DWORD *)(v45 + 25) = *(_DWORD *)v54;
  *((_DWORD *)v45 + 7) = *(_DWORD *)&v54[3];
  *((double *)v45 + 4) = v20;
  *((void *)v45 + 5) = v26;
  *((void *)v45 + 6) = v30;
  LODWORD(v56) = 6;
  unint64_t v57 = &v56;
  double result = sub_10013B930(v52, (unsigned int *)&v56, (uint64_t)&unk_1012CF090, (_DWORD **)&v57);
  uint64_t v47 = v49;
  if (!v39) {
    uint64_t v47 = 0LL;
  }
  double v48 = 0.0;
  if (v33) {
    double v48 = v34;
  }
  result[24] = v31;
  *(_DWORD *)(result + 25) = *(_DWORD *)v53;
  *((_DWORD *)result + 7) = *(_DWORD *)&v53[3];
  *((double *)result + 4) = v48;
  *((void *)result + 5) = v47;
  *((void *)result + 6) = v43;
  return result;
}

void sub_100137A1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t sub_100137A80()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumTotalNumberOfMeasurementsForFingerprint",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  uint64_t v2 = v7;
  char v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 2LL;
  }
}

void sub_100137B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100137B58()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsProcessOffChannelRssiAP", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  char v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return v1;
  }
  else {
    return 0LL;
  }
}

void sub_100137C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100137C2C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsProcessInvalidRssiAP", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  char v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100137CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100137D04()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMeasurementProcessingWifiRssiEnable",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  char v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100137DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100137DDC()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMaximumNumberOfWifiRssiMeasurementsForFingerprint",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  uint64_t v2 = v7;
  char v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 100LL;
  }
}

void sub_100137E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100137EB4()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMeasurementProcessingBleLeechEnable",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  char v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100137F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100137F8C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMaximumNumberOfBleRssiMeasurementsForFingerprint",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  uint64_t v2 = v7;
  char v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 100LL;
  }
}

void sub_10013804C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100138064()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMeasurementProcessingUwbRangeEnable",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  char v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100138124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10013813C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMaximumNumberOfUwbRangeMeasurementsForFingerprint",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  uint64_t v2 = v7;
  char v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 100LL;
  }
}

void sub_1001381FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

char *sub_100138214@<X0>(uint64_t *a1@<X8>)
{
  int v1 = a1;
  *a1 = sub_100137A80();
  *((_BYTE *)v1 + 8) = sub_100137B58();
  char v2 = sub_100137C2C();
  *((_OWORD *)v1 + 1) = 0u;
  v1 += 2;
  *((_BYTE *)v1 - 7) = v2;
  *((_OWORD *)v1 + 1) = 0u;
  uint64_t v52 = (uint64_t)v1;
  *((_DWORD *)v1 + 8) = 1065353216;
  char v3 = sub_100137D04();
  sub_1002F0B04(&v57);
  CFStringRef v4 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumWiFiDurationForFingerprintLocalizing",  0x8000100u,  kCFAllocatorNull);
  int v5 = sub_1002A832C((uint64_t)v57, (uint64_t)v4, &v56);
  CFRelease(v4);
  double v6 = v56;
  unsigned int v7 = v58;
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (!v5) {
    double v6 = 0.0;
  }
  sub_1002F0B04(&v57);
  CFStringRef v10 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumWiFiNumberOfMeasurementsForFingerprintLocalizing",  0x8000100u,  kCFAllocatorNull);
  int v11 = sub_1002A77CC((uint64_t)v57, (uint64_t)v10, &v56);
  CFRelease(v10);
  uint64_t v12 = LODWORD(v56);
  __int128 v13 = v58;
  if (v58)
  {
    unint64_t v14 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (v11) {
    uint64_t v16 = v12;
  }
  else {
    uint64_t v16 = 1LL;
  }
  uint64_t v51 = v16;
  uint64_t v50 = sub_100137DDC();
  char v17 = sub_100137EB4();
  sub_1002F0B04(&v57);
  CFStringRef v18 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumBleDurationForFingerprintLocalizing",  0x8000100u,  kCFAllocatorNull);
  int v19 = sub_1002A832C((uint64_t)v57, (uint64_t)v18, &v56);
  CFRelease(v18);
  double v20 = v56;
  std::string v21 = v58;
  if (v58)
  {
    std::string v22 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  if (!v19) {
    double v20 = 0.0;
  }
  sub_1002F0B04(&v57);
  CFStringRef v24 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumBleNumberOfMeasurementsForFingerprintLocalizing",  0x8000100u,  kCFAllocatorNull);
  int v25 = sub_1002A77CC((uint64_t)v57, (uint64_t)v24, &v56);
  CFRelease(v24);
  uint64_t v26 = LODWORD(v56);
  std::string::size_type v27 = v58;
  if (v58)
  {
    __int128 v28 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  if (!v25) {
    uint64_t v26 = 0LL;
  }
  uint64_t v30 = sub_100137F8C();
  else {
    char v31 = 0;
  }
  sub_1002F0B04(&v57);
  CFStringRef v32 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumUwbRangeDurationForFingerprintLocalizing",  0x8000100u,  kCFAllocatorNull);
  int v33 = sub_1002A832C((uint64_t)v57, (uint64_t)v32, &v56);
  CFRelease(v32);
  double v34 = v56;
  BOOL v35 = v58;
  if (v58)
  {
    int v36 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  sub_1002F0B04(&v57);
  CFStringRef v38 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumUwbNumberOfMeasurementsForFingerprintLocalizing",  0x8000100u,  kCFAllocatorNull);
  int v39 = sub_1002A77CC((uint64_t)v57, (uint64_t)v38, &v56);
  CFRelease(v38);
  uint64_t v49 = LODWORD(v56);
  uint64_t v40 = v58;
  if (v58)
  {
    std::string v41 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  uint64_t v43 = sub_10013813C();
  LODWORD(v56) = 1;
  unint64_t v57 = &v56;
  std::string v44 = sub_10013B930(v52, (unsigned int *)&v56, (uint64_t)&unk_1012CF090, (_DWORD **)&v57);
  v44[24] = v3;
  *(_DWORD *)(v44 + 25) = *(_DWORD *)v55;
  *((_DWORD *)v44 + 7) = *(_DWORD *)&v55[3];
  *((double *)v44 + 4) = v6;
  *((void *)v44 + 5) = v51;
  *((void *)v44 + 6) = v50;
  LODWORD(v56) = 5;
  unint64_t v57 = &v56;
  std::string v45 = sub_10013B930(v52, (unsigned int *)&v56, (uint64_t)&unk_1012CF090, (_DWORD **)&v57);
  v45[24] = v17;
  *(_DWORD *)(v45 + 25) = *(_DWORD *)v54;
  *((_DWORD *)v45 + 7) = *(_DWORD *)&v54[3];
  *((double *)v45 + 4) = v20;
  *((void *)v45 + 5) = v26;
  *((void *)v45 + 6) = v30;
  LODWORD(v56) = 6;
  unint64_t v57 = &v56;
  double result = sub_10013B930(v52, (unsigned int *)&v56, (uint64_t)&unk_1012CF090, (_DWORD **)&v57);
  uint64_t v47 = v49;
  if (!v39) {
    uint64_t v47 = 0LL;
  }
  double v48 = 0.0;
  if (v33) {
    double v48 = v34;
  }
  result[24] = v31;
  *(_DWORD *)(result + 25) = *(_DWORD *)v53;
  *((_DWORD *)result + 7) = *(_DWORD *)&v53[3];
  *((double *)result + 4) = v48;
  *((void *)result + 5) = v47;
  *((void *)result + 6) = v43;
  return result;
}

void sub_10013872C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t sub_100138790(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  CFStringRef v4 = &v5;
  uint64_t v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2 == -1) {
    sub_10013B58C();
  }
  double v6 = &v4;
  ((void (*)(uint64_t ***, uint64_t))*(&off_1018208C0 + v2))(&v6, a2 + 16);
  return v5;
}

uint64_t sub_1001387EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a3 + 8)) {
    return sub_10011724C(a2 + 16, a3 + 16);
  }
  else {
    return 0LL;
  }
}

void *sub_100138810(uint64_t a1)
{
  std::string v21 = v20;
  int v19 = v18;
  v20[0] = &off_101820968;
  v16[0] = &off_101820A88;
  char v17 = v16;
  v18[0] = &off_1018209F8;
  sub_10013BD3C((uint64_t)v22, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  uint64_t v2 = v17;
  if (v17 == v16)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  CFStringRef v4 = v19;
  if (v19 == v18)
  {
    uint64_t v5 = 4LL;
    CFStringRef v4 = v18;
  }

  else
  {
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  double v6 = v21;
  if (v21 == v20)
  {
    uint64_t v7 = 4LL;
    double v6 = v20;
  }

  else
  {
    if (!v21) {
      goto LABEL_16;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  uint64_t v8 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v8 == -1) {
    sub_10013B58C();
  }
  unint64_t v15 = v22;
  ((void (*)(_BYTE **, uint64_t))*(&off_1018208D8 + v8))(&v15, a1 + 16);
  unint64_t v9 = v27;
  if (v27 == v26)
  {
    uint64_t v10 = 4LL;
    unint64_t v9 = v26;
  }

  else
  {
    if (!v27) {
      goto LABEL_22;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_22:
  int v11 = v25;
  if (v25 == v24)
  {
    uint64_t v12 = 4LL;
    int v11 = v24;
  }

  else
  {
    if (!v25) {
      goto LABEL_27;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_27:
  double result = v23;
  if (v23 == v22)
  {
    uint64_t v14 = 4LL;
    double result = v22;
  }

  else
  {
    if (!v23) {
      return result;
    }
    uint64_t v14 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_100138A0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20, char *a21, char a22)
{
  CFStringRef v24 = a13;
  if (a13 == v22)
  {
    uint64_t v25 = 4LL;
    CFStringRef v24 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_6:
  uint64_t v26 = a17;
  if (a17 == &a14)
  {
    uint64_t v27 = 4LL;
    uint64_t v26 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v27 = 5LL;
  }

  (*(void (**)(void))(*(void *)v26 + 8 * v27))();
LABEL_11:
  __int128 v28 = a21;
  if (a21 == &a18)
  {
    uint64_t v29 = 4LL;
    __int128 v28 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_16;
    }
    uint64_t v29 = 5LL;
  }

  (*(void (**)(void))(*(void *)v28 + 8 * v29))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void *sub_100138AB4(void *a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (void *)a1[11];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = (void *)a1[7];
  if (v5 == a1 + 4)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = a1 + 4;
  }

  else
  {
    if (!v5) {
      goto LABEL_11;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  uint64_t v7 = (void *)a1[3];
  if (v7 == a1)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = a1;
    goto LABEL_15;
  }

  if (v7)
  {
    uint64_t v8 = 5LL;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  return a1;
}

void *sub_100138B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!sub_100064120(v4)) {
    __assert_rtn("set_datatype", "microlocation.pb.h", 10856, "::CLMicroLocationProto::DataType_IsValid(value)");
  }
  int v5 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 8) = *(void *)a1;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 36) = v5 | 0xF;
  uint64_t v6 = *(void **)(a2 + 24);
  if (!v6)
  {
    uint64_t v6 = operator new(0x20uLL);
    sub_100063360(v6);
    *(void *)(a2 + 24) = v6;
  }

  v25[0] = &off_101820B18;
  v25[1] = v6;
  uint64_t v26 = v25;
  v23[0] = &off_101820BA8;
  v23[1] = v6;
  CFStringRef v24 = v23;
  v21[0] = &off_101820C38;
  v21[1] = v6;
  std::string v22 = v21;
  sub_10013BD3C((uint64_t)v27, (uint64_t)v25, (uint64_t)v23, (uint64_t)v21);
  uint64_t v7 = v22;
  if (v22 == v21)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v21;
  }

  else
  {
    if (!v22) {
      goto LABEL_9;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_9:
  unint64_t v9 = v24;
  if (v24 == v23)
  {
    uint64_t v10 = 4LL;
    unint64_t v9 = v23;
  }

  else
  {
    if (!v24) {
      goto LABEL_14;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_14:
  int v11 = v26;
  if (v26 == v25)
  {
    uint64_t v12 = 4LL;
    int v11 = v25;
  }

  else
  {
    if (!v26) {
      goto LABEL_19;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_19:
  uint64_t v13 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v13 == -1) {
    sub_10013B58C();
  }
  double v20 = v27;
  ((void (*)(_BYTE **, uint64_t))*(&off_1018208F0 + v13))(&v20, a1 + 16);
  uint64_t v14 = v32;
  if (v32 == v31)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = v31;
  }

  else
  {
    if (!v32) {
      goto LABEL_25;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_25:
  uint64_t v16 = v30;
  if (v30 == v29)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = v29;
  }

  else
  {
    if (!v30) {
      goto LABEL_30;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_30:
  double result = v28;
  if (v28 == v27)
  {
    uint64_t v19 = 4LL;
    double result = v27;
  }

  else
  {
    if (!v28) {
      return result;
    }
    uint64_t v19 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v19))();
}

void sub_100138DD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
}

uint64_t sub_100138EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 8);
  double v6 = sub_100103494(a1);
  v16.__r_.__value_.__r.__words[0] = 0LL;
  int v17 = 0;
  switch(v4)
  {
    case 1:
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_1019A0818 + 16);
      }
      *(void *)&__int128 v18 = *(void *)(v7 + 24);
      sub_1001390F8((uint64_t)&v16, &v18);
      break;
    case 2:
      uint64_t v8 = *(void *)(a1 + 24);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A0818 + 24);
      }
      goto LABEL_15;
    case 3:
      uint64_t v8 = *(void *)(a1 + 32);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A0818 + 32);
      }
      goto LABEL_15;
    case 4:
      uint64_t v8 = *(void *)(a1 + 40);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A0818 + 40);
      }
      goto LABEL_15;
    case 5:
      uint64_t v8 = *(void *)(a1 + 48);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A0818 + 48);
      }
      int v9 = *(_DWORD *)(v8 + 64);
      if ((v9 & 0x80) != 0)
      {
        sub_1001014F0(*(uint64_t ***)(v8 + 48), &v18);
        if (v19)
        {
LABEL_23:
          sub_100139138((uint64_t)&v16, &v18);
        }

        else
        {
          uint64_t v14 = *(void *)(a1 + 48);
          if (!v14) {
            uint64_t v14 = *(void *)(qword_1019A0818 + 48);
          }
          sub_10013C0B0((uint64_t)&v16, &v16, *(std::string **)(v14 + 48));
        }
      }

      else if ((v9 & 8) != 0)
      {
LABEL_15:
        sub_10013C0B0((uint64_t)&v16, &v16, *(std::string **)(v8 + 24));
      }

      break;
    case 6:
      uint64_t v10 = *(void *)(a1 + 56);
      if (!v10) {
        uint64_t v10 = *(void *)(qword_1019A0818 + 56);
      }
      sub_1001014F0(*(uint64_t ***)(v10 + 32), &v18);
      if (v19) {
        goto LABEL_23;
      }
      uint64_t v11 = *(void *)(a1 + 56);
      if (!v11) {
        uint64_t v11 = *(void *)(qword_1019A0818 + 56);
      }
      sub_10013C0B0((uint64_t)&v16, &v16, *(std::string **)(v11 + 32));
      break;
    default:
      break;
  }

  sub_10001B0AC((uint64_t)v15, (uint64_t)&v16);
  float v12 = v6;
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v4;
  *(float *)(a2 + 12) = v12;
  sub_10013B7FC(a2 + 16, (uint64_t)v15);
  sub_10001AAD4((uint64_t)v15);
  return sub_10001AAD4((uint64_t)&v16);
}

void sub_1001390DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1001390F8(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 24)) {
    sub_10013C1F4(a1, a2);
  }
  else {
    *(void *)a1 = *a2;
  }
  return a1;
}

uint64_t sub_100139138(uint64_t a1, _OWORD *a2)
{
  if (*(_DWORD *)(a1 + 24) == 1) {
    *(_OWORD *)a1 = *a2;
  }
  else {
    sub_10013C254(a1, a2);
  }
  return a1;
}

uint64_t sub_10013917C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 20);
  v16.__r_.__value_.__r.__words[0] = 0LL;
  int v17 = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7)
  {
    uint64_t v7 = *(void *)(qword_1019A0828 + 24);
    int v10 = *(_DWORD *)(v7 + 28);
    if ((v10 & 1) == 0)
    {
      if ((v10 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }

void sub_10013940C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100139428(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  int v4 = (void *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0LL;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0LL;
  uint64_t v5 = (_OWORD *)(a1 + 144);
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(_DWORD *)(a1 + 160) = 0;
  int v6 = *(uint64_t **)(a2 + 56);
  int v7 = *((char *)v6 + 23);
  if ((v7 & 0x80000000) == 0)
  {
    if (v7 != 16) {
      goto LABEL_7;
    }
LABEL_6:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v6;
    goto LABEL_12;
  }

  if (v6[1] == 16)
  {
    int v6 = (uint64_t *)*v6;
    goto LABEL_6;
  }

void sub_100139738(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 176) = v5;
    operator delete(v5);
  }

  sub_100019CEC(v2);
  sub_100019CEC(v1 + 64);
  sub_10001AA60(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100139794(uint64_t a1, void *a2)
{
  int v4 = (unsigned int *)(a2 + 1);
  sub_10001B278(a1 + 64, v4, v4);
  uint64_t v5 = (void *)(a1 + 104);
  if (sub_10001A29C(v5, v4))
  {
    double result = sub_10001A29C(v5, v4);
    double v7 = *(double *)a2;
    double v8 = *((double *)result + 3);
    *((double *)result + 3) = v8;
    *((double *)result + 4) = v7;
  }

  else
  {
    *(void *)&__int128 v9 = *a2;
    *((void *)&v9 + 1) = v9;
    return (uint64_t *)sub_10013D170((uint64_t)v5, v4, v4, &v9);
  }

  return result;
}

void sub_100139844(void *a1, unint64_t a2, int a3)
{
  uint64_t v3 = (uint64_t *)a1[2];
  if (v3)
  {
    unint64_t v7 = 0LL;
    do
    {
      if (*((_DWORD *)v3 + 6) == a3) {
        ++v7;
      }
      uint64_t v3 = (uint64_t *)*v3;
    }

    while (v3);
    if (v7 > a2)
    {
      std::string __p = 0LL;
      std::string v22 = 0LL;
      unint64_t v23 = 0LL;
      sub_100139A60(&__p, v7);
      for (uint64_t i = (uint64_t *)a1[2]; i; uint64_t i = (uint64_t *)*i)
      {
        if (*((_DWORD *)i + 6) == a3)
        {
          __int128 v9 = v22;
          if (v22 >= v23)
          {
            uint64_t v11 = (char *)__p;
            uint64_t v12 = (v22 - (_BYTE *)__p) >> 2;
            unint64_t v13 = v12 + 1;
            uint64_t v14 = v23 - (_BYTE *)__p;
            if ((v23 - (_BYTE *)__p) >> 1 > v13) {
              unint64_t v13 = v14 >> 1;
            }
            else {
              unint64_t v15 = v13;
            }
            if (v15)
            {
              std::string v16 = (char *)sub_10000956C((uint64_t)&v23, v15);
              uint64_t v11 = (char *)__p;
              __int128 v9 = v22;
            }

            else
            {
              std::string v16 = 0LL;
            }

            int v17 = &v16[4 * v12];
            *(_DWORD *)int v17 = *((_DWORD *)i + 7);
            int v10 = v17 + 4;
            while (v9 != v11)
            {
              int v18 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *((_DWORD *)v17 - 1) = v18;
              v17 -= 4;
            }

            std::string __p = v17;
            std::string v22 = v10;
            unint64_t v23 = &v16[4 * v15];
            if (v11) {
              operator delete(v11);
            }
          }

          else
          {
            *(_DWORD *)std::string v22 = *((_DWORD *)i + 7);
            int v10 = v9 + 4;
          }

          std::string v22 = v10;
        }
      }

      if (((a3 - 2) & 0xFFFFFFFB) != 0) {
        sub_100139AF4(a1, (float **)&__p, a2, a3);
      }
      else {
        sub_100139BB8(a1, &__p, a2, a3);
      }
      char v19 = (uint64_t *)a1[2];
      if (!v19) {
        goto LABEL_36;
      }
      unint64_t v20 = 0LL;
      do
      {
        if (*((_DWORD *)v19 + 6) == a3) {
          ++v20;
        }
        char v19 = (uint64_t *)*v19;
      }

      while (v19);
      if (v20 > a2)
      {
        sub_10122E038();
        abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprint.mm",  331,  "removeExceedingMeasurements");
        __break(1u);
      }

      else
      {
LABEL_36:
        if (__p)
        {
          std::string v22 = (char *)__p;
          operator delete(__p);
        }
      }
    }
  }

void sub_100139A3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100139A60(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_100007008();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    int v6 = (char *)sub_10000956C(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    __int128 v9 = &v6[4 * v8];
    int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }

      while (v11 != v10);
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

void sub_100139AF4(void *a1, float **a2, uint64_t a3, int a4)
{
  uint64_t v8 = *a2;
  __int128 v9 = a2[1];
  unint64_t v10 = 126 - 2 * __clz(v9 - v8);
  if (v9 == v8) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = v10;
  }
  sub_10013C5F8(v8, v9, (uint64_t)v15, v11, 1);
  uint64_t v12 = (uint64_t *)a1[2];
  if (v12)
  {
    float v13 = (*a2)[a3];
    do
    {
      while (*((_DWORD *)v12 + 6) != a4 || *((float *)v12 + 7) > v13)
      {
        uint64_t v12 = (uint64_t *)*v12;
        if (!v12) {
          return;
        }
      }

      uint64_t v14 = (uint64_t *)*v12;
      sub_10005BEB8(a1, v12, (uint64_t)v15);
      sub_10001B1C0((uint64_t)v15, 0LL);
      uint64_t v12 = v14;
    }

    while (v14);
  }

void sub_100139BB8(void *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (uint64_t *)a1[2];
  if (v8)
  {
    float v9 = *(float *)(*a2 + 4 * a3);
    do
    {
      while (*((_DWORD *)v8 + 6) != a4 || *((float *)v8 + 7) < v9)
      {
        uint64_t v8 = (uint64_t *)*v8;
        if (!v8) {
          return;
        }
      }

      unint64_t v10 = (uint64_t *)*v8;
      sub_10005BEB8(a1, v8, (uint64_t)v11);
      sub_10001B1C0((uint64_t)v11, 0LL);
      uint64_t v8 = v10;
    }

    while (v10);
  }

uint64_t sub_100139C5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v58 = (void *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0LL;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 168) = 0LL;
  unint64_t v59 = (void **)(a1 + 168);
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(_DWORD *)(a1 + 160) = 0;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  int v62 = 1065353216;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10) {
    goto LABEL_21;
  }
  do
  {
    int v11 = sub_100103E08(v9) ^ 1;
    if (*(_BYTE *)(a3 + 9)) {
      int v12 = 1;
    }
    else {
      int v12 = v11;
    }
    int v13 = sub_100103E28(v9) ^ 1;
    if (*(_BYTE *)(a3 + 8)) {
      int v14 = 1;
    }
    else {
      int v14 = v13;
    }
    if ((v12 & v14 & 1) != 0)
    {
      sub_100138EA4(v9, (uint64_t)buf);
      sub_10013D3A0(&v60, buf);
      sub_10001AAD4((uint64_t)&buf[16]);
    }

    else
    {
      uint64_t v15 = *(void *)(v9 + 16);
      if (!v15) {
        uint64_t v15 = *(void *)(qword_1019A0818 + 16);
      }
      uint64_t v64 = nullsub_10(*(void *)(v15 + 24));
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820920);
      }
      std::string v16 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360(&__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int128 buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v66 = 2082;
        int v67 = p_p;
        __int16 v68 = 1026;
        int v69 = v12;
        __int16 v70 = 1026;
        int v71 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:shouldProcess, ignore a measurement, macAddress:%{public, location:escape_only}s, shouldProcessPerInvalidRssiFlag:%{public}hhd, shouldProcessPerOffChannelRssiFlag:%{public}hhd}",  buf,  0x28u);
      }
    }

    v9 += 88LL;
  }

  while (v9 != v10);
  uint64_t v5 = a5;
  if (!*((void *)&v61 + 1))
  {
LABEL_21:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820920);
    }
    int v18 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#warning, this fingerprint does not have any measurements, all measurements might have been filtered out",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820920);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      double v56 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#warning, this fingerprint does not have any measurements, all measurements might have been filtered out",  &__p,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationFingerprint::CLMicroLocationFingerprint(const std::vector<CLMiLoProtobufWrapper::Measurement> &, const CLMicroLocationFingerprintConfiguration &, const std::optional<CLMicroLocationProto::RecordingEvent> &, co nst std::optional<boost::uuids::uuid> &)",  "%s\n",  v56);
      if (v56 != buf) {
        free(v56);
      }
    }
  }

  if (*(_BYTE *)(v5 + 16))
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }

  else
  {
    *(_DWORD *)__int128 buf = 0;
    sub_100018E34((int *)buf);
    *(void *)(a1 + 40) = sub_100017338((ssize_t)buf);
    *(void *)(a1 + 48) = v19;
    sub_100019D7C((unsigned int *)buf);
  }

  unint64_t v20 = (uint64_t *)v61;
  if ((void)v61)
  {
    double v21 = 2.22507386e-308;
    double v22 = 1.79769313e308;
    do
    {
      unint64_t v23 = sub_10013D904(&v60, (uint64_t)(v20 + 2));
      uint64_t v25 = v24;
      *(_DWORD *)__int128 buf = *((_DWORD *)v20 + 6);
      uint64_t v26 = sub_10001A29C((void *)(a3 + 16), (unsigned int *)buf);
      uint64_t v27 = v26 + 3;
      if (!v26) {
        uint64_t v27 = &unk_1012CF2A8;
      }
      if (*v27) {
        BOOL v28 = v23 == v25;
      }
      else {
        BOOL v28 = 1;
      }
      if (!v28)
      {
        double v29 = 0.0;
        double v30 = 0.0;
        do
        {
          double v31 = *((double *)v23 + 2);
          sub_100139794(a1, v23 + 2);
          if (v31 > v21) {
            double v21 = v31;
          }
          if (v31 < v22) {
            double v22 = v31;
          }
          double v30 = v30 + 1.0;
          double v29 = v29 + *((float *)v23 + 7);
          unint64_t v23 = (uint64_t *)*v23;
        }

        while (v23 != v25);
        if (v30 > 0.0)
        {
          *(_OWORD *)__int128 buf = *((_OWORD *)v20 + 1);
          sub_10001B0AC((uint64_t)&buf[16], (uint64_t)(v20 + 4));
          float v32 = v29 / v30;
          *(float *)&_BYTE buf[12] = v32;
          sub_10001ADB4(a1, (uint64_t)buf, buf);
          sub_10001AAD4((uint64_t)&buf[16]);
        }
      }

      unint64_t v20 = v25;
    }

    while (v25);
  }

  else
  {
    double v22 = 1.79769313e308;
    double v21 = 2.22507386e-308;
  }

  *(double *)(a1 + 144) = v22;
  *(double *)(a1 + 152) = v21;
  for (uint64_t i = a1 + 80; ; sub_100139844((void *)a1, v35[3], *(_DWORD *)(i + 16)))
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
    *(_DWORD *)__int128 buf = *(_DWORD *)(i + 16);
    double v34 = sub_10001A29C((void *)(a3 + 16), (unsigned int *)buf);
    BOOL v35 = v34 + 3;
    if (!v34) {
      BOOL v35 = &unk_1012CF2A8;
    }
  }

  if (*(_BYTE *)(a4 + 136))
  {
    if (*(_BYTE *)(a4 + 77))
    {
      int v36 = *(uint64_t **)(a1 + 16);
      if (!v36) {
        goto LABEL_61;
      }
      uint64_t v37 = 0LL;
      do
      {
        if (*((_DWORD *)v36 + 6) == 5) {
          ++v37;
        }
        int v36 = (uint64_t *)*v36;
      }

      while (v36);
      if (!v37) {
LABEL_61:
      }
        *v58 |= 0x20uLL;
    }

    if (*(_BYTE *)(a4 + 76))
    {
      CFStringRef v38 = *(uint64_t **)(a1 + 16);
      if (!v38) {
        goto LABEL_69;
      }
      uint64_t v39 = 0LL;
      do
      {
        if (*((_DWORD *)v38 + 6) == 6) {
          ++v39;
        }
        CFStringRef v38 = (uint64_t *)*v38;
      }

      while (v38);
      if (!v39) {
LABEL_69:
      }
        *v58 |= 0x40uLL;
    }

    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a4 + 120);
    LODWORD(v40) = *(_DWORD *)(a4 + 112);
    if ((int)v40 >= 1)
    {
      uint64_t v41 = 0LL;
      do
      {
        if (v41 >= (int)v40)
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( buf,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Contents/Devel oper/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/include/google/protobu f/repeated_field.h",  614LL);
          uint64_t v42 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( buf,  "CHECK failed: (index) < (size()): ");
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&__p, v42);
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
        }

        int v43 = *(_DWORD *)(*(void *)(a4 + 104) + 4 * v41);
        std::string v45 = *(char **)(a1 + 176);
        unint64_t v44 = *(void *)(a1 + 184);
        if ((unint64_t)v45 >= v44)
        {
          uint64_t v47 = (char *)*v59;
          uint64_t v48 = (v45 - (_BYTE *)*v59) >> 2;
          unint64_t v49 = v48 + 1;
          uint64_t v50 = v44 - (void)v47;
          if (v50 >> 1 > v49) {
            unint64_t v49 = v50 >> 1;
          }
          else {
            unint64_t v51 = v49;
          }
          if (v51)
          {
            uint64_t v52 = (char *)sub_10000956C(a1 + 184, v51);
            uint64_t v47 = *(char **)(a1 + 168);
            std::string v45 = *(char **)(a1 + 176);
          }

          else
          {
            uint64_t v52 = 0LL;
          }

          std::string v53 = &v52[4 * v48];
          *(_DWORD *)std::string v53 = v43;
          std::string v46 = v53 + 4;
          while (v45 != v47)
          {
            int v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }

          *(void *)(a1 + 168) = v53;
          *(void *)(a1 + 176) = v46;
          *(void *)(a1 + 184) = &v52[4 * v51];
          if (v47) {
            operator delete(v47);
          }
        }

        else
        {
          *(_DWORD *)std::string v45 = v43;
          std::string v46 = v45 + 4;
        }

        *(void *)(a1 + 176) = v46;
        ++v41;
        uint64_t v40 = *(int *)(a4 + 112);
      }

      while (v41 < v40);
    }
  }

  sub_10001AA60((uint64_t)&v60);
  return a1;
}

void sub_10013A368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, ...)
{
  int v13 = *a11;
  if (*a11)
  {
    *(void *)(v11 + 176) = v13;
    operator delete(v13);
  }

  sub_100019CEC(a5);
  sub_100019CEC(v11 + 64);
  sub_10001AA60(v11);
  _Unwind_Resume(a1);
}

void sub_10013A418( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v15 = v12;
  while (v9 != v10)
  {
    int v11 = *(_DWORD *)(v9 + 112);
    sub_100068220(v13, v9 + 32);
    int v14 = v11;
    sub_10010E47C(&v15, (uint64_t)v13);
    sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)v13);
    v9 += 120LL;
  }

  sub_10013A504(v12, a2, a3, a4, a5);
  v13[0] = (void **)v12;
  sub_10004AB74(v13);
}

void sub_10013A4D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 72) = &a9;
  sub_10004AB74((void ***)(v9 - 72));
  _Unwind_Resume(a1);
}

uint64_t *sub_10013A504@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, _BYTE *a5@<X8>)
{
  *a5 = 0;
  a5[192] = 0;
  if (*result == result[1]) {
    return result;
  }
  sub_100139C5C((uint64_t)v71, result, (uint64_t)a4, a2, a3);
  *(_DWORD *)__int128 buf = 1;
  int v6 = sub_10001A29C(a4 + 2, (unsigned int *)buf);
  if (v6) {
    unint64_t v7 = (double *)(v6 + 3);
  }
  else {
    unint64_t v7 = (double *)&unk_1012CF2A8;
  }
  *(_DWORD *)__int128 buf = 5;
  uint64_t v8 = sub_10001A29C(a4 + 2, (unsigned int *)buf);
  if (v8) {
    uint64_t v9 = (double *)(v8 + 3);
  }
  else {
    uint64_t v9 = (double *)&unk_1012CF2A8;
  }
  *(_DWORD *)__int128 buf = 6;
  uint64_t v10 = sub_10001A29C(a4 + 2, (unsigned int *)buf);
  if (v10) {
    int v11 = (double *)(v10 + 3);
  }
  else {
    int v11 = (double *)&unk_1012CF2A8;
  }
  *(_DWORD *)__int128 buf = 1;
  int v12 = sub_10001A29C(v75, (unsigned int *)buf);
  if (v12) {
    double v13 = *((double *)v12 + 4) - *((double *)v12 + 3);
  }
  else {
    double v13 = 0.0;
  }
  *(_DWORD *)__int128 buf = 5;
  int v14 = sub_10001A29C(v75, (unsigned int *)buf);
  if (v14) {
    double v15 = *((double *)v14 + 4) - *((double *)v14 + 3);
  }
  else {
    double v15 = 0.0;
  }
  *(_DWORD *)__int128 buf = 6;
  std::string v16 = sub_10001A29C(v75, (unsigned int *)buf);
  if (v16) {
    double v17 = *((double *)v16 + 4) - *((double *)v16 + 3);
  }
  else {
    double v17 = 0.0;
  }
  if (*(_BYTE *)v7) {
    BOOL v18 = v13 >= v7[1];
  }
  else {
    BOOL v18 = 1;
  }
  if (*(_BYTE *)v9) {
    BOOL v19 = v15 >= v9[1];
  }
  else {
    BOOL v19 = 1;
  }
  if (!*(_BYTE *)v11)
  {
    BOOL v20 = 1;
    if (v18) {
      goto LABEL_28;
    }
LABEL_30:
    int v21 = 0;
    goto LABEL_31;
  }

  BOOL v20 = v17 >= v11[1];
  if (!v18) {
    goto LABEL_30;
  }
LABEL_28:
  int v21 = v19 && v20;
LABEL_31:
  double v22 = v72;
  __int16 v68 = a4 + 2;
  if (v72)
  {
    unint64_t v23 = 0LL;
    CFStringRef v24 = v72;
    do
    {
      if (*((_DWORD *)v24 + 6) == 1) {
        ++v23;
      }
      CFStringRef v24 = (uint64_t *)*v24;
    }

    while (v24);
    unint64_t v25 = 0LL;
    uint64_t v26 = v72;
    do
    {
      if (*((_DWORD *)v26 + 6) == 5) {
        ++v25;
      }
      uint64_t v26 = (uint64_t *)*v26;
    }

    while (v26);
    uint64_t v27 = 0LL;
    do
    {
      if (*((_DWORD *)v22 + 6) == 6) {
        uint64_t v27 = (_OWORD *)((char *)v27 + 1);
      }
      double v22 = (uint64_t *)*v22;
    }

    while (v22);
  }

  else
  {
    unint64_t v25 = 0LL;
    unint64_t v23 = 0LL;
    uint64_t v27 = 0LL;
  }

  if (*(_BYTE *)v7) {
    BOOL v28 = v23 >= *((void *)v7 + 2);
  }
  else {
    BOOL v28 = 1;
  }
  int v29 = v28;
  if (v29 == 1)
  {
    if (*(_BYTE *)v9) {
      BOOL v30 = v25 >= *((void *)v9 + 2);
    }
    else {
      BOOL v30 = 1;
    }
    int v31 = v30;
    if (*(_BYTE *)v11) {
      BOOL v32 = (unint64_t)v27 >= *((void *)v11 + 2);
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32) {
      int v31 = 0;
    }
  }

  else
  {
    int v31 = 0;
  }

  unint64_t v33 = v73;
  unint64_t v34 = *a4;
  if (*a4 > v73) {
    int v31 = 0;
  }
  if (v21) {
    int v35 = v31;
  }
  else {
    int v35 = 0;
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820920);
  }
  int v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 68291842;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v80 = 2082;
    *(void *)&v80[2] = "";
    __int16 v81 = 2050;
    unint64_t v82 = v23;
    __int16 v83 = 2050;
    unint64_t v84 = v25;
    __int16 v85 = 2050;
    int64_t v86 = v27;
    __int16 v87 = 2050;
    unint64_t v88 = v33;
    __int16 v89 = 2050;
    double v90 = v13;
    __int16 v91 = 1026;
    int v92 = v29;
    __int16 v93 = 1026;
    BOOL v94 = v34 <= v33;
    __int16 v95 = 1026;
    int v96 = v21;
    __int16 v97 = 1026;
    int v98 = v35;
    __int16 v99 = 2050;
    double v100 = v15;
    __int16 v101 = 2050;
    double v102 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Fingerprint creation, NumWiFiMeasurements:%{public}lu, NumBLEMeasurements:%{publi c}lu, NumUWBMeasurements:%{public}lu, number of total measurements:%{public}lu, WiFi RSSI duration_s: %{public}.09f, enough WiFi measurements:%{public}hhd, enough total measurements:%{public}hhd, isDurati onValid:%{public}hhd, isFingerprintValid:%{public}hhd, BLE Duration_s:%{public}.09f, UWB Duration_ s:%{public}.09f}",  buf,  0x70u);
  }

  if (v35)
  {
    *(_DWORD *)__int128 buf = 5;
    uint64_t v37 = sub_10001A29C(v68, (unsigned int *)buf);
    *(_DWORD *)__int128 buf = 6;
    CFStringRef v38 = sub_10001A29C(v68, (unsigned int *)buf);
    unint64_t v39 = 0LL;
    uint64_t v40 = (unsigned __int8 *)(v37 + 3);
    if (!v37) {
      uint64_t v40 = (unsigned __int8 *)&unk_1012CF2A8;
    }
    uint64_t v41 = v38 + 3;
    if (!v38) {
      uint64_t v41 = &unk_1012CF2A8;
    }
    int v42 = *v40;
    int v43 = v72;
    if (v42 && v72)
    {
      unint64_t v39 = 0LL;
      unint64_t v44 = v72;
      do
      {
        if (*((_DWORD *)v44 + 6) == 5) {
          ++v39;
        }
        unint64_t v44 = (uint64_t *)*v44;
      }

      while (v44);
    }

    unint64_t v45 = 0LL;
    if (*v41) {
      BOOL v46 = v72 == 0LL;
    }
    else {
      BOOL v46 = 1;
    }
    if (!v46)
    {
      do
      {
        if (*((_DWORD *)v43 + 6) == 6) {
          ++v45;
        }
        int v43 = (uint64_t *)*v43;
      }

      while (v43);
    }

    sub_1002F0B04(buf);
    CFStringRef v47 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsHighConfidenceBleSourceNumThreshold",  0x8000100u,  kCFAllocatorNull);
    int v48 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v47, &__p);
    CFRelease(v47);
    unint64_t v49 = __p;
    uint64_t v50 = *(std::__shared_weak_count **)v80;
    if (*(void *)v80)
    {
      unint64_t v51 = (unint64_t *)(*(void *)v80 + 8LL);
      do
        unint64_t v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }

    if (v48) {
      unint64_t v53 = v49;
    }
    else {
      unint64_t v53 = 1LL;
    }
    if (v39 < v53)
    {
      sub_1002F0B04(buf);
      CFStringRef v54 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsHighConfidenceUwbSourceNumThreshold",  0x8000100u,  kCFAllocatorNull);
      int v55 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v54, &__p);
      CFRelease(v54);
      unint64_t v56 = __p;
      unint64_t v57 = *(std::__shared_weak_count **)v80;
      if (*(void *)v80)
      {
        unint64_t v58 = (unint64_t *)(*(void *)v80 + 8LL);
        do
          unint64_t v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }

      if (v55) {
        unint64_t v60 = v56;
      }
      else {
        unint64_t v60 = 1LL;
      }
      if (v45 < v60)
      {
        if (v76 >= 2) {
          int v61 = 2;
        }
        else {
          int v61 = v76;
        }
        int v76 = v61;
        int v62 = (char *)operator new(4uLL);
        *(_DWORD *)int v62 = 2;
        sub_10000AEE4((uint64_t)&v77, (uint64_t)__dst, v62, v62 + 4, 1LL);
        operator delete(v62);
        if (*(_BYTE *)(a3 + 16))
        {
          p_p = operator new(0x28uLL);
          std::string __p = p_p;
          __int128 v70 = xmmword_1012C8460;
          _OWORD *p_p = 0u;
          p_p[1] = 0u;
          *(void *)((char *)p_p + 29) = 0LL;
          sub_10000AE6C(a3, p_p);
          char v64 = 0x80;
        }

        else
        {
          char v64 = 0;
          std::string __p = 0LL;
          __int128 v70 = 0uLL;
          p_p = &__p;
        }

        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820920);
        }
        unsigned __int8 v65 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 68290050;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)int v80 = 2082;
          *(void *)&v80[2] = "";
          __int16 v81 = 2050;
          unint64_t v82 = v39;
          __int16 v83 = 2050;
          unint64_t v84 = v45;
          __int16 v85 = 2082;
          int64_t v86 = p_p;
          __int16 v87 = 1026;
          LODWORD(v88) = v61;
          _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:setting fingerprint confidence due to number of RF sources, number of Ble measure ments:%{public}lu, number of Uwb measurements:%{public}lu, Recording UUID:%{public, location:escap e_only}s, confidence level:%{public}d}",  buf,  0x36u);
          char v64 = HIBYTE(v70);
        }

        if (v64 < 0) {
          operator delete(__p);
        }
      }
    }

    sub_10013AC90((uint64_t)a5, (uint64_t)v71);
  }

  if (v77)
  {
    __dst = v77;
    operator delete(v77);
  }

  sub_100019CEC((uint64_t)v75);
  sub_100019CEC((uint64_t)&v74);
  return (uint64_t *)sub_10001AA60((uint64_t)v71);
}

void sub_10013AC3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

uint64_t sub_10013AC90(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 192))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      sub_10013DA7C((void *)a1, *(uint64_t **)(a2 + 16), 0LL);
      __int128 v4 = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v4;
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      sub_10013DD40((void *)(a1 + 64), *(unsigned int **)(a2 + 80), 0LL);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      sub_10013E25C((void *)(a1 + 104), *(uint64_t **)(a2 + 120), 0LL);
      __int128 v5 = *(_OWORD *)(a2 + 144);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = v5;
      sub_10004C5F8( (char *)(a1 + 168),  *(char **)(a2 + 168),  *(void *)(a2 + 176),  (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
    }
  }

  else
  {
    sub_10005FA6C(a1, a2);
    *(_BYTE *)(a1 + 192) = 1;
  }

  return a1;
}

BOOL sub_10013AD58@<W0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string __p = (void *)sub_1000EFD0C((uint64_t)a1);
  unint64_t v34 = v6;
  uint64_t v37 = sub_1000EFD18(a1);
  uint64_t v38 = v7;
  while (sub_1000EFC24(&__p, &v37))
  {
    sub_1000EFC64((uint64_t)&__p);
  }

  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v37 = sub_1000EFD0C((uint64_t)a1);
  uint64_t v38 = v9;
  v36[0] = sub_1000EFD18(a1);
  v36[1] = v10;
  while (1)
  {
    BOOL result = sub_1000EFC24(&v37, v36);
    if (!result) {
      return result;
    }
    uint64_t v12 = sub_1000EFC50(&v37);
    std::string __p = 0LL;
    unint64_t v34 = 0LL;
    int v35 = 0LL;
    double v13 = *(uint64_t **)(a2 + 16);
    if (v13)
    {
      int v14 = (void *)v12;
      do
      {
        double v15 = (float *)sub_1000EF678(v14, (uint64_t)(v13 + 2));
        if (v15)
        {
          double v16 = v15[7];
          double v17 = v34;
          if (v34 >= v35)
          {
            BOOL v18 = (double *)__p;
            uint64_t v19 = ((char *)v34 - (_BYTE *)__p) >> 3;
            unint64_t v20 = v19 + 1;
            uint64_t v21 = (char *)v35 - (_BYTE *)__p;
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              unint64_t v23 = (char *)sub_1000071BC((uint64_t)&v35, v22);
              BOOL v18 = (double *)__p;
              double v17 = v34;
            }

            else
            {
              unint64_t v23 = 0LL;
            }

            BOOL v28 = (double *)&v23[8 * v19];
            *BOOL v28 = v16;
            CFStringRef v24 = v28 + 1;
            while (v17 != v18)
            {
              uint64_t v29 = *((void *)v17-- - 1);
              *((void *)v28-- - 1) = v29;
            }

void sub_10013B014( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t sub_10013B064@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v5 = *(double **)(a2 + 16);
  if (v5)
  {
    int v6 = *(double **)v5;
    if (*(void *)v5)
    {
      uint64_t v7 = *(double **)v5;
      uint64_t v8 = *(double **)(a2 + 16);
      do
      {
        if (v8[2] > v7[2]) {
          uint64_t v8 = v7;
        }
        uint64_t v7 = *(double **)v7;
      }

      while (v7);
      do
      {
        if (v6[2] > v5[2]) {
          __int128 v5 = v6;
        }
        int v6 = *(double **)v6;
      }

      while (v6);
    }

    else
    {
      uint64_t v8 = *(double **)(a2 + 16);
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v9 = *(double ***)result;
  uint64_t v10 = *(double ***)(result + 8);
  if (*(double ***)result != v10)
  {
    if (v8) {
      BOOL v11 = v5 == 0LL;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    do
    {
      if (*(void *)(a2 + 24) != v9[1] - *v9)
      {
        sub_10122E17C();
        abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprint.mm",  707,  "convertDoubleVectorToFingerprint");
        __break(1u);
      }

      sub_100063398((uint64_t)v27);
      v25[0] = 0;
      sub_100018E34(v25);
      *(void *)std::string __s = sub_100017338((ssize_t)v25);
      uint64_t v37 = v13;
      sub_100019D7C((unsigned int *)v25);
      v35 |= 0x10u;
      int v14 = v30;
      if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v14 = (std::string *)operator new(0x18uLL);
        v14->__r_.__value_.__r.__words[0] = 0LL;
        v14->__r_.__value_.__l.__size_ = 0LL;
        v14->__r_.__value_.__l.__cap_ = 0LL;
        uint64_t v30 = v14;
      }

      std::string::assign(v14, __s, 0x10uLL);
      if (v12)
      {
        uint64_t v29 = *((void *)v8 + 2);
        double v15 = (uint64_t *)*((void *)v5 + 2);
        v35 |= 0xCu;
        BOOL v28 = v15;
      }

      double v16 = *(void **)(a2 + 16);
      if (v16)
      {
        double v17 = *v9;
        do
        {
          if (v17 == v9[1]) {
            break;
          }
          sub_100138B60((uint64_t)(v16 + 2), (uint64_t)v25);
          *(float *)&int v18 = *v17;
          v26 |= 4u;
          v25[5] = v18;
          int v19 = v33;
          uint64_t v20 = v32;
          if (v32 >= v33)
          {
            if (v33 == v34)
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v31,  v33 + 1);
              int v19 = v33;
            }

            int v33 = v19 + 1;
            uint64_t v21 = sub_10013B8F0();
            uint64_t v22 = v32++;
            *(void *)(v31 + 8 * v22) = v21;
          }

          else
          {
            ++v32;
            uint64_t v21 = *(void **)(v31 + 8 * v20);
          }

          sub_100069D18((uint64_t)v21, (uint64_t)v25);
          sub_1000697CC((wireless_diagnostics::google::protobuf::MessageLite *)v25);
          ++v17;
          double v16 = (void *)*v16;
        }

        while (v16);
      }

      unint64_t v23 = a3[1];
      if (v23 >= a3[2])
      {
        uint64_t v24 = sub_10013E43C(a3, (uint64_t)v27);
      }

      else
      {
        sub_100139428(a3[1], (uint64_t)v27);
        uint64_t v24 = v23 + 192;
        a3[1] = v23 + 192;
      }

      a3[1] = v24;
      BOOL result = sub_10006A1BC(v27);
      v9 += 3;
    }

    while (v9 != v10);
  }

  return result;
}

void sub_10013B324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10013B390(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (uint64_t i = *(void **)(a1 + 16); i; uint64_t i = (void *)*i)
  {
    sub_100138B60((uint64_t)(i + 2), (uint64_t)__p);
    int v7 = *(_DWORD *)(a3 + 84);
    uint64_t v8 = *(int *)(a3 + 80);
    if ((int)v8 >= v7)
    {
      if (v7 == *(_DWORD *)(a3 + 88))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a3 + 72),  v7 + 1);
        int v7 = *(_DWORD *)(a3 + 84);
      }

      *(_DWORD *)(a3 + 84) = v7 + 1;
      uint64_t v10 = sub_10013B8F0();
      uint64_t v11 = *(void *)(a3 + 72);
      uint64_t v12 = *(int *)(a3 + 80);
      *(_DWORD *)(a3 + sub_10000AE14(v1 - 80) = v12 + 1;
      *(void *)(v11 + 8 * v12) = v10;
    }

    else
    {
      uint64_t v9 = *(void *)(a3 + 72);
      *(_DWORD *)(a3 + sub_10000AE14(v1 - 80) = v8 + 1;
      uint64_t v10 = *(void **)(v9 + 8 * v8);
    }

    sub_100069D18((uint64_t)v10, (uint64_t)__p);
    sub_1000697CC((wireless_diagnostics::google::protobuf::MessageLite *)__p);
  }

  if (*(_BYTE *)(a2 + 16))
  {
    __p[0].__r_.__value_.__s.__size_ = 16;
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    __p[0].__r_.__value_.__s.__data_[16] = 0;
    *(_DWORD *)(a3 + 104) |= 0x20u;
    uint64_t v13 = *(std::string **)(a3 + 64);
    if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v13 = (std::string *)operator new(0x18uLL);
      v13->__r_.__value_.__r.__words[0] = 0LL;
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      *(void *)(a3 + 64) = v13;
    }

    std::string::operator=(v13, __p);
  }

  int v14 = *(_DWORD *)(a3 + 104);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 144);
  __p[0].__r_.__value_.__s.__size_ = 16;
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 40);
  __p[0].__r_.__value_.__s.__data_[16] = 0;
  *(_DWORD *)(a3 + 104) = v14 | 0x1C;
  double v15 = *(std::string **)(a3 + 56);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    double v15 = (std::string *)operator new(0x18uLL);
    v15->__r_.__value_.__r.__words[0] = 0LL;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    *(void *)(a3 + 56) = v15;
  }

  std::string::operator=(v15, __p);
  char v16 = *(_BYTE *)(a1 + 56);
  int v17 = *(_DWORD *)(a3 + 104);
  *(_BYTE *)(a3 + 96) = (v16 & 0x20) != 0;
  *(_DWORD *)(a3 + 104) = v17 | 0x180;
  *(_BYTE *)(a3 + 97) = (v16 & 0x40) != 0;
}

void sub_10013B54C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10006A1BC(v14);
  _Unwind_Resume(a1);
}

void sub_10013B58C()
{
  exception = __cxa_allocate_exception(8uLL);
}

void ***sub_10013B5C4(void ***result, void *a2)
{
  ***BOOL result = 0xC6A4A7935BD1E995LL
            * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * *a2) ^ ((0xC6A4A7935BD1E995LL * *a2) >> 47))) ^ ***result)
            + 3864292196u;
  return result;
}

void ***sub_10013B608(void ***result, uint64_t a2)
{
  unint64_t v2 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v2 ^= (v2 << 6) + (v2 >> 2) + 2654435769u + *(unsigned __int8 *)(a2 + i);
  ***BOOL result = 0xC6A4A7935BD1E995LL
            * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v2) ^ ((0xC6A4A7935BD1E995LL * v2) >> 47))) ^ ***result)
            + 3864292196u;
  return result;
}

unint64_t sub_10013B67C(uint64_t ***a1, char *a2)
{
  unint64_t v2 = **a1;
  uint64_t v3 = *v2;
  unint64_t result = sub_10010E2F8((uint64_t)&v5, a2);
  *unint64_t v2 = 0xC6A4A7935BD1E995LL
      * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * result) ^ ((0xC6A4A7935BD1E995LL * result) >> 47))) ^ v3)
      + 3864292196u;
  return result;
}

uint64_t sub_10013B6E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 24LL);
  if (!v1) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t sub_10013B708(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 56LL);
  if (!v1) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t sub_10013B730(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 88LL);
  if (!v1) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t sub_10013B758(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 24LL);
  if (!v1) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t sub_10013B780(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 56LL);
  if (!v1) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t sub_10013B7A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 88LL);
  if (!v1) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

void sub_10013B7D0(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10013B7FC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_10013B830(a1, a2);
  return a1;
}

uint64_t sub_10013B830(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))*(&off_101820908 + v4))(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_101820940[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }

  return result;
}

void sub_10013B8BC(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 sub_10013B8C8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

__n128 sub_10013B8D4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0LL;
  a3[1].n128_u64[0] = 0LL;
  a3->n128_u64[0] = 0LL;
  return result;
}

void *sub_10013B8F0()
{
  CFStringRef v0 = operator new(0x28uLL);
  sub_10006337C(v0);
  return v0;
}

void sub_10013B91C(_Unwind_Exception *a1)
{
}

char *sub_10013B930(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          uint64_t v11 = *(char **)v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v11 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v11 = 0LL;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100019E10(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }

  *(void *)uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_10013BB48(_Unwind_Exception *a1)
{
}

void *sub_10013BB64()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_101820968;
  return result;
}

void sub_10013BB88(uint64_t a1, void *a2)
{
  *a2 = &off_101820968;
}

uint64_t sub_10013BBA0@<X0>(uint64_t *a1@<X1>, std::stringbuf::string_type *a2@<X8>)
{
  return sub_100103570(*a1, a2);
}

uint64_t sub_10013BBA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10013BBE4()
{
}

void *sub_10013BBF8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_1018209F8;
  return result;
}

void sub_10013BC1C(uint64_t a1, void *a2)
{
  *a2 = &off_1018209F8;
}

_BYTE *sub_10013BC34@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1001035A8(a1, a2);
}

uint64_t sub_10013BC3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10013BC78()
{
}

void *sub_10013BC8C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_101820A88;
  return result;
}

void sub_10013BCB0(uint64_t a1, void *a2)
{
  *a2 = &off_101820A88;
}

void *sub_10013BCC8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return result;
}

uint64_t sub_10013BCF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10013BD30()
{
}

uint64_t sub_10013BD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10001A504(a1, a2);
  sub_10001A504(v7 + 32, a3);
  sub_10001A504(a1 + 64, a4);
  return a1;
}

void sub_10013BD8C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = (void *)v1[7];
  if (v4 == v2)
  {
    uint64_t v5 = v2;
    uint64_t v6 = 4LL;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
    uint64_t v5 = (void *)v1[7];
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  uint64_t v7 = (void *)v1[3];
  if (v7 == v1)
  {
    uint64_t v8 = 4LL;
  }

  else
  {
    if (!v7) {
      goto LABEL_11;
    }
    uint64_t v8 = 5LL;
    uint64_t v1 = (void *)v1[3];
  }

  (*(void (**)(void *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void *sub_10013BE08(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_101820B18;
  result[1] = v3;
  return result;
}

uint64_t sub_10013BE3C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101820B18;
  a2[1] = v2;
  return result;
}

uint64_t sub_10013BE58(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v2 + 28) |= 1u;
  *(void *)(v2 + 8) = v3;
  return result;
}

uint64_t sub_10013BE74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10013BEB0()
{
}

void *sub_10013BEC4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_101820BA8;
  result[1] = v3;
  return result;
}

uint64_t sub_10013BEF8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101820BA8;
  a2[1] = v2;
  return result;
}

std::string *sub_10013BF14(uint64_t a1, std::string::value_type *__s)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)(v3 + 28) |= 2u;
  unint64_t v4 = *(std::string **)(v3 + 16);
  if (v4 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unint64_t v4 = (std::string *)operator new(0x18uLL);
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(v3 + 16) = v4;
  }

  return std::string::assign(v4, __s, 0x10uLL);
}

uint64_t sub_10013BF70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10013BFAC()
{
}

void *sub_10013BFC0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_101820C38;
  result[1] = v3;
  return result;
}

uint64_t sub_10013BFF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101820C38;
  a2[1] = v2;
  return result;
}

std::string *sub_10013C010(uint64_t a1, std::string *__str)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)(v3 + 28) |= 2u;
  unint64_t v4 = *(std::string **)(v3 + 16);
  if (v4 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unint64_t v4 = (std::string *)operator new(0x18uLL);
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(v3 + 16) = v4;
  }

  return std::string::operator=(v4, __str);
}

uint64_t sub_10013C068(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10013C0A4()
{
}

void sub_10013C0B0(uint64_t a1, std::string *this, std::string *__str)
{
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    std::string::operator=(this, __str);
  }

  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    sub_10013C0F4(v3);
  }

void sub_10013C0F4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)v1, *(void *)(v1 + 8));
  }

  else
  {
    __int128 v3 = *(_OWORD *)v1;
    uint64_t v5 = *(void *)(v1 + 16);
    *(_OWORD *)std::string __p = v3;
  }

  sub_10013C178(v2, (__int128 *)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10013C15C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013C178(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))*(&off_101820908 + v4))(&v7, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  __int128 v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(_DWORD *)(a1 + 24) = 2;
  return a1;
}

uint64_t sub_10013C1F4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))*(&off_101820908 + v4))(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t sub_10013C254(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))*(&off_101820908 + v4))(&v6, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

void sub_10013C2C0(uint64_t a1, std::string *this, std::string::value_type *__s)
{
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    std::string::assign(this, __s);
  }

  else
  {
    v3[0] = a1;
    v3[1] = __s;
    sub_10013C304((uint64_t)v3);
  }

void sub_10013C304(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  sub_1010DDBC0(__p, *(char **)(a1 + 8));
  sub_10013C178(v1, (__int128 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10013C34C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10013C368(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = sub_100138790(a1, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }

    unint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
        }

        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }

          else
          {
            v14 &= v9 - 1;
          }

          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }

  BOOL v15 = operator new(0x40uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  void *v15 = 0LL;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *a3;
  sub_10013B7FC((uint64_t)(v15 + 4), (uint64_t)(a3 + 1));
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1LL;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }

      else
      {
        v23 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (uint64_t *)v25[0];
  v25[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_10001B1C0((uint64_t)v25, 0LL);
  return i;
}

void sub_10013C5E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

float *sub_10013C5F8(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8 = result;
LABEL_2:
  unint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    unint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        float v20 = *(a2 - 1);
        float v21 = *v9;
        if (v20 > *v9)
        {
          float *v9 = v20;
          *(a2 - 1) = v21;
        }

        return result;
      case 3uLL:
        float v22 = v9[1];
        float v23 = *(a2 - 1);
        if (v22 <= v23) {
          int v24 = *((_DWORD *)a2 - 1);
        }
        else {
          int v24 = *((_DWORD *)v9 + 1);
        }
        if (v22 > v23) {
          float v22 = *(a2 - 1);
        }
        *(a2 - 1) = v22;
        *((_DWORD *)v9 + 1) = v24;
        float v25 = *(a2 - 1);
        if (v25 <= *v9) {
          float v26 = *v9;
        }
        else {
          float v26 = *(a2 - 1);
        }
        if (v25 > *v9) {
          float v25 = *v9;
        }
        *(a2 - 1) = v25;
        int v28 = *(_DWORD *)v9;
        float v27 = v9[1];
        if (v26 <= v27)
        {
          int v28 = *((_DWORD *)v9 + 1);
          float v27 = v26;
        }

        *(_DWORD *)unint64_t v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        float v30 = v9[1];
        float v29 = v9[2];
        if (*v9 <= v29) {
          int v31 = *((_DWORD *)v9 + 2);
        }
        else {
          int v31 = *(_DWORD *)v9;
        }
        if (*v9 <= v29) {
          float v29 = *v9;
        }
        void v9[2] = v29;
        *(_DWORD *)unint64_t v9 = v31;
        float v32 = *(a2 - 1);
        if (v30 <= v32) {
          float v33 = *(a2 - 1);
        }
        else {
          float v33 = v30;
        }
        if (v30 <= v32) {
          float v32 = v30;
        }
        *(a2 - 1) = v32;
        float v34 = *v9;
        if (*v9 <= v33) {
          float v35 = v33;
        }
        else {
          float v35 = *v9;
        }
        if (*v9 > v33) {
          float v34 = v33;
        }
        float *v9 = v35;
        v9[1] = v34;
        float v36 = v9[2];
        float v37 = *(a2 - 1);
        if (v36 <= v37) {
          float v38 = *(a2 - 1);
        }
        else {
          float v38 = v9[2];
        }
        if (v36 > v37) {
          float v36 = *(a2 - 1);
        }
        *(a2 - 1) = v36;
        float v39 = v9[1];
        if (v39 <= v38) {
          float v40 = v38;
        }
        else {
          float v40 = v9[1];
        }
        if (v39 > v38) {
          float v39 = v38;
        }
        v9[1] = v40;
        void v9[2] = v39;
        return result;
      case 5uLL:
        int v41 = *(_DWORD *)v9;
        float v42 = v9[1];
        if (*v9 <= v42) {
          int v43 = *((_DWORD *)v9 + 1);
        }
        else {
          int v43 = *(_DWORD *)v9;
        }
        if (*v9 > v42) {
          int v41 = *((_DWORD *)v9 + 1);
        }
        *(_DWORD *)unint64_t v9 = v43;
        *((_DWORD *)v9 + 1) = v41;
        float v44 = v9[3];
        float v45 = *(a2 - 1);
        if (v44 <= v45) {
          int v46 = *((_DWORD *)a2 - 1);
        }
        else {
          int v46 = *((_DWORD *)v9 + 3);
        }
        if (v44 > v45) {
          float v44 = *(a2 - 1);
        }
        *(a2 - 1) = v44;
        *((_DWORD *)v9 + 3) = v46;
        float v47 = *(a2 - 1);
        float v48 = v9[2];
        if (v47 <= v48) {
          float v49 = v9[2];
        }
        else {
          float v49 = *(a2 - 1);
        }
        if (v47 > v48) {
          float v47 = v9[2];
        }
        *(a2 - 1) = v47;
        int v51 = *((_DWORD *)v9 + 2);
        float v50 = v9[3];
        float v52 = v9[1];
        if (v49 <= v50)
        {
          int v51 = *((_DWORD *)v9 + 3);
          float v50 = v49;
        }

        *((_DWORD *)v9 + 2) = v51;
        void v9[3] = v50;
        float v53 = *(a2 - 1);
        if (v52 <= v53) {
          float v54 = *(a2 - 1);
        }
        else {
          float v54 = v52;
        }
        if (v52 <= v53) {
          float v53 = v52;
        }
        *(a2 - 1) = v53;
        int v55 = *(_DWORD *)v9;
        float v57 = v9[2];
        float v56 = v9[3];
        if (v56 <= *v9) {
          float v58 = *v9;
        }
        else {
          float v58 = v9[3];
        }
        if (v56 > *v9) {
          float v56 = *v9;
        }
        if (v58 <= v57)
        {
          int v55 = *((_DWORD *)v9 + 2);
          float v57 = v58;
        }

        if (v56 <= v54) {
          float v59 = v54;
        }
        else {
          float v59 = v56;
        }
        if (v56 > v54) {
          float v56 = v54;
        }
        if (v59 <= v57) {
          float v54 = v57;
        }
        *(_DWORD *)unint64_t v9 = v55;
        v9[1] = v54;
        if (v59 <= v57) {
          float v60 = v59;
        }
        else {
          float v60 = v57;
        }
        void v9[2] = v60;
        void v9[3] = v56;
        return result;
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2) {
              return sub_10013CEE4(v9, a2, a2, a3);
            }
            return result;
          }

          unint64_t v14 = v13 >> 1;
          BOOL v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            sub_10013CA68(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            sub_10013CA68(v9, &v9[v13 >> 1], a2 - 1);
            sub_10013CA68(v9 + 1, v15 - 1, a2 - 2);
            sub_10013CA68(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_10013CA68(v15 - 1, v15, &v9[v14 + 1]);
            float v16 = *v9;
            float *v9 = *v15;
            float *v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          if (*(v9 - 1) <= *v9)
          {
            __n128 result = sub_10013CAF0(v9, a2);
            unint64_t v9 = result;
            goto LABEL_17;
          }

uint64_t sub_10013CA68(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1LL;
    }

    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4) {
      return 1LL;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2LL;
  }

  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 <= *a1) {
      return 1LL;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2LL;
  }

  return 0LL;
}

float *sub_10013CAF0(float *a1, float *a2)
{
  float v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    float v5 = a1 + 1;
    do
    {
      float v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }

    while (v2 <= *v3);
  }

  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[1];
      ++v3;
    }

    while (v2 <= v4);
  }

  if (v3 < a2)
  {
    do
      float v6 = *--a2;
    while (v2 > v6);
  }

  if (v3 < a2)
  {
    float v7 = *v3;
    float v8 = *a2;
    do
    {
      *float v3 = v8;
      *a2 = v7;
      do
      {
        float v9 = v3[1];
        ++v3;
        float v7 = v9;
      }

      while (v2 <= v9);
      do
      {
        float v10 = *--a2;
        float v8 = v10;
      }

      while (v2 > v10);
    }

    while (v3 < a2);
  }

  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

float *sub_10013CBA0(float *a1, float *a2)
{
  uint64_t v2 = 0LL;
  float v3 = *a1;
  do
    float v4 = a1[++v2];
  while (v4 > v3);
  float v5 = &a1[v2];
  float v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v8 = *--a2;
    }

    while (v8 <= v3);
  }

  else
  {
    do
      float v7 = *--a2;
    while (v7 <= v3);
  }

  if (v5 < a2)
  {
    float v9 = *a2;
    float v10 = &a1[v2];
    uint64_t v11 = a2;
    do
    {
      *float v10 = v9;
      *uint64_t v11 = v4;
      do
      {
        float v12 = v10[1];
        ++v10;
        float v4 = v12;
      }

      while (v12 > v3);
      do
      {
        float v13 = *--v11;
        float v9 = v13;
      }

      while (v13 <= v3);
    }

    while (v10 < v11);
    float v6 = v10 - 1;
  }

  if (v6 != a1) {
    *a1 = *v6;
  }
  float *v6 = v3;
  return v6;
}

BOOL sub_10013CC54(float *a1, float *a2)
{
  BOOL v2 = 1LL;
  switch(a2 - a1)
  {
    case 0LL:
    case 1LL:
      return v2;
    case 2LL:
      float v3 = *(a2 - 1);
      float v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }

      break;
    case 3LL:
      float v20 = a1[1];
      float v21 = *(a2 - 1);
      if (v20 <= v21) {
        int v22 = *((_DWORD *)a2 - 1);
      }
      else {
        int v22 = *((_DWORD *)a1 + 1);
      }
      if (v20 > v21) {
        float v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      float v23 = *(a2 - 1);
      if (v23 <= *a1) {
        float v24 = *a1;
      }
      else {
        float v24 = *(a2 - 1);
      }
      if (v23 > *a1) {
        float v23 = *a1;
      }
      *(a2 - 1) = v23;
      float v26 = *a1;
      float v25 = a1[1];
      if (v24 <= v25)
      {
        float v26 = a1[1];
        float v25 = v24;
      }

      *a1 = v26;
      a1[1] = v25;
      break;
    case 4LL:
      float v48 = a1[1];
      float v47 = a1[2];
      if (*a1 <= v47) {
        float v49 = a1[2];
      }
      else {
        float v49 = *a1;
      }
      if (*a1 <= v47) {
        float v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      float v50 = *(a2 - 1);
      if (v48 <= v50) {
        float v51 = *(a2 - 1);
      }
      else {
        float v51 = v48;
      }
      if (v48 <= v50) {
        float v50 = v48;
      }
      *(a2 - 1) = v50;
      float v52 = *a1;
      if (*a1 <= v51) {
        float v53 = v51;
      }
      else {
        float v53 = *a1;
      }
      if (*a1 > v51) {
        float v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      float v54 = a1[2];
      float v55 = *(a2 - 1);
      if (v54 <= v55) {
        float v56 = *(a2 - 1);
      }
      else {
        float v56 = a1[2];
      }
      if (v54 > v55) {
        float v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      float v57 = a1[1];
      if (v57 <= v56) {
        float v58 = v56;
      }
      else {
        float v58 = a1[1];
      }
      if (v57 > v56) {
        float v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5LL:
      float v27 = *a1;
      float v28 = a1[1];
      if (*a1 <= v28) {
        float v29 = a1[1];
      }
      else {
        float v29 = *a1;
      }
      if (*a1 > v28) {
        float v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      float v30 = a1[3];
      float v31 = *(a2 - 1);
      if (v30 <= v31) {
        int v32 = *((_DWORD *)a2 - 1);
      }
      else {
        int v32 = *((_DWORD *)a1 + 3);
      }
      if (v30 > v31) {
        float v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      float v33 = *(a2 - 1);
      float v34 = a1[2];
      if (v33 <= v34) {
        float v35 = a1[2];
      }
      else {
        float v35 = *(a2 - 1);
      }
      if (v33 > v34) {
        float v33 = a1[2];
      }
      *(a2 - 1) = v33;
      int v37 = *((_DWORD *)a1 + 2);
      float v36 = a1[3];
      float v38 = a1[1];
      if (v35 <= v36)
      {
        int v37 = *((_DWORD *)a1 + 3);
        float v36 = v35;
      }

      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      float v39 = *(a2 - 1);
      if (v38 <= v39) {
        float v40 = *(a2 - 1);
      }
      else {
        float v40 = v38;
      }
      if (v38 <= v39) {
        float v39 = v38;
      }
      *(a2 - 1) = v39;
      float v41 = *a1;
      float v43 = a1[2];
      float v42 = a1[3];
      if (v42 <= *a1) {
        float v44 = *a1;
      }
      else {
        float v44 = a1[3];
      }
      if (v42 > *a1) {
        float v42 = *a1;
      }
      if (v44 <= v43)
      {
        float v41 = a1[2];
        float v43 = v44;
      }

      if (v42 <= v40) {
        float v45 = v40;
      }
      else {
        float v45 = v42;
      }
      if (v42 > v40) {
        float v42 = v40;
      }
      if (v45 <= v43) {
        float v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43) {
        float v46 = v45;
      }
      else {
        float v46 = v43;
      }
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      float v5 = a1 + 2;
      float v6 = a1[2];
      float v8 = *a1;
      float v7 = a1[1];
      if (v7 <= v6) {
        float v9 = a1[2];
      }
      else {
        float v9 = a1[1];
      }
      if (v7 <= v6) {
        float v6 = a1[1];
      }
      if (v6 <= v8) {
        float v10 = *a1;
      }
      else {
        float v10 = v6;
      }
      if (v6 > v8) {
        float v6 = *a1;
      }
      *float v5 = v6;
      if (v10 <= v9) {
        float v11 = v9;
      }
      else {
        float v11 = v8;
      }
      if (v10 > v9) {
        float v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      float v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        BOOL v2 = 1LL;
      }

      else
      {
        int v13 = 0;
        uint64_t v14 = 12LL;
        while (1)
        {
          float v15 = *v12;
          float v16 = *v5;
          if (*v12 > *v5)
          {
            uint64_t v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              uint64_t v18 = v17 - 4;
              if (v17 == 4) {
                break;
              }
              float v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4LL;
              if (v15 <= v16)
              {
                BOOL v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }

            BOOL v19 = a1;
LABEL_27:
            *BOOL v19 = v15;
            if (++v13 == 8) {
              break;
            }
          }

          float v5 = v12;
          v14 += 4LL;
          if (++v12 == a2) {
            goto LABEL_29;
          }
        }

        BOOL v2 = v12 + 1 == a2;
      }

      break;
  }

  return v2;
}

float *sub_10013CEE4(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    float v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = &a1[v10];
      do
      {
        sub_10013D0B4((uint64_t)a1, a4, v9, v12--);
        --v11;
      }

      while (v11);
    }

    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        float v15 = *v14;
        if (*v14 > *a1)
        {
          float *v14 = *a1;
          *a1 = v15;
          sub_10013D0B4((uint64_t)a1, a4, v9, a1);
        }

        ++v14;
      }

      while (v14 != a3);
      int v13 = a3;
    }

    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0LL;
        float v18 = *a1;
        BOOL v19 = a1;
        do
        {
          float v20 = v19;
          v19 += v17 + 1;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            uint64_t v17 = v22;
          }

          *float v20 = *v19;
        }

        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *BOOL v19 = *v6;
          float *v6 = v18;
          uint64_t v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 < 5) {
            continue;
          }
          unint64_t v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          float v25 = &a1[v24];
          float v26 = *v25;
          float v18 = *v19;
          if (*v25 <= *v19) {
            continue;
          }
          do
          {
            *BOOL v19 = v26;
            BOOL v19 = v25;
            if (!v24) {
              break;
            }
            unint64_t v24 = (v24 - 1) >> 1;
            float v25 = &a1[v24];
            float v26 = *v25;
          }

          while (*v25 > v18);
        }

        *BOOL v19 = v18;
      }

      while (v16-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t sub_10013D0B4(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (float *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 > v8[1])
      {
        ++v8;
        uint64_t v7 = v9;
      }

      float v10 = *v8;
      float v11 = *a4;
      if (*v8 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 4 * v7);
          uint64_t v13 = v12 + 2;
          if (v13 < a3 && *v8 > v8[1])
          {
            ++v8;
            uint64_t v7 = v13;
          }

          float v10 = *v8;
        }

        while (*v8 <= v11);
        *a4 = v11;
      }
    }
  }

  return result;
}

char *sub_10013D170(uint64_t a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v9 - 1) & v8;
    }

    float v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          uint64_t v12 = *(char **)v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v12 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v12 = 0LL;
  *((void *)v12 + 1) = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100019E10(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)uint64_t v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }

  *(void *)uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v22 = *(void *)(*(void *)v12 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_10013D38C(_Unwind_Exception *a1)
{
}

void *sub_10013D3A0(void *a1, _OWORD *a2)
{
  float v3 = sub_10013D48C(a1, v5[0]);
  v5[0] = 0LL;
  sub_10001B1C0((uint64_t)v5, 0LL);
  return v3;
}

void sub_10013D3F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10013D408@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  void *v6 = 0LL;
  v6[1] = 0LL;
  *((_OWORD *)v6 + 1) = *a2;
  uint64_t v7 = sub_10013B7FC((uint64_t)(v6 + 4), (uint64_t)(a2 + 1));
  *(_BYTE *)(a3 + 16) = 1;
  uint64_t result = sub_100138790(v7, (uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_10013D474(_Unwind_Exception *a1)
{
}

void *sub_10013D48C(void *a1, void *a2)
{
  uint64_t v4 = (uint64_t)(a2 + 2);
  unint64_t v5 = sub_100138790((uint64_t)a1, (uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t v6 = sub_10013D4E8((uint64_t)a1, v5, v4);
  sub_100019674(a1, a2, v6);
  return a2;
}

void *sub_10013D4E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1LL;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    sub_10013D664(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }

  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }

  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }

  BOOL v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (v16)
  {
    unint64_t v17 = (void *)*v16;
    if (*v16)
    {
      int v18 = 0;
      do
      {
        unint64_t v19 = v17[1];
        if (v14 > 1)
        {
          unint64_t v20 = v17[1];
          if (v19 >= v6) {
            unint64_t v20 = v19 % v6;
          }
        }

        else
        {
          unint64_t v20 = v19 & (v6 - 1);
        }

        if (v20 != v15) {
          break;
        }
        int v21 = v19 == a2 && *((_DWORD *)v17 + 6) == *(_DWORD *)(a3 + 8) ? sub_10011724C((uint64_t)(v17 + 4), a3 + 16) : 0;
        if ((v18 & (v21 ^ 1) & 1) != 0) {
          break;
        }
        v18 |= v21;
        BOOL v16 = (void *)*v16;
        unint64_t v17 = (void *)*v16;
      }

      while (*v16);
    }
  }

  return v16;
}

void sub_10013D664(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_10013D740(a1, prime);
  }

void sub_10013D740(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000070D4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = *(void *)(i + 8);
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }

        else
        {
          v13 &= a2 - 1;
        }

        if (v13 == v8)
        {
          uint64_t v7 = (uint64_t *)i;
        }

        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          unint64_t v14 = *(void **)i;
          if (*(void *)i)
          {
            unint64_t v15 = (void *)i;
            while (*(_DWORD *)(i + 24) == *((_DWORD *)v14 + 6))
            {
              int v16 = sub_10011724C(i + 32, (uint64_t)(v14 + 4));
              unint64_t v17 = (void *)*v15;
              if (!v16)
              {
                unint64_t v14 = (void *)*v15;
                break;
              }

              unint64_t v14 = (void *)*v17;
              unint64_t v15 = (void *)*v15;
              if (!*v17) {
                goto LABEL_33;
              }
            }

            unint64_t v17 = v15;
          }

          else
          {
            unint64_t v17 = (void *)i;
          }

uint64_t *sub_10013D904(void *a1, uint64_t a2)
{
  float v3 = sub_10013D974(a1, a2);
  int8x8_t v4 = v3;
  if (v3)
  {
    unint64_t v5 = v3;
    do
      unint64_t v5 = (uint64_t *)*v5;
    while (v5 && *((_DWORD *)v5 + 6) == *(_DWORD *)(a2 + 8) && (sub_10011724C((uint64_t)(v5 + 4), a2 + 16) & 1) != 0);
  }

  return v4;
}

uint64_t *sub_10013D974(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_100138790((uint64_t)a1, a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  unint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v12 = i[1];
    if (v12 == v6)
    {
    }

    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }

      else
      {
        v12 &= *(void *)&v5 - 1LL;
      }

      if (v12 != v9) {
        return 0LL;
      }
    }
  }

  return i;
}

void sub_10013DA7C(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0LL;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0LL;
    a1[3] = 0LL;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }

    else
    {
      do
      {
        *((_OWORD *)v8 + 1) = *((_OWORD *)v4 + 1);
        sub_10013DB7C((uint64_t)(v8 + 4), (uint64_t)(v4 + 4));
        unint64_t v10 = (void *)*v8;
        sub_10013D48C(a1, v8);
        unint64_t v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        unint64_t v8 = v10;
      }

      while (!v11);
    }

    sub_10001AA98((uint64_t)a1, v10);
  }

  while (v4 != a3)
  {
    sub_10013DC54(a1, (_OWORD *)v4 + 1);
    unint64_t v4 = (uint64_t *)*v4;
  }

void sub_10013DB4C(void *a1)
{
}

void sub_10013DB68(_Unwind_Exception *a1)
{
}

uint64_t sub_10013DB7C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1) {
      return result;
    }
  }

  else if ((_DWORD)v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_101820908 + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }

  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_101820CB8 + v4))(&v5, result, a2);
}

uint64_t sub_10013DC08(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24)) {
    return sub_10013C1F4(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_10013DC28(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 1) {
    return sub_10013C254(result, a3);
  }
  *a2 = *a3;
  return result;
}

void sub_10013DC4C(uint64_t *a1, std::string *a2, std::string *a3)
{
}

void *sub_10013DC54(void *a1, _OWORD *a2)
{
  uint64_t v3 = sub_10013D48C(a1, v5[0]);
  v5[0] = 0LL;
  sub_10001B1C0((uint64_t)v5, 0LL);
  return v3;
}

void sub_10013DCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10013DCBC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  char v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  void *v6 = 0LL;
  v6[1] = 0LL;
  *((_OWORD *)v6 + 1) = *a2;
  uint64_t v7 = sub_10001B0AC((uint64_t)(v6 + 4), (uint64_t)(a2 + 1));
  *(_BYTE *)(a3 + 16) = 1;
  uint64_t result = sub_100138790(v7, (uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_10013DD28(_Unwind_Exception *a1)
{
}

void sub_10013DD40(void *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0LL; i != v6; *(void *)(*a1 + 8 * i++) = 0LL)
    ;
  unint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0LL;
  a1[3] = 0LL;
  if (v8)
  {
    while (a2 != (unsigned int *)a3)
    {
      unint64_t v9 = a2[4];
      *((_DWORD *)v8 + 4) = v9;
      unint64_t v10 = (uint64_t *)*v8;
      v8[1] = v9;
      BOOL v11 = (void *)sub_10013DE48((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      sub_100019674(a1, v8, v11);
      a2 = *(unsigned int **)a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }

    do
    {
      unint64_t v12 = (uint64_t *)*v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }

    while (v12);
  }

  else
  {
LABEL_9:
    while (a2 != (unsigned int *)a3)
    {
      sub_10013E1E8(a1, a2 + 4);
      a2 = *(unsigned int **)a2;
    }
  }

void sub_10013DE14(void *a1)
{
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_10013DE34(_Unwind_Exception *a1)
{
}

uint64_t sub_10013DE48(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_10013DF9C(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }

  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }

  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }

  uint64_t v16 = *(void *)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0LL;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = *(void *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = *(void *)(v16 + 8);
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }

    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }

    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && *(_DWORD *)(v16 + 16) == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }

  while (v22 != 1);
  return result;
}

void sub_10013DF9C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_10013E078(a1, prime);
  }

void sub_10013E078(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000070D4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }

        else
        {
          v12 &= a2 - 1;
        }

        if (v12 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }

        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (uint64_t *)*v13;
            }

            while (v13 && *((_DWORD *)i + 4) == *((_DWORD *)v13 + 4));
            uint64_t *v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }

          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }

  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0LL;
  }

_DWORD *sub_10013E1E8(void *a1, unsigned int *a2)
{
  int8x8_t v4 = operator new(0x18uLL);
  unint64_t v5 = *a2;
  v4[4] = v5;
  *(void *)int8x8_t v4 = 0LL;
  *((void *)v4 + 1) = v5;
  uint64_t v6 = (void *)sub_10013DE48((uint64_t)a1, v5, v4 + 4);
  sub_100019674(a1, v4, v6);
  return v4;
}

void sub_10013E248(_Unwind_Exception *a1)
{
}

void sub_10013E25C(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0LL; i != v6; *(void *)(*a1 + 8 * i++) = 0LL)
    ;
  unint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0LL;
  a1[3] = 0LL;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = *((unsigned int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(a2 + 3);
      BOOL v10 = (uint64_t *)*v8;
      v8[1] = v9;
      size_t v11 = (void *)sub_10013DE48((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      sub_100019674(a1, v8, v11);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }

    do
    {
      unint64_t v12 = (uint64_t *)*v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }

    while (v12);
  }

  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_10013E36C(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }

void sub_10013E338(void *a1)
{
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_10013E358(_Unwind_Exception *a1)
{
}

unsigned int *sub_10013E36C(void *a1, uint64_t a2)
{
  int8x8_t v4 = (unsigned int *)operator new(0x28uLL);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((void *)v4 + 4) = *(void *)(a2 + 16);
  unint64_t v5 = v4[4];
  *(void *)int8x8_t v4 = 0LL;
  *((void *)v4 + 1) = v5;
  uint64_t v6 = (void *)sub_10013DE48((uint64_t)a1, v5, v4 + 4);
  sub_100019674(a1, v4, v6);
  return v4;
}

void sub_10013E3D8(_Unwind_Exception *a1)
{
}

void *sub_10013E3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  void v3[2] = 0LL;
  uint64_t result = sub_100007590( v3,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_10013E434(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10013E43C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555LL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555LL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_10001DF10(v7, v9);
  }
  else {
    BOOL v10 = 0LL;
  }
  size_t v13 = v10;
  uint8x8_t v14 = &v10[192 * v4];
  uint64_t v16 = &v10[192 * v9];
  sub_100139428((uint64_t)v14, a2);
  unint64_t v15 = v14 + 192;
  sub_10001DE9C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10001E110(&v13);
  return v11;
}

void sub_10013E52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10013E540( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10013E560( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10013E574( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10013E588(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934FF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934FF0))
  {
    sub_1001413BC((std::string *)&xmmword_101934FD8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934FD8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934FF0);
  }

  if (byte_101934FEF < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934FD8, *((unint64_t *)&xmmword_101934FD8 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934FD8;
    *(void *)(a1 + 16) = unk_101934FE8;
  }

void sub_10013E638(_Unwind_Exception *a1)
{
}

void sub_10013E650(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101935010);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101935010))
  {
    sub_10014198C((std::string *)&xmmword_101934FF8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934FF8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101935010);
  }

  if (byte_10193500F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934FF8, *((unint64_t *)&xmmword_101934FF8 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934FF8;
    *(void *)(a1 + 16) = unk_101935008;
  }

void sub_10013E700(_Unwind_Exception *a1)
{
}

void sub_10013E718(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + 8) = v2;
  if (v2)
  {
    sub_1003B59A0(*a1, "MicroLocationAssociatedState", (const char **)&off_101820CF0, 0LL, 0);
    char v3 = sub_1003B747C(*a1, "MicroLocationAssociatedState");
    *((_BYTE *)a1 + 8) = v3;
    if ((v3 & 1) != 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
      unint64_t v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136380675;
        uint64_t v11 = "MicroLocationAssociatedState";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %{private}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820CD0);
        }
        LODWORD(v9) = 136380675;
        *(void *)((char *)&v9 + 4) = "MicroLocationAssociatedState";
        uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %{private}s",  &v9,  12,  v9);
LABEL_19:
        uint64_t v7 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationAssociatedStateTable::initTable()", "%s\n");
LABEL_29:
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
      unint64_t v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v11 = "MicroLocationAssociatedState";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create table: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820CD0);
        }
        LODWORD(v9) = 136446210;
        *(void *)((char *)&v9 + 4) = "MicroLocationAssociatedState";
        uint64_t v7 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMicroLocationAssociatedStateTable::initTable()", "%s\n");
        goto LABEL_29;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820CD0);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Database is not connected so we can't intialize our table",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
      LOWORD(v9) = 0;
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Database is not connected so we can't intialize our table",  &v9,  2,  v9);
      goto LABEL_19;
    }
  }

uint64_t sub_10013EB1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_10013E718((uint64_t *)a1);
  return a1;
}

char *sub_10013EB48(char *__dst, __int128 *a2, _OWORD *a3, void *a4, char a5, void *a6, int a7, int a8)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v15 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v15;
  }

  *(_OWORD *)(__dst + 24) = *a3;
  *((void *)__dst + 5) = *a4;
  __dst[48] = a5;
  *((void *)__dst + 7) = *a6;
  *((_DWORD *)__dst + 16) = a7;
  *((_DWORD *)__dst + 17) = a8;
  return __dst;
}

void sub_10013EBE8(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  v53.__r_.__value_.__s.__size_ = 22;
  sub_10013E588((uint64_t)__p);
  if ((v52 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if ((v52 & 0x80u) == 0) {
    std::string::size_type v9 = v52;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  BOOL v10 = std::string::append(&v53, (const std::string::value_type *)v8, v9);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v12 = std::string::append(&v54, " FROM ");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint8x8_t v14 = std::string::append(&v55, "MicroLocationAssociatedState");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v16 = std::string::append(&v56, " ");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  int v18 = *(char *)(a2 + 23);
  if (v18 >= 0) {
    unint64_t v19 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v19 = *(const std::string::value_type **)a2;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 8);
  }
  BOOL v21 = std::string::append(&v57, v19, v20);
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v23 = std::string::append(&v58, " ");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  float v25 = std::string::append(&v59, " ORDER BY ");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  float v27 = std::string::append(&v60, "Timestamp");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  float v29 = std::string::append(&v65, " DESC LIMIT ");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v50, a3);
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    float v31 = &v50;
  }
  else {
    float v31 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v50.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
  }
  float v33 = std::string::append(&v66, (const std::string::value_type *)v31, size);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  float v35 = std::string::append(&v61, ") ORDER BY ");
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  int v37 = std::string::append(&v64, "Timestamp");
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  int64_t cap = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)int v62 = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    float v39 = (char *)v62;
  }
  else {
    float v39 = (char *)v62[0];
  }
  sub_1003C0D54(a1, v39, &v64);
  std::string::size_type v40 = v64.__r_.__value_.__r.__words[0];
  float v41 = (sqlite3_stmt *)sub_100019240((uint64_t)v64.__r_.__value_.__l.__data_);
  memset(&v61, 0, sizeof(v61));
  while (j__sqlite3_step(v41) == 100)
  {
    sub_100011CB8(v41, 0, &v64);
    v65.__r_.__value_.__r.__words[0] = sub_100011C2C(v41, 1);
    v65.__r_.__value_.__l.__size_ = v42;
    v60.__r_.__value_.__r.__words[0] = sqlite3_column_double(v41, 2);
    v56.__r_.__value_.__s.__data_[0] = sub_100141228(v41, 3);
    sub_100011CB8(v41, 4, &v66);
    int v43 = sqlite3_column_int64(v41, 5);
    v59.__r_.__value_.__r.__words[0] = sqlite3_column_int64(v41, 6);
    uint64_t v44 = sub_1007EBC38((char *)&v66);
    v58.__r_.__value_.__r.__words[0] = v44;
    LODWORD(v57.__r_.__value_.__l.__data_) = v43;
    std::string::size_type v45 = v61.__r_.__value_.__l.__size_;
    if (v61.__r_.__value_.__l.__size_ >= v61.__r_.__value_.__l.__cap_)
    {
      std::string::size_type v49 = sub_100141258((uint64_t *)&v61, (__int128 *)&v64, &v65, &v60, (char *)&v56, &v58, (int *)&v57, (int *)&v59);
    }

    else
    {
      std::string::value_type v46 = v56.__r_.__value_.__s.__data_[0];
      int data = (int)v59.__r_.__value_.__l.__data_;
      if ((char)v64.__r_.__value_.__s.__size_ < 0)
      {
        sub_1010DD48C( (_BYTE *)v61.__r_.__value_.__l.__size_,  v64.__r_.__value_.__l.__data_,  v64.__r_.__value_.__l.__size_);
        uint64_t v44 = v58.__r_.__value_.__r.__words[0];
      }

      else
      {
        __int128 v48 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
        *(void *)(v61.__r_.__value_.__l.__size_ + 16) = v64.__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string::size_type v45 = v48;
      }

      *(_OWORD *)(v45 + 24) = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
      *(void *)(v45 + 40) = v60.__r_.__value_.__r.__words[0];
      *(_BYTE *)(v45 + 48) = v46;
      *(void *)(v45 + 56) = v44;
      *(_DWORD *)(v45 + 64) = v43;
      *(_DWORD *)(v45 + 68) = data;
      std::string::size_type v49 = v45 + 72;
    }

    v61.__r_.__value_.__l.__size_ = v49;
  }

  sqlite3_reset(v41);
  *a4 = v61;
  memset(&v61, 0, sizeof(v61));
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  sub_1000BB320((void ***)&v64);
  if (v40) {
    (*(void (**)(std::string::size_type))(*(void *)v40 + 8LL))(v40);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v62[0]);
  }
}

void sub_10013F154( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void **buf)
{
  __int128 buf = &a49;
  sub_1000BB320(&buf);
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8LL))(v60);
  }
  if (a58 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10013F520( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, std::string *a7@<X8>)
{
  v56[0] = a4;
  v56[1] = a5;
  if (*(_BYTE *)(a1 + 8))
  {
    v45.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v45, "WHERE ");
    unint64_t v12 = std::string::append(&v45, "Timestamp");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    uint8x8_t v14 = std::string::append(&v46, " > ");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      __int128 v17 = (const std::string::value_type *)a2;
    }
    else {
      __int128 v17 = *(const std::string::value_type **)a2;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(a2 + 8);
    }
    unint64_t v19 = std::string::append(&v47, v17, v18);
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    BOOL v21 = std::string::append(&v48, " AND ");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v23 = std::string::append(&v49, "Timestamp");
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    float v25 = std::string::append(&v50, "<= ");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    int v27 = *(char *)(a3 + 23);
    if (v27 >= 0) {
      __int128 v28 = (const std::string::value_type *)a3;
    }
    else {
      __int128 v28 = *(const std::string::value_type **)a3;
    }
    if (v27 >= 0) {
      std::string::size_type v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v29 = *(void *)(a3 + 8);
    }
    __int128 v30 = std::string::append(&v51, v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    int v32 = std::string::append(&v52, " AND ");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(v41, "LoiGroupId");
    sub_100053C78((const void **)v41, v56, (uint64_t)__p);
    if ((v44 & 0x80u) == 0) {
      __int128 v34 = __p;
    }
    else {
      __int128 v34 = (void **)__p[0];
    }
    if ((v44 & 0x80u) == 0) {
      std::string::size_type v35 = v44;
    }
    else {
      std::string::size_type v35 = (std::string::size_type)__p[1];
    }
    __int128 v36 = std::string::append(&v53, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    std::string::size_type cap = v36->__r_.__value_.__l.__cap_;
    __int128 buf = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v38 = *(void *)a1;
    sub_1010DDBC0(&v53, "RowId");
    sub_10013EBE8(v38, (uint64_t)&buf, a6, a7);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)buf);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820CD0);
    }
    float v39 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
      LOWORD(v53.__r_.__value_.__l.__data_) = 0;
      std::string::size_type v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all",  &v53,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationAssociatedStateTable::Entry> CLMicroLocationAssociatedStateTable::selectBetweenTimesA tLoi(const std::string &, const std::string &, boost::uuids::uuid, uint32_t)",  "%s\n",  v40);
    }

    a7->__r_.__value_.__r.__words[0] = 0LL;
    a7->__r_.__value_.__l.__size_ = 0LL;
    a7->__r_.__value_.__l.__cap_ = 0LL;
  }

void sub_10013F9B0(_Unwind_Exception *a1)
{
}

void sub_10013FAD8()
{
}

void sub_10013FAE0()
{
}

void sub_10013FAE8()
{
}

uint64_t sub_10013FAF0(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_101993ACF >= 0) {
      uint64_t v5 = (char *)&xmmword_101993AB8;
    }
    else {
      uint64_t v5 = (char *)xmmword_101993AB8;
    }
    sub_1003C0D54(v4, v5, &v33);
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      uint64_t v7 = *a2 + 72LL;
      while (1)
      {
        unint64_t v8 = (sqlite3_stmt *)sub_100019240(v33);
        std::string::size_type v9 = operator new(0x28uLL);
        __int128 v31 = v9;
        __int128 v32 = xmmword_1012C8460;
        _OWORD *v9 = 0u;
        v9[1] = 0u;
        *(void *)((char *)v9 + 29) = 0LL;
        sub_10000AE6C(v7 - 48, v9);
        double v10 = *(double *)(v7 - 32);
        sub_1007EC1AC(&__p);
        __int128 v11 = (char *)(v7 - 72);
        int v12 = *(_DWORD *)(v7 - 8);
        if (!sub_1003BC1F0(v8, 1, v11)) {
          break;
        }
        __int128 v13 = v32 >= 0 ? (char *)&v31 : (char *)v31;
        if (!sub_1003BC1F0(v8, 2, v13)
          || !sub_1003B7480(v8, 3, v10)
          || !sub_1003C28BC(v8, 4, *(unsigned __int8 *)(v7 - 24)))
        {
          break;
        }

        uint8x8_t v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
            ? &__p
            : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        if (!sub_1003BC1F0(v8, 5, (char *)v14)
          || !sub_1003C28BC(v8, 6, v12)
          || !sub_1003C28BC(v8, 7, *(_DWORD *)(v7 - 4)))
        {
          break;
        }

        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101820CD0);
          }
          unint64_t v19 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_101993ACF >= 0) {
              __int128 v20 = &xmmword_101993AB8;
            }
            else {
              __int128 v20 = (__int128 *)xmmword_101993AB8;
            }
            *(_DWORD *)__int128 buf = 136446210;
            __int128 v37 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{public}s",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101820CD0);
            }
            if (byte_101993ACF >= 0) {
              BOOL v21 = &xmmword_101993AB8;
            }
            else {
              BOOL v21 = (__int128 *)xmmword_101993AB8;
            }
            int v34 = 136446210;
            std::string::size_type v35 = v21;
            LODWORD(v29) = 12;
            __int128 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{public}s",  &v34,  v29);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationAssociatedStateTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v22);
          }

void sub_100140140( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a32) {
    (*(void (**)(uint64_t))(*(void *)a32 + 8LL))(a32);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001401B8(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    __int128 v53 = 0uLL;
    std::string v54 = 0LL;
    v45.__r_.__value_.__s.__size_ = 16;
    strcpy((char *)&v45, "SELECT DISTINCT ");
    uint64_t v6 = std::string::append(&v45, "LoiGroupId");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v8 = std::string::append(&v46, " FROM ");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    double v10 = std::string::append(&v47, "MicroLocationAssociatedState");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    int v12 = std::string::append(&v48, " WHERE ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    uint8x8_t v14 = std::string::append(&v49, "LoiGroupId");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    int v16 = std::string::append(&v50, " != ''");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    char v18 = std::string::append(&v55, " LIMIT ");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v44, a2);
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v20 = &v44;
    }
    else {
      __int128 v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v44.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v44.__r_.__value_.__l.__size_;
    }
    __int128 v22 = std::string::append(&v56, (const std::string::value_type *)v20, size);
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    int64_t cap = v22->__r_.__value_.__l.__cap_;
    __int128 __p = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    sub_1003C0D54(*(void *)a1, p_p, &v56);
    std::string::size_type v25 = v56.__r_.__value_.__r.__words[0];
    uint64_t v26 = (sqlite3_stmt *)sub_100019240((uint64_t)v56.__r_.__value_.__l.__data_);
    while (j__sqlite3_step(v26) == 100)
    {
      uint64_t v27 = sub_100011C2C(v26, 0);
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      uint64_t v31 = *((void *)&v53 + 1);
      if (*((void *)&v53 + 1) >= (unint64_t)v54)
      {
        uint64_t v33 = (uint64_t)(*((void *)&v53 + 1) - v53) >> 4;
        unint64_t v34 = v33 + 1;
        uint64_t v35 = (uint64_t)&v54[-v53];
        else {
          unint64_t v36 = v34;
        }
        if (v36) {
          __int128 v37 = (char *)sub_100037038((uint64_t)&v54, v36);
        }
        else {
          __int128 v37 = 0LL;
        }
        uint64_t v38 = (uint64_t *)&v37[16 * v33];
        *uint64_t v38 = v29;
        v38[1] = v30;
        float v39 = (char *)*((void *)&v53 + 1);
        std::string::size_type v40 = (char *)v53;
        float v41 = v38;
        if (*((void *)&v53 + 1) != (void)v53)
        {
          do
          {
            *((_OWORD *)v41 - 1) = *((_OWORD *)v39 - 1);
            v41 -= 2;
            v39 -= 16;
          }

          while (v39 != v40);
          float v39 = (char *)v53;
        }

        __int128 v32 = v38 + 2;
        *(void *)&__int128 v53 = v41;
        *((void *)&v53 + 1) = v38 + 2;
        std::string v54 = &v37[16 * v36];
        if (v39) {
          operator delete(v39);
        }
      }

      else
      {
        **((void **)&v53 + 1) = v27;
        *(void *)(v31 + 8) = v28;
        __int128 v32 = (void *)(v31 + 16);
      }

      *((void *)&v53 + 1) = v32;
    }

    sqlite3_reset(v26);
    *(_OWORD *)a3 = v53;
    *(void *)(a3 + 16) = v54;
    std::string v54 = 0LL;
    __int128 v53 = 0uLL;
    if (v25) {
      (*(void (**)(std::string::size_type))(*(void *)v25 + 8LL))(v25);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)__p);
    }
    if ((void)v53)
    {
      *((void *)&v53 + 1) = v53;
      operator delete((void *)v53);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820CD0);
    }
    char v42 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v56.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all client IDs",  (uint8_t *)&v56,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v56, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
      LOWORD(v53) = 0;
      int v43 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all client IDs",  &v53,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<boost::uuids::uuid> CLMicroLocationAssociatedStateTable::selectAllLoiGroupIds(uint32_t)",  "%s\n",  (const char *)v43);
      if (v43 != &v56) {
        free(v43);
      }
    }

    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
  }

void sub_100140708(_Unwind_Exception *a1)
{
}

void sub_1001409D0()
{
}

void sub_1001409E4(void *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  JUMPOUT(0x10014082CLL);
}

BOOL sub_1001409F4(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v42.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v42, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v42, "MicroLocationAssociatedState");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v6 = std::string::append(&v43, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v8 = std::string::append(&v44, "Timestamp");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    double v10 = std::string::append(&v45, " IN (");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    int v12 = std::string::append(&v46, "SELECT ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    uint8x8_t v14 = std::string::append(&v47, "Timestamp");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    int v16 = std::string::append(&v48, " FROM ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    char v18 = std::string::append(&v49, "MicroLocationAssociatedState");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v20 = std::string::append(&v50, " ORDER BY ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v22 = std::string::append(&v51, "Timestamp");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v24 = std::string::append(&v52, " LIMIT ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v41, a2);
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v26 = &v41;
    }
    else {
      uint64_t v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v41.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    uint64_t v28 = std::string::append(&v53, (const std::string::value_type *)v26, size);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v30 = std::string::append(&v56, ")");
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t cap = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 __p = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v32 = (char *)__p;
    }
    else {
      __int128 v32 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v32, &v56);
    std::string::size_type v33 = v56.__r_.__value_.__r.__words[0];
    unint64_t v34 = (sqlite3_stmt *)sub_100019240((uint64_t)v56.__r_.__value_.__l.__data_);
    if (v34)
    {
      BOOL v35 = sub_1003BB2BC(*(void *)a1, v34);
      if (!v33) {
        goto LABEL_42;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
      uint64_t v38 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v56,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v56, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820CD0);
        }
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        std::string::size_type v40 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v53,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationAssociatedStateTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v40);
        if (v40 != &v56) {
          free(v40);
        }
      }

      BOOL v35 = 0LL;
      if (!v33) {
        goto LABEL_42;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v33 + 8LL))(v33);
LABEL_42:
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    return v35;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820CD0);
  }
  unint64_t v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v56.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't deleteOldestRows",  (uint8_t *)&v56,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v56, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820CD0);
    }
    LOWORD(__p[0]) = 0;
    float v39 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't deleteOldestRows",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationAssociatedStateTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v39);
    if (v39 != &v56) {
      free(v39);
    }
  }

  return 0LL;
}

void sub_10014106C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001411FC(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

BOOL sub_100141228(sqlite3_stmt *a1, int a2)
{
  unint64_t v2 = sqlite3_column_int64(a1, a2);
  if ((v2 & 0x8000000000000000LL) != 0) {
    sub_10122E2C0();
  }
  if (v2 >= 2) {
    sub_10122E42C();
  }
  return v2 != 0;
}

uint64_t sub_100141258( uint64_t *a1, __int128 *a2, _OWORD *a3, void *a4, char *a5, void *a6, int *a7, int *a8)
{
  uint64_t v9 = *a1;
  unint64_t v10 = 0x8E38E38E38E38E39LL * ((a1[1] - *a1) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x38E38E38E38E38ELL) {
    sub_100007008();
  }
  uint64_t v19 = (uint64_t)(a1 + 2);
  unint64_t v20 = 0x8E38E38E38E38E39LL * ((a1[2] - v9) >> 3);
  if (2 * v20 > v11) {
    unint64_t v11 = 2 * v20;
  }
  if (v20 >= 0x1C71C71C71C71C7LL) {
    unint64_t v21 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v21 = v11;
  }
  __int128 v29 = a1 + 2;
  if (v21) {
    __int128 v22 = (char *)sub_100046304(v19, v21);
  }
  else {
    __int128 v22 = 0LL;
  }
  __int128 v25 = v22;
  uint64_t v26 = &v22[72 * v10];
  uint64_t v27 = v26;
  uint64_t v28 = &v22[72 * v21];
  sub_10013EB48(v26, a2, a3, a4, *a5, a6, *a7, *a8);
  uint64_t v27 = v26 + 72;
  sub_1000BB5D0(a1, &v25);
  uint64_t v23 = a1[1];
  sub_1000BB768((uint64_t)&v25);
  return v23;
}

void sub_1001413A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

double sub_1001413BC@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100141400( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014141C(std::string *a1)
{
  return sub_100012E60(a1);
}

uint64_t sub_100141470(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  unint64_t v2 = std::string::append(&v7, "LoiType");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_10014150C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100141540(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  unint64_t v2 = std::string::append(&v7, "Timestamp");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_1001415E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014161C(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  unint64_t v2 = std::string::append(&v7, "IsAssociated");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_1001416C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001416F8(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  unint64_t v2 = std::string::append(&v7, "MacAddress");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_1001417A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001417D4(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  unint64_t v2 = std::string::append(&v7, "Band");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_10014187C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001418B0(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  unint64_t v2 = std::string::append(&v7, "Channel");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100141958( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_10014198C@<D0>(std::string *a1@<X8>)
{
  uint64_t v2 = 8LL;
  do
  {
    if (v2 == 8)
    {
      v8.__r_.__value_.__s.__size_ = 0;
      v8.__r_.__value_.__s.__data_[0] = 0;
    }

    else
    {
      v8.__r_.__value_.__s.__size_ = 2;
      strcpy((char *)&v8, ", ");
    }

    __int128 v3 = std::string::append(&v8, "?");
    __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t cap = v3->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 __p = v4;
    v3->__r_.__value_.__l.__size_ = 0LL;
    v3->__r_.__value_.__l.__cap_ = 0LL;
    v3->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string::size_type v5 = __p;
    }
    else {
      std::string::size_type v5 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v6 = HIBYTE(cap);
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(&v11, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    --v2;
  }

  while (v2);
  std::string::append(&v11, ")");
  double result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_100141A94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100141AE0()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MicroLocationAssociatedState");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_10013E588((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    __int128 v4 = v17;
  }
  else {
    __int128 v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  std::string::size_type v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  std::string v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_10013E650((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  int v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_101993AC8 = v12->__r_.__value_.__l.__cap_;
  xmmword_101993AB8 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_101993AB8,  (void *)&_mh_execute_header);
}

void sub_100141CCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100141D78(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101935030);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101935030))
  {
    sub_100149034((std::string *)&xmmword_101935018);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101935018, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101935030);
  }

  if (byte_10193502F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101935018, *((unint64_t *)&xmmword_101935018 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101935018;
    *(void *)(a1 + 16) = unk_101935028;
  }

void sub_100141E28(_Unwind_Exception *a1)
{
}

void sub_100141E40(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101935050);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101935050))
  {
    sub_1001492A8((std::string *)&xmmword_101935038);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101935038, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101935050);
  }

  if (byte_10193504F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101935038, *((unint64_t *)&xmmword_101935038 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101935038;
    *(void *)(a1 + 16) = unk_101935048;
  }

void sub_100141EF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100141F08( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, double a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a9;
  __int128 v11 = *a4;
  *(void *)(a1 + 40) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v11;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  *(void *)(a1 + 48) = a7;
  *(void *)(a1 + 56) = a8;
  *(void *)(a1 + 64) = *(void *)(a5 + 8);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a5 + 72);
  sub_1000865CC(a1 + 80);
  __int128 v12 = *a6;
  *(_BYTE *)(a1 + sub_1000A7938(v33 - 232) = *((_BYTE *)a6 + 16);
  *(_OWORD *)(a1 + 216) = v12;
  return a1;
}

void sub_100141F88(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100141FA8( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, int a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a6;
  __int128 v14 = *a4;
  *(void *)(a1 + 40) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v14;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  *(void *)(a1 + 48) = a11;
  *(void *)(a1 + 56) = a12;
  *(double *)(a1 + 64) = a7;
  *(_DWORD *)(a1 + 72) = a5;
  sub_1000865CC(a1 + 80);
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + sub_1000A7938(v33 - 232) = 0;
  if ((*(char *)(a9 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a9 + 23)) {
      return a1;
    }
    goto LABEL_5;
  }

  if (*(void *)(a9 + 8))
  {
LABEL_5:
    sub_10010147C(a9, (uint64_t)&v16);
    *(_OWORD *)(a1 + 216) = v16;
    *(_BYTE *)(a1 + sub_1000A7938(v33 - 232) = v17;
  }

  return a1;
}

void sub_10014208C(_Unwind_Exception *a1)
{
}

void sub_1001420BC(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + 8) = v2;
  if (v2)
  {
    sub_1001424F4(a1);
    sub_1003B59A0(*a1, "MicroLocationRecordingEvents", (const char **)&off_101820EC0, 0LL, 0);
    char v3 = sub_1003B747C(*a1, "MicroLocationRecordingEvents");
    *((_BYTE *)a1 + 8) = v3;
    if ((v3 & 1) != 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820EA0);
      }
      __int128 v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136380675;
        __int128 v11 = "MicroLocationRecordingEvents";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %{private}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820EA0);
        }
        LODWORD(v9) = 136380675;
        *(void *)((char *)&v9 + 4) = "MicroLocationRecordingEvents";
        uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %{private}s",  &v9,  12,  v9);
LABEL_19:
        __int128 v7 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationRecordingEventsTable::initTable()", "%s\n");
LABEL_29:
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820EA0);
      }
      std::string v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int128 v11 = "MicroLocationRecordingEvents";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create table: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820EA0);
        }
        LODWORD(v9) = 136446210;
        *(void *)((char *)&v9 + 4) = "MicroLocationRecordingEvents";
        __int128 v7 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMicroLocationRecordingEventsTable::initTable()", "%s\n");
        goto LABEL_29;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    std::string::size_type v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Database is not connected so we can't intialize our table",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820EA0);
      }
      LOWORD(v9) = 0;
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Database is not connected so we can't intialize our table",  &v9,  2,  v9);
      goto LABEL_19;
    }
  }

uint64_t sub_1001424C8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_1001420BC((uint64_t *)a1);
  return a1;
}

uint64_t sub_1001424F4(uint64_t *a1)
{
  uint64_t result = sub_1003B747C(*a1, "MicroLocationRecordingEvents");
  if ((_DWORD)result) {
    return sub_10000C98C(*a1, (uint64_t)&off_101820EC0, 9LL, "MicroLocationRecordingEvents");
  }
  return result;
}

uint64_t sub_100142548(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_101993AE7 >= 0) {
      uint64_t v5 = (char *)&xmmword_101993AD0;
    }
    else {
      uint64_t v5 = (char *)xmmword_101993AD0;
    }
    sub_1003C0D54(v4, v5, &v42);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (*a2 != v7)
    {
      while (1)
      {
        std::string v8 = (sqlite3_stmt *)sub_100019240(v42);
        memset(&v41, 0, sizeof(v41));
        if ((sub_100013090(v6, &v41) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&buf);
          *(void *)&__int128 buf = &off_101818CB0;
          sub_1000139B0((uint64_t)&buf);
        }

        double v9 = *(double *)(v6 + 16);
        double v10 = *(double *)(v6 + 64);
        uint64_t v38 = 0LL;
        uint64_t v39 = 0LL;
        uint64_t v40 = 0LL;
        wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v6 + 80, &v38);
        sqlite3_int64 v11 = *(unsigned int *)(v6 + 72);
        __p.__r_.__value_.__s.__size_ = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (*(_BYTE *)(v6 + 48))
        {
LABEL_8:
          memset(&v36, 0, sizeof(v36));
          if ((sub_100013090(v6 + 48, &v36) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&buf);
            *(void *)&__int128 buf = &off_101818CB0;
            sub_1000139B0((uint64_t)&buf);
          }

          std::string __p = v36;
        }

        else
        {
          uint64_t v15 = 49LL;
          while (v15 != 64)
          {
            if (*(unsigned __int8 *)(v6 + v15++))
            {
              break;
            }
          }
        }

        __int128 v12 = v40 >= 0 ? &v38 : (void **)v38;
        uint64_t v13 = v40 >= 0 ? HIBYTE(v40) : v39;
        __int128 v14 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v12, v13);
        if (*(_BYTE *)(v6 + 232))
        {
          memset(&v36, 0, sizeof(v36));
          if ((sub_100013090(v6 + 216, &v36) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&buf);
            *(void *)&__int128 buf = &off_101818CB0;
            sub_1000139B0((uint64_t)&buf);
          }
        }

        else
        {
          sub_1010DDBC0(&v36, "");
        }

        char v17 = (v41.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v41 : (std::string *)v41.__r_.__value_.__r.__words[0];
        unsigned __int8 v18 = (char *)(v6 + 24);
        if (!sub_1003BC1F0(v8, 3, v18)
          || !sub_1003B7480(v8, 4, v10)
          || !sub_1003C2D24(v8, 5, v11)
          || !sub_1003C2F58(v8, 6, v14))
        {
          break;
        }

        std::string v19 = (v36.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v36 : (std::string *)v36.__r_.__value_.__r.__words[0];
        std::string v20 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101820EA0);
          }
          __int128 v25 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_101993AE7 >= 0) {
              uint64_t v26 = &xmmword_101993AD0;
            }
            else {
              uint64_t v26 = (__int128 *)xmmword_101993AD0;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{public}s",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101820EA0);
            }
            if (byte_101993AE7 >= 0) {
              uint64_t v27 = &xmmword_101993AD0;
            }
            else {
              uint64_t v27 = (__int128 *)xmmword_101993AD0;
            }
            int v43 = 136446210;
            std::string v44 = v27;
            LODWORD(v35) = 12;
            uint64_t v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{public}s",  &v43,  v35);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingEventsTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v28);
          }

void sub_100142D3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, std::bad_cast a45)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a42) {
    (*(void (**)(uint64_t))(*(void *)a42 + 8LL))(a42);
  }
  _Unwind_Resume(exception_object);
}

void sub_100142E04( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  v52.__r_.__value_.__s.__size_ = 15;
  strcpy((char *)&v52, "SELECT * FROM (");
  char v51 = 7;
  strcpy(__s, "SELECT ");
  double v10 = std::string::append(&v52, __s, 7uLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  sub_100141D78((uint64_t)__p);
  if ((v49 & 0x80u) == 0) {
    __int128 v12 = __p;
  }
  else {
    __int128 v12 = (void **)__p[0];
  }
  if ((v49 & 0x80u) == 0) {
    std::string::size_type v13 = v49;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  __int128 v14 = std::string::append(&v53, (const std::string::value_type *)v12, v13);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v16 = std::string::append(&v60, " FROM ");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  int v18 = *(char *)(a2 + 23);
  if (v18 >= 0) {
    std::string v19 = (const std::string::value_type *)a2;
  }
  else {
    std::string v19 = *(const std::string::value_type **)a2;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 8);
  }
  uint64_t v21 = std::string::append(&v61, v19, v20);
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  std::string v23 = std::string::append(&v62, " ORDER BY ");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v25 = std::string::append(&v54, "RecordingTimestamp");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v27 = std::string::append(&v55, " DESC LIMIT ");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v47, a3);
  if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v29 = &v47;
  }
  else {
    __int128 v29 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v47.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  __int128 v31 = std::string::append(&v63, (const std::string::value_type *)v29, size);
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v33 = std::string::append(&v56, ") ORDER BY ");
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  int v35 = *(char *)(a4 + 23);
  if (v35 >= 0) {
    std::string v36 = (const std::string::value_type *)a4;
  }
  else {
    std::string v36 = *(const std::string::value_type **)a4;
  }
  if (v35 >= 0) {
    std::string::size_type v37 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v37 = *(void *)(a4 + 8);
  }
  uint64_t v38 = std::string::append(&v59, v36, v37);
  __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  int64_t cap = v38->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v57 = v39;
  v38->__r_.__value_.__l.__size_ = 0LL;
  v38->__r_.__value_.__l.__cap_ = 0LL;
  v38->__r_.__value_.__r.__words[0] = 0LL;
  if (v51 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    uint64_t v40 = (char *)v57;
  }
  else {
    uint64_t v40 = (char *)v57[0];
  }
  sub_1003C0D54(a1, v40, &v59);
  std::string::size_type v41 = v59.__r_.__value_.__r.__words[0];
  uint64_t v42 = (sqlite3_stmt *)sub_100019240((uint64_t)v59.__r_.__value_.__l.__data_);
  memset(&v56, 0, sizeof(v56));
  while (j__sqlite3_step(v42) == 100)
  {
    v61.__r_.__value_.__r.__words[0] = sub_100011C2C(v42, 0);
    v61.__r_.__value_.__l.__size_ = v43;
    v53.__r_.__value_.__r.__words[0] = sqlite3_column_double(v42, 1);
    sub_100011CB8(v42, 2, &v63);
    v52.__r_.__value_.__r.__words[0] = sqlite3_column_double(v42, 3);
    *(_DWORD *)std::string __s = sqlite3_column_int64(v42, 4);
    sub_100148BCC(v42, 5, (uint64_t)&v59);
    sub_100011CB8(v42, 8, &v55);
    sub_100011CB8(v42, 7, &v54);
    std::string::size_type v44 = v55.__r_.__value_.__s.__size_;
    if ((v55.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v44 = v55.__r_.__value_.__l.__size_;
    }
    if (v44 && (sub_10010147C((uint64_t)&v55, (uint64_t)&v62), v62.__r_.__value_.__s.__data_[16]))
    {
      sub_10010147C((uint64_t)&v55, (uint64_t)&v62);
      if (!v62.__r_.__value_.__s.__data_[16]) {
        sub_100036CD8();
      }
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
    }

    else
    {
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0uLL;
    }

    std::string::size_type v45 = v56.__r_.__value_.__l.__size_;
    if (v56.__r_.__value_.__l.__size_ >= v56.__r_.__value_.__l.__cap_)
    {
      std::string::size_type v46 = sub_100148CDC( (uint64_t *)&v56,  (uint64_t *)&v61,  (double *)&v53,  (uint64_t)&v63,  (double *)&v52,  (int *)__s,  (uint64_t)&v59,  (uint64_t)&v54,  (uint64_t *)&v60);
    }

    else
    {
      sub_100148E3C( (uint64_t)&v56.__r_.__value_.__l.__cap_,  v56.__r_.__value_.__l.__size_,  (uint64_t *)&v61,  (double *)&v53,  (uint64_t)&v63,  (double *)&v52,  (int *)__s,  (uint64_t)&v59,  (uint64_t)&v54,  (uint64_t *)&v60);
      std::string::size_type v46 = v45 + 240;
    }

    v56.__r_.__value_.__l.__size_ = v46;
    sub_100086708(&v59);
  }

  sqlite3_reset(v42);
  *a5 = v56;
  memset(&v56, 0, sizeof(v56));
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  sub_10001A350((void ***)&v59);
  if (v41) {
    (*(void (**)(std::string::size_type))(*(void *)v41 + 8LL))(v41);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v57[0]);
  }
}

void sub_1001433A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, void **buf)
{
  __int128 buf = &a35;
  sub_10001A350(&buf);
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8LL))(v46);
  }
  if (a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10014378C(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  if (!*(_BYTE *)(a1 + 8))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    std::string::size_type v44 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v61.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all",  (uint8_t *)&v61,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_88;
    }
    bzero(&v61, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    LOWORD(v59[0]) = 0;
    std::string::size_type v45 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v61,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all",  v59,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEvents FromUUIDs(const std::vector<boost::uuids::uuid> &, uint32_t) [UuidColumn_t = CLMicroLocationRecordingEventsTable:: DatabaseColumns::TriggerUUID]",  "%s\n",  (const char *)v45);
    goto LABEL_93;
  }

  uint64_t v7 = *a2;
  if (*a2 == a2[1])
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    uint64_t v46 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v61.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "#Warning passed empty UUIDs so we can't select recording events",  (uint8_t *)&v61,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_88;
    }
    bzero(&v61, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    LOWORD(v59[0]) = 0;
    std::string::size_type v45 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v61,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning passed empty UUIDs so we can't select recording events",  v59,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEvents FromUUIDs(const std::vector<boost::uuids::uuid> &, uint32_t) [UuidColumn_t = CLMicroLocationRecordingEventsTable:: DatabaseColumns::TriggerUUID]",  "%s\n",  (const char *)v45);
LABEL_93:
    if (v45 != &v61) {
      free(v45);
    }
LABEL_88:
    a4->__r_.__value_.__r.__words[0] = 0LL;
    a4->__r_.__value_.__l.__size_ = 0LL;
    a4->__r_.__value_.__l.__cap_ = 0LL;
    return;
  }

  v57.__r_.__value_.__s.__size_ = 1;
  LOWORD(v57.__r_.__value_.__l.__data_) = 34;
  memset(&__p, 0, sizeof(__p));
  if ((sub_100013090(v7, &__p) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v61);
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
    sub_1000139B0((uint64_t)&v61);
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  __int128 v11 = std::string::append(&v57, (const std::string::value_type *)p_p, size);
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v13 = std::string::append(&v58, "");
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t cap = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v59 = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v15 = a2[1];
  uint64_t v16 = *a2 + 16;
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  while (v16 != v15)
  {
    sub_1001493FC((std::string **)&v61, v16);
    v16 += 16LL;
  }

  __p.__r_.__value_.__s.__size_ = 14;
  strcpy((char *)&__p, "(SELECT *,MIN(");
  __int128 v17 = std::string::append(&__p, "RowId");
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  __s.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&__s, ") FROM ");
  std::string v19 = std::string::append(&v57, (const std::string::value_type *)&__s, 7uLL);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v21 = std::string::append(&v58, "MicroLocationRecordingEvents");
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  v53.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v53, " WHERE ");
  std::string v23 = std::string::append(&v53, "TriggerUUID");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  char v52 = 4;
  strcpy(v51, " IN ");
  __int128 v25 = std::string::append(&v54, v51, 4uLL);
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  char v50 = 1;
  strcpy(v49, "(");
  uint64_t v27 = std::string::append(&__s, v49, 1uLL);
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v29 = v59;
  }
  else {
    __int128 v29 = (void **)v59[0];
  }
  if (cap >= 0) {
    std::string::size_type v30 = HIBYTE(cap);
  }
  else {
    std::string::size_type v30 = (std::string::size_type)v59[1];
  }
  __int128 v31 = std::string::append(&__p, (const std::string::value_type *)v29, v30);
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  char v48 = 1;
  strcpy(v47, ")");
  std::string::size_type v33 = std::string::append(&v57, v47, 1uLL);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v35 = &v58;
  }
  else {
    int v35 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v36 = v58.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v36 = v58.__r_.__value_.__l.__size_;
  }
  std::string::append(&v61, (const std::string::value_type *)v35, v36);
  if (v48 < 0) {
    operator delete(*(void **)v47);
  }
  if (v50 < 0) {
    operator delete(*(void **)v49);
  }
  if (v52 < 0) {
    operator delete(*(void **)v51);
  }
  __p.__r_.__value_.__s.__size_ = 10;
  strcpy((char *)&__p, " GROUP BY ");
  std::string::size_type v37 = std::string::append(&__p, "TriggerUUID");
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v39 = std::string::append(&v57, ")");
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v41 = &v58;
  }
  else {
    std::string::size_type v41 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v42 = v58.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v42 = v58.__r_.__value_.__l.__size_;
  }
  std::string::append(&v61, (const std::string::value_type *)v41, v42);
  uint64_t v43 = *(void *)a1;
  sub_1010DDBC0(&v58, "TriggerUUID");
  sub_100142E04(v43, (uint64_t)&v61, a3, (uint64_t)&v58, a4);
  if (SHIBYTE(cap) < 0) {
    operator delete(v59[0]);
  }
}

void sub_100143F98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

void sub_100144194(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  if (!*(_BYTE *)(a1 + 8))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    std::string::size_type v44 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v61.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all",  (uint8_t *)&v61,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_88;
    }
    bzero(&v61, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    LOWORD(v59[0]) = 0;
    std::string::size_type v45 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v61,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all",  v59,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEvents FromUUIDs(const std::vector<boost::uuids::uuid> &, uint32_t) [UuidColumn_t = CLMicroLocationRecordingEventsTable:: DatabaseColumns::RecordingUUID]",  "%s\n",  (const char *)v45);
    goto LABEL_93;
  }

  uint64_t v7 = *a2;
  if (*a2 == a2[1])
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    uint64_t v46 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v61.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "#Warning passed empty UUIDs so we can't select recording events",  (uint8_t *)&v61,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_88;
    }
    bzero(&v61, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    LOWORD(v59[0]) = 0;
    std::string::size_type v45 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v61,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning passed empty UUIDs so we can't select recording events",  v59,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEvents FromUUIDs(const std::vector<boost::uuids::uuid> &, uint32_t) [UuidColumn_t = CLMicroLocationRecordingEventsTable:: DatabaseColumns::RecordingUUID]",  "%s\n",  (const char *)v45);
LABEL_93:
    if (v45 != &v61) {
      free(v45);
    }
LABEL_88:
    a4->__r_.__value_.__r.__words[0] = 0LL;
    a4->__r_.__value_.__l.__size_ = 0LL;
    a4->__r_.__value_.__l.__cap_ = 0LL;
    return;
  }

  v57.__r_.__value_.__s.__size_ = 1;
  LOWORD(v57.__r_.__value_.__l.__data_) = 34;
  memset(&__p, 0, sizeof(__p));
  if ((sub_100013090(v7, &__p) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v61);
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
    sub_1000139B0((uint64_t)&v61);
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  __int128 v11 = std::string::append(&v57, (const std::string::value_type *)p_p, size);
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v13 = std::string::append(&v58, "");
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t cap = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v59 = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v15 = a2[1];
  uint64_t v16 = *a2 + 16;
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  while (v16 != v15)
  {
    sub_1001493FC((std::string **)&v61, v16);
    v16 += 16LL;
  }

  __p.__r_.__value_.__s.__size_ = 14;
  strcpy((char *)&__p, "(SELECT *,MIN(");
  __int128 v17 = std::string::append(&__p, "RowId");
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  __s.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&__s, ") FROM ");
  std::string v19 = std::string::append(&v57, (const std::string::value_type *)&__s, 7uLL);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v21 = std::string::append(&v58, "MicroLocationRecordingEvents");
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  v53.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v53, " WHERE ");
  std::string v23 = std::string::append(&v53, "RecordingUUID");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  char v52 = 4;
  strcpy(v51, " IN ");
  __int128 v25 = std::string::append(&v54, v51, 4uLL);
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  char v50 = 1;
  strcpy(v49, "(");
  uint64_t v27 = std::string::append(&__s, v49, 1uLL);
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v29 = v59;
  }
  else {
    __int128 v29 = (void **)v59[0];
  }
  if (cap >= 0) {
    std::string::size_type v30 = HIBYTE(cap);
  }
  else {
    std::string::size_type v30 = (std::string::size_type)v59[1];
  }
  __int128 v31 = std::string::append(&__p, (const std::string::value_type *)v29, v30);
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  char v48 = 1;
  strcpy(v47, ")");
  std::string::size_type v33 = std::string::append(&v57, v47, 1uLL);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v35 = &v58;
  }
  else {
    int v35 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v36 = v58.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v36 = v58.__r_.__value_.__l.__size_;
  }
  std::string::append(&v61, (const std::string::value_type *)v35, v36);
  if (v48 < 0) {
    operator delete(*(void **)v47);
  }
  if (v50 < 0) {
    operator delete(*(void **)v49);
  }
  if (v52 < 0) {
    operator delete(*(void **)v51);
  }
  __p.__r_.__value_.__s.__size_ = 10;
  strcpy((char *)&__p, " GROUP BY ");
  std::string::size_type v37 = std::string::append(&__p, "RecordingUUID");
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v39 = std::string::append(&v57, ")");
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v41 = &v58;
  }
  else {
    std::string::size_type v41 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v42 = v58.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v42 = v58.__r_.__value_.__l.__size_;
  }
  std::string::append(&v61, (const std::string::value_type *)v41, v42);
  uint64_t v43 = *(void *)a1;
  sub_1010DDBC0(&v58, "RecordingUUID");
  sub_100142E04(v43, (uint64_t)&v61, a3, (uint64_t)&v58, a4);
  if (SHIBYTE(cap) < 0) {
    operator delete(v59[0]);
  }
}

void sub_1001449A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100144B98(uint64_t a1, uint64_t *a2)
{
  if (!*(_BYTE *)(a1 + 8))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    uint64_t v43 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v66.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't delete recording events",  (uint8_t *)&v66,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(&v66, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    LOWORD(v65.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v66,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't delete recording events",  &v65,  2);
    std::string::size_type v45 = (std::string *)v44;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecordingEventsTable::deleteRecordingEventsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &)",  "%s\n",  v44);
    goto LABEL_102;
  }

  uint64_t v4 = *a2;
  if (*a2 == a2[1])
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    uint64_t v46 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v66.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "#Warning No UUIDs are passed in to delete recording events",  (uint8_t *)&v66,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(&v66, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    LOWORD(v65.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v66,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning No UUIDs are passed in to delete recording events",  &v65,  2);
    std::string::size_type v45 = (std::string *)v49;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecordingEventsTable::deleteRecordingEventsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &)",  "%s\n",  v49);
LABEL_102:
    if (v45 != &v66) {
      free(v45);
    }
    return 0LL;
  }

  v64.__r_.__value_.__s.__size_ = 1;
  LOWORD(v64.__r_.__value_.__l.__data_) = 34;
  memset(&__p, 0, sizeof(__p));
  if ((sub_100013090(v4, &__p) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v66);
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
    sub_1000139B0((uint64_t)&v66);
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::string::append(&v64, (const std::string::value_type *)p_p, size);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  double v9 = std::string::append(&v65, "");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v11 = a2[1];
  for (uint64_t i = *a2 + 16; i != v11; i += 16LL)
  {
    v62.__r_.__value_.__s.__size_ = 1;
    LOWORD(v62.__r_.__value_.__l.__data_) = 44;
    std::string::size_type v13 = std::string::append(&v62, "");
    __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    memset(&v61, 0, sizeof(v61));
    if ((sub_100013090(i, &v61) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v66);
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
      sub_1000139B0((uint64_t)&v66);
    }

    if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v15 = &v61;
    }
    else {
      uint64_t v15 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v16 = v61.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v16 = v61.__r_.__value_.__l.__size_;
    }
    __int128 v17 = std::string::append(&__p, (const std::string::value_type *)v15, v16);
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    std::string v19 = std::string::append(&v64, "");
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v21 = &v65;
    }
    else {
      uint64_t v21 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v22 = v65.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v22 = v65.__r_.__value_.__l.__size_;
    }
    std::string::append(&v60, (const std::string::value_type *)v21, v22);
  }

  v58.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v58, "DELETE FROM ");
  std::string v23 = std::string::append(&v58, "MicroLocationRecordingEvents");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v25 = std::string::append(&v59, " WHERE ");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v27 = std::string::append(&v61, "RecordingUUID");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  char v57 = 4;
  strcpy(__s, " IN ");
  __int128 v29 = std::string::append(&v62, __s, 4uLL);
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  char v55 = 1;
  strcpy(v54, "(");
  __int128 v31 = std::string::append(&__p, v54, 1uLL);
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v33 = &v60;
  }
  else {
    std::string::size_type v33 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v34 = v60.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v34 = v60.__r_.__value_.__l.__size_;
  }
  int v35 = std::string::append(&v64, (const std::string::value_type *)v33, v34);
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  char v53 = 1;
  strcpy(v52, ")");
  std::string::size_type v37 = std::string::append(&v66, v52, 1uLL);
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  if (v53 < 0) {
    operator delete(*(void **)v52);
  }
  if (v55 < 0) {
    operator delete(*(void **)v54);
  }
  if (v57 < 0) {
    operator delete(*(void **)__s);
  }
  if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v39 = &v65;
  }
  else {
    __int128 v39 = (std::string *)v65.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(*(void *)a1, (char *)v39, &v66);
  std::string::size_type v40 = v66.__r_.__value_.__r.__words[0];
  std::string::size_type v41 = (sqlite3_stmt *)sub_100019240((uint64_t)v66.__r_.__value_.__l.__data_);
  if (!v41)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    char v48 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v66.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v66,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v66, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820EA0);
      }
      LOWORD(v64.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v66,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v64,  2);
      char v51 = (std::string *)v50;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingEventsTable::deleteRecordingEventsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &)",  "%s\n",  v50);
      if (v51 != &v66) {
        free(v51);
      }
    }

    BOOL v42 = 0LL;
    if (!v40) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }

  BOOL v42 = sub_1003BB2BC(*(void *)a1, v41);
  if (v40) {
LABEL_72:
  }
    (*(void (**)(std::string::size_type))(*(void *)v40 + 8LL))(v40);
LABEL_73:
  return v42;
}

void sub_1001454C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, uint64_t a40, uint64_t a41, void *a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, uint64_t a49, void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
  }
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void sub_1001456BC( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, std::string *a6@<X8>)
{
  if (!*(_BYTE *)(a1 + 8))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    uint64_t v27 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all",  (uint8_t *)&v51,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_42;
    }
    bzero(&v51, 0x65CuLL);
    if (qword_1019348D0 == -1)
    {
LABEL_61:
      std::string::size_type v34 = p_vtable[283];
      LOWORD(__p) = 0;
      int v35 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v51,  1628LL,  &_mh_execute_header,  v34,  0LL,  "#Warning Table is not valid so we can't select all",  &__p,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEven tTriggersForLearningMeasurements(const std::vector<CLMicroLocationProto::EventType> &, uint32_t, const std::stri ng &, std::optional<boost::uuids::uuid>)",  "%s\n",  (const char *)v35);
      if (v35 != &v51) {
        free(v35);
      }
LABEL_42:
      a6->__r_.__value_.__r.__words[0] = 0LL;
      a6->__r_.__value_.__l.__size_ = 0LL;
      a6->__r_.__value_.__l.__cap_ = 0LL;
      return;
    }

void sub_100145BBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47, uint64_t a48, void *__p, uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  _Unwind_Resume(a1);
}

void sub_100145D04(int **a1@<X0>, std::string *a2@<X8>)
{
  v76.__r_.__value_.__s.__size_ = 14;
  strcpy((char *)&v76, "(SELECT *,MIN(");
  uint64_t v4 = std::string::append(&v76, "RowId");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v77, ") FROM ");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v8 = std::string::append(&v78, "MicroLocationRecordingEvents");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v10 = std::string::append(&v79, " WHERE ");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v12 = std::string::append(&v80, "RecordingUUID");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v14 = std::string::append(&v81, " IN (");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v16 = std::string::append(&v82, "SELECT ");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v18 = std::string::append(&v83, "RecordingUUID");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v20 = std::string::append(&v84, " FROM ");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v22 = std::string::append(&v85, "MicroLocationRecordingEvents");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v24 = std::string::append(&v86, " WHERE ");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v26 = std::string::append(&v87, "EventType");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v28 = std::string::append(&v88, "=");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&__p, 1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  __int128 v32 = std::string::append(&v89, (const std::string::value_type *)p_p, size);
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v90.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v34 = std::string::append(&v90, " AND HEX(");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v36 = std::string::append(&v91, "Event");
  __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v92.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0LL;
  v36->__r_.__value_.__l.__cap_ = 0LL;
  v36->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v38 = std::string::append(&v92, ") LIKE ");
  __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0LL;
  v38->__r_.__value_.__l.__cap_ = 0LL;
  v38->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v40 = std::string::append(&v93, "'080111________________1A021002%'");
  __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v94.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0LL;
  v40->__r_.__value_.__l.__cap_ = 0LL;
  v40->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v42 = std::string::append(&v94, ")");
  __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v95.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0LL;
  v42->__r_.__value_.__l.__cap_ = 0LL;
  v42->__r_.__value_.__r.__words[0] = 0LL;
  std::string v44 = std::string::append(&v95, " AND ");
  __int128 v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__l.__cap_ = v44->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0LL;
  v44->__r_.__value_.__l.__cap_ = 0LL;
  v44->__r_.__value_.__r.__words[0] = 0LL;
  std::string v46 = std::string::append(&v96, "RecordingUUID");
  __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v97.__r_.__value_.__l.__cap_ = v46->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0LL;
  v46->__r_.__value_.__l.__cap_ = 0LL;
  v46->__r_.__value_.__r.__words[0] = 0LL;
  std::string v48 = std::string::append(&v97, " IN (");
  __int128 v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__l.__cap_ = v48->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0LL;
  v48->__r_.__value_.__l.__cap_ = 0LL;
  v48->__r_.__value_.__r.__words[0] = 0LL;
  char v50 = std::string::append(&v98, "SELECT ");
  __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0LL;
  v50->__r_.__value_.__l.__cap_ = 0LL;
  v50->__r_.__value_.__r.__words[0] = 0LL;
  char v52 = std::string::append(&v99, "RecordingUUID");
  __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0LL;
  v52->__r_.__value_.__l.__cap_ = 0LL;
  v52->__r_.__value_.__r.__words[0] = 0LL;
  std::string v54 = std::string::append(&v100, " FROM ");
  __int128 v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v101.__r_.__value_.__l.__cap_ = v54->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0LL;
  v54->__r_.__value_.__l.__cap_ = 0LL;
  v54->__r_.__value_.__r.__words[0] = 0LL;
  std::string v56 = std::string::append(&v101, "MicroLocationRecordingEvents");
  __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0LL;
  v56->__r_.__value_.__l.__cap_ = 0LL;
  v56->__r_.__value_.__r.__words[0] = 0LL;
  std::string v58 = std::string::append(&v102, " WHERE ");
  __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v103.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0LL;
  v58->__r_.__value_.__l.__cap_ = 0LL;
  v58->__r_.__value_.__r.__words[0] = 0LL;
  std::string v60 = std::string::append(&v103, "EventType");
  __int128 v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__l.__cap_ = v60->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0LL;
  v60->__r_.__value_.__l.__cap_ = 0LL;
  v60->__r_.__value_.__r.__words[0] = 0LL;
  std::string v62 = std::string::append(&v104, " IN (");
  __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0LL;
  v62->__r_.__value_.__l.__cap_ = 0LL;
  v62->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v104, **a1);
  if ((v104.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string v64 = &v104;
  }
  else {
    std::string v64 = (std::string *)v104.__r_.__value_.__r.__words[0];
  }
  if ((v104.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v65 = v104.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v65 = v104.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v64, v65);
  std::string v66 = *a1;
  float v67 = a1[1];
  for (uint64_t i = v66 + 1; i != v67; ++i)
  {
    v103.__r_.__value_.__s.__size_ = 2;
    strcpy((char *)&v103, ", ");
    std::to_string(&v102, *i);
    if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v69 = &v102;
    }
    else {
      int v69 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v70 = v102.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v70 = v102.__r_.__value_.__l.__size_;
    }
    float v71 = std::string::append(&v103, (const std::string::value_type *)v69, v70);
    __int128 v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__l.__cap_ = v71->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0LL;
    v71->__r_.__value_.__l.__cap_ = 0LL;
    v71->__r_.__value_.__r.__words[0] = 0LL;
    if ((v104.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v73 = &v104;
    }
    else {
      unint64_t v73 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if ((v104.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v74 = v104.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v74 = v104.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)v73, v74);
  }

void sub_100146500(_Unwind_Exception *a1)
{
}

void sub_100146844(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    p_vtable = a2;
    if (*a2 != a2[1])
    {
      v79.__r_.__value_.__s.__size_ = 7;
      strcpy((char *)&v79, " WHERE ");
      __int128 v10 = std::string::append(&v79, "RecordingTimestamp");
      __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v12 = std::string::append(&v80, " > ");
      __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0LL;
      v12->__r_.__value_.__l.__cap_ = 0LL;
      v12->__r_.__value_.__r.__words[0] = 0LL;
      int v14 = *(char *)(a3 + 23);
      if (v14 >= 0) {
        __int128 v15 = (const std::string::value_type *)a3;
      }
      else {
        __int128 v15 = *(const std::string::value_type **)a3;
      }
      if (v14 >= 0) {
        std::string::size_type v16 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v16 = *(void *)(a3 + 8);
      }
      __int128 v17 = std::string::append(&v81, v15, v16);
      __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0LL;
      v17->__r_.__value_.__l.__cap_ = 0LL;
      v17->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v19 = std::string::append(&v82, " AND ");
      __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0LL;
      v19->__r_.__value_.__l.__cap_ = 0LL;
      v19->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v21 = std::string::append(&v83, "RecordingTimestamp");
      __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0LL;
      v21->__r_.__value_.__l.__cap_ = 0LL;
      v21->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v23 = std::string::append(&v84, "<= ");
      __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0LL;
      v23->__r_.__value_.__l.__cap_ = 0LL;
      v23->__r_.__value_.__r.__words[0] = 0LL;
      int v25 = *(char *)(a4 + 23);
      if (v25 >= 0) {
        __int128 v26 = (const std::string::value_type *)a4;
      }
      else {
        __int128 v26 = *(const std::string::value_type **)a4;
      }
      if (v25 >= 0) {
        std::string::size_type v27 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::string::size_type v27 = *(void *)(a4 + 8);
      }
      __int128 v28 = std::string::append(&v85, v26, v27);
      __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      int64_t cap = v28->__r_.__value_.__l.__cap_;
      __int128 __p = v29;
      v28->__r_.__value_.__l.__size_ = 0LL;
      v28->__r_.__value_.__l.__cap_ = 0LL;
      v28->__r_.__value_.__r.__words[0] = 0LL;
      sub_100145D04((int **)p_vtable, &v85);
      v72.__r_.__value_.__s.__size_ = 1;
      LOWORD(v72.__r_.__value_.__l.__data_) = 41;
      __int128 v30 = std::string::append(&v72, " AND ");
      __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0LL;
      v30->__r_.__value_.__l.__cap_ = 0LL;
      v30->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v32 = std::string::append(&v73, "RecordingUUID");
      __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      std::string::size_type v34 = std::string::append(&v74, " IN (");
      __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0LL;
      v34->__r_.__value_.__l.__cap_ = 0LL;
      v34->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v36 = std::string::append(&v75, "SELECT ");
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v38 = std::string::append(&v76, "RecordingUUID");
      __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0LL;
      v38->__r_.__value_.__l.__cap_ = 0LL;
      v38->__r_.__value_.__r.__words[0] = 0LL;
      char v71 = 6;
      strcpy(__s, " FROM ");
      std::string::size_type v40 = std::string::append(&v77, __s, 6uLL);
      __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0LL;
      v40->__r_.__value_.__l.__cap_ = 0LL;
      v40->__r_.__value_.__r.__words[0] = 0LL;
      BOOL v42 = std::string::append(&v78, "MicroLocationRecordingEvents");
      __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0LL;
      v42->__r_.__value_.__l.__cap_ = 0LL;
      v42->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (cap >= 0) {
        std::string::size_type v45 = HIBYTE(cap);
      }
      else {
        std::string::size_type v45 = *((void *)&__p + 1);
      }
      std::string v46 = std::string::append(&v79, p_p, v45);
      __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__l.__cap_ = v46->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0LL;
      v46->__r_.__value_.__l.__cap_ = 0LL;
      v46->__r_.__value_.__r.__words[0] = 0LL;
      std::string v48 = std::string::append(&v80, "))");
      __int128 v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__l.__cap_ = v48->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0LL;
      v48->__r_.__value_.__l.__cap_ = 0LL;
      v48->__r_.__value_.__r.__words[0] = 0LL;
      char v69 = 10;
      strcpy((char *)v68, " GROUP BY ");
      char v50 = std::string::append(&v81, (const std::string::value_type *)v68, 0xAuLL);
      __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0LL;
      v50->__r_.__value_.__l.__cap_ = 0LL;
      v50->__r_.__value_.__r.__words[0] = 0LL;
      char v52 = std::string::append(&v82, "RecordingUUID");
      __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0LL;
      v52->__r_.__value_.__l.__cap_ = 0LL;
      v52->__r_.__value_.__r.__words[0] = 0LL;
      std::string v54 = std::string::append(&v83, ")");
      __int128 v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__l.__cap_ = v54->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0LL;
      v54->__r_.__value_.__l.__cap_ = 0LL;
      v54->__r_.__value_.__r.__words[0] = 0LL;
      if ((v84.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v56 = &v84;
      }
      else {
        std::string v56 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if ((v84.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v84.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v84.__r_.__value_.__l.__size_;
      }
      std::string::append(&v85, (const std::string::value_type *)v56, size);
      if (v69 < 0) {
        operator delete(v68[0]);
      }
      if (v71 < 0) {
        operator delete(*(void **)__s);
      }
      sub_1002F0B04(&v84);
      CFStringRef v58 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsDatabaseSelectionLimit", 0x8000100u, kCFAllocatorNull);
      int v59 = sub_1002A77CC((uint64_t)v84.__r_.__value_.__l.__data_, (uint64_t)v58, &v83);
      CFRelease(v58);
      unsigned int data = v83.__r_.__value_.__l.__data_;
      __int128 v61 = (std::__shared_weak_count *)v84.__r_.__value_.__l.__size_;
      if (v84.__r_.__value_.__l.__size_)
      {
        std::string v62 = (unint64_t *)(v84.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }

      uint64_t v64 = *(void *)a1;
      sub_1010DDBC0(&v84, "RecordingTimestamp");
      if (v59) {
        unsigned int v65 = data;
      }
      else {
        unsigned int v65 = 5000;
      }
      sub_100142E04(v64, (uint64_t)&v85, v65, (uint64_t)&v84, a5);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)__p);
      }
      return;
    }

    sub_10122E704();
    __break(1u);
    goto LABEL_92;
  }

  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_1019348D0 != -1) {
LABEL_92:
  }
    dispatch_once(&qword_1019348D0, &stru_101820EA0);
  std::string v66 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all",  (uint8_t *)&__p,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    LOWORD(v85.__r_.__value_.__l.__data_) = 0;
    float v67 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all",  &v85,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEvents WithScanMeasurementsBetweenTimes(const std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &)",  "%s\n",  v67);
  }

  a5->__r_.__value_.__r.__words[0] = 0LL;
  a5->__r_.__value_.__l.__size_ = 0LL;
  a5->__r_.__value_.__l.__cap_ = 0LL;
}

void sub_100147040( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1001472A4(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v42.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v42, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v42, "MicroLocationRecordingEvents");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v6 = std::string::append(&v43, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v8 = std::string::append(&v44, "ReceivedTimestamp");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v10 = std::string::append(&v45, " IN (");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v12 = std::string::append(&v46, "SELECT ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    int v14 = std::string::append(&v47, "ReceivedTimestamp");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v16 = std::string::append(&v48, " FROM ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v18 = std::string::append(&v49, "MicroLocationRecordingEvents");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v20 = std::string::append(&v50, " ORDER BY ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v22 = std::string::append(&v51, "ReceivedTimestamp");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v24 = std::string::append(&v52, " LIMIT ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v41, a2);
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v26 = &v41;
    }
    else {
      __int128 v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v41.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    __int128 v28 = std::string::append(&v53, (const std::string::value_type *)v26, size);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v30 = std::string::append(&v56, ")");
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t cap = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 __p = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v32 = (char *)__p;
    }
    else {
      __int128 v32 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v32, &v56);
    std::string::size_type v33 = v56.__r_.__value_.__r.__words[0];
    std::string::size_type v34 = (sqlite3_stmt *)sub_100019240((uint64_t)v56.__r_.__value_.__l.__data_);
    if (v34)
    {
      BOOL v35 = sub_1003BB2BC(*(void *)a1, v34);
      if (!v33) {
        goto LABEL_42;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820EA0);
      }
      __int128 v38 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v56,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v56, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820EA0);
        }
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        std::string::size_type v40 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v53,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingEventsTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v40);
        if (v40 != &v56) {
          free(v40);
        }
      }

      BOOL v35 = 0LL;
      if (!v33) {
        goto LABEL_42;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v33 + 8LL))(v33);
LABEL_42:
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    return v35;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820EA0);
  }
  __int128 v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v56.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't deleteOldestRows",  (uint8_t *)&v56,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v56, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    LOWORD(__p[0]) = 0;
    __int128 v39 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't deleteOldestRows",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecordingEventsTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v39);
    if (v39 != &v56) {
      free(v39);
    }
  }

  return 0LL;
}

void sub_10014791C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100147AAC( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, unsigned int a5@<W4>, std::string *a6@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v45.__r_.__value_.__s.__size_ = 7;
    strcpy((char *)&v45, " WHERE ");
    __int128 v12 = std::string::append(&v45, "RecordingTimestamp");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    int v14 = std::string::append(&v46, " > ");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      __int128 v17 = (const std::string::value_type *)a2;
    }
    else {
      __int128 v17 = *(const std::string::value_type **)a2;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(a2 + 8);
    }
    __int128 v19 = std::string::append(&v47, v17, v18);
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v21 = std::string::append(&v48, " AND ");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v23 = std::string::append(&v49, "RecordingTimestamp");
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v25 = std::string::append(&v50, "<= ");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    int v27 = *(char *)(a3 + 23);
    if (v27 >= 0) {
      __int128 v28 = (const std::string::value_type *)a3;
    }
    else {
      __int128 v28 = *(const std::string::value_type **)a3;
    }
    if (v27 >= 0) {
      std::string::size_type v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v29 = *(void *)(a3 + 8);
    }
    __int128 v30 = std::string::append(&v51, v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v32 = std::string::append(&v52, " AND ");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(v41, "RtLoiGroupId");
    sub_100053C78((const void **)v41, a4, (uint64_t)__p);
    if ((v44 & 0x80u) == 0) {
      std::string::size_type v34 = __p;
    }
    else {
      std::string::size_type v34 = (void **)__p[0];
    }
    if ((v44 & 0x80u) == 0) {
      std::string::size_type v35 = v44;
    }
    else {
      std::string::size_type v35 = (std::string::size_type)__p[1];
    }
    __int128 v36 = std::string::append(&v53, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    std::string::size_type cap = v36->__r_.__value_.__l.__cap_;
    __int128 buf = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v38 = *(void *)a1;
    std::operator+<char>(&v53, "MicroLocationRecordingEvents", &buf);
    sub_1010DDBC0(&v52, "RecordingTimestamp");
    sub_100142E04(v38, (uint64_t)&v53, a5, (uint64_t)&v52, a6);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)buf);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    __int128 v39 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820EA0);
      }
      LOWORD(v53.__r_.__value_.__l.__data_) = 0;
      std::string::size_type v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all",  &v53,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEven tsBetweenTimesAtLoi(const std::string &, const std::string &, const boost::uuids::uuid &, uint32_t)",  "%s\n",  v40);
    }

    a6->__r_.__value_.__r.__words[0] = 0LL;
    a6->__r_.__value_.__l.__size_ = 0LL;
    a6->__r_.__value_.__l.__cap_ = 0LL;
  }

void sub_100147F70(_Unwind_Exception *a1)
{
}

void sub_1001480B0()
{
}

void sub_1001480B8()
{
}

void sub_1001480C0()
{
}

double sub_1001480C8(uint64_t *a1)
{
  v13.__r_.__value_.__s.__size_ = 11;
  strcpy((char *)&v13, "SELECT MIN(");
  uint64_t v2 = std::string::append(&v13, "RecordingTimestamp");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v4 = std::string::append(&v17, ") FROM ");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v16, "MicroLocationRecordingEvents");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t cap = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v8 = (char *)__p;
  }
  else {
    __int128 v8 = (char *)__p[0];
  }
  sub_1003C0D54(*a1, v8, &v16);
  std::string::size_type v9 = v16.__r_.__value_.__r.__words[0];
  __int128 v10 = (sqlite3_stmt *)sub_100019240((uint64_t)v16.__r_.__value_.__l.__data_);
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  if (j__sqlite3_step(v10) == 100) {
    double Current_1 = sqlite3_column_double(v10, 0);
  }
  sqlite3_reset(v10);
  if (v9) {
    (*(void (**)(std::string::size_type))(*(void *)v9 + 8LL))(v9);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return Current_1;
}

#error "100148374: call analysis failed (funcsize=74)"
void sub_10014844C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  double v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  void *v19[2];
  std::string::size_type cap;
  std::string v21;
  void *v22;
  char v23;
  void v24[2];
  v18.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v18, " WHERE ");
  uint64_t v4 = std::string::insert(&v18, 0LL, "MicroLocationRecordingEvents");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v14, "RtLoiGroupId");
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100053C78((const void **)v14, v24, (uint64_t)__p);
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    __int128 v7 = v17;
  }
  else {
    __int128 v7 = (std::string::size_type)__p[1];
  }
  __int128 v8 = std::string::append(&v21, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t cap = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 v19 = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  __int128 v10 = *a1;
  sub_1010DDBC0(&v21, "RecordingTimestamp");
  sub_100142E04(v10, (uint64_t)v19, 1u, (uint64_t)&v21, &v18);
  *a2 = 0;
  a2[64] = 0;
  if (v18.__r_.__value_.__r.__words[0] != v18.__r_.__value_.__l.__size_)
  {
    __int128 v11 = *(double *)(v18.__r_.__value_.__r.__words[0] + 16);
    sub_1010DDBC0(v12, "home");
    sub_100051570((uint64_t)&v21, 0LL, 0LL, 0LL, 0LL, (__int128 *)v12, v11);
    sub_100148760((uint64_t)a2, (uint64_t)&v21);
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  sub_10001A350((void ***)&v21);
  if (SHIBYTE(cap) < 0) {
    operator delete(v19[0]);
  }
}

void sub_100148670( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, uint64_t *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, void *__p, uint64_t a49, int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  a40 = &a27;
  sub_10001A350((void ***)&a40);
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100148760(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v5 = *(void *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v5;
  uint64_t v7 = a1 + 40;
  if (v4)
  {
    __int128 v8 = *(_OWORD *)(a2 + 40);
    *(void *)(v7 + 16) = *(void *)(a2 + 56);
    *(_OWORD *)uint64_t v7 = v8;
    *(_BYTE *)(a2 + 63) = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }

  else
  {
    __int128 v9 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)uint64_t v7 = v9;
    *(void *)(a2 + 48) = 0LL;
    *(void *)(a2 + 56) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    *(_BYTE *)(a1 + 64) = 1;
  }

  return a1;
}

void sub_1001487F4(uint64_t a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_1010DDBC0(&v19, "MicroLocationRecordingEvents");
    __int128 v6 = std::string::append(&v19, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(v15, "RtLoiGroupId");
    sub_100053C78((const void **)v15, a2, (uint64_t)__p);
    if ((v18 & 0x80u) == 0) {
      __int128 v8 = __p;
    }
    else {
      __int128 v8 = (void **)__p[0];
    }
    if ((v18 & 0x80u) == 0) {
      std::string::size_type v9 = v18;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    __int128 v10 = std::string::append(&v20, (const std::string::value_type *)v8, v9);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type cap = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 buf = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v12 = *(void *)a1;
    sub_1010DDBC0(&v19, "RecordingTimestamp");
    sub_100142E04(v12, (uint64_t)buf, 1u, (uint64_t)&v19, &v20);
    if (v20.__r_.__value_.__r.__words[0] == v20.__r_.__value_.__l.__size_)
    {
      *a3 = 0;
      a3[240] = 0;
    }

    else
    {
      sub_100148F78((uint64_t)a3, (__int128 *)v20.__r_.__value_.__l.__data_);
    }

    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    sub_10001A350((void ***)&v19);
    if (SHIBYTE(cap) < 0) {
      operator delete(*(void **)buf);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    std::string v13 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't get most recent recording for supplied LOI Group Id",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820EA0);
      }
      LOWORD(v20.__r_.__value_.__l.__data_) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't get most recent recording for supplied LOI Group Id",  &v20,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::getMostRecentReco rdingForLoiGroupId(const boost::uuids::uuid &)",  "%s\n",  v14);
    }

    *a3 = 0;
    a3[240] = 0;
  }

void sub_100148AF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void **a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
  a24 = &a30;
  sub_10001A350(&a24);
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100148BA0(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100148BCC@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v6 = sqlite3_column_blob(a1, a2);
  uint64_t v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
  {
    sub_10122E950(v7);
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1010DDBC0(&v12, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_101819400;
  }

  int v8 = v7;
  sub_100063A68(a3);
  uint64_t result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v9, v6, v8);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  return result;
}

void sub_100148C94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_100086708(v15);
      _Unwind_Resume(a1);
    }
  }

  else if (!v17)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_100148CDC( uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, double *a5, int *a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x111111111111111LL) {
    sub_100007008();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v11) {
    unint64_t v11 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888LL) {
    unint64_t v19 = 0x111111111111111LL;
  }
  else {
    unint64_t v19 = v11;
  }
  __int128 v28 = a1 + 2;
  if (v19)
  {
    unint64_t v23 = v10;
    std::string v20 = (char *)sub_10001D66C((uint64_t)(a1 + 2), v19);
    unint64_t v10 = v23;
  }

  else
  {
    std::string v20 = 0LL;
  }

  __int128 v24 = v20;
  __int128 v25 = &v20[240 * v10];
  int v27 = &v20[240 * v19];
  sub_100148E3C((uint64_t)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  __int128 v26 = v25 + 240;
  sub_10001D5F8(a1, &v24);
  uint64_t v21 = a1[1];
  sub_10001D7FC(&v24);
  return v21;
}

void sub_100148E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100148E3C( uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, double *a6, int *a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  double v16 = *a4;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a5, *(void *)(a5 + 8));
  }

  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a5;
    uint64_t v22 = *(void *)(a5 + 16);
  }

  double v17 = *a6;
  int v18 = *a7;
  if (*(char *)(a9 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a9, *(void *)(a9 + 8));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)a9;
    uint64_t v20 = *(void *)(a9 + 16);
  }

  sub_100141FA8(a2, v14, v15, (__int128 *)__dst, v18, v16, v17, a8, (uint64_t)__p, a8, *a10, a10[1]);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100148F44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100148F78(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }

  __int128 v6 = a2[3];
  *(_OWORD *)(a1 + 60) = *(__int128 *)((char *)a2 + 60);
  *(_OWORD *)(a1 + 48) = v6;
  sub_1000865CC(a1 + 80);
  __int128 v7 = *(__int128 *)((char *)a2 + 216);
  *(_BYTE *)(a1 + sub_1000A7938(v33 - 232) = *((_BYTE *)a2 + 232);
  *(_OWORD *)(a1 + 216) = v7;
  *(_BYTE *)(a1 + 240) = 1;
  return a1;
}

void sub_100149018(_Unwind_Exception *exception_object)
{
}

double sub_100149034@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100149078( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100149094(std::string *a1)
{
  return sub_10003E884(a1);
}

uint64_t sub_1001490F0(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "RecordingTimestamp");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v4 = __p;
  }
  else {
    __int128 v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100149198( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001491CC(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "TriggerUUID");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v4 = __p;
  }
  else {
    __int128 v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100149274( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1001492A8@<D0>(std::string *a1@<X8>)
{
  uint64_t v2 = 9LL;
  do
  {
    if (v2 == 9)
    {
      v8.__r_.__value_.__s.__size_ = 0;
      v8.__r_.__value_.__s.__data_[0] = 0;
    }

    else
    {
      v8.__r_.__value_.__s.__size_ = 2;
      strcpy((char *)&v8, ", ");
    }

    __int128 v3 = std::string::append(&v8, "?");
    __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t cap = v3->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 __p = v4;
    v3->__r_.__value_.__l.__size_ = 0LL;
    v3->__r_.__value_.__l.__cap_ = 0LL;
    v3->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string::size_type v5 = __p;
    }
    else {
      std::string::size_type v5 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v6 = HIBYTE(cap);
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(&v11, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    --v2;
  }

  while (v2);
  std::string::append(&v11, ")");
  double result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_1001493B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001493FC(std::string **a1, uint64_t a2)
{
  v16.__r_.__value_.__s.__size_ = 1;
  LOWORD(v16.__r_.__value_.__l.__data_) = 44;
  __int128 v4 = std::string::append(&v16, "");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  memset(&__p, 0, sizeof(__p));
  if ((sub_100013090(a2, &__p) & 1) == 0)
  {
    uint64_t v14 = std::bad_cast::bad_cast(&v21);
    v21.__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
    sub_1000139B0((uint64_t)v14);
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string v8 = std::string::append(&v17, (const std::string::value_type *)p_p, size);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v10 = std::string::append(&v18, "");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t cap = v10->__r_.__value_.__l.__cap_;
  __int128 v19 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::string v12 = (const std::string::value_type *)&v19;
  }
  else {
    std::string v12 = (const std::string::value_type *)v19;
  }
  if (cap >= 0) {
    std::string::size_type v13 = HIBYTE(cap);
  }
  else {
    std::string::size_type v13 = *((void *)&v19 + 1);
  }
  std::string::append(*a1, v12, v13);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v19);
  }
}

void sub_100149580( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100149608()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MicroLocationRecordingEvents");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_100141D78((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    __int128 v4 = v17;
  }
  else {
    __int128 v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  std::string::size_type v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  std::string v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_100141E40((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_101993AE0 = v12->__r_.__value_.__l.__cap_;
  xmmword_101993AD0 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_101993AD0,  (void *)&_mh_execute_header);
}

void sub_1001497F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001498A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_1018210B0;
  a1[1] = 0LL;
  std::string::size_type v6 = a1 + 1;
  a1[2] = 0LL;
  a1[3] = 0LL;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
    sub_100008BDC();
  }
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v7 + 48LL))(v22);
  std::string::size_type v11 = *(_OWORD **)a4;
  std::string v12 = *(_OWORD **)(a4 + 8);
  if (*(_OWORD **)a4 != v12)
  {
    while (1)
    {
      uint64_t v13 = *(void *)(a2 + 24);
      if (!v13) {
        sub_100008BDC();
      }
      v26[0] = *v11;
      uint64_t v14 = operator new(0x10uLL);
      std::string::size_type v29 = v14 + 1;
      __int128 v30 = v14 + 1;
      _OWORD *v14 = v26[0];
      std::string __p = v14;
      sub_100029F04(a5, (uint64_t)&__p, v21);
      if (__p)
      {
        std::string::size_type v29 = __p;
        operator delete(__p);
      }

      sub_10003F34C(v21, (uint64_t)v11);
      uint64_t v15 = v11 + 5;
      sub_1000865CC(v26);
      char v27 = 1;
      __int128 v24 = *(v15 - 5);
      char v25 = 1;
      sub_10013A418(v21, (uint64_t)v26, (uint64_t)&v24, v22, &__p);
      if (v27) {
        sub_100086708(v26);
      }
      if (v31)
      {
        unint64_t v16 = a1[2];
        if (v16 >= a1[3])
        {
          uint64_t v17 = sub_100149E94(v6, (uint64_t)&__p);
        }

        else
        {
          sub_10001E008((uint64_t)(a1 + 3), a1[2], (uint64_t)&__p);
          uint64_t v17 = v16 + 192;
        }

        a1[2] = v17;
      }

      sub_10003F6D4((uint64_t)&__p);
      std::string __p = v21;
      sub_10003F8A8((void ***)&__p);
      std::string::size_type v11 = v15 + 10;
      if (v11 == v12) {
        goto LABEL_21;
      }
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018210E8);
    }
    unsigned __int8 v18 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Data source cancelled learning",  (uint8_t *)&__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018210E8);
      }
      LOWORD(v26[0]) = 0;
      std::string v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Data source cancelled learning",  v26,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationFingerprintStdVectorSource::CLMicroLocationFingerprintStdVectorSource(CLMicroLocationFingerprintD ataSources::ShouldCancelFunction, CLMicroLocationFingerprintDataSources::ConfigurationLoaderFunction, const std: :vector<CLMicroLocationRecordingEventsTable::Entry> &, CLMicroLocationDatabase &)",  "%s\n",  v20);
    }
  }

void sub_100149BC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, void *__p, uint64_t a44)
{
}

unint64_t sub_100149C5C(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 6);
}

uint64_t sub_100149C78(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) + 192 * a2;
}

uint64_t sub_100149C88(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[3];
  uint64_t v3 = (uint64_t)(a1 + 3);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = sub_10001DCCC(a1 + 1, a2);
  }

  else
  {
    sub_10001DDD8(v3, *(void *)(v3 - 8), a2);
    uint64_t result = v5 + 192;
    a1[2] = v5 + 192;
  }

  a1[2] = result;
  return result;
}

void sub_100149CDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100149CE4(uint64_t a1)
{
  *(void *)a1 = off_1018210B0;
  uint64_t v3 = (void **)(a1 + 8);
  sub_10001D978(&v3);
  return a1;
}

void sub_100149D28(char *a1)
{
  *(void *)a1 = off_1018210B0;
  uint64_t v2 = (void **)(a1 + 8);
  sub_10001D978(&v2);
  operator delete(a1);
}

void sub_100149D70(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

char *sub_100149D9C(void *a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556LL) {
    sub_100007008();
  }
  uint64_t result = (char *)sub_10001DF10((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[192 * v4];
  return result;
}

uint64_t sub_100149DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10001DDD8(a1, v4, v6);
      v6 += 192LL;
      uint64_t v4 = v12 + 192;
      v12 += 192LL;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_1000F91F0((uint64_t)v9);
  return v4;
}

void sub_100149E80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100149E94(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555LL) {
    sub_100007008();
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556LL * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555LL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_10001DF10((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0LL;
  }
  char v10 = v7;
  uint64_t v11 = &v7[192 * v3];
  uint64_t v13 = &v7[192 * v6];
  sub_10001E008((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 192;
  sub_10001DE9C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10001E110(&v10);
  return v8;
}

void sub_100149F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100149F9C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if (*(void *)(a1 + 24) < *(void *)(a1 + 88))
  {
    sub_10010147C(a2, (uint64_t)&v34);
    if (v35)
    {
      sub_10014AEB8((void *)a1, &v34, a3, (__int128 *)(a1 + 48), (_OWORD *)(a1 + 72));
      goto LABEL_31;
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821108);
    }
    unint64_t v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
      int v24 = 68289283;
      int v25 = 0;
      __int16 v26 = 2082;
      char v27 = "";
      __int16 v28 = 2081;
      uint64_t v29 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Rapport, rapport monitor buffered bad IDS UUID, IDS:%{private, location:escape_only}s}",  (uint8_t *)&v24,  0x1Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821108);
      }
    }

    uint64_t v18 = qword_1019348D8;
    if (!os_signpost_enabled((os_log_t)qword_1019348D8)) {
      goto LABEL_31;
    }
    else {
      uint64_t v19 = *(void *)a2;
    }
    int v24 = 68289283;
    int v25 = 0;
    __int16 v26 = 2082;
    char v27 = "";
    __int16 v28 = 2081;
    uint64_t v29 = v19;
    uint64_t v12 = "Rapport, rapport monitor buffered bad IDS UUID";
    uint64_t v13 = "{msg%{public}.0s:Rapport, rapport monitor buffered bad IDS UUID, IDS:%{private, location:escape_only}s}";
    uint64_t v14 = (os_log_s *)v18;
    uint32_t v15 = 28;
LABEL_30:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v12,  v13,  (uint8_t *)&v24,  v15);
LABEL_31:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821108);
    }
    goto LABEL_33;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101821108);
  }
  unint64_t v6 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
    uint64_t v8 = *(uint64_t **)(a1 + 24);
    int v24 = 68289539;
    int v25 = 0;
    __int16 v26 = 2082;
    char v27 = "";
    __int16 v28 = 2081;
    uint64_t v29 = v7;
    __int16 v30 = 2049;
    char v31 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Rapport, rapport monitor exceeded max entries, IDS:%{private, location:escape_only}s, Size:%{private}lu}",  (uint8_t *)&v24,  0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821108);
    }
  }

  uint64_t v9 = qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    else {
      uint64_t v10 = *(void *)a2;
    }
    uint64_t v11 = *(uint64_t **)(a1 + 24);
    int v24 = 68289539;
    int v25 = 0;
    __int16 v26 = 2082;
    char v27 = "";
    __int16 v28 = 2081;
    uint64_t v29 = v10;
    __int16 v30 = 2049;
    char v31 = v11;
    uint64_t v12 = "Rapport, rapport monitor exceeded max entries";
    uint64_t v13 = "{msg%{public}.0s:Rapport, rapport monitor exceeded max entries, IDS:%{private, location:escape_onl"
          "y}s, Size:%{private}lu}";
    uint64_t v14 = (os_log_s *)v9;
    uint32_t v15 = 38;
    goto LABEL_30;
  }

void sub_10014A3A8(uint64_t a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  for (uint64_t i = *(void **)(a1 + 16); i; uint64_t i = (void *)*i)
  {
    if (i[10] == *(void *)a4 && i[11] == *(void *)(a4 + 8)) {
      sub_10014B274(a5, (uint64_t)(i + 2), (uint64_t)(i + 2));
    }
  }

  std::to_string(&v31, *a2);
  std::to_string(&v30, 1.79769313e308);
  sub_10002C2AC(*(void *)(a1 + 40), (uint64_t)&v31, (uint64_t)&v30, (__int128 *)a4, &v28);
  if (*(_OWORD *)a4 != 0LL)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    __int128 v44 = 0uLL;
    sub_10002C2AC(v12, (uint64_t)&v31, (uint64_t)&v30, &v44, buf);
    sub_10014B550( &v28,  v29,  *(uint64_t *)buf,  *(uint64_t *)v33,  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)v33 - *(void *)buf) >> 4));
    *(void *)&__int128 v44 = buf;
    sub_10003E4DC((void ***)&v44);
  }

  __int16 v26 = a3;
  uint64_t v13 = v29;
  if (v28 != v29)
  {
    uint64_t v14 = (uint64_t ***)(v28 + 64);
    do
    {
      sub_1001014F0(*(v14 - 3), &v44);
      if ((_BYTE)v45)
      {
        sub_10014AEB8((void *)a5, &v44, (__int128 *)*(v14 - 2), (__int128 *)(v14 - 7), v14);
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821108);
        }
        uint32_t v15 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)uint64_t v33 = 2082;
          *(void *)&v33[2] = "";
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Rapport, rapport monitor read bad IDS UUID from DB}",  buf,  0x12u);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821108);
          }
        }

        unint64_t v16 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          *(_DWORD *)__int128 buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)uint64_t v33 = 2082;
          *(void *)&v33[2] = "";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Rapport, rapport monitor read bad IDS UUID from DB",  "{msg%{public}.0s:Rapport, rapport monitor read bad IDS UUID from DB}",  buf,  0x12u);
        }
      }

      uint64_t v17 = v14 + 2;
      v14 += 10;
    }

    while (v17 != (_OWORD *)v13);
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101821108);
  }
  uint64_t v18 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = v28;
    uint64_t v19 = v29;
    if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v21 = &v31;
    }
    else {
      uint64_t v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    else {
      std::string v22 = (uint64_t *)*v26;
    }
    memset(&__p, 0, sizeof(__p));
    if ((sub_100013090(a4, &__p) & 1) == 0)
    {
      int v25 = std::bad_cast::bad_cast((std::bad_cast *)&v44);
      *(void *)&__int128 v44 = &off_101818CB0;
      sub_1000139B0((uint64_t)v25);
    }

    uint64_t v23 = *(void *)(a5 + 24);
    p_p = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int128 buf = 68290306;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v33 = 2082;
    *(void *)&v33[2] = "";
    __int16 v34 = 2050;
    unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - v20) >> 4);
    __int16 v36 = 2082;
    __int128 v37 = v21;
    __int16 v38 = 2082;
    __int128 v39 = v22;
    __int16 v40 = 2082;
    std::string v41 = p_p;
    __int16 v42 = 2050;
    uint64_t v43 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:RapportMonitor getDevicesSinceLearnEventTimeAtLoi, Backup Entries:%{public}lu, From time:%{public, location:escape_only}s, LOI type:%{public, location:escape_only}s, LOI id:%{public, loca tion:escape_only}s, Total number of devices:%{public}lu}",  buf,  0x44u);
  }

  *(void *)__int128 buf = &v28;
  sub_10003E4DC((void ***)buf);
}

void sub_10014A7F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, char *a34)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  a34 = &a19;
  sub_10003E4DC((void ***)&a34);
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_10012EBB0(v34);
  _Unwind_Resume(a1);
}

void sub_10014A898(uint64_t a1)
{
  uint64_t v8 = 0LL;
  unint64_t v9 = 0LL;
  unint64_t v10 = 0LL;
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    do
    {
      sub_100063BE8(buf);
      v13 |= 1u;
      unint64_t v3 = *(std::string **)v12;
      if (*(_UNKNOWN **)v12 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unint64_t v3 = (std::string *)operator new(0x18uLL);
        v3->__r_.__value_.__r.__words[0] = 0LL;
        v3->__r_.__value_.__l.__size_ = 0LL;
        v3->__r_.__value_.__l.__cap_ = 0LL;
        *(void *)uint64_t v12 = v3;
      }

      std::string::assign(v3, (const std::string::value_type *)v1 + 16, 0x10uLL);
      v13 |= 2u;
      unint64_t v4 = *(std::string **)&v12[8];
      if (*(_UNKNOWN **)&v12[8] == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unint64_t v4 = (std::string *)operator new(0x18uLL);
        v4->__r_.__value_.__r.__words[0] = 0LL;
        v4->__r_.__value_.__l.__size_ = 0LL;
        v4->__r_.__value_.__l.__cap_ = 0LL;
        *(void *)&v12[8] = v4;
      }

      std::string::operator=(v4, (const std::string *)(v1 + 4));
      unint64_t v5 = v9;
      if (v9 >= v10)
      {
        uint64_t v6 = sub_10014BC88(&v8, (uint64_t)(v1 + 7), (uint64_t)buf, (_OWORD *)v1 + 5);
      }

      else
      {
        sub_10014BDAC((uint64_t)&v10, v9, (uint64_t)(v1 + 7), (uint64_t)buf, (_OWORD *)v1 + 5);
        uint64_t v6 = v5 + 80;
      }

      unint64_t v9 = v6;
      sub_10008CAFC((wireless_diagnostics::google::protobuf::MessageLite *)buf);
      uint64_t v1 = (uint64_t *)*v1;
    }

    while (v1);
    if (v9 != v8)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821108);
      }
      uint64_t v7 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v12 = 2082;
        *(void *)&void v12[2] = "";
        *(_WORD *)&v12[10] = 2050;
        *(void *)&v12[12] = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v8) >> 4);
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Rapport, back up rapport monitor data to DB, Num Entries:%{public}lu}",  buf,  0x1Cu);
      }

      sub_10014AAF4(*(void *)(a1 + 40), &v8);
    }
  }

  *(void *)__int128 buf = &v8;
  sub_10003E4DC((void ***)buf);
}

void sub_10014AAB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  sub_10003E4DC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10014AAF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unint64_t v5 = *(void **)(a1 + 256);
    if (!v5)
    {
      unint64_t v5 = operator new(0x10uLL);
      sub_10003BD8C((uint64_t)v5, v4);
      uint64_t v6 = *(void **)(a1 + 256);
      *(void *)(a1 + 256) = v5;
      if (v6)
      {
        operator delete(v6);
        unint64_t v5 = *(void **)(a1 + 256);
      }
    }

    uint64_t v7 = sub_10003BE0C((uint64_t)v5, a2);
    sub_10014BE54(a1);
    return v7;
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821108);
    }
    unint64_t v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning Can't insert because the database is invalid",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821108);
      }
      v11[0] = 0;
      unint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Can't insert because the database is invalid",  v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::insertOrReplace(const std::vector<TableEntry> &) [TableEntry = CLMicroLocationRapp ortTable::Entry]",  "%s\n",  v10);
    }

    return 0LL;
  }

void sub_10014AD04(_Unwind_Exception *a1)
{
}

std::string *sub_10014AD20(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

__n128 sub_10014AD28(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)(a1 + 72) = *a2;
  return result;
}

unint64_t sub_10014AD34(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v2 ^= (v2 << 6) + 2654435769u + (v2 >> 2) + *(unsigned __int8 *)(a2 + i);
  unint64_t v4 = 0LL;
  for (uint64_t j = 0LL; j != 16; ++j)
    v4 ^= (v4 << 6) + 2654435769u + (v4 >> 2) + *(unsigned __int8 *)(a2 + 64 + j);
  return 0xC6A4A7935BD1E995LL
       * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v4) ^ ((0xC6A4A7935BD1E995LL * v4) >> 47))) ^ v2)
       + 3864292196u;
}

BOOL sub_10014ADC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 != *(void *)a3 || *(void *)(a2 + 8) != *(void *)(a3 + 8)) {
    return 0LL;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 39);
  size_t v7 = *(void *)(a2 + 24);
  if ((v6 & 0x80u) == 0LL) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 39);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 24);
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 39);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0LL) {
    uint64_t v9 = *(void *)(a3 + 24);
  }
  if (v8 != v9) {
    return 0LL;
  }
  uint64_t v11 = (const void **)(a2 + 16);
  if (v10 >= 0) {
    uint64_t v12 = (unsigned __int8 *)(a3 + 16);
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)(a3 + 16);
  }
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*v11, v12, v7)) {
      return *(void *)(a2 + 64) == *(void *)(a3 + 64) && *(void *)(a2 + 72) == *(void *)(a3 + 72);
    }
    return 0LL;
  }

  if ((_DWORD)v6)
  {
    while (*(unsigned __int8 *)v11 == *v12)
    {
      uint64_t v11 = (const void **)((char *)v11 + 1);
      ++v12;
      if (!--v6) {
        return *(void *)(a2 + 64) == *(void *)(a3 + 64) && *(void *)(a2 + 72) == *(void *)(a3 + 72);
      }
    }

    return 0LL;
  }

  return *(void *)(a2 + 64) == *(void *)(a3 + 64) && *(void *)(a2 + 72) == *(void *)(a3 + 72);
}

void sub_10014AE8C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void *sub_10014AEB8(void *a1, _OWORD *a2, __int128 *a3, __int128 *a4, _OWORD *a5)
{
  uint64_t v6 = sub_10014AFD0(a1, v9[0]);
  if ((v7 & 1) != 0) {
    v9[0] = 0LL;
  }
  sub_10014B230((uint64_t)v9, 0LL);
  return v6;
}

void sub_10014AF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_10014AF2C@<X0>( uint64_t a1@<X0>, _OWORD *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a1 + 16;
  uint64_t v12 = operator new(0x60uLL);
  *(void *)a6 = v12;
  *(void *)(a6 + 8) = v11;
  *(_BYTE *)(a6 + 16) = 0;
  *uint64_t v12 = 0LL;
  v12[1] = 0LL;
  uint64_t v13 = sub_10014B03C((uint64_t)(v12 + 2), a2, a3, a4, a5);
  *(_BYTE *)(a6 + 16) = 1;
  unint64_t result = sub_10014AD34(v13, v13);
  v12[1] = result;
  return result;
}

void sub_10014AFB8(_Unwind_Exception *a1)
{
}

void *sub_10014AFD0(void *a1, void *a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = (uint64_t)(a2 + 2);
  unint64_t v5 = sub_10014AD34((uint64_t)a1, (uint64_t)(a2 + 2));
  v2[1] = v5;
  uint64_t v6 = sub_10014B0EC((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  sub_10010F940(a1, v2);
  return v2;
}

uint64_t sub_10014B03C(uint64_t a1, _OWORD *a2, __int128 *a3, __int128 *a4, _OWORD *a5)
{
  *(_OWORD *)a1 = *a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 16), *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v8 = *a3;
    *(void *)(a1 + 32) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }

  uint64_t v9 = (_BYTE *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    sub_1010DD48C(v9, *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v10 = *a4;
    *(void *)(a1 + 56) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v9 = v10;
  }

  *(_OWORD *)(a1 + 64) = *a5;
  return a1;
}

void sub_10014B0D0(_Unwind_Exception *exception_object)
{
}

void *sub_10014B0EC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    __int128 v10 = *(void **)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == a2)
          {
            LOBYTE(a1) = sub_10014ADC0(a1, (uint64_t)(v11 + 2), a3);
            if ((a1 & 1) != 0) {
              return v11;
            }
          }

          else
          {
            if (v8 > 1)
            {
              if (v12 >= v4) {
                v12 %= v4;
              }
            }

            else
            {
              v12 &= v4 - 1;
            }

            if (v12 != v9) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  float v13 = (float)(unint64_t)(*(void *)(v3 + 24) + 1LL);
  float v14 = *(float *)(v3 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1LL;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100019E10(v3, v18);
  }

  return 0LL;
}

void sub_10014B230(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10012EC24((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void *sub_10014B274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = sub_10014AD34(a1, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }

    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            LOBYTE(v7) = sub_10014ADC0(v7, (uint64_t)(v13 + 2), a2);
            if ((v7 & 1) != 0) {
              return v13;
            }
          }

          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }

            else
            {
              v14 &= v9 - 1;
            }

            if (v14 != v3) {
              break;
            }
          }

          float v13 = (void *)*v13;
        }

        while (v13);
      }
    }
  }

  sub_10014B4DC(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }

  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }

      else
      {
        v22 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }

  float v13 = (void *)v24[0];
  v24[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_10014B230((uint64_t)v24, 0LL);
  return v13;
}

void sub_10014B4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10014B4DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  sub_10012F1FC(v7, (uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_10014B538(_Unwind_Exception *a1)
{
}

uint64_t sub_10014B550(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        uint64_t v21 = a3 + 80 * a5;
      }

      else
      {
        uint64_t v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = sub_10014B898(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }

      sub_10014B740((uint64_t)a1, v5, v12, v5 + 80 * a5);
      sub_10014BAF4((uint64_t)v27, v7, v21, v5);
    }

    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x3333333333333333LL * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x333333333333333LL) {
        sub_100007008();
      }
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v13) >> 4);
      unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x199999999999999LL) {
        unint64_t v18 = 0x333333333333333LL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        unint64_t v19 = (char *)sub_10003E20C(v9, v18);
      }
      else {
        unint64_t v19 = 0LL;
      }
      unint64_t v22 = &v19[80 * v15];
      v27[0] = v19;
      v27[1] = v22;
      uint64_t v28 = v22;
      uint64_t v29 = &v19[80 * v18];
      uint64_t v23 = 5 * a5;
      int v24 = &v22[80 * a5];
      uint64_t v25 = 16 * v23;
      do
      {
        sub_10014B940(v30, (uint64_t)v22, v7);
        v22 += 80;
        v7 += 80LL;
        v25 -= 80LL;
      }

      while (v25);
      uint64_t v28 = v24;
      uint64_t v5 = sub_10014B7E8(a1, (uint64_t)v27, v5);
      sub_10003E468(v27);
    }
  }

  return v5;
}

void sub_10014B714( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014B740(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_10014B940(a1 + 16, v8, v10);
      v10 += 80LL;
      v8 += 80LL;
    }

    while (v10 < a3);
  }

  *(void *)(a1 + 8) = v8;
  return sub_10014BA40((uint64_t)&v12, a2, v7, v6);
}

void sub_10014B7E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10014B7E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_10003E250((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = sub_10014BB8C(v7, a3, a1[1], *(__n128 **)(a2 + 16));
  uint64_t v9 = *a1;
  *a1 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = a1[1];
  a1[1] = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v10;
  uint64_t v11 = a1[2];
  a1[2] = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v11;
  *(void *)a2 = *(void *)(a2 + 8);
  return v6;
}

uint64_t sub_10014B898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10014B940(a1, v4, v6);
      v6 += 80LL;
      uint64_t v4 = v12 + 80;
      v12 += 80LL;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_10014B9BC((uint64_t)v9);
  return v4;
}

void sub_10014B92C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_10014B940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  __int128 v5 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v5;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 8) = 0LL;
  sub_10008CAF8(a2 + 32, a3 + 32);
  __n128 result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

void sub_10014B9A0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10014B9BC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10014B9F0((uint64_t *)a1);
  }
  return a1;
}

void sub_10014B9F0(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 80LL;
      sub_10003E42C(v5, v3);
    }

    while (v3 != v4);
  }

uint64_t sub_10014BA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      *(void *)(a4 + v7 - sub_10000AE14(v1 - 80) = *(void *)(a3 + v7 - 80);
      char v10 = (void **)(a4 + v7 - 72);
      __int128 v11 = *(_OWORD *)(v8 - 72);
      *(void *)(a4 + v7 - 56) = *(void *)(v8 - 56);
      *(_OWORD *)char v10 = v11;
      *(_BYTE *)(v8 - 49) = 0;
      *(_BYTE *)(v8 - 72) = 0;
      sub_10008CF34(v9 - 48, v8 - 48);
      *(_OWORD *)(v9 - 16) = *(_OWORD *)(v8 - 16);
      v7 -= 80LL;
    }

    while (a3 + v7 != a2);
  }

  return a3;
}

uint64_t sub_10014BAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      uint64_t v7 = (void **)(a4 + 8);
      __int128 v8 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      sub_10008CF34(a4 + 32, v5 + 32);
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(v5 + 64);
      a4 += 80LL;
      v5 += 80LL;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

__n128 *sub_10014BB8C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4 = a4;
  __int128 v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10003E318(a1, v4, v6);
      v6 += 80LL;
      uint64_t v4 = v12 + 5;
      v12 += 5;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_10014B9BC((uint64_t)v9);
  return v4;
}

void sub_10014BC20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10014BC34(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_10012EBE8(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

uint64_t sub_10014BC88(uint64_t *a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333LL) {
    sub_100007008();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999LL) {
    unint64_t v10 = 0x333333333333333LL;
  }
  else {
    unint64_t v10 = v6;
  }
  unint64_t v18 = a1 + 2;
  if (v10) {
    __int128 v11 = (char *)sub_10003E20C((uint64_t)(a1 + 2), v10);
  }
  else {
    __int128 v11 = 0LL;
  }
  unint64_t v14 = v11;
  unint64_t v15 = &v11[80 * v5];
  uint64_t v17 = &v11[80 * v10];
  sub_10014BDAC((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  unint64_t v16 = v15 + 80;
  sub_10003E198(a1, &v14);
  uint64_t v12 = a1[1];
  sub_10003E468(&v14);
  return v12;
}

void sub_10014BD98(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10014BDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 16);
  }

  CFAbsoluteTime Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_10003B994(a2, (__int128 *)__p, a4, a5, &Current_1);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10014BE38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10014BE54(uint64_t a1)
{
  unsigned int v2 = sub_1000387F4(a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101821108);
  }
  uint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v10 = "MicroLocationRapport";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicate s a serious problem",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821108);
    }
    int v7 = 136446210;
    __int128 v8 = "MicroLocationRapport";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem",  &v7,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::freeSpaceIfFull() [Table = CLMicroLocationRapportTable]",  "%s\n",  v6);
  }

  BOOL result = sub_100030FAC(a1);
  if (result)
  {
    else {
      uint64_t v5 = *(void *)(a1 + 160);
    }
    sub_1003C1EC0(a1 + 72, v5);
    return 1LL;
  }

  return result;
}

uint64_t sub_10014C048()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRapportTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 1000LL;
  }
}

void sub_10014C108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10014C120()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsAdaptiveAnchorsNumDaysToKeepEnabled",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 10LL;
  }
}

void sub_10014C1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10014C1F8()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsAdaptiveAnchorsNumValidDaysForPurging",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 49LL;
  }
}

void sub_10014C2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10014C2D0()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsAdaptiveAnchorsMaxEntriesInAppearanceMap",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  uint64_t v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 256LL;
  }
}

void sub_10014C390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10014C3A8(uint64_t a1)
{
  int v2 = sub_10014C120();
  int v3 = sub_10014C1F8();
  uint64_t v4 = sub_10014C2D0();
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 44) = v3;
  *(void *)(a1 + 48) = v4;
  return a1;
}

uint64_t sub_10014C3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 16);
  if ((_DWORD)v4)
  {
    uint64_t v5 = 8 * v4;
    unint64_t v6 = *(uint64_t **)(a2 + 8);
    do
    {
      uint64_t v7 = *v6;
      uint64_t v8 = *(uint64_t ***)(*v6 + 24);
      int v9 = *((char *)v8 + 23);
      if (v9 < 0)
      {
        if (v8[1] != (uint64_t *)16)
        {
LABEL_9:
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821128);
          }
          uint64_t v12 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning The protobuf Anchor Appearance struct does not have a valid device ID",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101821128);
            }
            v16[0] = 0;
            LODWORD(v15) = 2;
            uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning The protobuf Anchor Appearance struct does not have a valid device ID",  v16,  v15);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap(const CLMicroLocationProto::anchorA ppearancesVector &)",  "%s\n",  v13);
          }

          goto LABEL_14;
        }

        uint64_t v8 = (uint64_t **)*v8;
      }

      else if (v9 != 16)
      {
        goto LABEL_9;
      }

      __int128 v20 = *(_OWORD *)v8;
      int v10 = *(_DWORD *)(v7 + 32);
      __int128 v11 = *(_OWORD *)(v7 + 8);
      *(_OWORD *)__int128 buf = v20;
      __int128 v18 = v11;
      int v19 = v10;
      sub_10001A044(a1, buf, (uint64_t)buf);
LABEL_14:
      ++v6;
      v5 -= 8LL;
    }

    while (v5);
  }

  return a1;
}

void sub_10014C624(_Unwind_Exception *a1)
{
}

void sub_10014C640(uint64_t a1@<X0>, int *a2@<X8>)
{
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    int v5 = a2[5];
    uint64_t v6 = a2[4];
    if ((int)v6 >= v5)
    {
      if (v5 == a2[6])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2),  v5 + 1);
        int v5 = a2[5];
      }

      a2[5] = v5 + 1;
      uint64_t v8 = sub_10014F000();
      uint64_t v11 = *((void *)a2 + 1);
      uint64_t v12 = a2[4];
      a2[4] = v12 + 1;
      *(void *)(v11 + 8 * v12) = v8;
      if (!v8)
      {
LABEL_10:
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821128);
        }
        uint64_t v13 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Got nullptr from CLMicroLocationProto add_anchorappearances",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821128);
          }
          v16[0] = 0;
          LODWORD(v15) = 2;
          unint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Got nullptr from CLMicroLocationProto add_anchorappearances",  v16,  v15);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLMicroLocationProto::anchorAppearancesVector CLMicroLocationAnchorAppearanceMap::toProtobuf() const",  "%s\n",  v14);
        }

        continue;
      }
    }

    else
    {
      uint64_t v7 = *((void *)a2 + 1);
      a2[4] = v6 + 1;
      uint64_t v8 = *(_DWORD **)(v7 + 8 * v6);
      if (!v8) {
        goto LABEL_10;
      }
    }

    sub_1000633F8((uint64_t)buf);
    __int128 v18 = *((_OWORD *)i + 2);
    int v9 = *((_DWORD *)i + 12);
    v20 |= 7u;
    int v19 = v9;
    sub_10006C3F4((uint64_t)v8, (uint64_t)buf);
    sub_10006BEEC((wireless_diagnostics::google::protobuf::MessageLite *)buf);
    v8[10] |= 8u;
    int v10 = (std::string *)*((void *)v8 + 3);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      int v10 = (std::string *)operator new(0x18uLL);
      v10->__r_.__value_.__r.__words[0] = 0LL;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      *((void *)v8 + 3) = v10;
    }

    std::string::assign(v10, (const std::string::value_type *)i + 16, 0x10uLL);
  }

void sub_10014C8EC(_Unwind_Exception *a1)
{
}

double *sub_10014C918(void *a1, void *a2, double a3, double a4)
{
  BOOL result = (double *)sub_10001A7B8(a1, a2);
  if (result)
  {
    result[5] = a4;
    *((_DWORD *)result + 12) = 0;
  }

  else
  {
    __int128 v9 = *(_OWORD *)a2;
    double v10 = a3;
    double v11 = a4;
    int v12 = 0;
    return (double *)sub_10001A044((uint64_t)a1, &v9, (uint64_t)&v9);
  }

  return result;
}

void sub_10014C9B0(uint64_t a1, void *a2, int a3, double a4, double a5)
{
  uint64_t v9 = *(void *)(a1 + 24);
  if (a3)
  {
    for (uint64_t i = *(void **)(a1 + 16); i; uint64_t i = (void *)*i)
    {
      if (!sub_10004ACA4(a2, i + 2))
      {
        std::string __p = i + 2;
        double v11 = sub_10014F138(a1, i + 2, (uint64_t)&unk_1012CF090, (__int128 **)&__p);
        ++*((_DWORD *)v11 + 12);
      }
    }
  }

  for (uint64_t j = (void *)a2[2]; j; uint64_t j = (void *)*j)
    sub_10014C918((void *)a1, j + 2, a4, a5);
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = *(void *)(a1 + 24);
  unint64_t v15 = v14;
  if (v13)
  {
    do
    {
      if (*(_DWORD *)(v13 + 48) >= *(_DWORD *)(a1 + 44)) {
        uint64_t v13 = sub_10005BE78((void *)a1, (uint64_t *)v13);
      }
      else {
        uint64_t v13 = *(void *)v13;
      }
    }

    while (v13);
    unint64_t v15 = *(void *)(a1 + 24);
  }

  unint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = v15 - v16;
  if (v15 > v16 && v16 != 0)
  {
    std::string __p = 0LL;
    *(void *)std::string v41 = 0LL;
    *(void *)&std::string::value_type v41[8] = 0LL;
    sub_1000A7198(&__p, v15);
    int v19 = *(void **)(a1 + 16);
    if (v19)
    {
      int v20 = *(char **)v41;
      do
      {
        if ((unint64_t)v20 >= *(void *)&v41[8])
        {
          unint64_t v22 = (char *)__p;
          uint64_t v23 = (v20 - (_BYTE *)__p) >> 3;
          unint64_t v24 = v23 + 1;
          uint64_t v25 = *(void *)&v41[8] - (void)__p;
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            char v27 = (char *)sub_1000071BC((uint64_t)&v41[8], v26);
            unint64_t v22 = (char *)__p;
            int v20 = *(char **)v41;
          }

          else
          {
            char v27 = 0LL;
          }

          uint64_t v28 = &v27[8 * v23];
          *(void *)uint64_t v28 = v19[5];
          uint64_t v21 = v28 + 8;
          while (v20 != v22)
          {
            uint64_t v29 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v28 - 1) = v29;
            v28 -= 8;
          }

          std::string __p = v28;
          *(void *)std::string v41 = v21;
          *(void *)&std::string::value_type v41[8] = &v27[8 * v26];
          if (v22) {
            operator delete(v22);
          }
        }

        else
        {
          *(void *)int v20 = v19[5];
          uint64_t v21 = v20 + 8;
        }

        *(void *)std::string v41 = v21;
        int v19 = (void *)*v19;
        int v20 = v21;
      }

      while (v19);
    }

    else
    {
      uint64_t v21 = *(char **)v41;
    }

    unint64_t v30 = 126 - 2 * __clz((v21 - (_BYTE *)__p) >> 3);
    if (v21 == __p) {
      uint64_t v31 = 0LL;
    }
    else {
      uint64_t v31 = v30;
    }
    sub_10014F398((uint64_t)__p, (double *)v21, (uint64_t)&v39, v31, 1);
    __int16 v32 = __p;
    uint64_t v33 = *(void *)(a1 + 16);
    if (!v33 || !v17) {
      goto LABEL_54;
    }
    double v34 = *((double *)__p + *(void *)(a1 + 48) - 1);
    do
    {
      if (v34 < *(double *)(v33 + 40))
      {
        uint64_t v33 = *(void *)v33;
      }

      else
      {
        uint64_t v33 = sub_10005BE78((void *)a1, (uint64_t *)v33);
        --v17;
      }

      if (v33) {
        BOOL v35 = v17 == 0;
      }
      else {
        BOOL v35 = 1;
      }
    }

    while (!v35);
    __int16 v32 = __p;
    if (__p)
    {
LABEL_54:
      *(void *)std::string v41 = v32;
      operator delete(v32);
    }
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101821128);
  }
  __int16 v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = a2[3];
    uint64_t v38 = *(void *)(a1 + 24);
    std::string __p = (void *)68290307;
    *(_WORD *)std::string v41 = 2082;
    *(void *)&v41[2] = "";
    *(_WORD *)&v41[10] = 2049;
    *(void *)&v41[12] = v9;
    __int16 v42 = 2049;
    uint64_t v43 = v37;
    __int16 v44 = 2049;
    unint64_t v45 = v14;
    __int16 v46 = 2049;
    unint64_t v47 = v15;
    __int16 v48 = 2049;
    uint64_t v49 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:updateSeenAnchors, Anchors map initial size:%{private}lu, Received daily IDS ID set size:%{private}lu, Size with new anchors:%{private}lu, Size after purging:%{private}lu, Size after ma x entries limit:%{private}lu}",  (uint8_t *)&__p,  0x44u);
  }

void sub_10014CD40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014CD6C(uint64_t a1, uint64_t a2, double *a3)
{
  if (*(_DWORD *)(a2 + 40) != 1) {
    return 0LL;
  }
  __int128 v9 = *(_OWORD *)(a2 + 16);
  uint64_t result = (uint64_t)sub_10004ACA4((void *)a1, &v9);
  if (!result) {
    return result;
  }
  if ((double v7 = *(double *)(result + 32), *(double *)a2 >= v7)
    && ((double v8 = *(double *)(result + 40), v8 >= *(double *)a2) || *(_DWORD *)(result + 48) < *(_DWORD *)(a1 + 40))
    && *a3 >= v7
    && (v8 >= *a3 || *(_DWORD *)(result + 48) < *(_DWORD *)(a1 + 40)))
  {
    return 1LL;
  }

  else
  {
    return 0LL;
  }

BOOL sub_10014CE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = v27;
  unint64_t v26 = v25;
  v27[0] = &off_101821170;
  v23[0] = &off_101821290;
  unint64_t v24 = v23;
  v25[0] = &off_101821200;
  sub_10013BD3C((uint64_t)v29, (uint64_t)v27, (uint64_t)v25, (uint64_t)v23);
  uint64_t v4 = v24;
  if (v24 == v23)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v23;
  }

  else
  {
    if (!v24) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t v6 = v26;
  if (v26 == v25)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v25;
  }

  else
  {
    if (!v26) {
      goto LABEL_11;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  double v8 = v28;
  if (v28 == v27)
  {
    uint64_t v9 = 4LL;
    double v8 = v27;
  }

  else
  {
    if (!v28) {
      goto LABEL_16;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  uint64_t v10 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v10 == -1) {
    sub_10013B58C();
  }
  uint64_t v21 = v29;
  v22[0] = ((uint64_t (*)(_BYTE **, uint64_t))off_101821148[v10])(&v21, a2 + 16);
  v22[1] = v11;
  int v12 = (double *)sub_10004ACA4((void *)a1, v22);
  BOOL v13 = v12 && *(double *)a2 >= v12[4] && (v12[5] >= *(double *)a2 || *((_DWORD *)v12 + 12) < *(_DWORD *)(a1 + 40));
  unint64_t v14 = v34;
  if (v34 == v33)
  {
    uint64_t v15 = 4LL;
    unint64_t v14 = v33;
  }

  else
  {
    if (!v34) {
      goto LABEL_28;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_28:
  unint64_t v16 = v32;
  if (v32 == v31)
  {
    uint64_t v17 = 4LL;
    unint64_t v16 = v31;
  }

  else
  {
    if (!v32) {
      goto LABEL_33;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_33:
  __int128 v18 = v30;
  if (v30 == v29)
  {
    uint64_t v19 = 4LL;
    __int128 v18 = v29;
    goto LABEL_37;
  }

  if (v30)
  {
    uint64_t v19 = 5LL;
LABEL_37:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }

  return v13;
}

void sub_10014D0A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void *sub_10014D154(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t)result;
    do
    {
      int v5 = *(_DWORD *)(v2 + 104);
      if ((v5 & 0x40) != 0)
      {
        uint64_t v8 = *(void *)(v2 + 80);
        if (!v8) {
          uint64_t v8 = *(void *)(qword_1019A0818 + 48);
        }
        if ((*(_BYTE *)(v8 + 64) & 0x80) == 0) {
          goto LABEL_15;
        }
        uint64_t v7 = *(uint64_t ***)(v8 + 48);
      }

      else
      {
        if ((v5 & 0x80) == 0) {
          goto LABEL_15;
        }
        uint64_t v6 = *(void *)(v2 + 88);
        if (!v6) {
          uint64_t v6 = *(void *)(qword_1019A0818 + 56);
        }
        if ((*(_BYTE *)(v6 + 56) & 0x10) == 0) {
          goto LABEL_15;
        }
        uint64_t v7 = *(uint64_t ***)(v6 + 32);
      }

      uint64_t result = sub_1001014F0(v7, &v9);
      if (v10) {
        uint64_t result = sub_10001A568(v4, &v9, &v9);
      }
LABEL_15:
      v2 += 120LL;
    }

    while (v2 != v3);
  }

  return result;
}

uint64_t sub_10014D234(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  uint64_t v3 = *(int *)(a2 + 16);
  if ((_DWORD)v3)
  {
    uint64_t v4 = *(uint64_t **)(a2 + 8);
    int v5 = &v4[v3];
    do
    {
      uint64_t v6 = *v4;
      sub_1001014F0(*(uint64_t ***)(*v4 + 32), &v20);
      if (v21)
      {
        memset(buf, 0, sizeof(buf));
        int v19 = 1065353216;
        uint64_t v7 = *(int *)(v6 + 16);
        if ((_DWORD)v7)
        {
          uint64_t v8 = *(uint64_t **)(v6 + 8);
          uint64_t v9 = 8 * v7;
          do
          {
            uint64_t v10 = *v8;
            uint64_t v11 = *(__int128 **)(*v8 + 24);
            if (*((char *)v11 + 23) < 0)
            {
              sub_1010DD48C(__p, *(void **)v11, *((void *)v11 + 1));
            }

            else
            {
              __int128 v12 = *v11;
              uint64_t v17 = *((void *)v11 + 2);
              *(_OWORD *)std::string __p = v12;
            }

            __n128 v15 = 0uLL;
            __n128 v15 = *(__n128 *)(v10 + 8);
            sub_10015000C((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)__p, &v15);
            if (SHIBYTE(v17) < 0) {
              operator delete(__p[0]);
            }
            ++v8;
            v9 -= 8LL;
          }

          while (v9);
        }

        sub_100150344(a1, &v20, &v20, (uint64_t *)buf);
        sub_10004AD90((uint64_t)buf);
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821128);
        }
        BOOL v13 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, the protobuf ClusterAnchorValueStatistics struct doesn not have a valid cluster UUID}",  buf,  0x12u);
        }
      }

      ++v4;
    }

    while (v4 != v5);
  }

  return a1;
}

void sub_10014D42C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
}

uint64_t sub_10014D470(uint64_t a1, uint64_t a2, void *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (sub_100097CA8(a2))
  {
    __int128 v101 = 0u;
    __int128 v102 = 0u;
    int v103 = 1065353216;
    uint64_t v85 = a2;
    int v5 = *(void **)(a2 + 272);
    if (v5)
    {
      uint64_t v6 = 0LL;
      do
      {
        __int128 v98 = 0uLL;
        *(void *)&__int128 v99 = 0LL;
        uint64_t v8 = (void *)v5[4];
        uint64_t v7 = (void *)v5[5];
        while (v8 != v7)
        {
          sub_10005F5B4(a3, v8, buf);
          if (v113)
          {
            uint64_t v9 = *((void *)&v98 + 1);
            if (*((void *)&v98 + 1) >= (unint64_t)v99)
            {
              uint64_t v10 = sub_10001DCCC((uint64_t *)&v98, (uint64_t)buf);
            }

            else
            {
              sub_10001DDD8((uint64_t)&v99, *((uint64_t *)&v98 + 1), (uint64_t)buf);
              uint64_t v10 = v9 + 192;
            }

            *((void *)&v98 + 1) = v10;
            ++v6;
          }

          sub_10003F6D4((uint64_t)buf);
          v8 += 2;
        }

        *(void *)&v96[0] = v5 + 2;
        uint64_t v11 = (__int128 *)(sub_10001D9FC((uint64_t)&v101, v5 + 2, (uint64_t)&unk_1012CF090, (_OWORD **)v96) + 4);
        if (v11 != &v98) {
          sub_1001505E8( (uint64_t)v11,  v98,  *((uint64_t *)&v98 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v98 + 1) - v98) >> 6));
        }
        *(void *)__int128 buf = &v98;
        sub_10001D978((void ***)buf);
        int v5 = (void *)*v5;
      }

      while (v5);
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821128);
    }
    BOOL v13 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(v85 + 280);
      *(_DWORD *)__int128 buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v105 = 2082;
      v106 = "";
      __int16 v107 = 2050;
      *(void *)v108 = v14;
      *(_WORD *)&v108[8] = 2050;
      *(void *)&v108[10] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationAnchorValueStatisticsMap, start analysis, Num Clusters:%{public}lu, Num Found Fingerprints:%{public}lu}",  buf,  0x26u);
      uint64_t v15 = qword_1019348D0;
    }

    else
    {
      uint64_t v15 = -1LL;
    }

    __int128 v98 = 0u;
    __int128 v99 = 0u;
    int v100 = 1065353216;
    memset(v96, 0, sizeof(v96));
    int v97 = 1065353216;
    __int128 v93 = 0u;
    __int128 v94 = 0u;
    int v95 = 1065353216;
    if (v15 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821128);
    }
    unint64_t v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(v85 + 40);
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v105 = 2082;
      v106 = "";
      __int16 v107 = 2050;
      *(void *)v108 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationAnchorValueStatisticsMap, anchorAppearanceMap, Size:%{public}lu}",  buf,  0x1Cu);
    }

    __int128 v18 = (void *)v102;
    if ((void)v102)
    {
      do
      {
        uint64_t v20 = v18[4];
        uint64_t v19 = v18[5];
        std::string v83 = v18;
        uint64_t v84 = v19;
        while (v20 != v19)
        {
          for (uint64_t i = *(uint64_t **)(v20 + 16); i; uint64_t i = (uint64_t *)*i)
          {
            BOOL v22 = sub_10014CE5C(v85 + 16, (uint64_t)(i + 2));
            if (v22) {
              sub_10001ADB4((uint64_t)&v93, (uint64_t)(i + 2), (_OWORD *)i + 1);
            }
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101821128);
            }
            uint64_t v23 = (os_log_s *)qword_1019348D8;
            if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
            {
              sub_100138810((uint64_t)(i + 2));
              unint64_t v24 = __p;
              if (v92 < 0) {
                unint64_t v24 = (void **)__p[0];
              }
              uint64_t v25 = *((unsigned int *)i + 6);
              double v26 = *((float *)i + 7);
              *(_DWORD *)__int128 buf = 68290050;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v105 = 2082;
              v106 = "";
              __int16 v107 = 1026;
              *(_DWORD *)v108 = v22;
              *(_WORD *)&v108[4] = 2082;
              *(void *)&v108[6] = v24;
              *(_WORD *)&v108[14] = 2050;
              *(void *)&v108[16] = v25;
              __int16 v109 = 2050;
              double v110 = v26;
              _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:measurement, Inserted to set:%{public}hhd, DeviceId:%{public, location: escape_only}s, DataType:%{public}lu, Measured Value:%{public}.3f}",  buf,  0x36u);
              if (v92 < 0) {
                operator delete(__p[0]);
              }
            }
          }

          v20 += 192LL;
          uint64_t v19 = v84;
        }

        __int128 v18 = (void *)*v83;
      }

      while (*v83);
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821128);
    }
    char v27 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v105 = 2082;
      v106 = "";
      __int16 v107 = 2050;
      *(void *)v108 = *((void *)&v94 + 1);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationAnchorValueStatisticsMap, measurement set, Size:%{public}lu}",  buf,  0x1Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821128);
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      for (uint64_t j = (uint64_t *)v94; j; uint64_t j = (uint64_t *)*j)
      {
        int v29 = *((_DWORD *)j + 6);
        sub_100138810((uint64_t)(j + 2));
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821128);
        }
        unint64_t v30 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
        {
          if (v92 >= 0) {
            uint64_t v31 = __p;
          }
          else {
            uint64_t v31 = (void **)__p[0];
          }
          *(_DWORD *)__int128 buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v105 = 2082;
          v106 = "";
          __int16 v107 = 1026;
          *(_DWORD *)v108 = v29;
          *(_WORD *)&v108[4] = 2081;
          *(void *)&v108[6] = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:unique valid anchor, dataType:%{public}d, deviceId:%{private, location:escape_only}s}",  buf,  0x22u);
        }

        if (v92 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    sub_10014E410();
    double v33 = v32;
    sub_10014E4EC();
    BOOL v35 = (void *)v102;
    if ((void)v102)
    {
      double v36 = v34;
      while (1)
      {
        uint64_t v37 = (void *)v35[4];
        std::string v81 = v35;
        std::string v82 = (void *)v35[5];
        if (v37 != v82) {
          break;
        }
LABEL_127:
        BOOL v35 = (void *)*v81;
        if (!*v81) {
          goto LABEL_128;
        }
      }

      uint64_t v38 = v35 + 2;
      while (1)
      {
        char v39 = (uint64_t *)v94;
        if ((void)v94) {
          break;
        }
LABEL_126:
        v37 += 24;
        if (v37 == v82) {
          goto LABEL_127;
        }
      }

      uint64_t v86 = (uint64_t)(v37 + 5);
      while (1)
      {
        int v40 = *((_DWORD *)v39 + 6);
        sub_100138810((uint64_t)(v39 + 2));
        std::string v41 = (float *)sub_1000EF678(v37, (uint64_t)(v39 + 2));
        __int16 v42 = v41;
        if (v41)
        {
          if (v40 == 6)
          {
            float v52 = v41[7];
            *(void *)__int128 buf = v38;
            uint64_t v53 = sub_1001508C4((uint64_t)v96, v38, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
            *(void *)__int128 buf = __p;
            std::string v54 = sub_100150B64((uint64_t)(v53 + 4), (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)buf);
            *((double *)v54 + 5) = *((double *)v54 + 5) + v52;
            *(void *)__int128 buf = v38;
            __int128 v55 = sub_1001508C4((uint64_t)v96, v38, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
            *(void *)__int128 buf = __p;
            unint64_t v47 = sub_100150B64((uint64_t)(v55 + 4), (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)buf);
LABEL_77:
            ++*((_DWORD *)v47 + 12);
LABEL_85:
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101821128);
            }
          }

          else
          {
            if (v40 == 5)
            {
              float v43 = v41[7];
              *(void *)__int128 buf = v38;
              __int16 v44 = sub_1001508C4((uint64_t)&v98, v38, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
              *(void *)__int128 buf = __p;
              unint64_t v45 = sub_100150B64((uint64_t)(v44 + 4), (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)buf);
              *((double *)v45 + 5) = *((double *)v45 + 5) + v43;
              *(void *)__int128 buf = v38;
              __int16 v46 = sub_1001508C4((uint64_t)&v98, v38, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
              *(void *)__int128 buf = __p;
              unint64_t v47 = sub_100150B64((uint64_t)(v46 + 4), (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)buf);
              goto LABEL_77;
            }

            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101821128);
            }
            std::string v56 = (os_log_s *)qword_1019348D8;
            if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v105 = 2082;
              v106 = "";
              __int16 v107 = 1026;
              *(_DWORD *)v108 = v40;
              _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:calculatePerClusterPerAnchorValueStatistics, received unhandled data type, da ta type:%{public}d}",  buf,  0x18u);
              if (qword_1019348D0 != -1) {
                dispatch_once(&qword_1019348D0, &stru_101821128);
              }
            }

            __int128 v57 = (os_log_s *)qword_1019348D8;
            if (os_signpost_enabled((os_log_t)qword_1019348D8))
            {
              *(_DWORD *)__int128 buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v105 = 2082;
              v106 = "";
              __int16 v107 = 1026;
              *(_DWORD *)v108 = v40;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v57,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "calculatePerClusterPerAnchorValueStatistics, received unhandled data type",  "{msg%{public}.0s:calculatePerClusterPerAnchorValueStatistics, received unhandled data type, da ta type:%{public}d}",  buf,  0x18u);
              goto LABEL_85;
            }
          }

          uint64_t v58 = qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
          {
            sub_1001035A8((uint64_t)v38, (uint64_t)v89);
            int v59 = v90;
            std::string v60 = (void **)v89[0];
            sub_1001035A8(v86, (uint64_t)v87);
            __int128 v61 = v89;
            if (v59 < 0) {
              __int128 v61 = v60;
            }
            std::string v62 = v87;
            if (v88 < 0) {
              std::string v62 = (void **)v87[0];
            }
            if (v92 >= 0) {
              unint64_t v63 = __p;
            }
            else {
              unint64_t v63 = (void **)__p[0];
            }
            double v64 = v42[7];
            *(_DWORD *)__int128 buf = 68290307;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v105 = 2082;
            v106 = "";
            __int16 v107 = 2081;
            *(void *)v108 = v61;
            *(_WORD *)&v108[8] = 2082;
            *(void *)&v108[10] = v62;
            *(_WORD *)&v108[18] = 1026;
            *(_DWORD *)&v108[20] = v40;
            __int16 v109 = 2081;
            double v110 = *(double *)&v63;
            __int16 v111 = 2049;
            double v112 = v64;
            unsigned int v65 = (os_log_s *)v58;
            uint64_t v66 = "{msg%{public}.0s:anchor statistics, clusterId:%{private, location:escape_only}s, fingerp"
                  "rint UUID:%{public, location:escape_only}s, dataType:%{public}d, deviceId:%{private, locatio"
                  "n:escape_only}s, measured value:%{private}f}";
LABEL_119:
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, v66, buf, 0x40u);
            if (v88 < 0) {
              operator delete(v87[0]);
            }
            if (v90 < 0) {
              operator delete(v89[0]);
            }
            goto LABEL_123;
          }

          goto LABEL_123;
        }

        if (v40 == 5) {
          break;
        }
        if (v40 == 6)
        {
          *(void *)__int128 buf = v38;
          __int16 v48 = sub_1001508C4((uint64_t)v96, v38, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
          *(void *)__int128 buf = __p;
          uint64_t v49 = sub_100150B64((uint64_t)(v48 + 4), (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)buf);
          *((double *)v49 + 5) = v36 + *((double *)v49 + 5);
          *(void *)__int128 buf = v38;
          std::string v50 = sub_1001508C4((uint64_t)v96, v38, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
          *(void *)__int128 buf = __p;
          std::string v51 = sub_100150B64((uint64_t)(v50 + 4), (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)buf);
LABEL_97:
          ++*((_DWORD *)v51 + 12);
          goto LABEL_105;
        }

        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821128);
        }
        std::string::size_type v70 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v105 = 2082;
          v106 = "";
          __int16 v107 = 1026;
          *(_DWORD *)v108 = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:calculatePerClusterPerAnchorValueStatistics (sentinel), received unhandled data type , data type:%{public}d}",  buf,  0x18u);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821128);
          }
        }

        char v71 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          *(_DWORD *)__int128 buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v105 = 2082;
          v106 = "";
          __int16 v107 = 1026;
          *(_DWORD *)v108 = v40;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v71,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "calculatePerClusterPerAnchorValueStatistics (sentinel), received unhandled data type",  "{msg%{public}.0s:calculatePerClusterPerAnchorValueStatistics (sentinel), received unhandled data type , data type:%{public}d}",  buf,  0x18u);
LABEL_105:
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821128);
          }
        }

        uint64_t v72 = qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
        {
          sub_1001035A8((uint64_t)v38, (uint64_t)v89);
          int v73 = v90;
          std::string v74 = (void **)v89[0];
          sub_1001035A8(v86, (uint64_t)v87);
          std::string v75 = v89;
          if (v73 < 0) {
            std::string v75 = v74;
          }
          std::string v76 = v87;
          if (v88 < 0) {
            std::string v76 = (void **)v87[0];
          }
          if (v92 >= 0) {
            std::string v77 = __p;
          }
          else {
            std::string v77 = (void **)__p[0];
          }
          if (v40 == 5) {
            double v78 = v33;
          }
          else {
            double v78 = v36;
          }
          *(_DWORD *)__int128 buf = 68290307;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v105 = 2082;
          v106 = "";
          __int16 v107 = 2081;
          *(void *)v108 = v75;
          *(_WORD *)&v108[8] = 2082;
          *(void *)&v108[10] = v76;
          *(_WORD *)&v108[18] = 1026;
          *(_DWORD *)&v108[20] = v40;
          __int16 v109 = 2081;
          double v110 = *(double *)&v77;
          __int16 v111 = 2049;
          double v112 = v78;
          unsigned int v65 = (os_log_s *)v72;
          uint64_t v66 = "{msg%{public}.0s:anchor statistics, clusterId:%{private, location:escape_only}s, fingerpri"
                "nt UUID:%{public, location:escape_only}s, dataType:%{public}d, deviceId:%{private, location:es"
                "cape_only}s, setinel value:%{private}f}";
          goto LABEL_119;
        }

void sub_10014E34C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
}

void sub_10014E410()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsClusterAnchorValueStatisticsBleRssiSentinelValue",  0x8000100u,  kCFAllocatorNull);
  sub_1002A832C(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  uint64_t v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_10014E4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10014E4EC()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsClusterAnchorValueStatisticsUwbRangeSentinelValue",  0x8000100u,  kCFAllocatorNull);
  sub_1002A832C(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  uint64_t v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_10014E5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10014E5C4(uint64_t a1, uint64_t a2, int a3)
{
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    for (uint64_t j = (uint64_t *)i[6]; j; uint64_t j = (uint64_t *)*j)
    {
      double v7 = *((double *)j + 5);
      int v8 = *((_DWORD *)j + 12);
      if (a3 == 6)
      {
        double v15 = v7 / (double)v8;
        *(void *)__int128 buf = i + 2;
        unint64_t v16 = sub_1001508C4(a1, i + 2, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
        *(void *)__int128 buf = j + 2;
        *((double *)sub_100150EA4( (uint64_t)(v16 + 4),  (unsigned __int8 *)j + 16,  (uint64_t)&unk_1012CF090,  (__int128 **)buf)
        + 6) = v15;
        *(void *)__int128 buf = i + 2;
        uint64_t v17 = sub_1001508C4(a1, i + 2, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
        *(void *)__int128 buf = j + 2;
        if (*((double *)sub_100150EA4( (uint64_t)(v17 + 4),  (unsigned __int8 *)j + 16,  (uint64_t)&unk_1012CF090,  (__int128 **)buf)
             + 5) == 0.0)
        {
          sub_10014E410();
          uint64_t v19 = v18;
          *(void *)__int128 buf = i + 2;
          uint64_t v20 = sub_1001508C4(a1, i + 2, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
          *(void *)__int128 buf = j + 2;
          *((void *)sub_100150EA4( (uint64_t)(v20 + 4),  (unsigned __int8 *)j + 16,  (uint64_t)&unk_1012CF090,  (__int128 **)buf)
          + 5) = v19;
        }
      }

      else if (a3 == 5)
      {
        double v9 = v7 / (double)v8;
        *(void *)__int128 buf = i + 2;
        uint64_t v10 = sub_1001508C4(a1, i + 2, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
        *(void *)__int128 buf = j + 2;
        *((double *)sub_100150EA4( (uint64_t)(v10 + 4),  (unsigned __int8 *)j + 16,  (uint64_t)&unk_1012CF090,  (__int128 **)buf)
        + 5) = v9;
        *(void *)__int128 buf = i + 2;
        uint64_t v11 = sub_1001508C4(a1, i + 2, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
        *(void *)__int128 buf = j + 2;
        if (*((double *)sub_100150EA4( (uint64_t)(v11 + 4),  (unsigned __int8 *)j + 16,  (uint64_t)&unk_1012CF090,  (__int128 **)buf)
             + 6) == 0.0)
        {
          sub_10014E4EC();
          uint64_t v13 = v12;
          *(void *)__int128 buf = i + 2;
          uint64_t v14 = sub_1001508C4(a1, i + 2, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
          *(void *)__int128 buf = j + 2;
          *((void *)sub_100150EA4( (uint64_t)(v14 + 4),  (unsigned __int8 *)j + 16,  (uint64_t)&unk_1012CF090,  (__int128 **)buf)
          + 6) = v13;
        }
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821128);
        }
        char v21 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v24 = 2082;
          uint64_t v25 = "";
          __int16 v26 = 1026;
          int v27 = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:calculatePerClusterPerAnchorValueStatistics, received unhandled data type, data t ype:%{public}d}",  buf,  0x18u);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821128);
          }
        }

        BOOL v22 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          *(_DWORD *)__int128 buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v24 = 2082;
          uint64_t v25 = "";
          __int16 v26 = 1026;
          int v27 = a3;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "calculatePerClusterPerAnchorValueStatistics, received unhandled data type",  "{msg%{public}.0s:calculatePerClusterPerAnchorValueStatistics, received unhandled data type, data t ype:%{public}d}",  buf,  0x18u);
        }
      }
    }
  }

void sub_10014E964(uint64_t a1@<X0>, int *a2@<X8>)
{
  for (uint64_t i = *(const std::string::value_type **)(a1 + 16); i; uint64_t i = *(const std::string::value_type **)i)
  {
    int v5 = a2[5];
    uint64_t v6 = a2[4];
    if ((int)v6 >= v5)
    {
      if (v5 == a2[6])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2),  v5 + 1);
        int v5 = a2[5];
      }

      a2[5] = v5 + 1;
      int v8 = (int *)sub_10014F0B8();
      uint64_t v20 = *((void *)a2 + 1);
      uint64_t v21 = a2[4];
      a2[4] = v21 + 1;
      *(void *)(v20 + 8 * v21) = v8;
      if (!v8)
      {
LABEL_27:
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821128);
        }
        BOOL v22 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 68289026;
          int v25 = 0;
          __int16 v26 = 2082;
          int v27 = "";
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:got nullptr from CLMicroLocationProto add_clusteranchorvaluestatisticsvector}",  buf,  0x12u);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821128);
          }
        }

        uint64_t v23 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          *(_DWORD *)__int128 buf = 68289026;
          int v25 = 0;
          __int16 v26 = 2082;
          int v27 = "";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "got nullptr from CLMicroLocationProto add_clusteranchorvaluestatisticsvector",  "{msg%{public}.0s:got nullptr from CLMicroLocationProto add_clusteranchorvaluestatisticsvector}",  buf,  0x12u);
        }

        continue;
      }
    }

    else
    {
      uint64_t v7 = *((void *)a2 + 1);
      a2[4] = v6 + 1;
      int v8 = *(int **)(v7 + 8 * v6);
      if (!v8) {
        goto LABEL_27;
      }
    }

    v8[11] |= 2u;
    double v9 = (std::string *)*((void *)v8 + 4);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      double v9 = (std::string *)operator new(0x18uLL);
      v9->__r_.__value_.__r.__words[0] = 0LL;
      v9->__r_.__value_.__l.__size_ = 0LL;
      v9->__r_.__value_.__l.__cap_ = 0LL;
      *((void *)v8 + 4) = v9;
    }

    std::string::assign(v9, i + 16, 0x10uLL);
    for (uint64_t j = (uint64_t *)*((void *)i + 6); j; uint64_t j = (uint64_t *)*j)
    {
      int v11 = v8[5];
      uint64_t v12 = v8[4];
      if ((int)v12 >= v11)
      {
        if (v11 == v8[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v8 + 2),  v11 + 1);
          int v11 = v8[5];
        }

        v8[5] = v11 + 1;
        uint64_t v14 = sub_10014F0F8();
        uint64_t v16 = *((void *)v8 + 1);
        uint64_t v17 = v8[4];
        v8[4] = v17 + 1;
        *(void *)(v16 + 8 * v17) = v14;
        if (!v14)
        {
LABEL_15:
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821128);
          }
          uint64_t v18 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 68289026;
            int v25 = 0;
            __int16 v26 = 2082;
            int v27 = "";
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:got nullptr from CLMicroLocationProto add_anchorvaluestatistics}",  buf,  0x12u);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101821128);
            }
          }

          uint64_t v19 = (os_log_s *)qword_1019348D8;
          if (os_signpost_enabled((os_log_t)qword_1019348D8))
          {
            *(_DWORD *)__int128 buf = 68289026;
            int v25 = 0;
            __int16 v26 = 2082;
            int v27 = "";
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "got nullptr from CLMicroLocationProto add_anchorvaluestatistics",  "{msg%{public}.0s:got nullptr from CLMicroLocationProto add_anchorvaluestatistics}",  buf,  0x12u);
          }

          continue;
        }
      }

      else
      {
        uint64_t v13 = *((void *)v8 + 1);
        v8[4] = v12 + 1;
        uint64_t v14 = *(void **)(v13 + 8 * v12);
        if (!v14) {
          goto LABEL_15;
        }
      }

      *((_DWORD *)v14 + 9) |= 4u;
      double v15 = (std::string *)v14[3];
      if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        double v15 = (std::string *)operator new(0x18uLL);
        v15->__r_.__value_.__r.__words[0] = 0LL;
        v15->__r_.__value_.__l.__size_ = 0LL;
        v15->__r_.__value_.__l.__cap_ = 0LL;
        v14[3] = v15;
      }

      std::string::operator=(v15, (const std::string *)(j + 2));
      *((_DWORD *)v14 + 9) |= 3u;
      *(_OWORD *)(v14 + 1) = *(_OWORD *)(j + 5);
    }
  }

void sub_10014ED8C(_Unwind_Exception *a1)
{
}

void sub_10014EDAC(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  v15 |= 4u;
  uint64_t v6 = v14;
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v6 = (std::string *)operator new(0x18uLL);
    v6->__r_.__value_.__r.__words[0] = 0LL;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v14 = v6;
  }

  std::string::assign(v6, a2, 0x10uLL);
  v15 |= 2u;
  uint64_t v7 = v13;
  if (!v13)
  {
    uint64_t v7 = operator new(0x28uLL);
    sub_10006347C((uint64_t)v7);
    uint64_t v13 = v7;
  }

  sub_10014E964(a1, v11);
  sub_10006DC10(v7, (uint64_t)v11);
  sub_10006D834(v11);
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_10014EF30((uint64_t)v12, (uint64_t)v11, Current_1);
  sub_1010DDBC0(__p, "home");
  sub_10004D03C(a3, (__int128 *)__p, (uint64_t)v11, 0LL, 0LL);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  sub_10008C0E0((wireless_diagnostics::google::protobuf::MessageLite *)v11);
  sub_10008B7BC((wireless_diagnostics::google::protobuf::MessageLite *)v12);
}

void sub_10014EEC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_10014EF30(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 24);
  if (!sub_1000641E0(v6)) {
    __assert_rtn("set_type", "microlocation.pb.h", 21547, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
  }
  int v7 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v7 | 3;
  *(double *)(a2 + 8) = a3;
  sub_100101DD0(a2, a1);
}

void sub_10014EFC0(_Unwind_Exception *a1)
{
}

void sub_10014EFD4(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void *sub_10014F000()
{
  CFStringRef v0 = operator new(0x30uLL);
  sub_1000633F8((uint64_t)v0);
  return v0;
}

void sub_10014F02C(_Unwind_Exception *a1)
{
}

uint64_t sub_10014F040(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 24LL);
  if (!v1) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t sub_10014F068(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 56LL);
  if (!v1) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t sub_10014F090(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 88LL);
  if (!v1) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

void *sub_10014F0B8()
{
  CFStringRef v0 = operator new(0x30uLL);
  sub_100063458((uint64_t)v0);
  return v0;
}

void sub_10014F0E4(_Unwind_Exception *a1)
{
}

void *sub_10014F0F8()
{
  CFStringRef v0 = operator new(0x28uLL);
  sub_100063438(v0);
  return v0;
}

void sub_10014F124(_Unwind_Exception *a1)
{
}

void *sub_10014F138(uint64_t a1, void *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v7 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }

    int v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v12 = operator new(0x38uLL);
  *uint64_t v12 = 0LL;
  v12[1] = v7;
  __int128 v15 = **a4;
  v12[6] = 0LL;
  *((_OWORD *)v12 + 1) = v15;
  *((_OWORD *)v12 + 2) = xmmword_1012CFB80;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1LL;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }
  }

  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t v12 = *v23;
LABEL_44:
    *uint64_t v23 = v12;
    goto LABEL_45;
  }

  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v24 = *(void *)(*v12 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }

    else
    {
      v24 &= v9 - 1;
    }

    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }

void sub_10014F384(_Unwind_Exception *a1)
{
}

uint64_t sub_10014F398(uint64_t result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v8 = (double *)result;
LABEL_2:
  unint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    int v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        double v20 = *v9;
        double v21 = *(a2 - 1);
        if (*v9 < v21)
        {
          double *v9 = v21;
          *(a2 - 1) = v20;
        }

        return result;
      case 3uLL:
        return sub_10014F730(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return sub_10014FA98(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return sub_10014FB18(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2) {
              return (uint64_t)sub_10014FBBC(v9, a2, a2, a3);
            }
            return result;
          }

          unint64_t v14 = v13 >> 1;
          __int128 v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_10014F730(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            sub_10014F730(v9, &v9[v13 >> 1], a2 - 1);
            sub_10014F730(v9 + 1, v15 - 1, a2 - 2);
            sub_10014F730(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_10014F730(v15 - 1, v15, &v9[v14 + 1]);
            double v16 = *v9;
            double *v9 = *v15;
            double *v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          if (*v9 >= *(v9 - 1))
          {
            uint64_t result = (uint64_t)sub_10014F7B8(v9, a2);
            unint64_t v9 = (double *)result;
            goto LABEL_17;
          }

uint64_t sub_10014F730(double *a1, double *a2, double *a3)
{
  double v3 = *a1;
  double v4 = *a2;
  double v5 = *a3;
  if (*a1 < *a2)
  {
    if (v4 < v5)
    {
      *a1 = v5;
      *a3 = v3;
      return 1LL;
    }

    *a1 = v4;
    *a2 = v3;
    if (v3 >= *a3) {
      return 1LL;
    }
    *a2 = *a3;
    *a3 = v3;
    return 2LL;
  }

  if (v4 < v5)
  {
    *a2 = v5;
    *a3 = v4;
    double v6 = *a1;
    if (*a1 >= *a2) {
      return 1LL;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2LL;
  }

  return 0LL;
}

double *sub_10014F7B8(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = *a1;
  if (*(a2 - 1) >= *a1)
  {
    double v6 = a1 + 1;
    do
    {
      double v4 = v6;
      if (v6 >= a2) {
        break;
      }
      ++v6;
    }

    while (*v4 >= v3);
  }

  else
  {
    double v4 = a1;
    do
    {
      double v5 = v4[1];
      ++v4;
    }

    while (v5 >= v3);
  }

  if (v4 < a2)
  {
    do
      double v7 = *--a2;
    while (v7 < v3);
  }

  if (v4 < a2)
  {
    double v8 = *v4;
    double v9 = *a2;
    do
    {
      *double v4 = v9;
      *a2 = v8;
      do
      {
        double v10 = v4[1];
        ++v4;
        double v8 = v10;
      }

      while (v10 >= v3);
      do
      {
        double v11 = *--a2;
        double v12 = v11;
      }

      while (v11 < v3);
      double v9 = v12;
    }

    while (v4 < a2);
  }

  if (v4 - 1 != a1) {
    *a1 = *(v4 - 1);
  }
  *(v4 - 1) = v2;
  return v4;
}

double *sub_10014F870(double *a1, double *a2)
{
  uint64_t v2 = 0LL;
  double v3 = *a1;
  double v4 = *a1;
  do
    double v5 = a1[++v2];
  while (v5 > v4);
  double v6 = &a1[v2];
  double v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      double v9 = *--a2;
    }

    while (v9 <= v4);
  }

  else
  {
    do
      double v8 = *--a2;
    while (v8 <= v4);
  }

  if (v6 < a2)
  {
    double v10 = *a2;
    double v11 = &a1[v2];
    double v12 = a2;
    do
    {
      *double v11 = v10;
      *double v12 = v5;
      do
      {
        double v13 = v11[1];
        ++v11;
        double v5 = v13;
      }

      while (v13 > v4);
      do
      {
        double v14 = *--v12;
        double v15 = v14;
      }

      while (v14 <= v4);
      double v10 = v15;
    }

    while (v11 < v12);
    double v7 = v11 - 1;
  }

  if (v7 != a1) {
    *a1 = *v7;
  }
  double *v7 = v3;
  return v7;
}

BOOL sub_10014F92C(double *a1, double *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      double v6 = *a1;
      double v7 = *(a2 - 1);
      if (*a1 < v7)
      {
        *a1 = v7;
        *(a2 - 1) = v6;
      }

      return result;
    case 3LL:
      sub_10014F730(a1, a1 + 1, a2 - 1);
      return 1LL;
    case 4LL:
      sub_10014FA98(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1LL;
    case 5LL:
      sub_10014FB18(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1LL;
    default:
      double v8 = a1 + 2;
      sub_10014F730(a1, a1 + 1, a1 + 2);
      double v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v10 = 0;
      uint64_t v11 = 24LL;
      break;
  }

  while (1)
  {
    double v12 = *v8;
    double v13 = *v9;
    if (*v8 < *v9)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(double *)((char *)a1 + v14) = v12;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        double v12 = *(double *)((char *)a1 + v14 - 16);
        v14 -= 8LL;
        if (v12 >= v13)
        {
          double v16 = (double *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }

      double v16 = a1;
LABEL_12:
      *double v16 = v13;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }

    double v8 = v9;
    v11 += 8LL;
    if (++v9 == a2) {
      return 1LL;
    }
  }

uint64_t sub_10014FA98(double *a1, double *a2, double *a3, double *a4)
{
  uint64_t result = sub_10014F730(a1, a2, a3);
  double v9 = *a3;
  if (*a3 < *a4)
  {
    *a3 = *a4;
    *a4 = v9;
    double v10 = *a2;
    if (*a2 < *a3)
    {
      *a2 = *a3;
      *a3 = v10;
      double v11 = *a1;
      if (*a1 < *a2)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }

  return result;
}

uint64_t sub_10014FB18(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t result = sub_10014FA98(a1, a2, a3, a4);
  double v11 = *a4;
  if (*a4 < *a5)
  {
    *a4 = *a5;
    *a5 = v11;
    double v12 = *a3;
    if (*a3 < *a4)
    {
      *a3 = *a4;
      *a4 = v12;
      double v13 = *a2;
      if (*a2 < *a3)
      {
        *a2 = *a3;
        *a3 = v13;
        double v14 = *a1;
        if (*a1 < *a2)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }

  return result;
}

double *sub_10014FBBC(double *a1, double *a2, double *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    double v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      double v12 = &a1[v10];
      do
      {
        sub_10014FD8C((uint64_t)a1, a4, v9, v12--);
        --v11;
      }

      while (v11);
    }

    double v13 = v6;
    if (v6 != a3)
    {
      double v14 = v6;
      do
      {
        double v15 = *v14;
        if (*a1 < *v14)
        {
          double *v14 = *a1;
          *a1 = v15;
          sub_10014FD8C((uint64_t)a1, a4, v9, a1);
        }

        ++v14;
      }

      while (v14 != a3);
      double v13 = a3;
    }

    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0LL;
        double v18 = *a1;
        BOOL v19 = a1;
        do
        {
          double v20 = v19;
          v19 += v17 + 1;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && v19[1] < *v19)
          {
            ++v19;
            uint64_t v17 = v22;
          }

          *double v20 = *v19;
        }

        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *BOOL v19 = *v6;
          double *v6 = v18;
          uint64_t v23 = (char *)v19 - (char *)a1 + 8;
          if (v23 < 9) {
            continue;
          }
          unint64_t v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
          uint64_t v25 = &a1[v24];
          double v18 = *v19;
          double v26 = *v25;
          if (*v19 >= *v25) {
            continue;
          }
          do
          {
            *BOOL v19 = v26;
            BOOL v19 = v25;
            if (!v24) {
              break;
            }
            unint64_t v24 = (v24 - 1) >> 1;
            uint64_t v25 = &a1[v24];
            double v26 = *v25;
          }

          while (*v25 > v18);
        }

        *BOOL v19 = v18;
      }

      while (v16-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t sub_10014FD8C(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (double *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && v8[1] < *v8)
      {
        ++v8;
        uint64_t v7 = v9;
      }

      double v10 = *a4;
      double v11 = *v8;
      if (*a4 >= *v8)
      {
        do
        {
          *a4 = v11;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (double *)(result + 8 * v7);
          uint64_t v13 = v12 + 2;
          if (v13 < a3 && v8[1] < *v8)
          {
            ++v8;
            uint64_t v7 = v13;
          }

          double v11 = *v8;
        }

        while (*v8 <= v10);
        *a4 = v10;
      }
    }
  }

  return result;
}

void *sub_10014FE50()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_101821170;
  return result;
}

void sub_10014FE74(uint64_t a1, void *a2)
{
  *a2 = &off_101821170;
}

uint64_t sub_10014FE8C()
{
  return 0LL;
}

uint64_t sub_10014FE98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10014FED4()
{
}

void *sub_10014FEE8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_101821200;
  return result;
}

void sub_10014FF0C(uint64_t a1, void *a2)
{
  *a2 = &off_101821200;
}

uint64_t sub_10014FF24(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t sub_10014FF2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10014FF68()
{
}

void *sub_10014FF7C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_101821290;
  return result;
}

void sub_10014FFA0(uint64_t a1, void *a2)
{
  *a2 = &off_101821290;
}

uint64_t sub_10014FFB8()
{
  return 0LL;
}

uint64_t sub_10014FFC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100150000()
{
}

unsigned __int8 *sub_10015000C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }

    double v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }

          else
          {
            v17 &= v12 - 1;
          }

          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_100150290(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1LL;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100019E10(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }

  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    void *v24 = v27[0];
  }

  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8LL);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }

      else
      {
        v25 &= v12 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_10015026C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_10004B64C((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100150290@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)(a5 + 8) = v9;
  *(void *)a5 = v10;
  *(_BYTE *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0LL;
  *((void *)v10 + 1) = a2;
  unint64_t v11 = v10 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(v11, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)unint64_t v11 = *(_OWORD *)a3;
    *((void *)v10 + 4) = *(void *)(a3 + 16);
  }

  __n128 result = *a4;
  *(__n128 *)(v10 + 40) = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_100150328(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10004B64C(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_100150344(uint64_t a1, void *a2, _OWORD *a3, uint64_t *a4)
{
  unint64_t v8 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }

    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }

    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint8x8_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *a2 && v13[3] == a2[1]) {
              return v13;
            }
          }

          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }

            else
            {
              v14 &= v10 - 1;
            }

            if (v14 != v4) {
              break;
            }
          }

          uint8x8_t v13 = (void *)*v13;
        }

        while (v13);
      }
    }
  }

  uint64_t v16 = a1 + 16;
  unint64_t v17 = operator new(0x48uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *unint64_t v17 = 0LL;
  v17[1] = v8;
  *((_OWORD *)v17 + 1) = *a3;
  sub_10001B9CC((uint64_t)(v17 + 4), a4);
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1LL;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100019E10(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
  }

  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    void *v24 = v27[0];
  }

  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = v16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10) {
          v25 %= v10;
        }
      }

      else
      {
        v25 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }

  uint8x8_t v13 = (void *)v27[0];
  v27[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_1000EC398((uint64_t)v27, 0LL);
  return v13;
}

void sub_1001505D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1001505E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6) < a4)
  {
    sub_100150768((void **)a1);
    if (a4 > 0x155555555555555LL) {
      sub_100007008();
    }
    unint64_t v10 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100149D9C((void *)a1, v11);
    uint64_t result = sub_100149DEC(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6) < a4)
  {
    uint64_t v13 = a2 + ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6 << 6);
    sub_1001507D4((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t result = sub_100149DEC(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }

  uint64_t result = sub_1001507D4((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 192LL;
      uint64_t result = sub_10001A9E0(v8, v16);
    }

    while (v16 != v15);
  }

  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_100150758(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100150760(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100150768(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 192LL;
        sub_10001A9E0((uint64_t)(a1 + 2), v3);
      }

      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t sub_1001507D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0LL;
  do
  {
    if (a2 != a4)
    {
      uint64_t v8 = a4 + v7;
      *(_DWORD *)(a4 + v7 + 32) = *(_DWORD *)(a2 + v7 + 32);
      sub_10013DA7C((void *)(a4 + v7), *(uint64_t **)(a2 + v7 + 16), 0LL);
      __int128 v9 = *(_OWORD *)(a2 + v7 + 40);
      *(void *)(v8 + 56) = *(void *)(a2 + v7 + 56);
      *(_OWORD *)(v8 + 40) = v9;
      *(_DWORD *)(v8 + 96) = *(_DWORD *)(a2 + v7 + 96);
      sub_10013DD40((void *)(a4 + v7 + 64), *(unsigned int **)(a2 + v7 + 80), 0LL);
      *(_DWORD *)(v8 + 136) = *(_DWORD *)(a2 + v7 + 136);
      sub_10013E25C((void *)(a4 + v7 + 104), *(uint64_t **)(a2 + v7 + 120), 0LL);
      __int128 v10 = *(_OWORD *)(a2 + v7 + 144);
      *(_DWORD *)(v8 + 160) = *(_DWORD *)(a2 + v7 + 160);
      *(_OWORD *)(v8 + 144) = v10;
      sub_10004C5F8( (char *)(a4 + v7 + 168),  *(char **)(a2 + v7 + 168),  *(void *)(a2 + v7 + 176),  (uint64_t)(*(void *)(a2 + v7 + 176) - *(void *)(a2 + v7 + 168)) >> 2);
    }

    v7 += 192LL;
  }

  while (a2 + v7 != v6);
  return v6;
}

void *sub_1001508C4(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }

    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          unint64_t v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v15 = a1 + 16;
  uint64_t v16 = operator new(0x48uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *uint64_t v16 = 0LL;
  v16[1] = v7;
  *((_OWORD *)v16 + 1) = **a4;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1LL;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100019E10(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }
  }

  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }

      else
      {
        v24 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  unint64_t v12 = (void *)v26[0];
  v26[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_1000EC398((uint64_t)v26, 0LL);
  return v12;
}

void sub_100150B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unsigned __int8 *sub_100150B64(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_100150DF8(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100019E10(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_100150DD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_10004B64C((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100150DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  uint64_t result = v8 + 16;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_1010DD48C(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }

  *((void *)v8 + 5) = 0LL;
  *((_DWORD *)v8 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100150E88(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10004B64C(v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100150EA4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_100151138(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100019E10(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_100151114( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_10004B64C((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100151138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *uint64_t v8 = 0LL;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_1010DD48C(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }

  v8[5] = 0LL;
  v8[6] = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1001511C4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10004B64C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1001511E0(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101935070);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101935070))
  {
    sub_100159040((std::string *)&xmmword_101935058);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101935058, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101935070);
  }

  if (byte_10193506F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101935058, *((unint64_t *)&xmmword_101935058 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101935058;
    *(void *)(a1 + 16) = unk_101935068;
  }

void sub_100151290(_Unwind_Exception *a1)
{
}

void sub_1001512A8(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101935090);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101935090))
  {
    sub_100100A1C((std::string *)&xmmword_101935078);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101935078, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101935090);
  }

  if (byte_10193508F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101935078, *((unint64_t *)&xmmword_101935078 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101935078;
    *(void *)(a1 + 16) = unk_101935088;
  }

void sub_100151358(_Unwind_Exception *a1)
{
}

uint64_t sub_100151370( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5, uint64_t a6, uint64_t a7, double a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a4 + 52);
  sub_1000634E0(a1 + 32);
  *(_BYTE *)(a1 + sub_1000A7938(v33 - 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = a6;
  *(void *)(a1 + 272) = a7;
  sub_100070F7C(v13, a4);
  if (!a5[1].__r_.__value_.__s.__data_[0]) {
    goto LABEL_4;
  }
  if ((char)a5->__r_.__value_.__s.__size_ < 0)
  {
    if (a5->__r_.__value_.__l.__size_) {
      goto LABEL_4;
    }
  }

  else if (a5->__r_.__value_.__s.__size_)
  {
LABEL_4:
    sub_1001588D0((std::string *)(a1 + 232), a5);
    return a1;
  }

  if (*(_BYTE *)(a1 + 256))
  {
    *(_BYTE *)(a1 + 256) = 0;
  }

  return a1;
}

void sub_100151438(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 256))
  {
  }

  sub_10006F50C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100151468(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a2 + 32;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 84);
  uint64_t v5 = a1 + 32;
  sub_1000634E0(a1 + 32);
  *(_BYTE *)(a1 + sub_1000A7938(v33 - 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    __int128 v6 = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_OWORD *)(a1 + sub_1000A7938(v33 - 232) = v6;
    *(void *)(a2 + 240) = 0LL;
    *(void *)(a2 + 248) = 0LL;
    *(void *)(a2 + sub_1000A7938(v33 - 232) = 0LL;
    *(_BYTE *)(a1 + 256) = 1;
  }

  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  sub_100070F7C(v5, v4);
  return a1;
}

void sub_100151514(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v2 + 256))
  {
  }

  sub_10006F50C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100151544(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 84);
  sub_1000F8B0C(a1 + 232, (__n128 *)(a2 + 232));
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  sub_100070F7C(a1 + 32, a2 + 32);
  return a1;
}

void sub_1001515AC(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + 8) = v2;
  if (v2)
  {
    sub_1001519E4(a1);
    sub_1003B59A0(*a1, "MicroLocationModels", (const char **)&off_101821330, 0LL, 0);
    char v3 = sub_1003B747C(*a1, "MicroLocationModels");
    *((_BYTE *)a1 + 8) = v3;
    if ((v3 & 1) != 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      uint64_t v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int128 v11 = "MicroLocationModels";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821310);
        }
        LODWORD(v9) = 136446210;
        *(void *)((char *)&v9 + 4) = "MicroLocationModels";
        uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %{public}s",  &v9,  12,  v9);
LABEL_19:
        uint64_t v7 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationModelTable::initTable()", "%s\n");
LABEL_29:
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      uint64_t v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int128 v11 = "MicroLocationModels";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create table: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821310);
        }
        LODWORD(v9) = 136446210;
        *(void *)((char *)&v9 + 4) = "MicroLocationModels";
        uint64_t v7 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMicroLocationModelTable::initTable()", "%s\n");
        goto LABEL_29;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    __int128 v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Database is not connected so we can't intialize our table",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      LOWORD(v9) = 0;
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Database is not connected so we can't intialize our table",  &v9,  2,  v9);
      goto LABEL_19;
    }
  }

uint64_t sub_1001519B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_1001515AC((uint64_t *)a1);
  return a1;
}

uint64_t sub_1001519E4(uint64_t *a1)
{
  uint64_t result = sub_1003B747C(*a1, "MicroLocationModels");
  if ((_DWORD)result) {
    return sub_10000C98C(*a1, (uint64_t)&off_101821330, 7LL, "MicroLocationModels");
  }
  return result;
}

uint64_t sub_100151A38(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_101993AFF >= 0) {
      uint64_t v5 = (char *)&xmmword_101993AE8;
    }
    else {
      uint64_t v5 = (char *)xmmword_101993AE8;
    }
    sub_1003C0D54(v4, v5, &v40);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (*a2 != v7)
    {
      while (1)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v40);
        memset(&v39, 0, sizeof(v39));
        if ((sub_100013090(v6, &v39) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&buf);
          *(void *)&__int128 buf = &off_101818CB0;
          sub_1000139B0((uint64_t)&buf);
        }

        double v9 = *(double *)(v6 + 16);
        if (*(_BYTE *)(v6 + 256))
        {
          if (*(char *)(v6 + 255) < 0)
          {
            sub_1010DD48C(__dst, *(void **)(v6 + 232), *(void *)(v6 + 240));
          }

          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(v6 + 232);
            uint64_t v38 = *(void *)(v6 + 248);
          }
        }

        else
        {
          sub_1010DDBC0(__dst, "");
        }

        if (*(_BYTE *)(v6 + 264))
        {
LABEL_13:
          memset(&v36, 0, sizeof(v36));
          if ((sub_100013090(v6 + 264, &v36) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&buf);
            *(void *)&__int128 buf = &off_101818CB0;
            sub_1000139B0((uint64_t)&buf);
          }
        }

        else
        {
          uint64_t v10 = 265LL;
          while (v10 != 280)
          {
            if (*(unsigned __int8 *)(v6 + v10++))
            {
              break;
            }
          }

          sub_1010DDBC0(&v36, "");
        }

        std::string __p = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v35 = 0LL;
        wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v6 + 32, &__p);
        uint8x8_t v12 = v35 >= 0 ? &__p : (void **)__p;
        uint64_t v13 = v35 >= 0 ? HIBYTE(v35) : v34;
        uint64_t v14 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v12, v13);
        uint64_t v15 = (v39.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v39 : (std::string *)v39.__r_.__value_.__r.__words[0];
        if (!sub_1003BC1F0(v8, 1, (char *)v15)
          || !sub_1003B7480(v8, 2, v9)
          || !sub_1003C28BC(v8, 3, *(_DWORD *)(v6 + 84))
          || !sub_1003C2F58(v8, 4, v14))
        {
          break;
        }

        unint64_t v16 = v38 >= 0 ? (char *)__dst : (char *)__dst[0];
        if (!sub_1003BC1F0(v8, 6, v16)) {
          break;
        }
        float v17 = (v36.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v36 : (std::string *)v36.__r_.__value_.__r.__words[0];
        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821310);
          }
          size_t v22 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_101993AFF >= 0) {
              size_t v23 = &xmmword_101993AE8;
            }
            else {
              size_t v23 = (__int128 *)xmmword_101993AE8;
            }
            LODWORD(buf) = 136380675;
            *(void *)((char *)&buf + 4) = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{private}s",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101821310);
            }
            if (byte_101993AFF >= 0) {
              unint64_t v24 = &xmmword_101993AE8;
            }
            else {
              unint64_t v24 = (__int128 *)xmmword_101993AE8;
            }
            int v41 = 136380675;
            __int16 v42 = v24;
            LODWORD(v32) = 12;
            unint64_t v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{private}s",  &v41,  v32);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationModelTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v25);
          }

void sub_1001521B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, std::bad_cast a43)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a40) {
    (*(void (**)(uint64_t))(*(void *)a40 + 8LL))(a40);
  }
  _Unwind_Resume(exception_object);
}

void sub_100152270(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  v53.__r_.__value_.__s.__size_ = 15;
  strcpy((char *)&v53, "SELECT * FROM (");
  char v52 = 7;
  strcpy(__s, "SELECT ");
  uint64_t v8 = std::string::append(&v53, __s, 7uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_1001511E0((uint64_t)__p);
  if ((v50 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v11 = v50;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint8x8_t v12 = std::string::append(&v54, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v55, " FROM ");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v16 = std::string::append(&v56, "MicroLocationModels");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v18 = std::string::append(&v57, " ");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  int v20 = *(char *)(a2 + 23);
  if (v20 >= 0) {
    char v21 = (const std::string::value_type *)a2;
  }
  else {
    char v21 = *(const std::string::value_type **)a2;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a2 + 8);
  }
  size_t v23 = std::string::append(&v58, v21, v22);
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v25 = std::string::append(&v64, " ");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  char v27 = std::string::append(&v65, " ORDER BY ");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = std::string::append(&v66, "GenerationTimestamp");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  double v31 = std::string::append(&v59, " DESC LIMIT ");
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v48, a3);
  if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    double v33 = &v48;
  }
  else {
    double v33 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v48.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v48.__r_.__value_.__l.__size_;
  }
  uint64_t v35 = std::string::append(&v67, (const std::string::value_type *)v33, size);
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v37 = std::string::append(&v60, ") ORDER BY ");
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  std::string v39 = std::string::append(&v63, "GenerationTimestamp");
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  int64_t cap = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 v61 = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  if (v52 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    int v41 = (char *)v61;
  }
  else {
    int v41 = (char *)v61[0];
  }
  sub_1003C0D54(a1, v41, &v63);
  std::string::size_type v42 = v63.__r_.__value_.__r.__words[0];
  float v43 = (sqlite3_stmt *)sub_100019240((uint64_t)v63.__r_.__value_.__l.__data_);
  memset(&v60, 0, sizeof(v60));
  while (j__sqlite3_step(v43) == 100)
  {
    v65.__r_.__value_.__r.__words[0] = sub_100011C2C(v43, 0);
    v65.__r_.__value_.__l.__size_ = v44;
    v58.__r_.__value_.__r.__words[0] = sqlite3_column_double(v43, 1);
    sub_10015898C(v43, 3, (uint64_t)&v63);
    sub_100011CB8(v43, 5, &v67);
    sub_100011CB8(v43, 6, &v59);
    std::string::size_type v45 = v59.__r_.__value_.__s.__size_;
    if ((v59.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v45 = v59.__r_.__value_.__l.__size_;
    }
    if (v45 && (sub_10010147C((uint64_t)&v59, (uint64_t)&v66), v66.__r_.__value_.__s.__data_[16]))
    {
      sub_10010147C((uint64_t)&v59, (uint64_t)&v66);
      if (!v66.__r_.__value_.__s.__data_[16]) {
        sub_100036CD8();
      }
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
    }

    else
    {
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
    }

    std::string::size_type v46 = v60.__r_.__value_.__l.__size_;
    if (v60.__r_.__value_.__l.__size_ >= v60.__r_.__value_.__l.__cap_)
    {
      std::string::size_type v47 = sub_100158A9C( (uint64_t *)&v60,  (uint64_t *)&v65,  (double *)&v58,  (uint64_t)&v63,  (uint64_t)&v67,  (uint64_t *)&v64);
    }

    else
    {
      sub_100158BF0( (uint64_t)&v60.__r_.__value_.__l.__cap_,  v60.__r_.__value_.__l.__size_,  (uint64_t *)&v65,  (double *)&v58,  (uint64_t)&v63,  (uint64_t)&v67,  (uint64_t *)&v64);
      std::string::size_type v47 = v46 + 280;
    }

    v60.__r_.__value_.__l.__size_ = v47;
    sub_10006F50C(&v63);
  }

  sqlite3_reset(v43);
  *a4 = v60;
  memset(&v60, 0, sizeof(v60));
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  sub_1000A8578((void ***)&v63);
  if (v42) {
    (*(void (**)(std::string::size_type))(*(void *)v42 + 8LL))(v42);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v61[0]);
  }
}

void sub_10015284C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void **buf)
{
  __int128 buf = &a47;
  sub_1000A8578(&buf);
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100152C50(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v43.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v43, "WHERE ");
    uint64_t v10 = std::string::append(&v43, "ModelType");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    uint8x8_t v12 = std::string::append(&v44, "=");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v42, a2);
    if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v14 = &v42;
    }
    else {
      uint64_t v14 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v42.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v42.__r_.__value_.__l.__size_;
    }
    unint64_t v16 = std::string::append(&v45, (const std::string::value_type *)v14, size);
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    if (*(_BYTE *)(a3 + 24))
    {
      if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v18 = __p[0].__r_.__value_.__s.__size_;
      }
      else {
        size_t v18 = __p[0].__r_.__value_.__l.__size_;
      }
      __int128 v19 = &v42;
      sub_1000392EC((uint64_t)&v42, v18 + 5);
      if ((v42.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v19 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v18)
      {
        if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v20 = __p;
        }
        else {
          int v20 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        memmove(v19, v20, v18);
      }

      strcpy((char *)v19 + v18, " AND ");
      char v21 = std::string::append(&v42, "ClientID");
      __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0LL;
      v21->__r_.__value_.__l.__cap_ = 0LL;
      v21->__r_.__value_.__r.__words[0] = 0LL;
      size_t v23 = std::string::append(&v43, "= ");
      __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0LL;
      v23->__r_.__value_.__l.__cap_ = 0LL;
      v23->__r_.__value_.__r.__words[0] = 0LL;
      if (!*(_BYTE *)(a3 + 24)) {
        sub_100036CD8();
      }
      int v25 = *(char *)(a3 + 23);
      if (v25 >= 0) {
        __int128 v26 = (const std::string::value_type *)a3;
      }
      else {
        __int128 v26 = *(const std::string::value_type **)a3;
      }
      if (v25 >= 0) {
        std::string::size_type v27 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v27 = *(void *)(a3 + 8);
      }
      __int128 v28 = std::string::append(&v44, v26, v27);
      __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0LL;
      v28->__r_.__value_.__l.__cap_ = 0LL;
      v28->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v30 = std::string::append(&v45, "");
      std::string::size_type v31 = v30->__r_.__value_.__r.__words[0];
      v46[0] = v30->__r_.__value_.__l.__size_;
      *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v32 = v30->__r_.__value_.__s.__size_;
      v30->__r_.__value_.__l.__size_ = 0LL;
      v30->__r_.__value_.__l.__cap_ = 0LL;
      v30->__r_.__value_.__r.__words[0] = 0LL;
      __p[0].__r_.__value_.__r.__words[0] = v31;
      __p[0].__r_.__value_.__l.__size_ = v46[0];
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
      __p[0].__r_.__value_.__s.__size_ = v32;
    }

    if (a4[16])
    {
      v44.__r_.__value_.__s.__size_ = 5;
      strcpy((char *)&v44, " AND ");
      sub_1010DDBC0(&v42, "LoiGroupId");
      if (!a4[16]) {
        sub_100036CD8();
      }
      sub_100053C78((const void **)&v42.__r_.__value_.__l.__data_, a4, (uint64_t)&v43);
      if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v33 = &v43;
      }
      else {
        double v33 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v34 = v43.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v34 = v43.__r_.__value_.__l.__size_;
      }
      uint64_t v35 = std::string::append(&v44, (const std::string::value_type *)v33, v34);
      __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0LL;
      v35->__r_.__value_.__l.__cap_ = 0LL;
      v35->__r_.__value_.__r.__words[0] = 0LL;
      if ((v45.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v37 = &v45;
      }
      else {
        uint64_t v37 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v45.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v38 = v45.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v38 = v45.__r_.__value_.__l.__size_;
      }
      std::string::append(__p, (const std::string::value_type *)v37, v38);
    }

    sub_100152270(*(void *)a1, (uint64_t)__p, 1u, &v45);
    if (v45.__r_.__value_.__r.__words[0] == v45.__r_.__value_.__l.__size_)
    {
      char v39 = 0;
      *a5 = 0;
    }

    else
    {
      sub_100151468((uint64_t)a5, (uint64_t)v45.__r_.__value_.__l.__data_);
      char v39 = 1;
    }

    a5[280] = v39;
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
    sub_1000A8578((void ***)&v44);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    __int128 v40 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't get the most recent model",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      LOWORD(v45.__r_.__value_.__l.__data_) = 0;
      int v41 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't get the most recent model",  &v45,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLMicroLocationModelTable::Entry> CLMicroLocationModelTable::getMostRecentModelOfModelTypeForClien tAndForLoi(CLMicroLocationProto::Model::ModelType, std::optional<const std::string>, std::optional<boost::uuids::uuid>)",  "%s\n",  (const char *)v41);
      if (v41 != __p) {
        free(v41);
      }
    }

    *a5 = 0;
    a5[280] = 0;
  }

void sub_100153204( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, void *__p, uint64_t a42, int a43, __int16 a44, char a45, char a46)
{
}

void sub_10015335C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5 = a3;
  *(void *)&__int128 v22 = a3;
  *((void *)&v22 + 1) = a4;
  LOBYTE(__p) = 0;
  char v16 = 0;
  __int128 v20 = v22;
  char v21 = 1;
  sub_100152C50(a1, a2, (uint64_t)&__p, &v20, (_BYTE *)a5);
  if (v16 && v15 < 0) {
    operator delete(__p);
  }
  if (v5)
  {
LABEL_5:
    if (!*(_BYTE *)(a5 + 280))
    {
      LOBYTE(v11) = 0;
      char v13 = 0;
      v17[0] = 0LL;
      v17[1] = 0LL;
      char v18 = 1;
      sub_100152C50(a1, a2, (uint64_t)&v11, v17, v19);
      sub_1000A88B8(a5, (uint64_t)v19);
      sub_100019D34((uint64_t)v19);
      if (v13 && v12 < 0) {
        operator delete(v11);
      }
      if (*(_BYTE *)(a5 + 280)) {
        *(_OWORD *)(a5 + 264) = v22;
      }
    }
  }

  else
  {
    uint64_t v9 = 1LL;
    while (v9 != 16)
    {
      if (*((unsigned __int8 *)&v22 + v9++))
      {
        return;
      }
    }
  }

void sub_1001534B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }

  sub_100019D34(v27);
  _Unwind_Resume(a1);
}

void sub_100153510(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(v9, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
  }

  char v11 = 1;
  *(_OWORD *)std::string __p = *(_OWORD *)v9;
  uint64_t v13 = v10;
  v9[0] = 0LL;
  v9[1] = 0LL;
  uint64_t v10 = 0LL;
  char v14 = 1;
  v15[0] = a3;
  v15[1] = a4;
  char v16 = 1;
  sub_100152C50(a1, 0, (uint64_t)__p, v15, a5);
  if (v14 && SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (v11)
  {
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
  }

void sub_100153624( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }

  sub_10122EABC(v19, (uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10015365C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  if (*(_BYTE *)(a1 + 8))
  {
    v30.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v30, "WHERE ");
    uint64_t v8 = std::string::append(&v30, "ClientID");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v10 = std::string::append(&v31, "= ");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    int v12 = *(char *)(a2 + 23);
    if (v12 >= 0) {
      uint64_t v13 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v13 = *(const std::string::value_type **)a2;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v14 = *(void *)(a2 + 8);
    }
    char v15 = std::string::append(&v32, v13, v14);
    __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v17 = std::string::append(&v33, "");
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    v32.__r_.__value_.__s.__size_ = 5;
    strcpy((char *)&v32, " AND ");
    sub_1010DDBC0(&v30, "LoiGroupId");
    sub_100053C78((const void **)&v30.__r_.__value_.__l.__data_, &v35, (uint64_t)&v31);
    if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v19 = &v31;
    }
    else {
      __int128 v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v31.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v31.__r_.__value_.__l.__size_;
    }
    char v21 = std::string::append(&v32, (const std::string::value_type *)v19, size);
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v23 = &v33;
    }
    else {
      size_t v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v24 = v33.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v24 = v33.__r_.__value_.__l.__size_;
    }
    std::string::append(&v34, (const std::string::value_type *)v23, v24);
    sub_100152270(*(void *)a1, (uint64_t)&v34, 1u, &v33);
    if (v33.__r_.__value_.__r.__words[0] == v33.__r_.__value_.__l.__size_)
    {
      if ((_BYTE)v35)
      {
LABEL_46:
        sub_100153B94(a1, a2, v35, v36, a5);
LABEL_47:
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
        sub_1000A8578((void ***)&v32);
        return;
      }

      uint64_t v27 = 1LL;
      while (v27 != 16)
      {
        if (*((unsigned __int8 *)&v35 + v27++))
        {
          break;
        }
      }

      char v25 = 0;
      *a5 = 0;
    }

    else
    {
      sub_100151468((uint64_t)a5, (uint64_t)v33.__r_.__value_.__l.__data_);
      char v25 = 1;
    }

    a5[280] = v25;
    goto LABEL_47;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101821310);
  }
  __int128 v26 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v34.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't get the most recent mode of client",  (uint8_t *)&v34,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v34, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    LOWORD(v33.__r_.__value_.__l.__data_) = 0;
    __int128 v29 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v34,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't get the most recent mode of client",  &v33,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLMicroLocationModelTable::Entry> CLMicroLocationModelTable::getMostRecentModelByClientIdAndLocation (const std::string &, boost::uuids::uuid)",  "%s\n",  (const char *)v29);
    if (v29 != &v34) {
      free(v29);
    }
  }

  *a5 = 0;
  a5[280] = 0;
}

void sub_100153A9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
}

void sub_100153B94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  *(void *)&__int128 v43 = a3;
  *((void *)&v43 + 1) = a4;
  if (*(_BYTE *)(a1 + 8))
  {
    if (!(_BYTE)a3)
    {
      uint64_t v8 = 1LL;
      do
      {
        if (v8 == 16) {
          goto LABEL_46;
        }
      }

      while (!*((unsigned __int8 *)&v43 + v8++));
      if ((unint64_t)(v8 - 2) >= 0xF)
      {
LABEL_46:
        sub_10122EAE0();
        __break(1u);
      }
    }

    v29.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v29, "WHERE ");
    uint64_t v10 = std::string::append(&v29, "ClientID");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    int v12 = std::string::append(&v30, "= ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    int v14 = *(char *)(a2 + 23);
    if (v14 >= 0) {
      char v15 = (const std::string::value_type *)a2;
    }
    else {
      char v15 = *(const std::string::value_type **)a2;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(a2 + 8);
    }
    __int128 v17 = std::string::append(&v31, v15, v16);
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v19 = std::string::append(&v32, "");
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    char v21 = std::string::append(&v33, " AND ");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    size_t v23 = std::string::append(&v34, "LoiGroupId");
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    char v25 = std::string::append(&v37, "= ");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    std::string::size_type cap = v25->__r_.__value_.__l.__cap_;
    __int128 v35 = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    sub_100152270(*(void *)a1, (uint64_t)&v35, 1u, &v34);
    if (v34.__r_.__value_.__r.__words[0] == v34.__r_.__value_.__l.__size_)
    {
      *a5 = 0;
      a5[280] = 0;
    }

    else
    {
      sub_1000A83A0(&v37, (__int128 *)v34.__r_.__value_.__l.__data_);
      __int128 v42 = v43;
      sub_100151468((uint64_t)a5, (uint64_t)&v37);
      a5[280] = 1;
      if (v41 && v40 < 0) {
        operator delete(__p);
      }
      sub_10006F50C(&v38);
    }

    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    sub_1000A8578((void ***)&v37);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v35);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    uint64_t v27 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v37.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't get the most recent mode of client",  (uint8_t *)&v37,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v37, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      LOWORD(v35) = 0;
      __int128 v28 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v37,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't get the most recent mode of client",  &v35,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLMicroLocationModelTable::Entry> CLMicroLocationModelTable::getTransitionModelForClientAtLoi(cons t std::string &, boost::uuids::uuid)",  "%s\n",  (const char *)v28);
      if (v28 != &v37) {
        free(v28);
      }
    }

    *a5 = 0;
    a5[280] = 0;
  }

void sub_100153FD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42)
{
  a42 = &a31;
  sub_1000A8578((void ***)&a42);
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001540C4(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    __int128 v36 = 0uLL;
    uint64_t v37 = 0LL;
    v30.__r_.__value_.__s.__size_ = 7;
    strcpy((char *)&v30, "SELECT ");
    uint64_t v6 = std::string::append(&v30, "ModelUUID");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v8 = std::string::append(&v31, ",");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v10 = std::string::append(&v38, "ClientID");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    int v12 = std::string::append(&v32, " FROM ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    int v14 = std::string::append(&v33, "MicroLocationModels");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v16 = std::string::append(&v42, " LIMIT ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v29, a2);
    if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v18 = &v29;
    }
    else {
      __int128 v18 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v29.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    __int128 v20 = std::string::append(&v39, (const std::string::value_type *)v18, size);
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t cap = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string v34 = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v22 = (char *)v34;
    }
    else {
      __int128 v22 = (char *)v34[0];
    }
    sub_1003C0D54(*(void *)a1, v22, &v39);
    std::string::size_type v23 = v39.__r_.__value_.__r.__words[0];
    __int128 v24 = (sqlite3_stmt *)sub_100019240((uint64_t)v39.__r_.__value_.__l.__data_);
    while (j__sqlite3_step(v24) == 100)
    {
      v38.__r_.__value_.__r.__words[0] = sub_100011C2C(v24, 0);
      v38.__r_.__value_.__l.__size_ = v25;
      sub_100011CB8(v24, 1, &v33);
      memset(&v32, 0, sizeof(v32));
      if ((sub_100013090((uint64_t)&v38, &v32) & 1) == 0)
      {
        __int128 v28 = std::bad_cast::bad_cast((std::bad_cast *)&v42);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
        sub_1000139B0((uint64_t)v28);
      }

      sub_100158F34((uint64_t)&v39, (__int128 *)&v32, (__int128 *)&v33);
      sub_1001548F0((uint64_t *)&v36, (__int128 *)&v39);
      if (v41 < 0) {
        operator delete(__p);
      }
    }

    sqlite3_reset(v24);
    *(_OWORD *)a3 = v36;
    *(void *)(a3 + 16) = v37;
    uint64_t v37 = 0LL;
    __int128 v36 = 0uLL;
    if (v23) {
      (*(void (**)(std::string::size_type))(*(void *)v23 + 8LL))(v23);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v34[0]);
    }
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    sub_100159450((void ***)&v39);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    __int128 v26 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v39.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all Model IDs, Client IDs",  (uint8_t *)&v39,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v39, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      LOWORD(v42.__r_.__value_.__l.__data_) = 0;
      uint64_t v27 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v39,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all Model IDs, Client IDs",  &v42,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<std::pair<std::string, std::string>> CLMicroLocationModelTable::selectAllModelIdsClientIds(uint32_t)",  "%s\n",  (const char *)v27);
      if (v27 != &v39) {
        free(v27);
      }
    }

    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
  }

void sub_1001545BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1001548F0(uint64_t *a1, __int128 *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555LL) {
      sub_100007008();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555LL;
    }
    else {
      unint64_t v14 = v12;
    }
    v20[4] = v4;
    if (v14) {
      __int128 v15 = (char *)sub_1000BB1F4((uint64_t)v4, v14);
    }
    else {
      __int128 v15 = 0LL;
    }
    std::string::size_type v16 = &v15[48 * v11];
    v20[0] = v15;
    v20[1] = v16;
    void v20[3] = &v15[48 * v14];
    __int128 v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string::size_type v16 = v17;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v18 = *(__int128 *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0LL;
    *((void *)a2 + 5) = 0LL;
    *((void *)a2 + 3) = 0LL;
    v20[2] = v16 + 48;
    sub_1001594D4(a1, v20);
    uint64_t v10 = a1[1];
    sub_100159680(v20);
  }

  else
  {
    __int128 v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v9 = *(__int128 *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0LL;
    *((void *)a2 + 5) = 0LL;
    *((void *)a2 + 3) = 0LL;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }

  a1[1] = v10;
  return v10 - 48;
}

void sub_100154A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100154A5C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    uint64_t v4 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = a3;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Keeping %{public}d models for LSL models, %{public}d models per other types",  (uint8_t *)buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      LODWORD(__p[0]) = 67240448;
      HIDWORD(__p[0]) = a3;
      LOWORD(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 2) = a2;
      std::string v65 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Keeping %{public}d models for LSL models, %{public}d models per other types",  __p,  14);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationModelTable::deleteUnneededModels(uint32_t, uint32_t)",  "%s\n",  (const char *)v65);
      if (v65 != buf) {
        free(v65);
      }
    }

    LOBYTE(v5) = sub_100155794((uint64_t *)a1);
    int v6 = 0;
    while (1)
    {
      v73.__r_.__value_.__s.__size_ = 12;
      if (v6 == 2) {
        unsigned int v7 = a3;
      }
      else {
        unsigned int v7 = a2;
      }
      strcpy((char *)&v73, "DELETE FROM ");
      __int128 v8 = std::string::append(&v73, "MicroLocationModels");
      __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v10 = std::string::append(&v74, " WHERE ");
      __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      unint64_t v12 = std::string::append(&v75, "ModelType");
      __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0LL;
      v12->__r_.__value_.__l.__cap_ = 0LL;
      v12->__r_.__value_.__r.__words[0] = 0LL;
      unint64_t v14 = std::string::append(&v76, "=");
      __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v72, v6);
      if ((v72.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v16 = &v72;
      }
      else {
        std::string::size_type v16 = (std::string *)v72.__r_.__value_.__r.__words[0];
      }
      if ((v72.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v72.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v72.__r_.__value_.__l.__size_;
      }
      __int128 v18 = std::string::append(&v77, (const std::string::value_type *)v16, size);
      __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0LL;
      v18->__r_.__value_.__l.__cap_ = 0LL;
      v18->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v20 = std::string::append(&v78, " AND ");
      __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0LL;
      v20->__r_.__value_.__l.__cap_ = 0LL;
      v20->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v22 = std::string::append(&v79, "ModelUUID");
      __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0LL;
      v22->__r_.__value_.__l.__cap_ = 0LL;
      v22->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v24 = std::string::append(&v80, " NOT IN (");
      __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0LL;
      v24->__r_.__value_.__l.__cap_ = 0LL;
      v24->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v26 = std::string::append(&v81, " SELECT ");
      __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0LL;
      v26->__r_.__value_.__l.__cap_ = 0LL;
      v26->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v28 = std::string::append(&v82, "ModelUUID");
      __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0LL;
      v28->__r_.__value_.__l.__cap_ = 0LL;
      v28->__r_.__value_.__r.__words[0] = 0LL;
      std::string v30 = std::string::append(&v83, " FROM ");
      __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0LL;
      v30->__r_.__value_.__l.__cap_ = 0LL;
      v30->__r_.__value_.__r.__words[0] = 0LL;
      std::string v32 = std::string::append(&v84, "MicroLocationModels");
      __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      std::string v34 = std::string::append(&v85, " WHERE ");
      __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0LL;
      v34->__r_.__value_.__l.__cap_ = 0LL;
      v34->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v36 = std::string::append(&v86, "ModelType");
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      std::string v38 = std::string::append(&v87, "=");
      __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0LL;
      v38->__r_.__value_.__l.__cap_ = 0LL;
      v38->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v71, v6);
      if ((v71.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v40 = &v71;
      }
      else {
        char v40 = (std::string *)v71.__r_.__value_.__r.__words[0];
      }
      if ((v71.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v41 = v71.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v41 = v71.__r_.__value_.__l.__size_;
      }
      std::string v42 = std::string::append(&v88, (const std::string::value_type *)v40, v41);
      __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0LL;
      v42->__r_.__value_.__l.__cap_ = 0LL;
      v42->__r_.__value_.__r.__words[0] = 0LL;
      std::string v44 = std::string::append(&v89, " ORDER BY ");
      __int128 v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__l.__cap_ = v44->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0LL;
      v44->__r_.__value_.__l.__cap_ = 0LL;
      v44->__r_.__value_.__r.__words[0] = 0LL;
      std::string::size_type v46 = std::string::append(&v90, "GenerationTimestamp");
      __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__l.__cap_ = v46->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0LL;
      v46->__r_.__value_.__l.__cap_ = 0LL;
      v46->__r_.__value_.__r.__words[0] = 0LL;
      std::string v48 = std::string::append(&v91, " DESC ");
      __int128 v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__l.__cap_ = v48->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0LL;
      v48->__r_.__value_.__l.__cap_ = 0LL;
      v48->__r_.__value_.__r.__words[0] = 0LL;
      unsigned __int8 v50 = std::string::append(&v92, " LIMIT ");
      __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0LL;
      v50->__r_.__value_.__l.__cap_ = 0LL;
      v50->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v70, v7);
      if ((v70.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v52 = &v70;
      }
      else {
        char v52 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if ((v70.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v53 = v70.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v53 = v70.__r_.__value_.__l.__size_;
      }
      std::string v54 = std::string::append(&v93, (const std::string::value_type *)v52, v53);
      __int128 v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__l.__cap_ = v54->__r_.__value_.__l.__cap_;
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0LL;
      v54->__r_.__value_.__l.__cap_ = 0LL;
      v54->__r_.__value_.__r.__words[0] = 0LL;
      std::string v56 = std::string::append(buf, ")");
      __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      int64_t cap = v56->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v57;
      v56->__r_.__value_.__l.__size_ = 0LL;
      v56->__r_.__value_.__l.__cap_ = 0LL;
      v56->__r_.__value_.__r.__words[0] = 0LL;
      if ((char)v73.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(v73.__r_.__value_.__l.__data_);
        if (!v5)
        {
LABEL_86:
          BOOL v5 = 0LL;
          goto LABEL_94;
        }
      }

      else if (!v5)
      {
        goto LABEL_86;
      }

      if (cap >= 0) {
        uint64_t v58 = (char *)__p;
      }
      else {
        uint64_t v58 = (char *)__p[0];
      }
      sub_1003C0D54(*(void *)a1, v58, buf);
      std::string::size_type v59 = buf[0].__r_.__value_.__r.__words[0];
      std::string v60 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
      if (v60)
      {
        BOOL v5 = sub_1003BB2BC(*(void *)a1, v60);
        if (!v59) {
          goto LABEL_94;
        }
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821310);
        }
        __int128 v61 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821310);
          }
          LOWORD(v93.__r_.__value_.__l.__data_) = 0;
          LODWORD(v67) = 2;
          std::string v62 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v93,  v67);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "auto CLMicroLocationModelTable::deleteUnneededModels(uint32_t, uint32_t)::(anonymous class)::operator()(cons t std::string &) const",  "%s\n",  (const char *)v62);
          if (v62 != buf) {
            free(v62);
          }
        }

        BOOL v5 = 0LL;
        if (!v59) {
          goto LABEL_94;
        }
      }

      (*(void (**)(std::string::size_type))(*(void *)v59 + 8LL))(v59);
LABEL_94:
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      if (++v6 == 4) {
        return v5;
      }
    }
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101821310);
  }
  std::string v63 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't deleteUnneededModels()",  (uint8_t *)buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    LOWORD(__p[0]) = 0;
    std::string v66 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't deleteUnneededModels()",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationModelTable::deleteUnneededModels(uint32_t, uint32_t)",  "%s\n",  (const char *)v66);
    if (v66 != buf) {
      free(v66);
    }
  }

  return 0LL;
}

void sub_1001554FC(_Unwind_Exception *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  _Unwind_Resume(a1);
}

void sub_100155714()
{
}

void sub_10015571C()
{
}

void sub_100155724()
{
}

void sub_10015572C()
{
}

void sub_100155734()
{
}

void sub_10015573C()
{
}

void sub_100155744()
{
}

void sub_10015574C()
{
}

void sub_100155754()
{
}

void sub_10015575C()
{
}

void sub_100155764()
{
}

void sub_10015576C()
{
}

void sub_100155774()
{
}

void sub_10015577C()
{
}

void sub_100155784()
{
}

void sub_10015578C()
{
}

BOOL sub_100155794(uint64_t *a1)
{
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsDatabaseSelectionLimit", 0x8000100u, kCFAllocatorNull);
  int v3 = sub_1002A77CC((uint64_t)buf.__r_.__value_.__l.__data_, (uint64_t)v2, &v89);
  CFRelease(v2);
  unsigned int data = v89.__r_.__value_.__l.__data_;
  std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    int v6 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  if (v3) {
    unsigned int v8 = data;
  }
  else {
    unsigned int v8 = 5000;
  }
  memset(&v83, 0, sizeof(v83));
  uint64_t v80 = 0LL;
  uint64_t v81 = 0LL;
  uint64_t v82 = 0LL;
  uint64_t v77 = 0LL;
  uint64_t v78 = 0LL;
  uint64_t v79 = 0LL;
  memset(&v76, 0, sizeof(v76));
  sub_1001540C4((uint64_t)a1, v8, (uint64_t)&buf);
  sub_1001596F4((void **)&v83.__r_.__value_.__l.__data_);
  std::string v83 = buf;
  memset(&buf, 0, sizeof(buf));
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  sub_100159450((void ***)&v89);
  std::string::size_type v10 = v83.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v83.__r_.__value_.__r.__words[0]; i != v10; i += 48LL)
  {
    sub_100060578((const std::string *)(i + 24), &v89);
    if (v90)
    {
      sub_100158FAC((char *)&buf, (__int128 *)i, (__int128 *)&v89);
      sub_1001548F0(&v80, (__int128 *)&buf);
      if (v88 < 0) {
        operator delete(__p);
      }
      if (v90)
      {
      }
    }
  }

  if (v80 != v81)
  {
    sub_1001564A4((uint64_t)a1, v8, (uint64_t)&buf);
    sub_10012EC68((uint64_t *)&v76);
    std::string v76 = buf;
    memset(&buf, 0, sizeof(buf));
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    sub_1000129D4((void ***)&v89);
    uint64_t v11 = v80;
    uint64_t v12 = v81;
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    while (v11 != v12)
    {
      uint64_t v13 = sub_1000AC7C8( (uint64_t)v76.__r_.__value_.__l.__data_,  v76.__r_.__value_.__l.__size_,  (unsigned __int8 **)(v11 + 24));
      if (v13 == v76.__r_.__value_.__l.__size_) {
        sub_100159760((uint64_t **)&v89, (__int128 *)v11);
      }
      v11 += 48LL;
    }
  }

  if (v77 == v78)
  {
    BOOL v64 = 1LL;
    goto LABEL_127;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101821310);
  }
  unint64_t v14 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL * ((v78 - v77) >> 4);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Deleting %ld models which refer to deleted services",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    LODWORD(v89.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL * ((v78 - v77) >> 4);
    uint64_t v67 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Deleting %ld models which refer to deleted services",  &v89);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationModelTable::deleteAllModelsOfDeletedServices()",  "%s\n",  (const char *)v67);
    if (v67 != &buf) {
      free(v67);
    }
  }

  v89.__r_.__value_.__s.__size_ = 1;
  LOWORD(v89.__r_.__value_.__l.__data_) = 34;
  int v15 = *(char *)(v77 + 23);
  if (v15 >= 0) {
    std::string::size_type v16 = (const std::string::value_type *)v77;
  }
  else {
    std::string::size_type v16 = *(const std::string::value_type **)v77;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(v77 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(v77 + 8);
  }
  __int128 v18 = std::string::append(&v89, v16, v17);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v20 = std::string::append(&buf, "");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v22 = v78;
  for (uint64_t j = v77 + 48; j != v22; j += 48LL)
  {
    v84.__r_.__value_.__s.__size_ = 1;
    LOWORD(v84.__r_.__value_.__l.__data_) = 44;
    __int128 v24 = std::string::append(&v84, "");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    int v26 = *(char *)(j + 23);
    if (v26 >= 0) {
      __int128 v27 = (const std::string::value_type *)j;
    }
    else {
      __int128 v27 = *(const std::string::value_type **)j;
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(j + 23);
    }
    else {
      std::string::size_type v28 = *(void *)(j + 8);
    }
    __int128 v29 = std::string::append(&v85, v27, v28);
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v31 = std::string::append(&v89, "");
    __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0LL;
    v31->__r_.__value_.__l.__cap_ = 0LL;
    v31->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v34 = buf.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v34 = buf.__r_.__value_.__l.__size_;
    }
    std::string::append(&v75, (const std::string::value_type *)p_buf, v34);
  }

  v70.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v70, " WHERE ");
  __int128 v35 = std::string::append(&v70, "ModelUUID");
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v71.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v37 = std::string::append(&v71, " in ");
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v39 = std::string::append(&v72, "(");
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  if ((v75.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v41 = &v75;
  }
  else {
    std::string::size_type v41 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v42 = v75.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v42 = v75.__r_.__value_.__l.__size_;
  }
  __int128 v43 = std::string::append(&v73, (const std::string::value_type *)v41, v42);
  __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__l.__cap_ = v43->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0LL;
  v43->__r_.__value_.__l.__cap_ = 0LL;
  v43->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v45 = std::string::append(&v74, ") AND ");
  __int128 v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__l.__cap_ = v45->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0LL;
  v45->__r_.__value_.__l.__cap_ = 0LL;
  v45->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v47 = std::string::append(&v84, "ModelType");
  __int128 v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__l.__cap_ = v47->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0LL;
  v47->__r_.__value_.__l.__cap_ = 0LL;
  v47->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v49 = std::string::append(&v85, "!=");
  __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__l.__cap_ = v49->__r_.__value_.__l.__cap_;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0LL;
  v49->__r_.__value_.__l.__cap_ = 0LL;
  v49->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v69, 0);
  if ((v69.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v51 = &v69;
  }
  else {
    __int128 v51 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v52 = v69.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v52 = v69.__r_.__value_.__l.__size_;
  }
  std::string::size_type v53 = std::string::append(&buf, (const std::string::value_type *)v51, v52);
  __int128 v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__l.__cap_ = v53->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0LL;
  v53->__r_.__value_.__l.__cap_ = 0LL;
  v53->__r_.__value_.__r.__words[0] = 0LL;
  v84.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v84, "DELETE FROM ");
  __int128 v55 = std::string::append(&v84, "MicroLocationModels");
  __int128 v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__l.__cap_ = v55->__r_.__value_.__l.__cap_;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0LL;
  v55->__r_.__value_.__l.__cap_ = 0LL;
  v55->__r_.__value_.__r.__words[0] = 0LL;
  if ((v89.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v57 = &v89;
  }
  else {
    __int128 v57 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v58 = v89.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v58 = v89.__r_.__value_.__l.__size_;
  }
  std::string::size_type v59 = std::string::append(&buf, (const std::string::value_type *)v57, v58);
  __int128 v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__l.__cap_ = v59->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0LL;
  v59->__r_.__value_.__l.__cap_ = 0LL;
  v59->__r_.__value_.__r.__words[0] = 0LL;
  if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v61 = &v85;
  }
  else {
    __int128 v61 = (std::string *)v85.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(*a1, (char *)v61, &buf);
  std::string::size_type v62 = buf.__r_.__value_.__r.__words[0];
  std::string v63 = (sqlite3_stmt *)sub_100019240((uint64_t)buf.__r_.__value_.__l.__data_);
  if (v63)
  {
    BOOL v64 = sub_1003BB2BC(*a1, v63);
    if (!v62) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101821310);
  }
  std::string v65 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    LOWORD(v84.__r_.__value_.__l.__data_) = 0;
    uint64_t v68 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v84,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationModelTable::deleteAllModelsOfDeletedServices()",  "%s\n",  (const char *)v68);
    if (v68 != &buf) {
      free(v68);
    }
  }

  BOOL v64 = 1LL;
  if (v62) {
LABEL_109:
  }
    (*(void (**)(std::string::size_type))(*(void *)v62 + 8LL))(v62);
LABEL_110:
  if ((char)v75.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v75.__r_.__value_.__l.__data_);
    if (!v63) {
LABEL_126:
    }
      BOOL v64 = 0LL;
  }

  else if (!v63)
  {
    goto LABEL_126;
  }

LABEL_127:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  sub_1000129D4((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
  sub_100159450((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  sub_100159450((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
  sub_100159450((void ***)&buf);
  return v64;
}

  __int128 v54 = *(_BYTE *)(a2 + 277);
  *(_DWORD *)(a1 + 368) |= 0x400u;
  *(_BYTE *)(a1 + 277) = v54;
  __int128 v36 = *(_DWORD *)(a2 + 368);
  if ((v36 & 0x800) == 0)
  {
LABEL_97:
    if ((v36 & 0x1000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_129;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x37,  *(_DWORD *)(v5 + 352),  (int)a2,  a4);
  __int128 v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x800000) == 0)
  {
LABEL_60:
    if ((v9 & 0x1000000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x39,  *(unsigned __int8 *)(v5 + 356),  (BOOL)a2,  a4);
  }

      if ((_DWORD)v113)
      {
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_101835C50);
        }
        __int128 v101 = (os_log_s *)off_101934A28;
        if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)std::string __str = 68289283LL;
          *(_WORD *)&__str[8] = 2082;
          *(void *)&__str[10] = "";
          *(_WORD *)&__str[18] = 2081;
          *(void *)&__str[20] = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#warning Table exists but does not have matching schema, table:%{private, locat ion:escape_only}s}",  __str,  0x1Cu);
        }

        sub_1003BB6F8(a1, a2);
      }

      sub_1003BBD60(a1, a2, a3);
      __int128 v36 = 1LL;
      goto LABEL_134;
    }

    uint64_t v68 = 0LL;
    std::string v69 = 1LL;
    std::string v65 = 1;
    while (1)
    {
      std::string v70 = *(const char **)&v62[v68];
      std::string v71 = sqlite3_column_text(v60, 3);
      std::string v72 = *(const char **)((char *)__p + v68 + 16);
      std::string v73 = sqlite3_column_text(v60, 2);
      std::string v74 = *(const char **)((char *)__p + v68 + 24);
      std::string v75 = sqlite3_column_text(v60, 4);
      sub_1010DDBC0(__str, (&off_101835CD0)[*(int *)((char *)__p + v68 + 36)]);
      std::string v76 = __str[23];
      uint64_t v77 = *(const char **)__str;
      uint64_t v78 = sqlite3_column_text(v60, 5);
      if (v76 >= 0) {
        uint64_t v79 = __str;
      }
      else {
        uint64_t v79 = v77;
      }
      if (!strcmp(v79, (const char *)v78))
      {
        sub_1010DDBC0(v116, (&off_101835CD0)[*(int *)((char *)__p + v68 + 32)]);
        uint64_t v81 = v117;
        uint64_t v82 = (void **)v116[0];
        std::string v83 = sqlite3_column_text(v60, 6);
        if (v81 >= 0) {
          std::string v84 = v116;
        }
        else {
          std::string v84 = v82;
        }
        uint64_t v80 = strcmp((const char *)v84, (const char *)v83) != 0;
        if (v117 < 0) {
          operator delete(v116[0]);
        }
      }

      else
      {
        uint64_t v80 = 1;
      }

      if ((__str[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__str);
        if (v80) {
          break;
        }
      }

      else if (v80)
      {
        break;
      }

    free(v55);
    goto LABEL_85;
  }

  __int128 v35 = *(void *)(a1 + 520) + *(void *)(a1 + 512) - 1LL;
  __int128 v36 = *(double *)(*(void *)(*(void *)(a1 + 488) + ((v35 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v35 & 0x1FF)) - a3;
  __int128 v33 = v36 > 150.0;
  if (v36 > 150.0)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101863518);
    }
    __int128 v37 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134283521;
      *(double *)std::string v85 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer before current Pedometer",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      uint64_t v82 = 134283521;
      std::string v83 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer before current Pedometer",  &v82,  12);
      std::string::size_type v53 = (uint8_t *)v52;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)",  "%s\n",  v52);
      if (v53 != buf) {
        free(v53);
      }
    }

    sub_1009905C0(a1, a2, (uint64_t)&v73, 0, 1.0, 0.0);
  }

  return v33;
}

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  std::string::size_type v62 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    std::string v63 = *v56;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v63;
    _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEBUG,  "TILE: fDefaultDisableTilesWhileLocked, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    v128 = *v56;
    *(_DWORD *)std::string __p = 67109120;
    *(_DWORD *)&__p[4] = v128;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: fDefaultDisableTilesWhileLocked, %d",  __p);
    v130 = (char *)v129;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()",  "%s\n",  v129);
    if (v130 != buf) {
      free(v130);
    }
  }

  sub_1002F0B04(buf);
  BOOL v64 = (int *)(a1 + 444);
  std::string v65 = sub_1002A7CB0(*(uint64_t *)buf, "NumOfSurroundingCirclesDEM", (_DWORD *)(a1 + 444));
  std::string v66 = v65;
  uint64_t v67 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_136;
  }
  uint64_t v68 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    std::string v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if (!v66) {
      goto LABEL_142;
    }
  }

  else
  {
LABEL_136:
    if (!v65) {
      goto LABEL_142;
    }
  }

  if (*v64 < 0) {
    *BOOL v64 = 8;
  }
LABEL_142:
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_101879198);
  }
  std::string v70 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    std::string v71 = *v64;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v71;
    _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEBUG,  "TILE: DEM,fDefaultNumOfSurroundingCirclesDEM, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101879198);
    }
    v131 = *v64;
    *(_DWORD *)std::string __p = 67109120;
    *(_DWORD *)&__p[4] = v131;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TILE: DEM,fDefaultNumOfSurroundingCirclesDEM, %d",  __p);
    v133 = (char *)v132;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()",  "%s\n",  v132);
    if (v133 != buf) {
      free(v133);
    }
  }

  sub_1002F0B04(buf);
  std::string v72 = (int *)(a1 + 452);
  std::string v73 = sub_1002A7CB0(*(uint64_t *)buf, "NumOfSurroundingCirclesHrse", (_DWORD *)(a1 + 452));
  std::string v74 = v73;
  std::string v75 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_151;
  }
  std::string v76 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    uint64_t v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
    if (!v74) {
      goto LABEL_155;
    }
  }

  else
  {
LABEL_151:
    if (!v73) {
      goto LABEL_155;
    }
  }

  if (*v72 < 0) {
    *std::string v72 = 5;
  }
LABEL_155:
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_101879198);
  }
  uint64_t v78 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v79 = *v72;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v79;
    _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEBUG,  "TILE: HRSE,fDefaultNumOfSurroundingCirclesHrse, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101879198);
    }
    v134 = *v72;
    *(_DWORD *)std::string __p = 67109120;
    *(_DWORD *)&__p[4] = v134;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "TILE: HRSE,fDefaultNumOfSurroundingCirclesHrse, %d",  __p);
    v136 = (char *)v135;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()",  "%s\n",  v135);
    if (v136 != buf) {
      free(v136);
    }
  }

  sub_100E79F28(v143);
  uint64_t v80 = (char *)operator new(0x138uLL);
  sub_100C22844();
  sub_1010DDBC0(buf, "CLDemTileServer");
  sub_100E79D6C(v80, 1LL, &qword_10199AE88, &__dst, buf);
  if (v160 < 0) {
    operator delete(*(void **)buf);
  }
  v80[80] = v141;
  *((void *)v80 + 14) = 0x4150266000000000LL;
  *((void *)v80 + 15) = *v38;
  *((_DWORD *)v80 + 33) = 1000;
  *((void *)v80 + 17) = *v44;
  *(int64x2_t *)(v80 + 152) = vdupq_n_s64(0x3FB999999999999AuLL);
  char *v80 = 1;
  *((_DWORD *)v80 + 37) = *v64;
  v80[177] = 0;
  v148 = v80;
  sub_100E7A284(v143, 1u, (uint64_t *)&v148);
  uint64_t v81 = (uint64_t)v148;
  v148 = 0LL;
  if (v81)
  {
    uint64_t v82 = (void *)sub_100970994(v81);
    operator delete(v82);
  }

  std::string v83 = (char *)operator new(0x138uLL);
  sub_100C228D8();
  sub_1010DDBC0(buf, "CLHrseTileServer");
  sub_100E79D6C(v83, 2LL, &qword_10199AED8, &v157, buf);
  if (v160 < 0) {
    operator delete(*(void **)buf);
  }
  v83[80] = v140;
  *((void *)v83 + 14) = 0x4142750000000000LL;
  *((void *)v83 + 15) = *v38;
  *((_DWORD *)v83 + 33) = 200;
  *((void *)v83 + 17) = *v44;
  *(int64x2_t *)(v83 + 152) = vdupq_n_s64(0x3FA999999999999AuLL);
  void *v83 = 1;
  *((_DWORD *)v83 + 37) = *v72;
  v83[177] = 0;
  v147 = (uint64_t)v83;
  sub_100E7A284(v143, 2u, &v147);
  std::string v84 = v147;
  v147 = 0LL;
  if (v84)
  {
    std::string v85 = (void *)sub_100970994(v84);
    operator delete(v85);
  }

  std::string v86 = (char *)operator new(0x138uLL);
  sub_100C2296C();
  sub_100C22A00(a1, (std::string::size_type)buf);
  sub_1010DDBC0(__p, "CLAppTileServer");
  sub_100E79D6C(v86, 9LL, &qword_10199AF28, buf, __p);
  if (v154 < 0) {
    operator delete(*(void **)__p);
  }
  if (v160 < 0) {
    operator delete(*(void **)buf);
  }
  v86[80] = 0;
  *((_OWORD *)v86 + 7) = *(_OWORD *)v32;
  *((void *)v86 + 17) = *v44;
  __asm { FMOV            V0.2D, #0.5 }

  v142 = _Q0;
  *(_OWORD *)(v86 + 152) = _Q0;
  *((int32x2_t *)v86 + 21) = vdup_n_s32(0x3E8u);
  *std::string v86 = v150;
  *((_DWORD *)v86 + 37) = 1;
  v86[177] = 1;
  *((_DWORD *)v86 + 33) = 100;
  v146 = (uint64_t)v86;
  sub_100E7A284(v143, 9u, &v146);
  std::string v92 = v146;
  v146 = 0LL;
  if (v92)
  {
    std::string v93 = (void *)sub_100970994(v92);
    operator delete(v93);
  }

  __int128 v94 = (char *)operator new(0x138uLL);
  sub_100C22DFC();
  sub_1010DDBC0(buf, "CLTransitTileServer");
  sub_100E79D6C(v94, 10LL, &qword_10199AF78, &v156, buf);
  if (v160 < 0) {
    operator delete(*(void **)buf);
  }
  v94[80] = v139;
  *((_OWORD *)v94 + 7) = *(_OWORD *)v32;
  *((void *)v94 + 17) = *v44;
  *(_OWORD *)(v94 + 152) = xmmword_1013417D0;
  *__int128 v94 = v149;
  *((_DWORD *)v94 + 37) = -1;
  *(_WORD *)(v94 + 177) = 1;
  *((_DWORD *)v94 + 33) = 1;
  v145 = (uint64_t)v94;
  sub_100E7A284(v143, 0xAu, &v145);
  int v95 = v145;
  v145 = 0LL;
  if (v95)
  {
    std::string v96 = (void *)sub_100970994(v95);
    operator delete(v96);
  }

  int v97 = (char *)operator new(0x138uLL);
  sub_100C22E90();
  sub_1010DDBC0(buf, "CLTransitMacTileServer");
  sub_100E79D6C(v97, 11LL, &qword_10199AFC8, &v155, buf);
  if (v160 < 0) {
    operator delete(*(void **)buf);
  }
  v97[80] = v138;
  *((_OWORD *)v97 + 7) = *(_OWORD *)v32;
  *((void *)v97 + 17) = *v44;
  *(_OWORD *)(v97 + 152) = v142;
  *((void *)v97 + 21) = 0x100000001000LL;
  sub_1004F2598();
  *int v97 = sub_1004F7000();
  *((_DWORD *)v97 + 37) = 1;
  v97[177] = 0;
  *((_DWORD *)v97 + 33) = 200;
  v144 = (uint64_t)v97;
  sub_100E7A284(v143, 0xBu, &v144);
  __int128 v98 = v144;
  v144 = 0LL;
  if (v98)
  {
    __int128 v99 = (void *)sub_100970994(v98);
    operator delete(v99);
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  std::string::size_type v41 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v42 = *(void *)(a1 + 8);
    *(_DWORD *)std::string buf = 136315394;
    v192 = "alertCanceledBecauseOfOffWristPre";
    v193 = 2048;
    v194 = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v126 = *(void *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfOffWristPre";
    v189 = 2048;
    v190 = v126;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v128 = (uint8_t *)v127;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v127);
    if (v128 != buf) {
      free(v128);
    }
  }

  a4[8] = 1;
  std::string::size_type v10 = *(void *)(a1 + 24);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_18:
    if ((v10 & 0x40000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_139;
  }

    int v6 = (__int128 **)a3;
    uint64_t v68 = v171;
    *(void *)&v180 = sub_100C76224(a1, a3);
    if (!(void)v180)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      int v97 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        __int128 v98 = *(void *)(a1 + 8);
        *(_DWORD *)std::string buf = 134349056;
        *(void *)&uint8_t buf[4] = v98;
        _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_185;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      __int128 v99 = *(void *)(a1 + 8);
      LODWORD(v181) = 134349056;
      *(void *)((char *)&v181 + 4) = v99;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil",  &v181,  v162);
      __int128 v101 = (uint8_t *)v100;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMa pGeometry::DistanceQueryResult &, int) const",  "%s\n",  v100);
      goto LABEL_202;
    }

    v174[0] = _NSConcreteStackBlock;
    v174[1] = 3221225472LL;
    v174[2] = sub_100C7BC2C;
    v174[3] = &unk_10187A708;
    v174[6] = v12;
    v174[7] = v14;
    v174[4] = v182;
    v174[5] = a1;
    v175 = COERCE_DOUBLE(v174);
    ++*(_DWORD *)(a1 + 36);
    v179 = 0LL;
    std::string v91 = operator new(0x28uLL);
    *std::string v91 = &off_10187AA48;
    v91[1] = &v177;
    v91[2] = a1;
    v91[3] = &v180;
    v91[4] = &v175;
    v179 = v91;
    std::string v92 = sub_100C76C70((uint64_t)v178);
    std::string v93 = v179;
    if (v179 == v178)
    {
      std::string v93 = v178;
      __int128 v94 = 4LL;
    }

    else
    {
      if (!v179) {
        goto LABEL_158;
      }
      __int128 v94 = 5LL;
    }

    (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_158:

    *(void *)&v180 = 0LL;
    if (!v92)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      v119 = (os_log_s *)qword_1019348B8;
      int v6 = (__int128 **)a3;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        v120 = *(void *)(a1 + 8);
        *(_DWORD *)std::string buf = 134349056;
        *(void *)&uint8_t buf[4] = v120;
        _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,query failed (moveOnRoad)",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_185;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      v129 = *(void *)(a1 + 8);
      LODWORD(v181) = 134349056;
      *(void *)((char *)&v181 + 4) = v129;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,query failed (moveOnRoad)",  &v181,  v162);
      __int128 v101 = (uint8_t *)v130;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMa pGeometry::DistanceQueryResult &, int) const",  "%s\n",  v130);
LABEL_202:
      if (v101 != buf) {
        free(v101);
      }
      int v6 = (__int128 **)a3;
LABEL_185:
      std::string v89 = 0;
      v167 = 0;
      goto LABEL_115;
    }

    if (!v22) {
      goto LABEL_160;
    }
LABEL_72:
    if (!v177
      || (BOOL v64 = *(void *)(*(void *)&v182[8] + 48LL), v65 = *(void *)(*(void *)&v182[8] + 56LL), v64 == v65))
    {
      uint64_t v67 = 0xFFFFFFFFLL;
      uint64_t v68 = v171;
      int v6 = (__int128 **)a3;
    }

    else
    {
      std::string v66 = 0LL;
      uint64_t v67 = 0xFFFFFFFFLL;
      uint64_t v68 = v171;
      int v6 = (__int128 **)a3;
      do
      {
        std::string v69 = *(void ***)v64;
        std::string v70 = *(std::__shared_weak_count **)(v64 + 8);
        if (v70)
        {
          std::string v71 = (unint64_t *)&v70->__shared_owners_;
          do
            std::string v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }

        std::string v73 = a2;
        while (1)
        {
          std::string v73 = *(void *)(v73 + 8);
          if (v73 == a2) {
            break;
          }
          if (*(void *)(v73 + 16) == **v69)
          {
            uint64_t v67 = v66;
            break;
          }
        }

        if (v70)
        {
          std::string v74 = (unint64_t *)&v70->__shared_owners_;
          do
            std::string v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }

        if ((v67 & 0x80000000) == 0) {
          break;
        }
        ++v66;
        v64 += 16LL;
      }

      while (v64 != v65);
    }

    if (v18 <= v16)
    {
      std::string v76 = *(void *)(*(void *)&v182[8] + 48LL);
      uint64_t v77 = *(void *)(*(void *)&v182[8] + 56LL);
      uint64_t v78 = v76 != v77 && v172 < a4;
      if (v78 && (v67 != 0xFFFFFFFF || !v177))
      {
        char v90 = -v18;
        if (v177) {
          char v90 = v18;
        }
        a6 = a6 + v90;
        if ((v67 & 0x80000000) != 0)
        {
          int v95 = sub_1008E8D34(v163);
          std::string v76 = *(void *)(*(void *)&v182[8] + 48LL);
          uint64_t v67 = v95 % (unint64_t)((*(void *)(*(void *)&v182[8] + 56LL) - v76) >> 4);
        }

        else if (v67 >= (v77 - v76) >> 4)
        {
LABEL_137:
          std::string v89 = 1;
          goto LABEL_115;
        }

        if (v177) {
          a5 = 1.0;
        }
        else {
          a5 = 0.0;
        }
        std::string v96 = 16 * v67;
        sub_1000F2F30(v6, *(uint64_t **)(v76 + v96));
        if (!*v6)
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          __int128 v102 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
          {
            int v103 = *(void *)(a1 + 8);
            *(_DWORD *)std::string buf = 134349056;
            *(void *)&uint8_t buf[4] = v103;
            _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10187A7C8);
            }
            std::string v104 = *(void *)(a1 + 8);
            LODWORD(v181) = 134349056;
            *(void *)((char *)&v181 + 4) = v104;
            LODWORD(v162) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr",  &v181,  v162);
            v106 = (uint8_t *)v105;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList & , CLMapGeometry::DistanceQueryResult &, int) const",  "%s\n",  v105);
            if (v106 != buf) {
              free(v106);
            }
            std::string v89 = 0;
            v167 = 0;
            int v6 = (__int128 **)a3;
            goto LABEL_115;
          }

          goto LABEL_185;
        }

        *((_BYTE *)v6 + 20) = *(_BYTE *)(*(void *)(*(void *)(*(void *)&v182[8] + 48LL) + v96) + 16LL);
        goto LABEL_137;
      }
    }

    v181 = 0uLL;
    v175 = -1.0;
    uint64_t v79 = (std::__shared_weak_count *)v6[1];
    v173[0] = *v6;
    v173[1] = &v79->__vftable;
    if (v79)
    {
      uint64_t v80 = (unint64_t *)&v79->__shared_owners_;
      do
        uint64_t v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }

    uint64_t v82 = sub_100C7BDAC(v166, v173, (double *)&v181, &v175, a5);
    std::string v83 = v82;
    if (!v79) {
      goto LABEL_106;
    }
    std::string v84 = (unint64_t *)&v79->__shared_owners_;
    do
      std::string v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
      if (!v83)
      {
LABEL_109:
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        std::string v87 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
        {
          char v88 = *(void *)(a1 + 8);
          *(_DWORD *)std::string buf = 134349056;
          *(void *)&uint8_t buf[4] = v88;
          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,moveOnRoadInternal,interpolateProjections returned false",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          v126 = *(void *)(a1 + 8);
          LODWORD(v1sub_10000AE14(v1 - 80) = 134349056;
          *(void *)((char *)&v180 + 4) = v126;
          LODWORD(v162) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,moveOnRoadInternal,interpolateProjections returned false",  &v180,  v162);
          v128 = (uint8_t *)v127;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const",  "%s\n",  v127);
          if (v128 != buf) {
            free(v128);
          }
        }

        goto LABEL_114;
      }
    }

    else
    {
LABEL_106:
      if (!v82) {
        goto LABEL_109;
      }
    }

    *((double *)v6 + 6) = a5;
    *((_OWORD *)v6 + 2) = v181;
    std::string v86 = v175;
    *((float *)v6 + 6) = v86;
LABEL_114:
    v167 = v83;
    std::string v89 = 0;
LABEL_115:
    _Block_object_dispose(v182, 8);
    *(void *)std::string buf = v186;
    sub_10004CC28((void ***)buf);
    objc_autoreleasePoolPop(v68);
    if ((v89 & 1) == 0) {
      return v167;
    }
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10187A7C8);
  }
  v131 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    v132 = *(void *)(a1 + 8);
    *(_DWORD *)std::string buf = 134349312;
    *(void *)&uint8_t buf[4] = v132;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(double *)&buf[14] = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,moveOnRoad failed,distanceRemaining,%{public}.1lf",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    v133 = *(void *)(a1 + 8);
    *(_DWORD *)v182 = 134349312;
    *(void *)&v182[4] = v133;
    *(_WORD *)&v182[12] = 2050;
    *(double *)&v182[14] = a6;
    LODWORD(v162) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,moveOnRoad failed,distanceRemaining,%{public}.1lf",  v182,  v162);
    v135 = (uint8_t *)v134;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapG eometry::DistanceQueryResult &, int) const",  "%s\n",  v134);
    if (v135 != buf) {
      free(v135);
    }
  }

  return 0;
}

  uint64_t result = *(float *)(a2 + 140);
  v5 |= 0x1000000uLL;
  *CFStringRef v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 140) = result;
  unint64_t v7 = *v3;
  if ((*v3 & 0x2000000000000000LL) == 0)
  {
LABEL_62:
    if ((v7 & 0x40000000000LL) == 0) {
      goto LABEL_63;
    }
    goto LABEL_129;
  }

  PB::TextFormatter::format(this, "lgDeltaVXYZUnconditional", *(float *)(a1 + 276));
  int v6 = *v5;
  unint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x800000000000000LL) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000000LL) == 0) {
      goto LABEL_62;
    }
    goto LABEL_129;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0x39u);
  int v6 = *v4;
  if ((*v4 & 0x2000000000000000LL) == 0)
  {
LABEL_62:
    if ((v6 & 0x40000000000LL) == 0) {
      goto LABEL_63;
    }
    goto LABEL_129;
  }

  uint64_t result = *(float *)(a2 + 132);
  v5 |= 0x40000000uLL;
  *CFStringRef v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 132) = result;
  uint64_t v4 = *v3;
  unint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x800000000LL) == 0)
  {
LABEL_54:
    if ((v4 & 0x2000000000LL) == 0) {
      goto LABEL_55;
    }
    goto LABEL_129;
  }

  PB::TextFormatter::format(this, "lowSenseCrashDetectorDecision", *(_BYTE *)(a1 + 277));
  int v6 = *v5;
  unint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000LL) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000LL) == 0) {
      goto LABEL_54;
    }
    goto LABEL_129;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160), 0x30u);
  BOOL v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_129;
  }

  uint64_t result = *(float *)(a2 + 76);
  v5 |= 0x10000uLL;
  *CFStringRef v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 76) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_47:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_129;
  }

  PB::TextFormatter::format(this, "kRegimeDvThreshold1ROWOASF", *(float *)(a1 + 148));
  unint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x800000000LL) == 0)
  {
LABEL_46:
    if ((v6 & 0x1000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_129;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0xEDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  BOOL v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_47:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_129;
  }

  uint64_t result = *(float *)(a2 + 240);
  v5 |= 0x4000000000000uLL;
  *CFStringRef v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 240) = result;
  uint64_t v4 = *v3;
  unint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x1000000000000000LL) == 0)
  {
LABEL_22:
    if ((v7 & 2) == 0) {
      goto LABEL_23;
    }
    goto LABEL_129;
  }

  PB::TextFormatter::format(this, "isFreeFallDetectedEpoch", *(_BYTE *)(a1 + 325));
  unint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((v6 & 0x8000) == 0)
  {
LABEL_26:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_129;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 240), 0x11u);
  BOOL v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x1000000000000000LL) == 0)
  {
LABEL_22:
    if ((v6 & 2) == 0) {
      goto LABEL_23;
    }
    goto LABEL_129;
  }

  __int128 v57 = *(_BYTE *)(a2 + 182);
  v3 |= 0x800000000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 182) = v57;
  BOOL v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  CFStringRef v2 = *(void *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 8) == 0)
  {
LABEL_49:
    if ((v2 & 8) == 0) {
      goto LABEL_50;
    }
    goto LABEL_129;
  }

  PB::TextFormatter::format(this, "kMaxSaturationRO0", *(float *)(a1 + 80));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  BOOL v5 = *(void *)(a1 + 204);
  if ((v5 & 0x8000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_129;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x451u);
  BOOL v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80000) == 0)
  {
LABEL_49:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_129;
  }

            PB::Reader::recallMark(this, v109);
          }

          else
          {
            std::string v86 = *(char **)(a1 + 16);
            std::string v85 = *(void *)(a1 + 24);
            if ((unint64_t)v86 >= v85)
            {
              char v88 = (char *)*v10;
              std::string v89 = (v86 - (_BYTE *)*v10) >> 2;
              char v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62) {
LABEL_176:
              }
                sub_100007008();
              std::string v91 = v85 - (void)v88;
              if (v91 >> 1 > v90) {
                char v90 = v91 >> 1;
              }
              else {
                std::string v92 = v90;
              }
              if (v92)
              {
                std::string v93 = (char *)sub_10000956C((uint64_t)v11, v92);
                char v88 = *(char **)(a1 + 8);
                std::string v86 = *(char **)(a1 + 16);
              }

              else
              {
                std::string v93 = 0LL;
              }

              __int128 v94 = &v93[4 * v89];
              *(_DWORD *)__int128 v94 = 0;
              std::string v87 = v94 + 4;
              while (v86 != v88)
              {
                int v95 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *((_DWORD *)v94 - 1) = v95;
                v94 -= 4;
              }

              *(void *)(a1 + 8) = v94;
              *(void *)(a1 + 16) = v87;
              *(void *)(a1 + 24) = &v93[4 * v92];
              if (v88) {
                operator delete(v88);
              }
            }

            else
            {
              *(_DWORD *)std::string v86 = 0;
              std::string v87 = v86 + 4;
            }

            *(void *)(a1 + 16) = v87;
            std::string v96 = *((void *)this + 1);
            int v97 = *((void *)this + 2);
            __int128 v98 = *(void *)this;
            __int128 v99 = 0;
            int v100 = 0;
            if (v96 > 0xFFFFFFFFFFFFFFF5LL || v96 + 10 > v97)
            {
              std::string v104 = 0LL;
              if (v97 <= v96) {
                int v97 = *((void *)this + 1);
              }
              while (1)
              {
                if (v97 == v96)
                {
                  LODWORD(v104) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_165;
                }

                __int128 v102 = v96 + 1;
                int v103 = *(_BYTE *)(v98 + v96);
                *((void *)this + 1) = v102;
                v104 |= (unint64_t)(v103 & 0x7F) << v99;
                if ((v103 & 0x80) == 0) {
                  break;
                }
                v99 += 7;
                std::string v96 = v102;
                std::string::size_type v62 = v100++ > 8;
                if (v62)
                {
LABEL_161:
                  LODWORD(v104) = 0;
                  goto LABEL_165;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v104) = 0;
              }
            }

            else
            {
              std::string v104 = 0LL;
              while (1)
              {
                __int16 v105 = v96 + 1;
                *((void *)this + 1) = v96 + 1;
                v106 = *(_BYTE *)(v98 + v96);
                v104 |= (unint64_t)(v106 & 0x7F) << v99;
                if ((v106 & 0x80) == 0) {
                  break;
                }
                v99 += 7;
                std::string v96 = v105;
                std::string::size_type v62 = v100++ > 8;
                if (v62) {
                  goto LABEL_161;
                }
              }
            }

void sub_100156228( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, char a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8LL))(v65);
  }
  if (a63 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  a65 = &a40;
  sub_1000129D4((void ***)&a65);
  a65 = &a44;
  sub_100159450((void ***)&a65);
  a65 = &a47;
  sub_100159450((void ***)&a65);
  a65 = &a50;
  sub_100159450((void ***)&a65);
  _Unwind_Resume(a1);
}

void sub_1001564A4(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    __int128 v37 = 0uLL;
    v38[0] = 0LL;
    v34.__r_.__value_.__s.__size_ = 16;
    strcpy((char *)&v34, "SELECT DISTINCT ");
    int v6 = std::string::append(&v34, "ServiceUUID");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    unsigned int v8 = std::string::append(&v42, " FROM ");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v10 = std::string::append(&v43, "MiLoServices");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v12 = std::string::append(&v39, " LIMIT ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v33, a2);
    if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v14 = &v33;
    }
    else {
      unint64_t v14 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v33.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    std::string::size_type v16 = std::string::append(&v44, (const std::string::value_type *)v14, size);
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t cap = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v18 = (char *)__p;
    }
    else {
      __int128 v18 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v18, &v44);
    std::string::size_type v19 = v44.__r_.__value_.__r.__words[0];
    __int128 v20 = (sqlite3_stmt *)sub_100019240((uint64_t)v44.__r_.__value_.__l.__data_);
    while (j__sqlite3_step(v20) == 100)
    {
      v42.__r_.__value_.__r.__words[0] = sub_100011C2C(v20, 0);
      v42.__r_.__value_.__l.__size_ = v21;
      memset(&v43, 0, sizeof(v43));
      if ((sub_100013090((uint64_t)&v42, &v43) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)&v44);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
        sub_1000139B0((uint64_t)&v44);
      }

      uint64_t v22 = (_OWORD *)*((void *)&v37 + 1);
      if (*((void *)&v37 + 1) >= v38[0])
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v37 + 1) - v37) >> 3);
        unint64_t v25 = v24 + 1;
        if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        else {
          unint64_t v26 = v25;
        }
        std::string::size_type v41 = v38;
        if (v26) {
          __int128 v27 = (char *)sub_10000701C((uint64_t)v38, v26);
        }
        else {
          __int128 v27 = 0LL;
        }
        std::string::size_type v28 = (std::string::size_type)&v27[24 * v24];
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        v39.__r_.__value_.__l.__size_ = v28;
        __int128 v40 = &v27[24 * v26];
        __int128 v29 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
        *(void *)(v28 + 16) = v43.__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string::size_type v28 = v29;
        memset(&v43, 0, sizeof(v43));
        v39.__r_.__value_.__l.__cap_ = v28 + 24;
        sub_100013F10((uint64_t *)&v37, &v39);
        uint64_t v30 = *((void *)&v37 + 1);
        sub_100014098((uint64_t)&v39);
        *((void *)&v37 + 1) = v30;
      }

      else
      {
        __int128 v23 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
        *(void *)(*((void *)&v37 + 1) + 16LL) = v43.__r_.__value_.__l.__cap_;
        *uint64_t v22 = v23;
        *((void *)&v37 + 1) = (char *)v22 + 24;
      }
    }

    sqlite3_reset(v20);
    *(_OWORD *)a3 = v37;
    *(void *)(a3 + 16) = v38[0];
    v38[0] = 0LL;
    __int128 v37 = 0uLL;
    if (v19) {
      (*(void (**)(std::string::size_type))(*(void *)v19 + 8LL))(v19);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    sub_1000129D4((void ***)&v44);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    __int128 v31 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v44.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all Service UUIDs",  (uint8_t *)&v44,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v44, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      LOWORD(v39.__r_.__value_.__l.__data_) = 0;
      __int128 v32 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v44,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all Service UUIDs",  &v39,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<std::string> CLMicroLocationModelTable::getAllServicesUUIDs(uint32_t)",  "%s\n",  (const char *)v32);
      if (v32 != &v44) {
        free(v32);
      }
    }

    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
  }

void sub_1001569CC(_Unwind_Exception *a1)
{
}

BOOL sub_100156CBC(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v42.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v42, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v42, "MicroLocationModels");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    int v6 = std::string::append(&v43, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    unsigned int v8 = std::string::append(&v44, "ModelUUID");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v10 = std::string::append(&v45, " IN (");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v12 = std::string::append(&v46, "SELECT ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v14 = std::string::append(&v47, "ModelUUID");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v16 = std::string::append(&v48, " FROM ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v18 = std::string::append(&v49, "MicroLocationModels");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v20 = std::string::append(&v50, " ORDER BY ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v22 = std::string::append(&v51, "GenerationTimestamp");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v24 = std::string::append(&v52, " LIMIT ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v41, a2);
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v26 = &v41;
    }
    else {
      unint64_t v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v41.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    std::string::size_type v28 = std::string::append(&v53, (const std::string::value_type *)v26, size);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v30 = std::string::append(&v56, ")");
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t cap = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v32 = (char *)__p;
    }
    else {
      __int128 v32 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v32, &v56);
    std::string::size_type v33 = v56.__r_.__value_.__r.__words[0];
    std::string v34 = (sqlite3_stmt *)sub_100019240((uint64_t)v56.__r_.__value_.__l.__data_);
    if (v34)
    {
      BOOL v35 = sub_1003BB2BC(*(void *)a1, v34);
      if (!v33) {
        goto LABEL_42;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      __int128 v38 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v56,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v56, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821310);
        }
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        __int128 v40 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v53,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationModelTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v40);
        if (v40 != &v56) {
          free(v40);
        }
      }

      BOOL v35 = 0LL;
      if (!v33) {
        goto LABEL_42;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v33 + 8LL))(v33);
LABEL_42:
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    return v35;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101821310);
  }
  __int128 v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v56.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't deleteOldestRows",  (uint8_t *)&v56,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v56, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    LOWORD(__p[0]) = 0;
    std::string v39 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't deleteOldestRows",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationModelTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v39);
    if (v39 != &v56) {
      free(v39);
    }
  }

  return 0LL;
}

void sub_100157334( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1001574C4(uint64_t a1, void **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    p_vtable = a2;
    int v3 = (char *)*a2;
    if (*a2 != a2[1])
    {
      v65.__r_.__value_.__s.__size_ = 1;
      LOWORD(v65.__r_.__value_.__l.__data_) = 34;
      int v5 = v3[23];
      if (v5 >= 0) {
        int v6 = v3;
      }
      else {
        int v6 = *(const std::string::value_type **)v3;
      }
      if (v5 >= 0) {
        std::string::size_type v7 = v3[23];
      }
      else {
        std::string::size_type v7 = *((void *)v3 + 1);
      }
      unsigned int v8 = std::string::append(&v65, v6, v7);
      __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      std::string::size_type v10 = std::string::append(&v66, "");
      __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v12 = p_vtable[1];
      for (uint64_t i = (uint64_t)*p_vtable + 24; (void *)i != v12; i += 24LL)
      {
        v63.__r_.__value_.__s.__size_ = 1;
        LOWORD(v63.__r_.__value_.__l.__data_) = 44;
        unint64_t v14 = std::string::append(&v63, "");
        __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0LL;
        v14->__r_.__value_.__l.__cap_ = 0LL;
        v14->__r_.__value_.__r.__words[0] = 0LL;
        int v16 = *(char *)(i + 23);
        if (v16 >= 0) {
          __int128 v17 = (const std::string::value_type *)i;
        }
        else {
          __int128 v17 = *(const std::string::value_type **)i;
        }
        if (v16 >= 0) {
          std::string::size_type v18 = *(unsigned __int8 *)(i + 23);
        }
        else {
          std::string::size_type v18 = *(void *)(i + 8);
        }
        __int128 v19 = std::string::append(&v64, v17, v18);
        __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0LL;
        v19->__r_.__value_.__l.__cap_ = 0LL;
        v19->__r_.__value_.__r.__words[0] = 0LL;
        __int128 v21 = std::string::append(&v65, "");
        __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0LL;
        v21->__r_.__value_.__l.__cap_ = 0LL;
        v21->__r_.__value_.__r.__words[0] = 0LL;
        if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v23 = &v66;
        }
        else {
          __int128 v23 = (std::string *)v66.__r_.__value_.__r.__words[0];
        }
        if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = v66.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = v66.__r_.__value_.__l.__size_;
        }
        std::string::append(&v62, (const std::string::value_type *)v23, size);
      }

      v58.__r_.__value_.__s.__size_ = 12;
      strcpy((char *)&v58, "DELETE FROM ");
      __int128 v25 = std::string::append(&v58, "MicroLocationModels");
      __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0LL;
      v25->__r_.__value_.__l.__cap_ = 0LL;
      v25->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v27 = std::string::append(&v59, " WHERE ");
      __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0LL;
      v27->__r_.__value_.__l.__cap_ = 0LL;
      v27->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v29 = std::string::append(&v60, "ClientID");
      __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0LL;
      v29->__r_.__value_.__l.__cap_ = 0LL;
      v29->__r_.__value_.__r.__words[0] = 0LL;
      char v57 = 4;
      strcpy(__s, " IN ");
      __int128 v31 = std::string::append(&v61, __s, 4uLL);
      __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0LL;
      v31->__r_.__value_.__l.__cap_ = 0LL;
      v31->__r_.__value_.__r.__words[0] = 0LL;
      char v55 = 1;
      strcpy(v54, "(");
      std::string::size_type v33 = std::string::append(&v63, v54, 1uLL);
      __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0LL;
      v33->__r_.__value_.__l.__cap_ = 0LL;
      v33->__r_.__value_.__r.__words[0] = 0LL;
      if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v35 = &v62;
      }
      else {
        BOOL v35 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v36 = v62.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v36 = v62.__r_.__value_.__l.__size_;
      }
      __int128 v37 = std::string::append(&v64, (const std::string::value_type *)v35, v36);
      __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0LL;
      v37->__r_.__value_.__l.__cap_ = 0LL;
      v37->__r_.__value_.__r.__words[0] = 0LL;
      char v53 = 1;
      strcpy(v52, ")");
      std::string v39 = std::string::append(&v66, v52, 1uLL);
      __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0LL;
      v39->__r_.__value_.__l.__cap_ = 0LL;
      v39->__r_.__value_.__r.__words[0] = 0LL;
      if (v53 < 0) {
        operator delete(*(void **)v52);
      }
      if (v55 < 0) {
        operator delete(*(void **)v54);
      }
      if (v57 < 0) {
        operator delete(*(void **)__s);
      }
      if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v41 = &v65;
      }
      else {
        std::string v41 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)a1, (char *)v41, &v66);
      std::string::size_type v42 = v66.__r_.__value_.__r.__words[0];
      std::string v43 = (sqlite3_stmt *)sub_100019240((uint64_t)v66.__r_.__value_.__l.__data_);
      if (v43)
      {
        BOOL v44 = sub_1003BB2BC(*(void *)a1, v43);
        if (!v42)
        {
LABEL_67:
          return v44;
        }
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101821310);
        }
        std::string v47 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v66.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v66,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&v66, 0x65CuLL);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101821310);
          }
          LOWORD(v64.__r_.__value_.__l.__data_) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v66,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v64,  2);
          std::string v51 = (std::string *)v50;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationModelTable::deleteModelsForClients(const std::vector<std::string> &)",  "%s\n",  v50);
          if (v51 != &v66) {
            free(v51);
          }
        }

        BOOL v44 = 0LL;
        if (!v42) {
          goto LABEL_67;
        }
      }

      (*(void (**)(std::string::size_type))(*(void *)v42 + 8LL))(v42);
      goto LABEL_67;
    }

    sub_10122EC4C();
    __break(1u);
    goto LABEL_85;
  }

  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_1019348D0 != -1) {
LABEL_85:
  }
    dispatch_once(&qword_1019348D0, &stru_101821310);
  std::string v45 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v66.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't delete recording labels",  (uint8_t *)&v66,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v66, 0x65CuLL);
    LOWORD(v65.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v66,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't delete recording labels",  &v65,  2);
    std::string v49 = (std::string *)v48;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationModelTable::deleteModelsForClients(const std::vector<std::string> &)",  "%s\n",  v48);
    if (v49 != &v66) {
      free(v49);
    }
  }

  return 0LL;
}

void sub_100157C0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, uint64_t a49, void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
  }
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

void sub_100157DBC(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    __int128 v72 = 0uLL;
    v73[0] = 0LL;
    v59.__r_.__value_.__s.__size_ = 16;
    strcpy((char *)&v59, "SELECT DISTINCT ");
    unsigned int v8 = std::string::append(&v59, "LoiGroupId");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    char v58 = 6;
    strcpy(__s, " FROM ");
    std::string::size_type v10 = std::string::append(&v60, __s, 6uLL);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v12 = std::string::append(&v61, "MicroLocationModels");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v14 = std::string::append(&v62, "    WHERE ");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    int v16 = std::string::append(&v63, "ClientID");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v18 = std::string::append(&v64, " LIKE '%' || ");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v20 = std::string::append(&v65, "        (SELECT ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v22 = std::string::append(&v66, "ClientID");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v24 = std::string::append(&v67, " FROM ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v26 = std::string::append(&v68, "MiLoServices");
    __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0LL;
    v26->__r_.__value_.__l.__cap_ = 0LL;
    v26->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v28 = std::string::append(&v69, " WHERE UserId==");
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    int v30 = *(char *)(a2 + 23);
    if (v30 >= 0) {
      __int128 v31 = (const std::string::value_type *)a2;
    }
    else {
      __int128 v31 = *(const std::string::value_type **)a2;
    }
    if (v30 >= 0) {
      std::string::size_type v32 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v32 = *(void *)(a2 + 8);
    }
    std::string::size_type v33 = std::string::append(&v77, v31, v32);
    __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0LL;
    v33->__r_.__value_.__l.__cap_ = 0LL;
    v33->__r_.__value_.__r.__words[0] = 0LL;
    BOOL v35 = std::string::append(&v74, ") || '%' LIMIT ");
    __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0LL;
    v35->__r_.__value_.__l.__cap_ = 0LL;
    v35->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v56, a3);
    if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v37 = &v56;
    }
    else {
      __int128 v37 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v56.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    std::string v39 = std::string::append(&__str, (const std::string::value_type *)v37, size);
    __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    int64_t cap = v39->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v40;
    v39->__r_.__value_.__l.__size_ = 0LL;
    v39->__r_.__value_.__l.__cap_ = 0LL;
    v39->__r_.__value_.__r.__words[0] = 0LL;
    if (v58 < 0) {
      operator delete(*(void **)__s);
    }
    if (cap >= 0) {
      std::string v41 = (char *)__p;
    }
    else {
      std::string v41 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v41, &__str);
    std::string::size_type v42 = __str.__r_.__value_.__r.__words[0];
    std::string v43 = (sqlite3_stmt *)sub_100019240((uint64_t)__str.__r_.__value_.__l.__data_);
    while (j__sqlite3_step(v43) == 100)
    {
      sub_100011CB8(v43, 0, &__str);
      memset(&v77, 0, sizeof(v77));
      std::string::operator=(&v77, &__str);
      BOOL v44 = (_OWORD *)*((void *)&v72 + 1);
      if (*((void *)&v72 + 1) >= v73[0])
      {
        unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v72 + 1) - v72) >> 3);
        unint64_t v47 = v46 + 1;
        if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        else {
          unint64_t v48 = v47;
        }
        std::string v76 = v73;
        if (v48) {
          std::string v49 = (char *)sub_10000701C((uint64_t)v73, v48);
        }
        else {
          std::string v49 = 0LL;
        }
        std::string::size_type v50 = (std::string::size_type)&v49[24 * v46];
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
        v74.__r_.__value_.__l.__size_ = v50;
        std::string v75 = &v49[24 * v48];
        __int128 v51 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        *(void *)(v50 + 16) = v77.__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string::size_type v50 = v51;
        memset(&v77, 0, sizeof(v77));
        v74.__r_.__value_.__l.__cap_ = v50 + 24;
        sub_100013F10((uint64_t *)&v72, &v74);
        uint64_t v52 = *((void *)&v72 + 1);
        sub_100014098((uint64_t)&v74);
        *((void *)&v72 + 1) = v52;
      }

      else
      {
        __int128 v45 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        *(void *)(*((void *)&v72 + 1) + 16LL) = v77.__r_.__value_.__l.__cap_;
        *BOOL v44 = v45;
        *((void *)&v72 + 1) = (char *)v44 + 24;
      }
    }

    sqlite3_reset(v43);
    *(_OWORD *)a4 = v72;
    *(void *)(a4 + 16) = v73[0];
    v73[0] = 0LL;
    __int128 v72 = 0uLL;
    if (v42) {
      (*(void (**)(std::string::size_type))(*(void *)v42 + 8LL))(v42);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
    sub_1000129D4((void ***)&__str);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821310);
    }
    char v53 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select GroupIDs for current user",  (uint8_t *)&__str,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__str, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821310);
      }
      LOWORD(v74.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__str,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select GroupIDs for current user",  &v74,  2);
      uint64_t v55 = (std::string *)v54;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<std::string> CLMicroLocationModelTable::selectLoiGroupIdsForCurrentUser(const std::string &, uint32_t)",  "%s\n",  v54);
      if (v55 != &__str) {
        free(v55);
      }
    }

    *(void *)a4 = 0LL;
    *(void *)(a4 + 8) = 0LL;
    *(void *)(a4 + 16) = 0LL;
  }

void sub_1001584FC(_Unwind_Exception *a1)
{
}

void sub_1001588D0(std::string *__dst, const std::string *a2)
{
  if (__dst[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (__dst[1].__r_.__value_.__s.__data_[0]) {
      std::string::operator=(__dst, a2);
    }
  }

  else if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
  }

  else
  {
    if ((char)a2->__r_.__value_.__s.__size_ < 0)
    {
      sub_1010DD48C(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }

    else
    {
      __int128 v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__l.__cap_ = a2->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }

    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }

void sub_100158960(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10015898C@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6 = sqlite3_column_blob(a1, a2);
  uint64_t v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
  {
    sub_10122EDB8(v7);
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1010DDBC0(&v12, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_101819400;
  }

  int v8 = v7;
  sub_1000634E0(a3);
  uint64_t result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v9, v6, v8);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  return result;
}

void sub_100158A54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_10006F50C(v15);
      _Unwind_Resume(a1);
    }
  }

  else if (!v17)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_100158A9C(uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v7 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0xEA0EA0EA0EA0EALL) {
    sub_100007008();
  }
  if (0x5F15F15F15F15F16LL * ((a1[2] - *a1) >> 3) > v8) {
    unint64_t v8 = 0x5F15F15F15F15F16LL * ((a1[2] - *a1) >> 3);
  }
  if (0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 3) >= 0x75075075075075LL) {
    unint64_t v14 = 0xEA0EA0EA0EA0EALL;
  }
  else {
    unint64_t v14 = v8;
  }
  __int128 v22 = a1 + 2;
  if (v14) {
    uint64_t v15 = (char *)sub_100158D3C((uint64_t)(a1 + 2), v14);
  }
  else {
    uint64_t v15 = 0LL;
  }
  std::string::size_type v18 = v15;
  __int128 v19 = &v15[280 * v7];
  __int128 v21 = &v15[280 * v14];
  sub_100158BF0((uint64_t)(a1 + 2), (uint64_t)v19, a2, a3, a4, a5, a6);
  __int128 v20 = v19 + 280;
  sub_100158CC8(a1, &v18);
  uint64_t v16 = a1[1];
  sub_100158EC0(&v18);
  return v16;
}

void sub_100158BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100158BF0(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  double v12 = *a4;
  else {
    std::string __p = *(std::string *)a6;
  }
  char v14 = 1;
  sub_100151370(a2, v10, v11, a5, &__p, *a7, a7[1], v12);
  if (v14)
  {
  }

void sub_100158CA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100158CC8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100158D84((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100158D3C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    sub_1000070D4();
  }
  return operator new(280 * a2);
}

uint64_t sub_100158D84( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    __int128 v9 = a3;
    do
    {
      __int128 v9 = (__int128 *)((char *)v9 - 280);
      sub_1000A83A0((_OWORD *)(v7 - 280), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 280LL;
      *((void *)&v15 + 1) -= 280LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_100158E3C((uint64_t)v12);
  return v10;
}

void sub_100158E28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100158E3C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100158E70((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_100158E70(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_1000A8540(v3, v1);
      v1 += 280LL;
    }

    while (v1 != v2);
  }

  return result;
}

void **sub_100158EC0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_100158EF0(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 280;
      uint64_t result = sub_1000A8540(v4, v1 - 280);
      uint64_t v1 = *(void *)(v3 + 16);
    }

    while (v1 != v2);
  }

  return result;
}

uint64_t sub_100158F34(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = a1 + 24;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)v5, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v6 = *a3;
    *(void *)(v5 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }

  return a1;
}

void sub_100158F90(_Unwind_Exception *exception_object)
{
}

char *sub_100158FAC(char *__dst, __int128 *a2, __int128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }

  __int128 v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(v6, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)__int128 v6 = v7;
  }

  return __dst;
}

void sub_100159024(_Unwind_Exception *exception_object)
{
}

double sub_100159040@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100159084( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001590A0(std::string *a1)
{
  return sub_100055258(a1);
}

uint64_t sub_1001590EC(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v2 = std::string::append(&v7, "ModelUUID");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v4 = __p;
  }
  else {
    __int128 v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100159188( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001591BC(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "GenerationTimestamp");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v4 = __p;
  }
  else {
    __int128 v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100159264( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100159298(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "ModelType");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v4 = __p;
  }
  else {
    __int128 v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100159340( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100159374(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "Model");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v4 = __p;
  }
  else {
    __int128 v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_10015941C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100159450(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    std::string::size_type v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48LL;
        sub_1000AA690((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      std::string::size_type v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1001594D4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100159548((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100159548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(a3 - 48) = 0LL;
      __int128 v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 48LL;
      a3 -= 48LL;
    }

    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }

  char v14 = 1;
  sub_1001595FC((uint64_t)v13);
  return a6;
}

uint64_t sub_1001595FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100159630((uint64_t *)a1);
  }
  return a1;
}

void sub_100159630(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1000AA690(v3, v1);
      v1 += 48LL;
    }

    while (v1 != v2);
  }

void **sub_100159680(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1001596B0(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_1000AA690(v4, i - 48);
  }

void sub_1001596F4(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48LL;
        sub_1000AA690((uint64_t)(a1 + 2), v3);
      }

      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t **sub_100159760(uint64_t **a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = sub_1001597C0(*a1, a2);
  }

  else
  {
    sub_1001598C4((char *)(*a1)[1], a2);
    uint64_t v5 = v4 + 48;
    v3[1] = v4 + 48;
  }

  v3[1] = v5;
  return a1;
}

void sub_1001597B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1001597C0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555LL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555LL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    __int128 v10 = (char *)sub_1000BB1F4(v7, v9);
  }
  else {
    __int128 v10 = 0LL;
  }
  char v13 = v10;
  char v14 = &v10[48 * v4];
  __int128 v16 = &v10[48 * v9];
  sub_1001598C4(v14, a2);
  __int128 v15 = v14 + 48;
  sub_1001594D4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100159680(&v13);
  return v11;
}

void sub_1001598B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char *sub_1001598C4(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  unint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1010DD48C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)unint64_t v5 = v6;
  }

  return __dst;
}

void sub_10015993C(_Unwind_Exception *exception_object)
{
}

void sub_100159958(uint64_t a1, void **a2)
{
}

uint64_t sub_100159960()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MicroLocationModels");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_1001511E0((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    __int128 v4 = v17;
  }
  else {
    __int128 v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  __int128 v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_1001512A8((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    __int128 v10 = __p;
  }
  else {
    __int128 v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  double v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_101993AF8 = v12->__r_.__value_.__l.__cap_;
  xmmword_101993AE8 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_101993AE8,  (void *)&_mh_execute_header);
}

void sub_100159B4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100159BF8(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  __int128 v4 = operator new(0xCuLL);
  *(void *)(a1 + 8) = v4 + 3;
  *(void *)(a1 + 16) = v4 + 3;
  *(void *)__int128 v4 = &_mh_execute_header;
  _DWORD v4[2] = 4;
  *(void *)a1 = v4;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_10015A5E0((void *)(a1 + 24), *a2, a2[1], 0x2E8BA2E8BA2E8BA3LL * ((a2[1] - *a2) >> 3));
  *(_DWORD *)(a1 + 48) = 0;
  sub_100018E34((int *)(a1 + 48));
  return a1;
}

void sub_100159C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  __int128 v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

BOOL sub_100159CD0(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[20];
  if ((v2 & 0x200) == 0) {
    return 0LL;
  }
  std::string::size_type v5 = *(_DWORD **)a1;
  __int128 v4 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v4)
  {
    while (*v5 != a2[15])
    {
      if (++v5 == v4)
      {
        std::string::size_type v5 = *(_DWORD **)(a1 + 8);
        break;
      }
    }
  }

  BOOL result = 0LL;
  if ((v2 & 0x100) != 0 && v5 != v4) {
    return a2[14] == 0;
  }
  return result;
}

uint64_t sub_100159D2C(uint64_t a1)
{
  v5[0] = &off_1018214C0;
  v5[1] = a1;
  __int128 v6 = v5;
  uint64_t v1 = sub_100159E00(a1, (uint64_t)v5);
  int v2 = v6;
  if (v6 == v5)
  {
    uint64_t v3 = 4LL;
    int v2 = v5;
    goto LABEL_5;
  }

  if (v6)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return v1;
}

void sub_100159DC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100159E00(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v18 = 0LL;
  uint64_t v19 = 0LL;
  int v17 = (uint64_t *)&v18;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == v3)
  {
    __int128 v13 = 0LL;
    uint64_t v14 = 0LL;
  }

  else
  {
    ssize_t v5 = a1 + 48;
    do
    {
      uint64_t v6 = *(void *)(a2 + 24);
      if (!v6) {
        sub_100008BDC();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 48LL))(v6, v2))
      {
        if ((*(_BYTE *)(v2 + 81) & 8) != 0)
        {
          uint64_t v9 = *(void *)(v2 + 64);
          int v10 = *(char *)(v9 + 23);
          if (v10 >= 0) {
            std::string::size_type v11 = *(unsigned __int8 **)(v2 + 64);
          }
          else {
            std::string::size_type v11 = *(unsigned __int8 **)v9;
          }
          if (v10 >= 0) {
            uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
          }
          else {
            uint64_t v12 = *(void *)(v9 + 8);
          }
          uint64_t v7 = sub_100011CE8((uint64_t)&v16, v11, &v11[v12]);
        }

        else
        {
          uint64_t v7 = sub_100017338(v5);
        }

        *(void *)&__int128 v20 = v7;
        *((void *)&v20 + 1) = v8;
        sub_10015AF30(&v17, (unint64_t *)&v20, &v20);
      }

      v2 += 88LL;
    }

    while (v2 != v3);
    __int128 v13 = v18;
    uint64_t v14 = v19;
  }

  sub_100008390((uint64_t)&v17, v13);
  return v14;
}

void sub_100159F14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

uint64_t sub_100159F34(uint64_t a1)
{
  v5[0] = &off_101821550;
  v5[1] = a1;
  uint64_t v6 = v5;
  uint64_t v1 = sub_100159E00(a1, (uint64_t)v5);
  uint64_t v2 = v6;
  if (v6 == v5)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v5;
    goto LABEL_5;
  }

  if (v6)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return v1;
}

void sub_100159FD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10015A008(uint64_t a1)
{
  v5[0] = &off_1018215D0;
  v5[1] = a1;
  uint64_t v6 = v5;
  uint64_t v1 = sub_100159E00(a1, (uint64_t)v5);
  uint64_t v2 = v6;
  if (v6 == v5)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v5;
    goto LABEL_5;
  }

  if (v6)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return v1;
}

void sub_10015A0A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10015A0DC(uint64_t a1)
{
  v5[0] = &off_101821650;
  v5[1] = a1;
  uint64_t v6 = v5;
  uint64_t v1 = sub_100159E00(a1, (uint64_t)v5);
  uint64_t v2 = v6;
  if (v6 == v5)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v5;
    goto LABEL_5;
  }

  if (v6)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return v1;
}

void sub_10015A178( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10015A1B0(uint64_t a1)
{
  v5[0] = &off_1018216D0;
  v5[1] = a1;
  uint64_t v6 = v5;
  uint64_t v1 = sub_100159E00(a1, (uint64_t)v5);
  uint64_t v2 = v6;
  if (v6 == v5)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v5;
    goto LABEL_5;
  }

  if (v6)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return v1;
}

void sub_10015A24C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10015A284(uint64_t a1)
{
  v5[0] = &off_101821750;
  v5[1] = a1;
  uint64_t v6 = v5;
  uint64_t v1 = sub_100159E00(a1, (uint64_t)v5);
  uint64_t v2 = v6;
  if (v6 == v5)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v5;
    goto LABEL_5;
  }

  if (v6)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return v1;
}

void sub_10015A320( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10015A358(uint64_t a1)
{
  v5[0] = &off_1018217D0;
  v5[1] = a1;
  uint64_t v6 = v5;
  uint64_t v1 = sub_100159E00(a1, (uint64_t)v5);
  uint64_t v2 = v6;
  if (v6 == v5)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v5;
    goto LABEL_5;
  }

  if (v6)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return v1;
}

void sub_10015A3F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10015A42C(uint64_t a1, unsigned int a2)
{
  v6[0] = &off_101821850;
  v6[1] = a1;
  _DWORD v6[2] = a2;
  uint64_t v7 = v6;
  uint64_t v2 = sub_100159E00(a1, (uint64_t)v6);
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return v2;
}

void sub_10015A4CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10015A504(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v7[0] = &off_1018218D0;
  v7[1] = a1;
  void v7[2] = a2 | (unint64_t)(a3 << 32);
  uint64_t v8 = v7;
  uint64_t v3 = sub_100159E00(a1, (uint64_t)v7);
  uint64_t v4 = v8;
  if (v8 == v7)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v7;
    goto LABEL_5;
  }

  if (v8)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return v3;
}

void sub_10015A5A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_10015A5E0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10004C510(result, a4);
    BOOL result = (void *)sub_10015A664((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10015A644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000BC344(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10015A664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      sub_100087F98(a4 + v7, a2 + v7);
      v7 += 88LL;
    }

    while (a2 + v7 != a3);
    a4 += v7;
  }

  return a4;
}

void sub_10015A6C0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 88LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

void *sub_10015A6F4(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_1018214C0;
  result[1] = v3;
  return result;
}

uint64_t sub_10015A728(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018214C0;
  a2[1] = v2;
  return result;
}

BOOL sub_10015A744(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[20];
  if ((v2 & 0x200) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(_DWORD **)v4;
  uint64_t v5 = *(_DWORD **)(v4 + 8);
  if (v6 != v5)
  {
    while (*v6 != a2[15])
    {
      if (++v6 == v5)
      {
        uint64_t v6 = v5;
        break;
      }
    }
  }

  BOOL result = 0LL;
  if ((v2 & 0x100) != 0 && v6 != v5) {
    return a2[14] == 1;
  }
  return result;
}

uint64_t sub_10015A7A4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10015A7E0()
{
}

void *sub_10015A7F4(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_101821550;
  result[1] = v3;
  return result;
}

uint64_t sub_10015A828(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101821550;
  a2[1] = v2;
  return result;
}

BOOL sub_10015A844(uint64_t a1, _DWORD *a2)
{
  return sub_100159CD0(*(void *)(a1 + 8), a2);
}

uint64_t sub_10015A84C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10015A888()
{
}

void *sub_10015A89C(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_1018215D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10015A8D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018215D0;
  a2[1] = v2;
  return result;
}

BOOL sub_10015A8EC(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100159CD0(*(void *)(a1 + 8), (_DWORD *)a2);
  if (result) {
    return (*(_BYTE *)(a2 + 80) & 0x10) != 0 && sub_10005A544(*(void *)(a2 + 32)) == 0;
  }
  return result;
}

uint64_t sub_10015A934(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10015A970()
{
}

void *sub_10015A984(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_101821650;
  result[1] = v3;
  return result;
}

uint64_t sub_10015A9B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101821650;
  a2[1] = v2;
  return result;
}

BOOL sub_10015A9D4(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100159CD0(*(void *)(a1 + 8), (_DWORD *)a2);
  if (result) {
    return (*(_BYTE *)(a2 + 80) & 0x10) != 0
  }
  return result;
}

uint64_t sub_10015AA24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10015AA60()
{
}

void *sub_10015AA74(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_1018216D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10015AAA8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018216D0;
  a2[1] = v2;
  return result;
}

BOOL sub_10015AAC4(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100159CD0(*(void *)(a1 + 8), (_DWORD *)a2);
  if (result) {
    return (*(_BYTE *)(a2 + 80) & 0x10) != 0
  }
  return result;
}

uint64_t sub_10015AB14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10015AB50()
{
}

void *sub_10015AB64(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_101821750;
  result[1] = v3;
  return result;
}

uint64_t sub_10015AB98(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101821750;
  a2[1] = v2;
  return result;
}

BOOL sub_10015ABB4(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100159CD0(*(void *)(a1 + 8), (_DWORD *)a2);
  if (result) {
    return (*(_BYTE *)(a2 + 80) & 0x10) != 0 && sub_10005A544(*(void *)(a2 + 32)) != 0;
  }
  return result;
}

uint64_t sub_10015ABFC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10015AC38()
{
}

void *sub_10015AC4C(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_1018217D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10015AC80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1018217D0;
  a2[1] = v2;
  return result;
}

BOOL sub_10015AC9C(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100159CD0(*(void *)(a1 + 8), (_DWORD *)a2);
  if (result) {
    return (*(_BYTE *)(a2 + 80) & 0x10) != 0 && sub_10005A544(*(void *)(a2 + 32)) == 1;
  }
  return result;
}

uint64_t sub_10015ACE4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10015AD20()
{
}

__n128 sub_10015AD34(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_101821850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10015AD6C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101821850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_10015AD8C(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100159CD0(*(void *)(a1 + 8), (_DWORD *)a2);
  if (result) {
    return (*(_BYTE *)(a2 + 81) & 4) != 0 && *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 16);
  }
  return result;
}

uint64_t sub_10015ADD8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10015AE14()
{
}

__n128 sub_10015AE28(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1018218D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10015AE60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1018218D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_10015AE80(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100159CD0(*(void *)(a1 + 8), (_DWORD *)a2);
  if (result)
  {
    int v5 = *(_DWORD *)(a2 + 80);
    if ((v5 & 0x400) != 0)
    {
      BOOL result = 0LL;
      if ((v5 & 0x10) != 0 && *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 16)) {
        return sub_10005A544(*(void *)(a2 + 32)) == *(_DWORD *)(a1 + 20);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10015AEE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10015AF24()
{
}

char *sub_10015AF30(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  int v5 = (void **)sub_10009C838((uint64_t)a1, &v9, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 25) = *a3;
    sub_1000085FC(a1, v9, v7, (uint64_t *)v6);
  }

  return v6;
}

double sub_10015AFB0(uint64_t a1, int a2)
{
  if (a2 >= 1) {
    sub_10122EF24();
  }
  uint64_t v4 = +[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar");
  int v5 = objc_alloc_init(&OBJC_CLASS___NSDateComponents);
  -[NSDateComponents setDay:](v5, "setDay:", a2);
  uint64_t v6 = -[NSCalendar dateByAddingComponents:toDate:options:](v4, "dateByAddingComponents:toDate:options:", v5, a1, 0LL);

  return CFDateGetAbsoluteTime(v6);
}

void sub_10015B02C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10015B058()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10015E774(v0, qword_101993B08);
  sub_10015E694(v0, (uint64_t)qword_101993B08);
  return Logger.init(subsystem:category:)( 0xD00000000000001CLL,  0x800000010161AB40LL,  0x636F6C6F7263694DLL,  0xED00006E6F697461LL);
}

uint64_t sub_10015B0F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  uint64_t v16 = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a5);
  uint64_t v19 = v18;
  ObjCClassMetaunsigned int data = swift_getObjCClassMetadata(a6);
  LOBYTE(a7) = a7(v11, v13, v14, v16, v17, v19, ObjCClassMetadata);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  return a7 & 1;
}

void sub_10015B1C4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10015B200()
{
  if (BYTE6(v0) > 0x1BuLL)
  {
    sub_10015E6EC(v1, v0);
    sub_10015B4A0(v1, v0);
    ((void (*)(void))AES.GCM.SealedBox.init(combined:))();
  }

  else
  {
    uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for CryptoKitError)(0LL);
    uint64_t v3 = sub_10015E87C( &qword_1019350D8,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoKitError,  (uint64_t)&protocol conformance descriptor for CryptoKitError);
    ((void (*)(uint64_t, uint64_t, void, void))swift_allocError)(v2, v3, 0LL, 0LL);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 104LL))( v4,  enum case for CryptoKitError.incorrectParameterSize(_:),  v2);
    ((void (*)(uint64_t))swift_willThrow)(v5);
  }

  return sub_10015E63C(v1, v0);
}

Class sub_10015B310( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v12 = v11;

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v15 = v14;

  uint64_t v16 = a5(v10, v12, v13, v15);
  unint64_t v18 = v17;
  swift_bridgeObjectRelease(v15);
  sub_10015E63C(v10, v12);
  if (v18 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10015E680(v16, v18);
  }

  return isa;
}

id sub_10015B3E0()
{
  return [objc_allocWithZone(v0) init];
}

id sub_10015B400()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CLMicroLocationEncryption();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10015B46C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CLMicroLocationEncryption();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10015B4A0(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  objc_super v2 = (char *)&loc_10015B504
     + *((int *)qword_10015B738 + (sub_10015E730(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_10015B514()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_10015E6EC(v1, v0);
  sub_10015B748(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_10015E63C(v1, v0);
  uint64_t v4 = v12;
  sub_10015E754(&v13);
  return v4;
}

_BYTE *sub_10015B748@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    BOOL result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    BOOL result = (_BYTE *)sub_10015DCC0(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    BOOL result = (_BYTE *)sub_10015DD80((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    BOOL result = (_BYTE *)sub_10015DDF8((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t sub_10015B7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (&class metadata base offset for ArchiveEncryptionContext) {
    BOOL v7 = &type metadata accessor for ArchiveEncryptionContext == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  BOOL v10 = v7
     || &type metadata for ArchiveEncryptionContext == 0LL
     || &nominal type descriptor for ArchiveEncryptionContext == 0LL
     || &metaclass for ArchiveEncryptionContext == 0LL;
  if (v10
    || (&metaclass for ArchiveByteStream ? (BOOL v11 = &nominal type descriptor for ArchiveByteStream == 0LL) : (BOOL v11 = 1),
        !v11 ? (BOOL v12 = &type metadata for ArchiveByteStream == 0LL) : (BOOL v12 = 1),
        !v12 ? (BOOL v13 = &type metadata accessor for ArchiveByteStream == 0LL) : (BOOL v13 = 1),
        !v13 ? (BOOL v14 = &protocol witness table for ArchiveByteStream == 0LL) : (BOOL v14 = 1),
        !v14 ? (BOOL v15 = &protocol conformance descriptor for ArchiveByteStream == 0LL) : (BOOL v15 = 1),
        !v15 ? (BOOL v16 = &class metadata base offset for ArchiveByteStream == 0LL) : (BOOL v16 = 1),
        v16))
  {
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    uint64_t v45 = sub_10015E694(v44, (uint64_t)qword_101993B08);
    unint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v46, v47)) {
      goto LABEL_54;
    }
    unint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v48 = 0;
    std::string v49 = "encryptFile: AppleArchive Library not loaded. method aborted.";
    goto LABEL_53;
  }

  if (&protocol conformance descriptor for SymmetricKey) {
    BOOL v17 = &type metadata accessor for SymmetricKey == 0LL;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17 || &type metadata for SymmetricKey == 0LL || &nominal type descriptor for SymmetricKey == 0LL)
  {
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v50 = type metadata accessor for Logger(0LL);
    uint64_t v51 = sub_10015E694(v50, (uint64_t)qword_101993B08);
    unint64_t v46 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v46, v47)) {
      goto LABEL_54;
    }
    unint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v48 = 0;
    std::string v49 = "encryptFile: CryptoKit Frameowrk not loaded. method aborted.";
LABEL_53:
    _os_log_impl((void *)&_mh_execute_header, v46, v47, v49, v48, 2u);
    swift_slowDealloc(v48, -1LL, -1LL);
LABEL_54:

    return 0LL;
  }

  uint64_t v107 = type metadata accessor for FilePath(0LL);
  v108 = v101;
  uint64_t v106 = *(void *)(v107 - 8);
  uint64_t v25 = *(void *)(v106 + 64);
  ((void (*)(void))__chkstk_darwin)();
  swift_bridgeObjectRetain(a2);
  double v110 = (char *)v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = FilePath.init(_:)(a1, a2);
  __chkstk_darwin(v26);
  swift_bridgeObjectRetain(a4);
  __int16 v109 = (char *)v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  FilePath.init(_:)(a3, a4);
  uint64_t v27 = type metadata accessor for ArchiveEncryptionContext.Profile(0LL);
  uint64_t v28 = __chkstk_darwin(v27);
  int v30 = (char *)v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static ArchiveEncryptionContext.Profile.hkdf_sha256_aesctr_hmac__symmetric__none.getter(v28);
  uint64_t v31 = type metadata accessor for ArchiveCompression(0LL);
  uint64_t v32 = __chkstk_darwin(v31);
  __int128 v34 = (char *)v101 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static ArchiveCompression.lzfse.getter(v32);
  uint64_t v35 = type metadata accessor for ArchiveEncryptionContext(0LL);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  uint64_t v111 = ArchiveEncryptionContext.init(profile:compressionAlgorithm:compressionBlockSize:)(v30, v34, 0x20000LL);
  uint64_t v36 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  __int16 v105 = (char *)v101 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = sub_10015E6AC(&qword_1019350C0);
  __chkstk_darwin(v39);
  std::string v41 = (char *)v101 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [(id)swift_getObjCClassFromMetadata(a7) retrieveSymmetricKey:v42];

  if (v43)
  {
    _bridgeAnyObjectToAny(_:)(v112, v43);
    swift_unknownObjectRelease(v43);
  }

  else
  {
    memset(v112, 0, sizeof(v112));
  }

  sub_10015E834((uint64_t)v112, (uint64_t)v113);
  if (!v113[3])
  {
    sub_10015E7F8((uint64_t)v113, &qword_1019350C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v41, 1LL, 1LL, v36);
    goto LABEL_60;
  }

  int v52 = swift_dynamicCast(v41, v113, (char *)&type metadata for Any + 8, v36, 6LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v41, v52 ^ 1u, 1LL, v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v41, 1LL, v36) == 1)
  {
LABEL_60:
    sub_10015E7F8((uint64_t)v41, &qword_1019350C0);
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v54 = type metadata accessor for Logger(0LL);
    uint64_t v55 = sub_10015E694(v54, (uint64_t)qword_101993B08);
    std::string v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      char v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v58 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Failed to retrieve symmetric key for file encryption",  v58,  2u);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    swift_release(v111);
    uint64_t v59 = v107;
    std::string v60 = *(void (**)(char *, uint64_t))(v106 + 8);
    v60(v109, v107);
    v60(v110, v59);
    return 0LL;
  }

  char v53 = v105;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v105, v41, v36);
  dispatch thunk of ArchiveEncryptionContext.setSymmetricKey(_:)(v53);
  type metadata accessor for ArchiveByteStream(0LL);
  uint64_t v61 = static ArchiveByteStream.fileStream(path:mode:options:permissions:)(v110, 0LL, 0LL, 420LL);
  if (v61)
  {
    uint64_t v62 = v61;
    uint64_t v63 = static ArchiveByteStream.fileStream(path:mode:options:permissions:)(v109, 1LL, 1536LL, 420LL);
    if (v63)
    {
      uint64_t v103 = v62;
      std::string v104 = v101;
      uint64_t v64 = v63;
      uint64_t v65 = type metadata accessor for ArchiveFlags(0LL);
      v101[2] = v101;
      uint64_t v66 = *(void *)(v65 - 8);
      __chkstk_darwin(v65);
      std::string v68 = (char *)v101 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v113[0] = &_swiftEmptyArrayStorage;
      uint64_t v102 = sub_10015E87C(&qword_1019350F0, v69, (uint64_t)&protocol conformance descriptor for ArchiveFlags);
      uint64_t v70 = sub_10015E6AC(&qword_1019350F8);
      unint64_t v71 = sub_10015E8BC();
      dispatch thunk of SetAlgebra.init<A>(_:)(v113, v70, v71, v65, v102);
      uint64_t v102 = v64;
      uint64_t v72 = static ArchiveByteStream.encryptionStream(writingTo:encryptionContext:flags:threadCount:)( v64,  v111,  v68,  1LL);
      uint64_t v73 = v65;
      uint64_t v74 = v72;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v73);
      if (v74)
      {
        uint64_t v75 = v103;
        uint64_t v76 = static ArchiveByteStream.process(readingFrom:writingTo:)(v103, v74);
        uint64_t v96 = dispatch thunk of ArchiveByteStream.close()(v76);
        uint64_t v97 = dispatch thunk of ArchiveByteStream.close()(v96);
        dispatch thunk of ArchiveByteStream.close()(v97);
        swift_release(v111);
        swift_release(v75);
        swift_release(v102);
        swift_release(v74);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v105, v36);
        uint64_t v98 = v107;
        __int128 v99 = *(void (**)(char *, uint64_t))(v106 + 8);
        v99(v109, v107);
        v99(v110, v98);
        return 1LL;
      }

      uint64_t v88 = v103;
      if (qword_101993B00 != -1) {
        swift_once(&qword_101993B00, sub_10015B058);
      }
      uint64_t v89 = type metadata accessor for Logger(0LL);
      uint64_t v90 = sub_10015E694(v89, (uint64_t)qword_101993B08);
      std::string v91 = (os_log_s *)Logger.logObject.getter(v90);
      os_log_type_t v92 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v91, v92))
      {
        std::string v93 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)std::string v93 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Failed to create encryption stream", v93, 2u);
        swift_slowDealloc(v93, -1LL, -1LL);
      }

      swift_release(v111);
      swift_release(v88);
      uint64_t v82 = v102;
    }

    else
    {
      if (qword_101993B00 != -1) {
        swift_once(&qword_101993B00, sub_10015B058);
      }
      uint64_t v83 = type metadata accessor for Logger(0LL);
      uint64_t v84 = sub_10015E694(v83, (uint64_t)qword_101993B08);
      std::string v85 = (os_log_s *)Logger.logObject.getter(v84);
      os_log_type_t v86 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v85, v86))
      {
        std::string v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)std::string v87 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "Failed to create output file stream for encryption",  v87,  2u);
        swift_slowDealloc(v87, -1LL, -1LL);
      }

      swift_release(v111);
      uint64_t v82 = v62;
    }
  }

  else
  {
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v77 = type metadata accessor for Logger(0LL);
    uint64_t v78 = sub_10015E694(v77, (uint64_t)qword_101993B08);
    uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
    os_log_type_t v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Failed to create input file stream for encryption", v81, 2u);
      swift_slowDealloc(v81, -1LL, -1LL);
    }

    uint64_t v82 = v111;
  }

  swift_release(v82);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v105, v36);
  uint64_t v94 = v107;
  int v95 = *(void (**)(char *, uint64_t))(v106 + 8);
  v95(v109, v107);
  v95(v110, v94);
  return 0LL;
}

uint64_t sub_10015C6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (&class metadata base offset for ArchiveEncryptionContext) {
    BOOL v7 = &type metadata accessor for ArchiveEncryptionContext == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  BOOL v10 = v7
     || &type metadata for ArchiveEncryptionContext == 0LL
     || &nominal type descriptor for ArchiveEncryptionContext == 0LL
     || &metaclass for ArchiveEncryptionContext == 0LL;
  if (v10
    || (&metaclass for ArchiveByteStream ? (BOOL v11 = &nominal type descriptor for ArchiveByteStream == 0LL) : (BOOL v11 = 1),
        !v11 ? (BOOL v12 = &type metadata for ArchiveByteStream == 0LL) : (BOOL v12 = 1),
        !v12 ? (BOOL v13 = &type metadata accessor for ArchiveByteStream == 0LL) : (BOOL v13 = 1),
        !v13 ? (BOOL v14 = &protocol witness table for ArchiveByteStream == 0LL) : (BOOL v14 = 1),
        !v14 ? (BOOL v15 = &protocol conformance descriptor for ArchiveByteStream == 0LL) : (BOOL v15 = 1),
        !v15 ? (BOOL v16 = &class metadata base offset for ArchiveByteStream == 0LL) : (BOOL v16 = 1),
        v16))
  {
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    uint64_t v38 = sub_10015E694(v37, (uint64_t)qword_101993B08);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_54;
    }
    std::string v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)std::string v41 = 0;
    NSString v42 = "decryptFile: AppleArchive Frameowrk not loaded. method aborted.";
    goto LABEL_53;
  }

  if (&protocol conformance descriptor for SymmetricKey) {
    BOOL v17 = &type metadata accessor for SymmetricKey == 0LL;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17 || &type metadata for SymmetricKey == 0LL || &nominal type descriptor for SymmetricKey == 0LL)
  {
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v43 = type metadata accessor for Logger(0LL);
    uint64_t v44 = sub_10015E694(v43, (uint64_t)qword_101993B08);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v40 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_54;
    }
    std::string v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)std::string v41 = 0;
    NSString v42 = "decryptFile: CryptoKit Frameowrk not loaded. method aborted.";
LABEL_53:
    _os_log_impl((void *)&_mh_execute_header, v39, v40, v42, v41, 2u);
    swift_slowDealloc(v41, -1LL, -1LL);
LABEL_54:

    return 0LL;
  }

  uint64_t v25 = type metadata accessor for FilePath(0LL);
  v119 = v108;
  uint64_t v116 = *(void *)(v25 - 8);
  uint64_t v117 = v25;
  uint64_t v26 = *(void *)(v116 + 64);
  __chkstk_darwin(v25);
  uint64_t v27 = &v108[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  swift_bridgeObjectRetain(a2);
  uint64_t v28 = FilePath.init(_:)(a1, a2);
  v118 = v108;
  __chkstk_darwin(v28);
  swift_bridgeObjectRetain(a4);
  FilePath.init(_:)(a3, a4);
  uint64_t v29 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  v115 = &v108[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v32 = sub_10015E6AC(&qword_1019350C0);
  __chkstk_darwin(v32);
  __int128 v34 = &v108[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [(id)swift_getObjCClassFromMetadata(a7) retrieveSymmetricKey:v35];

  if (v36)
  {
    _bridgeAnyObjectToAny(_:)(v120, v36);
    swift_unknownObjectRelease(v36);
  }

  else
  {
    memset(v120, 0, sizeof(v120));
  }

  sub_10015E834((uint64_t)v120, (uint64_t)v121);
  if (!v121[3])
  {
    sub_10015E7F8((uint64_t)v121, &qword_1019350C8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v34, 1LL, 1LL, v29);
    goto LABEL_62;
  }

  int v45 = swift_dynamicCast(v34, v121, (char *)&type metadata for Any + 8, v29, 6LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v30 + 56))(v34, v45 ^ 1u, 1LL, v29);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48))(v34, 1LL, v29) == 1)
  {
LABEL_62:
    sub_10015E7F8((uint64_t)v34, &qword_1019350C0);
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    uint64_t v53 = sub_10015E694(v52, (uint64_t)qword_101993B08);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      std::string v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)std::string v56 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Failed to retrieve symmetric key for file decryption",  v56,  2u);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    uint64_t v57 = v117;
    char v58 = *(void (**)(_BYTE *, uint64_t))(v116 + 8);
    v58(v27, v117);
    v58(v27, v57);
    return 0LL;
  }

  v114 = v108;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v30 + 32))(v115, v34, v29);
  type metadata accessor for ArchiveByteStream(0LL);
  uint64_t v46 = static ArchiveByteStream.fileStream(path:mode:options:permissions:)(v27, 0LL, 0LL, 420LL);
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = type metadata accessor for ArchiveEncryptionContext(0LL);
    swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    uint64_t v49 = swift_retain(v47);
    uint64_t v50 = ArchiveEncryptionContext.init(from:)(v49);
    if (v50)
    {
      uint64_t v51 = v50;
      dispatch thunk of ArchiveEncryptionContext.setSymmetricKey(_:)(v115);
      uint64_t v113 = v47;
      uint64_t v69 = type metadata accessor for ArchiveFlags(0LL);
      uint64_t v111 = v108;
      uint64_t v110 = *(void *)(v69 - 8);
      __chkstk_darwin(v69);
      uint64_t v112 = v51;
      uint64_t v71 = v47;
      uint64_t v72 = &v108[-((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      v121[0] = &_swiftEmptyArrayStorage;
      uint64_t v109 = sub_10015E87C(&qword_1019350F0, v73, (uint64_t)&protocol conformance descriptor for ArchiveFlags);
      uint64_t v74 = sub_10015E6AC(&qword_1019350F8);
      unint64_t v75 = sub_10015E8BC();
      dispatch thunk of SetAlgebra.init<A>(_:)(v121, v74, v75, v69, v109);
      uint64_t v76 = v71;
      uint64_t v77 = v112;
      uint64_t v78 = static ArchiveByteStream.decryptionStream(readingFrom:encryptionContext:flags:threadCount:)( v76,  v112,  v72,  1LL);
      uint64_t v79 = v69;
      uint64_t v80 = v78;
      (*(void (**)(_BYTE *, uint64_t))(v110 + 8))(v72, v79);
      if (v80)
      {
        uint64_t v81 = static ArchiveByteStream.fileStream(path:mode:options:permissions:)(v27, 1LL, 1536LL, 420LL);
        if (v81)
        {
          uint64_t v82 = (_BYTE *)v81;
          uint64_t v83 = static ArchiveByteStream.process(readingFrom:writingTo:)(v80, v81);
          uint64_t v84 = v113;
          uint64_t v111 = v82;
          uint64_t v103 = dispatch thunk of ArchiveByteStream.close()(v83);
          uint64_t v104 = dispatch thunk of ArchiveByteStream.close()(v103);
          dispatch thunk of ArchiveByteStream.close()(v104);
          swift_release(v84);
          swift_release(v112);
          swift_release(v80);
          swift_release(v82);
          (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v115, v29);
          uint64_t v105 = v117;
          uint64_t v106 = *(void (**)(_BYTE *, uint64_t))(v116 + 8);
          v106(v27, v117);
          v106(v27, v105);
          return 1LL;
        }

        uint64_t v94 = v113;
        if (qword_101993B00 != -1) {
          swift_once(&qword_101993B00, sub_10015B058);
        }
        uint64_t v95 = type metadata accessor for Logger(0LL);
        uint64_t v96 = sub_10015E694(v95, (uint64_t)qword_101993B08);
        uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
        os_log_type_t v98 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v97, v98))
        {
          __int128 v99 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)__int128 v99 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v97,  v98,  "Failed to create output file stream for decryption",  v99,  2u);
          int v100 = v99;
          uint64_t v77 = v112;
          swift_slowDealloc(v100, -1LL, -1LL);
        }

        swift_release(v94);

        swift_release(v77);
        uint64_t v93 = v80;
      }

      else
      {
        if (qword_101993B00 != -1) {
          swift_once(&qword_101993B00, sub_10015B058);
        }
        uint64_t v85 = type metadata accessor for Logger(0LL);
        uint64_t v86 = sub_10015E694(v85, (uint64_t)qword_101993B08);
        std::string v87 = (os_log_s *)Logger.logObject.getter(v86);
        os_log_type_t v88 = static os_log_type_t.error.getter();
        BOOL v89 = os_log_type_enabled(v87, v88);
        uint64_t v90 = v113;
        if (v89)
        {
          std::string v91 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)std::string v91 = 0;
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed to create decryption stream", v91, 2u);
          os_log_type_t v92 = v91;
          uint64_t v77 = v112;
          swift_slowDealloc(v92, -1LL, -1LL);
        }

        swift_release(v90);

        uint64_t v93 = v77;
      }

      swift_release(v93);
    }

    else
    {
      if (qword_101993B00 != -1) {
        swift_once(&qword_101993B00, sub_10015B058);
      }
      uint64_t v64 = type metadata accessor for Logger(0LL);
      uint64_t v65 = sub_10015E694(v64, (uint64_t)qword_101993B08);
      uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
      os_log_type_t v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, v67))
      {
        std::string v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)std::string v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to create archive context for decryption", v68, 2u);
        swift_slowDealloc(v68, -1LL, -1LL);
      }

      swift_release(v47);
    }
  }

  else
  {
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    uint64_t v60 = sub_10015E694(v59, (uint64_t)qword_101993B08);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed to open source archive file for decryption", v63, 2u);
      swift_slowDealloc(v63, -1LL, -1LL);
    }
  }

  (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v115, v29);
  uint64_t v101 = v117;
  uint64_t v102 = *(void (**)(_BYTE *, uint64_t))(v116 + 8);
  v102(v27, v117);
  v102(v27, v101);
  return 0LL;
}

uint64_t sub_10015D620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (&type metadata accessor for AES) {
    BOOL v4 = &type metadata for AES == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4
    || &nominal type descriptor for AES == 0LL
    || &protocol conformance descriptor for SymmetricKey == 0LL
    || &type metadata accessor for SymmetricKey == 0LL
    || &type metadata for SymmetricKey == 0LL
    || &nominal type descriptor for SymmetricKey == 0LL)
  {
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10015E694(v10, (uint64_t)qword_101993B08);
    BOOL v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_34;
    }
    BOOL v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v14 = 0;
    BOOL v15 = "encryptData: CryptoKit Frameowrk not loaded. method aborted.";
    goto LABEL_33;
  }

  uint64_t v20 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  std::string v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_10015E6AC(&qword_1019350C0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for CLMicroLocationKeychain();
  sub_10015F878(a3, a4, (uint64_t)v51);
  if (!v51[3])
  {
    sub_10015E7F8((uint64_t)v51, &qword_1019350C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v26, 1LL, 1LL, v20);
    goto LABEL_29;
  }

  int v27 = swift_dynamicCast(v26, v51, (char *)&type metadata for Any + 8, v20, 6LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v26, v27 ^ 1u, 1LL, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v26, 1LL, v20) == 1)
  {
LABEL_29:
    sub_10015E7F8((uint64_t)v26, &qword_1019350C0);
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    uint64_t v41 = sub_10015E694(v40, (uint64_t)qword_101993B08);
    BOOL v12 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_34;
    }
    BOOL v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v14 = 0;
    BOOL v15 = "Failed to retrieve symmetric key for data encryption";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
LABEL_34:

    return 0LL;
  }

  uint64_t v50 = &v45;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v26, v20);
  uint64_t v28 = type metadata accessor for AES.GCM.Nonce(0LL);
  uint64_t v49 = &v45;
  uint64_t v29 = *(void *)(v28 - 8);
  double v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v45 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  AES.GCM.Nonce.init()(v30);
  uint64_t v47 = type metadata accessor for AES.GCM.SealedBox(0LL);
  uint64_t v48 = &v45;
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  __int128 v34 = (char *)&v45 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v51[0] = a1;
  v51[1] = a2;
  uint64_t v35 = sub_10015E6AC(&qword_1019350E0);
  double v36 = __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v45 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, char *, uint64_t, double))(v29 + 16))(v38, v32, v28, v36);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v38, 0LL, 1LL, v28);
  unint64_t v39 = sub_10015E7B4();
  static AES.GCM.seal<A>(_:using:nonce:)(v51, v23, v38, &type metadata for Data, v39);
  uint64_t v43 = sub_10015E7F8((uint64_t)v38, &qword_1019350E0);
  uint64_t v44 = AES.GCM.SealedBox.combined.getter(v43);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v47);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  return v44;
}

uint64_t sub_10015DCC0(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10015DD80(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_10015DDF8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10015DE78(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (&type metadata accessor for AES) {
    BOOL v4 = &type metadata for AES == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4
    || &nominal type descriptor for AES == 0LL
    || &protocol conformance descriptor for SymmetricKey == 0LL
    || &type metadata accessor for SymmetricKey == 0LL
    || &type metadata for SymmetricKey == 0LL
    || &nominal type descriptor for SymmetricKey == 0LL)
  {
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10015E694(v10, (uint64_t)qword_101993B08);
    BOOL v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      BOOL v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "decryptData: CryptoKit Frameowrk not loaded. method aborted.",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    return 0LL;
  }

  else
  {
    uint64_t v20 = type metadata accessor for AES.GCM.SealedBox(0LL);
    uint64_t v47 = &v42;
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v43 = v20;
    uint64_t v44 = v21;
    uint64_t v22 = *(void *)(v21 + 64);
    __chkstk_darwin(v20);
    std::string v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v24 = type metadata accessor for SymmetricKey(0LL);
    uint64_t v46 = &v42;
    uint64_t v25 = *(void *)(v24 - 8);
    __chkstk_darwin(v24);
    uint64_t v45 = (char *)&v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v27 = sub_10015E6AC(&qword_1019350C0);
    __chkstk_darwin(v27);
    uint64_t v29 = (char *)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    type metadata accessor for CLMicroLocationKeychain();
    sub_10015F878(a3, a4, (uint64_t)v48);
    if (v48[3])
    {
      int v30 = swift_dynamicCast(v29, v48, (char *)&type metadata for Any + 8, v24, 6LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v29, v30 ^ 1u, 1LL, v24);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v29, 1LL, v24) != 1)
      {
        uint64_t v31 = v45;
        uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))(v45, v29, v24);
        __chkstk_darwin(v32);
        uint64_t v33 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        sub_10015E6EC(a1, a2);
        sub_10015B1C4(a1, a2);
        uint64_t v40 = v43;
        uint64_t v39 = v44;
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v23, v33, v43);
        uint64_t v15 = static AES.GCM.open(_:using:)(v23, v31);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v31, v24);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v40);
        return v15;
      }
    }

    else
    {
      sub_10015E7F8((uint64_t)v48, &qword_1019350C8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v29, 1LL, 1LL, v24);
    }

    sub_10015E7F8((uint64_t)v29, &qword_1019350C0);
    if (qword_101993B00 != -1) {
      swift_once(&qword_101993B00, sub_10015B058);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    uint64_t v35 = sub_10015E694(v34, (uint64_t)qword_101993B08);
    double v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Failed to retrieve symmetric key for data decryption",  v38,  2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    return 0LL;
  }

uint64_t type metadata accessor for CLMicroLocationEncryption()
{
  return objc_opt_self(&OBJC_CLASS____TtC19microlocation_logic25CLMicroLocationEncryption);
}

uint64_t sub_10015E63C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_release)();
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10015E680(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10015E63C(a1, a2);
  }
  return a1;
}

uint64_t sub_10015E694(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10015E6AC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_10015E6EC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_retain)();
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void *sub_10015E730(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_10015E754(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *sub_10015E774(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

unint64_t sub_10015E7B4()
{
  unint64_t result = qword_1019350E8;
  if (!qword_1019350E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1019350E8);
  }

  return result;
}

uint64_t sub_10015E7F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10015E6AC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10015E834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10015E6AC(&qword_1019350C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015E87C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10015E8BC()
{
  unint64_t result = qword_101935100;
  if (!qword_101935100)
  {
    uint64_t v1 = sub_10015E908(&qword_1019350F8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_101935100);
  }

  return result;
}

uint64_t sub_10015E908(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_10015E94C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10015E774(v0, qword_101993B28);
  sub_10015E694(v0, (uint64_t)qword_101993B28);
  return Logger.init(subsystem:category:)( 0xD00000000000001CLL,  0x800000010161AB40LL,  0x636F6C6F7263694DLL,  0xED00006E6F697461LL);
}

void sub_10015E9CC(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (&protocol conformance descriptor for SymmetricKey) {
    BOOL v4 = &type metadata accessor for SymmetricKey == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || &type metadata for SymmetricKey == 0LL || &nominal type descriptor for SymmetricKey == 0LL)
  {
    if (qword_101993B20 != -1) {
      swift_once(&qword_101993B20, sub_10015E94C);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_10015E694(v20, (uint64_t)qword_101993B28);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "getSymmetricKeyOrCreateNew: CryptoKit Frameowrk not loaded. method aborted.",  v24,  2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    *a3 = 0u;
    a3[1] = 0u;
  }

  else
  {
    uint64_t v48 = a3;
    OSStatus v50 = 0;
    uint64_t v9 = sub_10015E6AC(&qword_1019350C0);
    uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64LL);
    __chkstk_darwin(v9);
    unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v46 = a1;
    uint64_t v47 = a2;
    uint64_t v12 = sub_10015F028(a1, a2, &v50, (uint64_t)&v43 - v11);
    __chkstk_darwin(v12);
    sub_100161E74((uint64_t)&v43 - v11, (uint64_t)&v43 - v11, &qword_1019350C0);
    uint64_t v13 = type metadata accessor for SymmetricKey(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
    int v16 = v15((char *)&v43 - v11, 1LL, v13);
    uint64_t v17 = sub_1001601C4((uint64_t)&v43 - v11);
    if (v16 == 1 && v50 == -25300)
    {
      uint64_t v45 = &v43;
      double v25 = __chkstk_darwin(v17);
      uint64_t v26 = type metadata accessor for SymmetricKeySize(0LL, v25);
      double v27 = __chkstk_darwin(v26);
      uint64_t v29 = (char *)&v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      static SymmetricKeySize.bits256.getter(v27);
      SymmetricKey.init(size:)(v29);
      sub_1001601C4((uint64_t)&v43 - v11);
      uint64_t v44 = v14;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))((char *)&v43 - v11, 0LL, 1LL, v13);
      uint64_t v30 = sub_100160240((uint64_t)&v43 - v11, (uint64_t)&v43 - v11);
      __chkstk_darwin(v30);
      sub_100161E74((uint64_t)&v43 - v11, (uint64_t)&v43 - v11, &qword_1019350C0);
      LODWORD(v29) = v15((char *)&v43 - v11, 1LL, v13);
      uint64_t v31 = sub_1001601C4((uint64_t)&v43 - v11);
      if ((_DWORD)v29 != 1)
      {
        __chkstk_darwin(v31);
        sub_100161E74((uint64_t)&v43 - v11, (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), &qword_1019350C0);
        if (v15((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), 1LL, v13) != 1)
        {
          unint64_t v41 = sub_100160288();
          dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( v49,  sub_10015FAC0,  0LL,  &type metadata for Data,  v13,  v41);
          uint64_t v42 = v49[1];
          (*(void (**)(char *, uint64_t))(v44 + 8))((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v13);
          __asm { BR              X10 }
        }

        __break(1u);
        JUMPOUT(0x10015F014LL);
      }

      if (qword_101993B20 != -1) {
        swift_once(&qword_101993B20, sub_10015E94C);
      }
      uint64_t v32 = type metadata accessor for Logger(0LL);
      uint64_t v33 = sub_10015E694(v32, (uint64_t)qword_101993B28);
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.error.getter();
      BOOL v36 = os_log_type_enabled(v34, v35);
      os_log_type_t v37 = v48;
      if (v36)
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to generate a symmetric key", v38, 2u);
        swift_slowDealloc(v38, -1LL, -1LL);
      }

      sub_1001601C4((uint64_t)&v43 - v11);
      _OWORD *v37 = 0u;
      v37[1] = 0u;
    }

    else
    {
      __chkstk_darwin(v17);
      sub_100161E74((uint64_t)&v43 - v11, (uint64_t)&v43 - v11, &qword_1019350C0);
      if (v15((char *)&v43 - v11, 1LL, v13) == 1)
      {
        sub_1001601C4((uint64_t)&v43 - v11);
        sub_1001601C4((uint64_t)&v43 - v11);
        uint64_t v19 = v48;
        *uint64_t v48 = 0u;
        v19[1] = 0u;
      }

      else
      {
        uint64_t v39 = v48;
        *((void *)v48 + 3) = v13;
        uint64_t v40 = sub_100160204(v39);
        (*(void (**)(void *, char *, uint64_t))(v14 + 32))(v40, (char *)&v43 - v11, v13);
        sub_1001601C4((uint64_t)&v43 - v11);
      }
    }
  }

uint64_t sub_10015F028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, OSStatus *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v54 = a1;
  os_log_type_t v55 = a3;
  uint64_t v52 = (char *)a4;
  uint64_t v53 = a2;
  uint64_t v5 = sub_10015E6AC(&qword_101935110);
  uint64_t inited = swift_initStackObject(v5, &v59);
  *(_OWORD *)(inited + 16) = xmmword_1012D0A20;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString();
  *(void *)(inited + 40) = kSecClassKey;
  *(void *)(inited + 64) = v7;
  *(void *)(inited + 72) = kSecUseDataProtectionKeychain;
  *(_BYTE *)(inited + sub_10000AE14(v1 - 80) = 1;
  *(void *)(inited + 104) = &type metadata for Bool;
  *(void *)(inited + 112) = kSecAttrAccessible;
  *(void *)(inited + 120) = kSecAttrAccessibleWhenUnlocked;
  *(void *)(inited + 144) = v7;
  *(void *)(inited + 152) = kSecAttrSynchronizable;
  *(_BYTE *)(inited + 160) = 1;
  *(void *)(inited + 184) = &type metadata for Bool;
  *(void *)(inited + 192) = kSecAttrApplicationLabel;
  *(void *)(inited + 200) = v54;
  *(void *)(inited + 208) = a2;
  *(void *)(inited + sub_10000AE14(v45 - 224) = &type metadata for String;
  *(void *)(inited + sub_1000A7938(v33 - 232) = kSecReturnData;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = 1;
  uint64_t v8 = (id)kSecClass;
  uint64_t v9 = (id)kSecClassKey;
  uint64_t v10 = (id)kSecUseDataProtectionKeychain;
  unint64_t v11 = (id)kSecAttrAccessible;
  uint64_t v12 = (id)kSecAttrAccessibleWhenUnlocked;
  uint64_t v13 = (id)kSecAttrSynchronizable;
  uint64_t v14 = (id)kSecAttrApplicationLabel;
  swift_bridgeObjectRetain(v53);
  uint64_t v15 = (id)kSecReturnData;
  unint64_t v16 = sub_10015F74C(inited);
  uint64_t v58 = 0LL;
  uint64_t v17 = sub_10015E6AC(&qword_1019350C0);
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL);
  v21(v19, 1LL, 1LL, v20);
  sub_100161A54();
  sub_100161A90();
  Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  OSStatus v23 = SecItemCopyMatching(isa, (CFTypeRef *)&v58);

  uint64_t v25 = v58;
  *os_log_type_t v55 = v23;
  if (v23 == -25300)
  {
    if (qword_101993B20 != -1) {
      swift_once(&qword_101993B20, sub_10015E94C);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_10015E694(v28, (uint64_t)qword_101993B28);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "key not found in keychain", v32, 2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    goto LABEL_24;
  }

  if (v23)
  {
    if (qword_101993B20 != -1) {
      swift_once(&qword_101993B20, sub_10015E94C);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = sub_10015E694(v33, (uint64_t)qword_101993B28);
    os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc(18LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v57 = v38;
      *(_DWORD *)uint64_t v37 = 67109378;
      LODWORD(v56) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, (char *)&v56 + 4, v37 + 4, v37 + 8);
      *(_WORD *)(v37 + 8) = 2080;
      CFStringRef v39 = SecCopyErrorMessageString(v23, 0LL);
      if (v39)
      {
        uint64_t v40 = (__CFString *)v39;
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        unint64_t v43 = v42;
      }

      else
      {
        LODWORD(v56) = v23;
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        unint64_t v43 = v49;
      }

      uint64_t v56 = sub_1001602D0(v41, v43, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v37 + 10, v37 + 18);
      swift_bridgeObjectRelease(v43);
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Failed to retrieve key from keychain, error %d, %s",  (uint8_t *)v37,  0x12u);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    goto LABEL_24;
  }

  if (v25)
  {
    uint64_t v56 = v25;
    swift_unknownObjectRetain(v25, v24);
    uint64_t v26 = swift_dynamicCast(&v57, &v56, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Data, 6LL);
    if ((v26 & 1) != 0)
    {
      *(double *)&__int128 v27 = __chkstk_darwin(v26);
      __int128 v57 = v27;
      SymmetricKey.init<A>(data:)(&v57, &type metadata for Data, &protocol witness table for Data);
      sub_1001601C4((uint64_t)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      v21((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL), 0LL, 1LL, v20);
      sub_100160240( (uint64_t)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
LABEL_24:
      sub_100160240((uint64_t)v19, (uint64_t)v52);
      return swift_unknownObjectRelease(v58);
    }
  }

  if (qword_101993B20 != -1) {
    swift_once(&qword_101993B20, sub_10015E94C);
  }
  uint64_t v44 = type metadata accessor for Logger(0LL);
  uint64_t v45 = sub_10015E694(v44, (uint64_t)qword_101993B28);
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to get key from keychain. Got invalid data", v48, 2u);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  sub_1001601C4((uint64_t)v19);
  v21(v52, 1LL, 1LL, v20);
  return swift_unknownObjectRelease(v58);
}

unint64_t sub_10015F74C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    BOOL v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10015E6AC(&qword_101935190);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  BOOL v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100161E74(v7, (uint64_t)&v14, &qword_101935198);
    uint64_t v8 = v14;
    unint64_t result = sub_100160910(v14);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v8;
    unint64_t result = (unint64_t)sub_100161EB8(&v15, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    _DWORD v4[2] = v13;
    v7 += 40LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10015F878(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (&protocol conformance descriptor for SymmetricKey) {
    BOOL v4 = &type metadata accessor for SymmetricKey == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || &type metadata for SymmetricKey == 0LL || &nominal type descriptor for SymmetricKey == 0LL)
  {
    if (qword_101993B20 != -1) {
      swift_once(&qword_101993B20, sub_10015E94C);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_10015E694(v14, (uint64_t)qword_101993B28);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "retrieveSymmetricKey: CryptoKit Frameowrk not loaded. method aborted.",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    goto LABEL_18;
  }

  OSStatus v21 = 0;
  uint64_t v9 = sub_10015E6AC(&qword_1019350C0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10015F028(a1, a2, &v21, (uint64_t)v11);
  uint64_t v12 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_1001601C4((uint64_t)v11);
LABEL_18:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }

  *(void *)(a3 + 24) = v12;
  uint64_t v19 = sub_100160204((void *)a3);
  (*(void (**)(void *, char *, uint64_t))(v13 + 32))(v19, v11, v12);
}

id sub_10015FA98()
{
  return sub_10016010C(type metadata accessor for CLMicroLocationKeychain);
}

id sub_10015FAB0()
{
  return sub_100160190(type metadata accessor for CLMicroLocationKeychain);
}

void sub_10015FAC0(UInt8 *bytes@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (bytes) {
    CFIndex v4 = a2 - (void)bytes;
  }
  else {
    CFIndex v4 = 0LL;
  }
  CFDataRef v5 = CFDataCreateWithBytesNoCopy(0LL, bytes, v4, kCFAllocatorNull);
  if (v5)
  {
    CFDataRef v6 = v5;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
    unint64_t v9 = 0xC000000000000000LL;
  }

  *a3 = v7;
  a3[1] = v9;
}

void sub_10015FB44()
{
  qword_101993B48 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

void sub_10015FB58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = a1 == 0x79656B5F6F6ELL && a2 == 0xE600000000000000LL;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }

  uint64_t v7 = type metadata accessor for SymmetricKey(0LL);
  v28[2] = v28;
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_101993B40 != -1) {
    swift_once(&qword_101993B40, sub_10015FB44);
  }
  swift_beginAccess(&qword_101993B48, v29, 32LL, 0LL);
  uint64_t v11 = qword_101993B48;
  uint64_t v12 = sub_10015E6AC(&qword_1019350C0);
  v28[1] = v28;
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64LL);
  double v14 = __chkstk_darwin(v12);
  if (!*(void *)(v11 + 16))
  {
    os_log_type_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
    v17((char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), 1LL, 1LL, v7, v14);
LABEL_15:
    sub_1001601C4((uint64_t)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    double v18 = swift_endAccess(v29);
    uint64_t v19 = type metadata accessor for SymmetricKeySize(0LL, v18);
    double v20 = __chkstk_darwin(v19);
    uint64_t v22 = (char *)v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    static SymmetricKeySize.bits256.getter(v20);
    *(void *)(a3 + 24) = v7;
    OSStatus v23 = sub_100160204((void *)a3);
    uint64_t v24 = SymmetricKey.init(size:)(v22);
    double v25 = __chkstk_darwin(v24);
    (*(void (**)(char *, void *, uint64_t, double))(v8 + 16))( (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v23,  v7,  v25);
    ((void (*)(char *, void, uint64_t, uint64_t))v17)( (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  0LL,  1LL,  v7);
    swift_beginAccess(&qword_101993B48, v29, 33LL, 0LL);
    swift_bridgeObjectRetain(a2);
    sub_10015FEB0((uint64_t)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, a2);
    swift_endAccess(v29);
    return;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v15 = sub_100160940(a1, a2);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))( (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  *(void *)(v11 + 56) + *(void *)(v8 + 72) * v15,  v7);
    os_log_type_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v17)( (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  0LL,  1LL,  v7);
  }

  else
  {
    os_log_type_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v17)( (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  1LL,  1LL,  v7);
  }

  swift_bridgeObjectRelease(a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))( (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  1LL,  v7) == 1) {
    goto LABEL_15;
  }
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v26(v10, (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v7);
  swift_endAccess(v29);
  *(void *)(a3 + 24) = v7;
  __int128 v27 = (char *)sub_100160204((void *)a3);
  v26(v27, v10, v7);
}

uint64_t sub_10015FEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = v3;
  uint64_t v8 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1LL, v8);
  if ((_DWORD)v10 == 1)
  {
    sub_1001601C4(a1);
    uint64_t v11 = sub_10015E6AC(&qword_1019350C0);
    __chkstk_darwin(v11);
    uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    sub_100160B8C(a2, a3, (uint64_t)v13);
    swift_bridgeObjectRelease(a3);
    return sub_1001601C4((uint64_t)v13);
  }

  else
  {
    double v15 = __chkstk_darwin(v10);
    os_log_type_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 32))(v17, a1, v8, v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v21 = *v4;
    *BOOL v4 = 0x8000000000000000LL;
    sub_10016123C((uint64_t)v17, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v19 = *v4;
    *BOOL v4 = v21;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v19);
  }

id sub_100160020(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v7 = v6;
  a4(v16, v5);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = v17;
  if (!v17) {
    return 0LL;
  }
  uint64_t v9 = sub_10015E730(v16, v17);
  uint64_t v10 = *(void *)(v8 - 8);
  double v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, double))(v10 + 16))(v13, v11);
  double v14 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v13, v8);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
  sub_10015E754(v16);
  return v14;
}

id sub_100160100()
{
  return sub_10016010C(type metadata accessor for CLMicroLocationKeychainMock);
}

id sub_10016010C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "init");
}

id sub_100160148(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, "init");
}

id sub_100160184()
{
  return sub_100160190(type metadata accessor for CLMicroLocationKeychainMock);
}

id sub_100160190(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1001601C4(uint64_t a1)
{
  uint64_t v2 = sub_10015E6AC(&qword_1019350C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_100160204(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_100160240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10015E6AC(&qword_1019350C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100160288()
{
  unint64_t result = qword_101935108;
  if (!qword_101935108)
  {
    uint64_t v1 = type metadata accessor for SymmetricKey(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SymmetricKey, v1);
    atomic_store(result, (unint64_t *)&qword_101935108);
  }

  return result;
}

uint64_t sub_1001602D0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1001603A0(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100161E34((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100161E34((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10015E754(v12);
  return v7;
}

uint64_t sub_1001603A0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_100160558(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1001605EC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001607C4(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1001607C4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1001605EC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_100160760(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100160760(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_10015E6AC(&qword_101935188);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  void v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1001607C4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10015E6AC(&qword_101935188);
    double v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    double v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

unint64_t sub_100160910(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1001609A4(a1, v4);
}

unint64_t sub_100160940(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100160AAC(a1, a2, v5);
}

unint64_t sub_1001609A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_100161A54();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_100160AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

uint64_t sub_100160B8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100160940(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100161408();
      uint64_t v12 = v19;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    uint64_t v13 = *(void *)(v12 + 56);
    uint64_t v14 = type metadata accessor for SymmetricKey(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a3, v13 + *(void *)(v15 + 72) * v9, v14);
    sub_100161040(v9, v12);
    uint64_t v16 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a3, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v18 = type metadata accessor for SymmetricKey(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a3,  1LL,  1LL,  v18);
  }

Swift::Int sub_100160CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10015E6AC(&qword_101935180);
  int v48 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v44 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v10 = *(void *)(v5 + 64);
    uint64_t v46 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & v10;
    int64_t v45 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v15 = 0LL;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v49 = v15;
        unint64_t v19 = v18 | (v15 << 6);
      }

      else
      {
        int64_t v20 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v20 >= v45) {
          goto LABEL_37;
        }
        unint64_t v21 = v46[v20];
        int64_t v22 = v15 + 1;
        if (!v21)
        {
          int64_t v22 = v15 + 2;
          if (v15 + 2 >= v45) {
            goto LABEL_37;
          }
          unint64_t v21 = v46[v22];
          if (!v21)
          {
            uint64_t v23 = v15 + 3;
            if (v15 + 3 >= v45)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v44;
              if ((v48 & 1) != 0)
              {
                uint64_t v43 = 1LL << *(_BYTE *)(v5 + 32);
                if (v43 >= 64) {
                  bzero(v46, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v46 = -1LL << v43;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v21 = v46[v23];
            if (!v21)
            {
              while (1)
              {
                int64_t v22 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_44;
                }
                if (v22 >= v45) {
                  goto LABEL_37;
                }
                unint64_t v21 = v46[v22];
                ++v23;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v22 = v15 + 3;
          }
        }

unint64_t sub_100161040(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v29, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v29, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        int64_t v15 = (_OWORD *)(v14 + 16 * v3);
        unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          _OWORD *v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(type metadata accessor for SymmetricKey(0LL) - 8) + 72LL);
        int64_t v19 = v18 * v3;
        Swift::Int result = v17 + v18 * v3;
        int64_t v20 = v18 * v6;
        unint64_t v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          Swift::Int result = swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          Swift::Int result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

uint64_t sub_10016123C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100160940(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = type metadata accessor for SymmetricKey(0LL);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v12,  a1,  v20);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100161408();
      goto LABEL_7;
    }

    sub_100160CBC(v15, a4 & 1);
    unint64_t v22 = sub_100160940(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100161378(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100161378(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  *unint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  a4,  v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *sub_100161408()
{
  uint64_t v33 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v37 = v2;
  if (!v3)
  {
    uint64_t result = (void *)swift_release(v1);
    uint64_t v32 = v37;
    uint64_t v31 = v33;
LABEL_28:
    *uint64_t v31 = v32;
    return result;
  }

  uint64_t v4 = v2;
  uint64_t result = (void *)(v2 + 64);
  unint64_t v6 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
  {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
    uint64_t v4 = v37;
  }

  int64_t v8 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v36 = v1;
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  uint64_t v34 = v1 + 64;
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v1;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v38 = v8;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }

    int64_t v27 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v27 >= v35) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    int64_t v29 = v8 + 1;
    if (!v28)
    {
      int64_t v29 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v29);
      if (!v28) {
        break;
      }
    }

BOOL sub_10016167C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_10015E6AC(&qword_101935110);
  uint64_t inited = swift_initStackObject(v3, v37);
  *(_OWORD *)(inited + 16) = xmmword_1012D0A20;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString();
  *(void *)(inited + 40) = kSecClassKey;
  *(void *)(inited + 64) = v5;
  *(void *)(inited + 72) = kSecUseDataProtectionKeychain;
  *(_BYTE *)(inited + sub_10000AE14(v1 - 80) = 1;
  *(void *)(inited + 104) = &type metadata for Bool;
  *(void *)(inited + 112) = kSecAttrAccessible;
  *(void *)(inited + 120) = kSecAttrAccessibleWhenUnlocked;
  *(void *)(inited + 144) = v5;
  *(void *)(inited + 152) = kSecAttrSynchronizable;
  *(_BYTE *)(inited + 160) = 1;
  *(void *)(inited + 184) = &type metadata for Bool;
  *(void *)(inited + 192) = kSecValueData;
  uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
  unint64_t v7 = sub_100160288();
  int64_t v8 = (id)kSecClass;
  uint64_t v9 = (id)kSecClassKey;
  uint64_t v10 = (id)kSecUseDataProtectionKeychain;
  unint64_t v11 = (id)kSecAttrAccessible;
  uint64_t v12 = (id)kSecAttrAccessibleWhenUnlocked;
  unint64_t v13 = (id)kSecAttrSynchronizable;
  unint64_t v14 = (id)kSecValueData;
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(v36, sub_10015FAC0, 0LL, &type metadata for Data, v6, v7);
  *(_OWORD *)(inited + 200) = *(_OWORD *)v36;
  *(void *)(inited + sub_10000AE14(v45 - 224) = &type metadata for Data;
  *(void *)(inited + sub_1000A7938(v33 - 232) = kSecAttrApplicationLabel;
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 240) = a2;
  *(void *)(inited + 248) = a3;
  uint64_t v15 = (id)kSecAttrApplicationLabel;
  swift_bridgeObjectRetain(a3);
  unint64_t v16 = sub_10015F74C(inited);
  sub_100161A54();
  sub_100161A90();
  Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  OSStatus v18 = SecItemAdd(isa, 0LL);

  if (v18)
  {
    if (qword_101993B20 != -1) {
      swift_once(&qword_101993B20, sub_10015E94C);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_10015E694(v19, (uint64_t)qword_101993B28);
    double v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(18LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      v36[0] = v24;
      *(_DWORD *)uint64_t v23 = 67109378;
      LODWORD(v34) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4, v23 + 4, v23 + 8);
      *(_WORD *)(v23 + 8) = 2080;
      CFStringRef v25 = SecCopyErrorMessageString(v18, 0LL);
      if (v25)
      {
        uint64_t v26 = (__CFString *)v25;
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        unint64_t v29 = v28;
      }

      else
      {
        LODWORD(v34) = v18;
        uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        unint64_t v29 = v30;
      }

      uint64_t v34 = sub_1001602D0(v27, v29, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v23 + 10, v23 + 18);
      swift_bridgeObjectRelease(v29);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Failed to store key in keychain, error %d, %s",  (uint8_t *)v23,  0x12u);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }
  }

  return v18 == 0;
}

void type metadata accessor for CFString()
{
  if (!qword_101935178)
  {
    ForeignTypeMetaunsigned int data = swift_getForeignTypeMetadata(0LL, &unk_1018219F8);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_101935178);
    }
  }

unint64_t sub_100161A54()
{
  unint64_t result = qword_101935118;
  if (!qword_101935118)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSString);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101935118);
  }

  return result;
}

unint64_t sub_100161A90()
{
  unint64_t result = qword_101935120;
  if (!qword_101935120)
  {
    unint64_t v1 = sub_100161A54();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_101935120);
  }

  return result;
}

BOOL sub_100161AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10015E6AC(&qword_101935110);
  uint64_t inited = swift_initStackObject(v4, v32);
  *(_OWORD *)(inited + 16) = xmmword_1012D0A30;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString();
  *(void *)(inited + 40) = kSecClassKey;
  *(void *)(inited + 64) = v6;
  *(void *)(inited + 72) = kSecUseDataProtectionKeychain;
  *(_BYTE *)(inited + sub_10000AE14(v1 - 80) = 1;
  *(void *)(inited + 104) = &type metadata for Bool;
  *(void *)(inited + 112) = kSecAttrAccessible;
  *(void *)(inited + 120) = kSecAttrAccessibleAfterFirstUnlock;
  *(void *)(inited + 144) = v6;
  *(void *)(inited + 152) = kSecAttrSynchronizable;
  *(_BYTE *)(inited + 160) = 1;
  *(void *)(inited + 184) = &type metadata for Bool;
  *(void *)(inited + 192) = kSecAttrApplicationLabel;
  *(void *)(inited + sub_10000AE14(v45 - 224) = &type metadata for String;
  *(void *)(inited + 200) = a1;
  *(void *)(inited + 208) = a2;
  unint64_t v7 = (id)kSecClass;
  int64_t v8 = (id)kSecClassKey;
  uint64_t v9 = (id)kSecUseDataProtectionKeychain;
  uint64_t v10 = (id)kSecAttrAccessible;
  unint64_t v11 = (id)kSecAttrAccessibleAfterFirstUnlock;
  uint64_t v12 = (id)kSecAttrSynchronizable;
  unint64_t v13 = (id)kSecAttrApplicationLabel;
  swift_bridgeObjectRetain(a2);
  unint64_t v14 = sub_10015F74C(inited);
  sub_100161A54();
  sub_100161A90();
  Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  OSStatus v16 = SecItemDelete(isa);

  if (v16)
  {
    if (qword_101993B20 != -1) {
      swift_once(&qword_101993B20, sub_10015E94C);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_10015E694(v17, (uint64_t)qword_101993B28);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(18LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v22;
      *(_DWORD *)uint64_t v21 = 67109378;
      LODWORD(v30) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v21 + 4, v21 + 8);
      *(_WORD *)(v21 + 8) = 2080;
      CFStringRef v23 = SecCopyErrorMessageString(v16, 0LL);
      if (v23)
      {
        uint64_t v24 = (__CFString *)v23;
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        unint64_t v27 = v26;
      }

      else
      {
        LODWORD(v30) = v16;
        uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        unint64_t v27 = v28;
      }

      uint64_t v30 = sub_1001602D0(v25, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v21 + 10, v21 + 18);
      swift_bridgeObjectRelease(v27);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Failed to remove key from keychain, error %d, %s",  (uint8_t *)v21,  0x12u);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }
  }

  return v16 == 0;
}

uint64_t type metadata accessor for CLMicroLocationKeychain()
{
  return objc_opt_self(&OBJC_CLASS____TtC19microlocation_logic23CLMicroLocationKeychain);
}

uint64_t type metadata accessor for CLMicroLocationKeychainMock()
{
  return objc_opt_self(&OBJC_CLASS____TtC19microlocation_logic27CLMicroLocationKeychainMock);
}

uint64_t sub_100161E34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100161E74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10015E6AC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

_OWORD *sub_100161EB8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100161ECC( mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v30 = 1;
  uint64_t v31 = a4;
  int v32 = 16777472;
  int v33 = a5;
  NDR_record_t v34 = NDR_record;
  int v17 = *a3;
  int v35 = a2;
  int v36 = v17;
  int v37 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988LL;
      }

      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v20 = 4294966996LL;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            int v21 = v33;
            if (v33 == v47)
            {
              uint64_t v20 = 0LL;
              int v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              __int128 v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              __int128 v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              __int128 v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              __int128 v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              int v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v20 = 4294966996LL;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port) {
              uint64_t v20 = 4294966996LL;
            }
            else {
              uint64_t v20 = HIDWORD(v31);
            }
          }
        }

        else
        {
          uint64_t v20 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v20 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v20;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v20;
}

uint64_t sub_100162124(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4 = a3[5];
  __int128 v19 = a3[4];
  __int128 v20 = v4;
  __int128 v5 = a3[7];
  __int128 v21 = a3[6];
  __int128 v22 = v5;
  __int128 v6 = a3[1];
  __int128 v15 = *a3;
  __int128 v16 = v6;
  __int128 v7 = a3[3];
  __int128 v17 = a3[2];
  NDR_record_t v13 = NDR_record;
  unsigned int v14 = a2;
  __int128 v18 = v7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }

  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }

  if (msg.msgh_id == 71)
  {
    uint64_t v10 = 4294966988LL;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }

  if (msg.msgh_id != 1301)
  {
    uint64_t v10 = 4294966995LL;
    goto LABEL_17;
  }

  uint64_t v10 = 4294966996LL;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_17;
  }
  return v10;
}

uint64_t sub_1001622B0( mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, void *a9, _DWORD *a10)
{
  int v18 = 1;
  uint64_t v19 = a6;
  int v20 = 16777472;
  int v21 = a7;
  NDR_record_t v22 = NDR_record;
  *(_DWORD *)__int128 v23 = a2;
  *(_DWORD *)&int v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  int v24 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988LL;
      }

      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996LL;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              uint64_t v14 = 0LL;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996LL;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996LL;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }

        else
        {
          uint64_t v14 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v14 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v14;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v14;
}

uint64_t sub_10016249C(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988LL;
    }

    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v18;
            if (!v18)
            {
              int v15 = v20;
              *a2 = v19;
              *a3 = v15;
              int v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v18 == 0;
          }
          if (v13) {
            uint64_t v12 = 4294966996LL;
          }
          else {
            uint64_t v12 = v18;
          }
          goto LABEL_23;
        }
      }

      uint64_t v12 = 4294966996LL;
    }

    else
    {
      uint64_t v12 = 4294966995LL;
    }

void sub_100162614(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) - 1224239923 * ((-2 - ((a1 | 0xAACC30C4) + (~(_DWORD)a1 | 0x5533CF3B))) ^ 0xA78032EC);
  __asm { BR              X11 }

uint64_t sub_100162738()
{
  if (v0 < 0) {
    int v0 = -v0;
  }
  if (v2 >= 0) {
    unsigned int v4 = v2;
  }
  else {
    unsigned int v4 = -v2;
  }
}

uint64_t sub_100162784()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((177 * (v1 < 0x83)) ^ (v0 + 829))) - 12LL))();
}

void sub_1001627A8()
{
  *(_DWORD *)(v1 + v0) = 1966800080;
}

void sub_100163614(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) ^ (1225351577 * ((-2 - ((a1 | 0x21ABC784) + (~(_DWORD)a1 | 0xDE54387B))) ^ 0xFDCEE06D));
  __asm { BR              X10 }

uint64_t sub_1001636E4@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  unsigned int v12 = 1755732067 * (&a4 ^ 0xDEC6BDDB);
  a7 = &STACK[0x708F6A420CBDE163];
  a8 = v12 ^ 0x1576EF19;
  a4 = &STACK[0x3F8123127DDA1A64];
  a5 = v11;
  a6 = (v10 - 179) ^ v12;
  uint64_t v13 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (v10 - 184)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v9
                                                      + 8LL
                                                      * (((*(_DWORD *)(v11 - 0x27E11828102FB971LL) == v8) * (v10 + 1585)) ^ v10))
                                          - 4LL))(v13);
}

uint64_t sub_10016379C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return ((uint64_t (*)(void))(*(void *)(v12 + 8LL * (((a11 == v11) * (((v13 - 1) | 1) - 386)) ^ (v13 + 870))) - 8LL))();
}

uint64_t sub_1001637E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  *(_BYTE *)(v11 + (v14 + v13)) = *(_BYTE *)(a9 + (v14 + v13)) ^ 0x2C;
  return ((uint64_t (*)(void))(*(void *)(v16
                                        + 8LL
                                        * ((15 * (((v12 + 1441020162) & 0xAA1BC397 ^ (v13 + 400)) + v14 >= (a11 ^ v15))) ^ v12))
                            - 8LL))();
}

void sub_100163850(_DWORD *a1@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(*(void *)(v3 + 24) - 0x335EB1051722DFECLL) = v1;
  *(_DWORD *)(v4 - 0x7785963AF3444772LL) = v2;
  *(_DWORD *)uint64_t v3 = *a1;
}

void sub_1001638B8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BR              X9 }

uint64_t sub_100163984@<X0>( _DWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  unsigned int v14 = 1759421093
      * ((2 * ((&a5 ^ 0x852F369) & 0x163ED650) - (&a5 ^ 0x852F369) + 1774266795) ^ 0xD2EE6A96);
  int v17 = *a1 - v12 + *(_DWORD *)(v8 - 0x27E11828102FB979LL) - 282547543;
  a8 = v13 - v14 + 977;
  a5 = v17 - v14 + 1616045007;
  a6 = v14 + 1583842651;
  a7 = v8;
  uint64_t v15 = (*(uint64_t (**)(int *))(a2 + 8LL * (v13 - 333)))(&a5);
  return ((uint64_t (*)(uint64_t))(*(void *)(v11 + 8LL * ((1474 * (*v9 == v10)) ^ v13))
                                          - ((v13 + 2034994670) & 0x86B471F7)
                                          + 394LL))(v15);
}

uint64_t sub_100163A84()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((*(void *)(v0 + 8) == 0x48247A308694277ELL) * ((v1 + 26) ^ 0x227)) ^ v1))
}

uint64_t sub_100163AD0()
{
}

void sub_100163B34()
{
  *int v0 = -2084203482;
}

uint64_t sub_100163DB4(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 - 235795823 * ((a1 + 1658036232 - 2 * (a1 & 0x62D3A008)) ^ 0xF67EE951) - 424;
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL);
  int v4 = v2 - 1966800080;
  BOOL v3 = v2 - 1966800080 < 0;
  int v5 = 1966800080 - v2;
  if (!v3) {
    int v5 = v4;
  }
  BOOL v6 = (v1 ^ 0x7AFFDEDC ^ v5) - 1117065228 + ((2 * v5) & 0xF5FFBFFA) - 946524146 >= v1 + 2147483358;
  return ((uint64_t (*)(void))(*((void *)*(&off_101826020 + v1 - 177) + ((v6 | (16 * v6)) ^ v1) - 1) - 8LL))();
}

uint64_t sub_100163EB8()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1782 * (*(_DWORD *)(*v2 + 4LL * v4) != v0)) ^ v3)) - 4LL))();
}

uint64_t sub_100163EE8@<X0>(int a1@<W8>)
{
  int v4 = (v1 - 681) | 0x101;
  BOOL v5 = a1 + v3 - 946524333 >= (v4 + 2147483358);
  return ((uint64_t (*)(void))(*(void *)(*(void *)(v2 + 8LL * (v4 - 177)) - 8LL + 8LL * ((v5 | (16 * v5)) ^ v4)) - 8LL))();
}

uint64_t sub_100163F40(uint64_t result)
{
  *(_DWORD *)(result + 4) = 49961323;
  return result;
}

uint64_t sub_100163F50()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * ((1433 * (((v3 ^ v0) & 0x80000000) != ((v2 + 86) | 0x20) - 304)) ^ v2))
                            - 4LL))();
}

uint64_t sub_100163F98()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (((((v2 << (v3 + 31)) & v1) != v5) * v6) ^ v4)) - 4LL))();
}

uint64_t sub_100163FC4@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 4) = (a2 << (((v2 - 55) & 0xCF) + 60)) + v3 - 174040244;
  return result;
}

void sub_100163FFC(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0x5A50E64C) + (~(_DWORD)a1 | 0xA5AF19B3))) ^ 0x1F3B61D1);
  int v2 = *(_DWORD *)(a1 + 40) ^ v1;
  if (*(void *)(a1 + 48) | *(void *)(a1 + 64)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) + v1 == 2014182718;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  __asm { BR              X8 }

uint64_t sub_10016415C()
{
  BOOL v4 = v1[1] == 0xC8F409392290867LL || (v1[7] | v1[4]) == 0LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((56 * v4) ^ v0)) - ((v0 + 772) ^ 0x390LL)))();
}

uint64_t sub_1001641BC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *(void *)(v11 + 72);
  *(_DWORD *)(v9 - 0xC8F409392290867LL) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8LL * ((62 * (v13 != 0x1F589EA4AC42BDE9LL)) ^ a7)))( a1,  v13,  a7 ^ 0x39Eu,  a2,  a3,  a4,  a5,  a6,  a8,  a9,  v10);
}

uint64_t sub_100164264( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 8LL * (int)(((((38 * (v10 ^ 0xB9)) ^ 0xFFFFFFD4) + v10 + 790) * (v8 == 0)) ^ (v10 - 56))) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

uint64_t sub_1001642A8@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v20 = a1 - 633;
  int v21 = ((v19 - 1956630864 - 2 * ((v19 - 144) & 0x8B602F40)) ^ 0x31F45722) * v13;
  *(void *)(v19 - 128) = v16;
  *(void *)(v19 - 120) = v18;
  *(_DWORD *)(v19 - 140) = a1 - v21 + 867;
  *(_DWORD *)(v19 - 136) = v14 + v21 - 225694159 + a1 - 633;
  uint64_t v22 = v11;
  BOOL v25 = v12 == 0;
  (*(void (**)(uint64_t))(v11 + 8LL * (a1 ^ 0x387)))(v19 - 144);
  *(_DWORD *)(v19 - 128) = (v20 + 242) ^ (628203409 * ((v19 + 69161144 - 2 * ((v19 - 144) & 0x41F5148)) ^ 0x86975D7B));
  *(void *)(v19 - 144) = v15;
  *(void *)(v19 - 136) = a10;
  ((void (*)(uint64_t))(*(void *)(v22 + 8LL * (v20 ^ 0x114)) - 4LL))(v19 - 144);
  *(_DWORD *)(v19 - 128) = v20
                         + 1374699841 * ((((v19 - 144) | 0xD1E85911) - ((v19 - 144) & 0xD1E85911)) ^ 0xBC1C4118)
                         + 916;
  *(void *)(v19 - 144) = a9;
  *(void *)(v19 - 136) = a10;
  *(void *)(v19 - 120) = a11;
  *(void *)(v19 - 112) = a5;
  *(void *)(v19 - 104) = v15;
  uint64_t v23 = ((uint64_t (*)(uint64_t))(*(void *)(v22 + 8LL * (v20 ^ 0x1A3)) - 4LL))(v19 - 144);
  return (*(uint64_t (**)(uint64_t))(v17 + 8LL * (((((v20 + 727) | 0x268) ^ ((v20 ^ 0x741) + 3)) * v25) ^ v20)))(v23);
}

uint64_t sub_100164588()
{
  int v6 = 535753261 * ((v5 - 144) ^ 0xAF40E2F);
  *(void *)(v5 - 120) = v3;
  *(_DWORD *)(v5 - 128) = v4 - v6 - 1345;
  *(_DWORD *)(v5 - 144) = (v1 - 262623407 + (v4 ^ 0x6DC)) ^ v6;
  *(void *)(v5 - 136) = v8;
  uint64_t result = ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * (v4 ^ 0x6A2)) - 8LL))(v5 - 144);
  *int v10 = v9;
  *int v0 = 2084229119;
  return result;
}

uint64_t sub_1001646D4(_DWORD *a1)
{
  unsigned int v1 = 1224239923 * (((a1 | 0x8C9528F6) - (_DWORD)a1 + (a1 & 0x736AD709)) ^ 0x7E26D521);
  unsigned int v2 = a1[4] - v1;
  int v3 = *a1 ^ v1;
  unsigned int v5 = v3 - 1352176489;
  BOOL v4 = v3 - 1352176489 < 0;
  LODWORD(v6) = 1352176489 - v3;
  if (v4) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v5;
  }
  BOOL v7 = v6 != ((2 * (_DWORD)v6) & 0xD48E6B50);
  return (*((uint64_t (**)(void))*(&off_101826020 + (int)(v2 ^ 0x1F3)) + (int)((v7 | (32 * v7)) ^ v2) - 1))();
}

void sub_100164784(int a1@<W8>)
{
  **(_DWORD **)(v1 - 0x1F589EA4AC42BDE1LL) = (v2 - 364431960) ^ 0x2CAB1580;
  *(_DWORD *)(v1 - 0x1F589EA4AC42BDE5LL) = a1 + 1;
}

void sub_1001647DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __asm { BR              X8 }

uint64_t sub_100164858( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  a16 = 108757529 * ((&a15 + 70320331 - 2 * (&a15 & 0x43100CB)) ^ 0xE4AD62E0) - 504207030;
  uint64_t v17 = sub_1001A63A8(&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v16 + 8LL * ((2013 * (a15 == 2084229119)) ^ 0x265u)) - 12LL))(v17);
}

uint64_t sub_1001648F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, int a16, unsigned int a17)
{
  a17 = 854 - 460628867 * ((((2 * &a15) | 0xF5C7D9FC) - &a15 + 85725954) ^ 0xB6756E83);
  a15 = &STACK[0x49EB7E5E2EA5C90D];
  sub_10017F1A8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * ((363 * (a16 == 2084229119)) ^ v17)) - 12LL))( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26);
}

uint64_t sub_100164988( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, unsigned int a18, uint64_t a19)
{
  unsigned int v27 = 1178560073 * ((((2 * &a15) | 0x52165FC6) - &a15 - 688599011) ^ 0x939F5781);
  a18 = v27 ^ 0x3E5;
  a16 = v27 + 804878199 * v25 + 1740498123;
  a17 = a13;
  sub_1001790DC(&a15);
  unsigned int v28 = 1178560073 * ((&a15 & 0x147230E4 | ~(&a15 | 0x147230E4)) ^ 0x5119B779);
  a18 = v28 ^ 0x3E5;
  a17 = a13;
  a16 = v28 + 804878199 * v24 + 1740498123;
  sub_1001790DC(&a15);
  unsigned int v29 = 1178560073 * (&a15 ^ 0xBA947862);
  a16 = v29 + 292;
  a19 = v22;
  a18 = ((v23 ^ 0x4F7FFFD6) - 4727314 + ((2 * v23) & 0x9EFFFFAC)) ^ v29;
  a17 = a13;
  sub_100190984(&a15);
  unsigned int v30 = 1178560073 * ((&a15 - 1989463651 - 2 * (&a15 & 0x896B319D)) ^ 0x33FF49FF);
  a17 = a13;
  a19 = v20;
  a16 = v30 + 292;
  a18 = v30 ^ ((v21 ^ 0xEF3FDFED) + 1610087895 + ((2 * v21) & 0xDE7FBFDA));
  sub_100190984(&a15);
  int v31 = *v19;
  a17 = a13;
  a16 = v29 + 804878199 * v31 + 1740498123;
  a18 = v29 ^ 0x3E5;
  uint64_t v32 = sub_1001790DC(&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v26 + 8LL * ((1563 * (a15 == 2084229119)) ^ 0x162u)) - 12LL))(v32);
}

uint64_t sub_100164C38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, unsigned int a17, unsigned int a18, unsigned int a19, int a20)
{
  unsigned int v23 = 460628867 * (((&a15 | 0x444BEFE9) + (~&a15 | 0xBBB41016)) ^ 0x8DD6D95);
  a15 = &STACK[0x27D4077E41C0C6C8];
  a16 = a13;
  a18 = v23 + v21 - 2024873437;
  a19 = 274310066 - v23;
  a17 = v23 + 1658269492;
  uint64_t v24 = sub_1001A677C((uint64_t)&a15);
}

uint64_t sub_100164CFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, unsigned int a15, unint64_t *a16, unint64_t *a17, unint64_t *a18, unsigned int a19)
{
  a19 = (v19 - 81) ^ (1225351577 * ((&a15 & 0x700A8397 | ~(&a15 | 0x700A8397)) ^ 0xAC6FA47E));
  a16 = a14;
  a17 = &STACK[0x7785963AF3444786];
  a18 = &STACK[0x335EB1051722E004];
  ((void (*)(unsigned int *))((char *)*(&off_101826020 + (v19 ^ 0x1E9)) - 12))(&a15);
  a15 = (v19 - 80) ^ (1374699841 * (&a15 ^ 0x6DF41809));
  a16 = &STACK[0x18E41690234F4F55];
  a17 = a14;
  ((void (*)(unsigned int *))*(&off_101826020 + (int)(v19 - 300)))(&a15);
  a16 = a14;
  a15 = (v19 - 69) ^ (1755732067
                    * ((((2 * (&a15 ^ 0x1D0430E2)) | 0x9439548E)
  uint64_t v21 = sub_10017A8B8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v20
                                                      + 8LL
                                                      * ((1839 * ((_DWORD)a17 == 2 * (v19 ^ 0x12F) + 2084228709)) ^ v19))
                                          - 12LL))(v21);
}

uint64_t sub_100164E90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
}

uint64_t sub_100164EE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  BOOL v15 = (((((v12 - 829) | 0x446) - 756) ^ 0xFDF3E29C) & (2 * ((a12 ^ v13) - ((2 * (a12 ^ v13)) & 0x35134EC) + 27826806)) ^ 0x151206C)
      + (((a12 ^ v13) - ((2 * (a12 ^ v13)) & 0x35134EC) + 27826806) ^ 0xFF516BC9)
      + 930545525 != 913371444;
  return (*(uint64_t (**)(void))(v14 + 8LL * ((v15 | (2 * v15)) ^ v12)))();
}

uint64_t sub_100164F74()
{
}

uint64_t sub_100164FD8(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((((((unint64_t)(v1 - v2) < 0x20) ^ (a1 + 2)) & 1)
                                          * (((a1 - 201) | 0xD0) ^ 0x5D3)) ^ a1))
                            - 8LL))();
}

uint64_t sub_100165028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                                     + 8LL
                                                     * ((((a5 + v6 - 1519378149) & 0xE284F7F ^ 0x78F) * (v5 > 0x1F)) ^ a5))
                                         - 4LL))(0LL);
}

uint64_t sub_10016506C(uint64_t a1, int a2)
{
  uint64_t v11 = v6 + v5 + v8 + (a2 ^ (v7 + 995));
  __int128 v12 = *(_OWORD *)(v2 + v11 - 15);
  __int128 v13 = *(_OWORD *)(v2 + v11 - 31);
  uint64_t v14 = v9 + v11;
  *(_OWORD *)(v14 - 15) = v12;
  *(_OWORD *)(v14 - 31) = v13;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((79 * ((v4 & 0xFFFFFFE0) == 32)) ^ (v3 + a2 + 807))) - 8LL))();
}

void sub_1001650C8()
{
}

uint64_t sub_1001650D4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((((2 * a6) ^ 0xC17) * (v6 == a1)) ^ a6))
                            - ((a6 - 260) | 0x80u)
                            + 1413LL))();
}

uint64_t sub_100165110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v8 = ((v5 + ((a5 + 1214353071) | 0x406008B) - 72) & v6) != 0;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((v8 | (v8 << 6)) ^ a5)) - 4LL))();
}

uint64_t sub_100165154(int a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(v9 - 7 + (v8 + v7 + v6 - a1 + 1557)) = *(void *)(v4
                                                                             - 7
                                                                             + (v8 + v7 + v6 - a1 + 1557));
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
}

void sub_1001651C0()
{
}

uint64_t sub_1001651CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v9 + 8LL * ((29 * ((((v7 - v5 - 877) ^ (v8 + 1582) ^ (v6 == a5)) & 1) == 0)) ^ v7)))();
}

uint64_t sub_100165204(uint64_t a1, int a2, int a3)
{
  *(_BYTE *)(v6 + (a3 - 913371445)) = *(_BYTE *)(v4 + (a3 - 913371445));
}

uint64_t sub_100165250@<X0>(int a1@<W3>, int a2@<W8>)
{
  int v5 = (a1 - 1187865068) & 0x46CD616B;
  *uint64_t v4 = a2;
  uint64_t v11 = v8;
  unsigned int v10 = v5
      + (((v9 | 0x3211D2A2) - v9 + (v9 & 0xCDEE2D58)) ^ 0x38E5DC8D) * v3
      + 977;
  v2(v9);
  unsigned int v10 = v5 + 259 + ((v9 + 581886662 - 2 * (v9 & 0x22AEE2C6)) ^ 0x285AECE9) * v3 + 718;
  uint64_t v11 = v7;
  v2(v9);
  return 0LL;
}

uint64_t sub_100165354(uint64_t a1)
{
  int v1 = 1374699841 * ((((2 * a1) | 0x4FD35BAC) - a1 + 1477857834) ^ 0xCA1DB5DF);
  int v2 = *(_DWORD *)a1 ^ v1;
  int v3 = *(_DWORD *)(a1 + 16) + v1;
  if (v3 < 0) {
    int v3 = -v3;
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL);
  unsigned int v6 = v4 - 1966800080;
  BOOL v5 = v4 - 1966800080 < 0;
  unsigned int v7 = 1966800080 - v4;
  if (!v5) {
    unsigned int v7 = v6;
  }
  return ((uint64_t (*)(void))(*((void *)*(&off_101826020 + v2 - 95)
                              + (((8 * (v3 >> 5 < v7)) | (16 * (v3 >> 5 < v7))) ^ v2)
                              - 1)
                            - 12LL))();
}

uint64_t sub_100165408@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  unsigned int v4 = ((*(_DWORD *)(*(void *)(v2 - 0x1F589EA4AC42BDE1LL) + 4LL * v3) ^ 0xC6EC2028) >> a2) ^ 0x18ED06CC;
  unsigned int v5 = ((v4 & 0x92200000 | 0x6D95DF71) - (v4 & 0x49055940 | 0x926A208E) - 1838538610) ^ v4 & 0xDB255941;
  *(_DWORD *)(result + 4) = ((v5 & 0x9C0AE040 ^ 0x880A204C) + (v5 ^ 0x75B0DF31) - ((v5 ^ 0x75B0DF31) & 0x9C0AE04C)) ^ 0xCBF416DC;
  return result;
}

uint64_t sub_1001654BC(uint64_t result)
{
  *(_DWORD *)(result + 4) = 1339815632;
  return result;
}

void sub_1001654CC(uint64_t a1)
{
  int v1 = 1374699841 * ((a1 - 1542394297 - 2 * (a1 & 0xA410EE47)) ^ 0xC9E4F64E);
  __asm { BR              X13 }

uint64_t sub_100165580@<X0>(int a1@<W8>)
{
  unsigned int v5 = 1755732067 * ((-432722614 - (v7 | 0xE6352D4A) + (v7 | 0x19CAD2B5)) ^ 0xC70C6F6E);
  uint64_t v8 = v2;
  v7[0] = (v3 - ((v4 + a1 + 782147618) & 0x56CA4A2C) - 1028360358) ^ v5;
  v7[1] = (a1 - 325) ^ v5;
  return ((uint64_t (*)(_DWORD *))(*(void *)(v1 + 8LL * (a1 ^ 0x42D)) - 12LL))(v7);
}

void sub_1001656DC(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_100165760( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *))(v66 + 14120))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  2337622372LL,  a9,  &a66,  a11,  &STACK[0x3EA9131FAE911000]);
}

uint64_t sub_100165870()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((2 * (v1 == v3 + v0 - 487911584)) | (4 * (v1 == v3 + v0 - 487911584)) | v0))
                            - ((v0 + 2061907623) & 0x8519CDF5)
                            + 1437LL))();
}

uint64_t sub_1001658C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  return ((uint64_t (*)(void))(*(void *)(v17
                                        + 8LL
                                        * (int)(((((v18 - 510884205) & 0xFFFFFFFC) - a16 != (v16 ^ 0x5CC) - 510884313)
                                               * ((v16 + 1989858250) & 0x896526F9 ^ 0x6B)) ^ v16))
                            - 12LL))();
}

uint64_t sub_100165928@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v17 = a13 - v15 != 1219120379 || v13 == ((a1 - 64) | 0x2C0) + 754912867;
  return (*(uint64_t (**)(void))(v14 + 8LL * ((742 * (((a1 - 64) ^ v17) & 1)) ^ a1)))();
}

uint64_t sub_100165984@<X0>( int a1@<W7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v17 = a2 - 264;
  int v18 = a2 - 264 - v15 + 1241;
  int v19 = a1 + a2 - 264 + 1232;
  unsigned int v20 = (v17 ^ (v15 + 103)) + a14 + 169496557;
  int v21 = (v20 < (v18 ^ 0x71381218u)) ^ ((v16 + 1388617041) < 0x713816C1);
  BOOL v22 = v20 < v16 + 1388617041;
  if (v21) {
    BOOL v22 = (v16 + 1388617041) < 0x713816C1;
  }
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((107 * !v22) ^ v19)) - 8LL))();
}

uint64_t sub_100165B34()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL * ((452 * (*(_DWORD *)(v1 + 48LL * (v2 - 1469433710) + 36) == v2)) ^ v0))
}

uint64_t sub_100165B8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v21 = 628203409 * ((((v20 - 152) | 0x81E41E6B) - ((v20 - 152) & 0x81E41E6B)) ^ 0x36C1258);
  *(void *)(v20 - 144) = a12;
  *(void *)(v20 - 152) = a14;
  *(void *)(v20 - 128) = a15;
  *(void *)(v20 - 112) = a17;
  *(_DWORD *)(v20 - 136) = v18 - v21 + 1563;
  *(_DWORD *)(v20 - 132) = v19 - v21 + ((v18 + 433) ^ 0x3A46EC4B);
  *(void *)(v20 - 104) = a13;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(a7 + 8LL * (int)(v18 & 0xE2896C7A)))(v20 - 152);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8LL
                                            * ((1376
                                              * (*(_DWORD *)(v20 - 120) == ((v18 - 17107132) & 0x75AFBF57) + 126884090)) ^ v18)))(v22);
}

uint64_t sub_100165C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9
                                                                                                  + 8LL * (((*(_DWORD *)(v7 + 48LL * (v8 + 868188557 + ((v6 + 1610620390) | 0x14AA9705))) == 73805598) * ((v6 ^ 0x273) - 57)) ^ v6)))( a1,  a2,  a3,  a4,  a5,  a6,  v10);
}

uint64_t sub_100165CF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if ((v8 - 1550691361) <= 0x10 && ((1 << (v8 - 33)) & 0x12105) != 0) {
    __asm { BR              X10 }
  }

  return v9 ^ 0x83C59421;
}

void sub_100166394(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BR              X13 }

uint64_t sub_100166498()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v0 ^ 0x5D3 ^ (93 * (v1 != 0x1AA260A0)))) - 8LL))();
}

uint64_t sub_1001664FC()
{
  BOOL v11 = v3 > v5;
  uint64_t v12 = (v7 - 659196916);
  *(_BYTE *)(v10 + v12) = *(_BYTE *)(*(void *)(v8 + 8LL * (v1 ^ 0x671)) + (v12 & 0xF) - 12) ^ *(_BYTE *)(v0 + v12) ^ (23 * (v12 & 0xF)) ^ *(_BYTE *)(*(void *)(v8 + 8LL * (v1 ^ 0x6E6)) + (v12 & 0xF) - 12) ^ *(_BYTE *)(*(void *)(v8 + 8LL * (v1 ^ 0x669)) + (v12 & 0xF) - 11);
  if (v11 == v7 - 1081844341 < ((v1 + 799652800) & 0xD0563FFF) + v2) {
    BOOL v11 = v7 - 1081844341 < v4;
  }
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((v11 * v6) ^ v1)) - 8LL))();
}

uint64_t sub_1001665CC()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((222
                                * (((v0 - 8) ^ ((v1 ^ (v0 - 1152) ^ 0x555596A9)
                                                               - 65624
                                                               + ((2 * v1) & 0x9FEFEFFC ^ 0x1544C140) == 1341585318)) & 1)) ^ v0)))();
}

uint64_t sub_100166640@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((81
                                          * (v2 + a1 - 1341650942 < (((v1 & 0x5FB4769D ^ 0x65E) + 921) ^ (12 * (v1 & 0x5FB4769D ^ 0x65Eu))))) ^ v1 & 0x5FB4769Du))
                            - 8LL))();
}

uint64_t sub_1001666C0(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v6
                                                      + 8LL
                                                      * ((((((a2 + a6 - 16) < 0xFFFFFFF0) ^ (((a3 - 16) ^ 0xA7) + 1)) & 1)
                                                        * (((a3 + 752) ^ 0x1FE) + 1246)) ^ (a3 + 752)))
                                          - 12LL))(a1);
}

uint64_t sub_100166708@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W8>)
{
  uint64_t v10 = (v7 + a3 + a1) + v9;
  uint64_t v11 = ((_BYTE)v7 + (_BYTE)a3 + (_BYTE)a1) & 0xF;
  uint64_t v12 = v11 - v10;
  unint64_t v13 = v11 - v10 + v4;
  uint64_t v14 = (v5 | v11) - v10;
  BOOL v15 = v13 >= 0x10 && v3 - v9 >= (unint64_t)(a2 + 801) - 1486;
  unint64_t v16 = v14 + (((a2 - 697) | 0x3E0u) ^ 0x3E7LL);
  int v19 = !v15 || v16 < 0x10 || (unint64_t)(v12 + v6) < 0x10;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((510 * v19) ^ a2)) - 12LL))();
}

uint64_t sub_100166780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (a7 ^ (810 * (v7 > 0xF))))
                            - ((a7 + 1745444873) & 0x97F69BBD)
                            + 409LL))();
}

uint64_t sub_1001667C0@<X0>( int a1@<W1>, int a2@<W6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52)
{
  *(_DWORD *)(v59 - 120) = v56 + 12;
  v64.val[1].i64[0] = (((a2 + 100) | 0x25) + (_BYTE)v56) & 0xF;
  v64.val[1].i64[1] = ((_BYTE)v56 + 6) & 0xF;
  v64.val[2].i64[0] = ((_BYTE)v56 + 5) & 0xF;
  v64.val[2].i64[1] = ((_BYTE)v56 + 4) & 0xF;
  v64.val[3].i64[0] = ((_BYTE)v56 + 3) & 0xF;
  v64.val[3].i64[1] = ((_BYTE)v56 + 2) & 0xF;
  v60.i64[0] = 0x7979797979797979LL;
  v60.i64[1] = 0x7979797979797979LL;
  v64.val[0].i64[0] = ((_BYTE)v58 + (_BYTE)a3 + (_BYTE)a1) & 0xF;
  v64.val[0].i64[1] = ((_BYTE)v56 + 8) & 0xF;
  v61.i64[0] = vqtbl4q_s8(v64, (int8x16_t)xmmword_1012D0AD0).u64[0];
  v65.val[0].i64[1] = v56 & 0xF;
  v65.val[1].i64[1] = ((_BYTE)v56 + 14) & 0xF;
  v65.val[2].i64[1] = *(_DWORD *)(v59 - 120) & 0xF;
  v65.val[3].i64[1] = ((_BYTE)v56 + 10) & 0xF;
  v65.val[0].i64[0] = ((_BYTE)v56 + 1) & 0xF;
  v65.val[1].i64[0] = ((_BYTE)v56 - 1) & 0xF;
  v65.val[2].i64[0] = ((_BYTE)v56 + 13) & 0xF;
  v65.val[3].i64[0] = ((_BYTE)v56 + 11) & 0xF;
  v61.i64[1] = vqtbl4q_s8(v65, (int8x16_t)xmmword_1012D0AD0).u64[0];
  int8x16_t v62 = vrev64q_s8(vmulq_s8(v61, v60));
  *(int8x16_t *)(a50 - 15 + (v58 + a3 + a1)) = veorq_s8( veorq_s8( veorq_s8( *(int8x16_t *)(v53 + v64.val[0].i64[0] - 15),  *(int8x16_t *)(v52 - 15 + (v58 + a3 + a1))),  veorq_s8( *(int8x16_t *)(v64.val[0].i64[0] + v54 - 12),  *(int8x16_t *)(v55 + v64.val[0].i64[0] - 15))),  vextq_s8(v62, v62, 8uLL));
  return ((uint64_t (*)(void))(*(void *)(a52
                                        + 8LL
                                        * ((195
                                          * (((((a2 - 924) | 0x125) ^ 0x2F7 ^ ((v57 & 0xFFFFFFF0) == 16)) & 1) == 0)) ^ ((a2 - 924) | 0x125)))
                            - 8LL))();
}

void sub_10016693C()
{
}

uint64_t sub_100166948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
}

uint64_t sub_100166994( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
                                        * ((((((v8 & 8) == 0) ^ (a8 + 122)) & 1)
                                          * (((a8 - 191) | 0x160) + 697)) ^ a8))
                            - 12LL))();
}

uint64_t sub_1001669E4@<X0>( int a1@<W1>, int a2@<W5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52)
{
  *(_DWORD *)(v62 - 132) = v57;
  unsigned int v63 = v57 & 0xFFFFFFF8;
  *(void *)(v62 - 128) = v61 - 7;
  *(void *)(v62 - 120) = v52 - 7;
  *(_DWORD *)(v62 - 136) = v63;
  char v64 = v58 + v59 + a3;
  uint64_t v65 = (v59 + a3 + a1 - v60);
  v67.val[0].i64[0] = ((_BYTE)v59 + (_BYTE)a3 + (_BYTE)a1 - (_BYTE)v60) & 0xF;
  v67.val[0].i64[1] = (v64 + 8 - (_BYTE)v60) & 0xF;
  v67.val[1].i64[0] = (v56 - (_BYTE)v60 + ((a2 + 10) ^ 8)) & 0xF;
  v67.val[1].i64[1] = (v64 + 6 - (_BYTE)v60) & 0xF;
  v67.val[2].i64[0] = (v64 + 5 - (_BYTE)v60) & 0xF;
  v67.val[2].i64[1] = (v64 + 4 - (_BYTE)v60) & 0xF;
  v67.val[3].i64[0] = (v64 + 3 - (_BYTE)v60) & 0xF;
  v67.val[3].i64[1] = (v64 + 2 - (_BYTE)v60) & 0xF;
  *(int8x8_t *)(*(void *)(v62 - 128) + v65) = veor_s8( veor_s8( veor_s8( *(int8x8_t *)(v53 + (v65 & 0xF) - 7),  *(int8x8_t *)(*(void *)(v62 - 120) + v65)),  veor_s8( *(int8x8_t *)((v65 & 0xF) + v54 - 4),  *(int8x8_t *)(v55 + (v65 & 0xF) - 7))),  vrev64_s8( vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8( v67,  (int8x16_t)xmmword_1012D0AE0),  (int8x8_t)0x7979797979797979LL)));
  return ((uint64_t (*)(__n128))(*(void *)(a52 + 8LL * ((1530 * (8 - v63 == -v60)) ^ a2)) - 4LL))((__n128)xmmword_1012D0AE0);
}

void sub_100166B20()
{
}

uint64_t sub_100166B2C( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v23
                                                      + 8LL
                                                      * (((((*(_DWORD *)(v24 - 132) == *(_DWORD *)(v24 - 136)) ^ (a2 + 72)) & 1)
                                                        * ((a2 + 565) ^ 0x108)) ^ a2))
                                          - 12LL))(a23);
}

uint64_t sub_100166B74(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v12 = (a5 - 1341585319);
  *(_BYTE *)(v11 + v12) = *(_BYTE *)(v7 + (v12 & 0xF)) ^ *(_BYTE *)(v5 + v12) ^ *(_BYTE *)(v9 + (v12 & 0xF)) ^ *(_BYTE *)(((a4 + 902415387) & 0xCA3639F7) + (unint64_t)(v12 & 0xF) + v8 - 500) ^ (121 * (v12 & 0xF));
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((983 * (a5 - 1 == v6)) ^ (a4 + 508))) - 8LL))();
}

uint64_t sub_100166BFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  uint64_t v51 = *(void *)(a1 + 24);
  *(int8x16_t *)(v50 - 112) = veorq_s8( *(int8x16_t *)(*(void *)(a1 + 16) - 0xAA58417147CEA7FLL),  (int8x16_t)xmmword_1012D0AF0);
  if (v49) {
    BOOL v52 = v51 == 0xCDF342D76DC35A7LL;
  }
  else {
    BOOL v52 = 1;
  }
  int v53 = !v52;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 + 8LL * (int)((1321 * v53) ^ a6)) - (((_DWORD)a6 - 28) ^ 0x47Fu) + 1436LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  ((_DWORD)a6 - 28) ^ 0x47Fu,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

uint64_t sub_100166C78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  int v50 = (4 * v48) ^ 0x7F8;
  BOOL v52 = ((BYTE4(a24) + ((v50 - 116) | 0x84) + 105) & 0xF) != 0 || HIDWORD(a24) == 2006439667;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 + 8LL * ((44 * v52) ^ v48)) - 8LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  (v50 + 908) | 0x184u,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

uint64_t sub_100166CD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, int a25, int a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57)
{
  return ((uint64_t (*)(void))(*(void *)(v57
                                        + 8LL
                                        * (a26 ^ (22
                                                * (((2 * (a25 - ((2 * a57) & 0x27F03100) - 1671413363)) & 0xEAF71DFE ^ 0x22F01100)
                                                 + ((a25 - ((2 * a57) & 0x27F03100) - 1671413363) ^ 0xE683967F)
                                                 + 1071544838 != 895092997))))
                            - 12LL))();
}

uint64_t sub_100166DA0(int a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((118
                                * (a1 + v2 + 176451840 + ((v1 - 1650) | 0x80) - 452 < (((v1 - 1623) | 0x284) ^ 0x3EC))) ^ v1)))();
}

uint64_t sub_100166E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * ((1008 * ((a7 & 0xFFFFFFF0) != ((a6 + 2107332153) & 0x8264AF7F ^ 0xF57B887E))) ^ a6))
                            - 8LL))();
}

uint64_t sub_100166E6C(int a1, uint64_t a2, int a3)
{
  uint64_t v10 = (a1 + v7 + v6);
  unint64_t v11 = v10 + v9 + 1;
  uint64_t v12 = (((a3 - 1658) | 0x2E0) - 981) & (a1 + v7);
  uint64_t v13 = v12 - v10;
  unint64_t v14 = v5 + v13;
  uint64_t v15 = ((a3 - 1658) ^ 0x295u) + v12 - 912;
  unint64_t v16 = v5 + v15;
  unint64_t v17 = v4 + v13;
  unint64_t v18 = v4 + v15;
  unint64_t v19 = v3 + v13;
  unint64_t v20 = v3 + v15;
  BOOL v22 = v16 > v9 && v14 < v11;
  if (v18 > v9 && v17 < v11) {
    BOOL v22 = 1;
  }
  int v25 = v20 > v9 && v19 < v11 || v22;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((244 * v25) ^ a3)) - 12LL))();
}

uint64_t sub_100166EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v7
                                                                       + 8LL
                                                                       * (int)(((((a6 + 1750977517) & 0x97A232BD) + 1340)
                                                                              * (v6 > 0xF)) ^ a6))
                                                           - (((a6 - 718) | 0x308u) ^ 0x3C3LL)))( a1,  a2,  0LL);
}

uint64_t sub_100166F50( int a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  v71.val[1].i64[0] = ((_BYTE)a2 + 7) & 0xF;
  v71.val[1].i64[1] = ((_BYTE)a2 + 6) & 0xF;
  v71.val[2].i64[0] = ((_BYTE)a2 + 5) & 0xF;
  v71.val[2].i64[1] = ((_BYTE)a2 + 4) & 0xF;
  v71.val[3].i64[0] = ((_BYTE)a2 + 3) & 0xF;
  v71.val[3].i64[1] = ((_BYTE)a2 + 2) & 0xF;
  v72.val[0].i64[0] = ((_BYTE)a2 + 1) & 0xF;
  v72.val[0].i64[1] = a2 & 0xF;
  v72.val[1].i64[0] = ((_BYTE)a2 - 1) & 0xF;
  v72.val[1].i64[1] = (a2 + 14) & 0xF;
  unsigned int v64 = a1 + v62 + v61;
  v72.val[2].i64[0] = (a2 + 13) & 0xF;
  v72.val[2].i64[1] = ((_BYTE)a2 + 12) & 0xF;
  v72.val[3].i64[0] = ((_BYTE)a2 + 11) & 0xF;
  v72.val[3].i64[1] = ((_BYTE)a2 + 10) & 0xF;
  v65.i64[0] = 0x505050505050505LL;
  v65.i64[1] = 0x505050505050505LL;
  v66.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v66.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  v71.val[0].i64[0] = v64 & 0xF;
  v71.val[0].i64[1] = ((_BYTE)a2 + 8) & 0xF;
  v67.i64[0] = vqtbl4q_s8(v71, (int8x16_t)xmmword_1012D0AD0).u64[0];
  v67.i64[1] = vqtbl4q_s8(v72, (int8x16_t)xmmword_1012D0AD0).u64[0];
  int8x16_t v68 = vrev64q_s8( veorq_s8( veorq_s8(*(int8x16_t *)(v63 - 15 + v64), *(int8x16_t *)(v59 + v71.val[0].i64[0] - 15)),  veorq_s8(*(int8x16_t *)(v58 + v71.val[0].i64[0] - 15), *(int8x16_t *)(v57 + v71.val[0].i64[0] - 15))));
  int8x16_t v69 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v68, v68, 8uLL), v66), vmulq_s8(v67, v65)));
  *(int8x16_t *)(v63 - 15 + v64) = vextq_s8(v69, v69, 8uLL);
  return ((uint64_t (*)(void))(*(void *)(a57 + 8LL * ((1783 * ((v60 & 0xFFFFFFF0) == 16)) ^ a4))
                            - ((a4 - 843) | 0x148u)
                            + 452LL))();
}

void sub_1001670B8()
{
}

uint64_t sub_1001670C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,unsigned __int8 *a55,unsigned int a56,uint64_t a57)
{
  int v62 = (4 * v59) ^ 0x1B4;
  *(_DWORD *)(v61 - 120) = v62;
  int v63 = v59;
  uint64_t v64 = *(void *)(v60 + 8LL * (v59 - 145));
  uint64_t v65 = *(void *)(v60 + 8LL * (v63 ^ 0xCD)) - 8LL;
  uint64_t v66 = *(void *)(v60 + 8LL * (v63 ^ 0xD4)) - 8LL;
  int v67 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359ALL) ^ 0x49LL));
  int v68 = *(unsigned __int8 *)(v65 + (*v58 ^ (v62 - 51))) ^ 0x23;
  HIDWORD(v70) = v67 ^ 2;
  LODWORD(v70) = (v67 ^ 0x55555555) << 24;
  unsigned __int8 v69 = v70 >> 26;
  int v71 = ((*(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A5LL) ^ 0xD7LL)) ^ 0xB2) << 8) | (v68 << 24);
  uint64_t v72 = *(void *)(v60 + 8LL * (v63 ^ 0xF)) - 8LL;
  int v73 = *(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359BLL) ^ 0xB8LL));
  int v74 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359ELL) ^ 0x6BLL));
  HIDWORD(v70) = v74 ^ 2;
  LODWORD(v70) = (v74 ^ 0x55555555) << 24;
  LOBYTE(v67) = *(_BYTE *)(v64 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC3599LL) ^ 0x2ELL));
  int v75 = ((v70 >> 26) ^ 0x53) << 16;
  int v76 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A6LL) ^ 0x47LL));
  HIDWORD(v70) = v76 ^ 2;
  LODWORD(v70) = (v76 ^ 0x55555555) << 24;
  LODWORD(v66) = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A2LL) ^ 0xCBLL));
  int v78 = ((v69 ^ 0xFB) << 16) | ((v73 ^ 0x9B) << 24) | ((v67 ^ 0x77) << 8);
  HIDWORD(v70) = v66 ^ 2;
  LODWORD(v70) = (v66 ^ 0x55555555) << 24;
  LOBYTE(v66) = *(_BYTE *)(v72 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359CLL) ^ 0xB5LL));
  unsigned int v79 = ((*(_BYTE *)(v72 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A0LL) ^ 0xA9LL)) - 92) | ((*(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A1LL) ^ 0x30LL)) ^ 0x87) << 8)) & 0xFF00FFFF | (((v70 >> 26) ^ 0xBA) << 16) | ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A3LL) ^ 0x35LL)) ^ 0xEC) << 24);
  int v80 = v75 | ((*(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359DLL) ^ 0x77LL)) ^ 0x7D) << 8) | ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359FLL) ^ 0xBFLL)) ^ 0xF5) << 24);
  LOBYTE(v72) = *(_BYTE *)(v72 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC3598LL) ^ 0x36LL)) - 92;
  uint64_t v81 = *(void *)(v60 + 8LL * (v63 + 66)) - 4LL;
  uint64_t v82 = v69 ^ 0x61u;
  uint64_t v83 = *(void *)(v60 + 8LL * (v63 ^ 0x3C)) - 8LL;
  LODWORD(v65) = *(_DWORD *)(v81 + 4LL * (v72 ^ 0xFDu)) ^ 0xBC62319C ^ *(_DWORD *)(v83 + 4 * v82);
  *(_DWORD *)(v61 - 152) = v63;
  uint64_t v84 = *(void *)(v60 + 8LL * (v63 - 106));
  int v85 = (v65 + 851036389 + (~(2 * v65) | 0x9A8C6E37)) ^ *(_DWORD *)(v84 + 4LL * (v73 ^ 0xEu));
  uint64_t v86 = *(void *)(v60 + 8LL * (v63 ^ 0xF5)) - 4LL;
  HIDWORD(v496) = v77;
  LODWORD(v496) = v78 & 0xFFFFFF00 | v72 ^ 0x2A;
  unsigned int v87 = v80 & 0xFFFFFF00 | (v66 - 92) ^ 0xA8;
  unsigned int v406 = *(_DWORD *)(v86 + 4LL * (v67 ^ 0x4Fu)) ^ v77 ^ (v85 - ((2 * v85) & 0xDBCAA252) - 303738583);
  int v88 = v406 ^ v79 ^ 0x4D;
  int v89 = v406 ^ v79;
  *(_DWORD *)(v61 - 200) = v406 ^ v79;
  *(_DWORD *)(v61 - 128) = v88 ^ v87;
  unsigned __int8 v392 = v406 ^ v79 ^ 0x4D;
  int v90 = v88 ^ v87 ^ (v496
  int v409 = BYTE1(v90);
  int v420 = BYTE2(v90);
  unsigned int v91 = *(_DWORD *)(v86 + 4LL * (BYTE1(v90) ^ 0xF1u)) ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v90) ^ 0x78u)) ^ 0xAF1725DB;
  int v424 = v90;
  unsigned int v92 = (v91 - ((2 * v91) & 0xFD208ADC) - 24099474) ^ *(_DWORD *)(v81 + 4LL * (v90 ^ 0x9Du));
  *(_DWORD *)(v61 - sub_10000AE14(v45 - 224) = (v90 ^ 0xF231261D) >> 24;
  int v93 = v406 ^ *(_DWORD *)(v84 + 4LL * (((v90 ^ 0xF231261D) >> 24) ^ 0x65)) ^ (v92 - ((2 * v92) & 0x657391C8) + 851036388);
  unint64_t v495 = __PAIR64__(v79, v87);
  int v94 = v93 ^ 0x74AC4282;
  *(_DWORD *)(v61 - 176) = v93;
  int v95 = v93 ^ 0x74AC4282 ^ (v87 - 2 * (v87 & 0x74AC42A2 ^ ((v66 - 92) ^ 0xA8) & 0x20) + 1957446274);
  unsigned int v96 = v95 ^ v90 ^ 0xF231261D;
  *(_DWORD *)(v61 - 184) = v95;
  int v440 = BYTE2(v96);
  int v436 = BYTE1(v96);
  unsigned int v97 = *(_DWORD *)(v83 + 4LL * (BYTE2(v96) ^ 0x2Eu)) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v96) ^ 0x9Bu)) ^ 0xAF1725DB;
  int v508 = v93 ^ 0x82 ^ (v87 - 2 * (v87 & 0xA2 ^ ((v66 - 92) ^ 0xA8) & 0x20) - 126) ^ v90 ^ 0x1D;
  unsigned int v98 = (v97 - ((2 * v97) & 0xFD208ADC) - 24099474) ^ *(_DWORD *)(v81 + 4LL * (v508 ^ 0xD2u));
  unsigned int v99 = v98 + 851036389 + (~(2 * v98) | 0x9A8C6E37);
  unsigned int v100 = v96 ^ 0xF713C5DC;
  *(_DWORD *)(v61 - sub_1000A7938(v33 - 232) = HIBYTE(v96);
  int v101 = v99 ^ *(_DWORD *)(v84 + 4LL * (HIBYTE(v96) ^ 0x69));
  int v102 = v101 ^ v88 ^ 0x2575236;
  *(_DWORD *)(v61 - 168) = v101 ^ v88;
  int v470 = v102 ^ v95;
  unsigned int v103 = ((v470 ^ 0x98D15FDC) - 2 * ((v470 ^ 0x98D15FDC) & 0x3B46497 ^ v470 & 2) - 2085329771) ^ v96 ^ 0xF713C5DC;
  unsigned int v104 = v103 ^ 0x9547167F;
  int v476 = ((v103 ^ 0x9547167F) >> 16);
  int v497 = ((unsigned __int16)(v103 ^ 0x167F) >> 8);
  unsigned int v105 = *(_DWORD *)(v83 + 4LL * (v476 ^ 0x89u)) ^ *(_DWORD *)(v86 + 4LL * (v497 ^ 0x3Au)) ^ 0xAF1725DB;
  int v481 = v103;
  unsigned int v106 = (v105 - ((2 * v105) & 0xFD208ADC) - 24099474) ^ *(_DWORD *)(v81 + 4LL * (v103 ^ 0xE4u));
  v104 >>= 24;
  *(_DWORD *)(v61 - 240) = v104;
  int v107 = (v106 - ((2 * v106) & 0x657391C8) + 851036388) ^ *(_DWORD *)(v84 + 4LL * (v104 ^ 0x1D));
  unsigned int v449 = v101 ^ v93;
  int v503 = (v107 - ((2 * v107) & 0x2DB661D6) - 1764019989) ^ v101 ^ v93;
  unsigned __int8 v513 = ((unsigned __int16)((v107 - ((2 * v107) & 0x61D6) + 12523) ^ v101 ^ v93) >> 8) ^ 0x30;
  unsigned int v506 = v503 ^ 0x96DB30EB ^ v101 ^ v88;
  unsigned int v108 = ((v506 ^ 0xFE25CD6D) - 2 * ((v506 ^ 0xFD839AAA) & 8 ^ (v506 ^ 0xFE25CD6D) & 0x3B4649D) - 2085329771) ^ v100;
  *(_DWORD *)(v61 - 248) = ((unsigned __int16)(((v506 ^ 0xCD6D)
                                                               - 2 * ((v506 ^ 0x9AAA) & 8 ^ (v506 ^ 0xCD6D) & 0x649D)
                                                               + 25749) ^ v100) >> 8);
  int v109 = *(_DWORD *)(v86
                   + 4LL
                   * (((unsigned __int16)(((v506 ^ 0xCD6D)
                                                          - 2 * ((v506 ^ 0x9AAA) & 8 ^ (v506 ^ 0xCD6D) & 0x649D)
                                                          + 25749) ^ v100) >> 8) ^ 0x6Fu));
  *(_DWORD *)(v61 - 256) = BYTE2(v108);
  unsigned int v110 = (v89 ^ 0xBAF72DE4) - ((2 * (v89 ^ 0xBAF72DE4)) & 0xE9588504);
  LODWORD(v72) = v109 ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v108) ^ 0xA8u)) ^ 0xAF1725DB;
  LODWORD(v72) = (v72 - ((2 * v72) & 0x657391C8) + 851036388) ^ *(_DWORD *)(v84 + 4LL * (HIBYTE(v108) ^ 0x85));
  int v499 = (((v506 ^ 0x6D) - 2 * ((v506 ^ 0xAA) & 8 ^ (v506 ^ 0x6D) & 0x9D) - 107) ^ v100);
  LODWORD(v72) = (v72 - ((2 * v72) & 0xFD208ADC) - 24099474) ^ *(_DWORD *)(v81 + 4LL * (v499 ^ 0x25u));
  int v111 = (v72 - ((2 * v72) & 0x7140FF3E) - 1197441121) ^ v102;
  unsigned int v491 = v506 ^ 0xFD839AAA ^ v470;
  *(_DWORD *)(v61 - 132) = v491 ^ v111;
  int v112 = v111;
  *(_DWORD *)(v61 - 192) = v111;
  unsigned int v113 = v491 ^ v111 ^ 0xC4098B88;
  LOBYTE(v111) = v108 ^ v113;
  unsigned int v114 = v113;
  __int16 v377 = v113;
  unsigned int v115 = v108 ^ v113 ^ 0xB62FF9FD;
  unsigned int v418 = HIBYTE(v115);
  int v400 = BYTE2(v115);
  int v116 = *(_DWORD *)(v84 + 4LL * (HIBYTE(v115) ^ 0x1D)) ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v115) ^ 0x89u)) ^ 0x704BBC16;
  int v404 = BYTE1(v115);
  LODWORD(v65) = (v116 - ((2 * v116) & 0xDBCAA252) - 303738583) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v115) ^ 0x3Au));
  int v487 = v111;
  uint64_t v117 = v81;
  LODWORD(v66) = *(_DWORD *)(v81 + 4LL * (v111 ^ 0x66u));
  LODWORD(v72) = v503 ^ 0x96DB30EB ^ v72;
  *(_DWORD *)(v61 - 208) = v72;
  LODWORD(v66) = v72 ^ v66 ^ (v65 - ((2 * v65) & 0xFD208ADC) - 24099474);
  unsigned __int8 v414 = BYTE2(v112) ^ 0x16;
  LODWORD(v72) = v66 ^ v112 ^ 0x7C166C11;
  int v118 = v66;
  *(_DWORD *)(v61 - 160) = v66;
  int v119 = v72;
  unsigned int v514 = (v108 ^ v72) >> 24;
  int v479 = (v108 ^ v72);
  LODWORD(v66) = *(_DWORD *)(v81 + 4LL * (v479 ^ 0x31u)) ^ *(_DWORD *)(v84 + 4LL * (v514 ^ 0x9B));
  unsigned int v457 = ((v108 ^ v72) >> 8) ^ 0x86839A;
  int v460 = ((unsigned __int16)(v108 ^ v72) >> 8) ^ 0x9A;
  int v120 = ((v66 ^ 0xCC298D8A) - 2 * ((v66 ^ 0xCC298D8A) & 0x6DE55139 ^ v66 & 0x10) - 303738583) ^ *(_DWORD *)(v86 + 4LL * (((unsigned __int16)(v108 ^ v72) >> 8) ^ 0xA0u));
  int v121 = v108 ^ v72 ^ 0xB82AE127;
  int v462 = ((v108 ^ v72) >> 16);
  unsigned int v122 = (v120 - ((2 * v120) & 0x85E4E9E4) + 1123185906) ^ *(_DWORD *)(v83 + 4LL * (v462 ^ 0xAu));
  LODWORD(v65) = (v122 - ((2 * v122) & 0x972C8A06) + 1268139267) ^ v118;
  *(_DWORD *)(v61 - 136) = v65;
  int v123 = v65 ^ 0xB615DFA9;
  int v428 = v65 ^ 0xB615DFA9 ^ v72;
  __int16 v395 = v65 ^ 0xDFA9;
  unsigned int v467 = v72 ^ v114;
  LODWORD(v65) = v72 ^ v114 ^ 0x630E4ACF;
  *(_DWORD *)(v61 - 140) = v65;
  unsigned int v415 = ((v428 ^ 0x5A137D54) - ((2 * (v428 ^ 0x5A137D54)) & 0xACCFFED6) + 1449656171) ^ v65;
  unsigned int v124 = ((v415 ^ 0xC0889743) - 2 * ((v415 ^ 0x47174F43) & 2 ^ (v415 ^ 0xC0889743) & 0x3EA97B8F) + 1051294605) ^ v121;
  unsigned int v125 = v124 ^ 0x479AB031;
  int v501 = ((unsigned __int16)(v124 ^ 0xB031) >> 8);
  int v485 = (((v415 ^ 0x43) - 2 * ((v415 ^ 0x43) & 2 ^ (v415 ^ 0x43) & 0x8F) - 115) ^ v121);
  int v126 = *(_DWORD *)(v86 + 4LL * (v501 ^ 0x3Au)) ^ *(_DWORD *)(v81 + 4LL * (v485 ^ 0xAAu)) ^ 0x13751447;
  unsigned int v127 = (v126 - ((2 * v126) & 0x85E4E9E4) + 1123185906) ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v125) ^ 0x89u));
  LODWORD(v81) = (v127 - ((2 * v127) & 0x657391C8) + 851036388) ^ *(_DWORD *)(v84 + 4LL * (HIBYTE(v125) ^ 0x1D));
  unsigned int v128 = ((v81 ^ v119 ^ 0xA6C48CD5) - 2 * ((v81 ^ v119 ^ 0xA6C48CD5) & 0x3EA97B8F ^ (v81 ^ v119) & 2) + 1051294605) ^ v121;
  unsigned int v129 = HIBYTE(v128);
  int v130 = BYTE1(v128);
  unsigned int v131 = v110 + 1957446274;
  int v132 = *(_DWORD *)(v86 + 4LL * (BYTE1(v128) ^ 0x6Fu)) ^ *(_DWORD *)(v84 + 4LL * (HIBYTE(v128) ^ 5));
  int v465 = v128;
  unsigned int v133 = ((v132 ^ 0xDF5C99CD) - 2 * ((v132 ^ 0xDF5C99CD) & 0x7E90457E ^ v132 & 0x10) - 24099474) ^ *(_DWORD *)(v117 + 4LL * (v128 ^ 0x25u));
  unsigned int v134 = v133 - ((2 * v133) & 0x85E4E9E4);
  int v135 = v123 ^ v81;
  int v136 = BYTE2(v128);
  unsigned int v137 = v123 ^ v81 ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v128) ^ 0xA8u)) ^ (v134 + 1123185906);
  unsigned int v138 = v415 ^ 0x47174F43 ^ v137 ^ v128;
  LODWORD(v65) = v415 ^ 0x47174F43 ^ v137;
  *(_DWORD *)(v61 - 216) = v65;
  int v489 = BYTE1(v138);
  LODWORD(v86) = *(_DWORD *)(v86 + 4LL * (BYTE1(v138) ^ 0x44u));
  unsigned int v389 = HIBYTE(v138);
  LODWORD(v84) = *(_DWORD *)(v84 + 4LL * (HIBYTE(v138) ^ 0x47));
  int v139 = v94 ^ v131;
  int v383 = v415 ^ 0x43 ^ v137 ^ v128;
  int v140 = ((v84 ^ v86 ^ 0xDF5C99CD) - 2 * ((v84 ^ v86 ^ 0xDF5C99CD) & 0x7E90457E ^ (v84 ^ v86) & 0x10) - 24099474) ^ *(_DWORD *)(v117 + 4LL * (v383 ^ 0xD5u));
  int v373 = BYTE2(v138);
  unsigned int v141 = (v140 - ((2 * v140) & 0x85E4E9E4) + 1123185906) ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v138) ^ 0xCBu));
  HIDWORD(v494) = v137 ^ 0xF48B2BE4 ^ (v141 - ((2 * v141) & 0xE8F80C9A) + 1954285133);
  int v375 = v137 ^ v81 ^ v72;
  LODWORD(v494) = v375 ^ 0x9C9FB24A ^ (HIDWORD(v494) - ((2 * HIDWORD(v494)) & 0x707AFABC) - 1203929762);
  HIDWORD(v493) = v65 ^ 0x4018996 ^ v494;
  LODWORD(v493) = (HIDWORD(v493) - ((2 * HIDWORD(v493)) & 0xF931A3C4) - 57093662) ^ v138;
  LODWORD(v83) = *(_DWORD *)(v61 - 152);
  uint64_t v142 = (uint64_t)*(&off_101826020 + (int)(v83 ^ 0x1E));
  unsigned int v143 = (((v135 ^ 0x1B9155BDu) >> 16)
        - 1702444604
        + ((2 * ((v135 ^ 0x1B9155BDu) >> 16) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (((v135 ^ 0x1B9155BDu) >> 16) ^ 0x2Du));
  int v144 = ((v136 ^ 0x89) - 1702444605 - ((2 * (v136 ^ 0x89) + 160207960) & 0x980872E)) ^ *(_DWORD *)(v142
                                                                                                  + 4LL * (v136 ^ 0xA4u));
  uint64_t v145 = (uint64_t)*(&off_101826020 + (int)v83 + 15);
  LODWORD(v66) = (v143 - ((2 * v143) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v135) ^ 0x47u));
  unsigned int v370 = v415 ^ 0x47174F43 ^ v81 ^ v72;
  v146 = (char *)*(&off_101826020 + (int)v83 - 35) - 12;
  v147 = (char *)*(&off_101826020 + (int)v83 - 15) - 8;
  int v148 = *(_DWORD *)&v147[4 * (v415 ^ 0x43 ^ (v81 ^ v72) ^ 0x53)];
  unsigned int v149 = (v144 - ((2 * v144) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * (v129 ^ 0xCC)];
  unsigned int v150 = *(_DWORD *)(v142 + 4LL * (BYTE2(v370) ^ 0xAAu)) ^ *(_DWORD *)&v146[4 * (HIBYTE(v370) ^ 0x3E)] ^ ((BYTE2(v370) ^ 0x87) - 1702444604 + ((2 * (BYTE2(v370) ^ 0x87) + 88) & 0x32E ^ 0xF67F7BFF)) ^ (181304767 * v148 - ((362609534 * v148 - 1984923634) & 0x9CB13CBC) - 1825514907);
  LODWORD(v83) = *(_DWORD *)&v147[4 * ((v81 ^ v72) ^ 0x74)];
  LODWORD(v83) = ((~(362609534 * v83 + 162560014) | 0xDB5F0339) + 181304767 * v83 + 1462286955) ^ *(_DWORD *)(v145 + 4LL * (((unsigned __int16)(v81 ^ v72) >> 8) ^ 0x5Au));
  int v484 = v83 - ((2 * v83) & 0x9CB13CBC);
  unsigned int v474 = ((v81 ^ v72) >> 24) ^ 0xB2;
  int v442 = ((v81 ^ v72) >> 16);
  unsigned int v472 = (v442 ^ 0x4C) - 1702444604 + ((2 * (v442 ^ 0x4C) + 88) & 0x32E ^ 0xF67F7BFF);
  unsigned int v455 = v149 - ((2 * v149) & 0x24A0FCC6);
  unsigned int v452 = v150 - ((2 * v150) & 0x24A0FCC6);
  HIDWORD(v498) = (v66 - ((2 * v66) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * ((v135 ^ 0x1B9155BDu) >> 24)] ^ (181304767 * *(_DWORD *)&v147[4 * (v135 ^ 0x7D)] - 992461817);
  unsigned int v151 = *(_DWORD *)(v142 + 4LL * (((v139 ^ 0xE9B45E6C) >> 16) ^ 0xF5u)) ^ ((((v139 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                           - 1702444604
                                                                                           + ((2
  unsigned int v152 = *(_DWORD *)(v61 - 184) ^ 0x31676F78;
  LODWORD(v65) = *(_DWORD *)(v142 + 4LL * (BYTE2(v152) ^ 0x7Bu)) ^ ((BYTE2(v152) ^ 0x56)
                                                                  - 1702444604
                                                                  + ((2 * (BYTE2(v152) ^ 0x56) + 88) & 0x32E ^ 0xF67F7BFF));
  int v153 = (v65 - ((2 * v65) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * HIBYTE(v152)];
  LODWORD(v65) = *(_DWORD *)(v142 + 4LL * (v440 ^ 0x34u)) ^ ((v440 ^ 0x19)
                                                           - 1702444604
                                                           + ((2 * (v440 ^ 0x19) + 88) & 0x32E ^ 0xF67F7BFF));
  int v154 = (v65 - 1840218525 + (~(2 * v65) | 0xDB5F0339) + 1) ^ *(_DWORD *)(v145 + 4LL * (v436 ^ 5u));
  int v437 = v153 - ((2 * v153) & 0x24A0FCC6);
  int v441 = v154 - ((2 * v154) & 0x9CB13CBC);
  int v155 = *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 176) ^ 0xDF)];
  unsigned int v156 = *(_DWORD *)(v61 - 176) ^ 0x5A18571F;
  unsigned int v157 = *(_DWORD *)&v146[4 * HIBYTE(v156)] ^ ((BYTE2(v156) ^ 0xC1)
                                             - 1702444604
                                             + ((2 * (BYTE2(v156) ^ 0xC1) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v156) ^ 0xECu)) ^ (181304767 * v155 - ((362609534 * v155 - 1984923634) & 0x9CB13CBC) - 1825514907);
  unsigned int v434 = v157 - ((2 * v157) & 0x24A0FCC6);
  unsigned int v158 = *(_DWORD *)&v146[4 * ((v139 ^ 0xE9B45E6C) >> 24)] ^ (v151 - ((2 * v151) & 0x9CB13CBC) - 833053090);
  unsigned int v431 = v158 - ((2 * v158) & 0x24A0FCC6);
  __int16 v387 = v428 ^ 0x8EA4;
  LODWORD(v83) = v428 ^ 0x35C48CD5;
  int v159 = v415 ^ 0x25889743;
  unsigned int v429 = HIBYTE(v415) ^ 0x52;
  int v160 = *(_DWORD *)(v142 + 4LL * (BYTE2(v125) ^ 0xDEu)) ^ ((BYTE2(v125) ^ 0xF3)
                                                          - 1702444605
                                                          - ((2 * (BYTE2(v125) ^ 0xF3) + 160207960) & 0x980872E));
  int v161 = *(_DWORD *)(v142 + 4LL * (BYTE2(v83) ^ 0xFEu)) ^ ((BYTE2(v83) ^ 0xD3)
                                                         - 1702444605
                                                         - ((2 * (BYTE2(v83) ^ 0xD3) + 160207960) & 0x980872E));
  LODWORD(v72) = *(_DWORD *)&v147[4 * (v415 ^ 0x86)];
  unsigned int v162 = (v160 - ((2 * v160) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * (HIBYTE(v125) ^ 0x36)];
  LODWORD(v65) = BYTE2(*(_DWORD *)(v61 - 136));
  LODWORD(v117) = *(_DWORD *)(v142 + 4LL * (v65 ^ 0x39)) ^ ((v65 ^ 0x14)
                                                                        - 1702444605
                                                                        - ((2 * (v65 ^ 0x14) + 160207960) & 0x980872E));
  LODWORD(v117) = (v117 - ((2 * v117) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (HIBYTE(v395) ^ 0x8Bu));
  unsigned int v416 = v162 - ((2 * v162) & 0x24A0FCC6);
  int v422 = v117 - ((2 * v117) & 0x9CB13CBC);
  int v163 = *(_DWORD *)(v145 + 4LL * (BYTE1(v159) ^ 0x20u)) ^ ((BYTE2(v159) ^ 0xD7)
                                                          - 1702444604
                                                          + ((2 * (BYTE2(v159) ^ 0xD7) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v159) ^ 0xFAu)) ^ (181304767 * v72 - ((362609534 * v72 + 162560014) & 0x24A0FCC6) + 1462286954);
  LODWORD(v83) = (v161 - ((2 * v161) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * BYTE3(v83)] ^ (181304767 * *(_DWORD *)&v147[4 * (v387 ^ 0x99)] - 992461817);
  unsigned int v368 = v395 ^ 0xA3;
  int v396 = v83 - ((2 * v83) & 0x24A0FCC6);
  int v399 = v163 - ((2 * v163) & 0x9CB13CBC);
  int v164 = *(_DWORD *)(v61 - 128);
  unsigned int v379 = BYTE1(v164) ^ 0xF5;
  unsigned int v380 = v406 ^ 0x2BEAE26B;
  LODWORD(v83) = *(_DWORD *)(v142 + 4LL * (((v406 ^ 0x2BEAE26B) >> 16) ^ 0xECu)) ^ ((((v406 ^ 0x2BEAE26B) >> 16) ^ 0xC1) - 1702444605 - ((2 * (((v406 ^ 0x2BEAE26B) >> 16) ^ 0xC1) + 160207960) & 0x980872E)) ^ (181304767 * *(_DWORD *)&v147[4 * (v406 ^ 0x1E)] - 992461817);
  LODWORD(v83) = (v83 - ((2 * v83) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v406) ^ 8u));
  int v165 = *(_DWORD *)(v142 + 4LL * (v420 ^ 0xE6u)) ^ ((v420 ^ 0xCB)
                                                   - 1702444605
                                                   - ((2 * (v420 ^ 0xCB) + 160207960) & 0x980872E));
  LODWORD(v66) = *(_DWORD *)&v147[4 * (v392 ^ 0x55)];
  int v421 = v83 - ((2 * v83) & 0x9CB13CBC);
  int v166 = *(_DWORD *)(v145 + 4LL * (v409 ^ 0x9Bu));
  int v371 = BYTE2(v164);
  unsigned int v410 = (BYTE2(v164) ^ 0xA7) - 1702444604 + ((2 * (BYTE2(v164) ^ 0xA7) + 88) & 0x32E ^ 0xF67F7BFF);
  int v167 = (v165 - ((2 * v165) & 0x24A0FCC6) - 1840218525) ^ v166 ^ (181304767 * *(_DWORD *)&v147[4 * (v424 ^ 0xEE)]
                                                                 - 992461817);
  unsigned int v168 = *(_DWORD *)(v61 - 200);
  int v407 = v167 - 833053090 + (~(2 * v167) | 0x634EC343);
  int v169 = (181304767 * v66 - ((362609534 * v66 - 1984923634) & 0x9CB13CBC) - 1825514907) ^ ((BYTE2(v168) ^ 0xBA)
                                                                                         - 1702444605
                                                                                         - ((2 * (BYTE2(v168) ^ 0xBA)
                                                                                           + 160207960) & 0x980872E)) ^ *(_DWORD *)&v146[4 * (HIBYTE(v168) ^ 0x2F)] ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v168) ^ 0x97u));
  int v393 = v169 - ((2 * v169) & 0x24A0FCC6);
  int v170 = BYTE2(*(_DWORD *)(v61 - 132));
  unsigned int v171 = *(_DWORD *)(v142 + 4LL * (v170 ^ 0xD1u)) ^ ((v170 ^ 0xFC)
                                                   - 1702444604
                                                   + ((2 * (v170 ^ 0xFC) + 88) & 0x32E ^ 0xF67F7BFF));
  unsigned int v172 = *(_DWORD *)(v61 - 208);
  LODWORD(v83) = *(_DWORD *)(v142 + 4LL * (BYTE2(v172) ^ 0x56u)) ^ ((BYTE2(v172) ^ 0x7B)
                                                                  - 1702444605
                                                                  - ((2 * (BYTE2(v172) ^ 0x7B) + 160207960) & 0x980872E));
  int v173 = *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 192) ^ 0xFB)];
  int v174 = (v171 - ((2 * v171) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (HIBYTE(v377) ^ 0xB9u)) ^ (181304767 * *(_DWORD *)&v147[4 * (v377 ^ 0x8E)] - 992461817);
  LODWORD(v72) = (181304767 * v173 - ((362609534 * v173 + 162560014) & 0x24A0FCC6) + 1462286954) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 192)) ^ 0xEFu));
  HIDWORD(v376) = v174 - ((2 * v174) & 0x9CB13CBC);
  LODWORD(v369) = v72 - ((2 * v72) & 0x9CB13CBC);
  int v175 = (v83 - ((2 * v83) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * (HIBYTE(v172) ^ 0xD9)] ^ (181304767 * *(_DWORD *)&v147[4 * (v172 ^ 0x79)] - 992461817);
  LODWORD(v66) = *(_DWORD *)(v142 + 4LL * (v400 ^ 0x86u)) ^ ((v400 ^ 0xAB)
                                                           - 1702444605
                                                           - ((2 * (v400 ^ 0xAB) + 160207960) & 0x980872E));
  LODWORD(v66) = (v66 - ((2 * v66) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * v418];
  int v401 = v175 - ((2 * v175) & 0x24A0FCC6);
  int v411 = v414;
  int v425 = (v411 ^ 0x65) - 1702444605 - ((2 * (v411 ^ 0x65) + 160207960) & 0x980872E);
  unsigned int v176 = *(_DWORD *)(v142 + 4LL * (v373 ^ 0x8Bu)) ^ ((v373 ^ 0xA6)
                                                   - 1702444604
                                                   + ((2 * (v373 ^ 0xA6) + 88) & 0x32E ^ 0xF67F7BFF));
  int v177 = *(_DWORD *)(v61 - 216);
  unsigned int v178 = *(_DWORD *)(v142 + 4LL * (BYTE2(v137) ^ 0xE8u)) ^ ((BYTE2(v137) ^ 0xC5)
                                                          - 1702444604
                                                          + ((2 * (BYTE2(v137) ^ 0xC5) + 88) & 0x32E ^ 0xF67F7BFF));
  unsigned int v365 = BYTE1(v370) ^ 0x8E;
  LODWORD(v83) = (181304767 * *(_DWORD *)&v147[4 * (v137 ^ 0xCA)] - 992461817) ^ *(_DWORD *)&v146[4 * (HIBYTE(v137) ^ 0x8E)] ^ (v178 - ((2 * v178) & 0x9CB13CBC) - 833053090);
  unsigned int v374 = v375 ^ 0x44039AAA;
  unsigned int v179 = (181304767 * *(_DWORD *)&v147[4 * (v375 ^ 0xDB)] - 992461817) ^ (((v375 ^ 0x44039AAAu) >> 16)
                                                                                         - 1702444604
                                                                                         + ((2
  unsigned int v364 = BYTE1(v137) ^ 0x16;
  HIDWORD(v369) = v83 - ((2 * v83) & 0x24A0FCC6);
  LODWORD(v83) = (v179 - ((2 * v179) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v375) ^ 0xC0u));
  unsigned int v180 = *(_DWORD *)&v146[4 * (v389 ^ 0x22)] ^ (181304767 * *(_DWORD *)&v147[4 * (v383 ^ 0xFE)] - 992461817) ^ (v176 - ((2 * v176) & 0x9CB13CBC) - 833053090);
  int v390 = v83 - ((2 * v83) & 0x9CB13CBC);
  unsigned int v384 = v180 - ((2 * v180) & 0x24A0FCC6);
  int v181 = *(_DWORD *)&v147[4 * (v449 ^ 0xEC)];
  LODWORD(v83) = *(_DWORD *)(v142 + 4LL * (v476 ^ 0x32u)) ^ ((v476 ^ 0x1F)
                                                           - 1702444604
                                                           + ((2 * (v476 ^ 0x1F) + 88) & 0x32E ^ 0xF67F7BFF));
  int v182 = *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 168) ^ 0xE6)];
  unsigned int v183 = *(_DWORD *)&v146[4 * (HIBYTE(v449) ^ 0xCA)] ^ ((BYTE2(v449) ^ 0x2F)
                                                      - 1702444604
                                                      + ((2 * (BYTE2(v449) ^ 0x2F) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v449) ^ 2u)) ^ (181304767 * v181 - ((362609534 * v181 - 1984923634) & 0x9CB13CBC) - 1825514907);
  LODWORD(v83) = (v83 - ((2 * v83) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (v497 ^ 0x8Cu)) ^ (181304767 * *(_DWORD *)&v147[4 * (v481 ^ 0xD9)] - 992461817);
  LODWORD(v65) = *(_DWORD *)(v61 - 168) ^ 0x49A657C7;
  unsigned int v184 = *(_DWORD *)&v146[4 * BYTE3(v65)] ^ ((BYTE2(v65) ^ 0x35)
                                           - 1702444604
                                           + ((2 * (BYTE2(v65) ^ 0x35) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v65) ^ 0x18u)) ^ (181304767 * v182 - ((362609534 * v182 - 1984923634) & 0x9CB13CBC) - 1825514907);
  int v185 = *(_DWORD *)(v142 + 4LL * (((v470 ^ 0xA62C49A3) >> 16) ^ 0x2Du)) ^ (((v470 ^ 0xA62C49A3) >> 16)
                                                                                           - 1702444605
                                                                                           - ((2
  LODWORD(v498) = (v183 - ((2 * v183) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v449) ^ 0x2Eu));
  int v482 = v83 - ((2 * v83) & 0x9CB13CBC);
  unsigned int v186 = (v185 - ((2 * v185) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * ((v470 ^ 0xA62C49A3) >> 24)] ^ (181304767 * *(_DWORD *)&v147[4 * (v470 ^ 0x33)] - 992461817);
  unsigned int v450 = BYTE1(v470) ^ 0xC9;
  unsigned int v477 = v184 - ((2 * v184) & 0x24A0FCC6);
  unsigned int v471 = v186 - ((2 * v186) & 0x24A0FCC6);
  LODWORD(v83) = *(_DWORD *)(v142 + 4LL * (v462 ^ 0xC1u)) ^ ((v462 ^ 0xEC)
                                                           - 1702444605
                                                           - ((2 * (v462 ^ 0xEC) + 160207960) & 0x980872E));
  int v187 = (v83 - ((2 * v83) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145
                                                                   + 4LL * ((v460 - ((2 * v457) & 0x166) + 179) ^ 0x54)) ^ (181304767 * *(_DWORD *)&v147[4 * (v479 ^ 0xE2)] - 992461817);
  LODWORD(v83) = *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 140) ^ 0x7C)];
  LODWORD(v83) = (181304767 * v83 - ((362609534 * v83 - 1984923634) & 0x9CB13CBC) - 1825514907) ^ *(_DWORD *)&v146[4 * (HIBYTE(v467) ^ 0xE5)];
  int v480 = v187 - ((2 * v187) & 0x9CB13CBC);
  LODWORD(v376) = v83 - ((2 * v83) & 0x24A0FCC6);
  unsigned int v463 = v119 ^ 0xEEA2BFA8;
  int v188 = *(_DWORD *)(v142 + 4LL * (BYTE2(v463) ^ 0x86u)) ^ ((BYTE2(v463) ^ 0xAB)
                                                          - 1702444605
                                                          - ((2 * (BYTE2(v463) ^ 0xAB) + 160207960) & 0x980872E));
  int v189 = (181304767 * *(_DWORD *)&v147[4 * (v119 ^ 0x68)] - 992461817) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v119) ^ 0x55u)) ^ (v188 - ((2 * v188) & 0x24A0FCC6) - 1840218525);
  unsigned int v446 = *(_DWORD *)(v61 - 160) ^ 0x231B9DB5;
  int v461 = (BYTE2(v446) ^ 0xC1) - 1702444605 - ((2 * (BYTE2(v446) ^ 0xC1) + 160207960) & 0x980872E);
  LODWORD(v362) = v189 - ((2 * v189) & 0x9CB13CBC);
  LODWORD(v65) = BYTE2(v467);
  int v458 = (BYTE2(v467) ^ 0x6B) - 1702444605 - ((2 * (BYTE2(v467) ^ 0x6B) + 160207960) & 0x980872E);
  int v190 = *(_DWORD *)(v61 - 184);
  unsigned int v191 = v503 ^ 0x779FFFF;
  LODWORD(v81) = *(_DWORD *)&v147[4 * (v499 ^ 0x74)];
  LODWORD(v117) = *(_DWORD *)&v147[4 * (~(_BYTE)v503 ^ 0x39)];
  int v192 = 181304767 * *(_DWORD *)&v147[4 * (v465 ^ 0x60)] - 992461817;
  int v504 = 181304767 * *(_DWORD *)&v147[4 * (v508 ^ 0xFB)] - 992461817;
  LODWORD(v378) = 181304767 * *(_DWORD *)&v147[4 * (v190 ^ 0xB8)] - 992461817;
  int v500 = 181304767 * *(_DWORD *)&v147[4 * (v139 ^ 0xAC)] - 992461817;
  int v466 = 181304767 * *(_DWORD *)&v147[4 * v368] - 992461817;
  int v468 = 181304767 * *(_DWORD *)&v147[4 * (v485 ^ 0xF0)] - 992461817;
  int v509 = 181304767 * *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 128) ^ 0x57)] - 992461817;
  HIDWORD(v367) = 181304767 * *(_DWORD *)&v147[4 * (v487 ^ 0xC0)] - 992461817;
  LODWORD(v361) = 181304767 * *(_DWORD *)&v147[4 * (v177 ^ 0x78)] - 992461817;
  HIDWORD(v361) = v192;
  HIDWORD(v362) = 181304767 * *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 160) ^ 0x75)] - 992461817;
  LODWORD(v363) = 181304767 * v117 - 992461817;
  int v193 = (181304767 * v81 - ((362609534 * v81 - 1984923634) & 0x9CB13CBC) - 1825514907) ^ *(_DWORD *)&v146[4 * (HIBYTE(v108) ^ 0x7B)];
  LODWORD(v83) = *(_DWORD *)(v142 + 4LL * (BYTE2(v491) ^ 0x8Fu)) ^ ((BYTE2(v491) ^ 0xA2)
                                                                  - 1702444604
                                                                  + ((2 * (BYTE2(v491) ^ 0xA2) + 88) & 0x32E ^ 0xF67F7BFF)) ^ (181304767 * *(_DWORD *)&v147[4 * (v491 ^ 0x34)] - 992461817);
  LODWORD(v83) = (v83 - ((2 * v83) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v491) ^ 0x61u));
  unsigned int v194 = *(_DWORD *)(v142 + 4LL * (BYTE2(v191) ^ 0x3Cu)) ^ ((BYTE2(v191) ^ 0x11)
                                                          - 1702444604
                                                          + ((2 * (BYTE2(v191) ^ 0x11) + 88) & 0x32E ^ 0xF67F7BFF));
  LODWORD(v84) = (181304767 * *(_DWORD *)&v147[4 * (v506 ^ 0x2A)] - 992461817) ^ ((BYTE2(v506) ^ 0x37)
                                                                                                 - 1702444604
                                                                                                 + ((2 * (BYTE2(v506) ^ 0x37) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v506) ^ 0x1Au));
  int v195 = v193 - ((2 * v193) & 0x24A0FCC6);
  int v196 = (v84 - ((2 * v84) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * (HIBYTE(v506) ^ 0xF9)];
  HIDWORD(v360) = *(_DWORD *)(v142 + 4LL * (v442 ^ 0x61u));
  int v511 = *(_DWORD *)(v142 + 4LL * (v371 ^ 0x8Au));
  int v443 = *(_DWORD *)(v142 + 4LL * (v411 ^ 0x48u));
  LODWORD(v84) = v501 ^ 0x1A;
  LODWORD(v360) = *(_DWORD *)(v142 + 4LL * (BYTE2(v177) ^ 0xA2u));
  int v412 = *(_DWORD *)(v142 + 4LL * (BYTE2(v446) ^ 0xECu));
  LODWORD(v372) = *(_DWORD *)(v142 + 4LL * (v65 ^ 0x46));
  LODWORD(v72) = *(_DWORD *)(v61 - 256);
  *(_DWORD *)(v61 - 256) = *(_DWORD *)(v142 + 4LL * (v72 ^ 0x1A));
  LODWORD(v65) = ((v108 >> 15) & 0x58 ^ 0x48) + (v72 ^ 0x4C64A1B);
  HIDWORD(v359) = *(_DWORD *)(v145 + 4LL * (v130 ^ 0xB0u));
  int v445 = *(_DWORD *)(v145 + 4LL * v365);
  *(_DWORD *)(v61 - 184) = *(_DWORD *)(v145 + 4LL * (BYTE1(v190) ^ 0x85u));
  HIDWORD(v366) = v65 - ((2 * v65) & 0x980872E) - 1782548585;
  int v502 = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 176)) ^ 0xBDu));
  *(_DWORD *)(v61 - 176) = *(_DWORD *)(v145 + 4LL * (BYTE1(v139) ^ 0xB4u));
  LODWORD(v366) = *(_DWORD *)(v145 + 4LL * v84);
  LODWORD(v359) = *(_DWORD *)(v145 + 4LL * (HIBYTE(v387) ^ 0x14u));
  int v510 = *(_DWORD *)(v145 + 4LL * v379);
  *(_DWORD *)(v61 - 200) = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 200)) ^ 0xD6u));
  int v426 = *(_DWORD *)(v145 + 4LL * (v404 ^ 0xEEu));
  int v388 = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 208)) ^ 0xD7u));
  unsigned int v197 = *(_DWORD *)(v61 - 216);
  LODWORD(v367) = *(_DWORD *)(v145 + 4LL * (BYTE1(v197) ^ 0x76u));
  int v198 = *(_DWORD *)(v145 + 4LL * v364);
  HIDWORD(v358) = *(_DWORD *)(v145 + 4LL * (v489 ^ 0xBEu));
  *(_DWORD *)(v61 - 168) = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 168)) ^ 0xB9u));
  *(_DWORD *)(v61 - 208) = *(_DWORD *)(v145 + 4LL * v450);
  int v199 = v83 - ((2 * v83) & 0x9CB13CBC);
  int v451 = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 160)) ^ 0x77u));
  HIDWORD(v363) = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 140)) ^ 0x64u));
  *(_DWORD *)(v61 - 160) = *(_DWORD *)(v145 + 4LL * (*(_DWORD *)(v61 - 248) ^ 0x84u));
  *(_DWORD *)(v61 - 248) = *(_DWORD *)(v145 + 4LL * (BYTE1(v506) ^ 0x2Eu));
  LODWORD(v83) = *(_DWORD *)(v145 + 4LL * (v513 ^ 0xC8u));
  LODWORD(v358) = *(_DWORD *)&v146[4 * v474];
  unsigned int v475 = v455 - 1840218525;
  unsigned int v456 = v452 - 1840218525;
  *(_DWORD *)(v61 - 216) = *(_DWORD *)&v146[4 * (*(_DWORD *)(v61 - 232) ^ 7)];
  int v512 = v437 - 1840218525;
  HIDWORD(v378) = v434 - 1840218525;
  unsigned int v507 = v431 - 1840218525;
  int v453 = *(_DWORD *)&v146[4 * (HIBYTE(*(_DWORD *)(v61 - 136)) ^ 0x5A)];
  LODWORD(v357) = v416 - 1840218525;
  HIDWORD(v356) = v396 - 1840218525;
  HIDWORD(v357) = *(_DWORD *)&v146[4 * v429];
  int v397 = *(_DWORD *)&v146[4 * (HIBYTE(*(_DWORD *)(v61 - 128)) ^ 0xB8)];
  *(_DWORD *)(v61 - sub_1000A7938(v33 - 232) = *(_DWORD *)&v146[4 * HIBYTE(v380)];
  int v394 = v393 - 1840218525;
  int v438 = v66 - ((2 * v66) & 0x24A0FCC6) - 1840218525;
  int v430 = v401 - 1840218525;
  int v200 = HIDWORD(v369) - 1840218525;
  LODWORD(v356) = v384 - 1840218525;
  unsigned int v417 = v477 - 1840218525;
  unsigned int v405 = v471 - 1840218525;
  int v385 = v376 - 1840218525;
  int v432 = v195 - 1840218525;
  int v435 = v196 - ((2 * v196) & 0x24A0FCC6) - 1840218525;
  *(_DWORD *)(v61 - sub_10000AE14(v45 - 224) = *(_DWORD *)&v146[4 * (*(_DWORD *)(v61 - 224) ^ 0x4B)];
  int v381 = *(_DWORD *)&v146[4 * (HIBYTE(*(_DWORD *)(v61 - 132)) ^ 0x3D)];
  LODWORD(v376) = *(_DWORD *)&v146[4 * (HIBYTE(*(_DWORD *)(v61 - 192)) ^ 0xE8)];
  int v201 = *(_DWORD *)&v146[4 * (HIBYTE(v197) ^ 0xA6)];
  int v202 = *(_DWORD *)&v146[4 * HIBYTE(v374)];
  int v402 = *(_DWORD *)&v146[4 * (*(_DWORD *)(v61 - 240) ^ 0xAA)];
  int v203 = *(_DWORD *)&v146[4 * HIBYTE(v446)];
  int v447 = *(_DWORD *)&v146[4 * (v514 ^ 0x38)];
  *(_DWORD *)(v61 - 192) = *(_DWORD *)&v146[4 * HIBYTE(v463)];
  HIDWORD(v372) = *(_DWORD *)&v146[4 * (HIBYTE(v491) ^ 0xCF)];
  HIDWORD(v369) = *(_DWORD *)&v146[4 * HIBYTE(v191)];
  int v204 = v484 - 833053090;
  int v515 = v441 - 833053090;
  *(_DWORD *)(v61 - 240) = v421 - 833053090;
  int v205 = v482 - 833053090;
  int v206 = v480 - 833053090;
  int v207 = v199 - 833053090;
  int v208 = (v83 ^ (v194 - ((2 * v194) & 0x24A0FCC6) - 1840218525))
       - ((2 * (v83 ^ (v194 - ((2 * v194) & 0x24A0FCC6) - 1840218525))) & 0x9CB13CBC)
       - 833053090;
  int v209 = HIDWORD(v498) ^ v498 ^ 0x6285F181;
  LODWORD(v86) = v200 ^ v198 ^ v209;
  LODWORD(v117) = *(_DWORD *)(v61 - 152);
  v210 = (char *)*(&off_101826020 + (int)v117 - 72) - 8;
  v211 = (char *)*(&off_101826020 + (int)(v117 ^ 0xF4)) - 8;
  uint64_t v212 = (uint64_t)*(&off_101826020 + (int)v117 - 119);
  uint64_t v213 = (uint64_t)*(&off_101826020 + (int)v117 - 89);
  unsigned int v214 = (*(unsigned __int8 *)(v213 + (*(unsigned __int8 *)(v61 - 109) ^ 0x41LL)) ^ 0x2B) & 0xFF00FFFF | (((v210[*(unsigned __int8 *)(v61 - 111) ^ 0x40LL] + 103) ^ 0x5A) << 16) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 110) ^ 0xBBLL)) ^ 0x43) << 8) | ((v211[*(unsigned __int8 *)(v61 - 112) ^ 0x1ELL] ^ (*(unsigned __int8 *)(v61 - 112) - ((2 * *(unsigned __int8 *)(v61 - 112)) & 0xC4) + 98) ^ 0x84) << 24);
  uint64_t v488 = v212;
  v490 = v211;
  uint64_t v486 = v213;
  unsigned int v215 = (*(unsigned __int8 *)(v213 + (*(unsigned __int8 *)(v61 - 105) ^ 0xE4LL)) ^ 0x1D) & 0xFF00FFFF | ((v211[*(unsigned __int8 *)(v61 - 108) ^ 0x3ELL] ^ (*(unsigned __int8 *)(v61 - 108) - ((2 * *(unsigned __int8 *)(v61 - 108)) & 0xC4) + 98) ^ 0xFFFFFFE1) << 24) | (((v210[*(unsigned __int8 *)(v61 - 107) ^ 0x27LL] + 103) ^ 0x96) << 16) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 106) ^ 9LL)) ^ 0x46) << 8);
  v492 = v210;
  unsigned int v216 = (*(unsigned __int8 *)(v213 + (*(unsigned __int8 *)(v61 - 101) ^ 0xF2LL)) ^ 0xA4) & 0xFF00FFFF | ((v211[*(unsigned __int8 *)(v61 - 104) ^ 0xD3LL] ^ (*(unsigned __int8 *)(v61 - 104) - ((2 * *(unsigned __int8 *)(v61 - 104)) & 0xC4) + 98) ^ 0xE0) << 24) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 102) ^ 0xBELL)) ^ 0xE1) << 8) & 0xFF00FFFF | (((v210[*(unsigned __int8 *)(v61 - 103) ^ 0xE9LL] + 103) ^ 0x8A) << 16);
  int v217 = v86 ^ 0x2497E332;
  if ((v86 & 0x80) != 0) {
    int v218 = -128;
  }
  else {
    int v218 = 128;
  }
  *(_DWORD *)(v61 - 128) = (*(unsigned __int8 *)(v213 + (*(unsigned __int8 *)(v61 - 97) ^ 0x74LL)) ^ 0x8C | (((v210[*(unsigned __int8 *)(v61 - 99) ^ 0xF3LL] + 103) ^ 2) << 16) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 98) ^ 0x20LL)) ^ 0xA9) << 8) | ((v211[*(unsigned __int8 *)(v61 - 100) ^ 0xF3LL] ^ (*(unsigned __int8 *)(v61 - 100) - ((2 * *(unsigned __int8 *)(v61 - 100)) & 0xC4) + 98) ^ 0x85) << 24)) ^ 0x2A25BCAA;
  *(_DWORD *)(v61 - 132) = v214 ^ 0xE8D83CFD;
  *(_DWORD *)(v61 - 140) = v215 ^ 0xCFFC024C;
  *(_DWORD *)(v61 - 136) = v216 ^ 0xC0073BBE;
  HIDWORD(v483) = v356 ^ HIDWORD(v358);
  LODWORD(v483) = v201 ^ ((BYTE2(v177) ^ 0x8F) - 1702444605 - ((2 * (BYTE2(v177) ^ 0x8F) + 160207960) & 0x980872E)) ^ v367 ^ v360 ^ v361;
  HIDWORD(v478) = (v390 - 833053090) ^ v202;
  LODWORD(v478) = HIDWORD(v361) ^ HIDWORD(v359) ^ v475;
  HIDWORD(v473) = v456 ^ v445;
  LODWORD(v473) = v358 ^ v472 ^ HIDWORD(v360) ^ v204;
  HIDWORD(v469) = HIDWORD(v356) ^ v359;
  LODWORD(v469) = v357 ^ v366 ^ v468;
  HIDWORD(v464) = (v422 - 833053090) ^ v453 ^ v466;
  LODWORD(v464) = (v399 - 833053090) ^ HIDWORD(v357);
  HIDWORD(v459) = v451 ^ v461 ^ v203 ^ v412 ^ HIDWORD(v362);
  LODWORD(v459) = HIDWORD(v363) ^ v458 ^ v372 ^ v385;
  HIDWORD(v454) = (v362 - 833053090) ^ *(_DWORD *)(v61 - 192);
  LODWORD(v454) = v206 ^ v447;
  HIDWORD(v448) = v430 ^ v388;
  LODWORD(v448) = v376 ^ v425 ^ v443 ^ (v369 - 833053090);
  HIDWORD(v444) = (HIDWORD(v376) - 833053090) ^ v381;
  LODWORD(v444) = HIDWORD(v367) ^ v426 ^ v438;
  HIDWORD(v439) = v363 ^ HIDWORD(v369) ^ v208;
  LODWORD(v439) = v435 ^ *(_DWORD *)(v61 - 248);
  HIDWORD(v433) = v207 ^ HIDWORD(v372);
  LODWORD(v433) = *(_DWORD *)(v61 - 160) ^ HIDWORD(v366) ^ *(_DWORD *)(v61 - 256) ^ v432;
  HIDWORD(v427) = v205 ^ v402;
  LODWORD(v427) = *(_DWORD *)(v61 - 168) ^ v417;
  HIDWORD(v423) = v405 ^ *(_DWORD *)(v61 - 208);
  LODWORD(v423) = HIDWORD(v378) ^ v502;
  HIDWORD(v419) = v512 ^ *(_DWORD *)(v61 - 184) ^ v378;
  LODWORD(v419) = v500 ^ *(_DWORD *)(v61 - 176) ^ v507;
  HIDWORD(v413) = v504 ^ *(_DWORD *)(v61 - 216) ^ v515;
  LODWORD(v413) = v394 ^ *(_DWORD *)(v61 - 200);
  HIDWORD(v408) = v510 ^ v410 ^ v397 ^ v511 ^ v509;
  LODWORD(v408) = (v407 + 1) ^ *(_DWORD *)(v61 - 224);
  HIDWORD(v403) = *(_DWORD *)(v61 - 240) ^ *(_DWORD *)(v61 - 232);
  LODWORD(v403) = (v218 + v217) ^ v209;
  int v219 = *(_DWORD *)(v61 - 120);
  uint64_t v382 = 76 * (v219 ^ 0x3F7u);
  HIDWORD(v398) = v382 ^ 0xFFFFFA5A;
  LODWORD(v398) = v219 ^ 0x386;
  HIDWORD(v391) = v219 ^ 0x3E3;
  LODWORD(v391) = v219 ^ 0x33F;
  HIDWORD(v386) = v219 ^ 0x3CF;
  LODWORD(v386) = v219 ^ 0x3F3;
  *(void *)(v61 - 176) = 13LL;
  unsigned __int8 v220 = v210[a55[13] ^ 0xF3LL] + 103;
  uint64_t v221 = (v382 ^ 0xFFFFFA5A) & 0xDB695B74 ^ 0xDB695B75;
  *(void *)(v61 - 152) = v221;
  int v222 = (v220 ^ 2) << 16;
  uint64_t v223 = a55[v221] ^ 0x57LL;
  *(void *)(v61 - 160) = 10LL;
  uint64_t v224 = a55[10] ^ 0xB6LL;
  int v225 = ((v210[v223] + 103) ^ 0xF6) << 16;
  *(void *)(v61 - 192) = 4LL;
  int v226 = (*(unsigned __int8 *)(v488 + v224) ^ 0xCC) << 8;
  uint64_t v227 = a55[4];
  LODWORD(vsub_10000AE14(v45 - 224) = v211[v227 ^ 0x9A];
  *(void *)(v61 - sub_10000AE14(v45 - 224) = 7LL;
  uint64_t v228 = a55[7] ^ 0xD6LL;
  *(void *)(v61 - 216) = 2LL;
  LODWORD(v227) = *(unsigned __int8 *)(v486 + v228) ^ 0x4E | ((v224 ^ ((_DWORD)v227
                                                                                   - ((2 * (_DWORD)v227) & 0xC4)
                                                                                   + 98) ^ 0xFFFFFFCF) << 24);
  LODWORD(v228) = *(unsigned __int8 *)(v488 + a55[2]) ^ 0xDE;
  *(void *)(v61 - 184) = 3LL;
  int v229 = *(unsigned __int8 *)(v486 + (a55[3] ^ 0x74LL));
  *(void *)(v61 - 168) = 12LL;
  int v230 = v225 | ((_DWORD)v228 << 8) | v229 ^ 0x8C;
  int v231 = v211[a55[12] ^ 0x6ELL] ^ (a55[12] - ((2 * a55[12]) & 0xC4) + 98) ^ 0x51;
  *(void *)(v61 - 208) = 0LL;
  int v232 = v222 | (v231 << 24);
  uint64_t v233 = *a55;
  LODWORD(v228) = v211[v233 ^ 0x15];
  *(void *)(v61 - 256) = 8LL;
  unsigned int v234 = v230 | ((v228 ^ ((_DWORD)v233 - ((2 * (_DWORD)v233) & 0xC4) + 98) ^ 0xAE) << 24);
  LODWORD(v228) = v211[a55[8] ^ 0x46LL] ^ (a55[8] - ((2 * a55[8]) & 0xC4) + 98) ^ 0xFFFFFFE7;
  *(void *)(v61 - 200) = 14LL;
  int v235 = v226 | ((_DWORD)v228 << 24);
  int v236 = v232 | ((*(unsigned __int8 *)(v488 + (a55[14] ^ 0xD5LL)) ^ 0x56) << 8);
  LOBYTE(v228) = v492[a55[5] ^ 0x9DLL];
  *(void *)(v61 - 248) = 11LL;
  *(void *)(v61 - 240) = 5LL;
  uint64_t v237 = a55[6] ^ 0xA4LL;
  unsigned int v238 = (*(unsigned __int8 *)(v486 + (a55[11] ^ 0xC2LL)) ^ 0xA9 | v235) & 0xFF00FFFF | (((v492[a55[9] ^ 0x3ELL] + 103) ^ 0xDF) << 16);
  *(void *)(v61 - sub_1000A7938(v33 - 232) = 15LL;
  int v239 = *(unsigned __int8 *)(v488 + v237);
  LODWORD(v237) = *(unsigned __int8 *)(v486 + (a55[15] ^ 0x47LL)) ^ 0x8C | v236;
  int v505 = v227 & 0xFF00FFFF | (((v228 + 103) ^ 0xF7) << 16) | ((v239 ^ 6) << 8);
  LODWORD(v227) = *(_DWORD *)(v61 - 120);
  uint64_t v240 = (uint64_t)*(&off_101826020 + (int)v227 - 943);
  unsigned int v241 = *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v505 ^ v494) >> 8) ^ 0x21u)) ^ ((((unsigned __int16)(v505 ^ v494) >> 8) ^ 0x4C) - 1892627349 - ((2 * (((v505 ^ v494) >> 8) ^ 0xB71C4C)) & 0xD6));
  int v242 = v241 - 1992286388 - ((2 * v241) & 0x12803E98);
  v243 = (char *)*(&off_101826020 + (int)v398) - 8;
  unsigned int v244 = v234 ^ HIDWORD(v494) ^ 0x730032AA;
  int v245 = v242 ^ *(_DWORD *)&v243[4 * ((v234 ^ BYTE4(v494)) ^ 0xAA)];
  unsigned int v246 = *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v493 ^ v237) >> 8) ^ 0xDDu)) ^ ((((unsigned __int16)(v493 ^ v237) >> 8) ^ 0xB0) - 1892627349 - ((2 * (((v493 ^ v237) >> 8) ^ 0xAA68B0)) & 0xD6));
  v247 = (char *)*(&off_101826020 + (int)v227 - 905) - 8;
  int v248 = *(_DWORD *)&v247[4 * (((v238 ^ HIDWORD(v493)) >> 16) ^ 0x68)];
  HIDWORD(v250) = v248 ^ 0x518;
  LODWORD(v250) = v248 ^ 0x50165000;
  int v249 = v250 >> 12;
  int v251 = *(_DWORD *)&v247[4 * ((v234 ^ HIDWORD(v494)) >> 16)];
  HIDWORD(v250) = v251 ^ 0x518;
  LODWORD(v250) = v251 ^ 0x50165000;
  int v252 = v250 >> 12;
  int v253 = v245 - 1262737048 - ((2 * v245) & 0x697852D0);
  v254 = (char *)*(&off_101826020 + (int)v227 - 870) - 8;
  int v255 = *(_DWORD *)&v247[4 * (((v493 ^ v237) >> 16) ^ 0x68)];
  HIDWORD(v250) = v255 ^ 0x518;
  LODWORD(v250) = v255 ^ 0x50165000;
  int v256 = (v246 - 1262737048 - ((2 * v246) & 0x697852D0)) ^ *(_DWORD *)&v254[4
                                                                          * (((v505 ^ v494) >> 24) ^ 0xB7)] ^ v252;
  LODWORD(v227) = *(_DWORD *)&v243[4 * ((v505 ^ v494) ^ 0xFB)] ^ ((unsigned __int16)(v238 ^ WORD2(v493)) >> 8) ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v238 ^ WORD2(v493)) >> 8) ^ 0x23u)) ^ 0x670D369 ^ (v250 >> 12);
  int v257 = *(_DWORD *)&v247[4 * (((v505 ^ v494) >> 16) ^ 0x1C)];
  HIDWORD(v250) = v257 ^ 0x518;
  LODWORD(v250) = v257 ^ 0x50165000;
  int v258 = *(_DWORD *)&v254[4 * (((v238 ^ HIDWORD(v493)) >> 24) ^ 0xF6)] ^ (BYTE1(v244) - 1892627349 - ((v244 >> 7) & 0xD6)) ^ ((v250 >> 12) - 1262737048 - ((2 * (v250 >> 12)) & 0x697852D0)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v244) ^ 0x6Du));
  LODWORD(v233) = v256 - 1992286388 - ((2 * v256) & 0x12803E98);
  int v259 = v356 ^ HIDWORD(v358) ^ *(_DWORD *)&v254[4 * (((v493 ^ v237) >> 24) ^ 0xAA)] ^ v249 ^ v253;
  unsigned int v260 = v483 ^ *(_DWORD *)&v243[4 * ((v493 ^ v237) ^ 0xAD)] ^ (v258
                                                                               - 1992286388
                                                                               - ((2 * v258) & 0x12803E98));
  unsigned int v261 = HIDWORD(v478) ^ *(_DWORD *)&v243[4 * ((v238 ^ BYTE4(v493)) ^ 0x5F)] ^ v233;
  unsigned int v262 = v403 ^ *(_DWORD *)&v254[4 * HIBYTE(v244)] ^ (v227 - 1262737048 - ((2 * v227) & 0x697852D0));
  LODWORD(v228) = *(_DWORD *)&v247[4 * ((v259 ^ 0xF9388C2F) >> 16)];
  HIDWORD(v250) = v228 ^ 0x518;
  LODWORD(v250) = v228 ^ 0x50165000;
  int v263 = v250 >> 12;
  LODWORD(v228) = *(_DWORD *)&v247[4 * (BYTE2(v260) ^ 0x70)];
  HIDWORD(v250) = v228 ^ 0x518;
  LODWORD(v250) = v228 ^ 0x50165000;
  LODWORD(v228) = v250 >> 12;
  int v264 = *(_DWORD *)&v247[4 * (BYTE2(v261) ^ 0x66)];
  HIDWORD(v250) = v264 ^ 0x518;
  LODWORD(v250) = v264 ^ 0x50165000;
  LODWORD(v227) = (v250 >> 12) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v262) ^ 5u)) ^ ((BYTE1(v262) ^ 0x68)
                                                                               - 1892627349
                                                                               - 2
                                                                               * (((v262 >> 8) ^ 0x42BD68) & 0x7B ^ (v262 >> 8) & 0x10));
  LODWORD(v233) = (v263 - 1992286388 - ((2 * v263) & 0x12803E98)) ^ *(_DWORD *)&v243[4
                                                                                   * ((BYTE4(v478) ^ v243[4 * ((v238 ^ BYTE4(v493)) ^ 0x5F)] ^ v233) ^ 0xB6)];
  LODWORD(v227) = (v227 - 1992286388 - ((2 * v227) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v259 ^ 0x61)];
  LODWORD(v237) = (((unsigned __int16)(v259 ^ 0x8C2F) >> 8)
                 - 1892627348
                 + (~((v259 ^ 0xF9388C2F) >> 7) | 0xFFFFFF29)) ^ 0xD678EAEF ^ *(_DWORD *)(v240
                                                                                        + 4LL
                                                                                        * (((unsigned __int16)(v259 ^ 0x8C2F) >> 8) ^ 0x6Du));
  int v265 = *(_DWORD *)&v254[4 * (HIBYTE(v261) ^ 0x43)] ^ 0x16A672D6;
  LODWORD(v237) = v237 + v265 - 2 * (v237 & v265);
  int v266 = *(_DWORD *)&v247[4 * (BYTE2(v262) ^ 0xBD)];
  HIDWORD(v250) = v266 ^ 0x518;
  LODWORD(v250) = v266 ^ 0x50165000;
  int v267 = *(_DWORD *)&v254[4 * ((v259 ^ 0xF9388C2F) >> 24)] ^ (v228 - 1262737048 - ((2 * v228) & 0x697852D0));
  int v268 = (v267 - 1992286388 - ((2 * v267) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v262 ^ 0xAB)];
  unsigned int v269 = *(_DWORD *)&v254[4 * (HIBYTE(v262) ^ 0x42)] ^ HIDWORD(v498) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v260) ^ 0x16u)) ^ ((BYTE1(v260) ^ 0x7B) - 1892627349 - 2 * (((v260 >> 8) ^ 0x89707B) & 0x6F ^ (v260 >> 8) & 4)) ^ (v233 - 1262737048 - ((2 * v233) & 0x697852D0));
  LOBYTE(v244) = BYTE1(v261) ^ 0x54;
  unsigned int v270 = v478 ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v261) ^ 0x39u)) ^ (v268 - 1892627349 - ((2 * v268) & 0x1E6198D6));
  unsigned int v271 = v473 ^ *(_DWORD *)&v243[4 * (v260 ^ 0x55)] ^ ((v237 ^ (v250 >> 12))
                                                                      - 1992286388
                                                                      - ((2 * (v237 ^ (v250 >> 12))) & 0x12803E98));
  int v272 = *(_DWORD *)&v247[4 * (BYTE2(v271) ^ 0x79)];
  int v273 = HIDWORD(v473) ^ *(_DWORD *)&v254[4 * (HIBYTE(v260) ^ 0x89)] ^ (v227 - 1262737048 - ((2 * v227) & 0x697852D0));
  HIDWORD(v250) = v272 ^ 0x518;
  LODWORD(v250) = v272 ^ 0x50165000;
  BYTE1(v260) = ((unsigned __int16)(WORD2(v473) ^ *(_WORD *)&v254[4 * (HIBYTE(v260) ^ 0x89)] ^ (v227
                                                                                              + 10600
                                                                                              - ((2 * v227) & 0x52D0))) >> 8) ^ 0x68;
  LODWORD(v228) = ((v250 >> 12) - 1262737048 - ((2 * (v250 >> 12)) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * ((v273 ^ 0x2261685Eu) >> 24)];
  LODWORD(v227) = ((BYTE1(v271) ^ 0xD0) - 1892627349 - 2 * (((v271 >> 8) ^ 0x679D0) & 0x6F ^ (v271 >> 8) & 4)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v271) ^ 0xBDu));
  LODWORD(v227) = (v227 - 1992286388 - ((2 * v227) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v269 ^ 0x76)];
  LODWORD(v237) = ((BYTE1(v270) ^ 0xEC) - 1892627349 - ((2 * ((v270 >> 8) ^ 0xE5FEC)) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v270) ^ 0x81u));
  int v274 = *(_DWORD *)&v247[4 * (BYTE2(v270) ^ 0x5F)];
  HIDWORD(v250) = v274 ^ 0x518;
  LODWORD(v250) = v274 ^ 0x50165000;
  int v275 = v250 >> 12;
  HIDWORD(v250) = *(_DWORD *)&v243[4 * (v273 ^ 0x5E)] ^ 0x605738C4;
  LODWORD(v250) = HIDWORD(v250);
  LODWORD(v237) = (v250 >> 28) ^ __ROR4__( *(_DWORD *)&v254[4 * (HIBYTE(v271) ^ 6)] ^ 0x7462B151 ^ (v237 - 1262737048 - ((2 * v237) & 0x697852D0)),  28);
  int v276 = (v275 - 1262737048 - ((2 * v275) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v269) ^ 0xD2)];
  int v277 = (v276 - 1992286388 - ((2 * v276) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v271 ^ 0x4C)];
  LODWORD(v233) = *(_DWORD *)&v247[4 * (BYTE2(v273) ^ 0x1B)];
  HIDWORD(v250) = v233 ^ 0x518;
  LODWORD(v250) = v233 ^ 0x50165000;
  LODWORD(v233) = v250 >> 12;
  int v278 = v228 - 1992286388 - ((2 * v228) & 0x12803E98);
  int v279 = BYTE1(v269) ^ 0xC0;
  int v280 = v279 - 1892627349 - 2 * (((v269 >> 8) ^ 0xD2CCC0) & 0x6F ^ (v269 >> 8) & 4);
  int v281 = *(_DWORD *)&v247[4 * (BYTE2(v269) ^ 0xCC)];
  HIDWORD(v250) = v281 ^ 0x518;
  LODWORD(v250) = v281 ^ 0x50165000;
  int v282 = HIDWORD(v356) ^ v359 ^ (v250 >> 12) ^ __ROR4__(v237 ^ 0x78071371, 4);
  LODWORD(v228) = v469 ^ *(_DWORD *)&v254[4 * (HIBYTE(v270) ^ 0xE)] ^ v233 ^ (v227
                                                                            - 1262737048
                                                                            - ((2 * v227) & 0x697852D0));
  LODWORD(v227) = BYTE1(v260);
  unsigned int v283 = HIDWORD(v464) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v260) ^ 0x6Du)) ^ (v277 - 1892627349 - ((2 * v277) & 0x1E6198D6));
  unsigned int v284 = v464 ^ v280 ^ *(_DWORD *)&v243[4 * ((v270 ^ v244) ^ 0xCA)] ^ *(_DWORD *)(v240
                                                                                                 + 4LL * (v279 ^ 0x6Du)) ^ v278;
  LODWORD(v227) = v227 ^ 0x4552953C ^ v283;
  int v285 = *(_DWORD *)&v247[4 * BYTE2(v227)];
  HIDWORD(v250) = v285 ^ 0x518;
  LODWORD(v250) = v285 ^ 0x50165000;
  int v286 = v250 >> 12;
  int v287 = *(_DWORD *)&v247[4 * ((v282 ^ 0x99FEE750) >> 16)];
  HIDWORD(v250) = v287 ^ 0x518;
  LODWORD(v250) = v287 ^ 0x50165000;
  int v288 = BYTE1(v228) ^ 0x29;
  LODWORD(v233) = v288 - 1892627349 - ((2 * ((v228 >> 8) ^ 0xA73B29)) & 0xD6);
  LODWORD(v221) = (BYTE1(v227) - 1892627349 - ((v227 >> 7) & 0xD6)) ^ *(_DWORD *)&v243[4 * (v228 ^ 0x72)] ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v227) ^ 0x6Du)) ^ ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98));
  int v289 = *(_DWORD *)&v247[4 * (BYTE2(v284) ^ 2)];
  HIDWORD(v250) = v289 ^ 0x518;
  LODWORD(v250) = v289 ^ 0x50165000;
  int v290 = *(_DWORD *)&v254[4 * (BYTE3(v228) ^ 0xA7)] ^ (v250 >> 12);
  LODWORD(v228) = *(_DWORD *)&v247[4 * (BYTE2(v228) ^ 0x3B)];
  HIDWORD(v250) = v228 ^ 0x518;
  LODWORD(v250) = v228 ^ 0x50165000;
  LODWORD(v227) = *(_DWORD *)&v243[4 * v227] ^ v290 ^ 0x3DFC3624;
  LODWORD(v237) = HIDWORD(v459) ^ ((BYTE1(v284) ^ 0xD9) - 1892627349 - ((2 * ((v284 >> 8) ^ 0x9802D9)) & 0xD6)) ^ *(_DWORD *)&v243[4 * (v282 ^ 0x1E)] ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v284) ^ 0xB4u)) ^ (v250 >> 12) ^ *(_DWORD *)&v254[4 * (HIBYTE(v283) ^ 0x61)];
  unsigned int v291 = v459 ^ *(_DWORD *)&v254[4 * (HIBYTE(v284) ^ 0x98)] ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  unsigned int v292 = HIDWORD(v454) ^ *(_DWORD *)&v243[4 * (v284 ^ 0x3D)] ^ v233 ^ *(_DWORD *)&v254[4 * ((v282 ^ 0x99FEE750) >> 24)] ^ *(_DWORD *)(v240 + 4LL * (v288 ^ 0x6Du)) ^ v286;
  unsigned int v293 = v454 ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v282 ^ 0xE750) >> 8) ^ 0x6Du)) ^ (v227 - 1892627349 - ((2 * v227) & 0x1E6198D6));
  LODWORD(v221) = *(_DWORD *)&v247[4 * (BYTE2(v237) ^ 0x12)];
  HIDWORD(v250) = v221 ^ 0x518;
  LODWORD(v250) = v221 ^ 0x50165000;
  LODWORD(v221) = v250 >> 12;
  LODWORD(v227) = *(_DWORD *)&v247[4 * (BYTE2(v292) ^ 0x14)];
  HIDWORD(v250) = v227 ^ 0x518;
  LODWORD(v250) = v227 ^ 0x50165000;
  int v294 = BYTE1(v292) ^ 0xC9;
  LODWORD(v228) = v294 - 1892627348 + ~(2 * (((v292 >> 8) ^ 0xE814C9) & 0x7B ^ (v292 >> 8) & 0x10));
  unsigned int v295 = v237 ^ 0xF7684EB9;
  LODWORD(v227) = *(_DWORD *)&v243[4 * ((v293 ^ ((unsigned __int16)(v282 ^ 0xE750) >> 8)) ^ 0x41)] ^ (((unsigned __int16)(v237 ^ 0x4EB9) >> 8) - 1892627349 - (((v237 ^ 0xF7684EB9) >> 7) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v237 ^ 0x4EB9) >> 8) ^ 0x6Du)) ^ ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98));
  LODWORD(v237) = *(_DWORD *)&v247[4 * (BYTE2(v293) ^ 0x81)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v237) = ((v250 >> 12) - 1262737048 - ((2 * (v250 >> 12)) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * HIBYTE(v295)];
  LODWORD(v237) = (v237 - 1992286388 - ((2 * v237) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v292 ^ 0x21)];
  LODWORD(v221) = ((BYTE1(v293) ^ 0xA0) - 1892627349 - 2 * (((v293 >> 8) ^ 0x6881A0) & 0x7B ^ (v293 >> 8) & 0x10)) ^ (v221 - 1992286388 - ((2 * v221) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v291 ^ 0xFC)] ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v293) ^ 0xCDu));
  unsigned int v296 = *(_DWORD *)&v247[4 * (BYTE2(v291) ^ 0xC6)];
  LODWORD(v250) = __ROR4__((v296 >> 12) ^ 0x268DC47, 17) ^ 0xEE910136;
  HIDWORD(v250) = v250;
  int v297 = (v250 >> 15) + (v296 << 20);
  unsigned int v298 = HIDWORD(v448) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v291) ^ 0x75u)) ^ (v237 - 1892627349 - ((2 * v237) & 0x1E6198D6));
  unsigned int v299 = v448 ^ *(_DWORD *)&v254[4 * (HIBYTE(v292) ^ 0xE8)] ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  int v300 = HIDWORD(v444) ^ *(_DWORD *)&v254[4 * (HIBYTE(v291) ^ 0x5A)] ^ (v227 - 1262737048 - ((2 * v227) & 0x697852D0));
  unsigned int v301 = v444 ^ v228 ^ *(_DWORD *)&v254[4 * (HIBYTE(v293) ^ 0x68)] ^ *(_DWORD *)&v243[4 * v295] ^ *(_DWORD *)(v240 + 4LL * (v294 ^ 0x6Du)) ^ v297;
  LODWORD(v221) = ((BYTE1(v298) ^ 0x9D) - 1892627349 - ((2 * ((v298 >> 8) ^ 0xC2489D)) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v298) ^ 0xF0u));
  unsigned int v302 = *(_DWORD *)&v247[4 * (BYTE2(v299) ^ 0x8F)];
  LODWORD(v237) = *(_DWORD *)&v247[4 * ((v300 ^ 0xCFB8D782) >> 16)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v221) = *(_DWORD *)&v243[4 * (v301 ^ 0xAE)] ^ (v302 << 20) ^ (v302 >> 12) ^ 0x51850165 ^ (v221 - 1992286388 - ((2 * v221) & 0x12803E98));
  LODWORD(v227) = ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * ((v298 ^ BYTE1(v291)) ^ 0x3F)];
  LODWORD(v228) = v221 - 1262737048 - ((2 * v221) & 0x697852D0);
  int v303 = v227 - 1262737048 - ((2 * v227) & 0x697852D0);
  LODWORD(v221) = ((v299 >> 8) ^ 0xC78FD9) & 0x6F ^ (v299 >> 8) & 4;
  LODWORD(v227) = BYTE1(v299) ^ 0xD9;
  LODWORD(v237) = *(_DWORD *)&v247[4 * (BYTE2(v298) ^ 0x48)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  int v304 = *(_DWORD *)&v247[4 * (BYTE2(v301) ^ 0xF7)];
  LODWORD(v237) = ((BYTE1(v301) ^ 0x56) - 1892627349 - ((2 * ((v301 >> 8) ^ 0x4AF756)) & 0xD6)) ^ *(_DWORD *)&v243[4 * (v300 ^ 0xCC)] ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v301) ^ 0x3Bu)) ^ ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98));
  HIDWORD(v250) = v304 ^ 0x518;
  LODWORD(v250) = v304 ^ 0x50165000;
  unsigned int v305 = HIDWORD(v439) ^ (((unsigned __int16)(v300 ^ 0xD782) >> 8)
                        - 1892627349
                        - (((v300 ^ 0xCFB8D782) >> 7) & 0xD6)) ^ *(_DWORD *)&v243[4 * (v299 ^ 0x50)] ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v300 ^ 0xD782) >> 8) ^ 0x6Du)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v298) ^ 0xC2)] ^ (v250 >> 12);
  unsigned int v306 = v439 ^ *(_DWORD *)&v254[4 * (HIBYTE(v299) ^ 0xC7)] ^ (v237 - 1262737048 - ((2 * v237) & 0x697852D0));
  unsigned int v307 = v207 ^ HIDWORD(v372) ^ *(_DWORD *)&v254[4 * ((v300 ^ 0xCFB8D782) >> 24)] ^ v228;
  unsigned int v308 = v433 ^ (v227 - 1892627349 - 2 * v221) ^ *(_DWORD *)(v240 + 4LL * (v227 ^ 0x6D)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v301) ^ 0x4A)] ^ v303;
  LODWORD(v237) = *(_DWORD *)&v247[4 * (BYTE2(v306) ^ 0xE6)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v237) = v250 >> 12;
  LODWORD(v233) = *(_DWORD *)&v247[4 * (BYTE2(v307) ^ 0x1C)];
  unsigned int v309 = (((unsigned __int16)(v308 ^ 0xCCA2) >> 8) - 1892627349 - (((v308 ^ 0x33C8CCA2) >> 7) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v308 ^ 0xCCA2) >> 8) ^ 0x6Du));
  HIDWORD(v250) = v233 ^ 0x518;
  LODWORD(v250) = v233 ^ 0x50165000;
  LODWORD(v221) = (v250 >> 12) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v306) ^ 0xD9u)) ^ ((BYTE1(v306) ^ 0xB4)
                                                                                  - 1892627349
                                                                                  - ((2 * ((v306 >> 8) ^ 0x4FE6B4)) & 0xD6));
  LODWORD(v221) = (v221 - 1992286388 - ((2 * v221) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v305 ^ 0xCE)];
  int v310 = (v309 - 1992286388 - ((2 * v309) & 0x12803E98)) ^ *(_DWORD *)&v243[4
                                                                          * ((v207 ^ BYTE4(v372) ^ v254[4 * ((v300 ^ 0xCFB8D782) >> 24)] ^ v228) ^ 0x3A)];
  LODWORD(v237) = *(_DWORD *)&v243[4 * (v308 ^ 0xA2)] ^ (((unsigned __int16)(v305 ^ 0x22CE) >> 8)
                                                                        - 1892627349
                                                                        - (((v305 ^ 0x24CF22CE) >> 7) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v305 ^ 0x22CE) >> 8) ^ 0x6Du)) ^ (v237 - 1992286388 - ((2 * v237) & 0x12803E98));
  int v311 = *(_DWORD *)&v243[4 * (v306 ^ 0x96)];
  HIDWORD(v250) = v311 ^ 0x9401F4C;
  LODWORD(v250) = v311 ^ 0x80000000;
  HIDWORD(v250) = (v250 >> 29) ^ 0x6615DA09;
  LODWORD(v250) = HIDWORD(v250);
  int v312 = (v250 >> 3) - 1892627349 - ((2 * (v250 >> 3)) & 0x1E6198D6);
  int v313 = v310 - 1262737048 - ((2 * v310) & 0x697852D0);
  LODWORD(v227) = *(_DWORD *)&v247[4 * ((v305 ^ 0x24CF22CE) >> 16)];
  HIDWORD(v250) = v227 ^ 0x518;
  LODWORD(v250) = v227 ^ 0x50165000;
  LODWORD(v227) = v250 >> 12;
  int v314 = *(_DWORD *)&v247[4 * ((v308 ^ 0x33C8CCA2) >> 16)];
  HIDWORD(v250) = v314 ^ 0x518;
  LODWORD(v250) = v314 ^ 0x50165000;
  unsigned int v315 = HIDWORD(v427) ^ *(_DWORD *)&v254[4 * (HIBYTE(v308) ^ 0x17)] ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  LODWORD(v228) = BYTE1(v307);
  LODWORD(v221) = v312 ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v307) ^ 0xD1u)) ^ (v250 >> 12);
  unsigned int v316 = HIDWORD(v423) ^ *(_DWORD *)&v254[4 * (HIBYTE(v307) ^ 0x1B)] ^ (v237 - 1262737048 - ((2 * v237) & 0x697852D0));
  LODWORD(v237) = *(_DWORD *)&v247[4 * (BYTE2(v316) ^ 0x7E)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v237) = v250 >> 12;
  int v317 = *(_DWORD *)&v254[4 * HIBYTE(v305)];
  unsigned int v318 = v427 ^ *(_DWORD *)&v254[4 * (HIBYTE(v306) ^ 0x4F)] ^ v227 ^ v313;
  LODWORD(v227) = v317 ^ v498;
  int v319 = *(_DWORD *)&v247[4 * (BYTE2(v318) ^ 1)];
  unsigned int v320 = v227 ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  HIDWORD(v250) = v319 ^ 0x518;
  LODWORD(v250) = v319 ^ 0x50165000;
  LODWORD(v221) = ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v315 ^ 0xC6)];
  LODWORD(v227) = ((BYTE1(v315) ^ 0x71) - 1892627348 + (~(2 * ((v315 >> 8) ^ 0xF25B71)) | 0xFFFFFF29)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v315) ^ 0x1Cu));
  LODWORD(v227) = (v227 - 1262737048 - ((2 * v227) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v318) ^ 0x1F)];
  int v321 = *(_DWORD *)&v247[4 * (BYTE2(v315) ^ 0x5B)];
  HIDWORD(v250) = v321 ^ 0x518;
  LODWORD(v250) = v321 ^ 0x50165000;
  int v322 = v250 >> 12;
  unsigned int v323 = v228 ^ 0x73F4E0AF ^ v320;
  LODWORD(v233) = *(_DWORD *)&v247[4 * BYTE2(v323)];
  HIDWORD(v250) = v233 ^ 0x518;
  LODWORD(v250) = v233 ^ 0x50165000;
  LODWORD(v233) = v250 >> 12;
  HIDWORD(v250) = v237 ^ ((BYTE1(v318) ^ 0x81) - 1892627349 - ((2 * ((v318 >> 8) ^ 0x1F0181)) & 0xD6)) ^ 0xD678EAEF ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v318) ^ 0xECu));
  LODWORD(v250) = HIDWORD(v250);
  LODWORD(v250) = (v250 >> 11) ^ __ROR4__(*(_DWORD *)&v254[4 * (HIBYTE(v315) ^ 0xF2)] ^ 0x16A672D6, 11) ^ 0xD490839A;
  HIDWORD(v250) = v250;
  unsigned int v324 = HIDWORD(v378) ^ v502 ^ *(_DWORD *)&v243[4 * (v318 ^ 0xB8)] ^ ((BYTE1(v316) ^ 0xAA)
                                                                                      - 1892627349
                                                                                      - 2
                                                                                      * ((BYTE1(v316) ^ 0xAA) & 0x7F ^ (v316 >> 8) & 0x14)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v320) ^ 0x57)] ^ v322 ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v316) ^ 0xC7u));
  LODWORD(v228) = HIDWORD(v419) ^ *(_DWORD *)&v254[4 * (HIBYTE(v316) ^ 0x96)] ^ (BYTE1(v323)
                                                                               - 1892627349
                                                                               - ((v323 >> 7) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v323) ^ 0x6Du)) ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  LODWORD(v221) = v419 ^ *(_DWORD *)&v243[4 * (v316 ^ 0x88)] ^ v233 ^ (v227
                                                                                      - 1992286388
                                                                                      - ((2 * v227) & 0x12803E98));
  unsigned int v325 = HIDWORD(v413) ^ *(_DWORD *)&v243[4 * v323] ^ ((v250 >> 21)
                                                                      - 1992286388
                                                                      - ((2 * (v250 >> 21)) & 0x12803E98));
  LODWORD(v227) = *(_DWORD *)&v247[4 * (BYTE2(v324) ^ 0x17)];
  HIDWORD(v250) = v227 ^ 0x518;
  LODWORD(v250) = v227 ^ 0x50165000;
  LODWORD(v227) = v250 >> 12;
  BYTE2(v237) = BYTE2(v221) ^ 0x4A;
  LODWORD(v233) = *(_DWORD *)(v240 + 4LL * (BYTE1(v228) ^ 0x96u)) ^ ((BYTE1(v228) ^ 0xFB)
                                                                   - 1892627349
                                                                   - ((2 * ((v228 >> 8) ^ 0x3EA2FB)) & 0xD6));
  int v326 = *(_DWORD *)&v247[4 * (BYTE2(v228) ^ 0xA2)];
  HIDWORD(v250) = v326 ^ 0x518;
  LODWORD(v250) = v326 ^ 0x50165000;
  LODWORD(v233) = (v233 - 1992286388 - ((2 * v233) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v221 ^ 0x75)];
  int v327 = (((unsigned __int16)(v221 ^ 0xF075) >> 8)
        - 1892627349
        - (((v221 ^ 0xB54AF075) >> 7) & 0xD6)) ^ (v250 >> 12) ^ *(_DWORD *)(v240
                                                                                        + 4LL
                                                                                        * (((unsigned __int16)(v221 ^ 0xF075) >> 8) ^ 0x6Du));
  int v328 = (v327 - 1262737048 - ((2 * v327) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v325) ^ 0xED)];
  LODWORD(v221) = *(_DWORD *)&v254[4 * (BYTE3(v221) ^ 0x91)];
  int v329 = *(_DWORD *)&v254[4 * (BYTE3(v228) ^ 0x3E)];
  int v330 = *(_DWORD *)&v254[4 * (HIBYTE(v324) ^ 0xFA)];
  LODWORD(v254) = v325 ^ 0xC9AF1D8F;
  int v331 = ((unsigned __int16)(v325 ^ 0x1D8F) >> 8);
  unsigned int v332 = v331 - 1892627349 - ((v254 >> 7) & 0xD6);
  int v333 = *(_DWORD *)&v243[4 * v254];
  LODWORD(v228) = *(_DWORD *)&v243[4 * (v228 ^ 0x9A)];
  LODWORD(v243) = *(_DWORD *)&v243[4 * (v324 ^ 0x4B)];
  unsigned int v334 = *(_DWORD *)&v247[4 * BYTE2(v254)];
  LODWORD(v237) = *(_DWORD *)&v247[4 * BYTE2(v237)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v254) = (v324 >> 8) ^ 0xFA17F6;
  int v335 = BYTE1(v324) ^ 0xF6;
  LODWORD(v247) = *(_DWORD *)(v240 + 4LL * (v335 ^ 0x6Du));
  int v336 = v335 - 1892627349 - ((2 * (_DWORD)v254) & 0xD6);
  LODWORD(v254) = v413 ^ v228 ^ v227 ^ v221 ^ v332 ^ *(_DWORD *)(v240 + 4LL * (v331 ^ 0x6Du));
  unsigned int v337 = HIDWORD(v408) ^ v336 ^ v329 ^ v247 ^ v333 ^ (v250 >> 12);
  LODWORD(v221) = v408 ^ v243 ^ (v328 - 1992286388 - ((2 * v328) & 0x12803E98));
  unsigned int v338 = HIDWORD(v403) ^ v330 ^ (v334 >> 12) ^ (v334 << 20) ^ (v233 - 1262737048 - ((2 * v233) & 0x697852D0));
  uint64_t v339 = (uint64_t)*(&off_101826020 + SHIDWORD(v391));
  v340 = (char *)*(&off_101826020 + (int)v391) - 8;
  BYTE1(v237) = ((unsigned __int16)(v408 ^ (unsigned __int16)v243 ^ (v328 + 8012 - ((2 * v328) & 0x3E98))) >> 8) ^ 0x6F;
  int v341 = *(_DWORD *)(v61 - 120);
  uint64_t v342 = (uint64_t)*(&off_101826020 + v341 - 878);
  int v343 = *(_DWORD *)&v340[4
                        * (((unsigned __int16)(WORD2(v403) ^ v330 ^ (v334 >> 12) ^ (v233 + 10600 - ((2 * v233) & 0x52D0))) >> 8) ^ 0x22)] ^ *(_DWORD *)(v339 + 4LL * ((v408 ^ v243 ^ (v328 + 76 - ((2 * v328) & 0x98))) ^ 7u));
  unsigned int v344 = *(_DWORD *)(v339 + 4LL * (v254 ^ 0xF8u)) ^ 0xB10C5C5D ^ *(_DWORD *)(v342
                                                                                            + 4LL
                                                                                            * (BYTE2(v221) ^ 0x2Au));
  v345 = (char *)*(&off_101826020 + v341 - 922) - 8;
  LODWORD(v243) = *(_DWORD *)&v345[4 * (BYTE3(v221) ^ 0xEF)] ^ *(_DWORD *)&v340[4 * (BYTE1(v254) ^ 0x47)];
  LODWORD(v221) = ((v343 ^ 0xC2CB0714) - 1099519680 - 2 * ((v343 ^ 0xC2CB0714) & 0x3E76A94B ^ v343 & 0xB)) ^ *(_DWORD *)&v345[4 * (HIBYTE(v337) ^ 0x9F)];
  int v346 = (v344 - 1099519680 - ((2 * v344) & 0x7CED5280)) ^ *(_DWORD *)&v345[4 * (HIBYTE(v338) ^ 0xCC)];
  LODWORD(v237) = *(_DWORD *)(v342 + 4LL * (BYTE2(v338) ^ 0x39u)) ^ 0x73C75B49 ^ *(_DWORD *)&v340[4 * BYTE1(v237)];
  LODWORD(v340) = (v346 - ((2 * v346) & 0xB5B97174) - 623068998) ^ *(_DWORD *)&v340[4 * (BYTE1(v337) ^ 0x93)];
  LODWORD(v237) = (v237 - 1099519680 - ((2 * v237) & 0x7CED5280)) ^ *(_DWORD *)&v345[4
                                                                                   * ((v254 >> 24) ^ 0xC)];
  LODWORD(v240) = *(_DWORD *)(v342 + 4LL * (BYTE2(v337) ^ 0x7Eu));
  LODWORD(v237) = (v237 + 404209582 - ((2 * v237) & 0x302F7F5C)) ^ *(_DWORD *)(v339
                                                                             + 4LL * (v337 ^ 0x3Eu));
  int v347 = *(_DWORD *)(v339 + 4LL * (v338 ^ 0xBEu));
  LODWORD(v221) = *(_DWORD *)(v342 + 4LL * (BYTE2(v254) ^ 0x77u)) ^ (v221 - 1457789965 - ((2 * v221) & 0x5237C7E6));
  unsigned int v348 = *(_DWORD *)(v61 - 140) ^ HIDWORD(v495) ^ (v237 - ((2 * v237) & 0x9AFD019C) + 1300136142);
  uint64_t v349 = *(_DWORD *)(v61 - 136) ^ v495 ^ ((_DWORD)v221 - ((2 * (_DWORD)v221) & 0x850B7278) + 1116059964);
  LODWORD(v254) = *(_DWORD *)(v61 - 132) ^ HIDWORD(v496) ^ ((_DWORD)v340 - ((2 * (_DWORD)v340) & 0xD4B57CFE) + 1784331903);
  v350 = (char *)*(&off_101826020 + v341 - 844) - 4;
  a55[*(void *)(v61 - 256)] = v350[BYTE3(v349) ^ 0xD7LL] ^ 0xB9;
  v351 = (char *)*(&off_101826020 + SHIDWORD(v386)) - 8;
  a55[*(void *)(v61 - 224)] = (v351[v348 ^ 0xC7LL] - 108) ^ 0x5F;
  v352 = (char *)*(&off_101826020 + v341 - 821) - 12;
  LODWORD(v221) = v352[BYTE1(v348) ^ 0x13LL];
  HIDWORD(v250) = v221 ^ 0xA;
  LODWORD(v250) = (v221 ^ 0x80) << 24;
  a55[6] = (v250 >> 30) ^ 0x40;
  LODWORD(v221) = v352[BYTE1(v254)];
  HIDWORD(v250) = v221 ^ 0xA;
  LODWORD(v250) = (v221 ^ 0x80) << 24;
  a55[*(void *)(v61 - 216)] = (v250 >> 30) ^ 0x7E;
  v353 = (char *)*(&off_101826020 + (int)v386) - 4;
  a55[9] = v353[BYTE2(v349) ^ 0xFBLL] ^ 0x54;
  LODWORD(v221) = ((v243 ^ 0x64AA11FA)
                 - 1457789965
                 - 2 * ((v243 ^ 0x64AA11FA) & 0x291BE3F7 ^ v243 & 4)) ^ v240;
  LODWORD(v221) = (v221 + 404209582 - ((2 * v221) & 0x302F7F5C)) ^ v347;
  LODWORD(v221) = *(_DWORD *)(v61 - 128) ^ v496 ^ (v221 - ((2 * v221) & 0x514E7D16) - 1465434485);
  a55[*(void *)(v61 - 176)] = v353[BYTE2(v221) ^ 0xB8LL] ^ 0x87;
  a55[*(void *)(v61 - 248)] = (v351[v349 ^ 0x1BLL] - 108) ^ 0x7D;
  a55[*(void *)(v61 - 240)] = v353[BYTE2(v348) ^ 3LL] ^ 0xF9;
  a55[*(void *)(v61 - 192)] = v350[HIBYTE(v348) ^ 0x6DLL] ^ 0x41;
  LODWORD(v243) = v352[BYTE1(v349) ^ 0x92LL];
  HIDWORD(v250) = v243 ^ 0xA;
  LODWORD(v250) = (v243 ^ 0x80) << 24;
  a55[*(void *)(v61 - 160)] = (v250 >> 30) ^ 0xD2;
  uint64_t v354 = *(void *)(v61 - 208);
  a55[v354] = v350[(v254 >> 24) ^ 0x53LL] ^ 0xAD;
  a55[*(void *)(v61 - 184)] = (v351[v254 ^ 0x95LL] - 108) ^ 0xAF;
  a55[*(void *)(v61 - 232)] = (v351[v221 ^ 0x64LL] - 108) ^ 0x27;
  a55[*(void *)(v61 - 168)] = v350[BYTE3(v221) ^ 0x6ELL] ^ 0x3B;
  LODWORD(v221) = v352[BYTE1(v221) ^ 0x1FLL];
  HIDWORD(v250) = v221 ^ 0xA;
  LODWORD(v250) = (v221 ^ 0x80) << 24;
  a55[*(void *)(v61 - 200)] = (v250 >> 30) ^ 0x58;
  a55[*(void *)(v61 - 152)] = v353[BYTE2(v254) ^ 0xC8LL] ^ 0xD6;
  return ((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(a57 + 8LL * ((1647 * ((((_DWORD)v354 - 613852284 - 2 * (((_DWORD)v354 + 16) & 0x5B695B7C)) ^ 0xDB695B74) < a56)) ^ (v341 - 493))) - 8LL))( 190LL,  v353,  1304LL,  184LL,  v352,  v351,  2837177331LL,  v349,  v356,  v357,  v358,  v359,  v360,  v361,  v362,  v363,  v366,  v367,  v369,  v372,  v376,  v378,  a23,  a24,  v382,  v386,  v391,  v398,  v403,  v408,  v413,  v419,  v423,  v427,  v433,  v439,  v444,  v448,  v454,  v459,  v464,  v469,  v473,  v478,  v483,  v486,  v488,  v490,  v492,
           v493,
           v494,
           v495,
           v496,
           v498);
}

void sub_10016B78C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,int a60,int a61)
{
  *(_DWORD *)(v61 - 128) = a58 ^ 0x739565A7;
  *(_DWORD *)(v61 - 136) = a60 ^ 0xF9DCD893;
  *(_DWORD *)(v61 - 132) = a61 ^ 0x1E4C7787;
  *(_DWORD *)(v61 - 140) = a59 ^ 0xB4221FD2;
  JUMPOUT(0x100169ACCLL);
}

uint64_t sub_10016B7E0(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_10016B824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v7
                                                                                + 8LL
                                                                                * ((420
                                                                                  * ((v6 & 8) != ((a6 - 565) | 0x23C)
                                                                                               - 572)) ^ a6))
                                                                    - ((a6 - 565) ^ 8LL)))( a1,  a2,  a3,  (a2 - a3));
}

uint64_t sub_10016B86C( int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  *(_DWORD *)(v65 - 120) = v60;
  unsigned int v66 = ((a7 - 24) ^ 0xFFFFFDDC) & v60;
  int v67 = -a3;
  *(_DWORD *)(v65 - 128) = v66;
  char v68 = a1 + v63 + v61;
  uint64_t v69 = (v67 + a1 + v63 + v62);
  v71.val[0].i64[0] = ((_BYTE)v67 + (_BYTE)a1 + (_BYTE)v63 + (_BYTE)v62) & 0xF;
  v71.val[0].i64[1] = ((_BYTE)v67 + v68 - 55) & 0xF;
  v71.val[1].i64[0] = ((_BYTE)v67 + v68 + (_BYTE)a7 - 52) & 0xF;
  v71.val[1].i64[1] = ((_BYTE)v67 + v68 - 57) & 0xF;
  v71.val[2].i64[0] = ((_BYTE)v67 + v68 - 58) & 0xF;
  v71.val[2].i64[1] = ((_BYTE)v67 + v68 - 59) & 0xF;
  v71.val[3].i64[0] = ((_BYTE)v67 + v68 - 60) & 0xF;
  v71.val[3].i64[1] = ((_BYTE)v67 + v68 - 61) & 0xF;
  *(int8x8_t *)(v64 - 7 + v69) = vrev64_s8( veor_s8( veor_s8( vrev64_s8( veor_s8( veor_s8(*(int8x8_t *)(v64 - 7 + v69), *(int8x8_t *)(v59 + (v69 & 0xF) - 7)),  veor_s8( *(int8x8_t *)(v58 + (v69 & 0xF) - 7),  *(int8x8_t *)(v57 + (v69 & 0xF) - 7)))),  (int8x8_t)0x2C2C2C2C2C2C2C2CLL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v71, (int8x16_t)xmmword_1012D0AE0),  (int8x8_t)0x505050505050505LL)));
  return ((uint64_t (*)(__n128))(*(void *)(a57
                                                     + 8LL
                                                     * (((8 * (v67 != 8 - v66)) | (16 * (v67 != 8 - v66))) ^ (a7 - 24)))
                                         - 4LL))((__n128)xmmword_1012D0AE0);
}

void sub_10016B9A8()
{
}

uint64_t sub_10016B9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v5
                                                                                         + 8LL
                                                                                         * ((1021
                                                                                           * (((*(_DWORD *)(v6 - 120) == *(_DWORD *)(v6 - 128)) ^ ((v4 | 0xC0) - 1)) & 1)) ^ (v4 | 0xC0)))
                                                                             - 8LL))( a1,  a2,  a3,  a4,  (v4 | 0xC0u) + 540);
}

uint64_t sub_10016BA10(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v11 = (a4 - 895093447);
  *(_BYTE *)(v10 + v11) ^= *(_BYTE *)(v8 + (v11 & 0xF)) ^ *(_BYTE *)(v7 + (v11 & 0xF)) ^ *(_BYTE *)(v6 + (v11 & 0xF)) ^ (5 * (v11 & 0xF)) ^ 0x2C;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((968 * (a4 - 1 != v5)) ^ (a5 - 540))) - 8LL))();
}

void sub_10016BA78()
{
  if (v0 == 1708175236) {
    int v1 = 2084229119;
  }
  else {
    int v1 = -2084203481;
  }
  *(_DWORD *)(v2 + 40) = v1;
}

void sub_10016BADC(_DWORD *a1)
{
  unsigned int v1 = *a1 + 1755732067 * (((a1 | 0xFD508F6) - (_DWORD)a1 + (a1 & 0xF02AF709)) ^ 0xD113B52D);
  __asm { BR              X15 }

uint64_t sub_10016BBDC()
{
  if (v2 > ((v3 - 26) ^ 0x13C70864u) != v0 - 151127389 < -331810957) {
    BOOL v4 = v2 > ((v3 - 26) ^ 0x13C70864u);
  }
  else {
    BOOL v4 = v0 - 151127389 < (int)(v2 + 1815672691);
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v1 + 8LL * ((!v4 * (((v3 - 26) ^ 0x12) - 232)) ^ (v3 - 26)))
                                          - 86 * ((v3 - 26) ^ 0xEBu)
                                          + 250LL))(0x6E9FC7186F6532B7LL);
}

uint64_t sub_10016BCFC(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  unint64_t v15 = a1 - 0x6E9FC7186F6532B7LL + (v9 ^ 0xC6EC2028) + v12 * (unint64_t)(*(_DWORD *)(*v11 + 4LL * a3) ^ v9);
  *(_DWORD *)(v13 + 4 * v14) = v15 + v9 - (((_DWORD)v15 << (((8 * a4) ^ 0xF8) + 25)) & 0x8DD84050);
  uint64_t v16 = ((v15 >> ((a4 - 113) ^ 0xB1u)) ^ 0x7FBFDFB8FFE57FB7LL) + v5 + (v8 & (2 * (v15 >> ((a4 - 113) ^ 0xB1u))));
  BOOL v17 = a3 + 472274735 < a5;
  if (a2 > 0x63D9A8D1 != a3 + 472274735 < v7) {
    BOOL v17 = a2 > 0x63D9A8D1;
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v6 + 8LL * (a4 ^ (!v17 * v10))) - 12LL))(v16);
}

uint64_t sub_10016BDF4(uint64_t a1)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (((((a1 == 0x6E9FC7186F6532B7LL) ^ (v2 - 14)) & 1)
                                          * ((v2 ^ 0x27) + 1014)) ^ v2))
                            - 8LL))();
}

uint64_t sub_10016BE4C@<X0>(int a1@<W8>)
{
  int v4 = a1 - 74;
  BOOL v5 = v3 > 0x1187755D;
  if (v5 == v1 - 113406510 < a1 - 294090772) {
    BOOL v5 = v1 - 113406510 < (int)((v4 ^ 0x6E7888CE) + v3);
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((21 * v5) ^ v4)) - 4LL))();
}

uint64_t sub_10016BF1C(uint64_t a1, int a2, uint64_t a3, char a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  unint64_t v15 = a1 - 0x6E9FC7186F6532B7LL + (*(_DWORD *)(v12 + 4 * v13) ^ v9);
  *(_DWORD *)(v12 + 4 * v13) = v15 + v9 - ((2 * v15) & 0x8DD84050);
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * (((((v15 >> ((a4 ^ (2 * v11)) - 98)) ^ (((v11 + a5) & a6) + a7))
                                           + v10
                                           + ((2 * (v15 >> ((a4 ^ (2 * v11)) - 98))) & a8) != v14)
                                          * a2) ^ v11))
                            - 8LL))();
}

uint64_t sub_10016BFB0()
{
  signed int v4 = v0 + 1674286674 + ((v2 + 1158867726) & 0xBAED177F);
  int v5 = *v3 + 1674288482;
  BOOL v6 = v4 < 1493604914;
  BOOL v7 = v4 > v5;
  if (v5 < 1493604914 != v6) {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((53 * !v7) ^ v2)) - 12LL))();
}

void sub_10016C02C()
{
  *uint64_t v1 = v0;
}

void sub_10016C050(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_10016C0D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  a13 = 108757529
  uint64_t v17 = sub_1001A63A8(&a12);
  return ((uint64_t (*)(uint64_t))(*(void *)(v16 + 8LL * ((1677 * (a12 == v13)) ^ v15)) - (v14 ^ 0x26E54880)))(v17);
}

uint64_t sub_10016C15C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, unsigned int a14)
{
  a14 = 854
      - 460628867
      * ((((2 * (&a12 ^ 0x326B2B15)) | 0xB22CC208) - (&a12 ^ 0x326B2B15) + 652844796) ^ 0xA7EBC86C);
  a12 = &STACK[0x49EB7E5E2EA5C8FD];
  sub_10017F1A8((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15
                                                                                          + 8LL
                                                                                          * ((23
                                                                                            * (a13 == ((v14 - 302) ^ 0x12E))) ^ 0x2ADu))
                                                                              - 4LL))( v16,  v17,  v18,  v19,  v20);
}

uint64_t sub_10016C200( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15)
{
  unsigned int v20 = 1178560073 * (&a12 ^ 0xBA947862);
  a14 = a11;
  a13 = v20 + 804878199 * v15 + 137 * (v18 ^ 0x12B) + 1740497438;
  a15 = (v18 + 695) ^ v20;
  uint64_t v21 = (*(uint64_t (**)(int *))(v17 + 8LL * (int)(v18 - 186)))(&a12);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19 + 8LL * ((102 * (a12 == v16)) ^ v18)) - 8LL))(v21);
}

uint64_t sub_10016C2AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, unsigned int a14, unsigned int a15, unsigned int a16, int a17)
{
  unsigned int v21 = ((818135048 - (&a12 | 0x30C3C008) + (&a12 | 0xCF3C3FF7)) ^ 0x83AABD8A) * v20;
  a14 = v21 - 763814170;
  a15 = v21 + v18 - 2024873385;
  a16 = 274310066 - v21;
  a12 = &STACK[0x27D4077E41C0C6A0];
  a13 = a11;
  uint64_t v22 = sub_1001A677C((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL * (((a17 == v17) * (((v18 - 293) | 0x2A4) ^ 0x4A2)) ^ v18))
                                          - 8LL))(v22);
}

uint64_t sub_10016C374()
{
  unsigned int v10 = (v3 + 100) ^ (1374699841
                    * ((&v10 + 1878396432 - 2 * (&v10 & 0x6FF60E10)) ^ 0x2021619));
  uint64_t v12 = &STACK[0x18E41690234F4EB1];
  int v13 = v7;
  (*(void (**)(unsigned int *))(v2 + 8LL * (v3 ^ 0x198u)))(&v10);
  unsigned int v10 = (v3 + 111) ^ (1755732067
                    * (((&v10 | 0x414B933F) - &v10 + (&v10 & 0xBEB46CC0)) ^ 0x9F8D2EE4));
  uint64_t v12 = v7;
  sub_10017A8B8((uint64_t)&v10);
  if ((_DWORD)v13 == v1 + v3 + 383 - 685) {
    int v5 = v8;
  }
  else {
    int v5 = (int)v13;
  }
  unsigned int v11 = v3 + ((2 * (&v10 & 0x11E9380) - &v10 + 2128702589) ^ 0x74156252) * v4 + 1029;
  uint64_t v12 = v7;
  v0(&v10);
  unsigned int v11 = v3 + 383 + ((((2 * &v10) | 0x72A8ABE4) - &v10 - 961828338) ^ 0x33A05BDD) * v4 + 646;
  uint64_t v12 = v9;
  v0(&v10);
  return v5 ^ v1;
}

void sub_10016C52C(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_10016C56C()
{
  return 4294925273LL;
}

void sub_10016C5B4(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0x20C3A6CC) + (~(_DWORD)a1 | 0xDF3C5933))) ^ 0x65A82151);
  __asm { BR              X9 }

_DWORD *sub_10016C654(_DWORD *result)
{
  *uint64_t result = 596636585;
  return result;
}

void sub_10016C9A4(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    BOOL v2 = *(void *)(a1 + 8) == 0x27D4077E41C0C6A0LL;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  int v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((2 * (a1 & 0x47DE7202) - a1 - 1205760515) ^ 0x66E73026));
  __asm { BR              X8 }

void sub_10016CAD0()
{
  *(_DWORD *)(v1 + 36) = v0 - 4;
}

uint64_t sub_10016CAD8()
{
  LODWORD(STACK[0x43C]) = v0;
  STACK[0x270] = (unint64_t)&STACK[0x8C0F0A4F49AC496];
  *(void *)(v4 - 192) = &STACK[0x8C0F0A4F49AC496];
  *(_BYTE *)(v4 - 200) = (-85 * ((v4 + 56 - 2 * ((v4 + 56) & 0x14) + 20) ^ 0xE2)) ^ 0x55;
  *(_DWORD *)(v4 - 184) = 3804331 * ((v4 - 200 - 2 * ((v4 - 200) & 0x54A65C14) + 1420188692) ^ 0x2A7379E2) + v2 - 401;
  STACK[0x268] = (unint64_t)&STACK[0x589C7105EC0C842A];
  *(void *)(v4 - 176) = &STACK[0x589C7105EC0C842A];
  int v5 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 8LL * (v2 ^ 0x4D6)) - 12LL);
  STACK[0x260] = (unint64_t)v5;
  uint64_t v6 = v5(v4 - 200);
  int v7 = *(_DWORD *)(v4 - 180);
  LODWORD(STACK[0x48C]) = v7;
  return ((uint64_t (*)(uint64_t))(*(void *)(v3 + 8LL * ((664 * (v7 == ((v2 - 407) ^ 0x7C3ACCE9))) ^ v2))
                                          - ((v2 - 1065) | 0x113u)
                                          + 403LL))(v6);
}

uint64_t sub_10016CBD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, int a33, int a34, unint64_t *a35, uint64_t a36, int a37, int a38, __int128 a39, unint64_t a40, char *a41, unint64_t *a42, uint64_t a43, unint64_t a44, unint64_t *a45, int a46, int a47, uint64_t a48, uint64_t a49, int a50,int a51,int a52,int a53,unint64_t *a54,int a55,int a56,unint64_t *a57,int32x4_t a58,int32x4_t a59,uint64_t a60,uint64_t a61,unint64_t a62,int a63)
{
  a43 = v78;
  STACK[0x378] = 0LL;
  a35 = &STACK[0xC8F409392290EA3];
  STACK[0x3B8] = (unint64_t)&STACK[0x5BFD90C18C6567FE];
  STACK[0x3B0] = (unint64_t)&STACK[0x139154EEB432D04];
  STACK[0x3A8] = (unint64_t)&STACK[0x30CF5C205D591FA0];
  STACK[0x3A0] = (unint64_t)&STACK[0x3EA9131FAE911518];
  a68 = &STACK[0x5A178A95705CD018];
  a67 = &STACK[0x5640F59D98E4336F];
  a66 = &STACK[0x5A178A95705CCF60];
  a65 = &STACK[0x5640F59D98E4332F];
  a45 = &STACK[0x1A8FA111108FB8BE];
  a57 = &STACK[0xC8F409392290E7F];
  STACK[0x280] = (unint64_t)&STACK[0x5A178A95705CD0B0];
  STACK[0x278] = (unint64_t)&STACK[0x5640F59D98E4339F];
  a54 = &STACK[0x6C482493D26ECAD9];
  STACK[0x230] = (unint64_t)&STACK[0x6C482493D26ECA79];
  STACK[0x248] = (unint64_t)&STACK[0x31BC703A95C2A634];
  STACK[0x240] = (unint64_t)&STACK[0x781B11C067844416];
  a42 = &STACK[0x18E41690234F5501];
  int v81 = *v77 - v74;
  STACK[0x200] = (unint64_t)v77;
  int v82 = v77[8] ^ v74;
  a74 = ((unint64_t)&STACK[0x580] ^ 0xE777E3DBFF5FEB7FLL)
      + 0x39FB9D3DBFAB75FDLL
      + ((2LL * (void)&STACK[0x580]) & 0xCEEFC7B7FEBFD6F0LL);
  a44 = ((unint64_t)&STACK[0x5E8] ^ 0xDF6ED69F7EBFEF37LL)
      + 0x7FBFEFFFAD67FDFFLL
      + ((2LL * (void)&STACK[0x5E8]) & 0xBEDDAD3EFD7FDE60LL);
  a52 = 2 * v82;
  LODWORD(STACK[0x294]) = (v82 ^ 0x9AB28778) + 2008284791 + ((2 * v82) & 0xBDFCA3BA ^ 0x8898A10A);
  a40 = ((unint64_t)&STACK[0x590] ^ 0x67FCFEFF7C7DEF7FLL)
      - 0x7080900800007FLL
      + ((2LL * (void)&STACK[0x590]) & 0xCFF9FDFEF8FBDEF0LL);
  a62 = ((unint64_t)&STACK[0x448] ^ 0x5EFDEFEEDBE3F773LL)
      - 0x142004C098200073LL
      + ((2LL * (void)&STACK[0x448]) & 0xBDFBDFDDB7C7EEE0LL);
  *(int32x4_t *)&STACK[0x360] = vdupq_n_s32(0x7FFFFFFEu);
  a39 = xmmword_1012D0B00;
  a59 = vdupq_n_s32(0x7C3ACFFFu);
  uint64_t v83 = (v75 - 295) | 0x88u;
  STACK[0x2B0] = (unint64_t)&STACK[0x444] % 0x25 + v83 - 232;
  a38 = v81;
  LODWORD(STACK[0x23C]) = v81 - 1389506296;
  a53 = v82;
  LODWORD(STACK[0x238]) = v82 ^ 0x444CD6A5;
  STACK[0x208] = (unint64_t)&a9 - 0x616CC1BE8C72DDC2LL;
  a73 = (char *)&a9 - 0x616CC1BE8C72E22CLL;
  a41 = (char *)&a9 - 0x616CC1BE8C72E17BLL;
  int v84 = STACK[0x43C];
  a51 = LODWORD(STACK[0x43C]) ^ 0x2EE;
  LODWORD(STACK[0x22C]) = v84 ^ 0x3CB;
  LODWORD(STACK[0x228]) = v84 ^ 0xBE2EE1E6;
  LODWORD(STACK[0x224]) = v84 + 1954188012;
  a63 = 1538184505;
  int v85 = 137 * (v84 ^ 0x308);
  LODWORD(STACK[0x2A8]) = v84 ^ 0x3A5;
  LODWORD(STACK[0x2AC]) = v85;
  LODWORD(STACK[0x2A4]) = v85 ^ 0x19A;
  STACK[0x428] = v79 | 0x1AA4E40F087B15E7LL;
  STACK[0x420] = v79 ^ 0x18FE8F3A1BF3175FLL;
  STACK[0x418] = v79 ^ 0x18FE8F3A1BF3175FLL | 0x72F351FF41AF8471LL;
  unint64_t v86 = 1178560073 * ((((2 * v79) | 0x867BA291EAC5F388LL) - v79 + 0x3CC22EB70A9D063CLL) ^ 0xD8C181A04FF681A6LL);
  STACK[0x410] = v86;
  STACK[0x408] = v86 + 3351784209u;
  LODWORD(STACK[0x3F4]) = v84 - 1755162399;
  *(int32x4_t *)&STACK[0x340] = vdupq_n_s32(0x4C58C47Cu);
  *(int32x4_t *)&STACK[0x350] = vdupq_n_s32(0x1316311Fu);
  *(int32x4_t *)&STACK[0x320] = vdupq_n_s32(0x14BC0663u);
  *(int32x4_t *)&STACK[0x330] = vdupq_n_s32(0x262C623Eu);
  uint64_t v87 = 1374699841 * ((2 * (v79 & 0x3A7A47C7450DF978LL) - v79 + 0x4585B838BAF20681LL) ^ 0x4B892634D7061E88LL);
  LODWORD(STACK[0x314]) = v84 - 1943997006;
  a72 = v84 ^ 0x1DB;
  a71 = v84 ^ 0x752u;
  LODWORD(STACK[0x304]) = v84 + 1385094435;
  STACK[0x218] = v84 ^ 0x76Eu;
  a64 = v84 - 1912658780;
  a58 = vdupq_n_s32(0xF8759FFE);
  a56 = v84 - 1359038096;
  a70 = v84 ^ 0x33E;
  a36 = v84 ^ 0x75Au;
  a34 = v84 ^ 0x33C;
  LODWORD(STACK[0x2D0]) = 1104223507;
  STACK[0x430] = 0x616CC1BE8C72E4D2LL;
  a37 = 1221740162;
  STACK[0x318] = v87;
  STACK[0x308] = v87 + 30333862;
  LODWORD(STACK[0x3F0]) = v84 ^ 0x324;
  a55 = v84 + 572697704;
  a47 = v84 ^ 0x723;
  LODWORD(STACK[0x2D4]) = 101847460;
  LODWORD(STACK[0x300]) = 701983352;
  int v88 = (char *)&STACK[0x6B0] + STACK[0x430] + (v83 + 1458) - 0x616CC1BE8C72E4B2LL;
  LODWORD(STACK[0x4EC]) = v80;
  STACK[0x5F0] = (unint64_t)(v88 - 1706);
  int v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76
                                                                     + 8LL
                                                                     * (int)(((*((_DWORD *)*(&off_101826020
                                                                                           + (int)(v83 ^ 0x33))
                                                                               - 2) != 0)
                                                                            * (v83 + 243)) ^ v83));
  STACK[0x2E8] = (unint64_t)*(&off_101826020 + (int)(v83 ^ 0x42));
  STACK[0x380] = (unint64_t)*(&off_101826020 + (int)(v83 ^ 0x78)) - 8;
  STACK[0x2E0] = (unint64_t)*(&off_101826020 + (int)(v83 ^ 0xD6));
  return v89(a1, a2, a3, 2210763814LL);
}

uint64_t sub_10016D354()
{
  unint64_t v5 = ((97 * (v0 ^ 0x77u)) ^ ((v0 ^ 0x38Bu) - 3220LL)) + v1;
  STACK[0x430] = v5;
  STACK[0x530] = v5;
  LODWORD(STACK[0x48C]) = v4;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((232 * (STACK[0x4D8] == 0)) ^ v0)) - 4LL))();
}

uint64_t sub_10016D3B8()
{
  int v5 = 535753261 * ((v4 - 463337055 - 2 * ((v4 - 200) & 0xE4620A69)) ^ 0xEE960446);
  *(void *)(v4 - 160) = STACK[0x2B8];
  *(void *)(v4 - 200) = STACK[0x240];
  int v6 = LODWORD(STACK[0x23C]) ^ v5;
  *(_DWORD *)(v4 - 168) = v0 - v5 + (((v1 + 35) | 0x103) ^ 0xC2C6D08F);
  *(_DWORD *)(v4 - 176) = v6;
  *(_DWORD *)(v4 - 192) = v1 - v5 - 7;
  *(void *)(v4 - 184) = STACK[0x248];
  uint64_t v7 = ((uint64_t (*)(uint64_t))(*(void *)(v3 + 8LL * (int)(v1 & 0x82606C0C)) - 12LL))(v4 - 200);
  int v8 = *(_DWORD *)(v4 - 172);
  LODWORD(STACK[0x48C]) = v8;
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * ((1767 * (v8 == v1 + 2084228634)) ^ v1)))(v7);
}

uint64_t sub_10016D4A4()
{
  LODWORD(STACK[0x300]) = STACK[0x47C];
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((9 * (v0 ^ 3)) | (2
                                                 * (((((9 * (v0 ^ 3) - 532) ^ 0xFFFFFD16) + 9 * (v0 ^ 3) - 238) & v1) != 1662039774)))))();
}

uint64_t sub_10016D4EC()
{
  STACK[0x400] = v2;
  STACK[0x258] = v0;
  int v7 = (v5 ^ 0x6B9) * v1;
  STACK[0x5B0] = 0LL;
  int v8 = 235795823 * ((v6 + 1049346070 - 2 * ((v6 - 200) & 0x3E8BC0DE)) ^ 0xAA268987);
  *(_DWORD *)(v6 - 200) = v8 ^ 0x7FC2082E;
  unint64_t v9 = STACK[0x278];
  *(void *)(v6 - 192) = 0x9466003216229CDLL;
  *(void *)(v6 - 184) = v9;
  *(void *)(v6 - 176) = STACK[0x280];
  *(_DWORD *)(v6 - 164) = v5 - v8 - 257;
  unsigned int v10 = (uint64_t (*)(uint64_t))(*(void *)(v4 + 8LL * (v5 - 1671)) - 4LL);
  STACK[0x288] = (unint64_t)v10;
  uint64_t v11 = v10(v6 - 200);
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8LL
                                            * (((*(_DWORD *)(v6 - 168) == ((v5 + 605312083) & 0xDBEBA7B3) + 2084228430)
                                              * (v7 ^ 0x30C)) ^ v5)))(v11);
}

uint64_t sub_10016D5E4()
{
  STACK[0x2C8] = v3;
  BOOL v4 = LODWORD(STACK[0x56C]) - 510886257 < ((v2 - 291477362) & 0x115F94F7 ^ 0xFFFFF7C8);
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((((v2 ^ 0xA2) * v0) ^ v4) & 1 | (8
                                                                                  * ((((v2 ^ 0xA2) * v0) ^ v4) & 1))) ^ v2)))();
}

uint64_t sub_10016D648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = v5 - ((((v3 + 1296124852) & 0xB2BEB56D ^ 0x319090D) + 2 * v5) & 0x35134EC) - 483057402;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                                          + 8LL
                                                                                          * ((316
                                                                                            * (((2 * v6) & 0xFDF3E37E ^ 0x151206C)
                                                                                             + (v6 ^ 0xFF516BC9)
                                                                                             + 930545525 != 913371444)) ^ (v3 - 724)))
                                                                              - 8LL))( a1,  a2,  a3,  2210763814LL,  913371444LL);
}

uint64_t sub_10016DEBC()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (v2 ^ (109 * ((v1 + v0 + 17174081) < 8))))
                            - ((v2 - 1041) | 0x420u)
                            + 1076LL))();
}

uint64_t sub_10016DF18@<X0>(uint64_t a1@<X8>)
{
}

uint64_t sub_10016DF50()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((v0 < 0x20) ^ (2 * (v1 ^ 0xFD) + 51)) & 1)
                                          * ((19 * ((2 * (v1 ^ 0x6FD)) ^ 0x5AB)) ^ 0x342)) ^ (2 * (v1 ^ 0x6FD))))
                            - 12LL))();
}

uint64_t sub_10016DFB4@<X0>(uint64_t a1@<X8>)
{
  unsigned int v7 = v4 + 17173301 + v3 + v5;
  uint64_t v8 = v1 + v7;
  __int128 v9 = *(_OWORD *)(v8 - 31);
  uint64_t v10 = a1 + v7;
  *(_OWORD *)(v10 - 15) = *(_OWORD *)(v8 - 15);
  *(_OWORD *)(v10 - 31) = v9;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((1035 * ((v2 & 0xFFFFFFE0) == 32)) ^ (v5 - 345))) - 12LL))();
}

void sub_10016E010()
{
}

uint64_t sub_10016E01C()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL * ((197 * ((((v2 + 356) ^ 0x107 ^ (v0 == v1)) & 1) == 0)) ^ (v2 + 356)))
                            - ((v2 - 156898124) & 0x95A134B ^ 0x307LL)))();
}

uint64_t sub_10016E074(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((234
                                          * ((v1 & 0x18) != ((a1 - 2000436585) & 0x773C3B0B ^ (a1 + 1136179407) & 0xBC4743DD ^ 0x11E))) ^ a1))
                            - 12LL))();
}

uint64_t sub_10016E0D8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 - 7 + (v4 + 17173301 + v3 + 779 - v5)) = *(void *)(v1
                                                                                  - 7
                                                                                  + (v4
                                                                                                 + 17173301
                                                                                                 + v3
                                                                                                 + 779
                                                                                                 - v5));
}

void sub_10016E148()
{
}

uint64_t sub_10016E150()
{
}

uint64_t sub_10016E1A0@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W6>, uint64_t a4@<X8>)
{
  *(_BYTE *)(a4 + (v5 + a2)) = *(_BYTE *)(v4 + (v5 + a2));
  return (*(uint64_t (**)(void))(v7 + 8LL * (((v5 - 1 == a1) * a3) ^ (v6 + 543))))();
}

uint64_t sub_10016E1D0()
{
  int v2 = *(uint64_t (**)(void))(v1 + 8LL * ((1501 * (STACK[0x5B0] != 0)) ^ (v0 + 88)));
  STACK[0x2D8] = (unint64_t)*(&off_101826020 + (v0 ^ 0x311));
  return v2();
}

uint64_t sub_10016E220()
{
  uint64_t v5 = v0();
  LODWORD(STACK[0x4EC]) = v3;
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8LL * (int)((((v1 + 977197808) & 0xC5C122BD ^ 0x3B6) * v4) ^ (v1 + 658))))(v5);
}

uint64_t sub_10016E270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LODWORD(STACK[0x538]) = 2;
  STACK[0x578] = 0LL;
  LODWORD(STACK[0x60C]) = 0;
  LODWORD(STACK[0x49C]) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                + 8LL
                                                                                * ((97
                                                                                  * ((v5 & 2) == ((41
                                                                                                 * (((v4 - 161) | 0x84) ^ 0x8F)) ^ 0x30B))) ^ v4)))( a1,  a2,  a3,  a4,  2084229119LL);
}

uint64_t sub_10016E2D8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59)
{
  LODWORD(STACK[0x390]) = 0;
  STACK[0x398] = 0LL;
  STACK[0x298] = v59 + 598;
  uint64_t v61 = (a7 + 1384) | 0x1Bu;
  LODWORD(STACK[0x5CC]) = a59;
  unint64_t v62 = STACK[0x430];
  int v63 = (char *)&STACK[0x6B0] + STACK[0x430] + v61 - 0x616CC1BE8C72E4B2LL;
  STACK[0x2C0] = STACK[0x430] + 4144;
  STACK[0x530] = v62 + 4144;
  STACK[0x210] = (unint64_t)(v63 + 865);
  *(void *)(v63 + 865) = 0x6370646600LL;
  v63[873] = 1;
  STACK[0x430] = STACK[0x4C0];
  STACK[0x3C0] = (unint64_t)&STACK[0x6B0]
               + v62
  STACK[0x3D8] = (unint64_t)(v63 + 874);
  uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v60
                                                                                                + 8LL
                                                                                                * (int)((((_DWORD)v61 == 1567) * (v61 - 1258)) ^ v61));
  STACK[0x3D0] = (unint64_t)*(&off_101826020 + (int)v61 - 1341);
  STACK[0x400] = (unint64_t)*(&off_101826020 + (int)(v61 ^ 0x697));
  STACK[0x3F8] = (unint64_t)*(&off_101826020 + (int)(v61 ^ 0x651)) - 4;
  return v64(a1, a2, a3, a4, a5, a6, 359058754LL);
}

uint64_t sub_10016E2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  LODWORD(STACK[0x4EC]) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v6
                                                                                        + 8LL
                                                                                        * (int)((((v5 + 977197808) & 0xC5C122BD ^ 0x3B6)
                                                                                               * v8) ^ (v5 + 658))))( a1,  a2,  a3,  a4,  a5,  LODWORD(STACK[0x43C]));
}

void sub_10016E380()
{
  STACK[0x378] = v0;
  JUMPOUT(0x10016D2ACLL);
}

uint64_t sub_10016E38C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50)
{
  *(_DWORD *)(v55 + 360) = 1662039775;
  uint64_t v57 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t *, unint64_t, void, uint64_t, unint64_t *, unint64_t *))*(&off_101826020 + (v50 ^ 0x342)))( v53,  2LL,  &STACK[0x538],  STACK[0x5F0],  (v54 - 510884208),  v51,  &STACK[0x578],  &STACK[0x60C]);
  int v59 = ((2 * v57) & 0x75CEF95E) + (v57 ^ 0x3AE77CAF);
  if (v59 == 1256684722)
  {
    LODWORD(STACK[0x4EC]) = -2084203321;
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v52
                                                                                  + 8LL
                                                                                  * (((STACK[0x578] != 0)
                                                                                    * (((LODWORD(STACK[0x43C]) + 337) ^ 0x54F)
                                                                                     + 371)) ^ (LODWORD(STACK[0x43C])
                                                                                              + 337))))( v57,  STACK[0x578],  v58,  2210763814LL);
  }

  else
  {
    int v60 = STACK[0x43C];
    if (v59 == 988249263)
    {
      STACK[0x398] = STACK[0x578];
      LODWORD(STACK[0x390]) = STACK[0x60C];
      JUMPOUT(0x10016E46CLL);
    }

    int v62 = 1178560073 * ((2 * ((v56 - 200) & 0x36413638) - (v56 - 200) + 1237240260) ^ 0xF32AB1A6);
    *(_DWORD *)(v56 - 200) = v62 + v59 - ((2 * v59 - 1976498526) & 0xF8759FFE) + 1095979856;
    *(_DWORD *)(v56 - 196) = v60 - v62 + 44;
    *(void *)(v56 - 192) = a50;
    int v63 = v60;
    uint64_t v64 = sub_1001A5420((_DWORD *)(v56 - 200));
    return (*(uint64_t (**)(uint64_t))(v52
                                              + 8LL
                                              * (((STACK[0x578] != 0) * (((v63 + 337) ^ 0x54F) + 371)) ^ (v63 + 337))))(v64);
  }

uint64_t sub_10016E5A0()
{
  LODWORD(STACK[0x3E8]) = v1;
  int v5 = v0 - 788;
  int v6 = v0 - 2073668071;
  STACK[0x698] = 0xAB98D4823290645DLL;
  LODWORD(STACK[0x444]) = **(_DWORD **)(v3 + 8LL * ((v0 - 788) ^ 0x3D7)) - 519546008;
  int v7 = *(unsigned int **)(v3 + 8LL * ((v0 - 788) ^ 0x319));
  STACK[0x3E0] = (unint64_t)v7;
  uint64_t v8 = *v7;
  int v9 = (v0 - 2073668071) ^ 0x52;
  unint64_t v10 = 1755732067 * ((v4 + 0x46E7E25FCDDEFFCDLL - 2 * ((v4 - 200) & 0x46E7E25FCDDF0095LL)) ^ 0x9B4C45601319BD4ELL);
  *(_DWORD *)(v4 - 176) = v9 + 1755732067 * ((v4 - 841023539 - 2 * ((v4 - 200) & 0xCDDF0095)) ^ 0x1319BD4E);
  int v11 = v6 ^ (1755732067 * ((v4 - 841023539 - 2 * ((v4 - 200) & 0xCDDF0095)) ^ 0x1319BD4E));
  *(_DWORD *)(v4 - 196) = v11 ^ 0x5B;
  *(_DWORD *)(v4 - 160) = (v5 - 1689052281) ^ (1755732067
                                             * ((v4 - 841023539 - 2 * ((v4 - 200) & 0xCDDF0095)) ^ 0x1319BD4E));
  *(void *)(v4 - 192) = v10 + 2068980119;
  *(void *)(v4 - 168) = v8 + v10;
  *(_DWORD *)(v4 - 184) = v11;
  *(_DWORD *)(v4 - 1sub_10000AE14(v1 - 80) = -1755732067 * ((v4 - 841023539 - 2 * ((v4 - 200) & 0xCDDF0095)) ^ 0x1319BD4E);
  uint64_t v12 = ((uint64_t (*)(uint64_t))STACK[0x380])(v4 - 200);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * *(int *)(v4 - 200)) - 8LL))(v12);
}

uint64_t sub_10016E6C4()
{
  STACK[0x3C8] = v0;
  STACK[0x430] = ((uint64_t (*)(unint64_t))STACK[0x3D0])(STACK[0x2B0]);
  int v5 = (*(uint64_t (**)(void))(v3 + 8LL * SLODWORD(STACK[0x2A8])))();
  unsigned int v6 = v5 + 640442942 - ((v5 << LODWORD(STACK[0x2A4])) & v1);
  *uint64_t v4 = v6;
  int v7 = STACK[0x2AC];
  unsigned int v8 = ((v6 >> 30) + 640442942 + (~(v6 >> 30 << ((LODWORD(STACK[0x2AC]) + 100) & 0x5A ^ 0x5B)) | 0xFFFFFFFB) + 1) ^ v6;
  v4[1] = 1812433253 * v8 - ((2 - 670100790 * v8) & v1) + 640442943;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8LL * v7) - 8LL))( 1992328292LL,  2302638938LL,  347LL,  1812433253LL,  3624866506LL);
}

void sub_10016E7A4()
{
}

uint64_t sub_10016E7B4@<X0>(unsigned int a1@<W6>, uint64_t a2@<X7>, char a3@<W8>)
{
  unsigned int v8 = (_BYTE *)(a2 + (v5 - 1236742231));
  unint64_t v10 = 1788641691 * (v9 ^ HIWORD(v9));
  char v11 = *(_BYTE *)(*(void *)(v7 + 8LL * (v4 - 1406)) + (v10 >> 24) - 4) ^ ((v3 ^ a1) >> a3) ^ *(_BYTE *)(*(void *)(v7 + 8LL * ((v4 - 1411) ^ 0xD9)) + (v10 >> 24) - 9) ^ *(_BYTE *)(*(void *)(v7 + 8LL * (v4 - 1407)) + (v10 >> 24) - 7) ^ v10 ^ (127 * BYTE3(v10));
  *unsigned int v8 = v11;
  return (*(uint64_t (**)(void))(v6 + 8LL * ((474 * (v5 - (v11 != 0) == 1236742230)) ^ (v4 - 1411))))();
}

void sub_10016F4E4()
{
}

uint64_t sub_10016F4EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  STACK[0x4A8] = v57;
  STACK[0x4C0] = STACK[0x430];
  STACK[0x628] = *(void *)(v59 + 8LL * v58);
  unint64_t v60 = STACK[0x398];
  STACK[0x530] = (v58 + 707) + STACK[0x2C0] - 667;
  STACK[0x450] = v60;
  if (v60) {
    BOOL v61 = a57 == 0;
  }
  else {
    BOOL v61 = 1;
  }
  int v62 = !v61;
  return (*(uint64_t (**)(uint64_t))(v59 + 8LL * ((459 * v62) ^ (v58 + 1041))))(3058756118LL);
}

uint64_t sub_10016F5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 7 * (v2 ^ 0x4FEu);
  uint64_t v6 = (char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E943LL;
  *(_DWORD *)uint64_t v6 = 27443181;
  *((void *)v6 + 1) = 0LL;
  *((_DWORD *)v6 + 4) = 1927479029;
  *((_DWORD *)v6 + 6) = 510884208;
  *((void *)v6 + 4) = 0LL;
  *(_DWORD *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E91BLL) = 510884208;
  STACK[0x508] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E91BLL;
  *(unint64_t *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E913LL) = 0LL;
  STACK[0x480] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E913LL;
  *(_DWORD *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E90BLL) = 510884208;
  STACK[0x490] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E90BLL;
  *(unint64_t *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E903LL) = 0LL;
  STACK[0x5C0] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E903LL;
  *(_DWORD *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E8FBLL) = 510884208;
  STACK[0x4A0] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E8FBLL;
  *(unint64_t *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E8F3LL) = 0LL;
  STACK[0x570] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E8F3LL;
  v6[88] = 99;
  *(_DWORD *)uint64_t v4 = 27443181;
  *(_OWORD *)(v4 + 4) = 0u;
  *(_DWORD *)(v4 + 20) = 0;
  *(_DWORD *)(v4 + 24) = 510884208;
  *(_DWORD *)(v4 + 28) = 2012221280;
  STACK[0x2F8] = v4 + 28;
  *(_DWORD *)(v4 + sub_1000A7938(v33 - 232) = 2012221280;
  STACK[0x2F0] = v4 + 232;
  *(_OWORD *)(v4 + 436) = 0u;
  *(_OWORD *)(v4 + 4++*(_DWORD *)(v3 + 52) = 0u;
  *(void *)(v4 + 468) = 0LL;
  strcpy((char *)(v4 + 1128), ",,,,,,,,,,,,,,,,,,,,");
  *(_BYTE *)(v4 + 1149) = 0;
  *(_WORD *)(v4 + 1150) = 0;
  *(void *)(v4 + 11++*(_DWORD *)(v3 + 52) = 0LL;
  *(void *)(v4 + 1160) = 0LL;
  *(_OWORD *)(v4 + 1168) = 0u;
  *(_OWORD *)(v4 + 1184) = 0u;
  return ((uint64_t (*)(__n128))(*(void *)(v3
                                                     + 8LL
                                                     * (int)((95
}

uint64_t sub_10016F724@<X0>(uint64_t (*a1)(void)@<X8>)
{
  STACK[0x390] = v2;
  STACK[0x2C0] = v2 - 112;
  STACK[0x530] = v2 - 112;
  STACK[0x430] = *(void *)(v3 + 8LL * (v1 - 647)) - 8LL;
  return a1();
}

uint64_t sub_10016F750(int a1, __n128 a2)
{
  *(_DWORD *)(v6 + 1424) = 1380206569;
  *(_DWORD *)(v6 + 1428) = 1998989808;
  memset((void *)(v6 + 1432), 44, 20);
  *(__n128 *)(v6 + 14++*(_DWORD *)(v3 + 52) = a2;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((((v2 + a1) & v3 ^ 0x60LL) == 16) * v4) ^ v2)) - 8LL))();
}

void sub_10016F7B8()
{
}

uint64_t sub_10016F7C0@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a66 = a7;
  a67 = v69;
  STACK[0x2C0] = a2;
  memset((void *)(v69 + 1516), 44, 20);
  *(void *)(a8 + 96) = v69;
  *(_DWORD *)(v69 + 476) = 987573669;
  STACK[0x3E0] = *(void *)(v68 + 8 * a9) + ((a9 + 1219) ^ 0xFFFFFFFFFFFFFB1BLL);
  unint64_t v70 = STACK[0x530];
  int8x16x4_t v71 = (char *)&a10 + STACK[0x530] - 0x616CC1BE8C72DE02LL;
  STACK[0x390] = STACK[0x530];
  STACK[0x388] = v70 + 432;
  STACK[0x430] = (unint64_t)v71;
  STACK[0x250] = (unint64_t)(v71 + 392);
  STACK[0x3F8] = STACK[0x450];
  a65 = a8;
  STACK[0x398] = a8;
  STACK[0x530] = STACK[0x388];
  LODWORD(STACK[0x514]) = 1550691389;
  LODWORD(STACK[0x3D8]) = -1431498932;
  LODWORD(STACK[0x400]) = -1733672041;
  LODWORD(STACK[0x440]) = 510884208;
  STACK[0x560] = 0LL;
  LODWORD(STACK[0x54C]) = 1730004587;
  *(_DWORD *)STACK[0x430] = 734832852;
  LODWORD(STACK[0x3C0]) = -1450701265;
  LODWORD(STACK[0x3C8]) = 1757648360;
  LODWORD(STACK[0x3E8]) = v67;
  return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 + 8LL * (int)((a9 + 310) ^ 0x6DA)) - (a9 + 1279) + 1307LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,  a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60);
}

uint64_t sub_10016F990()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((((v1 - 732) | 0x528) - 1851) * (v0 == 43950352)) ^ v1))
                            - ((v1 + 993128672) & 0xC4CE0FFD)
                            + 1521LL))();
}

uint64_t sub_10016F9E8()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((((v0 - 1515) | 0x4C) ^ 0xFFFFFE30) & (v1 - 510884205))
                                           - LODWORD(STACK[0x3E8]) == -510884208)
                                          * ((20 * (v0 ^ 0x77C)) ^ 0x127)) ^ v0))
                            - 4LL))();
}

uint64_t sub_10016FA4C()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((((v1 + 851) ^ 0x502) * (v0 == 734832852)) ^ v1)) - 4LL))();
}

uint64_t sub_10016FA88()
{
  BOOL v5 = v1 == 734832852 || LODWORD(STACK[0x54C]) - v2 != 1219120379;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((29 * v5) ^ v0)) - ((155 * (v0 ^ 0x1CF)) ^ 0x4CEu) + 1307LL))();
}

uint64_t sub_10016FAE4()
{
  int v4 = (_DWORD *)STACK[0x430];
  *int v4 = v0 + (v1 ^ 0x4CE) - 1312;
  BOOL v5 = &v4[6 * (v0 - 734832853)];
  int v6 = v5[2];
  STACK[0x3F8] = *((void *)v5 + 2);
  LODWORD(STACK[0x54C]) = v5[6];
  int v7 = *(_DWORD *)(v3 + 48LL * (v6 - 43950353) + 36);
}

uint64_t sub_10016FBB8()
{
  unsigned int v3 = LODWORD(STACK[0x54C]) + ((v0 + 1275556929) & 0xB3F887D1 ^ 0xE57C3862);
  int v4 = (v1 + 774276973 < ((v0 + 734818785) & 0xD4338977) + 1285160839) ^ (v3 < 0x4C9A00DD);
  BOOL v5 = v3 < v1 + 774276973;
  if (v4) {
    BOOL v5 = v1 + 774276973 < ((v0 + 734818785) & 0xD4338977) + 1285160839;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1011 * !v5) ^ v0)) - 12LL))();
}

uint64_t sub_10016FC58@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((35
                                * (*(_DWORD *)(v4
                                             + 48LL
}

uint64_t sub_10016FCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v10 = v5 == a5 && v7 != 281 * (v6 ^ 0x55A) + 43948385;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (int)((773 * v10) ^ v6)) - (v6 ^ 0x551LL)))();
}

uint64_t sub_10016FD2C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((((*(_DWORD *)(v3 + 48LL * (v1 - 43950353) + 40) & 8) == 375 * (v0 ^ 0x7AA) - 1875)
                                * (((v0 ^ 0x7AA) + 774) ^ 0x312)) ^ v0)))();
}

uint64_t sub_10016FD84@<X0>(int a1@<W2>, int a2@<W8>)
{
  int v5 = *(_DWORD *)(v4 + 48LL * v2 + 36);
  BOOL v7 = v5 - 1777622420 > ((a2 - 502) ^ a2 ^ 0xFC ^ 0x18AA418E) || v5 - 1777622420 < SLODWORD(STACK[0x400]);
  int v8 = !v7;
  if (v5 == 43950352) {
    int v8 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((v8 * a1) ^ a2)) - 8LL))();
}

uint64_t sub_10016FDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = v5 - 1031;
  if (v6) {
    int v10 = a5;
  }
  else {
    int v10 = v7;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (((v10 == a5) * (19 * (v9 ^ 0x17F) + 848)) ^ v9)) - 4LL))();
}

void sub_10017062C()
{
}

uint64_t sub_10017063C()
{
  STACK[0x530] = STACK[0x390];
  return ((uint64_t (*)(void))STACK[0x3E0])();
}

uint64_t sub_10017064C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((590 * (v6 == a5 + a6 - 755 - 24)) ^ (a6 - 767))) - 4LL))();
}

void sub_10017067C(int a1@<W8>)
{
  int v2 = (unint64_t *)STACK[0x480];
  STACK[0x398] = STACK[0x2F8];
  STACK[0x3F8] = *v2;
  STACK[0x3E0] = ((((a1 + 871536606) & 0xCC0D6ABD) - 967961297) & 0x39B1ECFF) + *(void *)(v1 + 8LL * a1) - 1255LL;
  JUMPOUT(0x10016F86CLL);
}

uint64_t sub_100170740( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(a67 + 1560) = *(void *)STACK[0x570];
  *(_DWORD *)(a67 + 15++*(_DWORD *)(v3 + 52) = *(_DWORD *)STACK[0x4A0];
  *(void *)(*(void *)(a65 + 96) + 488LL) = *(void *)(a65 + 8);
  *(_DWORD *)(*(void *)(a65 + 96) + 48sub_1000EC398((uint64_t)va, 0LL) = *(_DWORD *)a65;
  *(_BYTE *)(a72 + STACK[0x2C0] + a66) = ((a73 - 124) ^ 0xBA) * (a73 - 107);
  return (*(uint64_t (**)(void))(v73 + 8LL * (a71 ^ 0x1C0)))();
}

void sub_1001707E0()
{
}

uint64_t sub_1001707EC@<X0>(uint64_t a1@<X8>)
{
  STACK[0x580] = a1 + 104;
  uint64_t v4 = (uint64_t (*)(void))STACK[0x628];
  STACK[0x2C0] = v2 - 112;
  STACK[0x530] = v2 - 112;
  STACK[0x430] = *(void *)(v3 + 8LL * (int)(((v1 + 2081289126) & 0x83F20B0B) - 647)) - 8LL;
  return v4();
}

uint64_t sub_100170830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((a6 - 168) ^ (11 * (v6 == a5)))) - STACK[0x218] + 1113))();
}

uint64_t sub_100170860( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  unint64_t v59 = STACK[0x218];
  unsigned int v60 = (STACK[0x218] - 97) | 3;
  STACK[0x518] = 0LL;
  LODWORD(STACK[0x53C]) = 510884208;
  STACK[0x460] = 0LL;
  LODWORD(STACK[0x4FC]) = 510884208;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58
                                                                                          + 8LL
                                                                                          * (int)(v60 | (8 * ((*(_BYTE *)(a58 - 0x248771FDFB9E9BA5LL) - *((_BYTE *)*(&off_101826020 + (int)(v59 ^ 0x4DB)) - 4)) == 241))))
                                                                              - (v60 ^ 0x40FLL)))( 37LL,  433LL,  204LL,  682LL,  2488117716LL);
}

uint64_t sub_100170920()
{
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (v0 ^ ((v1 != 1) * v3))) - (((((v0 - 487) | v4) ^ v2) * v7) ^ v6)))();
}

void sub_100170950()
{
}

uint64_t sub_10017095C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v70
                                                               + 8LL * ((((3 * a69) ^ 0xF6) * (v69 != a5)) ^ (a6 - 333)))
                                                   - 8LL))( 911LL,  328LL);
}

uint64_t sub_1001709AC(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * (int)((((((((v1 + 362241336) & 0xEA68A3FF) + 308) ^ v3) & (2 * v5))
                                                + (v5 ^ v2) == v2)
                                               * a1) ^ (v1 + 362241336) & 0xEA68A3FF))
                            - 8LL))();
}

uint64_t sub_100170A30@<X0>(unsigned int a1@<W1>, int a2@<W6>, uint64_t a3@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((((v3 - 158) ^ a2) * (a3 == 19)) ^ v3)) - (v3 ^ a1) + 467LL))();
}

uint64_t sub_100170A6C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * ((((*(_BYTE *)(a6 + v10)
                                                             - *(_BYTE *)(*(void *)(v9 + 8LL * ((v8 ^ 0x2E0) - 556))
                                                                        - 8LL)) != 241)
                                          * (((((v8 ^ 0x2E0) + a5) & a7 ^ a8) * a1) ^ 0x241)) ^ ((v8 ^ 0x2E0) - 45)))
                            - 12LL))();
}

uint64_t sub_100170B18(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
}

void sub_100170B48()
{
}

uint64_t sub_100170B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
                                        * (int)((148
                                               * ((*(_BYTE *)(a6 + v8)
                                                                  - *(_BYTE *)(*(void *)(v7
                                                                                         + 8LL
                                                                                         * (int)(((v6 + 577740950) & 0xDD905FFF)
                                                                                               - 551))
                                                                             - 12LL)) != 241)) ^ (((v6 + 577740950) & 0xDD905FFF)
                                                                                                + 333)))
                            - 12LL))();
}

uint64_t sub_100170C30(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * (((v3 == ((v2 ^ a2) - 40)) * (19 * (v2 ^ a2) - 239)) ^ v2)))();
}

void sub_100170C5C()
{
}

uint64_t sub_100170C68()
{
  int v2 = (((v0 - 408) | 0x384) - 895) | 0x420;
  uint64_t v3 = ((uint64_t (*)(uint64_t))STACK[0x3D0])(1576LL);
  STACK[0x4E0] = v3;
  return (*(uint64_t (**)(void))(v1 + 8LL * (((v3 != 0) * (v2 - 1051)) ^ v2)))();
}

uint64_t sub_100170D0C()
{
  int v3 = (v2 - 371482832) & 0x16245FFA;
  int v4 = (v3 ^ 0x343) * v0;
  uint64_t v5 = ((uint64_t (*)(uint64_t))STACK[0x3D0])(1576LL);
  STACK[0x640] = v5;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((v4 - 770) * (v5 != 0)) | v3)) - 12LL))();
}

uint64_t sub_100170D6C()
{
}

uint64_t sub_100170DD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v67 = 235795823 * ((v66 - 200) ^ 0x94AD4959);
  *(_DWORD *)(v66 - 200) = v67 ^ 0x7FC2082B;
  *(_DWORD *)(v66 - 164) = v64 - v67 + 861;
  *(void *)(v66 - 184) = a63;
  *(void *)(v66 - 176) = a64;
  *(void *)(v66 - 192) = 0x9466003216229CDLL;
  uint64_t v68 = ((uint64_t (*)(uint64_t))STACK[0x288])(v66 - 200);
  return ((uint64_t (*)(uint64_t))(*(void *)(v65
                                                      + 8LL
                                                      * ((186
}

uint64_t sub_100170E9C@<X0>(int a1@<W8>)
{
  BOOL v4 = v2 == v1 + ((a1 - 1194) ^ 0xBA) - 588;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((v4 | (2 * v4)) ^ (a1 - 207))) - 12LL))();
}

uint64_t sub_100170EE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v68 = 235795823 * ((((v67 - 200) | 0xFD09330A) - ((v67 - 200) & 0xFD09330A)) ^ 0x69A47A53);
  *(_DWORD *)(v67 - 164) = v65 - v68 + 861;
  *(void *)(v67 - 176) = a64;
  *(_DWORD *)(v67 - 200) = v68 ^ 0x7FC20829;
  *(void *)(v67 - 192) = v64;
  *(void *)(v67 - 184) = a63;
  uint64_t v69 = ((uint64_t (*)(uint64_t))STACK[0x288])(v67 - 200);
  return ((uint64_t (*)(uint64_t))(*(void *)(v66
                                                      + 8LL
                                                      * (((((3 * (v65 ^ 0xD1)) ^ (*(_DWORD *)(v67 - 168) == 2084229119)) & 1)
                                                        * ((3 * (v65 ^ 0x2D1)) ^ 0x16D)) ^ v65))
                                          - 4LL))(v69);
}

uint64_t sub_100170FCC@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((v3 == v1 + a1 - 170 - 588) * ((a1 - 287) ^ 0x595)) ^ a1)) - 4LL))();
}

uint64_t sub_100171018( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int v71 = ((v65 & 0xD1AFCDE0 | ~(v65 | 0xD1AFCDE0)) ^ 0xBAFD7B46) * v69;
  *(void *)(v70 - 184) = a63;
  *(void *)(v70 - 176) = a64;
  *(void *)(v70 - 192) = v64;
  *(_DWORD *)(v70 - 200) = v71 ^ 0x7FC2082B;
  *(_DWORD *)(v70 - 164) = v66 - v71 + 861;
  uint64_t v72 = ((uint64_t (*)(uint64_t))STACK[0x288])(v70 - 200);
  return ((uint64_t (*)(uint64_t))(*(void *)(v67
                                                      + 8LL
                                                      * ((186 * (*(_DWORD *)(v70 - 168) != (v66 ^ 0x39B ^ (v68 - 471)))) ^ v66))
                                          - 4LL))(v72);
}

uint64_t sub_1001710CC@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  unsigned int v64 = ((1424150546 - (v57 | 0x54E2D012) + (v57 | 0xAB1D2FED)) ^ 0x3FB066B4) * v61;
  *(_DWORD *)(v63 - 200) = a1 ^ v64;
  *(_DWORD *)(v63 - 164) = v59 - v64 + 978;
  *(void *)(v63 - 192) = v55;
  *(void *)(v63 - 184) = a54;
  *(void *)(v63 - 176) = a55;
  uint64_t v65 = v56(v63 - 200);
  int v66 = *(_DWORD *)(v63 - 168);
  STACK[0x468] = v62;
  return ((uint64_t (*)(uint64_t))(*(void *)(v58
                                                      + 8LL * ((1802 * (v66 == v60 + 3 * (v59 ^ 0x1C0) - 69)) ^ v59))
                                          - (((v59 ^ 0x1C0u) + 756) ^ 0x303LL)))(v65);
}

void sub_100171198()
{
}

uint64_t sub_100171234()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * (((((v0 - 272) | 0x308) + 1221) * (LODWORD(STACK[0x4EC]) != v2)) ^ v0)))();
}

uint64_t sub_100171328()
{
  STACK[0x468] = v2;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((670 * (STACK[0x460] != 0)) ^ (19 * (v0 ^ 0x1FE) + 376))) - 8LL))();
}

uint64_t sub_100171D1C()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1824 * (STACK[0x518] != 0)) ^ (v0 - 613))) - 8LL))();
}

uint64_t sub_100171D4C()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((1036 * (STACK[0x4E0] != 0)) ^ (v0 + 100))))();
}

uint64_t sub_100171D80()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((242 * (STACK[0x640] == 0)) ^ (v0 + 336))))();
}

uint64_t sub_100171DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5
                                                                                 + 8LL
                                                                                 * ((1165
                                                                                   * (v4 == ((v3 - 342403862) & 0x1468AC2F)
                                                                                          + 2084228058)) ^ (v3 - 168)))
                                                                     - 12LL))( a1,  a2,  a3,  2210763814LL);
}

uint64_t sub_100171E04()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1824 * (STACK[0x518] != 0)) ^ (v0 - 613))) - 8LL))();
}

uint64_t sub_100171E2C()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((1036 * (STACK[0x4E0] != 0)) ^ (v0 + 100))))();
}

uint64_t sub_100171E58()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((242 * (STACK[0x640] == 0)) ^ (v0 + 336))))();
}

uint64_t sub_100171E7C()
{
  uint64_t v3 = ((uint64_t (*)(void))STACK[0x2D8])();
  return ((uint64_t (*)(uint64_t))(*(void *)(v2
                                                      + 8LL
                                                      * ((1165 * (v1 == ((v0 - 342403862) & 0x1468AC2F) + 2084228058)) ^ (v0 - 168)))
                                          - 12LL))(v3);
}

uint64_t sub_100171EDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52)
{
  LODWORD(STACK[0x5CC]) = 1538184225;
  LODWORD(STACK[0x618]) = 128;
  int v56 = 1178560073 * ((((v55 - 200) | 0xC385703) - (v55 - 200) + ((v55 - 200) & 0xF3C7A8F8)) ^ 0xB6AC2F61);
  *(_DWORD *)(v55 - 160) = (v53 - 901) ^ v56;
  *(_DWORD *)(v55 - 176) = 2014182846 - v56;
  *(void *)(v55 - 168) = 0LL;
  *(void *)(v55 - 1++*(_DWORD *)(v3 + 52) = 0LL;
  *(void *)(v55 - 144) = a46;
  *(void *)(v55 - 184) = v52 + 0x1F589EA4AC42C079LL;
  *(void *)(v55 - 192) = a52;
  *(void *)(v55 - 136) = v52;
  *(void *)(v55 - 128) = v52 + 0x1F589EA4AC42C189LL;
  uint64_t v57 = ((uint64_t (*)(uint64_t))STACK[0x430])(v55 - 200);
  return (*(uint64_t (**)(uint64_t))(v54
                                            + 8LL
                                            * (v53
                                             + ((*(_DWORD *)(v55 - 200) == ((v53 - 585294074) & 0x22E2DFDF)
                                                                                          + 2084229119
                                                                                          + ((v53 + 1331204048) & 0x30A76CCF)
                                                                                          - 976) << 9))))(v57);
}

uint64_t sub_10017200C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = v1 + 127 - a1;
  int8x16_t v5 = vrev64q_s8(*(int8x16_t *)(v4 - 15));
  int8x16_t v6 = vextq_s8(v5, v5, 8uLL);
  int8x16_t v7 = vrev64q_s8(*(int8x16_t *)(v4 - 31));
  int8x16_t v8 = vextq_s8(v7, v7, 8uLL);
  unint64_t v9 = STACK[0x298] + 127 - a1;
  v10.i64[0] = 0x5858585858585858LL;
  v10.i64[1] = 0x5858585858585858LL;
  int8x16_t v11 = vmvnq_s8(vandq_s8(vaddq_s8(v6, v6), v10));
  int8x16_t v12 = vmvnq_s8(vandq_s8(vaddq_s8(v8, v8), v10));
  v10.i64[0] = 0x2D2D2D2D2D2D2D2DLL;
  v10.i64[1] = 0x2D2D2D2D2D2D2D2DLL;
  int8x16_t v13 = vrev64q_s8(vaddq_s8(vaddq_s8(v6, v10), v11));
  *(int8x16_t *)(v9 - 15) = vextq_s8(v13, v13, 8uLL);
  int8x16_t v14 = vrev64q_s8(vaddq_s8(vaddq_s8(v8, v10), v12));
  *(int8x16_t *)(v9 - 31) = vextq_s8(v14, v14, 8uLL);
  LODWORD(v9) = a1 + ((v2 - 220232230) & 0xD207D69) == 1129;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((4 * (_DWORD)v9) | (8 * (_DWORD)v9)) ^ v2)) - 12LL))();
}

uint64_t sub_1001720C0()
{
  LODWORD(STACK[0x4EC]) = v1;
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (((((v0 - 8) ^ ((*(_DWORD *)(STACK[0x2C8] + 360)
                                                                              - 1662039775) < 0xFFFFFFFE)) & 1)
                                * (((v0 - 1032) ^ 0x30A) - 730)) ^ v0)))();
}

uint64_t sub_100172108@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>)
{
  unint64_t v10 = STACK[0x390];
  int8x16_t v11 = (char *)&STACK[0x6B0] + STACK[0x390] - 0x616CC1BE8C72E4B2LL;
  STACK[0x528] = (unint64_t)(v11 - 1824);
  STACK[0x3F8] = (unint64_t)(v11 - 1596);
  LODWORD(STACK[0x59C]) = 1675009439;
  STACK[0x530] = v10 + 178 * (a9 ^ 0x30Fu) - 904;
  STACK[0x620] = 0LL;
  LODWORD(STACK[0x4D0]) = 510884208;
  int8x16_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 8LL * ((a9 + 167) ^ (1932 * (v11 != (char *)1576)))) - 4LL);
  STACK[0x400] = (unint64_t)(v11 - 1824);
  return v12(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10017227C()
{
  *(_DWORD *)(v3 - 200) = v1
                        + 628203409 * (((v3 - 200) & 0x8F7154F5 | ~((v3 - 200) | 0x8F7154F5)) ^ 0xF206A739)
                        - 231789502;
  nullsub_10(v3 - 200);
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(v2
                                     + 8LL
  return v4();
}

uint64_t sub_10017232C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2
                                                              + 8LL
                                                              * ((1776
                                                                * (*(void *)(v3 + 8LL * ((v1 ^ 0x1DF) - 731))
                                                                 - 12LL
                                                                 - ((((v1 ^ 0x1DF) - 189) ^ 0x7BDu)
                                                                  + a1
                                                                  + (unint64_t)(((v1 ^ 0x1DF) - 189) | 0xA1u))
                                                                 + 2274 > 0x1F)) ^ v1 ^ 0x1DF)))( 3576839688LL,  718126875LL,  580LL);
}

uint64_t sub_1001723BC@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = ((v5 + a1) & a2 ^ a3) - v4;
  int8x16_t v10 = vrev64q_s8(*(int8x16_t *)(a4 + v9 - 15));
  int8x16_t v11 = vextq_s8(v10, v10, 8uLL);
  int8x16_t v12 = vrev64q_s8(*(int8x16_t *)(a4 + v9 - 31));
  int8x16_t v13 = vextq_s8(v12, v12, 8uLL);
  uint64_t v14 = v8 + v9;
  v15.i64[0] = 0x5858585858585858LL;
  v15.i64[1] = 0x5858585858585858LL;
  v16.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v16.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  int8x16_t v17 = vrev64q_s8(vaddq_s8(vsubq_s8(v11, vandq_s8(vaddq_s8(v11, v11), v15)), v16));
  *(int8x16_t *)(v14 - 15) = vextq_s8(v17, v17, 8uLL);
  int8x16_t v18 = vrev64q_s8(vaddq_s8(vsubq_s8(v13, vandq_s8(vaddq_s8(v13, v13), v15)), v16));
  *(int8x16_t *)(v14 - 31) = vextq_s8(v18, v18, 8uLL);
  return (*(uint64_t (**)(void))(v7 + 8LL * (((v4 == 288) * v6) ^ v5)))();
}

uint64_t sub_100172448@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = (v2 - 320);
  int8x8_t v8 = vrev64_s8(*(int8x8_t *)(a1 + v7 - 7));
  *(int8x8_t *)(v4 - 7 + v7) = vrev64_s8(vadd_s8(vsub_s8(v8, vand_s8(vadd_s8(v8, v8), v5)), v6));
  return (*(uint64_t (**)(void))(v3 + 8LL * ((448 * (v1 & 1)) ^ (v1 - 16))))();
}

uint64_t sub_1001724B0@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v7 + (v3 + v4)) = v2
                                           - 108
                                           + *(_BYTE *)(a2 + (v3 + v4))
  return (*(uint64_t (**)(void))(v6 + 8LL * (((v3 - 1 != a1) * v5) ^ v2)))();
}

uint64_t sub_1001724F0()
{
  STACK[0x550] = v3;
  *(void *)(v0 - 208) = 0xD3D3D3D3D3D3D3D3LL;
  *(void *)(v0 - 200) = 0x2C2C2C2C2A2C2C3ELL;
  int v6 = ((2 * ((v5 - 200) & 0x4BBEC6C8) - (v5 - 200) - 1270793930) ^ 0x20EC706F) * v4;
  *(_DWORD *)(v5 - 196) = v6 - 807439497;
  *(_DWORD *)(v5 - 192) = v1 - v6 + 1064655780;
  nullsub_10(v5 - 200);
  LODWORD(STACK[0x478]) = 510884544;
  uint64_t v7 = ((uint64_t (*)(uint64_t))STACK[0x3D0])(336LL);
  STACK[0x4B8] = v7;
  return (*(uint64_t (**)(void))(v2 + 8LL * (((((v1 + 124) ^ (v7 == 0)) & 1) * (v1 - 874)) ^ v1)))();
}

uint64_t sub_1001725B4(unint64_t a1)
{
  STACK[0x530] = STACK[0x390] + ((2 * (v1 + 33)) ^ 0x4E2u) - 1074;
  STACK[0x458] = a1;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((v1 + 33) ^ (1483 * (v3 > a1)))) - 12LL))();
}

uint64_t sub_10017264C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8)
{
  *(_BYTE *)(a1 + (v12 + a8)) = *(_BYTE *)(v10 + ((v12 + a8) & 0xFLL)) ^ *(_BYTE *)(v14
                                                                                                + (v12 + a8)) ^ ((v11 ^ a6) - 28) ^ *(_BYTE *)(v8 + ((v12 + a8) & 0xFLL)) ^ *(_BYTE *)(((v12 + a8) & 0xFLL) + v9 + 2) ^ (((v12 + a8) & 0xF) * a7);
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((1529 * ((v12 + 1 + a8) < 0x150)) ^ v11)) - 12LL))();
}

uint64_t sub_1001726B4@<X0>( uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, char a4@<W4>, char a5@<W6>, int a6@<W8>)
{
  uint64_t v12 = (a6 + 710 + v9 + a2);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(v11 + v12) ^ *(_BYTE *)(v8 + (v12 & 0xF)) ^ *(_BYTE *)(v6 + (v12 & 0xF)) ^ *(_BYTE *)((v12 & 0xF) + v7 + 2) ^ ((v12 & 0xF) * a5) ^ a4;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((50 * (v9 - 1 != a3)) ^ a6)) - 12LL))();
}

uint64_t sub_100172718@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, int8x16_t a37)
{
  __int128 v41 = (int8x16_t *)((char *)&STACK[0x6B0] + v38 + (a8 ^ 0x9E933E41738D190CLL));
  int8x16_t *v41 = veorq_s8(*v39, a37);
  STACK[0x648] = (v37 ^ 0x59Du) + STACK[0x648] - 949;
  STACK[0x650] = a1;
  STACK[0x658] = a1;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 + 8LL * (v37 ^ (159 * (v41 == (int8x16_t *)a1)))) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t sub_100172794@<X0>( unsigned __int8 *a1@<X0>, char a2@<W4>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v58 = (unsigned __int8 *)&STACK[0x19B0] + a3;
  *uint64_t v58 = *a1;
  *(void *)(v58 + 1) = *(void *)(a1 + 1);
  *(_DWORD *)(v58 + 9) = *(_DWORD *)(a1 + 9);
  *(_WORD *)(v58 + 13) = *(_WORD *)(a1 + 13);
  v58[15] = a1[15];
  uint64_t v59 = *((void *)a1 + 1);
  *((void *)v58 + 2) = *(void *)a1;
  *((void *)v58 + 3) = v59;
  int v60 = (v54 - 1276394614) & 0x4C143FBC;
  uint64_t v61 = *(void *)(v56 + 8LL * (v54 - 871)) - 12LL;
  uint64_t v62 = *(void *)(v56 + 8LL * (v54 - 971)) - 12LL;
  uint64_t v63 = *(void *)(v56 + 8LL * (v54 ^ 0x370));
  int v64 = *(unsigned __int8 *)(v63 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 14) ^ 0x86LL));
  unsigned __int8 v65 = v64 ^ 0x67 ^ (v64 << ((((v54 - 118) & 0xBC) - 24) & 0xFC));
  LOBYTE(v64) = *(_BYTE *)(v63 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 10) ^ 0xCBLL));
  uint64_t v66 = *(void *)(v56 + 8LL * (v54 - 902)) - 4LL;
  unsigned int v67 = *(unsigned __int8 *)(v66 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 1) ^ 0x1ALL));
  int v68 = ((((v67 ^ 0x87) + (v67 & 0xD5 ^ 0x7A) + 1) ^ v67 & 0xDF) >> 4) ^ (v67 >> 1);
  int v69 = ((v58[3] ^ 0xB8) + *(_BYTE *)(v61 + (v58[3] ^ 0x54LL)) - 76) | (((v67 ^ ((v68 ^ a2) - 2 * ((v68 ^ a2) & 0x26 ^ v68 & 2) + 36)) ^ 0x60) << 16);
  LODWORD(v59) = (((*(unsigned __int8 *)(v62 + (v58[8] ^ 0x65LL)) + (v58[8] ^ 0x34) - 59) ^ 0xF5) << 24) | (((v64 ^ (16 * v64)) ^ 0xAB) << 8) | ((v58[11] ^ 0x3E) + *(_BYTE *)(v61 + (v58[11] ^ 0xD2LL)) - 76);
  LOBYTE(v67) = *(_BYTE *)(v63 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 6) ^ 0x2ELL));
  unsigned int v70 = *(_BYTE *)(v66 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 13) ^ 0x5BLL)) ^ 0x52;
  int v71 = ((v58[7] ^ 0x90) + *(_BYTE *)(v61 + (v58[7] ^ 0x7CLL)) - 76) | ((((v58[4] ^ 0x13)
  int v72 = *(unsigned __int8 *)(v66 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 13) ^ 0x5BLL)) ^ 0x52 ^ (v70 >> 4) ^ (v70 >> 1);
  int v73 = (unsigned __int16)(v65 << 8) | ((v72 - ((2 * v72) & 0x2E) + 23) << 16);
  LOBYTE(v72) = *(_BYTE *)(v66 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 5) ^ 0xEDLL));
  int v74 = ((v72 ^ 0x52) >> 4) ^ ((v72 ^ 0x52) >> 1);
  uint64_t v325 = v66;
  uint64_t v327 = v62;
  uint64_t v328 = v61;
  LODWORD(v59) = v59 & 0xFF00FFFF | (((*(_BYTE *)(v66 + (v58[9] ^ 0x38LL)) ^ ((*(_BYTE *)(v66 + (v58[9] ^ 0x38LL)) ^ 0x52) >> 4) ^ ((*(_BYTE *)(v66 + (v58[9] ^ 0x38LL)) ^ 0x52) >> 1)) ^ 0xF9) << 16);
  uint64_t v326 = v63;
  unsigned int v75 = v69 & 0xFFFF00FF | (((*(unsigned __int8 *)(v62 + (*v58 ^ 0x81LL)) + (*v58 ^ 0xD0) - 59) ^ 0x3C) << 24) | (((*(_BYTE *)(v63 + (v58[2] ^ 0x22LL)) ^ (16 * *(_BYTE *)(v63 + (v58[2] ^ 0x22LL)))) ^ 0x99) << 8);
  LODWORD(STACK[0x3E8]) = (v73 & 0xFFFFFF00 | ((((v58[12] ^ 0x13) + *(unsigned __int8 *)(v62 + (v58[12] ^ 0x42LL)) - 59) ^ 0xE6) << 24) | (*(_BYTE *)(v61 + (v58[15] ^ 0x38LL)) + (v58[15] ^ 0xD4) - 76)) ^ 0x881F266E;
  LODWORD(STACK[0x3C0]) = v75 ^ 0x6B1FA472;
  LODWORD(STACK[0x2C0]) = (v71 & 0xFF00FFFF | ((v72 ^ 0x6C ^ (v74
                                                                                              - ((2 * v74) & 0x22)
                                                                                              + 17)) << 16)) ^ 0x9D0B1E0;
  unint64_t v76 = STACK[0x650];
  LODWORD(STACK[0x3C8]) = v59 ^ 0xDCF9E3EC;
  unsigned int v323 = (_BYTE *)STACK[0x658];
  unint64_t v324 = v76;
  STACK[0x3E0] = 14LL;
  unsigned int v77 = (unsigned __int8 *)v76;
  uint64_t v78 = v63;
  LODWORD(v58) = *(unsigned __int8 *)(v63 + (*(unsigned __int8 *)(v76 + 14) ^ 0xD9LL));
  STACK[0x2F0] = 4LL;
  LODWORD(v335) = (v60 - 1479) | 0x280;
  HIDWORD(a12) = (v60 - 39426023) & 0x25993DB;
  uint64_t v79 = *(unsigned __int8 *)(v76 + 4);
  int v80 = (((v335 + 124) ^ HIDWORD(a12) ^ (16 * (_DWORD)v58))
       - ((2 * ((v335 + 124) ^ HIDWORD(a12) ^ (16 * (_DWORD)v58))) & 0xFFFFFFA0)
       + 84) ^ v58;
  LOBYTE(v76) = *(_BYTE *)(v62 + (v79 ^ 0xE6));
  STACK[0x430] = 15LL;
  int v81 = v77[15];
  unsigned __int8 v82 = v76 + (v79 ^ 0xB7) - 59;
  if ((v81 & 0x20) != 0) {
    int v83 = -32;
  }
  else {
    int v83 = 32;
  }
  int v341 = *(unsigned __int8 *)(v61 + ((v83 + v81) ^ 0xDDLL)) + ((v83 + v81) ^ v57);
  STACK[0x3D8] = 6LL;
  int v84 = *(unsigned __int8 *)(v63 + (v77[6] ^ 0x51LL));
  STACK[0x388] = 12LL;
  STACK[0x288] = 0LL;
  HIDWORD(v85) = v84 ^ (((16 * v84) ^ 0x40) - ((2 * ((16 * v84) ^ 0x40)) & 0xFFFFFFBF) + 84) ^ 0x3F;
  LODWORD(v85) = BYTE4(v85) & 0xF8;
  unint64_t v86 = ((v85 >> 3) | ((unint64_t)(v82 ^ 0xE5u) << 13)) ^ 0x58F620A6;
  int v87 = (v86 >> 21) | ((_DWORD)v86 << 11);
  int v339 = *(unsigned __int8 *)(v62 + (v77[12] ^ 0xF7) - 2 * ((v77[12] ^ 0xF7) & 0xAEu) + 174) - (v77[12] ^ 0xF7);
  uint64_t v88 = *v77;
  int v89 = v88 ^ 0x76;
  LODWORD(v88) = *(unsigned __int8 *)(v62 + (v88 ^ 0xD8));
  STACK[0x390] = 3LL;
  uint64_t v90 = v77[3];
  int v91 = v88 + v89 - 2 * v89;
  STACK[0x398] = 8LL;
  int v338 = (v90 ^ 0xFFFFFFBB) + *(unsigned __int8 *)(v61 + (v90 ^ 0x57));
  LOBYTE(v88) = (v77[8] ^ 0xA7) + *(_BYTE *)(v62 + (v77[8] ^ 0xF6LL));
  char v336 = v88 - ((2 * v88 + 10) & 0x4E);
  STACK[0x2F8] = 7LL;
  LOBYTE(v89) = (v77[7] ^ 0xE9) + *(_BYTE *)(v61 + (v77[7] ^ 5LL));
  STACK[0x210] = 13LL;
  int v92 = *(unsigned __int8 *)(v325 + (v77[13] ^ 0x12LL));
  unsigned int v93 = v92 ^ ((((v92 ^ 0x52u) >> 3) & 4 ^ v92 & 0xA4 | ((v92 ^ 0x52u) >> 3) & 0xFFFFFFFB ^ (v92 ^ 0x52) & 0x5A) >> 1);
  LOBYTE(v92) = *(_BYTE *)(v325 + (v77[5] ^ 0x9CLL));
  LODWORD(v90) = ((v92 ^ 0x52) >> 4) ^ ((v92 ^ 0x52) >> 1);
  int v94 = (v89 - 76) | ((v92 ^ 0xE6 ^ (v90 - ((2 * v90) & 0x22) + 17)) << 16);
  int v95 = *(unsigned __int8 *)(v325 + (v77[9] ^ 0x76LL));
  LOBYTE(v90) = ~(v95 & 8) + 2 * (v95 & 8);
  unsigned int v96 = (v95 ^ 0x52u) >> 3;
  char v97 = v90 + 16;
  char v98 = 14 - v90;
  LODWORD(STACK[0x250]) = -1605674332;
  int v99 = v95 ^ ((((v96 + v97 - 15) ^ (v95 ^ 0x52) & 0xF7) & 0xFE) >> 1);
  unsigned int v100 = *(_BYTE *)(v325 + (v77[1] ^ 0xCFLL)) ^ 0x52;
  int v101 = *(unsigned __int8 *)(v325 + (v77[1] ^ 0xCFLL)) ^ 0x52 ^ (v100 >> 4) ^ (v100 >> 1);
  char v102 = *(_BYTE *)(v63 + (v77[10] ^ 0xFBLL));
  uint64_t v103 = *(void *)(v56 + 8LL * (v60 ^ 0x7DF)) - 4LL;
  LODWORD(v333) = (v102 ^ (16 * v102)) ^ 0xAD;
  int v104 = *(_DWORD *)(v103 + 4LL * ((v102 ^ (16 * v102)) ^ 0x22u));
  HIDWORD(v105) = v104 ^ 0xE4F2;
  LODWORD(v105) = v104 ^ 0x44A30000;
  uint64_t v106 = *(void *)(v56 + 8LL * (v60 ^ 0x78E)) - 4LL;
  int v107 = *(_DWORD *)(v106 + 4LL * (v93 ^ 0x27));
  LODWORD(a28) = v60;
  LODWORD(v332) = v91 - 60;
  uint64_t v108 = *(void *)(v56 + 8LL * (v60 - 1730)) - 12LL;
  int v109 = (v105 >> 16) ^ *(_DWORD *)(v108 + 4LL * ((v91 - 60) ^ 0xF9u)) ^ (16 * (v107 ^ 0x1F91C58E)
                                                                                         + 1352758830
                                                                                         - ((32 * (v107 ^ 0x1F91C58E)) & 0xA142EC40));
  HIDWORD(v332) = v94 ^ v87;
  unsigned int v110 = v94 ^ v87 ^ 0xDD03A24B;
  uint64_t v111 = *(void *)(v56 + 8LL * (v60 ^ 0x7C9));
  unsigned int v112 = *(_DWORD *)(v111 + 4LL * ((v94 ^ v87) ^ 0x78u)) ^ v107 ^ (v109
                                                                                  + 265010019
                                                                                  - ((2 * v109) & 0x1F9776C6));
  HIDWORD(v335) = v80;
  int v113 = *(_DWORD *)(v103 + 4LL * (v80 ^ 0x71u));
  HIDWORD(v105) = v113 ^ 0xE4F2;
  LODWORD(v105) = v113 ^ 0x44A30000;
  HIDWORD(v333) = v101;
  int v114 = *(_DWORD *)(v106 + 4LL * (v101 ^ 0xBFu)) ^ 0x1F91C58E;
  int v115 = (v105 >> 16) ^ (16 * v114 + 1352758830 - ((32 * v114) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * HIBYTE(v110));
  HIDWORD(v331) = (*(_BYTE *)(v61 + (v77[11] ^ 0x12LL)) + (v77[11] ^ 0xFE) - 76);
  int v116 = *(_DWORD *)(v111 + 4LL * (HIDWORD(v331) ^ 0xB9u)) ^ v114 ^ (v115 + 265010019 - ((2 * v115) & 0x1F9776C6));
  unsigned int v117 = *(unsigned __int8 *)(v78 + (v77[2] ^ 0x26LL)) ^ 0xFFFFFFEC;
  LODWORD(v331) = v117 ^ (16 * v117);
  int v118 = *(_DWORD *)(v103 + 4LL * (v331 ^ 0xFBu));
  HIDWORD(v105) = v118 ^ 0xE4F2;
  LODWORD(v105) = v118 ^ 0x44A30000;
  int v119 = *(_DWORD *)(v106 + 4LL * BYTE2(v110)) ^ 0x1F91C58E;
  LODWORD(v330) = (v336 - 20);
  int v120 = (v105 >> 16) ^ *(_DWORD *)(v108 + 4LL * (v330 ^ 0x40)) ^ (16 * v119
                                                                               + 1352758830
                                                                               - ((32 * v119) & 0xA142EC40));
  HIDWORD(v330) = v341 - 76;
  unsigned int v121 = *(_DWORD *)(v111 + 4LL * ((v341 - 76) ^ 0xEBu)) ^ v119 ^ (v120
                                                                                  + 265010019
                                                                                  - ((2 * v120) & 0x1F9776C6));
  unint64_t v334 = __PAIR64__(v93, v99);
  int v122 = *(_DWORD *)(v106 + 4LL * (v99 ^ 0x2Eu)) ^ 0x1F91C58E;
  int v123 = *(_DWORD *)(v103 + 4LL * (BYTE1(v87) ^ 0x31u));
  HIDWORD(v105) = v123 ^ 0xE4F2;
  LODWORD(v105) = v123 ^ 0x44A30000;
  HIDWORD(v329) = v339 - 60;
  int v124 = (v105 >> 16) ^ *(_DWORD *)(v108 + 4LL * ((v339 - 60) ^ 0xF7u)) ^ (16 * v122
                                                                                          + 1352758830
                                                                                          - ((32 * v122) & 0xA142EC40));
  LODWORD(v329) = v338 - 76;
  unsigned int v125 = *(_DWORD *)(v111 + 4LL * ((v338 - 76) ^ 0x33u)) ^ v122 ^ (v124
                                                                                  + 265010019
                                                                                  - ((2 * v124) & 0x1F9776C6));
  int v126 = *(_DWORD *)(v103 + 4LL * (BYTE1(v121) ^ 0xF4u));
  HIDWORD(v105) = v126 ^ 0xE4F2;
  LODWORD(v105) = v126 ^ 0x44A30000;
  int v127 = *(_DWORD *)(v106 + 4LL * (BYTE2(v125) ^ 0xBBu)) ^ 0x1F91C58E;
  unsigned __int8 v128 = BYTE1(v116) ^ 0xAD;
  unsigned int v129 = v127 ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v112) ^ 0x48)) ^ *(_DWORD *)(v111
                                                                            + 4LL * (v116 ^ 0xDBu)) ^ (16 * v127 + 1352758830 - ((32 * v127) & 0xA142EC40)) ^ (v105 >> 16);
  int v130 = *(_DWORD *)(v106 + 4LL * (BYTE2(v112) ^ 0x7Du));
  int v131 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v125 ^ 0x22E) >> 8));
  HIDWORD(v105) = v131 ^ 0xE4F2;
  LODWORD(v105) = v131 ^ 0x44A30000;
  int v132 = (16 * (v130 ^ 0x1F91C58E) + 1352758830 - ((32 * (v130 ^ 0x1F91C58E)) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v116 ^ 0xF15ADDBu) >> 24)) ^ (v105 >> 16);
  unsigned int v133 = *(_DWORD *)(v111 + 4LL * (v121 ^ 0x80u)) ^ v130 ^ (v132 + 265010019 - ((2 * v132) & 0x1F9776C6));
  int v134 = *(_DWORD *)(v106 + 4LL * (BYTE2(v116) ^ 0xD6u)) ^ 0x1F91C58E;
  int v135 = *(_DWORD *)(v103 + 4LL * (BYTE1(v112) ^ 0x23u));
  HIDWORD(v105) = v135 ^ 0xE4F2;
  LODWORD(v105) = v135 ^ 0x44A30000;
  unsigned int v136 = (16 * v134 + 1352758830 - ((32 * v134) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v121) ^ 0x19));
  int v137 = *(_DWORD *)(v103 + 4LL * v128);
  unsigned int v138 = *(_DWORD *)(v111 + 4LL * (v125 ^ 0x2Eu)) ^ v134 ^ (v105 >> 16) ^ (v136
                                                                                          + 265010019
                                                                                          - ((2 * v136) & 0x1F9776C6));
  HIDWORD(v105) = v137 ^ 0xE4F2;
  LODWORD(v105) = v137 ^ 0x44A30000;
  int v139 = *(_DWORD *)(v106 + 4LL * (BYTE2(v121) ^ 0x32u));
  int v140 = (v105 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v125) ^ 0xBD)) ^ (16 * (v139 ^ 0x1F91C58E)
                                                                         + 1352758830
                                                                         - ((32 * (v139 ^ 0x1F91C58E)) & 0xA142EC40));
  int v141 = v139 ^ *(_DWORD *)(v111 + 4LL * (v112 ^ 0x2Eu)) ^ 0x6E58134A ^ (v140
                                                                                        + 265010019
                                                                                        - ((2 * v140) & 0x1F9776C6));
  unsigned int v142 = v141
       - ((2 * v141) & 0x5F186BF6)
       + 797718011
       - ((2 * (v141 - ((2 * v141) & 0x5F186BF6) + 797718011)) & 0x9ADF7E94)
       + 1299169098;
  int v143 = *(_DWORD *)(v106 + 4LL * (BYTE2(v142) ^ 0xACu));
  BYTE2(v125) = BYTE2(v138) ^ 0xEB;
  int v144 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v138 ^ 0xDFF9) >> 8));
  unsigned int v145 = (16 * (v143 ^ 0x1F91C58E) + 1352758830 - ((32 * (v143 ^ 0x1F91C58E)) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v129) ^ 0x99)) ^ (((v144 ^ 0x44A3E4F2u) >> (v129 & 0x10) >> (v129 & 0x10 ^ 0x10)) + ((v144 << 16) ^ 0xE4F20000));
  unsigned int v146 = *(_DWORD *)(v111 + 4LL * (v133 ^ 0x57u)) ^ v143 ^ (v145 + 265010019 - ((2 * v145) & 0x1F9776C6));
  LOWORD(v135) = v129 ^ 0x6F43;
  int v147 = *(_DWORD *)(v106 + 4LL * ((v129 ^ 0x70916F43) >> 16)) ^ 0x1F91C58E;
  int v148 = *(_DWORD *)(v103 + 4LL * (BYTE1(v142) ^ 0x2Cu));
  HIDWORD(v105) = v148 ^ 0xE4F2;
  LODWORD(v105) = v148 ^ 0x44A30000;
  int v149 = (16 * v147 + 1352758830 - ((32 * v147) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v133) ^ 0x54)) ^ (v105 >> 16);
  int v150 = *(_DWORD *)(v108 + 4LL * (HIBYTE(v138) ^ 5));
  HIDWORD(v105) = v150 ^ 0x22E;
  LODWORD(v105) = v150 ^ 0x50A17400;
  int v151 = v105 >> 10;
  int v152 = *(_DWORD *)(v111 + 4LL * (v138 ^ 0xF9u)) ^ v147;
  int v153 = *(_DWORD *)(v103 + 4LL * BYTE1(v135));
  HIDWORD(v105) = v153 ^ 0xE4F2;
  LODWORD(v105) = v153 ^ 0x44A30000;
  unsigned int v154 = v152 ^ (v149 + 265010019 - ((2 * v149) & 0x1F9776C6));
  int v155 = *(_DWORD *)(v106 + 4LL * (BYTE2(v133) ^ 0xA4u)) ^ 0x1F91C58E;
  int v156 = v151 ^ 0x25EB099C;
  unsigned int v157 = (v151 ^ 0x25EB099Cu) >> 22;
  int v158 = (v156 << 10) ^ (16 * v155) ^ v157;
  int v159 = *(_DWORD *)(v111 + 4LL * (v142 ^ 0x79u)) ^ v155 ^ (v105 >> 16);
  int v160 = *(_DWORD *)(v103 + 4LL * (BYTE1(v133) ^ 8u));
  HIDWORD(v105) = v160 ^ 0xE4F2;
  LODWORD(v105) = v160 ^ 0x44A30000;
  int v161 = v159 ^ (v158 + 265010019 - 2 * (v158 & 0xFCBBB6B ^ v157 & 8));
  int v162 = *(_DWORD *)(v106 + 4LL * BYTE2(v125)) ^ 0x1F91C58E;
  int v163 = (v105 >> 16) ^ (16 * v162 + 1352758830 - ((32 * v162) & 0xA142EC40)) ^ *(_DWORD *)(v108
                                                                                          + 4LL * (HIBYTE(v142) ^ 0xA4));
  unsigned int v164 = *(_DWORD *)(v111 + 4LL * (v135 ^ 0x33u)) ^ v162 ^ (v163 + 265010019 - ((2 * v163) & 0x1F9776C6));
  int v165 = *(_DWORD *)(v106 + 4LL * (BYTE2(v164) ^ 0x62u)) ^ 0x1F91C58E;
  unsigned int v166 = (16 * v165 + 1352758830 - ((32 * v165) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v146) ^ 0xC2));
  unsigned __int8 v167 = BYTE2(v161) ^ 0xF7;
  int v168 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v161 ^ 0xE4A6) >> 8));
  HIDWORD(v105) = v168 ^ 0xE4F2;
  LODWORD(v105) = v168 ^ 0x44A30000;
  unsigned int v169 = *(_DWORD *)(v111 + 4LL * (v154 ^ 0x68u)) ^ v165 ^ (v105 >> 16) ^ (v166
                                                                                          + 265010019
                                                                                          - ((2 * v166) & 0x1F9776C6));
  int v170 = *(_DWORD *)(v106 + 4LL * (BYTE2(v146) ^ 0xCAu)) ^ 0x1F91C58E;
  int v171 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v164 ^ 0x2957) >> 8));
  HIDWORD(v105) = v171 ^ 0xE4F2;
  LODWORD(v105) = v171 ^ 0x44A30000;
  int v172 = (16 * v170 + 1352758830 - ((32 * v170) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v154) ^ 0xCE)) ^ (v105 >> 16);
  unsigned int v173 = *(_DWORD *)(v111 + 4LL * (v161 ^ 0x15u)) ^ v170 ^ (v172 + 265010019 - ((2 * v172) & 0x1F9776C6));
  int v174 = *(_DWORD *)(v106 + 4LL * (BYTE2(v154) ^ 0x60u)) ^ 0x1F91C58E;
  int v175 = *(_DWORD *)(v103 + 4LL * (BYTE1(v146) ^ 0x5Eu));
  HIDWORD(v105) = v175 ^ 0xE4F2;
  LODWORD(v105) = v175 ^ 0x44A30000;
  int v176 = (16 * v174 + 1352758830 - ((32 * v174) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v161 ^ 0xF1F7E4A6) >> 24)) ^ (v105 >> 16);
  int v177 = *(_DWORD *)(v111 + 4LL * (v164 ^ 0x57u)) ^ v174 ^ (v176 + 265010019 - ((2 * v176) & 0x1F9776C6));
  if ((v154 & 0x1000) != 0) {
    int v178 = -16;
  }
  else {
    int v178 = 16;
  }
  int v179 = (BYTE1(v154) ^ 0xC) + v178;
  int v180 = *(_DWORD *)(v106 + 4LL * v167) ^ 0x1F91C58E;
  unsigned int v181 = *(_DWORD *)(v103 + 4LL * (v179 ^ 0x83u));
  unsigned int v182 = *(_DWORD *)(v108 + 4LL * (HIBYTE(v164) ^ 0xA1)) ^ HIWORD(v181) ^ (16 * v180
                                                                         + 1352758830
                                                                         - ((32 * v180) & 0xA142EC40));
  int v183 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v177 ^ 0x8D48) >> 8));
  unsigned int v184 = *(_DWORD *)(v111 + 4LL * (v146 ^ 0xEDu)) ^ v180 ^ ((v182 ^ (v181 << 16) ^ 0xE4F244A3)
                                                                           + 265010019
                                                                           - 2
                                                                           * ((v182 ^ (v181 << 16) ^ 0xE4F244A3) & 0xFCBBB6B ^ v182 & 8));
  HIDWORD(v185) = v183 ^ 0xE4F2;
  LODWORD(v185) = v183 ^ 0x44A30000;
  int v186 = *(_DWORD *)(v106 + 4LL * ((v184 ^ 0xEFBC3B44) >> 16)) ^ 0x1F91C58E;
  int v187 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v169) ^ 0xCC)) ^ (16 * v186
                                                                         + 1352758830
                                                                         - ((32 * v186) & 0xA142EC40));
  int v188 = *(_DWORD *)(v111 + 4LL * (v173 ^ 0xA9u)) ^ v186 ^ (v187 + 265010019 - ((2 * v187) & 0x1F9776C6));
  int v189 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v184 ^ 0x3B44) >> 8));
  HIDWORD(v185) = v189 ^ 0xE4F2;
  LODWORD(v185) = v189 ^ 0x44A30000;
  LOWORD(v186) = v169 ^ 0xD583;
  int v190 = *(_DWORD *)(v106 + 4LL * (((v169 ^ 0x255FD583) >> 16) ^ 0xC3u)) ^ 0x1F91C58E;
  int v191 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * HIBYTE(v173)) ^ (16 * v190 + 1352758830 - ((32 * v190) & 0xA142EC40));
  unsigned int v192 = *(_DWORD *)(v111 + 4LL * (v177 ^ 0x48u)) ^ v190 ^ (v191 + 265010019 - ((2 * v191) & 0x1F9776C6));
  int v193 = *(_DWORD *)(v106 + 4LL * ((v173 ^ 0xE93411A9) >> 16)) ^ 0x1F91C58E;
  int v194 = *(_DWORD *)(v103 + 4LL * BYTE1(v186));
  HIDWORD(v185) = v194 ^ 0xE4F2;
  LODWORD(v185) = v194 ^ 0x44A30000;
  int v195 = (16 * v193 + 1352758831 + ~((32 * v193) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v177 ^ 0x807D8D48) >> 24)) ^ (v185 >> 16);
  int v196 = *(_DWORD *)(v111 + 4LL * (v184 ^ 0x77u)) ^ v193 ^ (v195 + 265010019 - ((2 * v195) & 0x1F9776C6));
  int v197 = *(_DWORD *)(v106 + 4LL * (BYTE2(v177) ^ 0xBEu)) ^ 0x1F91C58E;
  int v198 = *(_DWORD *)(v103 + 4LL * (BYTE1(v173) ^ 0x82u));
  HIDWORD(v185) = v198 ^ 0xE4F2;
  LODWORD(v185) = v198 ^ 0x44A30000;
  int v199 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * ((v184 ^ 0xEFBC3B44) >> 24)) ^ (16 * v197
                                                                               + 1352758830
                                                                               - ((32 * v197) & 0xA142EC40));
  unsigned int v200 = *(_DWORD *)(v111 + 4LL * v186) ^ v197 ^ (v199 + 265010019 - ((2 * v199) & 0x1F9776C6));
  int v201 = *(_DWORD *)(v106 + 4LL * ((v200 ^ 0x950DA39D) >> 16)) ^ 0x1F91C58E;
  unsigned int v202 = (16 * v201 + 1352758830 - ((32 * v201) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v188 ^ 0x11521BCAu) >> 24));
  int v203 = *(_DWORD *)(v103 + 4LL * (BYTE1(v196) ^ 0x89u));
  HIDWORD(v185) = v203 ^ 0xE4F2;
  LODWORD(v185) = v203 ^ 0x44A30000;
  unsigned __int8 v204 = BYTE1(v192) ^ 0xD1;
  int v205 = *(_DWORD *)(v111 + 4LL * (v192 ^ 0x88u)) ^ v201 ^ (v185 >> 16) ^ 0x71C9D6C4 ^ (v202 + 265010019 - ((2 * v202) & 0x1F9776C6));
  int v206 = *(_DWORD *)(v106 + 4LL * ((v188 ^ 0x11521BCAu) >> 16));
  unsigned int v207 = v205 - ((2 * v205) & 0x4D3D61A4);
  int v208 = *(_DWORD *)(v103 + 4LL * (BYTE1(v200) ^ 0x30u));
  HIDWORD(v185) = v208 ^ 0xE4F2;
  LODWORD(v185) = v208 ^ 0x44A30000;
  int v209 = (16 * (v206 ^ 0x1F91C58E) + 1352758830 - ((32 * (v206 ^ 0x1F91C58E)) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v192) ^ 0xDF)) ^ (v185 >> 16);
  unsigned int v210 = *(_DWORD *)(v111 + 4LL * (v196 ^ 0x43u)) ^ v206 ^ (v209 + 265010019 - ((2 * v209) & 0x1F9776C6));
  int v211 = *(_DWORD *)(v106 + 4LL * (BYTE2(v192) ^ 0xA7u)) ^ 0x1F91C58E;
  int v212 = *(_DWORD *)(v103 + 4LL * (BYTE1(v188) ^ 0x88u));
  HIDWORD(v185) = v212 ^ 0xE4F2;
  LODWORD(v185) = v212 ^ 0x44A30000;
  int v213 = (16 * v211 + 1352758830 - ((32 * v211) & 0xA142EC40)) ^ *(_DWORD *)(v108
                                                                           + 4LL
                                                                           * ((((v196 ^ 0x7A851A70u) >> 24) ^ -((v196 ^ 0x7A851A70u) >> 24) ^ ((((v196 ^ 0x7A851A70u) >> 24) ^ 0xFFFFFF16) + 234))
                                                                            + 233)) ^ (v185 >> 16);
  int v214 = *(_DWORD *)(v111 + 4LL * (v200 ^ 0x9Du)) ^ v211;
  int v215 = *(_DWORD *)(v106 + 4LL * ((v196 ^ 0x7A851A70u) >> 16));
  int v216 = v214 ^ (v213 + 265010019 - ((2 * v213) & 0x1F9776C6));
  int v217 = *(_DWORD *)(v103 + 4LL * v204);
  HIDWORD(v185) = v217 ^ 0xE4F2;
  LODWORD(v185) = v217 ^ 0x44A30000;
  int v218 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v200) ^ 0x7C)) ^ (16 * (v215 ^ 0x1F91C58E)
                                                                         + 1352758830
                                                                         - ((32 * (v215 ^ 0x1F91C58E)) & 0xA142EC40));
  int v219 = *(_DWORD *)(v111 + 4LL * (v188 ^ 0xF9u)) ^ v215 ^ (v218 + 265010019 - ((2 * v218) & 0x1F9776C6));
  int v220 = *(_DWORD *)(v106 + 4LL * (BYTE2(v219) ^ 0x16u));
  int v221 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v216 ^ 0xDE69) >> 8));
  HIDWORD(v185) = v221 ^ 0xE4F2;
  LODWORD(v185) = v221 ^ 0x44A30000;
  v207 -= 1499549486;
  int v222 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v207) ^ 0xCF)) ^ (16 * (v220 ^ 0x1F91C58E)
                                                                         + 1352758830
                                                                         - ((32 * (v220 ^ 0x1F91C58E)) & 0xA142EC40));
  int v223 = *(_DWORD *)(v103 + 4LL * (BYTE1(v219) ^ 0xFAu));
  unsigned int v224 = *(_DWORD *)(v111 + 4LL * (v210 ^ 0x5Du)) ^ v220 ^ (v222 + 265010019 - ((2 * v222) & 0x1F9776C6));
  HIDWORD(v185) = v223 ^ 0xE4F2;
  LODWORD(v185) = v223 ^ 0x44A30000;
  int v225 = *(_DWORD *)(v106 + 4LL * (BYTE2(v207) ^ 0xF4u)) ^ 0x1F91C58E;
  unsigned int v226 = v225 ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v210) ^ 0xC2)) ^ *(_DWORD *)(v111
                                                                            + 4LL * (v216 ^ 0x69u)) ^ (16 * v225 + 1352758830 - ((32 * v225) & 0xA142EC40)) ^ ((v185 >> 16) + 265010019 - ((2 * (v185 >> 16)) & 0x1F9776C6));
  int v227 = *(_DWORD *)(v106 + 4LL * (BYTE2(v210) ^ 0x6Bu)) ^ 0x1F91C58E;
  int v228 = *(_DWORD *)(v103 + 4LL * (BYTE1(v207) ^ 0xDBu));
  HIDWORD(v185) = v228 ^ 0xE4F2;
  LODWORD(v185) = v228 ^ 0x44A30000;
  int v229 = (16 * v227 + 1352758830 - ((32 * v227) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v216 ^ 0x5FEEDE69u) >> 24)) ^ (v185 >> 16);
  int v230 = *(_DWORD *)(v111
                   + 4LL
  int v231 = *(_DWORD *)(v106 + 4LL * (BYTE2(v216) ^ 0x2Du)) ^ 0x1F91C58E;
  int v232 = *(_DWORD *)(v103 + 4LL * (BYTE1(v210) ^ 0x1Au));
  HIDWORD(v185) = v232 ^ 0xE4F2;
  LODWORD(v185) = v232 ^ 0x44A30000;
  int v233 = (v185 >> 16) ^ *(_DWORD *)(v108
                                  + 4LL
  unsigned int v234 = *(_DWORD *)(v111 + 4LL * (v207 ^ 0x89u)) ^ v231 ^ (v233 + 265010019 - ((2 * v233) & 0x1F9776C6));
  int v235 = *(_DWORD *)(v106 + 4LL * ((v234 ^ 0x59A5F4B7) >> 16)) ^ 0x1F91C58E;
  int v236 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v230 ^ 0x872B) >> 8));
  HIDWORD(v185) = v236 ^ 0xE4F2;
  LODWORD(v185) = v236 ^ 0x44A30000;
  int v237 = (16 * v235 + 1352758830 - ((32 * v235) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v224) ^ 0xCD)) ^ (v185 >> 16);
  int v238 = *(_DWORD *)(v111 + 4LL * (v226 ^ 0xEEu)) ^ v235 ^ (v237 + 265010019 - ((2 * v237) & 0x1F9776C6));
  int v239 = *(_DWORD *)(v106 + 4LL * (BYTE2(v224) ^ 0xB4u)) ^ 0x1F91C58E;
  int v240 = *(_DWORD *)(v103 + 4LL * (BYTE1(v234) ^ 0x67u));
  HIDWORD(v185) = v240 ^ 0xE4F2;
  LODWORD(v185) = v240 ^ 0x44A30000;
  int v241 = v239 ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v226) ^ 0xD6)) ^ *(_DWORD *)(v111
                                                                            + 4LL * (v230 ^ 0x18u)) ^ (16 * v239 + 1352758830 - ((32 * v239) & 0xA142EC40)) ^ ((v185 >> 16) + 265010019 - ((2 * (v185 >> 16)) & 0x1F9776C6));
  int v242 = *(_DWORD *)(v106 + 4LL * (BYTE2(v226) ^ 0x56u)) ^ 0x1F91C58E;
  int v243 = *(_DWORD *)(v103 + 4LL * (BYTE1(v224) ^ 0x7Eu));
  HIDWORD(v185) = v243 ^ 0xE4F2;
  LODWORD(v185) = v243 ^ 0x44A30000;
  int v244 = *(_DWORD *)(v108 + 4LL * ((v230 ^ 0x911B872B) >> 24)) ^ v242 ^ 0x6D41727E ^ (16 * v242
                                                                                    + 1352758830
                                                                                    - ((32 * v242) & 0xA142EC40)) ^ (v185 >> 16);
  int v245 = *(_DWORD *)(v106 + 4LL * (BYTE2(v230) ^ 0xD8u)) ^ 0x1F91C58E;
  int v246 = *(_DWORD *)(v103 + 4LL * (BYTE1(v226) ^ 0xE4u));
  HIDWORD(v185) = v246 ^ 0xE4F2;
  LODWORD(v185) = v246 ^ 0x44A30000;
  int v247 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v234) ^ 0xB0)) ^ (16 * v245
                                                                         + 1352758830
                                                                         - ((32 * v245) & 0xA142EC40));
  unsigned int v248 = *(_DWORD *)(v111 + 4LL * (v224 ^ 0x28u)) ^ v245 ^ (v247 + 265010019 - ((2 * v247) & 0x1F9776C6));
  int v249 = *(_DWORD *)(v103 + 4LL * (BYTE1(v248) ^ 0x66u));
  HIDWORD(v185) = v249 ^ 0xE4F2;
  LODWORD(v185) = v249 ^ 0x44A30000;
  int v250 = v185 >> 16;
  HIDWORD(v185) = *(_DWORD *)(v111 + 4LL * (v234 ^ 0xB7u)) ^ 0x13431FD9;
  LODWORD(v185) = HIDWORD(v185);
  int v251 = v185 >> 21;
  LODWORD(v185) = __ROR4__(v244, 21);
  int v252 = v241 ^ 0x177CD9D9;
  unsigned __int8 v253 = v241;
  int v254 = *(_DWORD *)(v106 + 4LL * (BYTE2(v238) ^ 0x74u)) ^ 0x1F91C58E;
  unsigned int v255 = *(_DWORD *)(v108 + 4LL * ((v241 ^ 0x177CD9D9u) >> 24)) ^ 0x6D41727E ^ v254 ^ v250 ^ (16 * v254
                                                                                            + 1352758830
                                                                                            - ((32 * v254) & 0xA142EC40));
  LODWORD(v185) = v251 ^ v185 ^ 0x549BF9D9;
  HIDWORD(v185) = v185;
  int v256 = v185 >> 11;
  int v257 = *(_DWORD *)(v111 + 4LL * ((v185 >> 11) ^ 0xEFu));
  int v258 = v255 & 0x200 | 0xD185D72;
  if ((v255 & 0x200 & (v257 ^ 0xFCBBB63)) != 0) {
    int v258 = 439401188 - v258;
  }
  unsigned int v259 = ((v257 ^ 0x13431FD9) - 219700594 + v258) ^ v255 & 0xFFFFFDFF;
  int v260 = *(_DWORD *)(v106 + 4LL * BYTE2(v252)) ^ 0x1F91C58E;
  int v261 = *(_DWORD *)(v103 + 4LL * (((unsigned __int16)(v238 ^ 0x3D47) >> 8) ^ 0x93u));
  HIDWORD(v262) = v261 ^ 0xE4F2;
  LODWORD(v262) = v261 ^ 0x44A30000;
  unsigned int v263 = (16 * v260 + 1352758830 - ((32 * v260) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v256 ^ 0x1EA133EFu) >> 24));
  unsigned int v264 = *(_DWORD *)(v111 + 4LL * (v248 ^ 0xDu)) ^ v260 ^ (v262 >> 16) ^ (v263
                                                                                         + 265010019
                                                                                         - ((2 * v263) & 0x1F9776C6));
  int v265 = *(_DWORD *)(v108 + 4LL * ((v238 ^ 0xD4B73D47) >> 24));
  int v266 = *(_DWORD *)(v106 + 4LL * (BYTE2(v256) ^ 0x62u)) ^ 0x1F91C58E;
  int v267 = *(_DWORD *)(v103 + 4LL * BYTE1(v252));
  HIDWORD(v262) = v267 ^ 0xE4F2;
  LODWORD(v262) = v267 ^ 0x44A30000;
  int v268 = (16 * v266 + 1352758830 - ((32 * v266) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v248) ^ 0x32)) ^ (v262 >> 16);
  int v269 = *(_DWORD *)(v111 + 4LL * (v238 ^ 0x74u)) ^ v266 ^ (v268 + 265010019 - ((2 * v268) & 0x1F9776C6));
  unsigned int v270 = (char *)*(&off_101826020 + (v60 ^ 0x748)) - 8;
  unsigned int v271 = (char *)*(&off_101826020 + v60 - 1636) - 8;
  unsigned int v272 = *(_DWORD *)&v271[4 * ((v259 ^ 0xF137909F) >> 16)] ^ 0x6C1C7C95;
  LODWORD(v337) = v272 ^ ((HIBYTE(v264) ^ 0x9FD52929) - 83749015 + *(_DWORD *)&v270[4 * (HIBYTE(v264) ^ 0xB4)]) ^ (v272 >> 2) ^ (v272 >> 4);
  int v273 = (v337 & 0x1000000 ^ 0xFFE9CFFA) + 2 * (v337 & 0x1000000);
  uint64_t v274 = (uint64_t)*(&off_101826020 + (v60 ^ 0x763));
  int v275 = *(_DWORD *)(v274 + 4LL * (v269 ^ 0x9Eu));
  int v276 = *(_DWORD *)(v106 + 4LL * (BYTE2(v248) ^ 0x72u));
  int v277 = *(_DWORD *)(v103 + 4LL * (BYTE1(v256) ^ 0xA0u));
  v276 ^= 0x1F91C58Eu;
  HIDWORD(v262) = v277 ^ 0xE4F2;
  LODWORD(v262) = v277 ^ 0x44A30000;
  int v278 = (v262 >> 16) ^ v265 ^ (16 * v276 + 1352758830 - ((32 * v276) & 0xA142EC40));
  int v279 = *(_DWORD *)(v111 + 4LL * (v253 ^ 0xEAu)) ^ v276 ^ (v278 + 265010019 - ((2 * v278) & 0x1F9776C6));
  unsigned int v280 = *(_DWORD *)&v271[4 * (BYTE2(v279) ^ 0x99)] ^ 0x6C1C7C95;
  unsigned int v281 = ((v264 ^ 0x7B)
        - 1356832173
        + ((2 * (((v264 ^ 0x7B) + 112) & 0x1E6 ^ (v264 | 0x7FFFFFFB))) ^ 0x60412009)) ^ v280 ^ ((((v259 ^ 0xF137909F) >> 24) ^ 0x9FD52929) - 83749015 + *(_DWORD *)&v270[4 * (((v259 ^ 0xF137909F) >> 24) ^ 0xB4)]) ^ (v280 >> 2) ^ *(_DWORD *)(v274 + 4LL * (v264 ^ 0x79u)) ^ (v280 >> 4);
  uint64_t v282 = v279 ^ 0x6792B6A6u;
  int v283 = *(_DWORD *)&v270[4 * (BYTE3(v282) ^ 0xB4)];
  unsigned __int8 v284 = v269 ^ 0x9C;
  unsigned int v285 = (v269 ^ 0x250E7C9Cu) >> 24;
  HIDWORD(v340) = *(_DWORD *)&v270[4 * (v285 ^ 0xB4)];
  int v286 = (char *)*(&off_101826020 + (int)a28 - 1788) - 8;
  unsigned int v287 = *(_DWORD *)&v286[4 * ((unsigned __int16)(v269 ^ 0x7C9C) >> 8)] ^ 0xCBF94518;
  int v288 = *(_DWORD *)&v271[4 * (BYTE2(v269) ^ 5)];
  LODWORD(v340) = *(_DWORD *)&v271[4 * ((v264 ^ 0xBC37B) >> 16)];
  int v289 = *(_DWORD *)&v286[4 * ((unsigned __int16)(v264 ^ 0xC37B) >> 8)];
  int v290 = *(_DWORD *)&v286[4 * BYTE1(v282)];
  int v291 = *(_DWORD *)&v286[4 * (BYTE1(v259) ^ 0x5E)];
  int v292 = *(_DWORD *)(v274 + 4LL * (v259 ^ 0x9Du));
  HIDWORD(v337) = *(_DWORD *)(v274 + 4LL * (v279 ^ 0xA4u));
  uint64_t v293 = ((v281 ^ v287 ^ (1515496080 * v287)) + 164671944 - ((2 * (v281 ^ v287 ^ (1515496080 * v287))) & 0x13A16390)) ^ LODWORD(STACK[0x2C0]);
  uint64_t v294 = v293 ^ 0x5244C6B3;
  unsigned int v295 = (char *)*(&off_101826020 + (int)a28 - 1786) - 12;
  v323[5] = v295[BYTE2(v294) ^ 0x5ELL] ^ BYTE2(v294) ^ 0x8A ^ ((BYTE2(v294) ^ 0x8A)
                                                             - ((2 * (BYTE2(v294) ^ 0x8A) + 110) & 0x74)
                                                             - 79) ^ 0xB9;
  unsigned int v296 = v288 ^ 0x6C1C7C95 ^ ((BYTE3(v282) ^ 0x9FD52929) - 83749015 + v283) ^ ((v288 ^ 0x6C1C7C95u) >> 2) ^ ((v288 ^ 0x6C1C7C95u) >> 4) ^ v289 ^ 0xCBF94518 ^ v292 ^ (1515496080 * (v289 ^ 0xCBF94518)) ^ ((v259 ^ 0x9F) - 1356832173 + ((2 * (v259 ^ 0x9F) + 224) & 0x3C4 ^ 0x9FBEDFFF));
  unsigned int v297 = (v296 + 1797235826 - ((2 * v296) & 0xD63F4992) + 87) ^ LODWORD(STACK[0x3C0]);
  unsigned int v298 = v297 ^ 0x22A932A6;
  uint64_t v299 = (BYTE1(v298) | 0x88) ^ (v298 >> 8) & 0x88;
  int v300 = (char *)*(&off_101826020 + (int)(a28 ^ 0x766)) - 8;
  v323[2] = (((unsigned __int16)(v297 ^ 0x32A6) >> 8) | 0x88) ^ ((unsigned __int16)(v297 ^ 0x32A6) >> 8) & 0x88 ^ 0x35 ^ ((v300[v299 ^ 0x14] ^ 0x5D) + ((2 * v300[v299 ^ 0x14]) | 0xDF) - 111);
  uint64_t v301 = (uint64_t)*(&off_101826020 + (int)a28 - 1641);
  LODWORD(v299) = *(unsigned __int8 *)(v301 + (BYTE3(v293) ^ 0xEFLL));
  HIDWORD(v262) = v299 ^ 0xE;
  LODWORD(v262) = (v299 ^ 0xC0) << 24;
  v323[STACK[0x2F0]] = (v262 >> 29) ^ 0x83;
  int v302 = v273 + 891289328;
  if (((v273 + 1454086) & (v275 ^ 0x32000000)) != 0) {
    int v302 = 888381156 - v273;
  }
  int v303 = v337 & 0xFEFFFFFF ^ (1515496080 * (v290 ^ 0xCBF94518)) ^ ((v275 ^ (v284
                                                                          - 1356832173
                                                                          + ((2 * v284 + 224) & 0x3C4 ^ 0x9FBEDFFF)))
                                                                 - 889835242
                                                                 + v302);
  uint64_t v304 = v290 ^ 0xCBF94518 ^ LODWORD(STACK[0x3C8]) ^ (v303 - 587603030 - ((2 * v303) & 0xB9F3C754));
  uint64_t v305 = v290 ^ 0x18u ^ LOBYTE(STACK[0x3C8]) ^ (v303 - 86 - ((2 * v303) & 0x54)) ^ 0x28LL;
  unsigned int v306 = (char *)*(&off_101826020 + (int)(a28 ^ 0x773)) - 4;
  v323[11] = v306[v305] & 0xFB ^ 0x52 ^ ((v306[v305] | 0xFB) + 24);
  LODWORD(v305) = *(unsigned __int8 *)(v301 + (HIBYTE(v297) ^ 0xF9LL));
  HIDWORD(v307) = v305 ^ 0xE;
  LODWORD(v307) = (v305 ^ 0xC0) << 24;
  unint64_t v308 = STACK[0x288];
  v323[STACK[0x288]] = (v307 >> 29) ^ 0xFB;
  v323[1] = BYTE2(v298) ^ 0x61 ^ ((BYTE2(v298) ^ 0x61) - ((2 * (BYTE2(v298) ^ 0x61) + 110) & 0x74) - 79) ^ 0xB8 ^ v295[BYTE2(v298) ^ 0xB5LL];
  unsigned int v309 = (v285 ^ 0x9FD52929) - 83749015 + HIDWORD(v340);
  int v310 = v340 ^ 0x6C1C7C95 ^ ((v340 ^ 0x6C1C7C95) >> 4) ^ ((v340 ^ 0x6C1C7C95) >> 2);
  int v311 = (v310 & 0x80000 ^ 0x23FFF5B2) + 2 * (v310 & 0x80000);
  BOOL v312 = ((v311 - 603977138) & v309) == 0;
  int v313 = v311 - 59408528;
  int v314 = 1148545748 - v311;
  if (v312) {
    int v314 = v313;
  }
  unsigned int v315 = HIDWORD(v337) ^ (v282 + 2096205936) ^ (((v309 - 544568610 + v314) ^ v310 & 0xFFF7FFFF ^ (1515496080 * (v291 ^ 0xCBF94518)))
                                                               + 841929186
                                                               - 2
                                                               * (((v309 - 544568610 + v314) ^ v310 & 0xFFF7FFFF ^ (1515496080 * (v291 ^ 0xCBF94518))) & 0x322ED1EA ^ ((v309 - 544568610 + v314) ^ v310 & 0xFFF7FFFF) & 8));
  unsigned int v316 = v291 ^ LODWORD(STACK[0x3E8]) ^ (v315 - 2011224482 - ((2 * v315) & 0x103E4CBC));
  v323[STACK[0x210]] = v295[(BYTE2(v316) ^ 0x62) + 213 + ((v316 >> 15) & 0x1A8 ^ 0xFFFFFF7F)] ^ BYTE2(v316) ^ ((BYTE2(v316) ^ 0x62) - ((2 * (BYTE2(v316) ^ 0x62) + 110) & 0x74) - 79) ^ 0xE4;
  int v317 = *(unsigned __int8 *)(v301 + (HIBYTE(v316) ^ 0x31LL));
  HIDWORD(v318) = v317 ^ 0xE;
  LODWORD(v318) = (v317 ^ 0xC0) << 24;
  v323[STACK[0x388]] = (v318 >> 29) ^ 0x50;
  unsigned int v319 = ((v304 ^ 0xCFDDD967) >> 16) ^ 0xFFFFFF94;
  v323[9] = v319 ^ (v319 - ((2 * v319 + 110) & 0x74) - 79) ^ v295[((v304 ^ 0xCFDDD967) >> 16) ^ 0x40LL] ^ 0xC;
  unsigned int v320 = (((v316 ^ 0x94CCD737) >> 4) & 0xF0 | ((unsigned __int16)(v316 ^ 0xD737) >> 12)) ^ 0xE6;
  v323[STACK[0x3E0]] = v300[((v320 >> 4) & 0xFFFFFF0F | (16 * (v320 & 0xF))) ^ 0xAELL] ^ (((v320 >> 4) & 0xF | (16 * (v320 & 0xF)))
                                                                                        - ((2
                                                                                          * ((v320 >> 4) & 0xF | (16 * (v320 & 0xF)))) & 0xBB)
                                                                                        + 93) ^ 0x2B;
  v323[10] = (((unsigned __int16)(v304 ^ 0xD967) >> 8) - (((v304 ^ 0xCFDDD967) >> 7) & 0xBA) + 93) ^ 0xDB ^ v300[((unsigned __int16)(v304 ^ 0xD967) >> 8) ^ 0xA0LL];
  v323[STACK[0x3D8]] = (BYTE1(v294) - ((v294 >> 7) & 0xBA) + 93) ^ v300[BYTE1(v294) ^ 0x75LL] ^ 0x80;
  v323[STACK[0x390]] = v306[v297 ^ 0x95LL] ^ 0xEC;
  v323[STACK[0x2F8]] = v306[v293 ^ 0x7FLL] ^ 0x7D;
  v323[STACK[0x430]] = v306[v316 ^ 0x98LL] ^ 0xD2;
  int v321 = *(unsigned __int8 *)(v301 + (BYTE3(v304) ^ 0x49LL));
  HIDWORD(v318) = v321 ^ 0xE;
  LODWORD(v318) = (v321 ^ 0xC0) << 24;
  v323[STACK[0x398]] = (v318 >> 29) ^ 0x2E;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 8LL * (int)((55 * ((((_DWORD)v308 - 1605674316 - 2 * (((_DWORD)v308 + 16) & 0x204B5AAD ^ STACK[0x250] & 9)) ^ 0xA04B5AA0) < 0x150)) ^ a28)))( v319 - ((2 * v319 + 110) & 0x74) - 79,  v293,  v301,  230LL,  v282,  3422111000LL,  v304,  v294,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  v323,  v324,  v325,  v326,  v327,  v328,  v329,  v330,  v331,  v332,  v333,  v334,  v335,  v337,  v340,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  2LL,  a42,  a43,  a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           5LL,
           11LL,
           a54);
}

void sub_100174B80( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, unsigned __int8 a24, int a25, int a26, unsigned __int8 a27, __int16 a28, char a29, int a30, int a31, int a32, int a33, unsigned __int8 a34, int a35, int a36, char a37, __int16 a38, char a39)
{
  LODWORD(STACK[0x3C0]) = (a24 | ((a31 ^ 0xC) << 24) | (unsigned __int16)(((14 * (a37 ^ 0x57) - 45) ^ a29) << 8) | ((a34 ^ 0x92) << 16)) ^ 0xF39F77A9;
  LODWORD(STACK[0x2C0]) = a32 ^ 0xE51C54B;
  LODWORD(STACK[0x3C8]) = ((a33 << 8) | (a26 << 24) | ((a35 ^ 0x57) << 16) | a30) ^ 0xF527C915;
  LODWORD(STACK[0x3E8]) = ((((a36 ^ 0x8C) << 16) + ((a25 ^ 0x1A) << 24)) | a27 | ((a39 ^ a4) << 8)) ^ 0x9B8E8FCF;
  JUMPOUT(0x100172B30LL);
}

uint64_t sub_100174C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W8>)
{
  STACK[0x530] = v4 - 16;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5
                                                                                 + 8LL
                                                                                 * ((1985
                                                                                   * (((((a4 ^ 0x250) + 168) | 0x108) ^ 0x7C3ACCF4) == -2084203482)) ^ a4 ^ 0x250))
                                                                     - (((a4 ^ 0x250u) - 33) ^ 0x136LL)))( a1,  a2,  a3,  2210763814LL);
}

uint64_t sub_100174C98()
{
  uint64_t v3 = ((uint64_t (*)(uint64_t))STACK[0x2D8])(v2);
  LODWORD(STACK[0x4EC]) = -2084203477;
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8LL * (((STACK[0x578] != 0) * (((v0 + 337) ^ 0x54F) + 371)) ^ (v0 + 337))))(v3);
}

uint64_t sub_100174CFC@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  int v3 = (a2 - 706971845) & 0x2A23857B;
  uint64_t v4 = ((uint64_t (*)(void, uint64_t, void))STACK[0x2E8])( *(unsigned int *)STACK[0x2E0],  a1,  LODWORD(STACK[0x60C]));
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8LL
                                            * (((((v3 - 272) | 0x308) + 1221) * (LODWORD(STACK[0x4EC]) != 2084229119)) ^ v3)))(v4);
}

uint64_t sub_100174E28()
{
  LODWORD(STACK[0x668]) = -2084203477;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1401 * (STACK[0x550] != 0)) ^ (v0 - 47))) - 4LL))();
}

uint64_t sub_100174E68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  unint64_t v19 = STACK[0x458];
  STACK[0x648] -= 32LL;
  *(_BYTE *)(v19 + 335) = *(_BYTE *)(a14 + 335) ^ 0xCD ^ *((_BYTE *)*(&off_101826020 + (int)(a18 - 583)) + 7) ^ *((_BYTE *)*(&off_101826020 + (int)(a18 - 761)) + ((a18 - 1911787346) & 0x11F38FD5) - 912) ^ *((_BYTE *)*(&off_101826020 + (a18 ^ 0x3C2)) + 18) ^ 0x2C;
  return (*(uint64_t (**)(void))(v18 + 8LL * a18))();
}

void sub_100174F3C()
{
}

uint64_t sub_100174F44(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  STACK[0x530] -= 16LL;
  return (*(uint64_t (**)(void))(v5 + 8LL * (((v4 ^ 0x386) * a4) ^ v4 ^ 0x506)))();
}

uint64_t sub_100174F74()
{
  int v3 = (_BYTE *)STACK[0x4B8];
  int v4 = 1316140812 - ((1 << ((v1 ^ 0x7E) - 116)) & 0x1CE56E16);
  v0[12] = (HIBYTE(v4) ^ 0x4E) - 2 * ((HIBYTE(v4) ^ 0x4E) & 0x2D ^ HIBYTE(v4) & 1) + 44;
  v0[13] = (BYTE2(v4) ^ 0x72) - ((2 * (BYTE2(v4) ^ 0x72)) & 0x58) + 44;
  v0[14] = (BYTE1(v4) ^ 0xB7) - ((2 * (BYTE1(v4) ^ 0xB7)) & 0x58) + 44;
  v0[15] = v4 ^ 0x27;
  v3[16] ^= *v0 ^ 0x2C;
  v3[17] ^= v0[1] ^ 0x2C;
  v3[18] ^= v0[2] ^ 0x2C;
  v3[19] ^= v0[3] ^ 0x2C;
  v3[20] ^= v0[4] ^ 0x2C;
  v3[21] ^= v0[5] ^ 0x2C;
  v3[22] ^= v0[6] ^ 0x2C;
  v3[23] ^= v0[7] ^ 0x2C;
  v3[24] ^= v0[8] ^ 0x2C;
  v3[25] ^= v0[9] ^ 0x2C;
  v3[26] ^= v0[10] ^ 0x2C;
  v3[27] ^= v0[11] ^ 0x2C;
  v3[28] ^= v0[12] ^ 0x2C;
  v3[29] ^= v0[13] ^ 0x2C;
  v3[30] ^= v0[14] ^ 0x2C;
  v3[31] ^= v0[15] ^ 0x2C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8LL * (v1 - 295))
                                                                                       - 8LL))( 1254LL,  1438LL,  380LL,  894LL,  484797974LL,  1316140811LL);
}

void sub_100175198()
{
}

uint64_t sub_1001751A0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (((LODWORD(STACK[0x478]) != ((13 * ((v0 + 1398) ^ v1)) ^ 0x1E737905)) * (v0 + 899)) ^ (v0 + 1398))))();
}

uint64_t sub_100175210@<X0>( int a1@<W0>, unsigned int a2@<W1>, unint64_t a3@<X2>, unsigned int a4@<W8>)
{
}

uint64_t sub_100175254()
{
  return (*(uint64_t (**)(void))(v5 + 8LL * (((v4 != (((v1 ^ v3) * v2) ^ v0)) * (v1 - 499)) ^ v1)))();
}

uint64_t sub_100175280( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
  LODWORD(STACK[0x478]) = 510884208;
  unint64_t v41 = STACK[0x4B8];
  STACK[0x590] = 335LL;
  *(_BYTE *)(v41 + 335) = (a39 ^ 0xBA) * (a39 + 17);
  return ((uint64_t (*)(void))(*(void *)(v40
                                        + 8LL
}

void sub_1001757C4()
{
}

uint64_t sub_1001757CC()
{
  unsigned int v3 = v0 & 0xBBD5F7FB;
  uint64_t v4 = ((uint64_t (*)(void))STACK[0x2D8])();
  LODWORD(STACK[0x668]) = v1;
  return ((uint64_t (*)(uint64_t))(*(void *)(v2
                                                      + 8LL
}

uint64_t sub_100175814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = STACK[0x400];
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 8LL * (v3 - 736)) - 8LL);
  unint64_t v7 = STACK[0x258];
  STACK[0x3E8] = STACK[0x258] + 2353;
  STACK[0x3E0] = v5 + 49;
  STACK[0x3D8] = v7 + 2333;
  STACK[0x3D0] = v5 + 29;
  STACK[0x3C8] = v7 + 2313;
  STACK[0x3C0] = v5 + 9;
  return v6(a1, 207LL, a3, 2210763814LL, 13LL);
}

uint64_t sub_100175860()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1401 * (STACK[0x550] != 0)) ^ (v0 - 47))) - 4LL))();
}

uint64_t sub_100175890( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v10 = (v8 & 1) == ((a8 - 771) | 0x130) - 312;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (((32 * v10) | (v10 << 7)) ^ (a8 - 197))) - 8LL))();
}

uint64_t sub_1001758C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t v9 = STACK[0x620];
  unint64_t v10 = (LODWORD(STACK[0x4D0]) - 510884208);
  STACK[0x5E8] = v10;
  return (*(uint64_t (**)(unint64_t))(v8
                                                     + 8LL
                                                     * (((4 * ((_DWORD)v10 != ((a8 + 780) ^ 0x617))) | (8 * ((_DWORD)v10 != ((a8 + 780) ^ 0x617)))) ^ (a8 + 780))))(v9);
}

uint64_t sub_100175D50@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  unint64_t v6 = v3 - 1;
  STACK[0x5E8] = v6;
  *(_BYTE *)(a1 + v6) = ((v2 - 54) ^ v4) * (v2 - 37);
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * (((4 * (((a2 - 12) ^ (STACK[0x5E8] == 0)) & 1)) & 0xF7 | (8 * (((a2 - 12) ^ (STACK[0x5E8] == 0)) & 1))) ^ a2)))();
}

uint64_t sub_100175D9C()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1401 * (STACK[0x550] != 0)) ^ (v0 - 47))) - 4LL))();
}

void sub_100175DDC()
{
}

uint64_t sub_100175E48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  int v51 = 460628867 * ((((2 * (v50 - 200)) | 0xBD03A752) - (v50 - 200) + 561917015) ^ 0x921751D4);
  *(void *)(v50 - 144) = 0LL;
  *(void *)(v50 - 200) = 0LL;
  *(void *)(v50 - 192) = a16;
  *(void *)(v50 - 168) = a47;
  *(void *)(v50 - 160) = a44;
  *(void *)(v50 - 176) = v47;
  *(_DWORD *)(v50 - 184) = v51 + v48 + 187;
  *(_DWORD *)(v50 - 1++*(_DWORD *)(v3 + 52) = v51 + 1675009439;
  uint64_t v52 = ((uint64_t (*)(uint64_t))((char *)*(&off_101826020 + (int)(v48 & 0xB68052C3)) - 4))(v50 - 200);
  int v53 = *(_DWORD *)(v50 - 136);
  LODWORD(STACK[0x66C]) = v53;
  return ((uint64_t (*)(uint64_t))(*(void *)(v49 + 8LL
                                                            * (((v53 != 2084229119) * ((v48 + 465) ^ 0x36A)) ^ v48))
                                          - ((v48 + 629547553) & 0xDA79DFAF ^ 0x307LL)))(v52);
}

void sub_100175F54()
{
}

void sub_100175FE0()
{
}

void sub_100176080()
{
  LODWORD(STACK[0x660]) = v0;
  JUMPOUT(0x100176018LL);
}

void sub_100176260()
{
  STACK[0x4C8] = (LODWORD(STACK[0x43C]) ^ 0xFFFFFFFFFFFFFCFFLL) + *(void *)(v0 + 8LL * (LODWORD(STACK[0x43C]) - 744));
  JUMPOUT(0x1001766ACLL);
}

uint64_t sub_1001766B4@<X0>(unint64_t a1@<X8>)
{
  STACK[0x670] = v6;
  LODWORD(STACK[0x67C]) = v1;
  int v7 = *(_DWORD *)(v6 - 0x8FD385F8C7F98D9LL);
  STACK[0x5F8] = a1;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((25
                                          * (v1
                                           + 1881030174
                                           + ((v2 - 173) ^ (2 * v7) & 0x76 ^ 0x4E8)
}

uint64_t sub_100176738()
{
  int v6 = v1 - 2147442171;
  else {
    int v7 = 64;
  }
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((227
}

uint64_t sub_100176814(int a1)
{
  int v6 = v3 + v2;
  int v7 = v3 + v2 - 2147442171;
  else {
    int v8 = 64;
  }
  BOOL v9 = __CFADD__(v7, v4 + 2147441670 + a1 + v1 - 637 + v8);
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * ((((v1 - 62) ^ v9) & 1 | (8 * (((v1 - 62) ^ v9) & 1))) ^ v1)))();
}

uint64_t sub_10017687C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (((v4
                                           - a1
                                           + v2
                                           - 0x8FD385F8C7F9B11LL
                                           + (unint64_t)(250 * ((v1 - 319) ^ 0x330u)) > 0xF)
                                          * ((2 * (v1 - 319)) ^ 0x3EB)) ^ (v1 - 319)))
                            - 4LL))();
}

uint64_t sub_1001768E0@<X0>(unsigned int a1@<W2>, _OWORD *a2@<X8>)
{
  *(_OWORD *)(v3 + v2 + (((v5 ^ 0x702) - 1137199488) & 0x43C84B39 ^ a1)) = *a2;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((21 * (((v4 + 1) & 0x1FFFFFFF0LL) == 16)) ^ v5 ^ 0x702)) - 8LL))();
}

void sub_100176950()
{
}

uint64_t sub_10017695C()
{
  BOOL v3 = (v0 + 1028670412) > 0x4D32A773;
  if (v0 + 1028670412 < ((v1 + 425310993) & 0xE6A6433B ^ 0x4D32A478)) {
    BOOL v3 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((529 * v3) ^ v1)) - (((v1 - 1197) | 0x10Eu) ^ 0x11BLL)))();
}

uint64_t sub_100176968(unsigned int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
}

uint64_t sub_1001769B8@<X0>(int a1@<W2>, unint64_t a2@<X5>, int a3@<W6>, uint64_t a4@<X8>)
{
  *(_BYTE *)(v6 + (a1 + v5 + 736)) = *(_BYTE *)(a4 + ((v4 - 497) ^ a2) + v7);
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((((v9 + v5 + 1) > 0x3F) * a3) ^ v4)) - 4LL))();
}

uint64_t sub_100176A04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  LODWORD(STACK[0x504]) = v10;
  STACK[0x540] = *(void *)(v13 + 8LL * v11);
  STACK[0x680] = v16;
  STACK[0x688] = v9;
  unint64_t v17 = STACK[0x530];
  uint64_t v18 = (char *)&a9 + STACK[0x530] - 0x616CC1BE8C72DE02LL;
  STACK[0x690] = (unint64_t)v18;
  STACK[0x530] = v17 + 320;
  int v19 = *(_DWORD *)(v16 - 0x8FD385F8C7F98D5LL);
  LODWORD(STACK[0x638]) = v19;
  int v20 = *(_DWORD *)(v16 - 0x8FD385F8C7F98D1LL);
  LODWORD(STACK[0x524]) = v20;
  int v21 = *(_DWORD *)(v16 - 0x8FD385F8C7F98CDLL);
  LODWORD(STACK[0x634]) = v21;
  int v22 = *(_DWORD *)(v16 - 0x8FD385F8C7F98C9LL);
  LODWORD(STACK[0x4B0]) = v22;
  int v23 = *(unsigned __int8 *)(v16 - 0x8FD385F8C7F98BDLL) ^ 0xF3;
  if (v23 == 2)
  {
    LODWORD(STACK[0x4D4]) = *(_DWORD *)(v16 - 0x8FD385F8C7F98C5LL);
    JUMPOUT(0x100177348LL);
  }

  if (v23 == 1)
  {
    LODWORD(STACK[0x598]) = v14;
    BOOL v25 = v9 < STACK[0x208] + v17 && (unint64_t)v18 < v9 + 64;
    return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * (((((a8 - 587) | 0x22) ^ 0x37) * v25) ^ (a8 - 149))) - 4LL))();
  }

  else
  {
    int v27 = (*(_DWORD *)(v16 - 0x8FD385F8C7F98D5LL) ^ v12) + (v19 ^ v12);
    *(_DWORD *)(v16 - 0x8FD385F8C7F98D5LL) = v27 + v12 - (v15 & (2 * v27));
    int v28 = (*(_DWORD *)(v16 - 0x8FD385F8C7F98D1LL) ^ v12) + (v20 ^ v12);
    *(_DWORD *)(v16 - 0x8FD385F8C7F98D1LL) = v28 + v12 - (v15 & (2 * v28));
    int v29 = (*(_DWORD *)(v16 - 0x8FD385F8C7F98CDLL) ^ v12) + (v21 ^ v12);
    *(_DWORD *)(v16 - 0x8FD385F8C7F98CDLL) = v29 + v12 - (v15 & (2 * v29));
    int v30 = (*(_DWORD *)(v16 - 0x8FD385F8C7F98C9LL) ^ v12) + (v22 ^ v12);
    *(_DWORD *)(v16 - 0x8FD385F8C7F98C9LL) = v30 + v12 - (v15 & (2 * v30));
    STACK[0x530] = v17;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))STACK[0x540])( 759LL,  207LL,  338LL,  a4,  a5,  44LL,  3722269372LL);
  }

void sub_100176A38()
{
}

void sub_100176A5C()
{
}

uint64_t sub_100176B60()
{
}

uint64_t sub_100176BAC()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((110 * ((v0 ^ 0x14u) > 7)) ^ v1)) - 4LL))();
}

uint64_t sub_100176BD8()
{
  *(void *)(v4 + v1 - 0x8FD385F8C7F991CLL) = v5;
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (int)((14 * (((((v2 + 1072395062) & 0xC0148F3E) - 1524) & v0) != 8LL)) ^ (((v2 + 1072395062) & 0xC0148F3E) - 10)))
                            - ((((v2 + 1072395062) & 0xC0148F3E) - 1318719093) & 0x4E9A0BFF)
                            + 947LL))();
}

uint64_t sub_100176C64()
{
  *(void *)(v2 + v4) = v6;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((14 * (v3 != v4)) ^ v1)) - v0 + 947))();
}

uint64_t sub_100176C90()
{
}

uint64_t sub_100176CD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  STACK[0x540] = ((v10 - 1930841152) & 0x73164F3F ^ 0xFFFFFFFFFFFFFCF7LL) + *(void *)(v11 + 8LL * v10);
  STACK[0x680] = v13;
  STACK[0x688] = v9;
  unint64_t v14 = STACK[0x530];
  int v15 = (char *)&a9 + STACK[0x530] - 0x616CC1BE8C72DE02LL;
  STACK[0x690] = (unint64_t)v15;
  STACK[0x530] = v14 + 320;
  LODWORD(STACK[0x638]) = *(_DWORD *)(v13 - 0x8FD385F8C7F98D5LL);
  LODWORD(STACK[0x524]) = *(_DWORD *)(v13 - 0x8FD385F8C7F98D1LL);
  LODWORD(STACK[0x634]) = *(_DWORD *)(v13 - 0x8FD385F8C7F98CDLL);
  LODWORD(STACK[0x4B0]) = *(_DWORD *)(v13 - 0x8FD385F8C7F98C9LL);
  int v16 = *(unsigned __int8 *)(v13 - 0x8FD385F8C7F98BDLL) ^ 0xF3;
  if (v16 == 2) {
    JUMPOUT(0x100177318LL);
  }
  if (v16 != 1) {
    JUMPOUT(0x100177860LL);
  }
  LODWORD(STACK[0x598]) = v12;
  BOOL v18 = v9 < STACK[0x208] + v14 && (unint64_t)v15 < v9 + 64;
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * (((((a8 - 587) | 0x22) ^ 0x37) * v18) ^ (a8 - 149))) - 4LL))();
}

uint64_t sub_100176D04@<X0>(char a1@<W5>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v2 + a2 - 823850539) = a1;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1167 * ((((v3 - 1179) | 0x342u) ^ 0xFFFFFFFFCEE50A24LL) + a2 < 0x40)) ^ ((v3 - 1179) | 0x342)))
                            - 4LL))();
}

void sub_100176D54()
{
}

uint64_t sub_100176D5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,int a51)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 + 8LL * ((61 * (((a8 - 729) ^ 0x3A51960D ^ a51 & a7) == 978424863)) ^ (a8 + 915))) - 4LL))( a1,  a2,  3316542448LL,  a4,  572697704LL,  a6,  315LL,  115LL);
}

uint64_t sub_100176DCC@<X0>( int a1@<W2>, int a2@<W4>, char a3@<W5>, int a4@<W6>, char a5@<W7>, uint64_t a6@<X8>)
{
  uint64_t v16 = (v10 + a1);
  *(_BYTE *)(v15 + v16 + 36) = ((v16 & 0xF) * a5) ^ *(_BYTE *)(v14 + v16) ^ *(_BYTE *)(v7 + (v16 & 0xF)) ^ *(_BYTE *)((v16 & 0xF) + a6 + 1) ^ *(_BYTE *)(v6 + (v16 & 0xF)) ^ a3;
  return ((uint64_t (*)(void))(*(void *)(v12
                                        + 8LL
                                        * (((v10 + (v9 ^ a4) - 780 == (((v9 ^ a4) - 729) ^ v8 ^ ((v9 ^ a4) + a2) & v13))
                                          * v11) ^ ((v9 ^ a4) + 915)))
                            - 4LL))();
}

void sub_100176E4C()
{
}

uint64_t sub_100176E9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v9 = (a8 - 711) | 0x403;
  int v10 = STACK[0x504];
  LODWORD(STACK[0x4B4]) = ((83 * (v9 ^ 0x451)) ^ 0x762) + LODWORD(STACK[0x504]);
  unsigned int v11 = LODWORD(STACK[0x67C]) - 472368406;
  BOOL v12 = v10 - 849556567 > v11;
  return (*(uint64_t (**)(void))(v8 + 8LL * ((228 * v12) ^ v9)))();
}

void sub_100176F3C()
{
}

uint64_t sub_100176FE0@<X0>(int a1@<W2>, unsigned int a2@<W3>, int a3@<W8>)
{
  BOOL v9 = v4 < v5;
  *(_BYTE *)(v8 - 0x8FD385F8C7F991DLL + (v3 - 596842673)) = *(_BYTE *)(STACK[0x5F8]
                                                                                   + (a3 - 643683112));
  unsigned int v10 = a1 + a3 + 1;
  int v11 = v9 ^ (v10 < a2);
  BOOL v12 = v10 < v4;
  if (!v11) {
    BOOL v9 = v12;
  }
  return (*(uint64_t (**)(BOOL))(v7 + 8LL * ((v6 - 16) | (16 * v9))))(v12);
}

void sub_100177070()
{
}

uint64_t sub_100177080()
{
  int v4 = 628203409 * ((2 * ((v3 - 200) & 0x25866240) - (v3 - 200) - 629563969) ^ 0x58F1918C);
  *(void *)(v3 - 200) = v2;
  *(_DWORD *)(v3 - 192) = v4 + v1 - 126;
  *(_DWORD *)(v3 - 188) = v0 - v4 - 163342436;
  uint64_t v5 = sub_1001797A4(v3 - 200);
  return ((uint64_t (*)(uint64_t))STACK[0x4C8])(v5);
}

uint64_t sub_100177108@<X0>(int a1@<W7>, int a2@<W8>, uint64_t a3)
{
  unint64_t v6 = STACK[0x5F8] + ((((_DWORD)v3 + 751) | 9) ^ 0xD9A22FD3) + a2;
  unint64_t v7 = STACK[0x670];
  STACK[0x540] = *(void *)(v4 + 8 * v3);
  STACK[0x680] = v7;
  STACK[0x688] = v6;
  unint64_t v8 = STACK[0x530];
  BOOL v9 = (char *)&a3 + STACK[0x530] - 0x616CC1BE8C72DE02LL;
  STACK[0x690] = (unint64_t)v9;
  STACK[0x530] = v8 + 320;
  LODWORD(STACK[0x638]) = *(_DWORD *)(v7 - 0x8FD385F8C7F98D5LL);
  LODWORD(STACK[0x524]) = *(_DWORD *)(v7 - 0x8FD385F8C7F98D1LL);
  LODWORD(STACK[0x634]) = *(_DWORD *)(v7 - 0x8FD385F8C7F98CDLL);
  LODWORD(STACK[0x4B0]) = *(_DWORD *)(v7 - 0x8FD385F8C7F98C9LL);
  int v10 = *(unsigned __int8 *)(v7 - 0x8FD385F8C7F98BDLL) ^ 0xF3;
  if (v10 == 2) {
    JUMPOUT(0x100177318LL);
  }
  if (v10 != 1) {
    JUMPOUT(0x100177860LL);
  }
  LODWORD(STACK[0x598]) = v5;
  BOOL v12 = v6 < STACK[0x208] + v8 && (unint64_t)v9 < v6 + 64;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (((((a1 - 587) | 0x22) ^ 0x37) * v12) ^ (a1 - 149))) - 4LL))();
}

void sub_100177148()
{
}

uint64_t sub_100177284@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  unsigned int v8 = (*(unsigned __int8 *)(v2 + (v4 + a1)) ^ 0x2C) & 0xFFFF00FF | ((v3 ^ 0xCE ^ *(_BYTE *)(v2 + (v4 + a1 + 1))) << 8) | ((*(unsigned __int8 *)(v2 + (v4 + a1 + 2)) ^ 0x2C) << 16) | ((*(unsigned __int8 *)(v2 + (v4 + a1 + 3)) ^ 0x2C) << 24);
  *(_DWORD *)(a2 + ((v4 + a1) & 0xFFFFFFFC)) = v8 + v7 - (v5 & (2 * v8));
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((577 * ((v4 + 4 + a1) < 0x40)) ^ v3)) - 4LL))();
}

uint64_t sub_100177394@<X0>(int a1@<W1>, int a2@<W4>, uint64_t a3@<X8>)
{
  int v11 = *(_DWORD *)(a3 + 4LL * (v7 + v5 - 3));
  int v12 = *(_DWORD *)(a3 + 4LL * (v7 + v5 - 8));
  HIDWORD(v13) = *(_DWORD *)(a3 + 4LL * ((((v3 ^ v6) * a2) ^ (v7 - 211)) + v5)) ^ *(_DWORD *)(a3 + 4LL * (v7 + v5 - 14)) ^ ((v12 ^ v11) + v10 - (v8 & (2 * (v12 ^ v11)))) ^ v10;
  LODWORD(v13) = *(_DWORD *)(a3 + 4LL * ((((v3 ^ v6) * a2) ^ (v7 - 211)) + v5)) ^ *(_DWORD *)(a3 + 4LL * (v7 + v5 - 14)) ^ ((v12 ^ v11) + v10 - (v8 & (2 * (v12 ^ v11))));
  *(_DWORD *)(a3 + 4LL * (v4 + v7)) = (v13 >> 31) + v10 - (v8 & (2 * (v13 >> 31)));
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((((v4 + 1 + v7) < 0x50) * a1) ^ v3)) - 12LL))();
}

uint64_t sub_100177424()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * v0) - 8LL))();
}

void sub_100177530()
{
}

uint64_t sub_100177548( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v10
}

void sub_1001775FC()
{
}

uint64_t sub_10017761C( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((22 * ((a2 + 1 + a8) > 0x3B)) ^ v8)) - 4LL))();
}

uint64_t sub_1001776E4( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
}

uint64_t sub_1001777B8()
{
  LODWORD(STACK[0x638]) = v0;
  LODWORD(STACK[0x524]) = v4;
  LODWORD(STACK[0x634]) = v2;
  LODWORD(STACK[0x4B0]) = v3;
  LODWORD(STACK[0x598]) = v8 + 80;
  unint64_t v9 = STACK[0x680];
  int v10 = *(_DWORD *)(STACK[0x680] - 0x8FD385F8C7F98C5LL);
  LODWORD(STACK[0x4D4]) = v1;
  int v11 = (v10 ^ v7) + ((v7 + v5 - 1090) ^ v1);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98C5LL) = v11 + v7 - (v6 & (2 * v11));
  unint64_t v12 = STACK[0x530];
  int v13 = (*(_DWORD *)(v9 - 0x8FD385F8C7F98D5LL) ^ v7) + (v0 ^ v7);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98D5LL) = v13 + v7 - ((2 * v13) & 0x9CC831C);
  int v14 = (*(_DWORD *)(v9 - 0x8FD385F8C7F98D1LL) ^ v7) + (v4 ^ v7);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98D1LL) = v14 + v7 - ((2 * v14) & 0x9CC831C);
  int v15 = (*(_DWORD *)(v9 - 0x8FD385F8C7F98CDLL) ^ v7) + (v2 ^ v7);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98CDLL) = v15 + v7 - ((2 * v15) & 0x9CC831C);
  int v16 = (*(_DWORD *)(v9 - 0x8FD385F8C7F98C9LL) ^ v7) + (v3 ^ v7);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98C9LL) = v16 + v7 - ((2 * v16) & 0x9CC831C);
  STACK[0x530] = v12 - 320;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))STACK[0x540])( 759LL,  207LL,  338LL,  2210763814LL,  13LL,  44LL,  3722269372LL);
}

uint64_t sub_100177868@<X0>( int a1@<W7>, int32x4_t *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, int8x16_t a47, int32x4_t a48)
{
  int8x16x4_t v74 = vld4q_s8(v48);
  v51.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v51.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  uint8x16_t v52 = (uint8x16_t)veorq_s8(v74.val[0], v51);
  uint16x8_t v53 = vmovl_high_u8(v52);
  int8x16_t v54 = (int8x16_t)vmovl_high_u16(v53);
  uint16x8_t v55 = vmovl_u8(*(uint8x8_t *)v52.i8);
  int8x16_t v56 = (int8x16_t)vmovl_high_u16(v55);
  uint8x16_t v57 = (uint8x16_t)veorq_s8(v74.val[1], v51);
  uint16x8_t v58 = vmovl_u8(*(uint8x8_t *)v57.i8);
  uint16x8_t v59 = vmovl_high_u8(v57);
  int8x16_t v60 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v58.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8));
  int8x16_t v61 = vorrq_s8((int8x16_t)vshll_high_n_u16(v58, 8uLL), v56);
  int8x16_t v62 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v59.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v53.i8));
  int8x16_t v63 = vorrq_s8((int8x16_t)vshll_high_n_u16(v59, 8uLL), v54);
  uint8x16_t v64 = (uint8x16_t)veorq_s8(v74.val[2], v51);
  _Q17 = (int8x16_t)vmovl_high_u8(v64);
  _Q16 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v64.i8);
  int8x16_t v67 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL);
  __asm { SHLL2           V16.4S, V16.8H, #0x10 }

  int8x16_t v72 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL);
  __asm { SHLL2           V17.4S, V17.8H, #0x10 }

  v74.val[0] = veorq_s8(v74.val[3], v51);
  v74.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v74.val[0].i8);
  v74.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v74.val[0]);
  v74.val[2] = vorrq_s8( vorrq_s8(v60, v67),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v74.val[1].i8), 0x18uLL));
  v74.val[1] = vorrq_s8( vorrq_s8(v61, _Q16),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v74.val[1]), 0x18uLL));
  v74.val[3] = vorrq_s8( vorrq_s8(v62, v72),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v74.val[0].i8), 0x18uLL));
  v74.val[0] = vorrq_s8( vorrq_s8(v63, _Q17),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v74.val[0]), 0x18uLL));
  a2[2] = vaddq_s32( vsubq_s32( (int32x4_t)v74.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[3], (int32x4_t)v74.val[3]), a47)),  a48);
  a2[3] = vaddq_s32( vsubq_s32( (int32x4_t)v74.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[0], (int32x4_t)v74.val[0]), a47)),  a48);
  *a2 = vaddq_s32( vsubq_s32( (int32x4_t)v74.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[2], (int32x4_t)v74.val[2]), a47)),  a48);
  a2[1] = vaddq_s32( vsubq_s32( (int32x4_t)v74.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[1], (int32x4_t)v74.val[1]), a47)),  a48);
  return ((uint64_t (*)(void))(*(void *)(v50
                                        + 8LL
                                        * (((16 * ((a1 + 1200216607) < 0x10)) | (32
}

uint64_t sub_100177A98(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
}

uint64_t sub_100177B6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v9
                                                                        + 8LL
                                                                        * (((a7 + 1 + a8) < 0x30) | v8))
                                                            - 12LL))( a5,  a5,  v10 + 48);
}

uint64_t sub_100177C2C( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
}

void sub_100177D0C()
{
  LODWORD(STACK[0x638]) = v0;
  LODWORD(STACK[0x634]) = v1;
  LODWORD(STACK[0x524]) = v3;
  LODWORD(STACK[0x4B0]) = v2;
  LODWORD(STACK[0x598]) = v4 + 64;
  JUMPOUT(0x100177D5CLL);
}

uint64_t sub_100177E38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  unint64_t v60 = STACK[0x5E0];
  int v61 = *(unsigned __int8 *)(STACK[0x5E0] - 0x8FD385F8C7F98BDLL) ^ 0xF3;
  if (v61 == 2) {
    return ((uint64_t (*)(void))(*(void *)(v59
  }
                                          + 8LL
                                          * ((30 * (*(_DWORD *)(v60 - 0x8FD385F8C7F98C1LL) != 2113300787)) ^ (a8 - 318)))
                              - (((a8 - 681) | 0x209u) ^ 0x267LL)))();
  if (v61 == 1) {
    return ((uint64_t (*)(void))(*(void *)(v59
  }
                                          + 8LL
                                          * (((*(_DWORD *)(v60 - 0x8FD385F8C7F98C1LL) != 2113300787)
                                            * (((a8 + 589) | 0xA0) - 548)) ^ (a8 + 744)))
                              - 4LL))();
  STACK[0x448] = 91LL;
  *(_BYTE *)(v60 - 0x8FD385F8C7F98C2LL) = (a59 ^ 0xBA) * (a59 + 17);
  return ((uint64_t (*)(void))(*(void *)(v59
                                        + 8LL
                                        * ((1069 * (STACK[0x448] == (((17 * (a8 ^ 0x324) - 276) | 0x100u) ^ 0x30BLL))) ^ (17 * (a8 ^ 0x324))))
                            - 8LL))();
}

void sub_100178738()
{
}

uint64_t sub_100178740()
{
  return ((uint64_t (*)(void))STACK[0x600])();
}

uint64_t sub_100178770( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  *(_DWORD *)(v10 + ++*(_DWORD *)(v3 + 52) = ((((LODWORD(STACK[0x664]) ^ v11) + (v8 ^ v11)) % 0x2710) ^ 0x5DFFDD7D)
                        - 292623373
                        + (((((LODWORD(STACK[0x664]) ^ v11) + (v8 ^ v11)) % 0x2710) << ((a8 + 32) ^ 0x2A)) & 0x3AFA);
  int v12 = STACK[0x66C];
  LODWORD(STACK[0x4EC]) = STACK[0x66C];
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((1936 * (v12 == v11)) ^ (a8 - 224))) - 8LL))();
}

uint64_t sub_100178800@<X0>(int a1@<W8>)
{
  *int v2 = STACK[0x49C];
  v2[85] = STACK[0x5CC];
  v2[86] = STACK[0x55C];
  v2[87] = STACK[0x61C];
  v2[88] = STACK[0x5AC];
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((STACK[0x578] != 0) * (((41 * (a1 ^ 0x238) + 337) ^ 0x54F) + 371)) ^ (41 * (a1 ^ 0x238) + 337))))();
}

uint64_t sub_100178864( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  STACK[0x530] -= 1616LL;
  LODWORD(STACK[0x4EC]) = a4 + 162;
  return (*(uint64_t (**)(void))(v8 + 8LL * (((STACK[0x578] != 0) * (((a8 + 337) ^ 0x54F) + 371)) ^ (a8 + 337))))();
}

uint64_t sub_1001788B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v8 + 8LL * (((STACK[0x578] != 0) * (((a8 + 337) ^ 0x54F) + 371)) ^ (a8 + 337))))();
}

uint64_t sub_1001788DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(STACK[0x48C]) = a4 - 22;
  return sub_100178FC0();
}

uint64_t sub_100178A64()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((125 * ((((v2 ^ 0x63C) - 781) & v0) != 1662039774)) ^ v2)) - 4LL))();
}

uint64_t sub_100178A9C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  LODWORD(STACK[0x48C]) = v2 - 22;
  unint64_t v4 = STACK[0x5A0];
  BOOL v5 = LODWORD(STACK[0x58C]) == 0;
  STACK[0x4F0] = LODWORD(STACK[0x58C]);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v3
                                                              + 8LL
                                                              * ((v5 * (((a2 + 510) | 0x40) ^ 0x50D)) ^ (a2 - 633))))( a1,  v4);
}

uint64_t sub_100178AE0(uint64_t a1, uint64_t a2)
{
  int v6 = v2 + 598;
  ((void (*)(void, uint64_t, void))STACK[0x2E8])(*(unsigned int *)STACK[0x2E0], a2, 0LL);
  uint64_t v7 = LODWORD(STACK[0x48C]);
  unint64_t v8 = 1755732067 * ((2 * (v4 & 0x4FB84E09DB840A10LL) - v4 + 0x3047B1F6247BF5EELL) ^ 0xEDEC16C9FABD4835LL);
  *(void *)(v5 - 192) = v8 + 2210763813u;
  *(void *)(v5 - 168) = v7 + v8;
  *(_DWORD *)(v5 - 196) = (v6 + 418080657) & 0xFFFBEAB2 ^ v8;
  *(_DWORD *)(v5 - 160) = (v6 - 1689052281) ^ v8;
  *(_DWORD *)(v5 - 184) = (v6 + 418080657) ^ v8;
  *(_DWORD *)(v5 - 1sub_10000AE14(v1 - 80) = -1755732067 * ((2 * (v4 & 0xDB840A10) - v4 + 612103662) ^ 0xFABD4835);
  *(_DWORD *)(v5 - 176) = ((v6 + 418080657) ^ 0x85) + v8;
  uint64_t v9 = ((uint64_t (*)(uint64_t))STACK[0x380])(v5 - 200);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v3 + 8LL * *(int *)(v5 - 200));
  LODWORD(STACK[0x300]) = 701983352;
  return v10(v9);
}

uint64_t sub_100178E80()
{
  int v3 = *(_DWORD *)(v1 + 56);
  *(_DWORD *)(v1 + 56) = v0 - 294 + v3 - 484;
  uint64_t v4 = *(uint64_t (**)(void))(v2 + 8LL * ((1620 * ((v3 - 1372200257) < 0xFFFFFFFA)) ^ (v0 - 294)));
  LODWORD(STACK[0x300]) = 701983352;
  return v4();
}

uint64_t sub_100178ED0()
{
  *(_DWORD *)(v1 - 200) = (v0 + 2138962875) ^ (535753261
                                             * ((v1 + 1163127509 - 2 * ((v1 - 200) & 0x4553EB9D)) ^ 0x4FA7E5B2));
  sub_1001A62A4((_DWORD *)(v1 - 200));
  *(void *)(v1 - 176) = STACK[0x268];
  *(_DWORD *)(v1 - 184) = 3804331 * ((((v1 - 200) | 0x2E413280) - (v1 - 200) + ((v1 - 200) & 0xD1BECD78)) ^ 0x50941776)
                        + v0
                        + 311;
  *(void *)(v1 - 192) = STACK[0x270];
  *(_BYTE *)(v1 - 200) = (-85 * ((((v1 + 56) | 0x80) - (v1 + 56) + ((v1 + 56) & 0x78)) ^ 0x76)) ^ 0x56;
  ((void (*)(uint64_t))STACK[0x260])(v1 - 200);
  LODWORD(STACK[0x300]) = 701983352;
  return sub_100178FC0();
}

uint64_t sub_100178FC0()
{
}

void sub_100179008(int a1@<W8>)
{
  int v3 = a1 - 407;
  ((void (*)(void, uint64_t, void))STACK[0x2E8])( *(unsigned int *)STACK[0x2E0],  v1,  (LODWORD(STACK[0x300]) - 701983352 + a1 - 407 - 790));
  *(_DWORD *)(v2 - 200) = (v3 + 2138962570) ^ (535753261
                                             * ((((v2 - 200) | 0x6983BC26) - ((v2 - 200) & 0x6983BC26)) ^ 0x6377B209));
  sub_1001A62A4((_DWORD *)(v2 - 200));
  JUMPOUT(0x100179094LL);
}

void sub_1001790DC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((2 * (a1 & 0x878F6F35) - a1 + 2020643018) ^ 0xC2E4E8A8));
  __asm { BR              X11 }

uint64_t sub_1001791C4@<X0>( uint64_t a1@<X8>, uint64_t a2, unsigned int a3, int a4, unint64_t *a5, uint64_t a6, unsigned int a7)
{
  int v11 = v8 ^ v7;
  unsigned int v12 = 3804331 * ((-1461682303 - (&a3 | 0xA8E07F81) + (&a3 | 0x571F807E)) ^ 0x29CAA588);
  a3 = v12 + 282547555;
  a4 = v12 + v8 - 614;
  a5 = &STACK[0x48247A308694277E];
  a6 = v9;
  a7 = v12 - 1461728294;
  uint64_t v13 = (*(uint64_t (**)(unsigned int *))(a1 + 8LL * (v8 - 994)))(&a3);
  return ((uint64_t (*)(uint64_t))(*(void *)(v10
                                                      + 8LL
                                                      * (((*(_DWORD *)(v9 - 0x27E11828102FB971LL) == 2084229119)
                                                        * (v11 - 647)) ^ v8))
                                          - 8LL))(v13);
}

void sub_1001792A0(_DWORD *a1@<X8>)
{
  unsigned int v4 = 423793223 * (v1[1] - v2) - ((847586446 * (v1[1] - v2) + 1023904614) & 0x9CE56E16) + 1828093118;
  *uint64_t v5 = ((v4 >> ((v3 - 31) & 0xED ^ 0xFD)) ^ 0x4E)
      - 2 * (((v4 >> ((v3 - 31) & 0xED ^ 0xFD)) ^ 0x4E) & 0x2D ^ (v4 >> ((v3 - 31) & 0xED ^ 0xFD)) & 1)
      + 44;
  v5[1] = (BYTE2(v4) ^ 0x72) - ((2 * (BYTE2(v4) ^ 0x72)) & 0x58) + 44;
  v5[2] = (BYTE1(v4) ^ 0xB7) - ((2 * (BYTE1(v4) ^ 0xB7)) & 0x58) + 44;
  void v5[3] = v4 ^ 0x27;
  *int v1 = *a1;
}

void sub_1001793AC(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (235795823 * ((-127693918 - (a1 | 0xF8638BA2) + (a1 | 0x79C745D)) ^ 0x93313D04));
  __asm { BR              X10 }

uint64_t sub_100179478(uint64_t a1)
{
  int v5 = *(_DWORD *)(*(void *)(a1 + 8) + v4) == (((v3 ^ 0x64) - 1470) ^ (v1 + 298));
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((8 * v5) | (v5 << 6)) ^ v3)) - 8LL))();
}

uint64_t sub_1001794B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  unsigned int v6 = v2 + 1374699841 * (&v4 ^ 0x6DF41809) + 137;
  return sub_1001798B4((uint64_t)&v4);
}

void sub_100179618(uint64_t a1)
{
  unint64_t v2 = (unint64_t)&v3[qword_101935C48 ^ qword_101935C50];
  qword_101935C50 = (1126174607 * v2) ^ 0x245AECB3A987CA56LL;
  qword_101935C48 = 1126174607 * (v2 ^ 0x245AECB3A987CA56LL);
  ((void (*)(char *, void (*)()))*(&off_101826020
                                            + ((-113 * ((-113 * v2) ^ qword_101935C48)) ^ byte_1012D7CE0[byte_1012D3E60[(-113 * ((-113 * v2) ^ qword_101935C48))] ^ 0x85])
                                            + 84))( (char *)*(&off_101826020 + ((-113 * ((qword_101935C48 - qword_101935C50) ^ 0x56)) ^ byte_1012D7BE0[byte_1012D3D60[(-113 * ((qword_101935C48 - qword_101935C50) ^ 0x56))] ^ 0x6A])
            + 55)
  - 12,
    sub_1001A5ED4);
  __asm { BR              X10 }

uint64_t sub_10017973C@<X0>(unsigned int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((1818
                                * (((a1 ^ (*(void *)(*(void *)(v2 + 8LL * (a1 ^ 0x3DB)) - 4LL) == 0LL)) & 1) == 0)) ^ a1)))();
}

uint64_t sub_100179774@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (a1 ^ 0x3D3u)))(v1);
}

  ;
}

uint64_t sub_1001797A4(uint64_t a1)
{
  int v1 = 628203409 * (((a1 | 0xC21FEC2B) - (a1 & 0xC21FEC2B)) ^ 0x4097E018);
  int v2 = *(_DWORD *)(a1 + 8) - v1;
  unsigned int v3 = v1 + *(_DWORD *)(a1 + 12) - 103152451;
  int v4 = (*(_DWORD *)(*(void *)a1 - 0x8FD385F8C7F98D9LL) ^ 0xA20257AB) + v3;
  unsigned int v5 = v4 - 1576904789 + (~(2 * v4) | 0xBBFB50A9) + 1;
  *(_DWORD *)(*(void *)a1 - 0x8FD385F8C7F98D9LL) = v5;
}

void sub_10017986C(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x8FD385F8C7F98DDLL) = (*(_DWORD *)(a1 - 0x8FD385F8C7F98DDLL) ^ 0x7299FD1B)
                                        + 1922694427
                                        - ((2 * (*(_DWORD *)(a1 - 0x8FD385F8C7F98DDLL) ^ 0x7299FD1B) + 2) & 0xE533FA36)
                                        + 1;
}

uint64_t sub_1001798B4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1374699841 * ((((2 * a1) | 0x340440B2) - a1 + 1711136679) ^ 0xF7F63850);
  return ((uint64_t (*)(void))(*((void *)*(&off_101826020 + (v1 ^ 0x1C3))
                              + (((*(void *)a1 == *(void *)(a1 + 8)) * ((v1 + 3) ^ 0x1B3)) ^ v1)
                              - 1)
                            - 8LL))();
}

uint64_t sub_100179930@<X0>(uint64_t a1@<X8>)
{
  int v4 = *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL);
  int v5 = v4 - 1966800080;
  if (v4 - 1966800080 < 0) {
    int v5 = 1966800080 - v4;
  }
  *(_DWORD *)(v1 - 0x1F589EA4AC42BDE5LL) = v4;
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * ((((v5 ^ 0x3FECDBCA)
                                           - 583062400
                                           + ((v5 << ((29 * (v3 ^ 0xB9)) ^ 0xB2)) & 0x7FD9B794) != 489424970)
                                          * (347 * (v3 ^ 0x1B2) - 429)) ^ v3))
                            - 8LL))();
}

uint64_t sub_1001799DC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v3 - 0x1F589EA4AC42BDE1LL) + 4LL * (v5 - 489424971)) = *(_DWORD *)(*(void *)(v4 - 0x1F589EA4AC42BDE1LL)
                                                                                           + 4LL * (v5 - 489424971));
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (((v5 - 1 == v1) * ((87 * (v2 ^ 0x569)) ^ 0x210)) ^ v2)) - 12LL))();
}

void sub_100179A4C()
{
}

void sub_100179A58(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (1374699841 * ((((2 * (_DWORD)a1) | 0x97E9331C) - (_DWORD)a1 + 873162354) ^ 0xA6008187));
  __asm { BR              X10 }

uint64_t sub_100179B38@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  unsigned int v12 = 1755732067 * ((((2 * &a4) | 0x816F4332) - &a4 - 1085776281) ^ 0x9E711C42);
  a6 = (v11 - 105) ^ v12;
  a7 = &STACK[0x708F6A420CBDE15B];
  a8 = v12 ^ 0x161247E9;
  a4 = &STACK[0x3F8123127DDA1A6C];
  a5 = v10;
  uint64_t v13 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (v11 - 110)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v9
                                            + 8LL
                                            * (((*(_DWORD *)(v10 - 0x27E11828102FB971LL) != v8)
                                              * (v11 + ((v11 - 259) | 0x182) - 568)) ^ v11)))(v13);
}

uint64_t sub_100179C18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return (*(uint64_t (**)(void))(v11 + 8LL * (int)(((a10 != v10 - 4) * (((v12 - 851080683) ^ 0xCD458A49) - 389)) ^ v12)))();
}

void sub_100179C50(_DWORD *a1@<X8>)
{
  *a1 = v2;
  *(_DWORD *)(v1 + 4) = -2084203318;
}

void sub_100179D04()
{
  v0[1] = 108757529
  sub_1001A63A8(v0);
  __asm { BR              X8 }

uint64_t sub_100179DF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, int a17, unsigned int a18)
{
  a16 = &STACK[0x49EB7E5E2EA5C915];
  a18 = 854
      - 460628867 * ((851217541 - (&a16 | 0x32BC8C85) + (&a16 | 0xCD43737A)) ^ 0x81D5F107);
  sub_10017F1A8((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 - 1690371238 + *(void *)(v20 + 8LL * ((1742 * (a17 == 2084229119)) ^ v19))))( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  a9);
}

uint64_t sub_100179EA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, unsigned int a20, uint64_t a21)
{
  unsigned int v27 = 1178560073 * ((&a17 & 0xF177A641 | ~(&a17 | 0xF177A641)) ^ 0xB41C21DC);
  a19 = a15;
  a20 = v27 ^ 0x3E5;
  a18 = v27 + 804878199 * v25 + 1740498123;
  sub_1001790DC((uint64_t)&a17);
  unsigned int v28 = 1178560073 * ((&a17 - 30129850 - 2 * (&a17 & 0xFE344146)) ^ 0x44A03924);
  a20 = v28 ^ 0x3E5;
  a19 = a15;
  a18 = v28 + 804878199 * v24 + 1740498123;
  sub_1001790DC((uint64_t)&a17);
  unsigned int v29 = 1178560073
      * (((&a17 ^ 0xC8EAEDAE) & 0x7FE834FE | ~(&a17 ^ 0xC8EAEDAE | 0x7FE834FE)) ^ 0xF2695ECD);
  a18 = v29 + 292;
  a19 = a15;
  a20 = v29 ^ ((v23 ^ 0xDFFFDDDC) + 1865940968 + ((2 * v23) & 0xBFFFBBB8));
  a21 = a10;
  sub_100190984(&a17);
  unsigned int v30 = 1178560073 * (&a17 ^ 0xBA947862);
  a18 = v30 + 292;
  a20 = v30 ^ ((v22 ^ 0xFFBFDFD7) + 1333263853 + ((2 * v22) & 0xFF7FBFAE));
  a19 = a15;
  a21 = a11;
  sub_100190984(&a17);
  unsigned int v31 = 1178560073
      * ((-1714998320 - (&a17 | 0x99C733D0) + (&a17 | 0x6638CC2F)) ^ 0xDCACB44D);
  a19 = a15;
  a20 = v31 ^ ((a13 ^ 0x4F7FFDFD) - 4726841 + ((2 * a13) & 0x9EFFFBFA));
  a21 = v21;
  a18 = v31 + 292;
  uint64_t v32 = sub_100190984(&a17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v26 + 8LL * ((1649 * (a17 == 2084229119)) ^ 0x36Bu)) - 12LL))(v32);
}

uint64_t sub_10017A17C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, uint64_t a17, unsigned int a18, unsigned int a19, unsigned int a20, int a21)
{
  unsigned int v24 = 460628867
      * (((&a16 | 0x53DCC1F3) - &a16 + (&a16 & 0xAC233E08)) ^ 0x1F4A438E);
  a16 = &STACK[0x27D4077E41C0C6C0];
  a17 = a14;
  a18 = v24 - 1954399632;
  a19 = v24 + v21 - 2024873958;
  a20 = 274310066 - v24;
  uint64_t v25 = sub_1001A677C((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t))(*(void *)(v23 + 8LL * (((a21 == v22) * (v21 + 1172)) ^ v21)) - 12LL))(v25);
}

uint64_t sub_10017A238()
{
  int v12 = &STACK[0x18E41690234F4EB9];
  uint64_t v13 = v7;
  unsigned int v10 = (v2 - 473) ^ (1374699841
                    * ((-1810256295 - (&v10 | 0x9419AE59) + (&v10 | 0x6BE651A6)) ^ 0x61249AF));
  ((void (*)(unsigned int *))*(&off_101826020 + v2 - 693))(&v10);
  int v12 = v7;
  unsigned int v10 = (v2 - 462) ^ (1755732067 * (((&v10 | 0x20BFA5DD) - (&v10 & 0x20BFA5DD)) ^ 0xFE791806));
  sub_10017A8B8((uint64_t)&v10);
  if ((_DWORD)v13 == v3 + v4 - 493) {
    int v5 = v9;
  }
  else {
    int v5 = (int)v13;
  }
  int v12 = v7;
  unsigned int v11 = v2 + (((&v10 | 0x63B7244C) - (&v10 & 0x63B7244C)) ^ 0x69432A63) * v1 + 456;
  v0(&v10);
  int v12 = v8;
  unsigned int v11 = v4
      + ((1845353981 - (&v10 | 0x6DFDDDFD) + (&v10 | 0x92022202)) ^ 0x98F62C2D) * v1
      + 838;
  v0(&v10);
  return v5 ^ 0x7C3ACFFFu;
}

void sub_10017A408(uint64_t a1)
{
  int v1 = 235795823 * (((a1 | 0x1A7DF74B) - (a1 | 0xE58208B4) - 444462924) ^ 0x8ED0BE12);
  int v2 = *(_DWORD *)(a1 + 40) ^ v1;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(_DWORD *)(a1 + 64) - v1;
  int v6 = (*(_DWORD *)a1 ^ v1) - ((2 * (*(_DWORD *)a1 ^ v1) + 386188576) & 0x16332056);
  unsigned int v7 = 1374699841 * ((&v8 & 0xD57671FD | ~(&v8 | 0xD57671FD)) ^ 0x477D960B);
  uint64_t v14 = *(void *)(a1 + 8);
  int v9 = v7 ^ (v2 + 1695026847);
  int v15 = 950032007 * v5 - v7 + 688127838;
  int v13 = (v6 - 2036600133) ^ v7;
  uint64_t v10 = v4;
  uint64_t v12 = v3;
  uint64_t v8 = v4;
  sub_1001A6008((uint64_t)&v8);
  __asm { BR              X8 }

uint64_t sub_10017A5C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unint64_t *a11, char a12, unsigned int a13, uint64_t a14, int a15)
{
  char v23 = *(_BYTE *)(v16 + 24);
  int v24 = 794482241 * v21 + 1270960347;
  unsigned int v25 = v24 ^ 0xBEEE7F75;
  int v26 = (v24 << (5 * ((v22 - 64) & 0xD6 ^ 0xAB) - 92)) & 0x7DDCFEEA;
  unsigned int v27 = 1759421093 * (((&a10 | 0x3A5775E8) - (&a10 & 0x3A5775E8)) ^ 0x892AC5BC);
  a15 = v22 - v27 - 3;
  a14 = v19;
  a11 = &STACK[0x3B9673EEDC6940C6];
  a13 = v27 + v25 + 1802881968 + v26;
  a12 = (v23 - v20 - 52) ^ (-91 * (((&a10 | 0xE8) - (&a10 & 0xE8)) ^ 0xBC));
  uint64_t v28 = (*(uint64_t (**)(int *))(v15 + 8LL * (v22 ^ 0x2FE)))(&a10);
  return ((uint64_t (*)(uint64_t))(*(void *)(v18 + 8LL * ((102 * (a10 != v17)) ^ v22)) - 4LL))(v28);
}

uint64_t sub_10017A6EC()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v0 ^ (1871 * ((v1 - 75341170) < 0xFFFFFFFE))))
                            - ((121 * (v0 ^ 0x3D7) - 1065683550) & 0x3F850AF1)
                            + 745LL))();
}

uint64_t sub_10017A744@<X0>(uint64_t a1@<X8>, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  a5 = a1;
  a6 = a2;
  a3 = (v9 - 351) ^ (1374699841
                   * ((&a3 - 1361229690 - 2 * ((unint64_t)&a3 & 0xAEDD4886)) ^ 0xC329508F));
  uint64_t v10 = (*(uint64_t (**)(int *))(v6 + 8LL * (v9 ^ 0x247u)))(&a3);
  return ((uint64_t (*)(uint64_t))(*(void *)(v8
                                                      + 8LL
                                                      * (((a4 == v7 + v9 - 148 - 605) * ((v9 - 148) ^ 0x3BE)) ^ v9))
                                          - 4LL))(v10);
}

void sub_10017A7E0(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v1 + 48) - 0x27D4077E41C0C6Asub_1000EC398((uint64_t)va, 0LL) = a1;
  *(_DWORD *)(v1 + 68) = 2084229119;
}

uint64_t sub_10017A8B8(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (1755732067 * ((a1 & 0xECFD530 | ~(a1 | 0xECFD530)) ^ 0x2FF69714));
  return (*((uint64_t (**)(void))*(&off_101826020 + v1 - 301)
          + ((1584 * (*(void *)(a1 + 8) != 0x27E11828102FB989LL)) ^ v1)
          - 1))();
}

uint64_t sub_10017A944()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((59 * (*(_DWORD *)(v2 - 0x27E11828102FB971LL) == 2084229119)) ^ v0)))();
}

uint64_t sub_10017A980()
{
  unsigned int v3 = *(_DWORD *)(v2 - 0x27E11828102FB979LL) - 1725854611;
  unsigned int v4 = *(_DWORD *)(v2 - 0x27E11828102FB97DLL) - 2111635616;
  BOOL v5 = v4 < 0xAC874A85;
  BOOL v6 = v3 < v4;
  if (v3 < 0xAC874A85 != v5) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v1 + 8LL * ((709 * v6) ^ v0)))();
}

uint64_t sub_10017AA08@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *uint64_t v2 = a2;
  *(_DWORD *)(result + 16) = -2084203318;
  return result;
}

void sub_10017AA1C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  __asm { BR              X8 }

uint64_t sub_10017AA94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, unsigned int a15)
{
  uint64_t v17 = sub_1001A63A8(&a14);
  return (*(uint64_t (**)(uint64_t))(v16 + 8LL * ((949 * (a14 == 2084229119)) ^ v15)))(v17);
}

uint64_t sub_10017AB28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, int a15, unsigned int a16)
{
  a14 = &STACK[0x49EB7E5E2EA5C905];
  a16 = 854 - 460628867 * (((&a14 | 0x9646C919) + (~&a14 | 0x69B936E6)) ^ 0xDAD04B65);
  sub_10017F1A8((uint64_t)&a14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16
                                                                                                  + 8LL * ((211 * (a15 != (v17 ^ 0x56A9AAEC))) ^ 0x47Du)))( v18,  v19,  v20,  v21,  v22,  v23,  v24);
}

uint64_t sub_10017ABDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, unsigned int a16, uint64_t a17)
{
  a16 = v21 + 1224239923 * ((&a14 & 0x2EDB128E | ~(&a14 | 0x2EDB128E)) ^ 0x239710A6) + 1545;
  a15 = a12;
  a17 = v17;
  uint64_t v22 = ((uint64_t (*)(int *))(*(void *)(v20 + 8LL * (v21 - 137)) - 8LL))(&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (((a14 == v18) * (((v21 + 1115793816) | 0x142800AC) ^ 0x56A9ACBD)) ^ v21))
                                          - 8LL))(v22);
}

uint64_t sub_10017AC98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16, unsigned int a17, unsigned int a18, int a19)
{
  unsigned int v24 = 460628867
      * (((&a14 ^ 0x7470E57E) + 2038877446 - 2 * ((&a14 ^ 0x7470E57E) & 0x7986CD06)) ^ 0x4160AA05);
  a14 = &STACK[0x27D4077E41C0C6B0];
  a15 = a12;
  a18 = 274310066 - v24;
  a16 = v24 - 370372623;
  a17 = v24 + v22 - 2024873251;
  uint64_t v25 = sub_1001A677C((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21
                                                      + 8LL * (((a19 == v19) * (v20 + (v22 ^ (v23 + 516)) + 336)) ^ v22))
}

uint64_t sub_10017AD74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unint64_t *a16)
{
  a14 = (v16 - 282) ^ (1374699841
                     * ((2 * ((&a14 ^ 0x8D621A2D) & 0x1E6AC938)
  a15 = &STACK[0x18E41690234F4F65];
  a16 = a11;
  int v20 = *(void (**)(unsigned int *))(v19 + 8LL * (int)(v16 - 502));
  v20(&a14);
  a14 = (v16 - 282) ^ (1374699841
                     * ((&a14 + 2091475848 - 2 * (&a14 & 0x7CA96388)) ^ 0x115D7B81));
  a15 = &STACK[0x18E41690234F4F69];
  a16 = a11;
  v20(&a14);
  a15 = a11;
  a14 = (v16 - 271) ^ (1755732067 * ((&a14 & 0x36E44DFF | ~(&a14 | 0x36E44DFF)) ^ 0x17DD0FDB));
  uint64_t v21 = sub_10017A8B8((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v18 + 8LL * ((76 * ((_DWORD)a16 == v17)) ^ v16))
                                          - ((v16 - 675698623) & 0x56A9FFFE)
                                          + 1453959908LL))(v21);
}

uint64_t sub_10017AEE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  return ((uint64_t (*)(void))(v15 - (v16 + v14) + *(void *)(v18 + 8LL * ((1094 * (a14 == v17)) ^ v16))))();
}

uint64_t sub_10017AF14()
{
  int v5 = v2 ^ v0;
  *uint64_t v1 = ((v2 ^ v0) + 630269203) ^ v9;
  unsigned int v11 = 535753261 * (((v10 | 0x8B130A1B) - (v10 & 0x8B130A1B)) ^ 0x81E70434)
      - 1453958585
      + (v2 ^ v0);
  uint64_t v12 = v7;
  v4(v10);
  uint64_t v12 = v8;
  unsigned int v11 = 535753261 * ((-257335632 - (v10 | 0xF0A95EB0) + (v10 | 0xF56A14F)) ^ 0x5A2AF60)
      - 1453958585
      + v5;
  v4(v10);
  return v3 ^ 0x7C3ACFFFu;
}

void sub_10017B030(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) ^ (1755732067 * (((a1 | 0x83D72B3C) - (a1 & 0x83D72B3C)) ^ 0x5D1196E7));
  uint64_t v3 = *(void *)(a1 + 8);
  v2[0] = v1
        + 628203409
  sub_1001987D8((uint64_t)v2);
  __asm { BR              X9 }

uint64_t sub_10017B168@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5 = (((v4 ^ v3) >> 4) & 0xFF7FBFE ^ 0x2B65250) + (((v4 ^ v3) >> 5) ^ 0x5EA0D4D7) - 1742869756;
  int v6 = (v1 > 0x7E616FC) ^ (v5 < 0xF819E903);
  BOOL v7 = v5 < v1 - 132519677;
  if (v6) {
    BOOL v7 = v1 > 0x7E616FC;
  }
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * (((((v2 ^ 0x3F2) + 322) ^ 0x404 ^ (((v2 ^ 0x3F2) + 322) | 0x6A)) * v7) ^ v2 ^ 0x3F2)))();
}

uint64_t sub_10017B208@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (v2 ^ (195 * ((v1 & 0x1F) == 0x16)))) - 8LL))();
}

uint64_t sub_10017B250@<X0>(uint64_t a1@<X8>)
{
  int v6 = v1 - 107169793;
  if (*v4 + 180683568 < 0) {
    int v6 = -1181436931 - v1;
  }
  *int v4 = *v4 - 1503180286 + v6;
  int v7 = v2 + 1843515721;
  BOOL v8 = v7 < -1914318006;
  **(_DWORD **)(v5 - 0x1F589EA4AC42BDE1LL) = *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL
                                                                                                * (v1 - 1610350079));
  if (v7 >= -1914318006) {
    BOOL v8 = v7 > 233165643;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((44 * !v8) ^ v3)) - 267 * (v3 ^ 0x30Eu) + 797LL))();
}

void sub_10017B34C()
{
}

void sub_10017B354()
{
  *int v0 = 1966800080;
}

uint64_t sub_10017B5AC(uint64_t a1)
{
  int v1 = 1759421093 * ((~(_DWORD)a1 & 0xA201450D | a1 & 0x5DFEBAF2) ^ 0x117CF559);
  int v2 = *(_DWORD *)(a1 + 8) - v1;
  unsigned int v3 = *((_DWORD *)*(&off_101826020 + (v2 ^ 0x1B5)) + 84);
  unsigned int v4 = (*(_DWORD *)(a1 + 16) ^ v1) + 854324997;
  if (v4 < 0x8F6C2382 != v3 > 0x7093DC7D) {
    BOOL v5 = v3 > 0x7093DC7D;
  }
  else {
    BOOL v5 = v3 - 1888738430 > v4;
  }
  return (*((uint64_t (**)(void))*(&off_101826020 + (v2 & 0x5B7480F1)) + ((191 * !v5) ^ v2) - 1))();
}

uint64_t sub_10017B690()
{
  int v4 = 934 * (v2 ^ 0x17C);
  unsigned int v5 = v1 + 926143831;
  BOOL v6 = v5 < (((v4 ^ 0x7F3) - 1816920085) ^ (2 * (v4 ^ 0x7F3u)));
  BOOL v7 = v3 - 1816919596 < v5;
  if (v3 > 0x6C4BFE2B != v6) {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (!v7 | v4)) - 8LL))();
}

uint64_t sub_10017B718(uint64_t a1)
{
  unsigned int v5 = *(_DWORD *)(v3 + 340);
  unsigned int v6 = (*(_DWORD *)(a1 + 4) ^ v1) + 1453046543;
  if (v6 < 0x733EA400 != v5 > ((v4 - 360246287) & 0x1578E7FF ^ 0x8CC15A81)) {
    BOOL v7 = v5 > ((v4 - 360246287) & 0x1578E7FF ^ 0x8CC15A81);
  }
  else {
    BOOL v7 = v5 + 1933485056 > v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((44 * !v7) ^ v4)) - 4LL))();
}

uint64_t sub_10017B7A8()
{
  unsigned int v4 = v2 - 1196043032;
  BOOL v5 = v4 < 0xD558BDD9;
  BOOL v6 = v3 - 715604519 < v4;
  if (v3 > 0x2AA74226 == v5) {
    BOOL v5 = v6;
  }
  return (*(uint64_t (**)(void))(v0 + 8LL * (v1 ^ (1369 * !v5))))();
}

uint64_t sub_10017B80C(_DWORD *a1)
{
  int v5 = *a1 ^ v1;
  unsigned int v6 = *(_DWORD *)(v4 + 352);
  else {
    BOOL v7 = v6 - 1568686394 > v5 + 1735514754;
  }
  return (*(uint64_t (**)(void))(v2 + 8LL * ((198 * !v7) ^ v3)))();
}

uint64_t sub_10017B878@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  else {
    BOOL v4 = v2 + 736171951 < v3 - 254594197;
  }
  if (v4) {
    int v5 = a2;
  }
  else {
    int v5 = a2 + 1;
  }
  *(_DWORD *)(result + 12) = v5;
  return result;
}

void sub_10017B8CC(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_10017B908()
{
  return 4294925273LL;
}

uint64_t sub_10017B914@<X0>(uint64_t a1@<X8>)
{
  return 0LL;
}

void sub_10017B928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4) {
    BOOL v5 = a5 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  __asm { BR              X8 }

uint64_t sub_10017B9A0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  *a4 = 0LL;
  *a5 = 0;
  a18 = 108757529
  uint64_t v21 = sub_1001A63A8(&a17);
  return (*(uint64_t (**)(uint64_t))(v19 + 8LL * ((1208 * (a17 == v20)) ^ v18)))(v21);
}

uint64_t sub_10017BA2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, unsigned int a19, int a20)
{
  unsigned int v22 = 1759421093 * ((2 * (&a17 & 0x43114A58) - &a17 - 1125206624) ^ 0xF9305F4);
  a20 = v22 ^ 0x5C802CB3;
  LODWORD(a17) = v22 ^ 0x3B0DE444;
  HIDWORD(a17) = v22 ^ 0x1CA2E939;
  a18 = v22 + 382;
  ((void (*)(unint64_t **))(*(void *)(v21 + 576) - 8LL))(&a17);
  a17 = &STACK[0x49EB7E5E2EA5C925];
  a19 = 854 - 460628867 * ((2 * (&a17 & 0x4542B498) - &a17 + 985484129) ^ 0x762BC91C);
  sub_10017F1A8((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8LL * ((249 * (a18 == 2084229119)) ^ 0x271u)))( v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  a9,  a10);
}

uint64_t sub_10017BB44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, unsigned int a20, uint64_t a21)
{
  unsigned int v26 = 1178560073 * ((2 * (&a17 & 0x1E626340) - &a17 + 1637719231) ^ 0xDB09E4DD);
  a18 = v26 + 804878199 * v23 + 1740498123;
  a20 = v26 ^ 0x3E5;
  a19 = a16;
  (*(void (**)(int *))(v25 + 928))(&a17);
  unsigned int v27 = 1178560073 * ((2 * (&a17 & 0x767B7528) - &a17 - 1987802416) ^ 0x3310F2B2);
  a18 = v27 + 292;
  a20 = ((v22 ^ 0x5F3FDDDF) - 268959771 + ((2 * v22) & 0xBE7FBBBF)) ^ v27;
  a19 = a16;
  a21 = v21;
  uint64_t v28 = (*(uint64_t (**)(int *))(v25 + 448))(&a17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v24 + 8LL * ((1662 * (a17 == 2084229119)) ^ 0x2FFu)) - 12LL))(v28);
}

uint64_t sub_10017BCAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, uint64_t a18, int a19, int a20, int a21, int a22)
{
  if (a12 >= 0x5DC22130) {
    int v25 = 274310065;
  }
  else {
    int v25 = 274310066;
  }
  int v26 = 460628867 * ((&a17 + 1990631928 - 2 * ((unint64_t)&a17 & 0x76A6A1F8)) ^ 0x3A302385);
  a21 = v25 - v26;
  a17 = &STACK[0x27D4077E41C0C6C0];
  a18 = a16;
  a19 = v26 - 1185536072;
  a20 = v26 + v22 - 2024873850;
  uint64_t v27 = sub_1001A677C((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v23 + 8LL * ((466 * (a22 == v24)) ^ v22))
                                          - ((v22 + 593496192) & 0x6F1)
                                          + 613LL))(v27);
}

uint64_t sub_10017BD8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v14
                                                                        + 8LL
                                                                        * ((((v13 + 771) ^ 0x790) * (a12 < v12)) ^ (v13 + 771)))
                                                            - 4LL))( a1,  a2,  a3);
}

uint64_t sub_10017BE1C@<X0>( uint64_t a1@<X8>, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, _BYTE *a6, int a7, char a8, uint64_t a9, uint64_t a10, unsigned int a11, char *a12, _BYTE *a13, uint64_t a14, unsigned int a15)
{
  unsigned int v22 = v16;
  int v23 = v15 - 245;
  a12 = &a8 + a1;
  a13 = a6;
  v20(&a11);
  a12 = a6;
  a13 = v22;
  a14 = v18;
  a15 = (v23 - 892) ^ (1225351577
                     * (((&a11 | 0x5CB85DA2) - &a11 + (&a11 & 0xA347A258)) ^ 0x7F2285B4));
  ((void (*)(unsigned int *))(*(void *)(v21 + 8LL * (v23 - 1282)) - 12LL))(&a11);
  a11 = (v23 - 891) ^ (1374699841
                     * (((&a11 | 0xDC81876C) - &a11 + (&a11 & 0x237E7890)) ^ 0xB1759F65));
  a13 = a6;
  a12 = a3;
  v20(&a11);
  a12 = a6;
  a11 = (v23 - 880) ^ (1755732067
                     * ((2 * (&a11 & 0x24AA4D50) - &a11 + 1532342955) ^ 0x85930F70));
  uint64_t v24 = sub_10017A8B8((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (int)((((_DWORD)a13 == 2084229119)
                                                             * ((((v23 ^ 0x536) + 1218) ^ 0xFFFFF9D9)
                                                              + 13 * (v23 ^ 0x536))) ^ v23))
                                          - 4LL))(v24);
}

uint64_t sub_10017BFFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL
                                              * ((496 * (((a14 == v16) ^ (v14 - 110)) & 1)) ^ v14))
}

uint64_t sub_10017C03C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * (int)(((a6 != v7) * ((((a1 & 0xE602BD7D) + 525) | 0x80) ^ 0x7C8)) | a1 & 0xE602BD7D))
                            - ((a1 & 0xE602BD7D)
                             - 526)
                            + 763LL))();
}

uint64_t sub_10017C088@<X0>(int a1@<W8>)
{
  BOOL v5 = (*(uint64_t (**)(void))(v4 + 8LL * (v1 ^ 0x778)))(a1 ^ v3) != 0;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((v5 * ((13 * (v1 ^ 0x7A1)) ^ (v1 - 365744092) & 0x15CCCAC3 ^ 0x79)) ^ v1))
                            - 8LL))();
}

uint64_t sub_10017C0F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v16 = v13 + 651 + (a13 ^ v15) - (((19 * (v13 ^ 0x2E3)) ^ 0x35133DF) & (2 * (a13 ^ v15))) + 27825513;
  BOOL v17 = ((2 * v16) & 0xFDF3E37E ^ 0x151206C) + (v16 ^ 0xFF516BC9) + 930545525 != 913371444;
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * (((2 * v17) | (4 * v17)) ^ v13)) - 8LL))();
}

uint64_t sub_10017C194(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5
                                                               + 8LL
                                                               * (((4
                                                                  * ((((v2 + v1 + 17174081) < 8) ^ (v4 - 50)) & 1)) & 0xF7 | (8 * ((((v2 + v1 + 17174081) < 8) ^ (v4 - 50)) & 1))) ^ v4))
                                                   - (v4 - 1795787388)
                                                   + 2499181743LL))( a1,  v3);
}

uint64_t sub_10017C20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(a4
                                                   + *(void *)(v8
                                                               + 8LL
                                                               * ((1325
                                                                 * ((((unint64_t)(v6 - a1) < 0x20) ^ (a6 | 0xAA)) & 1)) ^ (a6 | 0xAA)))
                                                   - (a5
                                                    + (a6 | 0xAAu)
                                                    - 314)
                                                   + 4))( a1,  v7);
}

uint64_t sub_10017C254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * (((v6 >= (((a6 ^ 0x344) + 47) ^ 0x13Eu))
                                          * ((a5 + (a6 ^ 0x344) + 386) ^ (a5 + 616))) ^ a6 ^ 0x344))
                            - 4LL))();
}

uint64_t sub_10017C298(uint64_t a1, int a2)
{
  uint64_t v8 = (v6 + v3);
  __int128 v9 = *(_OWORD *)(v2 + v8 - 15);
  __int128 v10 = *(_OWORD *)(v2 + v8 - 31);
  uint64_t v11 = a1 + v8;
  *(_OWORD *)(v11 - 15) = v9;
  *(_OWORD *)(v11 - 31) = v10;
  LODWORD(v11) = ((a2 + 303762157) & 0x58EE7EFF) - 1668 != (v5 & 0xFFFFFFE0);
  return (*(uint64_t (**)(void))(v7 + 8LL * (int)((v11 | (8 * v11)) ^ (v4 + a2 + 197))))();
}

uint64_t sub_10017C304(uint64_t a1)
{
  *int v3 = a1;
  _DWORD *v7 = v2;
  int v5 = 5 * (v1 ^ 0x570);
  uint64_t v13 = v9;
  unsigned int v12 = (v1 ^ 0x7F2)
  v8(v11);
  uint64_t v13 = v10;
  unsigned int v12 = v5
      + 535753261
  v8(v11);
  return v4 ^ 0x7C3ACFFFu;
}

void sub_10017C5BC(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    BOOL v1 = *(_DWORD *)(a1 + 20) - 1759421093 * (a1 ^ 0xB37DB054) == 711215909;
  }
  else {
    BOOL v1 = 1;
  }
  char v2 = v1;
  __asm { BR              X9 }

uint64_t sub_10017C660@<X0>(int a1@<W8>)
{
  int v3 = a1 | 0x110;
  int v4 = (*(uint64_t (**)(uint64_t))(v1 + 8LL * ((a1 | 0x110) ^ 0x5B7)))(32LL) == 0;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((16 * v4) | (v4 << 7)) ^ v3))
                            - (647 * (v3 ^ 0x557u)
}

uint64_t sub_10017C6D8()
{
}

uint64_t sub_10017C730@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v11 = v2 - 711215910;
  int v12 = v2 - 1;
  int v13 = *(unsigned __int8 *)(v6 + v11);
  if (v13 == 44) {
    __asm { BR              X11 }
  }

  if (v13 == 172)
  {
    int v14 = 2084229119;
    uint64_t v15 = *(void *)(v4 + 8);
    int v16 = *(unsigned __int8 *)(v4 + 16) ^ v5;
    *(void *)uint64_t result = v6;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 12) = v12;
    if (v16 == 54) {
      int v17 = -807069058;
    }
    else {
      int v17 = -807069057;
    }
    *(_DWORD *)(result + 16) = 325434904;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = 2084229119;
    *(void *)(v15 - 0x3B9673EEDC6940C6LL) = a2;
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v8 + 8LL * (v9 ^ 0x222)))();
    int v14 = -2084203482;
  }

  *(_DWORD *)uint64_t v4 = v14;
  return result;
}

void sub_10017C814(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_10017C888@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8LL * ((944 * (((2LL * (a6 - 510884208)) & 0x1EF6F776ELL) + ((a6 - 510884208) ^ 0x473FDBF5F7B7BBB7LL) - 0x473FDBF544A5893BLL == 3004314236LL)) ^ 0x1BBu))
                                                                                       - 8LL))( a1,  a2,  a3,  a4,  a5,  3830081139LL);
}

uint64_t sub_10017C928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = *(unsigned __int8 *)(v9 + v10 - 0x70045B2604D2BAE7LL) - *(unsigned __int8 *)(v8 + v10 - 0x70045B2604D2BAE7LL);
  return ((uint64_t (*)(uint64_t))(a6
                                          - ((v6 - 321192303) & 0xF76F66FB)
                                          + *(void *)(v11
                                                      + 8LL
                                                      * ((1100
                                                        * (((2 * v12) & 0xDFEDFFFE) + (v12 ^ (v7 + 443)) == ((v6 + 205) ^ v7))) ^ v6))))(4294925278LL);
}

uint64_t sub_10017C9A8()
{
  BOOL v5 = v1 < v0;
  if (v5 == v3 - 0x70045B2551C0886ALL < v0) {
    BOOL v5 = v3 - 0x70045B2551C0886ALL < v1;
  }
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((((v2 - 1388841933) & 0x52C80AFF ^ 0x35E) * !v5) ^ v2)) - 8LL))();
}

uint64_t sub_10017CA1C@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v2
                                                      + 8LL
                                                      * (int)(((((v1 ^ 0x106) - 464886637) ^ 0xE44A60A8)
                                                             * (a1 == 510884217)) ^ v1))
                                          - 8LL))(4294925278LL);
}

uint64_t sub_10017CA74()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (((((2 * (*v0 - 42)) & 0xFFEB8FD6) + ((*v0 - 42) ^ 0xFFF5C7EB) == -669717)
                                * ((v1 ^ 0xF5) + 1157)) ^ v1)))();
}

uint64_t sub_10017CAD0()
{
  int v5 = ((v3 - 232) | 0x1D) + *(unsigned __int8 *)(v2 + 1) - 419;
  return (*(uint64_t (**)(void))(v4 + 8LL * ((1998 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_10017CB1C()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
}

uint64_t sub_10017CB64()
{
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * ((1911
}

uint64_t sub_10017CBAC()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((614
                                * ((((v3 - 909622249) & 0x3637BB1D ^ (v1 - 267)) & (2
}

uint64_t sub_10017CC08()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((1007
}

uint64_t sub_10017CC58()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * (int)((((v1 & (2 * (*(unsigned __int8 *)(v2 + 6) - 1)))
}

uint64_t sub_10017CCAC()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((1014
}

uint64_t sub_10017CD18()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * (((((5 * (v3 ^ 0xE9)) ^ ((v1 & (2 * (*(unsigned __int8 *)(v2 + 8) - 4)))
}

uint64_t sub_10017CD70(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v4 + 96) + 1428LL) = 1998989824;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1737
                                          * (*(_DWORD *)(a2 + 4) == ((v3 + 277556864) & 0xEF74D19D)
                                                                  + (v3 ^ 0x186 ^ (v2 + 293)))) ^ v3))
                            - 8LL))();
}

uint64_t sub_10017CDD8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1992
                                          * ((v3 & (2 * (**(unsigned __int8 **)(a2 + 8) - 42)))
}

uint64_t sub_10017CE1C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1642
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
}

uint64_t sub_10017CE64()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1997
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
}

uint64_t sub_10017CEB4()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1886
                                          * (((v1 + (v2 ^ 0x2B) - 310) & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
}

uint64_t sub_10017CEF8()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((662
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
}

uint64_t sub_10017CF34()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((2012
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
                                           + ((*(unsigned __int8 *)(v3 + 5) - 13) ^ v0) == v0
                                                                                         + ((v2 - 285) | 0x100)
                                                                                         + 54
                                                                                         - 310)) ^ v2))
                            - 8LL))();
}

uint64_t sub_10017CF7C(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((29
                                          * (((a1 + 9) ^ (((v2 + 31 * (a1 ^ 0x10A) - 310) & (2 * (*(unsigned __int8 *)(v3 + 6) - 1)))
}

uint64_t sub_10017CFD4()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1425
                                          * ((((*(unsigned __int8 *)(v3 + 7) - 1) << ((v2 | 0x14) ^ 0x1C)) & v1)
}

uint64_t sub_10017D024()
{
  int v6 = (v1 & (2 * (*(unsigned __int8 *)(v3 + 8) - 5))) + ((*(unsigned __int8 *)(v3 + 8) - 5) ^ v0) == (((v2 + 21) | 4) ^ v4);
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((4 * v6) | (v6 << 7)) ^ v2)) - 8LL))();
}

uint64_t sub_10017D064(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v4 + 96) + 1428LL) = 1998989828;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((482 * (*(_DWORD *)(a2 + 4) == ((((v3 - 253) | 0x116) + 67) ^ v2))) ^ (v3 - 30)))
                            - 8LL))();
}

uint64_t sub_10017D0BC(uint64_t a1, uint64_t a2)
{
  int v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (int)((((v3 & (2 * v6)) + (v6 ^ v2) == v2)
                                               * ((v4 + 594269128) & 0xDC942BEF ^ 0x7EA)) ^ v4))
                            - 8LL))();
}

uint64_t sub_10017D110()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((226
                                          * (((v1 + (v2 ^ 0x1D8) - 238) & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
}

uint64_t sub_10017D154()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((827
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                           + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == v0
                                                                                         + ((v2 - 140) | 0x44)
                                                                                         - 238)) ^ v2))
                            - 8LL))();
}

uint64_t sub_10017D19C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1110
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
}

uint64_t sub_10017D1E0()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
                                           + ((*(unsigned __int8 *)(v3 + 4) - 247) ^ v0) == v0)
                                          * ((v2 - 72) ^ 0x7E7)) ^ v2))
                            - 8LL))();
}

uint64_t sub_10017D21C()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1516
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
}

uint64_t sub_10017D26C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 6) - 1)))
                                           + ((*(unsigned __int8 *)(v3 + 6) - 1) ^ v0) == v0)
                                          * (((v2 - 148) | 0x4C) ^ 0x98)) ^ v2))
                            - 8LL))();
}

uint64_t sub_10017D2B0()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1580
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
}

uint64_t sub_10017D2F0()
{
  unsigned int v5 = ((((v2 - 130104887) & 0x7C13DFF) - 17) ^ 0xFFFFFF1B) + *(unsigned __int8 *)(v3 + 8);
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((2024 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v2)) - 8LL))();
}

uint64_t sub_10017D348@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26)
{
  int v30 = v26 + 122;
  *(_DWORD *)(*(void *)(v27 + 96) + 1428LL) = 1998989840;
  int v34 = (v26 - 255) | 0x60B;
  int v31 = 1178560073 * ((v29 + 32226232 - 2 * ((v29 - 120) & 0x1EBBC30)) ^ 0xBB7FC452);
  *(void *)(v29 - 112) = &STACK[0x8FD385F8C7F9999];
  *(_DWORD *)(v29 - 104) = v26 + 122 - v31 - 1882357841;
  *(_DWORD *)(v29 - 120) = ((a1 - 3) ^ 0x3694542D) - v31;
  uint64_t v32 = sub_100183510(v29 - 120);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v28
                                                               + 8LL
                                                               * ((1798
                                                                 * (*(_DWORD *)v27
                                                                  + 514164839
                                                                  + ((2 * a26) & 0x58 ^ 0x50)
                                                                  + (v34 ^ a26 & 0x3F ^ 0xDFB7B14C) < 0xFFFFFFC0)) ^ v30))
                                                   - 4LL))( v32,  2231582437LL);
}

uint64_t sub_10017D53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, char a8)
{
  unsigned int v13 = v10 + 541608085;
  if (v13 <= 0x40) {
    unsigned int v13 = 64;
  }
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * ((237
}

uint64_t sub_10017D5B8(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  int v11 = v6 + v5;
  int v12 = v11 + a1;
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * ((1012
                                          * (a5 - v11 < v9 + v8 + v12 + ((v7 - 62131972) & 0xE7FE6F7F ^ 0x3BFDD110))) ^ v7))
                            - 12LL))();
}

uint64_t sub_10017D61C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, char a25)
{
  return ((uint64_t (*)(void))(*(void *)(v27
                                        + 8LL
                                        * ((13
}

uint64_t sub_10017D678@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  v9.i64[0] = 0x5858585858585858LL;
  v9.i64[1] = 0x5858585858585858LL;
  v10.i64[0] = 0x2D2D2D2D2D2D2D2DLL;
  v10.i64[1] = 0x2D2D2D2D2D2D2D2DLL;
  *(int8x16_t *)(v4 + (((7 * (v3 ^ (v8 - 63))) ^ 0xFFFFFE0ELL) & (a2 + v2))) = vaddq_s8( vaddq_s8(*v6, v10),  vmvnq_s8( vandq_s8( vaddq_s8(*v6, *v6),  v9)));
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * (((2 * (((v5 + 1) & 0x1FFFFFFF0LL) == 16)) | ((((v5 + 1) & 0x1FFFFFFF0LL) == 16) << 6)) ^ (a1 + v3 + 51)))
                            - 8LL))();
}

void sub_10017D6FC()
{
}

uint64_t sub_10017D708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6
                                                                                 + 8LL
                                                                                 * ((((v7 + a4 - 1403052429) & 0x6F56793E ^ 0x65C)
                                                                                   * (v4 == v5)) ^ a4))
                                                                     - 8LL))( a1,  a2,  a3,  4081637913LL);
}

uint64_t sub_10017D75C@<X0>( int a1@<W3>, int a2@<W7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  *(&a20 + (a3 + v20)) = *(_BYTE *)(v21 + v23 - 2063384859)
                                     + ~((((a2 + v22 - 10) | 0x1C) + 58) & (2 * *(_BYTE *)(v21 + v23 - 2063384859)))
                                     + 45;
  return (*(uint64_t (**)(void))(v24
                              + 8LL
                              * ((2 * ((a1 + a3 + 896) < 0x40)) | (8
                                                                               * ((a1 + a3 + 896) < 0x40)) | (a2 + v22 + 1509))))();
}

uint64_t sub_10017D7CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, int32x4_t a37, int32x4_t a38, int32x4_t a39, int32x4_t a40)
{
  int v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))(v42 + 8LL * v40);
  __n128 v50 = (__n128)vdupq_n_s32(0xF8759FFE);
  v51.n128_u64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v51.n128_u64[1] = 0x2C2C2C2C2C2C2C2CLL;
  __n128 v52 = (__n128)vdupq_n_s32(0x7C3ACFFFu);
  HIDWORD(v103) = v45 ^ (v45 - 591);
  LODWORD(v103) = ((HIDWORD(v103) - 592) | 0x90) ^ (v47 - 151);
  uint64_t v104 = v48 - 16;
  uint64_t v53 = (v43 - 2);
  v54.n128_u64[0] = 0x5858585858585858LL;
  v54.n128_u64[1] = 0x5858585858585858LL;
  HIDWORD(a19) = HIDWORD(a33);
  uint64_t v55 = HIDWORD(a34);
  int v56 = BYTE4(a36) ^ 0xF3;
  if (v56 == 2)
  {
    int8x16x4_t v106 = vld4q_s8((const char *)&a24 + 4);
    uint8x16_t v86 = (uint8x16_t)veorq_s8(v106.val[0], (int8x16_t)v51);
    uint16x8_t v87 = vmovl_u8(*(uint8x8_t *)v86.i8);
    uint16x8_t v88 = vmovl_high_u8(v86);
    uint8x16_t v89 = (uint8x16_t)veorq_s8(v106.val[1], (int8x16_t)v51);
    _Q21 = vmovl_u8(*(uint8x8_t *)v89.i8);
    _Q20 = vmovl_high_u8(v89);
    __asm
    {
      SHLL2           V22.4S, V20.8H, #0x10
      SHLL2           V23.4S, V21.8H, #0x10
    }

    uint8x16_t v94 = (uint8x16_t)veorq_s8(v106.val[2], (int8x16_t)v51);
    uint16x8_t v95 = vmovl_high_u8(v94);
    uint16x8_t v96 = vmovl_u8(*(uint8x8_t *)v94.i8);
    v106.val[0] = veorq_s8(v106.val[3], (int8x16_t)v51);
    v106.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v106.val[0]);
    v106.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v106.val[1]);
    v106.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v106.val[0].i8);
    v106.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v106.val[0]);
    v106.val[0] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v96.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v106.val[0].i8));
    v106.val[3] = vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v96, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v87), 0x18uLL)),  v106.val[3]);
    v106.val[1] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v95.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v106.val[1].i8));
    v106.val[2] = vorrq_s8( vorrq_s8( vorrq_s8(_Q22, (int8x16_t)vshll_high_n_u16(v95, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v88), 0x18uLL)),  v106.val[2]);
    a39 = vaddq_s32( vsubq_s32( (int32x4_t)v106.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v106.val[1], (int32x4_t)v106.val[1]), (int8x16_t)v50)),  (int32x4_t)v52);
    a40 = vaddq_s32( vsubq_s32( (int32x4_t)v106.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v106.val[2], (int32x4_t)v106.val[2]), (int8x16_t)v50)),  (int32x4_t)v52);
    a37 = vaddq_s32( vsubq_s32( (int32x4_t)v106.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v106.val[0], (int32x4_t)v106.val[0]), (int8x16_t)v50)),  (int32x4_t)v52);
    a38 = vaddq_s32( vsubq_s32( (int32x4_t)v106.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v106.val[3], (int32x4_t)v106.val[3]), (int8x16_t)v50)),  (int32x4_t)v52);
    char v97 = (_DWORD *)&a37 + v46 + 409666514;
    int v98 = *(v97 - 8) ^ *(v97 - 3);
    unsigned int v99 = *(v97 - 16) ^ *(v97 - 14) ^ (v98 + v47 - ((2 * v98) & 0xF8759FFE));
    HIDWORD(v100) = v103 ^ v99;
    LODWORD(v100) = v99;
    *char v97 = (v100 >> 31) + v47 - ((2 * (v100 >> 31)) & 0xF8759FFE);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42
                                                                                   + 8LL
                                                                                   * ((35 * (v48 == 409666451)) ^ HIDWORD(v103)))
                                                                       - 4LL))( v55,  82198926LL,  v53,  88LL);
  }

  else if (v56 == 1)
  {
    HIDWORD(v102) = a35;
    int8x16x4_t v105 = vld4q_s8((const char *)&a24 + 4);
    int v57 = a8 + v45 + 23;
    uint8x16_t v58 = (uint8x16_t)veorq_s8(v105.val[0], (int8x16_t)v51);
    uint16x8_t v59 = vmovl_high_u8(v58);
    int8x16_t v60 = (int8x16_t)vmovl_high_u16(v59);
    uint16x8_t v61 = vmovl_u8(*(uint8x8_t *)v58.i8);
    int8x16_t v62 = (int8x16_t)vmovl_high_u16(v61);
    uint8x16_t v63 = (uint8x16_t)veorq_s8(v105.val[1], (int8x16_t)v51);
    uint16x8_t v64 = vmovl_u8(*(uint8x8_t *)v63.i8);
    uint16x8_t v65 = vmovl_high_u8(v63);
    int8x16_t v66 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v64.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v61.i8));
    int8x16_t v67 = vorrq_s8((int8x16_t)vshll_high_n_u16(v64, 8uLL), v62);
    int8x16_t v68 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v65.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8));
    int8x16_t v69 = vorrq_s8((int8x16_t)vshll_high_n_u16(v65, 8uLL), v60);
    uint8x16_t v70 = (uint8x16_t)veorq_s8(v105.val[2], (int8x16_t)v51);
    _Q21 = (int8x16_t)vmovl_high_u8(v70);
    _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v70.i8);
    int8x16_t v73 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
    __asm { SHLL2           V20.4S, V20.8H, #0x10 }

    int8x16_t v78 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
    __asm { SHLL2           V21.4S, V21.8H, #0x10 }

    v105.val[0] = veorq_s8(v105.val[3], (int8x16_t)v51);
    v105.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v105.val[0].i8);
    v105.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v105.val[0]);
    v105.val[2] = vorrq_s8( vorrq_s8(v66, v73),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v105.val[1].i8), 0x18uLL));
    v105.val[1] = vorrq_s8( vorrq_s8(v67, _Q20),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v105.val[1]), 0x18uLL));
    v105.val[3] = vorrq_s8( vorrq_s8(v68, v78),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v105.val[0].i8), 0x18uLL));
    v105.val[0] = vorrq_s8( vorrq_s8(v69, _Q21),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v105.val[0]), 0x18uLL));
    a39 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[3], (int32x4_t)v105.val[3]), (int8x16_t)v50)),  (int32x4_t)v52);
    a40 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[0], (int32x4_t)v105.val[0]), (int8x16_t)v50)),  (int32x4_t)v52);
    a37 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[2], (int32x4_t)v105.val[2]), (int8x16_t)v50)),  (int32x4_t)v52);
    a38 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[1], (int32x4_t)v105.val[1]), (int8x16_t)v50)),  (int32x4_t)v52);
    uint64_t v79 = (char *)*(&off_101826020 + a8 + v45 - 218) - 8;
    int v80 = (char *)*(&off_101826020 + a8 + v45 - 60) - 4;
    int v81 = (HIDWORD(a33) ^ v43)
        - 1985391769
        + ((HIDWORD(a34) ^ v43) & (a34 ^ v43) | (a34 ^ 0x7B19BE71) & (a35 ^ v43))
        + *(_DWORD *)&v80[4 * v104 + 4 * v46]
        + (a37.i32[(v79[v104 + v46] - 77)] ^ v47);
    uint64_t v82 = (uint64_t)*(&off_101826020 + (v57 ^ 0x125));
    unsigned int v83 = (v81 + v43 - (v44 & (2 * v81))) ^ v43;
    int v84 = ((v83 << (*(_BYTE *)(v82 + v104 + v46) - 119)) | (v83 >> (119 - *(_BYTE *)(v82 + v104 + v46)))) + (a34 ^ v43);
    LODWORD(v101) = BYTE4(a36) ^ 0xFFFFFFF3;
    HIDWORD(v101) = ((((v40 + 36) | 0x101) + 1141007077) | 0xA0480253) + 2138649058;
    LODWORD(v102) = HIDWORD(a12) + 1646319728;
    return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t, void, void, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 + 8LL * (v57 ^ 0x17)) - 12LL))( HIDWORD(a34),  2309575527LL,  v53,  88LL,  v84 + v43 - (v44 & (2 * v84)),  -(*(_BYTE *)(v82 + v48 - 16 + v46) - 119),  v79,  v80,  a9,  a10,  a11,  a12,  a13,  v41,  a15,  v101,  v102,  v49,  a19,  a34,  v103,  v48 - 16,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36);
  }

  else
  {
    HIDWORD(a33) = 2 * (HIDWORD(a33) ^ v43) + v43 - (v44 & (4 * (HIDWORD(a33) ^ v43)));
    LODWORD(a34) = 2 * (a34 ^ v43) + v43 - (v44 & (4 * (a34 ^ v43)));
    HIDWORD(a34) = 2 * (HIDWORD(a34) ^ v43) + v43 - (v44 & (4 * (HIDWORD(a34) ^ v43)));
    LODWORD(a35) = 2 * (a35 ^ v43) + v43 - (v44 & (4 * (a35 ^ v43)));
    return v49(v55, 82198926LL, v53, 88LL, v50, v51, v52, v54);
  }

uint64_t sub_10017E358( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, unsigned int a17, unsigned int a18)
{
  unsigned int v20 = (((2 * (v19 ^ (v19 - 282)) - 692) | 0x63) ^ 0xE8C6D461) + a14;
  BOOL v21 = v20 < 0x63C3985D;
  BOOL v22 = v20 > a18;
  if (a18 < a17 != v21) {
    BOOL v23 = v21;
  }
  else {
    BOOL v23 = v22;
  }
  return ((uint64_t (*)(void))(*(void *)(v18 + 8LL * ((234 * !v23) ^ (a8 + v19 + 109))) - 4LL))();
}

uint64_t sub_10017E3F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(uint64_t))(a7
                                          + *(void *)(v9
                                                      + 8LL
                                                      * (int)(((((v8 + 869965852) & 0xCC255FBA) + 746)
                                                             * (v7 + a2 + 63 >= (v7 + a2))) ^ v8))
}

uint64_t sub_10017E44C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return ((uint64_t (*)(void))(*(void *)(v16
                                        + 8LL
                                        * ((89
                                          * (a13
                                           + v14
}

uint64_t sub_10017E494@<X0>(char a1@<W0>, int a2@<W1>, char a3@<W3>, int a4@<W7>, int a5@<W8>)
{
  *(_BYTE *)(v7 + v6) = *(_BYTE *)(v8 + (v5 + a2))
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((a5 + a4) | (32 * (v6 != 63)))) - 12LL))();
}

uint64_t sub_10017E4E0@<X0>(int a1@<W1>, int a2@<W7>, int a3@<W8>, int8x16_t a4@<Q1>, int8x16_t a5@<Q3>)
{
  int8x16_t v11 = *(int8x16_t *)(v7 + v5 + (a3 ^ (v9 - 52) ^ (a1 - 12)));
  int8x16_t *v6 = vaddq_s8(vsubq_s8(v11, vandq_s8(vaddq_s8(v11, v11), a5)), a4);
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (v10 ^ (a3 + a2))) - 12LL))();
}

uint64_t sub_10017E540( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v16 = v13 - 2014252619 < (a13 + 21689059);
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((127 * !v16) ^ v15)) - 8LL))();
}

uint64_t sub_10017E5C0( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, int a35)
{
  int v38 = (a1 - 1768) ^ (v36 + 103);
  int v39 = 628203409 * ((((v37 - 120) | 0x9A7BC63F) + (~(v37 - 120) | 0x658439C0)) ^ 0x18F3CA0D);
  *(void *)(v37 - 120) = a10;
  *(_DWORD *)(v37 - 112) = v39 + a1 - 1268;
  *(_DWORD *)(v37 - 108) = a13 - v39 + 75709270;
  uint64_t v40 = sub_1001797A4(v37 - 120);
  uint64_t v41 = a35 & (v38 ^ (v36 - 55));
  *(&a26 + (v41 ^ 0x2B)) = -84;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v35
                                                               + 8LL * ((19 * ((v41 ^ 0x2B) > 0x37)) ^ a1))
                                                   - 12LL))( v40,  82198926LL);
}

uint64_t sub_10017E6C0@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  return ((uint64_t (*)(void))(*(void *)(v15
                                        + 8LL
                                        * ((1568 * (a1 != ((a15 - 109) | 0x40) + ((a15 - 88) ^ 0xFFFFFF92))) | a15))
                            - 8LL))();
}

uint64_t sub_10017E6FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * ((197
                                          * ((v8 ^ (v11 - 12) ^ (v11 + v9 - 108)) >= a8
                                                                                                 + v11
                                                                                                 + v9
                                                                                                 - 108
                                                                                                 - 260)) ^ v9))
                            - 8LL))();
}

uint64_t sub_10017E73C@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  *(void *)(&a18 + v18 - 1812276503) = 0x2C2C2C2C2C2C2C2CLL;
  return (*(uint64_t (**)(void))(v21 + 8LL * ((((v19 & 0x38) == 8LL) * (a1 - v22 + 25)) ^ (v20 - 65))))();
}

uint64_t sub_10017E78C@<X0>(int a1@<W7>, int a2@<W8>, double a3@<D0>)
{
  *int v3 = a3;
  return (*(uint64_t (**)(void))(v6 + 8LL * (((v5 == 0) * v4) ^ (a1 + a2 - 65))))();
}

uint64_t sub_10017E7B4()
{
}

void sub_10017E800()
{
}

uint64_t sub_10017E80C@<X0>( int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  BOOL v27 = v20 < v23;
  *(&a19 + ((v26 + 333) ^ v21) + a2) = *(_BYTE *)(v24 + (v19 + a1))
  unsigned int v28 = v19 + 1 + v22;
  int v29 = v27 ^ (v28 < v23);
  BOOL v30 = v28 < v20;
  if (!v29) {
    BOOL v27 = v30;
  }
  return ((uint64_t (*)(void))(*(void *)(v25 + 8LL * ((127 * !v27) ^ v26)) - 8LL))();
}

uint64_t sub_10017E884( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v9
}

uint64_t sub_10017E8C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v11 = v8;
  unint64_t v12 = v8 - 0x1504F8B91LL + ((v9 - 25532694) & 0xE5CFFE7B);
  if (v12 <= 0x38) {
    unint64_t v12 = 56LL;
  }
  BOOL v13 = v12 - v11 + (v9 - a8 - 9) - 2017804644LL < 8;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * (((4 * v13) | (32 * v13)) ^ v9)) - 8LL))();
}

uint64_t sub_10017E940@<X0>( int a1@<W7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  *(void *)(&a19 + v20 - 1812276503) = 0x2C2C2C2C2C2C2C2CLL;
  return ((uint64_t (*)(void))(*(void *)(v21 + 8LL * ((1834 * ((v19 & 0xFFFFFFFFFFFFFFF8LL) == 8)) ^ (a1 + a2 + 577)))
}

void sub_10017E99C()
{
}

uint64_t sub_10017E9A4@<X0>( int a1@<W7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  *(&a19 + v19 - 1812276503) = 44;
  return ((uint64_t (*)(void))(*(void *)(v20
                                        + 8LL
}

uint64_t sub_10017EA00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
}

void sub_10017EA44()
{
}

uint64_t sub_10017EECC@<X0>( uint64_t a1@<X1>, char a2@<W7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32)
{
  uint64_t v36 = (v34 + a3);
  unsigned int v37 = *(_DWORD *)(&a20 + v36 + 72);
  *(_BYTE *)(a1 + (v36 + 2)) = (BYTE1(v37) ^ 0x41) - ((v37 >> 7) & 0x58) + 44;
  *(_BYTE *)(a1 + (v36 + 1)) = (BYTE2(v37) ^ 0xE6) - ((2 * (BYTE2(v37) ^ 0xE6)) & 0x58) + 44;
  *(_BYTE *)(a1 + (v36 + 3)) = v37 ^ 0xA2;
  *(_BYTE *)(a1 + v36) = (HIBYTE(v37) ^ 0x84)
                       - (((HIBYTE(v37) ^ 0xFFFFFF84) & 0x2D ^ HIBYTE(v37) & 1) << (v33 - a2 - 94))
                       + 44;
  BOOL v38 = v34 - 898184734 < (a32 - 1219943765);
  if (v34 - 898184734 < v32 != a32 - 1219943765 < v32) {
    BOOL v38 = a32 - 1219943765 < v32;
  }
  return ((uint64_t (*)(void))(*(void *)(v35 + 8LL * ((957 * !v38) ^ v33)) - 8LL))();
}

void sub_10017F07C()
{
}

  ;
}

uint64_t sub_10017F0C8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)*(&off_101821A20
                                                    + ((2039 * (*(_DWORD *)(a2 + 4) == 510884221)) ^ 0xB4u))
                                          - 8))(4294925278LL);
}

uint64_t sub_10017F110@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(a2 + 96) + 468LL) = *(_BYTE *)(*(void *)(a1 + 8) + 12LL);
  return ((uint64_t (*)(void))(*(void *)(v2 + 1792) - 8LL))(0LL);
}

uint64_t sub_10017F16C@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + (v7 + v5)) = *(_BYTE *)(v4 + (v7 + v5));
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((v3 + v7 - 181 != v2) * v6) ^ v3)) - 8LL))(0LL);
}

void sub_10017F1A8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12) + 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  uint64_t v2 = *((void *)*(&off_101826020 + v1 - 742)
       + ((1302 * (((uint64_t (*)(uint64_t))*(&off_101826020 + (v1 ^ 0x3B4)))(32LL) != 0)) ^ v1)
       - 1)
     - 4LL;
  __asm { BR              X8 }

uint64_t sub_10017F23C(uint64_t result)
{
  uint64_t v2 = *v1;
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8) = 0x2A644B252A644B25LL;
  *(void *)(result + 16) = 0xCFE51A7D1365BE18LL;
  *(_DWORD *)(result + 24) = 2084229119;
  *(void *)(v2 - 0x49EB7E5E2EA5C8EDLL) = result + 0x27E11828102FB989LL;
  *((_DWORD *)v1 + 2) = 2084229119;
  return result;
}

uint64_t sub_10017F2BC(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)*(&off_101821A20
                                                    + ((255 * (*(_DWORD *)(a2 + 4) != 510884221)) ^ 0x469u))
                                          - 4))(4294925278LL);
}

uint64_t sub_10017F308@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(a2 + 96) + 448LL) = *(_BYTE *)(*(void *)(a1 + 8) + 12LL);
  return ((uint64_t (*)(void))(*(void *)(v2 + 14720) - 4LL))(0LL);
}

void sub_10017F378()
{
}

void sub_10017F380(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 1755732067 * ((a1 & 0xB853BF30 | ~(a1 | 0xB853BF30)) ^ 0x996AFD14);
  uint64_t v2 = *(void *)a1;
  ((void (*)(char *, void (*)()))*(&off_101826020 + v1 - 713))( (char *)*(&off_101826020 + v1 - 828) - 12,  sub_1001A5ED4);
  __asm { BR              X11 }

uint64_t sub_10017F450@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((*(void *)(*(void *)(v2 + 8LL * (a1 - 156)) - 4LL) != 0LL) * (a1 ^ 0x3A9)) ^ a1)))();
}

uint64_t sub_10017F480()
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (v0 ^ 0x1D0)))(v1);
}

  ;
}

uint64_t sub_10017F4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = qword_101935C48 - qword_101935BF8 - (void)&v8;
  qword_101935BF8 = 1126174607 * v2 + 0x3E7C7A387475100ALL;
  qword_101935C48 = 1126174607 * (v2 ^ 0x245AECB3A987CA56LL);
  int v3 = *(_DWORD *)(a2 + 4);
  unsigned __int8 v4 = -113 * ((qword_101935C48 - (-113 * v2 + 10)) ^ 0x56);
  int v5 = (char *)*(&off_101826020 + (v4 ^ byte_1012DFE40[byte_1012DBAA0[v4] ^ 0x64]) - 13) - 8;
  if (v3 == 510884211) {
    __asm { BR              X17 }
  }

  if (v3 == 510884218)
  {
    int v6 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BR              X1 }
  }

  return 4294925278LL;
}

void sub_10017FBB0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 535753261 * ((2 * (a1 & 0x5E99CC2A) - a1 - 1587137579) ^ 0xAB923DFA);
  if (*(_DWORD *)(*(void *)a1 - 0x1F589EA4AC42BDE5LL) - 1966800080 >= 0) {
    unsigned int v3 = *(_DWORD *)(*(void *)a1 - 0x1F589EA4AC42BDE5LL) - 1966800080;
  }
  else {
    unsigned int v3 = 1966800080 - *(_DWORD *)(*(void *)a1 - 0x1F589EA4AC42BDE5LL);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL) - 1966800080 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL) - 1966800080;
  }
  else {
    unsigned int v4 = 1966800080 - *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL);
  }
  uint64_t v7 = *(void *)a1;
  v6[1] = (460628867 * ((((2 * v6) | 0x5B38C61C) - v6 + 1382259954) ^ 0xE10AE173)) ^ (v1 + 1381);
  sub_10018526C((uint64_t)v6);
  if (v3 >= v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v3;
  }
  __asm { BR              X13 }

uint64_t sub_10017FD4C()
{
  BOOL v5 = v3 - 1170470429 > 1324634664 || v3 - 1170470429 < v2 - 822848983;
}

uint64_t sub_10017FDB0()
{
  uint64_t v13 = 4LL * (v8 + v6);
  int v14 = v1 + v9 + (*(_DWORD *)(*(void *)(v12 - 0x1F589EA4AC42BDE1LL) + v13) ^ v10);
  *(_DWORD *)(*(void *)(v11 - 0x1F589EA4AC42BDE1LL) + v13) = v10
                                                             + ((v4 + 1095) | 0x20)
                                                             + v14
                                                             - (v7 & (2 * v14))
                                                             - 1249;
  int v15 = v8 + 1 + v2;
  BOOL v17 = v15 > v3 || v15 < v5;
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((434 * v17) ^ (v4 + 1110))) - 4LL))();
}

uint64_t sub_10017FE78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  BOOL v14 = v12 - 837711157 > ((v11 + 25) ^ 0x62C9D7EA) || v12 - 837711157 < a10 - 490089711;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((383 * v14) ^ v11)) - 4LL))();
}

uint64_t sub_10017FED0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v21 = 4LL * (v17 + v15);
  int v22 = v11 + v18 + (*(_DWORD *)(*(void *)(a10 - 0x1F589EA4AC42BDE1LL) + v21) ^ v19);
  *(_DWORD *)(*(void *)(v20 - 0x1F589EA4AC42BDE1LL) + v21) = v22 + v19 - (v16 & (2 * v22));
  int v23 = v17 + 1 + v12;
  BOOL v25 = v23 > a7 + 422 || v23 < v13;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v10 + 8LL * ((27 * v25) ^ ((v14 - 89) | 0x40))) - 4LL))( 1829022718LL,  602LL);
}

uint64_t sub_10017FFB8(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((241 * (v4 == (a3 ^ 0x200u) + 0x43EA25656BEABF68LL)) ^ a3))
}

void sub_10017FFFC()
{
  *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL) = (((v1 + v0) * (v3 - 1941172939)) ^ 0xFD3EFFF0)
                                         + 2013002976
                                         + ((2 * (v1 + v0) * (v3 - 1941172939)) & 0xFA7DFFE0);
}

void sub_10018021C(uint64_t a1)
{
  int v1 = 1759421093 * (a1 ^ 0xB37DB054);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0x27E11828102FB97DLL) + 406293348;
  unsigned int v3 = *(_DWORD *)a1 + v1 - 823970654;
  int v4 = (v3 < 0x429BD689) ^ (v2 < 0x429BD689);
  BOOL v5 = v2 < v3;
  if (v4) {
    BOOL v5 = v3 < 0x429BD689;
  }
  __asm { BR              X11 }

uint64_t sub_100180318()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((37 * ((*(_BYTE *)(v1 - 0x27E11828102FB975LL) & 1) == 0)) ^ v0))
                            - ((v0 - 389) | 0x41)
                            + 1593LL))();
}

void sub_10018035C()
{
  *(_DWORD *)(v0 - 0x27E11828102FB971LL) = -2084203477;
}

uint64_t sub_1001809CC(_DWORD *a1)
{
  unsigned int v2 = 1755732067
     * ((2 * ((a1 ^ 0xFDCA5AD1) & 0x4699B354) - (a1 ^ 0xFDCA5AD1) - 1184478037) ^ 0x9A6AABA1);
  unsigned int v3 = a1[8] - v2;
  int v4 = a1[2] ^ v2;
  int v8 = v3
  uint64_t result = nullsub_10(&v8);
  if (v4 > 1778828267)
  {
    if (v4 == 2064040939)
    {
      unsigned int v6 = 3;
    }

    else
    {
      if (v4 != 1778828268) {
        goto LABEL_11;
      }
      unsigned int v6 = 1;
    }

void sub_100181034(uint64_t a1, uint64_t a2)
{
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  unsigned int v3 = 1178560073 * ((((2 * &v5) | 0xC4B5652C) - &v5 + 497372522) ^ 0x58CECAF4);
  unsigned int v5 = 1091580572 - v3;
  unsigned int v7 = -1882357464 - v3;
  unsigned int v6 = &STACK[0x8FD385F8C7F9B61];
  sub_100183510((uint64_t)&v5);
  __asm { BR              X9 }

uint64_t sub_1001811E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12 = v9 + 681065514;
  if (v12 <= 0x40) {
    unsigned int v12 = 64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8LL * ((1144 * ((_DWORD)a3 - v8 - v10 + v12 > 0xE)) ^ 0x170u)) - 4LL))( 368LL,  a2,  a3,  a4,  a5,  a6,  2897804937LL,  a8);
}

uint64_t sub_100181254(uint64_t a1, uint64_t a2, int a3)
{
  int v9 = v4 + v3;
  int v10 = v9 + v5;
  return (*(uint64_t (**)(void))(v8 + 8LL * ((165 * (((a3 - v9 < (v7 + v10)) ^ 0xCF) & 1)) ^ 0x641)))();
}

uint64_t sub_1001812BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(void))(v17
                              + 8LL
                              * ((122
                                * (a14 + v18 - 220 + (unint64_t)(v14 + ((409 * (v16 ^ 0x638)) ^ (v15 - 840))) < ((v16 + 567567531) & 0x17DF ^ 0x2D6uLL))) ^ v16)))();
}

uint64_t sub_100181320@<X0>(int a1@<W8>)
{
  v7.i64[0] = 0x5858585858585858LL;
  v7.i64[1] = 0x5858585858585858LL;
  v8.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v8.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  *(int8x16_t *)(v4 + (a1 + v1)) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
  return (*(uint64_t (**)(uint64_t))(v5
                                            + 8LL * ((1278 * (((v3 + 1) & 0x1FFFFFFF0LL) - (v2 - 343) == -351)) ^ v2)))(v2 - 343 - 351LL);
}

void sub_100181394()
{
}

uint64_t sub_10018139C()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (int)((((v2 - 357) ^ 0x15) * (v0 != v1)) ^ v2)) - (v2 ^ 0x16BLL)))();
}

uint64_t sub_1001813D8@<X0>( uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v18 = *(unsigned __int8 *)(a13 + v16 - 15767775);
  uint64_t v19 = (a5 + v13);
  uint64_t v20 = (2 * v18) & 0x58;
  *(_BYTE *)(v17 - 220 + v19) = v18 - ((2 * v18) & 0x58) + 44;
  uint64_t v21 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 8LL * ((1444 * ((a3 + a5 + 49) < 0x40)) ^ (v14 - 860))) - 4LL);
  return v21(1444LL, v21, v19, v20, a1, a2, a3, a4);
}

void sub_10018145C()
{
}

uint64_t sub_100181464( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int32x4_t a31, int32x4_t a32, int32x4_t a33, int32x4_t a34)
{
  uint64_t v42 = (uint64_t (*)(__n128, __n128, __n128, __n128))(*(void *)(v36 + 8LL * v34) - 4LL);
  HIDWORD(v99) = HIDWORD(a13) - 1349941253;
  int v43 = (const char *)(v41 - 220);
  v44.n128_u64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v44.n128_u64[1] = 0x2C2C2C2C2C2C2C2CLL;
  __n128 v45 = (__n128)vdupq_n_s32(0xF8759FFE);
  HIDWORD(v103) = v37 - 1395;
  __n128 v46 = (__n128)vdupq_n_s32(0x7C3ACFFFu);
  a23 = v35 - 16;
  LODWORD(v99) = 1987952631;
  LODWORD(a15) = 1952979334;
  v47.n128_u64[0] = 0x5858585858585858LL;
  v47.n128_u64[1] = 0x5858585858585858LL;
  uint64_t v48 = *(unsigned int *)(v41 - 148);
  int v49 = *(_DWORD *)(v41 - 144);
  HIDWORD(a21) = *(_DWORD *)(v41 - 148);
  LODWORD(v103) = v49;
  unsigned int v51 = *(_DWORD *)(v41 - 140);
  unsigned int v50 = *(_DWORD *)(v41 - 136);
  int v52 = *(_BYTE *)(v41 - 124) ^ 0xF3;
  HIDWORD(a17) = *(unsigned __int8 *)(v41 - 124) ^ 0xFFFFFFF3;
  if (v52 == 2)
  {
    unint64_t v101 = __PAIR64__(v50, v51);
    uint64_t v102 = v42;
    int v78 = a6 + a5 + 288;
    uint64_t v79 = *(unsigned int *)(v41 - 132);
    int8x16x4_t v105 = vld4q_s8(v43);
    HIDWORD(a15) = *(_DWORD *)(v41 - 132);
    uint8x16_t v80 = (uint8x16_t)veorq_s8(v105.val[0], (int8x16_t)v44);
    uint16x8_t v81 = vmovl_u8(*(uint8x8_t *)v80.i8);
    uint16x8_t v82 = vmovl_high_u8(v80);
    uint8x16_t v83 = (uint8x16_t)veorq_s8(v105.val[1], (int8x16_t)v44);
    _Q21 = vmovl_u8(*(uint8x8_t *)v83.i8);
    _Q20 = vmovl_high_u8(v83);
    __asm
    {
      SHLL2           V22.4S, V20.8H, #0x10
      SHLL2           V23.4S, V21.8H, #0x10
    }

    uint8x16_t v88 = (uint8x16_t)veorq_s8(v105.val[2], (int8x16_t)v44);
    uint16x8_t v89 = vmovl_high_u8(v88);
    uint16x8_t v90 = vmovl_u8(*(uint8x8_t *)v88.i8);
    v105.val[0] = veorq_s8(v105.val[3], (int8x16_t)v44);
    v105.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v105.val[0]);
    v105.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v105.val[1]);
    v105.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v105.val[0].i8);
    v105.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v105.val[0]);
    v105.val[0] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v90.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v81.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v105.val[0].i8));
    v105.val[3] = vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v90, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v81), 0x18uLL)),  v105.val[3]);
    v105.val[1] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v89.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v105.val[1].i8));
    v105.val[2] = vorrq_s8( vorrq_s8( vorrq_s8(_Q22, (int8x16_t)vshll_high_n_u16(v89, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v82), 0x18uLL)),  v105.val[2]);
    a33 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[1], (int32x4_t)v105.val[1]), (int8x16_t)v45)),  (int32x4_t)v46);
    a34 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[2], (int32x4_t)v105.val[2]), (int8x16_t)v45)),  (int32x4_t)v46);
    a31 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[0], (int32x4_t)v105.val[0]), (int8x16_t)v45)),  (int32x4_t)v46);
    a32 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[3], (int32x4_t)v105.val[3]), (int8x16_t)v45)),  (int32x4_t)v46);
    int v91 = (_DWORD *)&a31 + v40 + 1255353507;
    int v92 = *(v91 - 8) ^ *(v91 - 3);
    uint64_t v93 = *(v91 - 16);
    int v94 = v93 ^ *(v91 - 14) ^ (v92 + v37 - ((2 * v92) & 0xF8759FFE));
    HIDWORD(v96) = (15 * (v78 ^ 0x474)) ^ HIDWORD(v103) ^ v94;
    LODWORD(v96) = v94;
    int v95 = v96 >> 31;
    uint64_t v97 = (2 * v95) & 0xF8759FFE;
    *int v91 = v95 + v37 - v97;
    int v98 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8LL * ((346 * (v35 == 1255353444)) ^ v78));
    return v98( 1255353508LL,  v79,  v98,  a23,  v97,  v93,  v48,  4168458238LL,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  v99,  v101,  v102,  a21,  v103,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30);
  }

  else if (v52 == 1)
  {
    unint64_t v100 = __PAIR64__(v50, v51);
    int8x16x4_t v104 = vld4q_s8(v43);
    uint64_t v53 = a5 ^ (a5 - 359);
    uint8x16_t v54 = (uint8x16_t)veorq_s8(v104.val[0], (int8x16_t)v44);
    uint16x8_t v55 = vmovl_high_u8(v54);
    int8x16_t v56 = (int8x16_t)vmovl_high_u16(v55);
    uint16x8_t v57 = vmovl_u8(*(uint8x8_t *)v54.i8);
    int8x16_t v58 = (int8x16_t)vmovl_high_u16(v57);
    uint8x16_t v59 = (uint8x16_t)veorq_s8(v104.val[1], (int8x16_t)v44);
    uint16x8_t v60 = vmovl_u8(*(uint8x8_t *)v59.i8);
    uint16x8_t v61 = vmovl_high_u8(v59);
    int8x16_t v62 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v60.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v57.i8));
    int8x16_t v63 = vorrq_s8((int8x16_t)vshll_high_n_u16(v60, 8uLL), v58);
    int8x16_t v64 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v61.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8));
    int8x16_t v65 = vorrq_s8((int8x16_t)vshll_high_n_u16(v61, 8uLL), v56);
    uint8x16_t v66 = (uint8x16_t)veorq_s8(v104.val[2], (int8x16_t)v44);
    _Q21 = (int8x16_t)vmovl_high_u8(v66);
    _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v66.i8);
    int8x16_t v69 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
    __asm { SHLL2           V20.4S, V20.8H, #0x10 }

    int8x16_t v74 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
    __asm { SHLL2           V21.4S, V21.8H, #0x10 }

    v104.val[0] = veorq_s8(v104.val[3], (int8x16_t)v44);
    v104.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v104.val[0].i8);
    v104.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v104.val[0]);
    v104.val[2] = vorrq_s8( vorrq_s8(v62, v69),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v104.val[1].i8), 0x18uLL));
    v104.val[1] = vorrq_s8( vorrq_s8(v63, _Q20),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v104.val[1]), 0x18uLL));
    v104.val[3] = vorrq_s8( vorrq_s8(v64, v74),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v104.val[0].i8), 0x18uLL));
    v104.val[0] = vorrq_s8( vorrq_s8(v65, _Q21),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v104.val[0]), 0x18uLL));
    a33 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[3], (int32x4_t)v104.val[3]), (int8x16_t)v45)),  (int32x4_t)v46);
    a34 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[0], (int32x4_t)v104.val[0]), (int8x16_t)v45)),  (int32x4_t)v46);
    a31 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[2], (int32x4_t)v104.val[2]), (int8x16_t)v45)),  (int32x4_t)v46);
    a32 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[1], (int32x4_t)v104.val[1]), (int8x16_t)v45)),  (int32x4_t)v46);
    uint64_t v75 = (uint64_t)*(&off_101826020 + (int)(v53 ^ 0x1FF));
    unint64_t v76 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t (**)(int, int, int, int, int, int, int, int, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 8LL * (int)((905 * (a23 + 1 != v35)) ^ v53)) - 8LL);
    return v76( (char *)*(&off_101826020 + (int)(v53 & 0x898F82D0)) - 4,  v75,  v53,  1255353507LL,  v76,  -(*(_BYTE *)(v75 + a23 + v40) - 119),  a31.i32[(*((_BYTE *)*(&off_101826020 + (int)v53 - 455) + a23 + v40 - 8) - 77)] ^ v37,  &off_101826020,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  v99,  v100,  v42,  a21,  v103,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30);
  }

  else
  {
    *(_DWORD *)(v41 - 148) = (v48 ^ v39)
                           + (HIDWORD(a21) ^ v39)
                           + v39
                           - (v38 & (2 * ((v48 ^ v39) + (HIDWORD(a21) ^ v39))));
    *(_DWORD *)(v41 - 144) = 2 * (v49 ^ v39) + v39 - (v38 & (4 * (v49 ^ v39)));
    *(_DWORD *)(v41 - 140) = 2 * (v51 ^ v39) + v39 - (v38 & (4 * (v51 ^ v39)));
    *(_DWORD *)(v41 - 136) = 2 * (v50 ^ v39) + v39 - (v38 & (4 * (v50 ^ v39)));
    return v42(v44, v45, v46, v47);
  }

uint64_t sub_100181FA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, int a18, unsigned int a19)
{
  else {
    BOOL v20 = a16 - 1338265783 > a19;
  }
  return ((uint64_t (*)(BOOL))(*(void *)(v19
                                                   + 8LL
}

uint64_t sub_100182034( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
  return ((uint64_t (*)(void))(*(void *)(v19
                                        + 8LL
                                        * (((a6 + (a18 & 0x74785BBE) + 1266)
}

uint64_t sub_100182074( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  return ((uint64_t (*)(void))(*(void *)(v17
                                        + 8LL
                                        * ((44
}

uint64_t sub_1001820C4@<X0>( int a1@<W2>, int a2@<W4>, int a3@<W5>, int a4@<W7>, int a5@<W8>, int8x16_t a6@<Q0>, int8x16_t a7@<Q3>)
{
  int8x16_t v11 = *(int8x16_t *)(v10 + v7 + ((a5 - a2 + 57) ^ (a4 - 9)));
  *int8x16_t v8 = vaddq_s8(vsubq_s8(v11, vandq_s8(vaddq_s8(v11, v11), a7)), a6);
  return (*(uint64_t (**)(void))(v9 + 8LL * (a1 ^ (a3 + a5 - 34))))();
}

uint64_t sub_100182124@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W7>, int a4@<W8>)
{
  char v11 = *(_BYTE *)(v10 + a3 + v4 + 3 * (a4 ^ (a1 - 17)) - 57);
  *(_BYTE *)(v5 + v7) = v11 - (v6 & (2 * v11)) + 44;
  return (*(uint64_t (**)(void))(v9 + 8LL * (((v7 == 63) * v8) ^ (a2 + a4 - 78))))();
}

uint64_t sub_10018217C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  unsigned int v17 = (v15 ^ 0x2F3) + v14 + 925777986;
  int v18 = ((a14 + 914102628) < 0x381ED951) ^ (v17 < 0x381ED951);
  BOOL v19 = v17 < a14 + 914102628;
  if (v18) {
    BOOL v19 = (a14 + 914102628) < 0x381ED951;
  }
  return (*(uint64_t (**)(uint64_t))(v16 + 8LL * ((!v19 | (8 * !v19)) ^ v15)))(925777986LL);
}

uint64_t sub_1001821E4( uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v16 = 628203409 * ((((v15 - 120) | 0x434F6F97) - ((v15 - 120) & 0x434F6F97)) ^ 0xC1C763A4);
  uint64_t v17 = a5 + (a2 ^ 0x14Fu) - 383;
  *(void *)(v15 - 120) = a11;
  *(_DWORD *)(v15 - 112) = v16 + a2 + 605;
  *(_DWORD *)(v15 - 108) = a14 - v16 + 75709270;
  uint64_t v18 = sub_1001797A4(v15 - 120);
  uint64_t v19 = *(_DWORD *)(v15 - 152) & 0x3F;
  *(_BYTE *)(v15 - 220 + (v19 ^ 0x2B)) = -84;
}

uint64_t sub_1001822F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, int a23)
{
  return ((uint64_t (*)(void))(*(void *)(v24
                                        + 8LL
                                        * ((1551 * (((v23 == 63) ^ (51 * (a23 ^ 0x7C))) & 1)) ^ a23))
                            + 1954028466LL
                            - v25))();
}

uint64_t sub_100182344()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v1 ^ (101 * ((v0 ^ 0x14u) > 7))))
                            + 1954028466LL
                            - (v1 - 49)
                            - ((v1 - 9186) & 0x74783BFE)
                            + 872))();
}

uint64_t sub_1001823A0()
{
  *(void *)(v4 - 220 + v0 + 1) = 0x2C2C2C2C2C2C2C2CLL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v1 & 0x38) == 8LL) * (((v2 - 830) | 0x155) + 1649)) ^ v2)) - 8LL))();
}

uint64_t sub_1001823EC(double a1)
{
  *int v2 = a1;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((v4 == 0) * v3) ^ v1)) - 8LL))();
}

uint64_t sub_100182410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * ((742 * (((v7 == v6) ^ (((v5 + 127) & 0xB7) + 1)) & 1)) ^ v5))
                            + 1954028466LL
                            - (v5 ^ (a5 - 237))))();
}

void sub_100182474()
{
}

uint64_t sub_10018248C@<X0>(int a1@<W0>, int a2@<W7>, int a3@<W8>)
{
  BOOL v10 = v3 < v6;
  *(_BYTE *)(v9 - 220 + ((v5 - 659) ^ 0xACB8FE89) + a3) = *(_BYTE *)(v8 + (v4 + a2))
  unsigned int v11 = a1 + v4 + 49;
  int v12 = v10 ^ (v11 < v6);
  BOOL v13 = v11 < v3;
  if (!v12) {
    BOOL v10 = v13;
  }
  return (*(uint64_t (**)(void))(v7 + 8LL * ((!v10 | (8 * !v10)) ^ v5)))();
}

uint64_t sub_100182508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W5>, int a4@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                        + 8LL
                                                                        * ((((a4 - 1342510085) < 0x38)
                                                                          * (a3 + v5 - 538)) ^ (a3 + v5 + 630)))
                                                            - 12LL))( a1,  a2,  -1342510085LL);
}

uint64_t sub_10018254C@<X0>(uint64_t a1@<X2>, unsigned int a2@<W8>)
{
  uint64_t v4 = a1 + a2;
  else {
    uint64_t v5 = 56LL;
  }
  BOOL v6 = v5 - a2 + (unint64_t)(((v2 + 1060) ^ 0x5EDu) + 2) + 1342509379 < 8;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((v6 | (2 * v6)) ^ (v2 + 1060))) - 4LL))();
}

uint64_t sub_1001825A4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(void *)(v5 - 220 + a2 + a1) = 0x2C2C2C2C2C2C2C2CLL;
  int v6 = ((6 * (v2 ^ 0x21Bu)) ^ 0x52ALL) == (v3 & 0xFFFFFFFFFFFFFFF8LL);
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((2 * v6) | (v6 << 10) | v2)) - 12LL))();
}

uint64_t sub_100182604@<X0>(int a1@<W5>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v5 - 220 + a2 + v3) = 44;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL
}

uint64_t sub_100182648()
{
}

void sub_10018268C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v6 = *(unsigned __int8 *)(v5 - 124) ^ 0xF3;
  if (v6 == 1)
  {
    unsigned int v13 = *(_DWORD *)(v5 - 156);
    unsigned int v12 = *(_DWORD *)(v5 - 152);
    *(_BYTE *)(v5 - 164) = (a5 ^ (a5 - 1) ^ (8 * v12) ^ 0x5B) - ((2 * (a5 ^ (a5 - 1) ^ (8 * v12) ^ 0x5B)) & 0x50) + 44;
    *(_BYTE *)(v5 - 163) = ((v12 >> 5) ^ 0xBD) - ((2 * ((v12 >> 5) ^ 0xBD)) & 0x58) + 44;
    *(_BYTE *)(v5 - 162) = ((v12 >> 13) ^ 0x12) - ((v12 >> 12) & 0x58) + 44;
    HIDWORD(v14) = v13 ^ 0x1B;
    LODWORD(v14) = v12 ^ 0xA0000000;
    *(_BYTE *)(v5 - 161) = ((v12 >> 21) ^ 0x10) - ((v12 >> 20) & 0x58) + 44;
    *(_BYTE *)(v5 - 160) = (v14 >> 29) - ((2 * (v14 >> 29)) & 0x58) + 44;
    *(_BYTE *)(v5 - 159) = ((v13 >> 5) ^ 0xE8) - 2 * (((v13 >> 5) ^ 0xE8) & 0x2D ^ ((v13 & 0x20) != 0)) + 44;
    *(_BYTE *)(v5 - 158) = ((v13 >> 13) ^ 0xCF) - ((2 * ((v13 >> 13) ^ 0xCF)) & 0x58) + 44;
    unsigned int v15 = v13 >> 21;
    unsigned int v16 = (v13 >> 21) ^ 0xFFFFFF94;
    char v17 = v16 & 0x2E ^ v15 & 2;
    char v10 = v16 + 44;
    char v11 = 2 * v17;
  }

  else
  {
    if (v6 != 2) {
      goto LABEL_6;
    }
    unsigned int v7 = *(_DWORD *)(v5 - 156);
    unsigned int v8 = *(_DWORD *)(v5 - 152);
    HIDWORD(v9) = v7 ^ 0x1B;
    LODWORD(v9) = v8 ^ 0xA0000000;
    *(_BYTE *)(v5 - 164) = ((v7 >> 21) ^ 0x94) - 2 * (((v7 >> 21) ^ 0x94) & 0x2D ^ ((v7 & 0x200000) != 0)) + 44;
    *(_BYTE *)(v5 - 163) = ((7 * (a5 ^ (a5 - 35)) - 52) ^ (v7 >> 13))
                         - ((2 * ((7 * (a5 ^ (a5 - 35)) - 52) ^ (v7 >> 13))) & 0x58)
                         + 44;
    *(_BYTE *)(v5 - 162) = ((v7 >> 5) ^ 0xE8) - ((2 * ((v7 >> 5) ^ 0xE8)) & 0x58) + 44;
    *(_BYTE *)(v5 - 161) = (v9 >> 29) - ((2 * (v9 >> 29)) & 0x58) + 44;
    *(_BYTE *)(v5 - 160) = ((v8 >> 21) ^ 0x10) - ((v8 >> 20) & 0x58) + 44;
    *(_BYTE *)(v5 - 159) = ((v8 >> 13) ^ 0x12) - ((v8 >> 12) & 0x58) + 44;
    *(_BYTE *)(v5 - 158) = ((v8 >> 5) ^ 0xBD) - ((2 * ((v8 >> 5) ^ 0xBD)) & 0x58) + 44;
    LOBYTE(v8) = (8 * v8) ^ 0x58;
    char v10 = v8 + 44;
    char v11 = (2 * v8) & 0x50;
  }

  *(_BYTE *)(v5 - 157) = v10 - v11;
LABEL_6:
  JUMPOUT(0x100181470LL);
}

uint64_t sub_100182AF8@<X0>(char a1@<W4>, uint64_t a2@<X5>, int a3@<W8>)
{
  unsigned int v8 = *(_DWORD *)(v7 - 220 + ((v5 + a3) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a2 + (v5 + a3 + 1)) = (BYTE2(v8) ^ 0xE6) - ((2 * (BYTE2(v8) ^ 0xE6)) & 0x58) + 44;
  *(_BYTE *)(a2 + (v5 + a3 + 2)) = (BYTE1(v8) ^ 0x41) - ((v8 >> 7) & 0x58) + 44;
  *(_BYTE *)(a2 + (v5 + a3 + 3)) = v8 ^ 0xA2;
  *(_BYTE *)(a2 + (v5 + a3)) = (HIBYTE(v8) ^ 0x84)
                                           - (((HIBYTE(v8) ^ 0xFFFFFF84) & 0x2D ^ HIBYTE(v8) & 1) << ((a1 + v4 - 9) ^ 0xB7))
                                           + 44;
  unsigned int v9 = *(_DWORD *)(v7 - 128) - 538398878;
  if (v5 + 1438212499 < v3 != v9 < v3) {
    BOOL v10 = v9 < v3;
  }
  else {
    BOOL v10 = v5 + 1438212499 < v9;
  }
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((28 * !v10) ^ v4)) - 4LL))();
}

void sub_100182CA8()
{
}

uint64_t sub_100182CB0()
{
  return 0LL;
}

void sub_100182CF0(_DWORD *a1)
{
  unsigned int v1 = *a1 + 108757529 * ((2 * (a1 & 0x5EAB9BD4) - (_DWORD)a1 - 1588304853) ^ 0x41C80600);
  __asm { BR              X14 }

uint64_t sub_100182DB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (int)((503
                                     * (((*(_DWORD *)(*(void *)(a1 + 8) + v4) == (v1 & 0xEDF1C6FB) - 650 + v2) ^ ((v1 & 0xFB) + 4)) & 1)) ^ v1 & 0xEDF1C6FB)))();
}

uint64_t sub_100182DFC()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((((v2 ^ 0x6B3 ^ ((v3 - 1966800080) * (v0 - 1966800080) < 0)) & 1) == 0)
                                * ((v2 - 371) ^ 0x2ED)) ^ v2)))();
}

uint64_t sub_100182E48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v2;
  uint64_t v7 = a1;
  unsigned int v8 = v3 + 1225351577 * (&v5 ^ 0x239AD816) - 205;
  uint64_t v5 = v2;
  return (*(uint64_t (**)(uint64_t *))(v1 + 8LL * (v3 ^ 0x251)))(&v5);
}

uint64_t sub_100182F5C(_DWORD *a1, uint64_t a2)
{
  BOOL v2 = (*a1 + *(_DWORD *)(a2 + 4) + 1771861809) < 0xC9;
  return ((uint64_t (*)(void))((char *)*(&off_101821A20 + (((16 * v2) | (32 * v2)) ^ 0x55Au)) - 8))();
}

uint64_t sub_100182FA8@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((761 * (((v1 == 510884208) ^ 0xA7) & 1)) ^ 0x489u)) - 4LL))();
}

uint64_t sub_100183000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = (v4 - 1063) | 0x409;
  *(_BYTE *)(a1 + (v3 - 2012221280) + 4) = (**(_BYTE **)(a2 + 8) ^ 0x55)
                                                       + ((2 * **(_BYTE **)(a2 + 8)) & 0xAA)
                                                       - 84;
  unsigned int v6 = *(_DWORD *)(a2 + 4) - 2121735845;
  BOOL v7 = ((v5 + 209) ^ 0x9FFC5F96) < v6;
  if (v6 < 0x9FFC5ACB) {
    BOOL v7 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * ((46 * v7) ^ v5)) - 4LL))();
}

void sub_1001830B4()
{
}

uint64_t sub_1001830BC()
{
  return 4294925278LL;
}

uint64_t sub_1001830C4(_DWORD *a1)
{
  *((_BYTE *)a1 + (v3 ^ (v2 + 1843)) + v1 + 1086145835) = 1;
  *a1 = v1;
  return 0LL;
}

void sub_1001830F4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100183144@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(a2 + 96) + 24LL) = v3;
  int v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) + 51973408) & 0x35134EC) - 483057402;
  return (*(uint64_t (**)(void))(v2
                                           + 8LL
                                           * ((411
                                             * (((2 * v4) & 0xFDF3E37E ^ 0x151206C) + (v4 ^ 0xFF516BC9) + 930545525 != 913371444)) ^ 0x4FFu)))(0LL);
}

uint64_t sub_1001831EC()
{
}

uint64_t sub_10018324C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t sub_10018328C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (a5 ^ (212 * (v6 > 0x1F))))
                            - (((a5 + 1761435781) & 0x97029EAD)
                             + 823764863)
                            + 823765028LL))();
}

uint64_t sub_1001832E0@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v9 = v8 + v7 + v6 + 1276;
  uint64_t v10 = v4 + v9;
  __int128 v11 = *(_OWORD *)(v10 - 31);
  uint64_t v12 = a3 + v9;
  *(_OWORD *)(v12 - 15) = *(_OWORD *)(v10 - 15);
  *(_OWORD *)(v12 - 31) = v11;
}

void sub_100183360()
{
}

uint64_t sub_10018336C(uint64_t a1, int a2, int a3, int a4)
{
}

uint64_t sub_1001833A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
}

uint64_t sub_1001833DC@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  int v9 = 33 * (a1 ^ 0xA8);
  int v10 = v6 + v5 + v7;
  int v11 = -v8;
  uint64_t v12 = v10 - v8 + ((v9 - 1846506150) & 0x6E0F76FCu);
  *(void *)(a2 - 7 + v12) = *(void *)(v3 - 7 + v12);
  return (*(uint64_t (**)(void))(v2 + 8LL * (v9 | (8 * (((v9 ^ 0xFFFFFF5D) & v4) + v11 != 8)))))();
}

uint64_t sub_100183450(int a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a3 + (v6 + v8 + v5)) = *(void *)(v7 + (v6 + v8 + v5));
  return (*(uint64_t (**)(void))(v4 + 8LL * (a1 | (8 * (a4 + v8 != 8)))))();
}

uint64_t sub_10018347C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * ((((v6 - 1052) ^ (v6 - 1049)) * (v5 == a4)) | v6)))(0LL);
}

  ;
}

uint64_t sub_1001834AC@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + a1 - 1737136481 + ((a2 + 538443557) | 0x1101A824u)) = *(_BYTE *)(v5
                                                                                 + a1
                                                                                 - 1737136481
                                                                                 + ((a2 + 538443557) | 0x1101A824u));
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((58 * (a1 - 1 != v4)) ^ (a2 - 10))) - 8LL))(0LL);
}

void sub_100183508()
{
}

uint64_t sub_100183510(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  __int16 v2 = *(_DWORD *)result + 26185 * ((2 * (result & 0x1A68) - result - 6761) ^ 0x9DF5);
  int v3 = (v2 & 0x1FF ^ 0xCB) - ((2 * (v2 & 0x1FF ^ 0xCB)) & 0x2F2) - 1760785031;
  *(_DWORD *)(v1 - 0x8FD385F8C7F98BDLL) = ((v3 & 0x200056A ^ 0x28000448)
                                         + (v3 ^ 0x426133B3)
                                         - ((v3 ^ 0x426133B3) & 0x5020156A)) ^ 0x4CB2AA06;
  *(void *)(v1 - 0x8FD385F8C7F98DDLL) = 0xA20257AB7299FD1BLL;
  *(_DWORD *)(v1 - 0x8FD385F8C7F98C1LL) = 2113300787;
  int v4 = v2 ^ 0x9E;
  if (v4 == 1)
  {
    int v5 = 2113300803;
    goto LABEL_5;
  }

  if (v4 == 2)
  {
    *(_DWORD *)(v1 - 0x8FD385F8C7F98C5LL) = 1194631294;
    int v5 = 2113300807;
LABEL_5:
    *(void *)(v1 - 0x8FD385F8C7F98D5LL) = 0x6B2BEA07E3A3628FLL;
    *(void *)(v1 - 0x8FD385F8C7F98CDLL) = 0x94D415F81C5C9D70LL;
    *(_DWORD *)(v1 - 0x8FD385F8C7F98C1LL) = v5;
  }

  *(_DWORD *)(result + 4) = -1020681075;
  return result;
}

void sub_1001836B0(uint64_t a1)
{
  int v1 = 535753261 * (((a1 | 0xB4CC401E) - a1 + (a1 & 0x4B33BFE1)) ^ 0xBE384E31);
  int v2 = *(_DWORD *)(a1 + 8) ^ v1;
  int v3 = *(_DWORD *)(a1 + 24) - v1;
  int v4 = *(_DWORD *)(*(void *)(a1 + 16) - 0x1F589EA4AC42BDE5LL);
  int v6 = v4 - 1966800080;
  BOOL v5 = v4 - 1966800080 < 0;
  int v7 = 1966800080 - v4;
  if (!v5) {
    int v7 = v6;
  }
  __asm { BR              X13 }

uint64_t sub_10018377C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3
                                                                                 + 8LL
                                                                                 * ((((((v5 ^ 0x3A5) - 646) | 0x11) ^ 0x436)
                                                                                   * (v4 == 1117964708)) ^ v5 ^ 0x3A5))
                                                                     - 12LL))( a1,  a2,  a3,  1903137887LL);
}

uint64_t sub_1001837C4(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t sub_1001837D0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v1
                                                                                       + 8LL
                                                                                       * (int)((((v3 + 234386186) & 0xF2078C2E)
                                                                                              + 199) ^ 0x759 ^ (v3 + 234386186) & 0xF2078C2E)))( a1,  418990867LL,  (v3 + 234386186) & 0xF2078C2E,  ((v3 + 234386186) & 0xF2078C2E) + 199,  3337363496LL,  v2);
}

uint64_t sub_100183858@<X0>(void *a1@<X0>, int a2@<W3>, int a3@<W4>, int a4@<W5>, int a5@<W8>)
{
  *(_BYTE *)(*a1 + (a4 + a5)) = ((a3 ^ v7) >> v8) - (((a3 ^ v7) >> v8 << ((a2 + 26) ^ 0xEE)) & 0x58) + 44;
  return (*(uint64_t (**)(void))(v5 + 8LL * ((449 * (a4 + 173 * (a2 ^ 0x4D3) - 1039 == v6)) ^ a2)))();
}

uint64_t sub_1001838C4(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8LL * (((v4 == 24) * ((a3 + 199) ^ 0x759)) ^ a3)))(a1, a2);
}

uint64_t sub_1001838F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v8 = v3 > v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v4
                                                                                        + 8LL
                                                                                        * (int)((((a3 - 1357991727) & 0x50F14FF5 ^ 0x62B)
                                                                                               * v8) ^ a3)))( a1,  a2,  a3,  ((_DWORD)a3 - 1357991727) & 0x50F14FF5,  3337363496LL,  v5);
}

uint64_t sub_100183968@<X0>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  return sub_100183858(a1, (a3 + 1458891473) & 0xA90B15F5, *(_DWORD *)(*v5 + 4LL * (a2 - 418990867)), v4, a4);
}

void sub_1001839AC(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 - 108757529 * ((-2 - ((a1 | 0x1E625E8E) + (~(_DWORD)a1 | 0xE19DA171))) ^ 0x101C35A);
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL);
  unsigned int v5 = (460628867
      * ((((2 * (v4 ^ 0x40000CF6)) | 0x846CAAD6) - (v4 ^ 0x40000CF6) + 1036626581) ^ 0xCEA0DBE0)) ^ (v1 + 836);
  uint64_t v6 = v2;
  sub_10018526C((uint64_t)v4);
  __asm { BR              X9 }

uint64_t sub_100183AF4@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
}

uint64_t sub_100183B5C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * (((((v2 - 1121) | 0x432) ^ 0x58B)
}

uint64_t sub_100183C08@<X0>(int a1@<W1>, int a2@<W4>, uint64_t a3@<X8>)
{
  int v10 = a1 - 1;
  unsigned int v11 = *(_DWORD *)(*(void *)(v9 - 0x1F589EA4AC42BDE1LL) + 4LL * (a1 + v7)) ^ v5;
  *(_DWORD *)(*(void *)(v9 - 0x1F589EA4AC42BDE1LL) + 4LL * (v3 + v4)) = ((v11 >> (32 - v6)) | a2 ^ v5)
                                                                        + v5
                                                                        - (((v8 - 143) ^ 0x8DD843F3) & (2 * ((v11 >> (32 - v6)) | a2 ^ v5)));
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * (int)((83 * ((v10 + v7) >> 31)) ^ v8)) - 4LL))();
}

void sub_100183CA4()
{
}

uint64_t sub_100183CAC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * ((((v4 ^ 0x5C9EFAAB) - 269662211 + ((v3 ^ 0xB93DF137) & v1) - 1284260521 < ((v2 - 870) ^ 0x7FFFFD76u))
                                * (((v2 - 999) | 0x472) ^ 0x669)) ^ v2)))();
}

uint64_t sub_100183D2C@<X0>(uint64_t a1@<X8>)
{
  int v6 = 49 * (v4 ^ 0x665);
  *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL * (int)((v6 ^ 0xB4108C77) + v1 + v2)) = *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL * ((v6 ^ 0x766 ^ (v3 + 648)) + v2));
  return (*(uint64_t (**)(uint64_t))(a1 + 8LL * ((917 * ((v2 + v3) < 0x7FFFFFFF)) ^ v6)))(0x7FFFFFFFLL);
}

void sub_100183DA8()
{
}

uint64_t sub_100183DB0@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL * ((((v3 - 721) | 0x20) ^ (v2 - 14)) + v4)) = a1;
  return ((uint64_t (*)(void))(*(void *)(a2 + 8LL * (int)((74 * ((-v2 - v4) >> 31)) ^ v3)) - 4LL))();
}

uint64_t sub_100183E04@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*v3 + 4LL * (v1 + v5 + v4 - 689 - 243)) = v2;
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (((v1 + v5 - 2 >= 0) * v6) ^ v4)) - 4LL))();
}

void sub_100183E40()
{
  BOOL v7 = *(_DWORD *)(*v4 + 4LL * (v0 + v2)) == v3;
  _DWORD *v6 = (v0 - v7 + (((v5 + 406) | 0x13) ^ (v2 - 616))) * v1 - 1941172939 * (v0 - v7) + 1163112590;
}

void sub_100183FD0(uint64_t a1)
{
  __asm { BR              X8 }

void sub_1001840FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v11 = *(unsigned __int8 **)(a3 + 8LL * (a4 ^ (a4 - 113)));
  int v12 = ((((a4 + 577) ^ 0x78B570DC) - 673021178) & 0x281D7BBB) - 283;
  BOOL v14 = ((**(unsigned __int8 **)(a7 + 80) - (*v11 ^ 0x2C)) ^ 0xFFF5C7EB)
      + ((v12 - v7 + 314) ^ 0x4E4A0D63)
      + ((2 * (**(unsigned __int8 **)(a7 + 80) - (*v11 ^ 0x2C))) & 0xFFEB8FD6) != v9
     || v10 == 101386941;
  __asm { BR              X15 }

void sub_10018526C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) ^ (460628867 * (((a1 | 0x4A5B5FFB) - (a1 & 0x4A5B5FFB)) ^ 0x6CDDD86));
  uint64_t v3 = *(void *)(a1 + 8);
  v2[0] = v1 + 628203409 * (((~v2 & 0xDF090424) - (~v2 | 0xDF090425)) ^ 0x5D810816) - 1179;
  sub_1001987D8((uint64_t)v2);
  __asm { BR              X9 }

void sub_100185370()
{
  *int v0 = v1 | 1;
}

void sub_1001853F0(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0xAE85A791) + (~(_DWORD)a1 | 0x517A586E))) ^ 0xEBEE200C);
  __asm { BR              X9 }

uint64_t sub_1001854AC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * (((v2 != ((v1 - 426338658) & 0x196968FC) + 911095750) * (((v1 - 209) | 0x8A) + 1664)) ^ v1)))();
}

uint64_t sub_100185518@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (v1 + 1261)) - 12LL))();
}

uint64_t sub_100185620@<X0>(int a1@<W6>, int a2@<W7>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(void))(a3 + 8LL * (((v5 == v6 + 101 + v3) * ((v6 + a1) & a2 ^ v4)) ^ v6)))();
}

uint64_t sub_10018564C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8LL * ((1588 * (v1 != ((v2 + 1636511417) & 0x9E74D0FF ^ 0xCA))) ^ v2)))();
}

uint64_t sub_100185688@<X0>(uint64_t a1@<X0>, int a2@<W4>, uint64_t a3@<X8>)
{
  int v7 = v3 + v4;
  int v8 = v4 + 1;
  *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL * (v7 + v6 - 71 - 202)) = a2;
  *(_DWORD *)(v5 - 0x1F589EA4AC42BDE5LL) = v8;
  int v10 = v8 + v3;
  if (v8 + v3 < 0) {
    int v10 = -v10;
  }
  int v9 = (v6 - 253) | 0xC8;
  return ((uint64_t (*)(uint64_t))(*(void *)(a3
                                                      + 8LL
                                                      * ((1518
                                                        * ((int)((v10 ^ 0xF77EFFFC)
                                                               + ((v10 << (v9 ^ 0xDD)) & 0xEEFDFFF8)
                                                               + 2109471956
                                                               + (v9 ^ 0x16 ^ (v3 + 181))) >= 0)) ^ v9))
                                          - ((v9 + 296) | 0x2Au)
                                          + 550LL))(a1);
}

uint64_t sub_10018577C@<X0>(int a1@<W3>, int a2@<W4>, unsigned int a3@<W5>, uint64_t a4@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a4
                                        + 8LL
                                        * (((((*(_DWORD *)(*v5 + 4LL * a3) == (((a2 - 62) | a1) ^ (v4 + 204))) ^ (a2 + 1)) & 1)
                                          * v6) ^ a2))
                            - 8LL))();
}

void sub_1001857BC()
{
}

uint64_t sub_1001857C8(uint64_t result)
{
  *(_DWORD *)(result + 24) = -286580747;
  return result;
}

void sub_10018580C()
{
  unint64_t v0 = (unint64_t)&v2[qword_101935DF8 + qword_101935C48];
  qword_101935DF8 = 1126174607 * v0 - 0x245AECB3A987CA56LL;
  qword_101935C48 = 1126174607 * (v0 ^ 0x245AECB3A987CA56LL);
  *(_DWORD *)*(&off_101826020
  uint64_t v1 = ((uint64_t (*)(uint64_t))*(&off_101826020
                                         + ((-113
  *(void *)*(&off_101826020
  __asm { BR              X8 }

uint64_t sub_1001859B0()
{
  unint64_t v7 = (v2 - 152) | 0x824D808DE34FF0FFLL;
  uint64_t v3 = **(unsigned int **)(v1 + 144);
  uint64_t v4 = 1755732067 * ((0x7DB27F721CB00F00LL - ((v2 - 152) | 0x7DB27F721CB00F00LL) + v7) ^ 0x5FE627B23D894D24LL);
  *(_DWORD *)(v2 - 112) = v4 ^ 0x9B531E92;
  STACK[0x5B8] = v4 + 2068980119;
  *(_DWORD *)(v2 - 132) = -1755732067 * ((481300224 - ((v2 - 152) | 0x1CB00F00) + v7) ^ 0x3D894D24);
  *(_DWORD *)(v2 - 128) = v4 + 652669833;
  *(_DWORD *)(v2 - 148) = v4 ^ 0x26E6F3E2;
  *(_DWORD *)(v2 - 136) = v4 ^ 0x26E6F3D6;
  STACK[0x5A0] = v3 + v4;
  uint64_t v5 = ((uint64_t (*)(uint64_t))(*(void *)(v1 + 1024) - 8LL))(v2 - 152);
  return ((uint64_t (*)(uint64_t))(*(void *)(v0 + 8LL * *(int *)(v2 - 152)) - 8LL))(v5);
}

uint64_t sub_100185C68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  int v35 = v32 + v28 + 841;
  a12(a11);
  int v36 = v34();
  unsigned int v37 = v35 + 640442942 + v36 - (v30 & (2 * v36)) - 840;
  *int v29 = v37;
  int v38 = 1812433253 * (((v37 >> 30) + 640442942 - 4 * (v37 >> 31)) ^ v37);
  v29[1] = v33 + v38 - (((v38 + 1) << ((v35 - 65) ^ 6)) & v30);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 + 8LL * v35) - 12LL))( 1880LL,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28);
}

void sub_100185D1C()
{
}

uint64_t sub_100185D28( double a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int8x16_t a15, int32x4_t a16, int8x16_t a17, int8x16_t a18, int8x16_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  int8x16_t v30 = (int8x16_t)vld1q_dup_f32((const float *)v27);
  v31.i64[0] = 0x8000000080000000LL;
  v31.i64[1] = 0x8000000080000000LL;
  a2.i64[0] = *(void *)(v27 + 4);
  a2.i32[2] = *(_DWORD *)(v27 + 12);
  int8x16_t v32 = vextq_s8(v30, a2, 0xCuLL);
  int8x16_t v33 = a2;
  v33.i32[3] = *(_DWORD *)(v27 + 16);
  int32x4_t v34 = (int32x4_t)veorq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v33, a19), vandq_s8(v32, v31)), 1uLL),  a18);
  v35.i32[0] = *(_DWORD *)(v28 + 4 * (*(_DWORD *)(v27 + 4) & 1LL));
  v35.i32[1] = *(_DWORD *)(v28 + 4 * (*(_DWORD *)(v27 + 8) & 1LL));
  v35.i32[2] = *(_DWORD *)(v28 + 4 * (*(_DWORD *)(v27 + 12) & 1LL));
  v35.i32[3] = *(_DWORD *)(v28 + 4LL * (v33.i8[12] & 1));
  *(int8x16_t *)uint64_t v27 = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)(v27 + 1588), v35), a15),  (int8x16_t)vaddq_s32( vsubq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v34, v34), a17)),  a16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 14072))(2191224413LL, a27);
}

uint64_t sub_100186504(int a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v13 = (unsigned int *)(v9 + 4 * v6);
  uint64_t v14 = ((v4 - 582) ^ a4) + v6;
  int v15 = *(_DWORD *)(v9 + 4 * v14);
  unsigned int v16 = v8 ^ ((v15 & 0x7FFFFFFE | v5 & 0x80000000) >> 1);
  *unsigned int v13 = v13[397] ^ a1 ^ *(_DWORD *)(v10 + 4LL * (v15 & 1)) ^ (v16 + v7 - (v11 & (2 * v16)));
  return (*(uint64_t (**)(void))(v12 + 8LL * (((16 * (v14 == 227)) | ((v14 == 227) << 6)) ^ v4)))();
}

uint64_t sub_100186570@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>, int8x16_t a4@<Q1>, int8x16_t a5@<Q4>, int8x16_t a6@<Q5>, int8x16_t a7@<Q6>, int32x4_t a8@<Q7>)
{
  unsigned int v13 = (const float *)(v8 + 908);
  int8x16_t v14 = (int8x16_t)vld1q_dup_f32(v13);
  a4.i64[0] = *(void *)(v8 + 912);
  a4.i32[2] = *(_DWORD *)(v8 + 920);
  int8x16_t v15 = vextq_s8(v14, a4, 0xCuLL);
  int8x16_t v16 = a4;
  v16.i32[3] = *(_DWORD *)(v8 + 4 * (419 * (a3 ^ 0x2EDu) - 607LL));
  int32x4_t v17 = (int32x4_t)veorq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v16, a5), vandq_s8(v15, v11)), 1uLL),  a6);
  v18.i32[0] = *(_DWORD *)(v9 + 4 * (*(_DWORD *)(v8 + 912) & 1LL));
  v18.i32[1] = *(_DWORD *)(v9 + 4 * (*(_DWORD *)(v8 + 916) & 1LL));
  v18.i32[2] = *(_DWORD *)(v9 + 4 * (*(_DWORD *)(v8 + 920) & 1LL));
  v18.i32[3] = *(_DWORD *)(v9 + 4LL * (v16.i8[12] & 1));
  *(int8x16_t *)(v8 + 908) = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)v8, v18), v12),  (int8x16_t)vaddq_s32( vsubq_s32(v17, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v17, v17), a7)),  a8));
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8LL * a3) - 12LL))( a1,  a2,  749LL,  419LL);
}

void sub_100186638()
{
}

uint64_t sub_100186644( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, int a42, unsigned int a43)
{
  unsigned int v49 = v44 ^ ((*v45 & 0x7FFFFFFE | v45[623] & 0x80000000) >> 1);
  v45[623] = v45[396] ^ a1 ^ *(_DWORD *)(v46 + 4 * (*v45 & 1LL)) ^ (((v43 - 272631367) & 0xDDF9FFCD)
                                                                  + v49
                                                                  - (v47 & (2 * v49))
                                                                  + 1483892081);
  return ((uint64_t (*)(void))(*(void *)(v48 + 8LL * ((52 * (a43 > 0x26F)) ^ v43)) - 4LL))();
}

uint64_t sub_1001866CC@<X0>( _DWORD *a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, _DWORD *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t (*a32)(uint64_t))
{
  *a1 = 519546009;
  unint64_t v34 = 1178560073 * ((v33 - 0x7B5B504B8856665ALL - 2 * ((v33 - 152) & 0x84A4AFB477A99A3ELL)) ^ 0x9F58FF5CCD3DE25CLL);
  STACK[0x5C0] = (*a25 - 708109874) - v34;
  *(_DWORD *)(v33 - 148) = ((a2 + 53627184) ^ 0x23)
                         + 1178560073 * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C);
  *(_DWORD *)(v33 - 144) = a2
                         + 53627184
                         + 1178560073 * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C);
  STACK[0x5A8] = v34 + 1360870245;
  *(_DWORD *)(v33 - 128) = 1178560073 * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C) + 1;
  *(_DWORD *)(v33 - 124) = (a2 + 53627184) & 0xD6FC6F9B ^ (1178560073
                                                         * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C));
  *(_DWORD *)(v33 - 120) = 1178560073 * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C)
                         + a2
                         - 1430154380;
  uint64_t v35 = a32(v33 - 152);
  return ((uint64_t (*)(uint64_t))(*(void *)(v32 + 8LL * *(int *)(v33 - 152)) - 4LL))(v35);
}

uint64_t sub_1001867D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int *a31, void *a32, unint64_t a33)
{
  if (v34 >= v36) {
    int v37 = *a31 + 1;
  }
  else {
    int v37 = 2068980119;
  }
  *a31 = v37;
  int v38 = (((v33 >> (a24 ^ 0x84)) ^ 0x4C58C) + 640442942 - ((2 * ((v33 >> (a24 ^ 0x84)) ^ 0x4C58C)) & 0x18C47C)) ^ v33;
  unsigned int v39 = (((v38 << 7) & 0x9D2C5680 ^ v38) << 15) & 0xEFC60000 ^ (v38 << 7) & 0x9D2C5680 ^ v38;
  *(_DWORD *)(*a32 + a33) ^= v39 ^ (v39 >> 18);
  return (*(uint64_t (**)(void))(v35 + 8LL * ((1931 * (a33 > 0x1FB)) ^ 0xE9)))();
}

void sub_1001868C0()
{
}

void sub_1001868D4()
{
  *uint64_t v1 = v0;
}

void sub_10018CEDC(uint64_t a1)
{
  int v2 = 3804331 * (((a1 | 0xD29CC998) - (a1 | 0x2D633667) + 761476711) ^ 0xAC49EC6E);
  int v3 = *(_DWORD *)(a1 + 4);
  int v4 = *(_DWORD *)a1 ^ v2;
  unsigned int v5 = 1178560073 * ((&v37 - 1847688801 - 2 * (&v37 & 0x91DE819F)) ^ 0x2B4AF9FD);
  int v6 = *(_DWORD *)(a1 + 8) ^ v2;
  unint64_t v18 = 3804331
      * (((a1 | 0xF8BBF308D29CC998LL) - (a1 | 0x7440CF72D633667LL) + 0x7440CF72D633667LL) ^ 0x3712930CAC49EC6ELL);
  int v7 = v3 + v2;
  int v39 = v4 - v5 - 1882357516;
  unsigned int v37 = 1091580572 - v5;
  int v23 = &STACK[0x8FD385F8C7F9B71];
  int v38 = &STACK[0x8FD385F8C7F9B71];
  sub_100183510((uint64_t)&v37);
  int v14 = v7 + 619917585;
  int v13 = 1470973143;
  int v17 = v7 - 773459420;
  int v12 = v7 + 747582266;
  int v11 = v7 - 747903107;
  v10[2] = (char *)&v10[-217161609] + 1;
  v10[1] = &v35 - 1553;
  int v19 = v4 ^ 0xB7;
  int v29 = (v4 - 2116255094) & 0x7E237FE1 ^ 0x309;
  int v30 = (v4 - 2116255094) & 0x7E237FE1;
  int v28 = v4 ^ 6;
  int v16 = v4 + 2084248459;
  uint64_t v27 = (v4 + 2084248459);
  uint64_t v15 = v27;
  int v26 = v4;
  int32x4_t v21 = vdupq_n_s32(0x7C3ACFFFu);
  int32x4_t v22 = vdupq_n_s32(0xF8759FFE);
  uint64_t v20 = a1;
  uint64_t v24 = *(void *)(a1 + 32);
  uint64_t v8 = (char *)*(&off_101826020 + v4 + 60) - 8;
  uint64_t v25 = *(void *)&v8[8 * v4] - 4LL;
  unsigned int v9 = ((3 * (v4 ^ 0xB7) - 325) | 0x2B1) + v6 - ((2 * v6 + 1385914200) & 0x9CE56E16) - 138386494;
  char v31 = (HIBYTE(v9) ^ 0x4E) - 2 * ((HIBYTE(v9) ^ 0x4E) & 0x2D ^ HIBYTE(v9) & 1) + 44;
  char v32 = (BYTE2(v9) ^ 0x72) - ((2 * (BYTE2(v9) ^ 0x72)) & 0x58) + 44;
  char v33 = (BYTE1(v9) ^ 0xB7) - ((2 * (BYTE1(v9) ^ 0xB7)) & 0x58) + 44;
  char v34 = v9 ^ 0x27;
  __asm { BR              X14 }

uint64_t sub_10018D2B4(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11 = v9 + a1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8LL * (int)(((((v6 + 648) | 0x108) + (v6 ^ 0xFFFFFFAA)) * ((a3 - v7 - v8 + v11 + 2203) > 0xE)) ^ v6))
                                                                                                - 8LL))( 3400227375LL,  2149711875LL,  3725342001LL,  2145253218LL,  a5,  a6,  569625295LL);
}

uint64_t sub_10018D348(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v10 = v4 ^ 0x539;
  int v11 = v4 ^ 0x20F;
  unsigned int v12 = v6 + v5 + a2;
  if (v12 <= 0x40) {
    int v13 = 64;
  }
  else {
    int v13 = v12;
  }
  BOOL v14 = !__CFADD__(v12 - 1, v8 + v7 + ((((v10 - 919) | 0x400) + a4) ^ v11) + v13);
  return (*(uint64_t (**)(void))(v9 + 8LL * ((2 * v14) | (4 * v14) | v10)))();
}

uint64_t sub_10018D3B8@<X0>( uint64_t a1@<X5>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, arg29_10018D3B8 a29)
{
  *(_OWORD *)(a1 + (((v29 - 514) ^ 0xFFFFFE7BLL) & (a2 + v31))) = *(_OWORD *)&a29.arr[4];
  return ((uint64_t (*)(void))(*(void *)(v32 + 8LL * ((38 * (((v30 + 1) & 0x1FFFFFFF0LL) == 16)) ^ v29)) - 4LL))();
}

void sub_10018D414()
{
}

uint64_t sub_10018D420@<X0>(int a1@<W0>, uint64_t a2@<X5>, uint64_t a3@<X7>, int a4@<W8>)
{
  int v8 = 3 * (v4 ^ 0x2B2);
  *(_BYTE *)(a2 + (v8 ^ (a1 + 212)) + v6) = v5;
  *(_BYTE *)(a2 + (a4 - 894739921)) = *(_BYTE *)(a3
                                                             + (((v8 - 161) ^ 0xFFFFFFCBLL) & 0x100000001LL));
  return (*(uint64_t (**)(void))(v7 + 8LL * (v8 ^ 0x626)))();
}

uint64_t sub_10018E6B0@<X0>(uint64_t a1@<X5>, uint64_t a2@<X7>, int a3@<W8>)
{
  *(_BYTE *)(a1 + (v6 + a3 + 1)) = *(_BYTE *)(a2 + (v5 - 569625293));
  return (*(uint64_t (**)(void))(v7 + 8LL * (((((v3 - 197) | 0x24) + 1085) * ((v4 & 0xFFFFFFFC) == 569625292)) ^ v3)))();
}

uint64_t sub_10018E704@<X0>( uint64_t a1@<X5>, uint64_t a2@<X7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t (*a23)(uint64_t))
{
  *(_BYTE *)(a1 + (a3 + v24 - 50)) = *(_BYTE *)(a2 + (v23 - 569625292));
  int v26 = 628203409 * ((2 * ((v25 - 168) & 0xADFAC20) - (v25 - 168) + 1965052895) ^ 0xF7A85FEC);
  *(void *)(v25 - 168) = a21;
  *(_DWORD *)(v25 - 160) = v26 + v24 + 601;
  *(_DWORD *)(v25 - 156) = 103152455 - v26;
  uint64_t v27 = sub_1001797A4(v25 - 168);
  return a23(v27);
}

uint64_t sub_10018E798( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  BOOL v16 = a13 < 0x5F494700;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((v16 * ((v14 + 1376) ^ 0x772)) ^ v14)) - 4LL))();
}

uint64_t sub_10018E80C@<X0>( int a1@<W0>, unsigned int a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W8>)
{
  BOOL v14 = a2 < v12;
  char v15 = *(_BYTE *)(a7 + v11 + v8 + (v9 ^ a4) - 1823);
  *(_BYTE *)(a6 + (a8 + v10)) = v15 - (a3 & (2 * v15)) + 44;
  unsigned int v16 = v8 + 1 + a1;
  int v17 = v14 ^ (v16 < v12);
  BOOL v18 = v16 < a2;
  if (!v17) {
    BOOL v14 = v18;
  }
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((v14 * a5) ^ v9)) - 4LL))();
}

uint64_t sub_10018E878( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  int v30 = 628203409 * ((~((v29 - 168) | 0xF78B7D49) + ((v29 - 168) & 0xF78B7D49)) ^ 0x8AFC8E85);
  *(void *)(v29 - 168) = a27;
  *(_DWORD *)(v29 - 160) = v30 + v28 - 1170;
  *(_DWORD *)(v29 - 156) = a13 - v30;
  uint64_t v31 = sub_1001797A4(v29 - 168);
  uint64_t v32 = STACK[0x298] & 0x3F;
  *((_BYTE *)&STACK[0x254] + (v32 ^ 0x2B)) = -84;
  return ((uint64_t (*)(uint64_t))(*(void *)(v27
                                                      + 8LL
                                                      * ((((v32 ^ 0x2B) > 0x37)
                                                        * (v28 - 1771 + ((v28 - 1758510882) & 0x68D0BF3F) - 1849)) ^ v28))
                                          - 8LL))(v31);
}

uint64_t sub_10018E984@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8LL * (((a1 == ((v1 - 1831) ^ 0x29)) * (v1 ^ 0x774)) ^ v1)))( 34LL,  731LL);
}

uint64_t sub_10018E9C8()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((28
}

uint64_t sub_10018EA20@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + a1 + 259 * (v4 & 0x3651AF77 ^ 0x701u)) = v6;
  return (*(uint64_t (**)(void))(v5 + 8LL * ((63 * ((v3 & 0x38) == 8LL)) ^ v4 & 0x3651AF77u)))();
}

uint64_t sub_10018EA74@<X0>(unsigned int a1@<W8>)
{
  *(void *)(v3 + a1) = v5;
  return (*(uint64_t (**)(void))(v4 + 8LL * ((63 * (v2 == 0)) ^ v1)))();
}

uint64_t sub_10018EA9C@<X0>(int a1@<W8>)
{
}

uint64_t sub_10018EADC(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_BYTE *)(v6 + v10 + a6 - 1) = v9;
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * (((v6 + v10 >= (v7 ^ a1 ^ v8)) * a2) ^ (v7 + 1173))) - 4LL))();
}

void sub_10018EB14()
{
}

uint64_t sub_10018EB24()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL * ((15 * (v0 - 1737293467 < ((v2 + 498780042) & 0xE2453CFB) - 1154)) ^ (v2 + 479))))();
}

uint64_t sub_10018EB80@<X0>(int a1@<W8>)
{
  uint64_t v4 = v1;
  unint64_t v5 = v1 + v2;
  if (v5 <= 0x38) {
    unint64_t v5 = 56LL;
  }
  BOOL v6 = v5 - v4 + (a1 ^ 0x715u) + 1737292524 < 8;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((2 * v6) | (4 * v6)) ^ a1)) - 26 * (a1 ^ 0x4B8u) + 48LL))();
}

uint64_t sub_10018EBEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(a11 + v13) = v15;
  return ((uint64_t (*)(void))(*(void *)(v14
                                        + 8LL * ((((v12 & 0xFFFFFFFFFFFFFFF8LL) == 8) * ((v11 + 269) ^ 0x4AB)) ^ v11))
                            - 4LL))();
}

uint64_t sub_10018EC2C()
{
  *unsigned int v1 = v5;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (((v3 == 0) * v2) ^ v0)) - 4LL))();
}

uint64_t sub_10018EC50()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v2 - 1160) ^ 0x2E8) * (v0 == v1)) ^ v2)) - (v2 ^ 0x488u) + 48LL))();
}

uint64_t sub_10018EC8C@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + v5 + a1 - 1) = v4;
  return (*(uint64_t (**)(void))(v6 + 8LL * ((((unint64_t)(a2 + v5) < 0x38) * v3) ^ (v2 + 479))))();
}

void sub_10018ECB8()
{
  int v1 = LOBYTE(STACK[0x2B4]) ^ 0xF3;
  if (v1 == 1)
  {
    unsigned int v7 = STACK[0x298];
    unsigned int v8 = STACK[0x294];
    char v9 = ((LODWORD(STACK[0x298]) >> (v0 - 47)) ^ 0xBD)
       - 2 * (((LODWORD(STACK[0x298]) >> (v0 - 47)) ^ 0xBD) & 0x2E ^ (LODWORD(STACK[0x298]) >> (v0 - 47)) & 2);
    LOBYTE(STACK[0x28C]) = ((8 * LOBYTE(STACK[0x298])) ^ 0x58) - ((2 * ((8 * LOBYTE(STACK[0x298])) ^ 0x58)) & 0x55) + 44;
    LOBYTE(STACK[0x28D]) = v9 + 44;
    LOBYTE(STACK[0x28E]) = ((v7 >> 13) ^ 0x12) + (~(v7 >> 12) | 0xA7) + 45;
    LOBYTE(STACK[0x28F]) = ((v7 >> 21) ^ 0x10) + (~(v7 >> 20) | 0xA7) + 45;
    HIDWORD(v10) = v8 ^ 0x1B;
    LODWORD(v10) = v7 ^ 0xA0000000;
    LOBYTE(STACK[0x290]) = (v10 >> 29) - ((2 * (v10 >> 29)) & 0x58) + 44;
    LOBYTE(STACK[0x291]) = ((v8 >> 5) ^ 0xE8) - 2 * (((v8 >> 5) ^ 0xE8) & 0x2D ^ ((v8 & 0x20) != 0)) + 44;
    LOBYTE(STACK[0x292]) = ((v8 >> 13) ^ 0xCF) - ((2 * ((v8 >> 13) ^ 0xCF)) & 0x58) + 44;
    unsigned int v11 = (v8 >> 21) ^ 0xFFFFFF94;
    int v12 = v11 & 0x2D;
    char v5 = v11 + 44;
    unsigned int v6 = 2 * (v12 ^ (v8 >> 21) & 1);
  }

  else
  {
    if (v1 != 2) {
      goto LABEL_6;
    }
    unsigned int v6 = STACK[0x298];
    char v2 = ((LODWORD(STACK[0x294]) >> 5) ^ 0xE8)
       - 2 * (((LODWORD(STACK[0x294]) >> 5) ^ 0xE8) & 0x2D ^ ((STACK[0x294] & 0x20) != 0));
    HIDWORD(v3) = LODWORD(STACK[0x294]) ^ 0x1B;
    LODWORD(v3) = LODWORD(STACK[0x298]) ^ 0xA0000000;
    int v4 = LODWORD(STACK[0x294]) >> 13;
    LOBYTE(STACK[0x28C]) = ((LODWORD(STACK[0x294]) >> 21) ^ 0x94)
                         - 2
                         * (((LODWORD(STACK[0x294]) >> 21) ^ 0x94) & 0x2F ^ (LODWORD(STACK[0x294]) >> 21) & ((v0 ^ 0x56) - 95))
                         + 44;
    LOBYTE(STACK[0x28D]) = (v4 ^ 0xCF) - ((2 * (v4 ^ 0xCF)) & 0x58) + 44;
    LOBYTE(STACK[0x28E]) = v2 + 44;
    LOBYTE(STACK[0x28F]) = (v3 >> 29) + (~(2 * (v3 >> 29)) | 0xA7) + 45;
    LOBYTE(STACK[0x290]) = ((v6 >> 21) ^ 0x10) + (~(v6 >> 20) | 0xA7) + 45;
    LOBYTE(STACK[0x291]) = ((v6 >> 13) ^ 0x12) - ((v6 >> 12) & 0x58) + 44;
    LOBYTE(STACK[0x292]) = ((v6 >> 5) ^ 0xBD) - 2 * (((v6 >> 5) ^ 0xBD) & 0x2E ^ (v6 >> 5) & 2) + 44;
    LOBYTE(v6) = (8 * v6) ^ 0x58;
    char v5 = v6 + 44;
    LOBYTE(v6) = (2 * v6) & 0x50;
  }

  LOBYTE(STACK[0x293]) = v5 - v6;
LABEL_6:
  JUMPOUT(0x10018D520LL);
}

uint64_t sub_10018EF18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
  if (a32 == 2) {
    return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v37
  }
                                                                 + 8LL
                                                                 * (((LODWORD(STACK[0x2B0]) != 2113300787)
                                                                   * ((v38 ^ 0xB5) - 117)) ^ (v38 + 77)))
                                                     - 8LL))( a1,  a15);
  if (a32 == 1) {
    return ((uint64_t (*)(uint64_t))(*(void *)(v37
  }
                                                        + 8LL
                                                        * (((LODWORD(STACK[0x2B0]) != 2113300787) * ((v38 ^ 0xB5) + 583)) ^ (v38 + 77)))
                                            - 8LL))(a15);
  unint64_t v40 = ((unint64_t)&a37 ^ 0x65FFEFEFF72EFF7DLL)
      - 0x40A404C4D326A97DLL
      + (((void)&a37 << ((v38 - 8) ^ 0x2Du)) & 0xCBFFDFDFEE5DFEF0LL);
  LOBYTE(STACK[0x2AF]) = (v40 ^ (((v38 - 8) ^ 0x18) - 122)) * (v40 + 17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v37 + 8LL * (v38 + 504)) - 8LL))(a15);
}

void sub_10018F254()
{
}

uint64_t sub_10018F25C@<X0>(int a1@<W8>)
{
  uint64_t v3 = *(void *)(v8 + 16);
  uint64_t v4 = *(void *)(v8 + 40);
  char v5 = (void *)(v1 - 184);
  memset((void *)(v1 - 184), 44, 16);
  int v6 = 235795823 * (((v1 - 168) & 0xEF9CDC89 | ~((v1 - 168) | 0xEF9CDC89)) ^ 0x84CE6A2F);
  v5[7] = v1 + 0x1F962A9297594D31LL;
  *(_DWORD *)(v1 - 132) = (a1 + 1662) ^ v6;
  *(_DWORD *)(v1 - 160) = v6 + 100576593;
  v5[2] = v3;
  v5[4] = &v9;
  void v5[5] = v4;
  uint64_t result = ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * (a1 - 43)) - 4LL))(v1 - 168);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v1 - 136);
  return result;
}

void sub_10018F354(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_10018F3B4()
{
  return 4294925278LL;
}

void sub_10018F55C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 1225351577 * ((-2 - ((a1 | 0x64CFEAB8) + (~(_DWORD)a1 | 0x9B301547))) ^ 0xB8AACD51);
  __asm { BR              X13 }

uint64_t sub_10018F6DC@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, char a26, uint64_t a27, char a28, uint64_t a29, char a30, uint64_t a31, char a32, uint64_t a33, char a34, uint64_t a35, char a36)
{
  int8x16_t v56 = &a26 + v36;
  uint16x8_t v55 = &a20 + v36;
  uint8x16_t v54 = &a36 + v36;
  uint64_t v53 = &a32 + v36;
  int v52 = &a28 + v36;
  unsigned int v51 = &a34 + v36;
  uint64_t v42 = &a30 + v36;
  uint64_t v43 = *a1;
  uint64_t v44 = *(void *)(*a1 - 0x19A1466F6B33264LL);
  uint64_t v45 = a1[5];
  uint16x8_t v57 = &a24 + v36;
  uint64_t v58 = v38;
  uint64_t v59 = a1[4];
  *(void *)(v41 - 144) = *a1;
  *(void *)(v41 - 136) = a2;
  *(_DWORD *)(v41 - 112) = v40
                         + 357
                         + 1224239923
                         * ((2 * (((v41 - 144) ^ 0xA8FDC33E) & 0x7EE300AA) - ((v41 - 144) ^ 0xA8FDC33E) + 18677589) ^ 0x5B52C1BC);
  *(void *)(v41 - 104) = v44;
  *(void *)(v41 - 128) = &a24 + v36;
  *(void *)(v41 - 120) = v45;
  uint64_t v46 = &a24 + v36;
  int v47 = *(void (**)(uint64_t))(v37 + 8LL * (v40 - 267));
  v47(v41 - 144);
  *(void *)(v41 - 120) = v46;
  *(void *)(v41 - 112) = v43;
  *(_DWORD *)(v41 - 144) = (v40 + 322) ^ (1225351577
                                        * ((((v41 - 144) | 0x5239BC64) - ((v41 - 144) & 0x5239BC64)) ^ 0x71A36472));
  *(void *)(v41 - 136) = v45;
  *(void *)(v41 - 128) = v42;
  ((void (*)(uint64_t))((char *)*(&off_101826020 + (v40 ^ 0x1EE)) - 4))(v41 - 144);
  *(_DWORD *)(v41 - 112) = v40
                         + 357
                         + 1224239923
                         * ((((v41 - 144) | 0x595B079F) - (v41 - 144) + ((v41 - 144) & 0xA6A4F860)) ^ 0xABE8FA48);
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(void *)(v41 - 128) = v56;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 104) = v57;
  v47(v41 - 144);
  *(void *)(v41 - 104) = v56;
  *(void *)(v41 - 128) = v55;
  *(void *)(v41 - 120) = v45;
  *(_DWORD *)(v41 - 112) = v40
                         + 357
                         + 1224239923 * (((v41 - 144) & 0x3BB37F04 | ~((v41 - 144) | 0x3BB37F04)) ^ 0x36FF7D2C);
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  v47(v41 - 144);
  *(void *)(v41 - 104) = v55;
  *(_DWORD *)(v41 - 112) = v40
                         + 357
                         + 1224239923
                         * ((((v41 - 144) ^ 0x37A6533F) - 153833405 - 2 * (((v41 - 144) ^ 0x37A6533F) & 0xF6D4B043)) ^ 0x33C11EAB);
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(void *)(v41 - 128) = v54;
  *(void *)(v41 - 120) = v45;
  v47(v41 - 144);
  *(void *)(v41 - 104) = v54;
  *(_DWORD *)(v41 - 112) = v40 + 357 + 1224239923 * ((v41 - 144) ^ 0xF2B3FDD7);
  *(void *)(v41 - 128) = v53;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  v47(v41 - 144);
  *(void *)(v41 - 128) = v52;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(_DWORD *)(v41 - 112) = v40
                         + 357
                         + 1224239923
                         * (((((v41 - 144) | 0x64E59E14) ^ 0xFFFFFFFE) - (~(v41 - 144) | 0x9B1A61EB)) ^ 0x69A99C3C);
  *(void *)(v41 - 104) = v53;
  v47(v41 - 144);
  *(_DWORD *)(v41 - 112) = v40
                         + 357
                         + 1224239923 * ((((v41 - 144) | 0x86AC62B3) + (~(v41 - 144) | 0x79539D4C)) ^ 0x741F9F65);
  *(void *)(v41 - 128) = v51;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(void *)(v41 - 104) = v52;
  v47(v41 - 144);
  *(void *)(v41 - 104) = v51;
  *(_DWORD *)(v41 - 112) = v40
                         + 357
                         + 1224239923 * ((((v41 - 144) | 0xBB11C9DF) + (~(v41 - 144) | 0x44EE3620)) ^ 0x49A23409);
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(void *)(v41 - 128) = v42;
  *(void *)(v41 - 120) = v45;
  v47(v41 - 144);
  uint64_t v48 = *(void *)(v43 - 0x19A1466F6B3326CLL);
  *(_DWORD *)(v41 - 128) = v40
                         + 1374699841
                         * ((1834202156
                           - ((v41 - 144) ^ 0xF8ADEB70 | 0x6D53B42C)
                           + ((v41 - 144) ^ 0xF8ADEB70 | 0x92AC4BD3)) ^ 0x7F5B8AA)
                         + 76;
  *(void *)(v41 - 144) = v48;
  *(void *)(v41 - 136) = v58;
  sub_1001798B4(v41 - 144);
  *(void *)(v41 - 136) = v59;
  *(_DWORD *)(v41 - 144) = v40 + 235795823 * ((v41 - 144) ^ 0x94AD4959) + 354;
  uint64_t v49 = sub_100163DB4(v41 - 144);
  return (*(uint64_t (**)(uint64_t))(v39
                                            + 8LL
                                            * ((862
                                              * (((v40 + 864960363) & 0xCC71BFED)
                                               + *(_DWORD *)(v41 - 140)
                                               - 49961326
                                               - 190 >= ((v40 - 387928426) & 0x171F56FEu) + 2147481859)) ^ v40)))(v49);
}

uint64_t sub_10018FBE0()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
}

uint64_t sub_10018FC2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void (*a23)(uint64_t), uint64_t a24)
{
  *(_DWORD *)(v30 - 144) = (v26 + 489) ^ (1225351577
                                        * (((((v30 - 144) | 0xBD376AEC) ^ 0xFFFFFFFE) - (~(v30 - 144) | 0x42C89513)) ^ 0x61524D05));
  *(void *)(v30 - 136) = v28;
  *(void *)(v30 - 128) = v25;
  *(void *)(v30 - 120) = v25;
  *(void *)(v30 - 112) = v29;
  a23(v30 - 144);
  int v31 = 1374699841 * ((((v30 - 144) | 0xFFB46DA3) + (~(v30 - 144) | 0x4B925C)) ^ 0x924075AB);
  *(_DWORD *)(v30 - 128) = -49961326 - v31 + v24 + 2;
  *(_DWORD *)(v30 - 144) = (v26 + 15) ^ v31;
  *(void *)(v30 - 136) = a24;
  uint64_t v32 = sub_100165354(v30 - 144);
  return (*(uint64_t (**)(uint64_t))(v27
                                            + 8LL
                                            * ((1615 * (*(_DWORD *)(v30 - 140) != ((277 * (v26 ^ 0xC3)) ^ 0x4FDBF5EF))) ^ v26)))(v32);
}

uint64_t sub_10018FD3C()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_10018FD80()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((81 * (v2 + v4 < ((((v0 + 740083811) & 0xD3E337D9) - 153) ^ (v1 + 958)))) ^ v0))
                            - 4LL))();
}

uint64_t sub_10018FDC8()
{
  *(void *)(v3 - 136) = v2;
  *(_DWORD *)(v3 - 128) = -1374699841
                        * ((((v3 - 144) | 0x951DA954) - (v3 - 144) + ((v3 - 144) & 0x6AE256A8)) ^ 0xF8E9B15D);
  *(_DWORD *)(v3 - 144) = (v0 - 624) ^ (1374699841
                                      * ((((v3 - 144) | 0x951DA954) - (v3 - 144) + ((v3 - 144) & 0x6AE256A8)) ^ 0xF8E9B15D));
  uint64_t v4 = sub_100165354(v3 - 144);
  BOOL v5 = *(_DWORD *)(v3 - 140) == v0 + 1339814801;
}

uint64_t sub_10018FF24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  int v29 = (v25 + 136) | 4;
  int v30 = 1374699841 * ((v28 + 1172267476 - 2 * ((v28 - 144) & 0x45DF6264)) ^ 0x282B7A6D);
  *(void *)(v28 - 136) = a24;
  *(_DWORD *)(v28 - 128) = (v29 ^ (v27 - 923)) + v24 - v30;
  *(_DWORD *)(v28 - 144) = (v29 - 917) ^ v30;
  uint64_t v31 = sub_100165354(v28 - 144);
  return (*(uint64_t (**)(uint64_t))(v26 + 8LL * ((30 * (*(_DWORD *)(v28 - 140) != 1339815632)) ^ v29)))(v31);
}

uint64_t sub_100190038( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t (*a21)(uint64_t), uint64_t a22, void (*a23)(uint64_t), uint64_t a24, uint64_t a25)
{
  int v32 = v26 ^ 0x4A4;
  *(void *)(v31 - 120) = v27;
  *(void *)(v31 - 112) = a25;
  *(void *)(v31 - 136) = v29;
  *(void *)(v31 - 128) = v27;
  *(_DWORD *)(v31 - 144) = (v32 + 489) ^ (1225351577
                                        * ((2 * ((v31 - 144) & 0x3AF06C48) - (v31 - 144) - 988834896) ^ 0xE6954BA6));
  a23(v31 - 144);
  *(void *)(v31 - 128) = v27;
  *(void *)(v31 - 120) = v29;
  *(void *)(v31 - 104) = v27;
  *(_DWORD *)(v31 - 112) = v32
                         + 1224239923
                         * ((((2 * ((v31 - 144) ^ 0xEBD82A09)) | 0xFC0EC0A8) - ((v31 - 144) ^ 0xEBD82A09) - 2114412628) ^ 0x676CB78A)
                         + 524;
  *(void *)(v31 - 144) = a25;
  *(void *)(v31 - 136) = a15;
  uint64_t v33 = a21(v31 - 144);
  return (*(uint64_t (**)(uint64_t))(v28
                                            + 8LL
}

uint64_t sub_10019082C()
{
  int v5 = 1224239923 * ((2 * ((v4 - 144) & 0x4145D028) - (v4 - 144) - 1095094320) ^ 0x4C09D207);
  *(_DWORD *)(v4 - 144) = v5 ^ 0x5098936A;
  *(void *)(v4 - 136) = v8;
  *(_DWORD *)(v4 - 128) = v5 + v0 - 1401;
  sub_1001646D4((_DWORD *)(v4 - 144));
  *(void *)(v4 - 144) = v3;
  *(void *)(v4 - 136) = v8;
  *(void *)(v4 - 104) = v1;
  *(void *)(v4 - 128) = v1;
  *(void *)(v4 - 120) = v2;
  *(_DWORD *)(v4 - 112) = v0 + 1224239923 * (((v4 - 144) & 0x73F71CDE | ~((v4 - 144) | 0x73F71CDE)) ^ 0x7EBB1EF6) - 1072;
  v9(v4 - 144);
  *(void *)(v4 - 144) = v1;
  *(void *)(v4 - 136) = v7;
  *(_DWORD *)(v4 - 128) = v0
                        - 957
                        + 1374699841 * ((2 * ((v4 - 144) & 0x37738180) - (v4 - 144) - 930316676) ^ 0xA5786675)
                        - 396;
  return sub_1001798B4(v4 - 144);
}

void sub_100190984(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 1178560073 * (a1 ^ 0xBA947862);
  __asm { BR              X11 }

uint64_t sub_100190A40()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (int)((((73 * (v0 ^ 0x120) + 874) ^ ((v0 ^ 0x460) + 926832539) & 0xC8C1A7A7) * (v1 != 0)) ^ v0 ^ 0x460)))();
}

uint64_t sub_100190A9C()
{
  BOOL v6 = (*(_DWORD *)(v2 + 16) ^ v0) - 1329061381 > 0xFFFFFFBE
    || (*(_DWORD *)(v3 - 0x27E11828102FB975LL) & (v1 - 1158)) == 15 * (v1 ^ 0x482) - 75;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((99 * v6) ^ v1)) - 8LL))();
}

uint64_t sub_100190B1C@<X0>( uint64_t (*a1)(unsigned int *)@<X8>, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v12 = v8 - 1084;
  int v13 = v8 - 867;
  unsigned int v14 = 3804331
      * (((&a3 | 0x6A071CCA) - &a3 + (&a3 & 0x95F8E330)) ^ 0x14D2393C);
  a7 = v14 - 1468329462;
  a5 = v7;
  a6 = v9;
  a3 = v11 + v14 + ((2 * v12) ^ 0xC19F770D);
  a4 = v14 + v12 + 357;
  uint64_t v15 = a1(&a3);
  return (*(uint64_t (**)(uint64_t))(v10
                                            + 8LL
                                            * ((352 * (*(_DWORD *)(v9 - 0x27E11828102FB971LL) == v13 + 2084228827)) ^ v12)))(v15);
}

uint64_t sub_100190BDC()
{
  int v3 = v1
     - (((v1 << ((73 * (v2 ^ 0x92)) ^ 0x25)) + 1636844664) & ((((v2 ^ 0xB8) + 82) | 0x308) ^ 0x69A1F4C8))
     - 442950180;
  return (*(uint64_t (**)(void))(v0
                              + 8LL
                              * ((101
                                * (((2 * v3) & 0xDFDFCDFE ^ 0x4981C540) + (v3 ^ 0xDB3F1D5F) + 1069416411 == 799925978)) ^ v2 ^ 0xB8)))();
}

uint64_t sub_100190C90()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((1224
}

uint64_t sub_100190D08(uint64_t a1, int a2)
{
}

uint64_t sub_100190D38(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((2 * ((((a3 - 86065026) ^ (v3 < a3 - 1368)) & 1) == 0)) & 0xFB | (4
                                                                                                 * (((a3 + 126) ^ ~(v3 < a3 - 1368)) & 1)) | a3)))();
}

uint64_t sub_100190D7C()
{
  unsigned int v8 = v3 + v2 + (v5 & 0x5213B2D) + v4;
  v9.i64[0] = 0x5858585858585858LL;
  v9.i64[1] = 0x5858585858585858LL;
  v10.i64[0] = 0x2D2D2D2D2D2D2D2DLL;
  v10.i64[1] = 0x2D2D2D2D2D2D2D2DLL;
  uint64_t v11 = v6 + v8;
  int8x16_t v12 = vrev64q_s8(*(int8x16_t *)(v11 - 15));
  int8x16_t v13 = vextq_s8(v12, v12, 8uLL);
  int8x16_t v14 = vrev64q_s8(*(int8x16_t *)(v11 - 31));
  int8x16_t v15 = vextq_s8(v14, v14, 8uLL);
  uint64_t v16 = v0 + v8;
  int8x16_t v17 = vrev64q_s8(vaddq_s8(vaddq_s8(v13, v10), vmvnq_s8(vandq_s8(vaddq_s8(v13, v13), v9))));
  *(int8x16_t *)(v16 - 15) = vextq_s8(v17, v17, 8uLL);
  int8x16_t v18 = vrev64q_s8(vaddq_s8(vaddq_s8(v15, v10), vmvnq_s8(vandq_s8(vaddq_s8(v15, v15), v9))));
  *(int8x16_t *)(v16 - 31) = vextq_s8(v18, v18, 8uLL);
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
}

void sub_100190E28()
{
}

void sub_100190E34()
{
  *uint64_t v0 = -2084203482;
}

void sub_1001912E8(unint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 44) - 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  unsigned int v30 = *(_DWORD *)(a1 + 16) + 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  unsigned int v3 = 1178560073 * (&v39 ^ 0xBA947862);
  int v4 = *(_DWORD *)(a1 + 36);
  unint64_t v22 = 1755732067
      * (((a1 | 0xDEEEE61CC66703ELL) - (a1 | 0xF211119E33998FC1LL) - 0xDEEEE61CC66703FLL) ^ 0xD045495E12A0CDE5LL);
  int v5 = v4 + 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  int v41 = v2 - v3 - 1882357543;
  unsigned int v39 = 1091580572 - v3;
  uint64_t v27 = &STACK[0x8FD385F8C7F9A19];
  int v40 = &STACK[0x8FD385F8C7F9A19];
  sub_100183510((uint64_t)&v39);
  unsigned int v6 = v30;
  unsigned int v7 = v2;
  unsigned int v8 = (void *)a1;
  int8x16_t v9 = (char *)*(&off_101826020 + (int)(v2 ^ 0x3F)) - 8;
  unsigned int v10 = v2 + 787;
  unint64_t v28 = *(void *)&v9[8 * v2] + ((v2 + 787) ^ 0xFFFFFFFFFFFFFC96LL);
  int v21 = v5 + 720768139;
  int v20 = -1969781505;
  int v19 = v5 - 1553812726;
  int v15 = v5 - 1945963912;
  int v14 = v5 - 1501265201;
  void v12[2] = (char *)&v12[-218196510] + 4;
  v12[1] = &v37 - 740;
  uint64_t v11 = 13 * (v2 ^ 0xDA);
  int v16 = v11;
  int v18 = v11 ^ 0x32F;
  v2 ^= 0x412u;
  int v32 = v2 ^ 0x46F;
  int v31 = v2 ^ 0x48D;
  int v13 = v7 ^ 0x42;
  uint64_t v17 = v11;
  int v23 = v8;
  unsigned int v29 = v7;
  int32x4_t v24 = vdupq_n_s32(0x7C3ACFFFu);
  int32x4_t v25 = vdupq_n_s32(0xF8759FFE);
  uint64_t v26 = *v8;
  LODWORD(v11) = v6 - 432844524 + (~((v6 << (v10 ^ 0x63)) + 796996624) | 0x631A91E9);
  char v33 = (BYTE3(v11) ^ 0x4E) - 2 * ((BYTE3(v11) ^ 0x4E) & 0x2D ^ BYTE3(v11) & 1) + 44;
  char v34 = (BYTE2(v11) ^ 0x72) - ((2 * (BYTE2(v11) ^ 0x72)) & 0x58) + 44;
  char v35 = (BYTE1(v11) ^ 0xB7) - ((2 * (BYTE1(v11) ^ 0xB7)) & 0x58) + 44;
  char v36 = (v6 + 20 + (~(((_BYTE)v6 << (v10 ^ 0x63)) + 16) | 0xE9)) ^ 0x27;
  __asm { BR              X13 }

uint64_t sub_1001916D8@<X0>(int a1@<W2>, uint64_t a2@<X4>, uint64_t a3@<X6>, int a4@<W8>)
{
  int v9 = (a4 ^ 0x68F) - 1178;
  *(_BYTE *)(a2 + (v9 ^ 0x801168u) + v6) = v5;
  *(_BYTE *)(a2 + (v7 + v4 + 77)) = *(_BYTE *)(a3
                                                           + ((((v9 - 1676278740) & 0x63E9FACF) + 4294967216LL) & 0x100000001LL));
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((1565 * ((a1 + 353013566) < 4)) ^ v9)) - 12LL))();
}

uint64_t sub_100192844@<X0>(uint64_t a1@<X4>, uint64_t a2@<X6>, int a3@<W8>)
{
  *(_BYTE *)(a1 + (v5 + 78)) = *(_BYTE *)(a2 + (v4 - 353013621));
  BOOL v7 = (((a3 + 257326348) & 0xF0A981EF ^ 0xFFFFFFB3) & v3) == 353013620;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((4 * v7) | (8 * v7)) ^ a3)) - 12LL))();
}

uint64_t sub_1001928B0@<X0>( uint64_t a1@<X4>, uint64_t a2@<X6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t (*a23)(uint64_t))
{
  int v27 = a3 - 260;
  *(_BYTE *)(a1 + (v23 + v25 + v27)) = *(_BYTE *)(a2 + (v24 - 353013620));
  int v28 = 628203409 * ((((v26 - 168) | 0x76F58F42) - (v26 - 168) + ((v26 - 168) & 0x890A70B8)) ^ 0xF47D8371);
  *(void *)(v26 - 168) = a22;
  *(_DWORD *)(v26 - 160) = v28 + v27 + 574;
  *(_DWORD *)(v26 - 156) = 103152455 - v28;
  uint64_t v29 = sub_1001797A4(v26 - 168);
  return a23(v29);
}

uint64_t sub_100192940@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  BOOL v9 = a7 < 0xEBA46AEC;
  if (v9 == a1 - 443844632 < ((v7 + 1389342787) & 0xAD304BFF) - 341546351) {
    BOOL v9 = a1 - 443844632 < a7;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((35 * !v9) ^ v7)) - 4LL))();
}

uint64_t sub_1001929C0@<X0>( unsigned int a1@<W0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W8>)
{
  BOOL v14 = a1 < v10;
  *(_BYTE *)(a5 + (v8 + a4)) = *(_BYTE *)(a7 + (a8 + v11))
  unsigned int v15 = a8 + 1 + v12;
  int v16 = v14 ^ (v15 < v10);
  BOOL v17 = v15 < a1;
  if (!v16) {
    BOOL v14 = v17;
  }
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((!v14 * a2) | v9)) - 4LL))();
}

uint64_t sub_100192A30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, unsigned int a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, int a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
  uint64_t v58 = (a8 - 1656376668) & 0x62BA4F29;
  uint64_t v52 = (a8 - 27) | 0xFu;
  int v53 = 628203409 * ((((v51 - 168) | 0x6CCBA224) - ((v51 - 168) & 0x6CCBA224)) ^ 0xEE43AE17);
  *(void *)(v51 - 168) = a27;
  *(_DWORD *)(v51 - 160) = v53 + a8 + 562;
  *(_DWORD *)(v51 - 156) = a13 - v53;
  uint64_t v54 = sub_1001797A4(v51 - 168);
  uint64_t v55 = a50 & 0x3F;
  *(&a41 + (v55 ^ 0x2B)) = -84;
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50
                                                                                + 8LL
                                                                                * ((274
                                                                                  * ((v55 ^ 0x2B) > 0x37)) ^ a8))
                                                                    - ((v52 + 478) ^ v58)))( v54,  a30,  3941953732LL,  72LL);
}

uint64_t sub_100192B3C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (((((v1 + 607) | 0x30) - 904) * (a1 == 63)) ^ v1)))(42LL);
}

uint64_t sub_100192B74()
{
  int v3 = ((((v1 - 1576807513) & 0x5DFC27EF) - 59) ^ v0) >= ((v1 + 1389584563) & 0xAD2C9FFD ^ 0x561);
  return (*(uint64_t (**)(void))(v2 + 8LL * (((8 * v3) | (v3 << 6)) ^ v1)))();
}

uint64_t sub_100192BDC@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + (v4 - 644) + (unint64_t)a1) = v6;
  return (*(uint64_t (**)(void))(v5 + 8LL * ((638 * ((v3 & 0x38) == 8LL)) ^ v4)))();
}

uint64_t sub_100192C18@<X0>(void *a1@<X8>)
{
  *a1 = v5;
  return (*(uint64_t (**)(void))(v4 + 8LL * (((v2 == 0) * v3) ^ v1)))();
}

uint64_t sub_100192C38()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((((v2 == v0) ^ (v1 + 118)) & 1 | (16
}

uint64_t sub_100192C74(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(_BYTE *)(v5 + v8 + a5 - 1) = v7;
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
}

void sub_100192CB0()
{
}

uint64_t sub_100192CCC()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL * ((14 * (v0 - 1745572328 < ((v2 - 64409680) & 0x3D6D6BF ^ 0x687u))) ^ (v2 + 758))))();
}

uint64_t sub_100192D30()
{
  uint64_t v4 = v0;
  unint64_t v5 = v0 + v2;
  if (v5 <= 0x38) {
    unint64_t v5 = 56LL;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v1 - 98) ^ 0x624) * (v5 - v4 + 1745572328 < 8)) ^ v1)) - 12LL))();
}

uint64_t sub_100192D88@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + v5) = v9;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((((v4 & 0xFFFFFFFFFFFFFFF8LL) == 8) * v7) ^ a1))
                            - 31 * (a1 ^ v6)
                            + 833LL))();
}

void sub_100192DCC()
{
}

uint64_t sub_100192DD4()
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
}

uint64_t sub_100192E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)(v6 + v8 + a5 - 1) = v7;
  return (*(uint64_t (**)(void))(v9
                              + 8LL
                              * (((4 * ((unint64_t)(v6 + v8) < 0x38)) | (((unint64_t)(v6 + v8) < 0x38) << 10)) ^ (v5 + 758))))();
}

void sub_100192E50()
{
}

uint64_t sub_100193090( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,int a56)
{
  if (a31 == 2) {
    return (*(uint64_t (**)(void))(v56 + 8LL * ((2011 * (a56 != ((a2 + 944) ^ 0x7DF66ACC))) ^ (a2 + 944))))();
  }
  if (a31 == 1) {
    return (*(uint64_t (**)(uint64_t))(v56 + 8LL * ((1635 * (a56 != 2113300787)) ^ (a2 + 944))))(a14);
  }
  uint64_t v58 = (a2 - 79) | 0x3C2u;
  unint64_t v59 = ((v58 + 0x77D6F9B5FF792A3BLL) ^ (unint64_t)&a35)
      + ((2LL * (void)&a35) & 0xEFADF36BFEF25BF0LL)
      - 0x2244101001081FFDLL;
  a55 = ((9 * (((a2 - 79) | 0xC2) ^ 0xC7) - 115) ^ v59) * (v59 + 17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v56 + 8LL * (int)v58) - 8LL))(a14);
}

void sub_1001933D4()
{
}

uint64_t sub_1001933DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, __int128 a38)
{
  uint64_t v43 = *(void *)(a20 + 24);
  memset((char *)&a38 + 4, 44, sizeof(__int128));
  int v44 = 235795823 * ((2 * ((v41 - 168) & 0x1ABDAF30) - (v41 - 168) + 1698844877) ^ 0xF1EF1994);
  *(void *)(v41 - 128) = &STACK[0x1F962A9297594ED5];
  *(_DWORD *)(v41 - 132) = (v40 + 1669) ^ v44;
  *(void *)(v41 - 1++*(_DWORD *)(v3 + 52) = &a36;
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 168) = v41 - 184;
  *(_DWORD *)(v41 - 160) = v44 + 100576593;
  uint64_t v45 = ((uint64_t (*)(uint64_t))(*(void *)(v42 + 8LL * (int)(v40 - 36)) - 4LL))(v41 - 168);
  return ((uint64_t (*)(uint64_t))(*(void *)(v38
                                                      + 8LL
}

uint64_t sub_1001934F4()
{
  uint64_t v7 = v0 + 1;
  BOOL v9 = (((v4 - 1492) | 0x42) ^ 0x77DBF7A0 ^ v6) - 1455428195 + ((2 * v6) & 0xEFB7EFDE) == 555476364 && v7 != v3 + 16;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((11 * v9) ^ v4)))();
}

uint64_t sub_100193580@<X0>(int a1@<W8>)
{
  unint64_t v5 = ((((v4 - 168) | 0x6FA34C23DE3CBB8CLL) - ((v4 - 168) | 0x905CB3DC21C34473LL) - 0x6FA34C23DE3CBB8DLL) ^ 0x6713F6DD4A91F2D5LL)
     * v2;
  *(void *)(v4 - 136) = v5 + 555476364;
  *(_DWORD *)(v4 - 128) = ((((v4 - 168) | 0xDE3CBB8C) - ((v4 - 168) | 0x21C34473) + 566445171) ^ 0x4A91F2D5) * v2
                        + a1
                        - 269611775
                        - 61;
  *(void *)(v4 - 160) = v1 - v5;
  *(_DWORD *)(v4 - 1++*(_DWORD *)(v3 + 52) = (a1 - 269611775) ^ (((((v4 - 168) | 0xDE3CBB8C) - ((v4 - 168) | 0x21C34473) + 566445171) ^ 0x4A91F2D5)
                                            * v2);
  *(_DWORD *)(v4 - 148) = ((((v4 - 168) | 0xDE3CBB8C) - ((v4 - 168) | 0x21C34473) + 566445171) ^ 0x4A91F2D5) * v2;
  *(_DWORD *)(v4 - 144) = a1
                        - ((((v4 - 168) | 0xDE3CBB8C) - ((v4 - 168) | 0x21C34473) + 566445171) ^ 0x4A91F2D5) * v2
                        + 2104632311;
  *(_DWORD *)(v4 - 168) = ((a1 - 269611775) | 0x2D) ^ (((((v4 - 168) | 0xDE3CBB8C)
                                                       - ((v4 - 168) | 0x21C34473)
                                                       + 566445171) ^ 0x4A91F2D5)
                                                     * v2);
  uint64_t v6 = ((uint64_t (*)(uint64_t))((char *)*(&off_101826020 + a1 + 66) - 8))(v4 - 168);
  return ((uint64_t (*)(uint64_t))(*(void *)(v3 + 8LL * *(int *)(v4 - 124)) - 12LL))(v6);
}

void sub_100193660()
{
  *(_DWORD *)(v0 + 32) = 2084229119;
}

void sub_1001936AC(uint64_t a1)
{
  int v1 = 1225351577 * (((a1 | 0xD0007703) - a1 + (a1 & 0x2FFF88FC)) ^ 0xF39AAF15);
  __asm { BR              X11 }

uint64_t sub_100193760@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((957 * (*v1 != (((a1 + 295) | 0x48) ^ 0x1CF))) ^ a1)) - 8LL))();
}

uint64_t sub_1001937AC@<X0>(int a1@<W8>)
{
  int v5 = (a1 - 18) | 0x181;
  uint64_t v6 = v3(*v4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * ((61 * (*v1 != 0)) ^ v5)) - 4LL))(v6);
}

uint64_t sub_1001937E4()
{
  uint64_t result = v2(*v3);
  *int v1 = 0;
  *(_DWORD *)uint64_t v0 = 0;
  *(void *)(v0 + 344) = 0LL;
  *(void *)(v0 + 3++*(_DWORD *)(v3 + 52) = 0LL;
  *(_DWORD *)(v0 + 360) = 1662039773;
  *(_DWORD *)(v0 + 56) = 1372200252;
  return result;
}

uint64_t sub_100193824()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((61 * (*v1 != 0)) ^ v0)) - 4LL))();
}

void sub_100193848(uint64_t a1)
{
  int v1 = 1759421093 * (((a1 | 0x9EBEB665) - a1 + (a1 & 0x6141499A)) ^ 0x2DC30631);
  __asm { BR              X14 }

uint64_t sub_100193900@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5 = 1755732067 * ((((2 * v7) | 0x8125F018) - v7 + 1064110068) ^ 0x1E5445D7);
  uint64_t v8 = v1;
  v7[0] = (1030116817 - v2 - (((v3 ^ 0x556) - v4 + 604134538) & 0x56CA4A2C)) ^ v5;
  v7[1] = (v3 + 359) ^ v5;
  return ((uint64_t (*)(_DWORD *))(*(void *)(a1 + 8LL * (v3 - 367)) - 12LL))(v7);
}

void sub_100193A6C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }

uint64_t sub_100193AF8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((865 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0xD4u)) - 4LL))();
}

uint64_t sub_100193B40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  *(void *)(*(void *)(a17 + 96) + 504LL) = v19 + 1;
  *(_DWORD *)(*(void *)(a17 + 96) + 496LL) = a19 - 1;
  int v23 = 1178560073 * ((v22 - 1120536645 - 2 * ((v22 - 152) & 0xBD35F853)) ^ 0x7A18031);
  *(void *)(v22 - 144) = v22 + 0x8FD385F8C7F9821LL;
  *(_DWORD *)(v22 - 136) = v20 - v23 - 1882357664;
  int v24 = (v20 + 348) | 0x400;
  *(_DWORD *)(v22 - 1++*(_DWORD *)(v3 + 52) = 1091580572 - v23;
  int v25 = v20 + 535;
  int v29 = v20;
  uint64_t v26 = sub_100183510(v22 - 152);
  BOOL v27 = a19
      - 2120448428
      + (v24 ^ 0x672 ^ (v25 ^ 0x2A9) & (2 * *(_DWORD *)(v22 - 184)))
      + (*(_DWORD *)(v22 - 184) & 0x3F ^ 0x5FEFFFD0u) < 0xFFFFFFC0;
  return (*(uint64_t (**)(uint64_t))(v21 + 8LL * (((8 * v27) | (16 * v27)) ^ v29)))(v26);
}

uint64_t sub_100193D30( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17 = (a4 + 704901120) & 0xD5FC0FEE;
  unsigned int v18 = v13 + v17 - 1609564872;
  if (v18 <= 0x40) {
    unsigned int v18 = 64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 8LL * ((1860 * ((_DWORD)a7 - v14 - v15 + v18 > 0xE)) ^ a4)) - 4LL))( v17,  2685402424LL,  64LL,  4221429509LL,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13);
}

uint64_t sub_100193DBC(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v12 = v8 + v7;
  unsigned int v13 = a2 + v12 + 718;
  if (v13 <= 0x40) {
    unsigned int v13 = a3;
  }
  BOOL v14 = a7 - v12 < v10 + v9 + ((a1 + 876) ^ (a7 - 358) ^ (4 * a1) ^ 0xC6C) + v13;
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * (v14 | (16 * v14) | a1)) - 4LL))();
}

uint64_t sub_100193E14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return ((uint64_t (*)(void))(*(void *)(v21
                                        + 8LL
                                        * ((((((v20 + 1474202282) ^ (~a19
                                                                   + v22
                                                                   - 252
                                                                   + (unint64_t)(v19 + 717) < 0x10)) & 1) == 0)
                                          * ((v20 - 282) ^ 0x639)) | v20))
                            - 12LL))();
}

uint64_t sub_100193E6C@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v19.i64[0] = 0x5858585858585858LL;
  v19.i64[1] = 0x5858585858585858LL;
  v20.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v20.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  *(int8x16_t *)(v14 + (a7 + v12)) = vaddq_s8(vsubq_s8(*v17, vandq_s8(vaddq_s8(*v17, *v17), v19)), v20);
  uint64_t v21 = (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * (int)((((((v13 + v15 - 1593) & 0x1FFFFFFF0LL) == 16) ^ ((v16 & 0xCF) - 7)) & 1 | ((((((v13 + v15 - 1593) & 0x1FFFFFFF0LL) == 16) ^ ((v16 & 0xCF) - 7)) & 1) << 6)) ^ ((v16 & 0xA8216ECF) - 63))) - 4LL);
  return v21((v16 & 0xA8216ECF) - 7, v21, a1, a2, a3, a4, a5, a6, a8, a9, a10, a11, a12);
}

void sub_100193EFC()
{
}

uint64_t sub_100193F08(int a1)
{
}

uint64_t sub_100193F48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, int32x4_t a35, int32x4_t a36, int32x4_t a37, int32x4_t a38)
{
  int v47 = (uint64_t (*)(__n128, __n128, __n128, __n128))(*(void *)(v43 + 8LL * v38) - 12LL);
  HIDWORD(v99) = HIDWORD(a18) + 1436991572;
  LODWORD(v99) = 1947875781;
  uint64_t v48 = (const char *)(v46 - 252);
  __n128 v49 = (__n128)vdupq_n_s32(0xF8759FFE);
  __n128 v50 = (__n128)vdupq_n_s32(0x7C3ACFFFu);
  v51.n128_u64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v51.n128_u64[1] = 0x2C2C2C2C2C2C2C2CLL;
  HIDWORD(a28) = 1041;
  a27 = (v45 - 66) ^ 0xC3;
  a29 = v42 - 16;
  uint64_t v52 = (v44 - 2);
  v53.n128_u64[0] = 0x5858585858585858LL;
  v53.n128_u64[1] = 0x5858585858585858LL;
  unsigned int v55 = *(_DWORD *)(v46 - 180);
  unsigned int v54 = *(_DWORD *)(v46 - 176);
  unsigned int v56 = *(_DWORD *)(v46 - 172);
  unsigned int v57 = *(_DWORD *)(v46 - 168);
  HIDWORD(a22) = *(unsigned __int8 *)(v46 - 156) ^ 0xFFFFFFF3;
  int v58 = *(_BYTE *)(v46 - 156) ^ 0xF3;
  if (v58 == 2)
  {
    unint64_t v100 = __PAIR64__(v54, v55);
    unint64_t v101 = __PAIR64__(v57, v56);
    uint64_t v102 = v47;
    int8x16x4_t v104 = vld4q_s8(v48);
    HIDWORD(a20) = *(_DWORD *)(v46 - 164);
    uint8x16_t v81 = (uint8x16_t)veorq_s8(v104.val[0], (int8x16_t)v51);
    uint16x8_t v82 = vmovl_u8(*(uint8x8_t *)v81.i8);
    uint16x8_t v83 = vmovl_high_u8(v81);
    uint8x16_t v84 = (uint8x16_t)veorq_s8(v104.val[1], (int8x16_t)v51);
    _Q21 = vmovl_u8(*(uint8x8_t *)v84.i8);
    _Q20 = vmovl_high_u8(v84);
    __asm
    {
      SHLL2           V22.4S, V20.8H, #0x10
      SHLL2           V23.4S, V21.8H, #0x10
    }

    uint8x16_t v89 = (uint8x16_t)veorq_s8(v104.val[2], (int8x16_t)v51);
    uint16x8_t v90 = vmovl_high_u8(v89);
    uint16x8_t v91 = vmovl_u8(*(uint8x8_t *)v89.i8);
    v104.val[0] = veorq_s8(v104.val[3], (int8x16_t)v51);
    v104.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v104.val[0]);
    v104.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v104.val[1]);
    v104.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v104.val[0].i8);
    v104.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v104.val[0]);
    v104.val[0] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v91.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v104.val[0].i8));
    v104.val[3] = vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v91, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v82), 0x18uLL)),  v104.val[3]);
    v104.val[1] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v90.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v104.val[1].i8));
    v104.val[2] = vorrq_s8( vorrq_s8( vorrq_s8(_Q22, (int8x16_t)vshll_high_n_u16(v90, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v83), 0x18uLL)),  v104.val[2]);
    a37 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[1], (int32x4_t)v104.val[1]), (int8x16_t)v49)),  (int32x4_t)v50);
    a38 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[2], (int32x4_t)v104.val[2]), (int8x16_t)v49)),  (int32x4_t)v50);
    a35 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[0], (int32x4_t)v104.val[0]), (int8x16_t)v49)),  (int32x4_t)v50);
    a36 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[3], (int32x4_t)v104.val[3]), (int8x16_t)v49)),  (int32x4_t)v50);
    int v92 = (_DWORD *)&a35 + v45 + 1453518696;
    int v93 = *(v92 - 8) ^ *((_DWORD *)&a35 + a27 + 1453518696);
    uint64_t v94 = *(v92 - 16);
    int v95 = v94 ^ *(v92 - 14) ^ (v93 + v40 - (v39 & (2 * v93)));
    HIDWORD(v97) = v95 ^ v40;
    LODWORD(v97) = v95;
    int v96 = v97 >> 31;
    uint64_t v98 = v39 & (2 * v96);
    *int v92 = v96 + v40 - v98;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 8LL * ((533 * (v42 == 1453518633)) ^ HIDWORD(a28))) - 12LL))( v98,  v94,  v52,  a4,  82198926LL,  a6,  v55,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  v99,  v100,  v101,  v102,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34);
  }

  else if (v58 == 1)
  {
    int8x16x4_t v103 = vld4q_s8(v48);
    uint8x16_t v59 = (uint8x16_t)veorq_s8(v103.val[0], (int8x16_t)v51);
    uint16x8_t v60 = vmovl_high_u8(v59);
    int8x16_t v61 = (int8x16_t)vmovl_high_u16(v60);
    uint16x8_t v62 = vmovl_u8(*(uint8x8_t *)v59.i8);
    int8x16_t v63 = (int8x16_t)vmovl_high_u16(v62);
    uint8x16_t v64 = (uint8x16_t)veorq_s8(v103.val[1], (int8x16_t)v51);
    uint16x8_t v65 = vmovl_u8(*(uint8x8_t *)v64.i8);
    uint16x8_t v66 = vmovl_high_u8(v64);
    int8x16_t v67 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v65.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v62.i8));
    int8x16_t v68 = vorrq_s8((int8x16_t)vshll_high_n_u16(v65, 8uLL), v63);
    int8x16_t v69 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v66.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v60.i8));
    int8x16_t v70 = vorrq_s8((int8x16_t)vshll_high_n_u16(v66, 8uLL), v61);
    uint8x16_t v71 = (uint8x16_t)veorq_s8(v103.val[2], (int8x16_t)v51);
    _Q21 = (int8x16_t)vmovl_high_u8(v71);
    _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v71.i8);
    int8x16_t v74 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
    __asm { SHLL2           V20.4S, V20.8H, #0x10 }

    int8x16_t v79 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
    __asm { SHLL2           V21.4S, V21.8H, #0x10 }

    v103.val[0] = veorq_s8(v103.val[3], (int8x16_t)v51);
    v103.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v103.val[0].i8);
    v103.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v103.val[0]);
    v103.val[2] = vorrq_s8( vorrq_s8(v67, v74),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v103.val[1].i8), 0x18uLL));
    v103.val[1] = vorrq_s8( vorrq_s8(v68, _Q20),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v103.val[1]), 0x18uLL));
    v103.val[3] = vorrq_s8( vorrq_s8(v69, v79),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v103.val[0].i8), 0x18uLL));
    v103.val[0] = vorrq_s8( vorrq_s8(v70, _Q21),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v103.val[0]), 0x18uLL));
    a37 = vaddq_s32( vsubq_s32( (int32x4_t)v103.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v103.val[3], (int32x4_t)v103.val[3]), (int8x16_t)v49)),  (int32x4_t)v50);
    a38 = vaddq_s32( vsubq_s32( (int32x4_t)v103.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v103.val[0], (int32x4_t)v103.val[0]), (int8x16_t)v49)),  (int32x4_t)v50);
    a35 = vaddq_s32( vsubq_s32( (int32x4_t)v103.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v103.val[2], (int32x4_t)v103.val[2]), (int8x16_t)v49)),  (int32x4_t)v50);
    a36 = vaddq_s32( vsubq_s32( (int32x4_t)v103.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v103.val[1], (int32x4_t)v103.val[1]), (int8x16_t)v49)),  (int32x4_t)v50);
    return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t, void, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 8LL * ((2 * (a29 + 1 != v42)) ^ 0x35C)) - 8LL))( byte_1012DDB40,  860LL,  v52,  -(byte_1012DDB40[a29 + v45] - 119),  1303395975LL,  2065284721LL,  v57,  v54,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  v99,  __PAIR64__(v54, v55),  __PAIR64__(v57, v56),  v47,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34);
  }

  else
  {
    *(_DWORD *)(v46 - 1sub_10000AE14(v1 - 80) = 2 * (v55 ^ v44) + v44 - (v41 & (4 * (v55 ^ v44)));
    *(_DWORD *)(v46 - 176) = 2 * (v54 ^ v44) + v44 - (v41 & (4 * (v54 ^ v44)));
    *(_DWORD *)(v46 - 172) = 2 * (v56 ^ v44) + v44 - (v41 & (4 * (v56 ^ v44)));
    *(_DWORD *)(v46 - 168) = 2 * (v57 ^ v44) + v44 - (v41 & (4 * (v57 ^ v44)));
    a31 = 0LL;
    return v47(v49, v50, v51, v53);
  }

uint64_t sub_100194B18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, uint64_t a22, unsigned int a23, unsigned int a24)
{
  if (a24 < a23 != a21 + 1716752696 < ((v24 + 1303396432) ^ 0x741A3824u)) {
    BOOL v26 = a21 + 1716752696 < ((v24 + 1303396432) ^ 0x741A3824u);
  }
  else {
    BOOL v26 = a21 + 1716752696 > a24;
  }
  return (*(uint64_t (**)(void))(v25 + 8LL * ((1311 * !v26) ^ (v24 + 1303396151))))();
}

uint64_t sub_100194BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8
                                                     + 8LL
                                                     * (int)(((((v6 + 8) ^ (a5 - 152)) + v5 < v5 + a5)
                                                            * ((v6 - 1102064172) & 0xF3FFE9DB ^ (v7 + 8))) | v6)))( 88LL,  1298LL);
}

uint64_t sub_100194C00( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(void))(v22
                              + 8LL
}

uint64_t sub_100194C4C@<X0>(int a1@<W3>, int a2@<W4>, int a3@<W8>, int8x16_t a4@<Q2>, int8x16_t a5@<Q3>)
{
  int8x16_t *v6 = vaddq_s8( vsubq_s8( *(int8x16_t *)(v7 + (v5 + a2)),  vandq_s8( vaddq_s8(*(int8x16_t *)(v7 + (v5 + a2)), *(int8x16_t *)(v7 + (v5 + a2))),  a5)),  a4);
  return (*(uint64_t (**)(void))(v8 + 8LL * (a3 + a1 + 230)))();
}

uint64_t sub_100194CA4@<X0>(char a1@<W0>, int a2@<W1>, int a3@<W3>, int a4@<W4>, int a5@<W8>)
{
  char v10 = *(_BYTE *)(v8 + a4 + v5 + ((a5 + a3) | 0x40u) - 88);
  *(_BYTE *)(v7 + v6) = v10 - (a1 & (2 * v10)) + 44;
  return (*(uint64_t (**)(void))(v9 + 8LL * (((v6 != 63) * a2) ^ (a5 + a3 + 252))))();
}

uint64_t sub_100194CF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  BOOL v22 = v19 - 947801381 < (a19 - 1227562441);
  return ((uint64_t (*)(void))(*(void *)(v21 + 8LL * ((112 * v22) ^ v20)) - 4LL))();
}

uint64_t sub_100194D68( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v22 = 628203409 * ((~((v21 - 152) | 0xCDC17F34) + ((v21 - 152) & 0xCDC17F34)) ^ 0xB0B68CF8);
  int v26 = (a2 ^ (v19 + 27)) - v19;
  *(_DWORD *)(v21 - 144) = v22 + a2 + 592;
  *(_DWORD *)(v21 - 140) = a19 - v22 - 407731758;
  *(void *)(v21 - 1++*(_DWORD *)(v3 + 52) = a15;
  uint64_t v23 = sub_1001797A4(v21 - 152);
  uint64_t v24 = *(_DWORD *)(v21 - 184) & 0x3F;
  *(_BYTE *)(v21 - 252 + (v24 ^ 0x2B)) = -84;
  return ((uint64_t (*)(uint64_t))(*(void *)(v20
}

uint64_t sub_100194E60()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((v1 - 1303592576) | 0x30011) + 1303395975 + ((v1 + 129) | 0x50A) - 1384)
                                          * (v0 == 63)) ^ (v1 + 787)))
                            - 12LL))();
}

uint64_t sub_100194EB8()
{
  BOOL v4 = ((((v1 - 1419) | 0x234) - 544) ^ v0) >= (((v1 - 1337017339) | 0x2010001) ^ (v2 + 8));
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((4 * v4) | (16 * v4)) ^ v1)) - 12LL))();
}

uint64_t sub_100194F0C()
{
  *(void *)(v4 - 252 + v0 + 1) = 0x2C2C2C2C2C2C2C2CLL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((124 * ((v1 & 0x38) == 8LL)) ^ v2))
}

uint64_t sub_100194F54(double a1)
{
  *uint64_t v3 = a1;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((124 * (v4 == 0)) ^ v2)) - v1 + 800))();
}

uint64_t sub_100194F80(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (v1 ^ (1699 * (v3 != v2))))
                            + 2991571333LL
                            - ((v1 - a1 - 302859025) | 0x120D4001u)))();
}

void sub_100194FCC()
{
}

uint64_t sub_100194FDC@<X0>(int a1@<W0>, int a2@<W4>, int a3@<W8>)
{
  *(_BYTE *)(v10 - 252 + (a3 + v5)) = *(_BYTE *)(v7 + (v3 + a2))
  unsigned int v11 = v3 + 1 + a1;
  int v12 = (v4 < v6) ^ (v11 < v6);
  BOOL v13 = v11 < v4;
  if (v12) {
    BOOL v13 = v4 < v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((112 * v13) ^ v8)) - 4LL))();
}

uint64_t sub_10019505C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((114 * ((v1 + 1303397644 + a1 - 1567199949) > 0x37)) ^ (v1 + 1303396388))))();
}

uint64_t sub_10019509C@<X0>(int a1@<W0>, unsigned int a2@<W8>)
{
  uint64_t v4 = a2;
  unint64_t v5 = a2 - 1567198255LL;
  if (v5 <= 0x38) {
    unint64_t v5 = 56LL;
  }
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (int)((((v2 - a1 - 1071220769) & 0x8D89C72A ^ 0x68B) * (v5 - v4 + 1567198256 > 7)) ^ v2)))();
}

uint64_t sub_10019510C()
{
  *(void *)(v2 - 1567198255 + v4 - 252 + (v1 - 1370) - 455) = 0x2C2C2C2C2C2C2C2CLL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((26 * ((v0 & 0xFFFFFFFFFFFFFFF8LL) == 8)) ^ v1)) - 8LL))();
}

uint64_t sub_100195164(double a1)
{
  *uint64_t v2 = a1;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((v4 == 0) * v3) ^ v1)) - 8LL))();
}

uint64_t sub_100195188(int a1)
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
}

void sub_1001951E0()
{
  int v2 = *(unsigned __int8 *)(v1 - 156) ^ 0xF3;
  if (v2 == 1)
  {
    char v3 = v0 ^ (v0 - 84);
    char v6 = 88;
    unsigned int v9 = *(_DWORD *)(v1 - 188);
    unsigned int v8 = *(_DWORD *)(v1 - 184);
    *(_BYTE *)(v1 - 196) = v3 + ((8 * v8) ^ 0x58) + (~(2 * ((8 * v8) ^ 0x58)) | 0xAF) - 127;
    *(_BYTE *)(v1 - 195) = ((v8 >> 5) ^ 0xBD) - ((2 * ((v8 >> 5) ^ 0xBD)) & 0x58) + 44;
    *(_BYTE *)(v1 - 194) = ((v8 >> 13) ^ 0x12) + (~(v8 >> 12) | 0xA7) + 45;
    *(_BYTE *)(v1 - 193) = ((v8 >> 21) ^ 0x10) + (~(v8 >> 20) | 0xA7) + 45;
    HIDWORD(v10) = v9 ^ 0x1B;
    LODWORD(v10) = v8 ^ 0xA0000000;
    *(_BYTE *)(v1 - 192) = (v10 >> 29) - ((2 * (v10 >> 29)) & 0x58) + 44;
    *(_BYTE *)(v1 - 191) = ((v9 >> 5) ^ 0xE8) - 2 * (((v9 >> 5) ^ 0xE8) & 0x2E ^ (v9 >> 5) & 2) + 44;
    *(_BYTE *)(v1 - 190) = ((v9 >> 13) ^ 0xCF) - ((2 * ((v9 >> 13) ^ 0xCF)) & 0x58) + 44;
    unsigned int v7 = (v9 >> 21) ^ 0xFFFFFF94;
  }

  else
  {
    if (v2 != 2) {
      goto LABEL_6;
    }
    char v3 = 7 * (v0 ^ (v0 - 44));
    unsigned int v4 = *(_DWORD *)(v1 - 188);
    unsigned int v7 = *(_DWORD *)(v1 - 184);
    *(_BYTE *)(v1 - 196) = v3 + ((v4 >> 21) ^ 0x94) - 2 * (((v4 >> 21) ^ 0x94) & 0x2F ^ (v4 >> 21) & 3) + 0x80;
    *(_BYTE *)(v1 - 195) = ((v4 >> 13) ^ 0xCF) - ((2 * ((v4 >> 13) ^ 0xCF)) & 0x58) + 44;
    *(_BYTE *)(v1 - 194) = ((v4 >> 5) ^ 0xE8) + ~(2 * (((v4 >> 5) ^ 0xFFFFFFE8) & 0x2F ^ (v4 >> 5) & 3)) + 45;
    HIDWORD(v5) = v4 ^ 0x1B;
    LODWORD(v5) = v7 ^ 0xA0000000;
    *(_BYTE *)(v1 - 193) = (v5 >> 29) - ((2 * (v5 >> 29)) & 0x58) + 44;
    *(_BYTE *)(v1 - 192) = ((v7 >> 21) ^ 0x10) - ((v7 >> 20) & 0x58) + 44;
    *(_BYTE *)(v1 - 191) = ((v7 >> 13) ^ 0x12) - ((v7 >> 12) & 0x58) + 44;
    *(_BYTE *)(v1 - 190) = ((v7 >> 5) ^ 0xBD) - ((2 * ((v7 >> 5) ^ 0xBD)) & 0x58) + 44;
    char v6 = 80;
    LOBYTE(v7) = (8 * v7) ^ 0x58;
  }

  *(_BYTE *)(v1 - 189) = ((v0 + v3 + 84) ^ 0xBD) + v7 - (v6 & (2 * v7));
LABEL_6:
  JUMPOUT(0x100193FE0LL);
}

uint64_t sub_1001956C4@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  unsigned int v7 = *(_DWORD *)(v6 - 252 + ((v4 + a2) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a1 + (v4 + a2 + 1)) = (BYTE2(v7) ^ 0xE6) - ((2 * (BYTE2(v7) ^ 0xE6)) & 0x58) + 44;
  *(_BYTE *)(a1 + (v4 + a2 + 2)) = (BYTE1(v7) ^ 0x41) - ((v7 >> 7) & 0x58) + 44;
  *(_BYTE *)(a1 + (v4 + a2)) = (HIBYTE(v7) ^ 0x84)
                                           - (((HIBYTE(v7) ^ 0xFFFFFF84) & 0x2D ^ HIBYTE(v7) & 1) << (((v3 - 118) ^ 0x90) & 0xB7))
                                           + 44;
  *(_BYTE *)(a1 + (v4 + a2 + 3)) = v7 ^ 0xA2;
  unsigned int v8 = *(_DWORD *)(v6 - 160) + 31723343;
  BOOL v9 = v8 < v2;
  BOOL v10 = v4 + 649959231 < v8;
  if (v4 + 649959231 < v2 != v9) {
    BOOL v11 = v9;
  }
  else {
    BOOL v11 = v10;
  }
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (v3 + 16 * v11)) - 8LL))();
}

void sub_10019588C()
{
}

uint64_t sub_100195894( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
  *(_DWORD *)(&a35 + a31) = 1917787284;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 8LL * ((v35 - 410) | 0xC1)) - 4LL))( 1917787284LL,  89778891LL,  4881474LL,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26);
}

uint64_t sub_100195954(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_1001959B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, int a33)
{
  int v36 = a6 + v33 + 621;
  unsigned int v37 = ((((a6 + v33 + 8) | 0x81) + 229) ^ 0xD8FBB181) + v35;
  BOOL v38 = a33 - 1873714420 < v37;
  return (*(uint64_t (**)(void))(v34 + 8LL * (((8 * v38) | (16 * v38)) ^ v36)))();
}

uint64_t sub_100195BB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v20 = 628203409 * ((v19 + 2099313430 - 2 * ((v19 - 152) & 0x7D20FBAE)) ^ 0xFFA8F79D);
  *(_DWORD *)(v19 - 136) = v15 - v20 + 1278;
  *(_DWORD *)(v19 - 132) = v18 - v20 + (((v15 ^ (v13 - 378)) - 2013844737) ^ (v15 + 315));
  *(void *)(v19 - 1++*(_DWORD *)(v3 + 52) = a12;
  *(void *)(v19 - 144) = a10;
  *(void *)(v19 - 128) = a13;
  *(void *)(v19 - 112) = v14;
  *(void *)(v19 - 104) = a11;
  ((void (*)(uint64_t))*(&off_101826020 + v15 - 286))(v19 - 152);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17
                                                              + 8LL * ((1770 * (*(_DWORD *)(v19 - 120) == v16)) ^ v15)))( 1917787284LL,  89778891LL,  4881474LL);
}

uint64_t sub_100195CA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8LL * (int)(((*(_DWORD *)(v12 + 48LL * (v10 + v8)) != 271613653) * ((v9 + 1588057822) & 0xA15827E6 ^ 0x1A5)) ^ v9)) - 12LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

uint64_t sub_100195D04@<X0>(int a1@<W5>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * ((536 * ((a2 ^ 0xEE226DAC ^ (v2 - a1 - 366)) == v3 - 288390869)) | v2)))();
}

uint64_t sub_100195D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * ((27
                                          * ((v7 & 0xFFFFFFFFFFFFFFFuLL) - 1 < (unint64_t)((a6 + v6 + 181) ^ 0x19u)
                                                                             - 210)) ^ (a6 + v6 + 1929)))
                            - 12LL))();
}

uint64_t sub_100195D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                                          + 8LL
                                                                                          * ((25
                                                                                            * (((*v5 - 1917787284 < (v3 - 189)) ^ v3) & 1)) ^ v3))
                                                                              - 4LL))( a1,  a2,  a3,  2210763809LL,  2991571333LL);
}

uint64_t sub_100195DE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, int a33)
{
  uint64_t v43 = &v42[6 * v35];
  v43[2] = v39;
  v43[3] = v36;
  *((void *)v43 + 2) = v37;
  v43[6] = a33;
  *uint64_t v42 = v34 + 1;
  return ((uint64_t (*)(void))(*(void *)(v40
                                        + 8LL
                                        * ((857
                                          * (*(_DWORD *)(v41 + 48LL * v38 + 32) + 2057704756 < ((v33 - 76) | 0x20)
                                                                                             + ((v33 - 2113847373) | 0x304E8111u)
                                                                                             - 844087855)) ^ (v33 + 7)))
                            - 4LL))();
}

uint64_t sub_100195E7C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 8LL * (int)(((v26 + (((a9 - 1) | 0x10A) ^ 0x17B) != 2084229328) * (a6 + (((a9 - 1) | 0x10A) ^ (v25 - 342)) + 1145)) ^ ((a9 - 1) | 0x10A))) - 12LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25);
}

uint64_t sub_1001960D8(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v11 = v7 == a2 && *v9 == a1 + a6 + ((v6 - 1291848958) & 0xFF4FCDBD) + 1318 - 1342;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((v11 | (4 * v11)) ^ v6)) - 4LL))();
}

void sub_10019612C()
{
}

uint64_t sub_100196150()
{
  return v0 ^ v1;
}

void sub_100196198(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1224239923 * ((a1 & 0x9A8552A9 | ~(a1 | 0x9A8552A9)) ^ 0x97C95081);
  __asm { BR              X10 }

uint64_t sub_100196250()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (int)(((((v0 - 1416) ^ 0x5EE) + ((v0 + 924016966) & 0xC8EC9EB9) - 2932)
                                               * (v2 == 0)) ^ (v0 - 1416)))
                            - 12LL))();
}

uint64_t sub_1001962A4@<X0>(uint64_t (*a1)(_DWORD *)@<X8>)
{
  unsigned int v4 = 3804331 * ((2 * (v6 & 0x2B756E88) - v6 - 729116298) ^ 0xAA5FB480);
  unsigned int v9 = v4 - 1465113146;
  uint64_t v7 = 0x48247A308694277ELL;
  uint64_t v8 = v3;
  v6[0] = v4 + 282547551;
  v6[1] = v4 + v1 - 1281;
  uint64_t result = a1(v6);
  *uint64_t v2 = *(_DWORD *)(v3 - 0x27E11828102FB971LL);
  return result;
}

void sub_1001968A0()
{
  v0[1] = 108757529 * ((v0 & 0xA7DA3C6 | ~(v0 | 0xA7DA3C6)) ^ 0x151E3E12) - 504207030;
  sub_1001A63A8(v0);
  __asm { BR              X8 }

uint64_t sub_100196974( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, unsigned int a19, int a20)
{
  unsigned int v23 = 1759421093 * ((((2 * &a17) | 0x27E0DDBE) - &a17 - 334524127) ^ 0xA08DDE8B);
  LODWORD(a17) = v23 ^ 0x3B0DE444;
  HIDWORD(a17) = v23 ^ 0x1CA2E939;
  a20 = v23 ^ 0x5C802CB3;
  a18 = v23 + 382;
  ((void (*)(unint64_t **))(*(void *)(v22 + 576) - 8LL))(&a17);
  LODWORD(va_start(va, a9) = a19;
  a19 = 854 - 460628867 * ((2 * (&a17 & 0x6D5E5A90) - &a17 - 1834900113) ^ 0xDE372712);
  a17 = &STACK[0x49EB7E5E2EA5C90D];
  sub_10017F1A8((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 8LL * ((218 * (a18 == (v20 ^ 0x4620972C) + 907688591)) ^ v20)) - 4LL))( v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  a9,  a10);
}

uint64_t sub_100196AA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20, unsigned int a21, uint64_t a22)
{
  unsigned int v27 = 1178560073 * ((&a18 & 0xF7FDE8F6 | ~(&a18 | 0xF7FDE8F6)) ^ 0xB2966F6B);
  a19 = v27 + 804878199 * v24 + 1740498123;
  a20 = a14;
  a21 = v27 ^ 0x3E5;
  (*(void (**)(int *))(v26 + 928))(&a18);
  unsigned int v28 = 1178560073 * ((2 * (&a18 & 0x2A659790) - &a18 + 1436182632) ^ 0xEF0E100A);
  a22 = v22;
  a20 = a14;
  a21 = v28 ^ ((v23 ^ 0x4FFFFFE5) - 13115937 + ((2 * v23) & 0x9FFFFFCA));
  a19 = v28 + 292;
  uint64_t v29 = *(void (**)(int *))(v26 + 448);
  v29(&a18);
  unsigned int v30 = 1178560073
      * (((&a18 | 0xF00BCE5A) - &a18 + (&a18 & 0xFF431A0)) ^ 0x4A9FB638);
  a22 = a12;
  a20 = a14;
  a19 = v30 + 292;
  a21 = v30 ^ ((a11 ^ 0xFF37FDCD) + 1342169079 + ((2 * a11) & 0xFE6FFB9A));
  uint64_t v31 = ((uint64_t (*)(int *))v29)(&a18);
  return (*(uint64_t (**)(uint64_t))(v25 + 8LL * ((1643 * (a18 == 2084229119)) ^ 0xAEu)))(v31);
}

uint64_t sub_100196C70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, uint64_t a18, unsigned int a19, unsigned int a20, unsigned int a21, int a22)
{
  else {
    int v25 = 274310066;
  }
  unsigned int v26 = 460628867 * (&a17 ^ 0x4C96827D);
  a19 = v26 - 21481792;
  a20 = v26 + v24 - 2024873257;
  a17 = &STACK[0x27D4077E41C0C6B8];
  a18 = a13;
  a21 = v25 - v26;
  uint64_t v27 = sub_1001A677C((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8LL
                                            * (((a22 == v22 + v24 + 670 - 844) * (((v24 + 362) | 0x44) ^ 0x6D8)) ^ v24)))(v27);
}

uint64_t sub_100196D48()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (v2 ^ (1563 * (v0 < v1))))
                            - (((_WORD)v2 - 14688) & 0x7FF)
                            + 480LL))();
}

uint64_t sub_100196DD4@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, unsigned int a11, char *a12, _BYTE *a13, uint64_t a14, unsigned int a15)
{
  a11 = (v16 - 442) ^ (((2 * (&a11 & 0x4D616598) - &a11 - 1298228633) ^ 0xDF6A826E) * v15);
  unsigned int v23 = (v16 + 1987476659) & 0x81EC;
  a12 = &a10 + a1;
  a13 = a5;
  v20(&a11);
  a15 = (v23 - 91) ^ (1225351577 * ((&a11 & 0xCCC3A33D | ~(&a11 | 0xCCC3A33D)) ^ 0x10A684D4));
  a13 = v22;
  a14 = v18;
  a12 = a5;
  ((void (*)(unsigned int *))(*(void *)(v21 + 8LL * (v23 ^ 0x1E7)) - 12LL))(&a11);
  a12 = v17;
  a13 = a5;
  a11 = (v23 - 90) ^ (((&a11 & 0x960CB73F | ~(&a11 | 0x960CB73F)) ^ 0x40750C9) * v15);
  v20(&a11);
  a12 = a5;
  a11 = (v23 - 79) ^ (1755732067 * (&a11 ^ 0xDEC6BDDB));
  uint64_t v24 = sub_10017A8B8((uint64_t)&a11);
}

uint64_t sub_100196F6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  return ((uint64_t (*)(void))(*(void *)(v18 + 8LL * (((v17 + 38 * (v16 ^ 0x1C3) - 77) * (a15 == v15)) ^ v16)) - 4LL))();
}

uint64_t sub_100196FA4@<X0>( int a1@<W8>, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
}

uint64_t sub_100196FE8@<X0>(int a1@<W8>)
{
  unsigned int v3 = v1 - ((((a1 - 1742) | 0x82) ^ 0xF6B3A1FE) & (2 * v1)) + 2069483688;
  int v4 = ((2 * v3) & 0xFD73EF18 ^ 0xF433A110) + (v3 ^ 0x85E02724) + 905968768 != 884601868;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((v4 | (v4 << 6)) ^ (a1 - 1517))))();
}

uint64_t sub_100197074(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((15
                                          * (a1
                                           + v2
                                           + ((v1 - 680724756) & 0x6EB39D76 ^ (v1 - 1545886668) & 0x5C245FBF ^ 0x47669805u) < 8)) ^ (v1 + 773)))
                            - 8LL))();
}

uint64_t sub_1001970F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return ((uint64_t (*)(void))(*(void *)(v13
                                        + 8LL
}

uint64_t sub_10019712C(uint64_t a1, int a2)
{
}

uint64_t sub_100197178( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v17 = a1 + v15 + 21366899;
  uint64_t v18 = v12 + v17;
  __int128 v19 = *(_OWORD *)(v18 - 31);
  uint64_t v20 = a11 + v17;
  *(_OWORD *)(v20 - 15) = *(_OWORD *)(v18 - 15);
  *(_OWORD *)(v20 - 31) = v19;
}

void sub_1001971E8()
{
}

uint64_t sub_1001971F4()
{
}

uint64_t sub_10019722C()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (int)(((((v2 + 1109430725) | 0x4000030) + v0 + ((v2 + 1488764029) & 0xA743470F))
                                               * ((v1 & 0x18) == 0)) ^ v2))
                            - 4LL))();
}

uint64_t sub_100197284( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = v13 - v15 + ((a2 - 1531) ^ v12);
  *(void *)(a11 - 7 + v17) = *(void *)(v11 - 7 + v17);
  return ((uint64_t (*)(void))(*(void *)(v16 + 8LL
                                              * ((440 * ((((a2 - 88) ^ 0xFFFFF948) & v14) - v15 != 8)) ^ (a2 - 88)))
                            - 12LL))();
}

uint64_t sub_1001972E8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  *(void *)(a2 + (v5 + a5 + a3)) = *(void *)(a1 + (v5 + a5 + a3));
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (((v7 + a5 != 8) * a4) ^ v6)) - 12LL))();
}

uint64_t sub_10019731C()
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (((((v0 == v2) ^ (v1 + 52)) & 1) * (((v1 - 133) | 0x26) ^ 0xFF)) ^ v1)))();
}

uint64_t sub_100197370@<X0>(int a1@<W6>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)(a5 + ((58 * (v9 ^ (a1 + 1282))) ^ (v7 + 95)) + v8) = *(_BYTE *)(v6
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((11 * (v8 - 1 == a2)) ^ (v5 + v9 + 2117))) - 4LL))();
}

uint64_t sub_1001973C4()
{
  unsigned int v7 = v0 + 535753261 * (v6 ^ 0xAF40E2F) + 1157;
  uint64_t v8 = v4;
  v3(v6);
  unsigned int v7 = v0
     + 430
  uint64_t v8 = v5;
  v3(v6);
  return v1 ^ 0x7C3ACFFFu;
}

void sub_1001974A8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1374699841 * ((a1 + 2125213654 - 2 * (a1 & 0x7EAC2FD6)) ^ 0x135837DF);
  int v2 = *(unint64_t **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unint64_t **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(v3 - 0x19A1466F6B33264LL);
  unsigned int v11 = v1 + 1224239923 * (((&v7 | 0xAEE383C9) - (&v7 & 0xAEE383C9)) ^ 0x5C507E1E) - 517;
  uint64_t v7 = v3;
  uint64_t v8 = v4;
  int v9 = &STACK[0x1F589EA4AC42BE09];
  uint64_t v10 = v5;
  ((void (*)(uint64_t *))*(&off_101826020 + v1 - 1141))(&v7);
  uint64_t v6 = *(void *)(v3 - 0x19A1466F6B3326CLL);
  LODWORD(v9) = v1
  uint64_t v7 = v6;
  uint64_t v8 = &STACK[0x1F589EA4AC42BE19];
  sub_1001798B4((uint64_t)&v7);
  uint64_t v8 = v2;
  LODWORD(v7) = v1
              + 235795823
  sub_100163DB4((uint64_t)&v7);
  __asm { BR              X8 }

uint64_t sub_1001976DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t), uint64_t a11)
{
  *(void *)(v18 - 104) = v13;
  *(void *)(v18 - 144) = v14;
  *(void *)(v18 - 136) = a11;
  *(_DWORD *)(v18 - 112) = v16
                         + 1224239923 * (((~(v18 - 144) & 0x674EBBD0) - (~(v18 - 144) | 0x674EBBD1)) ^ 0x95FD4606)
                         - 434;
  int v19 = (v16 - 958) | 0x411;
  *(void *)(v18 - 128) = v13;
  *(void *)(v18 - 120) = v15;
  uint64_t v20 = a10(v18 - 144);
  BOOL v21 = v11 + v17 + 1232 < (v19 ^ 0x7FFFFB2Eu);
  return ((uint64_t (*)(uint64_t))(*(void *)(v12 + 8LL * ((v21 | (4 * v21)) ^ v19)) - 8LL))(v20);
}

uint64_t sub_100197780( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(v19 - 144) = (v17 - 469) ^ (1225351577
                                        * ((~((v19 - 144) | 0x95A6E94B) + ((v19 - 144) & 0x95A6E94B)) ^ 0x49C3CEA2));
  *(void *)(v19 - 120) = v14;
  *(void *)(v19 - 112) = v15;
  *(void *)(v19 - 136) = v16;
  *(void *)(v19 - 128) = v14;
  ((void (*)(uint64_t))((char *)*(&off_101826020 + (v17 ^ 0x4F7)) - 4))(v19 - 144);
  int v20 = 1374699841 * ((v19 + 730915874 - 2 * ((v19 - 144) & 0x2B90E4B2)) ^ 0x4664FCBB);
  *(_DWORD *)(v19 - 128) = v12 - v20 + v17 + 83 + v18;
  *(void *)(v19 - 136) = a12;
  *(_DWORD *)(v19 - 144) = (v17 - 943) ^ v20;
  uint64_t v21 = sub_100165354(v19 - 144);
  return (*(uint64_t (**)(uint64_t))(v13 + 8LL * ((248 * (*(_DWORD *)(v19 - 140) != 1339815632)) ^ v17)))(v21);
}

uint64_t sub_100197880()
{
  BOOL v4 = v0 + v3 + 1232 < (v2 ^ 0x7FFFFB2Eu);
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((v4 | (4 * v4)) ^ v2)) - 8LL))();
}

uint64_t sub_1001978BC()
{
  uint64_t v5 = *(void *)(v8 + 24);
  int v6 = 1224239923 * ((((v4 - 144) | 0x8E15D0D9) - (v4 - 144) + ((v4 - 144) & 0x71EA2F20)) ^ 0x7CA62D0E);
  *(_DWORD *)(v4 - 144) = v6 ^ 0x5098936A;
  *(_DWORD *)(v4 - 128) = v6 + v2 - 846;
  *(void *)(v4 - 136) = v10;
  sub_1001646D4((_DWORD *)(v4 - 144));
  *(_DWORD *)(v4 - 112) = v2 + 1224239923 * (((v4 - 144) & 0x62925DD | ~((v4 - 144) | 0x62925DD)) ^ 0xB6527F5) - 517;
  *(void *)(v4 - 104) = v0;
  *(void *)(v4 - 128) = v0;
  *(void *)(v4 - 120) = v3;
  *(void *)(v4 - 144) = v1;
  *(void *)(v4 - 136) = v10;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 128) = v2
                        + 1374699841 * ((2 * ((v4 - 144) & 0x4C9CEF60) - (v4 - 144) - 1285353317) ^ 0xDE970892)
                        - 798;
  *(void *)(v4 - 144) = v0;
  *(void *)(v4 - 136) = v5;
  return sub_1001798B4(v4 - 144);
}

void sub_100197A00(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) + 108757529 * (((a1 | 0xFA9FB8B3) - (a1 & 0xFA9FB8B3)) ^ 0x1A03DA98);
  __asm { BR              X9 }

uint64_t sub_100197AE0@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  unsigned int v12 = 1755732067
      * (((&a4 | 0xA1ED4A11) - &a4 + (&a4 & 0x5E12B5E8)) ^ 0x7F2BF7CA);
  a6 = (v11 + 111) ^ v12;
  a8 = v12 ^ 0x15A025D5;
  a4 = &STACK[0x3F8123127DDA1A64];
  a5 = v10;
  a7 = &STACK[0x708F6A420CBDE163];
  uint64_t v13 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (v11 + 106)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v9
                                            + 8LL
                                            * (((*(_DWORD *)(v10 - 0x27E11828102FB971LL) == v8)
                                              * ((v11 + 731) ^ 0x698 ^ ((v11 + 145) | 0x428))) ^ v11)))(v13);
}

uint64_t sub_100197BCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(void))(v12
                              + 8LL
                              * ((((a11 ^ (v11 - 1082) ^ ((v13 ^ 0x48Du) + 661)) > 0x14) * ((2 * (v13 ^ 0x48D)) ^ 0x332)) ^ v13)))();
}

void sub_100197C08(_DWORD *a1@<X8>)
{
  *a1 = v2 + 164;
  *int v1 = *a1;
}

void sub_100198018(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10019807C()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((11 * (v1 != 510884208)) ^ 0x443u)) - 8LL))();
}

uint64_t sub_1001980A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = (__PAIR64__(v3, **(unsigned __int8 **)(a2 + 8)) - 1) >> 32;
  *(_DWORD *)(*(void *)(a1 + 96) + 80sub_1000EC398((uint64_t)va, 0LL) = 1587865124;
  *(_DWORD *)(*(void *)(a1 + 96) + 804LL) = 1966800080;
  *(void *)(*(void *)(a1 + 96) + 808LL) = *(void *)(a1 + 96) + 816LL;
  uint64_t v5 = *(void *)(a1 + 96) + 0x1F589EA4AC42C109LL;
  uint64_t v6 = *(void *)(a2 + 8) + (*(_DWORD *)(a2 + 4) - v4);
  unsigned int v7 = 1178560073
     * (((&v9 | 0x33FBA1D0) - &v9 + (&v9 & 0xCC045E28)) ^ 0x896FD9B2);
  unsigned int v13 = v7 + v4 + 400211714;
  uint64_t v10 = v6;
  uint64_t v11 = v5;
  unsigned int v9 = v7 + 558;
  ((void (*)(unsigned int *))(*(void *)(a3 + 296) - 4LL))(&v9);
  return v12 ^ 0x1114442Bu;
}

void sub_1001981E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }

uint64_t sub_100198260(uint64_t a1, int a2)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  int v4 = v3;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((16 * v4) | 0x28Au)))();
}

uint64_t sub_100198298( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  a14 = 108757529 * ((&a13 & 0x2A42C21B | ~(&a13 | 0x2A42C21B)) ^ 0x35215FCF) - 504207030;
  uint64_t v15 = sub_1001A63A8(&a13);
  return (*(uint64_t (**)(uint64_t))(v14 + 8LL * ((1718 * (a13 == 2084229119)) ^ 0x29Au)))(v15);
}

uint64_t sub_100198334( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, int a14, unsigned int a15)
{
  a13 = &STACK[0x49EB7E5E2EA5C905];
  a15 = v17 - 460628867 * (((&a13 | 0xE74F0FCA) - (&a13 & 0xE74F0FCA)) ^ 0xABD98DB7) + 188;
  sub_10017F1A8((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16
                                                                                         + 8LL
                                                                                         * ((81
                                                                                           * (a14 == v15 + v17 + v17 + 844 - 2176)) ^ v17)))( v18,  v19,  v20,  v21,  v22,  v23);
}

uint64_t sub_1001983C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, unsigned int a16, uint64_t a17)
{
  unsigned int v23 = 1178560073 * (((&a13 | 0xBA707601) + (~&a13 | 0x458F89FE)) ^ 0xE40E62);
  a16 = (((2 * v18) & 0xBF6FFBAE) + 1870651373 + ((((v22 - 1567712071) & 0x1FFA) - 541590723) ^ v18)) ^ v23;
  a14 = v23 + v22 - 1218;
  a17 = v17;
  a15 = a12;
  uint64_t v24 = (*(uint64_t (**)(int *))(v20 + 8LL * (v22 ^ 0x5DEu)))(&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21 + 8LL * (v22 ^ (8 * (a13 == v19)))) - 4LL))(v24);
}

uint64_t sub_10019849C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unsigned int a15, unsigned int a16, unsigned int a17, int a18)
{
  unsigned int v21 = 460628867
      * (((&a13 | 0xAC92F452) - &a13 + (&a13 & 0x536D0BA8)) ^ 0xE004762F);
  a13 = &STACK[0x27D4077E41C0C6A8];
  a14 = a12;
  a15 = v21 - 1921313249;
  a16 = v21 + v20 - 2024874593;
  a17 = 274310066 - v21;
  uint64_t v22 = sub_1001A677C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (((a18 == ((v20 + 845365685) & 0xAFE ^ (v18 - 666)))
                                                        * (((v20 - 452) | 0x194) - 760)) ^ v20))
                                          - 4LL))(v22);
}

uint64_t sub_10019857C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, unsigned int a14, unint64_t *a15, uint64_t a16)
{
  a14 = (v16 - 1060) ^ (1374699841
                      * (((&a14 | 0xB23EA5EF) + (~&a14 | 0x4DC15A10)) ^ 0xDFCABDE7));
  a15 = &STACK[0x18E41690234F4F59];
  a16 = a10;
  uint64_t v20 = (*(uint64_t (**)(unsigned int *))(v18 + 8LL * (int)(v16 & 0xA18D98B7)))(&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19 + 8LL * (((a12 == v17) * (v16 - 1363)) ^ v16)) - 8LL))(v20);
}

uint64_t sub_100198624()
{
  uint64_t v13 = v7;
  uint64_t v14 = 0x335F4D7B17DD4E17LL;
  unsigned int v15 = v3
      - 108757529 * ((&v10 & 0x46C0678E | ~(&v10 | 0x46C0678E)) ^ 0x59A3FA5A)
      + v5
      + 842;
  uint64_t v12 = v0;
  (*(void (**)(unsigned int *))(v4 + 8LL * (v3 + v5 + 178)))(&v10);
  uint64_t v12 = v7;
  unsigned int v10 = (v3 + v5 + 413) ^ (1755732067
                         * (((&v10 ^ 0x49B1FB56) & 0xF0AC0744 | ~(&v10 ^ 0x49B1FB56 | 0xF0AC0744)) ^ 0x9824BE36));
  sub_10017A8B8((uint64_t)&v10);
  uint64_t v12 = v7;
  unsigned int v11 = v3
      + v5
  v1(&v10);
  uint64_t v12 = v9;
  unsigned int v11 = 6 * (v5 ^ 0xC35E9C56) + 535753261 * (&v10 ^ 0xAF40E2F) + 665;
  v1(&v10);
  return v8 ^ v2;
}

uint64_t sub_1001987D8(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL);
  int v4 = v1 - 1966800080;
  BOOL v3 = v1 - 1966800080 < 0;
  int v5 = 1966800080 - v1;
  if (!v3) {
    int v5 = v4;
  }
  int v2 = (*(_DWORD *)a1 - 628203409 * (a1 ^ 0x82880C33)) ^ 0x25;
  return (*((uint64_t (**)(void))*(&off_101826020 + (v2 ^ 0x111))
          + ((674
            * (v2 + (v5 ^ 0xB6C56BFB) + ((2 * v5) & 0x6D8AD7F6) + 1539292190 + ((v2 - 29) ^ 0xED7AD7C1) < 36 * (v2 ^ 0x168u) + 2147483323)) ^ v2)
          - 1))();
}

uint64_t sub_1001988E8(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6
                              + 8LL
                              * (((((a4 ^ v6) ^ (*(_DWORD *)(*v7 + 4LL * a5) == a3)) & 1) * v6) ^ a4)))();
}

void sub_10019891C()
{
}

uint64_t sub_100198924(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(_DWORD *)(result + 4) = a7;
  return result;
}

void sub_10019892C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (3804331 * ((2 * (a1 & 0x520CC9FF) - a1 - 1376569856) ^ 0xD32613F6));
  uint64_t v2 = *(void *)a1;
  ((void (*)(char *, void (*)()))*(&off_101826020 + (v1 ^ 0x280)))( (char *)*(&off_101826020 + (v1 ^ 0x20D)) - 12,  sub_1001A5ED4);
  __asm { BR              X10 }

uint64_t sub_1001989EC()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (((*(void *)(*(void *)(v1 + 8LL * (v2 ^ 0x2A1)) - 4LL) == 0LL)
                                          * ((v2 + 306) ^ 0x260)) ^ v2))
                            - 12LL))();
}

  ;
}

uint64_t sub_100198A34@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (a1 ^ 0x301)))(v1);
}

void sub_100198A54(uint64_t a1)
{
  BOOL v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL) != 1966800080
    && *(_DWORD *)(*(void *)(a1 + 16) - 0x1F589EA4AC42BDE5LL) != 1966800080;
  int v1 = *(_DWORD *)a1 - 1225351577 * ((-1557536513 - (a1 | 0xA329E0FF) + (a1 | 0x5CD61F00)) ^ 0x7F4CC716);
  __asm { BR              X12 }

uint64_t sub_100198B68@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * ((443 * (v2 + a1 - 133 >= (((v3 ^ 0x64D) + 706) ^ 0x7FFFFCC4u))) ^ v3))
                            - 4LL))();
}

uint64_t sub_100198BA8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v2 + 8LL * (v4 ^ (464 * (v3 < 1)))) - 8LL))( 1501478978LL,  a2,  v4 ^ 0x4A4u);
}

uint64_t sub_100198C08( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  BOOL v18 = v14 > v17;
  *(_DWORD *)(a12 + 4LL * (v15 + 48 + a1 - 1501479273)) = v13;
  int v19 = a1 + 1741774330;
  uint64_t v20 = (a1 + 1);
  int v21 = v18 ^ (v19 < 1095769659);
  BOOL v22 = v19 < v16;
  if (!v21) {
    BOOL v18 = v22;
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v12 + 8LL * ((497 * !v18) ^ v15)) - 8LL))(v20);
}

uint64_t sub_100198C7C()
{
}

uint64_t sub_100198CB8()
{
}

uint64_t sub_100198D14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return ((uint64_t (*)(void))(*(void *)(v12
                                        + 8LL
                                        * ((662
                                          * (*(_DWORD *)(a12
                                                       + 4LL
}

uint64_t sub_100198D5C()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((((v1 + 734) ^ 0x4AF ^ (v1 - 641262045) & 0x2638E7BB)
}

uint64_t sub_100198DAC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((662
                                          * (*(_DWORD *)(a1
                                                       + 4LL
}

uint64_t sub_100198DF0()
{
  *(_DWORD *)(v2 - 116) = (v1 - 219) ^ (460628867
                                      * ((((v2 - 120) | 0x4AD97D05) - (v2 - 120) + ((v2 - 120) & 0xB52682F8)) ^ 0x64FFF78));
  *(void *)(v2 - 112) = v4;
  sub_10018526C(v2 - 120);
  *(void *)(v2 - 112) = v5;
  *(_DWORD *)(v2 - 116) = (v1 - 219) ^ (460628867
                                      * ((2 * ((v2 - 120) & 0x3DE95DA0) - (v2 - 120) - 1038704038) ^ 0x8E802027));
  sub_10018526C(v2 - 120);
  *(_DWORD *)(v2 - 104) = v1
                        + 1374699841 * ((((v2 - 120) | 0x312B6D0F) - ((v2 - 120) & 0x312B6D0F)) ^ 0x5CDF7506)
                        - 1287;
  *(void *)(v2 - 120) = v0;
  *(void *)(v2 - 112) = v5;
  return sub_1001798B4(v2 - 120);
}

void sub_10019920C(uint64_t a1)
{
  uint64_t v2 = qword_101935C48 - qword_101935BF0 - (void)&v3;
  qword_101935BF0 = 1126174607 * v2 + 0x245AECB3A987CA56LL;
  qword_101935C48 = 1126174607 * (v2 ^ 0x245AECB3A987CA56LL);
  ((void (*)(char *, void (*)()))*(&off_101826020
                                            + ((-113
                                                                             * ((qword_101935C48 + qword_101935BF0) ^ 0x56)) ^ byte_1012D3F60[byte_1012DFD40[(-113 * ((qword_101935C48 + qword_101935BF0) ^ 0x56))] ^ 0xAF])
                                            + 13))( (char *)*(&off_101826020 + ((-113 * ((qword_101935C48 - qword_101935BF0) ^ 0x56)) ^ byte_1012DFE40[byte_1012DBAA0[(-113 * ((qword_101935C48 - qword_101935BF0) ^ 0x56))] ^ 0x59])
            - 130)
  - 12,
    sub_1001A5ED4);
  __asm { BR              X11 }

uint64_t sub_10019932C()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((306 * (*(void *)(*(void *)(v2 + 1544) - 4LL) == 0LL)) ^ v0)))();
}

  ;
}

uint64_t sub_100199374@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (a1 - 782)))(v1);
}

void sub_100199390(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (1225351577
            * ((-1431559688 - (a1 ^ 0x637B64C4 | 0xAAAC21F8) + (a1 ^ 0x637B64C4 | 0x5553DE07)) ^ 0x15B262D5));
  __asm { BR              X15 }

uint64_t sub_1001994BC@<X0>(int a1@<W8>)
{
  int v4 = v1 + a1;
  if (v4 >= 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = -v4;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v2 + 931) ^ (v2 - 298)) * (v5 < 0x83)) ^ v2)) - 8LL))();
}

uint64_t sub_1001994EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, _DWORD *a26)
{
  *a26 = -957603800;
  BOOL v28 = a7 <= 0x54D0F385 && (int)(a7 + 724503674) < 724503675;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 8LL * ((v28 * (v26 + 43)) ^ (v26 - 477)))
                                                            - 8LL))( a1,  1422979973LL,  2871987322LL);
}

void sub_1001995BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + v4) = v3;
}

void sub_10019A1F8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((((2 * a1) | 0xD7F3130A) - a1 + 335967867) ^ 0x516DF1E7));
  __asm { BR              X14 }

uint64_t sub_10019A32C@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v14 = v11 > 0x10343D6A;
  *(_DWORD *)(a9 + 4LL * (v9 + a1)) = *(_DWORD *)(*(void *)(v12 - 0x1F589EA4AC42BDE1LL) + 4LL * (v9 + a1));
  if (v14 == v9 + 1244718163 < -271859051) {
    BOOL v14 = v9 + 1244718163 < (int)(v11 + 1875624597);
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v13 + 8LL * ((v14 * (47 * (v10 ^ 0x259) + 914)) ^ v10)) - 12LL))(4023108245LL);
}

uint64_t sub_10019A3D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v17 = v13 + 1749279240 > 232702026 || v13 + 1749279240 < a13 - 1914781621;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((v17 * ((v14 + 201) ^ 0x408)) ^ v14)) - 12LL))();
}

uint64_t sub_10019A440@<X0>( int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(_DWORD *)(a10 + 4LL * (v10 + a2)) = a1;
  int v16 = (v11 ^ 0x759 ^ (v12 + 1046)) + v10;
  BOOL v18 = v16 > v13 || v16 < v14;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((31 * v18) ^ v11)) - 12LL))();
}

uint64_t sub_10019A488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7
                                                                                          + 8LL
                                                                                          * (((v6 - 1038) * (v5 == 0)) ^ v6))
                                                                              - 227 * (v6 ^ 0x413u)
                                                                              + 904LL))( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_10019A4C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  int v17 = 1374699841 * ((2 * ((v16 - 128) & 0x77A324F0) - (v16 - 128) - 2007180533) ^ 0xE5A8C302);
  *(void *)(v16 - 120) = a14;
  *(_DWORD *)(v16 - 128) = v15 - v17 + 488;
  *(_DWORD *)(v16 - 124) = v17 + ((a13 << 6) & 0xF777DB40) + ((32 * a13) ^ 0x7BBBEDBD) - 319504385;
  sub_1001654CC(v16 - 128);
  return (*(uint64_t (**)(void))(v14 + 8LL * ((1241 * (*a10 - 1966800081 < ((v15 - 796) | 0x85u) + 2147483402)) ^ v15)))();
}

uint64_t sub_10019A59C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v17 - 112) = v15
                         + 1374699841
                         * ((-1520606683 - ((v17 - 128) | 0xA55D6225) + ((v17 - 128) | 0x5AA29DDA)) ^ 0x375685D3)
                         - 473;
  *(void *)(v17 - 128) = a14;
  *(void *)(v17 - 120) = &STACK[0x1F589EA4AC42BE29];
  sub_1001798B4(v17 - 128);
  *(_DWORD *)(v17 - 112) = v15 + ((((v17 - 128) | 0xDD321A35) + (~(v17 - 128) | 0x22CDE5CA)) ^ 0x67A66256) * v16 - 113;
  *(void *)(v17 - 104) = a13;
  *(void *)(v17 - 120) = a14;
  uint64_t v18 = ((uint64_t (*)(uint64_t))*(&off_101826020 + v15 - 843))(v17 - 128);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8LL
                                            * ((43
                                              * (*(_DWORD *)(v17 - 128)
                                               + ((((v15 - 177687949) & 0xA974AB7) - 1520777354) ^ (v15 - 663)) < 0xC32E9F1C)) ^ v15)))(v18);
}

uint64_t sub_10019A6CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  if (v18 + a16 + 1 >= 0) {
    int v19 = v18 + a16 + 1;
  }
  else {
    int v19 = ~(v18 + a16);
  }
  return ((uint64_t (*)(void))(*(void *)(v17
                                        + 8LL
                                        * (int)((999
                                               * (((v19 ^ 0xFDFBFDDF)
                                                 + (v16 ^ 0x773EFE04)
                                                 + ((2 * v19) & 0xFBF7FBBE)
                                                 + v18) >> 31)) ^ v16 ^ 0x504))
                            - (((v16 ^ 0x504) - 841241334) & 0x32244F4F ^ (35 * (v16 ^ 0xF2u)) ^ 0x2B6LL)))();
}

uint64_t sub_10019A788(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * (((*(_DWORD *)(v8 + 4LL * a6) != ((a5 + v9) & a2 ^ (a8 + 571))) * a4) ^ a5))
                            - 8LL))();
}

void sub_10019A7B8()
{
}

uint64_t sub_10019A7C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v21 = 227 * (v17 ^ 0x441);
  int v22 = 1759421093
      * ((~((v20 - 128) ^ 0xEC288126 | 0x638D1C10) + (((v20 - 128) ^ 0xEC288126) & 0x638D1C10)) ^ 0xC327D29D);
  *(_DWORD *)(v20 - 112) = v17 - v22 + 167;
  *(_DWORD *)(v20 - 128) = v14 - v22 + v21 - 586865161;
  *(void *)(v20 - 120) = v19;
  sub_100193848(v20 - 128);
  *(void *)(v20 - 104) = a13;
  *(void *)(v20 - 120) = a14;
  *(_DWORD *)(v20 - 112) = v21 + ((~((v20 - 128) | 0x7B656A90) + ((v20 - 128) & 0x7B656A90)) ^ 0x3E0EED0D) * v18 - 113;
  uint64_t v23 = v16(v20 - 128);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8LL
                                            * (((*(_DWORD *)(v20 - 128) - 1520777354 + 49 * (v21 ^ 0x389u) + 109 < 0xC32E9F1C)
                                              * (((v21 - 902) | 0xB1) ^ 0x9C)) ^ v21)))(v23);
}

uint64_t sub_10019A900()
{
  *(_DWORD *)(v6 - 112) = v0 + (((~(v6 - 128) & 0x5B413A9E) - (~(v6 - 128) | 0x5B413A9F)) ^ 0xE1D542FD) * v4 + 612;
  *(void *)(v6 - 104) = v3;
  *(void *)(v6 - 120) = v5;
  uint64_t v7 = v2(v6 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v1
                                                      + 8LL
                                                      * (((*(_DWORD *)(v6 - 128) > 0x5AA53727u) * (v0 + 1864)) ^ v0))
                                          - 12LL))(v7);
}

uint64_t sub_10019A988( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(_DWORD *)(v17 - 128) = v13
                         - 108757529 * ((((2 * (v17 - 128)) | 0x4F74FB78) - (v17 - 128) - 666533308) ^ 0xC7261F97)
                         + 557;
  *(void *)(v17 - 120) = a13;
  *(void *)(v17 - 112) = v16;
  uint64_t v18 = ((uint64_t (*)(uint64_t))((char *)*(&off_101826020 + (v13 ^ 0xB)) - 8))(v17 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v14
                                                      + 8LL * (((((v13 + 905) | 5) - 1082) * (v15 == 888932153)) ^ v13))
                                          - 94 * (v13 ^ 0xB5u)
                                          + 176LL))(v18);
}

uint64_t sub_10019AA44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v19 - 112) = v14 + ((v19 - 1097351608 - 2 * ((v19 - 128) & 0xBE97BEC8)) ^ 0x403C6AA) * v17 + 607;
  *(void *)(v19 - 120) = a14;
  *(void *)(v19 - 104) = v18;
  uint64_t v20 = v16(v19 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v15
                                                      + 8LL
                                                      * ((1273
}

uint64_t sub_10019AAD4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(v7 + 32);
  *(_DWORD *)(v4 - 112) = a3 + 1374699841 * ((((v4 - 128) | 0xF444FDE1) + (~(v4 - 128) | 0xBBB021E)) ^ 0x99B0E5E9) - 152;
  *(void *)(v4 - 128) = v3;
  *(void *)(v4 - 120) = v5;
  return sub_1001798B4(v4 - 128);
}

void sub_10019AD24(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16)
     - 460628867 * (((a1 ^ 0x68759CF4 | 0x87CE5E15) - ((a1 ^ 0x68759CF4) & 0x87CE5E15)) ^ 0xA32D409C);
  __asm { BR              X10 }

uint64_t sub_10019AE64()
{
  BOOL v5 = *(_DWORD *)(v2 + 48) - v0 == ((167 * (v1 ^ 0x747)) ^ 0x63D69CEA)
    || (*(void *)(v2 + 32) | *(void *)(v2 + 56)) == 0LL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((62 * v5) ^ v1)) - 8LL))();
}

uint64_t sub_10019AEC0()
{
  BOOL v4 = v1[5] != 0x1A8FA111108FB322LL && (*v1 | v1[3]) != 0LL;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((v4 * (v0 - 488)) ^ v0)))();
}

uint64_t sub_10019AF08@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 8LL * ((((((v17 - 369) ^ (v16 == 0)) & 1) == 0) * (((v17 + 275) | 0xC4) - 921)) ^ (v17 + 800))) - 4LL))( a7 - 0xD9A2EFA0D5B2BA6LL,  1178560073LL,  a1,  a2,  a3,  a4,  a5,  a6,  v18,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a7 - 0xD9A2EFA0D5B2876LL);
}

uint64_t sub_10019B024@<X0>( int a1@<W1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unsigned int v31 = (v22 + 390272035) & 0xE8BCEE5A;
  int v32 = ((((v30 - 144) | 0xA1543A50) - (v30 - 144) + ((v30 - 144) & 0x5EABC5A8)) ^ 0x1BC04232) * a1;
  *(_DWORD *)(v30 - 140) = v22 - v32 + 845;
  *(_DWORD *)(v30 - 136) = v23 + v32 + (v31 ^ 0x6C389C7);
  *(void *)(v30 - 128) = v20;
  *(void *)(v30 - 120) = v29;
  uint64_t v47 = a2 + v21;
  (*(void (**)(uint64_t))(v24 + 8LL * (v22 ^ 0x3FD)))(v30 - 144);
  HIDWORD(a10) = 3 * (v31 ^ 0x6ED);
  uint64_t v48 = v25;
  *(_DWORD *)(v30 - 128) = (v31 - 1051) ^ (628203409
                                         * ((((2 * (v30 - 144)) | 0xD665260C) - (v30 - 144) + 349007098) ^ 0x69BA9F35));
  *(void *)(v30 - 144) = a19;
  *(void *)(v30 - 136) = a20;
  int v33 = (void (*)(uint64_t))(*(void *)(v24 + 8LL * (int)(v31 - 1569)) - 4LL);
  v33(v30 - 144);
  HIDWORD(a7) = v31 - 1023;
  *(void *)(v30 - 120) = a19;
  *(void *)(v30 - 112) = v27;
  *(_DWORD *)(v30 - 128) = (v31 - 1023) ^ (1178560073
                                         * ((((v30 - 144) | 0x21D009AC) - (v30 - 144) + ((v30 - 144) & 0xDE2FF650)) ^ 0x9B4471CE));
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v29;
  uint64_t v45 = (void (*)(uint64_t))((char *)*(&off_101826020 + (int)(v31 - 1438)) - 12);
  uint64_t v46 = v29;
  v45(v30 - 144);
  LODWORD(a8) = v31 - 894;
  *(_DWORD *)(v30 - 112) = v31 - 894 + 1224239923 * ((v30 + 1260386870 - 2 * ((v30 - 144) & 0x4B1FFAC6)) ^ 0xB9AC0711);
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v27;
  *(void *)(v30 - 104) = v25;
  *(void *)(v30 - 128) = v27;
  *(void *)(v30 - 120) = a19;
  int v34 = (void (*)(uint64_t))*(&off_101826020 + (int)(v31 - 1518));
  v34(v30 - 144);
  HIDWORD(a4) = v31 - 779;
  *(_DWORD *)(v30 - 120) = v31 - 779 + 1225351577 * ((v30 - 144) ^ 0x239AD816);
  *(void *)(v30 - 112) = a12;
  *(void *)(v30 - 104) = a19;
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v27;
  *(void *)(v30 - 128) = v27;
  int v35 = (void (*)(uint64_t))((char *)*(&off_101826020 + (int)(v31 ^ 0x67C)) - 12);
  v35(v30 - 144);
  *(void *)(v30 - 144) = a15;
  *(void *)(v30 - 136) = a20;
  *(_DWORD *)(v30 - 128) = (v31 - 1051) ^ (628203409
                                         * (((v30 - 144) & 0xDBC4E177 | ~((v30 - 144) | 0xDBC4E177)) ^ 0xA6B312BB));
  v33(v30 - 144);
  *(_DWORD *)(v30 - 128) = (v31 - 1023) ^ (1178560073
                                         * ((-2
                                           - (((v30 - 144) ^ 0x9C01100 | 0x56112CF5)
                                            + ((v30 - 144) ^ 0x4002CC4 | 0xA9EED30A))) ^ 0x48ABBA59));
  *(void *)(v30 - 120) = a15;
  *(void *)(v30 - 112) = v28;
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v46;
  v45(v30 - 144);
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v28;
  *(void *)(v30 - 104) = v48;
  *(void *)(v30 - 128) = v28;
  *(void *)(v30 - 120) = a15;
  *(_DWORD *)(v30 - 112) = v31
                         - 894
                         + 1224239923 * ((2 * ((v30 - 144) & 0x10151408) - (v30 - 144) - 269816843) ^ 0x1D591622);
  v34(v30 - 144);
  *(void *)(v30 - 136) = v28;
  *(void *)(v30 - 128) = v28;
  *(_DWORD *)(v30 - 120) = v31
                         - 779
                         + 1225351577 * ((2 * ((v30 - 144) & 0x7DE927C0) - (v30 - 144) - 2112432067) ^ 0xA18C002B);
  *(void *)(v30 - 112) = a13;
  *(void *)(v30 - 104) = a15;
  *(void *)(v30 - 144) = a20;
  v35(v30 - 144);
  *(void *)(v30 - 136) = v28;
  *(void *)(v30 - 128) = v27;
  *(_DWORD *)(v30 - 144) = v31
                         - 108757529
                         * ((((2 * ((v30 - 144) ^ 0x139270AD)) | 0xB81B59F6) - ((v30 - 144) ^ 0x139270AD) + 603083525) ^ 0x2F03BE7D)
                         - 870;
  ((void (*)(uint64_t))((char *)*(&off_101826020 + (int)(v31 - 1422)) - 8))(v30 - 144);
  *(void *)(v30 - 136) = v28;
  *(_DWORD *)(v30 - 140) = (v31 - 107) ^ (460628867
                                        * ((-1606058528 - ((v30 - 144) | 0xA0457DE0) + ((v30 - 144) | 0x5FBA821F)) ^ 0x132C0062));
  sub_10018526C(v30 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, char *, uint64_t, void, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 + 8LL * (int)((203 * (*(_DWORD *)(v30 - 144) < (HIDWORD(a10) ^ 0x73B3F33Eu))) ^ v31)) - ((v31 + 1790706611) & 0x9543F7F7 ^ 0x1FDLL)))( v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  a3,  a4,  v45,  v46,  a7,  a8,  (char *)*(&off_101826020 + (int)(v31 - 1515)) - 12,  a10,  (v31 + 1790706611) & 0x9543F7F7,  v34,  a13,  v47,  a15,  a16,  a17);
}

uint64_t sub_10019B59C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t), uint64_t a16, uint64_t a17, void (*a18)(uint64_t), uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  *(_DWORD *)(v36 - 144) = (v32 - 217) ^ (235795823
                                        * (((((v36 - 144) | 0x98136FF2) ^ 0xFFFFFFFE) - (~(v36 - 144) | 0x67EC900D)) ^ 0xF341D954));
  *(void *)(v36 - 136) = v35;
  *(void *)(v36 - 128) = v34;
  v31(v36 - 144);
  *(_DWORD *)(v36 - 112) = v32
                         + 215
                         + 1224239923
                         * ((((v36 - 144) ^ 0xF9BB0CB1 | 0x15437DFD) - (((v36 - 144) ^ 0xF9BB0CB1) & 0x15437DFD)) ^ 0x1E4B8C9B);
  *(void *)(v36 - 104) = a31;
  *(void *)(v36 - 128) = v35;
  *(void *)(v36 - 120) = v34;
  *(void *)(v36 - 144) = a26;
  *(void *)(v36 - 136) = v35;
  a18(v36 - 144);
  *(_DWORD *)(v36 - 112) = v32
                         + 215
                         + 1224239923 * ((((v36 - 144) | 0x639614A3) + (~(v36 - 144) | 0x9C69EB5C)) ^ 0x9125E975);
  *(void *)(v36 - 104) = v35;
  *(void *)(v36 - 144) = a26;
  *(void *)(v36 - 136) = a20;
  *(void *)(v36 - 128) = v35;
  *(void *)(v36 - 120) = v34;
  a18(v36 - 144);
  *(void *)(v36 - 136) = v35;
  *(void *)(v36 - 128) = a25;
  *(_DWORD *)(v36 - 144) = (v32 + 426522516) ^ (235795823
                                              * (((v36 - 144) & 0x4B6C9771 | ~((v36 - 144) | 0x4B6C9771)) ^ 0x203E21D7));
  sub_1001A6460(v36 - 144);
  *(_DWORD *)(v36 - 144) = (v32 - 217) ^ (235795823
                                        * ((((v36 - 144) ^ 0xE1EEABAC) & 0xD6C0ADF9 | ~((v36 - 144) ^ 0xE1EEABAC | 0xD6C0ADF9)) ^ 0x5C7CB0F3));
  *(void *)(v36 - 136) = v35;
  *(void *)(v36 - 128) = a27;
  a15(v36 - 144);
  *(_DWORD *)(v36 - 128) = v32
                         + 1374699841 * ((2 * ((v36 - 144) & 0xB04ADC0) - (v36 - 144) + 1962627641) ^ 0x190F4A30)
                         - 66;
  *(void *)(v36 - 144) = v35;
  *(void *)(v36 - 136) = a27;
  uint64_t v37 = sub_1001798B4(v36 - 144);
  return ((uint64_t (*)(uint64_t))(*(void *)(v33 + 8LL
                                                            * ((((v32 ^ 0x21D) - 994) * (a24 == 0)) | (v32 + 1371)))
                                          - ((250 * (v32 ^ 0x1F1u)) ^ 0x3E4LL)))(v37);
}

uint64_t sub_10019B810()
{
  int v4 = 535753261 * ((v3 + 1435357870 - 2 * ((v3 - 144) & 0x558DD33E)) ^ 0x5F79DD11);
  *(_DWORD *)(v3 - 128) = v0 - v4 - 685;
  *(void *)(v3 - 120) = v2;
  *(void *)(v3 - 136) = v6;
  *(_DWORD *)(v3 - 144) = (v8 + 76549659 + (v0 ^ 0x21D)) ^ v4;
  uint64_t result = ((uint64_t (*)(uint64_t))((char *)*(&off_101826020 + v0 - 778) - 8))(v3 - 144);
  *(_DWORD *)(v7 - 0x1A8FA111108FB322LL) = v8;
  *(_DWORD *)(v1 + 64) = 2084229119;
  return result;
}

uint64_t sub_10019B98C(uint64_t a1)
{
  int v1 = 535753261 * ((a1 - 1922189914 - 2 * (a1 & 0x8D6DB5A6)) ^ 0x8799BB89);
  int v2 = *(_DWORD *)(a1 + 16) + v1;
  int v3 = *(_DWORD *)a1 ^ v1;
  int v4 = *(_DWORD *)(*(void *)(a1 + 24) - 0x1F589EA4AC42BDE5LL);
  unsigned int v6 = v4 - 1966800080;
  BOOL v5 = v4 - 1966800080 < 0;
  unsigned int v7 = 1966800080 - v4;
  if (v5) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = v6;
  }
  return ((uint64_t (*)(void))(*((void *)*(&off_101826020 + v2 - 203)
                              + ((1290 * ((v3 - 1751559471) >= 4 * (unint64_t)v8)) ^ v2)
                              - 1)
                            - 4LL))();
}

uint64_t sub_10019BA4C(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2
                                                               + 8LL
                                                               * ((81 * (((v1 == 1751559471) ^ v3) & 1)) ^ v3))
                                                   - 4LL))( a1,  1779124031LL);
}

uint64_t sub_10019BA84()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((595 * (45 * (v1 ^ 0x13C) == 315)) ^ v1 ^ 0x439)) - 8LL))();
}

uint64_t sub_10019BB0C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W8>)
{
  *(_BYTE *)(*(void *)(a1 + 8) + (((a2 + 965) | 2) ^ (a5 + 1281)) + a4) = (a3 ^ v7) >> v8;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (a2 ^ (844 * (a4 - 1 != v6)))) - 4LL))();
}

uint64_t sub_10019BB5C()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((595 * (v1 + 8 == 45 * (v2 ^ 0x505) - 283)) ^ v2)) - 8LL))();
}

uint64_t sub_10019BB98(uint64_t a1)
{
  BOOL v7 = v4 + 1333274437 > 1274283598 || v4 + 1333274437 < v3;
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 + 8LL * (v5 ^ (7 * v7)))
                                                                    - 7 * (v5 ^ 0x52Fu)
                                                                    + 307LL))( a1,  7 * (v5 ^ 0x52Fu),  3337363496LL,  v1);
}

uint64_t sub_10019BBF4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return sub_10019BB0C(a1, v5 - 967, *(_DWORD *)(*v3 + 4LL * (v4 - 2088493125 + v5 - 967)), v2, a2);
}

uint64_t sub_10019BC20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

void sub_10019BC28(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36) ^ (235795823
                             * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214));
  __asm { BR              X1 }

uint64_t sub_10019BD74()
{
  return ((uint64_t (*)(void, uint64_t))(*(void *)(v2 + 8LL * (v0 ^ (15 * (v1 == 0x324CCD1C)))) - 8LL))( (v0 - 448601949) & 0x1ABD1F2F ^ 0x2862ABBBu,  70853752LL);
}

uint64_t sub_10019BDD8@<X0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL v12 = v9 > a1;
  *(_BYTE *)(a3 + (a2 - 70853752)) = *(_BYTE *)(v3 + (a2 - 70853752)) ^ *(_BYTE *)(v5 + (((_BYTE)a2 - 120) & 0xF)) ^ *(_BYTE *)(v6 + (((_BYTE)a2 - 120) & 0xF)) ^ *(_BYTE *)(v4 + ((a2 - 70853752) & 0xFLL)) ^ (97 * ((a2 - 120) & 0xF)) ^ 0x2C;
  unsigned int v13 = ((v7 - 45) ^ 0xD36429DF) + a2;
  int v14 = v12 ^ (v13 < v8);
  BOOL v15 = v13 < v10;
  if (!v14) {
    BOOL v12 = v15;
  }
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * ((15 * !v12) ^ v7)) - 8LL))();
}

uint64_t sub_10019BE74(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (int)(((((a1 - 80) | 0x20) ^ (a1 + 242689694) & 0xF188D5FB ^ 0x478)
                                               * (((2 * v2) & 0xF5F4FBBC ^ v1) + (v2 ^ 0x48B6B0C2) - 1209018398 != 854218176)) | a1))
                            - 8LL))();
}

uint64_t sub_10019BEF0(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (((((97 * (a5 ^ 0x1F1) + 1502) | 0x12) - 401)
}

uint64_t sub_10019BF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * (((a6 + v7 - 16 < (a7 ^ 0xFFFFFF32)) * (((a7 + 1392) | 0x80) ^ 0x69A)) | a7))
                            - 8LL))();
}

uint64_t sub_10019BF8C@<X0>(int a1@<W2>, int a2@<W3>, int a3@<W5>, int a4@<W6>, uint64_t a5@<X8>)
{
  int v10 = a4 ^ 0x28;
  int v11 = (a4 ^ 0x670) - 1188;
  uint64_t v12 = (a2 + a1 + a3) + a5;
  uint64_t v13 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3) & 0xF;
  unint64_t v14 = v13 + v7 - v12;
  unint64_t v15 = (v13 | v8) - v12;
  unint64_t v16 = (v13 | v6) - v12;
  BOOL v20 = (unint64_t)(v5 - a5) > 0xF && v14 > 0xF && v15 > 0xF && v16 > 0xF;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (((v11 ^ 0x218) * v20) ^ v10)) - 8LL))();
}

uint64_t sub_10019C004(unsigned int a1)
{
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v2
                                     + 8LL
                                     * (((a1 < ((322 * (v1 ^ 0x20D)) ^ 0x3D6u)) * ((13 * (v1 ^ 0x230)) ^ 0x33E)) ^ v1))
                         - 4LL);
  *(_DWORD *)(v3 - 116) = v4;
  return v5();
}

uint64_t sub_10019C058@<X0>( int a1@<W0>, int a2@<W2>, int a3@<W3>, int a4@<W5>, int a5@<W6>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
  v54.val[1].i64[0] = (v46 + 13) & 0xF;
  v54.val[1].i64[1] = (v46 + 12) & 0xF;
  v54.val[2].i64[0] = (v46 + 11) & 0xF;
  v54.val[2].i64[1] = (v46 + 10) & 0xF;
  v54.val[3].i64[0] = (v46 + 9) & 0xF;
  v54.val[3].i64[1] = (v46 + 8) & 0xF;
  v55.val[0].i64[0] = (v46 + 7) & 0xF;
  v55.val[0].i64[1] = (v46 + 6) & 0xF;
  v55.val[1].i64[0] = (v46 + 5) & 0xF;
  v55.val[1].i64[1] = (v46 + 4) & 0xF;
  v55.val[2].i64[0] = (*(_DWORD *)(v45 - 116) + 3) & 0xF;
  v55.val[2].i64[1] = (*(_DWORD *)(v45 - 116) + 2) & 0xF;
  v55.val[3].i64[0] = (*(_DWORD *)(v45 - 116) + 1) & 0xF;
  v55.val[3].i64[1] = *(_DWORD *)(v45 - 116) & 0xF;
  unsigned int v47 = a3 + a2 + a4;
  v48.i64[0] = 0x6161616161616161LL;
  v48.i64[1] = 0x6161616161616161LL;
  v49.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v49.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  v54.val[0].i64[0] = v47 & 0xF;
  v54.val[0].i64[1] = (v46 + 14) & 0xF;
  v50.i64[0] = vqtbl4q_s8(v54, (int8x16_t)xmmword_1012D0AD0).u64[0];
  v50.i64[1] = vqtbl4q_s8(v55, (int8x16_t)xmmword_1012D0AD0).u64[0];
  int8x16_t v51 = vrev64q_s8( veorq_s8( veorq_s8(*(int8x16_t *)(v41 - 15 + v47), *(int8x16_t *)(v43 + v54.val[0].i64[0] - 15)),  veorq_s8(*(int8x16_t *)(v44 + v54.val[0].i64[0] - 15), *(int8x16_t *)(v42 + v54.val[0].i64[0] - 15))));
  int8x16_t v52 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v51, v51, 8uLL), v49), vmulq_s8(v50, v48)));
  *(int8x16_t *)(a6 - 15 + v47) = vextq_s8(v52, v52, 8uLL);
  return ((uint64_t (*)(void))(*(void *)(a41 + 8LL * ((1156 * ((a1 & 0xFFFFFFF0) == 16)) ^ a5))
                            - ((a5 + 634) | 8u)
                            + 1444LL))();
}

void sub_10019C1D4()
{
}

uint64_t sub_10019C1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
}

uint64_t sub_10019C22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v7
                                                      + 8LL
}

uint64_t sub_10019C27C@<X0>( int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
  *(_DWORD *)(v48 - 168) = v41;
  *(_DWORD *)(v48 - 160) = a1;
  *(void *)(v48 - 136) = a6 - 7;
  *(void *)(v48 - 128) = v42 - 7;
  *(_DWORD *)(v48 - 176) = a1 & 0xFFFFFFF8;
  *(_DWORD *)(v48 - 144) = 8 - (a1 & 0xFFFFFFF8);
  int v50 = -a5;
  int v51 = a2 + a4 + a3;
  *(_DWORD *)(v48 - 1++*(_DWORD *)(v3 + 52) = v51 + 8;
  uint64_t v52 = v49 + v50 + (((_DWORD)v47 - 226996179) & 0xD87ADFF ^ (v46 + 397));
  v54.val[0].i64[0] = ((_BYTE)v49 + (_BYTE)v50 + ((v47 + 45) ^ (v46 - 115))) & 0xF;
  v54.val[0].i64[1] = ((_BYTE)v51 + 14 + (_BYTE)v50) & 0xF;
  v54.val[1].i64[0] = ((_BYTE)v51 + 13 + (_BYTE)v50) & 0xF;
  v54.val[1].i64[1] = ((_BYTE)v51 + 12 + (_BYTE)v50) & 0xF;
  v54.val[2].i64[0] = ((_BYTE)v51 + 11 + (_BYTE)v50) & 0xF;
  v54.val[2].i64[1] = ((_BYTE)v51 + 10 + (_BYTE)v50) & 0xF;
  v54.val[3].i64[0] = ((_BYTE)v51 + 9 + (_BYTE)v50) & 0xF;
  v54.val[3].i64[1] = (*(_DWORD *)(v48 - 152) + (_BYTE)v50) & 0xF;
  *(int8x8_t *)(*(void *)(v48 - 136) + v++*(_DWORD *)(v3 + 52) = vrev64_s8( veor_s8( veor_s8( vrev64_s8( veor_s8( veor_s8( *(int8x8_t *)(*(void *)(v48 - 128) + v52),  *(int8x8_t *)(v44 + (v52 & 0xF) - 7)),  veor_s8( *(int8x8_t *)(v45 + (v52 & 0xF) - 7),  *(int8x8_t *)(v43 + (v52 & 0xF) - 7)))),  (int8x8_t)0x2C2C2C2C2C2C2C2CLL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8( v54,  (int8x16_t)xmmword_1012D0AE0),  (int8x8_t)0x6161616161616161LL)));
  return ((uint64_t (*)(uint64_t, __n128))(*(void *)(a41
                                                              + 8LL
                                                              * (int)((15 * (*(_DWORD *)(v48 - 144) == v50)) ^ v47))
                                                  - 12LL))( v47,  (__n128)xmmword_1012D0AE0);
}

void sub_10019C3F4()
{
}

uint64_t sub_10019C400()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (((((v0 ^ 0x741) - 393) ^ 0x172)
                                          * (*(_DWORD *)(v2 - 160) == *(_DWORD *)(v2 - 176))) ^ v0))
                            - 4LL))();
}

uint64_t sub_10019C440@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  uint64_t v11 = (a1 + v7);
  *(_BYTE *)(a2 + v11) = *(_BYTE *)(v2 + v11) ^ *(_BYTE *)(v4 + (v11 & 0xF)) ^ *(_BYTE *)(v5 + (v11 & 0xF)) ^ *(_BYTE *)(v3 + (v11 & 0xF)) ^ ((v11 & 0xF) * v8) ^ 0x2C;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((1458 * ((v9 ^ 0x39B) + a1 - 1322 == v6)) ^ (v9 - 1479))) - 8LL))();
}

uint64_t sub_10019C4AC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  uint64_t v39 = *(void *)(v36 + 24);
  *(int8x16_t *)(v38 - 112) = veorq_s8( *(int8x16_t *)(*(void *)(v36 + 40) - 0x1F962A9297594DE9LL),  (int8x16_t)xmmword_1012D0B10);
  if (a9) {
    BOOL v40 = v39 == 0xCDF342D76DC35A7LL;
  }
  else {
    BOOL v40 = 1;
  }
  int v41 = !v40;
  LODWORD(a12) = v35 << (((a7 - 37) | 0x80) ^ 0x85);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 + 8LL * (int)((v41 * (a7 - 1237)) | a7)) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35);
}

uint64_t sub_10019C534( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  int v36 = (a11 & 0xEF6AF36E) + (v34 ^ 0xF7B579B7);
  int v37 = ((a11 & 0x6E) + (v34 ^ 0xB7) + 9) & 0xF;
  BOOL v39 = v36 == -139101769
     || v37 != (((_DWORD)a7 + 411720821) & 0xE7759EE5) + (((_DWORD)a7 - 1282037050) & 0x4C6A53F7) - 1131;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 8LL * ((127 * v39) ^ ((int)a7 + 142))))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34);
}

uint64_t sub_10019C5C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, int a43, int a44)
{
  return ((uint64_t (*)(void))(*(void *)(v44
                                        + 8LL
                                        * (a44 ^ (1327
                                                * ((((a10 - (a12 & 0x429E29E6) - 1689229390) << ((a44 + 60) ^ 0xC1)) & 0x9FBDFF56 ^ 0x29C2946)
                                                 + ((a10 - (a12 & 0x429E29E6) - 1689229390) ^ 0xEE91EB58)
                                                 - 1074809906 != 265204601))))
                            - 12LL))();
}

uint64_t sub_10019C69C(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
}

uint64_t sub_10019C718(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
}

uint64_t sub_10019C754@<X0>(int a1@<W0>, int a2@<W5>, unint64_t a3@<X8>)
{
  uint64_t v9 = (a1 + v6 + v7);
  unint64_t v10 = v9 + a3 + 1;
  uint64_t v11 = ((_BYTE)a1 + (_BYTE)v6 + (_BYTE)v7) & 0xF;
  unint64_t v12 = v4 + v11 - v9;
  unint64_t v13 = v11 + v4 + 1;
  unint64_t v14 = v11 - v9 + v5 + 2;
  unint64_t v15 = v5 + v11 + ((857 * (a2 ^ 0x1E1u)) ^ 0x6B1LL);
  uint64_t v16 = v11 + v3;
  unint64_t v17 = v16 - v9 + 4;
  unint64_t v18 = v16 + 5;
  BOOL v20 = v13 > a3 && v12 < v10;
  int v22 = v14 < v10 && v15 > a3 || v20;
  if (v18 <= a3 || v17 >= v10) {
    int v24 = v22;
  }
  else {
    int v24 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((1928 * (v24 ^ 1)) ^ a2)) - 12LL))();
}

uint64_t sub_10019C7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v7
                                                                       + 8LL
                                                                       * ((775
                                                                         * (((((((a6 ^ 0x33) - 1759214131) & 0x68DB7FFB)
                                                                             - 1571) ^ (v6 < 0x10)) & 1) == 0)) ^ a6 ^ 0x33))
                                                           - 4LL))( a1,  a2,  0LL);
}

uint64_t sub_10019C848@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X8>)
{
  v16.val[1].i64[0] = ((_BYTE)a2 + 12) & 0xF;
  v16.val[1].i64[1] = ((_BYTE)a2 + 11) & 0xF;
  v16.val[2].i64[0] = ((_BYTE)a2 + 10) & 0xF;
  v16.val[2].i64[1] = ((_BYTE)a2 + 9) & 0xF;
  v16.val[3].i64[0] = ((_BYTE)a2 + 8) & 0xF;
  v16.val[3].i64[1] = ((_BYTE)a2 + 7) & 0xF;
  unsigned int v11 = a1 + v8 + v9;
  v12.i64[0] = 0x7777777777777777LL;
  v12.i64[1] = 0x7777777777777777LL;
  v16.val[0].i64[0] = v11 & 0xF;
  v16.val[0].i64[1] = ((_BYTE)a2 + 13) & 0xF;
  v13.i64[0] = vqtbl4q_s8(v16, (int8x16_t)xmmword_1012D0AD0).u64[0];
  v17.val[0].i64[1] = ((_BYTE)a2 + 5) & 0xF;
  v17.val[1].i64[1] = ((_BYTE)a2 + 3) & 0xF;
  v17.val[2].i64[1] = (a2 + 1) & 0xF;
  v17.val[3].i64[1] = ((_BYTE)a2 - 1) & 0xF;
  v17.val[0].i64[0] = ((_BYTE)a2 + 6) & 0xF;
  v17.val[1].i64[0] = ((_BYTE)a2 + 4) & 0xF;
  v17.val[2].i64[0] = (a2 + 2) & 0xF;
  v17.val[3].i64[0] = a2 & 0xF;
  v13.i64[1] = vqtbl4q_s8(v17, (int8x16_t)xmmword_1012D0AD0).u64[0];
  int8x16_t v14 = vrev64q_s8(vmulq_s8(v13, v12));
  *(int8x16_t *)(a4 - 15 + v11) = veorq_s8( veorq_s8( veorq_s8( veorq_s8( *(int8x16_t *)(v5 + v16.val[0].i64[0] - 15),  *(int8x16_t *)(a4 - 15 + v11)),  *(int8x16_t *)(v16.val[0].i64[0] + v6 - 13)),  *(int8x16_t *)(v4 + v16.val[0].i64[0] + ((a3 - 242) ^ 0x80LL) - 15)),  vextq_s8(v14, v14, 8uLL));
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((1916 * ((v7 & 0xFFFFFFF0) == 16)) ^ a3)) - 4LL))();
}

void sub_10019C998()
{
}

uint64_t sub_10019C9A4@<X0>( unsigned __int8 *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  int v41 = v36 ^ 0x555;
  uint64_t v42 = (char *)*(&off_101826020 + (v36 ^ 0x373u)) - 12;
  HIDWORD(v43) = v42[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A6LL) ^ 0x85LL];
  LODWORD(v43) = (HIDWORD(v43) ^ 0x40) << 24;
  int v44 = ((v43 >> 30) ^ 0x9F) << 16;
  uint64_t v45 = (char *)*(&off_101826020 + (v36 & 0x6DDCF466)) - 12;
  int v46 = v45[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359CLL) ^ 0xBFLL];
  *(_DWORD *)(v40 - 128) = v39;
  HIDWORD(v43) = v36 ^ 0x555 ^ v46 ^ 0xE;
  LODWORD(v43) = (v46 ^ 0xC0) << 24;
  LOBYTE(v46) = v43 >> 28;
  HIDWORD(v43) = v42[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A2LL) ^ 0x6FLL];
  LODWORD(v43) = (HIDWORD(v43) ^ 0x40) << 24;
  uint64_t v47 = (char *)*(&off_101826020 + v36 - 885) - 4;
  uint64_t v48 = (char *)*(&off_101826020 + (v36 ^ 0x343u)) - 8;
  char v49 = v48[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359BLL) ^ 0xD8LL];
  int v50 = (((v43 >> 30) ^ 0x68) << 16) | ((v47[*(unsigned __int8 *)(v38
                                                                                                  - 0xCDF342D76DC35A1LL) ^ 0xDFLL] ^ 0xDB) << 8);
  int v51 = v45[*(unsigned __int8 *)(v38 - 0xCDF342D76DC3598LL) ^ 0xBCLL];
  HIDWORD(v43) = v51 ^ 0xC;
  LODWORD(v43) = (v51 ^ 0xC0) << 24;
  LOBYTE(v51) = v43 >> 28;
  uint64_t v52 = v51 ^ 0x68LL;
  int v53 = v50 | ((v48[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A3LL) ^ 0xAFLL] ^ 0x9A) << 24);
  int v54 = v45[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A0LL) ^ 0x98LL];
  HIDWORD(v43) = v54 ^ 0xC;
  LODWORD(v43) = (v54 ^ 0xC0) << 24;
  unsigned int v55 = v53 & 0xFFFFFF00 | (v43 >> 28);
  LODWORD(v45) = v45[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A4LL) ^ 0xD0LL];
  HIDWORD(v43) = v45 ^ 0xC;
  LODWORD(v43) = (v45 ^ 0xC0) << 24;
  LOBYTE(v45) = (v43 >> 28) ^ 0x3C;
  HIDWORD(v43) = v42[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359ALL) ^ 0xB6LL];
  LODWORD(v43) = (HIDWORD(v43) ^ 0x40) << 24;
  unsigned int v56 = v44 & 0xFFFFFF00 | ((v47[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A5LL) ^ 0x49LL] ^ 0x51) << 8) | ((v48[*v37 ^ 0xFELL] ^ 0x43) << 24) | v45;
  uint64_t v57 = (v43 >> 30) ^ 0x21LL;
  HIDWORD(v43) = v42[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359ELL) ^ 0xC8LL];
  LODWORD(v43) = (HIDWORD(v43) ^ 0x40) << 24;
  unint64_t v58 = (((v47[*(unsigned __int8 *)(v38 - 0xCDF342D76DC3599LL) ^ 0xC7LL] ^ 0x1ALL) << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v49 ^ 0x4Au) << 24) | (v57 << 16) | v52) ^ 0x75F49EF4;
  uint64_t v59 = ((unsigned __int16)((((v47[*(unsigned __int8 *)(v38 - 0xCDF342D76DC3599LL) ^ 0xC7LL] ^ 0x1A) << 8) | v52) ^ 0x9EF4) >> 8);
  unsigned int v60 = v46 | ((v47[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359DLL) ^ 0xB7LL] ^ 0xFA) << 8) & 0xFF00FFFF | (((v43 >> 30) ^ 0x37) << 16) | ((v48[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359FLL) ^ 0x18LL] ^ 5) << 24);
  int v61 = v59 - ((2 * (v58 >> 8)) & 0x4A);
  uint64_t v62 = v59 ^ 0xF5;
  int8x16_t v63 = (char *)*(&off_101826020 + v36 - 778) - 4;
  LODWORD(v++*(_DWORD *)(v3 + 52) = (v61 - 1884897499) ^ *(_DWORD *)&v63[4 * v62];
  uint8x16_t v64 = (char *)*(&off_101826020 + (v36 & 0x5047D46F)) - 4;
  int v65 = *(_DWORD *)&v64[4 * (v49 ^ 0x55)];
  HIDWORD(v43) = v65 ^ 1;
  LODWORD(v43) = v65 ^ 0xC677F524;
  int v66 = v57 ^ 0xDD;
  int8x16_t v67 = (char *)*(&off_101826020 + (v36 & 0x4705288E)) - 12;
  int v68 = (v43 >> 2) ^ *(_DWORD *)&v67[4 * v66] ^ (v52 - ((2 * v52) & 0x72B72C40) - 1185180128);
  int v69 = v68 - ((2 * v68) & 0x8CC156CA);
  int8x16_t v70 = (char *)*(&off_101826020 + (v36 ^ 0x35Eu)) - 12;
  unsigned int v274 = v56;
  int v71 = *(_DWORD *)&v70[4 * (v51 ^ 0xD9)] ^ v56 ^ (v69 + 1180740453);
  unsigned int v275 = v55;
  unsigned int v272 = v60;
  int v270 = v71 ^ v55 ^ 0x2789BBD4;
  int v72 = v60 ^ 0xE6 ^ v270;
  LODWORD(v45) = *(_DWORD *)&v64[4 * (((v72 ^ v58) >> 24) ^ 0x21)];
  HIDWORD(v43) = v45 ^ 1;
  LODWORD(v43) = v45 ^ 0xC677F524;
  LODWORD(v45) = ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4
                                                                                             * ((v72 ^ v58) ^ 0xDE)];
  int v268 = v72 ^ v58;
  int v271 = v71;
  unsigned int v267 = *(_DWORD *)&v63[4 * (((unsigned __int16)(v72 ^ v58) >> 8) ^ 0x1E)] ^ *(_DWORD *)&v67[4 * (((v72 ^ v58) >> 16) ^ 0x8F)] ^ v71 ^ ((((unsigned __int16)(v72 ^ v58) >> 8) ^ 0xEB) - ((2 * (((v72 ^ v58) >> 8) ^ 0x4BA6EB)) & 0x4A) - 1884897499) ^ ((_DWORD)v45 - ((2 * (_DWORD)v45) & 0x72B72C40) - 1185180128);
  int v73 = v267 ^ 0x76E748E2 ^ v71 ^ v55;
  int v273 = v58;
  int v74 = *(_DWORD *)&v64[4 * (((v73 ^ v58) >> 24) ^ 0xA2)];
  HIDWORD(v43) = v74 ^ 1;
  LODWORD(v43) = v74 ^ 0xC677F524;
  unsigned int v75 = v73 ^ v58 ^ 0xC84590C6;
  int v76 = *(_DWORD *)&v63[4 * (BYTE1(v75) ^ 0xF5)] ^ *(_DWORD *)&v67[4
                                                                 * (((v73 ^ v58) >> 16) ^ 0x6C)] ^ (BYTE1(v75) - (((v73 ^ v58) >> 7) & 0x4A) - 1884897499) ^ ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x72B72C40) - 1185180128);
  HIDWORD(v265) = v267 ^ 0x76E748E2 ^ *(_DWORD *)&v70[4 * ((v73 ^ v58) ^ 0x83)] ^ (v76
                                                                                                  - ((2 * v76) & 0x8CC156CA)
                                                                                                  + 1180740453);
  LODWORD(v266) = v73 ^ v58;
  unsigned int v77 = HIDWORD(v265) ^ 0x2789BBD4 ^ v73 ^ 0x8EDEEA78;
  int v269 = v72;
  HIDWORD(v266) = v73;
  HIDWORD(v264) = v73 ^ v72;
  LODWORD(v265) = HIDWORD(v265) ^ 0x2789BBD4 ^ v73;
  int v78 = v77 ^ v73 ^ v72;
  int v79 = *(_DWORD *)&v64[4 * (((v78 ^ v75) >> 24) ^ 0x67)];
  HIDWORD(v43) = v79 ^ 1;
  LODWORD(v43) = v79 ^ 0xC677F524;
  int v80 = (v43 >> 2) ^ *(_DWORD *)&v63[4 * (((unsigned __int16)(v78 ^ v75) >> 8) ^ 0x97)] ^ ((((unsigned __int16)(v78 ^ v75) >> 8) ^ 0x62) - ((2 * (((v78 ^ v75) >> 8) ^ 0xD8B62)) & 0x4A) - 1884897499);
  unsigned int v81 = (v80 - ((2 * v80) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4 * ((v78 ^ v75) ^ 0xE1)];
  int v82 = HIDWORD(v265) ^ 0x2789BBD4 ^ *(_DWORD *)&v67[4 * (((v78 ^ v75 ^ 0x2142BA5) >> 16) ^ 0xB6)] ^ (v81 - ((2 * v81) & 0x72B72C40) - 1185180128);
  HIDWORD(v263) = v78 ^ v75;
  LODWORD(v264) = v78;
  HIDWORD(v262) = v82 ^ v77;
  int v83 = v82 ^ v77 ^ 0x307C325C;
  LODWORD(v262) = v83 ^ v78 ^ 0x5EF1BA37;
  LODWORD(v45) = *(_DWORD *)&v64[4 * (((v262 ^ v78 ^ v75) >> 24) ^ 0xA4)];
  HIDWORD(v43) = v45 ^ 1;
  LODWORD(v43) = v45 ^ 0xC677F524;
  LODWORD(v45) = ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4
                                                                                             * ((v262 ^ v78 ^ v75) ^ 0x18)];
  unsigned int v84 = v262 ^ v78 ^ v75 ^ 0xCEE37B5D;
  HIDWORD(v261) = v262 ^ v78 ^ v75;
  LODWORD(v263) = v82;
  unsigned int v85 = *(_DWORD *)&v67[4 * (BYTE6(v261) ^ 0xCA)] ^ *(_DWORD *)&v63[4 * (BYTE1(v84) ^ 0xF5)] ^ v82 ^ (BYTE1(v84) - ((v84 >> 7) & 0x4A) - 1884897499) ^ 0x9D307044 ^ ((_DWORD)v45 - ((2 * (_DWORD)v45) & 0x72B72C40) - 1185180128);
  LODWORD(v45) = v85 ^ ((v78 ^ 0x5EF1BA37) - ((2 * (v78 ^ 0x5EF1BA37)) & 0x3A60E088) - 1657769916);
  int v86 = *(_DWORD *)&v64[4 * (((v45 ^ v84) >> 24) ^ 0x70)];
  HIDWORD(v43) = v86 ^ 1;
  LODWORD(v43) = v86 ^ 0xC677F524;
  int v87 = ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x72B72C40) - 1185180128) ^ *(_DWORD *)&v67[4
                                                                                    * (((v45 ^ v84 ^ 0xF3443494) >> 16) ^ 0xE4)];
  unsigned int v88 = (v87 - ((2 * v87) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4
                                                                      * ((v85 ^ ((v78 ^ 0x37)
                                                                                                - ((2 * (v78 ^ 0x37)) & 0x88)
                                                                                                + 68) ^ v84) ^ 0x91)];
  LODWORD(v260) = v45 ^ v84;
  unsigned int v89 = v45 ^ v84 ^ 0x1A89BBD4;
  int v90 = (v88 - ((2 * v88) & 0x1F4D7E4A) - 1884897499) ^ *(_DWORD *)&v63[4 * (BYTE1(v89) ^ 0xF5)];
  LODWORD(v58) = v85 ^ BYTE1(v89) ^ (v90 - ((2 * v90) & 0x3A60E088) - 1657769916);
  HIDWORD(v260) = (_DWORD)v45;
  LODWORD(v261) = v85;
  LODWORD(v259) = v85 ^ (v83 - ((2 * v83) & 0x3A60E088) - 1657769916);
  HIDWORD(v258) = v58 ^ v259;
  int v91 = v58 ^ v259 ^ 0xE6F58988;
  unsigned int v92 = v91 ^ v45 ^ v89;
  int v93 = *(_DWORD *)&v64[4 * (HIBYTE(v92) ^ 0x43)];
  HIDWORD(v43) = v93 ^ 1;
  LODWORD(v43) = v93 ^ 0xC677F524;
  int v94 = *(_DWORD *)&v63[4 * (((unsigned __int16)(v92 ^ 0x7ABE) >> 8) ^ 0xF5)] ^ *(_DWORD *)&v67[4 * (((v92 ^ 0x4D501F31) >> 16) ^ 0xE2)] ^ (((unsigned __int16)(v92 ^ 0x7ABE) >> 8) - (((v92 ^ 0x299B7ABE) >> 7) & 0x4A) - 1884897499) ^ ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x72B72C40) - 1185180128);
  HIDWORD(v259) = v58;
  unsigned int v95 = v58 ^ *(_DWORD *)&v70[4 * (v92 ^ 0xFB)] ^ (v94 + 1180740453 + (~(2 * v94) | 0x733EA935) + 1);
  HIDWORD(v256) = v95 ^ v91;
  int v96 = v95 ^ v91 ^ 0x5BF36347;
  LODWORD(v258) = v91 ^ v45;
  LODWORD(v256) = v96 ^ v91 ^ v45;
  unsigned int v97 = v256 ^ 0x2745D0FF ^ v92 ^ 0x299B7ABE;
  unsigned int v98 = (((unsigned __int16)(v97 ^ 0x6B2B) >> 8) - (((v97 ^ 0x3DCC6B2B) >> 7) & 0x4A) - 1884897499) ^ *(_DWORD *)&v63[4 * (((unsigned __int16)(v97 ^ 0x6B2B) >> 8) ^ 0xF5)];
  unsigned int v99 = (v98 - ((2 * v98) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4 * (v97 ^ 0x6E)];
  HIDWORD(v255) = v97;
  int v100 = *(_DWORD *)&v64[4 * (HIBYTE(v97) ^ 0x57)];
  HIDWORD(v43) = v100 ^ 1;
  LODWORD(v43) = v100 ^ 0xC677F524;
  unint64_t v257 = __PAIR64__(v92, v95);
  LODWORD(v255) = (v43 >> 2) ^ *(_DWORD *)&v67[4 * (((v97 ^ 0x516EF336) >> 16) ^ 0x8B)] ^ v95 ^ (v99 - ((2 * v99) & 0x72B72C40) - 1185180128);
  HIDWORD(v254) = v255 ^ 0x930000ED ^ v96;
  LODWORD(v254) = HIDWORD(v254) ^ 0x8D06EA22 ^ v256 ^ 0x2745D0FF;
  unsigned int v101 = v254 ^ v97 ^ 0x3DCC6B2B;
  int v102 = *(_DWORD *)&v64[4 * (HIBYTE(v101) ^ 0x39)];
  HIDWORD(v43) = v102 ^ 1;
  LODWORD(v43) = v102 ^ 0xC677F524;
  HIDWORD(v253) = v101;
  LODWORD(v47) = *(_DWORD *)&v70[4 * (v101 ^ 4)] ^ *(_DWORD *)&v63[4
                                                                                  * (((unsigned __int16)(v101 ^ 0xAA41) >> 8) ^ 0xF5)] ^ 0xC9C61440 ^ (v43 >> 2);
  int v103 = *(_DWORD *)&v67[4 * (((v101 ^ 0x9289BB39) >> 16) ^ 0x7E)] ^ v255 ^ 0x930000ED ^ ((unsigned __int16)(v101 ^ 0xAA41) >> 8) ^ 0x72CEE8C0 ^ ((_DWORD)v47 - ((2 * (_DWORD)v47) & 0x72B72C40) - 1185180128);
  LODWORD(v45) = v103 ^ ((v256 ^ 0x2745D0FF) - ((2 * (v256 ^ 0x2745D0FF)) & 0xE59DD180) + 1926162624);
  unsigned int v104 = v45 ^ v101 ^ 0x53DEAA41;
  LODWORD(v64) = *(_DWORD *)&v64[4 * (HIBYTE(v104) ^ 0x44)];
  HIDWORD(v43) = v64 ^ 1;
  LODWORD(v43) = v64 ^ 0xC677F524;
  LODWORD(v47) = (HIDWORD(v254) ^ 0x8D06EA22) + 1926162624 + (~(2 * (HIDWORD(v254) ^ 0x8D06EA22)) | 0x1A622E7F);
  LODWORD(v62) = *(_DWORD *)&v63[4 * (BYTE1(v104) ^ 0xFD)] ^ *(_DWORD *)&v70[4
                                                                           * ((v103 ^ (~(_BYTE)v256 - ((2 * ~(_BYTE)v256) & 0x80) - 64) ^ v101 ^ 0x41) ^ 0xC4)] ^ ((BYTE1(v104) ^ 8) - ((v104 >> 7) & 0x4A) - 1884897499) ^ ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x8CC156CA) + 1180740453);
  HIDWORD(v2++*(_DWORD *)(v3 + 52) = v104 ^ 0xD67EF71D;
  LODWORD(v62) = (v62 - ((2 * v62) & 0x72B72C40) - 1185180128) ^ *(_DWORD *)&v67[4 * (BYTE2(v104) ^ 0x16)];
  int8x16x4_t v105 = (char *)*(&off_101826020 + v36 - 855) - 4;
  int8x16x4_t v106 = (char *)*(&off_101826020 + (v36 ^ 0x38Du)) - 8;
  int v107 = v106[*(unsigned __int8 *)(v40 - 109) ^ 0xA5LL];
  HIDWORD(v43) = v107 ^ 0x19;
  LODWORD(v43) = (v107 ^ 0x80) << 24;
  uint64_t v108 = (uint64_t)*(&off_101826020 + v36 - 879);
  int v250 = v106;
  LODWORD(v63) = (v106[*(unsigned __int8 *)(v40 - 97) ^ 0x7BLL] ^ 0xE6) & 0xFFFF00FF | ((((*(_BYTE *)(v40 - 98) ^ 0xD0) + v105[*(unsigned __int8 *)(v40 - 98) ^ 0xDFLL] - 91) ^ 0xE4) << 8) | ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v40 - 99) ^ 0xAALL)) ^ 0x54) << 16);
  int v251 = v105;
  uint64_t v249 = (uint64_t)*(&off_101826020 + (v36 ^ 0x3FEu));
  LODWORD(v48) = (((((v43 >> 30) ^ 0xDB) >> 2) | (((v43 >> 30) ^ 0xDB) << 6)) | ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v40 - 111) ^ 0x7ALL)) ^ 0x37) << 16) | ((*(unsigned __int8 *)(v249 + (*(unsigned __int8 *)(v40 - 112) ^ 0x78LL)) ^ 0xFFFFFF87) << 24) | (((v105[*(unsigned __int8 *)(v40 - 110) ^ 0x5DLL] + (*(_BYTE *)(v40 - 110) ^ 0x52) - 91) ^ 0x5D) << 8)) ^ 0x7B4BA366;
  unsigned int v109 = ((v106[*(unsigned __int8 *)(v40 - 101) ^ 0x60LL] ^ 0x52) & 0xFFFF00FF | ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v40 - 103) ^ 5LL)) ^ 0x66) << 16) | (((v105[*(unsigned __int8 *)(v40 - 102) ^ 4LL] + (*(_BYTE *)(v40 - 102) ^ 0xB) - 91) ^ 0x33) << 8) | ((*(unsigned __int8 *)(v249 + (*(unsigned __int8 *)(v40 - 104) ^ 0x1CLL)) ^ 0x72) << 24)) ^ 0xA2056723;
  LODWORD(v105) = ((v106[*(unsigned __int8 *)(v40 - 105) ^ 0x28LL] ^ 0x93) & 0xFFFF00FF | ((((*(_BYTE *)(v40 - 106) ^ 0xAC) + v105[*(unsigned __int8 *)(v40 - 106) ^ 0xA3LL] - 91) ^ 0xF6) << 8) | ((*(unsigned __int8 *)(v249 + (*(unsigned __int8 *)(v40 - 108) ^ 0xB2LL)) ^ 0x85) << 24) | ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v40 - 107) ^ 0x27LL)) ^ 2) << 16)) ^ 0x443698E3;
  unsigned int v110 = (v63 | ((*(unsigned __int8 *)(v249 + (*(unsigned __int8 *)(v40 - 100) ^ 0x45LL)) ^ 0xBD) << 24)) ^ 0x95B199F6;
  HIDWORD(v248) = *(_DWORD *)(v40 - 128) + 139101769;
  int v111 = v62 - ((2 * v62) & 0xE59DD180) + 1926162624;
  HIDWORD(v247) = v41 + 1314018074;
  LODWORD(v247) = v41 ^ 0x69E;
  LODWORD(v246) = v103 ^ ((_DWORD)v47 + 1);
  HIDWORD(v246) = v41 ^ 0x688;
  HIDWORD(v245) = v41 ^ 0x665;
  LODWORD(v253) = v103;
  LODWORD(v245) = v111 ^ v103;
  *(_DWORD *)(v40 - 116) = v41;
  HIDWORD(a6) = v41 ^ 0x67D;
  LODWORD(v2++*(_DWORD *)(v3 + 52) = v45 ^ 0x626A2240;
  LODWORD(v248) = ((_DWORD)v47 + 1) ^ 0x3DC8BA5D ^ v111;
  HIDWORD(a4) = v248 ^ v45 ^ 0x626A2240;
  uint64_t v112 = ((v41 + 1314018074) & 0xB1ADA6B7 ^ 0xFFFFFF7C) & 0x97726CFE ^ 0x97726CFF;
  *(void *)(v40 - 208) = v112;
  uint64_t v113 = a1[v112];
  *(void *)(v40 - 168) = 12LL;
  int v114 = v106[v113 ^ 0x41];
  uint64_t v115 = a1[12] ^ 0x60LL;
  *(void *)(v40 - 160) = 8LL;
  *(void *)(v40 - 128) = 1LL;
  LODWORD(v70) = *(unsigned __int8 *)(v249 + v115) ^ 6;
  int v116 = *(unsigned __int8 *)(v249 + (a1[8] ^ 0xC1LL)) ^ 0xB2;
  LODWORD(v115) = *(unsigned __int8 *)(v108 + (a1[1] ^ 0x66LL)) ^ 0xDB;
  *(void *)(v40 - 136) = 15LL;
  uint64_t v117 = a1[15] ^ 0xE9LL;
  *(void *)(v40 - 1++*(_DWORD *)(v3 + 52) = 11LL;
  int v118 = (_DWORD)v115 << 16;
  LODWORD(v115) = v106[v117] ^ 0x44;
  LODWORD(v117) = v115 | ((_DWORD)v70 << 24);
  LODWORD(v70) = v106[a1[11] ^ 0xC3LL];
  *(void *)(v40 - 176) = 0LL;
  int v119 = v118 | ((*(unsigned __int8 *)(v249 + (*a1 ^ 0x30LL)) ^ 0x36) << 24);
  unsigned int v120 = v70 ^ 0x8E | (v116 << 24);
  *(void *)(v40 - 144) = 2LL;
  unsigned int v121 = v119 & 0xFFFF00FF | (((v251[a1[2] ^ 0xC0LL] + (a1[2] ^ 0xCF) - 91) ^ 0xF9) << 8);
  *(void *)(v40 - 216) = 4LL;
  v114 ^= 0x94u;
  LODWORD(v70) = v114 | ((*(unsigned __int8 *)(v249 + (a1[4] ^ 0xFCLL)) ^ 0x88888888) << 24);
  *(void *)(v40 - 240) = 5LL;
  *(void *)(v40 - sub_1000A7938(v33 - 232) = 9LL;
  int v122 = v120 | ((*(unsigned __int8 *)(v108 + (a1[9] ^ 0x5DLL)) ^ 8) << 16);
  *(void *)(v40 - 192) = 10LL;
  unsigned int v123 = v122 & 0xFFFF00FF | (((v251[a1[10] ^ 0xD5LL] + (a1[10] ^ 0xDA) - 91) ^ 0xCF) << 8);
  *(void *)(v40 - 184) = 14LL;
  int v124 = (v251[a1[14] ^ 0xE4LL] + (a1[14] ^ 0xEB) + 37) << 8;
  *(void *)(v40 - sub_10000AE14(v45 - 224) = 3LL;
  int v125 = v106[a1[3] ^ 0xDCLL] ^ 0x50 | v121;
  *(_DWORD *)(v40 - 196) = -1754108674;
  *(void *)(v40 - 248) = 13LL;
  LODWORD(v117) = v124 | ((*(unsigned __int8 *)(v108 + (a1[13] ^ 0x92LL)) ^ 0x35) << 16) | v117;
  *(void *)(v40 - 256) = 6LL;
  LODWORD(v58) = v123 - ((2 * v123) & 0x3779BD34) + 465362586;
  unsigned int v126 = ((*(unsigned __int8 *)(v108 + (a1[5] ^ 0xA9LL)) ^ 0xE6) << 16) | (((v251[a1[6] ^ 0x4FLL]
                                                                                            + (a1[6] ^ 0x40)
                                                                                            - 91) ^ 0xB7) << 8) | v70;
  unsigned int v127 = v48 ^ v274 ^ (v125 - ((2 * v125) & 0x85E434BE) - 1024320929);
  unsigned int v128 = v105 ^ v275 ^ (v126 - 2 * (v126 & 0x7D8F215E ^ v114 & 4) - 40951462);
  unsigned int v129 = v110 ^ v273 ^ (v117 + 738730064 + ~(2 * (v117 & 0x2C08205F ^ v115 & 0x10)));
  LODWORD(v115) = v109 ^ v272 ^ v58;
  int v130 = (char *)*(&off_101826020 + (v41 ^ 0x688u)) - 8;
  LODWORD(v105) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x3F)];
  HIDWORD(v43) = ~(_DWORD)v105;
  LODWORD(v43) = v105 ^ 0x5E9AE946;
  int v131 = (char *)*(&off_101826020 + (v41 ^ 0x69Eu)) - 8;
  int v132 = (v43 >> 1) ^ *(_DWORD *)&v131[4 * (BYTE2(v129) ^ 0x34)] ^ ((BYTE2(v129) ^ 0x68)
                                                                  - 1957579816
                                                                  - ((2 * (HIWORD(v129) ^ 0xB768)) & 0x1B0));
  uint64_t v133 = (uint64_t)*(&off_101826020 + *(_DWORD *)(v40 - 116) - 1713);
  LODWORD(v47) = *(_DWORD *)(v133 + 4LL * ((v109 ^ v272 ^ v58) ^ 0xC6u)) ^ ((BYTE2(v127) ^ 0xD5)
                                                                                           - 1957579816
                                                                                           - ((2
                                                                                             * (HIWORD(v127) ^ 0x6CD5)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v127) ^ 0x89)] ^ (((v109 ^ v272 ^ v58) ^ 0xAB) - 1935464733 + ((2 * ((v109 ^ v272 ^ v58) ^ 0xAB) + 254) & 0xC6 ^ 0xDDF77FFF));
  LODWORD(v58) = *(_DWORD *)&v130[4 * (HIBYTE(v128) ^ 0xC8)];
  LODWORD(v70) = *(_DWORD *)&v131[4 * (BYTE2(v128) ^ 0x8C)] ^ *(_DWORD *)(v133 + 4LL * (v129 ^ 0xB6u)) ^ ((v129 ^ 0xDB) - 1935464733 + ((2 * (v129 ^ 0xDB) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ ((BYTE2(v128) ^ 0xD0) - 1957579816 - 2 * ((HIWORD(v128) ^ 0xC8D0) & 0xDF ^ HIWORD(v128) & 7));
  HIDWORD(v43) = ~(_DWORD)v58;
  LODWORD(v43) = v58 ^ 0x5E9AE946;
  LODWORD(v117) = (_DWORD)v70 + 2001785091 - ((2 * (_DWORD)v70) & 0xEEA1A206);
  LODWORD(v70) = v132 + 2001785091 - ((2 * v132) & 0xEEA1A206);
  int v134 = ((BYTE2(v115) ^ 0xAD) - 1957579816 - ((2 * (WORD1(v115) ^ 0x3FAD)) & 0x1B0)) ^ *(_DWORD *)(v133
                                                                                                  + 4LL * (v127 ^ 0x1Cu)) ^ ((v127 ^ 0x71) - 1935464733 + ((2 * (v127 ^ 0x71) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0xF1)] ^ (v43 >> 1);
  int v135 = *(_DWORD *)&v130[4 * (HIBYTE(v127) ^ 0x6C)];
  HIDWORD(v43) = ~v135;
  LODWORD(v43) = v135 ^ 0x5E9AE946;
  int v136 = v43 >> 1;
  unsigned int v137 = v134 + 2001785091 - ((2 * v134) & 0xEEA1A206);
  unsigned int v138 = (v128 ^ 0x10) - 1935464733 + ((2 * (v128 ^ 0x10) + 254) & 0xC6 ^ 0xDDF77FFF);
  int v139 = *(_DWORD *)&v130[4 * (HIBYTE(v129) ^ 0xB7)];
  HIDWORD(v43) = ~v139;
  LODWORD(v43) = v139 ^ 0x5E9AE946;
  int v140 = (char *)*(&off_101826020 + *(_DWORD *)(v40 - 116) - 1527) - 4;
  unsigned int v141 = *(_DWORD *)&v140[4 * (BYTE1(v127) ^ 0xDE)] ^ v269 ^ *(_DWORD *)(v133 + 4LL * (v128 ^ 0x7Du)) ^ v70;
  int v142 = ((_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v128) ^ 0x2F)] ^ (v43 >> 1);
  LODWORD(v70) = v142 - ((2 * v142) & 0x9E06EF50);
  LODWORD(v115) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x29)] ^ v271 ^ v136;
  LOWORD(v136) = v141 ^ v138;
  LODWORD(v115) = v115 ^ v117;
  unsigned int v143 = *(_DWORD *)&v140[4 * (BYTE1(v129) ^ 0x66)] ^ v270 ^ v137;
  LODWORD(v47) = *(_DWORD *)&v130[4 * ((v141 ^ ~v138) >> 24)];
  HIDWORD(v43) = ~(_DWORD)v47;
  LODWORD(v43) = v47 ^ 0x5E9AE946;
  LODWORD(v117) = v43 >> 1;
  int v144 = (v140[4 * (BYTE1(v129) ^ 0x66)] ^ v270 ^ v137);
  LODWORD(v47) = (v141 ^ v138) >> 16;
  int v145 = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x91)];
  HIDWORD(v43) = ~v145;
  LODWORD(v43) = v145 ^ 0x5E9AE946;
  int v146 = v43 >> 1;
  int v147 = *(_DWORD *)&v130[4 * (HIBYTE(v143) ^ 0xA3)];
  HIDWORD(v43) = ~v147;
  LODWORD(v43) = v147 ^ 0x5E9AE946;
  int v148 = v146 ^ *(_DWORD *)&v131[4 * (BYTE2(v143) ^ 0xF0)] ^ ((BYTE2(v143) ^ 0xAC)
                                                            - 1957579816
                                                            - 2 * ((HIWORD(v143) ^ 0xA3AC) & 0xDA ^ HIWORD(v143) & 2));
  LODWORD(v47) = (v43 >> 1) ^ *(_DWORD *)&v131[4 * (v47 ^ 0x15)] ^ *(_DWORD *)(v133
                                                                                              + 4LL
                                                                                              * (v115 ^ 0x7Bu)) ^ ((v47 ^ 0x49) - 1957579816 - 2 * ((v47 ^ 0xFF49) & 0xDE ^ v47 & 6)) ^ ((v115 ^ 0x16) - 1935464733 + ((2 * (v115 ^ 0x16) + 254) & 0xC6 ^ 0xDDF77FFF));
  unsigned int v149 = (_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206);
  LODWORD(v70) = ((_DWORD)v70 - 821856344) ^ v268;
  unsigned int v150 = (v148 + 2001785091 - ((2 * v148) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v136) ^ 0x2C)];
  LODWORD(v47) = v117 ^ *(_DWORD *)(v133 + 4LL * (v144 ^ 3u)) ^ ((v144 ^ 0x6E)
                                                               - 1935464733
                                                               + ((2 * (v144 ^ 0x6E) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)&v131[4 * (BYTE2(v70) ^ 0x66)] ^ ((BYTE2(v70) ^ 0x3A) - 1957579816 - 2 * (((v70 >> 16) ^ 0xA13A) & 0xDC ^ (v70 >> 16) & 4));
  LODWORD(v117) = *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0x2E)] ^ ((BYTE2(v115) ^ 0x72)
                                                              - 1957579816
                                                              - ((2 * (WORD1(v115) ^ 0x9172)) & 0x1B0));
  int v151 = *(_DWORD *)&v130[4 * ((v70 >> 24) ^ 0xA1)];
  HIDWORD(v43) = ~v151;
  LODWORD(v43) = v151 ^ 0x5E9AE946;
  unsigned int v152 = ((v136 ^ 0xFC) - 1935464733 + ((2 * (v136 ^ 0xFC) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)&v140[4 * (BYTE1(v143) ^ 0xBD)] ^ *(_DWORD *)(v133 + 4LL * (v136 ^ 0x91u));
  int v153 = *(_DWORD *)&v140[4 * (BYTE1(v70) ^ 0xEC)];
  int v154 = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x57)];
  LODWORD(v115) = v152 ^ (v117 + 2001785091 - ((2 * v117) & 0xEEA1A206));
  int v155 = v70;
  LODWORD(v70) = v115 ^ (v43 >> 1);
  LODWORD(v115) = ((v155 ^ 0xE5) - 1726037377) ^ v267 ^ *(_DWORD *)(v133 + 4LL * (v155 ^ 0x88u)) ^ (v150
                                                                                                  - 209427357
                                                                                                  - ((2 * v150) & 0xE708C8C6));
  unsigned int v156 = v154 ^ HIDWORD(v264) ^ ((_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206));
  LODWORD(v117) = ((_DWORD)v70 - ((2 * (_DWORD)v70) & 0x83177384) + 1099676098) ^ v266;
  unsigned int v157 = v153 ^ HIDWORD(v266) ^ v149;
  int v158 = *(_DWORD *)&v130[4 * (BYTE3(v117) ^ 0xAC)];
  HIDWORD(v43) = ~v158;
  LODWORD(v43) = v158 ^ 0x5E9AE946;
  LODWORD(v47) = ((v157 ^ 0xA1)
                - 1935464733
                + ((2 * (v157 ^ 0xA1) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133
                                                                                                + 4LL
                                                                                                * (v157 ^ 0xCCu));
  int v159 = *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0xDB)] ^ ((BYTE2(v115) ^ 0x87)
                                                     - 1957579816
                                                     - 2 * ((BYTE2(v115) ^ 0x87) & 0xF8 ^ WORD1(v115) & 0x20)) ^ (v43 >> 1);
  LODWORD(v47) = ((_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4
                                                                                                * (BYTE1(v115) ^ 0xDE)];
  LODWORD(v70) = ((v115 ^ 0x9E)
                - 1935464733
                + ((2 * (v115 ^ 0x9E) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133
                                                                                                + 4LL
                                                                                                * (v115 ^ 0xF3u));
  int v160 = (_DWORD)v47 - 1957579816 - ((2 * (_DWORD)v47) & 0x16A367B0);
  unsigned int v161 = (v159 + 2001785091 - ((2 * v159) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v157) ^ 0x57)];
  LODWORD(v47) = *(_DWORD *)&v130[4 * (HIBYTE(v156) ^ 0x37)];
  HIDWORD(v43) = ~(_DWORD)v47;
  LODWORD(v43) = v47 ^ 0x5E9AE946;
  LODWORD(v47) = v43 >> 1;
  int v162 = ((v156 ^ 0x740CBC3A) >> 16);
  unsigned int v163 = v162 - 1957579816 - (((v156 ^ 0x740CBC3A) >> 15) & 0x1B0);
  LODWORD(v115) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x3A)];
  HIDWORD(v43) = ~(_DWORD)v115;
  LODWORD(v43) = v115 ^ 0x5E9AE946;
  LODWORD(v115) = *(_DWORD *)&v140[4 * ((unsigned __int16)(v156 ^ 0xBC3A) >> 8)] ^ BYTE2(v157) ^ *(_DWORD *)&v131[4 * (BYTE2(v157) ^ 0xF6)] ^ (v43 >> 1);
  LODWORD(v115) = ((v117 ^ 0xD2) - 1726037377) ^ HIDWORD(v265) ^ *(_DWORD *)(v133
                                                                                            + 4LL
                                                                                            * (v117 ^ 0xBFu)) ^ ((v115 ^ 0xFC016271) - 209427357 - 2 * ((v115 ^ 0xFC016271) & 0x73846467 ^ v115 & 4));
  unsigned int v164 = ((v156 ^ 0x3A) - 1726037377) ^ HIDWORD(v263) ^ *(_DWORD *)(v133
                                                                                   + 4LL
                                                                                   * (v156 ^ 0x57u)) ^ (v161 - 209427357 - ((2 * v161) & 0xE708C8C6));
  int v165 = *(_DWORD *)&v130[4 * (HIBYTE(v157) ^ 0x7C)];
  HIDWORD(v43) = ~v165;
  LODWORD(v43) = v165 ^ 0x5E9AE946;
  LODWORD(v47) = *(_DWORD *)&v131[4 * (BYTE2(v117) ^ 0xD)] ^ v264 ^ BYTE2(v117) ^ v47 ^ v160;
  unsigned int v166 = *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0x59)] ^ v265 ^ v163 ^ *(_DWORD *)&v131[4 * (v162 ^ 0x5C)] ^ (v43 >> 1) ^ ((_DWORD)v70 + 2001785091 - ((2 * (_DWORD)v70) & 0xEEA1A206));
  unsigned int v167 = v47 ^ 0xFA64A592;
  unsigned int v168 = ((v47 ^ 0x92) - 1935464733 + ((2 * (v47 ^ 0xFA64A592) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v47 ^ 0xFFu));
  LODWORD(v70) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x5B)];
  LODWORD(v117) = v168 + 2001785091 - ((2 * v168) & 0xEEA1A206);
  HIDWORD(v43) = ~(_DWORD)v70;
  LODWORD(v43) = v70 ^ 0x5E9AE946;
  int v169 = v43 >> 1;
  int v170 = *(_DWORD *)&v130[4 * (HIBYTE(v164) ^ 0x28)];
  HIDWORD(v43) = ~v170;
  LODWORD(v43) = v170 ^ 0x5E9AE946;
  LODWORD(v70) = v43 >> 1;
  LODWORD(v47) = *(_DWORD *)&v130[4 * ((v47 >> 24) ^ 0xB9)];
  HIDWORD(v43) = ~(_DWORD)v47;
  LODWORD(v43) = v47 ^ 0x5E9AE946;
  LODWORD(v47) = v43 >> 1;
  unsigned int v171 = v169 ^ *(_DWORD *)(v133 + 4LL * (v164 ^ 0x1Fu)) ^ ((v164 ^ 0x72)
                                                                           - 1935464733
                                                                           + ((2 * (v164 ^ 0x72) + 254) & 0xC6 ^ 0xDDF77FFF));
  int v172 = *(_DWORD *)&v130[4 * (HIBYTE(v166) ^ 0xB4)];
  HIDWORD(v43) = ~v172;
  LODWORD(v43) = v172 ^ 0x5E9AE946;
  LODWORD(v47) = v47 ^ *(_DWORD *)(v133 + 4LL * (v166 ^ 0x8Bu)) ^ ((v166 ^ 0xE6)
                                                                                                - 1935464733
  int v173 = BYTE2(v115) ^ 0x95;
  unsigned int v174 = v173 - 1957579816 - ((2 * (WORD1(v115) ^ 0x5B95)) & 0x1B0);
  LODWORD(v63) = v115;
  unsigned int v175 = (v115 ^ 0xF4) - 1935464733 + ((2 * (v115 ^ 0xF4) + 254) & 0xC6 ^ 0xDDF77FFF);
  unsigned int v176 = ((BYTE2(v164) ^ 0x14) - 1957579816 - ((2 * (HIWORD(v164) ^ 0x2814)) & 0x1B0)) ^ v262 ^ *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x1F)] ^ ((_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206)) ^ *(_DWORD *)&v131[4 * (BYTE2(v164) ^ 0x48)];
  LODWORD(v115) = *(_DWORD *)&v140[4 * BYTE1(v167)] ^ v82 ^ ((BYTE2(v166) ^ 0x59)
                                                           - 1957579816
                                                           - ((2 * (HIWORD(v166) ^ 0xB459)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v166) ^ 5)] ^ (v171 + 2001785091 - ((2 * v171) & 0xEEA1A206));
  unsigned int v177 = (BYTE2(v167) - 1957579816 - ((v167 >> 15) & 0x1B0)) ^ HIDWORD(v262) ^ ((v43 >> 1)
                                                                              + 2001785091
                                                                              - ((2 * (v43 >> 1)) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v164) ^ 0x12)] ^ *(_DWORD *)(v133 + 4LL * (v63 ^ 0x99)) ^ v175 ^ *(_DWORD *)&v131[4 * (BYTE2(v167) ^ 0x5C)];
  LODWORD(v117) = *(_DWORD *)&v140[4 * (BYTE1(v166) ^ 0x34)] ^ HIDWORD(v261) ^ *(_DWORD *)&v131[4 * (v173 ^ 0x5C)] ^ v174 ^ v117 ^ v70;
  LODWORD(v63) = *(_DWORD *)&v130[4 * (BYTE3(v117) ^ 0xEB)];
  HIDWORD(v43) = ~(_DWORD)v63;
  LODWORD(v43) = v63 ^ 0x5E9AE946;
  int v178 = (v43 >> 1) + 2001785091 - ((2 * (v43 >> 1)) & 0xEEA1A206);
  int v179 = ((BYTE2(v177) ^ 0x81) - 1957579816 - ((2 * (HIWORD(v177) ^ 0x1481)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v177) ^ 0xDD)];
  LODWORD(v47) = ((v177 ^ 0x51)
                - 1935464733
                + ((2 * (v177 ^ 0x51) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133
                                                                                                + 4LL
                                                                                                * (v177 ^ 0x3Cu));
  int v180 = *(_DWORD *)&v131[4 * (BYTE2(v176) ^ 0xDB)] ^ ((BYTE2(v176) ^ 0x87)
                                                     - 1957579816
                                                     - ((2 * (HIWORD(v176) ^ 0x7787)) & 0x1B0));
  LODWORD(v58) = *(_DWORD *)&v130[4 * (HIBYTE(v177) ^ 0x14)];
  HIDWORD(v43) = ~(_DWORD)v58;
  LODWORD(v43) = v58 ^ 0x5E9AE946;
  int v181 = v43 >> 1;
  LODWORD(v58) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x9A)];
  HIDWORD(v43) = ~(_DWORD)v58;
  LODWORD(v43) = v58 ^ 0x5E9AE946;
  LODWORD(v63) = *(_DWORD *)&v131[4 * (((v117 ^ 0xA87CE98B) >> 16) ^ 0x5C)] ^ ((v117 ^ 0xA87CE98B) >> 16) ^ ((_DWORD)v47 - 1957579816 - ((2 * (_DWORD)v47) & 0x16A367B0));
  int v182 = ((v117 ^ 0x8B) - 1935464733 + ((2 * (v117 ^ 0xA87CE98B) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)&v140[4 * (BYTE1(v176) ^ 0xDE)] ^ *(_DWORD *)(v133 + 4LL * (v117 ^ 0xE6u)) ^ (v179 + 2001785091 - ((2 * v179) & 0xEEA1A206)) ^ (v43 >> 1);
  LODWORD(v58) = *(_DWORD *)&v130[4 * (HIBYTE(v176) ^ 0x77)];
  HIDWORD(v43) = ~(_DWORD)v58;
  LODWORD(v43) = v58 ^ 0x5E9AE946;
  int v183 = *(_DWORD *)&v140[4 * (BYTE1(v177) ^ 0x34)] ^ v260 ^ ((BYTE2(v115) ^ 0xE9)
                                                            - 1957579816
                                                            - ((2 * (WORD1(v115) ^ 0x9AE9)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0xB5)] ^ ((v176 ^ 0x9E) - 1935464733 + ((2 * (v176 ^ 0x9E) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ v178 ^ *(_DWORD *)(v133 + 4LL * (v176 ^ 0xF3u));
  LODWORD(v106) = *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xB)] ^ v259 ^ v181 ^ ((v115 ^ 0xA8)
                                                                           - 1935464733
                                                                           + ((2 * (v115 ^ 0xA8) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v115 ^ 0xC5u)) ^ (v180 + 2001785091 - ((2 * v180) & 0xEEA1A206));
  LODWORD(v115) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x2D)] ^ HIDWORD(v260) ^ (v43 >> 1) ^ ((_DWORD)v63
                                                                                           + 2001785091
                                                                                           - ((2 * (_DWORD)v63) & 0xEEA1A206));
  LODWORD(v63) = ((v106 ^ 0x2E0E654A) >> 16);
  LODWORD(v47) = *(_DWORD *)&v130[4 * ((v106 >> 24) ^ 0x6D)];
  LODWORD(v70) = (_DWORD)v63 - 1957579816 - (((v106 ^ 0x2E0E654A) >> 15) & 0x1B0);
  HIDWORD(v43) = ~(_DWORD)v47;
  LODWORD(v43) = v47 ^ 0x5E9AE946;
  int v184 = v43 >> 1;
  LODWORD(v117) = (v182 - 1657769916 - ((2 * v182) & 0x3A60E088)) ^ v261;
  int v185 = *(_DWORD *)&v131[4 * (v63 ^ 0x5C)];
  LODWORD(v63) = *(_DWORD *)&v130[4 * (BYTE3(v117) ^ 0xFD)];
  unsigned int v186 = v185 ^ (~(_DWORD)v63 << 31) ^ (v63 >> 1) ^ v70;
  LODWORD(v63) = ((v106 ^ 0x4A)
                - 1935464733
                + ((2 * (v106 ^ 0x2E0E654A) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v106 ^ 0x27u));
  LODWORD(v70) = (v186 ^ 0x2F4D74A3) + 2001785091 - 2 * ((v186 ^ 0x2F4D74A3) & 0x7750D10F ^ v186 & 0xC);
  int v187 = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0xAE)];
  HIDWORD(v43) = ~v187;
  LODWORD(v43) = v187 ^ 0x5E9AE946;
  int v188 = (v43 >> 1) ^ *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xA4)] ^ ((_DWORD)v63
                                                                  + 2001785091
                                                                  - ((2 * (_DWORD)v63) & 0xEEA1A206));
  int v189 = v188 - 1957579816 - ((2 * v188) & 0x16A367B0);
  unsigned int v190 = *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0x3A)] ^ v184 ^ *(_DWORD *)(v133 + 4LL * (v117 ^ 0x4Du)) ^ ((BYTE2(v115) ^ 0x66) - 1957579816 - ((2 * (WORD1(v115) ^ 0xAE66)) & 0x1B0)) ^ ((v117 ^ 0x20) - 1935464733 + ((2 * (v117 ^ 0x20) + 254) & 0xC6 ^ 0xDDF77FFF));
  unsigned int v191 = ((v115 ^ 0xB3)
        + 275747715
        + ((2 * (v115 ^ 0xB3) + 254) & 0xFFFFFE07 ^ 0xDDDE7FFF)) ^ *(_DWORD *)&v140[4 * (BYTE1(v106) ^ 0x65)];
  LODWORD(v47) = (v191 - 209427357 - ((2 * v191) & 0xE708C8C6)) ^ *(_DWORD *)(v133
                                                                            + 4LL * (v115 ^ 0xDEu));
  unsigned int v192 = *(_DWORD *)&v131[4 * (BYTE2(v117) ^ 0x40)] ^ ((BYTE2(v117) ^ 0x1C)
                                                     - 1957579816
                                                     - 2 * ((WORD1(v117) ^ 0xFD1C) & 0xDA ^ WORD1(v117) & 2));
  LODWORD(v117) = v192 ^ v47 ^ 0x431D28D3;
  LODWORD(v47) = v47 ^ 0x6500C283;
  int v193 = v192 ^ 0xD9E215AF ^ -(v192 ^ 0xD9E215AF) ^ (v117 + (_DWORD)v47 + 1);
  LODWORD(v117) = *(_DWORD *)&v130[4 * ((v183 ^ 0x3F162902u) >> 24)];
  HIDWORD(v43) = ~(_DWORD)v117;
  LODWORD(v43) = v117 ^ 0x5E9AE946;
  unsigned int v194 = ((v183 ^ 0x3F162902u) >> 16) ^ v258 ^ *(_DWORD *)&v131[4
                                                                                             * (((v183 ^ 0x3F162902u) >> 16) ^ 0x5C)] ^ v189;
  LODWORD(v63) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x7C)];
  LODWORD(v117) = (v43 >> 1) ^ HIDWORD(v257) ^ (v193 + (_DWORD)v47);
  LODWORD(v115) = *(_DWORD *)&v140[4 * (BYTE1(v183) ^ 0xCB)] ^ HIDWORD(v258) ^ (v190
                                                                              + 2001785091
                                                                              - ((2 * v190) & 0xEEA1A206));
  unsigned int v195 = v63 ^ HIDWORD(v259) ^ ((v183 ^ 2)
                                            - 1935464733
                                            + ((2 * (v183 ^ 0x3F162902) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v183 ^ 0x6Fu)) ^ v70;
  int v196 = ((BYTE2(v195) ^ 0xE9) - 1957579816 - ((2 * (HIWORD(v195) ^ 0xB8E9)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v195) ^ 0xB5)];
  unsigned int v197 = v196 + 2001785091 - ((2 * v196) & 0xEEA1A206);
  LODWORD(v63) = *(_DWORD *)&v130[4 * (HIBYTE(v194) ^ 0x9D)];
  HIDWORD(v43) = ~(_DWORD)v63;
  LODWORD(v43) = v63 ^ 0x5E9AE946;
  LODWORD(v63) = v43 >> 1;
  int v198 = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x61)];
  HIDWORD(v43) = ~v198;
  LODWORD(v43) = v198 ^ 0x5E9AE946;
  int v199 = *(_DWORD *)(v133 + 4LL * (v195 ^ 0xC5u)) ^ *(_DWORD *)&v131[4 * (BYTE2(v194) ^ 0x28)] ^ ((v195 ^ 0xA8) - 1935464734 - ((2 * (v195 ^ 0xA8) + 842892542) & 0x220880C6)) ^ ((BYTE2(v194) ^ 0x74) - 1957579816 - ((2 * (HIWORD(v194) ^ 0x9D74)) & 0x1B0)) ^ (v43 >> 1);
  LODWORD(v63) = v63 ^ ((BYTE2(v117) ^ 0xE6) - 1957579816 - ((2 * (WORD1(v117) ^ 0xB0E6)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v117) ^ 0xBA)];
  int v200 = *(_DWORD *)&v130[4 * (HIBYTE(v195) ^ 0xB8)];
  HIDWORD(v43) = ~v200;
  LODWORD(v43) = v200 ^ 0x5E9AE946;
  int v201 = v115;
  unsigned int v202 = (v115 ^ 0x85) - 1935464733 + ((2 * (v115 ^ 0x85) + 254) & 0xC6 ^ 0xDDF77FFF);
  LODWORD(v106) = ((BYTE2(v115) ^ 8) - 1957579816 - 2 * ((WORD1(v115) ^ 0x6108) & 0xDA ^ WORD1(v115) & 2)) ^ *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0x54)] ^ *(_DWORD *)(v133 + 4LL * (v117 ^ 0x29u)) ^ ((v117 ^ 0x44) - 1935464733 + ((2 * (v117 ^ 0x44) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ (v43 >> 1);
  unsigned int v203 = *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xDD)] ^ HIDWORD(v256) ^ (v199 + 2001785091 - ((2 * v199) & 0xEEA1A206));
  int v204 = *(_DWORD *)&v130[4 * (BYTE3(v117) ^ 0xB0)];
  HIDWORD(v43) = ~v204;
  LODWORD(v43) = v204 ^ 0x5E9AE946;
  LODWORD(v47) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x8F)];
  LODWORD(v115) = *(_DWORD *)&v140[4 * (BYTE1(v194) ^ 0xBD)] ^ v257 ^ ((_DWORD)v106
                                                                     + 2001785091
                                                                     - ((2 * (_DWORD)v106) & 0xEEA1A206));
  unsigned int v205 = v47 ^ v97 ^ *(_DWORD *)(v133 + 4LL * (v194 ^ 0xB4u)) ^ ((v194 ^ 0xD9)
                                                                                              - 1935464733
                                                                                              + ((2
  unsigned int v206 = v202 ^ v256 ^ *(_DWORD *)(v133 + 4LL * (v201 ^ 0xE8u)) ^ *(_DWORD *)&v140[4 * (BYTE1(v195) ^ 0x2D)] ^ ((_DWORD)v63 + 2001785091 - ((2 * (_DWORD)v63) & 0xEEA1A206));
  LODWORD(v106) = *(_DWORD *)&v130[4 * (HIBYTE(v205) ^ 0x18)];
  int v207 = ((BYTE2(v206) ^ 0x66) - 1957579816 - 2 * ((HIWORD(v206) ^ 0xAE66) & 0xD9 ^ HIWORD(v206) & 1)) ^ *(_DWORD *)&v131[4 * (BYTE2(v206) ^ 0x3A)];
  HIDWORD(v43) = ~(_DWORD)v106;
  LODWORD(v43) = v106 ^ 0x5E9AE946;
  LODWORD(v117) = ((v43 >> 1) - 1957579816 - ((2 * (v43 >> 1)) & 0x16A367B0)) ^ *(_DWORD *)&v131[4
                                                                                               * (BYTE2(v115) ^ 0x40)];
  LODWORD(v47) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0xEF)];
  HIDWORD(v43) = ~(_DWORD)v47;
  LODWORD(v43) = v47 ^ 0x5E9AE946;
  LODWORD(v63) = (v43 >> 1) ^ *(_DWORD *)(v133 + 4LL * (v205 ^ 0x90u)) ^ ((v205 ^ 0xFD)
                                                                                         - 1935464733
                                                                                         + ((2
  LODWORD(v58) = v207 + 2001785091 - ((2 * v207) & 0xEEA1A206);
  unsigned int v208 = (_DWORD)v63 + 2001785091 - ((2 * (_DWORD)v63) & 0xEEA1A206);
  LODWORD(v63) = *(_DWORD *)(v133 + 4LL * (v203 ^ 0x27u)) ^ ((v203 ^ 0x4A)
                                                                            - 1935464733
                                                                            + ((2 * (v203 ^ 0x4A) + 254) & 0xC6 ^ 0xDDF77FFF));
  LODWORD(v106) = *(_DWORD *)&v130[4 * (HIBYTE(v206) ^ 0xAE)];
  HIDWORD(v43) = ~(_DWORD)v106;
  LODWORD(v43) = v106 ^ 0x5E9AE946;
  LODWORD(v63) = (v43 >> 1) ^ *(_DWORD *)&v131[4 * (BYTE2(v205) ^ 0xF)] ^ ((_DWORD)v63
                                                                         - 1957579816
                                                                         - ((2 * (_DWORD)v63) & 0x16A367B0));
  int v209 = *(_DWORD *)&v130[4 * (HIBYTE(v203) ^ 0xDC)];
  HIDWORD(v43) = ~v209;
  LODWORD(v43) = v209 ^ 0x5E9AE946;
  int v210 = ((BYTE2(v203) ^ 0xE) - 1957579816 - ((2 * (HIWORD(v203) ^ 0xDC0E)) & 0x1B0)) ^ v255 ^ *(_DWORD *)&v140[4 * (BYTE1(v206) ^ 0x7C)] ^ *(_DWORD *)&v131[4 * (BYTE2(v203) ^ 0x52)] ^ v208;
  LODWORD(v47) = v206;
  unsigned int v211 = (v206 ^ 0xB3) - 1935464733 + ((2 * (v206 ^ 0xB3) + 254) & 0xC6 ^ 0xDDF77FFF);
  unsigned int v212 = *(_DWORD *)&v140[4 * (BYTE1(v205) ^ 0x1B)] ^ HIDWORD(v254) ^ *(_DWORD *)(v133
                                                                                + 4LL * (v115 ^ 0x4Du)) ^ ((v115 ^ 0x20) - 1935464733 + ((2 * (v115 ^ 0x20) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ (v43 >> 1) ^ v58;
  LODWORD(v117) = v211 ^ HIDWORD(v253) ^ *(_DWORD *)&v140[4 * (BYTE1(v203) ^ 0x65)] ^ *(_DWORD *)(v133
                                                                                                + 4LL
                                                                                                * (v47 ^ 0xDE)) ^ (v117 + 2001785091 - ((2 * v117) & 0xEEA1A206));
  unsigned int v213 = (_DWORD)v63 + 2001785091 - ((2 * (_DWORD)v63) & 0xEEA1A206);
  LODWORD(v63) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0xA4)];
  LODWORD(v115) = v117 ^ BYTE2(v115);
  LODWORD(v106) = *(_DWORD *)&v130[4 * ((v115 ^ 0x7641388B) >> 24)];
  LODWORD(v70) = v63 ^ v254 ^ v213;
  HIDWORD(v43) = ~(_DWORD)v106;
  LODWORD(v43) = v106 ^ 0x5E9AE946;
  int v214 = v43 >> 1;
  int v215 = *(_DWORD *)&v130[4 * ((v210 ^ 0xF7E9CFA8) >> 24)];
  HIDWORD(v43) = ~v215;
  LODWORD(v43) = v215 ^ 0x5E9AE946;
  int v216 = v43 >> 1;
  unsigned int v217 = (((v115 ^ 0x7641388B) >> 16)
        - 1957579816
        - (((v115 ^ 0x7641388B) >> 15) & 0x1B0)) ^ *(_DWORD *)&v131[4
                                                                                * (((v115 ^ 0x7641388B) >> 16) ^ 0x5C)];
  int v218 = *(_DWORD *)&v130[4 * ((v70 >> 24) ^ 0xE7)];
  HIDWORD(v43) = ~v218;
  LODWORD(v43) = v218 ^ 0x5E9AE946;
  int v219 = v43 >> 1;
  unsigned int v220 = v214 ^ *(_DWORD *)(v133 + 4LL * ((v70 ^ BYTE2(v205)) ^ 0x18u)) ^ (((v210 ^ 0xF7E9CFA8) >> 16) - 1957579816 - (((v210 ^ 0xF7E9CFA8) >> 15) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (((v210 ^ 0xF7E9CFA8) >> 16) ^ 0x5C)] ^ (((v70 ^ BYTE2(v205)) ^ 0x75) - 1935464734 - ((2 * ((v70 ^ BYTE2(v205)) ^ 0x75) + 842892542) & 0x220880C6));
  unsigned int v221 = (v220 + 2001785091 - ((2 * v220) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v212) ^ 0xEC)];
  LODWORD(v115) = v216 ^ *(_DWORD *)&v131[4 * (BYTE2(v212) ^ 0xA7)] ^ ((BYTE2(v212) ^ 0xFB)
                                                                     - 1957579816
                                                                     - ((2 * (HIWORD(v212) ^ 0x57FB)) & 0x1B0)) ^ ((v115 ^ 0x8B) - 1935464733 + ((2 * (v115 ^ 0x7641388B) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v115 ^ 0xE6u));
  LODWORD(v63) = *(_DWORD *)&v130[4 * (HIBYTE(v212) ^ 0x57)];
  HIDWORD(v43) = ~(_DWORD)v63;
  LODWORD(v43) = v63 ^ 0x5E9AE946;
  LODWORD(v115) = (v115 + 2001785091 - ((2 * v115) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v70) ^ 0x6D)];
  LODWORD(v106) = *(_DWORD *)&v140[4 * (BYTE1(v210) ^ 0x2D)];
  LODWORD(v63) = ((v210 ^ 0xA8) - 1935464733 + ((2 * (v210 ^ 0xF7E9CFA8) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ ((BYTE2(v70) ^ 0x31) - 1957579816 - ((2 * ((v70 >> 16) ^ 0xE731)) & 0x1B0)) ^ *(_DWORD *)(v133 + 4LL * (v210 ^ 0xC5u)) ^ *(_DWORD *)&v131[4 * (BYTE2(v70) ^ 0x6D)] ^ (v43 >> 1);
  LODWORD(v140) = v246 ^ *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xDA)] ^ ((_DWORD)v63
                                                                     + 2001785091
                                                                     - ((2 * (_DWORD)v63) & 0xEEA1A206));
  LODWORD(v115) = (v115 + 1926162624 - ((2 * v115) & 0xE59DD180)) ^ v253;
  LODWORD(v131) = (v221 - 129892452 - ((2 * v221) & 0xF083FF38)) ^ HIDWORD(v252);
  unsigned int v222 = v106 ^ v252 ^ ((v212 ^ 0x2F)
                                    - 1935464733
                                    + ((2 * (v212 ^ 0x2F) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ v219 ^ *(_DWORD *)(v133 + 4LL * (v212 ^ 0x42u)) ^ (v217 + 2001785091 - ((2 * v217) & 0xEEA1A206));
  BYTE2(v130) = BYTE2(v140) ^ 0x8C;
  int v223 = *(_DWORD *)(v40 - 116);
  unsigned int v224 = (char *)*(&off_101826020 + v223 - 1674) - 8;
  uint64_t v225 = (uint64_t)*(&off_101826020 + HIDWORD(v245));
  unsigned int v226 = (char *)*(&off_101826020 + v223 - 1709) - 8;
  int v227 = (*(_DWORD *)&v226[4 * (BYTE2(v115) ^ 0x9E)] - 1484953747) ^ (*(_DWORD *)&v224[4
                                                                                     * (v222 ^ 0xC9)]
                                                                    - 1974578392);
  int v228 = *(_DWORD *)&v224[4 * (v140 ^ 0xC8)];
  LODWORD(v117) = (*(_DWORD *)&v226[4 * (BYTE2(v222) ^ 0x38)] - 1484953747) ^ (*(_DWORD *)(v225
                                                                                         + 4LL
  int v229 = *(_DWORD *)&v224[4 * (v115 ^ 0xA2)];
  unsigned int v230 = v131 ^ 0x351D74B9;
  LODWORD(v133) = *(_DWORD *)&v224[4 * (v131 ^ 0xB9)];
  uint64_t v231 = *(unsigned int *)(v225 + 4LL * (BYTE3(v115) ^ 0xE7));
  LODWORD(vsub_10000AE14(v45 - 224) = *(_DWORD *)(v225 + 4LL * (HIBYTE(v222) ^ 0xB8));
  LODWORD(v225) = *(_DWORD *)(v225 + 4LL * ((v131 >> 24) ^ 0x65));
  LODWORD(v131) = v117 ^ (v229 - 1974578392);
  int v232 = (char *)*(&off_101826020 + v223 - 1699) - 4;
  LODWORD(v140) = (v227 - 455301054 - ((2 * v227) & 0xC9B95084)) ^ *(_DWORD *)&v232[4 * (BYTE1(v140) ^ 0x61)] ^ (v225 - 1695168745);
  uint64_t v233 = *(unsigned int *)&v232[4 * (BYTE1(v222) ^ 0xE9)];
  int v234 = *(_DWORD *)&v226[4 * BYTE2(v130)];
  unsigned int v235 = *(_DWORD *)&v232[4 * BYTE1(v230)] ^ v248 ^ ((_DWORD)v131 - 455301054 - ((2 * (_DWORD)v131) & 0xC9B95084));
  LODWORD(v140) = HIDWORD(a4) ^ HIDWORD(v252) ^ ((_DWORD)v140 - 129892452 - ((2 * (_DWORD)v140) & 0xF083FF38));
  uint64_t v236 = *(_DWORD *)&v232[4 * (BYTE1(v115) ^ 0xA0)] ^ HIDWORD(a4) ^ (v228
                                                                   - ((2 * v228 + 345810512) & 0xC9B95084)
                                                                   + 1865087850) ^ ((_DWORD)v224 - 1695168745) ^ (*(_DWORD *)&v226[4 * BYTE2(v230)] - 1484953747);
  int v237 = (char *)*(&off_101826020 + v223 - 1571) - 8;
  a1[*(void *)(v40 - 256)] = v237[BYTE1(v235) ^ 0x99LL] ^ 0xAC;
  int v238 = (char *)*(&off_101826020 + v223 - 1697) - 12;
  a1[*(void *)(v40 - 248)] = (v238[BYTE2(v140) ^ 0xADLL] - 22) ^ 0xC5;
  int v239 = (char *)*(&off_101826020 + v223 - 1555) - 12;
  a1[*(void *)(v40 - 208)] = v239[v235 ^ 0xFCLL] ^ 0xD4;
  a1[*(void *)(v40 - 232)] = (v238[BYTE2(v236) ^ 0x8CLL] - 22) ^ 0x47;
  int v240 = (char *)*(&off_101826020 + HIDWORD(a6)) - 8;
  a1[*(void *)(v40 - 216)] = (v240[HIBYTE(v235) ^ 0xDELL] - 16) ^ 0x1B;
  a1[*(void *)(v40 - 240)] = ((v238[BYTE2(v235) ^ 0x15LL] + ((v238[BYTE2(v235) ^ 0x15LL] - 22) ^ 0xDA) - 21) ^ 0xFE)
                             + v238[BYTE2(v235) ^ 0x15LL]
                             - 22;
  uint64_t v241 = v245 ^ v233;
  uint64_t v242 = v241 ^ (v234 - 1484953747) ^ ((_DWORD)v133 - 1974578392) ^ ((_DWORD)v231
                                                                                 - ((2 * (_DWORD)v231 + 904629806) & 0xC9B95084)
                                                                                 + 2144497497);
  a1[*(void *)(v40 - 224)] = v239[v242 ^ 5LL] ^ 0x26;
  a1[*(void *)(v40 - 168)] = (v240[(v140 >> 24) ^ 0x4ELL] - 16) ^ 0xE6;
  a1[*(void *)(v40 - 160)] = (v240[BYTE3(v236) ^ 0x9CLL] - 16) ^ 0xB8;
  uint64_t v243 = *(void *)(v40 - 176);
  a1[v243] = (v240[BYTE3(v242) ^ 0x67LL] - 16) ^ 0x91;
  a1[*(void *)(v40 - 152)] = v239[v236 ^ 0xF2LL] ^ 0x2C;
  a1[*(void *)(v40 - 192)] = v237[BYTE1(v236) ^ 0x1ELL] ^ 0xF;
  a1[*(void *)(v40 - 144)] = v237[BYTE1(v242) ^ 0x33LL] ^ 0x16;
  a1[*(void *)(v40 - 184)] = v237[BYTE1(v140) ^ 0xBCLL] ^ 0xD8;
  a1[*(void *)(v40 - 136)] = v239[v140 ^ 0x9FLL] ^ 0xD4;
  a1[*(void *)(v40 - 128)] = (v238[BYTE2(v242) ^ 0xDLL] - 22) ^ 0x8E;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a36 + 8LL * ((483 * ((((_DWORD)v243 - 1754108658 - 2 * (((_DWORD)v243 + 16) & 0x17726CFF ^ *(_DWORD *)(v40 - 196) & 1)) ^ 0x97726CFE) >= HIDWORD(v248))) ^ (v223 - 488))) - 4LL))( v242,  v236,  v241,  3384365188LL,  v239,  v231,  2320388904LL,  v233,  a2,  a3,  a4,  a1,  a6,  v245,  v246,  v247,  v248,  v249,  v108,  v250,  v251,  v252,  v253,  v254,  v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v264,  v265,  v266);
}

void sub_10019F990()
{
}

uint64_t sub_10019F9C4(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_10019F9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)(v8
                                                                                        + 8LL
                                                                                        * (a7 ^ (961 * ((v7 & 8) == 0))))
                                                                            - ((389 * (a7 ^ 0x1D5u)) ^ 0x79DLL)))( a1,  a2,  a3,  (a2 - a3),  a7 ^ 0x762u);
}

uint64_t sub_10019FA40@<X0>( int a1@<W0>, int a2@<W2>, int a3@<W5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  *(_DWORD *)(v46 - 116) = v47;
  int v48 = (a3 - 54827018) & 0x34497FF;
  *(_DWORD *)(v46 - 128) = v42;
  int v49 = (v48 - 1943) & v42;
  int v50 = -a2;
  *(_DWORD *)(v46 - 136) = v49;
  *(_DWORD *)(v46 - 144) = v48 - 1406;
  uint64_t v51 = (v50 + a1 + v44 + v45);
  v53.val[0].i64[0] = ((_BYTE)v50 + (_BYTE)a1 + (_BYTE)v44 + (_BYTE)v45) & 0xF;
  v53.val[0].i64[1] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 107) & 0xF;
  v53.val[1].i64[0] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 108) & 0xF;
  v53.val[1].i64[1] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 109) & 0xF;
  v53.val[2].i64[0] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 110) & 0xF;
  v53.val[2].i64[1] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 111) & 0xF;
  v53.val[3].i64[0] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 112) & 0xF;
  v53.val[3].i64[1] = ((_BYTE)v50 + (_BYTE)a1 + (_BYTE)v44 + v43 + (_BYTE)a3 - 10) & 0xF;
  *(int8x8_t *)(a4 - 7 + v51) = veor_s8( veor_s8( veor_s8(*(int8x8_t *)(v40 + (v51 & 0xF) - 7), *(int8x8_t *)(a4 - 7 + v51)),  veor_s8(*(int8x8_t *)((v51 & 0xF) + v41 - 5), *(int8x8_t *)((v51 & 0xF) + v39 - 3))),  vrev64_s8( vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v53, (int8x16_t)xmmword_1012D0AE0),  (int8x8_t)0x7777777777777777LL)));
  return ((uint64_t (*)(__n128))(*(void *)(a39 + 8LL * ((22 * (v50 != 8 - v49)) ^ v48)) - 8LL))((__n128)xmmword_1012D0AE0);
}

void sub_10019FB8C()
{
}

uint64_t sub_10019FBB4()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (int)(((*(_DWORD *)(v1 - 144)
                                                + 1185
                                                + ((*(_DWORD *)(v1 - 144) + 1185) ^ 0xFFFFFF74))
                                               * (*(_DWORD *)(v1 - 128) == *(_DWORD *)(v1 - 136))) ^ *(_DWORD *)(v1 - 144)))
                            - 4LL))();
}

uint64_t sub_10019FBF0@<X0>(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  uint64_t v8 = (a1 - 265206530);
  *(_BYTE *)(a3 + v8) ^= *(_BYTE *)(v5 + (v8 & 0xF)) ^ *(_BYTE *)((v8 & 0xF) + v6 + 2) ^ *(_BYTE *)((v8 & 0xF) + v4 + 4) ^ (119 * (v8 & 0xF));
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((221 * (a1 - 1 == v3)) ^ (a2 - 1625))) - 12LL))();
}

void sub_10019FC5C()
{
  if (v0 == 112234441) {
    int v1 = 2084229119;
  }
  else {
    int v1 = -2084203481;
  }
  *(_DWORD *)(v2 + 32) = v1;
}

void sub_10019FCC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  int v12 = !v8 && a6 != 0 && a7 != 0 && a8 != 0;
  __asm { BR              X8 }

uint64_t sub_10019FD4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, unsigned int a22)
{
  *a6 = 0LL;
  *a7 = 0;
  a22 = 108757529 * (((&a21 | 0x956C4C34) - (&a21 & 0x956C4C34)) ^ 0x75F02E1F) - 504207030;
  uint64_t v25 = sub_1001A63A8(&a21);
  return ((uint64_t (*)(uint64_t))(*(void *)(v23 + 8LL * ((1813 * (a21 == v24)) ^ v22)) - 8LL))(v25);
}

uint64_t sub_10019FDDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unint64_t *a21, unsigned int a22, unsigned int a23, int a24)
{
  unsigned int v25 = 1759421093 * ((-260476592 - (&a21 | 0xF0797150) + (&a21 | 0xF868EAF)) ^ 0xBCFB3EFB);
  LODWORD(a21) = v25 ^ 0x3B0DE444;
  HIDWORD(a21) = v25 ^ 0x1CA2E939;
  a24 = v25 ^ 0x5C802CB3;
  a22 = v25 + 382;
  sub_10017B5AC((uint64_t)&a21);
  HIDWORD(a11) = a23;
  a23 = 854
      - 460628867
      * (((&a21 | 0xCD1B7496) - &a21 + (&a21 & 0x32E48B68)) ^ 0x818DF6EB);
  a21 = &STACK[0x49EB7E5E2EA5C925];
  sub_10017F1A8((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 8LL * ((406 * (a22 != 2084229119)) ^ 0xFBu)) - 8LL))( v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  a9,  a10,  a11,  a12,  a13,  a14);
}

uint64_t sub_10019FF28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, int a22, uint64_t a23, unsigned int a24, uint64_t a25)
{
  unsigned int v32 = 1178560073 * (&a21 ^ 0xBA947862);
  a23 = a16;
  a24 = (v25 - 73) ^ v32;
  a22 = v32 + 804878199 * v31 + 1740498123;
  uint64_t v33 = (void (*)(int *))*(&off_101826020 + (int)(v25 - 954));
  v33(&a21);
  a23 = a16;
  a25 = v30;
  a24 = v25
  ((void (*)(int *))((char *)*(&off_101826020 + (v25 ^ 0x431)) - 8))(&a21);
  unsigned int v34 = 1178560073 * ((&a21 - 256234305 - 2 * (&a21 & 0xF0BA2CBF)) ^ 0x4A2E54DD);
  a24 = (v25 - 73) ^ v34;
  a23 = a16;
  a22 = v34 + 804878199 * v29 + 1740498123;
  v33(&a21);
  unsigned int v35 = 1178560073 * ((1273442814 - (&a21 | 0x4BE731FE) + (&a21 | 0xB418CE01)) ^ 0xE8CB663);
  a23 = a16;
  a22 = v35 + v25 - 778;
  a24 = (((2 * v28) & 0xBEFFBBD8) - 273154088 + (v28 ^ 0x5F7FDC81 ^ (((v25 - 1050) | 0x420) - 711))) ^ v35;
  a25 = v27;
  uint64_t v36 = ((uint64_t (*)(int *))*(&off_101826020 + (int)(v25 - 1014)))(&a21);
  return ((uint64_t (*)(uint64_t))(*(void *)(v26 + 8LL * ((26 * (a21 != 2084229119)) ^ v25)) - 8LL))(v36);
}

uint64_t sub_1001A013C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, unint64_t *a23, uint64_t a24, unsigned int a25, unsigned int a26, unsigned int a27, int a28)
{
  if (a13 >= 0x5DC22130) {
    int v31 = 274310065;
  }
  else {
    int v31 = 274310066;
  }
  unsigned int v32 = 460628867 * ((2 * (&a23 & 0x420AA0F0) - &a23 + 1039490828) ^ 0x7163DD71);
  a23 = &STACK[0x27D4077E41C0C6E8];
  a24 = a18;
  a25 = v32 - 463518139;
  a26 = v32 + a10 - 2024874159;
  a27 = v31 - v32;
  uint64_t v33 = sub_1001A677C((uint64_t)&a23);
  return ((uint64_t (*)(uint64_t))(*(void *)(v28
                                                      + 8LL * ((886 * (a28 == v30 + ((a10 + 94) | 0x64) - 1270)) ^ a10))
                                          - (v29 ^ 0x165)))(v33);
}

uint64_t sub_1001A0248( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, unint64_t *a24, unint64_t *a25, unsigned int a26)
{
  a23 = a19;
  a24 = &STACK[0x7785963AF34447C6];
  a25 = &STACK[0x335EB1051722E02C];
  a26 = (v26 - 869) ^ (1225351577
                     * (((&a22 | 0xC4A46F41) - (&a22 & 0xC4A46F41)) ^ 0xE73EB757));
  uint64_t v29 = ((uint64_t (*)(char *))((char *)*(&off_101826020 + v26 - 1259) - 12))(&a22);
  return (*(uint64_t (**)(uint64_t))(v27 + 8LL * (((((v26 - 1141) | 0x70) + 487) * (a12 < v28)) ^ v26)))(v29);
}

uint64_t sub_1001A0338( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _BYTE *a18, uint64_t a19, int a20, char a21, unsigned int a22, char *a23, _BYTE *a24)
{
  a22 = (v24 - 868) ^ (1374699841
                     * (((&a22 | 0x3D62B3F9) - (&a22 & 0x3D62B3F9)) ^ 0x5096ABF0));
  a23 = &a21 + v29;
  a24 = a18;
  v28(&a22);
  a22 = ((v24 ^ 0x407) + 161) ^ (1374699841
                               * (((&a22 ^ 0xF12FB018 | 0xF7130791)
  a23 = v27;
  a24 = a18;
  v28(&a22);
  unsigned int v30 = 2 * &a22;
  a22 = ((v24 ^ 0x407) + 161) ^ (1374699841 * (((v30 | 0x6C375C36) - &a22 - 907783707) ^ 0x5BEFB612));
  a23 = v25;
  a24 = a18;
  v28(&a22);
  a22 = ((v24 ^ 0x407) + 172) ^ (1755732067 * (((v30 | 0x580604F2) - &a22 + 1409088903) ^ 0x72C5BFA2));
  a23 = a18;
  uint64_t v31 = sub_10017A8B8((uint64_t)&a22);
  return ((uint64_t (*)(uint64_t))(*(void *)(v26
                                                      + 8LL
                                                      * ((((_DWORD)a24 == 2084229119) * (v24 ^ 0x6D6)) ^ v24 ^ 0x407))
                                          - 8LL))(v31);
}

uint64_t sub_1001A04E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  return ((uint64_t (*)(void))(*(void *)(v20 + 8LL * ((1331 * (a20 == v22)) ^ v21)) - ((v21 - 241) | 0xF0u) + 232LL))();
}

uint64_t sub_1001A0518@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  *a7 = ~a9;
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((a14 == v15 + ((a1 - 208) | 0x414) - 1076) | a1))
}

uint64_t sub_1001A0568()
{
  BOOL v4 = ((uint64_t (*)(void))*(&off_101826020 + (v1 ^ 0x13)))(v0 ^ v3) == 0;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((287 * ((v4 ^ ((v1 ^ 0xC5) + 1)) & 1)) ^ v1))
                            - ((v1 - 41) | 0x600u)
                            + 1728LL))();
}

uint64_t sub_1001A05D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  int v23 = (a20 ^ v22) - ((2 * (a20 ^ v22)) & 0x35134EC) + 27826806;
  return ((uint64_t (*)(void))(*(void *)(v21
                                        + 8LL
                                        * ((477
                                          * (((v20 ^ 0xFDF3E5B6) & (2 * v23) ^ 0x151206C)
                                           + ((v20 - 1495) ^ v23 ^ 0xFF516B38)
                                           + 930545525 != 913371444)) ^ v20))
                            - 8LL))();
}

uint64_t sub_1001A065C(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v4
                                                      + 8LL
                                                      * ((352 * (v2 + v1 + (v3 ^ 0x960F705u) - 140174220 > 7)) ^ v3 ^ 0x69B))
                                          - 8LL))(a1);
}

uint64_t sub_1001A06C4(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((249 * (v2 - a1 < ((a2 - v3 - 1242) ^ (413 * (a2 ^ 0x264u)) ^ 0x960F53AuLL))) ^ a2))
                            - 4LL))();
}

uint64_t sub_1001A0714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v10
                                                              + 8LL
                                                              * ((465
                                                                * (v8 >= ((a7 - v7 - 1866) ^ (v9 + 647)))) ^ a7))
                                                  - (a7 - 213)
                                                  + 1018LL))( a1,  0LL);
}

uint64_t sub_1001A0750(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v13 = a6 + v9 + v10 + 614;
  uint64_t v14 = v6 + v13;
  __int128 v15 = *(_OWORD *)(v14 - 31);
  uint64_t v16 = a1 + v13;
  *(_OWORD *)(v16 - 15) = *(_OWORD *)(v14 - 15);
  *(_OWORD *)(v16 - 31) = v15;
}

void sub_1001A07B8()
{
}

uint64_t sub_1001A07C4(uint64_t a1)
{
  void *v7 = a1;
  *int v8 = v2;
  int v5 = v1 + 124;
  unsigned int v12 = v1
      + 835
  uint64_t v13 = v10;
  v3(v11);
  unsigned int v12 = v5
      + 535753261
  uint64_t v13 = v9;
  v3(v11);
  return v4 ^ 0x7C3ACFFFu;
}

void sub_1001A0A98(uint64_t a1)
{
  int v1 = (*(_DWORD *)(a1 + 16) ^ (628203409 * ((1303688841 - (a1 | 0x4DB4B689) + (a1 | 0xB24B4976)) ^ 0x30C34545))) - 143;
  __asm { BR              X4 }

uint64_t sub_1001A0C2C(uint64_t a1, int a2, unsigned int a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((960 * (a4 + ((v4 - 416) | a2) != 447)) ^ (v4 + 79)))
                            - ((v4 + 79) ^ a3)
                            + 1088LL))();
}

uint64_t sub_1001A0C98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(_DWORD *)(a12 - 0x19A1466F6B3325CLL) = 2109425940 - v18;
  int v25 = 1224239923 * ((v24 + 256431370 - 2 * ((v24 - 136) & 0xF48D592)) ^ 0xFDFB2845);
  *(_DWORD *)(v24 - 136) = v25 ^ 0x5098936A;
  *(_DWORD *)(v24 - 120) = v25 + v19 - 713;
  *(void *)(v24 - 128) = v20;
  sub_1001646D4((_DWORD *)(v24 - 136));
  int v26 = 1759421093 * (((v24 - 136) & 0x4EC92FE | ~((v24 - 136) | 0x4EC92FE)) ^ 0x486EDD55);
  *(void *)(v24 - 128) = v20;
  *(_DWORD *)(v24 - 136) = ((v22 << 6) & 0x7606F740) - v26 + ((32 * v22) ^ 0x3B037BBB) - 688016128;
  *(_DWORD *)(v24 - 120) = v19 - v26 + 160;
  sub_100193848(v24 - 136);
  *(_DWORD *)(v24 - 120) = v19
                         + 1374699841 * ((((v24 - 136) | 0xC69197A2) - ((v24 - 136) & 0xC69197A2)) ^ 0xAB658FAB)
                         - 665;
  *(void *)(v24 - 128) = &STACK[0x1F589EA4AC42BE39];
  *(void *)(v24 - 136) = a18;
  sub_1001798B4(v24 - 136);
  *(_DWORD *)(v24 - 120) = v19
                         + 1178560073 * (((v24 - 136) & 0xC3F300DC | ~((v24 - 136) | 0xC3F300DC)) ^ 0x86988741)
                         - 305;
  *(void *)(v24 - 112) = v20;
  *(void *)(v24 - 128) = a18;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v23 + 8LL * (v19 ^ 0x40D)))(v24 - 136);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21
                                                      + 8LL
                                                      * ((217
                                                        * (*(_DWORD *)(v24 - 136) <= (((v19 - 972) | 2) ^ 0x5AA537A5u))) ^ v19))
                                          - 12LL))(v27);
}

uint64_t sub_1001A0ED0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  *(_DWORD *)(v15 - 120) = v14
                         + 1374699841
                         * ((((v15 - 136) | 0x729EA90D) - (v15 - 136) + ((v15 - 136) & 0x8D6156F0)) ^ 0x1F6AB104)
                         + 305;
  *(void *)(v15 - 136) = v13;
  *(void *)(v15 - 128) = a10;
  uint64_t v16 = sub_1001798B4(v15 - 136);
  return ((uint64_t (*)(uint64_t))(*(void *)(v12 + 8LL * ((60 * (a12 < v14 - 129)) ^ v14)) - 12LL))(v16);
}

uint64_t sub_1001A0F6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t), uint64_t a18)
{
  *(_DWORD *)(v21 - 120) = v20 + 1374699841 * ((v21 - 136) ^ 0x6DF41809) - 124;
  *(void *)(v21 - 136) = a18;
  *(void *)(v21 - 128) = a16;
  sub_1001798B4(v21 - 136);
  int v22 = 1759421093 * (((v21 - 136) & 0x91FB6DD7 | ~((v21 - 136) | 0x91FB6DD7)) ^ 0xDD79227C);
  *(void *)(v21 - 128) = v18;
  *(_DWORD *)(v21 - 120) = v20 - v22 + 701;
  *(_DWORD *)(v21 - 136) = 302067900 - v22;
  sub_100193848(v21 - 136);
  *(void *)(v21 - 128) = a18;
  *(void *)(v21 - 112) = v18;
  *(_DWORD *)(v21 - 120) = v20 + 1178560073 * ((v21 + 1967052084 - 2 * ((v21 - 136) & 0x753ED5BC)) ^ 0xCFAAADDE) + 236;
  uint64_t v23 = a17(v21 - 136);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (int)(((((v20 - 52) ^ (*(_DWORD *)(v21 - 136) > 0x5AA53727u)) & 1)
                                                             * (((v20 + 551344256) & 0xDF2327D7) - 546)) ^ (v20 + 257)))
                                          - 4LL))(v23);
}

uint64_t sub_1001A1120( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * ((23
                                          * (((2 * a10) & 0xBCFDF774)
                                           + (a10 ^ ((v10 - 447) | 0x312) ^ 0x5E7EF860)
                                           - 262658
                                           - 1585117626 > 0x7FFFFFFD)) ^ v10))
                            - 4LL))();
}

  ;
}

void sub_1001A1D30(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((a1 - 2 * (a1 & 0x7A08EF3) + 127962867) ^ 0xD9663328));
  __asm { BR              X9 }

uint64_t sub_1001A1DC0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * (((*(_DWORD *)(v2 - 0x27E11828102FB971LL) == 2084229119) * ((v1 + 372) ^ 0x52F)) ^ v1)))();
}

uint64_t sub_1001A1E04@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *(_DWORD *)(v2 - 0x27E11828102FB979LL) - 1925760358;
  unsigned int v4 = *(_DWORD *)(v2 - 0x27E11828102FB97DLL) + 1983425364 + 187 * (v1 ^ 0x251);
  BOOL v5 = v3 < 0xA09CF8AA;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0xA09CF8AA) {
    BOOL v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((56 * v6) ^ v1)) - 8LL))();
}

uint64_t sub_1001A1EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v7 = *(_DWORD *)(a1 + 32) ^ v5;
  uint64_t v8 = *(void *)(v4 - 0x27E11828102FB989LL);
  uint64_t v9 = (v3 - 325434904);
  int v10 = ((*(unsigned __int8 *)(v8 + v9) ^ 0x2C) << (((v6 - 49) | 0x31) ^ 0x29)) | ((*(unsigned __int8 *)(v8 + (v9 + 1)) ^ 0x2C) << 16) | ((*(unsigned __int8 *)(v8 + (v9 + 2)) ^ 0x2C) << 8) | *(unsigned __int8 *)(v8 + (v9 + 3)) ^ 0x2C;
  return ((uint64_t (*)(void))(*(void *)(a2
                                        + 8LL
                                        * ((101
                                          * (((v2 + v10 - ((2 * v10) & 0xF8759FFE) + 0x1000000) & 0xFFFFFF ^ 0x3ACFFF)
                                           - v7 != -353840785)) ^ v6))
                            - 12LL))();
}

void sub_1001A1F74()
{
  *int v0 = -2084203318;
}

uint64_t sub_1001A21B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(*a1 - 0x3F8123127DDA1A64LL) = 0LL;
  return (*(uint64_t (**)(void))(a2 + 8LL * ((341 * (*v2 == v3)) ^ v4)))();
}

void sub_1001A2204(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 24) - 0x708F6A420CBDE157LL) = v3;
  *int v1 = v2;
  JUMPOUT(0x1001A21ACLL);
}

uint64_t sub_1001A2224(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 24) - 0x1F589EA4AC42BDE5LL) + 893794073;
  int v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL) + 893794073;
  int v4 = (v2 < 713110505) ^ (v3 < 713110505);
  BOOL v5 = v2 > v3;
  if (v4) {
    BOOL v6 = v2 < 713110505;
  }
  else {
    BOOL v6 = v5;
  }
  int v1 = *(_DWORD *)(a1 + 16) - 1178560073 * ((-2 - ((a1 | 0x5930FF1B) + (~(_DWORD)a1 | 0xA6CF00E4))) ^ 0x1C5B7886);
  return (*((uint64_t (**)(void))*(&off_101826020 + (v1 ^ 0x36B))
}

uint64_t sub_1001A2304()
{
  int v4 = v2 + 1619234322 + 3 * (v1 ^ 0x600);
  BOOL v5 = v4 < 1438551549;
  BOOL v6 = v3 + 1619235117 < v4;
  if (v3 + 1619235117 < (((v1 - 1669) | 0x151) ^ 0x55BE8C28) != v5) {
    BOOL v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((61 * !v6) ^ v1)) - 4LL))();
}

uint64_t sub_1001A238C()
{
  unsigned int v3 = (v1 + 1836782086) & 0x9284EF3F;
  int v4 = v3 - v2 - 361367931;
  if (v2 + 180683568 < 0) {
    int v4 = v2;
  }
  return (*(uint64_t (**)(void))(v0 + 8LL * (int)((2015 * (v4 - 1966800081 >= 0)) ^ v3)))();
}

uint64_t sub_1001A2420()
{
  return (*(uint64_t (**)(void))(v0
                              + 8LL
                              * ((1356
                                * (((v2 - 26) ^ ((*(_DWORD *)(*v4 + 4LL * v5) ^ v1) > (*(_DWORD *)(*v3 + 4LL * v5) ^ v1))) & 1)) ^ v2)))();
}

uint64_t sub_1001A2468(uint64_t a1, int a2, unsigned int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((((((a2 | 0x1D4) - 477267546) & 0x1C72879F) - 783) * (v4 < a3)) ^ (a2 | 0x1D4)))
                            - (((a2 | 0x1D4u) + 326) ^ 0x317LL)))();
}

uint64_t sub_1001A24B4()
{
  return (*(uint64_t (**)(void))(v0 + 8LL * ((2015 * (v2 - 1966800081 >= 0)) ^ v1)))();
}

_DWORD *sub_1001A24E4(_DWORD *result)
{
  *uint64_t result = -1253413296 - v1;
  return result;
}

uint64_t sub_1001A24F8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_101821A28 + ((108 * (*(_DWORD *)(a2 + 4) == 510884209)) ^ 0x58Eu) - 1) - 12))();
}

uint64_t sub_1001A2538(uint64_t a1, uint64_t a2)
{
  int v2 = **(unsigned __int8 **)(a2 + 8);
  BOOL v3 = v2 == 0;
  char v4 = (v2 != 0) ^ 0x6B;
  if (v3) {
    char v5 = -8;
  }
  else {
    char v5 = -6;
  }
  *(_BYTE *)(a1 + 88) = v4 + v5;
  return 0LL;
}

uint64_t sub_1001A2570()
{
  return 4294925278LL;
}

void sub_1001A2578(uint64_t a1)
{
  int v1 = 628203409 * (((a1 | 0x89B748DF) - a1 + (a1 & 0x7648B720)) ^ 0xB3F44EC);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 24) - 0x5BFD90C18C6562B2LL) - 667817785;
  unsigned int v3 = *(_DWORD *)(a1 + 20) + v1 - 426424464;
  BOOL v4 = v2 < 0x3F4FAF31;
  BOOL v5 = v2 > v3;
  if (v3 < 0x3F4FAF31 != v4) {
    BOOL v5 = v4;
  }
  __asm { BR              X9 }

uint64_t sub_1001A2658(uint64_t a1)
{
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 40) + v2 - 1730004931 + (v3 ^ 0x7DCu));
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL
                                             * ((494 * (((v4 - ((2 * v4) & 0x7A) + 1550691389) & 0x1F) != 2)) ^ v3))
                            - 4LL))();
}

uint64_t sub_1001A26B4()
{
  unsigned int v4 = (v3 ^ 0x15C) + v2 - 1528463873;
  BOOL v5 = v4 < 0xC03446C;
  BOOL v6 = v4 > v0 - 1287070549;
  if (v0 - 1287070549 < ((191 * (v3 ^ 0x15C)) ^ 0xC034690u) != v5) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v1 + 8LL * ((154 * !v6) ^ v3)))();
}

uint64_t sub_1001A2734(uint64_t a1)
{
  unsigned int v5 = *(unsigned __int8 *)(v1 + (v3 + 345));
  return (*(uint64_t (**)(uint64_t, void))(v2 + 8LL * (int)((505 * ((v5 >> 7) ^ 1)) ^ v4)))( a1,  (((v4 + 1328487167) & 0xB0D0E35C ^ 0x1A4) & (2 * v5)) + (v5 ^ 0xBEF37B7E) + 1602223602);
}

uint64_t sub_1001A27A8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  unsigned int v7 = a2 + v6 - 2103521863;
  unsigned int v8 = v4 + ((a4 - 973564681) & 0x3A0765DC) - 1072300337;
  int v9 = (v8 < 0x18D067E8) ^ (v7 < 0x18D067E8);
  BOOL v10 = v7 > v8;
  if (v9) {
    BOOL v10 = v7 < 0x18D067E8;
  }
  return (*(uint64_t (**)(void))(v5 + 8LL * ((216 * !v10) ^ (a4 - 1324))))();
}

uint64_t *sub_1001A2830@<X0>(uint64_t *result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v8 = result[6];
  uint64_t v10 = *result;
  uint64_t v9 = result[1];
  *a3 = ((v6 + 1324) ^ 0xD0EC2AB8) + v5;
  *(_DWORD *)(v10 - 0x139154EEB4327Fsub_1000EC398((uint64_t)va, 0LL) = v4;
  *(_DWORD *)(v8 - 0x30CF5C205D591B6sub_1000EC398((uint64_t)va, 0LL) = a2;
  *(void *)(v9 - 0x3EA9131FAE910FB8LL) = v3 + (v7 - 2008948927);
  *((_DWORD *)result + 8) = 2084229119;
  return result;
}

void sub_1001A2AC8(_DWORD *a1)
{
  unsigned int v1 = 235795823 * (((_DWORD)a1 - 1876425126 - 2 * (a1 & 0x9028065A)) ^ 0x4854F03);
  unsigned int v2 = a1[9] + v1;
  int v3 = *a1 ^ v1;
  BOOL v5 = (v3 & 0x30000000) == 0x10000000 || (v3 & 0x3F000000) == 1056964608;
  __asm { BR              X11 }

uint64_t sub_1001A2B9C@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, uint64_t a6, unint64_t *a7, int a8, unint64_t *a9, char a10, int a11)
{
  uint64_t v15 = *(void *)(v12 + 8);
  unsigned int v16 = 1755732067 * (((&a4 | 0xA5D81ADF) - (&a4 | 0x5A27E520) + 1512564000) ^ 0x7B1EA704);
  a9 = &STACK[0x1BA3132C8F250A4F];
  a4 = &STACK[0x1C6D093801E6EF71];
  a10 = (99 * (((&a4 | 0xDF) - (&a4 | 0x20) + 32) ^ 4)) ^ 0xD7;
  a5 = (((2 * v11) & 0xFBBF9FCE ^ 0xF9841040) + (v11 ^ 0x831DC68D ^ (v14 - 1127)) + 1797714942) ^ v16;
  a8 = v16 + 1172343986 + v14;
  a6 = v15;
  a7 = &STACK[0x53090DC262200403];
  uint64_t v17 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (v14 ^ 0x535)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v13 + 8LL * ((828 * (a11 == 2084229119)) ^ v14)) - 8LL))(v17);
}

uint64_t sub_1001A2CDC()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (((((v2 + 1239) | 0x82) + ((v2 + 223) | 0x40) - 907) * (v1 == 1056964608)) ^ v2))
                            - 4LL))();
}

uint64_t sub_1001A2D18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  return (*(uint64_t (**)(void))(v11 + 8LL * ((81 * (a10 + 4 >= a10)) ^ v10)))();
}

uint64_t sub_1001A2D8C()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_1001A2DE0@<X0>(uint64_t a1@<X8>)
{
  BOOL v9 = v4 > 0x24BF18AC;
  *(_BYTE *)(a1 + (v7 - 1582360328)) = *(_BYTE *)(v1 + (v7 - 1582360328));
  if (v9 == v7 + 2096103500 < (v2 ^ 0x323 ^ v3)) {
    BOOL v9 = v7 + 2096103500 < v5;
  }
  return ((uint64_t (*)(BOOL))(*(void *)(v8 + 8LL * ((v9 * v6) ^ v2)) - 4LL))(v7 + 2096103500 < v5);
}

uint64_t sub_1001A2E50()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((2 * v1) & 0xBBBFFFDA ^ 0x9022B952)
                                           + (v1 ^ 0xB7CEA356)
                                           + ((v0 + 1525) ^ 0x33BFF96F) != 295697989)
                                          * (v0 ^ 0x516)) ^ v0))
                            - 4LL))();
}

uint64_t sub_1001A2EC0()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((76 * (v2 + v1 + (v0 ^ 0x1C1u) + 572520733 < 0xC)) ^ v0)) - 8LL))();
}

uint64_t sub_1001A2F0C(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((14
                                          * (((a1 + v3 - ((((v1 - 1776) | 0x5A9) - 1452) & v2) + 1445) & 0xFFFFFFFC) <= a1 + v3 + 1448)) ^ v1))
                            - 8LL))();
}

uint64_t sub_1001A2F5C@<X0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>, uint8x8_t a4@<D0>)
{
  uint64_t v8 = (a2 - 572);
  a4.i32[0] = *(_DWORD *)(v8 + a1 + a3 - 882);
  *(_DWORD *)(a3 - 3 + (v5 + v4)) = vmovn_s16((int16x8_t)vmovl_u8(a4)).u32[0];
  return (*(uint64_t (**)(void))(v7 + 8LL * (int)((1756 * (((2 * (_DWORD)v8) ^ 0x6E2) != v6)) ^ v8)))((2 * (_DWORD)v8) ^ 0x7A4u);
}

uint64_t sub_1001A2FC4@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 3 + (v3 + v2)) = *(_DWORD *)(v1 - 3 + (v3 + v2));
  return (*(uint64_t (**)(void))(v6 + 8LL * ((523 * (((46 * (v5 ^ 0x5AE)) ^ 0x146) == v4)) ^ (v5 - 1073))))();
}

uint64_t sub_1001A3020(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((a1 + 287 + 9 * (a1 ^ 0x1E3) - 1367) * (v1 != v2)) ^ a1)) - 4LL))();
}

uint64_t sub_1001A3054@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + (v4 + v3)) = *(_BYTE *)(v1 + (v4 + v3));
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * ((v5 - 1127) ^ (8 * (((v5 + 1006112058) & 0xC407EF7D ^ 0xFFFFFD9E) + v4 != v2))))
                            - 4LL))();
}

uint64_t sub_1001A30A0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((1861
                                * (((*(void *)(v1 + 16) == 0x5640F59D98E42E33LL) ^ (9 * (v0 ^ 0xC0))) & 1)) ^ v0)))();
}

uint64_t sub_1001A30E4@<X0>(uint64_t a1@<X8>, int a2)
{
  *(_DWORD *)(a1 - 0x5640F59D98E42E33LL) = a2;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL
                                             * ((21 * (*(void *)(v3 + 24) != 0x5A178A95705CCB00LL)) ^ v2 ^ 0x7C8))
                            - 8LL))();
}

void sub_1001A3140(uint64_t a1@<X8>)
{
  *(void *)(a1 - 0x5A178A95705CCB0sub_1000EC398((uint64_t)va, 0LL) = v2;
  *(_DWORD *)(v1 + 32) = 2084229119;
}

uint64_t sub_1001A31D4(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))*(&off_101821A28 + ((58 * (*(_DWORD *)(a2 + 4) == 510884209)) ^ 0x55Bu) - 1))();
}

uint64_t sub_1001A3210(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0x7BE3FEFF) + 2 * **(unsigned __int8 **)(a2 + 8) - 151060490;
  return 0LL;
}

uint64_t sub_1001A3240()
{
  return 4294925278LL;
}

void sub_1001A3248(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 3804331 * ((a1 - 2 * (a1 & 0xF3A65B02) - 207201534) ^ 0x8D737EF4);
  int v2 = (*(_BYTE *)a1 ^ (-85 * ((a1 - 2 * (a1 & 2) + 2) ^ 0xF4)));
  ((void (*)(char *, void (*)()))*(&off_101826020 + (v1 ^ 0x3FC)))( (char *)*(&off_101826020 + v1 - 716) - 4,  sub_1001A6A6C);
  uint64_t v3 = *(void *)((char *)*(&off_101826020 + v1 - 578) - 4);
  unsigned int v5 = v1 + 1755732067 * ((2 * (&v4 & 0x858AF40) - &v4 - 140029761) ^ 0x2961ED64) + 141;
  uint64_t v4 = v3;
  sub_10017F380((uint64_t)&v4);
  __asm { BR              X8 }

uint64_t sub_1001A3384( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  unsigned int v20 = 1225351577 * (((&a16 | 0x82E44BD3) - (&a16 & 0x82E44BD3)) ^ 0xA17E93C5);
  a16 = v20 + v17 - 333;
  a17 = v20 ^ 0x19;
  sub_1001936AC((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * ((2041 * (**(_DWORD **)(v19 + 8LL * (20 * (v17 ^ 0x311) - 94)) == 398 * ((20 * (v17 ^ 0x311)) ^ 0x106) - 796)) ^ (20 * (v17 ^ 0x311))))
                                                                                                - 8LL))( v21,  v22,  v23,  v24,  v25,  v26,  v27);
}

uint64_t sub_1001A3454@<X0>(int a1@<W8>)
{
  uint64_t v8 = *(unsigned int **)(v6 + 8LL * (a1 ^ 0x34F));
  BOOL v9 = *(void **)(v6 + 8LL * (a1 - 623));
  uint64_t v10 = *v8;
  uint64_t v11 = (_BYTE *)*v9;
  v22[0] = *(_BYTE *)*v9 - 78;
  v22[1] = v11[1] - 78;
  void v22[2] = v11[2] - 78;
  v22[3] = v11[3] - 78;
  v22[4] = v11[4] - 78;
  v22[5] = v11[5] - 78;
  void v22[6] = v11[6] - 78;
  v22[7] = v11[7] - 78;
  v22[8] = v11[8] - 78;
  v22[9] = v11[9] - 78;
  v22[10] = v11[10] - 78;
  v22[11] = v11[11] - 78;
  v22[12] = v11[12] - 78;
  v22[13] = v11[13] - 78;
  v22[14] = v11[14] - 78;
  v22[15] = v11[15] - 78;
  v22[16] = v11[16] - 78;
  v22[17] = v11[17] - 78;
  v22[18] = v11[18] - 78;
  v22[19] = v11[19] - 78;
  unsigned __int8 v22[20] = v11[20] - 78;
  v22[21] = v11[21] - 78;
  uint64_t v12 = (_BYTE *)*v9;
  v22[22] = v12[22] - 78;
  v22[23] = v12[23] - 78;
  _BYTE v22[24] = v12[24] - 78;
  v22[25] = v12[25] - 78;
  v22[26] = v12[26] - 78;
  v22[27] = v12[27] - 78;
  v22[28] = v12[28] - 78;
  v22[29] = v12[29] - 78;
  uint64_t v13 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v6 + 8LL * (a1 - 592));
  int v14 = v13(v10, v22, v2);
  unsigned int v15 = ((2 * v14) & 0xC6AAB438) + (v14 ^ 0xE3555A1C);
  if (v15 != -480945636)
  {
    if (v15 == -480944534)
    {
      uint64_t v16 = *v8;
      int v17 = **(_BYTE ***)(v6 + 8LL * (v4 ^ 0x3B6));
      v23[0] = *v17 - 45;
      v23[1] = v17[1] - 45;
      v23[2] = v17[2] - 45;
      void v23[3] = v17[3] - 45;
      int v23[4] = v17[4] - 45;
      void v23[5] = v17[5] - 45;
      v23[6] = v17[6] - 45;
      v23[7] = v17[7] - 45;
      v23[8] = v17[8] - 45;
      v23[9] = v17[9] - 45;
      _BYTE v23[10] = v17[10] - 45;
      v23[11] = v17[11] - 45;
      v23[12] = v17[12] - 45;
      v23[13] = v17[13] - 45;
      v23[14] = v17[14] - 45;
      v23[15] = v17[15] - 45;
      v23[16] = v17[16] - 45;
      v23[17] = v17[17] - 45;
      v23[18] = v17[18] - 45;
      v23[19] = v17[19] - 45;
      int v18 = v13(v16, v23, v2);
      int v19 = (2 * v18) & 0x1F8D9CFA;
      unsigned int v15 = (v18 ^ 0x8FC6CE7D) + 1937587099;
    }

    else
    {
      int v19 = 535736316;
    }

    __asm { BR              X8 }
  }

  *(_DWORD *)(v7 + 348) |= ((v4 - 532) | 0x94) ^ 0x196;
  *(_DWORD *)(v7 + 48) = 1372200252;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, _DWORD *))(v6 + 8LL * (v4 - 689)))( *v2,  v7 + 336,  v7 + 340,  v7 + 344,  v3);
  uint64_t v21 = *(void *)(v1 + 8);
  *(_DWORD *)(*(void *)(v1 + 24) - 0x589C7105EC0C7F2ALL) = *v2;
  *(_DWORD *)(v21 - 0x8C0F0A4F49AC022LL) = *v3;
  *(_DWORD *)(v1 + 20) = 2084229119;
  return result;
}

void sub_1001A3874(uint64_t a1)
{
  BOOL v4 = *(void *)(a1 + 40) != 0x27E11828102FB989LL
    && *(void *)(a1 + 16) != 0x31BC703A95C2A15CLL
    && *(void *)a1 != 0x781B11C067843F9ALL;
  int v1 = *(_DWORD *)(a1 + 8) + 535753261 * ((((2 * a1) | 0xD63BF148) - a1 - 1797126308) ^ 0x61E9F68B);
  __asm { BR              X10 }

uint64_t sub_1001A3988( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 8LL * (((*(_DWORD *)(a21 - 0x27E11828102FB971LL) == 2084229119) * (v22 + 279)) ^ v22))
                                                                                                - 12LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t sub_1001A39D0@<X0>( int a1@<W8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v21 = (v19 - 941359592) & 0x381C023F;
  if (a1 + *(_DWORD *)(a13 + 32) - 634882659 >= (v21 ^ 0xFFFFFDC8)) {
    int v22 = 913941310;
  }
  else {
    int v22 = 913941322;
  }
  v23.n128_u64[0] = 0x5858585858585858LL;
  v23.n128_u64[1] = 0x5858585858585858LL;
  v24.n128_u64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v24.n128_u64[1] = 0x2C2C2C2C2C2C2C2CLL;
  unsigned int v25 = *(_DWORD *)(a18 - 0x27E11828102FB979LL) + 987228910;
  BOOL v26 = v25 < 0x4E3DA906;
  if (v26 == ((v21 - 94) ^ 0x4E3DA6F0u) + v21 - 88 > 0x4E3DA906) {
    BOOL v26 = v25 > 0x4E3DA906;
  }
  *(_DWORD *)(v20 - 148) = 1017969347;
  *(_DWORD *)(v20 - 144) = v22;
  return v27(a2, a3, a4, a5, v23, v24);
}

uint64_t sub_1001A3C28( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _DWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  int v26 = 1759421093 * ((((v25 - 136) | 0x24021180) - (v25 - 136) + ((v25 - 136) & 0xDBFDEE78)) ^ 0x977FA1D4);
  *(void *)(v25 - 128) = a22;
  *(_DWORD *)(v25 - 136) = ((((v23 - 375) ^ v22) + a2) & 0xFFFFFFF0) - v26 + 1941479927;
  *(_DWORD *)(v25 - 132) = a2 - a15 + ((v23 + 6) ^ 0x3B53A1EB) + v26;
  *(_DWORD *)(v25 - 120) = v23 - v26 + 937;
  uint64_t v27 = ((uint64_t (*)(uint64_t))*(&off_101826020 + v23 - 373))(v25 - 136);
  return ((uint64_t (*)(uint64_t))(*(void *)(v24
                                                      + 8LL
                                                      * ((2 * (*a16 != 2084229119)) | (4 * (*a16 != 2084229119)) | v23))
                                          - 12LL))(v27);
}

uint64_t sub_1001A3D0C( __n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, int a23, int a24, uint64_t a25, uint64_t a26, uint64_t a27, unsigned int a28)
{
  v29.n128_u64[0] = 0x5858585858585858LL;
  v29.n128_u64[1] = 0x5858585858585858LL;
  v30.n128_u64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v30.n128_u64[1] = 0x2C2C2C2C2C2C2C2CLL;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 + 8LL * ((((a24 ^ 0x1BF) + 200) * (a18 < HIDWORD(a17))) ^ a24)) - 8LL))( 2668600447LL,  1626366849LL,  1104509500LL,  a28,  a27,  3706460890LL,  4083243188LL,  3190457796LL,  a1,  a2,  a3,  a4,  v29,  v30,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
}

uint64_t sub_1001A3DA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 8LL * (v18 - 385)) + (v18 + 224) - 714LL);
  uint64_t v25 = *v23;
  unsigned int v26 = a1 + 1626366849;
  *(_BYTE *)(*v23 + v26) = 44;
  *(_BYTE *)(v25 + v26 + 1) = 39 - (v20 & 0xF6);
  *(_BYTE *)(v25 + (a1 + 1626366851)) = (v22 ^ 0xAE) - (v20 & (2 * (v22 ^ 0xAE))) + 44;
  *(_BYTE *)(v25 + v26 + 3) = v19 ^ 0x53;
  return v24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void sub_1001A41C8()
{
}

void sub_1001A41EC()
{
}

uint64_t sub_1001A4208( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26, int a27)
{
  int v30 = (a27 ^ (v29 - 97) ^ ((v28 - 477) | 0x60))
      - ((2 * (a27 ^ (v29 - 97) ^ ((v28 - 477) | 0x60))) & 0x1F17EB2C)
      - 1886653034;
  return ((uint64_t (*)(void))(*(void *)(v27
                                        + 8LL
                                        * ((1383
                                          * (((v30 << ((v28 - 120) ^ 0x67)) & 0x993D4FBE ^ 0x19154B2C)
                                           + (v30 ^ 0x43155249)
                                           + 1073741676 != 211724107)) ^ (v28 + 327)))
                            - 4LL))();
}

uint64_t sub_1001A42B4()
{
  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8LL
                                            * (((((v3 - 1186) ^ 0x3C7u) + 862017019 + v1 + v0 + 35 > 7)
                                              * (((v3 - 1186) | 0x1A) - 260)) ^ v3)))(v2);
}

uint64_t sub_1001A4324( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v27
                                                      + 8LL
                                                      * ((38
                                                        * (a25
                                                         - v25
                                                         - a4
                                                         - 0x38046E592152C048LL
}

uint64_t sub_1001A4384(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL
                                             * ((199 * ((((a2 - 274688517) ^ (v2 < 0x20)) & 1) == 0)) ^ (a2 + 831)))
                            - (((a2 - 249) | 0x10u) ^ 0x11ELL)))();
}

uint64_t sub_1001A43D4(int a1, double a2, double a3, double a4, double a5, int8x16_t a6, int8x16_t a7)
{
  int v13 = a1 & 0x105F69DF;
  unsigned int v14 = v11 + 862017019 + v10 + v13 + 71;
  uint64_t v15 = v8 + v14;
  int8x16_t v16 = vrev64q_s8(*(int8x16_t *)(v15 - 15));
  int8x16_t v17 = vextq_s8(v16, v16, 8uLL);
  int8x16_t v18 = vrev64q_s8(*(int8x16_t *)(v15 - 31));
  int8x16_t v19 = vextq_s8(v18, v18, 8uLL);
  uint64_t v20 = v7 + v14;
  int8x16_t v21 = vrev64q_s8(vaddq_s8(vsubq_s8(v17, vandq_s8(vaddq_s8(v17, v17), a6)), a7));
  *(int8x16_t *)(v20 - 15) = vextq_s8(v21, v21, 8uLL);
  int8x16_t v22 = vrev64q_s8(vaddq_s8(vsubq_s8(v19, vandq_s8(vaddq_s8(v19, v19), a6)), a7));
  *(int8x16_t *)(v20 - 31) = vextq_s8(v22, v22, 8uLL);
}

void sub_1001A4480()
{
}

uint64_t sub_1001A448C()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((v2 + 1352) ^ (79 * (v0 - v3 != -516003094)))) - 4LL))();
}

uint64_t sub_1001A4500()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_1001A454C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  *(_BYTE *)(*v12 + (v13 + a8)) = *(_BYTE *)(*v12 + (v10 + a6));
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * ((1343 * (v8 != 512462634)) ^ v9)) - 8LL))();
}

uint64_t sub_1001A45B0()
{
  unsigned int v5 = (v1 + 417178493) & 0xE7225DFF;
  int v6 = v0 - 512463111 + v2 + 478;
  unsigned int v7 = *(_DWORD *)(v4 - 144) + 1595918428;
  BOOL v8 = v6 + 1921353332 < v7;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (int)((427 * v8) ^ (v5 + 198))) - 8LL))();
}

void sub_1001A4850()
{
}

void sub_1001A4874()
{
}

uint64_t sub_1001A4948( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  *(_BYTE *)(*v22 + (v19 + a8)) = -84;
  else {
    BOOL v23 = v19 + 432307093 < (a19 + 834833240);
  }
  return ((uint64_t (*)(void))(*(void *)(v21 + 8LL * ((450 * v23) ^ v20)) - 4LL))();
}

uint64_t sub_1001A49C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  BOOL v17 = v12 < v13;
  int v18 = v9 + 1;
  *(_BYTE *)(*v16 + (v18 + a8)) = 44;
  if (v17 == v18 + v10 < v8) {
    BOOL v17 = v18 + v10 < v12;
  }
  return ((uint64_t (*)(BOOL))(*(void *)(v15 + 8LL * ((v17 * v14) ^ v11)) - (v11 - 271) + 474LL))(v18 + v10 < v12);
}

void sub_1001A4A18(int a1@<W8>)
{
  *(void *)(v4 - 0x31BC703A95C2A15CLL) = *v1;
  *(_DWORD *)(v5 - 0x781B11C067843F9ALL) = a1;
  *int v1 = 0LL;
  *(void *)(v8 - 0x27E11828102FB981LL) = 0x2A644B252A644B25LL;
  *uint64_t v3 = 325434904;
  unsigned int v2 = ((2 * (*(_DWORD *)(v8 - 0x27E11828102FB975LL) & 0xFFFFFFFE ^ 0x345A99D2)) & 0x5B10C7E4)
     - (*(_DWORD *)(v8 - 0x27E11828102FB975LL) & 0xFFFFFFFE ^ 0x345A99D2)
     + 1383570445;
  *(_DWORD *)(v8 - 0x27E11828102FB975LL) = ((v2 & 0xB0333BFC ^ 0x200120D8)
                                          + (v2 ^ 0xD3F21F24)
                                          - ((v2 ^ 0xD3F21F24) & 0xB0333BFC)) ^ 0x5EC2107;
  *(_DWORD *)(v7 + 28) = *v6;
}

void sub_1001A4B58(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 1225351577 * ((2 * (a1 & 0x2B9C6F1D) - a1 + 1415811298) ^ 0x77F948F4);
  if (*(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL) - 1966800080 >= 0) {
    unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL) - 1966800080;
  }
  else {
    unsigned int v3 = 1966800080 - *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL) - 1966800080 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL) - 1966800080;
  }
  else {
    unsigned int v4 = 1966800080 - *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  v6[1] = (460628867 * ((v6 & 0x5D0BE78 | ~(v6 | 0x5D0BE78)) ^ 0xB6B9C3FA)) ^ (v1 + 968);
  sub_10018526C((uint64_t)v6);
  if (v3 >= v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v3;
  }
  __asm { BR              X15 }

uint64_t sub_1001A4CE4()
{
  BOOL v5 = v2 + 1350016459 > ((v1 - 64) ^ 0x31E8FF75 ^ (21 * (v1 ^ 0x36F))) || v2 + 1350016459 < v3 - 1310131017;
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((1358 * v5) ^ v1)) - 12LL))();
}

uint64_t sub_1001A4D48()
{
  uint64_t v12 = 4LL * (v8 + v6);
  int v13 = v1 - 366164238 + (*(_DWORD *)(*(void *)(v11 - 0x1F589EA4AC42BDE1LL) + v12) ^ v7);
  *(_DWORD *)(*(void *)(v10 - 0x1F589EA4AC42BDE1LL) + v12) = v13 + v7 - (v9 & (2 * v13));
  int v14 = v8 + 1 + v2;
  int v16 = v14 <= v3 && v14 >= v5;
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (v4 | (v16 << 6))) - 12LL))();
}

uint64_t sub_1001A4E1C()
{
  int v4 = ((v1 + 26) ^ 0x12DED322) + v2;
  int v5 = (v3 > 0xBAFCEF0) ^ (v4 < (int)(((v1 + 65) | 0xD2) ^ 0xF45030F5));
  BOOL v6 = v4 < (int)(v3 + 1951412495);
  if (v5) {
    BOOL v6 = v3 > 0xBAFCEF0;
  }
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((575 * v6) ^ v1)) - 8LL))();
}

uint64_t sub_1001A4E9C( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  int v21 = a1 ^ 0x1E6;
  int v22 = *(_DWORD *)(*(void *)(a10 - 0x1F589EA4AC42BDE1LL) + 4LL * (v17 + v15));
  *(_DWORD *)(*(void *)(v20 - 0x1F589EA4AC42BDE1LL) + 4LL * (v17 + v15)) = v11
                                                                           - 366164237
                                                                           + (v22 ^ 0x3913DFD7)
                                                                           + ((253 * (v21 ^ 0xE5)) ^ (v16 + 426))
                                                                           - (v18 & (2
                                                                                   * (v11
                                                                                    - 366164237
                                                                                    + (v22 ^ 0x3913DFD7))));
  BOOL v23 = v17 + v12 < v13;
  if (v19 > v14 != v17 + v12 < a8 + 26) {
    BOOL v23 = v19 > v14;
  }
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((486 * v23) ^ v21)) - 8LL))();
}

uint64_t sub_1001A4FA4()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (((v1 == ((v2 - 2079384636) & 0x7BF0E663) + 0x47FECA415D334EBLL)
                                          * ((v2 ^ 0x3ED) - 530)) | v2))
                            - 12LL))();
}

uint64_t sub_1001A4FFC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1
                                                    + 8LL
                                                    * ((((((v3 + v4 - 1) < 0x7FFFFFFF) ^ (5 * (v2 ^ 0x49))) & 1)
                                                      * (v2 - 965)) | v2)))( a1,  (v2 + 45));
}

uint64_t sub_1001A503C(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((a2 ^ 0x658) + 77) | (2 * (v3 < 0x7FFFFFFF))))
                            - 22 * (a2 ^ 0x46Au)
                            + 802LL))();
}

uint64_t sub_1001A51D8()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((307
                                          * (*(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL)
}

uint64_t sub_1001A5240()
{
}

uint64_t sub_1001A5284()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
}

void sub_1001A52C4()
{
  *(_DWORD *)(v3 - 0x1F589EA4AC42BDE5LL) = (((v2 + v1) * (v0 - 1941172939)) ^ 0x753FFFF5)
                                         - 328485
                                         + ((2 * (v2 + v1) * (v0 - 1941172939)) & 0xEA7FFFEA);
}

uint64_t sub_1001A5420(_DWORD *a1)
{
  unsigned int v1 = 1178560073 * ((2 * (a1 & 0x7B1A53C3) - (_DWORD)a1 - 2065322948) ^ 0x3E71D45E);
  unsigned int v2 = a1[1] + v1;
  return ((uint64_t (*)(void))(*((void *)*(&off_101826020 + (int)(v2 - 711))
                              + (int)(((((*a1 - v1) ^ 0x7C3ACFFF) - 1 < 0x63) * (2 * (v2 ^ 0x365) + (v2 ^ 0xFFFFFC51))) ^ v2)
                              - 1)
                            - 12LL))();
}

uint64_t sub_1001A54BC@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(*(void *)(result + 8) - 0x6C482493D26EC5EDLL) = ((v2 - 2084229284) ^ a2)
                                                              - ((2 * ((v2 - 2084229284) ^ a2) - 85198) & 0xF8759FFE)
                                                              + 2084186520;
  return result;
}

void sub_1001A5578(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 535753261 * (a1 ^ 0xAF40E2F);
  __asm { BR              X9 }

uint64_t sub_1001A55F8@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((((((*(_BYTE *)(v2 - 0x27E11828102FB975LL) & 1) == 0) ^ (((a1 + 57) ^ 0x64) - 3)) & 1)
                                          * (69 * ((a1 - 455) ^ 0x364) + 1246)) ^ (a1 - 455)))
                            - 12LL))();
}

uint64_t sub_1001A564C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v2
                                                    + 8LL
                                                    * ((35
                                                      * (((v1 + 46) ^ (*(_DWORD *)(v3
                                                                                                  - 0x27E11828102FB97DLL)
                                                                                      - 711215909 == (v1 ^ 0x205))) & 1)) ^ v1)))( a1,  *(void *)(v3 - 0x27E11828102FB989LL));
}

uint64_t sub_1001A56B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v12 = ((unint64_t)&a9 ^ 0x19B76FFFDDDFDB57LL)
      - 0x100202010005757LL
      + ((2LL * (void)&a9) & 0x336EDFFFBBBFB6A0LL);
  a9 = v9 - 1;
  *(_BYTE *)(a2 + va_start(va, a9) = (((v10 ^ 0x85) - 77) ^ v12 ^ 0x89) * (v12 + 17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v11 + 8LL * ((1143 * (a9 == 0)) ^ v10 ^ 0x85)) - 4LL))(a1);
}

void sub_1001A574C()
{
}

void sub_1001A5754()
{
  *int v0 = 1132215612;
}

void sub_1001A58BC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 1759421093 * ((a1 - 1364022623 - 2 * (a1 & 0xAEB2AAA1)) ^ 0x1DCF1AF5);
  __asm { BR              X9 }

uint64_t sub_1001A5968()
{
  BOOL v3 = (*(uint64_t (**)(uint64_t))(v0 + 8LL * (v1 - 290)))(200LL) != 0;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((291 * v3) ^ v1)) - (((v1 - 248) | 0x463u) ^ 0x567LL)))();
}

uint64_t sub_1001A59B4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(v5 + 8LL * (v7 - 1266)))(a1, 0LL);
  if ((_DWORD)result == 16)
  {
    v3 -= 7;
    goto LABEL_7;
  }

  if ((_DWORD)result == 12)
  {
LABEL_7:
    uint64_t result = (*(uint64_t (**)(uint64_t))(v5 + 8LL * (v4 ^ 0x575)))(a1);
    int v10 = v3;
    goto LABEL_8;
  }

  if ((_DWORD)result)
  {
    v3 -= 6;
    goto LABEL_7;
  }

  void *v6 = a1;
  int v10 = -248012685;
LABEL_8:
  *(_DWORD *)(v1 + 12) = v10 ^ v2;
  return result;
}

void sub_1001A5A34(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_1001A5A7C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((26 * (**(_BYTE **)(a2 + 8) != 0)) | 0x365u)) - 4LL))();
}

uint64_t sub_1001A5AD0(uint64_t a1, uint64_t a2)
{
  int v5 = v3 - ((((v4 - 926151395) & 0x11FD) - 156000364) & (2 * v3 - 1021768418)) + 1558599479;
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v2
                                                                       + 8LL
                                                                       * ((1911
                                                                         * (((2 * v5) & 0xFD73EF18 ^ 0xF433A110)
                                                                          + (v5 ^ 0x85E02724)
                                                                          + 905968768 != 884601868)) ^ v4))
                                                           - 4LL))( a1,  a2,  *(void *)(a1 + 96));
}

uint64_t sub_1001A5B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                                + 8LL
                                                                                * ((118
                                                                                  * (v7
                                                                                   + v6
                                                                                   + ((67 * (a5 ^ 0x1B7)) ^ ((a5 - 412) | 0x659) ^ 0x1460CEC) > 7)) ^ a5)))( a1,  a2,  a3,  a4,  v8);
}

uint64_t sub_1001A5BD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
}

uint64_t sub_1001A5C10(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  BOOL v10 = v8 < (((a7 ^ 0x10E) - v9 - 495) ^ (a4 + 1078) ^ (4 * (a7 ^ 0x3FDu)));
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v7 + 8LL * ((v10 | (16 * v10)) ^ a7 ^ 0x10E))
                                                           - 12LL))( a1,  a2,  0LL);
}

uint64_t sub_1001A5C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v15 = v13 + v12 + v11 + 444;
  uint64_t v16 = v9 + v15;
  __int128 v17 = *(_OWORD *)(v16 - 31);
  uint64_t v18 = v8 + v15;
  *(_OWORD *)(v18 - 15) = *(_OWORD *)(v16 - 15);
  *(_OWORD *)(v18 - 31) = v17;
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * ((((v10 & 0xFFFFFFE0) == 32) * (((a7 + v14) | 0x19) ^ 0x2DD)) ^ (a7 + v14 + 577)))
                            - 12LL))();
}

void sub_1001A5CBC()
{
}

uint64_t sub_1001A5CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a3 + 1424) = ((a5 - 1601076919) | 0x1A200000) + v5 + 2032094067;
  *(void *)(*(void *)(a1 + 96) + 52sub_1000EC398((uint64_t)va, 0LL) = *(void *)(a2 + 8) + 1LL;
  return 0LL;
}

uint64_t sub_1001A5E44@<X0>(int a1@<W4>, int a2@<W6>, int a3@<W8>)
{
  *(_BYTE *)(v4 + (a1 - 884601869)) = *(_BYTE *)(v5 + (a1 - 884601869));
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
}

void sub_1001A5E9C()
{
}

uint64_t sub_1001A5EA4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 48) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_1001A5EBC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 24);
  return 0LL;
}

void sub_1001A5ED4()
{
  unint64_t v0 = (qword_101935C48 + qword_101935C58) ^ (unint64_t)&v1;
  qword_101935C58 = 1126174607 * v0 + 0x245AECB3A987CA56LL;
  qword_101935C48 = 1126174607 * (v0 ^ 0x245AECB3A987CA56LL);
  unsigned int v3 = 1391
     - 1759421093
     * ((2 * ((&v2 ^ 0x24E4C56D) & 0x13C2A2D) - (&v2 ^ 0x24E4C56D) + 2126763472) ^ 0xE95AA0E9);
  uint64_t v2 = (char *)*(&off_101826020
               + ((-113 * (qword_101935C58 ^ 0x56 ^ qword_101935C48)) ^ byte_1012D3F60[byte_1012DFD40[(-113 * (qword_101935C58 ^ 0x56 ^ qword_101935C48))] ^ 0x79])
               + 182)
     - 4;
  sub_1001A58BC((uint64_t)&v2);
}

uint64_t sub_1001A6008(uint64_t a1)
{
  int v2 = 1374699841 * (a1 ^ 0x6DF41809);
  int v3 = *(_DWORD *)(a1 + 8) ^ v2;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = -2093328649 * (*(_DWORD *)(a1 + 56) + v2) + 1808816425;
  unsigned int v8 = 1224239923 * ((((2 * &v10) | 0x6A1D805E) - &v10 + 1257324497) ^ 0x47BD3DF8);
  uint64_t v10 = *(void *)a1;
  unsigned int v11 = (v7 ^ 0x77DFDFFB) - v8 + ((2 * v7) & 0xEFBFBFF6) - 4720904;
  uint64_t v12 = v5;
  uint64_t v13 = v4;
  unsigned int v16 = v3 - 1695026456 + v8;
  uint64_t v14 = v6;
  uint64_t result = ((uint64_t (*)(uint64_t *))((char *)*(&off_101826020 + (v3 ^ 0x6508107F)) - 12))(&v10);
  *(_DWORD *)(a1 + 24) = v15;
  return result;
}

uint64_t sub_1001A6154(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 32) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_1001A616C(uint64_t result)
{
  unint64_t v1 = 235795823 * ((~result & 0x2A1D36B9A93A3D3LL | result & 0xFD5E2C94656C5C2CLL) ^ 0xA1169950E3EEA8ALL);
  unint64_t v2 = *(void *)(result + 8) + v1;
  int v3 = *(_DWORD *)(result + 20) ^ v1;
  unint64_t v4 = *(void *)(result + 32) - v1;
  int v5 = *(_DWORD *)(result + 16) ^ v1;
  int v6 = *(_DWORD *)(result + 40) - v1;
  int v7 = *(_DWORD *)result ^ v1;
  BOOL v8 = v2 == v4;
  BOOL v9 = v2 >= v4;
  int v10 = !v8;
  if ((v3 & 1) == 0) {
    BOOL v9 = v10;
  }
  if (v9) {
    int v11 = v5;
  }
  else {
    int v11 = v6;
  }
  *(_DWORD *)(result + 44) = v7 ^ v11;
  return result;
}

uint64_t sub_1001A6200(uint64_t result)
{
  uint64_t v1 = 1178560073 * ((2 * (result & 0x64AC438940A5398ALL) - result + 0x1B53BC76BF5AC675LL) ^ 0xAFEC9E05CEBE17LL);
  unint64_t v2 = *(void *)(result + 16) - v1;
  unint64_t v3 = *(void *)(result + 40) + v1;
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 > v3;
  int v6 = v4;
  if (((*(_DWORD *)(result + 24) - 1178560073 * ((2 * (result & 0x40A5398A) - (_DWORD)result - 1084569995) ^ 0x5CEBE17)) & 1) != 0) {
    int v7 = v5;
  }
  else {
    int v7 = v6;
  }
  BOOL v4 = v7 == 0;
  uint64_t v8 = 4LL;
  if (!v4) {
    uint64_t v8 = 8LL;
  }
  *(_DWORD *)uint64_t result = *(_DWORD *)(result + 28) ^ (1178560073
                                                * ((2 * (result & 0x40A5398A) - result - 1084569995) ^ 0x5CEBE17)) ^ (*(_DWORD *)(result + v8) - 1178560073 * ((2 * (result & 0x40A5398A) - result - 1084569995) ^ 0x5CEBE17));
  return result;
}

void sub_1001A62A4(_DWORD *a1)
{
  unsigned int v1 = (*a1 ^ (535753261
  uint64_t v2 = *(void *)((char *)*(&off_101826020
                           + (int)((*a1 ^ (535753261
                                         * ((1711628207
                                           - (a1 | 0x66055FAF)
                                           + (a1 | 0x99FAA050)) ^ 0x930EAE7F)))
                                 - 2138963142))
                 - 4);
  unsigned int v3 = (3804331
      * ((((2 * (&v2 ^ 0x109B3193)) | 0x30565004) - (&v2 ^ 0x109B3193) - 405481474) ^ 0x76653C67)) ^ v1;
  sub_10019892C((uint64_t)&v2);
}

uint64_t sub_1001A63A8(int *a1)
{
  unsigned int v2 = a1[1] - 108757529 * (a1 ^ 0xE09C622B);
  uint64_t result = ((uint64_t (*)(void, char *))*(&off_101826020 + (int)(v2 ^ 0xE1F269AA)))( *(&off_101826020 + (int)(v2 ^ 0xE1F26918)),  (char *)*(&off_101826020 + (int)(v2 ^ 0xE1F269C8)) - 4);
  int v4 = *(_DWORD *)*(&off_101826020 + (int)(v2 ^ 0xE1F2695A));
  if ((_DWORD)result) {
    int v4 = -2084203199;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1001A6448(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 64) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_1001A6460(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = (*(_DWORD *)a1 ^ (235795823 * ((2 * (a1 & 0x5AD4AFC8) - a1 + 623595575) ^ 0xB186196E))) - 426522946;
  unsigned int v5 = v3 + 1225351577 * (((&v5 | 0xD03D750B) - (&v5 & 0xD03D750B)) ^ 0xF3A7AD1D) + 882;
  uint64_t v6 = v1;
  uint64_t v7 = v2;
  return ((uint64_t (*)(unsigned int *))((char *)*(&off_101826020 + v3) - 8))(&v5);
}

uint64_t sub_1001A6550(uint64_t result)
{
  unint64_t v1 = 1755732067 * ((2 * (result & 0x155053FA18C8728CLL) - result + 0x6AAFAC05E7378D73LL) ^ 0xB7040B3A39F130A8LL);
  uint64_t v2 = *(void *)(result + 8);
  unint64_t v3 = v2 - v1;
  uint64_t v4 = *(void *)(result + 32);
  BOOL v5 = v4 == v2;
  BOOL v6 = v4 - v1 > v3;
  if (((*(_DWORD *)(result + 20) + 1755732067 * ((2 * (result & 0x18C8728C) - (_DWORD)result - 415789709) ^ 0x39F130A8)) & 1) != 0) {
    BOOL v5 = v6;
  }
  BOOL v7 = !v5;
  uint64_t v8 = 4LL;
  if (!v7) {
    uint64_t v8 = 16LL;
  }
  *(_DWORD *)uint64_t result = *(_DWORD *)(result + v8) ^ (1755732067
                                                * ((2 * (result & 0x18C8728C) - result - 415789709) ^ 0x39F130A8)) ^ (*(_DWORD *)(result + 24) - 1755732067 * ((2 * (result & 0x18C8728C) - result - 415789709) ^ 0x39F130A8));
  return result;
}

uint64_t sub_1001A65F8(uint64_t result)
{
  unint64_t v1 = 1374699841 * ((result - 2 * (result & 0xA8F7ECC532399345LL) - 0x5708133ACDC66CBBLL) ^ 0xA6FB72C95FCD8B4CLL);
  unint64_t v2 = *(void *)(result + 16) ^ v1;
  unint64_t v3 = *(void *)(result + 8) - v1;
  BOOL v4 = v2 >= v3;
  BOOL v5 = (uint64_t)v2 < (uint64_t)v3;
  int v6 = !v4;
  if (((*(_DWORD *)(result + 24) + 1374699841 * (((_DWORD)result - 2 * (result & 0x32399345) + 842634053) ^ 0x5FCD8B4C)) & 1) == 0) {
    BOOL v5 = v6;
  }
  BOOL v7 = !v5;
  uint64_t v8 = 32LL;
  if (!v7) {
    uint64_t v8 = 28LL;
  }
  *(_DWORD *)(result + 36) = *(_DWORD *)(result + 40) ^ (1374699841
                                                       * ((result - 2 * (result & 0x32399345) + 842634053) ^ 0x5FCD8B4C)) ^ *(_DWORD *)(result + v8) ^ (1374699841 * ((result - 2 * (result & 0x32399345) + 842634053) ^ 0x5FCD8B4C));
  return result;
}

_BYTE *sub_1001A6688(_BYTE *result, char a2, unint64_t a3)
{
  unint64_t v3 = -(int)result & 7;
  if (v3 > a3) {
    LODWORD(v3) = a3;
  }
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }

  unint64_t v4 = a3 - v3;
  unint64_t v6 = v4;
  unint64_t v5 = v4 & 7;
  switch(v6)
  {
    case 0uLL:
      return result;
    case 1uLL:
      goto LABEL_20;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      goto LABEL_18;
    case 4uLL:
      goto LABEL_17;
    case 5uLL:
      goto LABEL_16;
    case 6uLL:
      goto LABEL_15;
    case 7uLL:
      *result++ = a2;
LABEL_15:
      *result++ = a2;
LABEL_16:
      *result++ = a2;
LABEL_17:
      *result++ = a2;
LABEL_18:
      *result++ = a2;
LABEL_19:
      *result++ = a2;
LABEL_20:
      *uint64_t result = a2;
      break;
    default:
      uint64_t result = (_BYTE *)((uint64_t (*)(void))((char *)&loc_1001A6718 + 4 * byte_1012D7EE7[(v5 >> 3) & 7]))();
      break;
  }

  return result;
}

uint64_t sub_1001A677C(uint64_t a1)
{
  int v2 = 460628867 * (((a1 | 0x167EA26) - a1 + (a1 & 0xFE9815D9)) ^ 0x4DF1685B);
  int v3 = *(_DWORD *)(a1 + 20) - v2;
  int v4 = *(_DWORD *)(a1 + 16) - v2;
  int v5 = *(_DWORD *)(a1 + 24) + v2;
  uint64_t v6 = *(void *)a1;
  unsigned int v7 = 1755732067
     * (((&v9 ^ 0x591711CD) & 0xA483E257 | ~(&v9 ^ 0x591711CD | 0xA483E257)) ^ 0xDCADB1BE);
  v3 += 2024873240;
  uint64_t v12 = *(void *)(a1 + 8);
  unsigned int v13 = v4 ^ v7 ^ 0xE6E42816;
  int v11 = v7 ^ (v3 + 622);
  unsigned int v9 = (v5 ^ 0xEFB62DCD) + v7 + 2143157754 + ((2 * v5) & 0xFFDF1CFC ^ 0x20930464);
  uint64_t v10 = v6;
  uint64_t result = ((uint64_t (*)(unsigned int *))((char *)*(&off_101826020 + v3) - 8))(&v9);
  *(_DWORD *)(a1 + 28) = v14;
  return result;
}

uint64_t sub_1001A68F0(uint64_t a1)
{
  int v2 = 628203409 * (((a1 | 0xBB8CAEEC) - (a1 & 0xBB8CAEEC)) ^ 0x3904A2DF);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 20) + v2;
  int v8 = *(_DWORD *)a1 - 368400168 + v2;
  unsigned int v9 = 235795823
     * (((&v11 | 0xC7C4DB7) - &v11 + (&v11 & 0xF383B248)) ^ 0x98D104EE);
  int v16 = v9 ^ (v8 + 1705);
  uint64_t v17 = v3;
  unsigned int v12 = v9 + (v7 ^ 0xF4485890) + 503246790 + ((2 * v7) & 0xCFFF7AF6 ^ 0x76F4AD6);
  uint64_t v13 = v5;
  uint64_t v14 = v4;
  uint64_t v11 = v6;
  uint64_t result = ((uint64_t (*)(uint64_t *))((char *)*(&off_101826020 + v8) - 4))(&v11);
  *(_DWORD *)(a1 + 40) = v15;
  return result;
}

uint64_t sub_1001A6A4C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = 99;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + sub_10000AE14(v1 - 80) = *(void *)(a2 + 8);
  return 0LL;
}

void sub_1001A6A6C()
{
  unint64_t v0 = (qword_101935C48 - qword_101935BB8) ^ (unint64_t)&v2;
  qword_101935BB8 = 1126174607 * (v0 - 0x245AECB3A987CA56LL);
  qword_101935C48 = 1126174607 * (v0 ^ 0x245AECB3A987CA56LL);
  uint64_t v3 = (char *)*(&off_101826020
               + ((-113 * ((qword_101935C48 - qword_101935BB8) ^ 0x56)) ^ byte_1012D3F60[byte_1012DFD40[(-113 * ((qword_101935C48 - qword_101935BB8) ^ 0x56))] ^ 0xCB])
               + 22)
     - 4;
  unsigned int v4 = 1391 - 1759421093 * ((&v3 & 0xEE36C9AC | ~(&v3 | 0xEE36C9AC)) ^ 0xA2B48607);
  sub_1001A58BC((uint64_t)&v3);
  unsigned int v4 = 1391
     - 1759421093 * ((((&v3 | 0x3845AA30) ^ 0xFFFFFFFE) - (~&v3 | 0xC7BA55CF)) ^ 0x74C7E59B);
  uint64_t v3 = (char *)*(&off_101826020
               + ((-113 * ((qword_101935C48 - qword_101935BB8) ^ 0x56)) ^ byte_1012DFF40[byte_1012DBBA0[(-113 * ((qword_101935C48 - qword_101935BB8) ^ 0x56))] ^ 0x7C])
               - 156)
     - 4;
  sub_1001A58BC((uint64_t)&v3);
  unsigned int v1 = 1225351577 * (&v3 ^ 0x239AD816);
  BYTE4(v3) = v1 ^ 0x18;
  LODWORD(v3) = v1 + 463;
  sub_1001936AC((uint64_t)&v3);
}

void sub_1001A6C6C(uint64_t a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  if (((1 << v5) & 0x1B) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 129) != *(unsigned __int8 *)(a3 + 768)
      || (int v7 = sub_100869800(a1 + 224), v7 != sub_100869800(a3)))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      int v8 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *a2;
        int v10 = sub_100869800(a3);
        int v11 = *(unsigned __int8 *)(a3 + 768);
        int v12 = *(unsigned __int8 *)(a1 + 42);
        uint64_t v13 = *(void *)(a3 + 504);
        *(_DWORD *)std::string buf = 67241216;
        int v52 = v9;
        __int16 v53 = 1026;
        int v54 = v10;
        __int16 v55 = 1026;
        int v56 = v11;
        __int16 v57 = 1026;
        int v58 = v12;
        __int16 v59 = 2050;
        uint64_t v60 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,wifi,notification,%{public}d,isLatLonAltValid,%{public}d,isWifiFixWithAssociatedAp,%{public}d ,fIsAssociatedToStaticWiFiAP,%{public}d,mct,%{public}.3lf",  buf,  0x24u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826750);
        }
        uint64_t v34 = qword_101934838;
        int v35 = *a2;
        int v36 = sub_100869800(a3);
        int v37 = *(unsigned __int8 *)(a3 + 768);
        int v38 = *(unsigned __int8 *)(a1 + 42);
        uint64_t v39 = *(void *)(a3 + 504);
        LODWORD(v42) = 67241216;
        HIDWORD(v42) = v35;
        __int16 v43 = 1026;
        int v44 = v36;
        __int16 v45 = 1026;
        int v46 = v37;
        __int16 v47 = 1026;
        int v48 = v38;
        __int16 v49 = 2050;
        uint64_t v50 = v39;
        uint64_t v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v34,  2LL,  "#GPSPowerSavings,wifi,notification,%{public}d,isLatLonAltValid,%{public}d,isWifiFixWithAssociate dAp,%{public}d,fIsAssociatedToStaticWiFiAP,%{public}d,mct,%{public}.3lf",  &v42,  36);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedWifiLocation(const CLLocationProvider_Type::Notification &, const CLLocatio nProvider_Type::NotificationData &)",  "%s\n",  v40);
      }
    }

    int v14 = sub_100869800(a3);
    char v15 = *(_BYTE *)(a3 + 768);
    double v16 = *(double *)(a3 + 504);
    if (!v14)
    {
      char v15 = 0;
      double v16 = -1.0;
    }

    *(_BYTE *)(a1 + 129) = v15;
    *(double *)(a1 + 208) = v16;
    __int128 v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a1 + sub_10000AE14(v45 - 224) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 240) = v17;
    __int128 v18 = *(_OWORD *)(a3 + 80);
    __int128 v20 = *(_OWORD *)(a3 + 32);
    __int128 v19 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 304) = v18;
    *(_OWORD *)(a1 + 256) = v20;
    *(_OWORD *)(a1 + 272) = v19;
    __int128 v22 = *(_OWORD *)(a3 + 112);
    __int128 v21 = *(_OWORD *)(a3 + 128);
    __int128 v23 = *(_OWORD *)(a3 + 96);
    *(_OWORD *)(a1 + 364) = *(_OWORD *)(a3 + 140);
    *(_OWORD *)(a1 + 336) = v22;
    *(_OWORD *)(a1 + 3++*(_DWORD *)(v3 + 52) = v21;
    *(_OWORD *)(a1 + 320) = v23;
    return;
  }

  if (v5 != 9)
  {
    if (v5 == 22) {
      return;
    }
LABEL_16:
    if (*(double *)(a1 + 184) > 0.0)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      uint64_t v24 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        int v25 = *a2;
        *(_DWORD *)std::string buf = 67240192;
        int v52 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,wifi,unhandled notification,%{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826750);
        }
        int v26 = *a2;
        LODWORD(v42) = 67240192;
        HIDWORD(v42) = v26;
        uint64_t v27 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,wifi,unhandled notification,%{public}d",  &v42,  8,  v42);
LABEL_39:
        uint64_t v41 = (uint8_t *)v27;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedWifiLocation(const CLLocationProvider_Type::Notification &, const CLLocatio nProvider_Type::NotificationData &)",  "%s\n",  v27);
        if (v41 != buf) {
          free(v41);
        }
        return;
      }
    }

    return;
  }

  *(_DWORD *)(a1 + sub_10000AE14(v45 - 224) = 0xFFFF;
  *(void *)(a1 + 236) = 0LL;
  *(void *)(a1 + 228) = 0LL;
  *(_OWORD *)(a1 + 244) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 260) = _Q0;
  *(_OWORD *)(a1 + 276) = _Q0;
  *(_OWORD *)(a1 + 292) = _Q0;
  *(_DWORD *)(a1 + 308) = 0;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 312) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 336) = 0;
  *(void *)(a1 + 340) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 348) = 0x7FFFFFFF;
  *(void *)(a1 + 360) = 0LL;
  *(void *)(a1 + 368) = 0LL;
  *(void *)(a1 + 3++*(_DWORD *)(v3 + 52) = 0LL;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 129) = 0;
  *(void *)&_Q0 = *(void *)(a1 + 184);
  *(void *)(a1 + 208) = 0xBFF0000000000000LL;
  if (*(double *)&_Q0 > 0.0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    uint64_t v33 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#GPSPowerSavings,wifi,unavailable", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      LOWORD(v42) = 0;
      uint64_t v27 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,wifi,unavailable",  &v42,  2,  v42);
      goto LABEL_39;
    }
  }

void sub_1001A7214(uint64_t a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  if (((1 << v4) & 0x1B) != 0)
  {
    int v7 = sub_100869800(a3);
    double v8 = *(double *)(a3 + 504);
    if (!v7) {
      double v8 = -1.0;
    }
    *(double *)(a1 + 216) = v8;
    __int128 v9 = *(_OWORD *)(a3 + 96);
    __int128 v10 = *(_OWORD *)(a3 + 112);
    __int128 v11 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a1 + 520) = *(_OWORD *)(a3 + 140);
    *(_OWORD *)(a1 + 492) = v10;
    *(_OWORD *)(a1 + 508) = v11;
    *(_OWORD *)(a1 + 476) = v9;
    __int128 v12 = *(_OWORD *)(a3 + 32);
    __int128 v13 = *(_OWORD *)(a3 + 48);
    __int128 v14 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a1 + 444) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 460) = v14;
    *(_OWORD *)(a1 + 412) = v12;
    *(_OWORD *)(a1 + 428) = v13;
    __int128 v15 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 3sub_10000AE14(v1 - 80) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 396) = v15;
    return;
  }

  if (v4 == 9)
  {
    *(_DWORD *)(a1 + 3sub_10000AE14(v1 - 80) = 0xFFFF;
    *(void *)(a1 + 384) = 0LL;
    *(void *)(a1 + 392) = 0LL;
    __asm { FMOV            V1.2D, #-1.0 }

    *(_OWORD *)(a1 + 400) = xmmword_1012E0070;
    *(_OWORD *)(a1 + 416) = _Q1;
    *(_OWORD *)(a1 + 432) = _Q1;
    *(_OWORD *)(a1 + 448) = _Q1;
    *(_DWORD *)(a1 + 464) = 0;
    *(_DWORD *)(a1 + 492) = 0;
    *(void *)(a1 + 476) = 0LL;
    *(void *)(a1 + 484) = 0LL;
    *(void *)(a1 + 468) = 0xBFF0000000000000LL;
    *(void *)(a1 + 496) = 0xBFF0000000000000LL;
    *(_DWORD *)(a1 + 504) = 0x7FFFFFFF;
    *(_BYTE *)(a1 + 532) = 0;
    *(void *)(a1 + 516) = 0LL;
    *(void *)(a1 + 524) = 0LL;
    *(void *)(a1 + 508) = 0LL;
    *(void *)(a1 + 216) = 0xBFF0000000000000LL;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    __int128 v21 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#GPSPowerSavings,gps,unavailable", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      LOWORD(v27[0]) = 0;
      __int128 v22 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,gps,unavailable",  v27,  2,  v27[0]);
LABEL_24:
      int v26 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedGpsLocation(const CLLocationProvider_Type::Notification &, const CLLocationPr ovider_Type::NotificationData &)",  "%s\n",  v22);
      if (v26 != buf) {
        free(v26);
      }
    }
  }

  else
  {
LABEL_16:
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    __int128 v23 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *a2;
      *(_DWORD *)std::string buf = 67240192;
      int v29 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,gps,unhandled notification,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      int v25 = *a2;
      LODWORD(v27[0]) = 67240192;
      HIDWORD(v27[0]) = v25;
      __int128 v22 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,gps,unhandled notification,%{public}d",  v27,  8,  v27[0]);
      goto LABEL_24;
    }
  }

void sub_1001A756C(uint64_t a1, int a2, int a3)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101826750);
  }
  uint64_t v6 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240448;
    int v24 = a2;
    __int16 v25 = 1026;
    int v26 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,isGpsHWActive,%{public}d,didStatusChange,%{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    LODWORD(v20) = 67240448;
    HIDWORD(v20) = a2;
    __int16 v21 = 1026;
    int v22 = a3;
    double v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,isGpsHWActive,%{public}d,didStatusChange,%{public}d",  &v20,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedGpsStatusNotification(const BOOL, const BOOL)",  "%s\n",  v16);
  }

  if (a3)
  {
    if ((a2 & 1) != 0)
    {
      sub_1001A8188(a1 + 128);
      uint64_t v7 = sub_10080E94C();
      *(_DWORD *)std::string buf = 1;
      *(double *)(a1 + 184) = sub_10080EB58(v7, buf);
      int v8 = *(unsigned __int8 *)(a1 + 41);
      *(_BYTE *)(a1 + 134) = v8;
      if (!v8)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826750);
        }
        __int128 v9 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,session started outside location controller",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826750);
          }
          LOWORD(v20) = 0;
          LODWORD(v19) = 2;
          __int128 v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,session started outside location controller",  &v20,  v19);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedGpsStatusNotification(const BOOL, const BOOL)",  "%s\n",  v17);
        }
      }

      double v10 = *(double *)(a1 + 120);
      BOOL v11 = v10 > 0.0 && *(double *)(a1 + 184) - v10 > 15.0;
      *(_BYTE *)(a1 + 128) = v11;
      *(_BYTE *)(a1 + 132) = *(_BYTE *)(a1 + 80);
      *(_BYTE *)(a1 + 131) = *(_BYTE *)(a1 + 64);
      return;
    }

    uint64_t v12 = sub_10080E94C();
    *(_DWORD *)std::string buf = 1;
    *(double *)(a1 + 200) = sub_10080EB58(v12, buf);
    sub_1001A7B08(a1);
    sub_1001A8188(a1 + 128);
    if (*(_BYTE *)(a1 + 40))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      __int128 v13 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,ending session without resetting IO",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_32;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      LOWORD(v20) = 0;
      LODWORD(v19) = 2;
      __int128 v14 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,ending session without resetting IO",  &v20,  v19,  v20);
    }

    else
    {
      *(void *)(a1 + 136) = 0LL;
      *(void *)(a1 + 144) = 0LL;
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      __int128 v15 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,ending session and resetting IO",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_32;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      LOWORD(v20) = 0;
      LODWORD(v19) = 2;
      __int128 v14 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,ending session and resetting IO",  &v20,  v19,  v20);
    }

    __int128 v18 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedGpsStatusNotification(const BOOL, const BOOL)",  "%s\n",  v14);
    if (v18 != buf) {
      free(v18);
    }
LABEL_32:
    *(_BYTE *)(a1 + 41) = 0;
  }

void sub_1001A7B08(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 168);
  if (v1 && *(_BYTE *)(a1 + 43))
  {
    uint64_t v3 = (unsigned __int16 *)(a1 + 536);
    ++*(_WORD *)(a1 + 546);
    *(_DWORD *)(a1 + 564) += *(_DWORD *)(a1 + 172);
    *(_WORD *)(a1 + 536) += *(_WORD *)(a1 + 176);
    int v4 = *(_DWORD *)(a1 + 160);
    int v5 = *(_DWORD *)(a1 + 164);
    *(_DWORD *)(a1 + 568) += v4;
    int v6 = *(_DWORD *)(a1 + 572);
    *(_DWORD *)(a1 + 560) += v1;
    *(_DWORD *)(a1 + 676) += v5;
    *(_WORD *)(a1 + 544) += *(unsigned __int8 *)(a1 + 133);
    int32x2_t v7 = *(int32x2_t *)(a1 + 152);
    *(_DWORD *)(a1 + 572) = v7.i32[0] - v4 + v6;
    *(int32x2_t *)(a1 + 5sub_10000AE14(v1 - 80) = vadd_s32(*(int32x2_t *)(a1 + 580), v7);
    if (*(_BYTE *)(a1 + 134)) {
      ++*(_WORD *)(a1 + 548);
    }
    if (*(_BYTE *)(a1 + 128)) {
      ++*(_WORD *)(a1 + 538);
    }
    if (*(_BYTE *)(a1 + 131))
    {
      ++*(_WORD *)(a1 + 540);
      if (!v7.i32[1])
      {
        if (!*(_BYTE *)(a1 + 132))
        {
LABEL_76:
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826750);
          }
          uint64_t v20 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            int v21 = *(_DWORD *)(a1 + 152);
            int v22 = *(_DWORD *)(a1 + 580);
            *(_DWORD *)std::string buf = 67240448;
            *(_DWORD *)&uint8_t buf[4] = v21;
            __int16 v31 = 1026;
            int v32 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,addSessionCountsToCA,fSessionDuration,%{public}d,fCountTotalSeconds,%{public}d",  buf,  0xEu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101826750);
            }
            int v24 = *(_DWORD *)(a1 + 152);
            int v25 = *(_DWORD *)(a1 + 580);
            v27[0] = 67240448;
            v27[1] = v24;
            __int16 v28 = 1026;
            int v29 = v25;
            int v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,addSessionCountsToCA,fSessionDuration,%{public}d,fCountTotalSeconds,%{public}d",  v27,  14);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::addSessionCountsToCAandSubmit()",  "%s\n",  v26);
          }

          uint64_t v23 = sub_10080E94C();
          *(_DWORD *)std::string buf = 1;
          *(void *)std::string buf = sub_10080EB58(v23, buf);
          sub_1001AAA38(v3, (double *)buf);
          return;
        }

        __int128 v14 = (_WORD *)(a1 + 542);
LABEL_75:
        ++*v14;
        goto LABEL_76;
      }

      double v8 = *(double *)(a1 + 72);
      double v9 = v8 - *(double *)(a1 + 192);
      double v10 = *(double *)(a1 + 200) - v8;
      if (v9 >= 0.0)
      {
        if (v9 >= 5.0)
        {
          if (v9 >= 10.0)
          {
            if (v9 >= 30.0)
            {
              if (v9 >= 60.0)
              {
                if (v9 >= 90.0) {
                  BOOL v11 = (_WORD *)(a1 + 720);
                }
                else {
                  BOOL v11 = (_WORD *)(a1 + 718);
                }
              }

              else
              {
                BOOL v11 = (_WORD *)(a1 + 716);
              }
            }

            else
            {
              BOOL v11 = (_WORD *)(a1 + 714);
            }
          }

          else
          {
            BOOL v11 = (_WORD *)(a1 + 712);
          }
        }

        else
        {
          BOOL v11 = (_WORD *)(a1 + 710);
        }
      }

      else
      {
        BOOL v11 = (_WORD *)(a1 + 708);
      }

      ++*v11;
      if (v10 >= 0.0)
      {
        if (v10 >= 5.0)
        {
          if (v10 >= 10.0)
          {
            if (v10 >= 30.0)
            {
              if (v10 >= 60.0)
              {
                if (v10 >= 90.0) {
                  __int128 v15 = (_WORD *)(a1 + 734);
                }
                else {
                  __int128 v15 = (_WORD *)(a1 + 732);
                }
              }

              else
              {
                __int128 v15 = (_WORD *)(a1 + 730);
              }
            }

            else
            {
              __int128 v15 = (_WORD *)(a1 + 728);
            }
          }

          else
          {
            __int128 v15 = (_WORD *)(a1 + 726);
          }
        }

        else
        {
          __int128 v15 = (_WORD *)(a1 + 724);
        }
      }

      else
      {
        __int128 v15 = (_WORD *)(a1 + 722);
      }

      ++*v15;
    }

    if (!*(_BYTE *)(a1 + 132)) {
      goto LABEL_76;
    }
    ++*(_WORD *)(a1 + 542);
    if (!v7.i32[1]) {
      goto LABEL_76;
    }
    double v16 = *(double *)(a1 + 88);
    double v17 = v16 - *(double *)(a1 + 192);
    double v18 = *(double *)(a1 + 200) - v16;
    if (v17 >= 0.0)
    {
      if (v17 >= 5.0)
      {
        if (v17 >= 10.0)
        {
          if (v17 >= 30.0)
          {
            if (v17 >= 60.0)
            {
              if (v17 >= 90.0) {
                uint64_t v19 = (_WORD *)(a1 + 692);
              }
              else {
                uint64_t v19 = (_WORD *)(a1 + 690);
              }
            }

            else
            {
              uint64_t v19 = (_WORD *)(a1 + 688);
            }
          }

          else
          {
            uint64_t v19 = (_WORD *)(a1 + 686);
          }
        }

        else
        {
          uint64_t v19 = (_WORD *)(a1 + 684);
        }
      }

      else
      {
        uint64_t v19 = (_WORD *)(a1 + 682);
      }
    }

    else
    {
      uint64_t v19 = (_WORD *)(a1 + 680);
    }

    ++*v19;
    if (v18 >= 0.0)
    {
      if (v18 >= 5.0)
      {
        if (v18 >= 10.0)
        {
          if (v18 >= 30.0)
          {
            if (v18 >= 60.0)
            {
              if (v18 >= 90.0) {
                __int128 v14 = (_WORD *)(a1 + 706);
              }
              else {
                __int128 v14 = (_WORD *)(a1 + 704);
              }
            }

            else
            {
              __int128 v14 = (_WORD *)(a1 + 702);
            }
          }

          else
          {
            __int128 v14 = (_WORD *)(a1 + 700);
          }
        }

        else
        {
          __int128 v14 = (_WORD *)(a1 + 698);
        }
      }

      else
      {
        __int128 v14 = (_WORD *)(a1 + 696);
      }
    }

    else
    {
      __int128 v14 = (_WORD *)(a1 + 694);
    }

    goto LABEL_75;
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101826750);
  }
  uint64_t v12 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,addSessionCountsToCA,nothing to submit,fCountStationaryWithPersonalizedWifiAP,0",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    LOWORD(v27[0]) = 0;
    __int128 v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,addSessionCountsToCA,nothing to submit,fCountStationaryWithPersonalizedWifiAP,0",  v27,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGpsPowerSavingsMonitor::addSessionCountsToCAandSubmit()", "%s\n", v13);
  }

uint64_t sub_1001A8188(uint64_t a1)
{
  *(_DWORD *)(a1 + 3) = 0;
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_WORD *)(a1 + 48) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 56) = _Q0;
  *(_OWORD *)(a1 + 72) = _Q0;
  *(void *)(a1 + 88) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 96) = 0xFFFF;
  *(void *)(a1 + 108) = 0LL;
  *(void *)(a1 + 100) = 0LL;
  *(_OWORD *)(a1 + 116) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 132) = _Q0;
  *(_OWORD *)(a1 + 148) = _Q0;
  *(_OWORD *)(a1 + 164) = _Q0;
  *(_DWORD *)(a1 + 1sub_10000AE14(v1 - 80) = 0;
  *(void *)(a1 + 184) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 2++*(_DWORD *)(v3 + 52) = 0xFFFF;
  uint64_t result = a1 + 252;
  *(void *)(result - ++*(_DWORD *)(v3 + 52) = 0LL;
  *(void *)(result - 60) = 0LL;
  *(_DWORD *)(result - 44) = 0;
  *(void *)(result - 40) = 0xBFF0000000000000LL;
  *(_DWORD *)(result - 32) = 0x7FFFFFFF;
  *(void *)(result - 12) = 0LL;
  *(void *)(result - 28) = 0LL;
  *(void *)(result - 20) = 0LL;
  *(_BYTE *)(result - 4) = 0;
  *(void *)(result + 4) = 0LL;
  *(void *)(result + 12) = 0LL;
  *(_OWORD *)(result + 20) = xmmword_1012E0070;
  *(_OWORD *)(result + 36) = _Q0;
  *(_OWORD *)(result + ++*(_DWORD *)(v3 + 52) = _Q0;
  *(_OWORD *)(result + 68) = _Q0;
  *(_DWORD *)(result + 84) = 0;
  *(void *)(result + 96) = 0LL;
  *(void *)(result + 104) = 0LL;
  *(void *)(result + 88) = 0xBFF0000000000000LL;
  *(_DWORD *)(result + 112) = 0;
  *(void *)(result + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(result + 124) = 0x7FFFFFFF;
  *(_BYTE *)(result + 1++*(_DWORD *)(v3 + 52) = 0;
  *(void *)(result + 136) = 0LL;
  *(void *)(result + 144) = 0LL;
  *(void *)(result + 128) = 0LL;
  return result;
}

void sub_1001A824C(uint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *a3;
  if (*a3 > 40)
  {
    if (v5 == 41)
    {
LABEL_21:
      if (!*(_BYTE *)(a1 + 96))
      {
        uint64_t v14 = sub_10080E94C();
        *(_DWORD *)std::string buf = 1;
        double v15 = sub_10080EB58(v14, buf);
        *(_BYTE *)(a1 + 96) = 1;
        *(double *)(a1 + 104) = v15;
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826750);
        }
        double v16 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          int v17 = *a3;
          *(_DWORD *)std::string buf = 67240192;
          int v54 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,walking,%{public}d",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826750);
          }
          int v38 = *a3;
          int v43 = 67240192;
          int v44 = v38;
          uint64_t v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,walking,%{public}d",  &v43,  8);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMoti onState_Type::NotificationData &)",  "%s\n",  v39);
        }
      }

      *(_BYTE *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0xBFF0000000000000LL;
      *(_BYTE *)(a1 + sub_10000AE14(v1 - 80) = 0;
      *(void *)(a1 + 88) = 0xBFF0000000000000LL;
      *(_BYTE *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0xBFF0000000000000LL;
    }

    else if (v5 == 52 || v5 == 56)
    {
LABEL_13:
      if (!*(_BYTE *)(a1 + 80))
      {
        uint64_t v10 = sub_10080E94C();
        *(_DWORD *)std::string buf = 1;
        double v11 = sub_10080EB58(v10, buf);
        *(_BYTE *)(a1 + sub_10000AE14(v1 - 80) = 1;
        *(double *)(a1 + 88) = v11;
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826750);
        }
        uint64_t v12 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          int v13 = *a3;
          *(_DWORD *)std::string buf = 67240192;
          int v54 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,driving,%{public}d",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826750);
          }
          int v36 = *a3;
          int v43 = 67240192;
          int v44 = v36;
          int v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,driving,%{public}d",  &v43,  8);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMoti onState_Type::NotificationData &)",  "%s\n",  v37);
        }
      }

      *(_BYTE *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0xBFF0000000000000LL;
      *(_BYTE *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0xBFF0000000000000LL;
      *(_BYTE *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0xBFF0000000000000LL;
    }

    else
    {
LABEL_35:
      if (!*(_BYTE *)(a1 + 64))
      {
        uint64_t v24 = sub_10080E94C();
        *(_DWORD *)std::string buf = 1;
        double v25 = sub_10080EB58(v24, buf);
        *(_BYTE *)(a1 + 64) = 1;
        *(double *)(a1 + 72) = v25;
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826750);
        }
        int v26 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          int v27 = *a3;
          *(_DWORD *)std::string buf = 67240192;
          int v54 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,fitness,%{public}d",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826750);
          }
          int v40 = *a3;
          int v43 = 67240192;
          int v44 = v40;
          uint64_t v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,fitness,%{public}d",  &v43,  8);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMoti onState_Type::NotificationData &)",  "%s\n",  v41);
        }
      }

      *(_BYTE *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0xBFF0000000000000LL;
      *(_BYTE *)(a1 + sub_10000AE14(v1 - 80) = 0;
      *(void *)(a1 + 88) = 0xBFF0000000000000LL;
      *(_BYTE *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0xBFF0000000000000LL;
    }
  }

  else
  {
    switch(v5)
    {
      case 0:
        break;
      case 1:
      case 2:
      case 3:
      case 7:
      case 9:
        if (!*(_BYTE *)(a1 + 112))
        {
          uint64_t v6 = sub_10080E94C();
          *(_DWORD *)std::string buf = 1;
          double v7 = sub_10080EB58(v6, buf);
          *(_BYTE *)(a1 + 112) = 1;
          *(double *)(a1 + 120) = v7;
          *(void *)(a1 + 136) = 0LL;
          *(void *)(a1 + 144) = 0LL;
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826750);
          }
          double v8 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            int v9 = *a3;
            *(_DWORD *)std::string buf = 67240192;
            int v54 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,plausibly_stationary,%{public}d",  buf,  8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101826750);
            }
            int v34 = *a3;
            int v43 = 67240192;
            int v44 = v34;
            int v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,plausibly_stationary,%{public}d",  &v43,  8);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMo tionState_Type::NotificationData &)",  "%s\n",  v35);
          }
        }

        *(_BYTE *)(a1 + sub_10000AE14(v1 - 80) = 0;
        *(void *)(a1 + 88) = 0xBFF0000000000000LL;
        *(_BYTE *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0xBFF0000000000000LL;
        *(_BYTE *)(a1 + 96) = 0;
        *(void *)(a1 + 104) = 0xBFF0000000000000LL;
        break;
      case 4:
        goto LABEL_21;
      case 5:
      case 10:
      case 11:
        goto LABEL_13;
      default:
        goto LABEL_35;
    }
  }

  if (*(double *)(a1 + 184) > 0.0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    double v18 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      int v19 = *a3;
      int v20 = *(unsigned __int8 *)(a1 + 112);
      int v21 = *(unsigned __int8 *)(a1 + 132);
      int v22 = *(unsigned __int8 *)(a1 + 131);
      int v23 = *(unsigned __int8 *)(a1 + 96);
      *(_DWORD *)std::string buf = 67241216;
      int v54 = v19;
      __int16 v55 = 1026;
      int v56 = v20;
      __int16 v57 = 1026;
      int v58 = v21;
      __int16 v59 = 1026;
      int v60 = v22;
      __int16 v61 = 1026;
      int v62 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,raw,motion,%{public}d,fPlausiblyStationary,%{public}d,fWasDriving,%{public}d,fWasFitness,%{publ ic}d,fIsWalking,%{public}d",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      int v28 = *a3;
      int v29 = *(unsigned __int8 *)(a1 + 112);
      int v30 = *(unsigned __int8 *)(a1 + 132);
      int v31 = *(unsigned __int8 *)(a1 + 131);
      int v32 = *(unsigned __int8 *)(a1 + 96);
      int v43 = 67241216;
      int v44 = v28;
      __int16 v45 = 1026;
      int v46 = v29;
      __int16 v47 = 1026;
      int v48 = v30;
      __int16 v49 = 1026;
      int v50 = v31;
      __int16 v51 = 1026;
      int v52 = v32;
      LODWORD(v42) = 32;
      uint64_t v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,raw,motion,%{public}d,fPlausiblyStationary,%{public}d,fWasDriving,%{public}d,fWas Fitness,%{public}d,fIsWalking,%{public}d",  &v43,  v42);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionSt ate_Type::NotificationData &)",  "%s\n",  v33);
    }
  }

void sub_1001A8B60(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*a2 == 6)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    double v7 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      if (*(_BYTE *)(a3 + 96)) {
        BOOL v8 = *(_DWORD *)(a3 + 48) <= 0;
      }
      else {
        BOOL v8 = 1;
      }
      int v9 = !v8;
      int v10 = *(unsigned __int8 *)(a3 + 73);
      *(_DWORD *)std::string buf = 67240448;
      int v28 = v9;
      __int16 v29 = 1026;
      int v30 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,wifi link status changed,isAssociated,%{public}d,isMoving,%{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      if (*(_BYTE *)(a3 + 96)) {
        BOOL v18 = *(_DWORD *)(a3 + 48) <= 0;
      }
      else {
        BOOL v18 = 1;
      }
      int v19 = !v18;
      int v20 = *(unsigned __int8 *)(a3 + 73);
      int v23 = 67240448;
      int v24 = v19;
      __int16 v25 = 1026;
      int v26 = v20;
      int v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,wifi link status changed,isAssociated,%{public}d,isMoving,%{public}d",  &v23,  14);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedWiFiServiceNotification(const CLWifiService_Type::Notification &, const CLWif iService_Type::NotificationData &)",  "%s\n",  v21);
    }

    if (*(_BYTE *)(a3 + 96))
    {
      int v11 = *(_DWORD *)(a3 + 48);
      BOOL v12 = v11 > 0;
      if (*(_BYTE *)(a3 + 73)) {
        BOOL v12 = 0;
      }
      *(_BYTE *)(a1 + 42) = v12;
      if (v11 > 0)
      {
        uint64_t v13 = sub_10080E94C();
        *(_DWORD *)std::string buf = 1;
        *(double *)(a1 + 48) = sub_10080EB58(v13, buf);
        goto LABEL_33;
      }
    }

    else
    {
      *(_BYTE *)(a1 + 42) = 0;
    }

    *(void *)(a1 + 48) = 0xBFF0000000000000LL;
  }

  else
  {
    if (*a2 != 7) {
      goto LABEL_33;
    }
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    int v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,wifi link roam",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      LOWORD(v23) = 0;
      int v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,wifi link roam",  &v23,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedWiFiServiceNotification(const CLWifiService_Type::Notification &, const CLWif iService_Type::NotificationData &)",  "%s\n",  v5);
    }
  }

void sub_1001A9054(uint64_t a1)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101826750);
  }
  uint64_t v2 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GPSPowerSavings,accessory connected", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    v4[0] = 0;
    uint64_t v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,accessory connected",  v4,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGpsPowerSavingsMonitor::feedAccessoryConnected()", "%s\n", v3);
  }

  *(_BYTE *)(a1 + 133) = 1;
}

void sub_1001A91EC(uint64_t a1)
{
  *(_BYTE *)(a1 + 41) = 1;
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101826750);
  }
  int v1 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,session starting from location controller",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    v3[0] = 0;
    uint64_t v2 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,session starting from location controller",  v3,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGpsPowerSavingsMonitor::feedSessionStartFromLC()", "%s\n", v2);
  }

void sub_1001A9378(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 43) = a2;
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101826750);
  }
  uint64_t v3 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 43);
    *(_DWORD *)std::string buf = 67240192;
    int v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,notification,fIsBatteryNotCharging,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    int v5 = *(unsigned __int8 *)(a1 + 43);
    v7[0] = 67240192;
    v7[1] = v5;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,notification,fIsBatteryNotCharging,%{public}d",  v7,  8);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedBatteryChargingStatus(const BOOL)",  "%s\n",  v6);
  }

void sub_1001A952C(uint64_t a1, double *a2)
{
  if (*(_BYTE *)(a1 + 112))
  {
    double v4 = *(double *)(a1 + 120);
    double v5 = *a2;
    if (v4 <= 0.0) {
      double v6 = 0.0;
    }
    else {
      double v6 = *a2 - v4;
    }
    double v7 = *(double *)(a1 + 208);
    double v8 = v5 - v7;
    if (v7 <= 0.0) {
      double v8 = 65.0;
    }
    if (v6 <= 15.0 && !*(_BYTE *)(a1 + 128)
      || (sqrtf( (float)((float)(*(float *)(a1 + 140) * *(float *)(a1 + 140))
                  + (float)(*(float *)(a1 + 136) * *(float *)(a1 + 136)))
          + (float)(*(float *)(a1 + 144) * *(float *)(a1 + 144))) < 5.0
        ? (BOOL v11 = *(float *)(a1 + 148) < 2.0)
        : (BOOL v11 = 0),
          !v11
       || !*(_BYTE *)(a1 + 42)
       || !*(_BYTE *)(a1 + 129)
       || *(_BYTE *)(a1 + 131)
       || *(_BYTE *)(a1 + 132)
       || *(_BYTE *)(a1 + 133)
       || *(_WORD *)(a1 + 176)
       || v8 >= 65.0))
    {
      if (*(_BYTE *)(a1 + 40))
      {
        *(double *)(a1 + 200) = v5;
        *(_BYTE *)(a1 + 40) = 0;
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826750);
        }
        BOOL v12 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "#GPSPowerSavings,fCanSafelyTurnOffGps,transition,false",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826750);
          }
          LOWORD(v66) = 0;
          int8x16_t v63 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "#GPSPowerSavings,fCanSafelyTurnOffGps,transition,false",  &v66,  2);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::evaluateSessionState(const CFTimeInterval &)",  "%s\n",  v63);
        }
      }
    }

    else
    {
      if (!*(_BYTE *)(a1 + 40))
      {
        *(double *)(a1 + 192) = v5;
        *(_BYTE *)(a1 + 40) = 1;
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826750);
        }
        int v37 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "#GPSPowerSavings,fCanSafelyTurnOffGps,transition,true",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826750);
          }
          LOWORD(v66) = 0;
          uint8x16_t v64 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "#GPSPowerSavings,fCanSafelyTurnOffGps,transition,true",  &v66,  2);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::evaluateSessionState(const CFTimeInterval &)",  "%s\n",  v64);
        }
      }

      ++*(_DWORD *)(a1 + 156);
    }

    sub_1001A9E84(a1);
  }

  else if (*(_BYTE *)(a1 + 40))
  {
    *(double *)(a1 + 200) = *a2;
    *(_BYTE *)(a1 + 40) = 0;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    int v9 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "#GPSPowerSavings,fCanSafelyTurnOffGps,transition,false",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      LOWORD(v66) = 0;
      int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "#GPSPowerSavings,fCanSafelyTurnOffGps,transition,false",  &v66,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::evaluateSessionState(const CFTimeInterval &)",  "%s\n",  v10);
    }
  }

  if (*(_DWORD *)(a1 + 160))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    uint64_t v13 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      double v14 = *(double *)(a1 + 120);
      double v15 = -1.0;
      if (v14 <= 0.0) {
        double v16 = -1.0;
      }
      else {
        double v16 = *a2 - v14;
      }
      int v17 = *(unsigned __int8 *)(a1 + 128);
      double v18 = *(double *)(a1 + 184);
      if (v18 <= 0.0) {
        double v19 = -1.0;
      }
      else {
        double v19 = *a2 - v18;
      }
      if (sub_100869800(a1 + 380) && sub_100869800(a1 + 224))
      {
        sub_100D2DCA4((double *)a1, a1 + 380, a1 + 224);
        double v15 = v20;
      }

      double v22 = *(double *)(a1 + 208);
      double v21 = *(double *)(a1 + 216);
      double v23 = *a2 - v21;
      double v24 = *a2 - v22;
      int v25 = *(unsigned __int8 *)(a1 + 112);
      int v26 = *(unsigned __int8 *)(a1 + 42);
      int v27 = *(unsigned __int8 *)(a1 + 129);
      int v28 = *(unsigned __int16 *)(a1 + 176);
      double v29 = -1.0;
      if (v21 <= 0.0) {
        double v23 = -1.0;
      }
      double v30 = *(double *)(a1 + 48);
      int v31 = *(unsigned __int8 *)(a1 + 131);
      int v32 = *(unsigned __int8 *)(a1 + 132);
      int v33 = *(unsigned __int8 *)(a1 + 133);
      int v34 = *(unsigned __int8 *)(a1 + 40);
      double v35 = sqrtf( (float)((float)(*(float *)(a1 + 140) * *(float *)(a1 + 140))
      if (v22 <= 0.0) {
        double v24 = -1.0;
      }
      if (v30 > 0.0) {
        double v29 = *a2 - v30;
      }
      double v36 = *(float *)(a1 + 148);
      *(_DWORD *)std::string buf = 134353152;
      double v101 = v16;
      __int16 v102 = 1026;
      int v103 = v17;
      __int16 v104 = 2050;
      double v105 = v19;
      __int16 v106 = 2050;
      double v107 = v15;
      __int16 v108 = 1026;
      int v109 = v25;
      __int16 v110 = 1026;
      int v111 = v26;
      __int16 v112 = 1026;
      int v113 = v27;
      __int16 v114 = 1026;
      int v115 = v28;
      __int16 v116 = 2050;
      double v117 = v35;
      __int16 v118 = 2050;
      double v119 = v23;
      __int16 v120 = 2050;
      double v121 = v24;
      __int16 v122 = 2050;
      double v123 = v29;
      __int16 v124 = 2050;
      double v125 = v36;
      __int16 v126 = 1026;
      int v127 = v31;
      __int16 v128 = 1026;
      int v129 = v32;
      __int16 v130 = 1026;
      int v131 = v33;
      __int16 v132 = 1026;
      int v133 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,status,stationaryTime,%{public}.0lf,startedStationary,%{public}d,gpsOnTime,%{public}.0lf,GpsWiF idist,%{public}.1lf,fPlausiblyStationary,%{public}d,fIsAssocToStaticWiFiAP,%{public}d,fLastWifiFixWithAssocAp,%{ public}d,fWifiDorRoams,%{public}d,IODisplacement,%{public}.1lf,ageOfGpsFix,%{public}.0lf,ageOfWifiFix,%{public}. 0lf,ageOfWifiLink,%{public}.0lf,maxIOv,%{public}.1lf,fWasFitness,%{public}d,fWasDriving,%{public}d,fIsConVehicle Flag,%{public}d,fCanSafelyTurnOffGps,%{public}d",  buf,  0x88u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      uint64_t v38 = qword_101934838;
      double v39 = *(double *)(a1 + 120);
      if (v39 <= 0.0) {
        double v40 = -1.0;
      }
      else {
        double v40 = *a2 - v39;
      }
      int v41 = *(unsigned __int8 *)(a1 + 128);
      double v42 = *(double *)(a1 + 184);
      if (v42 <= 0.0) {
        double v43 = -1.0;
      }
      else {
        double v43 = *a2 - v42;
      }
      double v44 = -1.0;
      if (sub_100869800(a1 + 380) && sub_100869800(a1 + 224))
      {
        sub_100D2DCA4((double *)a1, a1 + 380, a1 + 224);
        double v44 = v45;
      }

      double v47 = *(double *)(a1 + 208);
      double v46 = *(double *)(a1 + 216);
      double v48 = *a2 - v46;
      double v49 = *a2 - v47;
      int v50 = *(unsigned __int8 *)(a1 + 112);
      int v51 = *(unsigned __int8 *)(a1 + 42);
      int v52 = *(unsigned __int8 *)(a1 + 129);
      int v53 = *(unsigned __int16 *)(a1 + 176);
      if (v46 <= 0.0) {
        double v48 = -1.0;
      }
      double v54 = *(double *)(a1 + 48);
      double v55 = *a2 - v54;
      int v56 = *(unsigned __int8 *)(a1 + 131);
      int v57 = *(unsigned __int8 *)(a1 + 132);
      int v58 = *(unsigned __int8 *)(a1 + 133);
      int v59 = *(unsigned __int8 *)(a1 + 40);
      double v60 = sqrtf( (float)((float)(*(float *)(a1 + 140) * *(float *)(a1 + 140))
      if (v47 <= 0.0) {
        double v49 = -1.0;
      }
      if (v54 <= 0.0) {
        double v55 = -1.0;
      }
      double v61 = *(float *)(a1 + 148);
      int v66 = 134353152;
      double v67 = v40;
      __int16 v68 = 1026;
      int v69 = v41;
      __int16 v70 = 2050;
      double v71 = v43;
      __int16 v72 = 2050;
      double v73 = v44;
      __int16 v74 = 1026;
      int v75 = v50;
      __int16 v76 = 1026;
      int v77 = v51;
      __int16 v78 = 1026;
      int v79 = v52;
      __int16 v80 = 1026;
      int v81 = v53;
      __int16 v82 = 2050;
      double v83 = v60;
      __int16 v84 = 2050;
      double v85 = v48;
      __int16 v86 = 2050;
      double v87 = v49;
      __int16 v88 = 2050;
      double v89 = v55;
      __int16 v90 = 2050;
      double v91 = v61;
      __int16 v92 = 1026;
      int v93 = v56;
      __int16 v94 = 1026;
      int v95 = v57;
      __int16 v96 = 1026;
      int v97 = v58;
      __int16 v98 = 1026;
      int v99 = v59;
      LODWORD(v65) = 136;
      int v62 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v38,  2LL,  "#GPSPowerSavings,status,stationaryTime,%{public}.0lf,startedStationary,%{public}d,gpsOnTime,%{publ ic}.0lf,GpsWiFidist,%{public}.1lf,fPlausiblyStationary,%{public}d,fIsAssocToStaticWiFiAP,%{public} d,fLastWifiFixWithAssocAp,%{public}d,fWifiDorRoams,%{public}d,IODisplacement,%{public}.1lf,ageOfGp sFix,%{public}.0lf,ageOfWifiFix,%{public}.0lf,ageOfWifiLink,%{public}.0lf,maxIOv,%{public}.1lf,fWa sFitness,%{public}d,fWasDriving,%{public}d,fIsConVehicleFlag,%{public}d,fCanSafelyTurnOffGps,%{public}d",  &v66,  v65);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::evaluateSessionState(const CFTimeInterval &)",  "%s\n",  v62);
    }
  }

void sub_1001A9E84(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 112))
  {
    ++*(_DWORD *)(a1 + 160);
    if (*(_BYTE *)(a1 + 42) && *(_BYTE *)(a1 + 129))
    {
      ++*(_DWORD *)(a1 + 168);
      if (!*(_BYTE *)(a1 + 130)) {
        ++*(_DWORD *)(a1 + 576);
      }
      float v2 = sqrtf( (float)((float)(*(float *)(a1 + 140) * *(float *)(a1 + 140))
      if (v2 >= 1.0)
      {
        if (v2 >= 2.0)
        {
          if (v2 >= 5.0)
          {
            if (v2 >= 10.0)
            {
              if (v2 >= 20.0)
              {
                if (v2 >= 50.0) {
                  ++*(_DWORD *)(a1 + 612);
                }
                else {
                  ++*(_DWORD *)(a1 + 608);
                }
              }

              else
              {
                ++*(_DWORD *)(a1 + 604);
              }
            }

            else
            {
              ++*(_DWORD *)(a1 + 600);
            }
          }

          else
          {
            ++*(_DWORD *)(a1 + 596);
          }
        }

        else
        {
          ++*(_DWORD *)(a1 + 592);
        }
      }

      else
      {
        ++*(_DWORD *)(a1 + 588);
      }

      float v3 = *(float *)(a1 + 148);
      if (v3 >= 1.0)
      {
        if (v3 >= 2.0)
        {
          if (v3 >= 3.0)
          {
            if (v3 >= 4.0)
            {
              if (v3 >= 5.0) {
                ++*(_DWORD *)(a1 + 636);
              }
              else {
                ++*(_DWORD *)(a1 + 632);
              }
            }

            else
            {
              ++*(_DWORD *)(a1 + 628);
            }
          }

          else
          {
            ++*(_DWORD *)(a1 + 624);
          }
        }

        else
        {
          ++*(_DWORD *)(a1 + 620);
        }
      }

      else
      {
        ++*(_DWORD *)(a1 + 616);
      }

      if (sub_100869800(a1 + 380)
        && *(double *)(a1 + 400) < 100.0
        && sub_100869800(a1 + 224)
        && *(double *)(a1 + 244) < 100.0)
      {
        sub_100D2DCA4((double *)a1, a1 + 380, a1 + 224);
        if (v4 >= 5.0)
        {
          if (v4 >= 10.0)
          {
            if (v4 >= 20.0)
            {
              if (v4 >= 50.0)
              {
                if (v4 >= 100.0)
                {
                  if (v4 >= 200.0)
                  {
                    if (v4 >= 500.0)
                    {
                      if (v4 >= 1000.0) {
                        ++*(_DWORD *)(a1 + 672);
                      }
                      else {
                        ++*(_DWORD *)(a1 + 668);
                      }
                    }

                    else
                    {
                      ++*(_DWORD *)(a1 + 664);
                    }
                  }

                  else
                  {
                    ++*(_DWORD *)(a1 + 660);
                  }
                }

                else
                {
                  ++*(_DWORD *)(a1 + 656);
                }
              }

              else
              {
                ++*(_DWORD *)(a1 + 652);
              }
            }

            else
            {
              ++*(_DWORD *)(a1 + 648);
            }
          }

          else
          {
            ++*(_DWORD *)(a1 + 644);
          }
        }

        else
        {
          ++*(_DWORD *)(a1 + 640);
        }
      }
    }

    else
    {
      ++*(_DWORD *)(a1 + 172);
    }

    if (*(_DWORD *)(a1 + 168) && *(_BYTE *)(a1 + 43))
    {
      if (*(_BYTE *)(a1 + 42)) {
        ++*(_DWORD *)(a1 + 552);
      }
      if (*(_BYTE *)(a1 + 129)) {
        ++*(_DWORD *)(a1 + 556);
      }
    }
  }

void sub_1001AA21C(uint64_t a1, char a2, double *a3)
{
  *(_BYTE *)(a1 + 130) = a2;
  if (*a3 - *(double *)(a1 + 56) <= 0.909)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    double v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      double v6 = *a3;
      double v7 = *(double *)(a1 + 56);
      double v8 = *a3 - v7;
      *(_DWORD *)std::string buf = 134349568;
      double v20 = v6;
      __int16 v21 = 2050;
      double v22 = v7;
      __int16 v23 = 2050;
      double v24 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,heartbeat too fast,now,%{public}.3lf,last,%{public}.3lf,diff,%{public}.3lf",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826750);
      }
      uint64_t v9 = *(void *)a3;
      double v10 = *(double *)(a1 + 56);
      double v11 = *a3 - v10;
      int v13 = 134349568;
      uint64_t v14 = v9;
      __int16 v15 = 2050;
      double v16 = v10;
      __int16 v17 = 2050;
      double v18 = v11;
      BOOL v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,heartbeat too fast,now,%{public}.3lf,last,%{public}.3lf,diff,%{public}.3lf",  &v13,  32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::tickHeartbeat1Hz(BOOL, const CFTimeInterval &)",  "%s\n",  v12);
    }
  }

  else
  {
    *(double *)(a1 + 56) = *a3;
    if (*(double *)(a1 + 184) > 0.0)
    {
      ++*(_DWORD *)(a1 + 152);
      sub_1001A952C(a1, a3);
    }
  }

void sub_1001AA47C(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1001AA4A8(uint64_t a1)
{
  *(void *)(a1 + 6) = 0LL;
  *(void *)a1 = 0LL;
  *(_OWORD *)(a1 + 208) = xmmword_1012E0080;
  float v2 = (double *)(a1 + 208);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + sub_10000AE14(v1 - 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + sub_10000AE14(v45 - 224) = xmmword_1012E0090;
  sub_1002F0B04(buf);
  double v3 = *v2;
  int v4 = sub_1002A82BC(*(uint64_t *)buf, "LCStatsSubmitMetricsThrSec", v22);
  double v5 = *(double *)v22;
  if (!v4) {
    double v5 = v3;
  }
  *(double *)(a1 + 200) = v5;
  double v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v7 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  sub_1002F0B04(buf);
  double v9 = *(double *)(a1 + 224);
  int v10 = sub_1002A82BC(*(uint64_t *)buf, "LCStatsSubmitMetricsThrSize", v22);
  double v11 = *(double *)v22;
  if (!v10) {
    double v11 = v9;
  }
  *(double *)(a1 + 216) = v11;
  BOOL v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v13 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101826770);
  }
  __int16 v15 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 200);
    uint64_t v17 = *(void *)(a1 + 216);
    *(_DWORD *)std::string buf = 134349312;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&buf[14] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,CAStats,fMetricsCollectionDuration,%{public}.0lf,fMetricsMinimumSessionLength,%{public}.0lf",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826770);
    }
    uint64_t v19 = *(void *)(a1 + 200);
    uint64_t v20 = *(void *)(a1 + 216);
    *(_DWORD *)double v22 = 134349312;
    *(void *)&v22[4] = v19;
    __int16 v23 = 2050;
    uint64_t v24 = v20;
    __int16 v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,CAStats,fMetricsCollectionDuration,%{public}.0lf,fMetricsMinimumSessionLength,%{public}.0lf",  v22,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLGpsPowerSavingsMonitorCAStats::CLGpsPowerSavingsMonitorCAStats()",  "%s\n",  v21);
    if (v21 != buf) {
      free(v21);
    }
  }

  return a1;
}

void sub_1001AA79C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001AA7C0(uint64_t a1, unsigned __int16 *a2, uint64_t *a3)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101826770);
  }
  double v5 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    double v6 = a3;
    int v7 = *a2;
    int v8 = a2[1];
    int v9 = a2[2];
    int v10 = a2[3];
    int v11 = a2[4];
    int v12 = a2[5];
    int v13 = a2[6];
    *(_DWORD *)std::string buf = 136448002;
    double v39 = v6;
    __int16 v40 = 1026;
    int v41 = v7;
    __int16 v42 = 1026;
    int v43 = v8;
    __int16 v44 = 1026;
    int v45 = v9;
    __int16 v46 = 1026;
    int v47 = v10;
    __int16 v48 = 1026;
    int v49 = v11;
    __int16 v50 = 1026;
    int v51 = v12;
    __int16 v52 = 1026;
    int v53 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,submitCAStats,%{public}s,fCountsLT0,%{public}d,fCountsLT5,%{public}d,fCountsLT10,%{public}d,fCoun tsLT30,%{public}d,fCountsLT60,%{public}d,fCountsLT90,%{public}d,fCountsGE90,%{public}d",  buf,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826770);
    }
    int v14 = *a2;
    int v15 = a2[1];
    int v16 = a2[2];
    int v17 = a2[3];
    int v18 = a2[4];
    int v19 = a2[5];
    int v20 = a2[6];
    int v22 = 136448002;
    __int16 v23 = a3;
    __int16 v24 = 1026;
    int v25 = v14;
    __int16 v26 = 1026;
    int v27 = v15;
    __int16 v28 = 1026;
    int v29 = v16;
    __int16 v30 = 1026;
    int v31 = v17;
    __int16 v32 = 1026;
    int v33 = v18;
    __int16 v34 = 1026;
    int v35 = v19;
    __int16 v36 = 1026;
    int v37 = v20;
    __int16 v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,submitCAStats,%{public}s,fCountsLT0,%{public}d,fCountsLT5,%{public}d,fCountsLT10,%{ public}d,fCountsLT30,%{public}d,fCountsLT60,%{public}d,fCountsLT90,%{public}d,fCountsGE90,%{public}d",  &v22,  54);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitorCAStats::debugOutputCounts(const CountSecondsFromThrottleEvent &, const std::string)",  "%s\n",  v21);
  }

void sub_1001AAA38(unsigned __int16 *a1, double *a2)
{
  double v4 = *a2 - *((double *)a1 + 29);
  if (v4 >= *((double *)a1 + 25))
  {
    if (a1[5]
      && *((_DWORD *)a1 + 4)
      && *((_DWORD *)a1 + 5)
      && *((_DWORD *)a1 + 6)
      && (LODWORD(v4) = *((_DWORD *)a1 + 11), *((double *)a1 + 27) <= (double)*(unint64_t *)&v4))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826770);
      }
      int v19 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        int v20 = *((_DWORD *)a1 + 5);
        *(_DWORD *)int v154 = *((_DWORD *)a1 + 4);
        int v22 = *((_DWORD *)a1 + 6);
        int v21 = *((_DWORD *)a1 + 7);
        *(_DWORD *)&v154[6] = v20;
        *(_DWORD *)((char *)&v155 + 2) = v22;
        int v23 = *((_DWORD *)a1 + 9);
        *(_DWORD *)unsigned int v156 = *((_DWORD *)a1 + 8);
        *(_DWORD *)&v156[6] = v23;
        int v24 = *((_DWORD *)a1 + 11);
        int v158 = *((_DWORD *)a1 + 10);
        int v160 = v24;
        int v25 = *((_DWORD *)a1 + 13);
        int v162 = *((_DWORD *)a1 + 12);
        int v164 = *a1;
        int v166 = v25;
        int v26 = *((_DWORD *)a1 + 15);
        int v168 = *((_DWORD *)a1 + 14);
        int v170 = v26;
        int v27 = *((_DWORD *)a1 + 17);
        int v172 = *((_DWORD *)a1 + 16);
        int v174 = v27;
        int v28 = *((_DWORD *)a1 + 19);
        int v176 = *((_DWORD *)a1 + 18);
        int v178 = v28;
        int v29 = *((_DWORD *)a1 + 27);
        int v180 = *((_DWORD *)a1 + 26);
        int v182 = v29;
        int v30 = *((_DWORD *)a1 + 29);
        int v184 = *((_DWORD *)a1 + 28);
        int v186 = v30;
        int v31 = *((_DWORD *)a1 + 31);
        int v188 = *((_DWORD *)a1 + 30);
        int v190 = v31;
        int v32 = *((_DWORD *)a1 + 33);
        int v192 = *((_DWORD *)a1 + 32);
        int v194 = v32;
        int v33 = *((_DWORD *)a1 + 35);
        int v196 = *((_DWORD *)a1 + 34);
        int v198 = v33;
        int v200 = a1[1];
        int v202 = a1[2];
        int v204 = a1[3];
        int v206 = a1[4];
        int v208 = a1[5];
        int v210 = a1[6];
        int v212 = v21;
        int v34 = *((_DWORD *)a1 + 21);
        int v214 = *((_DWORD *)a1 + 20);
        int v216 = v34;
        int v35 = *((_DWORD *)a1 + 23);
        int v218 = *((_DWORD *)a1 + 22);
        int v220 = v35;
        int v36 = *((_DWORD *)a1 + 25);
        int v222 = *((_DWORD *)a1 + 24);
        *(_WORD *)&v154[4] = 1026;
        LOWORD(v155) = 1026;
        HIWORD(v155) = 1026;
        *(_WORD *)&v156[4] = 1026;
        __int16 v157 = 1026;
        __int16 v159 = 1026;
        __int16 v161 = 1026;
        __int16 v163 = 1026;
        __int16 v165 = 1026;
        __int16 v167 = 1026;
        __int16 v169 = 1026;
        __int16 v171 = 1026;
        __int16 v173 = 1026;
        __int16 v175 = 1026;
        __int16 v177 = 1026;
        __int16 v179 = 1026;
        __int16 v181 = 1026;
        __int16 v183 = 1026;
        __int16 v185 = 1026;
        __int16 v187 = 1026;
        __int16 v189 = 1026;
        __int16 v191 = 1026;
        __int16 v193 = 1026;
        __int16 v195 = 1026;
        __int16 v197 = 1026;
        __int16 v199 = 1026;
        __int16 v201 = 1026;
        __int16 v203 = 1026;
        __int16 v205 = 1026;
        __int16 v207 = 1026;
        __int16 v209 = 1026;
        __int16 v211 = 1026;
        __int16 v213 = 1026;
        __int16 v215 = 1026;
        __int16 v217 = 1026;
        __int16 v219 = 1026;
        __int16 v221 = 1026;
        __int16 v223 = 1026;
        int v224 = v36;
        *(_DWORD *)std::string buf = 67249920;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,submitCAStats,fCountWifiAssociatedAndStaticAP,%{public}d,fCountWifiYieldingPersonalized,%{pub lic}d,fCountStationaryWithPersonalizedWifiAP,%{public}d,fCountDMMostlyStationary,%{public}d,fCountDMnonStation ary,%{public}d,fCountScreenOff,%{public}d,fCountTotalSeconds,%{public}d,fCountCanSafelyTurnOffGpsCount,%{publi c}d,fCountWifiDisassociatesOrRoams,%{public}d,fCountIOMotionFromStaticLT1m,%{public}d,fCountIOMotionFromStatic LT2m,%{public}d,fCountIOMotionFromStaticLT5m,%{public}d,fCountIOMotionFromStaticLT10m,%{public}d,fCountIOMotio nFromStaticLT20m,%{public}d,fCountIOMotionFromStaticLT50m,%{public}d,fCountIOMotionFromStaticGE50m,%{public}d, fCountGpsWifiDistanceLT5m,%{public}d,fCountGpsWifiDistanceLT10m,%{public}d,fCountGpsWifiDistanceLT20m,%{public }d,fCountGpsWifiDistanceLT50m,%{public}d,fCountGpsWifiDistanceLT100m,%{public}d,fCountGpsWifiDistanceLT200m,%{ public}d,fCountGpsWifiDistanceLT500m,%{public}d,fCountGpsWifiDistanceLT1000m,%{public}d,fCountGpsWifiDistanceG E1000m,%{public}d,fCountGpsOnNotYielding,%{public}d,fCountStartedStatic,%{public}d,fCountIncludedFitness,%{pub lic}d,fCountIncludedDriving,%{public}d,fCountIncludedConnectedVehicleFlag,%{public}d,fCountSessions,%{public}d ,fCountSessionsStartedFromLC,%{public}d,fCountStationaryWithoutPersonalizedWifiAP,%{public}d,fCountIOMaxVeloci tyWhileStaticLT1ms,%{public}d,fCountIOMaxVelocityWhileStaticLT2ms,%{public}d,fCountIOMaxVelocityWhileStaticLT3 ms,%{public}d,fCountIOMaxVelocityWhileStaticLT4ms,%{public}d,fCountIOMaxVelocityWhileStaticLT5ms,%{public}d,fC ountIOMaxVelocityWhileStaticGE5ms,%{public}d,",  buf,  0xECu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826770);
        }
        int v50 = *((_DWORD *)a1 + 5);
        *(_DWORD *)__int16 v82 = *((_DWORD *)a1 + 4);
        int v52 = *((_DWORD *)a1 + 6);
        int v51 = *((_DWORD *)a1 + 7);
        *(_DWORD *)&v82[6] = v50;
        *(_DWORD *)((char *)&v83 + 2) = v52;
        int v53 = *((_DWORD *)a1 + 9);
        *(_DWORD *)__int16 v84 = *((_DWORD *)a1 + 8);
        *(_DWORD *)&v84[6] = v53;
        int v54 = *((_DWORD *)a1 + 11);
        int v86 = *((_DWORD *)a1 + 10);
        int v88 = v54;
        int v55 = *((_DWORD *)a1 + 13);
        int v90 = *((_DWORD *)a1 + 12);
        int v92 = *a1;
        int v94 = v55;
        int v56 = *((_DWORD *)a1 + 15);
        int v96 = *((_DWORD *)a1 + 14);
        int v98 = v56;
        int v57 = *((_DWORD *)a1 + 17);
        int v100 = *((_DWORD *)a1 + 16);
        int v102 = v57;
        int v58 = *((_DWORD *)a1 + 19);
        int v104 = *((_DWORD *)a1 + 18);
        int v106 = v58;
        int v59 = *((_DWORD *)a1 + 27);
        int v108 = *((_DWORD *)a1 + 26);
        int v110 = v59;
        int v60 = *((_DWORD *)a1 + 29);
        int v112 = *((_DWORD *)a1 + 28);
        int v114 = v60;
        int v61 = *((_DWORD *)a1 + 31);
        int v116 = *((_DWORD *)a1 + 30);
        int v118 = v61;
        int v62 = *((_DWORD *)a1 + 33);
        int v120 = *((_DWORD *)a1 + 32);
        int v122 = v62;
        int v63 = *((_DWORD *)a1 + 35);
        int v124 = *((_DWORD *)a1 + 34);
        int v126 = v63;
        int v128 = a1[1];
        int v130 = a1[2];
        int v132 = a1[3];
        int v134 = a1[4];
        int v136 = a1[5];
        int v138 = a1[6];
        int v140 = v51;
        int v64 = *((_DWORD *)a1 + 21);
        int v142 = *((_DWORD *)a1 + 20);
        int v144 = v64;
        int v65 = *((_DWORD *)a1 + 23);
        int v146 = *((_DWORD *)a1 + 22);
        int v148 = v65;
        int v66 = *((_DWORD *)a1 + 25);
        int v150 = *((_DWORD *)a1 + 24);
        *(_WORD *)&v82[4] = 1026;
        LOWORD(v83) = 1026;
        HIWORD(v83) = 1026;
        *(_WORD *)&v84[4] = 1026;
        __int16 v85 = 1026;
        __int16 v87 = 1026;
        __int16 v89 = 1026;
        __int16 v91 = 1026;
        __int16 v93 = 1026;
        __int16 v95 = 1026;
        __int16 v97 = 1026;
        __int16 v99 = 1026;
        __int16 v101 = 1026;
        __int16 v103 = 1026;
        __int16 v105 = 1026;
        __int16 v107 = 1026;
        __int16 v109 = 1026;
        __int16 v111 = 1026;
        __int16 v113 = 1026;
        __int16 v115 = 1026;
        __int16 v117 = 1026;
        __int16 v119 = 1026;
        __int16 v121 = 1026;
        __int16 v123 = 1026;
        __int16 v125 = 1026;
        __int16 v127 = 1026;
        __int16 v129 = 1026;
        __int16 v131 = 1026;
        __int16 v133 = 1026;
        __int16 v135 = 1026;
        __int16 v137 = 1026;
        __int16 v139 = 1026;
        __int16 v141 = 1026;
        __int16 v143 = 1026;
        __int16 v145 = 1026;
        __int16 v147 = 1026;
        __int16 v149 = 1026;
        __int16 v151 = 1026;
        int v152 = v66;
        int v81 = 67249920;
        double v67 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,submitCAStats,fCountWifiAssociatedAndStaticAP,%{public}d,fCountWifiYieldingPers onalized,%{public}d,fCountStationaryWithPersonalizedWifiAP,%{public}d,fCountDMMostlyStationary,% {public}d,fCountDMnonStationary,%{public}d,fCountScreenOff,%{public}d,fCountTotalSeconds,%{publi c}d,fCountCanSafelyTurnOffGpsCount,%{public}d,fCountWifiDisassociatesOrRoams,%{public}d,fCountIO MotionFromStaticLT1m,%{public}d,fCountIOMotionFromStaticLT2m,%{public}d,fCountIOMotionFromStatic LT5m,%{public}d,fCountIOMotionFromStaticLT10m,%{public}d,fCountIOMotionFromStaticLT20m,%{public} d,fCountIOMotionFromStaticLT50m,%{public}d,fCountIOMotionFromStaticGE50m,%{public}d,fCountGpsWif iDistanceLT5m,%{public}d,fCountGpsWifiDistanceLT10m,%{public}d,fCountGpsWifiDistanceLT20m,%{publ ic}d,fCountGpsWifiDistanceLT50m,%{public}d,fCountGpsWifiDistanceLT100m,%{public}d,fCountGpsWifiD istanceLT200m,%{public}d,fCountGpsWifiDistanceLT500m,%{public}d,fCountGpsWifiDistanceLT1000m,%{p ublic}d,fCountGpsWifiDistanceGE1000m,%{public}d,fCountGpsOnNotYielding,%{public}d,fCountStartedS tatic,%{public}d,fCountIncludedFitness,%{public}d,fCountIncludedDriving,%{public}d,fCountInclude dConnectedVehicleFlag,%{public}d,fCountSessions,%{public}d,fCountSessionsStartedFromLC,%{public} d,fCountStationaryWithoutPersonalizedWifiAP,%{public}d,fCountIOMaxVelocityWhileStaticLT1ms,%{pub lic}d,fCountIOMaxVelocityWhileStaticLT2ms,%{public}d,fCountIOMaxVelocityWhileStaticLT3ms,%{publi c}d,fCountIOMaxVelocityWhileStaticLT4ms,%{public}d,fCountIOMaxVelocityWhileStaticLT5ms,%{public} d,fCountIOMaxVelocityWhileStaticGE5ms,%{public}d,",  &v81,  236);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitorCAStats::submitCAStats(const CFTimeInterval &)",  "%s\n",  v67);
      }

      int v37 = sub_1010DDBC0(__p, "fThrottleStartToDriving");
      sub_1001AA7C0((uint64_t)v37, a1 + 72, (uint64_t *)__p);
      if (v80 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v38 = sub_1010DDBC0(v77, "fThrottleEndToDriving");
      sub_1001AA7C0((uint64_t)v38, a1 + 79, (uint64_t *)v77);
      if (v78 < 0) {
        operator delete(v77[0]);
      }
      double v39 = sub_1010DDBC0(v75, "fThrottleStartToFitness");
      sub_1001AA7C0((uint64_t)v39, a1 + 86, (uint64_t *)v75);
      if (v76 < 0) {
        operator delete(v75[0]);
      }
      __int16 v40 = sub_1010DDBC0(v73, "fThrottleEndToFitness");
      sub_1001AA7C0((uint64_t)v40, a1 + 93, (uint64_t *)v73);
      if (v74 < 0) {
        operator delete(v73[0]);
      }
      if (*((double *)a1 + 25) >= *((double *)a1 + 26))
      {
        v72[0] = _NSConcreteStackBlock;
        v72[1] = 3221225472LL;
        v72[2] = sub_1001AB6AC;
        v72[3] = &unk_101820718;
        v72[4] = a1;
        AnalyticsSendEventLazy(@"com.apple.locationd.position.GPSPowerSavings", v72);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826770);
        }
        __int16 v42 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
        {
          int v43 = *((_DWORD *)a1 + 11);
          int v44 = a1[5];
          *(_DWORD *)std::string buf = 67240448;
          *(_DWORD *)int v154 = v43;
          *(_WORD *)&v154[4] = 1026;
          *(_DWORD *)&v154[6] = v44;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "#GPSPowerSavings,submitCAStats,complete,seconds,%{public}d,sessions,%{public}d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826770);
          }
          int v68 = *((_DWORD *)a1 + 11);
          int v69 = a1[5];
          int v81 = 67240448;
          *(_DWORD *)__int16 v82 = v68;
          *(_WORD *)&v82[4] = 1026;
          *(_DWORD *)&v82[6] = v69;
          LODWORD(v71) = 14;
          __int16 v70 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "#GPSPowerSavings,submitCAStats,complete,seconds,%{public}d,sessions,%{public}d",  &v81,  v71);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitorCAStats::submitCAStats(const CFTimeInterval &)",  "%s\n",  v70);
        }

        *((void *)a1 + 24) = 0LL;
        *((_OWORD *)a1 + 10) = 0u;
        *((_OWORD *)a1 + 11) = 0u;
        *((_OWORD *)a1 + 8) = 0u;
        *((_OWORD *)a1 + 9) = 0u;
        *((_OWORD *)a1 + 6) = 0u;
        *((_OWORD *)a1 + 7) = 0u;
        *((_OWORD *)a1 + 4) = 0u;
        *((_OWORD *)a1 + 5) = 0u;
        *((_OWORD *)a1 + 2) = 0u;
        *((_OWORD *)a1 + 3) = 0u;
        *(_OWORD *)a1 = 0u;
        *((_OWORD *)a1 + 1) = 0u;
        *((double *)a1 + 29) = *a2;
      }

      else
      {
        *((double *)a1 + 29) = *a2;
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826770);
        }
        int v41 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,submitCAStats,skipping CA submission",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101826770);
          }
          LOWORD(v81) = 0;
          LODWORD(v71) = 2;
          int v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,submitCAStats,skipping CA submission",  &v81,  v71);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitorCAStats::submitCAStats(const CFTimeInterval &)",  "%s\n",  v12);
          goto LABEL_52;
        }
      }
    }

    else
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826770);
      }
      int v13 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        int v14 = a1[5];
        int v15 = *((_DWORD *)a1 + 11);
        int v16 = *((_DWORD *)a1 + 4);
        int v17 = *((_DWORD *)a1 + 5);
        int v18 = *((_DWORD *)a1 + 6);
        *(_DWORD *)std::string buf = 67241216;
        *(_DWORD *)int v154 = v14;
        *(_WORD *)&v154[4] = 1026;
        *(_DWORD *)&v154[6] = v15;
        LOWORD(v155) = 1026;
        *(_DWORD *)((char *)&v155 + 2) = v16;
        HIWORD(v155) = 1024;
        *(_DWORD *)unsigned int v156 = v17;
        *(_WORD *)&v156[4] = 1026;
        *(_DWORD *)&v156[6] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,submitCAStats,small_or_invalid_sessions,%{public}d,%{public}d,%{public}d,%{[ublic}d,%{public}d",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101826770);
        }
        int v45 = a1[5];
        int v46 = *((_DWORD *)a1 + 11);
        int v47 = *((_DWORD *)a1 + 4);
        int v48 = *((_DWORD *)a1 + 5);
        int v49 = *((_DWORD *)a1 + 6);
        int v81 = 67241216;
        *(_DWORD *)__int16 v82 = v45;
        *(_WORD *)&v82[4] = 1026;
        *(_DWORD *)&v82[6] = v46;
        LOWORD(v83) = 1026;
        *(_DWORD *)((char *)&v83 + 2) = v47;
        HIWORD(v83) = 1024;
        *(_DWORD *)__int16 v84 = v48;
        *(_WORD *)&v84[4] = 1026;
        *(_DWORD *)&v84[6] = v49;
        int v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,submitCAStats,small_or_invalid_sessions,%{public}d,%{public}d,%{public}d,%{[ublic}d,%{public}d",  &v81,  32);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitorCAStats::submitCAStats(const CFTimeInterval &)",  "%s\n",  v12);
        goto LABEL_52;
      }
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826770);
    }
    double v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      double v6 = *a2;
      uint64_t v7 = *((void *)a1 + 29);
      uint64_t v8 = *((void *)a1 + 25);
      *(_DWORD *)std::string buf = 134349568;
      *(double *)int v154 = v6;
      *(_WORD *)&v154[8] = 2050;
      uint64_t v155 = v7;
      *(_WORD *)unsigned int v156 = 2050;
      *(void *)&v156[2] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,submitCAStats,less than threshold time to submit metrics,%{public}.0lf,%{public}.0lf,%{public}.0lf",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101826770);
      }
      double v9 = *a2;
      uint64_t v10 = *((void *)a1 + 29);
      uint64_t v11 = *((void *)a1 + 25);
      int v81 = 134349568;
      *(double *)__int16 v82 = v9;
      *(_WORD *)&v82[8] = 2050;
      uint64_t v83 = v10;
      *(_WORD *)__int16 v84 = 2050;
      *(void *)&v84[2] = v11;
      int v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,submitCAStats,less than threshold time to submit metrics,%{public}.0lf,%{public}. 0lf,%{public}.0lf",  &v81,  32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitorCAStats::submitCAStats(const CFTimeInterval &)",  "%s\n",  v12);
LABEL_52:
    }
  }

void sub_1001AB648( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, char a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, char a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_1001AB6AC(uint64_t a1)
{
  int v1 = *(unsigned __int16 **)(a1 + 32);
  v3[0] = @"DailyWifiDisassociatesOrRoamsCounts";
  v4[0] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", *v1);
  v3[1] = @"DailySessionStartedStaticCount";
  v4[1] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[1]);
  void v3[2] = @"DailySessionIncludedFitnessCount";
  _DWORD v4[2] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[2]);
  v3[3] = @"DailySessionIncludedDrivingCount";
  v4[3] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[3]);
  v3[4] = @"DailySessionIncludedConnectedVehicle";
  _BYTE v4[4] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[4]);
  void v3[5] = @"DailySessionCount";
  v4[5] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[5]);
  v3[6] = @"DailySessionCountStartedFromLC";
  v4[6] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[6]);
  v3[7] = @"DailyWifiAssociatedAndStaticAPSeconds";
  v4[7] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 4));
  _WORD v3[8] = @"DailyWifiYieldingPersonalizedSeconds";
  _WORD v4[8] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 5));
  v3[9] = @"DailyStationaryWithPersonalizedWifiAPSeconds";
  v4[9] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 6));
  v3[10] = @"DailyStationaryWithoutPersonalizedWifiAPSeconds";
  v4[10] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 7));
  v3[11] = @"DailyDMMostlyStationarySeconds";
  v4[11] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 8));
  v3[12] = @"DailyDMnonStationarySeconds";
  v4[12] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 9));
  v3[13] = @"DailyScreenOffSeconds";
  v4[13] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 10));
  v3[14] = @"DailyTotalSeconds";
  v4[14] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 11));
  v3[15] = @"DailyThrottleGpsSeconds";
  v4[15] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 12));
  v3[16] = @"DailyIOMotionFromStaticLT1mSeconds";
  v4[16] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 13));
  v3[17] = @"DailyIOMotionFromStaticLT2mSeconds";
  v4[17] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 14));
  v3[18] = @"DailyIOMotionFromStaticLT5mSeconds";
  v4[18] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 15));
  v3[19] = @"DailyIOMotionFromStaticLT10mSeconds";
  v4[19] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 16));
  v3[20] = @"DailyIOMotionFromStaticLT20mSeconds";
  v4[20] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 17));
  v3[21] = @"DailyIOMotionFromStaticLT50mSeconds";
  v4[21] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 18));
  v3[22] = @"DailyIOMotionFromStaticGE50mSeconds";
  v4[22] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 19));
  v3[23] = @"DailyGpsWifiDistanceLT5mSeconds";
  v4[23] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 26));
  v3[24] = @"DailyGpsWifiDistanceLT10mSeconds";
  v4[24] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 27));
  v3[25] = @"DailyGpsWifiDistanceLT20mSeconds";
  v4[25] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 28));
  v3[26] = @"DailyGpsWifiDistanceLT50mSeconds";
  v4[26] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 29));
  v3[27] = @"DailyGpsWifiDistanceLT100mSeconds";
  v4[27] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 30));
  v3[28] = @"DailyGpsWifiDistanceLT200mSeconds";
  v4[28] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 31));
  v3[29] = @"DailyGpsWifiDistanceLT500mSeconds";
  v4[29] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 32));
  v3[30] = @"DailyGpsWifiDistanceLT1000mSeconds";
  v4[30] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 33));
  v3[31] = @"DailyGpsWifiDistanceGE1000mSeconds";
  v4[31] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 34));
  v3[32] = @"DailyGpsOnNotYieldingSeconds";
  v4[32] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 35));
  v3[33] = @"DailyIOMaxVelocityWhileStaticLT1msSeconds";
  v4[33] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 20));
  v3[34] = @"DailyIOMaxVelocityWhileStaticLT2msSeconds";
  v4[34] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 21));
  v3[35] = @"DailyIOMaxVelocityWhileStaticLT3msSeconds";
  v4[35] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 22));
  v3[36] = @"DailyIOMaxVelocityWhileStaticLT4msSeconds";
  v4[36] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 23));
  v3[37] = @"DailyIOMaxVelocityWhileStaticLT5msSeconds";
  v4[37] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 24));
  v3[38] = @"DailyIOMaxVelocityWhileStaticGE5msSeconds";
  v4[38] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v1 + 25));
  v3[39] = @"DailyGpsThrottleStartToDrivingLT0Seconds";
  v4[39] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[72]);
  v3[40] = @"DailyGpsThrottleStartToDrivingLT5Seconds";
  v4[40] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[73]);
  v3[41] = @"DailyGpsThrottleStartToDrivingLT10Seconds";
  v4[41] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[74]);
  v3[42] = @"DailyGpsThrottleStartToDrivingLT30Seconds";
  v4[42] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[75]);
  v3[43] = @"DailyGpsThrottleStartToDrivingLT60Seconds";
  v4[43] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[76]);
  v3[44] = @"DailyGpsThrottleStartToDrivingLT90Seconds";
  v4[44] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[77]);
  v3[45] = @"DailyGpsThrottleStartToDrivingGE90Seconds";
  v4[45] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[78]);
  v3[46] = @"DailyGpsThrottleEndToDrivingsLT0Seconds";
  v4[46] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[79]);
  v3[47] = @"DailyGpsThrottleEndToDrivingLT5Seconds";
  v4[47] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[80]);
  v3[48] = @"DailyGpsThrottleEndToDrivingLT10Seconds";
  _BYTE v4[48] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[81]);
  v3[49] = @"DailyGpsThrottleEndToDrivingLT30Seconds";
  v4[49] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[82]);
  v3[50] = @"DailyGpsThrottleEndToDrivingLT60Seconds";
  v4[50] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[83]);
  v3[51] = @"DailyGpsThrottleEndToDrivingLT90Seconds";
  v4[51] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[84]);
  v3[52] = @"DailyGpsThrottleEndToDrivingGE90Seconds";
  v4[52] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[85]);
  v3[53] = @"DailyGpsThrottleStartToFitnessLT0Seconds";
  v4[53] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[86]);
  v3[54] = @"DailyGpsThrottleStartToFitnessLT5Seconds";
  v4[54] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[87]);
  v3[55] = @"DailyGpsThrottleStartToFitnessLT10Seconds";
  v4[55] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[88]);
  v3[56] = @"DailyGpsThrottleStartToFitnessLT30Seconds";
  v4[56] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[89]);
  v3[57] = @"DailyGpsThrottleStartToFitnessLT60Seconds";
  v4[57] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[90]);
  v3[58] = @"DailyGpsThrottleStartToFitnessLT90Seconds";
  v4[58] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[91]);
  v3[59] = @"DailyGpsThrottleStartToFitnessGE90Seconds";
  v4[59] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[92]);
  v3[60] = @"DailyGpsThrottleEndToFitnessLT0Seconds";
  v4[60] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[93]);
  v3[61] = @"DailyGpsThrottleEndToFitnessLT5Seconds";
  v4[61] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[94]);
  v3[62] = @"DailyGpsThrottleEndToFitnessLT10Seconds";
  v4[62] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[95]);
  v3[63] = @"DailyGpsThrottleEndToFitnessLT30Seconds";
  v4[63] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[96]);
  v3[64] = @"DailyGpsThrottleEndToFitnessLT60Seconds";
  v4[64] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[97]);
  v3[65] = @"DailyGpsThrottleEndToFitnessLT90Seconds";
  v4[65] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[98]);
  v3[66] = @"DailyGpsThrottleEndToFitnessGE90Seconds";
  v4[66] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v1[99]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  67LL);
}

void sub_1001ABE74(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1001ABEA0(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(void *)(a1 + 96) = dispatch_semaphore_create(0LL);
  return a1;
}

uint64_t sub_1001ABEF0(uint64_t a1)
{
  return a1;
}

void sub_1001ABF24(void *a1, double *a2, int a3)
{
  if (!a3
    || (uint64_t v5 = a1[18], a1[17] == v5)
    || !sub_100292850(*(double *)(v5 - 16), *(double *)(v5 - 8), *a2, a2[1], 0.0000001))
  {
    unint64_t v6 = a1[19];
    uint64_t v7 = (_OWORD *)a1[18];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = a1[17];
      uint64_t v10 = ((uint64_t)v7 - v9) >> 4;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = v6 - v9;
      if (v12 >> 3 > v11) {
        unint64_t v11 = v12 >> 3;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13) {
        int v14 = (char *)sub_100037038((uint64_t)(a1 + 19), v13);
      }
      else {
        int v14 = 0LL;
      }
      int v15 = &v14[16 * v10];
      int v16 = &v14[16 * v13];
      *(_OWORD *)int v15 = *(_OWORD *)a2;
      uint64_t v8 = v15 + 16;
      int v18 = (char *)a1[17];
      int v17 = (char *)a1[18];
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
          v15 -= 16;
          v17 -= 16;
        }

        while (v17 != v18);
        int v17 = (char *)a1[17];
      }

      a1[17] = v15;
      a1[18] = v8;
      a1[19] = v16;
      if (v17) {
        operator delete(v17);
      }
    }

    else
    {
      _OWORD *v7 = *(_OWORD *)a2;
      uint64_t v8 = v7 + 1;
    }

    a1[18] = v8;
  }

uint64_t sub_1001AC040(uint64_t a1, int a2)
{
  if (a2 < 0) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 136);
  else {
    return 0LL;
  }
}

BOOL sub_1001AC068(void *a1)
{
  uint64_t v1 = a1[20];
  uint64_t v2 = (void **)(a1 + 20);
  if (v1 != a1[21]) {
    return 1LL;
  }
  a1[5] = 0LL;
  a1[21] = v1;
  if (a1[17] != a1[18])
  {
    ++qword_1019A0A90;
    sub_100D2D9A4((uint64_t)buf);
    sub_1001AC380(v2, ((uint64_t)(a1[18] - a1[17]) >> 4) - 1);
    uint64_t v5 = a1[17];
    if ((unint64_t)(a1[18] - v5) >= 0x11)
    {
      unint64_t v6 = 1LL;
      do
      {
        double v7 = sub_100D2DBDC( buf,  *(double *)(v5 + 16 * v6 - 16),  *(double *)(v5 + 16 * v6 - 8),  *(double *)(v5 + 16 * v6),  *(double *)(v5 + 16 * v6 + 8),  0.0);
        double v8 = v7;
        uint64_t v10 = (double *)a1[21];
        unint64_t v9 = a1[22];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = (double *)*v2;
          uint64_t v13 = ((char *)v10 - (_BYTE *)*v2) >> 3;
          unint64_t v14 = v13 + 1;
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            int v17 = (char *)sub_1000071BC((uint64_t)(a1 + 22), v16);
            uint64_t v12 = (double *)a1[20];
            uint64_t v10 = (double *)a1[21];
          }

          else
          {
            int v17 = 0LL;
          }

          int v18 = (double *)&v17[8 * v13];
          double *v18 = v8;
          unint64_t v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }

          a1[20] = v18;
          a1[21] = v11;
          a1[22] = &v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }

        else
        {
          *uint64_t v10 = v7;
          unint64_t v11 = v10 + 1;
        }

        a1[21] = v11;
        *((double *)a1 + 5) = v8 + *((double *)a1 + 5);
        ++v6;
        uint64_t v5 = a1[17];
      }

      while (v6 < (a1[18] - v5) >> 4);
    }

    return 1LL;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101826790);
  }
  int v20 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "CLMM,computeSegmentLengthsAndHeading,CoordinateCount is 0",  (uint8_t *)buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101826790);
    }
    v23[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,computeSegmentLengthsAndHeading,CoordinateCount is 0",  v23,  2);
    int v22 = (uint8_t *)v21;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMapRoad::computeSegmentDistances()", "%s\n", v21);
    return 0LL;
  }

  return result;
}

void sub_1001AC380(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_100007008();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    unint64_t v6 = (char *)sub_1000071BC(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8LL];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }

      while (v11 != v10);
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

BOOL sub_1001AC414(void *a1)
{
  uint64_t v1 = (void **)(a1 + 23);
  if (a1[23] != a1[24]) {
    return 1LL;
  }
  if (a1[17] != a1[18])
  {
    sub_100D2D9A4((uint64_t)v37);
    sub_1001AC380(v1, ((uint64_t)(a1[18] - a1[17]) >> 4) - 1);
    ++qword_1019A0A98;
    uint64_t v4 = a1[17];
    if ((unint64_t)(a1[18] - v4) >= 0x11)
    {
      unint64_t v5 = 1LL;
      do
      {
        unint64_t v6 = (double *)(v4 + 16 * v5);
        double v7 = v6 - 2;
        uint64_t v8 = v6 - 1;
        unint64_t v9 = (uint64_t *)(v6 + 1);
        double v10 = sub_100D2ED14(v37, *(v6 - 2), *(v6 - 1), *v6, v6[1]);
        if (v10 < 0.0)
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101826790);
          }
          unint64_t v11 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
          {
            double v12 = *v6;
            uint64_t v13 = *v9;
            uint64_t v14 = *(void *)v7;
            uint64_t v15 = *(void *)v8;
            *(_DWORD *)std::string buf = 134284289;
            double v47 = v12;
            __int16 v48 = 2049;
            uint64_t v49 = v13;
            __int16 v50 = 2049;
            uint64_t v51 = v14;
            __int16 v52 = 2049;
            uint64_t v53 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "CLMM,invalid heading for CLMapRoad coordinate,%{private}.7lf,%{private}.7lf,prev,%{private}.7lf,%{private}.7lf",  buf,  0x2Au);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101826790);
            }
            double v27 = *v6;
            uint64_t v28 = *v9;
            uint64_t v29 = *(void *)v7;
            uint64_t v30 = *(void *)v8;
            int v38 = 134284289;
            double v39 = v27;
            __int16 v40 = 2049;
            uint64_t v41 = v28;
            __int16 v42 = 2049;
            uint64_t v43 = v29;
            __int16 v44 = 2049;
            uint64_t v45 = v30;
            LODWORD(v36) = 42;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,invalid heading for CLMapRoad coordinate,%{private}.7lf,%{private}.7lf,prev,%{private}.7lf,%{private}.7lf",  &v38,  v36);
            int v32 = (uint8_t *)v31;
            sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMapRoad::computeSegmentHeadings()", "%s\n", v31);
            if (v32 != buf) {
              free(v32);
            }
          }
        }

        int v17 = (double *)a1[24];
        unint64_t v16 = a1[25];
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = (double *)*v1;
          uint64_t v20 = ((char *)v17 - (_BYTE *)*v1) >> 3;
          unint64_t v21 = v20 + 1;
          uint64_t v22 = v16 - (void)v19;
          if (v22 >> 2 > v21) {
            unint64_t v21 = v22 >> 2;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            int v24 = (char *)sub_1000071BC((uint64_t)(a1 + 25), v23);
            uint64_t v19 = (double *)a1[23];
            int v17 = (double *)a1[24];
          }

          else
          {
            int v24 = 0LL;
          }

          int v25 = (double *)&v24[8 * v20];
          *int v25 = v10;
          int v18 = v25 + 1;
          while (v17 != v19)
          {
            uint64_t v26 = *((void *)v17-- - 1);
            *((void *)v25-- - 1) = v26;
          }

          a1[23] = v25;
          a1[24] = v18;
          a1[25] = &v24[8 * v23];
          if (v19) {
            operator delete(v19);
          }
        }

        else
        {
          *int v17 = v10;
          int v18 = v17 + 1;
        }

        a1[24] = v18;
        ++v5;
        uint64_t v4 = a1[17];
      }

      while (v5 < (a1[18] - v4) >> 4);
    }

    return 1LL;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101826790);
  }
  int v33 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "CLMM,computeSegmentLengthsAndHeading,CoordinateCount is 0",  buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101826790);
    }
    LOWORD(v38) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,computeSegmentLengthsAndHeading,CoordinateCount is 0",  &v38,  2);
    int v35 = (uint8_t *)v34;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMapRoad::computeSegmentHeadings()", "%s\n", v34);
    if (v35 != buf) {
      free(v35);
    }
    return 0LL;
  }

  return result;
}

double sub_1001AC8E0(uint64_t *a1, int a2)
{
  uint64_t v4 = a1[23];
  double v5 = -1.0;
  if (((a1[18] - a1[17]) >> 4) - 1 > (unint64_t)a2)
  {
    double v5 = sub_1001ACB28((uint64_t)a1, a2, a2 + 1);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101826790);
    }
    unint64_t v6 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *a1;
      *(_DWORD *)std::string buf = 134283777;
      uint64_t v17 = v7;
      __int16 v18 = 1026;
      int v19 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "CLMM,getHeadingForSegment,stored bearing value unavailble,had to be calculated,%{private}lld,index,%{public}d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101826790);
      }
      uint64_t v9 = *a1;
      int v12 = 134283777;
      uint64_t v13 = v9;
      __int16 v14 = 1026;
      int v15 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,getHeadingForSegment,stored bearing value unavailble,had to be calculated,%{private}lld,index,%{public}d",  &v12,  18);
      unint64_t v11 = (uint8_t *)v10;
      sub_10029211C("Generic", 1LL, 0, 0LL, "double CLMapRoad::getHeadingForSegment(const int)", "%s\n", v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  return v5;
}

double sub_1001ACB08(uint64_t *a1)
{
  unint64_t v1 = (unint64_t)(a1[18] - a1[17]) >> 4;
  else {
    return -1.0;
  }
}

double sub_1001ACB28(uint64_t a1, int a2, int a3)
{
  double result = -1.0;
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 136);
    unint64_t v5 = (unint64_t)(*(void *)(a1 + 144) - v4) >> 4;
    if ((int)v5 > a2 && (a3 & 0x80000000) == 0 && v4 && (int)v5 > a3)
    {
      unint64_t v6 = (double *)(v4 + 16LL * a2);
      uint64_t v7 = (double *)(v4 + 16LL * a3);
      sub_100D2D9A4((uint64_t)v8);
      return sub_100D2ED14(v8, *v6, v6[1], *v7, v7[1]);
    }
  }

  return result;
}

uint64_t sub_1001ACB94(uint64_t *a1)
{
  unint64_t v1 = (unint64_t)(a1[18] - a1[17]) >> 4;
  uint64_t v3 = 0LL;
  int v4 = 0;
  int v5 = v1 - 1;
  double v6 = -1.0;
  do
  {
    double v7 = sub_1001AC8E0(a1, v4);
    if (v7 >= 0.0)
    {
      double v8 = v7;
      if (v6 >= 0.0)
      {
        double v9 = fmod(v7 - v6, 360.0);
        if (v9 < 0.0) {
          double v9 = v9 + 360.0;
        }
        if (v9 > 180.0) {
          double v9 = v9 + -360.0;
        }
        if (fabs(v9) <= 7.5) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = (v3 + 1);
        }
      }
    }

    else
    {
      double v8 = v6;
    }

    ++v4;
    double v6 = v8;
  }

  while (v5 != v4);
  return v3;
}

BOOL sub_1001ACC84(uint64_t a1, int a2, double a3, double a4)
{
  if (((*(void *)(a1 + 144) - *(void *)(a1 + 136)) & 0xFFFFFFFF0LL) == 0x20) {
    return 0LL;
  }
  sub_1001AC068((void *)a1);
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v9 = *(void *)(a1 + 168) - v8;
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = 0LL;
  unint64_t v11 = v9 >> 3;
  double v12 = *(double *)(a1 + 40) * a3;
  if (v11 <= 1) {
    unint64_t v11 = 1LL;
  }
  while (1)
  {
    double v12 = v12 - *(double *)(v8 + 8 * v10);
    if (v12 <= 0.0) {
      break;
    }
    if (v11 == ++v10) {
      return 0LL;
    }
  }

  if (!(_DWORD)v10)
  {
    double v20 = sub_1001AC8E0((uint64_t *)a1, 0);
    double v21 = sub_1001AC8E0((uint64_t *)a1, 1);
    double v16 = v21;
    if (v20 >= 0.0 && v21 >= 0.0)
    {
      double v22 = fmod(v20 - v21, 360.0);
      if (v22 < 0.0) {
        double v22 = v22 + 360.0;
      }
      if (v22 > 180.0) {
        double v22 = v22 + -360.0;
      }
      if (fabs(v22) > a4) {
        return 1LL;
      }
    }

    if (a2)
    {
      unint64_t v23 = (uint64_t *)a1;
      int v24 = 2;
      goto LABEL_39;
    }

    return 0LL;
  }

  double v14 = sub_1001AC8E0((uint64_t *)a1, (int)v10 - 1);
  double v15 = sub_1001AC8E0((uint64_t *)a1, v10);
  double v16 = v15;
  if (v14 < 0.0 || v15 < 0.0)
  {
    if (a2)
    {
LABEL_31:
      double v25 = sub_1001AC8E0((uint64_t *)a1, (int)v10 - 2);
      if (v14 >= 0.0 && v25 >= 0.0)
      {
        double v26 = fmod(v25 - v14, 360.0);
        if (v26 < 0.0) {
          double v26 = v26 + 360.0;
        }
        if (v26 > 180.0) {
          double v26 = v26 + -360.0;
        }
        if (fabs(v26) > a4) {
          return 1LL;
        }
      }

      int v24 = v10 + 1;
      unint64_t v23 = (uint64_t *)a1;
LABEL_39:
      double v27 = sub_1001AC8E0(v23, v24);
      if (v16 >= 0.0 && v27 >= 0.0)
      {
        double v28 = fmod(v16 - v27, 360.0);
        if (v28 < 0.0) {
          double v28 = v28 + 360.0;
        }
        if (v28 > 180.0) {
          double v28 = v28 + -360.0;
        }
        if (fabs(v28) > a4) {
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  double v17 = fmod(v14 - v15, 360.0);
  if (v17 < 0.0) {
    double v17 = v17 + 360.0;
  }
  if (v17 > 180.0) {
    double v17 = v17 + -360.0;
  }
  double v18 = fabs(v17);
  BOOL result = v18 > a4;
  if (v18 <= a4 && a2 != 0) {
    goto LABEL_31;
  }
  return result;
}

BOOL sub_1001ACF04(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return 0LL;
  }
  BOOL result = sub_1001AD020(a1, a2);
  if (!result) {
    return result;
  }
  BOOL result = sub_1001AD06C(a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = (*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 4;
  uint64_t v6 = (v5 - 1);
  unsigned int v7 = v5 - 2;
  uint64_t v8 = 1LL;
  uint64_t v9 = 16LL;
  do
  {
    uint64_t v10 = *(void *)(*a2 + 136);
    uint64_t v11 = *(void *)(*a2 + 144) - v10;
    double v12 = (double *)(v10 + v9);
    if ((v7 & 0x80000000) == 0)
    {
      uint64_t v13 = (int)(v11 >> 4);
      uint64_t v14 = *(void *)(a1 + 136);
      BOOL v15 = (int)v7 < (int)((unint64_t)(*(void *)(a1 + 144) - v14) >> 4) && v8 < v13;
      if (v15 && v14 != 0)
      {
        BOOL result = sub_100292850(*v12, v12[1], *(double *)(v14 + 16LL * v7), *(double *)(v14 + 16LL * v7 + 8), 0.0000001);
        if (!result) {
          break;
        }
      }
    }

    ++v8;
    v9 += 16LL;
    --v7;
    BOOL result = 1LL;
  }

  while (v6 != v8);
  return result;
}

BOOL sub_1001AD020(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0LL;
  }
  uint64_t v3 = *(double **)(a1 + 136);
  double v4 = 0.0;
  double v5 = 0.0;
  double v6 = 0.0;
  if (*(double **)(a1 + 144) != v3)
  {
    double v5 = *v3;
    double v6 = v3[1];
  }

  uint64_t v7 = *(void *)(v2 + 144);
  double v8 = 0.0;
  if (v7 != *(void *)(v2 + 136))
  {
    double v4 = *(double *)(v7 - 16);
    double v8 = *(double *)(v7 - 8);
  }

  return sub_100292850(v5, v6, v4, v8, 0.0000001);
}

BOOL sub_1001AD06C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 144);
  double v4 = 0.0;
  double v5 = 0.0;
  double v6 = 0.0;
  if (v3 != *(void *)(a1 + 136))
  {
    double v5 = *(double *)(v3 - 16);
    double v6 = *(double *)(v3 - 8);
  }

  uint64_t v8 = v2 + 136;
  uint64_t v7 = *(double **)(v2 + 136);
  double v9 = 0.0;
  if (*(double **)(v8 + 8) != v7)
  {
    double v4 = *v7;
    double v9 = v7[1];
  }

  return sub_100292850(v5, v6, v4, v9, 0.0000001);
}

BOOL sub_1001AD0B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0LL;
  }
  uint64_t v3 = *(double **)(a1 + 136);
  double v4 = 0.0;
  double v5 = 0.0;
  double v6 = 0.0;
  if (*(double **)(a1 + 144) != v3)
  {
    double v5 = *v3;
    double v6 = v3[1];
  }

  uint64_t v8 = v2 + 136;
  uint64_t v7 = *(double **)(v2 + 136);
  double v9 = 0.0;
  if (*(double **)(v8 + 8) != v7)
  {
    double v4 = *v7;
    double v9 = v7[1];
  }

  return sub_100292850(v5, v6, v4, v9, 0.0000001);
}

BOOL sub_1001AD104(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 144);
  double v4 = 0.0;
  double v5 = 0.0;
  double v6 = 0.0;
  if (v3 != *(void *)(a1 + 136))
  {
    double v5 = *(double *)(v3 - 16);
    double v6 = *(double *)(v3 - 8);
  }

  uint64_t v7 = *(void *)(v2 + 144);
  double v8 = 0.0;
  if (v7 != *(void *)(v2 + 136))
  {
    double v4 = *(double *)(v7 - 16);
    double v8 = *(double *)(v7 - 8);
  }

  return sub_100292850(v5, v6, v4, v8, 0.0000001);
}

uint64_t sub_1001AD150(uint64_t a1)
{
  unint64_t v1 = *(double **)(a1 + 136);
  uint64_t v2 = *(void *)(a1 + 144);
  if ((unint64_t)(v2 - (void)v1) >= 0x20
    && (v2 - (void)v1 != 32 || !sub_100292850(*(double *)(v2 - 16), *(double *)(v2 - 8), *v1, v1[1], 0.0000001)))
  {
    return 1LL;
  }

  uint64_t result = 0LL;
  ++qword_1019A0AA0;
  return result;
}

BOOL sub_1001AD1A8(uint64_t *a1, uint64_t a2, void *a3, int a4)
{
  if (a3)
  {
    if ([a3 valueForKey:@"roadID"]) {
      *a1 = (uint64_t)objc_msgSend(objc_msgSend(a3, "valueForKey:", @"roadID"), "longLongValue");
    }
    if ([a3 valueForKey:@"roadClass"]) {
      *((_DWORD *)a1 + 5) = objc_msgSend(objc_msgSend(a3, "valueForKey:", @"roadClass"), "intValue");
    }
    if ([a3 valueForKey:@"formOfWay"]) {
      *((_DWORD *)a1 + 6) = objc_msgSend(objc_msgSend(a3, "valueForKey:", @"formOfWay"), "intValue");
    }
    if ([a3 valueForKey:@"travelDirection"]) {
      *((_DWORD *)a1 + 18) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"travelDirection"),  "intValue");
    }
    if ([a3 valueForKey:@"rampType"]) {
      *((_DWORD *)a1 + 19) = objc_msgSend(objc_msgSend(a3, "valueForKey:", @"rampType"), "intValue");
    }
    if ([a3 valueForKey:@"speedLimit"]) {
      *((double *)a1 + 4) = (double)(int)objc_msgSend(objc_msgSend(a3, "valueForKey:", @"speedLimit"), "intValue");
    }
    if ([a3 valueForKey:@"isDrivable"]) {
      *((_BYTE *)a1 + 81) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"isDrivable"),  "BOOLValue");
    }
    if ([a3 valueForKey:@"isRoadPedestrianNavigable"]) {
      unsigned __int8 v42 = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"isRoadPedestrianNavigable"),  "BOOLValue");
    }
    else {
      unsigned __int8 v42 = 0;
    }
    if ([a3 valueForKey:@"isTunnel"]) {
      *((_BYTE *)a1 + 18) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"isTunnel"),  "BOOLValue");
    }
    if ([a3 valueForKey:@"isBridge"]) {
      *((_BYTE *)a1 + 19) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"isBridge"),  "BOOLValue");
    }
    if ([a3 valueForKey:@"isRail"]) {
      *((_BYTE *)a1 + 17) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"isRail"),  "BOOLValue");
    }
    if ([a3 valueForKey:@"startJunction"]) {
      *((_DWORD *)a1 + 27) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"startJunction"),  "intValue");
    }
    if ([a3 valueForKey:@"stopJunction"]) {
      *((_DWORD *)a1 + 28) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"stopJunction"),  "intValue");
    }
    if ([a3 valueForKey:@"startTileBorder"]) {
      *((_BYTE *)a1 + 116) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"startTileBorder"),  "BOOLValue");
    }
    if ([a3 valueForKey:@"endTileBorder"]) {
      *((_BYTE *)a1 + 117) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"endTileBorder"),  "BOOLValue");
    }
    if ([a3 valueForKey:@"bikeableSide"]) {
      *((_DWORD *)a1 + 22) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"bikeableSide"),  "intValue");
    }
    if ([a3 valueForKey:@"walkableSide"]) {
      *((_DWORD *)a1 + 21) = objc_msgSend( objc_msgSend(a3, "valueForKey:", @"walkableSide"),  "intValue");
    }
    if ([a3 valueForKey:@"coordinateCount"])
    {
      int v12 = objc_msgSend(objc_msgSend(a3, "valueForKey:", @"coordinateCount"), "intValue");
      if (v12 >= 1)
      {
        int v13 = v12;
        uint64_t v14 = 0LL;
        while (1)
        {
          BOOL v15 = objc_autoreleasePoolPush();
          id v16 = [objc_msgSend( a3 valueForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"coord%i", v14)), "componentsSeparatedByString:", @","];
          if ([v16 count] != (id)3) {
            break;
          }
          objc_msgSend(objc_msgSend(v16, "objectAtIndexedSubscript:", 0), "doubleValue");
          uint64_t v18 = v17;
          objc_msgSend(objc_msgSend(v16, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(void *)std::string buf = v18;
          *(void *)&uint8_t buf[8] = v19;
          sub_1001ABF24(a1, (double *)buf, 1);
          uint64_t v20 = (a1[18] - a1[17]) & 0xFFFFFFFF0LL;
          objc_msgSend(objc_msgSend(v16, "objectAtIndexedSubscript:", 2), "doubleValue");
          if (v20 == 16) {
            uint64_t v22 = 15LL;
          }
          else {
            uint64_t v22 = 16LL;
          }
          a1[v22] = v21;
          objc_autoreleasePoolPop(v15);
          uint64_t v14 = (v14 + 1);
          if (v13 == (_DWORD)v14) {
            goto LABEL_53;
          }
        }

        objc_autoreleasePoolPop(v15);
        return 0LL;
      }
    }

void sub_1001AD9C4(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_1001AD9F0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

id sub_1001ADC5C()
{
  id v0 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  unint64_t v1 = objc_autoreleasePoolPush();
  if (qword_101993B58 - qword_101993B50 != 8)
  {
    unint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = objc_alloc(&OBJC_CLASS___GPSCalCoreAnalyticsBin);
      double v4 = (double *)(qword_101993B50 + 8 * v2++);
      objc_msgSend( v0,  "addObject:",  -[GPSCalCoreAnalyticsBin initWithSpeeds:speedUB:](v3, "initWithSpeeds:speedUB:", *v4, v4[1]));
    }

    while (v2 < ((qword_101993B58 - qword_101993B50) >> 3) - 1);
  }

  objc_autoreleasePoolPop(v1);
  return v0;
}

uint64_t sub_1001ADD0C(uint64_t a1, char a2, char a3)
{
  id v6 = sub_1001ADC5C();
  sub_1001ADF70(a1, @"GPSSpeedToKValueTable", (uint64_t)v6, 1, a2, a3);
  *(void *)a1 = off_1018267C0;
  sub_1002E4C3C(a1 + 56, "CMGPSRawSpeedKValueMtex", 0LL, 1LL);
  *(void *)(a1 + 48) = sub_1001ADC5C();
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101826830);
  }
  BOOL v7 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    unsigned int v8 = [*(id *)(a1 + 48) count];
    *(_DWORD *)std::string buf = 67109120;
    unsigned int v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "GPSRawSpeedToKValueTable: number of def bins: %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    uint64_t v10 = qword_101934518;
    unsigned int v11 = [*(id *)(a1 + 48) count];
    v13[0] = 67109120;
    v13[1] = v11;
    int v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  1LL,  "GPSRawSpeedToKValueTable: number of def bins: %d",  v13);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMMobilityCal::GPSRawSpeedToKValueTable::GPSRawSpeedToKValueTable(BOOL, BOOL)",  "%s\n",  v12);
  }

  sub_1001AE424(a1);
  sub_1001AE724(a1, 1);
  return a1;
}

void sub_1001ADF40(_Unwind_Exception *a1)
{
}

uint64_t sub_1001ADF70(uint64_t a1, void *a2, uint64_t a3, int a4, char a5, char a6)
{
  *(void *)a1 = &off_101826860;
  *(void *)(a1 + 8) = +[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:");
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = -1;
  *(void *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = a5;
  *(_BYTE *)(a1 + 41) = a6;
  *(void *)(a1 + 24) = sub_1002F8DDC();
  if ((sub_1001B089C(a1) & 0x80000000) != 0)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    unsigned int v11 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unable to restore table %@.", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      uint64_t v18 = *(void *)(a1 + 32);
      int v24 = 138412290;
      uint64_t v25 = v18;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Unable to restore table %@.",  &v24,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::CalTable(NSString *, NSArray<outT *> *, const TableVers ion, BOOL, BOOL) [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v19);
    }

    int v13 = *(void **)(a1 + 8);
    if (v13 && [v13 count])
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      uint64_t v14 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v27) = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Use default bins version %d and store them.",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101826830);
        }
        int v21 = *(_DWORD *)(a1 + 16);
        int v24 = 67109120;
        LODWORD(v25) = v21;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Use default bins version %d and store them.",  &v24);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::CalTable(NSString *, NSArray<outT *> *, const TableVe rsion, BOOL, BOOL) [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v22);
      }
    }

    else
    {
      *(void *)(a1 + 8) = 0LL;
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      id v16 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Unexpected error in calibration table initialization.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101826830);
        }
        LOWORD(v24) = 0;
        LODWORD(v23) = 2;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Unexpected error in calibration table initialization.",  &v24,  v23);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::CalTable(NSString *, NSArray<outT *> *, const TableVe rsion, BOOL, BOOL) [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v20);
      }
    }
  }

  return a1;
}

uint64_t sub_1001AE424(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a1 + 20))
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    uint64_t v2 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "The version of restored table does not match runtime version. Restoring default.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      v8[0] = 0;
      double v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "The version of restored table does not match runtime version. Restoring default.",  v8,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "CMError CMMobilityCal::GPSRawSpeedToKValueTable::version()", "%s\n", v5);
    }

    *(void *)(a1 + 8) = +[NSMutableArray arrayWithArray:]( &OBJC_CLASS___NSMutableArray,  "arrayWithArray:",  sub_1001ADC5C());
    if (sub_1001AF930(a1) == 100)
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 16);
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      uint64_t v3 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Table display error.", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101826830);
        }
        v8[0] = 0;
        LODWORD(v7) = 2;
        id v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Table display error.",  v8,  v7);
        sub_10029211C("Generic", 1LL, 0, 0LL, "CMError CMMobilityCal::GPSRawSpeedToKValueTable::version()", "%s\n", v6);
      }
    }
  }

  return 100LL;
}

uint64_t sub_1001AE724(uint64_t a1, char a2)
{
  char v2 = a2;
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if ((a2 & 1) != 0)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    double v5 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "* CMMobilityCal::GPSRawSpeedToKValueTable *",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_15;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    LOWORD(v54) = 0;
    id v6 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "* CMMobilityCal::GPSRawSpeedToKValueTable *",  &v54,  2);
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    uint64_t v7 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "* CMMobilityCal::GPSRawSpeedToKValueTable *",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_15;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    LOWORD(v54) = 0;
    id v6 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "* CMMobilityCal::GPSRawSpeedToKValueTable *",  &v54,  2);
  }

  __int16 v48 = (uint8_t *)v6;
  sub_10029211C("Generic", 1LL, 0, 2LL, "CMError CMMobilityCal::GPSRawSpeedToKValueTable::show(BOOL)", "%s\n", v6);
  if (v48 != buf) {
    free(v48);
  }
LABEL_15:
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  unsigned int v8 = *(void **)(a1 + 8);
  id v9 = [v8 countByEnumeratingWithState:&v50 objects:v64 count:16];
  if (!v9) {
    return 100LL;
  }
  id v10 = v9;
  int v11 = 0;
  uint64_t v12 = *(void *)v51;
  char v49 = v2;
  do
  {
    int v13 = 0LL;
    do
    {
      if (*(void *)v51 != v12) {
        objc_enumerationMutation(v8);
      }
      uint64_t v14 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)v13);
      if (v14)
      {
        int v15 = p_vtable[162];
        if ((v2 & 1) != 0)
        {
          id v16 = (os_log_s *)qword_101934518;
          if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
          {
            [v14 mean];
            uint64_t v18 = v17;
            [v14 variance];
            uint64_t v20 = v19;
            unsigned int v21 = [v14 updateCount];
            [v14 lastUpdateTime];
            *(_DWORD *)std::string buf = 67110144;
            int v66 = v11;
            __int16 v67 = 2048;
            uint64_t v68 = v18;
            __int16 v69 = 2048;
            uint64_t v70 = v20;
            __int16 v71 = 1024;
            unsigned int v72 = v21;
            p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
            __int16 v73 = 2048;
            uint64_t v74 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Bin #%d | mean: %f | variance: %f | updateCount: %d | lastUpdateTime: %f",  buf,  0x2Cu);
            ++v11;
            char v2 = v49;
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            uint64_t v23 = qword_101934518;
            [v14 mean];
            uint64_t v25 = v24;
            [v14 variance];
            uint64_t v27 = v26;
            unsigned int v28 = [v14 updateCount];
            [v14 lastUpdateTime];
            int v54 = 67110144;
            int v55 = v11;
            __int16 v56 = 2048;
            uint64_t v57 = v25;
            __int16 v58 = 2048;
            uint64_t v59 = v27;
            __int16 v60 = 1024;
            unsigned int v61 = v28;
            __int16 v62 = 2048;
            uint64_t v63 = v29;
            double v30 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "Bin #%d | mean: %f | variance: %f | updateCount: %d | lastUpdateTime: %f",  &v54);
LABEL_40:
            uint64_t v45 = (uint8_t *)v30;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::GPSRawSpeedToKValueTable::show(BOOL)",  "%s\n",  v30);
            if (v45 != buf) {
              free(v45);
            }
            ++v11;
            p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
          }
        }

        else
        {
          BOOL v31 = (os_log_s *)qword_101934518;
          if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
          {
            [v14 mean];
            uint64_t v33 = v32;
            [v14 variance];
            uint64_t v35 = v34;
            unsigned int v36 = [v14 updateCount];
            [v14 lastUpdateTime];
            *(_DWORD *)std::string buf = 67110144;
            int v66 = v11;
            __int16 v67 = 2048;
            uint64_t v68 = v33;
            __int16 v69 = 2048;
            uint64_t v70 = v35;
            __int16 v71 = 1024;
            unsigned int v72 = v36;
            p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
            __int16 v73 = 2048;
            uint64_t v74 = v37;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Bin #%d | mean: %f | variance: %f | updateCount: %d | lastUpdateTime: %f",  buf,  0x2Cu);
            ++v11;
            char v2 = v49;
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            uint64_t v38 = qword_101934518;
            [v14 mean];
            uint64_t v40 = v39;
            [v14 variance];
            uint64_t v42 = v41;
            unsigned int v43 = [v14 updateCount];
            [v14 lastUpdateTime];
            int v54 = 67110144;
            int v55 = v11;
            __int16 v56 = 2048;
            uint64_t v57 = v40;
            __int16 v58 = 2048;
            uint64_t v59 = v42;
            __int16 v60 = 1024;
            unsigned int v61 = v43;
            __int16 v62 = 2048;
            uint64_t v63 = v44;
            double v30 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v38,  0LL,  "Bin #%d | mean: %f | variance: %f | updateCount: %d | lastUpdateTime: %f",  &v54);
            goto LABEL_40;
          }
        }
      }

      int v13 = (char *)v13 + 1;
    }

    while (v10 != v13);
    id v46 = [v8 countByEnumeratingWithState:&v50 objects:v64 count:16];
    id v10 = v46;
  }

  while (v46);
  return 100LL;
}

uint64_t sub_1001AEE14(uint64_t a1)
{
  *(void *)a1 = &off_101826860;

  *(void *)(a1 + 32) = 0LL;
  char v2 = *(void **)(a1 + 8);
  if (v2)
  {

    *(void *)(a1 + 8) = 0LL;
  }

  return a1;
}

uint64_t sub_1001AEE68(uint64_t a1)
{
  *(void *)a1 = off_1018267C0;

  sub_1002E4CB0(a1 + 56);
  return sub_1001AEE14(a1);
}

void sub_1001AEEAC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1001AEE68(a1);
  operator delete(v1);
}

void *sub_1001AEEC0(uint64_t a1, double *a2)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101826830);
  }
  double v4 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempt to lookup bin.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    v22[0] = 0;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Attempt to lookup bin.",  v22,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual GPSCalCoreAnalyticsBin *CMMobilityCal::GPSRawSpeedToKValueTable::lookupOutputGivenInput(const double &)",  "%s\n",  v17);
  }

  uint64_t v6 = a1 + 56;
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)std::string buf = a1 + 56;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 56);
  __int16 v25 = 256;
  double v7 = *a2;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  unsigned int v8 = *(void **)(a1 + 8);
  id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v9)
  {
    double v10 = v7 + 0.00001;
    uint64_t v11 = *(void *)v19;
LABEL_8:
    uint64_t v12 = 0LL;
    while (1)
    {
      if (*(void *)v19 != v11) {
        objc_enumerationMutation(v8);
      }
      int v13 = *(void **)(*((void *)&v18 + 1) + 8 * v12);
      if (v13)
      {
        [*(id *)(*((void *)&v18 + 1) + 8 * v12) speedLB];
        if (v10 >= v14)
        {
          [v13 speedUB];
          if (v10 < v15) {
            break;
          }
        }
      }

      if (v9 == (id)++v12)
      {
        id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
        if (v9) {
          goto LABEL_8;
        }
        break;
      }
    }
  }

  else
  {
    int v13 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  return v13;
}

void sub_1001AF154( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001AF188(uint64_t a1, double *a2, void *a3)
{
  uint64_t v6 = a1 + 56;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v21 = a1 + 56;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 56);
  __int16 v22 = 256;
  double v7 = *a2;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  unsigned int v8 = *(void **)(v6 - 48);
  id v9 = [v8 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v9)
  {
    double v10 = v7 + 0.00001;
    uint64_t v11 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v11) {
          objc_enumerationMutation(v8);
        }
        int v13 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        if (v13)
        {
          [*(id *)(*((void *)&v17 + 1) + 8 * (void)i) speedLB];
          if (v10 >= v14)
          {
            [v13 speedUB];
            if (v10 < v15)
            {
              [a3 mean];
              objc_msgSend(v13, "setMean:");
              [a3 variance];
              objc_msgSend(v13, "setMean:");
              objc_msgSend(v13, "setMean:", (double)(int)objc_msgSend(a3, "updateCount"));
              [a3 lastUpdateTime];
              objc_msgSend(v13, "setMean:");
              goto LABEL_13;
            }
          }
        }
      }

      id v9 = [v8 countByEnumeratingWithState:&v17 objects:v23 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

void sub_1001AF32C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001AF358(uint64_t a1, void *a2)
{
  if (v4 != 0.0)
  {
    objc_msgSend(objc_msgSend(a2, "stop"), "timeIntervalSinceReferenceDate");
    double v6 = v5;
    objc_msgSend(objc_msgSend(a2, "start"), "timeIntervalSinceReferenceDate");
    if (v6 - v7 != 0.0)
    {
      [a2 distanceGps];
      double v9 = v8;
      [a2 distanceRawPed];
      double v30 = v9 / v10;
      [a2 distanceRawPed];
      double v12 = v11;
      objc_msgSend(objc_msgSend(a2, "stop"), "timeIntervalSinceReferenceDate");
      double v14 = v13;
      objc_msgSend(objc_msgSend(a2, "start"), "timeIntervalSinceReferenceDate");
      double v29 = v12 / (v14 - v15);
      [a2 distanceGps];
      double v17 = v16 / 400.0;
      if (v17 <= 1.0) {
        double v18 = v17 * 0.4;
      }
      else {
        double v18 = 0.4;
      }
      double v28 = v18;
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      __int128 v19 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Attempt to update GPS calibration table.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101826830);
        }
        __int16 v27 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Attempt to update GPS calibration table.",  &v27,  2);
        uint64_t v23 = (uint8_t *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::GPSRawSpeedToKValueTable::receiveSingleCalTrack(const CalibrationTrack *)",  "%s\n",  v22);
        if (v23 != buf) {
          free(v23);
        }
      }

      sub_1001AF6F4(a1, &v30, &v29, &v28);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      __int128 v20 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Attempt to persist GPS calibration table.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101826830);
        }
        __int16 v27 = 0;
        LODWORD(v26) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Attempt to persist GPS calibration table.",  &v27,  v26);
        __int16 v25 = (uint8_t *)v24;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::GPSRawSpeedToKValueTable::receiveSingleCalTrack(const CalibrationTrack *)",  "%s\n",  v24);
        if (v25 != buf) {
          free(v25);
        }
      }

      sub_1001AF930(a1);
    }
  }

  return 100LL;
}

uint64_t sub_1001AF6F4(uint64_t a1, double *a2, double *a3, double *a4)
{
  uint64_t v8 = a1 + 56;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v33 = a1 + 56;
  (*(void (**)(uint64_t))(v7 + 16))(a1 + 56);
  __int16 v34 = 256;
  double v9 = *a3;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  double v10 = *(void **)(v8 - 48);
  id v11 = [v10 countByEnumeratingWithState:&v29 objects:v35 count:16];
  if (v11)
  {
    double v12 = v9 + 0.00001;
    uint64_t v13 = *(void *)v30;
    while (2)
    {
      for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v13) {
          objc_enumerationMutation(v10);
        }
        double v15 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
        if (v15)
        {
          [*(id *)(*((void *)&v29 + 1) + 8 * (void)i) speedLB];
          if (v12 >= v16)
          {
            [v15 speedUB];
            if (v12 < v17)
            {
              [v15 mean];
              double v19 = v18;
              double v20 = *a4;
              double v21 = *a2;
              [v15 variance];
              double v23 = v22;
              double v24 = *a4;
              double v25 = *a2;
              [v15 mean];
              double v27 = v26;
              [v15 setMean:v20 * v21 + v19 * (1.0 - v20)];
              [v15 setVariance:(1.0 - v20) * (v23 + v24 * ((v25 - v27) * (v25 - v27)))];
              objc_msgSend(v15, "setUpdateCount:", objc_msgSend(v15, "updateCount") + 1);
              [v15 setLastUpdateTime:CFAbsoluteTimeGetCurrent()];
              goto LABEL_13;
            }
          }
        }
      }

      id v11 = [v10 countByEnumeratingWithState:&v29 objects:v35 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }

void sub_1001AF8FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001AF930(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 41)) {
    return 100LL;
  }
  if ((objc_opt_respondsToSelector( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:") & 1) != 0 && (v23[0] = @"version",  char v2 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 16)),  v23[1] = @"bins",  v24[0] = v2,  v24[1] = +[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", *(void *)(a1 + 8)),  +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v24,  v23,  2LL),  1LL,  0LL)))
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    uint64_t v3 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempt to store %@.", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      uint64_t v12 = *(void *)(a1 + 32);
      int v19 = 138412290;
      uint64_t v20 = v12;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Attempt to store %@.",  &v19,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::store() [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v13);
    }

    sub_1002AB3DC(*(void *)(a1 + 24));
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 944LL))(*(void *)(a1 + 24)) & 1) != 0)
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      double v5 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        *(_DWORD *)std::string buf = 138412290;
        uint64_t v22 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Table %@ stored successfully.", buf, 0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101826830);
        }
        uint64_t v14 = *(void *)(a1 + 32);
        int v19 = 138412290;
        uint64_t v20 = v14;
        LODWORD(v18) = 12;
        double v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Table %@ stored successfully.",  &v19,  v18);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::store() [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v15);
      }

      return 100LL;
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    double v9 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to store %@.", buf, 0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      uint64_t v16 = *(void *)(a1 + 32);
      int v19 = 138412290;
      uint64_t v20 = v16;
      LODWORD(v18) = 12;
      double v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Failed to store %@.",  &v19,  v18);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::store() [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v17);
    }

    return 103LL;
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    uint64_t v8 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to serialize calibration table for storage.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826830);
      }
      LOWORD(v19) = 0;
      id v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Failed to serialize calibration table for storage.",  &v19,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::store() [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v11);
    }

    return 112LL;
  }

uint64_t sub_1001AFF5C(uint64_t a1, _OWORD *a2)
{
  uint64_t v5 = a1 + 56;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v85 = a1 + 56;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 56);
  __int16 v86 = 256;
  __int128 v6 = a2[1];
  v83[0] = *a2;
  v83[1] = v6;
  v84[0] = a2[2];
  *(_OWORD *)((char *)v84 + 12) = *(_OWORD *)((char *)a2 + 44);
  int v61 = sub_100F8D984((uint64_t)v83);
  __int128 v7 = a2[1];
  v81[0] = *a2;
  v81[1] = v7;
  v82[0] = a2[2];
  *(_OWORD *)((char *)v82 + 12) = *(_OWORD *)((char *)a2 + 44);
  int v60 = sub_100496E10((unsigned int *)v81);
  __int128 v8 = a2[1];
  v79[0] = *a2;
  v79[1] = v8;
  v80[0] = a2[2];
  *(_OWORD *)((char *)v80 + 12) = *(_OWORD *)((char *)a2 + 44);
  HIDWORD(v59) = sub_100F8DA2C((uint64_t)v79);
  uint64_t v54 = v5;
  __int128 v9 = a2[1];
  v77[0] = *a2;
  v77[1] = v9;
  v78[0] = a2[2];
  *(_OWORD *)((char *)v78 + 12) = *(_OWORD *)((char *)a2 + 44);
  LODWORD(v59) = sub_100F8DAEC((uint64_t)v77);
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v74 = 0u;
  __int128 v73 = 0u;
  obuint64_t j = *(id *)(a1 + 8);
  double v10 = COERCE_DOUBLE([obj countByEnumeratingWithState:&v73 objects:v126 count:16]);
  if (v10 != 0.0)
  {
    uint64_t v12 = _NSConcreteStackBlock;
    uint64_t v13 = sub_1001B0618;
    uint64_t v14 = *(void *)v74;
    double v15 = &unk_1018267E8;
    uint64_t v16 = @"com.apple.CoreMotion.GPSCalibration";
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    *(void *)&__int128 v11 = 67111424LL;
    __int128 v55 = v11;
    do
    {
      uint64_t v18 = 0LL;
      double v57 = v10;
      do
      {
        if (*(void *)v74 != v14) {
          objc_enumerationMutation(obj);
        }
        int v19 = *(void **)(*((void *)&v73 + 1) + 8LL * (void)v18);
        if (v19)
        {
          if ((int)[*(id *)(*((void *)&v73 + 1) + 8 * (void)v18) updateCount] < 1)
          {
            double v21 = 0.0;
          }

          else
          {
            [v19 variance];
            double v21 = sqrt(v20 / (double)(int)[v19 updateCount]) * 1.98;
          }

          v68[0] = v12;
          if (v21 <= 0.0) {
            double v22 = 0.0;
          }
          else {
            double v22 = 1.0 - v21;
          }
          v68[1] = 3221225472LL;
          v68[2] = v13;
          v68[3] = v15;
          int v69 = v61;
          int v70 = v60;
          v68[4] = v19;
          int v71 = HIDWORD(v59);
          int v72 = LODWORD(v59);
          *(double *)&v68[5] = v22;
          *(double *)&v68[6] = v21;
          AnalyticsSendEventLazy(v16, v68);
          double v23 = (os_log_s *)qword_101934518;
          if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
          {
            [v19 speedLB];
            double v25 = v24;
            std::string __p = 0LL;
            int v66 = 0LL;
            uint64_t v67 = 0LL;
            sub_100007590( &__p,  (const void *)qword_101993B50,  qword_101993B58,  (qword_101993B58 - qword_101993B50) >> 3);
            uint64_t v26 = v14;
            double v27 = p_vtable;
            double v28 = v16;
            __int128 v29 = v15;
            __int128 v30 = v13;
            __int128 v31 = v12;
            if (v66 == __p)
            {
              LODWORD(v32) = 0;
            }

            else
            {
              uint64_t v32 = 0LL;
              unint64_t v33 = (v66 - (_BYTE *)__p) >> 3;
              if (v33 <= 1) {
                unint64_t v33 = 1LL;
              }
              while (*((double *)__p + v32) < v25)
              {
                if (v33 == ++v32)
                {
                  LODWORD(v32) = v33;
                  break;
                }
              }
            }

            [v19 mean];
            uint64_t v35 = v34;
            [v19 variance];
            uint64_t v37 = v36;
            [v19 lastUpdateTime];
            *(_DWORD *)std::string buf = v55;
            int v107 = v61;
            __int16 v108 = 1024;
            int v109 = v60;
            __int16 v110 = 1024;
            int v111 = v32;
            __int16 v112 = 1024;
            int v113 = HIDWORD(v59);
            __int16 v114 = 1024;
            int v115 = LODWORD(v59);
            __int16 v116 = 2048;
            uint64_t v117 = v35;
            __int16 v118 = 2048;
            uint64_t v119 = v37;
            __int16 v120 = 2048;
            double v121 = v22;
            __int16 v122 = 2048;
            double v123 = v21;
            __int16 v124 = 2048;
            uint64_t v125 = v38;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "GPS Calibration, sent Core Analytics event. ageGroup %d | gender: %d | speedBin: %d | userBmiBin: %d | use rHeightBin: %d | kvalueMovingMean: %f | kvalueMovingVar: %f | kvalueConfidenceMetric: %f | kvalueStandardE rror: %f | timeFromLastUpdate: %f",  buf,  0x52u);
            if (__p)
            {
              int v66 = __p;
              operator delete(__p);
            }

            uint64_t v12 = v31;
            uint64_t v13 = v30;
            double v15 = v29;
            uint64_t v16 = v28;
            p_vtable = v27;
            uint64_t v14 = v26;
            double v10 = v57;
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            uint64_t v39 = qword_101934518;
            [v19 speedLB];
            double v41 = v40;
            __int16 v62 = 0LL;
            uint64_t v63 = 0LL;
            uint64_t v64 = 0LL;
            sub_100007590( &v62,  (const void *)qword_101993B50,  qword_101993B58,  (qword_101993B58 - qword_101993B50) >> 3);
            if (v63 == v62)
            {
              LODWORD(v42) = 0;
            }

            else
            {
              uint64_t v42 = 0LL;
              unint64_t v43 = (v63 - (_BYTE *)v62) >> 3;
              if (v43 <= 1) {
                unint64_t v43 = 1LL;
              }
              while (*((double *)v62 + v42) < v41)
              {
                if (v43 == ++v42)
                {
                  LODWORD(v42) = v43;
                  break;
                }
              }
            }

            [v19 mean];
            uint64_t v45 = v44;
            [v19 variance];
            uint64_t v47 = v46;
            [v19 lastUpdateTime];
            v87[0] = v55;
            v87[1] = v61;
            __int16 v88 = 1024;
            int v89 = v60;
            __int16 v90 = 1024;
            int v91 = v42;
            __int16 v92 = 1024;
            int v93 = HIDWORD(v59);
            __int16 v94 = 1024;
            int v95 = LODWORD(v59);
            __int16 v96 = 2048;
            uint64_t v97 = v45;
            __int16 v98 = 2048;
            uint64_t v99 = v47;
            __int16 v100 = 2048;
            double v101 = v22;
            __int16 v102 = 2048;
            double v103 = v21;
            __int16 v104 = 2048;
            uint64_t v105 = v48;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v39,  1LL,  "GPS Calibration, sent Core Analytics event. ageGroup %d | gender: %d | speedBin: %d | userBmiBin: %d | use rHeightBin: %d | kvalueMovingMean: %f | kvalueMovingVar: %f | kvalueConfidenceMetric: %f | kvalueStandardE rror: %f | timeFromLastUpdate: %f",  v87,  82,  v53,  v54,  (_DWORD)v55,  *((double *)&v55 + 1),  v56,  v57,  *(double *)&obj,  v59);
            __int128 v50 = v49;
            if (v62)
            {
              uint64_t v63 = v62;
              operator delete(v62);
            }

            sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::GPSRawSpeedToKValueTable::sendCoreAnalytics(const CLBodyMetrics &)",  "%s\n",  v50);
            uint64_t v12 = _NSConcreteStackBlock;
          }
        }

        uint64_t v18 = (char *)v18 + 1;
      }

      while (v18 != *(void **)&v10);
      id v51 = [obj countByEnumeratingWithState:&v73 objects:v126 count:16];
      double v10 = *(double *)&v51;
    }

    while (v51);
  }

  (*(void (**)(uint64_t))(*(void *)v54 + 24LL))(v54);
  return 100LL;
}

void sub_1001B059C(_Unwind_Exception *a1)
{
}

NSDictionary *sub_1001B0618(uint64_t a1)
{
  v11[0] = @"ageGroup";
  v12[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v11[1] = @"gender";
  v12[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  void v11[2] = @"speedBin";
  [*(id *)(a1 + 32) speedLB];
  double v3 = v2;
  __int128 v9 = 0LL;
  uint64_t v10 = 0LL;
  std::string __p = 0LL;
  sub_100007590(&__p, (const void *)qword_101993B50, qword_101993B58, (qword_101993B58 - qword_101993B50) >> 3);
  if (v9 == __p)
  {
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v4 = 0LL;
    unint64_t v5 = (v9 - (_BYTE *)__p) >> 3;
    if (v5 <= 1) {
      unint64_t v5 = 1LL;
    }
    while (*((double *)__p + v4) < v3)
    {
      if (v5 == ++v4)
      {
        unint64_t v4 = v5;
        break;
      }
    }
  }

  void v12[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v4);
  v11[3] = @"userBmiBin";
  void v12[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  _BYTE v11[4] = @"userHeightBin";
  v12[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68));
  void v11[5] = @"kvalueMovingMean";
  [*(id *)(a1 + 32) mean];
  v12[5] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
  v11[6] = @"kvalueMovingVar";
  [*(id *)(a1 + 32) variance];
  v12[6] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
  v11[7] = @"kvalueConfidenceMetric";
  v12[7] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  _WORD v11[8] = @"kvalueStandardError";
  _BYTE v12[8] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v11[9] = @"timeFromLastUpdate";
  [*(id *)(a1 + 32) lastUpdateTime];
  v12[9] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
  __int128 v6 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  10LL);
  if (__p)
  {
    __int128 v9 = __p;
    operator delete(__p);
  }

  return v6;
}

void sub_1001B084C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void sub_1001B0870(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1001B089C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40)) {
    return 0xFFFFFFFFLL;
  }
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101826830);
  }
  double v2 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)std::string buf = 138412290;
    *(void *)uint64_t v36 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempt to restore %@ from cache.", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    uint64_t v22 = *(void *)(a1 + 32);
    int v32 = 138412290;
    *(void *)unint64_t v33 = v22;
    double v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Attempt to restore %@ from cache.",  &v32,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "TableVersion CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::restore() [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v23);
  }

  CFTypeRef v31 = 0LL;
  CFTypeRef v4 = v31;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___GPSCalCoreAnalyticsBin);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSArray);
  uint64_t v30 = 0LL;
  id v9 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v5,  v6,  v7,  v8,  objc_opt_class(&OBJC_CLASS___NSNumber),  0LL),  v4,  &v30);
  if (v30)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    uint64_t v10 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 138412546;
      *(void *)uint64_t v36 = v11;
      *(_WORD *)&v36[8] = 2112;
      uint64_t v37 = v30;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to decode %@, %@", buf, 0x16u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    uint64_t v12 = *(void *)(a1 + 32);
    int v32 = 138412546;
    *(void *)unint64_t v33 = v12;
    *(_WORD *)&std::string::value_type v33[8] = 2112;
    uint64_t v34 = v30;
    LODWORD(v29) = 22;
    uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Failed to decode %@, %@",  &v32,  v29);
    goto LABEL_42;
  }

  uint64_t v14 = v9;
  if (!v9) {
    goto LABEL_28;
  }
  uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v14, v15) & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v16 = *(void **)(a1 + 8);
  if (v16)
  {

    *(void *)(a1 + 8) = 0LL;
  }

  *(_DWORD *)(a1 + 20) = objc_msgSend( objc_msgSend(v14, "objectForKeyedSubscript:", @"version"),  "shortValue");
  *(void *)(a1 + 8) = objc_msgSend(objc_msgSend(v14, "objectForKeyedSubscript:", @"bins"), "mutableCopy");
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101826830);
  }
  double v17 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = [*(id *)(a1 + 8) count];
    int v19 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)uint64_t v36 = v18;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Restored %d bins of version %d.", buf, 0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    uint64_t v25 = qword_101934518;
    unsigned int v26 = [*(id *)(a1 + 8) count];
    int v27 = *(_DWORD *)(a1 + 20);
    int v32 = 67109376;
    *(_DWORD *)unint64_t v33 = v26;
    *(_WORD *)&v33[4] = 1024;
    *(_DWORD *)&_BYTE v33[6] = v27;
    double v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  0LL,  "Restored %d bins of version %d.",  &v32,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "TableVersion CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::restore() [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v28);
  }

  if (![*(id *)(a1 + 8) count] || (uint64_t result = *(unsigned int *)(a1 + 20), (int)result <= 0))
  {
LABEL_28:
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    double v21 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to restore bins.", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101826830);
    }
    LOWORD(v32) = 0;
    LODWORD(v29) = 2;
    uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Failed to restore bins.",  &v32,  v29);
LABEL_42:
    double v24 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "TableVersion CMMobilityCal::CalTable<double, GPSCalCoreAnalyticsBin>::restore() [inT = double, outT = GPSCalCoreAnalyticsBin]",  "%s\n",  v13);
    if (v24 != buf) {
      free(v24);
    }
    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_1001B0F34()
{
  qword_101993B50 = 0LL;
  qword_101993B58 = 0LL;
  qword_101993B60 = 0LL;
  id v0 = operator new(0x38uLL);
  qword_101993B58 = (uint64_t)v0 + 56;
  qword_101993B60 = (uint64_t)v0 + 56;
  *id v0 = xmmword_1012E01C0;
  v0[1] = unk_1012E01D0;
  v0[2] = xmmword_1012E01E0;
  *((void *)v0 + 6) = 0x4003333333333333LL;
  qword_101993B50 = (uint64_t)v0;
  return __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_101993B50, (void *)&_mh_execute_header);
}

void sub_1001B104C(id a1)
{
  qword_101993B80 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLPredictedWalkDistanceServiceCompanionSilo");
}

void sub_1001B1100(id a1)
{
}

void sub_1001B16EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

id sub_1001B1758(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onUserInfoUpdate:a2 data:a3];
}

void sub_1001B1C20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1001B1C4C(uint64_t a1, xpc_activity_t activity)
{
  if (xpc_activity_get_state(activity))
  {
    [*(id *)(a1 + 32) onP6MWDActivity:activity];
    if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4LL))
    {
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018268E8);
      }
      CFTypeRef v4 = (os_log_s *)qword_1019346C8;
      if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 136446466;
        double v21 = "com.apple.locationd.P6MWD";
        __int16 v22 = 2050;
        xpc_activity_state_t state = xpc_activity_get_state(activity);
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Failed to mark %{public}s activity as Continue. Current state is %{public}ld",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_1018268E8);
        }
        uint64_t v5 = qword_1019346C8;
        int v16 = 136446466;
        double v17 = "com.apple.locationd.P6MWD";
        __int16 v18 = 2050;
        xpc_activity_state_t v19 = xpc_activity_get_state(activity);
        uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v5,  17LL,  "Failed to mark %{public}s activity as Continue. Current state is %{public}ld",  &v16,  22);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLPredictedWalkDistanceServiceCompanion scheduleEstimate]_block_invoke",  "%s\n",  v6);
      }
    }
  }

  else
  {
    xpc_object_t v7 = xpc_activity_copy_criteria(activity);
    if (!v7) {
      xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
    }
    if (xpc_dictionary_get_int64(v7, XPC_ACTIVITY_DELAY) == *(void *)(a1 + 40))
    {
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018268E8);
      }
      uint64_t v8 = (os_log_s *)qword_1019346C8;
      if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_DEFAULT))
      {
        xpc_activity_state_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)std::string buf = 136446466;
        double v21 = "com.apple.locationd.P6MWD";
        __int16 v22 = 2050;
        xpc_activity_state_t state = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "XPC_CHECK_IN: %{public}s activity already scheduled with a delay of %{public}lld seconds",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_1018268E8);
        }
        xpc_activity_state_t v10 = *(void *)(a1 + 40);
        int v16 = 136446466;
        double v17 = "com.apple.locationd.P6MWD";
        __int16 v18 = 2050;
        xpc_activity_state_t v19 = v10;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  0LL,  "XPC_CHECK_IN: %{public}s activity already scheduled with a delay of %{public}lld seconds",  &v16,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLPredictedWalkDistanceServiceCompanion scheduleEstimate]_block_invoke",  "%s\n",  v11);
      }
    }

    else
    {
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018268E8);
      }
      uint64_t v12 = (os_log_s *)qword_1019346C8;
      if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_DEFAULT))
      {
        xpc_activity_state_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)std::string buf = 136446466;
        double v21 = "com.apple.locationd.P6MWD";
        __int16 v22 = 2050;
        xpc_activity_state_t state = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "XPC_CHECK_IN: Setting up %{public}s activity with a delay of %{public}lld seconds",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_1018268E8);
        }
        xpc_activity_state_t v14 = *(void *)(a1 + 40);
        int v16 = 136446466;
        double v17 = "com.apple.locationd.P6MWD";
        __int16 v18 = 2050;
        xpc_activity_state_t v19 = v14;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  0LL,  "XPC_CHECK_IN: Setting up %{public}s activity with a delay of %{public}lld seconds",  &v16,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLPredictedWalkDistanceServiceCompanion scheduleEstimate]_block_invoke",  "%s\n",  v15);
      }

      xpc_dictionary_set_int64(v7, XPC_ACTIVITY_DELAY, *(void *)(a1 + 40));
      xpc_dictionary_set_int64(v7, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
      xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
      xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REPEATING, 1);
      xpc_activity_set_criteria(activity, v7);
    }

    xpc_release(v7);
  }

void sub_1001B2398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1001B23AC(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    uint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    xpc_object_t v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555LL) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)sub_10000701C(v6, v14);
      }
      else {
        uint64_t v15 = 0LL;
      }
      int v16 = &v15[24 * v11];
      double v17 = &v15[24 * v14];
      *(double *)int v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      xpc_activity_state_t v10 = v16 + 24;
      xpc_activity_state_t v19 = (char *)*a1;
      __int16 v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          __int128 v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }

        while (v18 != v19);
        __int16 v18 = (char *)*a1;
      }

      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }

    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v9 + 16) = 0;
      xpc_activity_state_t v10 = (char *)(v9 + 24);
    }

    a1[1] = v10;
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018269F8);
    }
    uint64_t v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v24 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Programmer error, this expiration rule with time %{public}fis not valid.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018269F8);
      }
      int v21 = 134349056;
      double v22 = a2;
      CFTypeRef v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Programmer error, this expiration rule with time %{public}fis not valid.",  &v21,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::setExpira tionRule(CFTimeInterval) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataP rotectionPolicy]",  "%s\n",  v4);
    }
  }

uint64_t sub_1001B2660(uint64_t a1)
{
  if (qword_1019346C0 != -1) {
    dispatch_once(&qword_1019346C0, &stru_1018268E8);
  }
  double v2 = (os_log_s *)qword_1019346C8;
  if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating bout records", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_1018268E8);
    }
    v5[0] = 0;
    CFTypeRef v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  2LL,  "Aggregating bout records",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLPredictedWalkDistanceServiceCompanion setUpAggregationOnTimer]_block_invoke",  "%s\n",  v4);
  }

  return sub_1001B2804(*(void *)(*(void *)(a1 + 32) + 24LL));
}

uint64_t sub_1001B2804(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40)) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018269F8);
  }
  double v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v3 = sub_101171D38();
    int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)std::string buf = 134218240;
    *(double *)unint64_t v33 = v3;
    *(_WORD *)&std::string::value_type v33[8] = 1024;
    int v34 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Aggregating records start %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018269F8);
    }
    uint64_t v16 = qword_101934A78;
    double v17 = sub_101171D38();
    int v18 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v29 = 134218240;
    *(double *)uint64_t v30 = v17;
    *(_WORD *)&v30[8] = 1024;
    int v31 = v18;
    xpc_activity_state_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "Aggregating records start %f, count ~%d",  COERCE_DOUBLE(&v29),  18);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRe cords() [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v19);
  }

  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24), a1);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018269F8);
  }
  uint64_t v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v7 = sub_101171D38();
    int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    *(_DWORD *)std::string buf = 134218240;
    *(double *)unint64_t v33 = v7;
    *(_WORD *)&std::string::value_type v33[8] = 1024;
    int v34 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Aggregating records stop %f, count ~%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018269F8);
    }
    uint64_t v20 = qword_101934A78;
    double v21 = sub_101171D38();
    int v22 = *(_DWORD *)(*(void *)(a1 + 24) + 132LL);
    int v29 = 134218240;
    *(double *)uint64_t v30 = v21;
    *(_WORD *)&v30[8] = 1024;
    int v31 = v22;
    double v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  2LL,  "Aggregating records stop %f, count ~%d",  COERCE_DOUBLE(&v29),  18);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRe cords() [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v23);
  }

  uint64_t v9 = *(void *)(a1 + 24);
  double v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1001B5288(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018269F8);
    }
    unint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      int v13 = *(_DWORD *)(v12 + 132);
      int v14 = sub_1001B5288(v12, (double **)a1);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)unint64_t v33 = v13;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&_BYTE v33[6] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018269F8);
      }
      uint64_t v24 = qword_101934A78;
      uint64_t v25 = *(void *)(a1 + 24);
      int v26 = *(_DWORD *)(v25 + 132);
      int v27 = sub_1001B5288(v25, (double **)a1);
      int v29 = 67109376;
      *(_DWORD *)uint64_t v30 = v26;
      *(_WORD *)&v30[4] = 1024;
      *(_DWORD *)&v30[6] = v27;
      double v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  0LL,  "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records es timated to be needed %d",  &v29,  14);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "long CLActivityAggregator<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregate Records() [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v28);
    }
  }

  return v5;
}

void sub_1001B33B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001B3964(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16LL))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24LL))(v6);
}

void sub_1001B39E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1001B40D8(_Unwind_Exception *a1)
{
}

void *sub_1001B4118(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    sub_10001B7A4(a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }

  return a1;
}

void sub_1001B417C(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B4198(uint64_t a1)
{
  double v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

NSDictionary *sub_1001B41C8(uint64_t a1)
{
  v39[0] = @"weeklyEstimateStatus";
  v40[0] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 8LL));
  v39[1] = @"numBouts";
  v40[1] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 12LL));
  uint64_t v39[2] = @"numBoutsTimeWStepsGreater300";
  v40[2] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 16LL));
  v39[3] = @"numBoutsTimeWStepsGreater330";
  v40[3] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 20LL));
  v39[4] = @"pRaw";
  LODWORD(sub_10001AA98(v1, v2) = *(_DWORD *)(*(void *)(a1 + 32) + 24LL);
  v40[4] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v2);
  v39[5] = @"pSpeed";
  LODWORD(v3) = *(_DWORD *)(*(void *)(a1 + 32) + 28LL);
  v40[5] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v3);
  v39[6] = @"pActivity";
  LODWORD(v4) = *(_DWORD *)(*(void *)(a1 + 32) + 32LL);
  v40[6] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v4);
  v39[7] = @"pDistance";
  LODWORD(v5) = *(_DWORD *)(*(void *)(a1 + 32) + 36LL);
  v40[7] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v5);
  v39[8] = @"userGender";
  v40[8] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 40LL));
  v39[9] = @"userAge_bin";
  float v6 = *(float *)(*(void *)(a1 + 32) + 44LL);
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  int v34 = 0LL;
  sub_10001B72C(&v34, (const void *)qword_101993BA0, unk_101993BA8, (unk_101993BA8 - qword_101993BA0) >> 2);
  sub_1001B4760((uint64_t)&v34, v37, v6);
  if (v38 >= 0) {
    double v7 = v37;
  }
  else {
    double v7 = (void **)v37[0];
  }
  v40[9] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7);
  v39[10] = @"userHeight_bin";
  float v8 = *(float *)(*(void *)(a1 + 32) + 52LL);
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  int v29 = 0LL;
  sub_10001B72C(&v29, (const void *)qword_101993BC0, unk_101993BC8, (unk_101993BC8 - qword_101993BC0) >> 2);
  sub_1001B4760((uint64_t)&v29, v32, v8);
  if (v33 >= 0) {
    uint64_t v9 = v32;
  }
  else {
    uint64_t v9 = (void **)v32[0];
  }
  v40[10] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9);
  v39[11] = @"userWeight_bin";
  float v10 = *(float *)(*(void *)(a1 + 32) + 48LL);
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v24 = 0LL;
  sub_10001B72C(&v24, (const void *)qword_101993BE0, unk_101993BE8, (unk_101993BE8 - qword_101993BE0) >> 2);
  sub_1001B4760((uint64_t)&v24, __p, v10);
  if (v28 >= 0) {
    unint64_t v11 = __p;
  }
  else {
    unint64_t v11 = (void **)__p[0];
  }
  v40[11] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11);
  v39[12] = @"numWatchPedometerGPSCalibrations";
  v40[12] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 56LL));
  v39[13] = @"numWalkingSpeedCalibrations";
  v40[13] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 60LL));
  v39[14] = @"userStdDevEstimate";
  LODWORD(v12) = *(_DWORD *)(*(void *)(a1 + 32) + 64LL);
  v40[14] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v12);
  v39[15] = @"userRatioMeanSignedVarMeanAbsVar";
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 32) + 68LL);
  v40[15] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v13);
  v39[16] = @"percentLast13WeeksWithEstimate";
  LODWORD(v14) = *(_DWORD *)(*(void *)(a1 + 32) + 72LL);
  v40[16] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v14);
  v39[17] = @"slopeLast13Weeks";
  LODWORD(v15) = *(_DWORD *)(*(void *)(a1 + 32) + 76LL);
  v40[17] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v15);
  v39[18] = @"timeSinceFirstAvailable";
  LODWORD(v16) = *(_DWORD *)(*(void *)(a1 + 32) + 80LL);
  v40[18] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v16);
  v39[19] = @"numDaysWithSufficientWearTime";
  v40[19] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 84LL));
  v39[20] = @"avgStepsPerDayLast4Weeks";
  LODWORD(v17) = *(_DWORD *)(*(void *)(a1 + 32) + 88LL);
  v40[20] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17);
  v39[21] = @"avgFlightsPerDayLast4Weeks";
  LODWORD(v18) = *(_DWORD *)(*(void *)(a1 + 32) + 92LL);
  v40[21] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v18);
  v39[22] = @"numWalkingWorkoutsLast4Weeks";
  LODWORD(v19) = *(_DWORD *)(*(void *)(a1 + 32) + 96LL);
  v40[22] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v19);
  v39[23] = @"avgPaceWalkingWorkoutsLast4Weeks";
  LODWORD(v20) = *(_DWORD *)(*(void *)(a1 + 32) + 100LL);
  v40[23] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v20);
  v39[24] = @"avgPaceRunningWorkoutsLast4Weeks";
  LODWORD(v21) = *(_DWORD *)(*(void *)(a1 + 32) + 104LL);
  v40[24] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v21);
  int v22 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v40,  v39,  25LL);
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }

  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }

  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }

  return v22;
}

void sub_1001B46BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B4760(uint64_t a1@<X0>, void *a2@<X8>, float a3@<S0>)
{
  char v33 = 0LL;
  int v34 = 0LL;
  uint64_t v35 = 0LL;
  sub_10001B72C(&v33, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  uint64_t v6 = (char *)v34 - (char *)v33;
  if (v34 == v33)
  {
    if (!v34)
    {
      uint64_t v9 = *(float **)a1;
      if (*(void *)(a1 + 8) != *(void *)a1) {
        goto LABEL_30;
      }
LABEL_36:
      sub_1010DDBC0(a2, "(--inf,inf)");
      return;
    }

    LODWORD(v7) = 0;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = v6 >> 2;
    while (v33[v7] < a3)
    {
      if (v8 == ++v7)
      {
        LODWORD(v7) = v8;
        break;
      }
    }
  }

  int v34 = v33;
  operator delete(v33);
  uint64_t v9 = *(float **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == *(void *)a1) {
    goto LABEL_36;
  }
  if (!(_DWORD)v7)
  {
LABEL_30:
    std::to_string(&v31, *v9);
    uint64_t v25 = std::string::insert(&v31, 0LL, "(--inf,");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    double v13 = std::string::append(&v32, "]");
LABEL_31:
    __int128 v27 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a2[2] = v13->__r_.__value_.__l.__cap_;
    *(_OWORD *)a2 = v27;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    if ((char)v31.__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v24 = (void *)v31.__r_.__value_.__r.__words[0];
      goto LABEL_35;
    }

    return;
  }

  if ((v10 - *(void *)a1) >> 2 == (int)v7)
  {
    std::to_string(&v31, *(float *)(v10 - 4));
    unint64_t v11 = std::string::insert(&v31, 0LL, "(");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    double v13 = std::string::append(&v32, ",inf)");
    goto LABEL_31;
  }

  std::to_string(&v29, v9[(int)v7 - 1]);
  double v14 = std::string::insert(&v29, 0LL, "(");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  double v16 = std::string::append(&v30, ",");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&__p, *(float *)(*(void *)a1 + 4LL * (int)v7));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  double v20 = std::string::append(&v31, (const std::string::value_type *)p_p, size);
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  int v22 = std::string::append(&v32, "]");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  a2[2] = v22->__r_.__value_.__l.__cap_;
  *(_OWORD *)a2 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  if ((char)v29.__r_.__value_.__s.__size_ < 0)
  {
    uint64_t v24 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v24);
  }

void sub_1001B4A38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B4C14(id a1)
{
  qword_1019346C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void *sub_1001B4C40(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8LL);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0LL;
    if (result != v1)
    {
      do
      {
        double v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }

      while (v4 != v1);
    }
  }

  return result;
}

void *sub_1001B4CA0@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x228uLL);
  uint64_t result = sub_1001B4CF8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1001B4CE4(_Unwind_Exception *a1)
{
}

void *sub_1001B4CF8(void *a1, unsigned __int8 *a2)
{
  a1[2] = 0LL;
  *a1 = off_101826918;
  a1[1] = 0LL;
  sub_1001B4DA0((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1001B4D44(_Unwind_Exception *a1)
{
}

void sub_1001B4D58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101826918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001B4D6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101826918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1001B4D90(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void sub_1001B4DA0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a3;
  sub_1010DDBC0(__p, "");
  sub_100D4730C(a2, v4, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1001B4DF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B4E14(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 40) = 1;
  sub_1000F2F30((void *)(a1 + 24), a2);
  sub_1001B4E88((void **)a1);
  return a1;
}

void sub_1001B4E64(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1001B4E88(void **a1)
{
  uint64_t v4 = a1[2];
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = v4;
  unint64_t v5 = *(void *)(v2 - 8);
  if (v5 >= (unint64_t)v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v3 - (_BYTE *)*a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555LL) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (char *)sub_10000701C(v2, v10);
    }
    else {
      unint64_t v11 = 0LL;
    }
    __int128 v12 = &v11[24 * v7];
    double v13 = &v11[24 * v10];
    *(void *)__int128 v12 = 0LL;
    *((void *)v12 + 1) = 0LL;
    v12[16] = 0;
    char v6 = v12 + 24;
    __int128 v15 = (char *)*a1;
    double v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        __int128 v16 = *(_OWORD *)(v14 - 24);
        *(v12 - 8) = *(v14 - 8);
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        v14 -= 24;
      }

      while (v14 != v15);
      double v14 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (v14) {
      operator delete(v14);
    }
  }

  else
  {
    *(void *)unint64_t v5 = 0LL;
    *(void *)(v5 + 8) = 0LL;
    char v6 = (char *)(v5 + 24);
    *(_BYTE *)(v5 + 16) = 0;
  }

  a1[1] = v6;
}

void sub_1001B4F90(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_1001B4FBC(v3);
    operator delete(v4);
  }

uint64_t sub_1001B4FBC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

void *sub_1001B4FF4@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x240uLL);
  uint64_t result = sub_1001B504C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1001B5038(_Unwind_Exception *a1)
{
}

void *sub_1001B504C(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101826968;
  sub_100A939D4(a1 + 3, *a2);
  return a1;
}

void sub_1001B5088(_Unwind_Exception *a1)
{
}

void sub_1001B509C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101826968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001B50B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101826968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1001B50D4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void *sub_1001B50E4@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1D8uLL);
  uint64_t result = sub_1001B513C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1001B5128(_Unwind_Exception *a1)
{
}

void *sub_1001B513C(void *a1, unsigned __int8 *a2)
{
  a1[2] = 0LL;
  *a1 = off_1018269B8;
  a1[1] = 0LL;
  sub_1001B51E4((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1001B5188(_Unwind_Exception *a1)
{
}

void sub_1001B519C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018269B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001B51B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018269B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1001B51D4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void sub_1001B51E4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a3;
  sub_1010DDBC0(__p, "");
  sub_1006DEC2C(a2, v4, __p, 0LL);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1001B5240( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B525C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1001B5288(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  char v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }

    while (v6 != v2);
  }

  if (v4 != 1.79769313e308)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101826A18);
    }
    unint64_t v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning No expiration rule was added so the number of records will be unbounded.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101826A18);
      }
      v14[0] = 0;
      double v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Warning No expiration rule was added so the number of records will be unbounded.",  v14,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::estimateRe cordsNeeded(const CLAggregationRules &) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivity DB::ClassBDataProtectionPolicy]",  "%s\n",  v13);
    }
  }

  return v7;
}

void sub_1001B5484(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1001B54B0()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101993B68, (void *)&_mh_execute_header);
}

uint64_t sub_1001B54F4(unsigned int a1)
{
  if (a1 > 4) {
    return 25LL;
  }
  else {
    return qword_1012E03E8[a1];
  }
}

uint64_t sub_1001B5514()
{
  return 6LL;
}

void sub_1001B5890(id a1)
{
  qword_1019346C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void *sub_1001B58BC(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_101826AB8;
  a1[9] = off_101826B68;
  sub_1001B60D0((uint64_t)a1);
  return a1;
}

void sub_1001B5944( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_1001B5970(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  __int128 v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  *__int128 v12 = &off_101826EF8;
  *(void *)a1 = off_101826DD0;
  *(void *)(a1 + 72) = off_101826E78;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_101826DD0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_101826E78;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + sub_10000AE14(v45 - 224) = 0u;
  *(_DWORD *)(a1 + 240) = 3;
  *(void *)(a1 + 2++*(_DWORD *)(v3 + 52) = 0LL;
  *(void *)(a1 + 244) = 0LL;
  *(_DWORD *)(a1 + 264) = 12000;
  *(void *)(a1 + 272) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 280));
  *(void *)(a1 + 2sub_10000AE14(v1 - 80) = &off_101826EF8;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v28 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v30 = 256;
  if (a3)
  {
    *(void *)(a1 + sub_1000A7938(v33 - 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v28 + 24LL))(v28);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v27 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  __int128 v15 = (int *)(a1 + 264);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 264));
  __int128 v17 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    int *v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101826F50);
  }
  double v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101826F50);
    }
    int v24 = *v15;
    v31[0] = 67109120;
    v31[1] = v24;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v31);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorderD b(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = VO2MaxRe trocomputeBodyMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v25);
  }

  int v22 = HIBYTE(v30);
  *(void *)(a1 + sub_1000A7938(v33 - 232) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v30)
    {
      pthread_mutex_unlock(v29);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_1001B5D2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[34] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_1001B9D48(v26);
  sub_100D8A88C(a12);
  void *v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_1001B5DD0()
{
}

void *sub_1001B5DD8(void *a1)
{
  a1[9] = off_101826E78;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_101826DD0;
  a1[34] = off_101826EC8;
  sub_1001B9C98(a1 + 35);
  sub_1001B9D48(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_1001B5E58(uint64_t a1)
{
  return sub_1001B5DD8((void *)(a1 - 72));
}

void sub_1001B5E60(void *a1)
{
  uint64_t v1 = sub_1001B5DD8(a1);
  operator delete(v1);
}

void sub_1001B5E74(uint64_t a1)
{
  uint64_t v1 = sub_1001B5DD8((void *)(a1 - 72));
  operator delete(v1);
}

uint64_t sub_1001B5E8C(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "DELETE FROM VO2MaxRetrocomputeBodyMetricsHistory WHERE algorithmVersion = ?",  buf);
    uint64_t v3 = *(void *)buf;
    double v4 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    uint64_t result = sub_1003C28BC(v4, 1, 3);
    if ((_DWORD)result)
    {
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101826C20);
      }
      double v5 = (os_log_s *)qword_101934738;
      if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = 3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Deleting Retrocompute BodyMetrics record from db: alg=%{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934730 != -1) {
          dispatch_once(&qword_101934730, &stru_101826C20);
        }
        v9[0] = 67240192;
        v9[1] = 3;
        double v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "Deleting Retrocompute BodyMetrics record from db: alg=%{public}d",  v9,  8);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxRetrocomputeBodyMetricsDb::deleteActiveRecord()",  "%s\n",  v8);
      }

      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v3);
      uint64_t result = sub_1003BB2BC(v6, v7);
    }

    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_1001B60A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B60D0(uint64_t a1)
{
  uint64_t result = sub_1003C1048(*(void *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_1001B612C(a1);
    return sub_1003B59A0( *(void *)(a1 + 80),  "VO2MaxRetrocomputeBodyMetricsHistory",  (const char **)&off_101826C40,  (const std::string::value_type **)&off_101936040,  0);
  }

  return result;
}

uint64_t sub_1001B612C(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "VO2MaxRetrocomputeBodyMetricsHistory");
  if ((_DWORD)result)
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    double v8 = "startTime";
    do
    {
      char v38 = v8;
      int v39 = 5;
      __int16 v40 = 0;
      char v41 = 0;
      char v42 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "VO2MaxRetrocomputeBodyMetricsHistory", v8, (uint64_t)&v38) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v34);
        double v9 = sub_10000CF44(&v35, (uint64_t)"ALTER TABLE VO2MaxRetrocomputeBodyMetricsHistory ADD COLUMN ", 60LL);
        size_t v10 = strlen(v8);
        unint64_t v11 = sub_10000CF44(v9, (uint64_t)v8, v10);
        __int128 v12 = sub_10000CF44(v11, (uint64_t)" ", 1LL);
        uint64_t v13 = (const char *)sub_1003BCC40((int)(&off_101826C40)[v3 + 7]);
        size_t v14 = strlen(v13);
        __int128 v15 = sub_10000CF44(v12, (uint64_t)v13, v14);
        sub_10000CF44(v15, (uint64_t)";", 1LL);
        uint64_t v16 = *(void *)(a1 + 80);
        std::stringbuf::str(&v31, &v36);
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v17 = &v31;
        }
        else {
          __int128 v17 = (std::stringbuf::string_type *)v31.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v16, (char *)v17, &v29);
        uint64_t v18 = v29.__r_.__value_.__r.__words[0];
        v29.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v19 = *(void *)(a1 + 80);
        double v20 = (sqlite3_stmt *)sub_100019240(v18);
        sub_1003BB2BC(v19, v20);
        sub_10000CE18((uint64_t)&v31);
        int v21 = sub_10000CF44( &v31.__r_.__value_.__l.__cap_,  (uint64_t)"UPDATE VO2MaxRetrocomputeBodyMetricsHistory SET ",  48LL);
        size_t v22 = strlen(v8);
        __int128 v23 = sub_10000CF44(v21, (uint64_t)v8, v22);
        sub_10000CF44(v23, (uint64_t)" = 0;", 5LL);
        uint64_t v24 = *(void *)(a1 + 80);
        std::stringbuf::str(&v29, &v32);
        if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v25 = &v29;
        }
        else {
          uint64_t v25 = (std::stringbuf::string_type *)v29.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v24, (char *)v25, &v30);
        uint64_t v26 = v30;
        uint64_t v30 = 0LL;
        uint64_t v27 = *(void *)(a1 + 80);
        uint64_t v28 = (sqlite3_stmt *)sub_100019240(v26);
        sub_1003BB2BC(v27, v28);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
        }
        v31.__r_.__value_.__r.__words[0] = v5;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + *(void *)(v5 - 24)) = v7;
        v31.__r_.__value_.__l.__cap_ = v6;
        std::streambuf::~streambuf(&v32);
        std::ios::~ios(&v33);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
        v34[0] = v5;
        *(void *)((char *)v34 + *(void *)(v5 - 24)) = v7;
        std::string::size_type v35 = v6;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        int v4 = 1;
      }

      double v8 = (&off_101826C40)[v3 + 12];
      v3 += 6LL;
    }

    while (v3 != 36);
    uint64_t result = sub_1001B6760( a1,  "VO2MaxRetrocomputeBodyMetricsHistory",  (const char **)&off_101826C40,  (const std::string::value_type **)&off_101936040);
  }

  return result;
}

void sub_1001B64D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a21);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
  }
  sub_1011F8850((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B6568(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM VO2MaxRetrocomputeBodyMetricsHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    std::string::size_type v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_1001B65FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B661C(uint64_t a1)
{
  return sub_1001B6568(a1 - 72);
}

uint64_t sub_1001B6624(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO VO2MaxRetrocomputeBodyMetricsHistory (startTime, algorithmVersion, biologicalSex, age, height, weight) VALUES (?, ?, ?, ?, ?, ?)",  &v14);
    uint64_t v5 = v14;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v14);
    uint64_t result = sub_1003B7480(v6, 1, *(double *)(a2 + 8));
    if ((_DWORD)result)
    {
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003C28BC(v7, 2, *(_DWORD *)(a2 + 16));
      if ((_DWORD)result)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
        uint64_t result = sub_1003C28BC(v8, 3, *(_DWORD *)(a2 + 20));
        if ((_DWORD)result)
        {
          double v9 = (sqlite3_stmt *)sub_100019240(v5);
          uint64_t result = sub_1003B7480(v9, 4, *(float *)(a2 + 24));
          if ((_DWORD)result)
          {
            size_t v10 = (sqlite3_stmt *)sub_100019240(v5);
            uint64_t result = sub_1003B7480(v10, 5, *(float *)(a2 + 28));
            if ((_DWORD)result)
            {
              unint64_t v11 = (sqlite3_stmt *)sub_100019240(v5);
              uint64_t result = sub_1003B7480(v11, 6, *(float *)(a2 + 32));
              if ((_DWORD)result)
              {
                uint64_t v12 = *(void *)(a1 + 80);
                uint64_t v13 = (sqlite3_stmt *)sub_100019240(v5);
                uint64_t result = sub_1003BB2BC(v12, v13);
              }
            }
          }
        }
      }
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_1001B6740(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B6760(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101826F50);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101826F50);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      __int16 v131 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbCon straints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxRetrocomputeBodyMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  (const char *)v131);
      if (v131 != buf) {
        free(v131);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    double v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)int v140 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    unint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v139 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)int v138 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      uint64_t v16 = v140;
    }
    else {
      uint64_t v16 = (void **)v140[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v140[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      int v21 = &__p;
    }
    else {
      int v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    size_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = &v145;
    sub_1000392EC((uint64_t)&v145, v25 + 13);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v26 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      uint64_t v28 = v140;
    }
    else {
      uint64_t v28 = (void **)v140[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v140[1];
    }
    uint64_t v30 = std::string::append(&v145, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v137.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::stringbuf v32 = std::string::append(&v137, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v136);
    if ((v136.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v34 = &v136;
    }
    else {
      int v34 = (std::string *)v136.__r_.__value_.__r.__words[0];
    }
    if ((v136.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v136.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v136.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v146, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    char v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v143.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v143.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v143.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v143.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v41 = &__p;
    }
    else {
      char v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    char v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v46 = &v142;
    sub_1000392EC((uint64_t)&v142, v45 + 12);
    if ((v142.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v46 = (std::string *)v142.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v47 = &__p;
      }
      else {
        uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      uint64_t v48 = v140;
    }
    else {
      uint64_t v48 = (void **)v140[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v140[1];
    }
    __int128 v50 = std::string::append(&v142, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v135.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v52 = std::string::append(&v135, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v54 = buf;
    }
    else {
      uint64_t v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    double v56 = std::string::append(&v143, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v136.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v58 = std::string::append(&v136, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v145.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v60 = buf;
    }
    else {
      int v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int16 v62 = std::string::append(&v145, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v137.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v64 = std::string::append(&v137, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    int v66 = std::string::append(&v146, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v144[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v144 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v144[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v144 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v69 = &__p;
    }
    else {
      int v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v146);
    int v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v146.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v146.__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    __int128 v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v75 = &__p;
      }
      else {
        __int128 v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    __int128 v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      int v79 = &__p;
    }
    else {
      int v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    char v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    __int16 v84 = &v137;
    sub_1000392EC((uint64_t)&v137, v83 + 12);
    if ((v137.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v84 = (std::string *)v137.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v85 = &__p;
      }
      else {
        uint64_t v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      __int16 v86 = v140;
    }
    else {
      __int16 v86 = (void **)v140[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v140[1];
    }
    __int16 v88 = std::string::append(&v137, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v90 = std::string::append(&v146, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v145.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v95 = &__p;
    }
    else {
      int v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    __int16 v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      __int16 v102 = &v135;
      sub_1000392EC((uint64_t)&v135, v101 + 13);
      if ((v135.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int16 v102 = (std::string *)v135.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          double v103 = &__p;
        }
        else {
          double v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v139 >= 0) {
        __int16 v104 = v138;
      }
      else {
        __int16 v104 = (void **)v138[0];
      }
      if (v139 >= 0) {
        std::string::size_type v105 = HIBYTE(v139);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v138[1];
      }
      int v106 = std::string::append(&v135, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v108 = std::string::append(&v143, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v136.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v110 = std::string::append(&v136, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v112 = std::string::append(&v145, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v114 = buf;
      }
      else {
        __int16 v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      __int16 v116 = std::string::append(&v137, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v118 = std::string::append(&v146, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v142.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v142.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v142.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v142.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v121 = &__p;
      }
      else {
        double v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v146);
      __int16 v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v146.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v146.__r_.__value_.__r.__words[0];
      v146.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101826F50);
      }
      uint64_t v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101826F50);
        }
        LODWORD(v146.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v134) = 12;
        __int16 v133 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v146,  v134);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbC onstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxRetrocomputeBodyMetri cs, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  (const char *)v133);
        if (v133 != buf) {
          free(v133);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101826F50);
      }
      __int16 v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101826F50);
        }
        LODWORD(v146.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v134) = 12;
        int v132 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v146,  v134);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbC onstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxRetrocomputeBodyMetri cs, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  (const char *)v132);
        if (v132 != buf) {
          free(v132);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v139) < 0) {
      operator delete(v138[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v140[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

LABEL_246:
  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

  uint64_t v128 = *(void *)(a1 + 80);
  else {
    uint64_t v129 = *(void *)(v128 + 88);
  }
  sub_1003C1EC0(v128, v129);
  return 0LL;
}

          *(void *)(a1 + 24) = v31;
          goto LABEL_238;
        case 4u:
          *(_DWORD *)(a1 + 152) |= 0x10000000u;
          int v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_237;
        case 5u:
          *(_DWORD *)(a1 + 152) |= 0x4000000u;
          std::string::size_type v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_237;
        case 6u:
          *(_DWORD *)(a1 + 152) |= 0x100000u;
          std::stringbuf v36 = *((void *)this + 1);
          __int128 v37 = *((void *)this + 2);
          char v38 = *(void *)this;
          if (v36 <= 0xFFFFFFFFFFFFFFF5LL && v36 + 10 <= v37)
          {
            std::string::size_type v39 = 0;
            unsigned __int8 v40 = 0;
            char v41 = 0LL;
            do
            {
              char v42 = v36 + 1;
              *((void *)this + 1) = v36 + 1;
              int v43 = *(_BYTE *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0) {
                goto LABEL_250;
              }
              v39 += 7;
              std::stringbuf v36 = v42;
              uint64_t v14 = v40++ > 8;
            }

            while (!v14);
LABEL_172:
            LODWORD(v41) = 0;
            goto LABEL_250;
          }

          std::string v135 = 0;
          std::string v136 = 0;
          char v41 = 0LL;
          if (v37 <= v36) {
            __int128 v37 = *((void *)this + 1);
          }
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              std::string v137 = v36 + 1;
              int v138 = *(_BYTE *)(v38 + v36);
              *((void *)this + 1) = v137;
              v41 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                std::stringbuf v36 = v137;
                uint64_t v14 = v136++ > 8;
                if (v14) {
                  goto LABEL_172;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v41) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 132) = v136;
          goto LABEL_267;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_267;
      }
    }

    int v21 = 0;
    size_t v22 = 0;
    std::string::size_type v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v23 = v4 + 1;
      std::string::size_type v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        std::string::size_type v17 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

void sub_1001B78F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void *sub_1001B7C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = v8;
  if (v8 == v7)
  {
    uint64_t v6 = 4LL;
    uint64_t result = v7;
  }

  else
  {
    if (!v8) {
      return result;
    }
    uint64_t v6 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1001B7CB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B7CF8()
{
  return 2LL;
}

uint64_t sub_1001B7D00(uint64_t a1, uint64_t a2)
{
  return sub_100D8B43C((uint64_t *)(a1 + 72), a2);
}

uint64_t sub_1001B7D08(uint64_t *a1, char **a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v38);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    if (HIBYTE(v39)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10122F090(v4);
LABEL_44:
    sub_100007008();
  }

  __int128 v33 = v38[1];
  operator delete(v38[0]);
  if (!v33) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v38);
    uint64_t v6 = sub_10000CF44(&v39, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if (v35[7] >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (v35[7] >= 0) {
      uint64_t v8 = v35[7];
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((v35[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v40);
    if (v35[7] >= 0) {
      unint64_t v11 = (char *)__p;
    }
    else {
      unint64_t v11 = (char *)__p[0];
    }
    sub_1003C0D54(v10, v11, &v36);
    uint64_t v12 = v36;
    uint64_t v36 = 0LL;
    uint64_t v37 = v12;
    if ((v35[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    sub_1003C0454(a1[10]);
    __p[0] = 0LL;
    __p[1] = 0LL;
    *(_DWORD *)std::string::size_type v35 = 3;
    *(void *)&v35[12] = 0LL;
    *(void *)&v35[4] = 0LL;
    while (!sub_1001BA11C((uint64_t)a1, &v37, (uint64_t)__p))
    {
      unint64_t v13 = (unint64_t)a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if (v13 >= v14)
      {
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)*a2) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0x666666666666666LL) {
          goto LABEL_44;
        }
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)*a2) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x333333333333333LL) {
          unint64_t v21 = 0x666666666666666LL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          size_t v22 = (char *)sub_100100EF8((uint64_t)(a2 + 2), v21);
        }
        else {
          size_t v22 = 0LL;
        }
        int v23 = &v22[40 * v18];
        __int128 v24 = *(_OWORD *)__p;
        __int128 v25 = *(_OWORD *)v35;
        *((void *)v23 + 4) = *(void *)&v35[16];
        *(_OWORD *)int v23 = v24;
        *((_OWORD *)v23 + 1) = v25;
        uint64_t v27 = *a2;
        uint64_t v26 = a2[1];
        uint64_t v28 = v23;
        if (v26 != *a2)
        {
          do
          {
            __int128 v29 = *(_OWORD *)(v26 - 40);
            __int128 v30 = *(_OWORD *)(v26 - 24);
            *((_DWORD *)v28 - 2) = *((_DWORD *)v26 - 2);
            *(_OWORD *)(v28 - 24) = v30;
            *(_OWORD *)(v28 - 40) = v29;
            v28 -= 40;
            v26 -= 40;
          }

          while (v26 != v27);
          uint64_t v26 = *a2;
        }

        std::string::size_type v17 = v23 + 40;
        *a2 = v28;
        a2[1] = v23 + 40;
        a2[2] = &v22[40 * v21];
        if (v26) {
          operator delete(v26);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)__p;
        __int128 v16 = *(_OWORD *)v35;
        *(void *)(v13 + 32) = *(void *)&v35[16];
        *(_OWORD *)unint64_t v13 = v15;
        *(_OWORD *)(v13 + 16) = v16;
        std::string::size_type v17 = (char *)(v13 + 40);
      }

      a2[1] = v17;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v31 = v37;
    uint64_t v37 = 0LL;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    *(void **)((char *)v38
    uint64_t v39 = v32;
    std::streambuf::~streambuf(&v40);
    return std::ios::~ios(&v41);
  }

  return result;
}

void sub_1001B8020( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B8088(void *a1, void **a2, double a3, double a4)
{
  uint64_t v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v44);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    if (HIBYTE(v45)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_10122F1FC(v10);
    goto LABEL_41;
  }

  uint64_t v4 = (std::stringbuf *)v44[1];
  operator delete(v44[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v44);
  unint64_t v11 = sub_10000CF44(&v45, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if (v41[7] >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if (v41[7] >= 0) {
    uint64_t v13 = v41[7];
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  unint64_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if ((v41[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1[10];
  uint64_t v4 = &v46;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v46);
  if (v41[7] >= 0) {
    __int128 v16 = (char *)__p;
  }
  else {
    __int128 v16 = (char *)__p[0];
  }
  sub_1003C0D54(v15, v16, &v42);
  uint64_t v5 = v42;
  uint64_t v42 = 0LL;
  uint64_t v43 = v5;
  if ((v41[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    unint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      __p[0] = 0LL;
      __p[1] = 0LL;
      *(_DWORD *)uint64_t v41 = 3;
      *(void *)&v41[12] = 0LL;
      *(void *)&_DWORD v41[4] = 0LL;
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v43, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        unint64_t v20 = (char *)a2[1];
        unint64_t v21 = (char *)a2[2];
        if (v20 >= v21)
        {
          unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)*a2) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0x666666666666666LL) {
            sub_100007008();
          }
          unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - (_BYTE *)*a2) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x333333333333333LL) {
            unint64_t v28 = 0x666666666666666LL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28) {
            __int128 v29 = (char *)sub_100100EF8((uint64_t)(a2 + 2), v28);
          }
          else {
            __int128 v29 = 0LL;
          }
          __int128 v30 = &v29[40 * v25];
          __int128 v31 = *(_OWORD *)__p;
          __int128 v32 = *(_OWORD *)v41;
          *((void *)v30 + 4) = *(void *)&v41[16];
          *(_OWORD *)__int128 v30 = v31;
          *((_OWORD *)v30 + 1) = v32;
          int v34 = (char *)*a2;
          __int128 v33 = (char *)a2[1];
          std::string::size_type v35 = v30;
          if (v33 != *a2)
          {
            do
            {
              __int128 v36 = *(_OWORD *)(v33 - 40);
              __int128 v37 = *(_OWORD *)(v33 - 24);
              *((_DWORD *)v35 - 2) = *((_DWORD *)v33 - 2);
              *(_OWORD *)(v35 - 24) = v37;
              *(_OWORD *)(v35 - 40) = v36;
              v35 -= 40;
              v33 -= 40;
            }

            while (v33 != v34);
            __int128 v33 = (char *)*a2;
          }

          __int128 v24 = v30 + 40;
          *a2 = v35;
          a2[1] = v30 + 40;
          a2[2] = &v29[40 * v28];
          if (v33) {
            operator delete(v33);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)__p;
          __int128 v23 = *(_OWORD *)v41;
          *((void *)v20 + 4) = *(void *)&v41[16];
          *(_OWORD *)unint64_t v20 = v22;
          *((_OWORD *)v20 + 1) = v23;
          __int128 v24 = v20 + 40;
        }

        a2[1] = v24;
      }

      uint64_t v5 = v43;
      goto LABEL_43;
    }
  }

void sub_1001B83E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B844C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v38 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101826F50);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)uint64_t v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101826F50);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)std::string buf = 134349056;
        *(void *)uint64_t v42 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101826F50);
        }
        uint64_t v34 = *(void *)(a1 + 216);
        int v39 = 134349056;
        uint64_t v40 = v34;
        std::string::size_type v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v39,  12);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>::se tDatabaseAccessible() [T = VO2MaxRetrocomputeBodyMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v35);
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101826F50);
    }
    uint64_t v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)uint64_t v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v11;
      __int16 v45 = 2049;
      uint64_t v46 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    __int128 v16 = (void *)(v14 + 8 * (v13 / 0x66));
    unsigned int v37 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 40 * (v13 % 0x66);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x66)) + 40 * (v22 % 0x66);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101826F70);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101826F70);
        }
        LOWORD(v39) = 0;
        LODWORD(v36) = 2;
        unint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v39,  v36);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>::se tDatabaseAccessible() [T = VO2MaxRetrocomputeBodyMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 40LL;
      if (v17 - *v16 == 4080)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v37;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101826F50);
    }
    unint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)uint64_t v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101826F50);
      }
    }

    unint64_t v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v21 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)uint64_t v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  unint64_t v27 = *(void ***)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v30 = *(void *)(a1 + 192);
      unint64_t v27 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v27;
      unint64_t v29 = v30 - (void)v27;
    }

    while (v29 > 0x10);
  }

  if (v29 >> 3 == 1)
  {
    uint64_t v31 = 51LL;
  }

  else
  {
    if (v29 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v31 = 102LL;
  }

  *(void *)(a1 + 208) = v31;
LABEL_61:
  __int128 v32 = *(void **)(a1 + 144);
  if (v32)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_1001B8B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1001B8BB4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "");
}

__n128 sub_1001B8BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  __int128 v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

id *sub_1001B8BD8(uint64_t a1, __int128 *a2, char a3)
{
  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v34);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  uint64_t v29 = 0LL;
  double v30 = 0.0;
  int v31 = 3;
  uint64_t v33 = 0LL;
  uint64_t v32 = 0LL;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104LL))(a1, &v29);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101826F50);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101826F50);
        }
        LOWORD(v35) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v35,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sa nitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeBodyMetrics, DataProtectionPolicy = CLActivityD B::ClassBDataProtectionPolicy]",  "%s\n",  v15);
      }

      goto LABEL_43;
    }

    double v7 = *((double *)a2 + 1);
    double v8 = v30;
    double v9 = v7 - v30;
    if (v7 - v30 < 0.0) {
      double v9 = -(v7 - v30);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101826F50);
      }
      uint64_t v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)std::string buf = 134349312;
        double v40 = v30;
        __int16 v41 = 2050;
        uint64_t v42 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101826F50);
        }
        uint64_t v23 = *((void *)a2 + 1);
        int v35 = 134349312;
        double v36 = v30;
        __int16 v37 = 2050;
        uint64_t v38 = v23;
        __int128 v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v35,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sa nitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeBodyMetrics, DataProtectionPolicy = CLActivityD B::ClassBDataProtectionPolicy]",  "%s\n",  v24);
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *((double *)a2 + 1);
      double v8 = v30;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101826F50);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)std::string buf = 134217984;
          double v40 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101826F50);
          }
          double v25 = *((double *)a2 + 1);
          int v35 = 134217984;
          double v36 = v25;
          unint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v35));
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>:: sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeBodyMetrics, DataProtectionPolicy = CLActiv ityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v28 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_101826F50);
        double v17 = v28;
      }

      double v18 = v16 - v17;
      uint64_t v19 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v40 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101826F50);
        }
        int v35 = 134217984;
        double v36 = v18;
        unint64_t v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v35));
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeBodyMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sa nitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeBodyMetrics, DataProtectionPolicy = CLActivityD B::ClassBDataProtectionPolicy]",  "%s\n",  v27);
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v18);
    }

    (*(void (**)(uint64_t, uint64_t *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, &v29, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_1001B9330( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001B935C(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    __int128 v20 = (_Unwind_Exception *)sub_10122F368(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  uint64_t v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_1001B95BC(void *a1, double a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10122F4D4(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_1001B97F4(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10122F640(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  uint64_t v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

uint64_t sub_1001B9A1C()
{
  return 0LL;
}

uint64_t sub_1001B9A28(uint64_t a1)
{
  return sub_1001B844C(a1 - 72);
}

void sub_1001B9A30(id a1)
{
  qword_101934738 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void *sub_1001B9A5C(void *a1)
{
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void sub_1001B9A90(void *a1)
{
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  operator delete(a1);
}

void *sub_1001B9AC4(void *a1)
{
  *a1 = &off_101826F40;
  a1[1] = 0LL;
  a1[5] = 0LL;
  uint64_t v2 = a1 + 6;
  sub_1002E4C3C(a1 + 6, "BasicDataProtectionPolicy", 0LL, 1LL);
  (*(void (**)(void *))(*v2 + 16LL))(v2);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  a1,  (CFNotificationCallback)sub_1001B9BEC,  @"com.apple.mobile.keybagd.lock_status",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  (*(void (**)(void *))(*v2 + 24LL))(v2);
  return a1;
}

void sub_1001B9B78(_Unwind_Exception *a1)
{
  __int128 v4 = *(void **)(v1 + 40);
  if (v4 == (void *)(v1 + 16))
  {
    uint64_t v5 = 4LL;
    __int128 v4 = (void *)(v1 + 16);
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_1001B9BD8(void *a1)
{
  uint64_t v1 = sub_1001B9C98(a1);
  operator delete(v1);
}

void sub_1001B9BEC(uint64_t a1, void *a2)
{
  int v3 = MKBGetDeviceLockState(0LL);
  if (a2[5])
  {
    uint64_t v4 = a2[1];
    if (v4)
    {
      if (sub_1001B9C58((uint64_t)(a2 + 2), v4, v3 == 0))
      {
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a2, @"com.apple.mobile.keybagd.lock_status", 0LL);
      }
    }
  }

uint64_t sub_1001B9C58(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(void *)v3 + 48LL))(v3, &v6, &v5);
}

void *sub_1001B9C98(void *a1)
{
  *a1 = &off_101826F40;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.mobile.keybagd.lock_status", 0LL);
  sub_1002E4CB0(a1 + 6);
  uint64_t v3 = (void *)a1[5];
  if (v3 == a1 + 2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = a1 + 2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1001B9D1C(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1001B9D48(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 51LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 102LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    double v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

uint64_t sub_1001B9DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  *(void *)(v5 - 40) = a2;
  sub_1001B9E64((void *)(v5 - 32), a3);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
}

void sub_1001B9E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1001B9E64(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_1001B9EFC(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_1001BA064(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_1001BA070(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  sub_1010DDBC0(__p, "");
  sub_100D8AF38(v2, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
}

void sub_1001BA0D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BA0F0(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1001BA11C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1LL;
  }
  if (v7 != 100) {
    return 2LL;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128LL))(a1, a2, a3);
  return 0LL;
}

void sub_1001BA190(id a1)
{
  qword_101934A58 = (uint64_t)os_log_create("com.apple.locationd.Utility", "QA");
}

id *sub_1001BA1BC(id *a1)
{
  if (a1[1])
  {
    if (qword_101934A50 != -1) {
      dispatch_once(&qword_101934A50, &stru_101826F90);
    }
    uint64_t v2 = (os_log_s *)qword_101934A58;
    if (os_log_type_enabled((os_log_t)qword_101934A58, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = a1[1];
      *(_DWORD *)std::string buf = 134349314;
      uint64_t v12 = a1;
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "os_transaction releasing: (%{public}p) %{public}@",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A50 != -1) {
        dispatch_once(&qword_101934A50, &stru_101826F90);
      }
      id v5 = a1[1];
      int v7 = 134349314;
      double v8 = a1;
      __int16 v9 = 2114;
      id v10 = v5;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A58,  0LL,  "os_transaction releasing: (%{public}p) %{public}@",  &v7,  22);
      sub_10029211C("Generic", 1LL, 0LL, 2LL, "CLAutoOSTransaction::~CLAutoOSTransaction()", "%s\n", v6);
    }

    a1[1] = 0LL;
  }

  *a1 = 0LL;
  return a1;
}

void sub_1001BA3A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

BOOL sub_1001BA3B4()
{
  return os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT);
}

BOOL sub_1001BA3C8()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 1208), OS_LOG_TYPE_INFO);
}

BOOL sub_1001BA3D8()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 1208));
}

uint64_t sub_1001BA3E4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1001BA414(uint64_t a1)
{
}

uint64_t sub_1001BA444(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001BA46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  uint64_t result = sub_1001BA4C8((uint64_t)v6, a2, a1);
  *a3 = v6;
  return result;
}

void sub_1001BA4B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001BA4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_101826FC0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0x40D5180000000000LL;
  uint64_t v4 = (double *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  id v5 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  sub_1002F0B04(buf);
  sub_1002A82BC(*(uint64_t *)buf, "CleanupInterval", v4);
  uint64_t v6 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  sub_100583844((uint64_t)sub_1001BAA04, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v9 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    uint64_t v11 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
  }

  [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:4 registrationInfo:0];
  memset(&v29, 0, sizeof(v29));
  std::string::operator=(&v29, (const std::string *)&qword_101993C18);
  [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:0 registrationInfo:sub_10120E548((uint64_t)&v29)];
  [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:6 registrationInfo:sub_10120E548((uint64_t)&v29)];
  sub_100ACD980((uint64_t)sub_1001BABEC, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v12 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    uint64_t v14 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
  }

  [*(id *)(*(void *)(a1 + 64) + 16) register:*(void *)(*(void *)(a1 + 64) + 8) forNotification:0 registrationInfo:0];
  sub_100C6E054((uint64_t)sub_1001BADD4, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v15 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v16 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    uint64_t v17 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
  }

  [*(id *)(*(void *)(a1 + 72) + 16) register:*(void *)(*(void *)(a1 + 72) + 8) forNotification:5 registrationInfo:0];
  sub_1003CC884((uint64_t)sub_1001BAFBC, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v18 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v19 = *v5;
  *id v5 = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    uint64_t v20 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    }
  }

  [*(id *)(*v5 + 16) register:*(void *)(*v5 + 8) forNotification:6 registrationInfo:0];
  id v21 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "newTimer");
  *(void *)(a1 + 24) = v21;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_1001BB1A4;
  void v28[3] = &unk_10181D3D0;
  v28[4] = a1;
  [v21 setHandler:v28];
  uint64_t v22 = *(void **)(a1 + 24);
  if (v22)
  {
    [v22 setNextFireDelay:*v4 interval:*v4];
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101827040);
    }
    uint64_t v23 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "TileMgr, coarse, Timer allocation failure, #CloneMe",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101827040);
      }
      v27[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "TileMgr, coarse, Timer allocation failure, #CloneMe",  v27,  2);
      uint64_t v26 = (uint8_t *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCoarseCellTilesManagerExternal::CLCoarseCellTilesManagerExternal(CLCoarseCellTilesManager *, id<CLIntersiloUniverse>)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }
  }

  return a1;
}

void sub_1001BA928( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  uint64_t v27 = v24[9];
  v24[9] = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  uint64_t v28 = v24[8];
  v24[8] = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  uint64_t v29 = v24[7];
  v24[7] = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }
  uint64_t v30 = v24[6];
  v24[6] = 0LL;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }
  uint64_t v31 = *v25;
  *uint64_t v25 = 0LL;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BAA04(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101827020);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCoarseCellTilesManager::onClientNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101827020);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCoarseCellTilesManager::onClientNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100967090(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1001BABCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BABEC(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101827020);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCoarseCellTilesManager::onDataProtectionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101827020);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCoarseCellTilesManager::onDataProtectionNotification, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100966570(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1001BADB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BADD4(uint64_t a1, int *a2, char *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101827020);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCoarseCellTilesManager::onCompanionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101827020);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCoarseCellTilesManager::onCompanionNotification, event:%{public, location:escape_ only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100967B20(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1001BAF9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BAFBC(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101827020);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCoarseCellTilesManager::onStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101827020);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCoarseCellTilesManager::onStatusNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100966D58(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1001BB184( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_1001BB1A4(uint64_t a1)
{
  return sub_100968028(*(void *)(*(void *)(a1 + 32) + 8LL));
}

uint64_t sub_1001BB1B0(uint64_t a1)
{
  *(void *)a1 = off_101826FC0;
  [*(id *)(a1 + 24) invalidate];

  *(void *)(a1 + 24) = 0LL;
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {

    *(void *)(a1 + sub_10000AE14(v1 - 80) = 0LL;
  }

  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  return a1;
}

void sub_1001BB280(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1001BB1B0(a1);
  operator delete(v1);
}

uint64_t sub_1001BB298()
{
  return sub_1001B9A1C();
}

uint64_t sub_1001BB2AC()
{
  return sub_1004F64FC() & 1;
}

id sub_1001BB2C8(void *a1)
{
  uint64_t v2 = (CLTileDownloadSchedulingClient *)a1[10];
  if (!v2)
  {
    uint64_t v3 = objc_alloc(&OBJC_CLASS___CLTileDownloadSchedulingClient);
    uint64_t v4 = a1[1];
    if (v4) {
      uint64_t v5 = v4 + 112;
    }
    else {
      uint64_t v5 = 0LL;
    }
    uint64_t v2 = -[CLTileDownloadSchedulingClient initWithUniverse:andDelegate:](v3, "initWithUniverse:andDelegate:", a1[2], v5);
    a1[10] = v2;
  }

  return (id)-[CLTileDownloadSchedulingClient scheduleTileDownloadIfNecessary](v2, "scheduleTileDownloadIfNecessary");
}

id sub_1001BB310(uint64_t a1)
{
  id v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", @"CLClientManager");
  if (byte_101993C2F >= 0) {
    uint64_t v2 = &qword_101993C18;
  }
  else {
    uint64_t v2 = (uint64_t *)qword_101993C18;
  }
  return objc_msgSend( v1,  "resetNotificationConsumedForIdentifier:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

void sub_1001BB36C(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1001BB398(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1001BB3C4(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1004EF350((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8LL;
    }

    while (v6);
  }

  return a1;
}

void sub_1001BB428(_Unwind_Exception *a1)
{
}

void sub_1001BB440()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1001BB4A4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1001BB518(_Unwind_Exception *a1)
{
}

void sub_1001BB530()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1012E0510;
      v1[3] = unk_1012E0520;
      v1[4] = xmmword_1012E0530;
      v1[0] = xmmword_1012E04F0;
      v1[1] = unk_1012E0500;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1001BB604(_Unwind_Exception *a1)
{
}

uint64_t sub_1001BB61C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_101993C18, (void *)&_mh_execute_header);
}

uint64_t sub_1001BB698(double a1, double a2)
{
  if (a2 > 134.82 || a2 < 73.48 || a1 < 18.15 || a1 > 53.6) {
    return 0LL;
  }
  if (a1 <= 42.3 && a2 >= 107.1 && a2 <= 119.3
    || a1 <= 42.3 && a1 >= 25.3 && a2 <= 123.45 && a2 >= 119.3
    || a1 >= 42.3 && a2 <= 129.2 && a1 <= 49.34 && a2 >= 119.93
    || a2 <= 107.1 && a2 >= 98.76 && a1 >= 23.39 && a1 <= 41.58
    || a1 <= 42.6 && a2 <= 98.76 && a1 >= 28.39 && a2 >= 85.19
    || a2 <= 90.66 && a2 >= 80.81 && a1 >= 42.6 && a1 <= 45.2
    || a2 <= 101.54 && a2 >= 99.4 && a1 >= 22.06 && a1 <= 23.39
    || a2 <= 119.93 && a1 >= 42.3 && a1 <= 44.74 && a2 >= 111.924
    || a2 <= 119.93 && a2 >= 116.55 && a1 >= 44.74 && a1 <= 46.35
    || a2 <= 133.09 && a2 >= 129.2 && a1 >= 45.23 && a1 <= 47.66
    || a2 <= 125.95 && a2 >= 120.78 && a1 >= 49.34 && a1 <= 52.86
    || a2 >= 123.45 && a1 <= 42.4 && a2 <= 126.51 && a1 >= 41.38
    || a2 <= 85.19 && a2 >= 79.24 && a1 >= 31.07 && a1 <= 41.73
    || a2 <= 85.19 && a1 <= 42.6 && a1 >= 41.73 && a2 >= 80.28
    || a2 >= 123.45 && a1 >= 40.9 && a1 <= 41.38 && a2 <= 125.97
    || a2 >= 123.45 && a1 >= 40.47 && a1 <= 40.9 && a2 <= 125.0
    || a2 <= 120.15 && a2 >= 119.2 && a1 >= 24.78 && a1 <= 25.4)
  {
    return 1LL;
  }

  if ((a2 > 108.15 || a2 < 97.511 || a1 < 21.14 || a1 > 28.39)
    && (a2 > 97.511 || a2 < 78.33 || a1 < 27.29 || a1 > 32.7)
    && (a1 < 32.7 || a2 > 79.24 || a1 > 41.73)
    && (a1 > 49.16 || a2 > 96.06 || a1 < 41.73 || a2 < 79.24)
    && (a1 > 45.45 || a2 < 96.06 || a2 > 115.52 || a1 < 41.38)
    && (a1 < 39.6 || a2 < 115.52)
    && (a1 < 21.7 || a1 > 25.3 || a2 > 122.5 || a2 < 119.3))
  {
    return 0LL;
  }

  else
  {
    return 2LL;
  }

uint64_t sub_1001BBC50()
{
  if (qword_1019A0AA8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AA8 + 8LL))(qword_1019A0AA8);
  }
  if (qword_1019A0AB0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AB0 + 8LL))(qword_1019A0AB0);
  }
  if (qword_1019A0AB8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AB8 + 8LL))(qword_1019A0AB8);
  }
  if (qword_1019A0AC0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AC0 + 8LL))(qword_1019A0AC0);
  }
  if (qword_1019A0AC8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AC8 + 8LL))(qword_1019A0AC8);
  }
  if (qword_1019A0AD0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AD0 + 8LL))(qword_1019A0AD0);
  }
  if (qword_1019A0AD8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AD8 + 8LL))(qword_1019A0AD8);
  }
  if (qword_1019A0AE0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AE0 + 8LL))(qword_1019A0AE0);
  }
  if (qword_1019A0AE8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AE8 + 8LL))(qword_1019A0AE8);
  }
  if (qword_1019A0AF0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AF0 + 8LL))(qword_1019A0AF0);
  }
  if (qword_1019A0AF8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0AF8 + 8LL))(qword_1019A0AF8);
  }
  if (qword_1019A0B00) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0B00 + 8LL))(qword_1019A0B00);
  }
  if (qword_1019A0B08) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0B08 + 8LL))(qword_1019A0B08);
  }
  if (qword_1019A0B10) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0B10 + 8LL))(qword_1019A0B10);
  }
  if (qword_1019A0B18) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0B18 + 8LL))(qword_1019A0B18);
  }
  if (qword_1019A0B20) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0B20 + 8LL))(qword_1019A0B20);
  }
  if (qword_1019A0B28) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0B28 + 8LL))(qword_1019A0B28);
  }
  if (qword_1019A0B30) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0B30 + 8LL))(qword_1019A0B30);
  }
  uint64_t result = qword_1019A0B38;
  if (qword_1019A0B38) {
    return (*(uint64_t (**)(uint64_t))(*(void *)qword_1019A0B38 + 8LL))(qword_1019A0B38);
  }
  return result;
}

void sub_1001BBE2C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_101993C30 & 1) == 0)
  {
    byte_101993C30 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion( (wireless_diagnostics::google::protobuf::internal *)0x1E9808,  2005000,  (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenOutput.pb.cc",  a4);
    uint64_t v4 = (char *)operator new(0x40uLL);
    *(void *)uint64_t v4 = off_101827070;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *((void *)v4 + 7) = 0LL;
    qword_1019A0AA8 = (uint64_t)v4;
    uint64_t v5 = operator new(0x20uLL);
    *uint64_t v5 = off_1018270E8;
    v5[1] = 0LL;
    v5[2] = 0LL;
    void v5[3] = 0LL;
    qword_1019A0AB0 = (uint64_t)v5;
    uint64_t v6 = (char *)operator new(0x38uLL);
    *(void *)uint64_t v6 = off_101827160;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    qword_1019A0AB8 = (uint64_t)v6;
    uint64_t v7 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v7 = off_1018271D8;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *((_DWORD *)v7 + 10) = 0;
    qword_1019A0AC0 = (uint64_t)v7;
    unint64_t v8 = (char *)operator new(0xB0uLL);
    *(void *)unint64_t v8 = off_101827250;
    *((void *)v8 + 11) = 0LL;
    *((void *)v8 + 12) = 0LL;
    *((_DWORD *)v8 + 26) = 0;
    *((void *)v8 + 14) = 0LL;
    *((void *)v8 + 15) = 0LL;
    *((_DWORD *)v8 + 32) = 0;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 1++*(_DWORD *)(v3 + 52) = 0u;
    *((_DWORD *)v8 + 42) = 0;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 68) = 0u;
    qword_1019A0AC8 = (uint64_t)v8;
    uint64_t v9 = (char *)operator new(0x128uLL);
    *(void *)uint64_t v9 = off_1018272C8;
    *((void *)v9 + 17) = 0LL;
    *((void *)v9 + 18) = 0LL;
    *((_DWORD *)v9 + 38) = 0;
    *((void *)v9 + 27) = 0LL;
    *((void *)v9 + 28) = 0LL;
    *((_DWORD *)v9 + 58) = 0;
    *((void *)v9 + 30) = 0LL;
    *((void *)v9 + 31) = 0LL;
    *((_DWORD *)v9 + 64) = 0;
    *((void *)v9 + 33) = 0LL;
    *((void *)v9 + 34) = 0LL;
    *((_DWORD *)v9 + 70) = 0;
    *((void *)v9 + 36) = 0LL;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 116) = 0u;
    *((_DWORD *)v9 + ++*(_DWORD *)(v3 + 52) = 0;
    *((_OWORD *)v9 + 11) = 0u;
    *((_OWORD *)v9 + 12) = 0u;
    *((_OWORD *)v9 + 10) = 0u;
    qword_1019A0AD0 = (uint64_t)v9;
    uint64_t v10 = (char *)operator new(0xE8uLL);
    *(void *)uint64_t v10 = &off_101827340;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 1++*(_DWORD *)(v3 + 52) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 200) = 0u;
    *(_OWORD *)(v10 + 216) = 0u;
    qword_1019A0AD8 = (uint64_t)v10;
    char v11 = (char *)operator new(0xA8uLL);
    *(void *)char v11 = &off_1018273B8;
    *(void *)(v11 + 156) = 0LL;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *((_WORD *)v11 + 76) = 0;
    qword_1019A0AE0 = (uint64_t)v11;
    uint64_t v12 = (char *)operator new(0x68uLL);
    *(void *)uint64_t v12 = &off_101827430;
    *(void *)(v12 + 92) = 0LL;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *((_WORD *)v12 + 44) = 0;
    qword_1019A0AE8 = (uint64_t)v12;
    int v13 = (char *)operator new(0x60uLL);
    *(void *)int v13 = off_1018274A8;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((void *)v13 + 11) = 0LL;
    qword_1019A0AF0 = (uint64_t)v13;
    __int16 v14 = (char *)operator new(0x60uLL);
    *(void *)__int16 v14 = &off_101827520;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *((void *)v14 + 11) = 0LL;
    qword_1019A0AF8 = (uint64_t)v14;
    uint64_t v15 = (char *)operator new(0x88uLL);
    *(void *)uint64_t v15 = &off_101827598;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 104) = 0u;
    *(_OWORD *)(v15 + 120) = 0u;
    qword_1019A0B00 = (uint64_t)v15;
    __int16 v16 = (char *)operator new(0x60uLL);
    *(void *)__int16 v16 = &off_101827610;
    *(_OWORD *)(v16 + 8) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(_OWORD *)(v16 + 40) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 72) = 0u;
    *((void *)v16 + 11) = 0LL;
    qword_1019A0B08 = (uint64_t)v16;
    uint64_t v17 = (char *)operator new(0x60uLL);
    *(void *)uint64_t v17 = &off_101827688;
    *(_OWORD *)(v17 + 8) = 0u;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *((void *)v17 + 11) = 0LL;
    qword_1019A0B10 = (uint64_t)v17;
    __int16 v18 = (char *)operator new(0x88uLL);
    *(void *)__int16 v18 = &off_101827700;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 120) = 0u;
    qword_1019A0B18 = (uint64_t)v18;
    uint64_t v19 = (char *)operator new(0x60uLL);
    *(void *)uint64_t v19 = &off_101827778;
    *(_OWORD *)(v19 + 8) = 0u;
    *(_OWORD *)(v19 + 24) = 0u;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_OWORD *)(v19 + 72) = 0u;
    *((void *)v19 + 11) = 0LL;
    qword_1019A0B20 = (uint64_t)v19;
    uint64_t v20 = (char *)operator new(0x60uLL);
    *(void *)uint64_t v20 = &off_1018277F0;
    *(_OWORD *)(v20 + 8) = 0u;
    *(_OWORD *)(v20 + 24) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *((void *)v20 + 11) = 0LL;
    qword_1019A0B28 = (uint64_t)v20;
    id v21 = (char *)operator new(0x60uLL);
    *(void *)id v21 = &off_101827868;
    *(_OWORD *)(v21 + 8) = 0u;
    *(_OWORD *)(v21 + 24) = 0u;
    *(_OWORD *)(v21 + 40) = 0u;
    *(_OWORD *)(v21 + 56) = 0u;
    *(_OWORD *)(v21 + 72) = 0u;
    *((void *)v21 + 11) = 0LL;
    qword_1019A0B30 = (uint64_t)v21;
    uint64_t v22 = (char *)operator new(0x40uLL);
    *(void *)uint64_t v22 = &off_1018278E0;
    *(_OWORD *)(v22 + 8) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    *((void *)v22 + 7) = 0LL;
    qword_1019A0B38 = (uint64_t)v22;
    sub_1001BC5C8((uint64_t)v4);
    uint64_t v23 = sub_1001BC674(qword_1019A0AB8);
    uint64_t v24 = qword_1019A0AC8;
    uint64_t v25 = qword_1019A0AB8;
    if (qword_1019A0AB8)
    {
      *(void *)(qword_1019A0AC8 + 8) = qword_1019A0AB8;
      *(void *)(qword_1019A0AD0 + 8) = v25;
      uint64_t v26 = qword_1019A0AD8;
LABEL_4:
      *(void *)(v26 + 8) = v25;
      *(void *)(qword_1019A0AE0 + 8) = v25;
      uint64_t v27 = qword_1019A0AE8;
      uint64_t v28 = &dword_1019A0000;
      goto LABEL_8;
    }

    uint64_t v29 = sub_1001BBE2C(v23);
    uint64_t v25 = qword_1019A0AB8;
    *(void *)(v24 + 8) = qword_1019A0AB8;
    uint64_t v30 = qword_1019A0AD0;
    if (v25)
    {
      *(void *)(qword_1019A0AD0 + 8) = v25;
      *(void *)(qword_1019A0AD8 + 8) = v25;
      uint64_t v31 = qword_1019A0AE0;
    }

    else
    {
      uint64_t v49 = sub_1001BBE2C(v29);
      uint64_t v25 = qword_1019A0AB8;
      *(void *)(v30 + 8) = qword_1019A0AB8;
      uint64_t v26 = qword_1019A0AD8;
      if (v25) {
        goto LABEL_4;
      }
      uint64_t v50 = sub_1001BBE2C(v49);
      uint64_t v25 = qword_1019A0AB8;
      *(void *)(v26 + 8) = qword_1019A0AB8;
      uint64_t v31 = qword_1019A0AE0;
      if (!v25)
      {
        uint64_t v51 = sub_1001BBE2C(v50);
        uint64_t v25 = qword_1019A0AB8;
        *(void *)(v31 + 8) = qword_1019A0AB8;
        uint64_t v27 = qword_1019A0AE8;
        uint64_t v28 = &dword_1019A0000;
        if (!v25)
        {
          sub_1001BBE2C(v51);
          uint64_t v25 = qword_1019A0AB8;
        }

double sub_1001BC5A4(uint64_t a1)
{
  *(void *)a1 = off_101827070;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  return result;
}

uint64_t sub_1001BC5C8(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1019A0AD0;
  if (!qword_1019A0AD0)
  {
    double result = sub_1001BBE2C();
    uint64_t v2 = qword_1019A0AD0;
  }

  v1[1] = v2;
  uint64_t v3 = qword_1019A0AD8;
  if (!qword_1019A0AD8)
  {
    double result = sub_1001BBE2C();
    uint64_t v3 = qword_1019A0AD8;
  }

  v1[2] = v3;
  uint64_t v4 = qword_1019A0AF0;
  if (!qword_1019A0AF0)
  {
    double result = sub_1001BBE2C();
    uint64_t v4 = qword_1019A0AF0;
  }

  v1[3] = v4;
  uint64_t v5 = qword_1019A0AE0;
  if (!qword_1019A0AE0)
  {
    double result = sub_1001BBE2C();
    uint64_t v5 = qword_1019A0AE0;
  }

  v1[4] = v5;
  uint64_t v6 = qword_1019A0AE8;
  if (!qword_1019A0AE8)
  {
    double result = sub_1001BBE2C();
    uint64_t v6 = qword_1019A0AE8;
  }

  _OWORD v1[5] = v6;
  uint64_t v7 = qword_1019A0AC8;
  if (!qword_1019A0AC8)
  {
    double result = sub_1001BBE2C();
    uint64_t v7 = qword_1019A0AC8;
  }

  v1[6] = v7;
  return result;
}

uint64_t sub_1001BC674(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1019A0AB0;
  if (qword_1019A0AB0)
  {
    *(void *)(result + 8) = qword_1019A0AB0;
LABEL_4:
    v1[2] = v2;
LABEL_5:
    v1[3] = v2;
    goto LABEL_6;
  }

  double result = ((uint64_t (*)(void))sub_1001BBE2C)();
  uint64_t v2 = qword_1019A0AB0;
  v1[1] = qword_1019A0AB0;
  if (v2) {
    goto LABEL_4;
  }
  double result = sub_1001BBE2C(result);
  uint64_t v2 = qword_1019A0AB0;
  v1[2] = qword_1019A0AB0;
  if (v2) {
    goto LABEL_5;
  }
  double result = sub_1001BBE2C(result);
  uint64_t v2 = qword_1019A0AB0;
  v1[3] = qword_1019A0AB0;
  if (!v2)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v2 = qword_1019A0AB0;
  }

LABEL_6:
  v1[4] = v2;
  return result;
}

  v1[4] = v2;
  uint64_t v3 = qword_1019A0DE0;
  if (!qword_1019A0DE0)
  {
    double result = sub_1001D0A48(result);
    uint64_t v3 = qword_1019A0DE0;
  }

  _OWORD v1[5] = v3;
  uint64_t v4 = qword_1019A0B78;
  if (!qword_1019A0B78)
  {
    double result = sub_1001D0A48(result);
    uint64_t v4 = qword_1019A0B78;
  }

  v1[6] = v4;
  return result;
}

  sub_1003DC2B8(*(double **)(a1 + 40), 10.0, 0.1);
  sub_1003DC0A0(*(double **)(a1 + 8), 35.0, 8.0);
  *(void *)a1 = 0x403E000000000000LL;
}

  if (-[TRANSITPbRegionPreloadMarket tilesCount](self, "tilesCount"))
  {
    [a3 clearTiles];
    uint64_t v6 = -[TRANSITPbRegionPreloadMarket tilesCount](self, "tilesCount");
    if (v6)
    {
      uint64_t v7 = v6;
      for (uint64_t i = 0LL; i != v7; ++i)
        objc_msgSend(a3, "addTiles:", -[TRANSITPbRegionPreloadMarket tilesAtIndex:](self, "tilesAtIndex:", i));
    }
  }

  uint64_t v17 = 0u;
  __int16 v18 = 0u;
  uint64_t v15 = 0u;
  __int16 v16 = 0u;
  tiles = self->_tiles;
  uint64_t v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( tiles,  "countByEnumeratingWithState:objects:count:",  &v15,  v19,  16LL);
  if (v9)
  {
    uint64_t v10 = v9;
    char v11 = *(void *)v16;
    do
    {
      for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(tiles);
        }
        int v13 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)i) copyWithZone:a3];
        [v6 addTiles:v13];
      }

      uint64_t v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( tiles,  "countByEnumeratingWithState:objects:count:",  &v15,  v19,  16LL);
    }

    while (v10);
  }

  return v6;
}

  uint64_t v12 = 0u;
  int v13 = 0u;
  uint64_t v10 = 0u;
  char v11 = 0u;
  uint64_t v5 = (void *)*((void *)a3 + 5);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    unint64_t v8 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        -[TRANSITPbRegionPreloadMarket addTiles:]( self,  "addTiles:",  *(void *)(*((void *)&v10 + 1) + 8LL * (void)i));
      }

      uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }
}

  [*(id *)(a1 + 832) invalidate];
  return [*(id *)(a1 + 848) invalidate];
}

  sub_100681770(a1, (uint64_t)a2);
}

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10184E978);
  }
  char v11 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(double *)v4 < 0.0;
    int v13 = *v8;
    __int16 v14 = *(_DWORD *)(a1 + 6372);
    uint64_t v15 = *(void *)(a1 + 1128);
    __int16 v16 = *(void *)(v4 + 1920);
    *(_DWORD *)std::string buf = 67241728;
    uint64_t v42 = v10;
    uint64_t v43 = 1026;
    uint64_t v44 = v12;
    uint64_t v45 = 1026;
    uint64_t v46 = v13;
    uint64_t v47 = 1026;
    uint64_t v48 = v14;
    uint64_t v49 = 2050;
    uint64_t v50 = v15;
    uint64_t v51 = 2050;
    uint64_t v52 = v16;
    uint64_t v53 = 1026;
    uint64_t v54 = (int)v9;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "WifiFlow, cpitile, %{public}d, didfix, %{public}d, battsaver, %{public}d, sigenv, %{public}d, aps, %{public}ld, ha cc, %{public}0.1f, scanAge, %{public}d",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10184E978);
    }
    uint64_t v22 = *(double *)v4 < 0.0;
    uint64_t v23 = *v8;
    uint64_t v24 = *(_DWORD *)(a1 + 6372);
    uint64_t v25 = *(void *)(a1 + 1128);
    uint64_t v26 = *(void *)(v4 + 1920);
    v28[0] = 67241728;
    v28[1] = v10;
    uint64_t v29 = 1026;
    uint64_t v30 = v22;
    uint64_t v31 = 1026;
    uint64_t v32 = v23;
    uint64_t v33 = 1026;
    uint64_t v34 = v24;
    uint64_t v35 = 2050;
    uint64_t v36 = v25;
    __int16 v37 = 2050;
    uint64_t v38 = v26;
    uint64_t v39 = 1026;
    double v40 = (int)v9;
    uint64_t v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WifiFlow, cpitile, %{public}d, didfix, %{public}d, battsaver, %{public}d, sigenv, %{public}d, aps, % {public}ld, hacc, %{public}0.1f, scanAge, %{public}d",  v28,  52);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::optional<Decisions::WifiTileDownloadRequest> CL::Wifi1::Policies::TileRequest::HandleEvent::defaultDec isionLogic(const Input &)",  "%s\n",  v27);
  }

  if (!v10) {
    goto LABEL_13;
  }
  Current = CFAbsoluteTimeGetCurrent();
  __int16 v18 = 1;
  *(_WORD *)a2 = 1;
  *(_BYTE *)(a2 + 2) = 1;
  *(void *)(a2 + 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a2 + 16) = 3;
  *(CFAbsoluteTime *)(a2 + 24) = Current;
  *(_WORD *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v4 + 1904);
LABEL_14:
  *(_BYTE *)(a2 + 56) = v18;
}

  if (self->_location) {
    objc_msgSend(a3, "setLocation:");
  }
  uint64_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x80000000) == 0)
  {
    if ((*(_BYTE *)&v6 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  *((_DWORD *)a3 + 12) = self->_zoneid;
  *((_BYTE *)a3 + 52) |= 0x80u;
  *(_BYTE *)&uint64_t v6 = self->_has;
  if ((*(_BYTE *)&v6 & 1) != 0)
  {
LABEL_10:
    *((_DWORD *)a3 + 2) = self->_bandclass;
    *((_BYTE *)a3 + 52) |= 1u;
    *(_BYTE *)&uint64_t v6 = self->_has;
  }

  void v8[3] = -[ALSLocation copyWithZone:](self->_location, "copyWithZone:", a3);
  uint64_t v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x80000000) == 0)
  {
    if ((*(_BYTE *)&v10 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  *((_DWORD *)v8 + 12) = self->_zoneid;
  *((_BYTE *)v8 + 52) |= 0x80u;
  *(_BYTE *)&uint64_t v10 = self->_has;
  if ((*(_BYTE *)&v10 & 1) != 0)
  {
LABEL_8:
    *((_DWORD *)v8 + 2) = self->_bandclass;
    *((_BYTE *)v8 + 52) |= 1u;
    *(_BYTE *)&uint64_t v10 = self->_has;
  }

  location = self->_location;
  uint64_t v7 = *((void *)a3 + 3);
  if (location)
  {
    if (v7) {
      -[ALSLocation mergeFrom:](location, "mergeFrom:");
    }
  }

  else if (v7)
  {
    -[ALSCdmaCellTower setLocation:](self, "setLocation:");
  }

  unint64_t v8 = *((char *)a3 + 52);
  if ((v8 & 0x80000000) == 0)
  {
    if ((v8 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  self->_zoneid = *((_DWORD *)a3 + 12);
  *(_BYTE *)&self->_has |= 0x80u;
  LOBYTE(v8) = *((_BYTE *)a3 + 52);
  if ((v8 & 1) != 0)
  {
LABEL_17:
    self->_bandclass = *((_DWORD *)a3 + 2);
    *(_BYTE *)&self->_has |= 1u;
    LOBYTE(v8) = *((_BYTE *)a3 + 52);
  }

  if (self->_location) {
    objc_msgSend(a3, "setLocation:");
  }
  uint64_t v6 = (char)self->_has;
  if ((v6 & 0x20) != 0)
  {
    *((_DWORD *)a3 + 10) = self->_uarfcn;
    *((_BYTE *)a3 + 44) |= 0x20u;
    uint64_t v6 = (char)self->_has;
  }

  if ((v6 & 8) != 0)
  {
    *((_DWORD *)a3 + 8) = self->_pid;
    *((_BYTE *)a3 + 44) |= 8u;
  }

  void v8[2] = -[ALSLocation copyWithZone:](self->_location, "copyWithZone:", a3);
  uint64_t v10 = (char)self->_has;
  if ((v10 & 0x20) != 0)
  {
    *((_DWORD *)v8 + 10) = self->_uarfcn;
    *((_BYTE *)v8 + 44) |= 0x20u;
    uint64_t v10 = (char)self->_has;
  }

  if ((v10 & 8) != 0)
  {
    *((_DWORD *)v8 + 8) = self->_pid;
    *((_BYTE *)v8 + 44) |= 8u;
  }

  return v8;
}

  location = self->_location;
  uint64_t v7 = *((void *)a3 + 2);
  if (location)
  {
    if (v7) {
      -[ALSLocation mergeFrom:](location, "mergeFrom:");
    }
  }

  else if (v7)
  {
    -[ALSLteCellTower setLocation:](self, "setLocation:");
  }

  unint64_t v8 = *((_BYTE *)a3 + 44);
  if ((v8 & 0x20) != 0)
  {
    self->_uarfcn = *((_DWORD *)a3 + 10);
    *(_BYTE *)&self->_has |= 0x20u;
    unint64_t v8 = *((_BYTE *)a3 + 44);
  }

  if ((v8 & 8) != 0)
  {
    self->_pid = *((_DWORD *)a3 + 8);
    *(_BYTE *)&self->_has |= 8u;
  }

  return v10;
}

  uint64_t v2 = -1.0;
  *(double *)(result + sub_10000AE14(v1 - 80) = v2;
  return result;
}

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10188AA60);
  }
  uint64_t v6 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)std::string buf = 134349312;
    __int16 v16 = i;
    uint64_t v17 = 2050;
    __int16 v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Scrubbing done,pre,%{public}zu,post,%{public}zu",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10188AA60);
    }
    unint64_t v8 = *(void *)(a1 + 32);
    char v11 = 134349312;
    uint64_t v12 = i;
    int v13 = 2050;
    __int16 v14 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Scrubbing done,pre,%{public}zu,post,%{public}zu",  &v11,  22);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiScanAggregator::pruneAggregatedResults(const CFAbsoluteTime)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  if (self->_location) {
    objc_msgSend(a3, "setLocation:");
  }
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
    *((_DWORD *)a3 + 8) = self->_nrarfcn;
    *((_BYTE *)a3 + 40) |= 8u;
  }

  void v8[2] = -[ALSLocation copyWithZone:](self->_location, "copyWithZone:", a3);
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
    *((_DWORD *)v8 + 8) = self->_nrarfcn;
    *((_BYTE *)v8 + 40) |= 8u;
  }

  return v8;
}

  location = self->_location;
  uint64_t v7 = *((void *)a3 + 2);
  if (location)
  {
    if (v7) {
      -[ALSLocation mergeFrom:](location, "mergeFrom:");
    }
  }

  else if (v7)
  {
    -[ALSNr5GCellTower setLocation:](self, "setLocation:");
  }

  if ((*((_BYTE *)a3 + 40) & 8) != 0)
  {
    self->_nrarfcn = *((_DWORD *)a3 + 8);
    *(_BYTE *)&self->_has |= 8u;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 16) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return result;
      }
LABEL_12:
      double result = *(float *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = v3 | 8;
      *(float *)(a1 + 24) = result;
      return result;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 20) = v7;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2uLL;
    *(void *)(a1 + 156) = v3;
    *(void *)(a1 + 16) = v6;
    uint64_t v2 = *(void *)(a2 + 156);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_44;
    }
  }

  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }

  if ((v2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + ++*(_DWORD *)(v3 + 52) = v3;
    *(void *)(result + 8) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + ++*(_DWORD *)(v3 + 52) = v3;
  *(_DWORD *)(result + 32) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  if ((v4 & 0x80000) != 0)
  {
    unint64_t v8 = *(void *)(a2 + 160);
    v5 |= 0x80000uLL;
    *uint64_t v2 = v5;
    *(void *)(a1 + 160) = v8;
    uint64_t v4 = *v3;
    if ((*v3 & 0x100000) == 0)
    {
LABEL_8:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_52;
    }
  }

  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(a2 + 168);
  v5 |= 0x100000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 168) = v9;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2uLL;
    *(void *)(a1 + 156) = v3;
    *(void *)(a1 + 16) = v6;
    uint64_t v2 = *(void *)(a2 + 156);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_43;
    }
  }

  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x400uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }

  if ((v9 & 1) != 0)
  {
    uint64_t v15 = *(void *)(a2 + 224);
    v10 |= 1u;
    *(_DWORD *)(a1 + 396) = v10;
    *(void *)(a1 + sub_10000AE14(v45 - 224) = v15;
    uint64_t v9 = *(_DWORD *)(a2 + 396);
    if ((v9 & 0x40000) == 0)
    {
LABEL_8:
      if ((v9 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_42;
    }
  }

  else if ((v9 & 0x40000) == 0)
  {
    goto LABEL_8;
  }

  __int16 v16 = *(void *)(a2 + 368);
  v10 |= 0x40000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 368) = v16;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 2) == 0)
  {
LABEL_9:
    if ((v9 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 72) = v3;
    *(void *)(a1 + 16) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }

  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 68);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 68) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }

  if ((v2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + sub_10000AE14(v1 - 80) = v3;
    *(void *)(result + 8) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(result + sub_10000AE14(v1 - 80) = v3;
  *(_DWORD *)(result + 64) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 12);
    v3 |= 2u;
    *(_DWORD *)(result + 72) = v3;
    *(_DWORD *)(result + 12) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 72);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }

  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 60);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 60) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x4000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 48) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }

  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_BYTE *)(result + 48) = v3;
  *(_DWORD *)(result + 40) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2uLL;
    *(void *)(a1 + 216) = v3;
    *(void *)(a1 + 16) = v6;
    uint64_t v2 = *(void *)(a2 + 216);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000000000LL) == 0) {
        goto LABEL_9;
      }
      goto LABEL_56;
    }
  }

  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 88) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x8000000000LL) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_57;
  }

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + 32) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 40);
      *(_BYTE *)(result + 44) = v3 | 0x10;
      *(_DWORD *)(result + 40) = v8;
      return result;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 44) = v3;
  *(void *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 0x20) != 0)
  {
    double result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 48) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }

  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 56) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_DWORD *)(a1 + 112) = v3;
    *(void *)(a1 + 8) = v4;
    uint64_t v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x400000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_30;
    }
  }

  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x400000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 100) = v3;
    *(void *)(a1 + 16) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x10000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }

  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 60);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 60) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  if ((v2 & 0x80000) != 0)
  {
    uint64_t v6 = *(_BYTE *)(a2 + 113);
    v3 |= 0x80000u;
    *(_DWORD *)(result + 116) = v3;
    *(_BYTE *)(result + 113) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }

  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 115);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 115) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    v3 |= 8u;
    *(_WORD *)(a1 + 76) = v3;
    *(double *)(a1 + 32) = result;
    uint64_t v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 48) = result;
  uint64_t v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 16) = result;
    uint64_t v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 48) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 16) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 48) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_14:
    double result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }

  if ((v2 & 1) != 0)
  {
    double result = *(float *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + ++*(_DWORD *)(v3 + 52) = v3;
    *(float *)(a1 + 8) = result;
    uint64_t v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 12);
  v3 |= 2u;
  *(_WORD *)(a1 + ++*(_DWORD *)(v3 + 52) = v3;
  *(float *)(a1 + 12) = result;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 32) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return *(float *)&v4;
      }
      goto LABEL_12;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  if ((*(_BYTE *)(a2 + 32) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_12:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 44) = v3;
    *(_DWORD *)(result + 32) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 44) = v3;
  *(_DWORD *)(result + 36) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 16);
    v3 |= 4u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 16) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 24);
  v3 |= 0x10u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 24) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v6 & 2) != 0)
  {
    uint64_t v10 = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 116) = v7 | 2;
    *(_BYTE *)(a1 + 112) = v10;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  return a1;
}

  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    double result = *(float *)(a2 + 20);
    *(_BYTE *)(a1 + 24) = v3 | 8;
    *(float *)(a1 + 20) = result;
    return result;
  }

  double result = *(float *)(a2 + 16);
  v3 |= 4u;
  *(_BYTE *)(a1 + 24) = v3;
  *(float *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 24) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x200) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x200u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 48) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + ++*(_DWORD *)(v3 + 52) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    double result = *(float *)(a2 + 20);
    *(_BYTE *)(a1 + 24) = v3 | 8;
    *(float *)(a1 + 20) = result;
    return result;
  }

  double result = *(float *)(a2 + 16);
  v3 |= 4u;
  *(_BYTE *)(a1 + 24) = v3;
  *(float *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 24) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    if ((*(_BYTE *)(a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }

  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 28) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    uint64_t v9 = *(_BYTE *)(a2 + 32);
    *(_BYTE *)(result + 36) = v3 | 0x20;
    *(_BYTE *)(result + 32) = v9;
    return result;
  }

  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_1000F9040( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }

  uint64_t v9 = *(_WORD *)(a2 + 172);
  if ((v9 & 2) != 0)
  {
    uint64_t v10 = *(void *)(a2 + 112);
    *(_WORD *)(a1 + 172) |= 2u;
    *(void *)(a1 + 112) = v10;
    uint64_t v9 = *(_WORD *)(a2 + 172);
  }

  if ((v9 & 1) != 0)
  {
    char v11 = *(void *)(a2 + 104);
    *(_WORD *)(a1 + 172) |= 1u;
    *(void *)(a1 + 104) = v11;
  }

  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }

  uint64_t v12 = *(_WORD *)(a2 + 172);
  if ((v12 & 0x80) != 0)
  {
    uint64_t v15 = *(void *)(a2 + 160);
    *(_WORD *)(a1 + 172) |= 0x80u;
    *(void *)(a1 + 160) = v15;
    uint64_t v12 = *(_WORD *)(a2 + 172);
    if ((v12 & 0x20) == 0)
    {
LABEL_16:
      if ((v12 & 0x40) == 0) {
        goto LABEL_17;
      }
      goto LABEL_23;
    }
  }

  else if ((v12 & 0x20) == 0)
  {
    goto LABEL_16;
  }

  __int16 v16 = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 172) |= 0x20u;
  *(void *)(a1 + 144) = v16;
  uint64_t v12 = *(_WORD *)(a2 + 172);
  if ((v12 & 0x40) == 0)
  {
LABEL_17:
    if ((v12 & 8) == 0) {
      goto LABEL_18;
    }
LABEL_24:
    __int16 v18 = *(void *)(a2 + 128);
    *(_WORD *)(a1 + 172) |= 8u;
    *(void *)(a1 + 128) = v18;
    if ((*(_WORD *)(a2 + 172) & 4) == 0) {
      return a1;
    }
    goto LABEL_19;
  }

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }

  return result;
}

  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 108);
    v3 |= 0x200000u;
    *(_DWORD *)(a1 + 128) = v3;
    *(_DWORD *)(a1 + 108) = v4;
    uint64_t v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x80000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }

  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  uint64_t v9 = *(uint64_t **)(a2 + 24);
  uint64_t v10 = *(uint64_t **)(a2 + 32);
  while (v9 != v10)
    sub_10109AEA4(v5, *v9++);
  char v11 = *(void *)(a2 + 16);
  if (v11)
  {
    uint64_t v12 = operator new(0x18uLL);
    int v13 = sub_101103670((uint64_t)v12, v11);
    __int16 v14 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v15;
    if (v14) {
      (*(void (**)(uint64_t, float))(*(void *)v14 + 8LL))(v14, v13);
    }
  }

  __int16 v16 = *(void *)(a2 + 8);
  if (v16)
  {
    uint64_t v17 = operator new(0x18uLL);
    __int16 v18 = sub_101103670((uint64_t)v17, v16);
    uint64_t v19 = *v4;
    *uint64_t v4 = v20;
    if (v19) {
      (*(void (**)(uint64_t, float))(*(void *)v19 + 8LL))(v19, v18);
    }
  }

  id v21 = *(_BYTE *)(a2 + 60);
  if ((v21 & 4) != 0)
  {
    uint64_t v22 = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_BYTE *)(a1 + 56) = v22;
    id v21 = *(_BYTE *)(a2 + 60);
  }

  if ((v21 & 8) != 0)
  {
    uint64_t v23 = *(_BYTE *)(a2 + 57);
    *(_BYTE *)(a1 + 60) |= 8u;
    *(_BYTE *)(a1 + 57) = v23;
  }

  return a1;
}

  unint64_t v8 = *(void *)(a2 + 24);
  if (v8)
  {
    uint64_t v9 = operator new(0x18uLL);
    uint64_t v10 = sub_101103670((uint64_t)v9, v8);
    char v11 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    if (v11) {
      (*(void (**)(uint64_t, float))(*(void *)v11 + 8LL))(v11, v10);
    }
  }

  int v13 = *(void *)(a2 + 8);
  if (v13)
  {
    __int16 v14 = operator new(0x18uLL);
    uint64_t v15 = sub_101103670((uint64_t)v14, v13);
    __int16 v16 = *v4;
    *uint64_t v4 = v17;
    if (v16) {
      (*(void (**)(uint64_t, float))(*(void *)v16 + 8LL))(v16, v15);
    }
  }

  __int16 v18 = *(void *)(a2 + 16);
  if (v18)
  {
    uint64_t v19 = operator new(0x18uLL);
    uint64_t v20 = sub_101103670((uint64_t)v19, v18);
    id v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22;
    if (v21) {
      (*(void (**)(uint64_t, float))(*(void *)v21 + 8LL))(v21, v20);
    }
  }

  uint64_t v23 = *(_BYTE *)(a2 + 56);
  if ((v23 & 2) == 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0) {
      goto LABEL_17;
    }
LABEL_21:
    uint64_t v27 = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 56) |= 0x10u;
    *(_DWORD *)(a1 + ++*(_DWORD *)(v3 + 52) = v27;
    if ((*(_BYTE *)(a2 + 56) & 4) == 0) {
      return a1;
    }
    goto LABEL_18;
  }

  uint64_t v26 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) |= 2u;
  *(_DWORD *)(a1 + 40) = v26;
  uint64_t v23 = *(_BYTE *)(a2 + 56);
  if ((v23 & 0x10) != 0) {
    goto LABEL_21;
  }
LABEL_17:
  if ((v23 & 4) != 0)
  {
LABEL_18:
    uint64_t v24 = *(_DWORD *)(a2 + 44);
    *(_BYTE *)(a1 + 56) |= 4u;
    *(_DWORD *)(a1 + 44) = v24;
  }

  return a1;
}

  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    uint64_t v10 = operator new(0x18uLL);
    char v11 = sub_101103670((uint64_t)v10, v9);
    uint64_t v12 = *v4;
    *uint64_t v4 = v13;
    if (v12) {
      (*(void (**)(uint64_t, float))(*(void *)v12 + 8LL))(v12, v11);
    }
  }

  __int16 v14 = *(void *)(a2 + 16);
  if (v14)
  {
    uint64_t v15 = operator new(0x18uLL);
    __int16 v16 = sub_101103670((uint64_t)v15, v14);
    uint64_t v17 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v18;
    if (v17) {
      (*(void (**)(uint64_t, float))(*(void *)v17 + 8LL))(v17, v16);
    }
  }

  uint64_t v19 = *(_WORD *)(a2 + 48);
  if ((v19 & 0x80) != 0)
  {
    uint64_t v22 = *(_BYTE *)(a2 + 41);
    *(_WORD *)(a1 + 48) |= 0x80u;
    *(_BYTE *)(a1 + 41) = v22;
    uint64_t v19 = *(_WORD *)(a2 + 48);
    if ((v19 & 0x20) == 0)
    {
LABEL_14:
      if ((v19 & 4) == 0) {
        goto LABEL_15;
      }
      goto LABEL_25;
    }
  }

  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_14;
  }

  uint64_t v23 = *(_BYTE *)(a2 + 39);
  *(_WORD *)(a1 + 48) |= 0x20u;
  *(_BYTE *)(a1 + 39) = v23;
  uint64_t v19 = *(_WORD *)(a2 + 48);
  if ((v19 & 4) == 0)
  {
LABEL_15:
    if ((v19 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }

  unint64_t v8 = *(void *)(a2 + 24);
  if (v8)
  {
    uint64_t v9 = operator new(0x18uLL);
    uint64_t v10 = sub_101103670((uint64_t)v9, v8);
    char v11 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    if (v11) {
      (*(void (**)(uint64_t, float))(*(void *)v11 + 8LL))(v11, v10);
    }
  }

  int v13 = *(void *)(a2 + 8);
  if (v13)
  {
    __int16 v14 = operator new(0x18uLL);
    uint64_t v15 = sub_101103670((uint64_t)v14, v13);
    __int16 v16 = *v4;
    *uint64_t v4 = v17;
    if (v16) {
      (*(void (**)(uint64_t, float))(*(void *)v16 + 8LL))(v16, v15);
    }
  }

  __int16 v18 = *(void *)(a2 + 16);
  if (v18)
  {
    uint64_t v19 = operator new(0x18uLL);
    uint64_t v20 = sub_101103670((uint64_t)v19, v18);
    id v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22;
    if (v21) {
      (*(void (**)(uint64_t, float))(*(void *)v21 + 8LL))(v21, v20);
    }
  }

  return a1;
}

  unint64_t v8 = *(void *)(a2 + 56);
  if (v8)
  {
    uint64_t v9 = operator new(0x18uLL);
    uint64_t v10 = sub_101103670((uint64_t)v9, v8);
    char v11 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v12;
    if (v11) {
      (*(void (**)(uint64_t, float))(*(void *)v11 + 8LL))(v11, v10);
    }
  }

  int v13 = *(void *)(a2 + 64);
  if (v13)
  {
    __int16 v14 = operator new(0x18uLL);
    uint64_t v15 = sub_101103670((uint64_t)v14, v13);
    __int16 v16 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v17;
    if (v16) {
      (*(void (**)(uint64_t, float))(*(void *)v16 + 8LL))(v16, v15);
    }
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  __int16 v18 = *(_BYTE *)(a2 + 108);
  if ((v18 & 0x40) != 0)
  {
    uint64_t v24 = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 108) |= 0x40u;
    *(_DWORD *)(a1 + 100) = v24;
    __int16 v18 = *(_BYTE *)(a2 + 108);
    if ((v18 & 0x20) == 0)
    {
LABEL_16:
      if ((v18 & 0x80) == 0) {
        goto LABEL_17;
      }
      goto LABEL_28;
    }
  }

  else if ((*(_BYTE *)(a2 + 108) & 0x20) == 0)
  {
    goto LABEL_16;
  }

  uint64_t v25 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 108) |= 0x20u;
  *(_DWORD *)(a1 + 96) = v25;
  __int16 v18 = *(_BYTE *)(a2 + 108);
  if ((v18 & 0x80) == 0)
  {
LABEL_17:
    if ((v18 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  unint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = operator new(0x18uLL);
    uint64_t v10 = sub_101103670((uint64_t)v9, v8);
    char v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v12;
    if (v11) {
      (*(void (**)(uint64_t, float))(*(void *)v11 + 8LL))(v11, v10);
    }
  }

  int v13 = *(void *)(a2 + 8);
  if (v13)
  {
    __int16 v14 = operator new(0x18uLL);
    uint64_t v15 = sub_101103670((uint64_t)v14, v13);
    __int16 v16 = *v4;
    *uint64_t v4 = v17;
    if (v16) {
      (*(void (**)(uint64_t, float))(*(void *)v16 + 8LL))(v16, v15);
    }
  }

  return a1;
}

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 28);
      *(_BYTE *)(result + 32) = v3 | 0x10;
      *(_DWORD *)(result + 28) = v8;
      return result;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 16) = v7;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0) {
    goto LABEL_12;
  }
  return result;
}

  uint64_t v9 = *(uint64_t **)(a2 + 72);
  uint64_t v10 = *(uint64_t **)(a2 + 80);
  while (v9 != v10)
    sub_10109AEA4(v5, *v9++);
  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  char v11 = *(void *)(a2 + 64);
  if (v11)
  {
    uint64_t v12 = operator new(0x18uLL);
    int v13 = sub_101103670((uint64_t)v12, v11);
    __int16 v14 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v15;
    if (v14) {
      (*(void (**)(uint64_t, float))(*(void *)v14 + 8LL))(v14, v13);
    }
  }

  __int16 v16 = *(void *)(a2 + 56);
  if (v16)
  {
    uint64_t v17 = operator new(0x18uLL);
    __int16 v18 = sub_101103670((uint64_t)v17, v16);
    uint64_t v19 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v20;
    if (v19) {
      (*(void (**)(uint64_t, float))(*(void *)v19 + 8LL))(v19, v18);
    }
  }

  id v21 = *(_BYTE *)(a2 + 132);
  if ((v21 & 8) != 0)
  {
    uint64_t v22 = *(_BYTE *)(a2 + 129);
    *(_BYTE *)(a1 + 132) |= 8u;
    *(_BYTE *)(a1 + 129) = v22;
    id v21 = *(_BYTE *)(a2 + 132);
  }

  if ((v21 & 4) != 0)
  {
    uint64_t v23 = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 132) |= 4u;
    *(_BYTE *)(a1 + 128) = v23;
  }

  uint64_t v24 = *(uint64_t **)(a2 + 96);
  return a1;
}

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 20) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 24) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 20) = v3 | 2;
    *(_DWORD *)(result + 12) = v6;
  }

  return result;
}

  if ((v2 & 0x400) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 60);
    v3 |= 0x400u;
    *(_DWORD *)(result + 100) = v3;
    *(_DWORD *)(result + 60) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 100) = v3;
  *(void *)(result + 16) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  if ((v2 & 4) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(float *)(a1 + 16) = result;
    return result;
  }

  double result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 28) = v3;
  *(float *)(a1 + 20) = result;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v5 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 80);
    *(_WORD *)(a1 + 120) = v6 | 1;
    *(void *)(a1 + sub_10000AE14(v1 - 80) = v9;
  }

  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_10004C5F8( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  uint64_t v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 0x80) != 0)
  {
    int v13 = *(_BYTE *)(a2 + 116);
    *(_WORD *)(a1 + 120) |= 0x80u;
    *(_BYTE *)(a1 + 116) = v13;
    uint64_t v10 = *(_WORD *)(a2 + 120);
    if ((v10 & 0x100) == 0)
    {
LABEL_12:
      if ((v10 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_21;
    }
  }

  else if ((*(_WORD *)(a2 + 120) & 0x100) == 0)
  {
    goto LABEL_12;
  }

  __int16 v14 = *(_BYTE *)(a2 + 117);
  *(_WORD *)(a1 + 120) |= 0x100u;
  *(_BYTE *)(a1 + 117) = v14;
  uint64_t v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 4) == 0)
  {
LABEL_13:
    if ((v10 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }

  if ((v5 & 0x40) != 0)
  {
    char v11 = *(_DWORD *)(a2 + 96);
    v6 |= 0x40u;
    *(_DWORD *)(a1 + 144) = v6;
    *(_DWORD *)(a1 + 96) = v11;
    uint64_t v5 = *(_DWORD *)(a2 + 144);
    if ((v5 & 0x80) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
  }

  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 100);
  v6 |= 0x80u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 100) = v12;
  uint64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  if ((v2 & 0x20000) != 0)
  {
    double result = *(float *)(a2 + 76);
    v3 |= 0x20000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(float *)(a1 + 76) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_35;
    }
  }

  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 72);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 72) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 1++*(_DWORD *)(v3 + 52) = v3;
    *(void *)(a1 + 24) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 152);
    if ((v2 & 0x10000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_37;
    }
  }

  else if ((v2 & 0x10000000) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 144);
  v3 |= 0x10000000u;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(v3 + 52) = v3;
  *(float *)(a1 + 144) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }

  if ((v2 & 0x80000) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 104);
    v3 |= 0x80000u;
    *(_DWORD *)(result + 132) = v3;
    *(_DWORD *)(result + 104) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 132);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_36;
    }
  }

  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 120);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 120) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }

  if ((v4 & 4) != 0)
  {
    double result = *(float *)(a2 + 308);
    v6 |= 4u;
    *uint64_t v2 = 0LL;
    *(_BYTE *)(a1 + 324) = v6;
    *(float *)(a1 + 308) = result;
    uint64_t v7 = *v3;
    uint64_t v4 = *(_BYTE *)(a2 + 324);
    if ((*v3 & 0x20) == 0)
    {
LABEL_8:
      if ((v7 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_75;
    }
  }

  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v5 = 32LL;
  *uint64_t v2 = 32LL;
  *(_BYTE *)(a1 + 324) = v6;
  *(void *)(a1 + 48) = v10;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x40) == 0)
  {
LABEL_9:
    if ((v7 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_76;
  }

  if ((v6 & 0x800) != 0)
  {
    PB::TextFormatter::format(this, "arclengthXYZBiggestImpact", *(float *)(a1 + 88));
    uint64_t v6 = *v5;
    uint64_t v7 = *(_BYTE *)(a1 + 324);
    if ((*v5 & 0x1000) == 0)
    {
LABEL_8:
      if ((v6 & 0x2000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_76;
    }
  }

  else if ((v6 & 0x1000) == 0)
  {
    goto LABEL_8;
  }

  PB::TextFormatter::format(this, "arclengthXYZOverEpoch", *(float *)(a1 + 92));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_77;
  }

  if ((v5 & 4) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 308), 3u);
    uint64_t v6 = *v4;
    uint64_t v5 = *((_BYTE *)v4 + 8);
    if ((*v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v6 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_75;
    }
  }

  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 4u);
  uint64_t v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_76;
  }

  if ((v7 & 0x10) != 0)
  {
    int v13 = *(void *)(a2 + 160);
    v8 |= 0x10u;
    *(_WORD *)(a1 + 204) = v8;
    *(void *)(a1 + 160) = v13;
    uint64_t v7 = *(_WORD *)(a2 + 204);
    if ((v7 & 0x4000) == 0)
    {
LABEL_8:
      if ((v7 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }

  else if ((v7 & 0x4000) == 0)
  {
    goto LABEL_8;
  }

  __int16 v14 = *(_BYTE *)(a2 + 201);
  v8 |= 0x4000u;
  *(_WORD *)(a1 + 204) = v8;
  *(_BYTE *)(a1 + 201) = v14;
  uint64_t v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x400) == 0)
  {
LABEL_9:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  if ((v2 & 0x80000) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 108);
    v3 |= 0x80000uLL;
    *(void *)(result + 164) = v3;
    *(_DWORD *)(result + 108) = v6;
    uint64_t v2 = *(void *)(a2 + 164);
    if ((v2 & 0x1000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_40;
    }
  }

  else if ((v2 & 0x1000000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 128);
  v3 |= 0x1000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 128) = v7;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }

  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x40u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 48) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 60);
  v3 |= 0x200u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v7 & 0x80) != 0)
  {
    uint64_t v10 = *(_BYTE *)(a2 + 275);
    uint64_t v6 = 128;
    *uint64_t v2 = v5;
    *(_WORD *)(a1 + 288) = 128;
    *(_BYTE *)(a1 + 275) = v10;
    uint64_t v4 = *v3;
    uint64_t v7 = *(_WORD *)(a2 + 288);
    if ((v7 & 0x40) == 0)
    {
LABEL_8:
      if ((v7 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_83;
    }
  }

  else if ((v7 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  char v11 = *(_BYTE *)(a2 + 274);
  v6 |= 0x40u;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 274) = v11;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 0x10) == 0)
  {
LABEL_9:
    if ((v7 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_84;
  }

  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "audioDvChaosThresholdMax", *(float *)(a1 + 24));
    uint64_t v6 = *v5;
    uint64_t v7 = *(_WORD *)(a1 + 288);
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_84;
    }
  }

  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  PB::TextFormatter::format(this, "audioDvChaosThresholdMin", *(float *)(a1 + 28));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_85;
  }

  if ((v6 & 0x80) != 0)
  {
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 275), 3u);
    uint64_t v5 = *v4;
    uint64_t v6 = *((_WORD *)v4 + 4);
    if ((v6 & 0x40) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_84;
    }
  }

  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 274), 4u);
  uint64_t v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_85;
  }

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 0x10u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 28) = v3 | 4;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 12);
  v3 |= 2u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 12) = v7;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 0x10u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 28) = v3 | 4;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 12);
  v3 |= 2u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 12) = v7;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v8 & 0x20000) != 0)
  {
    uint64_t v10 = *(_BYTE *)(a2 + 312);
    *(_WORD *)(a1 + 324) = v6;
    v6 |= 0x20000uLL;
    *uint64_t v2 = v5;
    *(_BYTE *)(a1 + 326) = BYTE2(v6);
    *(_BYTE *)(a1 + 312) = v10;
    LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
    uint64_t v4 = *v3;
    if ((*v3 & 0x800000000000000LL) == 0)
    {
LABEL_8:
      if ((v4 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_90;
    }
  }

  else if ((v4 & 0x800000000000000LL) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 248);
  v5 |= 0x800000000000000uLL;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 248) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_9:
    if ((v8 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_91;
  }

  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "cumulativeRotationThresholdWithAudio", *(float *)(a1 + 24));
    uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
    uint64_t v6 = *v5;
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_91;
    }
  }

  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  PB::TextFormatter::format(this, "cumulativeRotationThresholdWithoutAudio", *(float *)(a1 + 28));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_92;
  }

  if ((v7 & 0x20000) != 0)
  {
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 312), 3u);
    uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    uint64_t v5 = *v4;
    if ((*v4 & 0x800000000000000LL) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_90;
    }
  }

  else if ((v5 & 0x800000000000000LL) == 0)
  {
    goto LABEL_8;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 248), 0x65u);
  uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_91;
  }

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_DWORD *)(result + 68) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 68);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 68) = v3;
  *(void *)(result + 8) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 0x10u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 28) = v3 | 4;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 12);
  v3 |= 2u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 12) = v7;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 0x400) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 64);
    v3 |= 0x400u;
    *(_DWORD *)(result + 92) = v3;
    *(_DWORD *)(result + 64) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }

  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 84);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  if ((v4 & 0x1000000) != 0)
  {
    char v11 = *(_DWORD *)(a2 + 136);
    v5 |= 0x1000000uLL;
    *uint64_t v2 = v5;
    *(void *)(a1 + 364) = 0LL;
    *(_DWORD *)(a1 + 136) = v11;
    uint64_t v4 = *v3;
    uint64_t v7 = *(void *)(a2 + 364);
    if ((*v3 & 0x10000000000000LL) == 0)
    {
LABEL_8:
      if ((v7 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_115;
    }
  }

  else if ((v4 & 0x10000000000000LL) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 248);
  v5 |= 0x10000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = 0LL;
  *(_DWORD *)(a1 + 248) = v12;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x400000000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_116;
  }

  if ((v5 & 0x1000000) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 3u);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if ((*v4 & 0x10000000000000LL) == 0)
    {
LABEL_8:
      if ((v6 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_115;
    }
  }

  else if ((v5 & 0x10000000000000LL) == 0)
  {
    goto LABEL_8;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 248), 4u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x400000000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_116;
  }

  if ((v5 & 0x200) != 0)
  {
    unint64_t v8 = *(_BYTE *)(a2 + 196);
    uint64_t v4 = 512LL;
    *(void *)(result + 204) = v3;
    *(_BYTE *)(result + 214) = 0;
    *(_WORD *)(result + 212) = 512;
    *(_BYTE *)(result + 196) = v8;
    uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
    uint64_t v2 = *(void *)(a2 + 204);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_88;
    }
  }

  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 124);
  v3 |= 0x2000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 124) = v9;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 2) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_89;
  }

  if ((v5 & 0x800000000LL) != 0)
  {
    PB::TextFormatter::format(this, "chaosMet1", *(_BYTE *)(a1 + 158));
    uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
    uint64_t v5 = *(void *)(a1 + 204);
    if ((v5 & 0x1000000000LL) == 0)
    {
LABEL_8:
      if ((v5 & 0x2000000000LL) == 0) {
        goto LABEL_9;
      }
      goto LABEL_89;
    }
  }

  else if ((v5 & 0x1000000000LL) == 0)
  {
    goto LABEL_8;
  }

  PB::TextFormatter::format(this, "chaosMet2", *(_BYTE *)(a1 + 159));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x2000000000LL) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_90;
  }

  if ((v5 & 0x200) != 0)
  {
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 196), 0x67u);
    uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    uint64_t v4 = *(void *)(v3 + 204);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_88;
    }
  }

  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 124), 0x68u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_89;
  }

  if ((v2 & 0x20000000) != 0)
  {
    double result = *(float *)(a2 + 140);
    v3 |= 0x20000000uLL;
    *(void *)(a1 + 172) = v3;
    *(float *)(a1 + 140) = result;
    uint64_t v2 = *(void *)(a2 + 172);
    if ((v2 & 0x100000000LL) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_53;
    }
  }

  else if ((v2 & 0x100000000LL) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 152);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 1++*(_DWORD *)(v3 + 52) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_54;
  }

  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(a1 + sub_10000AE14(v1 - 80) = v3;
    *(double *)(a1 + 24) = result;
    uint64_t v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + sub_10000AE14(v1 - 80) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  if ((v2 & 0x20) != 0)
  {
    double result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 104) = v3;
    *(double *)(a1 + 48) = result;
    uint64_t v2 = *(_WORD *)(a2 + 104);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 56) = result;
  uint64_t v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  if ((v2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_DWORD *)(result + 112) = v3;
    *(void *)(result + 8) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 64) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  if ((v2 & 0x80) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 52);
    v3 |= 0x80u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + ++*(_DWORD *)(v3 + 52) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 44) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 24);
      *(_BYTE *)(result + 32) = v3 | 8;
      *(_DWORD *)(result + 24) = v8;
      return result;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 16) = v7;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 40);
    v3 |= 0x20u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 40) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 32) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 40);
    v3 |= 0x40u;
    *(_WORD *)(a1 + ++*(_DWORD *)(v3 + 52) = v3;
    *(_DWORD *)(a1 + 40) = LODWORD(result);
    uint64_t v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(a1 + ++*(_DWORD *)(v3 + 52) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + 16) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(void *)(a2 + 24);
      *(_BYTE *)(result + 44) = v3 | 4;
      *(void *)(result + 24) = v8;
      return result;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 40) = v7;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v5 & 0x800) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 128);
    v6 |= 0x800u;
    *(_DWORD *)(a1 + 1++*(_DWORD *)(v3 + 52) = v6;
    *(_DWORD *)(a1 + 128) = v13;
    uint64_t v5 = *(_DWORD *)(a2 + 152);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  __int16 v14 = *(void *)(a2 + 88);
  v6 |= 0x10u;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(v3 + 52) = v6;
  *(void *)(a1 + 88) = v14;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    uint64_t v7 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(result + 32) = v3 | 8;
    *(_DWORD *)(result + 28) = v7;
    return result;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 36) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(void *)(a2 + 16);
      *(_BYTE *)(result + 40) = v3 | 2;
      *(void *)(result + 16) = v8;
      return result;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 40) = v3;
  *(void *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 0x100) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 72);
    v3 |= 0x100u;
    *(_WORD *)(result + 96) = v3;
    *(_DWORD *)(result + 72) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 96) = v3;
  *(void *)(result + 64) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    if ((*(_BYTE *)(a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }

  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

  if ((v6 & 0x40) != 0)
  {
    uint64_t v10 = *(void *)(a2 + 128);
    *(_WORD *)(a1 + 192) = v7 | 0x40;
    *(void *)(a1 + 128) = v10;
  }

  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }

  char v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 2) != 0)
  {
    __int16 v14 = *(void *)(a2 + 88);
    *(_WORD *)(a1 + 192) |= 2u;
    *(void *)(a1 + 88) = v14;
    char v11 = *(_WORD *)(a2 + 192);
    if ((v11 & 0x2000) == 0)
    {
LABEL_12:
      if ((v11 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_26;
    }
  }

  else if ((*(_WORD *)(a2 + 192) & 0x2000) == 0)
  {
    goto LABEL_12;
  }

  uint64_t v15 = *(_DWORD *)(a2 + 184);
  *(_WORD *)(a1 + 192) |= 0x2000u;
  *(_DWORD *)(a1 + 184) = v15;
  char v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 4) == 0)
  {
LABEL_13:
    if ((v11 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 20) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 24) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(void *)(a1 + 16) = v4;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return *(float *)&v4;
      }
      goto LABEL_12;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v4 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(void *)(a1 + 24) = v4;
  if ((*(_BYTE *)(a2 + 40) & 0x10) == 0) {
    return *(float *)&v4;
  }
LABEL_12:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = v3 | 0x10;
  *(_DWORD *)(a1 + 36) = v4;
  return *(float *)&v4;
}

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }

  return result;
}

  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 48);
  v6 |= 8u;
  *(_BYTE *)(a1 + 56) = v6;
  *(_DWORD *)(a1 + 48) = v12;
  if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
LABEL_8:
    uint64_t v9 = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 56) = v6 | 0x10;
    *(_DWORD *)(a1 + ++*(_DWORD *)(v3 + 52) = v9;
  }

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 32) = v3 | 2;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 28) = v7;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 32) = v3 | 2;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 28) = v7;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    if ((*(_BYTE *)(a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }

  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = v3 | 4;
    *(double *)(a1 + 24) = result;
  }

  return result;
}

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 16) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 20) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    uint64_t v9 = *(_BYTE *)(a2 + 29);
    *(_BYTE *)(result + 32) = v3 | 0x20;
    *(_BYTE *)(result + 29) = v9;
    return result;
  }

  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    uint64_t v7 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 8;
    *(_DWORD *)(result + 24) = v7;
    return result;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 20) = v6;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 32);
      *(_BYTE *)(result + 36) = v3 | 0x10;
      *(_DWORD *)(result + 32) = v8;
      return result;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 36) = v3;
  *(void *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 36) & 0x10) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v5 & 8) == 0)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  char v11 = *(_DWORD *)(a2 + 220);
  v6 |= 8u;
  *(_BYTE *)(a1 + sub_10000AE14(v45 - 224) = v6;
  *(_DWORD *)(a1 + 220) = v11;
  if ((*(_BYTE *)(a2 + 224) & 4) != 0)
  {
LABEL_8:
    uint64_t v9 = *(_DWORD *)(a2 + 216);
    *(_BYTE *)(a1 + sub_10000AE14(v45 - 224) = v6 | 4;
    *(_DWORD *)(a1 + 216) = v9;
  }

  if ((v2 & 0x200) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 52);
    v3 |= 0x200u;
    *(_WORD *)(result + 56) = v3;
    *(_DWORD *)(result + ++*(_DWORD *)(v3 + 52) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 56) = v3;
  *(_DWORD *)(result + 32) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }

  uint64_t v9 = *(uint64_t **)(a2 + 56);
  uint64_t v10 = *(uint64_t **)(a2 + 64);
  while (v9 != v10)
    sub_10109AEA4(v5, *v9++);
  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  char v11 = *(_BYTE *)(a2 + 104);
  if ((v11 & 1) != 0)
  {
    __int16 v14 = *(_DWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 104) |= 1u;
    *(_DWORD *)(a1 + sub_10000AE14(v1 - 80) = v14;
    char v11 = *(_BYTE *)(a2 + 104);
    if ((v11 & 0x10) == 0)
    {
LABEL_13:
      if ((v11 & 2) == 0) {
        goto LABEL_14;
      }
LABEL_19:
      __int16 v16 = *(_DWORD *)(a2 + 84);
      *(_BYTE *)(a1 + 104) |= 2u;
      *(_DWORD *)(a1 + 84) = v16;
      if ((*(_BYTE *)(a2 + 104) & 0x20) == 0) {
        return a1;
      }
      goto LABEL_15;
    }
  }

  else if ((*(_BYTE *)(a2 + 104) & 0x10) == 0)
  {
    goto LABEL_13;
  }

  uint64_t v15 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) |= 0x10u;
  *(_DWORD *)(a1 + 96) = v15;
  char v11 = *(_BYTE *)(a2 + 104);
  if ((v11 & 2) != 0) {
    goto LABEL_19;
  }
LABEL_14:
  if ((v11 & 0x20) != 0)
  {
LABEL_15:
    uint64_t v12 = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 104) |= 0x20u;
    *(_DWORD *)(a1 + 100) = v12;
  }

  return a1;
}

  if (v2 < 0)
  {
    uint64_t v6 = *(_BYTE *)(a2 + 40);
    v3 |= 0x80u;
    *(_BYTE *)(result + 44) = v3;
    *(_BYTE *)(result + 40) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 28) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 16) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 20) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    uint64_t v9 = *(_BYTE *)(a2 + 29);
    *(_BYTE *)(result + 32) = v3 | 0x20;
    *(_BYTE *)(result + 29) = v9;
    return result;
  }

  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    uint64_t v7 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 8;
    *(_DWORD *)(result + 24) = v7;
    return result;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 20) = v6;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v4 & 8) != 0)
  {
    uint64_t v19 = *(_DWORD *)(a2 + 48);
    v5 |= 8u;
    *(_BYTE *)(a1 + 60) = v5;
    *(_DWORD *)(a1 + 48) = v19;
    uint64_t v4 = *(_BYTE *)(a2 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_8:
      if ((v4 & 1) == 0) {
        goto LABEL_9;
      }
LABEL_20:
      id v21 = *(void *)(a2 + 16);
      v5 |= 1u;
      *(_BYTE *)(a1 + 60) = v5;
      *(void *)(a1 + 16) = v21;
      if ((*(_BYTE *)(a2 + 60) & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v20 = *(void *)(a2 + 24);
  v5 |= 2u;
  *(_BYTE *)(a1 + 60) = v5;
  *(void *)(a1 + 24) = v20;
  uint64_t v4 = *(_BYTE *)(a2 + 60);
  if ((v4 & 1) != 0) {
    goto LABEL_20;
  }
LABEL_9:
  if ((v4 & 0x20) != 0)
  {
LABEL_10:
    unint64_t v8 = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 60) = v5 | 0x20;
    *(_BYTE *)(a1 + 56) = v8;
  }

  if ((v4 & 8) == 0)
  {
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 48);
  v5 |= 8u;
  *(_BYTE *)(a1 + ++*(_DWORD *)(v3 + 52) = v5;
  *(_DWORD *)(a1 + 48) = v10;
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
LABEL_8:
    unint64_t v8 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + ++*(_DWORD *)(v3 + 52) = v5 | 2;
    *(_DWORD *)(a1 + 40) = v8;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = v3 | 2;
    *(_DWORD *)(result + 16) = v6;
  }

  return result;
}

  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 40) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }

  double result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 28);
    v3 |= 8u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 28) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 24) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 44) = v3;
    *(double *)(a1 + 16) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        return result;
      }
LABEL_12:
      double result = *(double *)(a2 + 8);
      *(_BYTE *)(a1 + 44) = v3 | 1;
      *(double *)(a1 + 8) = result;
      return result;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v5 = *(_BYTE *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_BYTE *)(a1 + 40) = v5;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_BYTE *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 4;
    *(_BYTE *)(result + 24) = v6;
  }

  return result;
}

  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    uint64_t v7 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 28) = v3 | 2;
    *(_DWORD *)(result + 16) = v7;
    return result;
  }

  uint64_t v6 = *(_BYTE *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(result + 28) = v3;
  *(_BYTE *)(result + 24) = v6;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 40);
    v3 |= 0x40u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 40) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 28) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 32) = v3 | 2;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 20) = v7;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_BYTE *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_BYTE *)(a1 + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      double result = *(float *)(a2 + 16);
      *(_BYTE *)(a1 + 28) = v3 | 2;
      *(float *)(a1 + 16) = result;
      return result;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 28) = v3;
  *(float *)(a1 + 20) = result;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_BYTE *)(a2 + 25);
    v3 |= 0x10u;
    *(_BYTE *)(result + 28) = v3;
    *(_BYTE *)(result + 25) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 20) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_14:
    uint64_t v9 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 28) = v3 | 2;
    *(_DWORD *)(result + 16) = v9;
    return result;
  }

  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 32) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        return result;
      }
LABEL_12:
      double result = *(double *)(a2 + 8);
      *(_BYTE *)(a1 + 48) = v3 | 1;
      *(double *)(a1 + 8) = result;
      return result;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 48) = v3;
  *(double *)(a1 + 24) = result;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    uint64_t v7 = *(_BYTE *)(a2 + 18);
    *(_BYTE *)(result + 20) = v3 | 8;
    *(_BYTE *)(result + 18) = v7;
    return result;
  }

  uint64_t v6 = *(_BYTE *)(a2 + 17);
  v3 |= 4u;
  *(_BYTE *)(result + 20) = v3;
  *(_BYTE *)(result + 17) = v6;
  if ((*(_BYTE *)(a2 + 20) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x1000) != 0)
  {
    double result = *(float *)(a2 + 56);
    v3 |= 0x1000u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 56) = result;
    uint64_t v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }

  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 52);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + ++*(_DWORD *)(v3 + 52) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 40);
      *(_BYTE *)(result + 44) = v3 | 0x10;
      *(_DWORD *)(result + 40) = v8;
      return result;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 44) = v3;
  *(void *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }

  return result;
}

  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 28) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }

  return result;
}

  if ((v2 & 0x10000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 84);
    v3 |= 0x10000uLL;
    *(void *)(a1 + 164) = v3;
    *(_DWORD *)(a1 + 84) = v4;
    uint64_t v2 = *(void *)(a2 + 164);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_45;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v5 = *(_DWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 32) = v5;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }

  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    uint64_t v7 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(result + 36) = v3 | 8;
    *(_DWORD *)(result + 32) = v7;
    return result;
  }

  uint64_t v6 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 36) = v3;
  *(void *)(result + 16) = v6;
  if ((*(_BYTE *)(a2 + 36) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v4 & 1) != 0)
  {
    uint64_t v12 = *(_DWORD *)(a2 + 32);
    v5 |= 1u;
    *(_BYTE *)(a1 + 64) = v5;
    *(_DWORD *)(a1 + 32) = v12;
    uint64_t v4 = *(_BYTE *)(a2 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      if ((v4 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  else if ((v4 & 4) == 0)
  {
    goto LABEL_8;
  }

  int v13 = *(_DWORD *)(a2 + 40);
  v5 |= 4u;
  *(_BYTE *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 40) = v13;
  uint64_t v4 = *(_BYTE *)(a2 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 20) = v3 | 2;
    *(_DWORD *)(result + 12) = v6;
  }

  return result;
}

  if ((v2 & 0x2000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 64);
    v3 |= 0x2000u;
    *(_WORD *)(a1 + 68) = v3;
    *(_DWORD *)(a1 + 64) = v4;
    uint64_t v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_DWORD *)(a1 + sub_10000AE14(v1 - 80) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    uint64_t v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x2000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + sub_10000AE14(v1 - 80) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_DWORD *)(a1 + sub_10000AE14(v1 - 80) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    uint64_t v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + sub_10000AE14(v1 - 80) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  if ((v5 & 0x4000) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 116);
    v6 |= 0x4000u;
    *(_DWORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 116) = v13;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 4) == 0)
    {
LABEL_8:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_8;
  }

  __int16 v14 = *(_DWORD *)(a2 + 68);
  v6 |= 4u;
  *(_DWORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 68) = v14;
  if ((*(_DWORD *)(a2 + 124) & 0x20) != 0)
  {
LABEL_9:
    uint64_t v9 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 124) = v6 | 0x20;
    *(_DWORD *)(a1 + sub_10000AE14(v1 - 80) = v9;
  }

  if ((v2 & 8) == 0)
  {
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_10:
    uint64_t v7 = *(_BYTE *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 4;
    *(_BYTE *)(result + 24) = v7;
    return result;
  }

  uint64_t v6 = *(_BYTE *)(a2 + 25);
  v3 |= 8u;
  *(_BYTE *)(result + 28) = v3;
  *(_BYTE *)(result + 25) = v6;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x10) != 0)
  {
    double result = *(float *)(a2 + 28);
    v3 |= 0x10u;
    *(_DWORD *)(a1 + 92) = v3;
    *(float *)(a1 + 28) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
  }

  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 72) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 124) = v3;
    *(void *)(a1 + 24) = v4;
    uint64_t v2 = *(_DWORD *)(a2 + 124);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v4 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 124) = v3;
  *(void *)(a1 + 32) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }

  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 28) = v3 | 4;
    *(_DWORD *)(a1 + 24) = v4;
  }

  return *(float *)&v4;
}

  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 96);
    v3 |= 0x200000u;
    *(_DWORD *)(a1 + 120) = v3;
    *(_DWORD *)(a1 + 96) = v4;
    uint64_t v2 = *(_DWORD *)(a2 + 120);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_34;
    }
  }

  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x800000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = v3 | 2;
    *(_DWORD *)(result + 16) = v6;
  }

  return result;
}

  if ((v2 & 0x20000000) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 144);
    v3 |= 0x20000000uLL;
    *(void *)(result + 164) = v3;
    *(_DWORD *)(result + 144) = v6;
    uint64_t v2 = *(void *)(a2 + 164);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_41;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 48) = v7;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 28) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 16) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x10u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 32) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 36) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(result + 92) = v3;
    *(void *)(result + 24) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }

  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 76) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(result + 96) = v3;
    *(void *)(result + 24) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 96);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 96) = v3;
  *(void *)(result + 32) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  double result = (uint64_t)(a1 + 2);
  char v11 = (unint64_t)a1[2];
  uint64_t v12 = a1[1];
  if ((unint64_t)v12 >= v11)
  {
    __int16 v14 = (v12 - *a1) >> 3;
    uint64_t v15 = v11 - (void)*a1;
    __int16 v16 = v15 >> 2;
    else {
      uint64_t v17 = v16;
    }
    uint64_t v29 = a1 + 2;
    if (v17) {
      __int16 v18 = (char *)sub_1000071BC(result, v17);
    }
    else {
      __int16 v18 = 0LL;
    }
    uint64_t v19 = &v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    uint64_t v28 = v20;
    *(void *)uint64_t v19 = v5;
    int v13 = v19 + 8;
    v27.i64[1] = (uint64_t)(v19 + 8);
    uint64_t v22 = *a1;
    id v21 = a1[1];
    if (v21 == *a1)
    {
      uint64_t v24 = vdupq_n_s64((unint64_t)v21);
    }

    else
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *(void *)id v21 = 0LL;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }

      while (v21 != v22);
      uint64_t v24 = *(int64x2_t *)a1;
      int v13 = (char *)v27.i64[1];
      uint64_t v20 = v28;
    }

    *a1 = v19;
    a1[1] = v13;
    uint64_t v27 = v24;
    uint64_t v25 = a1[2];
    a1[2] = v20;
    uint64_t v28 = v25;
    uint64_t v26 = v24.i64[0];
    double result = sub_1004CAE9C((uint64_t)&v26);
  }

  else
  {
    *(void *)uint64_t v12 = v5;
    int v13 = v12 + 8;
  }

  a1[1] = v13;
  return result;
}

  if ((v2 & 0x10000) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 80);
    v3 |= 0x10000u;
    *(_DWORD *)(a1 + 136) = v3;
    *(_DWORD *)(a1 + sub_10000AE14(v1 - 80) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_38;
    }
  }

  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }

  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = operator new(0x90uLL);
    sub_10111A46C((uint64_t)v7, v6);
    *(void *)(a1 + 24) = v8;
  }

  return a1;
}

  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_DWORD *)(a1 + 208) = v3;
    *(double *)(a1 + 8) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 208);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_32;
    }
  }

  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 192) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = v3 | 2;
    *(_DWORD *)(result + 16) = v6;
  }

  return result;
}

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(result + ++*(_DWORD *)(v3 + 52) = v3;
    *(_DWORD *)(result + 40) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + ++*(_DWORD *)(v3 + 52) = v3;
  *(void *)(result + 32) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    v3 |= 0x40uLL;
    *(void *)(result + 212) = v3;
    *(void *)(result + 56) = v6;
    uint64_t v2 = *(void *)(a2 + 212);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_47;
    }
  }

  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 120);
  v3 |= 0x10000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 120) = v7;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }

  if ((v2 & 4) != 0)
  {
    double result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v3 | 4;
    *(float *)(a1 + 16) = result;
  }

  return result;
}

  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    if ((*(_BYTE *)(a2 + 28) & 4) == 0) {
      return *(float *)&v4;
    }
  }

  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = v3 | 4;
  *(_DWORD *)(a1 + 20) = v4;
  return *(float *)&v4;
}

  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    if ((*(_BYTE *)(a2 + 28) & 4) == 0) {
      return *(float *)&v4;
    }
  }

  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = v3 | 4;
  *(_DWORD *)(a1 + 20) = v4;
  return *(float *)&v4;
}

  if ((v2 & 0x200) != 0)
  {
    uint64_t v6 = *(_BYTE *)(a2 + 55);
    v3 |= 0x200u;
    *(_WORD *)(a1 + 60) = v3;
    *(_BYTE *)(a1 + 55) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 56);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 56) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }

  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 24) = result;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 24) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
  }

  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 88) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 24) = result;
    uint64_t v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 64) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }

  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 248) = v3;
    *(double *)(a1 + 24) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 248);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_37;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }

  if ((v2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + ++*(_DWORD *)(v3 + 52) = v3;
    *(void *)(result + 8) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_BYTE *)(result + ++*(_DWORD *)(v3 + 52) = v3;
  *(_DWORD *)(result + 48) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 40) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }

  double result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 216) = v3;
    *(double *)(a1 + 16) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 216);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 8) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 16) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *(double *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = v3 | 4;
      *(double *)(a1 + 24) = result;
      return result;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v6;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v5 & 0x10) != 0)
  {
    __int16 v14 = *(void *)(a2 + 48);
    v6 |= 0x10u;
    *(_DWORD *)(a1 + 1++*(_DWORD *)(v3 + 52) = v6;
    *(void *)(a1 + 48) = v14;
    uint64_t v5 = *(_DWORD *)(a2 + 152);
    if ((v5 & 0x100) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }

  else if ((v5 & 0x100) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v15 = *(_DWORD *)(a2 + 96);
  v6 |= 0x100u;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(v3 + 52) = v6;
  *(_DWORD *)(a1 + 96) = v15;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 72) = v3;
    *(void *)(result + 24) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 32) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 0x20) != 0)
  {
    double result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 96) = v3;
    *(double *)(a1 + 48) = result;
    uint64_t v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 16) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *(double *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = v3 | 4;
      *(double *)(a1 + 24) = result;
      return result;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v6;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(_WORD *)(result + 92) = v3;
    *(void *)(result + 32) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 40) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  if ((v2 & 4) != 0)
  {
    double result = *(float *)(a2 + 20);
    v3 |= 4u;
    *(_WORD *)(a1 + 56) = v3;
    *(float *)(a1 + 20) = result;
    uint64_t v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 28) = result;
  uint64_t v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 32) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_BYTE *)(result + 44) = v3;
    *(_DWORD *)(result + 36) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 32) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v3 & 0x400) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 56);
    v4 |= 0x400u;
    *(_WORD *)(a1 + 64) = v4;
    *(_DWORD *)(a1 + 56) = v6;
    uint64_t v3 = *(_WORD *)(a2 + 64);
    if ((v3 & 4) == 0)
    {
LABEL_8:
      if ((v3 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  else if ((v3 & 4) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 24);
  v4 |= 4u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 24) = v7;
  uint64_t v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x10) == 0)
  {
LABEL_9:
    if ((v3 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  if ((v5 & 0x80) == 0)
  {
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  int v13 = *(_DWORD *)(a2 + 80);
  v6 |= 0x80u;
  *(_WORD *)(a1 + 96) = v6;
  *(_DWORD *)(a1 + sub_10000AE14(v1 - 80) = v13;
  if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
LABEL_8:
    uint64_t v9 = *(_DWORD *)(a2 + 84);
    *(_WORD *)(a1 + 96) = v6 | 0x100;
    *(_DWORD *)(a1 + 84) = v9;
  }

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 16) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v2 & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 56) = v3;
    *(void *)(a1 + 8) = v5;
    uint64_t v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v6 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 56) = v3;
  *(void *)(a1 + 16) = v6;
  uint64_t v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    double result = *(double *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = v3 | 0x20;
    *(double *)(a1 + 48) = result;
    return result;
  }

  if ((v10 & 1) != 0)
  {
    uint64_t v19 = *(void *)(a2 + 296);
    v11 |= 1u;
    *(_BYTE *)(a1 + 340) = v11;
    *(void *)(a1 + 296) = v19;
    uint64_t v10 = *(_BYTE *)(a2 + 340);
    if ((v10 & 8) == 0)
    {
LABEL_8:
      if ((v10 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  else if ((v10 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v20 = *(void *)(a2 + 320);
  v11 |= 8u;
  *(_BYTE *)(a1 + 340) = v11;
  *(void *)(a1 + 320) = v20;
  if ((*(_BYTE *)(a2 + 340) & 2) != 0)
  {
LABEL_9:
    __int16 v14 = *(void *)(a2 + 304);
    *(_BYTE *)(a1 + 340) = v11 | 2;
    *(void *)(a1 + 304) = v14;
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 40);
    *(_WORD *)(a1 + 112) = v6 | 2;
    *(void *)(a1 + 40) = v9;
  }

  if (a1 != a2) {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  uint64_t v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 8) != 0)
  {
    int v13 = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 112) |= 8u;
    *(void *)(a1 + 56) = v13;
    uint64_t v10 = *(_WORD *)(a2 + 112);
    if ((v10 & 0x10) == 0)
    {
LABEL_12:
      if ((v10 & 0x20) == 0) {
        goto LABEL_13;
      }
      goto LABEL_21;
    }
  }

  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_12;
  }

  __int16 v14 = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 112) |= 0x10u;
  *(void *)(a1 + 64) = v14;
  uint64_t v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 0x20) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }

  if ((v2 & 0x200) != 0)
  {
    uint64_t v5 = *(_DWORD *)(a2 + 76);
    v3 |= 0x200u;
    *(_WORD *)(a1 + 88) = v3;
    *(_DWORD *)(a1 + 76) = v5;
    uint64_t v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  if ((v2 & 1) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }

  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x100) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 68);
    v3 |= 0x100u;
    *(_WORD *)(result + 72) = v3;
    *(_DWORD *)(result + 68) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 8) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(_BYTE *)(a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(result + 20) = v3;
    *(_BYTE *)(result + 12) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 16);
  v3 |= 0x20u;
  *(_BYTE *)(result + 20) = v3;
  *(_BYTE *)(result + 16) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_14:
    uint64_t v9 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v3 | 1;
    *(_DWORD *)(result + 8) = v9;
    return result;
  }

  if ((v2 & 0x200) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 52);
    v3 |= 0x200u;
    *(_WORD *)(a1 + 60) = v3;
    *(_DWORD *)(a1 + ++*(_DWORD *)(v3 + 52) = LODWORD(result);
    uint64_t v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 0x8000) != 0)
  {
    double result = *(float *)(a2 + 72);
    v3 |= 0x8000u;
    *(_DWORD *)(a1 + 116) = v3;
    *(float *)(a1 + 72) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }

  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 76) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  if ((v2 & 0x10) != 0)
  {
    double result = *(float *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 28) = result;
    uint64_t v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_DWORD *)(result + 84) = v3;
    *(_DWORD *)(result + 20) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }

  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 64) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  if ((v5 & 4) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 48);
    v6 |= 4u;
    *(_WORD *)(a1 + 76) = v6;
    *(_DWORD *)(a1 + 48) = v13;
    uint64_t v5 = *(_WORD *)(a2 + 76);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  __int16 v14 = *(_DWORD *)(a2 + 56);
  v6 |= 0x10u;
  *(_WORD *)(a1 + 76) = v6;
  *(_DWORD *)(a1 + 56) = v14;
  if ((*(_WORD *)(a2 + 76) & 8) != 0)
  {
LABEL_9:
    uint64_t v9 = *(_DWORD *)(a2 + 52);
    *(_WORD *)(a1 + 76) = v6 | 8;
    *(_DWORD *)(a1 + ++*(_DWORD *)(v3 + 52) = v9;
  }

  if ((v5 & 8) != 0)
  {
    uint64_t v12 = *(void *)(a2 + 80);
    v6 |= 8u;
    *(_BYTE *)(a1 + 100) = v6;
    *(void *)(a1 + sub_10000AE14(v1 - 80) = v12;
    uint64_t v5 = *(_BYTE *)(a2 + 100);
    if ((v5 & 1) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  else if ((v5 & 1) == 0)
  {
    goto LABEL_8;
  }

  int v13 = *(void *)(a2 + 56);
  v6 |= 1u;
  *(_BYTE *)(a1 + 100) = v6;
  *(void *)(a1 + 56) = v13;
  if ((*(_BYTE *)(a2 + 100) & 2) != 0)
  {
LABEL_9:
    uint64_t v9 = *(void *)(a2 + 64);
    *(_BYTE *)(a1 + 100) = v6 | 2;
    *(void *)(a1 + 64) = v9;
  }

  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 56);
  v6 |= 0x10u;
  *(_BYTE *)(a1 + 60) = v6;
  *(_DWORD *)(a1 + 56) = v12;
  if ((*(_BYTE *)(a2 + 60) & 8) != 0)
  {
LABEL_8:
    uint64_t v9 = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 60) = v6 | 8;
    *(_DWORD *)(a1 + ++*(_DWORD *)(v3 + 52) = v9;
  }

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 36) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 32) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_14:
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 44) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }

  if ((v2 & 0x200) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 68);
    v3 |= 0x200u;
    *(_DWORD *)(result + 84) = v3;
    *(_DWORD *)(result + 68) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }

  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 72);
  v3 |= 0x400u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 72) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 32) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }

  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 36) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  if ((v5 & 0x10000) != 0)
  {
    uint64_t v47 = *(_DWORD *)(a2 + 220);
    v6 |= 0x10000u;
    *(_DWORD *)(a1 + 244) = v6;
    *(_DWORD *)(a1 + 220) = v47;
    uint64_t v5 = *(_DWORD *)(a2 + 244);
    if ((v5 & 0x8000) == 0)
    {
LABEL_8:
      if ((v5 & 0x40000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_62;
    }
  }

  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v48 = *(_DWORD *)(a2 + 216);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_DWORD *)(a1 + 216) = v48;
  uint64_t v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_63;
  }

  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 28) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }

  return result;
}

  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 28) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }

  return result;
}

  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = operator new(0x48uLL);
    unint64_t v8 = sub_101189684((uint64_t)v7, v6);
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
  }

  return a1;
}

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x10u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 32) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 28) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    uint64_t v7 = *(_BYTE *)(a2 + 28);
    *(_BYTE *)(result + 32) = v3 | 8;
    *(_BYTE *)(result + 28) = v7;
    return result;
  }

  uint64_t v6 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 32) = v3;
  *(void *)(result + 16) = v6;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 64) = v3;
    *(void *)(result + 16) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 64) = v3;
  *(void *)(result + 32) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 32) = v3 | 2;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 32) = v3;
  *(void *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }

  return result;
}

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }

  return result;
}

  if ((v2 & 0x400) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 56);
    v3 |= 0x400u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 56) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 64) = v3;
  *(void *)(result + 16) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(result + 100) = v3;
    *(void *)(result + 56) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 64) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  if ((v2 & 0x10) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 28) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 32) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_14:
    uint64_t v9 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 36) = v3 | 2;
    *(_DWORD *)(result + 16) = v9;
    return result;
  }

  if ((v2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + 8) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(void *)(result + 32) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_BYTE *)(a2 + 11);
    v3 |= 8u;
    *(_WORD *)(result + 20) = v3;
    *(_BYTE *)(result + 11) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 13);
  v3 |= 0x20u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 13) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  if ((v2 & 8) != 0)
  {
    double result = *(float *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(float *)(a1 + 20) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      double result = *(float *)(a2 + 12);
      *(_BYTE *)(a1 + 28) = v3 | 2;
      *(float *)(a1 + 12) = result;
      return result;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v5 = *(_DWORD *)(a2 + 24);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 28) = v3;
  *(_DWORD *)(a1 + 24) = v5;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 0x200000) != 0)
  {
    uint64_t v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x200000uLL;
    *(void *)(a1 + 184) = v3;
    *(_DWORD *)(a1 + 104) = v5;
    uint64_t v2 = *(void *)(a2 + 184);
    if ((v2 & 0x1000000000LL) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000000000LL) == 0) {
        goto LABEL_9;
      }
      goto LABEL_52;
    }
  }

  else if ((v2 & 0x1000000000LL) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 164);
  v3 |= 0x1000000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 164) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x100000000000LL) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }

  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(result + 116) = v3;
    *(_DWORD *)(result + 48) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_34;
    }
  }

  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 68) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_WORD *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 36);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 34);
  v3 |= 0x80u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 34) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = operator new(0x18uLL);
    *(void *)uint64_t v7 = &off_1018A00D8;
    void v7[5] = 0;
    unint64_t v8 = *(_BYTE *)(v6 + 20);
    if ((v8 & 2) != 0)
    {
      uint64_t v10 = *(_DWORD *)(v6 + 16);
      *((_BYTE *)v7 + 20) = 2;
      _DWORD v7[4] = v10;
      uint64_t v9 = 3;
      if ((v8 & 1) == 0)
      {
LABEL_12:
        *(void *)(a1 + 8) = v7;
        return a1;
      }
    }

    else
    {
      uint64_t v9 = 1;
      if ((*(_BYTE *)(v6 + 20) & 1) == 0) {
        goto LABEL_12;
      }
    }

    char v11 = *(void *)(v6 + 8);
    *((_BYTE *)v7 + 20) = v9;
    *((void *)v7 + 1) = v11;
    goto LABEL_12;
  }

  return a1;
}

  if ((v4 & 0x80) != 0)
  {
    uint64_t v17 = *(void *)(a2 + 64);
    v5 |= 0x80u;
    *(_DWORD *)(a1 + 1sub_10000AE14(v1 - 80) = v5;
    *(void *)(a1 + 64) = v17;
    uint64_t v4 = *(_DWORD *)(a2 + 180);
    if ((v4 & 0x200) == 0)
    {
LABEL_8:
      if ((v4 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_40;
    }
  }

  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_8;
  }

  __int16 v18 = *(void *)(a2 + 80);
  v5 |= 0x200u;
  *(_DWORD *)(a1 + 1sub_10000AE14(v1 - 80) = v5;
  *(void *)(a1 + sub_10000AE14(v1 - 80) = v18;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(result + 24) = v3 | 4;
    *(_DWORD *)(result + 20) = v6;
  }

  return result;
}

  if ((v2 & 0x200) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 80);
    v3 |= 0x200u;
    *(_DWORD *)(result + 220) = v3;
    *(void *)(result + sub_10000AE14(v1 - 80) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 220);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
  }

  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 136) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 92) = v3;
    *(void *)(result + 24) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 8) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  if ((v4 & 0x10000) != 0)
  {
    __int16 v16 = *(_DWORD *)(a2 + 104);
    v5 |= 0x10000uLL;
    *(void *)(a1 + 192) = v5;
    *(_DWORD *)(a1 + 104) = v16;
    uint64_t v4 = *(void *)(a2 + 192);
    if ((v4 & 0x20000) == 0)
    {
LABEL_8:
      if ((v4 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_50;
    }
  }

  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v17 = *(_DWORD *)(a2 + 108);
  v5 |= 0x20000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 108) = v17;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }

  if ((v5 & 4) != 0)
  {
    uint64_t v9 = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 76) = v6 | 4;
    *(_DWORD *)(a1 + 72) = v9;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  return a1;
}

  if ((v2 & 0x40) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 36) = v4;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v2 & 0x400) != 0)
  {
    uint64_t v6 = *(_BYTE *)(a2 + 65);
    v3 |= 0x400u;
    *(_WORD *)(result + 68) = v3;
    *(_BYTE *)(result + 65) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 16) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 100) = v3;
    *(void *)(result + 8) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 24) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 68) = v3;
    *(void *)(result + 16) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 8) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }

  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    unint64_t v8 = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(void *)(a1 + 40) = v8;
  }

  return a1;
}

  if ((v2 & 0x100000) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 96);
    v3 |= 0x100000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(_DWORD *)(a1 + 96) = LODWORD(result);
    uint64_t v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_30;
    }
  }

  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 92);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 92) = LODWORD(result);
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }

  if ((v2 & 0x400) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 56);
    v3 |= 0x400u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 56) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    unint64_t v8 = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(void *)(a1 + 40) = v8;
  }

  return a1;
}

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    unint64_t v8 = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(void *)(a1 + 40) = v8;
  }

  return a1;
}

  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 40);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = LODWORD(result);
    uint64_t v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  uint64_t v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  if ((v3 & 0x10) != 0)
  {
    int v13 = *(void *)(a2 + 40);
    v4 |= 0x10u;
    *(_BYTE *)(a1 + 64) = v4;
    *(void *)(a1 + 40) = v13;
    uint64_t v3 = *(_BYTE *)(a2 + 64);
    if ((v3 & 4) == 0)
    {
LABEL_8:
      if ((v3 & 1) == 0) {
        goto LABEL_9;
      }
LABEL_17:
      uint64_t v15 = *(void *)(a2 + 8);
      v4 |= 1u;
      *(_BYTE *)(a1 + 64) = v4;
      *(void *)(a1 + 8) = v15;
      if ((*(_BYTE *)(a2 + 64) & 2) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }

  else if ((v3 & 4) == 0)
  {
    goto LABEL_8;
  }

  __int16 v14 = *(void *)(a2 + 24);
  v4 |= 4u;
  *(_BYTE *)(a1 + 64) = v4;
  *(void *)(a1 + 24) = v14;
  uint64_t v3 = *(_BYTE *)(a2 + 64);
  if ((v3 & 1) != 0) {
    goto LABEL_17;
  }
LABEL_9:
  if ((v3 & 2) != 0)
  {
LABEL_10:
    uint64_t v7 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 64) = v4 | 2;
    *(void *)(a1 + 16) = v7;
  }

  if ((v5 & 0x20) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 104);
    v6 |= 0x20u;
    *(_WORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 104) = v13;
    uint64_t v5 = *(_WORD *)(a2 + 124);
    if ((v5 & 0x200) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_8;
  }

  __int16 v14 = *(_DWORD *)(a2 + 120);
  v6 |= 0x200u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 120) = v14;
  uint64_t v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 56) = v3;
    *(void *)(result + 16) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 56) = v3;
  *(void *)(result + 8) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 116) = v3;
    *(void *)(result + 24) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 116);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }

  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 56) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    uint64_t v7 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(result + 32) = v3 | 8;
    *(_DWORD *)(result + 28) = v7;
    return result;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x10) != 0)
  {
    double result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 56) = v3;
    *(double *)(a1 + 40) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 56) = v3;
  *(double *)(a1 + 16) = result;
  uint64_t v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_14:
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 56) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }

  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 64) = v3;
    *(void *)(result + 32) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }

  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_BYTE *)(result + 64) = v3;
  *(_DWORD *)(result + 56) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(result + 76) = v3;
    *(void *)(result + 56) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 64) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 32) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x80) != 0)
  {
    double result = *(double *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 64) = result;
    uint64_t v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 72) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 4;
    *(_DWORD *)(result + 24) = v6;
  }

  return result;
}

  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + 16) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 32) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    uint64_t v9 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 44) = v3 | 0x20;
    *(_DWORD *)(result + 40) = v9;
    return result;
  }

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 84) = v3;
    *(double *)(a1 + 16) = result;
    uint64_t v2 = *(_WORD *)(a2 + 84);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 24) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 32) = v7;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 92) = v3;
    *(double *)(a1 + 16) = result;
    uint64_t v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    uint64_t v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 60) = v3;
    *(void *)(result + 48) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 60) = v3;
  *(void *)(result + 32) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  if ((v2 & 0x10) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_WORD *)(a1 + sub_10000AE14(v1 - 80) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    uint64_t v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }

  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_WORD *)(a1 + sub_10000AE14(v1 - 80) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(a1 + 24) = v3 | 4;
    *(_DWORD *)(a1 + 20) = v4;
  }

  return *(float *)&v4;
}

  if ((v2 & 8) != 0)
  {
    double result = *(float *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(a1 + 32) = v3;
    *(float *)(a1 + 20) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 32) = v3;
  *(float *)(a1 + 8) = result;
  uint64_t v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_14:
    double result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 4;
    *(float *)(a1 + 16) = result;
    return result;
  }

  if ((v2 & 0x400) != 0)
  {
    double result = *(float *)(a2 + 52);
    v3 |= 0x400u;
    *(_DWORD *)(a1 + 88) = v3;
    *(float *)(a1 + ++*(_DWORD *)(v3 + 52) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 88);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }

  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }

  double result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 60) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  char v11 = *(_DWORD *)(a2 + 64);
  v6 |= 4u;
  *(_BYTE *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 64) = v11;
  if ((*(_BYTE *)(a2 + 72) & 8) != 0)
  {
LABEL_8:
    uint64_t v9 = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = v6 | 8;
    *(_DWORD *)(a1 + 68) = v9;
  }

  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 32) = v6;
    uint64_t v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 28) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }

  if ((v2 & 0x1000000) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 108);
    v3 |= 0x1000000uLL;
    *(void *)(result + 188) = v3;
    *(_DWORD *)(result + 108) = v6;
    uint64_t v2 = *(void *)(a2 + 188);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_57;
    }
  }

  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 112);
  v3 |= 0x2000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 112) = v7;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }

  if ((v2 & 0x80) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x80u;
    *(_DWORD *)(result + 128) = v3;
    *(_DWORD *)(result + 48) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
  }

  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 96) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }

  if ((v5 & 0x1000) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 112);
    v6 |= 0x1000u;
    *(_DWORD *)(a1 + 164) = v6;
    *(_DWORD *)(a1 + 112) = v13;
    uint64_t v5 = *(_DWORD *)(a2 + 164);
    if ((v5 & 0x2000) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_43;
    }
  }

  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_8;
  }

  __int16 v14 = *(_DWORD *)(a2 + 116);
  v6 |= 0x2000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 116) = v14;
  uint64_t v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }

  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    uint64_t v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }

  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 16);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 16) = v6;
    uint64_t v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v8 = *(_BYTE *)(a2 + 21);
      *(_BYTE *)(result + 24) = v3 | 0x10;
      *(_BYTE *)(result + 21) = v8;
      return result;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 24) = v3;
  *(_DWORD *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 24) & 0x10) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    if ((*(_BYTE *)(a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }

  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 64) = v3;
    *(double *)(a1 + 8) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 64) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  if ((v2 & 0x400) != 0)
  {
    double result = *(double *)(a2 + 88);
    v3 |= 0x400u;
    *(_WORD *)(a1 + 120) = v3;
    *(double *)(a1 + 88) = result;
    uint64_t v2 = *(_WORD *)(a2 + 120);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }

  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 96) = result;
  uint64_t v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  if ((v2 & 0x200000000LL) != 0)
  {
    uint64_t v5 = *(_BYTE *)(a2 + 220);
    v3 |= 0x200000000uLL;
    *(void *)(a1 + sub_10000AE14(v45 - 224) = v3;
    *(_BYTE *)(a1 + 220) = v5;
    uint64_t v2 = *(void *)(a2 + 224);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_42;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 16);
  v3 |= 2uLL;
  *(void *)(a1 + sub_10000AE14(v45 - 224) = v3;
  *(double *)(a1 + 16) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }

  if ((v2 & 0x100) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 72);
    v3 |= 0x100u;
    *(_DWORD *)(result + 128) = v3;
    *(void *)(result + 72) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x100000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }

  else if ((v2 & 0x100000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 124);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 124) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 8) = result;
    uint64_t v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *(double *)(a2 + 24);
      *(_BYTE *)(a1 + 48) = v3 | 4;
      *(double *)(a1 + 24) = result;
      return result;
    }
  }

  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 48) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 48) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

  if ((v2 & 0x40000) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 152);
    v3 |= 0x40000u;
    *(_DWORD *)(result + 188) = v3;
    *(void *)(result + 1++*(_DWORD *)(v3 + 52) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 188);
    if ((v2 & 0x8000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_35;
    }
  }

  else if ((v2 & 0x8000000) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 184);
  v3 |= 0x8000000u;
  *(_DWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 184) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }

  if ((v2 & 0x4000) != 0)
  {
    double result = *(double *)(a2 + 120);
    v3 |= 0x4000u;
    *(_DWORD *)(a1 + 136) = v3;
    *(double *)(a1 + 120) = result;
    uint64_t v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }

  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }

  double result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 88) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 40) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

  if ((v2 & 0x400) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 88);
    v3 |= 0x400u;
    *(_DWORD *)(result + 212) = v3;
    *(void *)(result + 88) = v6;
    uint64_t v2 = *(_DWORD *)(a2 + 212);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }

  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v7 = *(void *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 96) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  ++self->_sampleCount;
  sub_101125260(v29);
  -[CLWMBase makeSafeCFAbsoluteTime:](self, "makeSafeCFAbsoluteTime:", CFAbsoluteTimeGetCurrent());
  v31 |= 1u;
  v29[77] = v6;
  sub_10113A050(v29);
  sub_10116CB9C(v30);
  uint64_t v7 = v30;
  unint64_t v8 = v30[1];
  -[CLWMBase makeSafeCFAbsoluteTime:](self, "makeSafeCFAbsoluteTime:", a3->var0);
  *(_DWORD *)(v8 + 176) |= 0x800u;
  *(void *)(v8 + 96) = v9;
  uint64_t v10 = v7[1];
  -[CLWMBase makeSafeCFAbsoluteTime:](self, "makeSafeCFAbsoluteTime:", a3->var1);
  *(_DWORD *)(v10 + 176) |= 4u;
  *(void *)(v10 + 24) = v11;
  uint64_t v12 = v7[1];
  var2 = a3->var2;
  *(_DWORD *)(v12 + 176) |= 0x8000u;
  *(double *)(v12 + 128) = var2;
  __int16 v14 = v7[1];
  var3 = a3->var3;
  *(_DWORD *)(v14 + 176) |= 0x2000u;
  *(double *)(v14 + 112) = var3;
  __int16 v16 = v7[1];
  var4 = a3->var4;
  *(_DWORD *)(v16 + 176) |= 0x4000u;
  *(double *)(v16 + 120) = var4;
  __int16 v18 = v7[1];
  var7 = a3->var7;
  *(_DWORD *)(v18 + 176) |= 0x10000u;
  *(void *)(v18 + 136) = var7;
  uint64_t v20 = v7[1];
  var5 = a3->var5;
  *(_DWORD *)(v20 + 176) |= 0x20000u;
  *(void *)(v20 + 144) = var5;
  uint64_t v22 = v7[1];
  var18 = a3->var18;
  *(_DWORD *)(v22 + 176) |= 0x100u;
  *(double *)(v22 + 72) = var18;
  uint64_t v24 = v7[1];
  var14 = a3->var14;
  *(_DWORD *)(v24 + 176) |= 0x20u;
  *(double *)(v24 + 48) = var14;
  var15 = a3->var15;
  uint64_t v27 = v7[1];
  uint64_t v28 = 0LL;
  if (var15 > 0.0 && var15 != 1.79769313e308) {
    -[CLWMBase makeSafeCFAbsoluteTime:](self, "makeSafeCFAbsoluteTime:", var15);
  }
  *(_DWORD *)(v27 + 176) |= 0x80u;
  *(void *)(v27 + 64) = v28;
  sub_10111D6A8((uint64_t)self->_writer.__ptr_, (uint64_t)v29);
  sub_101127D00((PB::Base *)v29);
}

uint64_t sub_1001BC6EC(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1019A0AB8;
  if (!qword_1019A0AB8)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v2 = qword_1019A0AB8;
  }

  v1[1] = v2;
  uint64_t v3 = qword_1019A0AF8;
  if (!qword_1019A0AF8)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v3 = qword_1019A0AF8;
  }

  v1[2] = v3;
  uint64_t v4 = qword_1019A0B00;
  if (!qword_1019A0B00)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v4 = qword_1019A0B00;
  }

  v1[3] = v4;
  uint64_t v5 = qword_1019A0B08;
  if (!qword_1019A0B08)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v5 = qword_1019A0B08;
  }

  v1[4] = v5;
  uint64_t v6 = qword_1019A0B10;
  if (!qword_1019A0B10)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v6 = qword_1019A0B10;
  }

  _OWORD v1[5] = v6;
  uint64_t v7 = qword_1019A0B18;
  if (!qword_1019A0B18)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v7 = qword_1019A0B18;
  }

  v1[6] = v7;
  uint64_t v8 = qword_1019A0B20;
  if (!qword_1019A0B20)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v8 = qword_1019A0B20;
  }

  v1[7] = v8;
  uint64_t v9 = qword_1019A0B28;
  if (!qword_1019A0B28)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v9 = qword_1019A0B28;
  }

  v1[8] = v9;
  uint64_t v10 = qword_1019A0B30;
  if (!qword_1019A0B30)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v10 = qword_1019A0B30;
  }

  v1[9] = v10;
  uint64_t v11 = qword_1019A0B38;
  if (!qword_1019A0B38)
  {
    double result = sub_1001BBE2C(result);
    uint64_t v11 = qword_1019A0B38;
  }

  v1[10] = v11;
  return result;
}

void sub_1001BC7F8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v19,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenOutput.pb.cc",  447LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v19,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }

  LOBYTE(v5) = *(_BYTE *)(a2 + 60);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    *(_DWORD *)(a1 + 60) |= 1u;
    uint64_t v6 = *(char **)(a1 + 8);
    if (!v6)
    {
      uint64_t v6 = (char *)operator new(0x128uLL);
      *(void *)uint64_t v6 = off_1018272C8;
      *((void *)v6 + 17) = 0LL;
      *((void *)v6 + 18) = 0LL;
      *((_DWORD *)v6 + 38) = 0;
      *((void *)v6 + 27) = 0LL;
      *((void *)v6 + 28) = 0LL;
      *((_DWORD *)v6 + 58) = 0;
      *((void *)v6 + 30) = 0LL;
      *((void *)v6 + 31) = 0LL;
      *((_DWORD *)v6 + 64) = 0;
      *((void *)v6 + 33) = 0LL;
      *((void *)v6 + 34) = 0LL;
      *((_DWORD *)v6 + 70) = 0;
      *((void *)v6 + 36) = 0LL;
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 56) = 0u;
      *(_OWORD *)(v6 + 72) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
      *(_OWORD *)(v6 + 116) = 0u;
      *((_DWORD *)v6 + ++*(_DWORD *)(v3 + 52) = 0;
      *((_OWORD *)v6 + 11) = 0u;
      *((_OWORD *)v6 + 12) = 0u;
      *((_OWORD *)v6 + 10) = 0u;
      *(void *)(a1 + 8) = v6;
    }

    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A0AA8 + 8);
    }
    sub_1001BDE1C((uint64_t)v6, v7);
    int v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_21;
    }
  }

  else if ((*(_BYTE *)(a2 + 60) & 2) == 0)
  {
    goto LABEL_6;
  }

  *(_DWORD *)(a1 + 60) |= 2u;
  uint64_t v8 = *(char **)(a1 + 16);
  if (!v8)
  {
    uint64_t v8 = (char *)operator new(0xE8uLL);
    *(void *)uint64_t v8 = &off_101827340;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 1++*(_DWORD *)(v3 + 52) = 0u;
    *(_OWORD *)(v8 + 168) = 0u;
    *(_OWORD *)(v8 + 184) = 0u;
    *(_OWORD *)(v8 + 200) = 0u;
    *(_OWORD *)(v8 + 216) = 0u;
    *(void *)(a1 + 16) = v8;
  }

  uint64_t v9 = *(void *)(a2 + 16);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0AA8 + 16);
  }
  sub_1001BE5DC((uint64_t)v8, v9);
  int v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
LABEL_26:
    *(_DWORD *)(a1 + 60) |= 8u;
    uint64_t v12 = *(char **)(a1 + 32);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0xA8uLL);
      *(void *)uint64_t v12 = &off_1018273B8;
      *((_DWORD *)v12 + 39) = 0;
      *((_DWORD *)v12 + 40) = 0;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(_OWORD *)(v12 + 72) = 0u;
      *(_OWORD *)(v12 + 88) = 0u;
      *(_OWORD *)(v12 + 104) = 0u;
      *(_OWORD *)(v12 + 120) = 0u;
      *(_OWORD *)(v12 + 136) = 0u;
      *((_WORD *)v12 + 76) = 0;
      *(void *)(a1 + 32) = v12;
    }

    uint64_t v13 = *(void *)(a2 + 32);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_1019A0AA8 + 32);
    }
    sub_1001BEF74((uint64_t)v12, v13);
    int v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return;
      }
      goto LABEL_36;
    }

    goto LABEL_31;
  }