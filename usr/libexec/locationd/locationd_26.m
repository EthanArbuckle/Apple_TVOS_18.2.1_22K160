void sub_100CCC1C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CCC238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48LL))(v3, &v6, &v5);
}

void *sub_100CCC274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(**(id **)(a1 + 32), "silo"), "queue");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3321888768LL;
  v13[2] = sub_100CCC374;
  v13[3] = &unk_10187D6C0;
  int v16 = *(_DWORD *)(a1 + 72);
  sub_10001A504((uint64_t)v14, a1 + 40);
  v13[4] = a3;
  v13[5] = a4;
  dispatch_async(v7, v13);
  result = v15;
  if (v15 == v14)
  {
    uint64_t v12 = 4LL;
    result = v14;
  }

  else
  {
    if (!v15) {
      return result;
    }
    uint64_t v12 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*result + 8 * v12))( result,  v8,  v9,  v10);
}

uint64_t sub_100CCC374(uint64_t a1)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  v2 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    sub_100762530(*(_DWORD *)(a1 + 80), __p);
    uint64_t v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#EED2Control,postControlData,received response for %{public}s number",  buf,  0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    uint64_t v5 = qword_101934898;
    sub_100762530(*(_DWORD *)(a1 + 80), buf);
    if (v10 >= 0) {
      uint64_t v6 = buf;
    }
    else {
      uint64_t v6 = *(_BYTE **)buf;
    }
    int v11 = 136446210;
    uint64_t v12 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v5,  0LL,  "#EED2Control,postControlData,received response for %{public}s number",  &v11,  12);
    uint64_t v8 = v7;
    if (v10 < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const_block_invoke",  "%s\n",  v8);
  }

  return sub_100CCC594(a1 + 48, *(_DWORD *)(a1 + 80), *(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_100CCC594(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = a2;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t *))(*(void *)v4 + 48LL))(v4, &v8, &v7, &v6);
}

uint64_t sub_100CCC5D8(uint64_t a1, uint64_t a2)
{
  return sub_10001A504(a1 + 48, a2 + 48);
}

void *sub_100CCC5E4(uint64_t a1)
{
  v1 = (void *)(a1 + 48);
  result = *(void **)(a1 + 72);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_100CCC618(uint64_t a1, uint64_t a2)
{
  return sub_10001A504(a1 + 40, a2 + 40);
}

void *sub_100CCC624(uint64_t a1)
{
  v1 = (void *)(a1 + 40);
  result = *(void **)(a1 + 64);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100CCC658(id a1)
{
  qword_101934898 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_100CCC684()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10199D8D0, (void *)&_mh_execute_header);
}

uint64_t sub_100CCC7C8(uint64_t a1)
{
  *(void *)a1 = &off_10187D750;
  *(void *)(a1 + 8) = &off_101850008;
  *(_DWORD *)(a1 + 16) = 1099956224;
  v2 = (float *)(a1 + 16);
  uint64_t v3 = sub_1006E27E8();
  sub_100413284(v3, &v8);
  sub_1002A81F8(v8, "SemiStatVMThreshold", v2);
  uint64_t v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_100CCC870( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100CCC888(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 3LL;
  *(void *)(a3 + 32) = 3LL;
  float v6 = *(float *)(a2 + 296);
  if (*(_BYTE *)(a2 + 352) || v6 > 1.0)
  {
    int v7 = *(unsigned __int8 *)(a2 + 324);
    sub_1007BDB28(a2, (uint64_t)buf);
    float v8 = *(float *)&v38;
    float v9 = *(float *)v39;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)&v39[4];
    float v10 = 0.0;
    if (v6 > *(float *)(a1 + 16))
    {
      sub_1004493F4();
      float v10 = v11;
    }

    if (*(_BYTE *)(a2 + 352))
    {
      float v12 = 4.5;
      if (v8 >= 4.5) {
        float v12 = v8;
      }
      if (v12 >= v10) {
        float v13 = v12;
      }
      else {
        float v13 = v10;
      }
      *(float *)(a3 + 20) = v13;
      *(float *)buf = v9;
      *(void *)v36 = 0x3F95C28F3FA66666LL;
      *(float *)&v36[8] = v10;
      uint64_t v14 = 4LL;
      float v15 = v9;
      int v16 = buf;
      do
      {
        if (v15 < *(float *)&buf[v14])
        {
          float v15 = *(float *)&buf[v14];
          int v16 = &buf[v14];
        }

        v14 += 4LL;
      }

      while (v14 != 16);
      float v17 = *(float *)v16;
    }

    else
    {
      BOOL v18 = v6 < 33.0;
      float v19 = fmaxf(v10, 1.17);
      if (v8 != 0.0 && v6 < 33.0) {
        float v13 = v8;
      }
      else {
        float v13 = v19;
      }
      *(float *)(a3 + 20) = v13;
      if (v9 != 0.0 && v18) {
        float v17 = v9;
      }
      else {
        float v17 = v19;
      }
    }

    *(float *)(a3 + 28) = v17;
    *(float *)(a3 + 12) = v17;
    if (v17 == v9) {
      int v20 = 17;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(a3 + 36) = v20;
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187D790);
    }
    v21 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = *(void *)(a2 + 112);
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)v36 = v7;
      *(_WORD *)&v36[4] = 2048;
      *(double *)&v36[6] = v10;
      __int16 v37 = 2048;
      uint64_t v38 = 0x3FF2B851E0000000LL;
      *(_WORD *)v39 = 2048;
      *(double *)&v39[2] = v13;
      __int16 v40 = 2048;
      double v41 = v8;
      __int16 v42 = 2048;
      uint64_t v43 = v22;
      __int16 v44 = 2048;
      double v45 = v17;
      __int16 v46 = 2048;
      double v47 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "Semistationary, Wheelchair, %d, metsFromIntensity, %.1f, metsFromPosture, %.1f, userMetsFinal, %.1f, userMetsFro mPushes, %.1f, computeTime, %.1f, truthMetsFinal, %.1f, truthMetsFromPushes, %.1f",  buf,  0x4Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10187D790);
      }
      uint64_t v23 = *(void *)(a2 + 112);
      LODWORD(v27) = 67110912;
      HIDWORD(v27) = v7;
      *(_WORD *)v28 = 2048;
      *(double *)&v28[2] = v10;
      *(_WORD *)&v28[10] = 2048;
      *(void *)&v28[12] = 0x3FF2B851E0000000LL;
      *(_WORD *)&v28[20] = 2048;
      *(double *)&v28[22] = v13;
      *(_WORD *)&v28[30] = 2048;
      __int16 v29 = 2048;
      uint64_t v30 = v23;
      __int16 v31 = 2048;
      double v32 = v17;
      __int16 v33 = 2048;
      double v34 = v9;
      LODWORD(v26) = 78;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Semistationary, Wheelchair, %d, metsFromIntensity, %.1f, metsFromPosture, %.1f, userMetsFinal, %.1f, userMetsFro mPushes, %.1f, computeTime, %.1f, truthMetsFinal, %.1f, truthMetsFromPushes, %.1f",  &v27,  v26,  v27,  *(double *)v28,  *(double *)&v28[8],  *(double *)&v28[16],  *(double *)&v28[24],  v8);
      v25 = (uint8_t *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLCalorieSemiStatWheelchairModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v24);
      if (v25 != buf) {
        free(v25);
      }
    }
  }

uint64_t sub_100CCCC48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 48LL))(*(void *)(a2 + 40));
}

void sub_100CCCC58(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100CCCC84()
{
  return 1LL;
}

uint64_t sub_100CCCC8C(uint64_t result, int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (!v3) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  while (1)
  {
    float v9 = (unsigned __int8 *)(*(void *)v6 + v7);
    int v10 = v9[2];
    float v11 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v9 + 2);
    result = (*((uint64_t (**)(uint64_t, uint64_t))v9 + 1))(v6, a3);
    if ((result & 1) != 0) {
      break;
    }
    unint64_t v3 = *(void *)(v6 + 8);
LABEL_7:
    ++v8;
    v7 += 24LL;
    if (v3 <= v8) {
      return result;
    }
  }

  if (*(unsigned __int8 *)(v6 + 17) <= 1u && *(unsigned __int8 *)(v6 + 16) != v10)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187D7D0);
    }
    float v12 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(unsigned __int8 *)(v6 + 17);
      int v14 = *(unsigned __int8 *)(v6 + 16);
      *(_DWORD *)buf = 67109888;
      int v23 = v13;
      __int16 v24 = 1024;
      int v25 = a2;
      __int16 v26 = 1024;
      int v27 = v14;
      __int16 v28 = 1024;
      int v29 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[FSM] %u,event,%u,transition,from,%u,to,%u",  buf,  0x1Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187D7D0);
      }
      int v15 = *(unsigned __int8 *)(v6 + 16);
      LOWORD(v18) = 1024;
      HIWORD(v18) = a2;
      int v19 = v15;
      __int16 v20 = 1024;
      int v21 = v10;
      int v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "[FSM] %u,event,%u,transition,from,%u,to,%u",  &v17,  26,  67109888,  v18);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CMFiniteStateMachine::signal(uint8_t, const void *)", "%s\n", v16);
    }
  }

  *(_BYTE *)(v6 + 16) = v10;
  return v11(v6, a3);
}

void sub_100CCCF18(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100CCCF44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_100CCE04C;
  v42[3] = &unk_101862770;
  v42[4] = a2;
  v43[0] = mach_absolute_time();
  v43[1] = (uint64_t)v42;
  nullsub_10(&__p);
  sub_100A5ACF0((uint64_t)v81, v44);
  sub_100A689EC(v44, v47);
  sub_1002DCA80((uint64_t)v81, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v82, (uint64_t)v54);
  sub_1002DC708((uint64_t)v83, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  sub_100BCC510((uint64_t)v81, v44);
  sub_100BCCFF0((int *)v44, v47);
  sub_1002DCA80((uint64_t)v81, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v82, (uint64_t)v54);
  sub_1002DC708((uint64_t)v83, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  sub_1008FAA04((uint64_t)v81, v44);
  sub_1008FCF20((uint64_t *)a1, v44, v47);
  sub_1002DCA80((uint64_t)v81, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v82, (uint64_t)v54);
  sub_1002DC708((uint64_t)v83, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  unint64_t v6 = *(void *)(a1 + 24);
  v41.n128_u64[0] = *(void *)(a1 + 16);
  v41.n128_u64[1] = v6;
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  sub_1002DC370((__n128 *)&__p, &v41);
  sub_10059081C((uint64_t)v81, v44);
  sub_100590998((uint64_t *)&__p, (int *)v44, v47);
  sub_1002DCA80((uint64_t)v81, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v82, (uint64_t)v54);
  sub_1002DC708((uint64_t)v83, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    int v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  float v12 = (std::__shared_weak_count *)v41.n128_u64[1];
  if (v41.n128_u64[1])
  {
    int v13 = (unint64_t *)(v41.n128_u64[1] + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  sub_10068BF54(&__p, (__int128 *)(a1 + 32));
  sub_100683384((uint64_t)v81, v44);
  sub_10068BFA0(&__p, (int *)v44, v47);
  sub_1002DCA80((uint64_t)v81, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v82, (uint64_t)v54);
  sub_1002DC708((uint64_t)v83, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  unint64_t v15 = *(void *)(a1 + 24);
  v39.n128_u64[0] = *(void *)(a1 + 16);
  v39.n128_u64[1] = v15;
  if (v15)
  {
    int v16 = (unint64_t *)(v15 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  sub_1002DC370((__n128 *)&__p, &v39);
  sub_100D839A4((uint64_t)v81, v44);
  sub_100D89888((uint64_t *)&__p, (int *)v44, v47);
  sub_1002DCA80((uint64_t)v81, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v82, (uint64_t)v54);
  sub_1002DC708((uint64_t)v83, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  int v18 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    int v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  int v21 = (std::__shared_weak_count *)v39.n128_u64[1];
  if (v39.n128_u64[1])
  {
    uint64_t v22 = (unint64_t *)(v39.n128_u64[1] + 8);
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  sub_100CCE1C4(a3);
  sub_1002DC708(a3 + 1352, (uint64_t)v83);
  sub_10078A6EC((uint64_t)v81, v44);
  sub_10078AD3C((int *)v44, v47);
  sub_1002DCA80((uint64_t)v56, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v57, (uint64_t)v54);
  sub_1002DC708((uint64_t)v76, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  *(_OWORD *)(a3 + 216) = *(_OWORD *)&v60[56];
  *(_OWORD *)(a3 + 232) = v61;
  *(_OWORD *)(a3 + 248) = v62[0];
  *(_OWORD *)(a3 + 257) = *(_OWORD *)((char *)v62 + 9);
  nullsub_10(&__p);
  sub_10093B4C4((uint64_t)v81, v44);
  sub_10093D008((int *)v44, v47);
  sub_1002DCA80((uint64_t)v56, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v57, (uint64_t)v54);
  sub_1002DC708((uint64_t)v76, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  sub_1002DFA20(a3, (uint64_t)&v59);
  sub_1002DFD58(a3 + 56, (uint64_t)v60);
  sub_1002DC708(a3 + 1352, (uint64_t)v76);
  sub_100E62E64((uint64_t)v81, v44);
  sub_100E6320C((int *)v44, v47);
  sub_1002DCA80((uint64_t)v56, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v57, (uint64_t)v54);
  sub_1002DC708((uint64_t)v76, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  sub_1002DF744(a3 + 112, (uint64_t)&v58);
  *(_DWORD *)(a3 + 208) = v63;
  *(_BYTE *)(a3 + 212) = v64;
  sub_100A240E4((uint64_t)v81, v44);
  sub_100A2688C((int *)v44, v47);
  sub_1002DCA80((uint64_t)v56, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v57, (uint64_t)v54);
  sub_1002DC708((uint64_t)v76, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  *(void *)(a3 + 280) = v65;
  *(_BYTE *)(a3 + 288) = v66;
  *(_WORD *)(a3 + 296) = v67;
  *(void *)(a3 + 304) = v68;
  *(_BYTE *)(a3 + 312) = v69;
  *(_WORD *)(a3 + 320) = v70;
  unint64_t v24 = *(void *)(a1 + 24);
  v38.n128_u64[0] = *(void *)(a1 + 16);
  v38.n128_u64[1] = v24;
  if (v24)
  {
    int v25 = (unint64_t *)(v24 + 8);
    do
      unint64_t v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }

  sub_1002DC370((__n128 *)&__p, &v38);
  sub_1002D9CD4((uint64_t)v81, v44);
  sub_1002DC380((uint64_t *)&__p, (int *)v44, v47);
  sub_1002DCA80((uint64_t)v56, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v57, (uint64_t)v54);
  sub_1002DC708((uint64_t)v76, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  int v27 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    __int16 v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  uint64_t v30 = (std::__shared_weak_count *)v38.n128_u64[1];
  if (v38.n128_u64[1])
  {
    __int16 v31 = (unint64_t *)(v38.n128_u64[1] + 8);
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  *(_WORD *)(a3 + 322) = v71;
  sub_1002DFDE4(a3 + 328, (uint64_t)&v72);
  sub_1002DFF4C(a3 + 1136, (uint64_t)&v73);
  *(void *)(a3 + 4780) = *(void *)&v77[5];
  *(_BYTE *)(a3 + 4788) = v78;
  *(void *)(a3 + 4792) = v79;
  *(_BYTE *)(a3 + 4800) = v80;
  sub_1000F2F30((void *)(a3 + 4760), (uint64_t *)v77);
  sub_100A149FC((uint64_t)v81, v44);
  sub_100A1538C((int *)v44, v47);
  sub_1002DCA80((uint64_t)v56, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v57, (uint64_t)v54);
  sub_1002DC708((uint64_t)v76, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  sub_1002E027C(a3 + 1168, (uint64_t)&v74);
  sub_100AE85BC((uint64_t)v81, v44);
  sub_100AE8BA0((int *)v44, v47);
  sub_1002DCA80((uint64_t)v56, (uint64_t)v47);
  sub_1002DC4C4((uint64_t)v57, (uint64_t)v54);
  sub_1002DC708((uint64_t)v76, (uint64_t)v55);
  sub_1002E1244((uint64_t)v55);
  sub_1002E1094((uint64_t)v54);
  sub_1002DDAD8((uint64_t)v47);
  sub_1002E1244((uint64_t)v46);
  sub_1002E1094((uint64_t)v45);
  sub_1002DDAD8((uint64_t)v44);
  sub_1001588D0((std::string *)(a3 + 1320), &v75);
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10187D7F0);
  }
  __int16 v33 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    sub_100496E5C(a2 + 3760, v44);
    int v34 = (char)v44[0].__r_.__value_.__s.__size_;
    std::string::size_type v35 = v44[0].__r_.__value_.__r.__words[0];
    sub_100496E5C(a3 + 4304, &__p);
    v36 = v44;
    if (v34 < 0) {
      v36 = (std::stringbuf::string_type *)v35;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    v47[0] = 68289538;
    v47[1] = 0;
    __int16 v48 = 2082;
    v49 = "";
    __int16 v50 = 2082;
    v51 = v36;
    __int16 v52 = 2082;
    v53 = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:wifi location update request state change, before:%{public, location:escape_only}s,  after:%{public, location:escape_only}s}",  (uint8_t *)v47,  0x26u);
  }

  sub_1011F6BE4(v43);
  sub_1002E1244((uint64_t)v76);
  sub_1002E1094((uint64_t)v57);
  sub_1002DDAD8((uint64_t)v56);
  sub_1002E1244((uint64_t)v83);
  sub_1002E1094((uint64_t)v82);
  sub_1002DDAD8((uint64_t)v81);
}

void sub_100CCDD60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, char a11, char a12, char a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_100446B00(v40);
  sub_1011F6BE4(&a33);
  sub_1002D9D34((uint64_t)&STACK[0x3318]);
  sub_1002D9D34((uint64_t)&STACK[0x4C60]);
  _Unwind_Resume(a1);
}

void sub_100CCE04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_101171C7C(a3 - a2);
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10187D7F0);
  }
  uint64_t v7 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = sub_100446354(*(int **)(a1 + 32));
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 4176LL);
    v10[0] = 68290562;
    v10[1] = 0;
    __int16 v11 = 2082;
    float v12 = "";
    __int16 v13 = 2082;
    unint64_t v14 = "elapsed";
    __int16 v15 = 2050;
    uint64_t v16 = a2;
    __int16 v17 = 2050;
    uint64_t v18 = a3;
    __int16 v19 = 2050;
    double v20 = v6;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    __int16 v23 = 2050;
    uint64_t v24 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLWifi1SystemLogic::apply, event:%{public, location:escape_only}s, begin_mach:%{p ublic}llu, end_mach:%{public}llu, elapsed_s:%{public}.09f, event:%{public, location:escape_only}s, now_s:%{public}.09f}",  (uint8_t *)v10,  0x4Eu);
  }

void sub_100CCE198(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_100CCE1C4(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1160) = 0;
  *(_BYTE *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1344) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  sub_1002E06EC(a1 + 1352);
  return a1;
}

void sub_100CCE268(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 1160))
  {
    double v6 = *(void **)(v1 + 1136);
    if (v6)
    {
      *(void *)(v1 + 1144) = v6;
      operator delete(v6);
    }
  }

  if (*(_BYTE *)(v1 + 1128)) {
    sub_10000AE14(v1 + 1008);
  }
  sub_1002E11F4(v3);
  if (*(_BYTE *)(v1 + 104)) {
    sub_100019CEC(v2);
  }
  if (*(_BYTE *)(v1 + 48)) {
    sub_100019CEC(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100CCE2E4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100CCE380(_Unwind_Exception *a1)
{
}

void sub_100CCE398()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100CCE424(_Unwind_Exception *a1)
{
}

void *sub_100CCE43C(uint64_t a1, uint64_t a2)
{
  int v3 = 1;
  result = (void *)sub_100595C90(a1, &v3, qword_10199D8E8, a2);
  void *result = off_10187D820;
  return result;
}

void sub_100CCE480(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100C0CB28(a1);
  operator delete(v1);
}

uint64_t sub_100CCE494(uint64_t a1)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187D8E8);
  }
  uint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16LL))(__p, a1);
    int v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: clear, tile, %sd", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187D8E8);
    }
    uint64_t v5 = qword_101934A78;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 16LL))(buf, a1);
    if (v10 >= 0) {
      double v6 = buf;
    }
    else {
      double v6 = *(_BYTE **)buf;
    }
    int v11 = 136315138;
    float v12 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v5,  2LL,  "TILE: clear, tile, %sd",  (const char *)&v11);
    unint64_t v8 = v7;
    if (v10 < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLDEMTile::clear()", "%s\n", v8);
  }

  return sub_100C0CB8C(a1);
}

void sub_100CCE6BC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 296) = 0;
}

void sub_100CCE6E0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 296) = 0;
}

double sub_100CCE704()
{
  return 0.1;
}

void sub_100CCE710(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100CCE73C()
{
  unsigned __int8 v0 = operator new(0x10uLL);
  uint64_t result = sub_1002E4C3C(v0, "CLDEMTile-Mutex", 1LL, 1LL);
  qword_10199D8E8 = (uint64_t)v0;
  return result;
}

void sub_100CCE77C(_Unwind_Exception *a1)
{
}

uint64_t sub_100CCE790(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_1002E4C3C(a1 + 48, "CLBundleKeyValueCache", 1LL, 1LL);
  *(void *)a1 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 8) = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 16) = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 24) = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 32) = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 40) = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  return a1;
}

void sub_100CCE898(_Unwind_Exception *a1)
{
}

uint64_t sub_100CCE8AC()
{
  if (qword_10199D8F0 != -1) {
    dispatch_once(&qword_10199D8F0, &stru_10187D908);
  }
  return qword_1019A2060;
}

uint64_t sub_100CCE8F0()
{
  unsigned __int8 v0 = operator new(0x40uLL);
  uint64_t result = sub_100CCE790((uint64_t)v0);
  qword_1019A2060 = (uint64_t)v0;
  return result;
}

void sub_100CCE920(_Unwind_Exception *a1)
{
}

uint64_t sub_100CCE934(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  CFPropertyListRef DeepCopy = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)a1, 2uLL);
  CFRelease(*(CFTypeRef *)a1);
  *(void *)a1 = DeepCopy;
  CFPropertyListRef v4 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 8), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 8));
  *(void *)(a1 + 8) = v4;
  CFPropertyListRef v5 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 16), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  *(void *)(a1 + 16) = v5;
  CFPropertyListRef v6 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 24), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 24));
  *(void *)(a1 + 24) = v6;
  CFPropertyListRef v7 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 32), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 32));
  *(void *)(a1 + 32) = v7;
  CFPropertyListRef v8 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 40), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  *(void *)(a1 + 40) = v8;
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 48) + 24LL))(v2);
}

void sub_100CCEA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100CCEA88(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  CFPropertyListRef v5 = sub_100CCEB40(*(__CFDictionary **)a1, a2, @"CLSystemService");
  CFPropertyListRef v6 = v5;
  if (v5)
  {
    BOOL v7 = CFBooleanGetValue(v5) != 0;
    CFRelease(v6);
  }

  else
  {
    BOOL v7 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v7;
}

void sub_100CCEB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

CFBooleanRef sub_100CCEB40(__CFDictionary *a1, const __CFString *a2, const __CFString *a3)
{
  CFPropertyListRef v5 = (const __CFBoolean *)sub_100CCEE80(a1, a2, a3);
  if (!v5) {
    goto LABEL_4;
  }
  CFBooleanRef v6 = v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 != CFBooleanGetTypeID())
  {
    CFRelease(v6);
LABEL_4:
    CFBooleanRef v6 = kCFBooleanFalse;
    CFDictionarySetValue(a1, a2, kCFBooleanFalse);
  }

  return v6;
}

BOOL sub_100CCEBB0(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  uint64_t v4 = sub_100CCEB40(*(__CFDictionary **)(v3 - 40), a2, @"CLHarvestableSystemService");
  CFPropertyListRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }

  else
  {
    BOOL v6 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  return v6;
}

void sub_100CCEC50(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100CCEC64(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  uint64_t v4 = sub_100CCEB40(*(__CFDictionary **)(v3 - 32), a2, @"CLIsFindMyiPhone");
  CFPropertyListRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }

  else
  {
    BOOL v6 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  return v6;
}

void sub_100CCED04(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100CCED18(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  uint64_t v4 = sub_100CCEB40(*(__CFDictionary **)(v3 - 24), a2, @"CLIsCoreRoutine");
  CFPropertyListRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }

  else
  {
    BOOL v6 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  return v6;
}

void sub_100CCEDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100CCEDCC(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  uint64_t v4 = sub_100CCEB40(*(__CFDictionary **)(v3 - 8), a2, @"CLEmergencyService");
  CFPropertyListRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }

  else
  {
    BOOL v6 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  return v6;
}

void sub_100CCEE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100CCEE80(__CFDictionary *a1, const __CFString *a2, const __CFString *a3)
{
  value = 0LL;
  if (!a2) {
    return 0LL;
  }
  if (CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value))
  {
    if (value) {
      CFRetain(value);
    }
  }

  else
  {
    CFTypeID v7 = (void *)sub_100296530(a2, a3);
    value = v7;
    if (v7) {
      CFDictionarySetValue(a1, a2, v7);
    }
  }

  return value;
}

CFArrayRef sub_100CCEF08(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16LL))(a1 + 48);
  if (!a2)
  {
    CFArrayRef v6 = 0LL;
    goto LABEL_8;
  }

  CFPropertyListRef v5 = (const __CFArray *)sub_100CCEE80(*(__CFDictionary **)(a1 + 32), a2, @"CLRequiredCapabilities");
  CFArrayRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFArrayGetTypeID()) {
      goto LABEL_8;
    }
    CFRelease(v6);
  }

  CFArrayRef v6 = CFArrayCreate(kCFAllocatorDefault, 0LL, 0LL, &kCFTypeArrayCallBacks);
  if (v6) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v6);
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v6;
}

void sub_100CCEFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100CD0324(_Unwind_Exception *a1)
{
}

void sub_100CD1D50(_Unwind_Exception *a1)
{
}

void sub_100CD31E8(_Unwind_Exception *a1)
{
}

void sub_100CD32F0(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100CD331C(id a1)
{
  qword_101934A98 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

uint64_t sub_100CD3348(uint64_t a1, double a2)
{
  uint64_t v2 = &qword_1013597B0;
  while (1)
  {
    double v3 = *(double *)v2;
    if (*(double *)v2 <= a2)
    {
      double v4 = *((double *)v2 + 1);
      if (v4 > a2)
      {
        int v6 = *((_DWORD *)v2 + 6);
        goto LABEL_10;
      }
    }

    if (*((_DWORD *)v2 + 6) == 1)
    {
      double v4 = *((double *)v2 + 1);
      if (vabdd_f64(a2, v4) <= 1.0e-12) {
        break;
      }
    }

    v2 += 4;
  }

  int v6 = 1;
LABEL_10:
  *(_DWORD *)(a1 + 24) = v6;
  uint64_t v5 = 1LL;
  *(double *)a1 = v3;
  *(double *)(a1 + 8) = v4;
  return v5;
}

uint64_t sub_100CD43F4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    double v4 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    uint64_t v5 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    int v6 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    CFTypeID v7 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    CFPropertyListRef v8 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    uint64_t v9 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    char v10 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    int v11 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    float v12 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    __int16 v13 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    char v14 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        uint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v19 = v18 + 1;
        if (v18 == -1 || v19 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
        v17 |= (unint64_t)(v20 & 0x7F) << v15;
        if ((v20 & 0x80) == 0) {
          goto LABEL_12;
        }
        v15 += 7;
        BOOL v21 = v16++ >= 9;
        if (v21)
        {
          unint64_t v17 = 0LL;
          int v22 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v22 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v17 = 0LL;
      }
LABEL_14:
      if (v22 || (v17 & 7) == 4) {
        break;
      }
      switch((v17 >> 3))
      {
        case 1u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0LL;
          *(_BYTE *)(a1 + v4[14]) |= 0x20u;
          while (1)
          {
            uint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v28 = v27 + 1;
            if (v27 == -1 || v28 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if ((v29 & 0x80) == 0) {
              goto LABEL_76;
            }
            v24 += 7;
            BOOL v21 = v25++ >= 9;
            if (v21)
            {
              LODWORD(v26) = 0;
              goto LABEL_78;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_76:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v71 = v5[15];
          goto LABEL_83;
        case 2u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v26 = 0LL;
          while (2)
          {
            uint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v41 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
              v26 |= (unint64_t)(v41 & 0x7F) << v37;
              if (v41 < 0)
              {
                v37 += 7;
                BOOL v21 = v38++ >= 9;
                if (v21)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v71 = v6[21];
LABEL_83:
          *(_DWORD *)(a1 + v71) = v26;
          continue;
        case 3u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v44 = 0LL;
          while (2)
          {
            uint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v46 = v45 + 1;
            if (v45 == -1 || v46 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v47 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                BOOL v21 = v43++ >= 9;
                if (v21)
                {
                  uint64_t v44 = 0LL;
                  goto LABEL_87;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v44 = 0LL;
          }
LABEL_87:
          BOOL v72 = v44 != 0;
          uint64_t v73 = v7[22];
          goto LABEL_101;
        case 4u:
          *(_BYTE *)(a1 + v4[14]) |= 4u;
          unint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v48 <= 0xFFFFFFFFFFFFFFF7LL && v48 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v49 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v49 = 0LL;
          }

          uint64_t v75 = v8[16];
          goto LABEL_110;
        case 5u:
          *(_BYTE *)(a1 + v4[14]) |= 0x10u;
          unint64_t v50 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v51 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50 + 4;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v51 = 0;
          }

          *(_DWORD *)(a1 + v9[17]) = v51;
          continue;
        case 6u:
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v54 = 0LL;
          while (2)
          {
            uint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v56 = v55 + 1;
            if (v55 == -1 || v56 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v57 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                BOOL v21 = v53++ >= 9;
                if (v21)
                {
                  uint64_t v54 = 0LL;
                  goto LABEL_91;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v54 = 0LL;
          }
LABEL_91:
          uint64_t v74 = v10[23];
          goto LABEL_96;
        case 7u:
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v54 = 0LL;
          *(_BYTE *)(a1 + v4[14]) |= 1u;
          while (2)
          {
            uint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v61 = v60 + 1;
            if (v60 == -1 || v61 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v62 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
              v54 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                BOOL v21 = v59++ >= 9;
                if (v21)
                {
                  uint64_t v54 = 0LL;
                  goto LABEL_95;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v54 = 0LL;
          }
LABEL_95:
          uint64_t v74 = v11[18];
LABEL_96:
          *(void *)(a1 + v74) = v54;
          continue;
        case 8u:
          *(_BYTE *)(a1 + v4[14]) |= 8u;
          unint64_t v63 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v63 <= 0xFFFFFFFFFFFFFFF7LL && v63 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v49 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v49 = 0LL;
          }

          uint64_t v75 = v12[19];
          goto LABEL_110;
        case 9u:
          *(_BYTE *)(a1 + v4[14]) |= 2u;
          unint64_t v64 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v64 <= 0xFFFFFFFFFFFFFFF7LL && v64 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v49 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v49 = 0LL;
          }

          uint64_t v75 = v13[20];
LABEL_110:
          *(void *)(a1 + v75) = v49;
          continue;
        case 0xAu:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v67 = 0LL;
          break;
        default:
          uint64_t v30 = v5;
          __int16 v31 = v6;
          unint64_t v32 = v4;
          __int16 v33 = v7;
          int v34 = v8;
          uint64_t v35 = a1;
          uint64_t result = PBReaderSkipValueWithTag(a2);
          a1 = v35;
          uint64_t v9 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          CFPropertyListRef v8 = v34;
          char v10 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          CFTypeID v7 = v33;
          int v11 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          double v4 = v32;
          __int16 v13 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          int v6 = v31;
          float v12 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          uint64_t v5 = v30;
          char v14 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          if (!(_DWORD)result) {
            return result;
          }
          continue;
      }

      while (1)
      {
        uint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v69 = v68 + 1;
        if (v68 == -1 || v69 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v70 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69;
        v67 |= (unint64_t)(v70 & 0x7F) << v65;
        if ((v70 & 0x80) == 0) {
          goto LABEL_98;
        }
        v65 += 7;
        BOOL v21 = v66++ >= 9;
        if (v21)
        {
          uint64_t v67 = 0LL;
          goto LABEL_100;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_98:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v67 = 0LL;
      }
LABEL_100:
      BOOL v72 = v67 != 0;
      uint64_t v73 = v14[24];
LABEL_101:
      *(_BYTE *)(a1 + v73) = v72;
    }

    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100CD554C(uint64_t a1)
{
  *(void *)a1 = &off_10184B1E8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  uint64_t v2 = sub_1006E27E8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100CD55FC;
  v4[3] = &unk_10181D3D0;
  v4[4] = a1;
  sub_1006E28B8(v2, (uint64_t)v4);
  return a1;
}

void sub_100CD55DC(_Unwind_Exception *a1)
{
}

uint64_t sub_100CD55FC(uint64_t a1)
{
  return sub_100CD5604(*(void *)(a1 + 32));
}

uint64_t sub_100CD5604(uint64_t a1)
{
  unint64_t v2 = sub_1004F97F4();
  if ((v2 & 0x200) != 0)
  {
    if (!*(void *)(a1 + 8))
    {
      double v3 = (uint64_t *)sub_10071542C();
      uint64_t v19 = 0x150000FF0CLL;
      char v20 = 0;
      sub_10121B774(v3, (uint64_t)&v19, (uint64_t *)buf);
      sub_10005F550(a1 + 8, (__int128 *)buf);
      double v4 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v5 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }

      sub_100719D78(*(uint64_t **)(a1 + 8), (uint64_t)sub_100CD6424, a1);
      sub_100719ECC(*(void *)(a1 + 8), (uint64_t)sub_100CD59B4, a1);
      sub_100719E00(*(void *)(a1 + 8), (uint64_t)sub_100CD59B4, a1);
      sub_10071A408(*(void *)(a1 + 8), (uint64_t)sub_100CD59B4, a1);
      CFTypeID v7 = operator new(0x20uLL);
      uint64_t v8 = (uint64_t)v7;
      uint64_t v9 = *(void *)(a1 + 16);
      *(void *)buf = *(void *)(a1 + 8);
      *(void *)&buf[8] = v9;
      if (v9)
      {
        char v10 = (unint64_t *)(v9 + 8);
        do
          unint64_t v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }

      sub_100E2E64C(v7, buf);
      float v12 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        __int16 v13 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }

      sub_10029D2EC((uint64_t *)(a1 + 24), v8);
      sub_100E2EA00(*(uint64_t **)(a1 + 24));
    }
  }

  else
  {
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10187D968);
    }
    char v15 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Service unavailable.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10187D968);
      }
      v21[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  17LL,  "Service unavailable.",  v21,  2);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLSPUMagicMountInterface::openHidDevice()", "%s\n", v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

  return (v2 >> 9) & 1;
}

void sub_100CD58FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

unint64_t sub_100CD5928()
{
  return ((unint64_t)sub_1004F97F4() >> 9) & 1;
}

BOOL sub_100CD5940(uint64_t a1, uint64_t a2, char *a3)
{
  if ((sub_1004F97F4() & 0x200) == 0) {
    sub_10126A5EC();
  }
  int v8 = 0;
  uint64_t v7 = 4LL;
  return sub_100E2F5E4(*(void *)(a1 + 24), a2, a3, (uint64_t)&v8, (uint64_t)&v7) == 0;
}

BOOL sub_100CD59B4(uint64_t a1)
{
  unint64_t v2 = *(uint64_t **)(a1 + 24);
  sub_100E2E678(v2);
  sub_100E2EA00(v2);
  return sub_100CD59E8(a1);
}

BOOL sub_100CD59E8(uint64_t a1)
{
  v12[0] = 2;
  int v2 = *(unsigned __int8 *)(a1 + 40);
  v12[1] = *(_BYTE *)(a1 + 40);
  uint64_t v13 = 0LL;
  int v14 = 0;
  if (qword_101934550 != -1) {
    dispatch_once(&qword_101934550, &stru_10187D968);
  }
  double v3 = (os_log_s *)qword_101934558;
  if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    int v17 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[CLMagicMountInterface] Sending config shouldKeepRunning,%{public}u,",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10187D968);
    }
    v15[0] = 67240192;
    v15[1] = v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  1LL,  "[CLMagicMountInterface] Sending config shouldKeepRunning,%{public}u,",  v15,  8);
    int v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLSPUMagicMountInterface::configure()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  BOOL v4 = sub_100CD5940(a1, (uint64_t)v12, (char *)0xE);
  if (!v4)
  {
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10187D968);
    }
    uint64_t v5 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[CLMagicMountInterface] Configure failed",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10187D968);
      }
      LOWORD(v15[0]) = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  16LL,  "[CLMagicMountInterface] Configure failed",  v15,  v11);
      char v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLSPUMagicMountInterface::configure()", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  return v4;
}

void sub_100CD5CF4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int64_t v15 = 0LL;
    v16[0] = 0LL;
    IOHIDEventGetVendorDefinedData(a2, v16, &v15);
    if (v16[0]) {
      BOOL v4 = v15 <= 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      unint64_t TimeStamp = IOHIDEventGetTimeStamp(a2);
      double v13 = sub_101171C7C(TimeStamp);
      sub_100CD5FDC(a1, v16[0], v15, v13);
      return;
    }

    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10187D968);
    }
    uint64_t v5 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10187D968);
      }
      __int16 v14 = 0;
      double v6 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  1LL,  "Empty payload, returning",  &v14,  2);
      int v8 = v7;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPUMagicMountInterface::onIoHidEvent(IOHIDEventRef)", "%s\n", v6);
LABEL_23:
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  else
  {
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10187D968);
    }
    uint64_t v9 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10187D968);
      }
      LOWORD(v16[0]) = 0;
      double v10 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  17LL,  "Event ref invalid",  v16,  2);
      int v8 = v11;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSPUMagicMountInterface::onIoHidEvent(IOHIDEventRef)", "%s\n", v10);
      goto LABEL_23;
    }
  }

void sub_100CD5FDC(uint64_t a1, unsigned __int8 *a2, size_t a3, double a4)
{
  *(double *)(a1 + 32) = a4;
  sub_10067FA18(__dst, a2, a3);
  if (a3) {
    int v7 = *a2;
  }
  else {
    int v7 = 0;
  }
  if (qword_101934550 != -1) {
    dispatch_once(&qword_101934550, &stru_10187D968);
  }
  int v8 = (os_log_s *)qword_101934558;
  if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240448;
    int v22 = v7;
    __int16 v23 = 2050;
    size_t v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "type,%{public}d,size,%{public}lu", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10187D968);
    }
    int v17 = 67240448;
    int v18 = v7;
    __int16 v19 = 2050;
    size_t v20 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  2LL,  "type,%{public}d,size,%{public}lu",  &v17,  18);
    double v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSPUMagicMountInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  if (v7 == 255)
  {
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10187D968);
    }
    uint64_t v9 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      int v22 = 255;
      __int16 v23 = 2050;
      size_t v24 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "Bad report,type,%{public}d,size,%{public}lu",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10187D968);
      }
      int v17 = 67240448;
      int v18 = 255;
      __int16 v19 = 2050;
      size_t v20 = a3;
      LODWORD(v15) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  17LL,  "Bad report,type,%{public}d,size,%{public}lu",  &v17,  v15);
LABEL_32:
      __int16 v14 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLSPUMagicMountInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)",  "%s\n",  v10);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else if ((sub_10067FA68(__dst, (void *)a1) & 1) == 0)
  {
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10187D968);
    }
    uint64_t v11 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "CMMagicMountReport::visit() type %{public}d failed.",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10187D968);
      }
      int v17 = 67240192;
      int v18 = v7;
      LODWORD(v15) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  17LL,  "CMMagicMountReport::visit() type %{public}d failed.",  &v17,  v15);
      goto LABEL_32;
    }
  }

void sub_100CD6424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100CD642C(id a1)
{
  qword_101934558 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

uint64_t sub_100CD6458(uint64_t a1)
{
  *(void *)a1 = off_10187D998;
  int v3 = 0;
  sub_100CD72C0((void *)(a1 + 8), 0x1FuLL, &v3);
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return a1;
}

void *sub_100CD64AC(void *a1)
{
  *a1 = off_10187D998;
  int v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }

  sub_100CD7340(a1 + 4);
  int v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_100CD6504(void *a1)
{
  uint64_t v1 = sub_100CD64AC(a1);
  operator delete(v1);
}

void sub_100CD6518(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 40);
  int v3 = *(void ***)(a1 + 48);
  if (v3 == v2)
  {
    BOOL v4 = (void *)(a1 + 72);
    int v3 = *(void ***)(a1 + 40);
  }

  else
  {
    BOOL v4 = (void *)(a1 + 72);
    unint64_t v5 = *(void *)(a1 + 64);
    double v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 72) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 72) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        double v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }

        v8 += 24LL;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }

      while (v8 != v9);
      int v2 = *(void ***)(a1 + 40);
      int v3 = *(void ***)(a1 + 48);
    }
  }

  *BOOL v4 = 0LL;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v13 = *(void *)(a1 + 48);
      int v2 = (void **)(*(void *)(a1 + 40) + 8LL);
      *(void *)(a1 + 40) = v2;
      unint64_t v12 = v13 - (void)v2;
    }

    while (v12 > 0x10);
  }

  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 85LL;
  }

  else
  {
    if (v12 >> 3 != 2) {
      goto LABEL_17;
    }
    uint64_t v14 = 170LL;
  }

  *(void *)(a1 + 64) = v14;
LABEL_17:
  uint64_t v15 = *(void **)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 16) - (void)v15;
  if (v16 >= 1) {
    bzero(v15, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
  }
  *(_DWORD *)(a1 + 104) = 0;
}

void sub_100CD666C(uint64_t a1, uint64_t a2, void *a3)
{
  a3[1] = *a3;
  int v11 = 0;
  sub_10009C02C((uint64_t)a3, 0x1FuLL, &v11);
  unint64_t v5 = *(double **)a2;
  uint64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    uint64_t v8 = *a3;
    if (v7 <= 1) {
      unint64_t v7 = 1LL;
    }
    do
    {
      double v9 = *v5++;
      unsigned int v10 = (int)(v9 / 0.100000001) & ~((int)(v9 / 0.100000001) >> 31);
      if (v10 >= 0x1E) {
        unsigned int v10 = 30;
      }
      ++*(_DWORD *)(v8 + 4LL * v10);
      --v7;
    }

    while (v7);
  }

uint64_t sub_100CD6704(uint64_t a1, uint64_t *a2, double *a3, double **a4)
{
  if (*a3 < 1.0 || (uint64_t v5 = a2[1], *a2 == v5))
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187D9B8);
    }
    size_t v20 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "noSamples < 1 || hist.empty()", buf, 2u);
    }

    BOOL v21 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v21)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187D9B8);
      }
      v24[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "noSamples < 1 || hist.empty()",  v24,  2);
      __int16 v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLOdometerQuality::cdfCalculator(const std::vector<unsigned int> &, const double &, std::vector<double> &)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
      return 0LL;
    }
  }

  else
  {
    sub_10064C7C4((uint64_t)a4, (v5 - *a2) >> 2);
    uint64_t v8 = (_DWORD *)*a2;
    LODWORD(v9) = *(_DWORD *)*a2;
    double v10 = (double)v9;
    int v11 = *a4;
    *int v11 = v10;
    unint64_t v12 = a4[1];
    unint64_t v13 = v12 - v11;
    if ((unint64_t)((char *)v12 - (char *)v11) >= 9)
    {
      if (v13 <= 2) {
        uint64_t v14 = 2LL;
      }
      else {
        uint64_t v14 = v12 - v11;
      }
      uint64_t v15 = v11 + 1;
      uint64_t v16 = v8 + 1;
      uint64_t v17 = v14 - 1;
      do
      {
        unsigned int v18 = *v16++;
        double v10 = v10 + (double)v18;
        *v15++ = v10;
        --v17;
      }

      while (v17);
    }

    if (v12 != v11)
    {
      if (v13 <= 1) {
        unint64_t v13 = 1LL;
      }
      do
      {
        *int v11 = *v11 * (100.0 / *a3);
        ++v11;
        --v13;
      }

      while (v13);
    }

    return 1LL;
  }

  return result;
}

void sub_100CD6960(double *a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t)a1;
  BOOL v4 = (double **)(a1 + 10);
  int v3 = (double *)*((void *)a1 + 10);
  *((void *)a1 + 11) = v3;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 == *a2) {
    goto LABEL_44;
  }
  unint64_t v8 = 0LL;
  unint64_t v9 = a1 + 12;
  do
  {
    double v10 = *(double *)(v6 + 8 * v8);
    if (v10 > 0.0 && v10 < 5000.0)
    {
      if ((unint64_t)v3 >= *v9)
      {
        a1 = *v4;
        uint64_t v12 = v3 - *v4;
        unint64_t v13 = v12 + 1;
        uint64_t v14 = *v9 - (void)a1;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)sub_1000071BC(v2 + 96, v15);
          a1 = *(double **)(v2 + 80);
          int v3 = *(double **)(v2 + 88);
          double v10 = *(double *)(v6 + 8 * v8);
        }

        else
        {
          uint64_t v16 = 0LL;
        }

        uint64_t v17 = (double *)&v16[8 * v12];
        *uint64_t v17 = v10;
        int v11 = v17 + 1;
        while (v3 != a1)
        {
          uint64_t v18 = *((void *)v3-- - 1);
          *((void *)v17-- - 1) = v18;
        }

        *(void *)(v2 + 80) = v17;
        *(void *)(v2 + 88) = v11;
        *(void *)(v2 + 96) = &v16[8 * v15];
        if (a1) {
          operator delete(a1);
        }
      }

      else
      {
        *int v3 = v10;
        int v11 = v3 + 1;
      }

      *(void *)(v2 + 88) = v11;
      uint64_t v6 = *a2;
      uint64_t v5 = a2[1];
      int v3 = v11;
    }

    ++v8;
  }

  while (v8 < (v5 - v6) >> 3);
  if (*v4 == v3)
  {
LABEL_44:
    sub_100CD6518(v2);
    return;
  }

  if (*(void *)(v2 + 72) >= 0xAuLL) {
    a1 = (double *)sub_100CD7174((void *)(v2 + 32));
  }
  std::stringbuf::string_type __p = 0LL;
  __int128 v88 = 0uLL;
  sub_100CD666C((uint64_t)a1, (uint64_t)v4, &__p);
  sub_100CD71F0(v2 + 32, (uint64_t)&__p);
  if (__p)
  {
    *(void *)&__int128 v88 = __p;
    operator delete(__p);
  }

  uint64_t v19 = *(void *)(v2 + 72);
  if (v19)
  {
    unint64_t v20 = *(void *)(v2 + 64);
    uint64_t v21 = *(void *)(v2 + 40);
    int v22 = (void *)(v21 + 8 * (v20 / 0xAA));
    __int16 v23 = (void *)(*v22 + 24 * (v20 % 0xAA));
    uint64_t v24 = v23[1];
    uint64_t v25 = v24 - *v23;
    if (v24 == *v23)
    {
      uint64_t v39 = *(int **)(v2 + 8);
    }

    else
    {
      unint64_t v26 = 0LL;
      unsigned int v27 = 0;
      unint64_t v28 = v25 >> 2;
      uint64_t v29 = *(void *)(v2 + 48);
      if (v29 == v21) {
        __int16 v23 = 0LL;
      }
      unint64_t v30 = v20 + v19;
      unint64_t v31 = v30 / 0xAA;
      unint64_t v32 = v30 % 0xAA;
      do
      {
        int v33 = 0;
        int v34 = v22;
        uint64_t v35 = v23;
LABEL_34:
        v36 = v35 - 510;
        while (1)
        {
          uint64_t v37 = v29 == v21 ? 0LL : *(void *)(v21 + 8 * v31) + 24 * v32;
          if (v35 == (void *)v37) {
            break;
          }
          v33 += *(_DWORD *)(*v35 + 4 * v26);
          v35 += 3;
          v36 += 3;
          if ((void *)*v34 == v36)
          {
            unsigned int v38 = (void *)v34[1];
            ++v34;
            uint64_t v35 = v38;
            goto LABEL_34;
          }
        }

        uint64_t v39 = *(int **)(v2 + 8);
        v39[v26] = v33;
        unint64_t v26 = ++v27;
      }

      while (v28 > v27);
    }

    unint64_t v40 = *(int **)(v2 + 16);
    if (v39 == v40)
    {
      int v41 = 0;
    }

    else
    {
      int v41 = 0;
      do
      {
        int v42 = *v39++;
        v41 += v42;
      }

      while (v39 != v40);
    }

    double v83 = (double)v41;
    char v80 = 0LL;
    v81 = 0LL;
    uint64_t v82 = 0LL;
    if ((sub_100CD6704((uint64_t)v39, (uint64_t *)(v2 + 8), &v83, (double **)&v80) & 1) != 0)
    {
      uint64_t v43 = ((char *)v81 - (_BYTE *)v80) >> 3;
      if (v43 == (unk_10199D900 - qword_10199D8F8) >> 3
        && v43 == (qword_10199D918 - qword_10199D910) >> 3
        && v43 == (qword_10199D930 - qword_10199D928) >> 3)
      {
        std::stringbuf::string_type __p = 0LL;
        sub_1000070FC(&v78, 3uLL, &__p);
        uint64_t v44 = (double *)v80;
        uint64_t v45 = v81;
        unint64_t v46 = (double *)v78;
        if (v80 != v81)
        {
          char v47 = (double *)qword_10199D910;
          unint64_t v48 = (double *)qword_10199D8F8;
          uint64_t v49 = (double *)qword_10199D928;
          double v51 = *((double *)v78 + 1);
          double v50 = *((double *)v78 + 2);
          double v52 = *(double *)v78;
          do
          {
            double v53 = *v47++;
            double v50 = v50 + (*v44 - v53) * (*v44 - v53);
            v46[2] = v50;
            double v54 = *v48++;
            double v51 = v51 + (*v44 - v54) * (*v44 - v54);
            v46[1] = v51;
            double v55 = *v44++;
            double v56 = v55;
            double v57 = *v49++;
            double v52 = v52 + (v56 - v57) * (v56 - v57);
            *unint64_t v46 = v52;
          }

          while (v44 != v45);
        }

        char v58 = v46 + 1;
        BOOL v59 = v46 == v79 || v58 == v79;
        uint64_t v60 = v46;
        if (!v59)
        {
          double v61 = *v46;
          uint64_t v60 = v46;
          char v62 = v46 + 1;
          do
          {
            double v63 = *v62++;
            double v64 = v63;
            if (v63 < v61)
            {
              double v61 = v64;
              uint64_t v60 = v58;
            }

            char v58 = v62;
          }

          while (v62 != v79);
        }

        unint64_t v65 = (unint64_t)((char *)v60 - (char *)v46) >> 3;
        *(_DWORD *)(v2 + 104) = v65 + 1;
        if ((_DWORD)v65)
        {
          if ((_DWORD)v65 != 1 || v46[2] * 0.98 > v46[1]) {
            goto LABEL_82;
          }
          int v66 = 3;
        }

        else
        {
          if (v46[1] * 0.93 > *v46)
          {
LABEL_82:
            if (qword_101934510 != -1) {
              dispatch_once(&qword_101934510, &stru_10187D9B8);
            }
            uint64_t v68 = (os_log_s *)qword_101934518;
            if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
            {
              int v69 = *(_DWORD *)(v2 + 104);
              uint64_t v70 = *((void *)v78 + v69 - 1);
              LODWORD(__p) = 67109376;
              HIDWORD(__p) = v69;
              LOWORD(v88) = 2048;
              *(void *)((char *)&v88 + 2) = v70;
              _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "OdometerQualityIndicator,%d,r2,%f",  (uint8_t *)&__p,  0x12u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_101934510 != -1) {
                dispatch_once(&qword_101934510, &stru_10187D9B8);
              }
              int v73 = *(_DWORD *)(v2 + 104);
              uint64_t v74 = *((void *)v78 + v73 - 1);
              v84[0] = 67109376;
              v84[1] = v73;
              __int16 v85 = 2048;
              uint64_t v86 = v74;
              LODWORD(v77) = 18;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "OdometerQualityIndicator,%d,r2,%f",  v84,  v77);
              v76 = (void **)v75;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOdometerQuality::classifySamples(std::vector<double> &)",  "%s\n",  v75);
              if (v76 != &__p) {
                free(v76);
              }
            }

            if (v78)
            {
              uint64_t v79 = (double *)v78;
              operator delete(v78);
            }

            goto LABEL_76;
          }

          int v66 = 2;
        }

        *(_DWORD *)(v2 + 104) = v66;
        goto LABEL_82;
      }

      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187D9B8);
      }
      uint64_t v67 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_FAULT,  "unexpected trained cdf data size issue",  (uint8_t *)&__p,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10187D9B8);
        }
        LOWORD(v78) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "unexpected trained cdf data size issue",  &v78,  2);
        BOOL v72 = (void **)v71;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOdometerQuality::classifySamples(std::vector<double> &)",  "%s\n",  v71);
        if (v72 != &__p) {
          free(v72);
        }
      }
    }

    sub_100CD6518(v2);
LABEL_76:
    if (v80)
    {
      v81 = (double *)v80;
      operator delete(v80);
    }
  }

void sub_100CD7114( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CD7174(void *a1)
{
  uint64_t v2 = a1[5] - 1LL;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = *(void *)(a1[1] + 8 * (v3 / 0xAA));
  unint64_t v5 = v3 % 0xAA;
  uint64_t v6 = *(void **)(v4 + 24 * v5);
  if (v6)
  {
    *(void *)(v4 + 24 * v5 + 8) = v6;
    operator delete(v6);
    uint64_t v2 = a1[5] - 1LL;
  }

  a1[5] = v2;
  return sub_10025BDF8(a1, 1);
}

int64x2_t sub_100CD71F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_100CD7484((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }

  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0xAA));
  unint64_t v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 == *v6) {
    uint64_t v8 = *(v6 - 1) + 4080LL;
  }
  *(void *)(v8 - 24) = 0LL;
  *(void *)(v8 - 16) = 0LL;
  unint64_t v9 = (void *)(v8 - 24);
  v9[2] = 0LL;
  sub_10001B72C(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1012E2F20);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_100CD7294(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void *sub_100CD72C0(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10001B7A4(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4LL;
    }

    while (v8);
    a1[1] = v7;
  }

  return a1;
}

void sub_100CD7324(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100CD7340(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }

  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        double v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }

        v8 += 24LL;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }

      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }

  *unint64_t v4 = 0LL;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85LL;
  }

  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 170LL;
  }

  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    unint64_t v15 = *v2++;
    operator delete(v15);
  }

  return sub_1000EA11C((uint64_t)a1);
}

void sub_100CD7484(void **a1)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0xAA)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::stringbuf::string_type __p = sub_1000071BC(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      int v41 = operator new(0xFF0uLL);
      sub_1000ECB90(&__p, &v41);
      unint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        int v33 = (char *)a1[1];
      }

      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1LL;
              }
              else {
                unint64_t v23 = (v14 - (_BYTE *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000071BC((uint64_t)v46, v23);
              unint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8LL;
                }

                while (v28);
              }

              unint64_t v31 = __p;
              std::stringbuf::string_type __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }

            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              unint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }

              int v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }

          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }

        while (v13 != a1[2]);
        int v33 = (char *)a1[1];
      }

      v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::stringbuf::string_type __p = v36;
      uint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 85LL;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      if (v2 == v9)
      {
        std::stringbuf::string_type __p = operator new(0xFF0uLL);
        sub_1000EC960(a1, &__p);
        int v34 = a1[2];
        std::stringbuf::string_type __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }

      else
      {
        std::stringbuf::string_type __p = operator new(0xFF0uLL);
      }

      sub_1000ECA74((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8) {
        uint64_t v35 = 85LL;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v35;
    }
  }

  else
  {
    a1[4] = v6 + 170;
    std::stringbuf::string_type __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1000ECA74((uint64_t)a1, &__p);
  }

void sub_100CD7750( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CD779C()
{
  qword_10199D8F8 = 0LL;
  unk_10199D900 = 0LL;
  qword_10199D908 = 0LL;
  unsigned __int8 v0 = operator new(0xF8uLL);
  qword_10199D908 = (uint64_t)v0 + 248;
  v0[12] = xmmword_101359908;
  v0[13] = unk_101359918;
  v0[14] = xmmword_101359928;
  *((void *)v0 + 30) = 0x4059000000000000LL;
  v0[8] = xmmword_1013598C8;
  v0[9] = unk_1013598D8;
  v0[10] = xmmword_1013598E8;
  v0[11] = unk_1013598F8;
  v0[4] = xmmword_101359888;
  v0[5] = unk_101359898;
  v0[6] = xmmword_1013598A8;
  v0[7] = unk_1013598B8;
  *unsigned __int8 v0 = xmmword_101359848;
  v0[1] = unk_101359858;
  v0[2] = xmmword_101359868;
  v0[3] = unk_101359878;
  qword_10199D8F8 = (uint64_t)v0;
  unk_10199D900 = (char *)v0 + 248;
  __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_10199D8F8, (void *)&_mh_execute_header);
  qword_10199D918 = 0LL;
  qword_10199D920 = 0LL;
  qword_10199D910 = 0LL;
  uint64_t v1 = operator new(0xF8uLL);
  qword_10199D920 = (uint64_t)v1 + 248;
  v1[12] = xmmword_101359A00;
  v1[13] = unk_101359A10;
  v1[14] = xmmword_101359A20;
  *((void *)v1 + 30) = 0x4059000000000000LL;
  v1[8] = xmmword_1013599C0;
  v1[9] = unk_1013599D0;
  v1[10] = xmmword_1013599E0;
  v1[11] = unk_1013599F0;
  v1[4] = xmmword_101359980;
  v1[5] = unk_101359990;
  v1[6] = xmmword_1013599A0;
  v1[7] = unk_1013599B0;
  _OWORD *v1 = xmmword_101359940;
  v1[1] = unk_101359950;
  v1[2] = xmmword_101359960;
  v1[3] = unk_101359970;
  qword_10199D910 = (uint64_t)v1;
  qword_10199D918 = (uint64_t)v1 + 248;
  __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_10199D910, (void *)&_mh_execute_header);
  qword_10199D930 = 0LL;
  qword_10199D938 = 0LL;
  qword_10199D928 = 0LL;
  uint64_t v2 = operator new(0xF8uLL);
  qword_10199D938 = (uint64_t)v2 + 248;
  v2[12] = xmmword_101359AF8;
  v2[13] = unk_101359B08;
  v2[14] = xmmword_101359B18;
  *((void *)v2 + 30) = 0x4059000000000000LL;
  v2[8] = xmmword_101359AB8;
  v2[9] = unk_101359AC8;
  v2[10] = xmmword_101359AD8;
  v2[11] = unk_101359AE8;
  v2[4] = xmmword_101359A78;
  v2[5] = unk_101359A88;
  v2[6] = xmmword_101359A98;
  v2[7] = unk_101359AA8;
  _OWORD *v2 = xmmword_101359A38;
  v2[1] = unk_101359A48;
  v2[2] = xmmword_101359A58;
  v2[3] = unk_101359A68;
  qword_10199D928 = (uint64_t)v2;
  qword_10199D930 = (uint64_t)v2 + 248;
  return __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_10199D928, (void *)&_mh_execute_header);
}

void sub_100CD8548(_Unwind_Exception *a1)
{
}

void sub_100CD8580(id a1)
{
  qword_101934998 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

double sub_100CD85AC(uint64_t a1)
{
  *(void *)a1 = 0x400000000LL;
  *(void *)(a1 + 72) = 0x500000000LL;
  *(void *)&double result = 0x700000000LL;
  *(void *)(a1 + 160) = 0x700000000LL;
  *(_WORD *)(a1 + 448) = 257;
  return result;
}

uint64_t sub_100CD85DC(uint64_t result)
{
  *(_DWORD *)double result = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_WORD *)(result + 448) = 257;
  return result;
}

uint64_t sub_100CD85F4(uint64_t a1, unint64_t a2, float *a3)
{
  if (!*(_WORD *)(a1 + 74)) {
    return 0LL;
  }
  uint64_t v5 = a1 + 80;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 72);
  unint64_t v7 = *(unsigned __int16 *)(a1 + 74) + v6 - 1;
  unint64_t v8 = *(unsigned int *)(a1 + 76);
  if (v7 < v8) {
    unint64_t v8 = 0LL;
  }
  uint64_t v9 = v5 + 16 * (v7 - v8);
  unint64_t v10 = *(void *)(v9 + 8);
  if (v10 + 500000 < a2) {
    return 0LL;
  }
  if (v10 <= a2)
  {
    float v18 = *(float *)v9;
  }

  else
  {
    if (*(void *)(v5 + 16 * v6 + 8) < a2)
    {
      unint64_t v13 = 0LL;
      while (v13 < (unint64_t)*(unsigned __int16 *)(a1 + 74) - 1)
      {
        uint64_t v14 = sub_100CD8724((unsigned __int16 *)(a1 + 72), v13 + 1);
        float v15 = *(float *)v14;
        unint64_t v16 = *(void *)(v14 + 8);
        uint64_t v17 = sub_100CD8724((unsigned __int16 *)(a1 + 72), v13++);
        if (v16 > a2)
        {
          float v18 = *(float *)v17
          goto LABEL_14;
        }
      }

      return 1LL;
    }

    float v18 = *(float *)(v5 + 16 * v6);
  }

uint64_t sub_100CD8724(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187DA18);
    }
    unint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v16 = a2;
      __int16 v17 = 1024;
      int v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187DA18);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v11 = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 1024;
      int v14 = v9;
      unint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQ ueue.h, line 233,i,%zu,capacity,%u.",  (size_t)&v11,  18);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CMElevationSample>::operator[](const size_t) const [T = CMElevationSample]",  "%s\n",  v10);
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

unsigned __int16 *sub_100CD891C(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  if (!*((_BYTE *)a1 + 448))
  {
    unint64_t v16 = *a1 + (unint64_t)a1[1] - 1;
    unint64_t v17 = *((unsigned int *)a1 + 1);
    if (v16 < v17) {
      unint64_t v17 = 0LL;
    }
    if (*(void *)(a2 + 8) > *(void *)&a1[8 * (v16 - v17) + 8]) {
      goto LABEL_14;
    }
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187DA18);
    }
    int v18 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a2 + 8);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "fElevationBuffer timestamp did not move forward, timestamp, %llu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187DA18);
      }
      uint64_t v28 = *(void *)(a2 + 8);
      int v32 = 134217984;
      uint64_t v33 = v28;
      uint64_t v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "fElevationBuffer timestamp did not move forward, timestamp, %llu",  &v32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CMFilteredElevationStepHistory::update(const CMElevationSample &, const CMStepCountSample &)",  "%s\n",  v29);
    }

    sub_100CD85DC((uint64_t)a1);
    if (!*((_BYTE *)a1 + 448))
    {
LABEL_14:
      unint64_t v20 = a1[80] + (unint64_t)a1[81] - 1;
      unint64_t v21 = *((unsigned int *)a1 + 41);
      if (v20 < v21) {
        unint64_t v21 = 0LL;
      }
      if (*(void *)(a3 + 8) <= *(void *)&a1[20 * (v20 - v21) + 88])
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10187DA18);
        }
        int v22 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = *(void *)(a3 + 8);
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "fStepHistory timestamp did not move forward, timestamp, %llu",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10187DA18);
          }
          uint64_t v30 = *(void *)(a3 + 8);
          int v32 = 134217984;
          uint64_t v33 = v30;
          unint64_t v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "fStepHistory timestamp did not move forward, timestamp, %llu",  &v32);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CMFilteredElevationStepHistory::update(const CMElevationSample &, const CMStepCountSample &)",  "%s\n",  v31);
        }

        sub_100CD85DC((uint64_t)a1);
      }
    }
  }

  sub_100CD8DC4(a1 + 80, (__int128 *)a3);
  double result = sub_100483268(a1, (_OWORD *)a2);
  *((_BYTE *)a1 + 448) = 0;
  if (*((_DWORD *)a1 + 1) == a1[1])
  {
    uint64_t v7 = sub_100CD8724(a1, 0LL);
    float v8 = *(float *)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v10 = sub_100CD8724(a1, 1uLL);
    float v11 = *(float *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = sub_100CD8724(a1, 2uLL);
    if (*((_BYTE *)a1 + 449))
    {
      float v14 = (float)(v8 + v11) * 0.5;
      unint64_t v15 = (unint64_t)(v12 + v9) >> 1;
    }

    else
    {
      unint64_t v24 = a1[36] + (unint64_t)a1[37] - 1;
      unint64_t v25 = *((unsigned int *)a1 + 19);
      if (v24 < v25) {
        unint64_t v25 = 0LL;
      }
      uint64_t v26 = (uint64_t)&a1[8 * (v24 - v25) + 36];
      float v14 = *(float *)(v26 + 8);
      unint64_t v15 = *(void *)(v26 + 16);
    }

    unint64_t v27 = (unint64_t)(*(void *)(v13 + 8) + v12) >> 1;
    *(float *)buf = v14 + (float)((float)((float)(sub_100CD8E34(a1) - v14) * (float)(v12 - v15)) / (float)(v27 - v15));
    *(void *)&buf[8] = v12;
    double result = sub_100483268(a1 + 36, buf);
    *((_BYTE *)a1 + 449) = 0;
  }

  return result;
}

unsigned __int16 *sub_100CD8DC4(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0LL;
  }
  unint64_t v4 = &result[20 * (v3 - v2)];
  __int128 v6 = *a2;
  __int128 v5 = a2[1];
  *((void *)v4 + 5) = *((void *)a2 + 4);
  *(_OWORD *)(v4 + 4) = v6;
  *(_OWORD *)(v4 + 12) = v5;
  unsigned int v7 = result[1];
  unint64_t v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    unint64_t v9 = *result + 1LL;
    if (v9 < v8) {
      LOWORD(v8) = 0;
    }
    unsigned __int16 *result = v9 - v8;
  }

  else
  {
    result[1] = v7 + 1;
  }

  return result;
}

float sub_100CD8E34(unsigned __int16 *a1)
{
  if (a1[1] > 2u) {
    goto LABEL_2;
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187DA18);
  }
  __int128 v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    uint64_t v7 = a1[1];
    *(_DWORD *)buf = 134217984;
    uint64_t v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Assertion failed: fElevationBuffer.size() > 2, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFil teredElevationStepHistory.cpp, line 183,fElevationBufferSize,%zu.",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187DA18);
    }
    uint64_t v8 = a1[1];
    int v10 = 134217984;
    uint64_t v11 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: fElevationBuffer.size() > 2, file /Library/Caches/com.apple.xbs/Sources/CoreLocatio n/Oscar/CMFilteredElevationStepHistory.cpp, line 183,fElevationBufferSize,%zu.",  (size_t)&v10);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "float CMFilteredElevationStepHistory::elevationBufferMedian() const",  "%s\n",  v9);
  }

  if (a1[1])
  {
LABEL_2:
    unint64_t v2 = 0LL;
    float v3 = 0.0;
    do
      float v3 = v3 + *(float *)sub_100CD8724(a1, v2++);
    while (v2 < a1[1]);
  }

  else
  {
    float v3 = 0.0;
  }

  float v4 = COERCE_FLOAT(sub_100CD90AC(a1, (unsigned int (*)(void, uint64_t, uint64_t, uint64_t))sub_100CD92B8, 0LL));
  return (float)((float)(v3 - v4)
}

void sub_100CD9080(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100CD90AC( unsigned __int16 *a1, unsigned int (*a2)(void, uint64_t, uint64_t, uint64_t), unint64_t a3)
{
  unint64_t v6 = a1[1];
  if (!a1[1])
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187DA18);
    }
    float v14 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187DA18);
      }
      v16[0] = 0;
      unint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.",  v16,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T CMQueue<CMElevationSample>::getComparison(int (*)(const T, const T), size_t) const [T = CMElevationSample]",  "%s\n",  v15);
    }
  }

  uint64_t v7 = (uint64_t *)sub_100CD8724(a1, a3);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v6 > a3)
  {
    do
    {
      int v10 = (void *)sub_100CD8724(a1, a3);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      if (a2(*v10, v12, v8, v9))
      {
        uint64_t v8 = v11;
        uint64_t v9 = v12;
      }

      ++a3;
    }

    while (v6 != a3);
  }

  return v8;
}

BOOL sub_100CD92B8(int a1, uint64_t a2, int a3)
{
  return *(float *)&a3 < *(float *)&a1;
}

BOOL sub_100CD92CC(int a1, uint64_t a2, int a3)
{
  return *(float *)&a1 < *(float *)&a3;
}

uint64_t sub_100CD92E0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199DBD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199DBD0))
  {
    word_10199DBC8 = sub_100CD938C();
    __cxa_guard_release(&qword_10199DBD0);
  }

  if (HIBYTE(word_10199DBC8)) {
    return (_BYTE)word_10199DBC8 != 0;
  }
  sub_1004F2598();
  if ((sub_1004F7000() & 1) != 0) {
    return 1LL;
  }
  sub_1004F2598();
  return sub_1004F75F8();
}

void sub_100CD9374(_Unwind_Exception *a1)
{
}

uint64_t sub_100CD938C()
{
  HIBYTE(v12) = 0;
  sub_1002F0B04(buf);
  int v0 = sub_1002A6F64(*(uint64_t *)&buf[0], "EnableAONSenseWiFiLeech", (BOOL *)&v12 + 7);
  int v1 = v0;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (*((void *)&buf[0] + 1))
  {
    float v3 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v1) {
        goto LABEL_6;
      }
LABEL_16:
      int v7 = 0;
      int v8 = 0;
      return v8 | (v7 << 8);
    }
  }

  if (!v0) {
    goto LABEL_16;
  }
LABEL_6:
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187DA38);
  }
  __int128 v5 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12)) {
      unint64_t v6 = "true";
    }
    else {
      unint64_t v6 = "false";
    }
    LODWORD(buf[0]) = 136380675;
    *(void *)((char *)buf + 4) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning defaults write EnableAONSenseWiFiLeech to %{private}s",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187DA38);
    }
    if (HIBYTE(v12)) {
      int v10 = "true";
    }
    else {
      int v10 = "false";
    }
    int v13 = 136380675;
    float v14 = v10;
    LODWORD(v12) = 12;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "#Warning defaults write EnableAONSenseWiFiLeech to %{private}s",  &v13,  v12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<BOOL> isAonsensedScanRequestEnabledByDefaultsWrite()",  "%s\n",  v11);
  }

  int v7 = 1;
  int v8 = HIBYTE(v12);
  return v8 | (v7 << 8);
}

void sub_100CD95E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100CD95FC(unsigned int a1)
{
  unsigned int v2 = *((unsigned __int8 *)sub_100F4CDA4() + 2);
  unsigned int v3 = *((unsigned __int8 *)sub_100F4CDA4() + 3);
  return sub_100CD9630(a1, v2, v3);
}

uint64_t sub_100CD9630(unsigned int a1, unsigned int a2, unsigned int a3)
{
  if (a1 == 1)
  {
    sub_1002F0B04(buf);
    else {
      uint64_t v5 = a3;
    }
    unint64_t v6 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
    if (*((void *)&buf[0] + 1))
    {
      int v10 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
      do
        unint64_t v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
LABEL_16:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

  else if (a1 == 2)
  {
    sub_1002F0B04(buf);
    else {
      uint64_t v5 = a2;
    }
    unint64_t v6 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
    if (*((void *)&buf[0] + 1))
    {
      int v7 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      goto LABEL_16;
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187DA38);
    }
    uint64_t v11 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = sub_10099EC00(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "@Wsb, warning, unsupported WSB scan source %{public}s",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187DA38);
      }
      uint64_t v13 = qword_101934858;
      int v15 = 136446210;
      unint64_t v16 = sub_10099EC00(a1);
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v13,  16LL,  "@Wsb, warning, unsupported WSB scan source %{public}s",  &v15,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL skipScanSource(const CLWifiService_Type::ScanSource, const BOOL, const BOOL)",  "%s\n",  v14);
    }

    return 0LL;
  }

  return v5;
}

void sub_100CD98D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100CD98F0(unsigned int a1)
{
  unsigned int v2 = *(unsigned __int8 *)sub_100F4CDA4();
  unsigned int v3 = *((unsigned __int8 *)sub_100F4CDA4() + 1);
  return sub_100CD9630(a1, v2, v3);
}

uint64_t sub_100CD9924(unsigned int a1)
{
  int v2 = sub_1004F260C();
  unsigned int v3 = (unsigned __int8 *)sub_100F4CDA4();
  if (v2)
  {
    int v4 = v3[6];
    uint64_t v5 = (unsigned __int8 *)sub_100F4CDA4() + 7;
  }

  else
  {
    int v4 = v3[4];
    uint64_t v5 = (unsigned __int8 *)sub_100F4CDA4() + 5;
  }

  return sub_100CD9630(a1, v4 != 0, *v5);
}

void sub_100CD9980(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100CD99AC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      int v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)int v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100CD9A48(_Unwind_Exception *a1)
{
}

void sub_100CD9A60()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      int v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100CD9AEC(_Unwind_Exception *a1)
{
}

void sub_100CDA0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100CDA72C(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t *sub_100CDA75C(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  uint64_t v3 = a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = 0xC6A4A7935BD1E995LL
     * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v3) ^ ((0xC6A4A7935BD1E995LL * v3) >> 47))) ^ (0x35A98F4D286A90B9LL * ((0xC6A4A7935BD1E995LL * v4) ^ ((0xC6A4A7935BD1E995LL * v4) >> 47)) + 3864292196u))
     + 3864292196u;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0xC6A4A7935BD1E995LL
       * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v3) ^ ((0xC6A4A7935BD1E995LL * v3) >> 47))) ^ (0x35A98F4D286A90B9LL * ((0xC6A4A7935BD1E995LL * v4) ^ ((0xC6A4A7935BD1E995LL * v4) >> 47)) + 3864292196u))
       + 3864292196u;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  unint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  for (double result = *v8; result; double result = (uint64_t *)*result)
  {
    unint64_t v10 = result[1];
    if (v5 == v10)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v4 && *((_DWORD *)result + 5) == (_DWORD)v3) {
        return result;
      }
    }

    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v2) {
          v10 %= *(void *)&v2;
        }
      }

      else
      {
        v10 &= *(void *)&v2 - 1LL;
      }

      if (v10 != v7) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100CDA860()
{
  qword_10199DBE0 = 0LL;
  qword_10199DBE8 = 0LL;
  qword_10199DBD8 = 0LL;
  qword_10199DBD8 = (uint64_t)operator new(0x284uLL);
  uint64_t v0 = qword_10199DBD8 + 644;
  qword_10199DBE8 = qword_10199DBD8 + 644;
  memcpy((void *)qword_10199DBD8, &unk_101359B68, 0x284uLL);
  qword_10199DBE0 = v0;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199DBD8, (void *)&_mh_execute_header);
  qword_10199DBF8 = 0LL;
  qword_10199DC00 = 0LL;
  qword_10199DBF0 = 0LL;
  qword_10199DBF0 = (uint64_t)operator new(0x284uLL);
  uint64_t v1 = qword_10199DBF0 + 644;
  qword_10199DC00 = qword_10199DBF0 + 644;
  memcpy((void *)qword_10199DBF0, &unk_101359DEC, 0x284uLL);
  qword_10199DBF8 = v1;
  qword_10199DC10 = 0LL;
  qword_10199DC18 = 0LL;
  qword_10199DC08 = 0LL;
  qword_10199DC08 = (uint64_t)operator new(0x284uLL);
  uint64_t v2 = qword_10199DC08 + 644;
  qword_10199DC18 = qword_10199DC08 + 644;
  memcpy((void *)qword_10199DC08, &unk_10135A070, 0x284uLL);
  qword_10199DC10 = v2;
  __cxa_atexit((void (*)(void *))sub_10078CEA0, &qword_10199DBF0, (void *)&_mh_execute_header);
  qword_10199DC28 = 0LL;
  qword_10199DC30 = 0LL;
  qword_10199DC20 = 0LL;
  qword_10199DC20 = (uint64_t)operator new(0x284uLL);
  uint64_t v3 = qword_10199DC20 + 644;
  qword_10199DC30 = qword_10199DC20 + 644;
  memcpy((void *)qword_10199DC20, &unk_101359DEC, 0x284uLL);
  qword_10199DC28 = v3;
  qword_10199DC40 = 0LL;
  qword_10199DC48 = 0LL;
  qword_10199DC38 = 0LL;
  qword_10199DC38 = (uint64_t)operator new(0x284uLL);
  uint64_t v4 = qword_10199DC38 + 644;
  qword_10199DC48 = qword_10199DC38 + 644;
  memcpy((void *)qword_10199DC38, &unk_10135A070, 0x284uLL);
  qword_10199DC40 = v4;
  __cxa_atexit((void (*)(void *))sub_10078CEA0, &qword_10199DC20, (void *)&_mh_execute_header);
  v6[0] = 0x7800000001LL;
  v6[1] = &qword_10199DC20;
  v6[2] = 0x7A00000001LL;
  v6[3] = &qword_10199DC20;
  v6[4] = 0x7900000001LL;
  v6[5] = &qword_10199DC20;
  v6[6] = 0x7B00000001LL;
  v6[7] = &qword_10199DC20;
  v6[8] = 0x7800000004LL;
  v6[9] = &qword_10199DC20;
  v6[10] = 0x7A00000004LL;
  v6[11] = &qword_10199DC20;
  v6[12] = 0x7900000004LL;
  v6[13] = &qword_10199DC20;
  v6[14] = 0x7B00000004LL;
  v6[15] = &qword_10199DC20;
  v6[16] = 0x7300000004LL;
  v6[17] = &qword_10199DBF0;
  v6[18] = 0x7C00000004LL;
  v6[19] = &qword_10199DBF0;
  v6[20] = 0x7300000000LL;
  v6[21] = &qword_10199DBF0;
  v6[22] = 0x7C00000000LL;
  v6[23] = &qword_10199DBF0;
  sub_10079464C((uint64_t)qword_10199DC50, (int *)v6, 12LL);
  return __cxa_atexit((void (*)(void *))sub_10078CEE0, qword_10199DC50, (void *)&_mh_execute_header);
}

void sub_100CDAABC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100CDAAF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  unint64_t v7 = 0LL;
  sub_100473DA0(a1 + 8, (uint64_t)v6, 10.0, 300.0);
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  *(void *)(a1 + 296) = 0xBFF0000000000000LL;
  *(void *)(a1 + 304) = 0x4050400000000000LL;
  *(CFAbsoluteTime *)(a1 + 312) = CFAbsoluteTimeGetCurrent();
  *(void *)(a1 + 320) = 0LL;
  *(_OWORD *)(a1 + 328) = xmmword_10135A310;
  *(_OWORD *)(a1 + 344) = unk_10135A320;
  *(_OWORD *)(a1 + 360) = xmmword_10135A330;
  *(_OWORD *)(a1 + 372) = *(__int128 *)((char *)&xmmword_10135A330 + 12);
  sub_100CDAC30((void *)a1);
  return a1;
}

void sub_100CDABE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  int v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    int v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_100CDAC30(void *a1)
{
  v69[0] = &off_10187DAC8;
  v69[1] = sub_100CDD364;
  uint64_t v70 = v69;
  sub_10079ED30(a1 + 33, (uint64_t)v69);
  uint64_t v2 = v70;
  if (v70 == v69)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v69;
  }

  else
  {
    if (!v70) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 104LL))(*a1);
  v67[0] = &off_10187DB68;
  v67[1] = sub_100CDD640;
  uint64_t v68 = v67;
  sub_100CE215C((void *)(v4 + 416), (uint64_t)v67);
  unint64_t v5 = v68;
  if (v68 == v67)
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = v67;
  }

  else
  {
    if (!v68) {
      goto LABEL_11;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a1 + 120LL))(*a1);
  v65[0] = &off_10187DC18;
  v65[1] = sub_100CDDA60;
  int v66 = v65;
  sub_10079F8B0((void *)(v7 + 288), (uint64_t)v65);
  unint64_t v8 = v66;
  if (v66 == v65)
  {
    uint64_t v9 = 4LL;
    unint64_t v8 = v65;
  }

  else
  {
    if (!v66) {
      goto LABEL_16;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a1 + 112LL))(*a1);
  v63[0] = &off_10187DCB8;
  v63[1] = sub_100CDD880;
  double v64 = v63;
  sub_100CE24C0((void *)(v10 + 160), (uint64_t)v63);
  uint64_t v11 = v64;
  if (v64 == v63)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = v63;
  }

  else
  {
    if (!v64) {
      goto LABEL_21;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_21:
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a1 + 128LL))(*a1);
  v61[0] = &off_10187DD68;
  v61[1] = sub_100CDDC68;
  char v62 = v61;
  sub_100CE2778((void *)(v13 + 272), (uint64_t)v61);
  float v14 = v62;
  if (v62 == v61)
  {
    uint64_t v15 = 4LL;
    float v14 = v61;
  }

  else
  {
    if (!v62) {
      goto LABEL_26;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  uint64_t v16 = (*(uint64_t (**)(void))(*(void *)*a1 + 136LL))(*a1);
  v59[0] = &off_10187DE18;
  v59[1] = sub_100CDDE68;
  uint64_t v60 = v59;
  sub_10079F2F0((void *)(v16 + 416), (uint64_t)v59);
  unint64_t v17 = v60;
  if (v60 == v59)
  {
    uint64_t v18 = 4LL;
    unint64_t v17 = v59;
  }

  else
  {
    if (!v60) {
      goto LABEL_31;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_31:
  uint64_t v19 = (*(uint64_t (**)(void))(*(void *)*a1 + 144LL))(*a1);
  v57[0] = &off_10187DEB8;
  v57[1] = sub_100CDE098;
  char v58 = v57;
  sub_100CE2ADC((void *)(v19 + 168), (uint64_t)v57);
  unint64_t v20 = v58;
  if (v58 == v57)
  {
    uint64_t v21 = 4LL;
    unint64_t v20 = v57;
  }

  else
  {
    if (!v58) {
      goto LABEL_36;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_36:
  uint64_t v22 = (*(uint64_t (**)(void))(*(void *)*a1 + 152LL))(*a1);
  v55[0] = &off_10187DF68;
  v55[1] = sub_100CDE270;
  double v56 = v55;
  sub_100CE2D94((void *)(v22 + 136), (uint64_t)v55);
  uint64_t v23 = v56;
  if (v56 == v55)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = v55;
  }

  else
  {
    if (!v56) {
      goto LABEL_41;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_41:
  uint64_t v25 = (*(uint64_t (**)(void))(*(void *)*a1 + 160LL))(*a1);
  v53[0] = &off_10187E018;
  v53[1] = sub_100CDE448;
  double v54 = v53;
  sub_10079FB90((void *)(v25 + 168), (uint64_t)v53);
  uint64_t v26 = v54;
  if (v54 == v53)
  {
    uint64_t v27 = 4LL;
    uint64_t v26 = v53;
  }

  else
  {
    if (!v54) {
      goto LABEL_46;
    }
    uint64_t v27 = 5LL;
  }

  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_46:
  uint64_t v28 = (*(uint64_t (**)(void))(*(void *)*a1 + 168LL))(*a1);
  v51[0] = &off_10187E0B8;
  v51[1] = sub_100CDE658;
  double v52 = v51;
  sub_100CE30F8((void *)(v28 + 248), (uint64_t)v51);
  uint64_t v29 = v52;
  if (v52 == v51)
  {
    uint64_t v30 = 4LL;
    uint64_t v29 = v51;
  }

  else
  {
    if (!v52) {
      goto LABEL_51;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_51:
  uint64_t v31 = (*(uint64_t (**)(void))(*(void *)*a1 + 176LL))(*a1);
  v49[0] = &off_10187E168;
  v49[1] = sub_100CDE838;
  double v50 = v49;
  sub_100CE33B0((void *)(v31 + 112), (uint64_t)v49);
  int v32 = v50;
  if (v50 == v49)
  {
    uint64_t v33 = 4LL;
    int v32 = v49;
  }

  else
  {
    if (!v50) {
      goto LABEL_56;
    }
    uint64_t v33 = 5LL;
  }

  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_56:
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)*a1 + 192LL))(*a1);
  v47[0] = &off_10187E208;
  v47[1] = sub_100CDEA38;
  unint64_t v48 = v47;
  sub_100CE3668((void *)(v34 + 112), (uint64_t)v47);
  uint64_t v35 = v48;
  if (v48 == v47)
  {
    uint64_t v36 = 4LL;
    uint64_t v35 = v47;
  }

  else
  {
    if (!v48) {
      goto LABEL_61;
    }
    uint64_t v36 = 5LL;
  }

  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_61:
  uint64_t v37 = (*(uint64_t (**)(void))(*(void *)*a1 + 200LL))(*a1);
  v45[0] = &off_10187E2B8;
  v45[1] = sub_100CDEC08;
  unint64_t v46 = v45;
  sub_100CE3920((void *)(v37 + 136), (uint64_t)v45);
  unsigned int v38 = v46;
  if (v46 == v45)
  {
    uint64_t v39 = 4LL;
    unsigned int v38 = v45;
  }

  else
  {
    if (!v46) {
      goto LABEL_66;
    }
    uint64_t v39 = 5LL;
  }

  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_66:
  uint64_t v40 = (*(uint64_t (**)(void))(*(void *)*a1 + 184LL))(*a1);
  v43[0] = &off_10187E368;
  v43[1] = sub_100CDEE58;
  uint64_t v44 = v43;
  sub_100CE3BD8((void *)(v40 + 120), (uint64_t)v43);
  double result = v44;
  if (v44 == v43)
  {
    uint64_t v42 = 4LL;
    double result = v43;
  }

  else
  {
    if (!v44) {
      return result;
    }
    uint64_t v42 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v42))();
}

void sub_100CDB228( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
  uint64_t v43 = a13;
  if (a13 == v41)
  {
    uint64_t v44 = 4LL;
    uint64_t v43 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v44 = 5LL;
  }

  (*(void (**)(void))(*(void *)v43 + 8 * v44))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CDB3D8(double *a1, uint64_t a2, double *a3)
{
  double v4 = a1[14];
  char v5 = v4 != -1.0;
  if (v4 != -1.0 && v4 > -1.79769313e308) {
    double v6 = a1[14];
  }
  else {
    double v6 = -1.79769313e308;
  }
  uint64_t v7 = *(_DWORD **)a2;
  unint64_t v8 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v8)
  {
    do
    {
      switch(*v7)
      {
        case 1:
          double v10 = *(double *)((*(uint64_t (**)(void))(**(void **)a1 + 104LL))(*(void *)a1) + 360);
          goto LABEL_20;
        case 2:
          uint64_t v11 = *(uint64_t (**)(void))(**(void **)a1 + 120LL);
          goto LABEL_19;
        case 3:
          uint64_t v12 = *(uint64_t (**)(void))(**(void **)a1 + 112LL);
          goto LABEL_15;
        case 4:
          double v10 = *(double *)((*(uint64_t (**)(void))(**(void **)a1 + 128LL))(*(void *)a1) + 104);
          goto LABEL_20;
        case 5:
          uint64_t v11 = *(uint64_t (**)(void))(**(void **)a1 + 144LL);
          goto LABEL_19;
        case 6:
          uint64_t v11 = *(uint64_t (**)(void))(**(void **)a1 + 152LL);
          goto LABEL_19;
        case 7:
          uint64_t v11 = *(uint64_t (**)(void))(**(void **)a1 + 160LL);
          goto LABEL_19;
        case 8:
          uint64_t v11 = *(uint64_t (**)(void))(**(void **)a1 + 136LL);
          goto LABEL_19;
        case 9:
          uint64_t v12 = *(uint64_t (**)(void))(**(void **)a1 + 168LL);
LABEL_15:
          double v10 = *(double *)(v12() + 136);
          goto LABEL_20;
        case 0xA:
          uint64_t v11 = *(uint64_t (**)(void))(**(void **)a1 + 176LL);
          goto LABEL_19;
        case 0xB:
          uint64_t v11 = *(uint64_t (**)(void))(**(void **)a1 + 192LL);
          goto LABEL_19;
        case 0xC:
          uint64_t v11 = *(uint64_t (**)(void))(**(void **)a1 + 200LL);
LABEL_19:
          double v10 = *(double *)(v11() + 96);
LABEL_20:
          if (v10 != -1.0 && v10 > v6) {
            double v6 = v10;
          }
          v5 &= v10 != -1.0;
          break;
        default:
          break;
      }

      ++v7;
    }

    while (v7 != v8);
  }

  *a3 = v6;
  return v5 & 1;
}

uint64_t sub_100CDB578(double *a1, void *a2, uint64_t a3)
{
  int v6 = sub_100CDB3D8(a1, (uint64_t)a2, &v35);
  *(_OWORD *)(a3 + 132) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  memset(&v36[6], 0, 24);
  *(_OWORD *)(a3 + 992) = 0u;
  *(_OWORD *)(a3 + 1008) = 0u;
  *(_OWORD *)(a3 + 1024) = 0u;
  *(_OWORD *)(a3 + 664) = 0u;
  *(_OWORD *)(a3 + 680) = 0u;
  *(_OWORD *)(a3 + 696) = 0u;
  *(_OWORD *)(a3 + 712) = 0u;
  *(_OWORD *)(a3 + 728) = 0u;
  *(_OWORD *)(a3 + 744) = 0u;
  *(_OWORD *)(a3 + 760) = 0u;
  *(_OWORD *)(a3 + 776) = 0u;
  *(_OWORD *)(a3 + 792) = 0u;
  *(_OWORD *)(a3 + 808) = 0u;
  *(_OWORD *)(a3 + 824) = 0u;
  *(_OWORD *)(a3 + 840) = 0u;
  *(_OWORD *)(a3 + 856) = 0u;
  *(_OWORD *)(a3 + 872) = 0u;
  *(_OWORD *)(a3 + 888) = 0u;
  *(_OWORD *)(a3 + 904) = 0u;
  *(_OWORD *)(a3 + 920) = 0u;
  *(_OWORD *)(a3 + 936) = 0u;
  *(_OWORD *)(a3 + 952) = 0u;
  *(void *)(a3 + 968) = 0LL;
  *(_OWORD *)(a3 + 1184) = 0u;
  *(_OWORD *)(a3 + 1168) = 0u;
  *(_OWORD *)a3 = xmmword_1012E1E90;
  *(void *)(a3 + 16) = 0LL;
  *(_WORD *)(a3 + 148) = 0;
  *(_BYTE *)(a3 + 150) = 0;
  *(_WORD *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 160) = xmmword_1012E1E90;
  *(void *)(a3 + 176) = 0LL;
  *(_DWORD *)(a3 + 184) = 0;
  *(void *)(a3 + 224) = 0LL;
  *(_OWORD *)(a3 + 192) = 0u;
  *(void *)(a3 + 205) = 0LL;
  *(void *)(a3 + 214) = 0LL;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_BYTE *)(a3 + 248) = 0;
  *(_OWORD *)(a3 + 256) = xmmword_1012E1E90;
  *(void *)(a3 + 272) = 0LL;
  *(_DWORD *)(a3 + 280) = 0;
  *(void *)(a3 + 288) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a3 + 376) = 0;
  *(_OWORD *)(a3 + 344) = 0u;
  *(_OWORD *)(a3 + 360) = 0u;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 441) = 0u;
  *(_DWORD *)(a3 + 464) = 0;
  *(_OWORD *)(a3 + 472) = 0u;
  *(void *)(a3 + 488) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a3 + 496) = 0LL;
  *(_DWORD *)(a3 + 504) = 0;
  *(void *)(a3 + 584) = 0LL;
  *(_WORD *)(a3 + 592) = 0;
  *(_DWORD *)(a3 + 576) = 0;
  *(_OWORD *)(a3 + 544) = 0u;
  *(_OWORD *)(a3 + 560) = 0u;
  *(_OWORD *)(a3 + 512) = 0u;
  *(_OWORD *)(a3 + 528) = 0u;
  *(_OWORD *)(a3 + 608) = *(_OWORD *)&v36[14];
  *(_OWORD *)(a3 + 594) = *(_OWORD *)v36;
  *(_BYTE *)(a3 + 632) = 0;
  *(void *)(a3 + 624) = 0LL;
  *(_DWORD *)(a3 + 648) = 0;
  *(_DWORD *)(a3 + 643) = 0;
  *(void *)(a3 + 636) = 0LL;
  *(void *)(a3 + 656) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a3 + 976) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a3 + 984) = 0LL;
  *(void *)(a3 + 1040) = 0LL;
  *(void *)(a3 + 1048) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a3 + 1056) = 0LL;
  *(_DWORD *)(a3 + 1064) = 0;
  *(void *)(a3 + 1072) = 0LL;
  *(_BYTE *)(a3 + 1080) = 0;
  *(void *)(a3 + 1088) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a3 + 1096) = 0u;
  *(void *)(a3 + 1112) = 0x80000000800000LL;
  *(_OWORD *)(a3 + 1120) = 0u;
  *(_OWORD *)(a3 + 1136) = xmmword_1012E1EA0;
  *(void *)(a3 + 1152) = 0x80000000800000LL;
  *(void *)(a3 + 1160) = 0LL;
  *(void *)(a3 + 1200) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a3 + 1304) = 0;
  *(_OWORD *)(a3 + 1272) = 0u;
  *(_OWORD *)(a3 + 1288) = 0u;
  *(_OWORD *)(a3 + 1240) = 0u;
  *(_OWORD *)(a3 + 1256) = 0u;
  *(_OWORD *)(a3 + 1208) = 0u;
  *(_OWORD *)(a3 + 1224) = 0u;
  *(void *)(a3 + 1312) = 0xFFEFFFFFFFFFFFFFLL;
  *(_WORD *)(a3 + 1320) = 0;
  *(_DWORD *)(a3 + 1324) = 0;
  *(void *)(a3 + 1328) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a3 + 1336) = 7LL;
  *(void *)(a3 + 1344) = 0xFFEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a3 + 1352) = 0;
  *(void *)(a3 + 1372) = 0LL;
  *(_OWORD *)(a3 + 1356) = 0u;
  uint64_t v7 = (_DWORD *)*a2;
  unint64_t v8 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v8)
  {
    double v9 = v35;
    do
    {
      switch(*v7)
      {
        case 0:
          v6 &= sub_10079897C((uint64_t)(a1 + 1), (_OWORD *)a3, v9);
          sub_10046E868((uint64_t)(a1 + 1));
          break;
        case 1:
          uint64_t v10 = (*(uint64_t (**)(void))(**(void **)a1 + 104LL))(*(void *)a1);
          v6 &= sub_100CDBB20(v10, (_OWORD *)(a3 + 160), v9);
          uint64_t v11 = (*(uint64_t (**)(void))(**(void **)a1 + 104LL))(*(void *)a1);
          sub_100CDBBFC(v11);
          break;
        case 2:
          uint64_t v12 = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))(*(void *)a1);
          v6 &= sub_100798BA4(v12, (_OWORD *)(a3 + 288), v9);
          uint64_t v13 = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))(*(void *)a1);
          sub_10046E868(v13);
          break;
        case 3:
          uint64_t v14 = (*(uint64_t (**)(void))(**(void **)a1 + 112LL))(*(void *)a1);
          v6 &= sub_100CDBC74(v14, (_OWORD *)(a3 + 224), v9);
          uint64_t v15 = (*(uint64_t (**)(void))(**(void **)a1 + 112LL))(*(void *)a1);
          sub_10046E868(v15);
          break;
        case 4:
          uint64_t v16 = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))(*(void *)a1);
          v6 &= sub_100CDBD50(v16, (_OWORD *)(a3 + 480), v9);
          uint64_t v17 = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))(*(void *)a1);
          sub_10046E868(v17);
          break;
        case 5:
          uint64_t v18 = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))(*(void *)a1);
          v6 &= sub_100CDBE80(v18, a3 + 976, v9);
          uint64_t v19 = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))(*(void *)a1);
          sub_10046E868(v19);
          break;
        case 6:
          uint64_t v20 = (*(uint64_t (**)(void))(**(void **)a1 + 152LL))(*(void *)a1);
          v6 &= sub_100CDBF94(v20, a3 + 1048, v9);
          uint64_t v21 = (*(uint64_t (**)(void))(**(void **)a1 + 152LL))(*(void *)a1);
          sub_10046E868(v21);
          break;
        case 7:
          uint64_t v22 = (*(uint64_t (**)(void))(**(void **)a1 + 160LL))(*(void *)a1);
          v6 &= sub_100798CD4(v22, a3 + 1088, v9);
          uint64_t v23 = (*(uint64_t (**)(void))(**(void **)a1 + 160LL))(*(void *)a1);
          sub_10046E868(v23);
          break;
        case 8:
          uint64_t v24 = (*(uint64_t (**)(void))(**(void **)a1 + 136LL))(*(void *)a1);
          v6 &= sub_100798AA4(v24, (void *)(a3 + 656), v9);
          uint64_t v25 = (*(uint64_t (**)(void))(**(void **)a1 + 136LL))(*(void *)a1);
          sub_10046E868(v25);
          break;
        case 9:
          uint64_t v26 = (*(uint64_t (**)(void))(**(void **)a1 + 168LL))(*(void *)a1);
          v6 &= sub_100CDC098(v26, a3 + 1160, v9);
          uint64_t v27 = (*(uint64_t (**)(void))(**(void **)a1 + 168LL))(*(void *)a1);
          sub_10046E868(v27);
          break;
        case 0xA:
          uint64_t v28 = (*(uint64_t (**)(void))(**(void **)a1 + 176LL))(*(void *)a1);
          v6 &= sub_10045DF68(v28, (_OWORD *)(a3 + 1312), v9);
          uint64_t v29 = (*(uint64_t (**)(void))(**(void **)a1 + 176LL))(*(void *)a1);
          sub_10046E868(v29);
          break;
        case 0xB:
          uint64_t v30 = (*(uint64_t (**)(void))(**(void **)a1 + 192LL))(*(void *)a1);
          v6 &= sub_10045DF68(v30, (_OWORD *)(a3 + 1328), v9);
          uint64_t v31 = (*(uint64_t (**)(void))(**(void **)a1 + 192LL))(*(void *)a1);
          sub_10046E868(v31);
          break;
        case 0xC:
          uint64_t v32 = (*(uint64_t (**)(void))(**(void **)a1 + 200LL))(*(void *)a1);
          v6 &= sub_100CDC1C8(v32, a3 + 1344, v9);
          uint64_t v33 = (*(uint64_t (**)(void))(**(void **)a1 + 200LL))(*(void *)a1);
          sub_10046E868(v33);
          break;
        default:
          break;
      }

      ++v7;
    }

    while (v7 != v8);
  }

  return v6 & 1;
}

uint64_t sub_100CDBB20(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 312);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 280);
  if (*(void *)(a1 + 288) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 304);
  char v6 = v5 + v3;
  uint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 6));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + ((unint64_t)(v6 & 0x3F) << 6);
  unint64_t v10 = v5 >> 6;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 >> 6));
  uint64_t v12 = v5 & 0x3F;
  uint64_t v13 = v11 + (v12 << 6);
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4096;
      }
      double v15 = *(double *)(v14 - 56);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4096;
      }

      v9 -= 64LL;
      if (v9 == v13)
      {
        uint64_t v9 = v13;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + (v12 << 6)) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4096;
  }
  __int128 v17 = *(_OWORD *)(v9 - 64);
  __int128 v18 = *(_OWORD *)(v9 - 48);
  __int128 v19 = *(_OWORD *)(v9 - 16);
  a2[2] = *(_OWORD *)(v9 - 32);
  a2[3] = v19;
  *a2 = v17;
  a2[1] = v18;
  return 1LL;
}

uint64_t sub_100CDBBFC(uint64_t result)
{
  if (*(double *)(result + 320) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(_BYTE *)(result + 264))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
      if ((_DWORD)result)
      {
        *(_BYTE *)(v1 + 264) = 1;
      }

      else if (!*(_BYTE *)(v1 + 264))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }

    double v2 = *(double *)(v1 + 320) + 30.0;
LABEL_7:
    *(double *)(v1 + 328) = v2;
  }

  return result;
}

uint64_t sub_100CDBC74(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  char v6 = v5 + v3;
  uint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 6));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + ((unint64_t)(v6 & 0x3F) << 6);
  unint64_t v10 = v5 >> 6;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 >> 6));
  uint64_t v12 = v5 & 0x3F;
  uint64_t v13 = v11 + (v12 << 6);
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4096;
      }
      double v15 = *(double *)(v14 - 24);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4096;
      }

      v9 -= 64LL;
      if (v9 == v13)
      {
        uint64_t v9 = v13;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + (v12 << 6)) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4096;
  }
  __int128 v17 = *(_OWORD *)(v9 - 64);
  __int128 v18 = *(_OWORD *)(v9 - 48);
  __int128 v19 = *(_OWORD *)(v9 - 16);
  a2[2] = *(_OWORD *)(v9 - 32);
  a2[3] = v19;
  *a2 = v17;
  a2[1] = v18;
  return 1LL;
}

uint64_t sub_100CDBD50(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  uint64_t v7 = (uint64_t *)(v4 + 8 * (v6 / 0x17));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 176 * (v6 % 0x17);
  unint64_t v10 = v5 / 0x17;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x17));
  unint64_t v12 = v5 % 0x17;
  uint64_t v13 = v11 + 176 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4048;
      }
      double v15 = *(double *)(v14 - 168);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4048;
      }

      v9 -= 176LL;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 176 * v12;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 176 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4048;
  }
  __int128 v17 = *(_OWORD *)(v9 - 176);
  __int128 v18 = *(_OWORD *)(v9 - 144);
  a2[1] = *(_OWORD *)(v9 - 160);
  a2[2] = v18;
  *a2 = v17;
  __int128 v19 = *(_OWORD *)(v9 - 128);
  __int128 v20 = *(_OWORD *)(v9 - 112);
  __int128 v21 = *(_OWORD *)(v9 - 80);
  a2[5] = *(_OWORD *)(v9 - 96);
  a2[6] = v21;
  a2[3] = v19;
  a2[4] = v20;
  __int128 v22 = *(_OWORD *)(v9 - 64);
  __int128 v23 = *(_OWORD *)(v9 - 48);
  __int128 v24 = *(_OWORD *)(v9 - 16);
  a2[9] = *(_OWORD *)(v9 - 32);
  a2[10] = v24;
  a2[7] = v22;
  a2[8] = v23;
  return 1LL;
}

uint64_t sub_100CDBE80(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = v5 + v3;
  unint64_t v7 = (v5 + v3) / 0x38;
  uint64_t v8 = (uint64_t *)(v4 + 8 * v7);
  uint64_t v9 = *v8;
  uint64_t v10 = *v8 + 72 * (v6 - 56 * v7);
  unint64_t v11 = v5 / 0x38;
  uint64_t v12 = *(void *)(v4 + 8 * (v5 / 0x38));
  unint64_t v13 = v5 % 0x38;
  uint64_t v14 = v12 + 72 * v13;
  if (v10 != v14)
  {
    while (1)
    {
      uint64_t v15 = v10;
      if (v10 == v9) {
        uint64_t v15 = *(v8 - 1) + 4032;
      }
      double v16 = *(double *)(v15 - 72);
      if (v10 == v9)
      {
        uint64_t v17 = *--v8;
        uint64_t v9 = v17;
        uint64_t v10 = v17 + 4032;
      }

      v10 -= 72LL;
      if (v10 == v14)
      {
        uint64_t v10 = v12 + 72 * v13;
        break;
      }
    }
  }

  if (v10 == *(void *)(v4 + 8 * v11) + 72 * v13) {
    return 0LL;
  }
  if (v10 == *v8) {
    uint64_t v10 = *(v8 - 1) + 4032;
  }
  *(_OWORD *)a2 = *(_OWORD *)(v10 - 72);
  __int128 v18 = *(_OWORD *)(v10 - 56);
  __int128 v19 = *(_OWORD *)(v10 - 40);
  __int128 v20 = *(_OWORD *)(v10 - 24);
  *(void *)(a2 + 64) = *(void *)(v10 - 8);
  *(_OWORD *)(a2 + 32) = v19;
  *(_OWORD *)(a2 + 48) = v20;
  *(_OWORD *)(a2 + 16) = v18;
  return 1LL;
}

uint64_t sub_100CDBF94(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) / 0x66));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 40 * (v6 % 0x66);
  unint64_t v10 = v5 / 0x66;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x66));
  unint64_t v12 = v5 % 0x66;
  uint64_t v13 = v11 + 40 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4080;
      }
      double v15 = *(double *)(v14 - 40);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4080;
      }

      v9 -= 40LL;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 40 * v12;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 40 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4080;
  }
  __int128 v17 = *(_OWORD *)(v9 - 40);
  __int128 v18 = *(_OWORD *)(v9 - 24);
  *(void *)(a2 + 32) = *(void *)(v9 - 8);
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  return 1LL;
}

uint64_t sub_100CDC098(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * (v6 / 0x1A));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 152 * (v6 % 0x1A);
  unint64_t v10 = v5 / 0x1A;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x1A));
  unint64_t v12 = v5 % 0x1A;
  uint64_t v13 = v11 + 152 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 3952;
      }
      double v15 = *(double *)(v14 - 112);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 3952;
      }

      v9 -= 152LL;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 152 * v12;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 152 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 3952;
  }
  __int128 v17 = *(_OWORD *)(v9 - 136);
  *(_OWORD *)a2 = *(_OWORD *)(v9 - 152);
  *(_OWORD *)(a2 + 16) = v17;
  __int128 v18 = *(_OWORD *)(v9 - 120);
  __int128 v19 = *(_OWORD *)(v9 - 104);
  __int128 v20 = *(_OWORD *)(v9 - 72);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v9 - 88);
  *(_OWORD *)(a2 + 80) = v20;
  *(_OWORD *)(a2 + 32) = v18;
  *(_OWORD *)(a2 + 48) = v19;
  __int128 v21 = *(_OWORD *)(v9 - 56);
  __int128 v22 = *(_OWORD *)(v9 - 40);
  __int128 v23 = *(_OWORD *)(v9 - 24);
  *(void *)(a2 + 144) = *(void *)(v9 - 8);
  *(_OWORD *)(a2 + 112) = v22;
  *(_OWORD *)(a2 + 128) = v23;
  *(_OWORD *)(a2 + 96) = v21;
  return 1LL;
}

uint64_t sub_100CDC1C8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) / 0x66));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 40 * (v6 % 0x66);
  unint64_t v10 = v5 / 0x66;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x66));
  unint64_t v12 = v5 % 0x66;
  uint64_t v13 = v11 + 40 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4080;
      }
      double v15 = *(double *)(v14 - 40);
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4080;
      }

      v9 -= 40LL;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 40 * v12;
        break;
      }
    }
  }

  if (v9 == *(void *)(v4 + 8 * v10) + 40 * v12) {
    return 0LL;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4080;
  }
  __int128 v17 = *(_OWORD *)(v9 - 40);
  __int128 v18 = *(_OWORD *)(v9 - 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v9 - 8);
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  return 1LL;
}

void sub_100CDC2CC(void *a1, uint64_t *a2, uint64_t a3)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  unint64_t v6 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
  {
    else {
      unint64_t v7 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v68 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "logLatestTime for %s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    else {
      double v63 = (uint64_t *)*a2;
    }
    int v65 = 136315138;
    int v66 = v63;
    double v64 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "logLatestTime for %s",  (const char *)&v65);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictorInputs::logLatestTimes(const std::string &, const std::vector<Type> &) const",  "%s\n",  v64);
  }

  uint64_t v8 = *(_DWORD **)a3;
  uint64_t v9 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 != v9)
  {
    do
    {
      switch(*v8)
      {
        case 0:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          unint64_t v10 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            uint64_t v11 = (uint64_t *)a1[14];
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Activity,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            unint64_t v12 = (uint64_t *)a1[14];
            int v65 = 134217984;
            int v66 = v12;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "Activity,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 1:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          uint64_t v14 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            double v15 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 104LL))(*a1) + 360);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Elevation,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v16 = qword_101934688;
            __int128 v17 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 104LL))(*a1) + 360);
            int v65 = 134217984;
            int v66 = v17;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  1LL,  "Elevation,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 2:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          __int128 v18 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            __int128 v19 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 120LL))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GPS,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v20 = qword_101934688;
            __int128 v21 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 120LL))(*a1) + 96);
            int v65 = 134217984;
            int v66 = v21;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  1LL,  "GPS,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 3:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          __int128 v22 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            __int128 v23 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 112LL))(*a1) + 136);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "HR,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v24 = qword_101934688;
            uint64_t v25 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 112LL))(*a1) + 136);
            int v65 = 134217984;
            int v66 = v25;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  1LL,  "HR,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 4:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          uint64_t v26 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            uint64_t v27 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 128LL))(*a1) + 104);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Steps,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v28 = qword_101934688;
            uint64_t v29 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 128LL))(*a1) + 104);
            int v65 = 134217984;
            int v66 = v29;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  1LL,  "Steps,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 5:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          uint64_t v30 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            uint64_t v31 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 144LL))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Activity2,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v32 = qword_101934688;
            uint64_t v33 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 144LL))(*a1) + 96);
            int v65 = 134217984;
            int v66 = v33;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v32,  1LL,  "Activity2,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 6:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          uint64_t v34 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            double v35 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 152LL))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Activity2Smooth,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v36 = qword_101934688;
            uint64_t v37 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 152LL))(*a1) + 96);
            int v65 = 134217984;
            int v66 = v37;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v36,  1LL,  "Activity2Smooth,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 7:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          unsigned int v38 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            uint64_t v39 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 160LL))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v39;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Turns,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v40 = qword_101934688;
            int v41 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 160LL))(*a1) + 96);
            int v65 = 134217984;
            int v66 = v41;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v40,  1LL,  "Turns,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 8:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          uint64_t v42 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            uint64_t v43 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 136LL))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "ExtendedSteps,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v44 = qword_101934688;
            uint64_t v45 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 136LL))(*a1) + 96);
            int v65 = 134217984;
            int v66 = v45;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v44,  1LL,  "ExtendedSteps,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 9:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          unint64_t v46 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            char v47 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 168LL))(*a1) + 136);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v47;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Swim,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v48 = qword_101934688;
            uint64_t v49 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 168LL))(*a1) + 136);
            int v65 = 134217984;
            int v66 = v49;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  1LL,  "Swim,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 0xA:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          double v50 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            double v51 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 176LL))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v51;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "WatchPressure,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v52 = qword_101934688;
            double v53 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 176LL))(*a1) + 96);
            int v65 = 134217984;
            int v66 = v53;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v52,  1LL,  "WatchPressure,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 0xB:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          double v54 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            double v55 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 192LL))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v55;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "CyclingState,lastTime,%f", buf, 0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v56 = qword_101934688;
            double v57 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 192LL))(*a1) + 96);
            int v65 = 134217984;
            int v66 = v57;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v56,  1LL,  "CyclingState,lastTime,%f");
            goto LABEL_117;
          }

          break;
        case 0xC:
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10187DA98);
          }
          char v58 = (os_log_s *)qword_101934688;
          if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
          {
            BOOL v59 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 200LL))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            uint64_t v68 = v59;
            _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_INFO,  "Tier1CyclingFeatures,lastTime,%f",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934680 != -1) {
              dispatch_once(&qword_101934680, &stru_10187DA98);
            }
            uint64_t v60 = qword_101934688;
            double v61 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 200LL))(*a1) + 96);
            int v65 = 134217984;
            int v66 = v61;
            uint64_t v13 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v60,  1LL,  "Tier1CyclingFeatures,lastTime,%f");
LABEL_117:
            char v62 = (uint8_t *)v13;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictorInputs::logLatestTimes(const std::string &, const std::vector<Type> &) const",  "%s\n",  v13);
            if (v62 != buf) {
              free(v62);
            }
          }

          break;
        default:
          break;
      }

      ++v8;
    }

    while (v8 != v9);
  }

void sub_100CDD364(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v4 = *(unsigned __int8 *)(a1 + 144);
    double v5 = *(float *)(a1 + 112);
    double v6 = *(float *)(a1 + 116);
    double v7 = *(float *)(a1 + 132);
    double v8 = *(float *)(a1 + 136);
    double v9 = *(float *)(a1 + 128);
    double v10 = *(float *)(a1 + 124);
    double v11 = *(float *)(a1 + 120);
    int v12 = *(_DWORD *)(a1 + 140);
    *(_DWORD *)buf = 134220544;
    uint64_t v51 = v3;
    __int16 v52 = 1024;
    int v53 = LODWORD(v26[0]);
    __int16 v54 = 1024;
    int v55 = v4;
    __int16 v56 = 2048;
    double v57 = v5;
    __int16 v58 = 2048;
    double v59 = v6;
    __int16 v60 = 2048;
    double v61 = v7;
    __int16 v62 = 2048;
    double v63 = v8;
    __int16 v64 = 2048;
    double v65 = v9;
    __int16 v66 = 2048;
    double v67 = v10;
    __int16 v68 = 2048;
    double v69 = v11;
    __int16 v70 = 1024;
    int v71 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Activity,%f,type,%u,standing,%d,angeX,%f,vectorMag,%f,strokeAmp,%f,strokePwr,%f,strokeFreq,%f,machineFreq,%f,pushV ectorMag,%f,epochType,%d",  buf,  0x64u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v13 = *(void *)(a1 + 8);
    int v14 = *(unsigned __int8 *)(a1 + 144);
    double v15 = *(float *)(a1 + 112);
    double v16 = *(float *)(a1 + 116);
    double v17 = *(float *)(a1 + 132);
    double v18 = *(float *)(a1 + 136);
    double v19 = *(float *)(a1 + 128);
    double v20 = *(float *)(a1 + 124);
    double v21 = *(float *)(a1 + 120);
    int v22 = *(_DWORD *)(a1 + 140);
    int v28 = 134220544;
    uint64_t v29 = v13;
    __int16 v30 = 1024;
    int v31 = LODWORD(v26[0]);
    __int16 v32 = 1024;
    int v33 = v14;
    __int16 v34 = 2048;
    double v35 = v15;
    __int16 v36 = 2048;
    double v37 = v16;
    __int16 v38 = 2048;
    double v39 = v17;
    __int16 v40 = 2048;
    double v41 = v18;
    __int16 v42 = 2048;
    double v43 = v19;
    __int16 v44 = 2048;
    double v45 = v20;
    __int16 v46 = 2048;
    double v47 = v21;
    __int16 v48 = 1024;
    int v49 = v22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Activity,%f,type,%u,standing,%d,angeX,%f,vectorMag,%f,strokeAmp,%f,strokePwr,%f,strokeFreq,%f,machineFreq,%f,pushV ectorMag,%f,epochType,%d",  COERCE_DOUBLE(&v28),  100,  v25,  v26[0],  v26[1],  v26[2],  v26[3],  v26[4],  v26[5],  v26[6],  v27);
    uint64_t v24 = (uint8_t *)v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logActivity(const CLWorkoutPredictorActivity &)",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
  }

void sub_100CDD640(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v4 = *(_DWORD *)(a1 + 16);
    int v5 = *(_DWORD *)(a1 + 20);
    int v6 = *(_DWORD *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 134219520;
    uint64_t v32 = v3;
    __int16 v33 = 1024;
    int v34 = v4;
    __int16 v35 = 1024;
    int v36 = v5;
    __int16 v37 = 1024;
    int v38 = v6;
    __int16 v39 = 2048;
    uint64_t v40 = v7;
    __int16 v41 = 2048;
    uint64_t v42 = v3;
    __int16 v43 = 1024;
    int v44 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Elevation,%f,ascended,%d,descended,%d,gradeType,%d,verticalSpeed,%f,startTime,%f,source,%d",  buf,  0x38u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v9 = *(void *)(a1 + 8);
    int v10 = *(_DWORD *)(a1 + 16);
    int v11 = *(_DWORD *)(a1 + 20);
    int v12 = *(_DWORD *)(a1 + 24);
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = *(_DWORD *)(a1 + 40);
    int v17 = 134219520;
    uint64_t v18 = v9;
    __int16 v19 = 1024;
    int v20 = v10;
    __int16 v21 = 1024;
    int v22 = v11;
    __int16 v23 = 1024;
    int v24 = v12;
    __int16 v25 = 2048;
    uint64_t v26 = v13;
    __int16 v27 = 2048;
    uint64_t v28 = v9;
    __int16 v29 = 1024;
    int v30 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Elevation,%f,ascended,%d,descended,%d,gradeType,%d,verticalSpeed,%f,startTime,%f,source,%d",  COERCE_DOUBLE(&v17),  56);
    double v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logElevation(const CLWorkoutPredictorElevation &)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

void sub_100CDD880(void *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    *(_DWORD *)buf = 134218496;
    uint64_t v19 = v3;
    __int16 v20 = 2048;
    uint64_t v21 = v4;
    __int16 v22 = 2048;
    uint64_t v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "HeartRate,%f,hr,%f,conf,%f", buf, 0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v6 = a1[5];
    uint64_t v7 = a1[1];
    uint64_t v8 = a1[2];
    int v12 = 134218496;
    uint64_t v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    LODWORD(v11) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "HeartRate,%f,hr,%f,conf,%f",  COERCE_DOUBLE(&v12),  v11);
    int v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logHeartRate(const CLWorkoutPredictorHeartRate &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

void sub_100CDDA60(uint64_t *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    uint64_t v5 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v6 = a1[7];
    *(_DWORD *)buf = 134219008;
    uint64_t v25 = v3;
    __int16 v26 = 2048;
    uint64_t v27 = v4;
    __int16 v28 = 2048;
    uint64_t v29 = v5;
    __int16 v30 = 2048;
    uint64_t v31 = v6;
    __int16 v32 = 2048;
    uint64_t v33 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Odometer,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v7 = *a1;
    uint64_t v9 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v10 = a1[7];
    int v14 = 134219008;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    __int16 v18 = 2048;
    uint64_t v19 = v9;
    __int16 v20 = 2048;
    uint64_t v21 = v10;
    __int16 v22 = 2048;
    uint64_t v23 = v7;
    LODWORD(v13) = 52;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Odometer,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f",  COERCE_DOUBLE(&v14),  v13);
    int v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logGPS(const CLWorkoutPredictorGPS &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

void sub_100CDDC68(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 80);
    int v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)buf = 134218752;
    uint64_t v23 = v3;
    __int16 v24 = 2048;
    uint64_t v25 = v4;
    __int16 v26 = 2048;
    uint64_t v27 = v5;
    __int16 v28 = 1024;
    int v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Steps,%f,pace,%f,cadence,%f,count,%d", buf, 0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 80);
    int v10 = *(_DWORD *)(a1 + 24);
    int v14 = 134218752;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    __int16 v18 = 2048;
    uint64_t v19 = v9;
    __int16 v20 = 1024;
    int v21 = v10;
    LODWORD(v13) = 38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Steps,%f,pace,%f,cadence,%f,count,%d",  COERCE_DOUBLE(&v14),  v13);
    int v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logStep(const CLWorkoutPredictorStep &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

void sub_100CDDE68(uint64_t *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[39];
    uint64_t v5 = a1[26];
    int v6 = *((_DWORD *)a1 + 54);
    uint64_t v7 = a1[29];
    uint64_t v8 = a1[30];
    *(_DWORD *)buf = 134219264;
    uint64_t v31 = v3;
    __int16 v32 = 2048;
    uint64_t v33 = v4;
    __int16 v34 = 2048;
    uint64_t v35 = v7;
    __int16 v36 = 2048;
    uint64_t v37 = v5;
    __int16 v38 = 1024;
    int v39 = v6;
    __int16 v40 = 2048;
    uint64_t v41 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "ExtendedSteps,%f,firstStepTime,%f,lastStepTime,%f,rawPace,%f,incrementalSteps,%u,odometerSpeed,%f",  buf,  0x3Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v9 = *a1;
    uint64_t v10 = a1[39];
    uint64_t v11 = a1[26];
    int v12 = *((_DWORD *)a1 + 54);
    uint64_t v13 = a1[29];
    uint64_t v14 = a1[30];
    int v18 = 134219264;
    uint64_t v19 = v9;
    __int16 v20 = 2048;
    uint64_t v21 = v10;
    __int16 v22 = 2048;
    uint64_t v23 = v13;
    __int16 v24 = 2048;
    uint64_t v25 = v11;
    __int16 v26 = 1024;
    int v27 = v12;
    __int16 v28 = 2048;
    uint64_t v29 = v14;
    LODWORD(v17) = 58;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "ExtendedSteps,%f,firstStepTime,%f,lastStepTime,%f,rawPace,%f,incrementalSteps,%u,odometerSpeed,%f",  COERCE_DOUBLE(&v18),  v17);
    __int16 v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logExtendedStep(const CLWorkoutPredictorExtendedStep &)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

void sub_100CDE098(uint64_t *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *(_DWORD *)buf = 134218496;
    uint64_t v16 = v3;
    __int16 v17 = 2048;
    uint64_t v18 = v4;
    __int16 v19 = 2048;
    uint64_t v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activity2,%f,result,%lu,startTime,%f", buf, 0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    int v9 = 134218496;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Activity2,%f,result,%lu,startTime,%f",  COERCE_DOUBLE(&v9),  32);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logActivityTier2(const CLWorkoutPredictorActivityTier2 &)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

void sub_100CDE270(uint64_t *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *(_DWORD *)buf = 134218496;
    uint64_t v16 = v3;
    __int16 v17 = 2048;
    uint64_t v18 = v4;
    __int16 v19 = 2048;
    uint64_t v20 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Tier2Smooth,%f,result,%lu,startTime,%f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    int v9 = 134218496;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Tier2Smooth,%f,result,%lu,startTime,%f",  COERCE_DOUBLE(&v9),  32);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logActivityTier2Smoothed(const CLWorkoutPredictorActivityTier2Smoothed &)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

void sub_100CDE448(float *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)a1;
    double v4 = a1[2];
    double v5 = a1[6];
    double v6 = a1[7];
    *(_DWORD *)buf = 134218752;
    uint64_t v23 = v3;
    __int16 v24 = 2048;
    double v25 = v4;
    __int16 v26 = 2048;
    double v27 = v5;
    __int16 v28 = 2048;
    double v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Turn,%f,%f,%f,%f", buf, 0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v7 = *(void *)a1;
    double v8 = a1[2];
    double v9 = a1[6];
    double v10 = a1[7];
    int v14 = 134218752;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    double v17 = v8;
    __int16 v18 = 2048;
    double v19 = v9;
    __int16 v20 = 2048;
    double v21 = v10;
    LODWORD(v13) = 42;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Turn,%f,%f,%f,%f",  COERCE_DOUBLE(&v14),  v13);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logTurn(const CLWorkoutPredictorTurn &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

void sub_100CDE658(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = *(_DWORD *)(a1 + 100);
    int v4 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)buf = 134218496;
    uint64_t v18 = v3;
    __int16 v19 = 1024;
    int v20 = v4;
    __int16 v21 = 1024;
    int v22 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Swim,startTime,%f,strokes,%d,style,%d\n",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = *(_DWORD *)(a1 + 100);
    int v7 = *(_DWORD *)(a1 + 104);
    int v11 = 134218496;
    uint64_t v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Swim,startTime,%f,strokes,%d,style,%d\n",  COERCE_DOUBLE(&v11),  24);
    double v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logSwim(const CLWorkoutPredictorSwim &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

void sub_100CDE838(uint64_t *a1)
{
  __int16 v2 = *((_WORD *)a1 + 4);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  unsigned int v3 = v2 & 0x1000;
  int v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *a1;
    double v6 = *((float *)a1 + 3);
    *(_DWORD *)buf = 134218496;
    uint64_t v19 = v5;
    __int16 v20 = 2048;
    double v21 = v6;
    __int16 v22 = 1024;
    unsigned int v23 = v3 >> 12;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "WatchPressure,startTime,%f,averagePressure,%f,failureState,%d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v7 = *a1;
    double v8 = *((float *)a1 + 3);
    int v12 = 134218496;
    uint64_t v13 = v7;
    __int16 v14 = 2048;
    double v15 = v8;
    __int16 v16 = 1024;
    unsigned int v17 = v3 >> 12;
    LODWORD(v11) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "WatchPressure,startTime,%f,averagePressure,%f,failureState,%d",  COERCE_DOUBLE(&v12),  v11);
    double v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logWatchPressure(const CLWorkoutPredictorWatchPressure &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

void sub_100CDEA38(uint64_t *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  __int16 v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    int v4 = *((_DWORD *)a1 + 2);
    *(_DWORD *)buf = 134218240;
    uint64_t v14 = v3;
    __int16 v15 = 1024;
    int v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CyclingState,%.3f,state,%d", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v5 = *a1;
    int v6 = *((_DWORD *)a1 + 2);
    int v9 = 134218240;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "CyclingState,%.3f,state,%d",  COERCE_DOUBLE(&v9),  18);
    double v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logCyclingState(const CLWorkoutPredictorCyclingState &)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

void sub_100CDEC08(float *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  __int16 v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)a1;
    int v4 = *((unsigned __int8 *)a1 + 8);
    double v5 = a1[3];
    double v6 = a1[4];
    double v7 = a1[5];
    double v8 = a1[8];
    *(_DWORD *)buf = 134219264;
    uint64_t v30 = v3;
    __int16 v31 = 1024;
    int v32 = v4;
    __int16 v33 = 2048;
    double v34 = v5;
    __int16 v35 = 2048;
    double v36 = v6;
    __int16 v37 = 2048;
    double v38 = v7;
    __int16 v39 = 2048;
    double v40 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Tier1CyclingFeatures,%.3f,isArmConstrained,%d,accelXPowerSum,%f,grav90th_100Hz,%f,cyclingProbability,%f,pedEnergyVertical,%f",  buf,  0x3Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v9 = *(void *)a1;
    int v10 = *((unsigned __int8 *)a1 + 8);
    double v11 = a1[3];
    double v12 = a1[4];
    double v13 = a1[5];
    double v14 = a1[8];
    int v17 = 134219264;
    uint64_t v18 = v9;
    __int16 v19 = 1024;
    int v20 = v10;
    __int16 v21 = 2048;
    double v22 = v11;
    __int16 v23 = 2048;
    double v24 = v12;
    __int16 v25 = 2048;
    double v26 = v13;
    __int16 v27 = 2048;
    double v28 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Tier1CyclingFeatures,%.3f,isArmConstrained,%d,accelXPowerSum,%f,grav90th_100Hz,%f,cyclingProbability,%f,pedEnergyVertical,%f",  COERCE_DOUBLE(&v17),  58);
    int v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logTier1CyclingFeatures(const CLWorkoutPredictorTier1CyclingFeatures &)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

void sub_100CDEE58(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187DA98);
  }
  __int16 v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 134217984;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ExerciseMinute,%.3f", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187DA98);
    }
    uint64_t v4 = *(void *)(a1 + 8);
    int v7 = 134217984;
    uint64_t v8 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "ExerciseMinute,%.3f",  COERCE_DOUBLE(&v7));
    double v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWorkoutPredictorInputs::logExerciseMinute(const CLWorkoutPredictorExerciseMinute &)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

void sub_100CDF008(void *a1, __int128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 144LL))(*a1);
  sub_100CDF038(v3, a2);
}

void sub_100CDF038(uint64_t a1, __int128 *a2)
{
  __int128 v3 = a2[3];
  __int128 v21 = a2[2];
  __int128 v22 = v3;
  uint64_t v23 = *((void *)a2 + 8);
  __int128 v4 = a2[1];
  __int128 v19 = *a2;
  __int128 v20 = v4;
  uint64_t v5 = *(void *)(a1 + 192);
  if (v5) {
    (*(void (**)(uint64_t, __int128 *))(*(void *)v5 + 48LL))(v5, &v19);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    unint64_t v7 = v6 + *(void *)(a1 + 48) - 1;
    uint64_t v8 = *(void ***)(a1 + 24);
    double v9 = *((double *)v8[v7 / 0x38] + 9 * (v7 % 0x38));
    if (v9 > *(double *)&v19)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(void *)(a1 + 56) = 0LL;
      unint64_t v11 = v10 - (void)v8;
      if (v11 >= 0x11)
      {
        do
        {
          operator delete(*v8);
          uint64_t v12 = *(void *)(a1 + 32);
          uint64_t v8 = (void **)(*(void *)(a1 + 24) + 8LL);
          *(void *)(a1 + 24) = v8;
          unint64_t v11 = v12 - (void)v8;
        }

        while (v11 > 0x10);
      }

      if (v11 >> 3 == 1)
      {
        uint64_t v13 = 28LL;
      }

      else
      {
        if (v11 >> 3 != 2)
        {
LABEL_12:
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          double v14 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v29 = v19;
            __int16 v30 = 2048;
            double v31 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10187E3F8);
            }
            int v24 = 134218240;
            uint64_t v25 = v19;
            __int16 v26 = 2048;
            double v27 = v9;
            LODWORD(v18) = 22;
            int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  COERCE_DOUBLE(&v24),  v18);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLWorkoutClassifier_Type::WorkoutClassifierResult>::add(const T &) [T = CLWorkoutClass ifier_Type::WorkoutClassifierResult]",  "%s\n",  v17);
          }

          goto LABEL_17;
        }

        uint64_t v13 = 56LL;
      }

      *(void *)(a1 + 48) = v13;
      goto LABEL_12;
    }
  }

void sub_100CDF30C(void *a1, __int128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 152LL))(*a1);
  sub_100CDF33C(v3, a2);
}

void sub_100CDF33C(uint64_t a1, __int128 *a2)
{
  __int128 v3 = a2[1];
  __int128 v18 = *a2;
  __int128 v19 = v3;
  uint64_t v20 = *((void *)a2 + 4);
  uint64_t v4 = *(void *)(a1 + 160);
  if (v4) {
    (*(void (**)(uint64_t, __int128 *))(*(void *)v4 + 48LL))(v4, &v18);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    unint64_t v6 = v5 + *(void *)(a1 + 48) - 1;
    unint64_t v7 = *(void ***)(a1 + 24);
    double v8 = *((double *)v7[v6 / 0x66] + 5 * (v6 % 0x66));
    if (v8 > *(double *)&v18)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(void *)(a1 + 56) = 0LL;
      unint64_t v10 = v9 - (void)v7;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v7);
          uint64_t v11 = *(void *)(a1 + 32);
          unint64_t v7 = (void **)(*(void *)(a1 + 24) + 8LL);
          *(void *)(a1 + 24) = v7;
          unint64_t v10 = v11 - (void)v7;
        }

        while (v10 > 0x10);
      }

      if (v10 >> 3 == 1)
      {
        uint64_t v12 = 51LL;
      }

      else
      {
        if (v10 >> 3 != 2)
        {
LABEL_12:
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v13 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v26 = v18;
            __int16 v27 = 2048;
            double v28 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10187E3F8);
            }
            int v21 = 134218240;
            uint64_t v22 = v18;
            __int16 v23 = 2048;
            double v24 = v8;
            LODWORD(v17) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  COERCE_DOUBLE(&v21),  v17);
            __int128 v16 = (uint8_t *)v15;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult>::add(const T &) [T = CLWorkou tClassifier_Type::SmoothedTier2ClassifierResult]",  "%s\n",  v15);
            if (v16 != buf) {
              free(v16);
            }
          }

          goto LABEL_17;
        }

        uint64_t v12 = 102LL;
      }

      *(void *)(a1 + 48) = v12;
      goto LABEL_12;
    }
  }

void sub_100CDF600(void *a1, __n128 *a2)
{
  __int128 v3 = (__n128 *)(*(uint64_t (**)(void))(*(void *)*a1 + 192LL))(*a1);
  sub_100CDF630(v3, a2);
}

void sub_100CDF630(__n128 *a1, __n128 *a2)
{
  __n128 v15 = *a2;
  unint64_t v3 = a1[8].n128_u64[1];
  if (v3) {
    (*(void (**)(unint64_t, __n128 *))(*(void *)v3 + 48LL))(v3, &v15);
  }
  unint64_t v4 = a1[3].n128_u64[1];
  if (v4)
  {
    unint64_t v5 = v4 + a1[3].n128_u64[0] - 1;
    unint64_t v6 = (void **)a1[1].n128_u64[1];
    double v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8LL)))[2 * v5];
    if (v7 > v15.n128_f64[0])
    {
      unint64_t v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0LL;
      unint64_t v9 = v8 - (void)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          unint64_t v10 = a1[2].n128_u64[0];
          unint64_t v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          unint64_t v9 = v10 - (void)v6;
        }

        while (v9 > 0x10);
      }

      if (v9 >> 3 == 1)
      {
        uint64_t v11 = 128LL;
      }

      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v12 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            unint64_t v21 = v15.n128_u64[0];
            __int16 v22 = 2048;
            double v23 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10187E3F8);
            }
            int v16 = 134218240;
            unint64_t v17 = v15.n128_u64[0];
            __int16 v18 = 2048;
            double v19 = v7;
            LODWORD(v14) = 22;
            uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  COERCE_DOUBLE(&v16),  v14);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLCyclingStateDetector_Type::CyclingResult>::add(const T &) [T = CLCyclingStateDetecto r_Type::CyclingResult]",  "%s\n",  v13);
          }

          goto LABEL_17;
        }

        uint64_t v11 = 256LL;
      }

      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }

void sub_100CDF8CC(void *a1, __int128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 120LL))(*a1);
  sub_100465A80(v3, a2);
}

float sub_100CDF8FC(void *a1, double a2, double a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 120LL))(*a1);
  float v6 = 0.0;
  if (a3 > 0.0)
  {
    uint64_t v7 = v5;
    int v8 = 1;
    double v9 = 0.0;
    double v10 = 0.0;
    do
    {
      memset(v13, 0, sizeof(v13));
      if (sub_100798BA4(v7, v13, a2 - v9) && (double v11 = *(double *)v13, v10 != *(double *)v13))
      {
        float v6 = fmax(*((double *)v13 + 1), 0.0) + v6;
      }

      else
      {
        double v11 = v10;
      }

      double v9 = (double)v8++;
      double v10 = v11;
    }

    while (v9 < a3);
  }

  return v6;
}

void sub_100CDF9F4(double *a1, uint64_t a2)
{
  double v3 = a1[37];
  double v4 = *(double *)(a2 + 8);
  uint64_t v5 = (uint64_t)(a1 + 1);
  sub_100AF37EC((uint64_t)(a1 + 1), (__int128 *)a2);
  sub_100795D7C(v5, v4);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a1 + 104LL))(*(void *)a1);
  sub_100CDFB94(v6, v4);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a1 + 112LL))(*(void *)a1);
  sub_100CDFF20(v7, v4);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))(*(void *)a1);
  sub_100796BFC(v8, v4);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))(*(void *)a1);
  sub_100CE02AC(v9, v4);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)a1 + 136LL))(*(void *)a1);
  sub_1007964E8(v10, v4);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))(*(void *)a1);
  sub_100CE0698(v11, v4);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)a1 + 152LL))(*(void *)a1);
  sub_100CE0A64(v12, v4);
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)a1 + 160LL))(*(void *)a1);
  sub_100796FE8(v13, v4);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)a1 + 168LL))(*(void *)a1);
  sub_100CE0E30(v14, v4);
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)a1 + 176LL))(*(void *)a1);
  sub_100CE11FC(v15, v4);
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)a1 + 184LL))(*(void *)a1);
  sub_100CE157C(v16, v4);
  uint64_t v17 = (*(uint64_t (**)(void))(**(void **)a1 + 192LL))(*(void *)a1);
  sub_100CE1938(v17, v4);
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)a1 + 200LL))(*(void *)a1);
  sub_100CE1CB8(v18, v4);
  BOOL v19 = v4 <= v3 || a1[37] == -1.0;
  double v20 = v4 - v3;
  if (v19) {
    double v20 = 0.0;
  }
  a1[40] = v20;
  a1[37] = v4;
}

void sub_100CDFB94(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 320);
  *(double *)(a1 + 320) = a2;
  if (*(_BYTE *)(a1 + 264) && *(double *)(a1 + 328) < a2)
  {
    *(_BYTE *)(a1 + 264) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 280);
    uint64_t v6 = *(void *)(a1 + 288);
    *(void *)(a1 + 312) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 288);
        uint64_t v5 = (void **)(*(void *)(a1 + 280) + 8LL);
        *(void *)(a1 + 280) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 32LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 360) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 264)) {
          sub_100CDBBFC(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 320);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 320);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLElevationChangeEntry>::update(CFAbsoluteTime) [T = CLElevationChangeEntry]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 64LL;
    }

    *(void *)(a1 + 304) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 360) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 304);
    uint64_t v11 = *(void *)(a1 + 280);
    uint64_t v12 = *(void *)(a1 + 288);
    uint64_t v13 = (void *)(v11 + 8 * (v10 >> 6));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v15 = (void *)(a1 + 312);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 312) + v10) >> 6));
    }

    else
    {
      uint64_t v14 = (double *)(*v13 + ((v10 & 0x3F) << 6));
      uint64_t v15 = (void *)(a1 + 312);
      unint64_t v16 = *(void *)(a1 + 312) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 6));
      uint64_t v18 = (__int128 *)(*v17 + ((v16 & 0x3F) << 6));
    }

    double v24 = (char *)sub_100CE4854(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 304) + *(void *)(a1 + 312);
    uint64_t v26 = *(void *)(a1 + 280);
    __int16 v27 = (char *)(v26 + 8 * (v25 >> 6));
    uint64_t v28 = *(void *)(a1 + 288) == v26 ? 0LL : *(void *)v27 + ((v25 & 0x3F) << 6);
    sub_100CE4620((void *)(a1 + 272), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 360) = 0xBFF0000000000000LL;
    }
  }

void sub_100CDFF20(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 32LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 136) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLCatherineData>::update(CFAbsoluteTime) [T = CLCatherineData]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 64LL;
    }

    *(void *)(a1 + 48) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 136) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 >> 6));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 6));
    }

    else
    {
      uint64_t v14 = (double *)(*v13 + ((v10 & 0x3F) << 6));
      uint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 6));
      uint64_t v18 = (__int128 *)(*v17 + ((v16 & 0x3F) << 6));
    }

    double v24 = (char *)sub_100CE4CE8(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    __int16 v27 = (char *)(v26 + 8 * (v25 >> 6));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : *(void *)v27 + ((v25 & 0x3F) << 6);
    sub_100CE4620((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 136) = 0xBFF0000000000000LL;
    }
  }

void sub_100CE02AC(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 11LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 104) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLStepCountEntry>::update(CFAbsoluteTime) [T = CLStepCountEntry]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 23LL;
    }

    *(void *)(a1 + 48) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 104) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 / 0x17));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x17));
    }

    else
    {
      uint64_t v14 = (double *)(*(void *)(v11 + 8 * (v10 / 0x17)) + 176 * (v10 % 0x17));
      uint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0x17));
      uint64_t v18 = (__int128 *)(*v17 + 176 * (v16 % 0x17));
    }

    double v24 = sub_100CE5060(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    __int16 v27 = (void *)(v26 + 8 * (v25 / 0x17));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : (char *)(*v27 + 176 * (v25 % 0x17));
    sub_100CE4DA0((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 104) = 0xBFF0000000000000LL;
    }
  }

void sub_100CE0698(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 28LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLWorkoutClassifier_Type::WorkoutClassifierResult>::update(CFAbsoluteTime) [T = CLWorkou tClassifier_Type::WorkoutClassifierResult]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 56LL;
    }

    *(void *)(a1 + 48) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 / 0x38));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x38));
    }

    else
    {
      uint64_t v14 = *(void *)(v11 + 8 * (v10 / 0x38)) + 72 * (v10 % 0x38);
      uint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0x38));
      uint64_t v18 = *v17 + 72 * (v16 % 0x38);
    }

    double v24 = sub_10079C4E0(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    __int16 v27 = (void *)(v26 + 8 * (v25 / 0x38));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : (char *)(*v27 + 72 * (v25 % 0x38));
    sub_100CE5464((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_100CE0A64(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 51LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult>::update(CFAbsoluteTime) [T = CL WorkoutClassifier_Type::SmoothedTier2ClassifierResult]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 102LL;
    }

    *(void *)(a1 + 48) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 / 0x66));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x66));
    }

    else
    {
      uint64_t v14 = (__int128 *)(*(void *)(v11 + 8 * (v10 / 0x66)) + 40 * (v10 % 0x66));
      uint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0x66));
      uint64_t v18 = (__int128 *)(*v17 + 40 * (v16 % 0x66));
    }

    double v24 = sub_100CE5CC0(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    __int16 v27 = (void *)(v26 + 8 * (v25 / 0x66));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : (char *)(*v27 + 40 * (v25 % 0x66));
    sub_100CE5A40((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_100CE0E30(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 13LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 136) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLSwimEntry>::update(CFAbsoluteTime) [T = CLSwimEntry]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 26LL;
    }

    *(void *)(a1 + 48) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 136) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 / 0x1A));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11
                     + ((((*(void *)(a1 + 56) + v10) * (unsigned __int128)0x4EC4EC4EC4EC4EC5uLL) >> 64) & 0x7FFFFFFFFFFFFFF8LL));
    }

    else
    {
      uint64_t v14 = *(void *)(v11 + 8 * (v10 / 0x1A)) + 152 * (v10 % 0x1A);
      uint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0x1A));
      uint64_t v18 = *v17 + 152 * (v16 % 0x1A);
    }

    double v24 = sub_100CE60A0(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    __int16 v27 = (void *)(v26 + 8 * (v25 / 0x1A));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : (char *)(*v27 + 152 * (v25 % 0x1A));
    sub_10020CA7C((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 136) = 0xBFF0000000000000LL;
    }
  }

void sub_100CE11FC(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 128LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLWorkoutPredictorWatchPressure>::update(CFAbsoluteTime) [T = CLWorkoutPredictorWatchPressure]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 256LL;
    }

    *(void *)(a1 + 48) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      uint64_t v15 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v14 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 8));
    }

    else
    {
      uint64_t v14 = (void *)(a1 + 56);
      uint64_t v15 = (double *)(*v13 + 16LL * v10);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 8));
      uint64_t v18 = (double *)(*v17 + 16LL * v16);
    }

    double v24 = (char *)sub_10079B170(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    __int16 v27 = (char *)(v26 + 8 * (v25 >> 8));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : *(void *)v27 + 16LL * v25;
    sub_10025A918((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v14) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_100CE157C(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 85LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 104) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLExerciseMinuteData>::update(CFAbsoluteTime) [T = CLExerciseMinuteData]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 170LL;
    }

    *(void *)(a1 + 48) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 104) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 / 0xAA));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0xAA));
    }

    else
    {
      uint64_t v14 = (__int128 *)(*(void *)(v11 + 8 * (v10 / 0xAA)) + 24 * (v10 % 0xAA));
      uint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0xAA));
      uint64_t v18 = (__int128 *)(*v17 + 24 * (v16 % 0xAA));
    }

    double v24 = sub_100CE63E4(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    __int16 v27 = (void *)(v26 + 8 * (v25 / 0xAA));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : (char *)(*v27 + 24 * (v25 % 0xAA));
    sub_100CE617C((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 104) = 0xBFF0000000000000LL;
    }
  }

void sub_100CE1938(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 128LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLCyclingStateDetector_Type::CyclingResult>::update(CFAbsoluteTime) [T = CLCyclingStateD etector_Type::CyclingResult]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 256LL;
    }

    *(void *)(a1 + 48) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      uint64_t v15 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v14 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 8));
    }

    else
    {
      uint64_t v14 = (void *)(a1 + 56);
      uint64_t v15 = (double *)(*v13 + 16LL * v10);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 8));
      uint64_t v18 = (double *)(*v17 + 16LL * v16);
    }

    double v24 = (char *)sub_10079B170(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    __int16 v27 = (char *)(v26 + 8 * (v25 >> 8));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : *(void *)v27 + 16LL * v25;
    sub_10025A918((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v14) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_100CE1CB8(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, v4);
    return;
  }

  if (v4 > a2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0LL;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8LL);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }

      while (v7 > 0x10);
    }

    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 51LL;
    }

    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(void *)(a1 + 96) = 0xBFF0000000000000LL;
        if (*(_BYTE *)(a1 + 8)) {
          sub_10046E868(a1);
        }
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187E3F8);
        }
        BOOL v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v35 = a2;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187E3F8);
          }
          uint64_t v21 = *(void *)(a1 + 64);
          int v30 = 134218240;
          double v31 = a2;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          LODWORD(v29) = 22;
          __int16 v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on update, currentTime, %f, lastUpdateTime, %f",  COERCE_DOUBLE(&v30),  v29);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLMotionCoprocessorInterface::Tier1CyclingFeatures>::update(CFAbsoluteTime) [T = CLMotio nCoprocessorInterface::Tier1CyclingFeatures]",  "%s\n",  v22);
        }

        return;
      }

      uint64_t v9 = 102LL;
    }

    *(void *)(a1 + 48) = v9;
    goto LABEL_15;
  }

  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = (void *)(v11 + 8 * (v10 / 0x66));
    if (v12 == v11)
    {
      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x66));
    }

    else
    {
      uint64_t v14 = (__int128 *)(*(void *)(v11 + 8 * (v10 / 0x66)) + 40 * (v10 % 0x66));
      uint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0x66));
      uint64_t v18 = (__int128 *)(*v17 + 40 * (v16 % 0x66));
    }

    double v24 = sub_100CE67C0(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    unint64_t v25 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 24);
    __int16 v27 = (void *)(v26 + 8 * (v25 / 0x66));
    uint64_t v28 = *(void *)(a1 + 32) == v26 ? 0LL : (char *)(*v27 + 40 * (v25 % 0x66));
    sub_100C69A9C((void *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000LL;
    }
  }

void sub_100CE2084(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100CE20B0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187DAC8;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE20E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187DAC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE2108(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE2114(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE2150()
{
  return &off_10187DB38;
}

void *sub_100CE215C(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE21F4(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE235C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE2368(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187DB68;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE23A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187DB68;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE23C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE23CC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE2408()
{
  return &off_10187DBE8;
}

void *sub_100CE2414(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187DC18;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE244C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187DC18;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE246C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE2478(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE24B4()
{
  return &off_10187DC88;
}

void *sub_100CE24C0(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE2558(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE26C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE26CC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187DCB8;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE2704(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187DCB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE2724(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE2730(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE276C()
{
  return &off_10187DD38;
}

void *sub_100CE2778(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE2810(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE2978(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE2984(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187DD68;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE29BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187DD68;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE29DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE29E8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE2A24()
{
  return &off_10187DDE8;
}

void *sub_100CE2A30(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187DE18;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE2A68(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187DE18;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE2A88(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE2A94(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE2AD0()
{
  return &off_10187DE88;
}

void *sub_100CE2ADC(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE2B74(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE2CDC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE2CE8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187DEB8;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE2D20(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187DEB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE2D40(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE2D4C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE2D88()
{
  return &off_10187DF38;
}

void *sub_100CE2D94(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE2E2C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE2F94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE2FA0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187DF68;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE2FD8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187DF68;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE2FF8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE3004(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE3040()
{
  return &off_10187DFE8;
}

void *sub_100CE304C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187E018;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE3084(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187E018;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE30A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE30B0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE30EC()
{
  return &off_10187E088;
}

void *sub_100CE30F8(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE3190(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE32F8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE3304(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187E0B8;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE333C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187E0B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE335C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE3368(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE33A4()
{
  return &off_10187E138;
}

void *sub_100CE33B0(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE3448(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE35B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE35BC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187E168;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE35F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187E168;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE3614(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE3620(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE365C()
{
  return &off_10187E1D8;
}

void *sub_100CE3668(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE3700(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE3868(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE3874(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187E208;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE38AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187E208;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE38CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE38D8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE3914()
{
  return &off_10187E288;
}

void *sub_100CE3920(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE39B8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE3B20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE3B2C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187E2B8;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE3B64(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187E2B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE3B84(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE3B90(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE3BCC()
{
  return &off_10187E338;
}

void *sub_100CE3BD8(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_100CE3C70(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100CE3DD8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100CE3DE4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187E368;
  result[1] = v3;
  return result;
}

uint64_t sub_100CE3E1C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187E368;
  a2[1] = v2;
  return result;
}

uint64_t sub_100CE3E3C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100CE3E48(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100CE3E84()
{
  return &off_10187E3D8;
}

void sub_100CE3E90(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_100CE3EBC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100CE3F70(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  __n128 result = *(__n128 *)a2;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(void *)(v8 + 32) = *(void *)(a2 + 32);
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_100CE3F70(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100CE4238( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_100CE4284(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100CE430C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100CE430C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100CE45D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100CE4620(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 6) + 8 * (a4 - a2) - ((a3 - *(void *)a2) >> 6);
  }
  uint64_t v7 = a1[1];
  unint64_t v8 = (char *)(v7 + 8LL * (a1[4] >> 6));
  if (a1[2] == v7) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = *(void *)v8 + ((a1[4] & 0x3FLL) << 6);
  }
  unint64_t v33 = (char **)(v7 + 8LL * (a1[4] >> 6));
  double v34 = (char *)v9;
  if (v9 == a3) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 6) + 8 * (a2 - v8) - ((v9 - *(void *)v8) >> 6);
  }
  uint64_t v11 = (char **)sub_100CE490C((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      BOOL v19 = v11;
      int64_t v20 = v12;
      uint64_t v21 = v33;
      unint64_t v22 = v34;
      uint64_t v23 = sub_100CE490C((uint64_t)&v32, v6);
      sub_100CE49DC(v21, v22, v19, v20, v23, v24, &v35);
      unint64_t v25 = v34;
      if (v34 != v36)
      {
        uint64_t v26 = v33;
        do
        {
          v25 += 64;
          double v34 = v25;
          if (v25 - *v26 == 4096)
          {
            __int16 v27 = v26[1];
            ++v26;
            unint64_t v25 = v27;
            unint64_t v33 = v26;
            double v34 = v27;
          }
        }

        while (v25 != v36);
      }

      uint64_t v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
    }

    else
    {
      uint64_t v13 = (char **)sub_100CE490C((uint64_t)&v32, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      uint64_t v17 = (char **)(v16 + 8 * (v15 >> 6));
      if (a1[2] == v16) {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v18 = &(*v17)[64 * (v15 & 0x3F)];
      }
      __n128 v35 = v32;
      sub_100CE4B60(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_100CE4970(a1, 1) & 1) != 0)
        ;
    }
  }

  uint64_t v29 = a1[1];
  if (a1[2] == v29) {
    uint64_t v30 = 0LL;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 8LL * (a1[4] >> 6)) + ((a1[4] & 0x3FLL) << 6);
  }
  v35.n128_u64[0] = v29 + 8LL * (a1[4] >> 6);
  v35.n128_u64[1] = v30;
  return sub_100CE490C((uint64_t)&v35, v10);
}

void *sub_100CE4854(void *result, double *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != (double *)a4)
  {
    while (*(double *)&a5 - a2[1] <= *(double *)(a6 + 344))
    {
      a2 += 8;
      if ((double *)((char *)a2 - *result) == (double *)4096)
      {
        uint64_t v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
    }
  }

  if (a2 != (double *)a4)
  {
    uint64_t v7 = a2;
    unint64_t v8 = result;
    while (1)
    {
      v7 += 8;
      if ((double *)((char *)v7 - *v8) == (double *)4096)
      {
        uint64_t v9 = (double *)v8[1];
        ++v8;
        uint64_t v7 = v9;
      }

      if (*(double *)&a5 - v7[1] <= *(double *)(a6 + 344))
      {
        __int128 v10 = *(_OWORD *)v7;
        __int128 v11 = *((_OWORD *)v7 + 1);
        __int128 v12 = *((_OWORD *)v7 + 3);
        *((_OWORD *)a2 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 3) = v12;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v11;
        a2 += 8;
        if ((double *)((char *)a2 - *result) == (double *)4096)
        {
          uint64_t v13 = (double *)result[1];
          ++result;
          a2 = v13;
        }
      }
    }
  }

  return result;
}

void *sub_100CE490C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 6);
    if (v4 < 1) {
      result -= (unint64_t)(63 - v4) >> 6;
    }
    else {
      result += (unint64_t)v4 >> 6;
    }
  }

  return result;
}

uint64_t sub_100CE4970(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 8 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x40) {
    a2 = 1;
  }
  if (v5 < 0x80) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

__n128 sub_100CE49DC@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    BOOL v19 = a2;
    uint64_t v18 = a4;
    unint64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    uint64_t v13 = a3 - 1;
    __int128 v12 = *a3;
    BOOL v14 = a4;
    unint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100CE4AA8(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      unint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      __int128 v12 = v17;
      BOOL v14 = v17 + 4096;
    }

    uint64_t v18 = *a1 + 4096;
    BOOL v19 = a2;
  }

  sub_100CE4AA8(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100CE4AA8@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    __int128 v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 6 >= v12 >> 6) {
        uint64_t v13 = v12 >> 6;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 6;
      }
      v11 -= 64 * v13;
      a4 -= 64 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, v13 << 6);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }

    if ((char *)(*v6 + 4096LL) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100CE4B60(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    __int128 v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }

  else
  {
    unint64_t v8 = a1 + 1;
    sub_100CE4C2C(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_100CE4C2C(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }

    uint64_t v10 = *a3;
    __int128 v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }

  sub_100CE4C2C(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100CE4C2C@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 6 >= v11 >> 6 ? v11 >> 6 : (a3 - v9) >> 6;
      if (v12) {
        __src = (char *)memmove(__dst, v9, v12 << 6);
      }
      v9 += 64 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }

    __dst += 64 * v12;
    else {
      --v6;
    }
  }

  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void *sub_100CE4CE8(void *result, double *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != (double *)a4)
  {
    while (*(double *)&a5 - a2[5] <= *(double *)(a6 + 88))
    {
      a2 += 8;
      if ((double *)((char *)a2 - *result) == (double *)4096)
      {
        uint64_t v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
    }
  }

  if (a2 != (double *)a4)
  {
    int v7 = a2;
    unint64_t v8 = result;
    while (1)
    {
      v7 += 8;
      if ((double *)((char *)v7 - *v8) == (double *)4096)
      {
        uint64_t v9 = (double *)v8[1];
        ++v8;
        int v7 = v9;
      }

      if (*(double *)&a5 - v7[5] <= *(double *)(a6 + 88))
      {
        __int128 v10 = *(_OWORD *)v7;
        __int128 v11 = *((_OWORD *)v7 + 1);
        __int128 v12 = *((_OWORD *)v7 + 3);
        *((_OWORD *)a2 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 3) = v12;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v11;
        a2 += 8;
        if ((double *)((char *)a2 - *result) == (double *)4096)
        {
          uint64_t v13 = (double *)result[1];
          ++result;
          a2 = v13;
        }
      }
    }
  }

  return result;
}

unint64_t sub_100CE4DA0(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 23 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 / 0x17));
  if (a1[2] == v8) {
    __int128 v10 = 0LL;
  }
  else {
    __int128 v10 = &(*v9)[176 * (v7 % 0x17)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 23 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x17);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1005A83FC(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005A83FC(v24, v6);
      sub_100CE513C( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_1005A83FC(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      uint64_t v16 = (_BYTE **)(v15 + 8 * (v14 / 0x17));
      if (a1[2] == v15) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = &(*v16)[176 * (v14 % 0x17)];
      }
      v24[0] = v12;
      sub_100CE52E8(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100ABDB54(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x17));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 176 * (v19 % 0x17);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1005A83FC(v24, v11);
  return v24[0].n128_u64[0];
}

void *sub_100CE5060(void *result, double *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != (double *)a4)
  {
    while (*(double *)&a5 - a2[1] <= *(double *)(a6 + 88))
    {
      a2 += 22;
      if ((double *)((char *)a2 - *result) == (double *)4048)
      {
        uint64_t v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
    }
  }

  if (a2 != (double *)a4)
  {
    unint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 22;
      if ((double *)((char *)v7 - *v8) == (double *)4048)
      {
        uint64_t v9 = (double *)v8[1];
        ++v8;
        unint64_t v7 = v9;
      }

      if (*(double *)&a5 - v7[1] <= *(double *)(a6 + 88))
      {
        __int128 v10 = *(_OWORD *)v7;
        __int128 v11 = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 1) = *((_OWORD *)v7 + 1);
        *((_OWORD *)a2 + 2) = v11;
        *(_OWORD *)a2 = v10;
        __int128 v12 = *((_OWORD *)v7 + 3);
        __int128 v13 = *((_OWORD *)v7 + 4);
        __int128 v14 = *((_OWORD *)v7 + 6);
        *((_OWORD *)a2 + 5) = *((_OWORD *)v7 + 5);
        *((_OWORD *)a2 + 6) = v14;
        *((_OWORD *)a2 + 3) = v12;
        *((_OWORD *)a2 + 4) = v13;
        __int128 v15 = *((_OWORD *)v7 + 7);
        __int128 v16 = *((_OWORD *)v7 + 8);
        __int128 v17 = *((_OWORD *)v7 + 10);
        *((_OWORD *)a2 + 9) = *((_OWORD *)v7 + 9);
        *((_OWORD *)a2 + 10) = v17;
        *((_OWORD *)a2 + 7) = v15;
        *((_OWORD *)a2 + 8) = v16;
        a2 += 22;
        if ((double *)((char *)a2 - *result) == (double *)4048)
        {
          uint64_t v18 = (double *)result[1];
          ++result;
          a2 = v18;
        }
      }
    }
  }

  return result;
}

__n128 sub_100CE513C@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    uint64_t v18 = a4;
    __int128 v15 = a5;
    __int128 v16 = a6;
  }

  else
  {
    __int128 v13 = a3 - 1;
    __int128 v12 = *a3;
    __int128 v14 = a4;
    __int128 v15 = a5;
    __int128 v16 = a6;
    while (1)
    {
      sub_100CE5208(v12, v14, v15, v16, &v21);
      __int128 v16 = (char *)v22.n128_u64[1];
      __int128 v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      __int128 v17 = *v13--;
      __int128 v12 = v17;
      __int128 v14 = v17 + 4048;
    }

    uint64_t v18 = *a1 + 4048;
    unint64_t v19 = a2;
  }

  sub_100CE5208(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100CE5208@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    __int128 v11 = a2;
    while (1)
    {
      uint64_t v12 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)&a4[-v10] >> 4);
      if (0x2E8BA2E8BA2E8BA3LL * ((v11 - a1) >> 4) < v12) {
        uint64_t v12 = 0x2E8BA2E8BA2E8BA3LL * ((v11 - a1) >> 4);
      }
      v11 -= 176 * v12;
      a4 -= 176 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 176 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4048);
    }

    if ((char *)(*v6 + 4048LL) == a4)
    {
      __int128 v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100CE52E8(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  unint64_t v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4048LL); ; i = v12 + 4048)
    {
      sub_100CE5378(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      unint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_100CE5378(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100CE5378@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  unint64_t v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }

  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = 0x2E8BA2E8BA2E8BA3LL * ((v10 - __dst + 4048) >> 4);
      uint64_t v12 = 0x2E8BA2E8BA2E8BA3LL * ((v9 - v7) >> 4) >= v11 ? v11 : 0x2E8BA2E8BA2E8BA3LL * ((v9 - v7) >> 4);
      if (v12) {
        double result = memmove(__dst, v7, 176 * v12);
      }
      v7 += 176 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }

    __dst += 176 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

unint64_t sub_100CE5464(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 56 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 / 0x38));
  if (a1[2] == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = &(*v9)[72 * (v7 % 0x38)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 56 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x38);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_100368144(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100368144(v24, v6);
      sub_100CE570C( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_100368144(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      __int128 v16 = (_BYTE **)(v15 + 8 * (v14 / 0x38));
      if (a1[2] == v15) {
        __int128 v17 = 0LL;
      }
      else {
        __int128 v17 = &(*v16)[72 * (v14 % 0x38)];
      }
      v24[0] = v12;
      sub_100CE58C0(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1003681F8(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x38));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 72 * (v19 % 0x38);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_100368144(v24, v11);
  return v24[0].n128_u64[0];
}

__n128 sub_100CE570C@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    __int128 v16 = a6;
  }

  else
  {
    __n128 v13 = a3 - 1;
    __n128 v12 = *a3;
    unint64_t v14 = a4;
    uint64_t v15 = a5;
    __int128 v16 = a6;
    while (1)
    {
      sub_100CE57D8(v12, v14, v15, v16, &v21);
      __int128 v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      __int128 v17 = *v13--;
      __n128 v12 = v17;
      unint64_t v14 = v17 + 4032;
    }

    uint64_t v18 = *a1 + 4032;
    unint64_t v19 = a2;
  }

  sub_100CE57D8(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100CE57D8@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    unint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0x8E38E38E38E38E39LL * ((uint64_t)&a4[-v10] >> 3);
      v11 -= 72 * v12;
      a4 -= 72 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 72 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4032);
    }

    if ((char *)(*v6 + 4032LL) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100CE58C0(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  unint64_t v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4032LL); ; i = v12 + 4032)
    {
      sub_100CE5950(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      unint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_100CE5950(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100CE5950@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  unint64_t v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }

  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0x8E38E38E38E38E39LL * ((v10 - __dst + 4032) >> 3);
      unint64_t v12 = (uint64_t)(0x8E38E38E38E38E39LL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x8E38E38E38E38E39LL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 72 * v12);
      }
      v7 += 72 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }

    __dst += 72 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

unint64_t sub_100CE5A40(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 102 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 / 0x66));
  if (a1[2] == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = &(*v9)[40 * (v7 % 0x66)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 102 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x66);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10025BF98(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10025BF98(v24, v6);
      sub_100CE5D7C( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_10025BF98(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      __int128 v16 = (_BYTE **)(v15 + 8 * (v14 / 0x66));
      if (a1[2] == v15) {
        __int128 v17 = 0LL;
      }
      else {
        __int128 v17 = &(*v16)[40 * (v14 % 0x66)];
      }
      v24[0] = v12;
      sub_100CE5F28(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10025C0A0(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x66));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 40 * (v19 % 0x66);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10025BF98(v24, v11);
  return v24[0].n128_u64[0];
}

void *sub_100CE5CC0(void *result, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 = (__int128 *)((char *)a2 + 40);
      if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
      {
        uint64_t v6 = (__int128 *)result[1];
        ++result;
        a2 = v6;
      }

      if (a2 == a4) {
        return result;
      }
    }
  }

  if (a2 != a4)
  {
    unint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      unint64_t v7 = (__int128 *)((char *)v7 + 40);
      if ((__int128 *)((char *)v7 - *v8) == (__int128 *)4080)
      {
        uint64_t v9 = (__int128 *)v8[1];
        ++v8;
        unint64_t v7 = v9;
      }

      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        __int128 v10 = *v7;
        __int128 v11 = v7[1];
        *((void *)a2 + 4) = *((void *)v7 + 4);
        *a2 = v10;
        a2[1] = v11;
        a2 = (__int128 *)((char *)a2 + 40);
        if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
        {
          __n128 v12 = (__int128 *)result[1];
          ++result;
          a2 = v12;
        }
      }
    }
  }

  return result;
}

__n128 sub_100CE5D7C@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    __int128 v16 = a6;
  }

  else
  {
    __n128 v13 = a3 - 1;
    __n128 v12 = *a3;
    unint64_t v14 = a4;
    uint64_t v15 = a5;
    __int128 v16 = a6;
    while (1)
    {
      sub_100CE5E48(v12, v14, v15, v16, &v21);
      __int128 v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      __int128 v17 = *v13--;
      __n128 v12 = v17;
      unint64_t v14 = v17 + 4080;
    }

    uint64_t v18 = *a1 + 4080;
    unint64_t v19 = a2;
  }

  sub_100CE5E48(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100CE5E48@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    __int128 v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 3);
      v11 -= 40 * v12;
      a4 -= 40 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 40 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }

    if ((char *)(*v6 + 4080LL) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100CE5F28(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  unint64_t v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4080LL); ; i = v12 + 4080)
    {
      sub_100CE5FB8(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      unint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_100CE5FB8(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100CE5FB8@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  unint64_t v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }

  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 3);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 40 * v12);
      }
      v7 += 40 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }

    __dst += 40 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void *sub_100CE60A0(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)(a2 + 40) <= *(double *)(a6 + 88))
    {
      a2 += 152LL;
      if (a2 - *result == 3952)
      {
        uint64_t v6 = result[1];
        ++result;
        a2 = v6;
      }

      if (a2 == a4) {
        return result;
      }
    }
  }

  if (a2 != a4)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 152LL;
      if (v7 - *v8 == 3952)
      {
        uint64_t v9 = v8[1];
        ++v8;
        uint64_t v7 = v9;
      }

      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)(v7 + 40) <= *(double *)(a6 + 88))
      {
        __int128 v10 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)a2 = *(_OWORD *)v7;
        *(_OWORD *)(a2 + 16) = v10;
        __int128 v11 = *(_OWORD *)(v7 + 32);
        __int128 v12 = *(_OWORD *)(v7 + 48);
        __int128 v13 = *(_OWORD *)(v7 + 80);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(v7 + 64);
        *(_OWORD *)(a2 + 80) = v13;
        *(_OWORD *)(a2 + 32) = v11;
        *(_OWORD *)(a2 + 48) = v12;
        __int128 v14 = *(_OWORD *)(v7 + 96);
        __int128 v15 = *(_OWORD *)(v7 + 112);
        __int128 v16 = *(_OWORD *)(v7 + 128);
        *(void *)(a2 + 144) = *(void *)(v7 + 144);
        *(_OWORD *)(a2 + 112) = v15;
        *(_OWORD *)(a2 + 128) = v16;
        *(_OWORD *)(a2 + 96) = v14;
        a2 += 152LL;
        if (a2 - *result == 3952)
        {
          uint64_t v17 = result[1];
          ++result;
          a2 = v17;
        }
      }
    }
  }

  return result;
}

unint64_t sub_100CE617C(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 170 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 / 0xAA));
  if (a1[2] == v8) {
    __int128 v10 = 0LL;
  }
  else {
    __int128 v10 = &(*v9)[24 * (v7 % 0xAA)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 170 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0xAA);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10025BC20(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10025BC20(v24, v6);
      sub_100CE649C( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_10025BC20(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      __int128 v16 = (_BYTE **)(v15 + 8 * (v14 / 0xAA));
      if (a1[2] == v15) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = &(*v16)[24 * (v14 % 0xAA)];
      }
      v24[0] = v12;
      sub_100CE6648(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10025BDF8(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0xAA));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 24 * (v19 % 0xAA);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10025BC20(v24, v11);
  return v24[0].n128_u64[0];
}

void *sub_100CE63E4(void *result, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *((double *)a2 + 1) <= *(double *)(a6 + 88))
    {
      a2 = (__int128 *)((char *)a2 + 24);
      if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
      {
        uint64_t v6 = (__int128 *)result[1];
        ++result;
        a2 = v6;
      }

      if (a2 == a4) {
        return result;
      }
    }
  }

  if (a2 != a4)
  {
    unint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      unint64_t v7 = (__int128 *)((char *)v7 + 24);
      if ((__int128 *)((char *)v7 - *v8) == (__int128 *)4080)
      {
        uint64_t v9 = (__int128 *)v8[1];
        ++v8;
        unint64_t v7 = v9;
      }

      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *((double *)v7 + 1) <= *(double *)(a6 + 88))
      {
        __int128 v10 = *v7;
        *((void *)a2 + 2) = *((void *)v7 + 2);
        *a2 = v10;
        a2 = (__int128 *)((char *)a2 + 24);
        if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
        {
          unint64_t v11 = (__int128 *)result[1];
          ++result;
          a2 = v11;
        }
      }
    }
  }

  return result;
}

__n128 sub_100CE649C@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    __int128 v16 = a6;
  }

  else
  {
    __n128 v13 = a3 - 1;
    __n128 v12 = *a3;
    unint64_t v14 = a4;
    uint64_t v15 = a5;
    __int128 v16 = a6;
    while (1)
    {
      sub_100CE6568(v12, v14, v15, v16, &v21);
      __int128 v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      __n128 v12 = v17;
      unint64_t v14 = v17 + 4080;
    }

    uint64_t v18 = *a1 + 4080;
    unint64_t v19 = a2;
  }

  sub_100CE6568(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100CE6568@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    unint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 3);
      v11 -= 24 * v12;
      a4 -= 24 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 24 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }

    if ((char *)(*v6 + 4080LL) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100CE6648(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  unint64_t v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4080LL); ; i = v12 + 4080)
    {
      sub_100CE66D8(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      unint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_100CE66D8(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100CE66D8@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  unint64_t v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }

  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4080) >> 3);
      unint64_t v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 24 * v12);
      }
      v7 += 24 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }

    __dst += 24 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void *sub_100CE67C0(void *result, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 = (__int128 *)((char *)a2 + 40);
      if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
      {
        uint64_t v6 = (__int128 *)result[1];
        ++result;
        a2 = v6;
      }

      if (a2 == a4) {
        return result;
      }
    }
  }

  if (a2 != a4)
  {
    unint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      unint64_t v7 = (__int128 *)((char *)v7 + 40);
      if ((__int128 *)((char *)v7 - *v8) == (__int128 *)4080)
      {
        uint64_t v9 = (__int128 *)v8[1];
        ++v8;
        unint64_t v7 = v9;
      }

      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        __int128 v10 = *v7;
        __int128 v11 = v7[1];
        *((_DWORD *)a2 + 8) = *((_DWORD *)v7 + 8);
        *a2 = v10;
        a2[1] = v11;
        a2 = (__int128 *)((char *)a2 + 40);
        if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
        {
          unint64_t v12 = (__int128 *)result[1];
          ++result;
          a2 = v12;
        }
      }
    }
  }

  return result;
}

void *sub_100CE687C@<X0>(uint64_t a1@<X8>)
{
  v6[0] = &off_10187E4A8;
  v6[1] = sub_100CE69D8;
  v6[2] = 0LL;
  unint64_t v7 = v6;
  sub_1010DDBC0(__p, "kCLConnectionMessageHeading");
  sub_100892064((uint64_t)v10, (uint64_t)v6);
  sub_100CE79E4(a1, (unsigned __int8 *)__p, 1LL);
  uint64_t v2 = v11;
  if (v11 == v10)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v10;
  }

  else
  {
    if (!v11) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  double result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    double result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100CE698C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t v14 = a12;
  if (a12 == &a9)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100CE69D8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  unint64_t v30 = 0xBFF0000000000000LL;
  sub_1002A82BC(a3, "kCLConnectionMessageHeadingFilterKey", &v30);
  if (*(_BYTE *)(a1 + 56))
  {
    if (a2)
    {
      *(void *)(a1 + 64) = v30;
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10187E478);
      }
      unint64_t v7 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v8;
        __int16 v38 = 2048;
        uint64_t v39 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "client '%@' subscribing to compass filter %.2f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10187E478);
        }
        uint64_t v23 = *(void *)(a1 + 24);
        uint64_t v24 = *(void *)(a1 + 64);
        int v33 = 138412546;
        uint64_t v34 = v23;
        __int16 v35 = 2048;
        uint64_t v36 = v24;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "client '%@' subscribing to compass filter %.2f",  &v33,  22);
        uint64_t v26 = (char *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHeadingSubscription::handleRequestHeading(BOOL, const CLNameValuePair &)",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      if (!*(void *)(a1 + 168))
      {
        __int128 v31 = @"ClientName";
        id v32 = [*(id *)(a1 + 24) description];
        __int128 v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL);
        id v11 = [*(id *)(a1 + 8) silo];
        unint64_t v12 = operator new(0x38uLL);
        sub_1005EDD38(v12, v11, (uint64_t)sub_100CE70F4, a1, v10);
        uint64_t v13 = *(void *)(a1 + 168);
        *(void *)(a1 + 168) = v12;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
        }
        uint64_t v14 = sub_1007492FC();
        sub_1006DCB40(v14, 0, *(void *)(a1 + 168), *(double *)(a1 + 160));
      }

      if (!*(void *)(a1 + 48))
      {
        uint64_t v15 = operator new(0x1F0uLL);
        sub_100B3DDEC();
        uint64_t v16 = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = v15;
        if (v16)
        {
          (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
          uint64_t v15 = *(void **)(a1 + 48);
        }

        sub_100C6AE50(a1, buf);
        sub_100B3DEF4((uint64_t)v15, (uint64_t)buf);
        if (v40 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    else
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10187E478);
      }
      uint64_t v17 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = *(void *)(a1 + 24);
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "client '%@' unsubscribing from compass",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10187E478);
        }
        uint64_t v27 = *(void *)(a1 + 24);
        int v33 = 138412290;
        uint64_t v34 = v27;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "client '%@' unsubscribing from compass",  &v33,  12);
        uint64_t v29 = (char *)v28;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHeadingSubscription::handleRequestHeading(BOOL, const CLNameValuePair &)",  "%s\n",  v28);
        if (v29 != buf) {
          free(v29);
        }
      }

      if (*(void *)(a1 + 168))
      {
        uint64_t v19 = sub_1007492FC();
        sub_1006DD2A0(v19, 0, *(void *)(a1 + 168));
        uint64_t v20 = *(void *)(a1 + 168);
        *(void *)(a1 + 168) = 0LL;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
        }
      }

      uint64_t v21 = *(void *)(a1 + 48);
      if (v21)
      {
        sub_100B3DE7C(v21);
        sub_100B3EDFC(*(void *)(a1 + 48));
        uint64_t v22 = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = 0LL;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
        }
      }
    }
  }

  *(_OWORD *)(a1 + 104) = xmmword_1012E4C78;
  *(_OWORD *)(a1 + 120) = unk_1012E4C88;
  *(_OWORD *)(a1 + 136) = xmmword_1012E4C98;
  *(void *)(a1 + 152) = 0LL;
  *(_OWORD *)(a1 + 72) = xmmword_1012E4C58;
  *(_OWORD *)(a1 + 88) = unk_1012E4C68;
  sub_100C6AC8C(a1);
}

void sub_100CE6EE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100CE6F54(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = sub_100C6AAF0(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = off_10187E428;
  *(void *)(v6 + 48) = 0LL;
  *(_BYTE *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0xBFF0000000000000LL;
  *(_OWORD *)(v6 + 104) = xmmword_1012E4C78;
  *(_OWORD *)(v6 + 120) = unk_1012E4C88;
  *(_OWORD *)(v6 + 136) = xmmword_1012E4C98;
  *(_OWORD *)(v6 + 72) = xmmword_1012E4C58;
  *(_OWORD *)(v6 + 88) = unk_1012E4C68;
  *(void *)(v6 + 152) = 0LL;
  *(void *)(v6 + 160) = 0x3F947AE147AE147BLL;
  *(void *)(v6 + 168) = 0LL;
  if ((sub_10071C4D0() & 1) == 0) {
    *(void *)(a1 + 160) = 0x3F9999999999999ALL;
  }
  *(_BYTE *)(a1 + 56) = sub_1004FAB40() & 1;
  return a1;
}

void sub_100CE6FFC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 168);
  *(void *)(v1 + 168) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100C6AB50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CE7048(void *a1)
{
  *a1 = off_10187E428;
  uint64_t v2 = a1[6];
  if (v2)
  {
    sub_100B3DE7C(v2);
    sub_100B3EDFC(a1[6]);
  }

  if (a1[21])
  {
    uint64_t v3 = sub_1007492FC();
    sub_1006DD2A0(v3, 0, a1[21]);
    uint64_t v4 = a1[21];
    a1[21] = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  else
  {
    a1[21] = 0LL;
  }

  uint64_t v5 = a1[6];
  a1[6] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return sub_100C6AB50((uint64_t)a1);
}

void sub_100CE70E0(void *a1)
{
  uint64_t v1 = (void *)sub_100CE7048(a1);
  operator delete(v1);
}

uint64_t sub_100CE70F4(uint64_t a1, uint64_t a2)
{
  return sub_100CE7134(a2, a1);
}

uint64_t sub_100CE7134(uint64_t a1, uint64_t a2)
{
  *(float64x2_t *)bytes = vcvtq_f64_f32(*(float32x2_t *)(a2 + 20));
  *(double *)uint64_t v23 = *(float *)(a2 + 28);
  float64x2_t v20 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 32));
  *(float64x2_t *)&v23[8] = v20;
  *(double *)&v23[24] = *(float *)(a2 + 40);
  __int128 v24 = COERCE_UNSIGNED_INT64(CFAbsoluteTimeGetCurrent());
  float64x2_t v25 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 52));
  LODWORD(v26) = *(_DWORD *)(a2 + 44);
  sub_1002A5370(v21);
  double v4 = *(double *)(a1 + 96);
  if (v4 < 0.0 || *(double *)(a1 + 64) <= 0.0 || sub_100292B54(v20.f64[0], v4) >= *(double *)(a1 + 64))
  {
    CFDataRef v12 = CFDataCreate(kCFAllocatorDefault, bytes, 88LL);
    if (v12)
    {
      if (sub_1002AB370((uint64_t)v21, "kCLConnectionMessageHeadingDataKey", (uint64_t)v12))
      {
        *(void *)buf = sub_1002A59CC((uint64_t)v21);
        sub_100CE75B0(a1, buf);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10187E478);
        }
        uint64_t v13 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "sent kCLConnectionMessageHeading,data.heading.calibration,%d",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_10187E478);
          }
          int v27 = 67109120;
          LODWORD(v28) = v26;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "sent kCLConnectionMessageHeading,data.heading.calibration,%d",  &v27);
          uint64_t v18 = (char *)v17;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHeadingSubscription::onCompass(const CLCompass_Type::Sample *)",  "%s\n",  v17);
          if (v18 != buf) {
            free(v18);
          }
        }
      }

      CFRelease(v12);
    }

    __int128 v14 = v24;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&v23[16];
    *(_OWORD *)(a1 + 120) = v14;
    *(float64x2_t *)(a1 + 136) = v25;
    *(void *)(a1 + 152) = v26;
    __int128 v15 = *(_OWORD *)v23;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)bytes;
    *(_OWORD *)(a1 + 88) = v15;
  }

  else
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10187E478);
    }
    uint64_t v5 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a1 + 64);
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 134218496;
      *(float64_t *)&uint8_t buf[4] = v20.f64[0];
      __int16 v34 = 2048;
      uint64_t v35 = v6;
      __int16 v36 = 2048;
      uint64_t v37 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "new heading %.2f is within heading filter of %.2f from previous heading %.2f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10187E478);
      }
      uint64_t v8 = *(void *)(a1 + 64);
      uint64_t v9 = *(void *)(a1 + 96);
      int v27 = 134218496;
      float64_t v28 = v20.f64[0];
      __int16 v29 = 2048;
      uint64_t v30 = v8;
      __int16 v31 = 2048;
      uint64_t v32 = v9;
      LODWORD(v19) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "new heading %.2f is within heading filter of %.2f from previous heading %.2f",  COERCE_DOUBLE(&v27),  v19,  v20.f64[0]);
      id v11 = (char *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHeadingSubscription::onCompass(const CLCompass_Type::Sample *)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  return sub_1002A5590(v21);
}

void sub_100CE7584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100CE75B0(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100CE7644(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100CE7658(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

__n128 sub_100CE7684(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10187E4A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100CE76C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187E4A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100CE76E4(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_100CE76EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100CE7728()
{
}

void sub_100CE7734(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100CE77B8(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    double v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100CE77A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CE77B8(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    __int128 v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187E518);
    }
    id v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      double v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10187E518);
      }
    }

    CFDataRef v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      double v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_100CE799C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100CE79B8(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100CE79E4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100CE7A5C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100CE7A48(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100CE7A5C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100CE7CDC(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100CE7CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100CE7CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100CE7D50(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100CE7D38(_Unwind_Exception *a1)
{
}

void *sub_100CE7D50(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100CE7DA8(_Unwind_Exception *exception_object)
{
}

void *sub_100CE7DC4(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10187E560;
  a1[9] = off_10187E618;
  sub_100CE8A5C((uint64_t)a1);
  return a1;
}

void sub_100CE7E4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100CE7E78(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  *unint64_t v12 = &off_101826EF8;
  *(void *)a1 = off_10187EB28;
  *(void *)(a1 + 72) = off_10187EBD0;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10187EB28;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_10187EBD0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 360) = 0LL;
  *(void *)(a1 + 344) = 0LL;
  *(void *)(a1 + 368) = 3LL;
  *(_BYTE *)(a1 + 376) = 0;
  sub_1010DDBC0((void *)(a1 + 384), "");
  *(void *)(a1 + 408) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 416) = 12000;
  *(void *)(a1 + 424) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 432));
  *(void *)(a1 + 432) = &off_101826EF8;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 248) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  uint64_t v15 = (int *)(a1 + 416);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 416));
  float v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    int *v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187EC10);
  }
  unint64_t v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187EC10);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    uint64_t v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorderDb(const ch ar *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = VO2MaxStagingOutpu t, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 248) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100CE8264( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  *(void *)(v22 + 424) = off_101826EC8;
  sub_1001B9C98(v27);
  sub_100CED54C(v25);
  sub_100D8A88C(v24);
  *(void *)uint64_t v22 = off_101826EC8;
  sub_1001B9C98(v23);
  _Unwind_Resume(a1);
}

void sub_100CE8320()
{
}

uint64_t sub_100CE8328(uint64_t a1)
{
  *(void *)(a1 + 72) = off_10187EBD0;
  uint64_t v2 = a1 + 72;
  *(void *)a1 = off_10187EB28;
  *(void *)(a1 + 424) = off_101826EC8;
  sub_1001B9C98((void *)(a1 + 432));
  sub_100CED54C((void *)(a1 + 176));
  sub_100D8A88C(v2);
  *(void *)a1 = off_101826EC8;
  sub_1001B9C98((void *)(a1 + 8));
  return a1;
}

uint64_t sub_100CE83B8(uint64_t a1)
{
  return sub_100CE8328(a1 - 72);
}

void sub_100CE83C0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100CE8328(a1);
  operator delete(v1);
}

void sub_100CE83D4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100CE8328(a1 - 72);
  operator delete(v1);
}

uint64_t sub_100CE83EC(uint64_t *a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1003C0D54(a1[10], "DELETE FROM VO2MaxStagingHistory WHERE startTime < ?", &v13);
  uint64_t v5 = v13;
  char v6 = (sqlite3_stmt *)sub_100019240(v13);
  if (sub_1003B7480(v6, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
  {
    uint64_t v7 = a1[10];
    unint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
    sub_1003BB2BC(v7, v8);
    uint64_t v9 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }

  else
  {
    uint64_t v9 = -1LL;
  }

  sub_1003C05BC(a1[10]);
  uint64_t v10 = a1[10];
  else {
    uint64_t v11 = *(void *)(v10 + 88);
  }
  sub_1003C1EC0(v10, v11);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v9;
}

void sub_100CE8504(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CE8524(uint64_t a1, uint64_t a2)
{
  return sub_100CE83EC((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100CE852C(uint64_t a1)
{
  uint64_t v3 = v8;
  __int128 v4 = (sqlite3_stmt *)sub_100019240(v8);
  int v5 = sqlite3_step(v4);
  if (v5 == 100)
  {
    char v6 = (sqlite3_stmt *)sub_100019240(v3);
    uint64_t v1 = sqlite3_column_int(v6, 0);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (v5 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100CE85CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CE85F0(uint64_t a1)
{
  return sub_100CE852C(a1 - 72);
}

uint64_t sub_100CE85F8(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    uuid_unparse(a2, out);
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM VO2MaxStagingHistory WHERE sessionId = ?", buf);
    uint64_t v5 = *(void *)buf;
    char v6 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    uint64_t result = sub_1003BC1F0(v6, 1, out);
    if ((_DWORD)result)
    {
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10187E6A8);
      }
      uint64_t v7 = (os_log_s *)qword_1019346E8;
      if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = out;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Deleting VO2MaxStagingHistory records from db where sessionId = %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346E0 != -1) {
          dispatch_once(&qword_1019346E0, &stru_10187E6A8);
        }
        int v12 = 136446210;
        uint64_t v13 = out;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "Deleting VO2MaxStagingHistory records from db where sessionId = %{public}s",  &v12,  12);
        uint64_t v11 = (char *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxStagingOutputRecorderDb::deleteRecordsForSessionId(unsigned char *)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }

      uint64_t v8 = *(void *)(a1 + 80);
      uint64_t v9 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003BB2BC(v8, v9);
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100CE8820(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CE884C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_100CE8858(uint64_t *a1, uint64_t a2)
{
  __int128 v4 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  uint64_t v5 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v5, 1);
  char v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)(a2 + 40) = sqlite3_column_int(v6, 2);
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v7, 3);
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v8, 4);
  uint64_t v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v9, 5);
  uint64_t v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v10, 6);
  uint64_t v11 = (sqlite3_stmt *)sub_100019240(*a1);
  int v12 = sqlite3_column_text(v11, 7);
  uuid_parse((const char *)v12, (unsigned __int8 *)(a2 + 72));
  uint64_t v13 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v13, 8);
  uint64_t v14 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v14, 9);
  uint64_t v15 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v15, 10);
  char v16 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 108) = sqlite3_column_int(v16, 11) != 0;
  float v17 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 109) = sqlite3_column_int(v17, 12) != 0;
  BOOL v18 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 112) = sqlite3_column_int(v18, 13);
  unint64_t v19 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v19, 14);
  unint64_t v20 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v20, 15);
  int v21 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 144) = sqlite3_column_int(v21, 16);
  uint64_t v22 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 148) = sqlite3_column_int(v22, 17);
  unint64_t v23 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 152) = sqlite3_column_int(v23, 18) != 0;
  uint64_t v24 = (sqlite3_stmt *)sub_100019240(*a1);
  float64x2_t v25 = sqlite3_column_text(v24, 19);
  std::string::assign((std::string *)(a2 + 160), (const std::string::value_type *)v25);
  uint64_t v26 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 184) = sqlite3_column_double(v26, 20);
  int v27 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 136) = sqlite3_column_double(v27, 21);
}

uint64_t sub_100CE8A5C(uint64_t a1)
{
  uint64_t result = sub_1003C1048(*(void *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_100CE8AB8(a1);
    return sub_1003B59A0( *(void *)(a1 + 80),  "VO2MaxStagingHistory",  (const char **)&off_10187E6C8,  (const std::string::value_type **)&off_1019901B8,  0);
  }

  return result;
}

uint64_t sub_100CE8AB8(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "VO2MaxStagingHistory");
  if ((_DWORD)result)
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    uint64_t v8 = "startTime";
    do
    {
      __int16 v38 = v8;
      int v39 = 5;
      __int16 v40 = 0;
      char v41 = 0;
      char v42 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "VO2MaxStagingHistory", v8, (uint64_t)&v38) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v34);
        uint64_t v9 = sub_10000CF44(&v35, (uint64_t)"ALTER TABLE VO2MaxStagingHistory ADD COLUMN ", 44LL);
        size_t v10 = strlen(v8);
        uint64_t v11 = sub_10000CF44(v9, (uint64_t)v8, v10);
        int v12 = sub_10000CF44(v11, (uint64_t)" ", 1LL);
        uint64_t v13 = (const char *)sub_1003BCC40((int)(&off_10187E6C8)[v3 + 7]);
        size_t v14 = strlen(v13);
        uint64_t v15 = sub_10000CF44(v12, (uint64_t)v13, v14);
        sub_10000CF44(v15, (uint64_t)";", 1LL);
        uint64_t v16 = *(void *)(a1 + 80);
        std::stringbuf::str(&v31, &v36);
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          float v17 = &v31;
        }
        else {
          float v17 = (std::stringbuf::string_type *)v31.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v16, (char *)v17, &v29);
        uint64_t v18 = v29.__r_.__value_.__r.__words[0];
        v29.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v19 = *(void *)(a1 + 80);
        unint64_t v20 = (sqlite3_stmt *)sub_100019240(v18);
        sub_1003BB2BC(v19, v20);
        sub_10000CE18((uint64_t)&v31);
        int v21 = sub_10000CF44(&v31.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE VO2MaxStagingHistory SET ", 32LL);
        size_t v22 = strlen(v8);
        unint64_t v23 = sub_10000CF44(v21, (uint64_t)v8, v22);
        sub_10000CF44(v23, (uint64_t)" = 0;", 5LL);
        uint64_t v24 = *(void *)(a1 + 80);
        std::stringbuf::str(&v29, &v32);
        if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          float64x2_t v25 = &v29;
        }
        else {
          float64x2_t v25 = (std::stringbuf::string_type *)v29.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v24, (char *)v25, &v30);
        uint64_t v26 = v30;
        uint64_t v30 = 0LL;
        uint64_t v27 = *(void *)(a1 + 80);
        uint64_t v28 = (sqlite3_stmt *)sub_100019240(v26);
        sub_1003BB2BC(v27, v28);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
        }
        v31.__r_.__value_.__r.__words[0] = v5;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + *(void *)(v5 - 24)) = v7;
        v31.__r_.__value_.__l.__cap_ = v6;
        std::streambuf::~streambuf(&v32);
        std::ios::~ios(&v33);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
        v34[0] = v5;
        *(void *)((char *)v34 + *(void *)(v5 - 24)) = v7;
        std::string::size_type v35 = v6;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        int v4 = 1;
      }

      uint64_t v8 = (&off_10187E6C8)[v3 + 12];
      v3 += 6LL;
    }

    while (v3 != 126);
    uint64_t result = sub_100CE8EF4( a1,  "VO2MaxStagingHistory",  (const char **)&off_10187E6C8,  (const std::string::value_type **)&off_1019901B8);
  }

  return result;
}

void sub_100CE8E5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a21);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
  }
  sub_1011F8850((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_100CE8EF4(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187EC10);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187EC10);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(c onst char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    uint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    size_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      size_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      uint64_t v16 = v143;
    }
    else {
      uint64_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      int v21 = &__p;
    }
    else {
      int v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    size_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      uint64_t v28 = v143;
    }
    else {
      uint64_t v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    uint64_t v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::stringbuf v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v34 = &v139;
    }
    else {
      __int16 v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v41 = &__p;
    }
    else {
      char v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    char v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      unint64_t v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v47 = &__p;
      }
      else {
        uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      __int16 v48 = v143;
    }
    else {
      __int16 v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    uint64_t v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v54 = buf;
    }
    else {
      __int128 v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    __int16 v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v60 = buf;
    }
    else {
      __int16 v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int16 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v69 = &__p;
    }
    else {
      double v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    __int16 v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v75 = &__p;
      }
      else {
        uint64_t v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      uint64_t v79 = &__p;
    }
    else {
      uint64_t v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    char v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v85 = &__p;
      }
      else {
        __int16 v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      uint64_t v86 = v143;
    }
    else {
      uint64_t v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    __int128 v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v95 = &__p;
    }
    else {
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v103 = &__p;
        }
        else {
          v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        v104 = v141;
      }
      else {
        v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v114 = buf;
      }
      else {
        v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v121 = &__p;
      }
      else {
        v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187EC10);
      }
      v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187EC10);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints (const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxStagingOutput, DataProtectionPo licy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187EC10);
      }
      v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187EC10);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints (const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxStagingOutput, DataProtectionPo licy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100CEA08C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CEA3AC(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM VO2MaxStagingHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    std::string::size_type v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_100CEA440(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CEA460(uint64_t a1)
{
  return sub_100CEA3AC(a1 - 72);
}

void *sub_100CEA468@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "VO2MaxStagingHistory");
}

void *sub_100CEA478@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "VO2MaxStagingHistory");
}

uint64_t sub_100CEA488(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO VO2MaxStagingHistory (startTime, workoutType, estimatedVo2Max, durationInSeconds, hrMax, hrMin, sessio nId, variance, filteredVo2Max, sessionType, eligibleForHealthKit, eligibleForCalorimetry, numWorkoutsContrToEstima te, estimatedHRResponseParam, estimatedHRRecoveryParam, algorithmVersion, sampleVersion, betaBlockerUse, bundleIde ntifier, previousVo2Max,sessionVo2Max) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  v30);
    uint64_t v5 = *(void *)v30;
    uuid_unparse((const unsigned __int8 *)(a2 + 72), v30);
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v5);
    uint64_t result = sub_1003B7480(v6, 1, *(double *)(a2 + 24));
    if ((_DWORD)result)
    {
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003C28BC(v7, 2, *(_DWORD *)(a2 + 40));
      if ((_DWORD)result)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
        uint64_t result = sub_1003B7480(v8, 3, *(double *)(a2 + 32));
        if ((_DWORD)result)
        {
          uint64_t v9 = (sqlite3_stmt *)sub_100019240(v5);
          uint64_t result = sub_1003B7480(v9, 4, *(double *)(a2 + 48));
          if ((_DWORD)result)
          {
            __int128 v10 = (sqlite3_stmt *)sub_100019240(v5);
            uint64_t result = sub_1003B7480(v10, 5, *(double *)(a2 + 56));
            if ((_DWORD)result)
            {
              uint64_t v11 = (sqlite3_stmt *)sub_100019240(v5);
              uint64_t result = sub_1003B7480(v11, 6, *(double *)(a2 + 64));
              if ((_DWORD)result)
              {
                __int128 v12 = (sqlite3_stmt *)sub_100019240(v5);
                uint64_t result = sub_1003BC1F0(v12, 7, v30);
                if ((_DWORD)result)
                {
                  uint64_t v13 = (sqlite3_stmt *)sub_100019240(v5);
                  uint64_t result = sub_1003B7480(v13, 8, *(double *)(a2 + 88));
                  if ((_DWORD)result)
                  {
                    size_t v14 = (sqlite3_stmt *)sub_100019240(v5);
                    uint64_t result = sub_1003B7480(v14, 9, *(double *)(a2 + 96));
                    if ((_DWORD)result)
                    {
                      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v5);
                      uint64_t result = sub_1003C28BC(v15, 10, *(_DWORD *)(a2 + 104));
                      if ((_DWORD)result)
                      {
                        uint64_t v16 = (sqlite3_stmt *)sub_100019240(v5);
                        uint64_t result = sub_1003C28BC(v16, 11, *(unsigned __int8 *)(a2 + 108));
                        if ((_DWORD)result)
                        {
                          std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v5);
                          uint64_t result = sub_1003C28BC(v17, 12, *(unsigned __int8 *)(a2 + 109));
                          if ((_DWORD)result)
                          {
                            uint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
                            uint64_t result = sub_1003C2AF0(v18, 13, *(_DWORD *)(a2 + 112));
                            if ((_DWORD)result)
                            {
                              std::string::size_type v19 = (sqlite3_stmt *)sub_100019240(v5);
                              uint64_t result = sub_1003B7480(v19, 14, *(double *)(a2 + 120));
                              if ((_DWORD)result)
                              {
                                signed __int8 v20 = (sqlite3_stmt *)sub_100019240(v5);
                                uint64_t result = sub_1003B7480(v20, 15, *(double *)(a2 + 128));
                                if ((_DWORD)result)
                                {
                                  int v21 = (sqlite3_stmt *)sub_100019240(v5);
                                  uint64_t result = sub_1003C28BC(v21, 16, *(_DWORD *)(a2 + 144));
                                  if ((_DWORD)result)
                                  {
                                    size_t v22 = (sqlite3_stmt *)sub_100019240(v5);
                                    uint64_t result = sub_1003C2AF0(v22, 17, *(_DWORD *)(a2 + 148));
                                    if ((_DWORD)result)
                                    {
                                      int v23 = (sqlite3_stmt *)sub_100019240(v5);
                                      uint64_t result = sub_1003C28BC(v23, 18, *(unsigned __int8 *)(a2 + 152));
                                      if ((_DWORD)result)
                                      {
                                        std::string::size_type v24 = (sqlite3_stmt *)sub_100019240(v5);
                                        else {
                                          size_t v25 = *(char **)(a2 + 160);
                                        }
                                        uint64_t result = sub_1003BC1F0(v24, 19, v25);
                                        if ((_DWORD)result)
                                        {
                                          uint64_t v26 = (sqlite3_stmt *)sub_100019240(v5);
                                          uint64_t result = sub_1003B7480(v26, 20, *(double *)(a2 + 184));
                                          if ((_DWORD)result)
                                          {
                                            uint64_t v27 = (sqlite3_stmt *)sub_100019240(v5);
                                            uint64_t result = sub_1003B7480(v27, 21, *(double *)(a2 + 136));
                                            if ((_DWORD)result)
                                            {
                                              uint64_t v28 = *(void *)(a1 + 80);
                                              std::string::size_type v29 = (sqlite3_stmt *)sub_100019240(v5);
                                              uint64_t result = sub_1003BB2BC(v28, v29);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100CEA748(_Unwind_Exception *exception_object)
{
}

void sub_100CEA770(uint64_t a1, uint64_t *a2)
{
  if (sub_100D8A92C(a1 + 72))
  {
    sub_100307030(a2);
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from VO2MaxStagingHistory ORDER BY startTime ASC", &v17);
    uint64_t v4 = v17;
    uint64_t v16 = v17;
    sub_1003C0454(*(void *)(a1 + 80));
    *((void *)&v18 + 1) = 0LL;
    *((void *)&v24 + 1) = 0LL;
    __int128 v25 = 0uLL;
    uint64_t v26 = 3LL;
    char v27 = 0;
    sub_1010DDBC0(&__p, "");
    unint64_t v30 = 0xBFF0000000000000LL;
    while (!sub_100CEA98C(&v16, (uint64_t)&v17))
    {
      unint64_t v5 = a2[1];
      if (v5 >= a2[2])
      {
        uint64_t v15 = sub_100CED6A8(a2, (uint64_t)&v17);
      }

      else
      {
        *(_OWORD *)unint64_t v5 = v17;
        __int128 v6 = v18;
        __int128 v7 = v19;
        __int128 v8 = v21;
        *(_OWORD *)(v5 + 48) = v20;
        *(_OWORD *)(v5 + 64) = v8;
        *(_OWORD *)(v5 + 16) = v6;
        *(_OWORD *)(v5 + 32) = v7;
        __int128 v9 = v22;
        __int128 v10 = v23;
        __int128 v11 = v25;
        *(_OWORD *)(v5 + 112) = v24;
        *(_OWORD *)(v5 + 128) = v11;
        *(_OWORD *)(v5 + 80) = v9;
        *(_OWORD *)(v5 + 96) = v10;
        uint64_t v12 = v26;
        *(_BYTE *)(v5 + 152) = v27;
        *(void *)(v5 + 144) = v12;
        uint64_t v13 = (_BYTE *)(v5 + 160);
        if (SHIBYTE(v29) < 0)
        {
          sub_1010DD48C(v13, (void *)__p, *((unint64_t *)&__p + 1));
        }

        else
        {
          __int128 v14 = __p;
          *(void *)(v5 + 176) = v29;
          *(_OWORD *)uint64_t v13 = v14;
        }

        *(void *)(v5 + 184) = v30;
        uint64_t v15 = v5 + 192;
        a2[1] = v5 + 192;
      }

      a2[1] = v15;
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    if (SHIBYTE(v29) < 0) {
      operator delete((void *)__p);
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

void sub_100CEA938( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CEA98C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  sub_100CE8858(a1, a2);
  return 0LL;
}

uint64_t sub_100CEA9E8(uint64_t a1, uint64_t *a2)
{
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    sub_100307030(a2);
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM VO2MaxStagingHistory WHERE sessionId IN (SELECT sessionId FROM VO2MaxStagingLostEstimateHistory)",  buf);
    uint64_t v4 = *(void *)buf;
    v20[0] = *(void *)buf;
    *((void *)&v22 + 1) = 0LL;
    *((void *)&v28 + 1) = 0LL;
    __int128 v29 = 0uLL;
    uint64_t v30 = 3LL;
    char v31 = 0;
    sub_1010DDBC0(&__p, "");
    unint64_t v34 = 0xBFF0000000000000LL;
    while (!sub_100CEA98C(v20, (uint64_t)buf))
    {
      unint64_t v5 = a2[1];
      if (v5 >= a2[2])
      {
        uint64_t v15 = sub_100CED6A8(a2, (uint64_t)buf);
      }

      else
      {
        *(_OWORD *)unint64_t v5 = *(_OWORD *)buf;
        __int128 v6 = v22;
        __int128 v7 = v23;
        __int128 v8 = v25;
        *(_OWORD *)(v5 + 48) = v24;
        *(_OWORD *)(v5 + 64) = v8;
        *(_OWORD *)(v5 + 16) = v6;
        *(_OWORD *)(v5 + 32) = v7;
        __int128 v9 = v26;
        __int128 v10 = v27;
        __int128 v11 = v29;
        *(_OWORD *)(v5 + 112) = v28;
        *(_OWORD *)(v5 + 128) = v11;
        *(_OWORD *)(v5 + 80) = v9;
        *(_OWORD *)(v5 + 96) = v10;
        uint64_t v12 = v30;
        *(_BYTE *)(v5 + 152) = v31;
        *(void *)(v5 + 144) = v12;
        uint64_t v13 = (_BYTE *)(v5 + 160);
        if (SHIBYTE(v33) < 0)
        {
          sub_1010DD48C(v13, (void *)__p, *((unint64_t *)&__p + 1));
        }

        else
        {
          __int128 v14 = __p;
          *(void *)(v5 + 176) = v33;
          *(_OWORD *)uint64_t v13 = v14;
        }

        *(void *)(v5 + 184) = v34;
        uint64_t v15 = v5 + 192;
        a2[1] = v5 + 192;
      }

      a2[1] = v15;
    }

    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__p);
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    return 100LL;
  }

  else
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10187E6A8);
    }
    uint64_t v16 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "VO2MaxStagingHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10187E6A8);
      }
      LOWORD(v20[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "VO2MaxStagingHistory, DB not accessible",  v20,  2);
      __int128 v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLVO2MaxStagingOutputRecorderDb::getRecordsWithConflictingStagingData(std::vector<VO2MaxStagingOutput> &) const",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }

    return 109LL;
  }

void sub_100CEACC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8LL))(v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CEAD0C(uint64_t a1, uint64_t *a2, double a3)
{
  if ((sub_100D8A92C(a1 + 72) & 1) != 0)
  {
    sub_100307030(a2);
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM VO2MaxStagingHistory WHERE estimatedVo2Max IS NOT NULL AND startTime > ? ORDER BY startTime DESC",  buf);
    uint64_t v6 = *(void *)buf;
    v22[0] = *(void *)buf;
    *((void *)&v24 + 1) = 0LL;
    *((void *)&v30 + 1) = 0LL;
    __int128 v31 = 0uLL;
    uint64_t v32 = 3LL;
    char v33 = 0;
    sub_1010DDBC0(&__p, "");
    unint64_t v36 = 0xBFF0000000000000LL;
    __int128 v7 = (sqlite3_stmt *)sub_100019240(v6);
    if (sub_1003C28BC(v7, 1, (int)a3))
    {
      while (!sub_100CEA98C(v22, (uint64_t)buf))
      {
        unint64_t v8 = a2[1];
        if (v8 >= a2[2])
        {
          uint64_t v18 = sub_100CED6A8(a2, (uint64_t)buf);
        }

        else
        {
          *(_OWORD *)unint64_t v8 = *(_OWORD *)buf;
          __int128 v9 = v24;
          __int128 v10 = v25;
          __int128 v11 = v27;
          *(_OWORD *)(v8 + 48) = v26;
          *(_OWORD *)(v8 + 64) = v11;
          *(_OWORD *)(v8 + 16) = v9;
          *(_OWORD *)(v8 + 32) = v10;
          __int128 v12 = v28;
          __int128 v13 = v29;
          __int128 v14 = v31;
          *(_OWORD *)(v8 + 112) = v30;
          *(_OWORD *)(v8 + 128) = v14;
          *(_OWORD *)(v8 + 80) = v12;
          *(_OWORD *)(v8 + 96) = v13;
          uint64_t v15 = v32;
          *(_BYTE *)(v8 + 152) = v33;
          *(void *)(v8 + 144) = v15;
          uint64_t v16 = (_BYTE *)(v8 + 160);
          if (SHIBYTE(v35) < 0)
          {
            sub_1010DD48C(v16, (void *)__p, *((unint64_t *)&__p + 1));
          }

          else
          {
            __int128 v17 = __p;
            *(void *)(v8 + 176) = v35;
            *(_OWORD *)uint64_t v16 = v17;
          }

          *(void *)(v8 + 184) = v36;
          uint64_t v18 = v8 + 192;
          a2[1] = v8 + 192;
        }

        a2[1] = v18;
      }
    }

    if (SHIBYTE(v35) < 0) {
      operator delete((void *)__p);
    }
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    return 100LL;
  }

  else
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10187E6A8);
    }
    __int128 v19 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "VO2MaxStagingHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10187E6A8);
      }
      LOWORD(v22[0]) = 0;
      __int128 v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "VO2MaxStagingHistory, DB not accessible",  v22,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLVO2MaxStagingOutputRecorderDb::querySinceTime(CFAbsoluteTime, std::vector<VO2MaxStagingOutput> &) const",  "%s\n",  v21);
    }

    return 109LL;
  }

void sub_100CEB008( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8LL))(v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CEB058(uint64_t a1)
{
  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10187E6A8);
  }
  uint64_t v2 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Promoting staging data", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10187E6A8);
    }
    v27[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "Promoting staging data",  v27,  2);
    __int128 v23 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLVO2MaxStagingOutputRecorderDb::promoteStagingData() const",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

  if ((sub_100D8A92C(a1 + 72) & 1) == 0)
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10187E6A8);
    }
    __int128 v20 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "VO2MaxStagingHistory, DB not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10187E6A8);
      }
      v27[0] = 0;
      LODWORD(v26) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "VO2MaxStagingHistory, DB not accessible",  v27,  v26);
      __int128 v25 = (uint8_t *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLVO2MaxStagingOutputRecorderDb::promoteStagingData() const",  "%s\n",  v24);
      if (v25 != buf) {
        free(v25);
      }
    }

    return 109LL;
  }

  sub_1003C0454(*(void *)(a1 + 80));
  sub_1003C0D54( *(void *)(a1 + 80),  "DELETE FROM VO2MaxHistory WHERE sessionId IN (SELECT sessionId from VO2MaxStagingSummaryHistory) OR sessionId IN (SE LECT sessionId from VO2MaxStagingLostEstimateHistory)",  buf);
  uint64_t v3 = *(void *)buf;
  uint64_t v4 = *(void *)(a1 + 80);
  unint64_t v5 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sub_1003BB2BC(v4, v5))
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO VO2MaxHistory SELECT NULL, startTime, workoutType, estimatedVo2Max, durationInSeconds, hrMax, hrMin, s essionId, variance, filteredVo2Max, sessionType, eligibleForHealthKit, eligibleForCalorimetry, numWorkoutsContrToE stimate, estimatedHRResponseParam, estimatedHRRecoveryParam, sessionVo2Max FROM VO2MaxStagingHistory",  buf);
    uint64_t v6 = *(void *)buf;
    *(void *)buf = 0LL;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
      uint64_t v7 = *(void *)buf;
      *(void *)buf = 0LL;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
      }
    }

    uint64_t v8 = *(void *)(a1 + 80);
    __int128 v9 = (sqlite3_stmt *)sub_100019240(v6);
    if (!sub_1003BB2BC(v8, v9)) {
      goto LABEL_35;
    }
    sub_1003C0D54( *(void *)(a1 + 80),  "DELETE FROM VO2MaxSummaryHistory WHERE sessionId IN (SELECT sessionId from VO2MaxStagingSummaryHistory) OR session Id IN (SELECT sessionId from VO2MaxStagingLostEstimateHistory)",  buf);
    uint64_t v3 = *(void *)buf;
    *(void *)buf = 0LL;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
      uint64_t v10 = *(void *)buf;
      *(void *)buf = 0LL;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
      }
    }

    uint64_t v11 = *(void *)(a1 + 80);
    __int128 v12 = (sqlite3_stmt *)sub_100019240(v3);
    if (!sub_1003BB2BC(v11, v12)) {
      goto LABEL_32;
    }
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO VO2MaxSummaryHistory SELECT NULL, startTime, workoutType, sessionId, durationInSeconds, pointCount, hr Max, hrMin, meanHr, meanVo2, meanSpeed, meanGrade, meanHrConfidence, meanHrCadenceAgreement, meanCadence, vo2MaxMo delSource, sessionType FROM VO2MaxStagingSummaryHistory",  buf);
    uint64_t v6 = *(void *)buf;
    *(void *)buf = 0LL;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
      uint64_t v13 = *(void *)buf;
      *(void *)buf = 0LL;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
      }
    }

    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v15 = (sqlite3_stmt *)sub_100019240(v6);
    if (!sub_1003BB2BC(v14, v15))
    {
LABEL_35:
      uint64_t v19 = 108LL;
      uint64_t v3 = v6;
      if (!v6) {
        return v19;
      }
      goto LABEL_33;
    }

    sub_1003C0D54( *(void *)(a1 + 80),  "UPDATE VO2MaxSessionAttributesHistory AS sah SET algorithmVersion = (SELECT sh.algorithmVersion FROM VO2MaxStaging History AS sh WHERE sh.sessionId = sah.sessionId) WHERE sah.sessionId in (SELECT sh.sessionId FROM VO2MaxStagingSu mmaryHistory AS sh)",  buf);
    uint64_t v3 = *(void *)buf;
    *(void *)buf = 0LL;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
      uint64_t v16 = *(void *)buf;
      *(void *)buf = 0LL;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
      }
    }

    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v18 = (sqlite3_stmt *)sub_100019240(v3);
    if (sub_1003BB2BC(v17, v18))
    {
      sub_1003C05BC(*(void *)(a1 + 80));
      uint64_t v19 = 100LL;
      if (!v3) {
        return v19;
      }
      goto LABEL_33;
    }
  }

void sub_100CEB550(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CEB590(void *a1, uint64_t *a2, double a3, double a4)
{
  uint64_t v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v35);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if (HIBYTE(v36)) {
      goto LABEL_3;
    }
LABEL_30:
    sub_10126A7B8(v10);
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v4 = (std::stringbuf *)v35[1];
  operator delete(v35[0]);
  if (!v4) {
    goto LABEL_30;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v35);
  uint64_t v11 = sub_10000CF44(&v36, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(__int128 *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((SBYTE7(v40) & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (__int128 *)__p;
  }
  if ((SBYTE7(v40) & 0x80u) == 0) {
    uint64_t v13 = BYTE7(v40);
  }
  else {
    uint64_t v13 = *((void *)&__p + 1);
  }
  uint64_t v14 = sub_10000CF44(v11, (uint64_t)p_p, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if (SBYTE7(v40) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v15 = a1[10];
  uint64_t v4 = &v37;
  std::stringbuf::str((std::stringbuf::string_type *)&__p, &v37);
  if ((SBYTE7(v40) & 0x80u) == 0) {
    uint64_t v16 = (char *)&__p;
  }
  else {
    uint64_t v16 = (char *)__p;
  }
  sub_1003C0D54(v15, v16, &v33);
  uint64_t v5 = v33;
  uint64_t v33 = 0LL;
  uint64_t v34 = v5;
  if (SBYTE7(v40) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    uint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      *((void *)&v40 + 1) = 0LL;
      *((void *)&v46 + 1) = 0LL;
      __int128 v47 = 0uLL;
      uint64_t v48 = 3LL;
      char v49 = 0;
      sub_1010DDBC0(&v50, "");
      unint64_t v52 = 0xBFF0000000000000LL;
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v34, (uint64_t)&__p);
        if ((_DWORD)v19) {
          break;
        }
        unint64_t v20 = a2[1];
        if (v20 >= a2[2])
        {
          uint64_t v30 = sub_100CED6A8(a2, (uint64_t)&__p);
        }

        else
        {
          *(_OWORD *)unint64_t v20 = __p;
          __int128 v21 = v40;
          __int128 v22 = v41;
          __int128 v23 = v43;
          *(_OWORD *)(v20 + 48) = v42;
          *(_OWORD *)(v20 + 64) = v23;
          *(_OWORD *)(v20 + 16) = v21;
          *(_OWORD *)(v20 + 32) = v22;
          __int128 v24 = v44;
          __int128 v25 = v45;
          __int128 v26 = v47;
          *(_OWORD *)(v20 + 112) = v46;
          *(_OWORD *)(v20 + 128) = v26;
          *(_OWORD *)(v20 + 80) = v24;
          *(_OWORD *)(v20 + 96) = v25;
          uint64_t v27 = v48;
          *(_BYTE *)(v20 + 152) = v49;
          *(void *)(v20 + 144) = v27;
          __int128 v28 = (_BYTE *)(v20 + 160);
          if (SHIBYTE(v51) < 0)
          {
            sub_1010DD48C(v28, (void *)v50, *((unint64_t *)&v50 + 1));
          }

          else
          {
            __int128 v29 = v50;
            *(void *)(v20 + 176) = v51;
            *(_OWORD *)__int128 v28 = v29;
          }

          *(void *)(v20 + 184) = v52;
          uint64_t v30 = v20 + 192;
          a2[1] = v20 + 192;
        }

        a2[1] = v30;
      }

      if (SHIBYTE(v51) < 0) {
        operator delete((void *)v50);
      }
      uint64_t v5 = v34;
      goto LABEL_35;
    }
  }

void sub_100CEB8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8LL))(a3);
  }
  sub_1011F8850((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CEB960(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v47 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187EC10);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v51 = 0;
      *(_WORD *)&v51[4] = 2082;
      *(void *)&v51[6] = "";
      __int16 v52 = 2082;
      __int128 v53 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187EC10);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)buf = 134349056;
        *(void *)uint64_t v51 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187EC10);
        }
        uint64_t v42 = *(void *)(a1 + 216);
        int v48 = 134349056;
        uint64_t v49 = v42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v48,  12);
        __int128 v44 = (uint8_t *)v43;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseA ccessible() [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v43);
        if (v44 != buf) {
          free(v44);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_72;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187EC10);
    }
    uint64_t v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)uint64_t v51 = 0;
      *(_WORD *)&v51[4] = 2082;
      *(void *)&v51[6] = "";
      __int16 v52 = 2082;
      __int128 v53 = v11;
      __int16 v54 = 2049;
      uint64_t v55 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    uint64_t v16 = (void *)(v14 + 8 * (v13 / 0x15));
    unsigned int v46 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 192 * (v13 % 0x15);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x15)) + 192 * (v22 % 0x15);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187EC30);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10187EC30);
        }
        LOWORD(v48) = 0;
        LODWORD(v45) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v48,  v45);
        uint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseA ccessible() [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 192LL;
      if (v17 - *v16 == 4032)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v46;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187EC10);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v51 = 0;
      *(_WORD *)&v51[4] = 2082;
      *(void *)&v51[6] = "";
      __int16 v52 = 2082;
      __int128 v53 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187EC10);
      }
    }

    unint64_t v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      __int128 v21 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v51 = 0;
      *(_WORD *)&v51[4] = 2082;
      *(void *)&v51[6] = "";
      __int16 v52 = 2082;
      __int128 v53 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  __int128 v28 = *(void ***)(a1 + 184);
  __int128 v29 = *(void ***)(a1 + 192);
  if (v29 == v28)
  {
    uint64_t v30 = (void *)(a1 + 216);
    __int128 v29 = *(void ***)(a1 + 184);
  }

  else
  {
    uint64_t v30 = (void *)(a1 + 216);
    unint64_t v31 = *(void *)(a1 + 208);
    uint64_t v32 = &v28[v31 / 0x15];
    unint64_t v33 = (unint64_t)*v32;
    unint64_t v34 = (unint64_t)*v32 + 192 * (v31 % 0x15);
    unint64_t v35 = (unint64_t)v28[(*(void *)(a1 + 216) + v31) / 0x15] + 192 * ((*(void *)(a1 + 216) + v31) % 0x15);
    if (v34 != v35)
    {
      do
      {
        if (*(char *)(v34 + 183) < 0)
        {
          operator delete(*(void **)(v34 + 160));
          unint64_t v33 = (unint64_t)*v32;
        }

        v34 += 192LL;
        if (v34 - v33 == 4032)
        {
          unint64_t v36 = (unint64_t)v32[1];
          ++v32;
          unint64_t v33 = v36;
          unint64_t v34 = v36;
        }
      }

      while (v34 != v35);
      __int128 v28 = *(void ***)(a1 + 184);
      __int128 v29 = *(void ***)(a1 + 192);
    }
  }

  *uint64_t v30 = 0LL;
  unint64_t v37 = (char *)v29 - (char *)v28;
  if ((unint64_t)((char *)v29 - (char *)v28) >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v38 = *(void *)(a1 + 192);
      __int128 v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v37 = v38 - (void)v28;
    }

    while (v37 > 0x10);
  }

  if (v37 >> 3 == 1)
  {
    uint64_t v39 = 10LL;
  }

  else
  {
    if (v37 >> 3 != 2) {
      goto LABEL_70;
    }
    uint64_t v39 = 21LL;
  }

  *(void *)(a1 + 208) = v39;
LABEL_70:
  __int128 v40 = *(void **)(a1 + 144);
  if (v40)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100CEC15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

double sub_100CEC190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  __int128 v5 = *(_OWORD *)(a3 + 16);
  __int128 v6 = *(_OWORD *)(a3 + 32);
  __int128 v7 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  __int128 v8 = *(_OWORD *)(a3 + 80);
  __int128 v9 = *(_OWORD *)(a3 + 96);
  __int128 v10 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v9;
  uint64_t v11 = *(void *)(a3 + 144);
  *(_BYTE *)(a2 + 152) = *(_BYTE *)(a3 + 152);
  *(void *)(a2 + 144) = v11;
  std::string::operator=((std::string *)(a2 + 160), (const std::string *)(a3 + 160));
  double result = *(double *)(a3 + 184);
  *(double *)(a2 + 184) = result;
  return result;
}

id *sub_100CEC1FC(uint64_t a1, uint64_t a2, char a3)
{
  v53[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v53[1] = 0LL;
  __int128 v6 = (_OWORD *)(a1 + 224);
  if (*(double *)(a1 + 248) <= 0.0
    || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    if ((a3 & 1) == 0) {
      sub_1003C0454(*(void *)(a1 + 80));
    }
    double v63 = 0.0;
    uint64_t v64 = 0LL;
    uint64_t v66 = 0LL;
    uint64_t v65 = 0LL;
    uint64_t v67 = 3LL;
    char v68 = 0;
    sub_1010DDBC0(&__p, "");
    unint64_t v71 = 0xBFF0000000000000LL;
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 104LL))(a1, v62);
    if (v7 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
      *__int128 v6 = *(_OWORD *)a2;
      __int128 v22 = *(_OWORD *)(a2 + 16);
      __int128 v23 = *(_OWORD *)(a2 + 32);
      __int128 v24 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 288) = v24;
      *(_OWORD *)(a1 + 240) = v22;
      *(_OWORD *)(a1 + 256) = v23;
      __int128 v25 = *(_OWORD *)(a2 + 80);
      __int128 v26 = *(_OWORD *)(a2 + 96);
      __int128 v27 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 352) = v27;
      *(_OWORD *)(a1 + 304) = v25;
      *(_OWORD *)(a1 + 320) = v26;
      uint64_t v28 = *(void *)(a2 + 144);
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 152);
      *(void *)(a1 + 368) = v28;
      std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 160));
    }

    else
    {
      if (v7)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187EC10);
        }
        __int128 v29 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187EC10);
          }
          LOWORD(v54) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v54,  2);
          unint64_t v31 = (uint8_t *)v30;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAn dStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v30);
          if (v31 != buf) {
            free(v31);
          }
        }

void sub_100CECA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  if (SLOBYTE(STACK[0x76F]) < 0) {
    operator delete((void *)STACK[0x758]);
  }
  sub_1001BA1BC((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CECA9C(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    __int128 v20 = (_Unwind_Exception *)sub_10126A924(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  __int128 v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    __int128 v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 24)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100CECCFC(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10126AA90(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    __int128 v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100CECF34(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10126ABFC(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  __int128 v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

uint64_t sub_100CED15C(uint64_t a1)
{
  return sub_100CEB960(a1 - 72);
}

void sub_100CED164(id a1)
{
  qword_1019346E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_100CED190(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v29);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    if (HIBYTE(v30)) {
      goto LABEL_3;
    }
LABEL_35:
    sub_10126AD68(v4);
    __break(1u);
  }

  uint64_t v26 = v29[1];
  operator delete(v29[0]);
  if (!v26) {
    goto LABEL_35;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100307030(a2);
    sub_10000CE18((uint64_t)v29);
    __int128 v6 = sub_10000CF44(&v30, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a1 + 64))(&__p, a1);
    if ((SBYTE7(v34) & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (__int128 *)__p;
    }
    if ((SBYTE7(v34) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v34);
    }
    else {
      uint64_t v8 = *((void *)&__p + 1);
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)p_p, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if (SBYTE7(v34) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)&__p, &v31);
    if ((SBYTE7(v34) & 0x80u) == 0) {
      uint64_t v11 = (char *)&__p;
    }
    else {
      uint64_t v11 = (char *)__p;
    }
    sub_1003C0D54(v10, v11, &v27);
    uint64_t v12 = v27;
    uint64_t v27 = 0LL;
    uint64_t v28 = v12;
    if (SBYTE7(v34) < 0) {
      operator delete((void *)__p);
    }
    sub_1003C0454(a1[10]);
    *((void *)&v34 + 1) = 0LL;
    *((void *)&v40 + 1) = 0LL;
    __int128 v41 = 0uLL;
    uint64_t v42 = 3LL;
    char v43 = 0;
    sub_1010DDBC0(&v44, "");
    unint64_t v46 = 0xBFF0000000000000LL;
    while (!sub_1001BA11C((uint64_t)a1, &v28, (uint64_t)&__p))
    {
      unint64_t v13 = a2[1];
      if (v13 >= a2[2])
      {
        uint64_t v23 = sub_100CED6A8(a2, (uint64_t)&__p);
      }

      else
      {
        *(_OWORD *)unint64_t v13 = __p;
        __int128 v14 = v34;
        __int128 v15 = v35;
        __int128 v16 = v37;
        *(_OWORD *)(v13 + 48) = v36;
        *(_OWORD *)(v13 + 64) = v16;
        *(_OWORD *)(v13 + 16) = v14;
        *(_OWORD *)(v13 + 32) = v15;
        __int128 v17 = v38;
        __int128 v18 = v39;
        __int128 v19 = v41;
        *(_OWORD *)(v13 + 112) = v40;
        *(_OWORD *)(v13 + 128) = v19;
        *(_OWORD *)(v13 + 80) = v17;
        *(_OWORD *)(v13 + 96) = v18;
        uint64_t v20 = v42;
        *(_BYTE *)(v13 + 152) = v43;
        *(void *)(v13 + 144) = v20;
        uint64_t v21 = (_BYTE *)(v13 + 160);
        if (SHIBYTE(v45) < 0)
        {
          sub_1010DD48C(v21, (void *)v44, *((unint64_t *)&v44 + 1));
        }

        else
        {
          __int128 v22 = v44;
          *(void *)(v13 + 176) = v45;
          *(_OWORD *)uint64_t v21 = v22;
        }

        *(void *)(v13 + 184) = v46;
        uint64_t v23 = v13 + 192;
        a2[1] = v13 + 192;
      }

      a2[1] = v23;
    }

    sub_1003C05BC(a1[10]);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
    uint64_t v24 = v28;
    uint64_t v28 = 0LL;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    }
    *(void **)((char *)v29
    uint64_t v30 = v25;
    std::streambuf::~streambuf(&v31);
    return std::ios::~ios(&v32);
  }

  return result;
}

void sub_100CED48C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a71 < 0) {
    operator delete(__p);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  sub_1011F8850((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100CED520(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100CED54C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }

  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    __int128 v6 = &v2[v5 / 0x15];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 192 * (v5 % 0x15);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0x15] + 192 * ((a1[5] + v5) % 0x15);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 183) < 0)
        {
          operator delete(*(void **)(v8 + 160));
          unint64_t v7 = (unint64_t)*v6;
        }

        v8 += 192LL;
        if (v8 - v7 == 4032)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }

      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }

  *uint64_t v4 = 0LL;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 10LL;
  }

  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 21LL;
  }

  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    __int128 v14 = *v2++;
    operator delete(v14);
  }

  return sub_1000EA11C((uint64_t)a1);
}

uint64_t sub_100CED6A8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555LL) {
    sub_100007008();
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556LL * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555LL;
  }
  else {
    unint64_t v6 = v4;
  }
  __int128 v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)sub_10001DF10((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0LL;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[192 * v3];
  uint64_t v13 = &v7[192 * v6];
  sub_100CED7B4((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 192;
  sub_100CED840(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100CEDA0C((uint64_t)&v10);
  return v8;
}

void sub_100CED7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

double sub_100CED7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  __int128 v5 = *(_OWORD *)(a3 + 16);
  __int128 v6 = *(_OWORD *)(a3 + 32);
  __int128 v7 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  __int128 v8 = *(_OWORD *)(a3 + 80);
  __int128 v9 = *(_OWORD *)(a3 + 96);
  __int128 v10 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v9;
  uint64_t v11 = *(void *)(a3 + 144);
  *(_BYTE *)(a2 + 152) = *(_BYTE *)(a3 + 152);
  *(void *)(a2 + 144) = v11;
  unint64_t v12 = (_BYTE *)(a2 + 160);
  if (*(char *)(a3 + 183) < 0)
  {
    sub_1010DD48C(v12, *(void **)(a3 + 160), *(void *)(a3 + 168));
  }

  else
  {
    __int128 v13 = *(_OWORD *)(a3 + 160);
    *(void *)(a2 + 176) = *(void *)(a3 + 176);
    *(_OWORD *)unint64_t v12 = v13;
  }

  double result = *(double *)(a3 + 184);
  *(double *)(a2 + 184) = result;
  return result;
}

uint64_t sub_100CED840(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100CED8B4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100CED8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v21 = a6;
  *((void *)&v21 + 1) = a7;
  __int128 v20 = v21;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  if (a3 == a5)
  {
    uint64_t v16 = a6;
  }

  else
  {
    do
    {
      *(_OWORD *)(v7 - 192) = *(_OWORD *)(a3 - 192);
      __int128 v8 = *(_OWORD *)(a3 - 176);
      __int128 v9 = *(_OWORD *)(a3 - 160);
      __int128 v10 = *(_OWORD *)(a3 - 128);
      *(_OWORD *)(v7 - 144) = *(_OWORD *)(a3 - 144);
      *(_OWORD *)(v7 - 128) = v10;
      *(_OWORD *)(v7 - 176) = v8;
      *(_OWORD *)(v7 - 160) = v9;
      __int128 v11 = *(_OWORD *)(a3 - 112);
      __int128 v12 = *(_OWORD *)(a3 - 96);
      __int128 v13 = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 64) = v13;
      *(_OWORD *)(v7 - 112) = v11;
      *(_OWORD *)(v7 - 96) = v12;
      uint64_t v14 = *(void *)(a3 - 48);
      *(_BYTE *)(v7 - 40) = *(_BYTE *)(a3 - 40);
      *(void *)(v7 - 48) = v14;
      __int128 v15 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v15;
      *(void *)(a3 - 24) = 0LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v21 + 1) - 192LL;
      *((void *)&v21 + 1) -= 192LL;
      a3 -= 192LL;
    }

    while (a3 != a5);
    uint64_t v16 = v21;
  }

  char v19 = 1;
  sub_100CED994((uint64_t)v18);
  return v16;
}

uint64_t sub_100CED994(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100CED9C8(a1);
  }
  return a1;
}

void sub_100CED9C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 192LL;
  }

uint64_t sub_100CEDA0C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100CEDA40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 192;
      *(void *)(a1 + 16) = v2 - 192;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v5 = *(void *)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void sub_100CEDA94(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100CEDAC0(uint64_t *a1)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_10187EC50);
  }
  uint64_t v2 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *((_DWORD *)a1 + 8);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
    int v7 = *((unsigned __int8 *)a1 + 36);
    double v8 = *((float *)a1 + 12);
    double v9 = *((float *)a1 + 13);
    *(_DWORD *)buf = 67110656;
    int v29 = v3;
    __int16 v30 = 2048;
    uint64_t v31 = v4;
    __int16 v32 = 2048;
    uint64_t v33 = v5;
    __int16 v34 = 2048;
    uint64_t v35 = v6;
    __int16 v36 = 1024;
    int v37 = v7;
    __int16 v38 = 2048;
    double v39 = v8;
    __int16 v40 = 2048;
    double v41 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "SwimDetectState,nStrokes,%d,startTime,%f,endTime,%f,turnTime,%f,isSwim,%d,distance,%f,distError,%f",  buf,  0x40u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10187EC50);
    }
    int v10 = *((_DWORD *)a1 + 8);
    uint64_t v11 = *a1;
    uint64_t v12 = a1[1];
    uint64_t v13 = a1[2];
    int v14 = *((unsigned __int8 *)a1 + 36);
    double v15 = *((float *)a1 + 12);
    double v16 = *((float *)a1 + 13);
    LODWORD(v20) = 67110656;
    HIDWORD(v20) = v10;
    *(_WORD *)__int128 v21 = 2048;
    *(void *)&void v21[2] = v11;
    *(_WORD *)&v21[10] = 2048;
    LODWORD(v22) = HIDWORD(v12);
    WORD2(v22) = 2048;
    *(void *)((char *)&v22 + 6) = v13;
    HIWORD(v22) = 1024;
    int v23 = v14;
    __int16 v24 = 2048;
    double v25 = v15;
    __int16 v26 = 2048;
    double v27 = v16;
    LODWORD(v19) = 64;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "SwimDetectState,nStrokes,%d,startTime,%f,endTime,%f,turnTime,%f,isSwim,%d,distance,%f,distError,%f",  &v20,  v19,  v20,  *(double *)v21,  *(_DWORD *)&v21[8],  *(double *)&v22,  *((double *)&v22 + 1));
    __int128 v18 = (uint8_t *)v17;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimDetect::logState()", "%s\n", v17);
    if (v18 != buf) {
      free(v18);
    }
  }

double sub_100CEDD10(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 29) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 40) = a2;
  return result;
}

uint64_t sub_100CEDD28(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 24);
  return 1LL;
}

BOOL sub_100CEDD54(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) > 2;
}

BOOL sub_100CEDD64(uint64_t a1, double a2)
{
  *(double *)(a1 + 16) = a2;
  int v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    *(_BYTE *)(a1 + 36) = 0;
    sub_100CEDAC0((uint64_t *)a1);
    *(void *)(a1 + 29) = 0LL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 48) = 0LL;
    *(void *)(a1 + 56) = 0LL;
  }

  else
  {
    sub_100CEDAC0((uint64_t *)a1);
  }

  return v3 != 0;
}

void sub_100CEDDBC(uint64_t *a1, double a2)
{
  double v4 = *((double *)a1 + 1);
  if (v4 == 0.0)
  {
    *(double *)a1 = a2;
    *((double *)a1 + 1) = a2;
    double v4 = a2;
  }

  double v5 = a2 - v4;
  if (*((_BYTE *)a1 + 36)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 <= 10.0;
  }
  if (!v6)
  {
    a1[1] = 0LL;
    a1[2] = 0LL;
    *(uint64_t *)((char *)a1 + 29) = 0LL;
    a1[3] = 0LL;
    a1[6] = 0LL;
    a1[7] = 0LL;
    *(double *)a1 = a2;
  }

  *((double *)a1 + 1) = a2;
  (*(void (**)(void **__return_ptr, double))(*(void *)a1[5] + 80LL))(&__p, *(double *)a1);
  double v8 = (unsigned int *)__p;
  int v7 = v17;
  BOOL v9 = v17 == __p;
  *((_DWORD *)a1 + 8) = -1431655765 * ((unint64_t)((char *)v17 - (_BYTE *)__p) >> 3);
  if (v9)
  {
    double v11 = 0.0;
    double v10 = 0.0;
  }

  else
  {
    double v10 = 0.0;
    double v11 = 0.0;
    do
    {
      double v12 = (*(double (**)(uint64_t, void))(*(void *)a1[5] + 192LL))(a1[5], v8[2]);
      (*(void (**)(uint64_t, void))(*(void *)a1[5] + 192LL))(a1[5], v8[2]);
      double v11 = v11 + v12;
      double v10 = v10 + v13;
      v8 += 6;
    }

    while (v8 != v7);
  }

  float v14 = v11;
  float v15 = v10;
  *((float *)a1 + 12) = v14;
  *((float *)a1 + 13) = v15;
  if (!*((_BYTE *)a1 + 36)) {
    *((_BYTE *)a1 + 36) = v11 + v10 * 2.0 > (*(float (**)(uint64_t))(*(void *)a1[5] + 32LL))(a1[5]) * 0.5;
  }
  sub_100CEDAC0(a1);
  if (__p)
  {
    __int128 v17 = (unsigned int *)__p;
    operator delete(__p);
  }

void sub_100CEDF28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CEDF4C(uint64_t a1, __int128 *a2)
{
  __int128 v67 = *a2;
  float v4 = *(float *)(a1 + 48);
  float v68 = v4 / (*(float (**)(void))(**(void **)(a1 + 40) + 32LL))(*(void *)(a1 + 40));
  __int128 v27 = xmmword_10135B280;
  double v28 = 6.07861231;
  sub_10050D3D4((uint64_t)&v67, &v66, (int *)&v27, 2LL, 5LL);
  float v5 = v66;
  *(float *)(a1 + 56) = v66;
  if (v5 <= 0.925)
  {
    int v6 = 0;
  }

  else
  {
    int v6 = *(unsigned __int8 *)(a1 + 36);
    if (*(_BYTE *)(a1 + 36)) {
      int v6 = *(_DWORD *)(a1 + 60) + 1;
    }
  }

  *(_DWORD *)(a1 + 60) = v6;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_10187EC50);
  }
  int v7 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *((void *)a2 + 2);
    uint64_t v9 = *((void *)a2 + 3);
    double v10 = *(float *)(a1 + 48);
    double v11 = *(float *)a2;
    double v12 = *((float *)a2 + 1);
    double v13 = *((float *)a2 + 2);
    double v14 = *((float *)a2 + 3);
    int v15 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)buf = 134220032;
    uint64_t v49 = v8;
    __int16 v50 = 2048;
    uint64_t v51 = v9;
    __int16 v52 = 2048;
    double v53 = v10;
    __int16 v54 = 2048;
    double v55 = v11;
    __int16 v56 = 2048;
    double v57 = v12;
    __int16 v58 = 2048;
    double v59 = v13;
    __int16 v60 = 2048;
    double v61 = v14;
    __int16 v62 = 2048;
    double v63 = v66;
    __int16 v64 = 1024;
    int v65 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "SwimDetectFeatures,startTime,%f,timestamp,%f,distance,%f,periodicity,%f,rotationNorm2,%f,rotationZ,%f,peakAccel,%f ,isSwimming,%f,pauseCount,%d",  buf,  0x58u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10187EC50);
    }
    uint64_t v16 = *((void *)a2 + 2);
    uint64_t v17 = *((void *)a2 + 3);
    double v18 = *(float *)(a1 + 48);
    double v19 = *(float *)a2;
    double v20 = *((float *)a2 + 1);
    double v21 = *((float *)a2 + 2);
    double v22 = *((float *)a2 + 3);
    int v23 = *(_DWORD *)(a1 + 60);
    int v30 = 134220032;
    uint64_t v31 = v16;
    __int16 v32 = 2048;
    uint64_t v33 = v17;
    __int16 v34 = 2048;
    double v35 = v18;
    __int16 v36 = 2048;
    double v37 = v19;
    __int16 v38 = 2048;
    double v39 = v20;
    __int16 v40 = 2048;
    double v41 = v21;
    __int16 v42 = 2048;
    double v43 = v22;
    __int16 v44 = 2048;
    double v45 = v66;
    __int16 v46 = 1024;
    int v47 = v23;
    LODWORD(v26) = 88;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "SwimDetectFeatures,startTime,%f,timestamp,%f,distance,%f,periodicity,%f,rotationNorm2,%f,rotationZ,%f,peakAccel,%f ,isSwimming,%f,pauseCount,%d",  COERCE_DOUBLE(&v30),  v26,  *(double *)&v27,  *((double *)&v27 + 1),  v28,  v29);
    double v25 = (uint8_t *)v24;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimDetect::feedFeatures(const Features &)", "%s\n", v24);
    if (v25 != buf) {
      free(v25);
    }
  }

void sub_100CEE284(id a1)
{
  qword_1019344E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_100CEE2B0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  int v6 = (void *)(a1 + 8);
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 32) = 0LL;
  int v7 = (char **)(a1 + 32);
  *(void *)(a1 + 24) = a1 + 32;
  uint64_t v8 = (char ***)(a1 + 24);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = a3;
  __int128 v9 = *a2;
  __int128 v10 = a2[1];
  *(_OWORD *)(a1 + 88) = a2[2];
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 56) = v9;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 109) = 256;
  *(_BYTE *)(a1 + 111) = 0;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 128) = a5;
  sub_100603BE4(a1, 0LL);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = 0LL;
  *int v6 = 0LL;
  sub_100603B94((uint64_t)v8, *v7);
  *uint64_t v8 = v7;
  *(void *)(a1 + 40) = 0LL;
  os_log_s *v7 = 0LL;
  int v11 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) < v11)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    double v12 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(a1 + 56);
      int v14 = *(_DWORD *)(a1 + 60);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v13;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "TileError, connectivity, current, %{public}d, neighbor, %{public}d",  (uint8_t *)buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      int v25 = *(_DWORD *)(a1 + 56);
      int v26 = *(_DWORD *)(a1 + 60);
      LODWORD(v34.__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(v34.__r_.__value_.__r.__words[0]) = v25;
      LOWORD(v34.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[1] + 2) = v26;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "TileError, connectivity, current, %{public}d, neighbor, %{public}d",  &v34,  14);
      double v28 = (std::stringbuf::string_type *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CLTileDownloadPolicy *)",  "%s\n",  v27);
      if (v28 != buf) {
        free(v28);
      }
    }

    int v11 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 56) = v11;
  }

  if (v11 < *(_DWORD *)(a1 + 64))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    int v15 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 60);
      int v17 = *(_DWORD *)(a1 + 64);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v16;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "TileError, connectivity, neighbor, %{public}d, nonneighbor, %{public}d",  (uint8_t *)buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      int v29 = *(_DWORD *)(a1 + 60);
      int v30 = *(_DWORD *)(a1 + 64);
      LODWORD(v34.__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(v34.__r_.__value_.__r.__words[0]) = v29;
      LOWORD(v34.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[1] + 2) = v30;
      LODWORD(v33) = 14;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "TileError, connectivity, neighbor, %{public}d, nonneighbor, %{public}d",  &v34,  v33);
      __int16 v32 = (std::stringbuf::string_type *)v31;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CLTileDownloadPolicy *)",  "%s\n",  v31);
      if (v32 != buf) {
        free(v32);
      }
    }

    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 64);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  double v18 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    sub_100CEE868((unsigned int *)(a1 + 56), buf);
    double v19 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
        ? buf
        : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
    LODWORD(v34.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "TileQueue, %{public}s", (uint8_t *)&v34, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v21 = qword_101934858;
    sub_100CEE868((unsigned int *)(a1 + 56), &v34);
    if ((v34.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v22 = &v34;
    }
    else {
      double v22 = (std::stringbuf::string_type *)v34.__r_.__value_.__r.__words[0];
    }
    int v35 = 136446210;
    __int16 v36 = v22;
    LODWORD(v33) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  1LL,  "TileQueue, %{public}s",  &v35,  v33);
    __int16 v24 = v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CL TileDownloadPolicy *)",  "%s\n",  (const char *)v24);
    if (v24 != buf) {
      free(v24);
    }
  }

  return a1;
}

void sub_100CEE830(_Unwind_Exception *a1)
{
}

uint64_t sub_100CEE868@<X0>(unsigned int *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  float v4 = sub_10000CF44(&v27, (uint64_t)"tileDownloaderPolicy", 20LL);
  float v5 = sub_10000CF44(v4, (uint64_t)", currentRequirement, ", 22LL);
  int v6 = (void *)std::ostream::operator<<(v5, *a1);
  int v7 = sub_10000CF44(v6, (uint64_t)", neighborRequirement, ", 23LL);
  uint64_t v8 = (void *)std::ostream::operator<<(v7, a1[1]);
  __int128 v9 = sub_10000CF44(v8, (uint64_t)", nonneighborRequirement, ", 26LL);
  __int128 v10 = (void *)std::ostream::operator<<(v9, a1[2]);
  int v11 = sub_10000CF44(v10, (uint64_t)", slowCell, ", 12LL);
  double v12 = (void *)std::ostream::operator<<(v11, *((unsigned __int8 *)a1 + 12));
  int v13 = sub_10000CF44(v12, (uint64_t)", redownloadLocked, ", 20LL);
  int v14 = (void *)std::ostream::operator<<(v13, *((unsigned __int8 *)a1 + 13));
  int v15 = sub_10000CF44(v14, (uint64_t)", neighbors, ", 13LL);
  int v16 = (void *)std::ostream::operator<<(v15, a1[4]);
  int v17 = sub_10000CF44(v16, (uint64_t)", maxlist,", 10LL);
  double v18 = (void *)std::ostream::operator<<(v17, a1[5]);
  sub_10000CF44(v18, (uint64_t)", maxage,", 9LL);
  double v19 = (void *)std::ostream::operator<<(*((double *)a1 + 3));
  sub_10000CF44(v19, (uint64_t)", cooloff, ", 11LL);
  double v20 = (void *)std::ostream::operator<<(*((double *)a1 + 4));
  uint64_t v21 = sub_10000CF44(v20, (uint64_t)", refreshMultiplier, ", 21LL);
  double v22 = (void *)std::ostream::operator<<(v21, *((float *)a1 + 10));
  int v23 = sub_10000CF44(v22, (uint64_t)", decompress, ", 14LL);
  std::ostream::operator<<(v23, *((unsigned __int8 *)a1 + 44));
  std::stringbuf::str(a2, &v28);
  *(void *)((char *)v26
  uint64_t v27 = v24;
  std::streambuf::~streambuf(&v28);
  return std::ios::~ios(&v29);
}

void sub_100CEEA30(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100CEEA48(uint64_t a1, uint64_t a2, double a3)
{
  char v6 = sub_100DD927C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  if (!*(_BYTE *)(a1 + 111))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    int v23 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "TileDl, preindexskip, request, #CloneMe",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      *(_WORD *)v122 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileDl, preindexskip, request, #CloneMe",  v122,  2);
      __int16 v56 = (char *)v55;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v55);
      if (v56 != buf) {
        free(v56);
      }
    }

    char v24 = 0;
    return v24 & 1;
  }

  char v7 = v6;
  uint64_t v114 = sub_100DD9288(*(_DWORD *)a2, *(void **)(a1 + 120));
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  uint64_t v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    __int128 v9 = sub_100DD8CC8(*(_DWORD *)a2);
    *(_DWORD *)buf = 136446723;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&_BYTE buf[12] = 2049;
    double v124 = sub_1008ADB4C(a2);
    *(_WORD *)v125 = 2049;
    *(void *)&v125[2] = sub_1008ADB70(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "@TileDl, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v51 = qword_101934858;
    __int16 v52 = sub_100DD8CC8(*(_DWORD *)a2);
    *(_DWORD *)v122 = 136446723;
    *(void *)&v122[4] = v52;
    *(_WORD *)&v122[12] = 2049;
    *(void *)&v122[14] = sub_1008ADB4C(a2);
    *(_WORD *)&v122[22] = 2049;
    *(void *)&v122[24] = sub_1008ADB70(a2);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v51,  1LL,  "@TileDl, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf",  v122,  32);
    __int16 v54 = (char *)v53;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v53);
    if (v54 != buf) {
      free(v54);
    }
  }

  __int128 v10 = sub_100603554(a1, a2);
  uint64_t v111 = v114 + 184;
  BOOL v11 = sub_10060238C(v114 + 184, (unsigned int *)a2);
  v112 = (void *)(a1 + 8);
  if (v11 && (uint64_t v12 = sub_1006025CC(v111, (unsigned int *)a2), sub_100C14E3C(v12, *(_BYTE *)(a1 + 110))))
  {
    BOOL v13 = v112 == v10;
    uint64_t v14 = sub_1006025CC(v111, (unsigned int *)a2);
    BOOL v15 = v13 && sub_100CEFFBC(a1, v14, a3);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v33 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v14 + 16LL))(buf, v14);
      std::stringbuf::string_type v34 = v125[1] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v122 = 67240451;
      *(_DWORD *)&v122[4] = v15;
      *(_WORD *)&v122[8] = 2081;
      *(void *)&v122[10] = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "@TileQueue, usable, %{public}d, tileid, %{private}s",  v122,  0x12u);
      if ((v125[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      uint64_t v35 = qword_101934858;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v14 + 16LL))(v122, v14);
      if (v122[23] >= 0) {
        __int16 v36 = v122;
      }
      else {
        __int16 v36 = *(_BYTE **)v122;
      }
      *(_DWORD *)__int128 v117 = 67240451;
      *(_DWORD *)&v117[4] = v15;
      *(_WORD *)&v117[8] = 2081;
      *(void *)&v117[10] = v36;
      LODWORD(v106) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v35,  2LL,  "@TileQueue, usable, %{public}d, tileid, %{private}s",  v117,  v106);
      __int16 v38 = v37;
      if ((v122[23] & 0x80000000) != 0) {
        operator delete(*(void **)v122);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v38);
      if (v38 != buf) {
LABEL_123:
      }
        free(v38);
LABEL_124:
      if (!v15) {
        goto LABEL_125;
      }
LABEL_92:
      sub_100DD9668(*(_DWORD *)(v114 + 4), *(void *)(a1 + 128), v117);
      uint64_t v116 = *(void *)v117;
      *(void *)__int128 v117 = 0LL;
      sub_100CF03D8(a1, &v116, (std::string *)a2, a3);
      uint64_t v44 = v116;
      uint64_t v116 = 0LL;
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
      }
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      double v45 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v46 = sub_100DD8CC8(*(_DWORD *)a2);
        double v47 = sub_1008ADB4C(a2);
        double v48 = sub_1008ADB70(a2);
        uint64_t v49 = *(void *)(a1 + 16);
        *(_DWORD *)buf = 136446979;
        *(void *)&uint8_t buf[4] = v46;
        *(_WORD *)&_BYTE buf[12] = 2049;
        double v124 = v47;
        *(_WORD *)v125 = 2049;
        *(double *)&v125[2] = v48;
        *(_WORD *)&v125[10] = 2050;
        uint64_t v126 = v49;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        uint64_t v57 = qword_101934858;
        __int16 v58 = sub_100DD8CC8(*(_DWORD *)a2);
        double v59 = sub_1008ADB4C(a2);
        double v60 = sub_1008ADB70(a2);
        uint64_t v61 = *(void *)(a1 + 16);
        *(_DWORD *)v122 = 136446979;
        *(void *)&v122[4] = v58;
        *(_WORD *)&v122[12] = 2049;
        *(double *)&v122[14] = v59;
        *(_WORD *)&v122[22] = 2049;
        *(double *)&v122[24] = v60;
        *(_WORD *)&v122[32] = 2050;
        *(void *)&v122[34] = v61;
        LODWORD(v106) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v57,  0LL,  "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld",  v122,  v106);
        double v63 = (char *)v62;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)",  "%s\n",  v62);
        if (v63 != buf) {
          free(v63);
        }
      }

      uint64_t v50 = *(void *)v117;
      *(void *)__int128 v117 = 0LL;
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
      }
      char v32 = 1;
      goto LABEL_126;
    }
  }

  else
  {
    if (v112 != v10)
    {
      uint64_t v16 = v10[10];
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      int v17 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v16 + 16LL))(buf, v16);
        double v18 = v125[1] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v122 = 136380675;
        *(void *)&v122[4] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "@TileQueue, onlist, tileid, %{private}s",  v122,  0xCu);
        if ((v125[1] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        uint64_t v19 = qword_101934858;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v16 + 16LL))(v122, v16);
        if (v122[23] >= 0) {
          double v20 = v122;
        }
        else {
          double v20 = *(_BYTE **)v122;
        }
        *(_DWORD *)__int128 v117 = 136380675;
        *(void *)&v117[4] = v20;
        LODWORD(v106) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v19,  2LL,  "@TileQueue, onlist, tileid, %{private}s",  v117,  v106);
        double v22 = v21;
        if ((v122[23] & 0x80000000) != 0) {
          operator delete(*(void **)v122);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)",  "%s\n",  v22);
        if (v22 != buf) {
          free(v22);
        }
      }

      goto LABEL_125;
    }

    char v25 = !v11;
    if (!*(_BYTE *)(a1 + 110)) {
      char v25 = 1;
    }
    if ((v25 & 1) != 0)
    {
      if (v11)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        uint64_t v27 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          int v28 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)buf = 67240961;
          *(_DWORD *)&uint8_t buf[4] = 1;
          *(_WORD *)&uint8_t buf[8] = 1025;
          *(_DWORD *)&buf[10] = 0;
          double v124 = 2.18053518e-289;
          *(_DWORD *)v125 = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "@TileQueue, skip, alreadyDownloaded, %{public}d, accessible, %{private}d, inqueue, %{public}d, locked, %{private}d",  buf,  0x1Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_10187EC70);
          }
          int v29 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)v122 = 67240961;
          *(_DWORD *)&v122[4] = 1;
          *(_WORD *)&v122[8] = 1025;
          *(_DWORD *)&v122[10] = 0;
          *(_WORD *)&v122[14] = 1026;
          *(_DWORD *)&v122[16] = 0;
          *(_WORD *)&v122[20] = 1025;
          *(_DWORD *)&v122[22] = v29;
          LODWORD(v106) = 26;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@TileQueue, skip, alreadyDownloaded, %{public}d, accessible, %{private}d, inqueue, %{public}d, locked, %{private}d",  v122,  v106);
          uint64_t v31 = (char *)v30;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)",  "%s\n",  v30);
          if (v31 != buf) {
            free(v31);
          }
          char v32 = 0;
          goto LABEL_126;
        }

        goto LABEL_125;
      }

      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      double v39 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "@TileQueue, queue, 1", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        *(_WORD *)v122 = 0;
        LODWORD(v106) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@TileQueue, queue, 1",  v122,  v106);
        double v41 = (char *)v40;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)",  "%s\n",  v40);
        if (v41 != buf) {
          free(v41);
        }
      }

      goto LABEL_92;
    }

    uint64_t v26 = sub_1006025CC(v111, (unsigned int *)a2);
    BOOL v15 = (v7 & 1) != 0 || *(_BYTE *)(a1 + 69) != 0;
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    __int16 v42 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v26 + 16LL))(buf, v26);
      double v43 = v125[1] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v122 = 67240451;
      *(_DWORD *)&v122[4] = v15;
      *(_WORD *)&v122[8] = 2081;
      *(void *)&v122[10] = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "@TileQueue, unreadable, %{public}d, tileid, %{private}s",  v122,  0x12u);
      if ((v125[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      uint64_t v64 = qword_101934858;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v26 + 16LL))(v122, v26);
      if (v122[23] >= 0) {
        int v65 = v122;
      }
      else {
        int v65 = *(_BYTE **)v122;
      }
      *(_DWORD *)__int128 v117 = 67240451;
      *(_DWORD *)&v117[4] = v15;
      *(_WORD *)&v117[8] = 2081;
      *(void *)&v117[10] = v65;
      LODWORD(v106) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v64,  2LL,  "@TileQueue, unreadable, %{public}d, tileid, %{private}s",  v117,  v106);
      __int16 v38 = v66;
      if ((v122[23] & 0x80000000) != 0) {
        operator delete(*(void **)v122);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v38);
      if (v38 != buf) {
        goto LABEL_123;
      }
      goto LABEL_124;
    }
  }

  if (v15) {
    goto LABEL_92;
  }
LABEL_125:
  char v32 = 0;
LABEL_126:
  *(_OWORD *)v122 = *(_OWORD *)a2;
  *(void *)&v122[16] = *(void *)(a2 + 16);
  __int128 v67 = (const std::string *)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1010DD48C(&v122[24], *(void **)(a2 + 24), *(void *)(a2 + 32));
  }

  else
  {
    *(_OWORD *)&v122[24] = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    *(void *)&v122[40] = *(void *)(a2 + 40);
  }

  char v110 = v32;
  int v68 = *(_DWORD *)(a1 + 72);
  if ((v68 & 0x80000000) == 0)
  {
    uint64_t v113 = a2;
    unsigned int v69 = -v68;
    int v108 = (2 * v68) | 1;
    int v109 = -v68;
    int v107 = *(_DWORD *)(a1 + 72);
    do
    {
      int v70 = v108;
      unsigned int v71 = v109;
      do
      {
        if (!(v71 | v69)) {
          goto LABEL_154;
        }
        *(_OWORD *)v122 = *(_OWORD *)v113;
        *(void *)&v122[16] = *(void *)(v113 + 16);
        std::string::operator=((std::string *)&v122[24], v67);
        double v72 = *(double *)(v114 + 160);
        float32_t v73 = *(double *)(v114 + 152);
        *(float *)&double v72 = v72;
        sub_1008AE784((uint64_t)v122, v69, v71, v73, *(float32x2_t *)&v72);
        BOOL v74 = sub_1008AD1E0((unsigned int *)v122);
        int v75 = !v74;
        if (v74)
        {
          v76 = sub_100603554(a1, (uint64_t)v122);
          BOOL v77 = sub_10060238C(v111, (unsigned int *)v122);
          BOOL v78 = v77;
          if (*(_BYTE *)(a1 + 110)) {
            int v79 = 1;
          }
          else {
            int v79 = v77;
          }
          BOOL v80 = v112 != v76;
          if (v112 != v76) {
            int v79 = 1;
          }
          if (((v79 | v75) & 1) == 0)
          {
            sub_100DD9668(*(_DWORD *)(v114 + 4), *(void *)(a1 + 128), &v115);
            sub_100CF03D8(a1, &v115, (std::string *)v122, a3);
            uint64_t v81 = v115;
            uint64_t v115 = 0LL;
            if (v81) {
              (*(void (**)(uint64_t))(*(void *)v81 + 8LL))(v81);
            }
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_10187EC70);
            }
            std::string::size_type v82 = (os_log_s *)qword_101934858;
            if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
            {
              size_t v83 = sub_100DD8CC8(*(unsigned int *)v122);
              double v84 = sub_1008ADB4C((uint64_t)v122);
              double v85 = sub_1008ADB70((uint64_t)v122);
              uint64_t v86 = *(void *)(a1 + 16);
              *(_DWORD *)buf = 136446979;
              *(void *)&uint8_t buf[4] = v83;
              *(_WORD *)&_BYTE buf[12] = 2049;
              double v124 = v84;
              *(_WORD *)v125 = 2049;
              *(double *)&v125[2] = v85;
              *(_WORD *)&v125[10] = 2050;
              uint64_t v126 = v86;
              _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld",  buf,  0x2Au);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934850 != -1) {
                dispatch_once(&qword_101934850, &stru_10187EC70);
              }
              uint64_t v97 = qword_101934858;
              std::string::size_type v98 = sub_100DD8CC8(*(unsigned int *)v122);
              double v99 = sub_1008ADB4C((uint64_t)v122);
              double v100 = sub_1008ADB70((uint64_t)v122);
              uint64_t v101 = *(void *)(a1 + 16);
              *(_DWORD *)__int128 v117 = 136446979;
              *(void *)&v117[4] = v98;
              *(_WORD *)&v117[12] = 2049;
              *(double *)&v117[14] = v99;
              __int16 v118 = 2049;
              *(double *)std::string::size_type v119 = v100;
              *(_WORD *)&v119[8] = 2050;
              uint64_t v120 = v101;
              LODWORD(v106) = 42;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v97,  0LL,  "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld",  v117,  v106);
              v103 = (char *)v102;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)",  "%s\n",  v102);
              if (v103 != buf) {
                free(v103);
              }
            }

            char v110 = 1;
            goto LABEL_154;
          }
        }

        else
        {
          BOOL v78 = 0;
          BOOL v80 = 0;
        }

        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        std::string::size_type v87 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          double v88 = sub_1008ADB4C((uint64_t)v122);
          double v89 = sub_1008ADB70((uint64_t)v122);
          int v90 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)buf = 134284801;
          *(double *)&uint8_t buf[4] = v88;
          *(_WORD *)&_BYTE buf[12] = 2049;
          double v124 = v89;
          *(_WORD *)v125 = 1026;
          *(_DWORD *)&v125[2] = v90;
          *(_WORD *)&v125[6] = 1026;
          *(_DWORD *)&v125[8] = v78;
          LOWORD(v126) = 1026;
          *(_DWORD *)((char *)&v126 + 2) = v80;
          HIWORD(v126) = 1026;
          int v127 = v75;
          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEBUG,  "@TileDl, skipneighbor, %{private}.2lf, %{private}.2lf, locked, %{public}d, dled, %{public}d, pending, %{publ ic}d, outbounds, %{public}d",  buf,  0x2Eu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_10187EC70);
          }
          uint64_t v91 = qword_101934858;
          double v92 = sub_1008ADB4C((uint64_t)v122);
          double v93 = sub_1008ADB70((uint64_t)v122);
          int v94 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)__int128 v117 = 134284801;
          *(double *)&v117[4] = v92;
          *(_WORD *)&v117[12] = 2049;
          *(double *)&v117[14] = v93;
          __int16 v118 = 1026;
          *(_DWORD *)std::string::size_type v119 = v94;
          *(_WORD *)&v119[4] = 1026;
          *(_DWORD *)&v119[6] = v78;
          LOWORD(v120) = 1026;
          *(_DWORD *)((char *)&v120 + 2) = v80;
          HIWORD(v120) = 1026;
          int v121 = v75;
          LODWORD(v106) = 46;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v91,  2LL,  "@TileDl, skipneighbor, %{private}.2lf, %{private}.2lf, locked, %{public}d, dled, %{public}d, pending, %{publ ic}d, outbounds, %{public}d",  v117,  v106);
          v96 = (char *)v95;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)",  "%s\n",  v95);
          if (v96 != buf) {
            free(v96);
          }
        }

void sub_100CEFF10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *__p, uint64_t a37, int a38, __int16 a39, char a40, char a41)
{
  if (a27) {
    (*(void (**)(uint64_t))(*(void *)a27 + 8LL))(a27);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100CEFFBC(uint64_t a1, uint64_t a2, double a3)
{
  char v6 = (unsigned int *)(a2 + 48);
  *(void *)buf = a2 + 48;
  char v7 = sub_100CF442C((uint64_t **)(a1 + 24), a2 + 48, (uint64_t)&unk_1012CF090, (__int128 **)buf);
  BOOL v8 = sub_100C0CCC8(a2);
  int v9 = sub_100C0CD18(a2);
  int v10 = sub_100DD927C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  double v11 = vabdd_f64(a3, sub_100C0CD20(a2));
  if (*((_BYTE *)v7 + 88))
  {
    uint64_t v12 = "DlProgress";
LABEL_3:
    std::string::assign(&v27, v12);
    BOOL v13 = 0LL;
    goto LABEL_4;
  }

  if (((v9 | !v8) & 1) != 0)
  {
    if ((v9 ^ 1 | !v8) != 1)
    {
      uint64_t v12 = "RefreshSkipped";
      goto LABEL_3;
    }

    if (((v9 ^ 1 | v8) & 1) != 0)
    {
      uint64_t v12 = "Empty";
      goto LABEL_3;
    }

    BOOL v13 = sub_100C0CD30(a2, v10, a3, 1.0);
    std::string::assign(&v27, "DoesntExist");
  }

  else
  {
    BOOL v13 = v11 >= *(double *)(a1 + 88);
    std::string::assign(&v27, "1st/Re-Try");
  }

LABEL_4:
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  uint64_t v14 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    BOOL v15 = sub_100DD8CC8(*v6);
    double v16 = sub_1008ADB4C((uint64_t)v6);
    double v17 = sub_1008ADB70((uint64_t)v6);
    double v18 = &v27;
    if ((v27.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136448003;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v45 = 2049;
    double v46 = v16;
    __int16 v47 = 2049;
    double v48 = v17;
    __int16 v49 = 1026;
    BOOL v50 = v13;
    __int16 v51 = 1026;
    int v52 = v9;
    __int16 v53 = 1026;
    BOOL v54 = v8;
    __int16 v55 = 2050;
    double v56 = v11;
    __int16 v57 = 2082;
    __int16 v58 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "@TileReq, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, isDownload, %{public}d, lastSuccess, %{publi c}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, path, %{public}s",  buf,  0x46u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v20 = qword_101934858;
    uint64_t v21 = sub_100DD8CC8(*v6);
    double v22 = sub_1008ADB4C((uint64_t)v6);
    double v23 = sub_1008ADB70((uint64_t)v6);
    char v24 = &v27;
    if ((v27.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v24 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    int v28 = 136448003;
    int v29 = v21;
    __int16 v30 = 2049;
    double v31 = v22;
    __int16 v32 = 2049;
    double v33 = v23;
    __int16 v34 = 1026;
    BOOL v35 = v13;
    __int16 v36 = 1026;
    int v37 = v9;
    __int16 v38 = 1026;
    BOOL v39 = v8;
    __int16 v40 = 2050;
    double v41 = v11;
    __int16 v42 = 2082;
    double v43 = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  1LL,  "@TileReq, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, isDownload, %{public}d, lastSuccess, %{publi c}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, path, %{public}s",  &v28,  70);
    uint64_t v26 = (char *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileDownloader::canRequestBasedOnAttempts(CLTileFile *, CFAbsoluteTime)",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  return v13;
}

  (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  goto LABEL_5;
}

void sub_100CF03A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CF03D8(uint64_t a1, uint64_t *p_vtable, std::string *a3, double a4)
{
  std::string v20 = *a3;
  if ((char)a3[1].__r_.__value_.__s.__size_ < 0)
  {
    sub_1010DD48C(&v21, a3[1].__r_.__value_.__l.__data_, a3[1].__r_.__value_.__l.__size_);
  }

  else
  {
    __int128 v21 = *(_OWORD *)&a3[1].__r_.__value_.__l.__data_;
    std::string::size_type cap = a3[1].__r_.__value_.__l.__cap_;
  }

  if (*(_BYTE *)(a1 + 111))
  {
    sub_100C30314(*p_vtable, &v20);
    uint64_t v7 = *p_vtable;
    *(_BYTE *)(v7 + 144) = *(_BYTE *)(a1 + 100);
    sub_100C0F25C(v7, (uint64_t)&unk_10199DC78);
    std::string v16 = v20;
    if (SHIBYTE(cap) < 0)
    {
      sub_1010DD48C(&__p, (void *)v21, *((unint64_t *)&v21 + 1));
    }

    else
    {
      __int128 __p = v21;
      std::string::size_type v18 = cap;
    }

    sub_100CF0754((void *)a1, (unsigned int *)&v16, 0, (uint64_t)"add");
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p);
    }
    if ((void *)(a1 + 8) == sub_100603554(a1, (uint64_t)&v20))
    {
      *(void *)buf = &v20;
      double v11 = sub_100603C2C((uint64_t **)a1, (uint64_t)&v20, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
      uint64_t v12 = *p_vtable;
      *p_vtable = 0LL;
      uint64_t v13 = v11[10];
      v11[10] = v12;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
      }
      *(void *)buf = &v20;
      uint64_t v14 = sub_100CF442C((uint64_t **)(a1 + 24), (uint64_t)&v20, (uint64_t)&unk_1012CF090, (__int128 **)buf);
      *((double *)v14 + 10) = a4;
      *((_BYTE *)v14 + 88) = 0;
      goto LABEL_22;
    }

    sub_10126AED4();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileDownloader.mm",  174,  "addToDownloadList");
    __break(1u);
    goto LABEL_26;
  }

  p_vtable = (uint64_t *)&OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934850 != -1) {
LABEL_26:
  }
    dispatch_once(&qword_101934850, &stru_10187EC70);
  BOOL v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "TileDl, preindexskip, addToDownloadList, #CloneMe",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (p_vtable[266] != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    v19[0] = 0;
    LODWORD(v15) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileDl, preindexskip, addToDownloadList, #CloneMe",  v19,  v15);
    int v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTileDownloader::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, CFAbsoluteTime)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

void sub_100CF0710( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CF0754(void *a1, unsigned int *a2, int a3, uint64_t a4)
{
  BOOL v8 = (uint64_t **)(a1 + 3);
  if (a1 + 4 == sub_100603554((uint64_t)(a1 + 3), (uint64_t)a2))
  {
    *(void *)buf = a2;
    int v9 = sub_100CF442C(v8, (uint64_t)a2, (uint64_t)&unk_1012CF090, (__int128 **)buf);
    v9[10] = 0LL;
    *((_BYTE *)v9 + 88) = 0;
    if (a3)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      int v10 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        double v11 = sub_100DD8CC8(*a2);
        double v12 = sub_1008ADB4C((uint64_t)a2);
        double v13 = sub_1008ADB70((uint64_t)a2);
        uint64_t v14 = a1[2];
        uint64_t v15 = a1[5];
        *(_DWORD *)buf = 136447491;
        *(void *)&uint8_t buf[4] = v11;
        __int16 v39 = 2080;
        uint64_t v40 = a4;
        __int16 v41 = 2049;
        double v42 = v12;
        __int16 v43 = 2049;
        double v44 = v13;
        __int16 v45 = 2050;
        uint64_t v46 = v14;
        __int16 v47 = 2050;
        uint64_t v48 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "@TileError, %{public}s, nostate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu",  buf,  0x3Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        uint64_t v16 = qword_101934858;
        double v17 = sub_100DD8CC8(*a2);
        double v18 = sub_1008ADB4C((uint64_t)a2);
        double v19 = sub_1008ADB70((uint64_t)a2);
        uint64_t v20 = a1[2];
        uint64_t v21 = a1[5];
        *(_DWORD *)__int16 v36 = 136447491;
        *(void *)&v36[4] = v17;
        *(_WORD *)&v36[12] = 2080;
        *(void *)&_BYTE v36[14] = a4;
        *(_WORD *)&v36[22] = 2049;
        *(_WORD *)int v37 = 2049;
        *(double *)&v37[2] = v19;
        *(_WORD *)&v37[10] = 2050;
        *(void *)&v37[12] = v20;
        *(_WORD *)&v37[20] = 2050;
        *(void *)&v37[22] = v21;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  0LL,  "@TileError, %{public}s, nostate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu",  v36,  62,  *(_OWORD *)v36,  *(void *)&v36[16],  *(void *)&v18,  *(_OWORD *)v37,  *(_OWORD *)&v37[16]);
LABEL_20:
        BOOL v35 = (char *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTileDownloader::checkAndMakeState(TileId, BOOL, const char *)",  "%s\n",  v22);
        if (v35 != buf) {
          free(v35);
        }
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      double v23 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
      {
        char v24 = sub_100DD8CC8(*a2);
        double v25 = sub_1008ADB4C((uint64_t)a2);
        double v26 = sub_1008ADB70((uint64_t)a2);
        uint64_t v27 = a1[2];
        uint64_t v28 = a1[5];
        *(_DWORD *)buf = 136447491;
        *(void *)&uint8_t buf[4] = v24;
        __int16 v39 = 2080;
        uint64_t v40 = a4;
        __int16 v41 = 2049;
        double v42 = v25;
        __int16 v43 = 2049;
        double v44 = v26;
        __int16 v45 = 2050;
        uint64_t v46 = v27;
        __int16 v47 = 2050;
        uint64_t v48 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "@TileDl, %{public}s, makestate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu",  buf,  0x3Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        uint64_t v29 = qword_101934858;
        __int16 v30 = sub_100DD8CC8(*a2);
        double v31 = sub_1008ADB4C((uint64_t)a2);
        double v32 = sub_1008ADB70((uint64_t)a2);
        uint64_t v33 = a1[2];
        uint64_t v34 = a1[5];
        *(_DWORD *)__int16 v36 = 136447491;
        *(void *)&v36[4] = v30;
        *(_WORD *)&v36[12] = 2080;
        *(void *)&_BYTE v36[14] = a4;
        *(_WORD *)&v36[22] = 2049;
        *(_WORD *)int v37 = 2049;
        *(double *)&v37[2] = v32;
        *(_WORD *)&v37[10] = 2050;
        *(void *)&v37[12] = v33;
        *(_WORD *)&v37[20] = 2050;
        *(void *)&v37[22] = v34;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  1LL,  "@TileDl, %{public}s, makestate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu",  v36,  62,  *(void *)v36,  *(_OWORD *)&v36[8],  *(void *)&v31,  *(void *)v37,  *(void *)&v37[8],  *(void *)&v37[16],  *(void *)&v37[24]);
        goto LABEL_20;
      }
    }
  }

BOOL sub_100CF0BCC(uint64_t a1)
{
  char v2 = sub_100DD9270(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  if (*(_BYTE *)(a1 + 111))
  {
    if ((v2 & 1) != 0)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      int v3 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "@TileDl, skipall, in progress", buf, 2u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        LOWORD(v9[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@TileDl, skipall, in progress",  v9,  2,  v9[0]);
LABEL_28:
        BOOL v8 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTileDownloader::areDownloadConditionsMet() const", "%s\n", v5);
        if (v8 != buf) {
          free(v8);
        }
        return 0LL;
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      uint64_t v7 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@TileDl, skipall, on connectivity", buf, 2u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        LOWORD(v9[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@TileDl, skipall, on connectivity",  v9,  2,  v9[0]);
        goto LABEL_28;
      }
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    char v6 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "@TileDl, skipall, first unlock", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@TileDl, skipall, first unlock",  v9,  2,  v9[0]);
      goto LABEL_28;
    }
  }

  return result;
}

void sub_100CF0F28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(_DWORD *)buf = 13;
  sub_1008ACE9C(a4, buf);
  __src = 0LL;
  v103 = 0LL;
  v104 = 0LL;
  uint64_t v89 = a4;
  int v90 = sub_100DD927C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  int v9 = sub_100DD9270(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  if ((v90 & 1) != 0 || (*(int *)(a1 + 56) > 1 ? (int v10 = v9) : (int v10 = 0), v10 == 1))
  {
    double v11 = *(void **)a1;
    if (*(void *)a1 == a1 + 8)
    {
      int v12 = 0;
    }

    else
    {
      int v12 = 0;
      do
      {
        *(void *)buf = v11[10];
        if (sub_100CEFFBC(a1, *(uint64_t *)buf, a5))
        {
          double v13 = *(double *)(sub_100DD9288(*(_DWORD *)(*(void *)buf + 48LL), *(void **)(a1 + 120)) + 136);
          __int128 v14 = *(_OWORD *)(a3 + 112);
          v100[6] = *(_OWORD *)(a3 + 96);
          v100[7] = v14;
          v101[0] = *(_OWORD *)(a3 + 128);
          *(_OWORD *)((char *)v101 + 12) = *(_OWORD *)(a3 + 140);
          __int128 v15 = *(_OWORD *)(a3 + 48);
          v100[2] = *(_OWORD *)(a3 + 32);
          v100[3] = v15;
          __int128 v16 = *(_OWORD *)(a3 + 80);
          v100[4] = *(_OWORD *)(a3 + 64);
          v100[5] = v16;
          __int128 v17 = *(_OWORD *)(a3 + 16);
          v100[0] = *(_OWORD *)a3;
          v100[1] = v17;
          if (sub_100DD8DB4(*(uint64_t *)buf, (uint64_t)v100, v13, a5))
          {
            sub_100CF1B44((uint64_t)&__src, (char *)__src, buf);
            ++v12;
          }

          else
          {
            double v18 = v103;
            if (v103 >= v104)
            {
              uint64_t v20 = (v103 - (_BYTE *)__src) >> 3;
              unint64_t v21 = (v104 - (_BYTE *)__src) >> 2;
              if (v21 <= v20 + 1) {
                unint64_t v21 = v20 + 1;
              }
              else {
                unint64_t v22 = v21;
              }
              if (v22) {
                double v23 = (char *)sub_1000071BC((uint64_t)&v104, v22);
              }
              else {
                double v23 = 0LL;
              }
              char v24 = &v23[8 * v20];
              *(void *)char v24 = *(void *)buf;
              double v19 = v24 + 8;
              double v26 = (char *)__src;
              double v25 = v103;
              if (v103 != __src)
              {
                do
                {
                  uint64_t v27 = *((void *)v25 - 1);
                  v25 -= 8;
                  *((void *)v24 - 1) = v27;
                  v24 -= 8;
                }

                while (v25 != v26);
                double v25 = (char *)__src;
              }

              __src = v24;
              v103 = v19;
              v104 = &v23[8 * v22];
              if (v25) {
                operator delete(v25);
              }
            }

            else
            {
              *(void *)v103 = *(void *)buf;
              double v19 = v18 + 8;
            }

            v103 = v19;
          }
        }

        uint64_t v28 = (void *)v11[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            uint64_t v28 = (void *)*v28;
          }

          while (v28);
        }

        else
        {
          do
          {
            uint64_t v29 = (void *)v11[2];
            BOOL v30 = *v29 == (void)v11;
            double v11 = v29;
          }

          while (!v30);
        }

        double v11 = v29;
      }

      while (v29 != (void *)(a1 + 8));
    }

    int v31 = 1;
  }

  else
  {
    int v31 = 0;
    int v12 = 0;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  double v32 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    double v33 = *(double *)(a1 + 16);
    int v34 = *(_DWORD *)(a1 + 104);
    int v35 = *(unsigned __int8 *)(a1 + 109);
    uint64_t v36 = *(void *)(a3 + 4);
    uint64_t v37 = *(void *)(a3 + 12);
    uint64_t v38 = *(void *)(a3 + 20);
    *(_DWORD *)buf = 136448515;
    *(void *)&uint8_t buf[4] = "TBD";
    __int16 v124 = 2050;
    double v125 = v33;
    __int16 v126 = 2050;
    uint64_t v127 = (v103 - (_BYTE *)__src) >> 3;
    __int16 v128 = 1026;
    BOOL v129 = v12;
    __int16 v130 = 1026;
    int v131 = v31;
    __int16 v132 = 1026;
    *(_DWORD *)v133 = v34;
    *(_WORD *)&v133[4] = 1026;
    *(_DWORD *)&v133[6] = v35;
    __int16 v134 = 2049;
    uint64_t v135 = v36;
    __int16 v136 = 2049;
    uint64_t v137 = v37;
    __int16 v138 = 2050;
    uint64_t v139 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "@TileDl, %{public}s, checkNextEligible, tilesToDownload, %{public}lu, tilesCanBeDownloaded, %{public}lu, ncurrent, %{public}d, connectivity, %{public}d, %{public}d, %{public}d, location, %{private}0.1f, %{private}0.1f, %{public}1.f",  buf,  0x56u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    double v72 = *(double *)(a1 + 16);
    int v73 = *(_DWORD *)(a1 + 104);
    int v74 = *(unsigned __int8 *)(a1 + 109);
    uint64_t v75 = *(void *)(a3 + 4);
    uint64_t v76 = *(void *)(a3 + 12);
    uint64_t v77 = *(void *)(a3 + 20);
    int v105 = 136448515;
    uint64_t v106 = "TBD";
    __int16 v107 = 2050;
    double v108 = v72;
    __int16 v109 = 2050;
    uint64_t v110 = (v103 - (_BYTE *)__src) >> 3;
    __int16 v111 = 1026;
    BOOL v112 = v12;
    __int16 v113 = 1026;
    int v114 = v31;
    __int16 v115 = 1026;
    *(_DWORD *)uint64_t v116 = v73;
    *(_WORD *)&v116[4] = 1026;
    *(_DWORD *)&v116[6] = v74;
    __int16 v117 = 2049;
    uint64_t v118 = v75;
    __int16 v119 = 2049;
    uint64_t v120 = v76;
    __int16 v121 = 2050;
    uint64_t v122 = v77;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@TileDl, %{public}s, checkNextEligible, tilesToDownload, %{public}lu, tilesCanBeDownloaded, %{public}lu, ncurrent, %{public}d, connectivity, %{public}d, %{public}d, %{public}d, location, %{private}0.1f, %{private}0.1f, %{public}1.f",  &v105,  86);
    int v79 = (char *)v78;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime)",  "%s\n",  v78);
    if (v79 != buf) {
      free(v79);
    }
  }

  __int16 v39 = (uint64_t *)__src;
  uint64_t v40 = v103;
  if (__src == v103)
  {
LABEL_66:
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    __int16 v58 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "@TileDl, cell, skipall", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_93;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    LOWORD(v105) = 0;
    LODWORD(v88) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  1LL,  "@TileDl, cell, skipall",  &v105,  v88);
    double v60 = (char *)v59;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime)",  "%s\n",  v59);
LABEL_103:
    if (v60 != buf) {
      free(v60);
    }
    goto LABEL_93;
  }

  while (1)
  {
    uint64_t v41 = *v39;
    uint64_t v42 = sub_100DD9288(*(_DWORD *)(*v39 + 48), *(void **)(a1 + 120));
    double v43 = *(double *)(v42 + 136);
    __int128 v44 = *(_OWORD *)(a3 + 112);
    v97[6] = *(_OWORD *)(a3 + 96);
    v97[7] = v44;
    *(_OWORD *)std::string::size_type v98 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)&v98[12] = *(_OWORD *)(a3 + 140);
    __int128 v45 = *(_OWORD *)(a3 + 48);
    v97[2] = *(_OWORD *)(a3 + 32);
    v97[3] = v45;
    __int128 v46 = *(_OWORD *)(a3 + 80);
    v97[4] = *(_OWORD *)(a3 + 64);
    v97[5] = v46;
    __int128 v47 = *(_OWORD *)(a3 + 16);
    v97[0] = *(_OWORD *)a3;
    v97[1] = v47;
    int v48 = sub_100DD8DB4(v41, (uint64_t)v97, v43, a5);
    unsigned __int8 v99 = v48;
    if (*(int *)(a1 + 60) > 1)
    {
      BOOL v96 = 1;
      goto LABEL_46;
    }

    if (v48) {
      break;
    }
    BOOL v96 = 0;
    if ((v90 & 1) != 0) {
      goto LABEL_46;
    }
LABEL_57:
  }

  int v55 = *(_DWORD *)(a1 + 56);
  BOOL v56 = v55 <= 1;
  BOOL v96 = v55 > 1;
  char v57 = v90;
  if (!v56) {
    char v57 = 1;
  }
  if ((v57 & 1) == 0) {
    goto LABEL_57;
  }
LABEL_46:
  else {
    uint64_t v49 = *(void *)(v42 + 56);
  }
  BOOL v50 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v49);
  if (!*(_BYTE *)(v42 + 80))
  {
    id v51 = +[GEOCountryConfiguration sharedConfiguration](&OBJC_CLASS___GEOCountryConfiguration, "sharedConfiguration");
    else {
      uint64_t v52 = *(void *)(v42 + 88);
    }
    BOOL v50 = (NSString *)objc_msgSend( v51,  "defaultForKey:defaultValue:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v52),  v50);
  }

  uint64_t v53 = *(void *)(a1 + 48);
  sub_1010DDBC0(buf, (char *)-[NSString UTF8String](v50, "UTF8String"));
  int v54 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, BOOL))(*(void *)v53 + 24LL))( v53,  v41,  buf,  a2,  v96);
  if (SHIBYTE(v126) < 0) {
    operator delete(*(void **)buf);
  }
  if (!v54) {
    goto LABEL_57;
  }
  (*(void (**)(uint64_t))(*(void *)(v42 + 232) + 16LL))(v42 + 232);
  ++*(_DWORD *)(v42 + 280);
  (*(void (**)(uint64_t))(*(void *)(v42 + 232) + 24LL))(v42 + 232);
  sub_1010DDBC0(buf, "startDownloading");
  if (v90) {
    int v61 = 2;
  }
  else {
    int v61 = 1;
  }
  sub_100987188(v42 + 232, (uint64_t *)buf, v61);
  if (SHIBYTE(v126) < 0) {
    operator delete(*(void **)buf);
  }
  if (sub_100E575B0())
  {
    sub_1002A5370(buf);
    __int16 v62 = (char *)(v41 + 8);
    sub_1002ACA84((uint64_t)buf, "getTile", v62);
    sub_1002AB3FC((uint64_t)buf, "isCurrentTile", &v99);
    sub_1002AB3FC((uint64_t)buf, "isAllowCellular", &v96);
    sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
    sub_1002A5590(buf);
  }

  double v63 = (unsigned int *)(v41 + 48);
  __int128 v64 = *(_OWORD *)(v41 + 48);
  *(void *)(v89 + 16) = *(void *)(v41 + 64);
  *(_OWORD *)uint64_t v89 = v64;
  std::string::operator=((std::string *)(v89 + 24), (const std::string *)(v41 + 72));
  __int128 v92 = *(_OWORD *)v89;
  uint64_t v93 = *(void *)(v89 + 16);
  if (*(char *)(v89 + 47) < 0)
  {
    sub_1010DD48C(&__p, *(void **)(v89 + 24), *(void *)(v89 + 32));
  }

  else
  {
    __int128 __p = *(_OWORD *)(v89 + 24);
    uint64_t v95 = *(void *)(v89 + 40);
  }

  sub_100CF0754((void *)a1, (unsigned int *)&v92, 1, (uint64_t)"downloading");
  if (SHIBYTE(v95) < 0) {
    operator delete((void *)__p);
  }
  *(void *)buf = v89;
  *((_BYTE *)sub_100CF442C((uint64_t **)(a1 + 24), v89, (uint64_t)&unk_1012CF090, (__int128 **)buf) + 88) = 1;
  *(double *)(a1 + 112) = a5;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  int v65 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    float v66 = sub_100DD8CC8(*v63);
    double v67 = sub_1008ADB4C(v41 + 48);
    double v68 = sub_1008ADB70(v41 + 48);
    BOOL v69 = v96;
    int v70 = v99;
    unsigned int v71 = -[NSString UTF8String](v50, "UTF8String");
    *(_DWORD *)buf = 136447491;
    *(void *)&uint8_t buf[4] = v66;
    __int16 v124 = 2049;
    double v125 = v67;
    __int16 v126 = 2049;
    uint64_t v127 = *(void *)&v68;
    __int16 v128 = 1026;
    BOOL v129 = v69;
    __int16 v130 = 1026;
    int v131 = v70;
    __int16 v132 = 2081;
    *(void *)v133 = v71;
    _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, allowOverCellular, %{public}d, isCurrentTile, % {public}d, %{private}s",  buf,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v80 = qword_101934858;
    uint64_t v81 = sub_100DD8CC8(*v63);
    double v82 = sub_1008ADB4C(v41 + 48);
    double v83 = sub_1008ADB70(v41 + 48);
    BOOL v84 = v96;
    int v85 = v99;
    uint64_t v86 = -[NSString UTF8String](v50, "UTF8String");
    int v105 = 136447491;
    uint64_t v106 = v81;
    __int16 v107 = 2049;
    double v108 = v82;
    __int16 v109 = 2049;
    uint64_t v110 = *(void *)&v83;
    __int16 v111 = 1026;
    BOOL v112 = v84;
    __int16 v113 = 1026;
    int v114 = v85;
    __int16 v115 = 2081;
    *(void *)uint64_t v116 = v86;
    LODWORD(v88) = 54;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v80,  0LL,  "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, allowOverCellular, %{public}d, isCurrentTile, % {public}d, %{private}s",  &v105,  v88);
    double v60 = (char *)v87;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime)",  "%s\n",  v87);
    goto LABEL_103;
  }

void sub_100CF1A70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *sub_100CF1B44(uint64_t a1, char *__src, char *a3)
{
  int v3 = a3;
  float v4 = __src;
  char v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    double v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      sub_100007008();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      double v19 = (char *)sub_1000071BC(a1 + 16, v18);
    }
    else {
      double v19 = 0LL;
    }
    uint64_t v20 = &v19[8 * v16];
    __int128 __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        double v23 = (char *)sub_1000071BC(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        __int128 __p = v23;
        uint64_t v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }

    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    float v4 = sub_100CF45A4((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    double v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)float v4 = *(void *)v3;
  }

  return v4;
}

void sub_100CF1D4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF1D84(void *a1, uint64_t a2)
{
  char v2 = a1 + 1;
  int v3 = (void *)*a1;
  if ((void *)*a1 == a1 + 1) {
    return 0LL;
  }
  while (sub_10096B584(v3[10]) != a2)
  {
    float v5 = (void *)v3[1];
    if (v5)
    {
      do
      {
        char v6 = v5;
        float v5 = (void *)*v5;
      }

      while (v5);
    }

    else
    {
      do
      {
        char v6 = (void *)v3[2];
        BOOL v7 = *v6 == (void)v3;
        int v3 = v6;
      }

      while (!v7);
    }

    int v3 = v6;
    if (v6 == v2) {
      return 0LL;
    }
  }

  return v3[10];
}

uint64_t *sub_100CF1E0C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  __int128 v31 = *(_OWORD *)a2;
  uint64_t v32 = *(void *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1010DD48C(&__p, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }

  else
  {
    __int128 __p = *(_OWORD *)(a2 + 24);
    uint64_t v34 = *(void *)(a2 + 40);
  }

  sub_100CF0754((void *)a1, (unsigned int *)&v31, 1, (uint64_t)"completed");
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__p);
  }
  *a5 = 0LL;
  if (a3)
  {
    *(void *)buf = a2;
    uint64_t v12 = sub_100603C2C((uint64_t **)a1, a2, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
    uint64_t v13 = v12[10];
    v12[10] = 0LL;
    *a5 = v13;
    sub_100603618((uint64_t **)a1, a2);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  unint64_t v14 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = sub_100DD8CC8(*(_DWORD *)a2);
    double v16 = sub_1008ADB4C(a2);
    double v17 = sub_1008ADB70(a2);
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 40);
    double v20 = a6 - *(double *)(a1 + 112);
    *(_DWORD *)buf = 136447747;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v50 = 2049;
    double v51 = v16;
    __int16 v52 = 2049;
    double v53 = v17;
    __int16 v54 = 1026;
    int v55 = a3;
    __int16 v56 = 2050;
    uint64_t v57 = v18;
    __int16 v58 = 2050;
    uint64_t v59 = v19;
    __int16 v60 = 2050;
    double v61 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "@TileDl, %{public}s, completed, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, nlist, %{public}ld, nst ate, %{public}lu, rtt, %{public}.1f",  buf,  0x44u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v22 = qword_101934858;
    double v23 = sub_100DD8CC8(*(_DWORD *)a2);
    double v24 = sub_1008ADB4C(a2);
    double v25 = sub_1008ADB70(a2);
    uint64_t v26 = *(void *)(a1 + 16);
    uint64_t v27 = *(void *)(a1 + 40);
    double v28 = a6 - *(double *)(a1 + 112);
    int v35 = 136447747;
    uint64_t v36 = v23;
    __int16 v37 = 2049;
    double v38 = v24;
    __int16 v39 = 2049;
    double v40 = v25;
    __int16 v41 = 1026;
    int v42 = a3;
    __int16 v43 = 2050;
    uint64_t v44 = v26;
    __int16 v45 = 2050;
    uint64_t v46 = v27;
    __int16 v47 = 2050;
    double v48 = v28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  0LL,  "@TileDl, %{public}s, completed, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, nlist, %{public}ld, nst ate, %{public}lu, rtt, %{public}.1f",  &v35,  68,  v31,  v32);
    uint64_t v30 = (char *)v29;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::unique_ptr<CLTileFile> CLTileDownloader::downloadCompleted(TileId, BOOL, BOOL, CFAbsoluteTime)",  "%s\n",  v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  *(void *)buf = a2;
  BOOL result = sub_100CF442C((uint64_t **)(a1 + 24), a2, (uint64_t)&unk_1012CF090, (__int128 **)buf);
  if (!a4 && a3) {
    result[10] = 0LL;
  }
  *((_BYTE *)result + 88) = 0;
  *(void *)(a1 + 112) = 0LL;
  return result;
}

void sub_100CF21A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  *uint64_t v19 = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF21F8(uint64_t a1, uint64_t a2, double a3)
{
  if (!*(_BYTE *)(a1 + 111))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    BOOL v7 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "TileDl, preindexskip, refresh, #CloneMe",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      LOWORD(v33.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileDl, preindexskip, refresh, #CloneMe",  &v33,  2);
      uint64_t v22 = (char *)v21;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLTileDownloader::shouldRefresh(CLTileFile *, CFAbsoluteTime)",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }

    return 0LL;
  }

  if (!sub_100C0CCC8(a2)) {
    return 0LL;
  }
  std::string v33 = *(std::string *)(a2 + 48);
  char v6 = (__int128 *)(a2 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1010DD48C(&v34, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }

  else
  {
    __int128 v34 = *v6;
    uint64_t v35 = *(void *)(a2 + 88);
  }

  uint64_t v9 = sub_100DD9288(v33.__r_.__value_.__l.__data_, *(void **)(a1 + 120));
  int v10 = sub_100DD927C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  BOOL v11 = sub_100C0CD30(a2, v10, a3, *(float *)(a1 + 96));
  __int128 v29 = *(_OWORD *)(a2 + 48);
  uint64_t v30 = *(void *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1010DD48C(&__p, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }

  else
  {
    __int128 __p = *v6;
    uint64_t v32 = *(void *)(a2 + 88);
  }

  uint64_t v12 = sub_100603554(a1, (uint64_t)&v29);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  uint64_t v13 = (void *)(a1 + 8);
  unint64_t v14 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    double v15 = sub_1008ADB4C((uint64_t)&v33);
    double v16 = sub_1008ADB70((uint64_t)&v33);
    *(_DWORD *)buf = 134284289;
    *(double *)&uint8_t buf[4] = v15;
    __int16 v45 = 2049;
    double v46 = v16;
    __int16 v47 = 1026;
    BOOL v48 = v11;
    __int16 v49 = 1026;
    BOOL v50 = v13 != v12;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "@TileDl, checkRefresh, llsw, %{private}.2lf, %{private}.2lf, expired, %{public}d, onlist, %{public}d",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v23 = qword_101934858;
    double v24 = sub_1008ADB4C((uint64_t)&v33);
    double v25 = sub_1008ADB70((uint64_t)&v33);
    int v36 = 134284289;
    double v37 = v24;
    __int16 v38 = 2049;
    double v39 = v25;
    __int16 v40 = 1026;
    BOOL v41 = v11;
    __int16 v42 = 1026;
    BOOL v43 = v13 != v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "@TileDl, checkRefresh, llsw, %{private}.2lf, %{private}.2lf, expired, %{public}d, onlist, %{public}d",  &v36,  34);
    uint64_t v27 = (char *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileDownloader::shouldRefresh(CLTileFile *, CFAbsoluteTime)",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  int v17 = v13 != v12 || !v11;
  if ((v17 & 1) == 0)
  {
    sub_100DD9668(*(_DWORD *)(v9 + 4), *(void *)(a1 + 128), buf);
    sub_100C0D048(*(uint64_t *)buf, a2);
    uint64_t v18 = *(void *)buf;
    *(void *)buf = 0LL;
    uint64_t v28 = v18;
    sub_100CF03D8(a1, &v28, &v33, a3);
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    }
    uint64_t v19 = *(void *)buf;
    *(void *)buf = 0LL;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
  }

  uint64_t v8 = v17 ^ 1u;
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  return v8;
}

void sub_100CF26F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100CF2788(uint64_t a1, double a2)
{
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472LL;
  v60[2] = sub_100CF31EC;
  v60[3] = &unk_101862770;
  *(double *)&v60[4] = a2;
  v61[0] = mach_absolute_time();
  v61[1] = (uint64_t)v60;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  float v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 134349056;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "@TileQueue, deleteAged, startsize, %{public}lu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v44 = *(void *)(a1 + 16);
    int v62 = 134349056;
    *(void *)double v63 = v44;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@TileQueue, deleteAged, startsize, %{public}lu",  &v62,  12);
    double v46 = (char *)v45;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v45);
    if (v46 != buf) {
      free(v46);
    }
  }

  char v6 = *(uint64_t **)a1;
  if (*(void *)a1 == a1 + 8)
  {
    int v51 = 0;
  }

  else
  {
    int v51 = 0;
    do
    {
      BOOL v7 = (uint64_t *)v6[1];
      uint64_t v8 = v6;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          BOOL v7 = (uint64_t *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v8[2];
          BOOL v10 = *v9 == (void)v8;
          uint64_t v8 = v9;
        }

        while (!v10);
      }

      uint64_t v11 = v6[10];
      __int128 v56 = *(_OWORD *)(v11 + 48);
      uint64_t v57 = *(void *)(v11 + 64);
      if (*(char *)(v11 + 95) < 0)
      {
        sub_1010DD48C(&v58, *(void **)(v11 + 72), *(void *)(v11 + 80));
      }

      else
      {
        __int128 v58 = *(_OWORD *)(v11 + 72);
        uint64_t v59 = *(void *)(v11 + 88);
      }

      __int128 v52 = v56;
      uint64_t v53 = v57;
      if (SHIBYTE(v59) < 0)
      {
        sub_1010DD48C(&__p, (void *)v58, *((unint64_t *)&v58 + 1));
      }

      else
      {
        __int128 __p = v58;
        uint64_t v55 = v59;
      }

      sub_100CF0754((void *)a1, (unsigned int *)&v52, 1, (uint64_t)"aged");
      if (SHIBYTE(v55) < 0) {
        operator delete((void *)__p);
      }
      *(void *)buf = &v56;
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      uint64_t v13 = (unsigned int *)(v11 + 48);
      double v14 = vabdd_f64(a2, v12);
      double v15 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        double v16 = sub_100DD8CC8(*v13);
        double v17 = sub_1008ADB4C((uint64_t)&v56);
        double v18 = sub_1008ADB70((uint64_t)&v56);
        uint64_t v19 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136447491;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&_BYTE buf[12] = 2049;
        *(double *)&_BYTE buf[14] = v17;
        *(_WORD *)&buf[22] = 2049;
        double v73 = v18;
        __int16 v74 = 2050;
        double v75 = v14;
        __int16 v76 = 2050;
        double v77 = v12;
        __int16 v78 = 2050;
        uint64_t v79 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "TileQueue, %{public}s, reqage, llsw, %{private}.2lf, %{private}.2lf, age, %{public}0.1f, time, %{public}0.1f, size, %{public}lu",  buf,  0x3Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        uint64_t v26 = qword_101934858;
        uint64_t v27 = sub_100DD8CC8(*v13);
        double v28 = sub_1008ADB4C((uint64_t)&v56);
        double v29 = sub_1008ADB70((uint64_t)&v56);
        uint64_t v30 = *(void *)(a1 + 40);
        int v62 = 136447491;
        *(void *)double v63 = v27;
        *(_WORD *)&v63[8] = 2049;
        *(double *)&v63[10] = v28;
        __int16 v64 = 2049;
        double v65 = v29;
        __int16 v66 = 2050;
        double v67 = v14;
        __int16 v68 = 2050;
        double v69 = v12;
        __int16 v70 = 2050;
        uint64_t v71 = v30;
        LODWORD(v50) = 62;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v26,  2LL,  "TileQueue, %{public}s, reqage, llsw, %{private}.2lf, %{private}.2lf, age, %{public}0.1f, time, %{public}0.1f, size, %{public}lu",  &v62,  v50);
        uint64_t v32 = (char *)v31;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v31);
        if (v32 != buf) {
          free(v32);
        }
      }

      if (v14 >= *(double *)(a1 + 80))
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        uint64_t v20 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v21 = sub_100DD8CC8(*v13);
          double v22 = sub_1008ADB4C(v11 + 48);
          double v23 = sub_1008ADB70(v11 + 48);
          uint64_t v24 = *(void *)(a1 + 16) - 1LL;
          *(_DWORD *)buf = 136446979;
          *(void *)&uint8_t buf[4] = v21;
          *(_WORD *)&_BYTE buf[12] = 2049;
          *(double *)&_BYTE buf[14] = v22;
          *(_WORD *)&buf[22] = 2049;
          double v73 = v23;
          __int16 v74 = 2050;
          double v75 = *(double *)&v24;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_10187EC70);
          }
          uint64_t v33 = qword_101934858;
          __int128 v34 = sub_100DD8CC8(*v13);
          double v35 = sub_1008ADB4C(v11 + 48);
          double v36 = sub_1008ADB70(v11 + 48);
          uint64_t v37 = *(void *)(a1 + 16) - 1LL;
          int v62 = 136446979;
          *(void *)double v63 = v34;
          *(_WORD *)&v63[8] = 2049;
          *(double *)&v63[10] = v35;
          __int16 v64 = 2049;
          double v65 = v36;
          __int16 v66 = 2050;
          double v67 = *(double *)&v37;
          LODWORD(v50) = 42;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  0LL,  "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld",  &v62,  v50);
          double v39 = (char *)v38;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)",  "%s\n",  v38);
          if (v39 != buf) {
            free(v39);
          }
        }

        sub_100C0FD9C(v11);
        sub_1000087E8((uint64_t **)a1, v6);
        sub_1006035CC((uint64_t)(v6 + 4));
        operator delete(v6);
        *(void *)buf = &v56;
        double v25 = sub_100CF442C((uint64_t **)(a1 + 24), (uint64_t)&v56, (uint64_t)&unk_1012CF090, (__int128 **)buf);
        v25[10] = 0LL;
        *((_BYTE *)v25 + 88) = 0;
        ++v51;
      }

      if (SHIBYTE(v59) < 0) {
        operator delete((void *)v58);
      }
      char v6 = v9;
    }

    while (v9 != (uint64_t *)(a1 + 8));
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  __int16 v40 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v41 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v51;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v41;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "@TileQueue, deleteAged, %{public}d, endsize, %{public}lu",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v47 = *(void *)(a1 + 16);
    int v62 = 67240448;
    *(_DWORD *)double v63 = v51;
    *(_WORD *)&v63[4] = 2050;
    *(void *)&v63[6] = v47;
    LODWORD(v50) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@TileQueue, deleteAged, %{public}d, endsize, %{public}lu",  &v62,  v50);
    __int16 v49 = (char *)v48;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v48);
    if (v49 != buf) {
      free(v49);
    }
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10187ECB0);
  }
  __int16 v42 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v51;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Finished CLTilesDownloader::deleteAgedDownloads, deleted:%{public}u}",  buf,  0x18u);
  }

  return sub_1011F6BE4(v61);
}

void sub_100CF317C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
}

void sub_100CF31EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_101171C7C(a3 - a2);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10187ECB0);
  }
  BOOL v7 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2082;
    uint64_t v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLTileDownloader::deleteAgedDownloadItems, event:%{public, location:escape_only}s,  begin_mach:%{public}llu, end_mach:%{public}llu, elapsed_s:%{public}.09f, now_s:%{public}.09f}",  (uint8_t *)v9,  0x44u);
  }

uint64_t *sub_100CF3320(uint64_t a1)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100CF35C0;
  v14[3] = &unk_101862770;
  v14[4] = a1;
  v15[0] = mach_absolute_time();
  v15[1] = (uint64_t)v14;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  char v2 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 134217984;
    uint64_t v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "@TileQueue, cancelAll, size, %lu", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    uint64_t v11 = *(void *)(a1 + 16);
    int v16 = 134217984;
    uint64_t v17 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "@TileQueue, cancelAll, size, %lu",  &v16);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTileDownloader::cancelAllDownloads()", "%s\n", v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  float v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 != a1 + 8)
  {
    do
    {
      uint64_t v6 = v5[10];
      sub_100C0FD9C(v6);
      sub_100C100B4(v6);
      BOOL v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }

        while (!v9);
      }

      uint64_t v5 = v8;
    }

    while (v8 != v4);
  }

  *(void *)(a1 + 112) = 0LL;
  sub_100603BE4(a1, *(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = v4;
  sub_100603B94(a1 + 24, *(char **)(a1 + 32));
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  return sub_1011F6BE4(v15);
}

void sub_100CF35A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100CF35C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = sub_101171C7C(a3 - a2);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10187ECB0);
  }
  BOOL v7 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(v5 + 16);
    v9[0] = 68290307;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2082;
    uint64_t v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2049;
    uint64_t v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLTileDownloader::cancelAllDownloads, event:%{public, location:escape_only}s, begin _mach:%{public}llu, end_mach:%{public}llu, elapsed_s:%{public}.09f, planned:%{private}lu}",  (uint8_t *)v9,  0x44u);
  }

void sub_100CF36F8(uint64_t a1, double a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  float v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)buf = 134349312;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v73 = 1026;
    LODWORD(v74) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "TileQueue, cleanupList, start, size, %{public}lu, thresh, %{public}d",  buf,  0x12u);
  }

  uint64_t v59 = a1;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    BOOL v48 = *(const char **)(a1 + 16);
    int v49 = *(_DWORD *)(a1 + 76);
    int v60 = 134349312;
    double v61 = v48;
    __int16 v62 = 1026;
    LODWORD(v63) = v49;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "TileQueue, cleanupList, start, size, %{public}lu, thresh, %{public}d",  &v60,  18);
    int v51 = (char *)v50;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v50);
    if (v51 != buf) {
      free(v51);
    }
  }

  BOOL v7 = *(uint64_t **)a1;
  __int128 v58 = (uint64_t *)(a1 + 8);
  if (*(void *)a1 != a1 + 8)
  {
    int v56 = 0;
    uint64_t v8 = (uint64_t **)(a1 + 24);
    uint64_t v57 = (void *)(a1 + 32);
    while (1)
    {
      BOOL v9 = v7;
      __int16 v10 = (uint64_t *)v7[1];
      uint64_t v11 = v7;
      if (v10)
      {
        do
        {
          BOOL v7 = v10;
          __int16 v10 = (uint64_t *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          BOOL v7 = (uint64_t *)v11[2];
          BOOL v12 = *v7 == (void)v11;
          uint64_t v11 = v7;
        }

        while (!v12);
      }

      uint64_t v13 = v9[10];
      __int16 v14 = (unsigned int *)(v13 + 48);
      uint64_t v15 = sub_100DD9288(*(_DWORD *)(v13 + 48), *(void **)(a1 + 120));
      BOOL v16 = sub_10060238C(v15 + 184, (unsigned int *)(v13 + 48));
      BOOL v17 = v16 && sub_100CEFFBC(v59, v13, a2);
      if (v57 == sub_100603554((uint64_t)v8, (uint64_t)v14))
      {
        *(void *)buf = v13 + 48;
        __int16 v18 = sub_100CF442C(v8, (uint64_t)v14, (uint64_t)&unk_1012CF090, (__int128 **)buf);
        if (*((_BYTE *)v18 + 88)) {
          char v19 = 1;
        }
        else {
          char v19 = v17;
        }
        if ((v19 & 1) == 0 && (v16 & sub_100C0CCC8(v13)) == 1)
        {
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_10187EC70);
          }
          __int16 v20 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = sub_100DD8CC8(*v14);
            double v22 = sub_1008ADB4C((uint64_t)v14);
            double v23 = sub_1008ADB70((uint64_t)v14);
            uint64_t v24 = *(void *)(v59 + 16) - 1LL;
            *(_DWORD *)buf = 136446979;
            *(void *)&uint8_t buf[4] = v21;
            __int16 v73 = 2049;
            double v74 = v22;
            __int16 v75 = 2049;
            double v76 = v23;
            __int16 v77 = 2050;
            *(void *)__int16 v78 = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld",  buf,  0x2Au);
          }

          a1 = v59;
          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_10187EC70);
            }
            uint64_t v39 = qword_101934858;
            __int16 v40 = sub_100DD8CC8(*v14);
            double v41 = sub_1008ADB4C((uint64_t)v14);
            double v42 = sub_1008ADB70((uint64_t)v14);
            uint64_t v43 = *(void *)(v59 + 16) - 1LL;
            int v60 = 136446979;
            double v61 = v40;
            __int16 v62 = 2049;
            double v63 = v41;
            __int16 v64 = 2049;
            double v65 = v42;
            __int16 v66 = 2050;
            *(void *)double v67 = v43;
            LODWORD(v55) = 42;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v39,  0LL,  "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld",  &v60,  v55);
            __int16 v45 = (char *)v44;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)",  "%s\n",  v44);
            if (v45 != buf) {
              free(v45);
            }
            a1 = v59;
          }

          sub_1000087E8((uint64_t **)a1, v9);
          sub_1006035CC((uint64_t)(v9 + 4));
          operator delete(v9);
          v18[10] = 0LL;
          ++v56;
          goto LABEL_36;
        }

        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187EC70);
        }
        double v25 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
        {
          uint64_t v26 = sub_100DD8CC8(*(_DWORD *)(v13 + 48));
          double v27 = sub_1008ADB4C((uint64_t)v14);
          double v28 = sub_1008ADB70((uint64_t)v14);
          int v29 = *((unsigned __int8 *)v18 + 88);
          BOOL v30 = sub_100C0CCC8(v13);
          *(_DWORD *)buf = 136447747;
          *(void *)&uint8_t buf[4] = v26;
          __int16 v73 = 2049;
          double v74 = v27;
          __int16 v75 = 2049;
          double v76 = v28;
          __int16 v77 = 1026;
          *(_DWORD *)__int16 v78 = v29;
          *(_WORD *)&v78[4] = 1026;
          *(_DWORD *)&v78[6] = v17;
          __int16 v79 = 1026;
          int v80 = !v30;
          __int16 v81 = 1026;
          int v82 = !v16;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "@TileReq, %{public}s, keeplist, llsw, %{private}.2lf, %{private}.2lf, reasons, dl, %{public}d, retry, %{publ ic}d, onserver, %{public}d, ondisc, %{public}d",  buf,  0x38u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_10187EC70);
          }
          uint64_t v31 = qword_101934858;
          uint64_t v32 = sub_100DD8CC8(*(_DWORD *)(v13 + 48));
          double v33 = sub_1008ADB4C((uint64_t)v14);
          double v34 = sub_1008ADB70((uint64_t)v14);
          int v35 = *((unsigned __int8 *)v18 + 88);
          BOOL v36 = sub_100C0CCC8(v13);
          int v60 = 136447747;
          double v61 = v32;
          __int16 v62 = 2049;
          double v63 = v33;
          __int16 v64 = 2049;
          double v65 = v34;
          __int16 v66 = 1026;
          *(_DWORD *)double v67 = v35;
          *(_WORD *)&v67[4] = 1026;
          *(_DWORD *)&v67[6] = v17;
          __int16 v68 = 1026;
          int v69 = !v36;
          __int16 v70 = 1026;
          int v71 = !v16;
          LODWORD(v55) = 56;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v31,  1LL,  "@TileReq, %{public}s, keeplist, llsw, %{private}.2lf, %{private}.2lf, reasons, dl, %{public}d, retry, %{publ ic}d, onserver, %{public}d, ondisc, %{public}d",  &v60,  v55);
          __int16 v38 = (char *)v37;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)",  "%s\n",  v37);
          if (v38 != buf) {
            free(v38);
          }
        }
      }

      a1 = v59;
LABEL_36:
      if (v7 == v58) {
        goto LABEL_48;
      }
    }
  }

  int v56 = 0;
LABEL_48:
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  double v46 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v47 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 134349312;
    *(void *)&uint8_t buf[4] = v47;
    __int16 v73 = 1026;
    LODWORD(v74) = v56;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "TileQueue, cleanupList, done, size, %{public}lu, cleanedFiles, %{public}u",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    __int128 v52 = *(const char **)(v59 + 16);
    int v60 = 134349312;
    double v61 = v52;
    __int16 v62 = 1026;
    LODWORD(v63) = v56;
    LODWORD(v55) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "TileQueue, cleanupList, done, size, %{public}lu, cleanedFiles, %{public}u",  &v60,  v55);
    __int16 v54 = (char *)v53;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v53);
    if (v54 != buf) {
      free(v54);
    }
  }

void sub_100CF4014(uint64_t a1, int a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10187EC70);
  }
  float v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileQueue, setReach, %{public}d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "TileQueue, setReach, %{public}d",  v7,  8);
    int v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTileDownloader::setReachability(CLDaemonStatus_Type::Reachability)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  *(_DWORD *)(a1 + 104) = a2;
}

uint64_t sub_100CF41C4(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16LL))(*(void *)(a1 + 48));
  if ((_DWORD)result) {
    *(_BYTE *)(a1 + 109) = a2;
  }
  return result;
}

void sub_100CF41FC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0 && !*(_BYTE *)(a1 + 111))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10187EC70);
    }
    float v4 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileQueue, firstUnlock", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10187EC70);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "TileQueue, firstUnlock",  v7,  2);
      int v6 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTileDownloader::setLockState(BOOL)", "%s\n", v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    *(_BYTE *)(a1 + 111) = 1;
  }

  *(_BYTE *)(a1 + 110) = a2;
}

void sub_100CF43A8(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100CF43D4(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100CF4400(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t *sub_100CF442C(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  int v6 = (uint64_t **)sub_10060372C((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_100CF44C0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000085FC(a1, v9, v6, v8);
    return v8;
  }

  return result;
}

uint64_t sub_100CF44C0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_100CF4540((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100CF4524(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10060386C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF4540(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  uint64_t v4 = a1 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1010DD48C((_BYTE *)v4, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *(void *)(v4 + 16) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v4 = v5;
  }

  *(void *)(a1 + 48) = 0LL;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

char *sub_100CF45A4(void **a1, uint64_t a2, char *__src)
{
  __int128 v5 = *(char **)(a2 + 8);
  int v6 = (char *)*a1;
  BOOL v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    BOOL v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + 8) = v7;
  __int16 v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    BOOL v7 = *(char **)(a2 + 8);
  }

  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  __int16 v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_100CF4668()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199DC78, (void *)&_mh_execute_header);
}

uint64_t sub_100CF46AC(uint64_t a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_10187ECE0;
  *(void *)(a1 + 72) = off_10187ED90;
  sub_100B14CF0((void *)(a1 + 368), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 384), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 400), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 416), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 432), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 448), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 464), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 480), 0LL, 0LL);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 536) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 544) = 0x7FEFFFFFFFFFFFFFLL;
  (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  return a1;
}

void sub_100CF47DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF4808(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  int64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 8));
  *int64_t v12 = &off_10182BDA0;
  *(void *)a1 = off_10187EFC0;
  *(void *)(a1 + 72) = off_10187F068;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10187EFC0;
  *(void *)(a1 + 72) = off_10187F068;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 288) = 12000;
  *(void *)(a1 + 296) = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 304));
  *(void *)(a1 + 304) = &off_10182BDA0;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 248) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  uint64_t v15 = (int *)(a1 + 288);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 288));
  BOOL v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    int *v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187F0A8);
  }
  __int16 v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187F0A8);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    uint64_t v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLSignificantElevation>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLSignificantElevation, DataProtectionPolicy = CLActivity DB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 248) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100CF4BB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[37] = off_10182BD58;
  sub_1001B9C98(v27);
  sub_1002D62D8(v26);
  sub_100D8A88C(a12);
  void *v24 = off_10182BD58;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100CF4C54()
{
}

void *sub_100CF4C5C(void *a1)
{
  a1[9] = off_10187F068;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_10187EFC0;
  a1[37] = off_10182BD58;
  sub_1001B9C98(a1 + 38);
  sub_1002D62D8(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_10182BD58;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100CF4CD8(void *a1)
{
  *a1 = off_10187ECE0;
  a1[9] = off_10187ED90;
  sub_100CF4D1C((uint64_t)a1, 0LL, 0LL);
  return sub_100CF4C5C(a1);
}

void sub_100CF4D1C(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0LL) == (a3 != 0LL))
  {

    *(void *)(a1 + 496) = a2;
    char v6 = *(const void **)(a1 + 504);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 504) = _Block_copy(a3);
    }
  }

  else
  {
    uint64_t v7 = sub_10126B098();
    sub_100CF4D90(v7);
  }

void *sub_100CF4D94(uint64_t a1)
{
  return sub_100CF4CD8((void *)(a1 - 72));
}

void sub_100CF4D9C(void *a1)
{
  uint64_t v1 = sub_100CF4CD8(a1);
  operator delete(v1);
}

void sub_100CF4DB0(uint64_t a1)
{
  uint64_t v1 = sub_100CF4CD8((void *)(a1 - 72));
  operator delete(v1);
}

uint64_t sub_100CF4DC8(uint64_t *a1, uint64_t a2)
{
  __int128 v5 = a1 + 14;
  uint64_t v4 = a1[14];
  v17[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 14);
  __int16 v18 = 256;
  if (*(double *)(*(void *)(a2 + 8) - 16LL) == 1.79769313e308)
  {
    if (sub_100D8A92C(a1 + 9))
    {
      sub_100222B94(buf, (uint64_t)"CLElevationRecorderDb.aggregateRecords", 0);
      sub_1003C0454(a1[10]);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100B14CF8(a1 + 50, v17);
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v17[0]);
      if (sub_1003B7480(v7, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
      {
        uint64_t v8 = a1[10];
        uint64_t v9 = (sqlite3_stmt *)sub_100019240(v17[0]);
        sub_1003BB2BC(v8, v9);
      }

      sub_1003C05BC(a1[10]);
      uint64_t v10 = a1[10];
      else {
        uint64_t v11 = *(void *)(v10 + 88);
      }
      sub_1003C1EC0(v10, v11);
      uint64_t v12 = v17[0];
      v17[0] = 0LL;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
      }
      sub_1001BA1BC(buf);
    }
  }

  else
  {
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187EE20);
    }
    uint64_t v13 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Programmer error, we expect an expiration record!",  (uint8_t *)buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187EE20);
      }
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  17LL,  "Programmer error, we expect an expiration record!",  v17,  2);
      char v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual long CLElevationRecorderDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v15);
    }
  }

  (*(void (**)(uint64_t *))(*v5 + 24))(v5);
  return 0LL;
}

void sub_100CF5068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100CF50CC(uint64_t a1, uint64_t a2)
{
  return 0LL;
}

uint64_t sub_100CF50E8(uint64_t a1, void **a2, double a3, double a4)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 368), &v11);
    uint64_t v9 = (sqlite3_stmt *)sub_100019240(v11);
    if (sub_1003B7480(v9, 1, a3))
    {
      uint64_t v10 = (sqlite3_stmt *)sub_100019240(v11);
      if (sub_1003B7480(v10, 2, a4)) {
        sub_100CF51B4(a1, &v11, a2);
      }
    }

    uint64_t result = v11;
    uint64_t v11 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100CF5190( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF51B4(uint64_t a1, uint64_t *a2, void **a3)
{
  for (; !sub_100CF74F4(a2, (uint64_t)&v28); a3[1] = v11)
  {
    uuid_copy((unsigned __int8 *)&v28 + 4, src);
    char v6 = a3[1];
    unint64_t v7 = (unint64_t)a3[2];
    if ((unint64_t)v6 >= v7)
    {
      uint64_t v12 = ((char *)v6 - (_BYTE *)*a3) >> 6;
      unint64_t v13 = v12 + 1;
      uint64_t v14 = v7 - (void)*a3;
      if (v14 >> 5 > v13) {
        unint64_t v13 = v14 >> 5;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        char v16 = (char *)sub_10001275C((uint64_t)(a3 + 2), v15);
      }
      else {
        char v16 = 0LL;
      }
      BOOL v17 = &v16[64 * v12];
      __int128 v18 = v28;
      __int128 v19 = v29;
      __int128 v20 = v31;
      *((_OWORD *)v17 + 2) = v30;
      *((_OWORD *)v17 + 3) = v20;
      *(_OWORD *)BOOL v17 = v18;
      *((_OWORD *)v17 + 1) = v19;
      int v22 = (char *)*a3;
      int v21 = (char *)a3[1];
      double v23 = v17;
      if (v21 != *a3)
      {
        do
        {
          __int128 v24 = *((_OWORD *)v21 - 4);
          __int128 v25 = *((_OWORD *)v21 - 3);
          __int128 v26 = *((_OWORD *)v21 - 1);
          *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
          *((_OWORD *)v23 - 1) = v26;
          *((_OWORD *)v23 - 4) = v24;
          *((_OWORD *)v23 - 3) = v25;
          v23 -= 64;
          v21 -= 64;
        }

        while (v21 != v22);
        int v21 = (char *)*a3;
      }

      uint64_t v11 = v17 + 64;
      *a3 = v23;
      a3[1] = v17 + 64;
      a3[2] = &v16[64 * v15];
      if (v21) {
        operator delete(v21);
      }
    }

    else
    {
      __int128 v8 = v28;
      __int128 v9 = v29;
      __int128 v10 = v31;
      v6[2] = v30;
      void v6[3] = v10;
      *char v6 = v8;
      v6[1] = v9;
      uint64_t v11 = v6 + 4;
    }
  }

  return sub_1003C05BC(*(void *)(a1 + 80));
}

uint64_t sub_100CF5370(uint64_t a1, int a2, int a3, void **a4, double a5, double a6)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 480), &v17);
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v17);
    if (sub_1003B7480(v13, 1, a5))
    {
      uint64_t v14 = (sqlite3_stmt *)sub_100019240(v17);
      if (sub_1003B7480(v14, 2, a6))
      {
        unint64_t v15 = (sqlite3_stmt *)sub_100019240(v17);
        if (sub_1003C28BC(v15, 3, a2))
        {
          char v16 = (sqlite3_stmt *)sub_100019240(v17);
          if (sub_1003C28BC(v16, 4, a3)) {
            sub_100CF51B4(a1, &v17, a4);
          }
        }
      }
    }

    uint64_t result = v17;
    uint64_t v17 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100CF5458( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100CF547C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 104LL))(a1) == 0;
}

double sub_100CF54A0(uint64_t a1)
{
  *(void *)(a1 + 528) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 536) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 544) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 552) = 0LL;
  *(_OWORD *)(a1 + 560) = 0u;
  return result;
}

void sub_100CF54C4(uint64_t *a1)
{
  if (sub_1003C1048(a1[10]))
  {
    sub_100CF5728((uint64_t)a1);
    sub_1003B59A0( a1[10],  "ElevationHistory",  (const char **)&off_10187EE60,  (const std::string::value_type **)&off_1019901C8,  0);
    a1[46] = sub_1003BF158( a1[10],  "SELECT * FROM ElevationHistory WHERE ? <= startTime AND endTime <= ? ORDER BY startTime ASC");
    a1[47] = v2;
    a1[48] = sub_1003BF158(a1[10], "SELECT * FROM ElevationHistory ORDER BY startTime ASC");
    a1[49] = v3;
    a1[50] = sub_1003BF158(a1[10], "DELETE FROM ElevationHistory WHERE startTime < ?");
    a1[51] = v4;
    a1[52] = sub_1003BF158(a1[10], "DELETE FROM ElevationHistory");
    a1[53] = v5;
    a1[54] = sub_1003BF158( a1[10],  "INSERT INTO ElevationHistory (startTime, endTime, elevationAscended, elevationDescended, pressure) VALUES (?, ?, ?, ?, ?)");
    a1[55] = v6;
    a1[56] = sub_1003BF158(a1[10], "SELECT * FROM ElevationHistory ORDER BY startTime DESC LIMIT 1");
    a1[57] = v7;
    a1[58] = sub_1003BF158(a1[10], "UPDATE ElevationHistory SET startTime = startTime + ?, endTime = endTime + ?");
    a1[59] = v8;
    a1[60] = sub_1003BF158( a1[10],  "SELECT * FROM ElevationHistory WHERE ? <= startTime AND endTime <= ? AND ? <= id ORDER BY startTime ASC LIMIT ?");
    a1[61] = v9;
  }

  else
  {
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187EE20);
    }
    __int128 v10 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Device is locked and we are unable to open the database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187EE20);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  2LL,  "Device is locked and we are unable to open the database",  v13,  2);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLElevationRecorderDb::prepareSQLStatements()", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

void sub_100CF5728(uint64_t a1)
{
  if (sub_1003B747C(*(void *)(a1 + 80), "ElevationHistory"))
  {
    int v35 = "pressure";
    int v36 = 5;
    __int16 v37 = 0;
    char v38 = 0;
    char v39 = 0;
    int v2 = sub_1003BC790(*(void *)(a1 + 80), "ElevationHistory", "pressure", (uint64_t)&v35);
    if ((v2 & 1) != 0)
    {
      if ((sub_100CF5C9C( a1,  "ElevationHistory",  (const char **)&off_10187EE60,  (const std::string::value_type **)&off_1019901C8) | v2 ^ 1) != 1) {
        return;
      }
    }

    else
    {
      sub_1003C0454(*(void *)(a1 + 80));
      sub_10000CE18((uint64_t)buf);
      uint64_t v6 = sub_10000CF44(&v41, (uint64_t)"ALTER TABLE ElevationHistory", 28LL);
      uint64_t v7 = sub_10000CF44(v6, (uint64_t)" ADD COLUMN ", 12LL);
      uint64_t v8 = sub_10000CF44(v7, (uint64_t)"pressure", 8LL);
      uint64_t v9 = sub_10000CF44(v8, (uint64_t)" ", 1LL);
      __int128 v10 = (const char *)sub_1003BCC40(2);
      size_t v11 = strlen(v10);
      uint64_t v12 = sub_10000CF44(v9, (uint64_t)v10, v11);
      sub_10000CF44(v12, (uint64_t)";", 1LL);
      uint64_t v13 = *(void *)(a1 + 80);
      std::stringbuf::str(&v32, &v42);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v14 = &v32;
      }
      else {
        uint64_t v14 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(v13, (char *)v14, &v30);
      uint64_t v15 = v30.__r_.__value_.__r.__words[0];
      v30.__r_.__value_.__r.__words[0] = 0LL;
      if ((char)v32.__r_.__value_.__s.__size_ < 0)
      {
        uint64_t v16 = v15;
        operator delete(v32.__r_.__value_.__l.__data_);
        uint64_t v15 = v16;
      }

      uint64_t v17 = *(void *)(a1 + 80);
      uint64_t v29 = v15;
      __int128 v18 = (sqlite3_stmt *)sub_100019240(v15);
      sub_1003BB2BC(v17, v18);
      sub_10000CE18((uint64_t)&v32);
      __int128 v19 = sub_10000CF44(&v32.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE ElevationHistory SET ", 28LL);
      __int128 v20 = sub_10000CF44(v19, (uint64_t)"pressure", 8LL);
      sub_10000CF44(v20, (uint64_t)" = 0;", 5LL);
      uint64_t v21 = *(void *)(a1 + 80);
      std::stringbuf::str(&v30, &v33);
      if ((v30.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v22 = &v30;
      }
      else {
        int v22 = (std::stringbuf::string_type *)v30.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(v21, (char *)v22, &v31);
      uint64_t v23 = v31;
      uint64_t v31 = 0LL;
      uint64_t v24 = *(void *)(a1 + 80);
      __int128 v25 = (sqlite3_stmt *)sub_100019240(v23);
      sub_1003BB2BC(v24, v25);
      sub_1003C05BC(*(void *)(a1 + 80));
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
      }
      v32.__r_.__value_.__r.__words[0] = v26;
      *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + *(void *)(v26 - 24)) = v27;
      v32.__r_.__value_.__l.__cap_ = v28;
      std::streambuf::~streambuf(&v33);
      std::ios::~ios(&v34);
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
      }
      *(void *)buf = v26;
      *(void *)&buf[*(void *)(v26 - 24)] = v27;
      std::string::size_type v41 = v28;
      std::streambuf::~streambuf(&v42);
      std::ios::~ios(&v43);
      sub_100CF5C9C( a1,  "ElevationHistory",  (const char **)&off_10187EE60,  (const std::string::value_type **)&off_1019901C8);
    }

    sub_1003BF200(*(void *)(a1 + 80), "ElevationHistory");
    return;
  }

  if (qword_1019345B0 != -1) {
    dispatch_once(&qword_1019345B0, &stru_10187EE20);
  }
  uint64_t v3 = (os_log_s *)qword_1019345B8;
  if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "ElevationHistory table doesn't even exist",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187EE20);
    }
    LOWORD(v32.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  2LL,  "ElevationHistory table doesn't even exist",  &v32,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLElevationRecorderDb::alterTableIfNecessary()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

void sub_100CF5BF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a20);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  sub_1011F8850((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF5C9C(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187F0A8);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F0A8);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      __int16 v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLSignificantElevation>::migrateDbConstraints(const char *, const CLSqliteDatabase::Co lumnInfo *, const char **) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    size_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      uint64_t v16 = v143;
    }
    else {
      uint64_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    __int128 v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      uint64_t v21 = &__p;
    }
    else {
      uint64_t v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    int v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v27 = &__p;
      }
      else {
        std::string::size_type v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      std::string::size_type v28 = v143;
    }
    else {
      std::string::size_type v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    std::stringbuf::string_type v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::stringbuf::string_type v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = &v139;
    }
    else {
      uint64_t v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    int v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    char v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v41 = &__p;
    }
    else {
      std::string::size_type v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    std::stringbuf v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    double v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v47 = &__p;
      }
      else {
        uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      BOOL v48 = v143;
    }
    else {
      BOOL v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    uint64_t v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v54 = buf;
    }
    else {
      __int16 v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    int v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v60 = buf;
    }
    else {
      int v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int16 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v69 = &__p;
    }
    else {
      int v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    __int16 v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    double v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v75 = &__p;
      }
      else {
        __int16 v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    double v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      __int16 v79 = &__p;
    }
    else {
      __int16 v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    int v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    BOOL v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      BOOL v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v85 = &__p;
      }
      else {
        int v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      uint64_t v86 = v143;
    }
    else {
      uint64_t v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    uint64_t v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    int v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v95 = &__p;
    }
    else {
      uint64_t v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    BOOL v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v103 = &__p;
        }
        else {
          v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        v104 = v141;
      }
      else {
        v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      uint64_t v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      double v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      BOOL v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v114 = buf;
      }
      else {
        int v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      uint64_t v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v121 = &__p;
      }
      else {
        __int16 v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      uint64_t v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F0A8);
      }
      double v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187F0A8);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        __int16 v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLSignificantElevation>::migrateDbConstraints(const char *, const CLSqliteDatabase:: ColumnInfo *, const char **) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F0A8);
      }
      uint64_t v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187F0A8);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        __int16 v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<CLSignificantElevation>::migrateDbConstraints(const char *, const CLSqliteDatabase:: ColumnInfo *, const char **) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100CF6E34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CF7154(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 416), &v7);
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = (sqlite3_stmt *)sub_100019240(v7);
    sub_1003BB2BC(v3, v4);
    uint64_t v5 = *(void *)(a1 + 80);
    else {
      uint64_t v6 = *(void *)(v5 + 88);
    }
    sub_1003C1EC0(v5, v6);
    uint64_t result = v7;
    uint64_t v7 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100CF71D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF71FC(uint64_t a1)
{
  return sub_100CF7154(a1 - 72);
}

uint64_t sub_100CF7208(uint64_t a1, double a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 464), &v13);
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(v13);
    if (sub_1003B7480(v5, 1, a2) && (uint64_t v6 = (sqlite3_stmt *)sub_100019240(v13), sub_1003B7480(v6, 2, a2)))
    {
      uint64_t v7 = *(void *)(a1 + 80);
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v13);
      sub_1003BB2BC(v7, v8);
    }

    else
    {
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187EE20);
      }
      uint64_t v9 = (os_log_s *)qword_1019345B8;
      if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Failed to shift records.", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345B0 != -1) {
          dispatch_once(&qword_1019345B0, &stru_10187EE20);
        }
        __int16 v12 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  17LL,  "Failed to shift records.",  &v12,  2);
        size_t v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLElevationRecorderDb::shiftRecordsByUL(CFTimeInterval)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }
    }

    uint64_t result = v13;
    uint64_t v13 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100CF7418( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100CF7448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a3 + 32) <= *(double *)(a2 + 32);
}

uint64_t sub_100CF745C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100CF74F4(&v7, a2);
  uint64_t v5 = v7;
  uint64_t v7 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v4;
}

void sub_100CF74D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF74F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 2);
  uint64_t v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 40) = sqlite3_column_int(v9, 3);
  __int128 v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 44) = sqlite3_column_int(v10, 4);
  size_t v11 = (sqlite3_stmt *)sub_100019240(*a1);
  double v12 = sqlite3_column_double(v11, 5);
  uint64_t result = 0LL;
  *(double *)(a2 + 48) = v12;
  return result;
}

uint64_t sub_100CF75BC(uint64_t a1, void **a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 384), &v5);
    sub_100CF51B4(a1, &v5, a2);
    uint64_t result = v5;
    uint64_t v5 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100CF7624( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CF7648(uint64_t a1, uint64_t a2)
{
  if (sub_100D8A92C(a1 + 72))
  {
    sub_100CF791C(a1, a2, (uint64_t)v29);
    int v5 = v4;
    if (v4 == 2)
    {
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187EE20);
      }
      uint64_t v6 = (os_log_s *)qword_1019345B8;
      if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Error setting elevation offsets.", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345B0 != -1) {
          dispatch_once(&qword_1019345B0, &stru_10187EE20);
        }
        v27[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  17LL,  "Error setting elevation offsets.",  v27,  2);
        uint64_t v8 = (uint8_t *)v7;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLElevationRecorderDb::insertRecordUL(const CLSignificantElevation &, BOOL)",  "%s\n",  v7);
        if (v8 != buf) {
          free(v8);
        }
      }
    }

    else
    {
      double v10 = *(double *)(a2 + 24);
      double v9 = *(double *)(a2 + 32);
      int v11 = *(_DWORD *)(a1 + 552);
      int v13 = *(_DWORD *)(a2 + 40);
      int v12 = *(_DWORD *)(a2 + 44);
      int v14 = *(_DWORD *)(a1 + 556);
      double v15 = *(double *)(a2 + 48);
      double v16 = v30;
      sub_100B14CF8((uint64_t *)(a1 + 432), buf);
      std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
      if (v10 < v16 && v5 == 0) {
        double v19 = v16;
      }
      else {
        double v19 = v10;
      }
      if (sub_1003B7480(v17, 1, v19))
      {
        signed __int8 v20 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
        if (sub_1003B7480(v20, 2, v9))
        {
          uint64_t v21 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
          if (sub_1003C2AF0(v21, 3, v11 + v13))
          {
            int v22 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
            if (sub_1003C2AF0(v22, 4, v14 + v12))
            {
              int v23 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
              if (sub_1003B7480(v23, 5, v15))
              {
                uint64_t v24 = *(void *)(a1 + 80);
                size_t v25 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
                sub_1003BB2BC(v24, v25);
              }
            }
          }
        }
      }

      uint64_t v26 = *(void *)buf;
      *(void *)buf = 0LL;
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
      }
    }
  }

void sub_100CF78F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  _Unwind_Resume(exception_object);
}

double sub_100CF791C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 104LL))(a1, a3);
  double result = *(double *)(a1 + 536);
  if (result == 1.79769313e308 || *(double *)(a2 + 24) < result)
  {
    double v9 = (_OWORD *)(a1 + 512);
    if (v6 == 1)
    {
      double result = 0.0;
      *(_OWORD *)(a1 + 544) = 0u;
      *(_OWORD *)(a1 + 560) = 0u;
      *double v9 = 0u;
      *(_OWORD *)(a1 + 528) = 0u;
    }

    else if (!v6)
    {
      double result = *(double *)(a3 + 40);
      *(void *)(a1 + 544) = 0LL;
      *double v9 = 0u;
      *(_OWORD *)(a1 + 528) = 0u;
      *(double *)(a1 + 552) = result;
      *(void *)(a1 + 568) = 0LL;
      *(void *)(a1 + 560) = 0LL;
    }
  }

  return result;
}

uint64_t sub_100CF79B0(void *a1, void **a2, double a3, double a4)
{
  uint64_t v8 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v45);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if (HIBYTE(v46)) {
      goto LABEL_3;
    }
LABEL_39:
    sub_10126B220(v8);
    __break(1u);
  }

  unsigned __int8 v40 = v45[1];
  operator delete(v45[0]);
  if (!v40) {
    goto LABEL_39;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v45);
  double v9 = sub_10000CF44(&v46, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 64LL))(v49, a1);
  if (v49[23] >= 0) {
    double v10 = v49;
  }
  else {
    double v10 = *(_BYTE **)v49;
  }
  if (v49[23] >= 0) {
    uint64_t v11 = v49[23];
  }
  else {
    uint64_t v11 = *(void *)&v49[8];
  }
  int v12 = sub_10000CF44(v9, (uint64_t)v10, v11);
  sub_10000CF44(v12, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if ((v49[23] & 0x80000000) != 0) {
    operator delete(*(void **)v49);
  }
  uint64_t v13 = a1[10];
  std::stringbuf::str((std::stringbuf::string_type *)v49, &v47);
  if (v49[23] >= 0) {
    int v14 = v49;
  }
  else {
    int v14 = *(char **)v49;
  }
  sub_1003C0D54(v13, v14, &v43);
  uint64_t v15 = v43;
  uint64_t v43 = 0LL;
  uint64_t v44 = v15;
  if ((v49[23] & 0x80000000) != 0) {
    operator delete(*(void **)v49);
  }
  double v16 = (sqlite3_stmt *)sub_100019240(v15);
  if (sub_1003B7480(v16, 1, a3) && (std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v15), sub_1003B7480(v17, 2, a4)))
  {
    while (1)
    {
      uint64_t v18 = sub_1001BA11C((uint64_t)a1, &v44, (uint64_t)v49);
      if ((_DWORD)v18) {
        break;
      }
      double v19 = a2[1];
      unint64_t v20 = (unint64_t)a2[2];
      if ((unint64_t)v19 >= v20)
      {
        uint64_t v25 = ((char *)v19 - (_BYTE *)*a2) >> 6;
        unint64_t v26 = v25 + 1;
        uint64_t v27 = v20 - (void)*a2;
        if (v27 >> 5 > v26) {
          unint64_t v26 = v27 >> 5;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          std::string::size_type v29 = (char *)sub_10001275C((uint64_t)(a2 + 2), v28);
        }
        else {
          std::string::size_type v29 = 0LL;
        }
        double v30 = &v29[64 * v25];
        __int128 v31 = *(_OWORD *)v49;
        __int128 v32 = *(_OWORD *)&v49[16];
        __int128 v33 = v51;
        *((_OWORD *)v30 + 2) = v50;
        *((_OWORD *)v30 + 3) = v33;
        *(_OWORD *)double v30 = v31;
        *((_OWORD *)v30 + 1) = v32;
        std::string::size_type v35 = (char *)*a2;
        uint64_t v34 = (char *)a2[1];
        int v36 = v30;
        if (v34 != *a2)
        {
          do
          {
            __int128 v37 = *((_OWORD *)v34 - 4);
            __int128 v38 = *((_OWORD *)v34 - 3);
            __int128 v39 = *((_OWORD *)v34 - 1);
            *((_OWORD *)v36 - 2) = *((_OWORD *)v34 - 2);
            *((_OWORD *)v36 - 1) = v39;
            *((_OWORD *)v36 - 4) = v37;
            *((_OWORD *)v36 - 3) = v38;
            v36 -= 64;
            v34 -= 64;
          }

          while (v34 != v35);
          uint64_t v34 = (char *)*a2;
        }

        uint64_t v24 = v30 + 64;
        *a2 = v36;
        a2[1] = v30 + 64;
        a2[2] = &v29[64 * v28];
        if (v34) {
          operator delete(v34);
        }
      }

      else
      {
        __int128 v21 = *(_OWORD *)v49;
        __int128 v22 = *(_OWORD *)&v49[16];
        __int128 v23 = v51;
        v19[2] = v50;
        v19[3] = v23;
        *double v19 = v21;
        v19[1] = v22;
        uint64_t v24 = v19 + 4;
      }

      a2[1] = v24;
    }

    uint64_t v15 = v44;
  }

  else
  {
    uint64_t v18 = 2LL;
  }

  uint64_t v44 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  *(void **)((char *)v45
  uint64_t v46 = v41;
  std::streambuf::~streambuf(&v47);
  std::ios::~ios(&v48);
  return v18;
}

void sub_100CF7D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100CF7D70(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v38 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187F0A8);
    }
    int v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      uint64_t v44 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F0A8);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)buf = 134349056;
        *(void *)std::stringbuf v42 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187F0A8);
        }
        uint64_t v34 = *(void *)(a1 + 216);
        int v39 = 134349056;
        uint64_t v40 = v34;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v39,  12);
        int v36 = (uint8_t *)v35;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLSignificantElevation>::setDatabaseAccessible() [T = CLSignificantElevation , DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v35);
        if (v36 != buf) {
          free(v36);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187F0A8);
    }
    double v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      uint64_t v44 = v11;
      __int16 v45 = 2049;
      uint64_t v46 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    uint64_t v13 = *(void *)(a1 + 184);
    uint64_t v14 = *(void *)(a1 + 192);
    uint64_t v15 = (void *)(v13 + 8LL * (*(void *)(a1 + 208) >> 6));
    if (v14 == v13) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = *v15 + ((*(void *)(a1 + 208) & 0x3FLL) << 6);
    }
    while (1)
    {
      if (v14 == v13)
      {
        unint64_t v22 = 0LL;
      }

      else
      {
        unint64_t v21 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v22 = *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) + ((v21 & 0x3F) << 6);
      }

      if (v16 == v22) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187F0C8);
      }
      __int128 v23 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10187F0C8);
        }
        LOWORD(v39) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v39,  v37);
        unint64_t v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLSignificantElevation>::setDatabaseAccessible() [T = CLSignificantElevation , DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v16, 1LL);
      v16 += 64LL;
      if (v16 - *v15 == 4096)
      {
        uint64_t v24 = v15[1];
        ++v15;
        uint64_t v16 = v24;
      }

      uint64_t v13 = *(void *)(a1 + 184);
      uint64_t v14 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187F0A8);
    }
    std::string::size_type v17 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v18 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      uint64_t v44 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F0A8);
      }
    }

    double v19 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v20 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      uint64_t v44 = v20;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  uint64_t v27 = *(void ***)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v30 = *(void *)(a1 + 192);
      uint64_t v27 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v27;
      unint64_t v29 = v30 - (void)v27;
    }

    while (v29 > 0x10);
  }

  if (v29 >> 3 == 1)
  {
    uint64_t v31 = 32LL;
  }

  else
  {
    if (v29 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v31 = 64LL;
  }

  *(void *)(a1 + 208) = v31;
LABEL_61:
  __int128 v32 = *(void **)(a1 + 144);
  if (v32)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100CF8478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

id *sub_100CF84AC(uint64_t a1, __int128 *a2, char a3)
{
  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0LL;
  if (*(double *)(a1 + 248) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v34);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 104LL))(a1, v43);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F0A8);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187F0A8);
        }
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v35,  2);
        uint64_t v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLSignificantElevation>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSi gnificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *((double *)a2 + 3);
    double v8 = v44;
    double v9 = v7 - v44;
    if (v7 - v44 < 0.0) {
      double v9 = -(v7 - v44);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F0A8);
      }
      double v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 3);
        *(_DWORD *)buf = 134349312;
        double v40 = v44;
        __int16 v41 = 2050;
        uint64_t v42 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187F0A8);
        }
        uint64_t v25 = *((void *)a2 + 3);
        int v35 = 134349312;
        double v36 = v44;
        __int16 v37 = 2050;
        uint64_t v38 = v25;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v35,  22);
        uint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSignificantElevation>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSi gnificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *((double *)a2 + 3);
      double v8 = v44;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187F0A8);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 3);
          *(_DWORD *)buf = 134217984;
          double v40 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187F0A8);
          }
          double v28 = *((double *)a2 + 3);
          int v35 = 134217984;
          double v36 = v28;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v35));
          uint64_t v30 = (uint8_t *)v29;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSignificantElevation>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CL SignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v29);
          if (v30 != buf) {
            free(v30);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_10187F0A8);
        double v18 = v33;
      }

      double v19 = v17 - v18;
      unint64_t v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v40 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187F0A8);
        }
        int v35 = 134217984;
        double v36 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v35));
        __int128 v32 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSignificantElevation>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSi gnificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v31);
        if (v32 != buf) {
          free(v32);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, _BYTE *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, v43, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100CF8BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100CF8C1C(uint64_t a1)
{
  return sub_100CF7D70(a1 - 72);
}

void sub_100CF8C24(id a1)
{
  qword_1019345B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100CF8C50(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100CF8C7C(uint64_t *a1, char **a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v39);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    if (HIBYTE(v40)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10126B38C(v4);
    __break(1u);
  }

  double v36 = v39[1];
  operator delete(v39[0]);
  if (!v36) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v39);
    int v6 = sub_10000CF44(&v40, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 64))(v43, a1);
    if (v43[23] >= 0) {
      double v7 = v43;
    }
    else {
      double v7 = *(_BYTE **)v43;
    }
    if (v43[23] >= 0) {
      uint64_t v8 = v43[23];
    }
    else {
      uint64_t v8 = *(void *)&v43[8];
    }
    double v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((v43[23] & 0x80000000) != 0) {
      operator delete(*(void **)v43);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)v43, &v41);
    if (v43[23] >= 0) {
      uint64_t v11 = v43;
    }
    else {
      uint64_t v11 = *(char **)v43;
    }
    sub_1003C0D54(v10, v11, &v37);
    uint64_t v12 = v37;
    uint64_t v37 = 0LL;
    uint64_t v38 = v12;
    if ((v43[23] & 0x80000000) != 0) {
      operator delete(*(void **)v43);
    }
    sub_1003C0454(a1[10]);
    while (!sub_1001BA11C((uint64_t)a1, &v38, (uint64_t)v43))
    {
      double v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        uint64_t v19 = (v13 - *a2) >> 6;
        unint64_t v20 = v19 + 1;
        uint64_t v21 = v14 - (void)*a2;
        if (v21 >> 5 > v20) {
          unint64_t v20 = v21 >> 5;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          __int128 v23 = (char *)sub_10001275C((uint64_t)(a2 + 2), v22);
        }
        else {
          __int128 v23 = 0LL;
        }
        uint64_t v24 = &v23[64 * v19];
        __int128 v25 = *(_OWORD *)v43;
        __int128 v26 = *(_OWORD *)&v43[16];
        __int128 v27 = v45;
        *((_OWORD *)v24 + 2) = v44;
        *((_OWORD *)v24 + 3) = v27;
        *(_OWORD *)uint64_t v24 = v25;
        *((_OWORD *)v24 + 1) = v26;
        unint64_t v29 = *a2;
        double v28 = a2[1];
        uint64_t v30 = v24;
        if (v28 != *a2)
        {
          do
          {
            __int128 v31 = *((_OWORD *)v28 - 4);
            __int128 v32 = *((_OWORD *)v28 - 3);
            __int128 v33 = *((_OWORD *)v28 - 1);
            *((_OWORD *)v30 - 2) = *((_OWORD *)v28 - 2);
            *((_OWORD *)v30 - 1) = v33;
            *((_OWORD *)v30 - 4) = v31;
            *((_OWORD *)v30 - 3) = v32;
            v30 -= 64;
            v28 -= 64;
          }

          while (v28 != v29);
          double v28 = *a2;
        }

        double v18 = v24 + 64;
        *a2 = v30;
        a2[1] = v24 + 64;
        a2[2] = &v23[64 * v22];
        if (v28) {
          operator delete(v28);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)v43;
        __int128 v16 = *(_OWORD *)&v43[16];
        __int128 v17 = v45;
        *((_OWORD *)v13 + 2) = v44;
        *((_OWORD *)v13 + 3) = v17;
        *(_OWORD *)double v13 = v15;
        *((_OWORD *)v13 + 1) = v16;
        double v18 = v13 + 64;
      }

      a2[1] = v18;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v34 = v38;
    uint64_t v38 = 0LL;
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
    }
    *(void **)((char *)v39
    uint64_t v40 = v35;
    std::streambuf::~streambuf(&v41);
    return std::ios::~ios(&v42);
  }

  return result;
}

void sub_100CF8F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1011F8850((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF8FF4(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_10126B4F8(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  uint64_t v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 24)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100CF9254(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10126B664(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100CF948C(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10126B7D0(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  int v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100CF96B4(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100CF96E0(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100CF970C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  *(void *)a1 = &off_10187F0F8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = *a3;
  uint64_t v8 = (void *)(a1 + 16);
  uint64_t v9 = a3[1];
  *(void *)(a1 + 24) = v9;
  if (v9)
  {
    uint64_t v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  *(void *)(a1 + 32) = *a7;
  uint64_t v12 = a7[1];
  uint64_t v45 = a1 + 32;
  *(void *)(a1 + 40) = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  *(void *)(a1 + 48) = *a4;
  __int128 v15 = (void *)(a1 + 48);
  uint64_t v16 = a4[1];
  *(void *)(a1 + 56) = v16;
  if (v16)
  {
    uint64_t v17 = (unint64_t *)(v16 + 8);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  *(void *)(a1 + 64) = *a5;
  uint64_t v19 = a5[1];
  uint64_t v44 = a1 + 64;
  *(void *)(a1 + 72) = v19;
  if (v19)
  {
    uint64_t v20 = (unint64_t *)(v19 + 8);
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  *(void *)(a1 + 80) = *a6;
  uint64_t v22 = a6[1];
  *(void *)(a1 + 88) = v22;
  if (v22)
  {
    uint64_t v23 = (unint64_t *)(v22 + 8);
    do
      unint64_t v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }

  *(_WORD *)(a1 + 96) = 256;
  uint64_t v25 = (_BYTE *)(a1 + 96);
  *(void *)(a1 + 104) = qword_1019901E0;
  uint64_t v26 = (uint64_t *)(a1 + 104);
  *(_BYTE *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0xBFF0000000000000LL;
  *(_WORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 168) = 0xFFFF00000000LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 192) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 208) = _Q1;
  *(_OWORD *)(a1 + 224) = _Q1;
  *(_OWORD *)(a1 + 240) = _Q1;
  *(_DWORD *)(a1 + 256) = 0;
  *(void *)(a1 + 268) = 0LL;
  *(void *)(a1 + 276) = 0LL;
  *(void *)(a1 + 260) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 284) = 0;
  *(void *)(a1 + 288) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 296) = 0x7FFFFFFF;
  *(void *)(a1 + 308) = 0LL;
  *(void *)(a1 + 316) = 0LL;
  *(void *)(a1 + 300) = 0LL;
  *(_BYTE *)(a1 + 324) = 0;
  uint64_t v46 = a1 + 328;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 336) = 0LL;
  uint64_t v43 = a1 + 344;
  sub_100AD558C(a1 + 344, (uint64_t)"ProactiveHarvest", a1, 3600.0);
  __int128 v32 = (_BYTE *)(a1 + 97);
  uint64_t v33 = *v8;
  sub_1010DDBC0(&__p, "ProactiveTimer");
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472LL;
  v48[2] = sub_100CF9C84;
  v48[3] = &unk_10181D3D0;
  v48[4] = a1;
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **, void *, double, double))(*(void *)v33 + 88LL))( &v49,  v33,  &__p,  v48,  1.79769313e308,  1.79769313e308);
  sub_10005F550(v46, &v49);
  uint64_t v34 = (std::__shared_weak_count *)*((void *)&v49 + 1);
  if (*((void *)&v49 + 1))
  {
    uint64_t v35 = (unint64_t *)(*((void *)&v49 + 1) + 8LL);
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  if (SHIBYTE(v54) < 0) {
    operator delete(__p);
  }
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_10187F1C8);
  }
  uint64_t v37 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::string_type __p = (void *)68289026;
    __int16 v51 = 2082;
    __int128 v52 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#proactive battery level overwritten by network default}",  (uint8_t *)&__p,  0x12u);
LABEL_30:
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_10187F1C8);
    }
  }

  uint64_t v38 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    int v39 = *v32;
    uint64_t v40 = *v26;
    std::stringbuf::string_type __p = (void *)68289539;
    __int16 v51 = 2082;
    __int128 v52 = "";
    __int16 v53 = 1025;
    int v54 = v39;
    __int16 v55 = 2049;
    uint64_t v56 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#proactive policy constructor, isProactiveAllowed:%{private}hhd, proactiveBatteryLe vel:%{private}.02f}",  (uint8_t *)&__p,  0x22u);
  }

  *(void *)(a1 + 120) = qword_1019901D8;
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16), a1 + 160) & 1) == 0)
  {
    *(double *)(a1 + 160) = (*(double (**)(void))(*(void *)*v15 + 64LL))(*v15);
    (*(void (**)(void))(*(void *)*v8 + 80LL))(*v8);
  }

  sub_1004F2598();
  if (sub_1004F8A40())
  {
    std::stringbuf v41 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo", v43, v44, v45), "queue");
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_100CF9D74;
    handler[3] = &unk_101832780;
    handler[4] = a1;
    notify_register_dispatch("CLPolicyProactive.start", (int *)&__p, v41, handler);
  }

  return a1;
}

void sub_100CF9C18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_100AD5650(a9);
  sub_10000AE14(a12);
  sub_10000AE14(v32);
  sub_10000AE14(a10);
  sub_10000AE14(v31);
  sub_10000AE14(a11);
  sub_10000AE14(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF9C84(uint64_t a1)
{
  return sub_100CF9C8C(*(void *)(a1 + 32));
}

uint64_t sub_100CF9C8C(uint64_t a1)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_10187F1C8);
  }
  uint64_t v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#proactive timer fired}",  (uint8_t *)v4,  0x12u);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
}

void sub_100CF9D74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_10187F1C8);
  }
  uint64_t v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    __int16 v5 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#proactive CLPolicyProactive.start Darwin Notification}",  (uint8_t *)v3,  0x12u);
  }

  sub_100CF9E58(v1, 1);
}

void sub_100CF9E58(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 80) + 40LL))(*(void *)(a1 + 80)) & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40LL))(a1) != a2)
    {
      double v4 = (*(double (**)(void))(**(void **)(a1 + 48) + 64LL))(*(void *)(a1 + 48));
      double v5 = v4;
      if (a2)
      {
        if (*(_BYTE *)(a1 + 96)
          || v4 - *(double *)(a1 + 160) >= 3600.0
          || ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 128LL))(*(void *)(a1 + 48)) & 1) != 0)
        {
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_10187F1C8);
          }
          int v6 = (os_log_s *)qword_1019349B8;
          if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
          {
            double v7 = v5 - *(double *)(a1 + 160);
            int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 128LL))(*(void *)(a1 + 48));
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)uint64_t v45 = 0;
            *(_WORD *)&v45[4] = 2082;
            *(void *)&v45[6] = "";
            *(_WORD *)&v45[14] = 2049;
            *(double *)&v45[16] = v7;
            *(_WORD *)&v45[24] = 1025;
            *(_DWORD *)&v45[26] = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#proactive starting proactive, sinceLastProactiveSession_s:%{private}.09f , isDominantDriving:%{private}hhd}",  buf,  0x22u);
          }

          sub_1010DDBC0(__p, "proactiveHarvesting");
          sub_100AD5668(a1 + 344, (uint64_t *)__p);
          if (v37 < 0) {
            operator delete(__p[0]);
          }
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F1E8);
          }
          uint64_t v9 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#wigo,on,proactiveHarvest", buf, 2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F1E8);
            }
            LOWORD(v38) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,on,proactiveHarvest",  &v38,  2);
            uint64_t v30 = (uint8_t *)v29;
            sub_10029211C("Generic", 1LL, 0, 2LL, "void CLPolicyProactive::proactiveHarvesting(BOOL)", "%s\n", v29);
            if (v30 != buf) {
              free(v30);
            }
          }

          __n128 v10 = AnalyticsSendEventLazy(@"com.apple.locationd.position.GNSS.WIGO", &stru_10187F160);
          (*(void (**)(void, void, __n128))(**(void **)(a1 + 64) + 16LL))( *(void *)(a1 + 64),  0LL,  v10);
          *(double *)(a1 + 152) = v5;
          (*(void (**)(void, double))(**(void **)(a1 + 328) + 24LL))(*(void *)(a1 + 328), v5 + 180.0);
        }

        else
        {
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_10187F1C8);
          }
          uint64_t v25 = (os_log_s *)qword_1019349B8;
          if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
          {
            double v26 = *(double *)(a1 + 160);
            *(_DWORD *)buf = 134218496;
            *(double *)uint64_t v45 = v5 - v26;
            *(_WORD *)&v45[8] = 2048;
            *(double *)&v45[10] = v26 + 3600.0;
            *(_WORD *)&v45[18] = 2048;
            *(double *)&v45[20] = v26 + 3600.0 - v5;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "#proactive Last attempted proactive harvesting %.3fs ago - waiting until %.3fs (%.3fs away) before trying again",  buf,  0x20u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019349B0 != -1) {
              dispatch_once(&qword_1019349B0, &stru_10187F1C8);
            }
            double v31 = *(double *)(a1 + 160);
            int v38 = 134218496;
            double v39 = v5 - v31;
            __int16 v40 = 2048;
            double v41 = v31 + 3600.0;
            __int16 v42 = 2048;
            double v43 = v31 + 3600.0 - v5;
            LODWORD(v34) = 32;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "#proactive Last attempted proactive harvesting %.3fs ago - waiting until %.3fs (%.3fs away) before trying again",  COERCE_DOUBLE(&v38),  v34,  v35);
            uint64_t v33 = (uint8_t *)v32;
            sub_10029211C("Generic", 1LL, 0, 2LL, "void CLPolicyProactive::proactiveHarvesting(BOOL)", "%s\n", v32);
            if (v33 != buf) {
              free(v33);
            }
          }

          (*(void (**)(void, double))(**(void **)(a1 + 328) + 24LL))( *(void *)(a1 + 328),  *(double *)(a1 + 160) + 3600.0);
        }
      }

      else
      {
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_10187F1C8);
        }
        uint64_t v16 = (os_log_s *)qword_1019349B8;
        if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
        {
          double v17 = v5 - *(double *)(a1 + 152);
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)uint64_t v45 = 0;
          *(_WORD *)&v45[4] = 2082;
          *(void *)&v45[6] = "";
          *(_WORD *)&v45[14] = 2049;
          *(double *)&v45[16] = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#proactive stopping proactive harvest, proactiveHarvestDuration_s:%{private}.09f}",  buf,  0x1Cu);
        }

        sub_100AD5D38(a1 + 344);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F1E8);
        }
        unint64_t v18 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#wigo,off,proactiveHarvest", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F1E8);
          }
          LOWORD(v38) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,off,proactiveHarvest",  &v38,  2);
          double v28 = (uint8_t *)v27;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLPolicyProactive::proactiveHarvesting(BOOL)", "%s\n", v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        __n128 v19 = AnalyticsSendEventLazy(@"com.apple.locationd.position.GNSS.WIGO", &stru_10187F180);
        (*(void (**)(void, void, __n128))(**(void **)(a1 + 64) + 24LL))(*(void *)(a1 + 64), 0LL, v19);
        *(_DWORD *)(a1 + 172) = 0xFFFF;
        *(void *)(a1 + 152) = 0x7FEFFFFFFFFFFFFFLL;
        *(void *)(a1 + 184) = 0LL;
        *(void *)(a1 + 176) = 0LL;
        *(_OWORD *)(a1 + 192) = xmmword_1012E0070;
        __asm { FMOV            V0.2D, #-1.0 }

        *(_OWORD *)(a1 + 208) = _Q0;
        *(_OWORD *)(a1 + 224) = _Q0;
        *(_OWORD *)(a1 + 240) = _Q0;
        *(_DWORD *)(a1 + 256) = 0;
        *(void *)(a1 + 268) = 0LL;
        *(void *)(a1 + 276) = 0LL;
        *(void *)(a1 + 260) = 0xBFF0000000000000LL;
        *(_DWORD *)(a1 + 284) = 0;
        *(void *)(a1 + 288) = 0xBFF0000000000000LL;
        *(_DWORD *)(a1 + 296) = 0x7FFFFFFF;
        *(void *)(a1 + 308) = 0LL;
        *(void *)(a1 + 316) = 0LL;
        *(void *)(a1 + 300) = 0LL;
        *(_BYTE *)(a1 + 324) = 0;
        *(double *)(a1 + 160) = v5;
        (*(void (**)(void, double))(**(void **)(a1 + 16) + 80LL))(*(void *)(a1 + 16), v5);
        (*(void (**)(void, double))(**(void **)(a1 + 328) + 24LL))(*(void *)(a1 + 328), 1.79769313e308);
      }

      return;
    }

    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_10187F1C8);
    }
    uint64_t v15 = qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)uint64_t v45 = 0;
      *(_WORD *)&v45[4] = 2082;
      *(void *)&v45[6] = "";
      *(_WORD *)&v45[14] = 1025;
      *(_DWORD *)&v45[16] = a2;
      uint64_t v12 = "{msg%{public}.0s:#proactive taking no action, already in desired state: , start:%{private}hhd}";
      uint64_t v13 = (os_log_s *)v15;
      uint32_t v14 = 24;
      goto LABEL_27;
    }
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_10187F1C8);
    }
    uint64_t v11 = qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)uint64_t v45 = 0;
      *(_WORD *)&v45[4] = 2082;
      *(void *)&v45[6] = "";
      uint64_t v12 = "{msg%{public}.0s:#proactive taking no action, gps harvest not supported}";
      uint64_t v13 = (os_log_s *)v11;
      uint32_t v14 = 18;
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
    }
  }

void sub_100CFA70C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CFA734(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 328);
  if (v2)
  {
    uint64_t v3 = (void *)(a1 + 328);
    (*(void (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
    sub_1000F0D38(v3);
    __int128 v7 = 0uLL;
    sub_10005F550((uint64_t)v3, &v7);
    double v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1))
    {
      double v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
      do
        unint64_t v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_100CFA7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 104);
  if (sub_1002A82BC(a2, "ProactiveBatteryLevel", (void *)(a1 + 104)))
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_10187F1C8);
    }
    uint64_t v3 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *v2;
      v5[0] = 68289283;
      v5[1] = 0;
      __int16 v6 = 2082;
      __int128 v7 = "";
      __int16 v8 = 2049;
      uint64_t v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#proactive battery level overwritten by harvest rules, proactiveBatteryLevel:%{private}f}",  (uint8_t *)v5,  0x1Cu);
    }
  }

BOOL sub_100CFA8D8(uint64_t a1)
{
  return *(double *)(a1 + 152) != 1.79769313e308;
}

uint64_t sub_100CFA8F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t sub_100CFA8FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 97))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      __int16 v6 = (os_log_s *)qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
        goto LABEL_37;
      }
      int v10 = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int128 v7 = "{msg%{public}.0s:#proactive not allowed, prohibity by default write}";
      goto LABEL_36;
    }

    return 0LL;
  }

  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      __int16 v6 = (os_log_s *)qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
        goto LABEL_37;
      }
      int v10 = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int128 v7 = "{msg%{public}.0s:#proactive not allowed, 'Traffic' system service not authorized}";
      goto LABEL_36;
    }

    return 0LL;
  }

  if (!*(_BYTE *)(a1 + 144))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      __int16 v6 = (os_log_s *)qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
        goto LABEL_37;
      }
      int v10 = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int128 v7 = "{msg%{public}.0s:#proactive not allowed, battery criteria not met}";
      goto LABEL_36;
    }

    return 0LL;
  }

  if (((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104LL))(*(void *)(a1 + 16)) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      __int16 v6 = (os_log_s *)qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
        goto LABEL_37;
      }
      int v10 = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int128 v7 = "{msg%{public}.0s:#proactive not allowed, device is ineligible}";
      goto LABEL_36;
    }

    return 0LL;
  }

  double v2 = *(double *)(a1 + 120);
  double v3 = *(double *)&qword_1019901E8;
  if (v2 >= *(double *)(a1 + 104) && v2 < *(double *)&qword_1019901E8)
  {
    if (!(*(unsigned int (**)(void))(**(void **)(a1 + 32) + 40LL))(*(void *)(a1 + 32)))
    {
      if (*(_BYTE *)(a1 + 112))
      {
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_10187F1C8);
        }
        __int16 v6 = (os_log_s *)qword_1019349B8;
        if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
          goto LABEL_37;
        }
        int v10 = 68289026;
        int v11 = 0;
        __int16 v12 = 2082;
        uint64_t v13 = "";
        __int128 v7 = "{msg%{public}.0s:#proactive not allowed, high CPU thermal criteria not met}";
        goto LABEL_36;
      }

      return 0LL;
    }

    double v2 = *(double *)(a1 + 120);
    double v3 = *(double *)&qword_1019901E8;
  }

  if (v2 >= v3 && ((*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32LL))(*(void *)(a1 + 32)) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      __int16 v6 = (os_log_s *)qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
        goto LABEL_37;
      }
      int v10 = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int128 v7 = "{msg%{public}.0s:#proactive not allowed, low CPU thermal criteria not met}";
LABEL_36:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v10, 0x12u);
LABEL_37:
      uint64_t v5 = 0LL;
      *(_BYTE *)(a1 + 112) = 0;
      return v5;
    }

    return 0LL;
  }

  if (*(_BYTE *)(a1 + 112)) {
    return 1LL;
  }
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_10187F1C8);
  }
  __int16 v8 = (os_log_s *)qword_1019349B8;
  uint64_t v5 = 1LL;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
  {
    int v10 = 68289026;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#proactive now allowed}",  (uint8_t *)&v10,  0x12u);
  }

  *(_BYTE *)(a1 + 112) = 1;
  return v5;
}

uint64_t sub_100CFADA8(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 48) + 64LL))(*(void *)(a1 + 48));
  double v3 = v2 - *(double *)(a1 + 152);
  if (v3 < 0.0 || v3 >= 3240.0)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_10187F1C8);
    }
    uint64_t v4 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      double v16 = v3;
      __int16 v17 = 2048;
      uint64_t v18 = 0x40A9500000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "#proactive Extending proactive harvesting power assertion. Elapsed proactive time, %0.2f, minimum elapsed interval, %0.2f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      int v11 = 134218240;
      double v12 = v3;
      __int16 v13 = 2048;
      uint64_t v14 = 0x40A9500000000000LL;
      LODWORD(v8) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "#proactive Extending proactive harvesting power assertion. Elapsed proactive time, %0.2f, minimum elapsed interval, %0.2f",  COERCE_DOUBLE(&v11),  v8);
      __int128 v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLPolicyProactive::extendProactiveAttempt()", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    sub_100AD5D38(a1 + 344);
    sub_1010DDBC0(__p, "Extend");
    sub_100AD5668(a1 + 344, (uint64_t *)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(double *)(a1 + 152) = v2;
  }

  return (*(uint64_t (**)(void, double))(**(void **)(a1 + 328) + 24LL))(*(void *)(a1 + 328), v2 + 180.0);
}

void sub_100CFB020( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_100CFB044(id a1)
{
  return (NSDictionary *)&off_1018D6B48;
}

NSDictionary *__cdecl sub_100CFB050(id a1)
{
  return (NSDictionary *)&off_1018D6B70;
}

void sub_100CFB05C(uint64_t a1, int a2)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_10187F1C8);
  }
  uint64_t v4 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    double v8 = "";
    __int16 v9 = 1025;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#proactive setHarvesting , enabled:%{private}hhd}",  (uint8_t *)v6,  0x18u);
  }

  if (a2) {
    int v5 = sub_100CFA8FC(a1);
  }
  else {
    int v5 = 0;
  }
  sub_100CF9E58(a1, v5);
}

uint64_t sub_100CFB16C(uint64_t a1)
{
  return sub_100CFB1B4(a1);
}

uint64_t sub_100CFB1B4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16));
  if (*(_DWORD *)(a1 + 168) != (_DWORD)result)
  {
    *(_DWORD *)(a1 + 168) = result;
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_10187F1C8);
    }
    double v3 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v4 = *(_DWORD *)(a1 + 168) == 3;
      v5[0] = 68289283;
      v5[1] = 0;
      __int16 v6 = 2082;
      __int16 v7 = "";
      __int16 v8 = 1025;
      BOOL v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#proactive request #proactive authorization status, isAuthorized:%{private}hhd}",  (uint8_t *)v5,  0x18u);
    }

    return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40LL))(*(void *)(a1 + 48));
  }

  return result;
}

BOOL sub_100CFB2D4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 168) == 3;
}

uint64_t sub_100CFB2E4(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
  if ((_DWORD)result)
  {
    uint64_t result = sub_100CFADA8(a1);
    if (*(double *)(a1 + 192) < 0.0
      || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 104LL))(*(void *)(a1 + 80)),
          (_DWORD)result))
    {
      __int128 v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 172) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 188) = v5;
      __int128 v6 = *(_OWORD *)(a2 + 32);
      __int128 v7 = *(_OWORD *)(a2 + 48);
      __int128 v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 252) = v8;
      *(_OWORD *)(a1 + 204) = v6;
      *(_OWORD *)(a1 + 220) = v7;
      __int128 v9 = *(_OWORD *)(a2 + 96);
      __int128 v10 = *(_OWORD *)(a2 + 112);
      __int128 v11 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 284) = v10;
      *(_OWORD *)(a1 + 300) = v11;
      *(_OWORD *)(a1 + 268) = v9;
    }

    else if (*(double *)(a2 + 76) - *(double *)(a1 + 160) > 900.0)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      double v12 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 176);
        uint64_t v14 = *(void *)(a1 + 184);
        double v15 = *(double *)(a2 + 76) - *(double *)(a1 + 160);
        *(_DWORD *)buf = 134218496;
        uint64_t v31 = v13;
        __int16 v32 = 2048;
        uint64_t v33 = v14;
        __int16 v34 = 2048;
        double v35 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#proactive Did not achieve vehicular speed from <%+.8f,%+.8f> in %.3fs, turning off proactive harvesting",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_10187F1C8);
        }
        uint64_t v18 = *(void *)(a1 + 176);
        uint64_t v19 = *(void *)(a1 + 184);
        double v20 = *(double *)(a2 + 76) - *(double *)(a1 + 160);
        int v24 = 134218496;
        uint64_t v25 = v18;
        __int16 v26 = 2048;
        uint64_t v27 = v19;
        __int16 v28 = 2048;
        double v29 = v20;
        LODWORD(v23) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  0LL,  "#proactive Did not achieve vehicular speed from <%+.8f,%+.8f> in %.3fs, turning off proactive harvesting",  COERCE_DOUBLE(&v24),  v23);
        uint64_t v22 = (uint8_t *)v21;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLPolicyProactive::updatePolicyProactiveFromGps(const CLDaemonLocation &)",  "%s\n",  v21);
        if (v22 != buf) {
          free(v22);
        }
      }

      sub_100CF9E58(a1, 0);
      uint64_t v16 = *(void *)(a1 + 328);
      double v17 = (*(double (**)(void))(**(void **)(a1 + 48) + 64LL))(*(void *)(a1 + 48));
      return (*(uint64_t (**)(uint64_t, double))(*(void *)v16 + 24LL))(v16, v17 + 3600.0);
    }
  }

  return result;
}

uint64_t sub_100CFB5A0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 14) {
    return sub_100CFB1B4(a1);
  }
  return a1;
}

void sub_100CFB5B0(uint64_t a1, __int128 *a2)
{
  double v2 = (uint64_t *)(a1 + 120);
  double v3 = *(double *)(a1 + 120);
  __int128 v4 = *a2;
  *(void *)(a1 + 136) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 120) = v4;
  if (v3 != *(double *)&qword_1019901D8 || *(double *)a2 >= 100.0 || *((_BYTE *)a2 + 8) != 0)
  {
    int v8 = *(unsigned __int8 *)(a1 + 144);
    if (*(_BYTE *)(a1 + 129))
    {
      double v9 = *(double *)(a1 + 120);
      if (v9 >= *(double *)(a1 + 104))
      {
        if (v9 >= v3 || *(_BYTE *)(a1 + 128) != 0)
        {
          if (*(_BYTE *)(a1 + 144)) {
            return;
          }
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_10187F1C8);
          }
          uint64_t v16 = (os_log_s *)qword_1019349B8;
          if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "#proactive battery criteria achieved",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019349B0 != -1) {
              dispatch_once(&qword_1019349B0, &stru_10187F1C8);
            }
            v23[0] = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "#proactive battery criteria achieved",  v23,  2);
            uint64_t v22 = (uint8_t *)v21;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLPolicyProactive::updatePolicyFromBattery(const CLDaemonStatus_Type::Battery &)",  "%s\n",  v21);
            if (v22 != buf) {
              free(v22);
            }
          }

          int v17 = 1;
          goto LABEL_42;
        }

        if (*(_BYTE *)(a1 + 144))
        {
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_10187F1C8);
          }
          uint64_t v18 = (os_log_s *)qword_1019349B8;
          if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
          {
            uint64_t v19 = *v2;
            *(_DWORD *)buf = 134218240;
            *(double *)uint64_t v25 = v3;
            *(_WORD *)&v25[8] = 2048;
            *(void *)&v25[10] = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "#proactive battery criteria not achieved: battery level dropped: from,%.2f,to,%.2f",  buf,  0x16u);
          }

          if (!sub_1002921D0(115, 2)) {
            goto LABEL_41;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_10187F1C8);
          }
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "#proactive battery criteria not achieved: battery level dropped: from,%.2f,to,%.2f");
          goto LABEL_50;
        }
      }

      else if (*(_BYTE *)(a1 + 144))
      {
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_10187F1C8);
        }
        __int128 v10 = (os_log_s *)qword_1019349B8;
        if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = *(void *)(a1 + 120);
          uint64_t v12 = *(void *)(a1 + 104);
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v25 = v11;
          *(_WORD *)&v25[8] = 2048;
          *(void *)&v25[10] = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "#proactive battery criteria not achieved: battery level too low:required,%.2f,achieved,%.2f",  buf,  0x16u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_41;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_10187F1C8);
        }
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "#proactive battery criteria not achieved: battery level too low:required,%.2f,achieved,%.2f");
LABEL_50:
        double v20 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLPolicyProactive::updatePolicyFromBattery(const CLDaemonStatus_Type::Battery &)",  "%s\n",  v13);
        if (v20 != buf) {
          free(v20);
        }
LABEL_41:
        int v17 = 0;
LABEL_42:
        *(_BYTE *)(a1 + 144) = v17;
        goto LABEL_44;
      }
    }

    else if (*(_BYTE *)(a1 + 144))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      uint64_t v14 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)uint64_t v25 = 0;
        *(_WORD *)&v25[4] = 2082;
        *(void *)&v25[6] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#proactive battery criteria not achieved: battery disconnected}",  buf,  0x12u);
      }

      goto LABEL_41;
    }

    int v17 = 0;
LABEL_44:
    if (v17 != v8)
    {
      sub_100CFA8FC(a1);
      sub_100CF9E58(a1, *(unsigned __int8 *)(a1 + 112));
    }
  }

void sub_100CFBB08(void **a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1[10] + 56LL))(a1[10]);
  if (((unsigned int (*)(void **))(*a1)[5])(a1))
  {
    double v3 = (*(double (**)(void *))(*a1[6] + 64LL))(a1[6]);
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_10187F1C8);
    }
    __int128 v4 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(v2 + 4);
      uint64_t v6 = *(void *)(v2 + 12);
      double v7 = v3 - *(double *)(v2 + 76);
      *(_DWORD *)buf = 134218496;
      uint64_t v24 = v5;
      __int16 v25 = 2048;
      uint64_t v26 = v6;
      __int16 v27 = 2048;
      double v28 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#proactive GPS timed out (last location <%+.8f,%+.8f> from %.3fs ago), turning off proactive harvesting",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      uint64_t v9 = *(void *)(v2 + 4);
      uint64_t v10 = *(void *)(v2 + 12);
      double v11 = v3 - *(double *)(v2 + 76);
      int v17 = 134218496;
      uint64_t v18 = v9;
      __int16 v19 = 2048;
      uint64_t v20 = v10;
      __int16 v21 = 2048;
      double v22 = v11;
      LODWORD(v16) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  0LL,  "#proactive GPS timed out (last location <%+.8f,%+.8f> from %.3fs ago), turning off proactive harvesting",  COERCE_DOUBLE(&v17),  v16);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLPolicyProactive::updatePolicyFromTrafficTimer()",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    sub_100CF9E58((uint64_t)a1, 0);
    (*(void (**)(void *, double))(*a1[41] + 24LL))(a1[41], v3 + 3600.0);
  }

  else if ((sub_100CFA8FC((uint64_t)a1) & 1) != 0)
  {
    sub_100CF9E58((uint64_t)a1, 1);
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_10187F1C8);
    }
    int v8 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#proactive Proactive harvesting is not allowed, ignoring, onProactiveTimer",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
      LOWORD(v17) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  0LL,  "#proactive Proactive harvesting is not allowed, ignoring, onProactiveTimer",  &v17,  2);
      double v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLPolicyProactive::updatePolicyFromTrafficTimer()",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }
  }

void *sub_100CFBEE0(void *a1)
{
  *a1 = &off_10187F0F8;
  uint64_t v2 = (uint64_t)(a1 + 2);
  sub_100AD5650(a1 + 43);
  sub_10000AE14((uint64_t)(a1 + 41));
  sub_10000AE14((uint64_t)(a1 + 10));
  sub_10000AE14((uint64_t)(a1 + 8));
  sub_10000AE14((uint64_t)(a1 + 6));
  sub_10000AE14((uint64_t)(a1 + 4));
  sub_10000AE14(v2);
  return a1;
}

void sub_100CFBF48(void *a1)
{
  *a1 = &off_10187F0F8;
  uint64_t v2 = (uint64_t)(a1 + 2);
  sub_100AD5650(a1 + 43);
  sub_10000AE14((uint64_t)(a1 + 41));
  sub_10000AE14((uint64_t)(a1 + 10));
  sub_10000AE14((uint64_t)(a1 + 8));
  sub_10000AE14((uint64_t)(a1 + 6));
  sub_10000AE14((uint64_t)(a1 + 4));
  sub_10000AE14(v2);
  operator delete(a1);
}

void sub_100CFBFB0(id a1)
{
  qword_1019349B8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100CFBFDC(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

std::string *sub_100CFC008@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t result = (std::string *)sub_1010DDBC0(a2, "invalid");
  if (a1 < 4) {
    return std::string::assign(a2, off_10187F288[a1]);
  }
  return result;
}

void sub_100CFC054(_Unwind_Exception *exception_object)
{
}

std::string *sub_100CFC070@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t result = (std::string *)sub_1010DDBC0(a2, "invalid");
  if (a1 < 3) {
    return std::string::assign(a2, off_10187F2A8[(char)a1]);
  }
  return result;
}

void sub_100CFC0C0(_Unwind_Exception *exception_object)
{
}

std::string *sub_100CFC0DC@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t result = (std::string *)sub_1010DDBC0(a2, "invalid");
  if (a1 == 1)
  {
    uint64_t v5 = "stepBout";
  }

  else
  {
    if (a1) {
      return result;
    }
    uint64_t v5 = "gaitBout";
  }

  return std::string::assign(a2, v5);
}

void sub_100CFC134(_Unwind_Exception *exception_object)
{
}

double sub_100CFC150(double a1)
{
  return floor(a1 / 86400.0) * 86400.0;
}

double sub_100CFC168(double **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = (char *)v1 - (char *)*a1;
  double v5 = (double)(unint64_t)(v3 >> 3);
  if (v2 == v1)
  {
    double v9 = 0.0;
  }

  else
  {
    double v6 = 0.0;
    double v7 = *a1;
    do
    {
      double v8 = *v7++;
      double v6 = v6 + v8;
    }

    while (v7 != v1);
    double v9 = 0.0;
    double v10 = v6 / v5;
    do
    {
      double v11 = *v2++;
      double v9 = v9 + (v11 - v10) * (v11 - v10);
    }

    while (v2 != v1);
  }

  return sqrt(v9 / (v5 + -1.0));
}

double sub_100CFC1E4(double **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 0.0;
  }
  double v3 = 0.0;
  do
  {
    double v4 = *v2++;
    double v3 = v3 + v4;
  }

  while (v2 != v1);
  return v3 / (double)(unint64_t)(v1 - *a1);
}

double sub_100CFC21C(double **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = (char *)v1 - (char *)*a1;
  double v5 = (double)(unint64_t)(v3 >> 3);
  if (v2 == v1)
  {
    double v10 = 0.0;
    double v9 = 0.0 / v5;
    if (0.0 / v5 != 0.0) {
      return sqrt(v10 / (v5 + -1.0)) / v9;
    }
  }

  else
  {
    double v6 = 0.0;
    double v7 = *a1;
    do
    {
      double v8 = *v7++;
      double v6 = v6 + v8;
    }

    while (v7 != v1);
    double v9 = v6 / v5;
    if (v9 != 0.0)
    {
      double v10 = 0.0;
      do
      {
        double v11 = *v2++;
        double v10 = v10 + (v11 - v9) * (v11 - v9);
      }

      while (v2 != v1);
      return sqrt(v10 / (v5 + -1.0)) / v9;
    }
  }

  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10187F228);
  }
  uint64_t v12 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "#warning: zero-mean coefficient of variance",  buf,  2u);
  }

  double v4 = 0.0;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10187F228);
    }
    v16[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "#warning: zero-mean coefficient of variance",  v16,  2);
    uint64_t v14 = (uint8_t *)v13;
    sub_10029211C("Generic", 1LL, 0, 2LL, "double CLMobility::calculateCV(const std::vector<double> &)", "%s\n", v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  return v4;
}

double sub_100CFC440(uint64_t *a1)
{
  if (a1[1] == *a1) {
    return -INFINITY;
  }
  std::__sort<std::__less<double,double> &,double *>();
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = (v3 >> 3) - 1;
  if ((v3 & 8) != 0) {
    return *(double *)(v2 + ((4 * v4) & 0xFFFFFFFFFFFFFFF8LL));
  }
  else {
    return (*(double *)(v2 + 8LL * (int)vcvtpd_s64_f64((double)(unint64_t)v4 * 0.5))
  }
}

uint64_t sub_100CFC4CC(uint64_t a1, unsigned int a2, double a3)
{
  float v5 = *(float *)(a1 + 8);
  float v6 = sub_10069F9D0(v5);
  double v7 = 10.0;
  double v8 = 60.0;
  switch(a2)
  {
    case 0u:
      double v8 = v6;
      double v7 = 0.2;
      goto LABEL_5;
    case 1u:
      goto LABEL_5;
    case 2u:
      double v8 = ((float)(v5 * 0.55) + (float)(v5 * 0.55)) * 0.745476;
      double v7 = 0.0923076889;
      goto LABEL_5;
    case 3u:
      double v7 = 0.0;
      double v8 = 100.0;
LABEL_5:
      sub_100CFC008(a2, &__p);
      if (v8 < a3)
      {
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10187F268);
        }
        double v9 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136446467;
          double v29 = p_p;
          __int16 v30 = 2049;
          double v31 = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "BoutExtractor: Boutwise %{public}s above limit, ignoring (%{private}.3f)",  buf,  0x16u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_26;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10187F268);
        }
        double v11 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          double v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v23 = 136446467;
        uint64_t v24 = v11;
        __int16 v25 = 2049;
        double v26 = a3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  1LL,  "BoutExtractor: Boutwise %{public}s above limit, ignoring (%{private}.3f)",  &v23,  22);
        uint64_t v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMobility::isMeasurementInRange(CLBodyMetrics, double, QuantityTypeIdentifier)",  "%s\n",  v12);
LABEL_46:
        if (v13 != buf) {
          free(v13);
        }
LABEL_26:
        uint64_t v16 = 0LL;
        goto LABEL_34;
      }

      if (v7 > a3)
      {
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10187F268);
        }
        uint64_t v14 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
        {
          double v15 = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            double v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136446467;
          double v29 = v15;
          __int16 v30 = 2049;
          double v31 = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "BoutExtractor: Boutwise %{public}s below limit, ignoring (%{private}.3f)",  buf,  0x16u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_26;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10187F268);
        }
        __int16 v21 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          __int16 v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v23 = 136446467;
        uint64_t v24 = v21;
        __int16 v25 = 2049;
        double v26 = a3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  1LL,  "BoutExtractor: Boutwise %{public}s below limit, ignoring (%{private}.3f)",  &v23,  22);
        uint64_t v13 = (uint8_t *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMobility::isMeasurementInRange(CLBodyMetrics, double, QuantityTypeIdentifier)",  "%s\n",  v22);
        goto LABEL_46;
      }

      uint64_t v16 = 1LL;
LABEL_34:
      return v16;
    default:
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10187F268);
      }
      int v17 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v29) = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "BoutExtractor: Unexpected type %d, cannot determine ranges",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10187F268);
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = a2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  16LL,  "BoutExtractor: Unexpected type %d, cannot determine ranges",  &__p);
        uint64_t v20 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMobility::isMeasurementInRange(CLBodyMetrics, double, QuantityTypeIdentifier)",  "%s\n",  v19);
        if (v20 != buf) {
          free(v20);
        }
      }

      return 0LL;
  }

void sub_100CFCA50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CFCA8C(id a1)
{
  qword_101934488 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100CFCAB8(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void *sub_100CFCAE4(void *result)
{
  std::string *result = &off_10187F2D0;
  return result;
}

uint64_t sub_100CFCAFC()
{
  return sub_1001B9A1C();
}

uint64_t sub_100CFCB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(a4 + 80) = a5;
  *(_BYTE *)(a4 + 81) = 1;
  return sub_100C0DB80(a2, a3, a4);
}

unint64_t sub_100CFCB2C(void *a1, uint64_t *a2)
{
  __int16 v32 = 0LL;
  uint64_t v33 = 0LL;
  unint64_t v34 = 0LL;
  double v29 = 0LL;
  __int16 v30 = 0LL;
  double v31 = 0LL;
  double v26 = 0LL;
  unint64_t v27 = 0LL;
  unint64_t v28 = 0LL;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      double v5 = sub_1006083C4(v3, &Current);
      float v6 = (uint64_t *)sub_100F4BF44();
      if (v5 <= sub_100F4CB14(v6))
      {
        double v7 = *(double *)(v3 + 32);
        if (v7 <= *((double *)sub_100F4BF44() + 6))
        {
          unint64_t v8 = v27;
          if (v27 >= v28)
          {
            uint64_t v9 = sub_100828CFC((uint64_t *)&v26, v3);
          }

          else
          {
            sub_100607A34(v27, v3);
            uint64_t v9 = v8 + 112;
          }

          unint64_t v27 = v9;
        }
      }

      v3 += 112LL;
    }

    while (v3 != v4);
    double v10 = (void **)v26;
    double v11 = (void **)v27;
    while (v10 != v11)
    {
      if ((unint64_t)v10[8] > 1)
      {
        uint64_t v14 = v30;
        if (v30 >= v31)
        {
          double v15 = (void **)sub_100828CFC((uint64_t *)&v29, (uint64_t)v10);
        }

        else
        {
          sub_100607A34(v30, v10);
          double v15 = v14 + 14;
        }

        __int16 v30 = v15;
      }

      else
      {
        unint64_t v12 = (unint64_t)v33;
        if ((unint64_t)v33 >= v34)
        {
          uint64_t v13 = sub_100828CFC((uint64_t *)&v32, (uint64_t)v10);
        }

        else
        {
          sub_100607A34(v33, v10);
          uint64_t v13 = v12 + 112;
        }

        uint64_t v33 = (CFAbsoluteTime *)v13;
      }

      v10 += 14;
    }
  }

  unint64_t v16 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7LL * (((char *)v33 - (char *)v32) >> 4));
  double v35 = sub_100CFCE24;
  if (v33 == v32) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = v16;
  }
  sub_100CFCE38((uint64_t)v32, (unint64_t)v33, (uint64_t (**)(uint64_t, uint64_t))&v35, v17, 1);
  unint64_t v18 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7LL * (((char *)v30 - (char *)v29) >> 4));
  double v35 = sub_100CFCE24;
  if (v30 == v29) {
    uint64_t v19 = 0LL;
  }
  else {
    uint64_t v19 = v18;
  }
  sub_100CFCE38((uint64_t)v29, (unint64_t)v30, (uint64_t (**)(uint64_t, uint64_t))&v35, v19, 1);
  uint64_t v20 = v32;
  unint64_t v21 = (unint64_t)v33;
  while (v20 != (CFAbsoluteTime *)v21)
  {
    CFAbsoluteTime Current = *v20;
    if (sub_1005CE368(a1, &Current))
    {
LABEL_35:
      CFAbsoluteTime v23 = *v20;
      unint64_t v24 = *(void *)&v23 & 0xFFFFFFFFFFFFFF00LL;
      goto LABEL_37;
    }

    v20 += 14;
  }

  uint64_t v20 = (CFAbsoluteTime *)v29;
  double v22 = v30;
  while (v20 != (CFAbsoluteTime *)v22)
  {
    CFAbsoluteTime Current = *v20;
    if (sub_1005CE368(a1, &Current)) {
      goto LABEL_35;
    }
    v20 += 14;
  }

  LOBYTE(v23) = 0;
  unint64_t v24 = 0LL;
LABEL_37:
  CFAbsoluteTime Current = COERCE_DOUBLE(&v26);
  sub_10068CDBC((void ***)&Current);
  double v26 = &v29;
  sub_10068CDBC((void ***)&v26);
  double v29 = (void **)&v32;
  sub_10068CDBC(&v29);
  return v24 | LOBYTE(v23);
}

void sub_100CFCDB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  *(void *)(v16 - 56) = &a10;
  sub_10068CDBC((void ***)(v16 - 56));
  *(void *)(v16 - 56) = &a13;
  sub_10068CDBC((void ***)(v16 - 56));
  a13 = (void **)&a16;
  sub_10068CDBC(&a13);
  _Unwind_Resume(a1);
}

BOOL sub_100CFCE24(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 56) > *(double *)(a2 + 56);
}

uint64_t sub_100CFCE38( uint64_t result, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  unint64_t v7 = a2;
  uint64_t v8 = result;
  unint64_t v23 = a2;
  unint64_t v24 = result;
  while (2)
  {
    uint64_t v9 = 1 - a4;
LABEL_3:
    uint64_t v10 = v7 - v8;
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v7 - v8) >> 4);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        unint64_t v21 = *a3;
        unint64_t v23 = v7 - 112;
        uint64_t result = ((uint64_t (*)(void))v21)();
        if ((_DWORD)result) {
          return sub_100CFD128((uint64_t *)&v24, (uint64_t *)&v23);
        }
        return result;
      case 3uLL:
        unint64_t v23 = v7 - 112;
        return sub_100CFD33C(v8, v8 + 112, v7 - 112, a3);
      case 4uLL:
        unint64_t v23 = v7 - 112;
        return sub_100CFD908(v8, v8 + 112, v8 + 224, v7 - 112, a3);
      case 5uLL:
        unint64_t v23 = v7 - 112;
        return sub_100CFD9BC(v8, v8 + 112, v8 + 224, v8 + 336, v7 - 112, a3);
      default:
        if (v10 <= 2687)
        {
          if ((a5 & 1) != 0) {
            return sub_100CFD17C(v8, v7, a3);
          }
          else {
            return sub_100CFD274(v8, v7, a3);
          }
        }

        if (v9 == 1)
        {
          if (v8 != v7) {
            return sub_100CFDA98(v8, v7, v7, a3);
          }
          return result;
        }

        unint64_t v12 = v11 >> 1;
        uint64_t v13 = v7 - 112;
        if ((unint64_t)v10 < 0x3801)
        {
          sub_100CFD33C(v8 + 112 * (v11 >> 1), v8, v13, a3);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            unint64_t v7 = v23;
            goto LABEL_12;
          }
        }

        else
        {
          sub_100CFD33C(v8, v8 + 112 * (v11 >> 1), v13, a3);
          uint64_t v14 = 112 * v12;
          uint64_t v15 = 112 * v12 - 112;
          unint64_t v16 = v23;
          sub_100CFD33C(v24 + 112, v24 + v15, v23 - 224, a3);
          sub_100CFD33C(v24 + 224, v24 + v14 + 112, v16 - 336, a3);
          sub_100CFD33C(v24 + v15, v24 + v14, v24 + v14 + 112, a3);
          unint64_t v22 = v24 + v14;
          sub_100CFD128((uint64_t *)&v24, (uint64_t *)&v22);
          if ((a5 & 1) != 0) {
            goto LABEL_11;
          }
        }

        char v17 = ((uint64_t (*)(unint64_t))*a3)(v24 - 112);
        unint64_t v7 = v23;
        if ((v17 & 1) == 0)
        {
          uint64_t result = sub_100CFD414(v24, v23, (unsigned int (**)(_BYTE *))a3);
          uint64_t v8 = result;
          goto LABEL_20;
        }

uint64_t sub_100CFD128(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  sub_100607B74(v5, *a1);
  sub_100607B78(v2, v3);
  sub_100607B78(v3, (uint64_t)v5);
  return sub_100607C80(v5);
}

uint64_t sub_100CFD17C(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 112;
    if (result + 112 != a2)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = result;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = v5;
        uint64_t result = (*a3)(v5, v9);
        if ((_DWORD)result)
        {
          sub_100607B74(v13, v8);
          uint64_t v10 = v7;
          while (1)
          {
            sub_100607B78(v4 + v10 + 112, v4 + v10);
            if (!v10) {
              break;
            }
            char v11 = (*a3)((uint64_t)v13, v4 + v10 - 112);
            v10 -= 112LL;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = v4 + v10 + 112;
              goto LABEL_10;
            }
          }

          uint64_t v12 = v4;
LABEL_10:
          sub_100607B78(v12, (uint64_t)v13);
          uint64_t result = sub_100607C80(v13);
        }

        uint64_t v5 = v8 + 112;
        v7 += 112LL;
      }

      while (v8 + 112 != a2);
    }
  }

  return result;
}

void sub_100CFD260( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100CFD274(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 112;
    if (result + 112 != a2)
    {
      do
      {
        uint64_t v7 = v5;
        uint64_t result = (*a3)(v5, v4);
        if ((_DWORD)result)
        {
          sub_100607B74(v8, v7);
          do
          {
            sub_100607B78(v4 + 112, v4);
            v4 -= 112LL;
          }

          while (((*a3)((uint64_t)v8, v4) & 1) != 0);
          sub_100607B78(v4 + 112, (uint64_t)v8);
          uint64_t result = sub_100607C80(v8);
        }

        uint64_t v5 = v7 + 112;
        uint64_t v4 = v7;
      }

      while (v7 + 112 != a2);
    }
  }

  return result;
}

void sub_100CFD328( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100CFD33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  uint64_t v11 = a3;
  char v7 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v7 & 1) == 0)
  {
    if (!(_DWORD)result) {
      return result;
    }
    sub_100CFD128(&v12, &v11);
    uint64_t v9 = &v13;
    uint64_t v10 = &v12;
    goto LABEL_9;
  }

  if (!(_DWORD)result)
  {
    sub_100CFD128(&v13, &v12);
    uint64_t v9 = &v12;
    uint64_t v10 = &v11;
LABEL_9:
    sub_100CFD128(v9, v10);
    return 2LL;
  }

  sub_100CFD128(&v13, &v11);
  return 1LL;
}

unint64_t sub_100CFD414(uint64_t a1, unint64_t a2, unsigned int (**a3)(_BYTE *))
{
  unint64_t v13 = a2;
  unint64_t v14 = a1;
  sub_100607B74(v12, a1);
  if ((((uint64_t (*)(_BYTE *, unint64_t))*a3)(v12, a2 - 112) & 1) != 0)
  {
    unint64_t v6 = a1;
    do
    {
      v6 += 112LL;
      unint64_t v14 = v6;
    }

    while ((((uint64_t (*)(_BYTE *, unint64_t))*a3)(v12, v6) & 1) == 0);
  }

  else
  {
    unint64_t v7 = a1 + 112;
    do
    {
      unint64_t v6 = v7;
      unint64_t v14 = v7;
      if (v7 >= v13) {
        break;
      }
      int v8 = ((uint64_t (*)(_BYTE *, unint64_t))*a3)(v12, v7);
      unint64_t v7 = v6 + 112;
    }

    while (!v8);
  }

  unint64_t v9 = v13;
  if (v6 < v13)
  {
    do
    {
      v9 -= 112LL;
      unint64_t v13 = v9;
    }

    while ((((uint64_t (*)(_BYTE *, unint64_t))*a3)(v12, v9) & 1) != 0);
    unint64_t v6 = v14;
  }

  if (v6 < v9)
  {
    do
    {
      sub_100CFD128((uint64_t *)&v14, (uint64_t *)&v13);
      do
        v14 += 112LL;
      while (!(*a3)(v12));
      do
        v13 -= 112LL;
      while ((((uint64_t (*)(_BYTE *))*a3)(v12) & 1) != 0);
      unint64_t v6 = v14;
    }

    while (v14 < v13);
  }

  if (v6 - 112 != a1) {
    sub_100607B78(a1, v6 - 112);
  }
  sub_100607B78(v6 - 112, (uint64_t)v12);
  unint64_t v10 = v14;
  sub_100607C80(v12);
  return v10;
}

void sub_100CFD578( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100CFD5A0(uint64_t a1, unint64_t a2, uint64_t (**a3)(void))
{
  unint64_t v15 = a2;
  sub_100607B74(v14, a1);
  uint64_t v5 = 0LL;
  do
  {
    unint64_t v16 = a1 + v5 + 112;
    v5 += 112LL;
  }

  while (((*a3)() & 1) != 0);
  unint64_t v6 = v15;
  if (v5 == 112)
  {
    unint64_t v9 = a1 + 112;
    do
    {
      if (v9 >= v6) {
        break;
      }
      unint64_t v10 = *a3;
      v6 -= 112LL;
      unint64_t v15 = v6;
    }

    while ((((uint64_t (*)(unint64_t, _BYTE *))v10)(v6, v14) & 1) == 0);
  }

  else
  {
    unint64_t v7 = v15 - 112;
    do
    {
      unint64_t v15 = v7;
      int v8 = ((uint64_t (*)(unint64_t, _BYTE *))*a3)(v7, v14);
      v7 -= 112LL;
    }

    while (!v8);
    unint64_t v9 = v16;
  }

  unint64_t v11 = v9;
  if (v9 < v15)
  {
    do
    {
      sub_100CFD128((uint64_t *)&v16, (uint64_t *)&v15);
      do
        v16 += 112LL;
      while (((*a3)() & 1) != 0);
      do
        v15 -= 112LL;
      while (!(*a3)());
      unint64_t v11 = v16;
    }

    while (v16 < v15);
  }

  uint64_t v12 = v11 - 112;
  if (v11 - 112 != a1) {
    sub_100607B78(a1, v11 - 112);
  }
  sub_100607B78(v12, (uint64_t)v14);
  sub_100607C80(v14);
  return v12;
}

void sub_100CFD6FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100CFD720(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v14 = a2;
  uint64_t v15 = a1;
  BOOL v6 = 1LL;
  switch(0x6DB6DB6DB6DB6DB7LL * ((a2 - a1) >> 4))
  {
    case 0LL:
    case 1LL:
      return v6;
    case 2LL:
      unint64_t v7 = *a3;
      uint64_t v14 = a2 - 112;
      return v6;
    case 3LL:
      sub_100CFD33C(a1, a1 + 112, a2 - 112, a3);
      return v6;
    case 4LL:
      sub_100CFD908(a1, a1 + 112, a1 + 224, a2 - 112, a3);
      return v6;
    case 5LL:
      sub_100CFD9BC(a1, a1 + 112, a1 + 224, a1 + 336, a2 - 112, a3);
      return v6;
    default:
      uint64_t v8 = a1 + 224;
      sub_100CFD33C(a1, a1 + 112, a1 + 224, a3);
      uint64_t v9 = a1 + 336;
      if (v9 == a2) {
        return 1LL;
      }
      int v10 = 0;
      break;
  }

  while (!(*a3)(v9, v8))
  {
LABEL_12:
    uint64_t v8 = v9;
    v9 += 112LL;
    if (v9 == v14) {
      return 1LL;
    }
  }

  sub_100607B74(v13, v9);
  do
  {
    uint64_t v11 = v8;
    sub_100607B78(v8 + 112, v8);
    if (v8 == v15) {
      break;
    }
    v8 -= 112LL;
  }

  while (((*a3)((uint64_t)v13, v11 - 112) & 1) != 0);
  sub_100607B78(v11, (uint64_t)v13);
  if (++v10 != 8)
  {
    sub_100607C80(v13);
    goto LABEL_12;
  }

  BOOL v6 = v9 + 112 == v14;
  sub_100607C80(v13);
  return v6;
}

void sub_100CFD8F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100CFD908( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  uint64_t v13 = a2;
  uint64_t v14 = a1;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  sub_100CFD33C(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    sub_100CFD128(&v12, &v11);
    uint64_t result = (*a5)(v12, a2);
    if ((_DWORD)result)
    {
      sub_100CFD128(&v13, &v12);
      uint64_t result = (*a5)(v13, a1);
      if ((_DWORD)result) {
        return sub_100CFD128(&v14, &v13);
      }
    }
  }

  return result;
}

uint64_t sub_100CFD9BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t v16 = a2;
  uint64_t v17 = a1;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v13 = a5;
  sub_100CFD908(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    sub_100CFD128(&v14, &v13);
    uint64_t result = (*a6)(v14, a3);
    if ((_DWORD)result)
    {
      sub_100CFD128(&v15, &v14);
      uint64_t result = (*a6)(v15, a2);
      if ((_DWORD)result)
      {
        sub_100CFD128(&v16, &v15);
        uint64_t result = (*a6)(v16, a1);
        if ((_DWORD)result) {
          return sub_100CFD128(&v17, &v16);
        }
      }
    }
  }

  return result;
}

uint64_t sub_100CFDA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = (a2 - a1) / 112;
    if (a2 - a1 >= 113)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = a1 + 112 * v9;
      do
      {
        sub_100CFDBB8(v7, a4, v8, v11);
        v11 -= 112LL;
        --v10;
      }

      while (v10);
    }

    uint64_t v14 = a2;
    if (a2 != a3)
    {
      uint64_t v12 = a2;
      do
      {
        if ((*a4)(v12, v15))
        {
          sub_100CFD128(&v14, &v15);
          sub_100CFDBB8(v15, a4, v8, v15);
        }

        uint64_t v12 = v14 + 112;
        uint64_t v14 = v12;
      }

      while (v12 != a3);
      uint64_t v7 = v15;
    }

    sub_100CFDD38(v7, a2, (unsigned int (**)(uint64_t, uint64_t))a4);
    return v14;
  }

  return a3;
}

uint64_t sub_100CFDBB8(uint64_t result, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7LL * ((a4 - result) >> 4))
    {
      int64_t v10 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - result) >> 4)) | 1;
      uint64_t v11 = result + 112 * v10;
      int64_t v12 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - result) >> 4) + 2;
      if (v12 < a3 && (*a2)(result + 112 * v10, v11 + 112))
      {
        v11 += 112LL;
        int64_t v10 = v12;
      }

      uint64_t result = (*a2)(v11, v5);
      if ((result & 1) == 0)
      {
        sub_100607B74(v15, v5);
        do
        {
          uint64_t v13 = v11;
          sub_100607B78(v5, v11);
          if (v7 < v10) {
            break;
          }
          uint64_t v14 = (2 * v10) | 1;
          uint64_t v11 = v6 + 112 * v14;
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v14;
          }

          else if ((*a2)(v6 + 112 * v14, v11 + 112))
          {
            v11 += 112LL;
          }

          else
          {
            int64_t v10 = v14;
          }

          uint64_t v5 = v13;
        }

        while (!(*a2)(v11, (uint64_t)v15));
        sub_100607B78(v13, (uint64_t)v15);
        return sub_100607C80(v15);
      }
    }
  }

  return result;
}

void sub_100CFDD24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100CFDD38(uint64_t result, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t))
{
  if (a2 - result >= 113)
  {
    uint64_t v4 = result;
    uint64_t v5 = (((unint64_t)(a2 - result) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    uint64_t v6 = a2 - 112;
    do
    {
      sub_100607B74(v10, v4);
      uint64_t v7 = sub_100CFDE48(v4, a3, v5);
      uint64_t v8 = v7;
      if (v6 == v7)
      {
        sub_100607B78(v7, (uint64_t)v10);
      }

      else
      {
        sub_100607B78(v7, v6);
        sub_100607B78(v6, (uint64_t)v10);
        sub_100CFDF04( v4,  v8 + 112,  (uint64_t (**)(uint64_t, uint64_t))a3,  0x6DB6DB6DB6DB6DB7LL * ((v8 + 112 - v4) >> 4));
      }

      uint64_t result = sub_100607C80(v10);
      v6 -= 112LL;
    }

    while (v5-- > 2);
  }

  return result;
}

void sub_100CFDE34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100CFDE48(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 112 * v6 + 112;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 112 * v6 + 112, a1 + 112 * v6 + 224))
    {
      v9 += 112LL;
      uint64_t v10 = v11;
    }

    sub_100607B78(a1, v9);
    a1 = v9;
    uint64_t v6 = v10;
  }

  while (v10 <= v8);
  return v9;
}

uint64_t sub_100CFDF04(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = result + 112 * (v4 >> 1);
    uint64_t v9 = a2 - 112;
    uint64_t result = (*a3)(v8, a2 - 112);
    if ((_DWORD)result)
    {
      sub_100607B74(v11, v9);
      do
      {
        uint64_t v10 = v8;
        sub_100607B78(v9, v8);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = v6 + 112 * v7;
        uint64_t v9 = v10;
      }

      while (((*a3)(v8, (uint64_t)v11) & 1) != 0);
      sub_100607B78(v10, (uint64_t)v11);
      return sub_100607C80(v11);
    }
  }

  return result;
}

void sub_100CFDFCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100CFDFE0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100CFE07C(_Unwind_Exception *a1)
{
}

void sub_100CFE094()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100CFE120(_Unwind_Exception *a1)
{
}

void sub_100CFE430( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CFE490(uint64_t a1, int a2, int a3, char a4, uint64_t a5)
{
  uint64_t result = sub_100719CA8(a1, a2, a3, a4, a5);
  *(void *)uint64_t result = off_10187F328;
  *(_DWORD *)(result + 168) = 0;
  *(_BYTE *)(result + 172) = 0;
  return result;
}

uint64_t sub_100CFE4B8(void *a1)
{
  *a1 = off_10187F328;
  sub_100CFE4EC((uint64_t)a1);
  return sub_100719D0C((uint64_t)a1);
}

void sub_100CFE4EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 172))
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    uint64_t v3 = sub_100719C6C(a1);
    IOHIDServiceClientFastPathInvalidate(v3);
    *(_BYTE *)(a1 + 172) = 0;
    os_unfair_lock_unlock(v2);
  }

void sub_100CFE540(void *a1)
{
  uint64_t v1 = (void *)sub_100CFE4B8(a1);
  operator delete(v1);
}

BOOL sub_100CFE554(uint64_t a1, uint64_t a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1006E27E8();
  if (Current != (CFRunLoopRef)sub_1006E2AB4()) {
    sub_10126BC24();
  }
  if (*(_BYTE *)(a1 + 172))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187F368);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[FastPath] Already initialized", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F368);
      }
      LOWORD(v15) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "[FastPath] Already initialized",  &v15,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "%s\n", v11);
    }

    return 1LL;
  }

  else if (sub_10071A1A0(a1))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    uint64_t v7 = sub_100719C6C(a1);
    *(_BYTE *)(a1 + 172) = IOHIDServiceClientFastPathInit(v7, a2) != 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 168));
    if (!*(_BYTE *)(a1 + 172))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F368);
      }
      uint64_t v8 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v20 = sub_100719C6C(a1);
        __int16 v21 = 2112;
        uint64_t v22 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[FastPath] Initialization failed,serviceRef,%@,properties,%@",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187F368);
        }
        uint64_t v13 = qword_1019344B8;
        int v15 = 138412546;
        uint64_t v16 = sub_100719C6C(a1);
        __int16 v17 = 2112;
        uint64_t v18 = a2;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v13,  16LL,  "[FastPath] Initialization failed,serviceRef,%@,properties,%@",  &v15,  22);
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "%s\n", v14);
      }
    }

    return *(_BYTE *)(a1 + 172) != 0;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187F368);
    }
    uint64_t v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[FastPath] Couldn't initialize FastPath due null service ref",  buf,  2u);
    }

    BOOL v10 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F368);
      }
      LOWORD(v15) = 0;
      int64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "[FastPath] Couldn't initialize FastPath due null service ref",  &v15,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "%s\n", v12);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100CFEA18(uint64_t a1)
{
  uint64_t v8 = 0LL;
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 172))
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    int v3 = IOHIDServiceClientFastPathCopyEventWithStatus(v1, 0LL, 0LL, &v8);
    os_unfair_lock_unlock(v2);
    if (v3)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F368);
      }
      unint64_t v4 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        int v11 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[FastPath] copyEvent Failed (%{public}x)",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187F368);
        }
        v9[0] = 67240192;
        v9[1] = v3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "[FastPath] copyEvent Failed (%{public}x)",  v9,  8);
        uint64_t v7 = (uint8_t *)v6;
        sub_10029211C("Generic", 1LL, 0, 2LL, "virtual IOHIDEventRef FastPathDevice::copyEvent()", "%s\n", v6);
        if (v7 != buf) {
          free(v7);
        }
      }
    }
  }

  return v8;
}

void sub_100CFEC0C(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_100CFEC38@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v15 = a1;
  sub_1004F2598();
  if ((sub_1001B9A1C() & 1) != 0 || (sub_1004F2598(), sub_1004F7500()))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187F388);
    }
    uint64_t v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Instantiating CLTileSyncManager", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187F388);
      }
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Instantiating CLTileSyncManager",  v13,  2);
      BOOL v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::unique_ptr<CLITileSyncManager> CLITileSyncManager::createProduction(CLWifiTilesManager *, id<CLInter siloUniverse>, std::shared_ptr<CLWifiAccessPointLocationService>)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    sub_100FBD958(v13);
    sub_100CFEFA8(&v15, &v14, v13, a3, buf);
    *a4 = *(void *)buf;
    *(void *)buf = 0LL;
    BOOL result = (void *)v13[0];
    v13[0] = 0LL;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*(void *)result + 8LL))(result);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187F388);
    }
    uint64_t v8 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Instantiating NoopTileSyncManager", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187F388);
      }
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Instantiating NoopTileSyncManager",  v13,  2);
      int64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::unique_ptr<CLITileSyncManager> CLITileSyncManager::createProduction(CLWifiTilesManager *, id<CLInter siloUniverse>, std::shared_ptr<CLWifiAccessPointLocationService>)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    BOOL result = operator new(8uLL);
    *(void *)BOOL result = &off_10187F3B8;
    *a4 = result;
  }

  return result;
}

void sub_100CFEF7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8LL))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CFEFA8@<X0>( void *a1@<X0>, void **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  BOOL v10 = operator new(0x108uLL);
  int v11 = v10;
  if (*a1) {
    uint64_t v12 = *a1 + 112LL;
  }
  else {
    uint64_t v12 = 0LL;
  }
  uint64_t v13 = *a2;
  uint64_t v14 = *a3;
  *a3 = 0LL;
  uint64_t v15 = (std::__shared_weak_count *)a4[1];
  uint64_t v22 = *a4;
  unint64_t v23 = v15;
  uint64_t v24 = v14;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }

  sub_10021CF14((uint64_t)v10, v12, v13, &v24, &v22);
  *a5 = v11;
  uint64_t v18 = v23;
  if (v23)
  {
    char v19 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  uint64_t result = v24;
  uint64_t v24 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100CFF09C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = a12;
  a12 = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_100CFF0D0(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100CFF0FC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100CFF160()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100CFF1D4(_Unwind_Exception *a1)
{
}

uint64_t sub_100CFF200(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_10187F420;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___CLDaemonHealthClientAdapter);
  *(void *)(a1 + 40) = v5;
  -[CLDaemonHealthClientAdapter setValid:](v5, "setValid:", 1LL);
  id v6 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", @"CLNatalimetryNotifier");
  *(void *)(a1 + 32) = v6;
  objc_msgSend(v6, "registerDelegate:inSilo:", *(void *)(a1 + 40), objc_msgSend(a3, "silo"));
  uint64_t v7 = *(void *)(a1 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_100CFF2EC;
  v9[3] = &unk_10182B3E0;
  _DWORD v9[4] = a1;
  CLConnection::setDefaultMessageHandler(v7, v9);
  return a1;
}

void sub_100CFF2D8(_Unwind_Exception *a1)
{
}

void sub_100CFF2EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  BOOL v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16LL))(v2, &v9);
  id v6 = v10;
  if (v10)
  {
    uint64_t v7 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_100CFF378( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100CFF390(uint64_t a1)
{
  *(void *)a1 = off_10187F420;
  [*(id *)(a1 + 40) setValid:0];

  *(void *)(a1 + 40) = 0LL;
  return sub_100213E60((void *)a1);
}

void sub_100CFF3E4(uint64_t a1)
{
  uint64_t v1 = sub_100CFF390(a1);
  operator delete(v1);
}

void sub_100CFF3F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 42LL) {
      goto LABEL_7;
    }
    unint64_t v4 = (void *)*v4;
  }

  else if (v5 != 42)
  {
LABEL_7:
    id v6 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    int v7 = *((char *)v6 + 23);
    if (v7 < 0)
    {
      if (v6[1] != 44LL)
      {
LABEL_13:
        if (qword_101934650 != -1) {
          dispatch_once(&qword_101934650, &stru_10187F4C0);
        }
        unint64_t v8 = (os_log_s *)qword_101934658;
        if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_FAULT))
        {
          uint64_t v9 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
          else {
            BOOL v10 = (uint64_t *)*v9;
          }
          *(_DWORD *)buf = 136446210;
          double v31 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Got unhandled mesage of type %{public}s",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934650 != -1) {
            dispatch_once(&qword_101934650, &stru_10187F4C0);
          }
          uint64_t v21 = qword_101934658;
          uint64_t v22 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
          else {
            unint64_t v23 = (uint64_t *)*v22;
          }
          int v28 = 136446210;
          double v29 = v23;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  17LL,  "Got unhandled mesage of type %{public}s",  &v28,  12);
          __int16 v25 = (uint8_t *)v24;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLDaemonHealthClient::handleMessage(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v24);
          if (v25 != buf) {
            free(v25);
          }
        }

        return;
      }

      id v6 = (void *)*v6;
    }

    else if (v7 != 44)
    {
      goto LABEL_13;
    }

    if (memcmp(v6, "Health/kCLConnectionMessageVO2MaxInputsQuery", 0x2CuLL)) {
      goto LABEL_13;
    }
    unint64_t v17 = *(CLConnectionMessage **)a2;
    uint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
    v26[0] = v17;
    v26[1] = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }

    sub_100CFFCC0(a1, (uint64_t)v26);
    if (v12)
    {
      unint64_t v20 = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(v20);
      while (__stlxr(v16 - 1, v20));
      goto LABEL_35;
    }

    return;
  }

  if (memcmp(v4, "Health/kCLConnectionMessageMetMinutesQuery", 0x2AuLL)) {
    goto LABEL_7;
  }
  int v11 = *(CLConnectionMessage **)a2;
  uint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
  v27[0] = v11;
  v27[1] = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  sub_100CFF754(a1, (uint64_t)v27);
  if (v12)
  {
    uint64_t v15 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
LABEL_35:
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_100CFF72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

id *sub_100CFF754(uint64_t a1, uint64_t a2)
{
  if ((sub_100D00328(a1, (int *)&v40) & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___CMMotionTimeRange);
    uint64_t v5 = v4;
    *(void *)&double v6 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses( *(CLConnectionMessage **)a2,  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v5, v6, v7, 0LL));
    uint64_t v9 = CMTimeRangeKey;
    if ([DictionaryOfClasses objectForKeyedSubscript:CMTimeRangeKey])
    {
      +[CMMotionTimeRange CLMotionTimeRangeFromCMMotionTimeRange:]( CMMotionTimeRange,  "CLMotionTimeRangeFromCMMotionTimeRange:",  [DictionaryOfClasses objectForKeyedSubscript:v9]);
      double v11 = v10;
      double v13 = v12;
      if (v10 <= CFAbsoluteTimeGetCurrent() && (v13 <= CFAbsoluteTimeGetCurrent() ? (BOOL v14 = v11 < v13) : (BOOL v14 = 0), v14))
      {
        sub_100222B94(buf, (uint64_t)"CLDaemonClient.MetMinutesQuery", 0);
        uint64_t v22 = *(void **)(a1 + 32);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3321888768LL;
        v36[2] = sub_100D00654;
        v36[3] = &unk_10187F448;
        unint64_t v23 = *(std::__shared_weak_count **)(a2 + 8);
        v36[4] = *(void *)a2;
        char v37 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            unint64_t v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }

        double v38 = v11;
        double v39 = v13;
        objc_msgSend(v22, "queryMetMinutesInTimeRange:withReply:", v36, v11, v13);
        double v26 = v37;
        if (v37)
        {
          unint64_t v27 = (unint64_t *)&v37->__shared_owners_;
          do
            unint64_t v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }

        return sub_1001BA1BC((id *)buf);
      }

      else
      {
        if (qword_101934650 != -1) {
          dispatch_once(&qword_101934650, &stru_10187F4C0);
        }
        uint64_t v15 = (os_log_s *)qword_101934658;
        if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_ERROR))
        {
          id v16 = [DictionaryOfClasses objectForKeyedSubscript:v9];
          *(_DWORD *)buf = 138412290;
          id v48 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "METMinutes,query,error,invalid parameter,%@",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934650 != -1) {
            dispatch_once(&qword_101934650, &stru_10187F4C0);
          }
          uint64_t v29 = qword_101934658;
          id v30 = [DictionaryOfClasses objectForKeyedSubscript:v9];
          int v43 = 138412290;
          id v44 = v30;
          LODWORD(v35) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  16LL,  "METMinutes,query,error,invalid parameter,%@",  &v43,  v35);
          __int16 v32 = (uint8_t *)v31;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v31);
          if (v32 != buf) {
            free(v32);
          }
        }

        unint64_t v17 = *(CLConnectionMessage **)a2;
        uint64_t v41 = CMErrorMessage;
        __int16 v42 = &off_1018D4508;
        +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL);
        return (id *)CLConnectionMessage::sendReply(v17);
      }
    }

    else
    {
      if (qword_101934650 != -1) {
        dispatch_once(&qword_101934650, &stru_10187F4C0);
      }
      unint64_t v20 = (os_log_s *)qword_101934658;
      if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "METMinutes,query,empty request", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934650 != -1) {
          dispatch_once(&qword_101934650, &stru_10187F4C0);
        }
        LOWORD(v43) = 0;
        LODWORD(v35) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934658,  17LL,  "METMinutes,query,empty request",  &v43,  v35);
        unint64_t v34 = (uint8_t *)v33;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v33);
        if (v34 != buf) {
          free(v34);
        }
      }

      uint64_t v21 = *(CLConnectionMessage **)a2;
      uint64_t v45 = CMErrorMessage;
      uint64_t v46 = &off_1018D4508;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL);
      return (id *)CLConnectionMessage::sendReply(v21);
    }
  }

  else
  {
    unint64_t v19 = *(CLConnectionMessage **)a2;
    uint64_t v49 = CMErrorMessage;
    __int128 v50 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v40);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v50,  &v49,  1LL);
    return (id *)CLConnectionMessage::sendReply(v19);
  }

void sub_100CFFC9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, id a27)
{
}

void sub_100CFFCC0(uint64_t a1, uint64_t a2)
{
  if ((sub_100D00A88(a1, (int *)&v24) & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___CMVO2MaxInputs);
    uint64_t v5 = v4;
    *(void *)&double v6 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses( *(CLConnectionMessage **)a2,  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v5, v6, v7, 0LL));
    uint64_t v9 = CMVO2MaxInputsRecord;
    if ([DictionaryOfClasses objectForKeyedSubscript:CMVO2MaxInputsRecord])
    {
      +[CMVO2MaxInputs VO2MaxInputFromCMVO2MaxInputs:]( CMVO2MaxInputs,  "VO2MaxInputFromCMVO2MaxInputs:",  [DictionaryOfClasses objectForKeyedSubscript:v9]);
      double v10 = *(void **)(a1 + 32);
      v34[4] = v41;
      v34[5] = v42;
      v34[6] = v43;
      v34[0] = *(_OWORD *)buf;
      v34[1] = v38;
      id v34[2] = v39;
      v34[3] = v40;
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3321888768LL;
      v25[2] = sub_100D00DB4;
      void v25[3] = &unk_10187F478;
      double v11 = *(std::__shared_weak_count **)(a2 + 8);
      v25[4] = *(void *)a2;
      double v26 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          unint64_t v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }

      __int128 v31 = v41;
      __int128 v32 = v42;
      __int128 v33 = v43;
      __int128 v27 = *(_OWORD *)buf;
      __int128 v28 = v38;
      __int128 v29 = v39;
      __int128 v30 = v40;
      [v10 queryVO2MaxInputsFromRecord:v34 withReply:v25];
      BOOL v14 = v26;
      if (v26)
      {
        uint64_t v15 = (unint64_t *)&v26->__shared_owners_;
        do
          unint64_t v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }

    else
    {
      if (qword_101934650 != -1) {
        dispatch_once(&qword_101934650, &stru_10187F4C0);
      }
      uint64_t v18 = (os_log_s *)qword_101934658;
      if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "VO2MaxData,query,empty request", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934650 != -1) {
          dispatch_once(&qword_101934650, &stru_10187F4C0);
        }
        v23[0] = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934658,  17LL,  "VO2MaxData,query,empty request",  v23,  v22);
        uint64_t v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonHealthClient::handleMessageVO2MaxInputsQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      unint64_t v19 = *(CLConnectionMessage **)a2;
      uint64_t v35 = CMErrorMessage;
      unint64_t v36 = &off_1018D4508;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL);
      CLConnectionMessage::sendReply(v19);
    }
  }

  else
  {
    unint64_t v17 = *(CLConnectionMessage **)a2;
    uint64_t v44 = CMErrorMessage;
    uint64_t v45 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v24);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v45,  &v44,  1LL);
    CLConnectionMessage::sendReply(v17);
  }

void sub_100D0004C(_Unwind_Exception *a1)
{
}

BOOL sub_100D00068(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    sub_1010DDBC0(__p, "com.apple.locationd.activity");
    int isEntitled = CLConnection::isEntitled(v2, __p);
    int v4 = isEntitled;
    if (v19 < 0)
    {
      operator delete(__p[0]);
      if (v4)
      {
LABEL_7:
        *(_DWORD *)(a1 + 24) = 1;
        return *(_DWORD *)(a1 + 24) == 1;
      }
    }

    else if (isEntitled)
    {
      goto LABEL_7;
    }

    uint64_t v5 = kTCCServiceMotion;
    CLConnection::getAuditToken(*(CLConnection **)(a1 + 8));
    *(_DWORD *)(a1 + 24) = 2;
    if (qword_101934650 != -1) {
      dispatch_once(&qword_101934650, &stru_10187F4C0);
    }
    uint64_t v7 = (os_log_s *)qword_101934658;
    if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      unint64_t v8 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %s did not pass entitlement/tcc checks.",  buf,  0xCu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934650 != -1) {
        dispatch_once(&qword_101934650, &stru_10187F4C0);
      }
      uint64_t v9 = qword_101934658;
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      if (v15 >= 0) {
        double v10 = buf;
      }
      else {
        double v10 = *(_BYTE **)buf;
      }
      int v16 = 136315138;
      unint64_t v17 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v9,  0LL,  "#Warning Client %s did not pass entitlement/tcc checks.",  (const char *)&v16);
      double v12 = v11;
      if (v15 < 0) {
        operator delete(*(void **)buf);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLDaemonHealthClient::isAuthorizedForMotionActivity()", "%s\n", v12);
    }
  }

  return *(_DWORD *)(a1 + 24) == 1;
}

void sub_100D00304( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D00328(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  sub_1010DDBC0(__p, "com.apple.locationd.metminutes");
  char isEntitled = CLConnection::isEntitled(v4, __p);
  char v6 = isEntitled;
  if (SBYTE3(v29) < 0)
  {
    operator delete(*(void **)__p);
    if ((v6 & 1) != 0)
    {
LABEL_3:
      uint64_t result = sub_100E0DFC0(*(void *)(a1 + 16));
      if ((_DWORD)result)
      {
        uint64_t result = sub_100D00068(a1);
        if ((_DWORD)result) {
          int v8 = 100;
        }
        else {
          int v8 = 111;
        }
      }

      else
      {
        int v8 = 109;
      }

      goto LABEL_18;
    }
  }

  else if ((isEntitled & 1) != 0)
  {
    goto LABEL_3;
  }

  if (qword_101934650 != -1) {
    dispatch_once(&qword_101934650, &stru_10187F4C0);
  }
  uint64_t v9 = (os_log_s *)qword_101934658;
  if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_DEFAULT))
  {
    CLConnection::getName(*(CLConnection **)(a1 + 8));
    int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    double v11 = v20;
    *(_DWORD *)std::string __p = 136315650;
    if ((v24 & 0x80000000LL) != 0) {
      double v11 = *(_BYTE **)v20;
    }
    *(void *)&__p[4] = v11;
    __int16 v26 = 1024;
    int v27 = RemotePid;
    __int16 v28 = 2048;
    uint64_t v29 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning METMinutes,Client failed entitlement check, %s, %d, %p",  __p,  0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)v20);
    }
  }

  uint64_t result = sub_1002921D0(115, 2);
  if ((_DWORD)result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934650 != -1) {
      dispatch_once(&qword_101934650, &stru_10187F4C0);
    }
    uint64_t v12 = qword_101934658;
    CLConnection::getName(*(CLConnection **)(a1 + 8));
    int v13 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    BOOL v14 = &v18;
    *(_DWORD *)unint64_t v20 = 136315650;
    if (v19 < 0) {
      BOOL v14 = v18;
    }
    *(void *)&v20[4] = v14;
    __int16 v21 = 1024;
    int v22 = v13;
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v12,  0LL,  "#Warning METMinutes,Client failed entitlement check, %s, %d, %p",  v20,  28,  v17);
    int v16 = v15;
    if (v19 < 0) {
      operator delete(v18);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDaemonHealthClient::isAuthorizedForMetMinutes(CMError &)",  "%s\n",  v16);
    if (v16 != __p) {
      free(v16);
    }
    uint64_t result = 0LL;
  }

  int v8 = 110;
LABEL_18:
  *a2 = v8;
  return result;
}

void sub_100D00608( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D00654(void *a1, void *a2, int a3)
{
  if (a3 == 100)
  {
    uint64_t v30 = CMMetMinutesArray;
    __int128 v31 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL);
    if (qword_101934650 != -1) {
      dispatch_once(&qword_101934650, &stru_10187F4C0);
    }
    uint64_t v5 = (os_log_s *)qword_101934658;
    if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = a1[6];
      uint64_t v6 = a1[7];
      id v8 = [a2 count];
      if ([a2 count]) {
        uint64_t v9 = (const __CFString *)[a2 lastObject];
      }
      else {
        uint64_t v9 = @" ";
      }
      *(_DWORD *)buf = 134218754;
      uint64_t v33 = v7;
      __int16 v34 = 2048;
      uint64_t v35 = v6;
      __int16 v36 = 2048;
      id v37 = v8;
      __int16 v38 = 2112;
      __int128 v39 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "METMinutes,query,range,from,%.3f,to,%.3f,count,%lu,response,%@",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934650 != -1) {
        dispatch_once(&qword_101934650, &stru_10187F4C0);
      }
      uint64_t v15 = qword_101934658;
      uint64_t v17 = a1[6];
      uint64_t v16 = a1[7];
      id v18 = [a2 count];
      if ([a2 count]) {
        char v19 = (const __CFString *)[a2 lastObject];
      }
      else {
        char v19 = @" ";
      }
      int v22 = 134218754;
      uint64_t v23 = v17;
      __int16 v24 = 2048;
      uint64_t v25 = v16;
      __int16 v26 = 2048;
      id v27 = v18;
      __int16 v28 = 2112;
      uint64_t v29 = v19;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  1LL,  "METMinutes,query,range,from,%.3f,to,%.3f,count,%lu,response,%@",  &v22,  42);
      __int16 v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    CLConnectionMessage::sendReply(a1[4]);
  }

  else
  {
    uint64_t v11 = a1[4];
    uint64_t v40 = CMErrorMessage;
    __int128 v41 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v41,  &v40,  1LL);
    CLConnectionMessage::sendReply(v11);
    if (qword_101934650 != -1) {
      dispatch_once(&qword_101934650, &stru_10187F4C0);
    }
    uint64_t v12 = (os_log_s *)qword_101934658;
    if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v33) = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "METMinutes,query,error,%{public}d", buf, 8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934650 != -1) {
        dispatch_once(&qword_101934650, &stru_10187F4C0);
      }
      int v22 = 67240192;
      LODWORD(v23) = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934658,  16LL,  "METMinutes,query,error,%{public}d",  &v22,  8);
      BOOL v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

uint64_t sub_100D00A88(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  sub_1010DDBC0(__p, "com.apple.locationd.vo2max");
  char isEntitled = CLConnection::isEntitled(v4, __p);
  char v6 = isEntitled;
  if (SBYTE3(v29) < 0)
  {
    operator delete(*(void **)__p);
    if ((v6 & 1) != 0)
    {
LABEL_3:
      uint64_t result = sub_100E0DFC0(*(void *)(a1 + 16));
      if ((_DWORD)result)
      {
        uint64_t result = sub_100D00068(a1);
        if ((_DWORD)result) {
          int v8 = 100;
        }
        else {
          int v8 = 111;
        }
      }

      else
      {
        int v8 = 109;
      }

      goto LABEL_18;
    }
  }

  else if ((isEntitled & 1) != 0)
  {
    goto LABEL_3;
  }

  if (qword_101934650 != -1) {
    dispatch_once(&qword_101934650, &stru_10187F4C0);
  }
  uint64_t v9 = (os_log_s *)qword_101934658;
  if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_ERROR))
  {
    CLConnection::getName(*(CLConnection **)(a1 + 8));
    int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    uint64_t v11 = v20;
    *(_DWORD *)std::string __p = 136315650;
    if ((v24 & 0x80000000LL) != 0) {
      uint64_t v11 = *(_BYTE **)v20;
    }
    *(void *)&__p[4] = v11;
    __int16 v26 = 1024;
    int v27 = RemotePid;
    __int16 v28 = 2048;
    uint64_t v29 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "VO2MaxData,Client failed entitlement check, %s, %d, %p",  __p,  0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)v20);
    }
  }

  uint64_t result = sub_1002921D0(115, 0);
  if ((_DWORD)result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934650 != -1) {
      dispatch_once(&qword_101934650, &stru_10187F4C0);
    }
    uint64_t v12 = qword_101934658;
    CLConnection::getName(*(CLConnection **)(a1 + 8));
    int v13 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    BOOL v14 = &v18;
    *(_DWORD *)unint64_t v20 = 136315650;
    if (v19 < 0) {
      BOOL v14 = v18;
    }
    *(void *)&v20[4] = v14;
    __int16 v21 = 1024;
    int v22 = v13;
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v12,  16LL,  "VO2MaxData,Client failed entitlement check, %s, %d, %p",  v20,  28,  v17);
    uint64_t v16 = v15;
    if (v19 < 0) {
      operator delete(v18);
    }
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLDaemonHealthClient::isAuthorizedForVO2Max(CMError &)", "%s\n", v16);
    if (v16 != __p) {
      free(v16);
    }
    uint64_t result = 0LL;
  }

  int v8 = 110;
LABEL_18:
  *a2 = v8;
  return result;
}

void sub_100D00D68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D00DB4(uint64_t a1, void *a2, int a3)
{
  if (a3 == 100)
  {
    uint64_t v26 = CMVO2MaxInputsArray;
    int v27 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL);
    if (qword_101934650 != -1) {
      dispatch_once(&qword_101934650, &stru_10187F4C0);
    }
    uint64_t v5 = (os_log_s *)qword_101934658;
    if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      id v7 = [a2 count];
      if ([a2 count]) {
        int v8 = (const __CFString *)[a2 lastObject];
      }
      else {
        int v8 = @" ";
      }
      *(_DWORD *)buf = 134218498;
      uint64_t v29 = v6;
      __int16 v30 = 2048;
      id v31 = v7;
      __int16 v32 = 2112;
      uint64_t v33 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "VO2MaxData,query,fromRecordId,%llu,count,%lu,response,%@",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934650 != -1) {
        dispatch_once(&qword_101934650, &stru_10187F4C0);
      }
      uint64_t v14 = qword_101934658;
      uint64_t v15 = *(void *)(a1 + 48);
      id v16 = [a2 count];
      if ([a2 count]) {
        uint64_t v17 = (const __CFString *)[a2 lastObject];
      }
      else {
        uint64_t v17 = @" ";
      }
      int v20 = 134218498;
      uint64_t v21 = v15;
      __int16 v22 = 2048;
      id v23 = v16;
      __int16 v24 = 2112;
      uint64_t v25 = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v14,  1LL,  "VO2MaxData,query,fromRecordId,%llu,count,%lu,response,%@",  &v20,  32);
      char v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonHealthClient::handleMessageVO2MaxInputsQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }

    CLConnectionMessage::sendReply(*(void *)(a1 + 32));
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v34 = CMErrorMessage;
    uint64_t v35 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL);
    CLConnectionMessage::sendReply(v10);
    if (qword_101934650 != -1) {
      dispatch_once(&qword_101934650, &stru_10187F4C0);
    }
    uint64_t v11 = (os_log_s *)qword_101934658;
    if (os_log_type_enabled((os_log_t)qword_101934658, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v29) = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "VO2MaxData,query,error,%{public}d", buf, 8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934650 != -1) {
        dispatch_once(&qword_101934650, &stru_10187F4C0);
      }
      int v20 = 67240192;
      LODWORD(v21) = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934658,  16LL,  "VO2MaxData,query,error,%{public}d",  &v20,  8);
      int v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonHealthClient::handleMessageVO2MaxInputsQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

void sub_100D011D8(id a1)
{
  qword_101934658 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Health");
}

uint64_t sub_100D01204()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199DC90, (void *)&_mh_execute_header);
}

void sub_100D02F98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_10000AE14(v75);
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  sub_10000AE14((uint64_t)&a75);
  _Unwind_Resume(a1);
}

uint64_t sub_100D031AC(int64x2_t *a1)
{
  sub_10000AE14( *(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8LL))
  + 16LL * a1[2].i64[0]);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1012CE4D0);
  return sub_100232D40((uint64_t)a1, 1);
}

void sub_100D03200(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100D03B94(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }

  __int128 v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    uint64_t v10 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    uint64_t v7 = a1[5];
  }

  a1[5] = v7 + 1;
}

NSDictionary *sub_100D032A4(uint64_t a1)
{
  v7[0] = @"type";
  v8[0] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 16LL));
  v7[1] = @"typeBounded";
  v8[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 16LL));
  v7[2] = @"pressureDifferenceFromLastLocationCalibration";
  uint64_t v2 = (void *)(a1 + 48);
  v8[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
  v7[3] = @"timeSinceLastLocationCalibration";
  int v3 = (void *)(a1 + 72);
  v8[3] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3);
  _DWORD v7[4] = @"pressureDifferenceFromLastMotionCalibration";
  uint64_t v4 = (void *)(a1 + 96);
  v8[4] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4);
  v7[5] = @"timeSinceLastMotionCalibration";
  uint64_t v5 = (void *)(a1 + 120);
  v8[5] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v8,  v7,  6LL);
}

_BYTE *sub_100D033F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  if (*(char *)(a2 + 71) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v7;
  }

  if (*(char *)(a2 + 95) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 72), *(void **)(a2 + 72), *(void *)(a2 + 80));
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v8;
  }

  if (*(char *)(a2 + 119) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 96), *(void **)(a2 + 96), *(void *)(a2 + 104));
  }

  else
  {
    __int128 v9 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v9;
  }

  uint64_t result = (_BYTE *)(a1 + 120);
  __int128 v11 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)uint64_t result = v11;
  return result;
}

void sub_100D03504(_Unwind_Exception *a1)
{
  if (v2[119] < 0) {
    operator delete(*v5);
  }
  if (v2[95] < 0) {
    operator delete(*v4);
  }
  if (v2[71] < 0) {
    operator delete(*v3);
  }
  sub_10000AE14(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D03560(uint64_t a1)
{
  return sub_10000AE14(a1 + 32);
}

void sub_100D036B4(_Unwind_Exception *a1)
{
  for (uint64_t i = 432LL; i != -48; i -= 48LL)
    sub_10049108C((void *)(v1 + i));
  _Unwind_Resume(a1);
}

void sub_100D03AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100D03B68(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100D03B94(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    __int128 v7 = (void *)a1[1];
    __int128 v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)__int128 v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      id v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      __int128 v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        __int128 v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100D03E5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100D03EA8(char *a1, double **a2, char *a3, double **a4, uint64_t a5, char a6)
{
  v258 = a1;
  v259 = a2;
  if (a2 != a4)
  {
    unint64_t v8 = (unint64_t)a4;
    uint64_t v10 = a2;
    while (2)
    {
      uint64_t v11 = v258;
      uint64_t v12 = a3 - v258;
      uint64_t v13 = *(double ***)a3;
      BOOL v14 = *(char **)v258;
      unint64_t v15 = ((uint64_t)(v8 - *(void *)a3) >> 4) + 32 * (a3 - v258) - (((uint64_t)v10 - *(void *)v258) >> 4);
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          std::string v146 = *(double **)(v8 - 16);
          if (*v146 < **v10)
          {
            v147 = *v10;
            *uint64_t v10 = v146;
            *(void *)(v8 - 16) = v147;
            std::string v148 = v10[1];
            v10[1] = *(double **)(v8 - 8);
            *(void *)(v8 - 8) = v148;
          }

          return;
        case 3uLL:
          uint64_t v149 = (char *)v10 - v14;
          uint64_t v150 = ((char *)v10 - v14) >> 4;
          if (v149 < -15)
          {
            unint64_t v215 = 254 - v150;
            v152 = &v258[-8 * (v215 >> 8)];
            uint64_t v153 = *(void *)v152 + 16LL * ~(_BYTE)v215;
          }

          else
          {
            unint64_t v151 = v150 + 1;
            v152 = &v258[8 * (v151 >> 8)];
            uint64_t v153 = *(void *)v152 + 16LL * v151;
          }

          if ((double **)v8 == v13)
          {
            uint64_t v216 = *((void *)a3 - 1);
            a3 -= 8;
            unint64_t v8 = v216 + 4096;
          }

          sub_100D05150((uint64_t)v258, v10, (uint64_t)v152, v153, (uint64_t)a3, v8 - 16);
          return;
        case 4uLL:
          uint64_t v154 = (char *)v10 - v14;
          uint64_t v155 = ((char *)v10 - v14) >> 4;
          if (v154 >= -15)
          {
            v156 = &v258[8 * ((unint64_t)(v155 + 1) >> 8)];
            v157 = (double **)(*(void *)v156 + 16LL * (v155 + 1));
            unint64_t v158 = v155 + 2;
LABEL_233:
            v217 = &v258[8 * (v158 >> 8)];
            v218 = (double **)(*(void *)v217 + 16LL * v158);
            goto LABEL_249;
          }

          v156 = &v258[-8 * ((unint64_t)(254 - v155) >> 8)];
          v157 = (double **)(*(void *)v156 + 16LL * ~(-2 - v155));
          if ((unint64_t)v154 >= 0xFFFFFFFFFFFFFFE1LL)
          {
            unint64_t v158 = 1LL;
            goto LABEL_233;
          }

          unint64_t v237 = 253 - v155;
          v217 = &v258[-8 * (v237 >> 8)];
          v218 = (double **)(*(void *)v217 + 16LL * ~(_BYTE)v237);
LABEL_249:
          if ((double **)v8 == v13)
          {
            uint64_t v238 = *((void *)a3 - 1);
            a3 -= 8;
            unint64_t v8 = v238 + 4096;
          }

          sub_100D057BC((uint64_t)v258, v10, (uint64_t)v156, v157, (uint64_t)v217, v218, (uint64_t)a3, (double **)(v8 - 16));
          return;
        case 5uLL:
          uint64_t v159 = (char *)v10 - v14;
          uint64_t v160 = ((char *)v10 - v14) >> 4;
          if (v159 >= -15)
          {
            v161 = &v258[8 * ((unint64_t)(v160 + 1) >> 8)];
            uint64_t v162 = *(void *)v161 + 16LL * (v160 + 1);
            unint64_t v163 = v160 + 2;
LABEL_236:
            v219 = &v258[8 * (v163 >> 8)];
            uint64_t v220 = *(void *)v219 + 16LL * v163;
            unint64_t v221 = v160 + 3;
LABEL_237:
            v222 = &v258[8 * (v221 >> 8)];
            uint64_t v223 = *(void *)v222 + 16LL * v221;
            goto LABEL_238;
          }

          v161 = &v258[-8 * ((unint64_t)(254 - v160) >> 8)];
          uint64_t v162 = *(void *)v161 + 16LL * ~(-2 - v160);
          if ((unint64_t)v159 >= 0xFFFFFFFFFFFFFFE1LL)
          {
            unint64_t v163 = 1LL;
            goto LABEL_236;
          }

          v219 = &v258[-8 * ((unint64_t)(253 - v160) >> 8)];
          uint64_t v220 = *(void *)v219 + 16LL * ~(-3 - v160);
          if ((unint64_t)v159 >= 0xFFFFFFFFFFFFFFD1LL)
          {
            unint64_t v221 = 1LL;
            goto LABEL_237;
          }

          unint64_t v257 = 252 - v160;
          v222 = &v258[-8 * (v257 >> 8)];
          uint64_t v223 = *(void *)v222 + 16LL * ~(_BYTE)v257;
LABEL_238:
          sub_100D057BC( (uint64_t)v258,  v10,  (uint64_t)v161,  (double **)v162,  (uint64_t)v219,  (double **)v220,  (uint64_t)v222,  (double **)v223);
          v224 = *(double **)(v8 - 16);
          v225 = *(double **)v223;
          if (*v224 < **(double **)v223)
          {
            *(void *)uint64_t v223 = v224;
            *(void *)(v8 - 16) = v225;
            uint64_t v226 = *(void *)(v223 + 8);
            *(void *)(v223 + 8) = *(void *)(v8 - 8);
            *(void *)(v8 - 8) = v226;
            v227 = *(double **)v220;
            if (**(double **)v223 < **(double **)v220)
            {
              *(void *)uint64_t v220 = *(void *)v223;
              *(void *)uint64_t v223 = v227;
              uint64_t v228 = *(void *)(v220 + 8);
              *(void *)(v220 + 8) = *(void *)(v223 + 8);
              *(void *)(v223 + 8) = v228;
              v229 = *(double **)v162;
              if (**(double **)v220 < **(double **)v162)
              {
                *(void *)uint64_t v162 = *(void *)v220;
                *(void *)uint64_t v220 = v229;
                uint64_t v230 = *(void *)(v162 + 8);
                *(void *)(v162 + 8) = *(void *)(v220 + 8);
                *(void *)(v220 + 8) = v230;
                v231 = *v10;
                if (**(double **)v162 < **v10)
                {
                  *uint64_t v10 = *(double **)v162;
                  *(void *)uint64_t v162 = v231;
                  v232 = v10[1];
                  v10[1] = *(double **)(v162 + 8);
                  *(void *)(v162 + 8) = v232;
                }
              }
            }
          }

          return;
        default:
          if ((uint64_t)v15 > 23)
          {
            if (!a5)
            {
              if ((double **)v8 != v10)
              {
                uint64_t v179 = 32 * v12;
                *(void *)&__int128 v262 = v258;
                *((void *)&v262 + 1) = v10;
                uint64_t v180 = 32 * v12 + ((uint64_t)(v8 - *(void *)a3) >> 4) - (((uint64_t)v10 - *(void *)v258) >> 4);
                if (v180 > 1)
                {
                  unint64_t v181 = (unint64_t)(v180 - 2) >> 1;
                  do
                  {
                    __int128 v182 = v262;
                    v183 = (char *)sub_10025C760((uint64_t)&v262, v181);
                    sub_100D05880((char *)v182, *((__int128 **)&v182 + 1), v180, v183, v184);
                    --v181;
                  }

                  while (v181 != -1LL);
                  uint64_t v185 = v179 + ((uint64_t)(v8 - *(void *)a3) >> 4) - (((uint64_t)v10 - *(void *)v11) >> 4);
                  if (v185 >= 2)
                  {
                    do
                    {
                      uint64_t v186 = 0LL;
                      __int128 v260 = *(_OWORD *)v10;
                      *uint64_t v10 = 0LL;
                      v10[1] = 0LL;
                      v187 = (__int128 *)v10;
                      v188 = v11;
                      do
                      {
                        uint64_t v189 = (uint64_t)v187;
                        if (v186 != -1)
                        {
                          uint64_t v190 = v186 + 1 + (((uint64_t)v187 - *(void *)v188) >> 4);
                          if (v190 < 1)
                          {
                            unint64_t v191 = 255 - v190;
                            v188 -= 8 * (v191 >> 8);
                            v187 = (__int128 *)(*(void *)v188 + 16LL * ~(_BYTE)v191);
                          }

                          else
                          {
                            v188 += 8 * ((unint64_t)v190 >> 8);
                            v187 = (__int128 *)(*(void *)v188 + 16LL * v190);
                          }
                        }

                        uint64_t v192 = (2 * v186) | 1;
                        uint64_t v186 = 2 * v186 + 2;
                        if (v186 >= v185
                          || ((uint64_t v193 = (uint64_t)v187 - *(void *)v188, v194 = v193 >> 4, v193 < -15)
                            ? (v195 = (double **)(*(void *)&v188[-8 * ((unint64_t)(254 - v194) >> 8)]
                                                + 16LL * ~(-2 - v194)))
                            : (v195 = (double **)(*(void *)&v188[((unint64_t)(v194 + 1) >> 5) & 0x7FFFFFFFFFFFFF8LL]
                                                + 16LL * (v194 + 1))),
                              **(double **)v187 >= **v195))
                        {
                          uint64_t v186 = v192;
                        }

                        else if ((__int128 *)((char *)++v187 - *(void *)v188) == (__int128 *)4096)
                        {
                          v196 = (__int128 *)*((void *)v188 + 1);
                          v188 += 8;
                          v187 = v196;
                        }

                        sub_10005F550(v189, v187);
                      }

                      while (v186 <= (uint64_t)((unint64_t)(v185 - 2) >> 1));
                      uint64_t v197 = v8;
                      if (*(void *)a3 == v8) {
                        uint64_t v197 = *((void *)a3 - 1) + 4096LL;
                      }
                      uint64_t v198 = v197 - 16;
                      if (v187 == (__int128 *)(v197 - 16))
                      {
                        sub_10005F550((uint64_t)v187, &v260);
                      }

                      else
                      {
                        sub_10005F550((uint64_t)v187, (__int128 *)(v197 - 16));
                        uint64_t v199 = (uint64_t)(v187 + 1);
                        if ((__int128 *)((char *)v187 - *(void *)v188 + 16) == (__int128 *)4096)
                        {
                          uint64_t v200 = *((void *)v188 + 1);
                          v188 += 8;
                          uint64_t v199 = v200;
                        }

                        sub_10005F550(v198, &v260);
                        if ((double **)v199 != v10)
                        {
                          uint64_t v201 = ((v199 - *(void *)v188) >> 4)
                               + 32 * (v188 - v11)
                               - (((uint64_t)v10 - *(void *)v11) >> 4);
                          *(void *)&__int128 v262 = v11;
                          *((void *)&v262 + 1) = v10;
                          BOOL v202 = v201 < 2;
                          unint64_t v203 = v201 - 2;
                          if (!v202)
                          {
                            uint64_t v204 = v203 >> 1;
                            sub_10025C760((uint64_t)&v262, v203 >> 1);
                            if (*(void *)v188 == v199) {
                              uint64_t v199 = *((void *)v188 - 1) + 4096LL;
                            }
                            v206 = (void *)(v199 - 16);
                            if (**(double **)v205 < **(double **)(v199 - 16))
                            {
                              __int128 v261 = *(_OWORD *)(v199 - 16);
                              void *v206 = 0LL;
                              *(void *)(v199 - 8) = 0LL;
                              do
                              {
                                uint64_t v207 = (uint64_t)v205;
                                sub_10005F550((uint64_t)v206, v205);
                                if (!v204) {
                                  break;
                                }
                                uint64_t v204 = (unint64_t)(v204 - 1) >> 1;
                                sub_10025C760((uint64_t)&v262, v204);
                                v206 = (void *)v207;
                              }

                              while (**(double **)v205 < *(double *)v261);
                              sub_10005F550(v207, &v261);
                              v208 = (std::__shared_weak_count *)*((void *)&v261 + 1);
                              if (*((void *)&v261 + 1))
                              {
                                v209 = (unint64_t *)(*((void *)&v261 + 1) + 8LL);
                                do
                                  unint64_t v210 = __ldaxr(v209);
                                while (__stlxr(v210 - 1, v209));
                                if (!v210)
                                {
                                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                                  std::__shared_weak_count::__release_weak(v208);
                                }
                              }
                            }
                          }
                        }
                      }

                      v211 = (std::__shared_weak_count *)*((void *)&v260 + 1);
                      if (*((void *)&v260 + 1))
                      {
                        v212 = (unint64_t *)(*((void *)&v260 + 1) + 8LL);
                        do
                          unint64_t v213 = __ldaxr(v212);
                        while (__stlxr(v213 - 1, v212));
                        if (!v213)
                        {
                          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                          std::__shared_weak_count::__release_weak(v211);
                        }
                      }

                      if (v8 == *(void *)a3)
                      {
                        uint64_t v214 = *((void *)a3 - 1);
                        a3 -= 8;
                        unint64_t v8 = v214 + 4096;
                      }

                      v8 -= 16LL;
                      BOOL v202 = v185-- <= 2;
                    }

                    while (!v202);
                  }
                }
              }

              return;
            }

            uint64_t v16 = v15 >> 1;
            uint64_t v17 = sub_10025C760((uint64_t)&v258, v15 >> 1);
            if (v15 < 0x81)
            {
              uint64_t v24 = v8 - *(void *)a3;
              uint64_t v25 = v24 >> 4;
              if (v24 < 17)
              {
                unint64_t v35 = 256 - v25;
                int v27 = &a3[-8 * (v35 >> 8)];
                uint64_t v28 = *(void *)v27 + 16LL * ~(_BYTE)v35;
              }

              else
              {
                unint64_t v26 = v25 - 1;
                int v27 = &a3[8 * (v26 >> 8)];
                uint64_t v28 = *(void *)v27 + 16LL * v26;
              }

              sub_100D05150((uint64_t)v17, v18, (uint64_t)v258, (uint64_t)v259, (uint64_t)v27, v28);
            }

            else
            {
              uint64_t v19 = v8 - *(void *)a3;
              uint64_t v20 = v19 >> 4;
              if (v19 < 17)
              {
                unint64_t v29 = 256 - v20;
                unint64_t v22 = &a3[-8 * (v29 >> 8)];
                uint64_t v23 = *(void *)v22 + 16LL * ~(_BYTE)v29;
              }

              else
              {
                unint64_t v21 = v20 - 1;
                unint64_t v22 = &a3[8 * (v21 >> 8)];
                uint64_t v23 = *(void *)v22 + 16LL * v21;
              }

              sub_100D05150((uint64_t)v11, v10, (uint64_t)v17, (uint64_t)v18, (uint64_t)v22, v23);
              uint64_t v30 = (uint64_t)v259 - *(void *)v258;
              uint64_t v31 = v30 >> 4;
              if (v30 < -15)
              {
                unint64_t v36 = 254 - v31;
                unint64_t v33 = &v258[-8 * (v36 >> 8)];
                uint64_t v34 = (double **)(*(void *)v33 + 16LL * ~(_BYTE)v36);
              }

              else
              {
                unint64_t v32 = v31 + 1;
                unint64_t v33 = &v258[8 * (v32 >> 8)];
                uint64_t v34 = (double **)(*(void *)v33 + 16LL * v32);
              }

              __int16 v38 = sub_10025C760((uint64_t)&v258, v16 - 1);
              uint64_t v39 = v8 - *(void *)a3;
              uint64_t v40 = v39 >> 4;
              if (v39 < 33)
              {
                unint64_t v44 = 257 - v40;
                uint64_t v42 = &a3[-8 * (v44 >> 8)];
                uint64_t v43 = *(void *)v42 + 16LL * ~(_BYTE)v44;
              }

              else
              {
                unint64_t v41 = v40 - 2;
                uint64_t v42 = &a3[8 * (v41 >> 8)];
                uint64_t v43 = *(void *)v42 + 16LL * v41;
              }

              sub_100D05150((uint64_t)v33, v34, (uint64_t)v38, v37, (uint64_t)v42, v43);
              uint64_t v45 = (uint64_t)v259 - *(void *)v258;
              uint64_t v46 = v45 >> 4;
              if (v45 < -31)
              {
                unint64_t v50 = 253 - v46;
                id v48 = &v258[-8 * (v50 >> 8)];
                uint64_t v49 = (double **)(*(void *)v48 + 16LL * ~(_BYTE)v50);
              }

              else
              {
                unint64_t v47 = v46 + 2;
                id v48 = &v258[8 * (v47 >> 8)];
                uint64_t v49 = (double **)(*(void *)v48 + 16LL * v47);
              }

              uint64_t v52 = sub_10025C760((uint64_t)&v258, v16 + 1);
              uint64_t v53 = v8 - *(void *)a3;
              uint64_t v54 = v53 >> 4;
              if (v53 < 49)
              {
                unint64_t v58 = 258 - v54;
                uint64_t v56 = &a3[-8 * (v58 >> 8)];
                uint64_t v57 = *(void *)v56 + 16LL * ~(_BYTE)v58;
              }

              else
              {
                unint64_t v55 = v54 - 3;
                uint64_t v56 = &a3[8 * (v55 >> 8)];
                uint64_t v57 = *(void *)v56 + 16LL * v55;
              }

              sub_100D05150((uint64_t)v48, v49, (uint64_t)v52, v51, (uint64_t)v56, v57);
              __int128 v59 = sub_10025C760((uint64_t)&v258, v16 - 1);
              std::string::size_type v61 = v60;
              __int16 v62 = sub_10025C760((uint64_t)&v258, v16);
              uint64_t v64 = v63;
              __int128 v65 = sub_10025C760((uint64_t)&v258, v16 + 1);
              sub_100D05150((uint64_t)v59, v61, (uint64_t)v62, v64, (uint64_t)v65, v66);
              sub_10025C760((uint64_t)&v258, v16);
              std::string::size_type v67 = v259;
              unsigned __int8 v68 = *v259;
              *v259 = *v69;
              *int v69 = v68;
              __int16 v70 = v67[1];
              v67[1] = v69[1];
              v69[1] = v70;
            }

            --a5;
            if ((a6 & 1) != 0)
            {
              std::string::size_type v72 = v258;
              int v71 = (__int128 *)v259;
              size_t v73 = *v259;
            }

            else
            {
              std::string::size_type v72 = v258;
              int v71 = (__int128 *)v259;
              uint64_t v74 = (uint64_t)v259 - *(void *)v258;
              uint64_t v75 = v74 >> 4;
              if (v74 < 17) {
                double v76 = (double **)(*(void *)&v258[-8 * ((unint64_t)(256 - v75) >> 8)]
              }
                                + 16LL * (v75 - 1));
              else {
                double v76 = (double **)(*(void *)&v258[((unint64_t)(v75 - 1) >> 5) & 0x7FFFFFFFFFFFFF8LL]
              }
                                + 16LL * (v75 - 1));
              double v77 = **v76;
              size_t v73 = *v259;
              if (v77 >= **v259)
              {
                __int128 v117 = v259[1];
                *(void *)&__int128 v262 = *v259;
                *((void *)&v262 + 1) = v117;
                *v259 = 0LL;
                *((void *)v71 + 1) = 0LL;
                uint64_t v118 = *(double ***)a3;
                uint64_t v119 = v8 - *(void *)a3;
                uint64_t v120 = v119 >> 4;
                if (v119 < 17) {
                  __int16 v121 = (double **)(*(void *)&a3[-8 * ((unint64_t)(256 - v120) >> 8)]
                }
                                   + 16LL * (v120 - 1));
                else {
                  __int16 v121 = (double **)(*(void *)&a3[((unint64_t)(v120 - 1) >> 5) & 0x7FFFFFFFFFFFFF8LL]
                }
                                   + 16LL * (v120 - 1));
                double v125 = *v73;
                char v126 = *(double ***)v72;
                uint64_t v10 = (double **)v71;
                if (v125 >= **v121)
                {
                  do
                  {
                    v10 += 2;
                    if ((char *)v10 - (char *)v126 == 4096)
                    {
                      uint64_t v128 = (double **)*((void *)v72 + 1);
                      v72 += 8;
                      char v126 = v128;
                      uint64_t v10 = v128;
                    }
                  }

                  while ((v72 < a3 || v72 == a3 && (unint64_t)v10 < v8) && v125 >= **v10);
                }

                else
                {
                  do
                  {
                    v10 += 2;
                    if ((char *)v10 - (char *)v126 == 4096)
                    {
                      uint64_t v127 = (double **)*((void *)v72 + 1);
                      v72 += 8;
                      char v126 = v127;
                      uint64_t v10 = v127;
                    }
                  }

                  while (v125 >= **v10);
                }

                if (v72 < a3
                  || (uint64_t v129 = a3, v130 = (double **)v8, v72 == a3)
                  && (uint64_t v129 = a3, v130 = (double **)v8, (unint64_t)v10 < v8))
                {
                  uint64_t v129 = a3;
                  __int16 v130 = (double **)v8;
                  do
                  {
                    if (v130 == v118)
                    {
                      int v131 = (double **)*((void *)v129 - 1);
                      v129 -= 8;
                      uint64_t v118 = v131;
                      __int16 v130 = v131 + 512;
                    }

                    __int16 v132 = *(v130 - 2);
                    v130 -= 2;
                  }

                  while (v125 < *v132);
                }

                while (v72 < v129 || v72 == v129 && v10 < v130)
                {
                  v133 = *v10;
                  *uint64_t v10 = *v130;
                  *__int16 v130 = v133;
                  __int16 v134 = v10[1];
                  v10[1] = v130[1];
                  v130[1] = v134;
                  double v135 = *(double *)v262;
                  char v126 = *(double ***)v72;
                  do
                  {
                    v10 += 2;
                    if ((char *)v10 - (char *)v126 == 4096)
                    {
                      __int16 v136 = (double **)*((void *)v72 + 1);
                      v72 += 8;
                      char v126 = v136;
                      uint64_t v10 = v136;
                    }
                  }

                  while (v135 >= **v10);
                  uint64_t v137 = *(double ***)v129;
                  do
                  {
                    if (v130 == v137)
                    {
                      std::string v138 = (double **)*((void *)v129 - 1);
                      v129 -= 8;
                      uint64_t v137 = v138;
                      __int16 v130 = v138 + 512;
                    }

                    std::string v139 = *(v130 - 2);
                    v130 -= 2;
                  }

                  while (v135 < *v139);
                }

                uint64_t v140 = (char *)v10 - (char *)v126;
                uint64_t v141 = ((char *)v10 - (char *)v126) >> 4;
                if (v140 < 17) {
                  int64_t v142 = (__int128 *)(*(void *)&v72[-8 * ((unint64_t)(256 - v141) >> 8)]
                }
                                    + 16LL * (v141 - 1));
                else {
                  int64_t v142 = (__int128 *)(*(void *)&v72[((unint64_t)(v141 - 1) >> 5) & 0x7FFFFFFFFFFFFF8LL]
                }
                                    + 16LL * (v141 - 1));
                if (v142 != v71) {
                  sub_10005F550((uint64_t)v71, v142);
                }
                sub_10005F550((uint64_t)v142, &v262);
                v143 = (std::__shared_weak_count *)*((void *)&v262 + 1);
                if (*((void *)&v262 + 1))
                {
                  v144 = (unint64_t *)(*((void *)&v262 + 1) + 8LL);
                  do
                    unint64_t v145 = __ldaxr(v144);
                  while (__stlxr(v145 - 1, v144));
                  if (!v145)
                  {
                    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                    std::__shared_weak_count::__release_weak(v143);
                  }
                }

                a6 = 0;
                v258 = v72;
                goto LABEL_141;
              }
            }

            uint64_t v78 = *((void *)v71 + 1);
            *(void *)&__int128 v262 = v73;
            *((void *)&v262 + 1) = v78;
            *(void *)int v71 = 0LL;
            *((void *)v71 + 1) = 0LL;
            double v79 = *v73;
            int v80 = *(double ***)v72;
            int v81 = (double **)v71;
            do
            {
              v81 += 2;
              if ((char *)v81 - (char *)v80 == 4096)
              {
                std::string::size_type v82 = (double **)*((void *)v72 + 1);
                v72 += 8;
                int v80 = v82;
                int v81 = v82;
              }

              size_t v83 = *v81;
            }

            while (**v81 < v79);
            uint64_t v84 = ((char *)v81 - (char *)v80) >> 4;
            else {
              uint64_t v85 = *(void *)&v72[((unint64_t)(v84 - 1) >> 5) & 0x7FFFFFFFFFFFFF8LL]
            }
                  + 16LL * (v84 - 1);
            uint64_t v86 = a3;
            std::string::size_type v87 = (double **)v8;
            if ((__int128 *)v85 == v71)
            {
              do
              {
                if (v72 >= v86 && (v72 != v86 || v81 >= v87)) {
                  break;
                }
                if (v87 == *(double ***)v86)
                {
                  uint64_t v91 = *((void *)v86 - 1);
                  v86 -= 8;
                  std::string::size_type v87 = (double **)(v91 + 4096);
                }

                __int128 v92 = *(v87 - 2);
                v87 -= 2;
              }

              while (*v92 >= v79);
            }

            else
            {
              uint64_t v88 = *(double ***)a3;
              uint64_t v86 = a3;
              std::string::size_type v87 = (double **)v8;
              do
              {
                if (v87 == v88)
                {
                  __int128 v89 = (double **)*((void *)v86 - 1);
                  v86 -= 8;
                  uint64_t v88 = v89;
                  std::string::size_type v87 = v89 + 512;
                }

                int v90 = *(v87 - 2);
                v87 -= 2;
              }

              while (*v90 >= v79);
            }

            BOOL v94 = v72 != v86 || v81 >= v87;
            BOOL v95 = v72 >= v86 && v94;
            while (v72 < v86 || v72 == v86 && v81 < v87)
            {
              const char *v81 = *v87;
              *std::string::size_type v87 = v83;
              BOOL v96 = v81[1];
              v81[1] = v87[1];
              v87[1] = v96;
              double v97 = *(double *)v262;
              int v80 = *(double ***)v72;
              do
              {
                v81 += 2;
                if ((char *)v81 - (char *)v80 == 4096)
                {
                  std::string::size_type v98 = (double **)*((void *)v72 + 1);
                  v72 += 8;
                  int v80 = v98;
                  int v81 = v98;
                }

                size_t v83 = *v81;
              }

              while (**v81 < v97);
              std::string::size_type v99 = *(double ***)v86;
              do
              {
                if (v87 == v99)
                {
                  unsigned __int8 v100 = (double **)*((void *)v86 - 1);
                  v86 -= 8;
                  std::string::size_type v99 = v100;
                  std::string::size_type v87 = v100 + 512;
                }

                size_t v101 = *(v87 - 2);
                v87 -= 2;
              }

              while (*v101 >= v97);
            }

            uint64_t v102 = (char *)v81 - (char *)v80;
            uint64_t v103 = v102 >> 4;
            if (v102 < 17)
            {
              unint64_t v107 = 256 - v103;
              std::string::size_type v105 = &v72[-8 * (v107 >> 8)];
              uint64_t v106 = (__int128 *)(*(void *)v105 + 16LL * ~(_BYTE)v107);
            }

            else
            {
              unint64_t v104 = v103 - 1;
              std::string::size_type v105 = &v72[8 * (v104 >> 8)];
              uint64_t v106 = (__int128 *)(*(void *)v105 + 16LL * v104);
            }

            if (v106 != v71) {
              sub_10005F550((uint64_t)v71, v106);
            }
            sub_10005F550((uint64_t)v106, &v262);
            double v108 = (std::__shared_weak_count *)*((void *)&v262 + 1);
            if (!*((void *)&v262 + 1)) {
              goto LABEL_82;
            }
            __int128 v109 = (unint64_t *)(*((void *)&v262 + 1) + 8LL);
            do
              unint64_t v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
              if (!v95) {
                goto LABEL_95;
              }
            }

            else
            {
LABEL_82:
              if (!v95) {
                goto LABEL_95;
              }
            }

            BOOL v111 = sub_100D05224(v258, (uint64_t)v259, v105, (uint64_t)v106);
            uint64_t v112 = (uint64_t)v106 - *(void *)v105;
            uint64_t v113 = v112 >> 4;
            if (v112 < -15)
            {
              unint64_t v122 = 254 - v113;
              std::string::size_type v115 = &v105[-8 * (v122 >> 8)];
              uint64_t v116 = *(void *)v115 + 16LL * ~(_BYTE)v122;
            }

            else
            {
              unint64_t v114 = v113 + 1;
              std::string::size_type v115 = &v105[8 * (v114 >> 8)];
              uint64_t v116 = *(void *)v115 + 16LL * v114;
            }

            if (sub_100D05224(v115, v116, a3, v8))
            {
              if (v111) {
                return;
              }
              uint64_t v10 = v259;
              a3 = v105;
              unint64_t v8 = (unint64_t)v106;
              goto LABEL_142;
            }

            if (v111)
            {
              uint64_t v10 = (double **)(v106 + 1);
              if ((__int128 *)((char *)v106 - *(void *)v105 + 16) == (__int128 *)4096)
              {
                int v123 = (double **)*((void *)v105 + 1);
                v105 += 8;
                uint64_t v10 = v123;
              }

void sub_100D050F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_100D05150(uint64_t a1, double **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(double **)a4;
  double v7 = **(double **)a4;
  unint64_t v8 = *a2;
  __int128 v9 = *(double **)a6;
  double v10 = **(double **)a6;
  if (v7 < **a2)
  {
    if (v10 >= v7)
    {
      *a2 = v6;
      *(void *)a4 = v8;
      unint64_t v16 = a2[1];
      a2[1] = *(double **)(a4 + 8);
      *(void *)(a4 + 8) = v16;
      uint64_t v17 = *(double **)a4;
      *(void *)a4 = *(void *)a6;
      *(void *)a6 = v17;
      uint64_t v12 = (uint64_t *)(a6 + 8);
      uint64_t v11 = (uint64_t *)(a4 + 8);
    }

    else
    {
      *a2 = v9;
      uint64_t v11 = (uint64_t *)(a2 + 1);
      *(void *)a6 = v8;
      uint64_t v12 = (uint64_t *)(a6 + 8);
    }

    uint64_t v13 = v12;
    goto LABEL_10;
  }

  if (v10 < v7)
  {
    *(void *)a4 = v9;
    *(void *)a6 = v6;
    uint64_t v13 = (uint64_t *)(a4 + 8);
    uint64_t v14 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a6 + 8);
    *(void *)(a6 + 8) = v14;
    unint64_t v15 = *a2;
    if (**(double **)a4 < **a2)
    {
      *a2 = *(double **)a4;
      uint64_t v11 = (uint64_t *)(a2 + 1);
      *(void *)a4 = v15;
LABEL_10:
      uint64_t v18 = *v11;
      *uint64_t v11 = *v13;
      *uint64_t v13 = v18;
    }
  }

BOOL sub_100D05224(char *a1, uint64_t a2, char *a3, uint64_t a4)
{
  if (a4 != a2)
  {
    uint64_t v4 = a4;
    uint64_t v5 = (uint64_t)a3;
    uint64_t v7 = *(void *)a3;
    uint64_t v8 = a2 - *(void *)a1;
    uint64_t v9 = v8 >> 4;
    BOOL v10 = 1;
    switch(((a4 - *(void *)a3) >> 4) + 32 * (a3 - a1) - (v8 >> 4))
    {
      case 0LL:
      case 1LL:
        return v10;
      case 2LL:
        if (v7 == a4) {
          uint64_t v4 = *((void *)a3 - 1) + 4096LL;
        }
        uint64_t v11 = *(double **)(v4 - 16);
        uint64_t v12 = *(double **)a2;
        if (*v11 < **(double **)a2)
        {
          *(void *)a2 = v11;
          *(void *)(v4 - 16) = v12;
          uint64_t v13 = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = *(void *)(v4 - 8);
          *(void *)(v4 - 8) = v13;
        }

        return v10;
      case 3LL:
        if (v8 < -15)
        {
          unint64_t v27 = 254 - v9;
          unint64_t v15 = &a1[-8 * (v27 >> 8)];
          uint64_t v16 = *(void *)v15 + 16LL * ~(_BYTE)v27;
        }

        else
        {
          unint64_t v14 = v9 + 1;
          unint64_t v15 = &a1[8 * (v14 >> 8)];
          uint64_t v16 = *(void *)v15 + 16LL * v14;
        }

        if (v7 == v4)
        {
          uint64_t v28 = *(void *)(v5 - 8);
          v5 -= 8LL;
          uint64_t v4 = v28 + 4096;
        }

        sub_100D05150((uint64_t)a1, (double **)a2, (uint64_t)v15, v16, v5, v4 - 16);
        return v10;
      case 4LL:
        if (v8 >= -15)
        {
          unint64_t v21 = &a1[8 * ((unint64_t)(v9 + 1) >> 8)];
          unint64_t v22 = (double **)(*(void *)v21 + 16LL * (v9 + 1));
          unint64_t v23 = v9 + 2;
LABEL_35:
          uint64_t v45 = &a1[8 * (v23 >> 8)];
          uint64_t v46 = (double **)(*(void *)v45 + 16LL * v23);
          goto LABEL_71;
        }

        unint64_t v21 = &a1[-8 * ((unint64_t)(254 - v9) >> 8)];
        unint64_t v22 = (double **)(*(void *)v21 + 16LL * ~(-2 - v9));
        if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFE1LL)
        {
          unint64_t v23 = 1LL;
          goto LABEL_35;
        }

        unint64_t v65 = 253 - v9;
        uint64_t v45 = &a1[-8 * (v65 >> 8)];
        uint64_t v46 = (double **)(*(void *)v45 + 16LL * ~(_BYTE)v65);
LABEL_71:
        if (v7 == v4)
        {
          uint64_t v66 = *(void *)(v5 - 8);
          v5 -= 8LL;
          uint64_t v4 = v66 + 4096;
        }

        sub_100D057BC((uint64_t)a1, (double **)a2, (uint64_t)v21, v22, (uint64_t)v45, v46, v5, (double **)(v4 - 16));
        return v10;
      case 5LL:
        if (v8 >= -15)
        {
          uint64_t v24 = &a1[8 * ((unint64_t)(v9 + 1) >> 8)];
          uint64_t v25 = *(void *)v24 + 16LL * (v9 + 1);
          unint64_t v26 = v9 + 2;
LABEL_22:
          unint64_t v29 = &a1[8 * (v26 >> 8)];
          uint64_t v30 = *(void *)v29 + 16LL * v26;
          unint64_t v31 = v9 + 3;
LABEL_23:
          unint64_t v32 = &a1[8 * (v31 >> 8)];
          uint64_t v33 = *(void *)v32 + 16LL * v31;
          goto LABEL_24;
        }

        uint64_t v24 = &a1[-8 * ((unint64_t)(254 - v9) >> 8)];
        uint64_t v25 = *(void *)v24 + 16LL * ~(-2 - v9);
        if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFE1LL)
        {
          unint64_t v26 = 1LL;
          goto LABEL_22;
        }

        unint64_t v29 = &a1[-8 * ((unint64_t)(253 - v9) >> 8)];
        uint64_t v30 = *(void *)v29 + 16LL * ~(-3 - v9);
        if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFD1LL)
        {
          unint64_t v31 = 1LL;
          goto LABEL_23;
        }

        unint64_t v67 = 252 - v9;
        unint64_t v32 = &a1[-8 * (v67 >> 8)];
        uint64_t v33 = *(void *)v32 + 16LL * ~(_BYTE)v67;
LABEL_24:
        if (v7 == a4) {
          uint64_t v4 = *(void *)(v5 - 8) + 4096LL;
        }
        sub_100D057BC( (uint64_t)a1,  (double **)a2,  (uint64_t)v24,  (double **)v25,  (uint64_t)v29,  (double **)v30,  (uint64_t)v32,  (double **)v33);
        uint64_t v34 = *(double **)(v4 - 16);
        unint64_t v35 = *(double **)v33;
        if (*v34 < **(double **)v33)
        {
          *(void *)uint64_t v33 = v34;
          *(void *)(v4 - 16) = v35;
          uint64_t v36 = *(void *)(v33 + 8);
          *(void *)(v33 + 8) = *(void *)(v4 - 8);
          *(void *)(v4 - 8) = v36;
          uint64_t v37 = *(double **)v30;
          if (**(double **)v33 < **(double **)v30)
          {
            *(void *)uint64_t v30 = *(void *)v33;
            *(void *)uint64_t v33 = v37;
            uint64_t v38 = *(void *)(v30 + 8);
            *(void *)(v30 + 8) = *(void *)(v33 + 8);
            *(void *)(v33 + 8) = v38;
            uint64_t v39 = *(double **)v25;
            if (**(double **)v30 < **(double **)v25)
            {
              *(void *)uint64_t v25 = *(void *)v30;
              *(void *)uint64_t v30 = v39;
              uint64_t v40 = *(void *)(v25 + 8);
              *(void *)(v25 + 8) = *(void *)(v30 + 8);
              *(void *)(v30 + 8) = v40;
              unint64_t v41 = *(double **)a2;
              if (**(double **)v25 < **(double **)a2)
              {
                *(void *)a2 = *(void *)v25;
                *(void *)uint64_t v25 = v41;
                uint64_t v42 = *(void *)(a2 + 8);
                *(void *)(a2 + 8) = *(void *)(v25 + 8);
                *(void *)(v25 + 8) = v42;
              }
            }
          }
        }

        return v10;
      default:
        if (v8 <= -32)
        {
          uint64_t v17 = &a1[-8 * ((unint64_t)(253 - v9) >> 8)];
          uint64_t v18 = (__int128 *)(*(void *)v17 + 16LL * ~(-3 - v9));
          unint64_t v20 = 254 - v9;
        }

        else
        {
          uint64_t v17 = &a1[8 * ((unint64_t)(v9 + 2) >> 8)];
          uint64_t v18 = (__int128 *)(*(void *)v17 + 16LL * (v9 + 2));
          unint64_t v19 = v9 + 1;
          if (v9 != -1)
          {
            uint64_t v43 = &a1[8 * (v19 >> 8)];
            uint64_t v44 = *(void *)v43 + 16LL * v19;
            goto LABEL_39;
          }

          unint64_t v20 = 255LL;
        }

        uint64_t v43 = &a1[-8 * (v20 >> 8)];
        uint64_t v44 = *(void *)v43 + 16LL * ~(_BYTE)v20;
LABEL_39:
        sub_100D05150((uint64_t)a1, (double **)a2, (uint64_t)v43, v44, (uint64_t)v17, (uint64_t)v18);
        uint64_t v47 = (uint64_t)v18 - *(void *)v17;
        uint64_t v48 = v47 >> 4;
        if (v47 < -15)
        {
          unint64_t v51 = 254 - v48;
          unsigned __int8 v49 = ~(_BYTE)v51;
          unint64_t v50 = &v17[-8 * (v51 >> 8)];
        }

        else
        {
          unsigned __int8 v49 = v48 + 1;
          unint64_t v50 = &v17[8 * ((unint64_t)(v48 + 1) >> 8)];
        }

        uint64_t v52 = *(__int128 **)v50;
        uint64_t v53 = (__int128 *)(*(void *)v50 + 16LL * v49);
        int v54 = 0;
        while (1)
        {
          if (**(double **)v53 >= **(double **)v18)
          {
            uint64_t v18 = v53;
            uint64_t v17 = v50;
          }

          else
          {
            uint64_t v55 = *((void *)v53 + 1);
            *(void *)&__int128 v68 = *(void *)v53;
            *((void *)&v68 + 1) = v55;
            *(void *)uint64_t v53 = 0LL;
            *((void *)v53 + 1) = 0LL;
            uint64_t v56 = (uint64_t)v53;
            while (1)
            {
              uint64_t v57 = (uint64_t)v18;
              sub_10005F550(v56, v18);
              if (v18 == *(__int128 **)v17)
              {
                uint64_t v58 = *((void *)v17 - 1);
                v17 -= 8;
                uint64_t v18 = (__int128 *)(v58 + 4096);
              }

              __int128 v59 = (double *)*((void *)v18-- - 2);
              uint64_t v56 = v57;
            }

            uint64_t v57 = a2;
LABEL_53:
            sub_10005F550(v57, &v68);
            if (++v54 == 8)
            {
              uint64_t v18 = v53 + 1;
              if ((__int128 *)((char *)v53 - *(void *)v50 + 16) == (__int128 *)4096)
              {
                int v60 = (__int128 *)*((void *)v50 + 1);
                v50 += 8;
                uint64_t v18 = v60;
              }

              BOOL v10 = v18 == (__int128 *)v4;
            }

            else
            {
              uint64_t v18 = v53;
            }

            uint64_t v17 = v50;
            std::string::size_type v61 = (std::__shared_weak_count *)*((void *)&v68 + 1);
            if (*((void *)&v68 + 1))
            {
              __int16 v62 = (unint64_t *)(*((void *)&v68 + 1) + 8LL);
              do
                unint64_t v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }

            if (v54 == 8) {
              return v10;
            }
            uint64_t v52 = *(__int128 **)v50;
          }

          uint64_t v53 = v18 + 1;
          if ((char *)(v18 + 1) - (char *)v52 == 4096)
          {
            unint64_t v50 = v17 + 8;
            uint64_t v52 = (__int128 *)*((void *)v17 + 1);
            uint64_t v53 = v52;
          }
        }
    }
  }

  return 1;
}

void sub_100D057BC( uint64_t a1, double **a2, uint64_t a3, double **a4, uint64_t a5, double **a6, uint64_t a7, double **a8)
{
  uint64_t v12 = *a6;
  if (**a8 < **a6)
  {
    *a6 = *a8;
    *a8 = v12;
    uint64_t v13 = a6[1];
    a6[1] = a8[1];
    a8[1] = v13;
    unint64_t v14 = *a4;
    if (**a6 < **a4)
    {
      *a4 = *a6;
      *a6 = v14;
      unint64_t v15 = a4[1];
      a4[1] = a6[1];
      a6[1] = v15;
      uint64_t v16 = *a2;
      if (**a4 < **a2)
      {
        *a2 = *a4;
        *a4 = v16;
        uint64_t v17 = a2[1];
        a2[1] = a4[1];
        a4[1] = v17;
      }
    }
  }

void sub_100D05880(char *a1, __int128 *a2, uint64_t a3, char *a4, __int128 *a5)
{
  uint64_t v5 = a5;
  v28[0] = a1;
  v28[1] = a2;
  if (a2 == a5) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = (((uint64_t)a5 - *(void *)a4) >> 4) + 32 * (a4 - a1) - (((uint64_t)a2 - *(void *)a1) >> 4);
  }
  unint64_t v8 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= v7)
    {
      uint64_t v10 = 2 * v7;
      uint64_t v11 = (2 * v7) | 1;
      uint64_t v12 = sub_10025C760((uint64_t)v28, v11);
      if (v10 + 2 < a3)
      {
        uint64_t v14 = (uint64_t)v13 - *v12;
        uint64_t v15 = v14 >> 4;
        uint64_t v16 = (double **)(v14 < -15
                        ? v12[-((unint64_t)(254 - v15) >> 8)] + 16LL * ~(-2 - v15)
        if (**(double **)v13 < **v16)
        {
          uint64_t v11 = v10 + 2;
        }
      }

      if (**(double **)v13 >= **(double **)v5)
      {
        uint64_t v17 = *((void *)v5 + 1);
        *(void *)&__int128 v27 = *(void *)v5;
        *((void *)&v27 + 1) = v17;
        *(void *)uint64_t v5 = 0LL;
        *((void *)v5 + 1) = 0LL;
        do
        {
          uint64_t v18 = (uint64_t)v5;
          uint64_t v5 = v13;
          sub_10005F550(v18, v13);
          if (v9 < v11) {
            break;
          }
          uint64_t v19 = (2 * v11) | 1;
          unint64_t v20 = sub_10025C760((uint64_t)v28, v19);
          if (2 * v11 + 2 < a3)
          {
            uint64_t v21 = (uint64_t)v13 - *v20;
            uint64_t v22 = v21 >> 4;
            unint64_t v23 = (double **)(v21 < -15
                            ? v20[-((unint64_t)(254 - v22) >> 8)] + 16LL * ~(-2 - v22)
            if (**(double **)v13 < **v23)
            {
              uint64_t v19 = 2 * v11 + 2;
            }
          }

          uint64_t v11 = v19;
        }

        while (**(double **)v13 >= *(double *)v27);
        sub_10005F550((uint64_t)v5, &v27);
        uint64_t v24 = (std::__shared_weak_count *)*((void *)&v27 + 1);
        if (*((void *)&v27 + 1))
        {
          uint64_t v25 = (unint64_t *)(*((void *)&v27 + 1) + 8LL);
          do
            unint64_t v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
    }
  }

void sub_100D05AD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100D05AE4()
{
  qword_10199DCA8 = 0LL;
  qword_10199DCB0 = 0LL;
  qword_10199DCB8 = 0LL;
  unsigned __int8 v0 = operator new(0x44uLL);
  qword_10199DCB0 = (uint64_t)(v0 + 17);
  qword_10199DCB8 = (uint64_t)(v0 + 17);
  v0[16] = 1189765120;
  *(_OWORD *)unsigned __int8 v0 = xmmword_10135B410;
  *((_OWORD *)v0 + 1) = unk_10135B420;
  *((_OWORD *)v0 + 2) = xmmword_10135B430;
  *((_OWORD *)v0 + 3) = unk_10135B440;
  qword_10199DCA8 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199DCA8, (void *)&_mh_execute_header);
  qword_10199DCC8 = 0LL;
  unk_10199DCD0 = 0LL;
  qword_10199DCC0 = 0LL;
  uint64_t v1 = operator new(0x30uLL);
  qword_10199DCC8 = (uint64_t)(v1 + 3);
  unk_10199DCD0 = v1 + 3;
  _OWORD *v1 = xmmword_10135B454;
  v1[1] = unk_10135B464;
  v1[2] = xmmword_10135B474;
  qword_10199DCC0 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199DCC0, (void *)&_mh_execute_header);
}

uint64_t sub_100D05BB4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = sub_100C6AAF0(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = off_10187F540;
  *(_BYTE *)(v6 + 41) = 0;
  *(void *)(v6 + 48) = 0LL;
  *(_DWORD *)(v6 + 56) = 3;
  sub_1002F0B04(&v13);
  int v7 = sub_1002A7CB0(v13, "OnBodyStatusOverride", &v15);
  int v8 = v7;
  uint64_t v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v8) {
        return a1;
      }
      goto LABEL_6;
    }
  }

  if (v7)
  {
LABEL_6:
    *(_BYTE *)(a1 + 41) = 1;
    *(_DWORD *)(a1 + 56) = v15;
  }

  return a1;
}

void sub_100D05C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100C6AB50(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100D05CBC(void *a1)
{
  *a1 = off_10187F540;
  uint64_t v2 = a1[6];
  a1[6] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return sub_100C6AB50((uint64_t)a1);
}

void sub_100D05D00(void *a1)
{
  *a1 = off_10187F540;
  uint64_t v2 = a1[6];
  a1[6] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  BOOL v3 = (void *)sub_100C6AB50((uint64_t)a1);
  operator delete(v3);
}

void *sub_100D05D48@<X0>(uint64_t a1@<X8>)
{
  v11[0] = &off_10187F5E0;
  v11[1] = sub_100D05FBC;
  v11[2] = 0LL;
  uint64_t v12 = v11;
  sub_1010DDBC0(v13, "kCLConnectionMessageOnBodyDetection");
  sub_10089CA48((uint64_t)&v14, (uint64_t)v11);
  v9[0] = &off_10187F690;
  v9[1] = sub_100D06280;
  _DWORD v9[2] = 0LL;
  uint64_t v10 = v9;
  sub_1010DDBC0(v15, "kCLConnectionMessageOnBodyDetectionParams");
  sub_10089CA48((uint64_t)v16, (uint64_t)v9);
  sub_100D07290(a1, (unsigned __int8 *)v13, 2LL);
  for (uint64_t i = 0LL; i != -14; i -= 7LL)
  {
    BOOL v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      BOOL v3 = &v16[i * 8];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0) {
      operator delete((void *)v15[i]);
    }
  }

  uint64_t v5 = v10;
  if (v10 == v9)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v10)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  uint64_t result = v12;
  if (v12 == v11)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v11;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  else if (v12)
  {
    uint64_t v8 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  return result;
}

void sub_100D05EEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  for (uint64_t i = 56LL; i != -56; i -= 56LL)
    sub_10026E430(v17 + i);
  unint64_t v20 = a13;
  if (a13 == &a10)
  {
    uint64_t v21 = 4LL;
    unint64_t v20 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_8;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_8:
  uint64_t v22 = a17;
  if (a17 == &a14)
  {
    uint64_t v23 = 4LL;
    uint64_t v22 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_13;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_100D05FBC(uint64_t a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934700 != -1) {
    dispatch_once(&qword_101934700, &stru_10187F590);
  }
  uint64_t v5 = (os_log_s *)qword_101934708;
  if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Received OnBodyDetection request,client,%@,subscribe,%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_10187F590);
    }
    uint64_t v11 = *(void *)(a1 + 24);
    int v14 = 138412546;
    uint64_t v15 = v11;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934708,  2LL,  "Received OnBodyDetection request,client,%@,subscribe,%d",  &v14,  18);
    uint64_t v13 = (char *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOnBodyDetectionSubscription::handleRequestOnBodyDetection(BOOL, const CLNameValuePair &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  if (sub_100D0693C(a1))
  {
    sub_100C6AC8C(a1);
    uint64_t v7 = *(void *)(a1 + 48);
    if (a2)
    {
      if (!v7)
      {
        sub_1009011CC((uint64_t)sub_100D06B50, a1, *(void **)(a1 + 8), buf);
        uint64_t v8 = *(void *)buf;
        *(void *)buf = 0LL;
        uint64_t v9 = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = v8;
        if (v9)
        {
          (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
          uint64_t v10 = *(void *)buf;
          *(void *)buf = 0LL;
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
          }
        }

        [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:0 registrationInfo:0];
      }
    }

    else if (v7)
    {
      *(void *)(a1 + 48) = 0LL;
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }
}

void sub_100D0624C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100D06280(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934700 != -1) {
    dispatch_once(&qword_101934700, &stru_10187F590);
  }
  uint64_t v5 = (os_log_s *)qword_101934708;
  if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_10187F590);
    }
    v14[0] = 0;
    _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, qword_101934708, 2LL, "", v14, 2);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOnBodyDetectionSubscription::handleMessageOnBodyDetectionParams(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  if (sub_100D0693C(a1))
  {
    uint64_t Dictionary = CLConnectionMessage::getDictionary(*a2);
    if (Dictionary)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      uint64_t v13[2] = sub_100D06D20;
      void v13[3] = &unk_101840D20;
      v13[4] = Dictionary;
      sub_100901294((uint64_t)v13);
    }

    else
    {
      if (qword_101934700 != -1) {
        dispatch_once(&qword_101934700, &stru_10187F590);
      }
      uint64_t v7 = (os_log_s *)qword_101934708;
      if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Wrong parameters were passed!", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934700 != -1) {
          dispatch_once(&qword_101934700, &stru_10187F590);
        }
        v14[0] = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934708,  17LL,  "Wrong parameters were passed!",  v14,  v12);
        uint64_t v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLOnBodyDetectionSubscription::handleMessageOnBodyDetectionParams(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }
    }
  }
}

void sub_100D065AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100D065E0(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  int v6 = *(unsigned __int8 *)(a1 + 41);
  id v7 = objc_alloc(&OBJC_CLASS___CMOnBodyStatus);
  if (v6)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 56);
    double v9 = a4[1];
    uint64_t v10 = 1LL;
  }

  else
  {
    uint64_t v8 = *(unsigned int *)a4;
    uint64_t v10 = *((unsigned int *)a4 + 1);
    double v9 = a4[1];
  }

  id v11 = [v7 initWithOnBodyResult:v8 confidence:v10 timestamp:v9];
  uint64_t v35 = CMOnBodyStatusData;
  id v36 = v11;
  uint64_t v22 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL);

  sub_100D06894(a1, &v22);
  if (qword_101934700 != -1) {
    dispatch_once(&qword_101934700, &stru_10187F590);
  }
  uint64_t v12 = (os_log_s *)qword_101934708;
  if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 41)) {
      uint64_t v13 = " overridden";
    }
    else {
      uint64_t v13 = "";
    }
    uint64_t v14 = *(void *)(a1 + 24);
    id v15 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
    *(_DWORD *)buf = 136315650;
    uint64_t v30 = v13;
    __int16 v31 = 2112;
    uint64_t v32 = v14;
    __int16 v33 = 2080;
    id v34 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Sent%s onBodyDetection message to %@, %s",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_10187F590);
    }
    uint64_t v16 = qword_101934708;
    if (*(_BYTE *)(a1 + 41)) {
      int v17 = " overridden";
    }
    else {
      int v17 = "";
    }
    uint64_t v18 = *(void *)(a1 + 24);
    id v19 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
    int v23 = 136315650;
    uint64_t v24 = v17;
    __int16 v25 = 2112;
    uint64_t v26 = v18;
    __int16 v27 = 2080;
    id v28 = v19;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "Sent%s onBodyDetection message to %@, %s",  &v23,  32);
    uint64_t v21 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOnBodyDetectionSubscription::onOnBodyNotification(int, const CLOnBodyNotifier_Type::Notification &, const C LOnBodyNotifier_Type::NotificationData &)",  "%s\n",  v20);
    if (v21 != buf) {
      free(v21);
    }
  }

void sub_100D06894(uint64_t a1, void *a2)
{
  BOOL v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100D06928(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100D0693C(uint64_t a1)
{
  uint64_t v2 = sub_100C6AC9C(a1);
  uint64_t v3 = v2;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0) {
      return v3;
    }
  }

  else if ((v2 & 1) != 0)
  {
    return v3;
  }

  if (qword_101934700 != -1) {
    dispatch_once(&qword_101934700, &stru_10187F590);
  }
  uint64_t v4 = (os_log_s *)qword_101934708;
  if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(_DWORD *)std::string __p = 138412290;
    *(void *)&__p[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have appropriate entitlement to access on body detection SPI",  __p,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_10187F590);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    int v10 = 138412290;
    uint64_t v11 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934708,  0LL,  "#Warning Client %@ does not have appropriate entitlement to access on body detection SPI",  &v10,  12);
    double v9 = (char *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLOnBodyDetectionSubscription::isEntitledForOnBodyDetection()",  "%s\n",  v8);
    if (v9 != __p) {
      free(v9);
    }
  }

  return v3;
}

void sub_100D06B2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D06B50(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187F5B0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLOnBodyDetectionSubscription::onOnBodyNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187F5B0);
    }
    double v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLOnBodyDetectionSubscription::onOnBodyNotification, event:%{public, location:escap e_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D065E0(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D06D00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D06D20(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 208LL))(a2, *(void *)(a1 + 32));
}

void sub_100D06D38(id a1)
{
  qword_101934708 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_100D06D64(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

__n128 sub_100D06D90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10187F5E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100D06DCC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187F5E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100D06DF0(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_100D06DF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100D06E34()
{
}

void sub_100D06E40(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100D06EC4(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100D06EAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D06EC4(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    int v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187F650);
    }
    char v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10187F650);
      }
    }

    uint64_t v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_100D070A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100D070C4(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100D070F0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10187F690;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100D0712C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187F690;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100D07150(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100D07158(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100D07194()
{
}

void sub_100D071A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  id v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    unint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  int v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  int v10 = v17;
  if (v17)
  {
    char v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    int v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100D07274( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100D07290(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100D07308(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100D072F4(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100D07308(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100D07588(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100D07570(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100D07588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100D075FC(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100D075E4(_Unwind_Exception *a1)
{
}

void *sub_100D075FC(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100D07654(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100D07A90(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 44) |= 4u;
        unint64_t v13 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7LL && v13 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0LL;
        }

        uint64_t v36 = 24LL;
        goto LABEL_69;
      case 2u:
        *(_BYTE *)(a1 + 44) |= 1u;
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 <= 0xFFFFFFFFFFFFFFF7LL && v16 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0LL;
        }

        uint64_t v36 = 8LL;
        goto LABEL_69;
      case 3u:
        *(_BYTE *)(a1 + 44) |= 2u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7LL && v17 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0LL;
        }

        uint64_t v36 = 16LL;
LABEL_69:
        *(void *)(a1 + v36) = v14;
        continue;
      case 4u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0LL;
        *(_BYTE *)(a1 + 44) |= 0x10u;
        while (2)
        {
          uint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v22 = v21 + 1;
          if (v21 == -1 || v22 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v23 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              BOOL v10 = v19++ >= 9;
              if (v10)
              {
                LODWORD(v20) = 0;
                goto LABEL_53;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v20) = 0;
        }
LABEL_53:
        uint64_t v35 = 36LL;
        goto LABEL_62;
      case 5u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0LL;
        *(_BYTE *)(a1 + 44) |= 0x20u;
        while (2)
        {
          uint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v28 = v27 + 1;
          if (v27 == -1 || v28 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              BOOL v10 = v25++ >= 9;
              if (v10)
              {
                uint64_t v26 = 0LL;
                goto LABEL_57;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v26 = 0LL;
        }
LABEL_57:
        *(_BYTE *)(a1 + 40) = v26 != 0;
        continue;
      case 6u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v20 = 0LL;
        *(_BYTE *)(a1 + 44) |= 8u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      uint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v33 = v32 + 1;
      if (v32 == -1 || v33 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v34 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
      v20 |= (unint64_t)(v34 & 0x7F) << v30;
      if ((v34 & 0x80) == 0) {
        goto LABEL_59;
      }
      v30 += 7;
      BOOL v10 = v31++ >= 9;
      if (v10)
      {
        LODWORD(v20) = 0;
        goto LABEL_61;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v20) = 0;
    }
LABEL_61:
    uint64_t v35 = 32LL;
LABEL_62:
    *(_DWORD *)(a1 + v35) = v20;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

float sub_100D086F8(float a1, float a2)
{
  float v4 = 0.8856;
  if (a1 > 0.0) {
    float v4 = (float)(a1 * -0.7123) + 0.8856;
  }
  float v5 = 0.88649;
  if (a1 > 0.0) {
    float v5 = (float)(a1 * -0.71301) + 0.88649;
  }
  if (a2 <= 18.0) {
    float v6 = v5;
  }
  else {
    float v6 = v4;
  }
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187F708);
  }
  float v7 = fmaxf(v6, 0.0);
  unint64_t v8 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134284033;
    double v18 = a1;
    __int16 v19 = 2049;
    double v20 = a2;
    __int16 v21 = 2049;
    double v22 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "HR,fhr,%{private}0.2f,userAge,%{private}0.2f,normalizedMets,%{private}0.2f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187F708);
    }
    int v11 = 134284033;
    double v12 = a1;
    __int16 v13 = 2049;
    double v14 = a2;
    __int16 v15 = 2049;
    double v16 = v7;
    BOOL v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "HR,fhr,%{private}0.2f,userAge,%{private}0.2f,normalizedMets,%{private}0.2f",  &v11,  32);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static float CLNatalieHeartRateModel::computeNormMETS(float, float)",  "%s\n",  v10);
  }

  return v7;
}

void sub_100D08938(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

int32x2_t *sub_100D08964(int32x2_t *a1)
{
  *a1 = vdup_n_s32(0xC61C3C00);
  a1[1].i32[0] = -971228160;
  a1[2] = (int32x2_t)0xBFF0000000000000LL;
  a1[3] = 0LL;
  uint64_t v2 = (void **)&a1[3];
  a1[4] = 0LL;
  a1[5] = 0LL;
  unsigned __int8 v4 = 0;
  sub_1012049AC((unsigned __int8 *)&a1[6], "DaylightIsAstronomicalDaytimeOverride", &v4, 0);
  sub_10005A29C(v2, 0x40uLL);
  return a1;
}

void sub_100D089E4(_Unwind_Exception *exception_object)
{
  unsigned __int8 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100D08A08(void *a1, double *a2, double a3)
{
  unint64_t v6 = a1[5];
  float v7 = (_OWORD *)a1[4];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[3];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v6 - v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      double v14 = (char *)sub_100037038((uint64_t)(a1 + 5), v13);
    }
    else {
      double v14 = 0LL;
    }
    __int16 v15 = &v14[16 * v10];
    double v16 = &v14[16 * v13];
    *(_OWORD *)__int16 v15 = *(_OWORD *)a2;
    unint64_t v8 = v15 + 16;
    double v18 = (char *)a1[3];
    unint64_t v17 = (char *)a1[4];
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }

      while (v17 != v18);
      unint64_t v17 = (char *)a1[3];
    }

    a1[3] = v15;
    a1[4] = v8;
    a1[5] = v16;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    _OWORD *v7 = *(_OWORD *)a2;
    unint64_t v8 = v7 + 1;
  }

  a1[4] = v8;
  sub_100D08B20((uint64_t)a1, a3);
  return sub_100D08BE0((uint64_t)a1);
}

uint64_t sub_100D08B20(uint64_t result, double a2)
{
  unint64_t v3 = *(double **)(result + 24);
  uint64_t v2 = *(double **)(result + 32);
  if (v3 != v2)
  {
    while (a2 - *v3 <= 150.0)
    {
      v3 += 2;
      if (v3 == v2) {
        return result;
      }
    }

    if (v3 != v2)
    {
      unsigned __int8 v4 = v3 + 2;
      if (v3 + 2 != v2)
      {
        do
        {
          if (a2 - *v4 <= 150.0)
          {
            *(_OWORD *)unint64_t v3 = *(_OWORD *)v4;
            v3 += 2;
          }

          v4 += 2;
        }

        while (v4 != v2);
        uint64_t v2 = *(double **)(result + 32);
      }
    }

    if (v3 != v2) {
      *(void *)(result + 32) = v3;
    }
  }

  return result;
}

uint64_t sub_100D08BE0(uint64_t a1)
{
  uint64_t v1 = 0LL;
  float v2 = *(float *)(a1 + 8);
  unint64_t v3 = (float *)&unk_10135B8E0;
  while (*(float *)&dword_10135B8A4[v1] >= v2 || *(float *)&dword_10135B8A4[v1 + 1] < v2)
  {
    v1 += 5LL;
    if (v1 == 20) {
      goto LABEL_7;
    }
  }

  unint64_t v3 = (float *)&dword_10135B8A4[v1];
LABEL_7:
  float v5 = v3[2];
  float v4 = v3[3];
  float v6 = v3[4];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(v7 - 16);
  float v9 = *(float *)(v7 - 8);
  LOBYTE(v7) = atomic_load((unsigned __int8 *)&qword_10199DCE8);
  if ((v7 & 1) == 0)
  {
    uint64_t v28 = a1;
    float v42 = v6;
    float v43 = v4;
    float v39 = v5;
    int v29 = __cxa_guard_acquire(&qword_10199DCE8);
    float v5 = v39;
    float v6 = v42;
    float v4 = v43;
    int v30 = v29;
    a1 = v28;
    if (v30)
    {
      *(_DWORD *)buf = -1082130432;
      sub_101206C88((unsigned __int8 *)&byte_10199DCD8, "DaylightLowConfLuxThresholdOverride", buf, 0);
      __cxa_guard_release(&qword_10199DCE8);
      a1 = v28;
      float v6 = v42;
      float v4 = v43;
      float v5 = v39;
    }
  }

  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_10199DD00);
  if ((v10 & 1) == 0)
  {
    uint64_t v31 = a1;
    float v42 = v6;
    float v44 = v4;
    float v40 = v5;
    int v32 = __cxa_guard_acquire(&qword_10199DD00);
    float v5 = v40;
    float v6 = v42;
    float v4 = v44;
    int v33 = v32;
    a1 = v31;
    if (v33)
    {
      *(_DWORD *)buf = -1082130432;
      sub_101206C88((unsigned __int8 *)&byte_10199DCF0, "DaylightMedConfLuxThresholdOverride", buf, 0);
      __cxa_guard_release(&qword_10199DD00);
      a1 = v31;
      float v6 = v42;
      float v4 = v44;
      float v5 = v40;
    }
  }

  unsigned __int8 v11 = atomic_load((unsigned __int8 *)&qword_10199DD18);
  if ((v11 & 1) == 0)
  {
    uint64_t v34 = a1;
    float v42 = v6;
    float v45 = v4;
    float v41 = v5;
    int v35 = __cxa_guard_acquire(&qword_10199DD18);
    float v5 = v41;
    float v6 = v42;
    float v4 = v45;
    int v36 = v35;
    a1 = v34;
    if (v36)
    {
      *(_DWORD *)buf = -1082130432;
      sub_101206C88((unsigned __int8 *)&byte_10199DD08, "DaylightHighConfLuxThresholdOverride", buf, 0);
      __cxa_guard_release(&qword_10199DD18);
      a1 = v34;
      float v6 = v42;
      float v4 = v45;
      float v5 = v41;
    }
  }

  if (byte_10199DCD8) {
    float v5 = *(float *)&dword_10199DCDC;
  }
  if (byte_10199DCF0) {
    float v4 = *(float *)&dword_10199DCF4;
  }
  if (byte_10199DD08) {
    float v6 = *(float *)&dword_10199DD0C;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  if (v12 == v13)
  {
    int v16 = 0;
    int v15 = 0;
    int v14 = 0;
  }

  else
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    do
    {
      float v17 = *(float *)(v12 + 8);
      if (v17 > v5)
      {
        ++v16;
        int v18 = v17 <= v6 ? v14 : v14 + 1;
        if (v17 > v4)
        {
          ++v15;
          int v14 = v18;
        }
      }

      v12 += 16LL;
    }

    while (v12 != v13);
    if (v14 > 1)
    {
      uint64_t v19 = 3LL;
      goto LABEL_31;
    }

    if (v15 > 9)
    {
      uint64_t v19 = 2LL;
      goto LABEL_31;
    }
  }

  uint64_t v19 = v16 > 29;
LABEL_31:
  if (*(_BYTE *)(a1 + 48)) {
    BOOL v20 = *(_BYTE *)(a1 + 49) != 0;
  }
  else {
    BOOL v20 = *(float *)(a1 + 8) > 0.0;
  }
  if (v20) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = 0LL;
  }
  if (v2 == -9999.0) {
    uint64_t v22 = v19;
  }
  else {
    uint64_t v22 = v21;
  }
  if (v9 <= v4) {
    uint64_t v23 = 0LL;
  }
  else {
    uint64_t v23 = v22;
  }
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10187F728);
  }
  char v24 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134220032;
    double v65 = v9;
    __int16 v66 = 2048;
    double v67 = v2;
    __int16 v68 = 1024;
    int v69 = v16;
    __int16 v70 = 1024;
    int v71 = v15;
    __int16 v72 = 1024;
    int v73 = v14;
    __int16 v74 = 2048;
    uint64_t v75 = v22;
    __int16 v76 = 2048;
    uint64_t v77 = v23;
    __int16 v78 = 2048;
    uint64_t v79 = v8;
    __int16 v80 = 1024;
    BOOL v81 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "ALSDaylightDetectorEstimate,lux,%f,sunElevation,%f,lowCnt,%d,medCnt,%d,highCnt,%d,conf,%ld,confFilt,%ld,startTime, %f, isAstronomicalDaytime, %d",  buf,  0x4Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10187F728);
    }
    int v46 = 134220032;
    double v47 = v9;
    __int16 v48 = 2048;
    double v49 = v2;
    __int16 v50 = 1024;
    int v51 = v16;
    __int16 v52 = 1024;
    int v53 = v15;
    __int16 v54 = 1024;
    int v55 = v14;
    __int16 v56 = 2048;
    uint64_t v57 = v22;
    __int16 v58 = 2048;
    uint64_t v59 = v23;
    __int16 v60 = 2048;
    uint64_t v61 = v8;
    __int16 v62 = 1024;
    BOOL v63 = v20;
    LODWORD(v37) = 76;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  1LL,  "ALSDaylightDetectorEstimate,lux,%f,sunElevation,%f,lowCnt,%d,medCnt,%d,highCnt,%d,conf,%ld,confFilt,%ld,startTime, %f, isAstronomicalDaytime, %d",  COERCE_DOUBLE(&v46),  v37,  v38,  LODWORD(v42));
    uint64_t v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMIndoorOutdoorConfidence CLALSDaylightDetector::estimateIsDaylight() const",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  return v23;
}

void sub_100D09134(_Unwind_Exception *a1)
{
}

BOOL sub_100D09174(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)) {
    return *(_BYTE *)(a1 + 49) != 0;
  }
  else {
    return *(float *)(a1 + 8) > 0.0;
  }
}

double sub_100D0919C(uint64_t a1)
{
  std::string __p = 0LL;
  uint64_t v23 = 0LL;
  char v24 = 0LL;
  sub_1001AC380(&__p, 0x40uLL);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == v3)
  {
    float v6 = v23;
  }

  else
  {
    float v4 = v23;
    do
    {
      double v5 = *(float *)(v2 + 8);
      if (v4 >= (double *)v24)
      {
        uint64_t v7 = (double *)__p;
        uint64_t v8 = ((char *)v4 - (_BYTE *)__p) >> 3;
        unint64_t v9 = v8 + 1;
        uint64_t v10 = v24 - (_BYTE *)__p;
        if ((v24 - (_BYTE *)__p) >> 2 > v9) {
          unint64_t v9 = v10 >> 2;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          uint64_t v12 = (char *)sub_1000071BC((uint64_t)&v24, v11);
          uint64_t v7 = (double *)__p;
          float v4 = v23;
        }

        else
        {
          uint64_t v12 = 0LL;
        }

        uint64_t v13 = (double *)&v12[8 * v8];
        *uint64_t v13 = v5;
        float v6 = v13 + 1;
        while (v4 != v7)
        {
          uint64_t v14 = *((void *)v4-- - 1);
          *((void *)v13-- - 1) = v14;
        }

        std::string __p = v13;
        uint64_t v23 = v6;
        char v24 = &v12[8 * v11];
        if (v7) {
          operator delete(v7);
        }
      }

      else
      {
        *float v4 = v5;
        float v6 = v4 + 1;
      }

      uint64_t v23 = v6;
      v2 += 16LL;
      float v4 = v6;
    }

    while (v2 != v3);
  }

  if (__p == v6)
  {
    double v20 = -1.0;
    if (!v6) {
      return v20;
    }
    goto LABEL_29;
  }

  sub_100D093B8((double *)__p, v6, (uint64_t)&v25, 126 - 2 * __clz(((char *)v6 - (_BYTE *)__p) >> 3), 1);
  float v6 = (double *)__p;
  unint64_t v15 = ((char *)v23 - (_BYTE *)__p) >> 3;
  double v16 = 0.0;
  if (v15 >= 5) {
    unint64_t v15 = 5LL;
  }
  if (v15)
  {
    float v17 = (double *)__p;
    unint64_t v18 = v15;
    do
    {
      double v19 = *v17++;
      double v16 = v16 + v19;
      --v18;
    }

    while (v18);
  }

  double v20 = v16 / (double)v15;
  if (__p)
  {
LABEL_29:
    uint64_t v23 = v6;
    operator delete(v6);
  }

  return v20;
}

void sub_100D09364( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D0938C(id a1)
{
  qword_101934948 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

double *sub_100D093B8(double *result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = result;
LABEL_2:
  unint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    uint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        double v22 = *(a2 - 1);
        float v23 = v22;
        double v24 = *v9;
        float v25 = *v9;
        if (v23 > v25)
        {
          *unint64_t v9 = v22;
          *(a2 - 1) = v24;
        }

        return result;
      case 3uLL:
        double v26 = v9[1];
        float v27 = v26;
        float v28 = *(a2 - 1);
        BOOL v29 = v27 <= v28;
        if (v27 <= v28) {
          uint64_t v30 = *((void *)a2 - 1);
        }
        else {
          uint64_t v30 = *((void *)v9 + 1);
        }
        if (!v29) {
          double v26 = *(a2 - 1);
        }
        *(a2 - 1) = v26;
        *((void *)v9 + 1) = v30;
        double v31 = *(a2 - 1);
        float v32 = v31;
        float v33 = *v9;
        BOOL v34 = v32 <= v33;
        if (v32 <= v33) {
          double v35 = *v9;
        }
        else {
          double v35 = *(a2 - 1);
        }
        if (!v34) {
          double v31 = *v9;
        }
        *(a2 - 1) = v31;
        float v36 = v35;
        float v37 = v9[1];
        BOOL v38 = v36 <= v37;
        if (v36 <= v37) {
          uint64_t v39 = *((void *)v9 + 1);
        }
        else {
          uint64_t v39 = *(void *)v9;
        }
        if (!v38) {
          double v35 = v9[1];
        }
        *(void *)unint64_t v9 = v39;
        v9[1] = v35;
        return result;
      case 4uLL:
        uint64_t v40 = *(void *)v9;
        double v41 = v9[1];
        float v42 = *v9;
        float v43 = v9[2];
        BOOL v44 = v42 <= v43;
        if (v42 <= v43) {
          uint64_t v45 = *((void *)v9 + 2);
        }
        else {
          uint64_t v45 = *(void *)v9;
        }
        if (!v44) {
          uint64_t v40 = *((void *)v9 + 2);
        }
        *((void *)v9 + 2) = v40;
        *(void *)unint64_t v9 = v45;
        float v46 = v41;
        float v47 = *(a2 - 1);
        BOOL v48 = v46 <= v47;
        if (v46 <= v47) {
          double v49 = *(a2 - 1);
        }
        else {
          double v49 = v41;
        }
        if (!v48) {
          double v41 = *(a2 - 1);
        }
        *(a2 - 1) = v41;
        float v50 = *v9;
        float v51 = v49;
        BOOL v52 = v50 <= v51;
        if (v50 <= v51) {
          double v53 = v49;
        }
        else {
          double v53 = *v9;
        }
        if (v52) {
          double v49 = *v9;
        }
        *unint64_t v9 = v53;
        v9[1] = v49;
        double v54 = v9[2];
        float v55 = v54;
        float v56 = *(a2 - 1);
        BOOL v57 = v55 <= v56;
        if (v55 <= v56) {
          double v58 = *(a2 - 1);
        }
        else {
          double v58 = v9[2];
        }
        if (!v57) {
          double v54 = *(a2 - 1);
        }
        *(a2 - 1) = v54;
        double v59 = v9[1];
        float v60 = v59;
        float v61 = v58;
        BOOL v62 = v60 <= v61;
        if (v60 <= v61) {
          double v63 = v58;
        }
        else {
          double v63 = v9[1];
        }
        if (!v62) {
          double v59 = v58;
        }
        v9[1] = v63;
        _DWORD v9[2] = v59;
        return result;
      case 5uLL:
        return sub_100D097C4(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2) {
              return sub_100D09E34(v9, a2, a2, a3);
            }
            return result;
          }

          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_100D0998C(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            sub_100D0998C(v9, &v9[v13 >> 1], a2 - 1);
            sub_100D0998C(v9 + 1, v15 - 1, a2 - 2);
            sub_100D0998C(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_100D0998C(v15 - 1, v15, &v9[v14 + 1]);
            double v16 = *v9;
            *unint64_t v9 = *v15;
            double *v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          float v17 = *(v9 - 1);
          float v18 = *v9;
          if (v17 <= v18)
          {
            uint64_t result = sub_100D09A2C(v9, a2);
            unint64_t v9 = result;
            goto LABEL_17;
          }

double *sub_100D097C4(double *result, double *a2, double *a3, double *a4, double *a5)
{
  double v5 = *result;
  float v6 = *result;
  float v7 = *a2;
  BOOL v8 = v6 <= v7;
  if (v6 <= v7) {
    double v9 = *a2;
  }
  else {
    double v9 = *result;
  }
  if (!v8) {
    double v5 = *a2;
  }
  *a2 = v5;
  void *result = v9;
  double v10 = *a4;
  float v11 = *a4;
  float v12 = *a5;
  BOOL v13 = v11 <= v12;
  if (v11 <= v12) {
    double v14 = *a5;
  }
  else {
    double v14 = *a4;
  }
  if (!v13) {
    double v10 = *a5;
  }
  *a5 = v10;
  *a4 = v14;
  double v15 = *a5;
  float v16 = *a5;
  float v17 = *a3;
  BOOL v18 = v16 <= v17;
  if (v16 <= v17) {
    double v19 = *a3;
  }
  else {
    double v19 = *a5;
  }
  if (!v18) {
    double v15 = *a3;
  }
  *a5 = v15;
  float v20 = v19;
  float v21 = *a4;
  BOOL v22 = v20 <= v21;
  if (v20 <= v21) {
    double v23 = *a4;
  }
  else {
    double v23 = *a3;
  }
  *a3 = v23;
  if (!v22) {
    double v19 = *a4;
  }
  *a4 = v19;
  double v24 = *a2;
  float v25 = *a2;
  float v26 = *a5;
  BOOL v27 = v25 <= v26;
  if (v25 <= v26) {
    double v28 = *a5;
  }
  else {
    double v28 = *a2;
  }
  if (!v27) {
    double v24 = *a5;
  }
  *a5 = v24;
  *a2 = v28;
  double v29 = *a4;
  float v30 = *a4;
  float v31 = *result;
  BOOL v32 = v30 <= v31;
  if (v30 <= v31) {
    double v33 = *result;
  }
  else {
    double v33 = *a4;
  }
  if (!v32) {
    double v29 = *result;
  }
  *a4 = v29;
  float v34 = v33;
  float v35 = *a3;
  BOOL v36 = v34 <= v35;
  if (v34 <= v35) {
    double v37 = *a3;
  }
  else {
    double v37 = *result;
  }
  void *result = v37;
  if (!v36) {
    double v33 = *a3;
  }
  *a3 = v33;
  double v38 = *a4;
  float v39 = *a4;
  float v40 = *a2;
  BOOL v41 = v39 <= v40;
  if (v39 <= v40) {
    double v42 = *a2;
  }
  else {
    double v42 = *a4;
  }
  if (!v41) {
    double v38 = *a2;
  }
  *a4 = v38;
  float v43 = v42;
  float v44 = *a3;
  BOOL v45 = v43 <= v44;
  if (v43 <= v44) {
    double v46 = *a3;
  }
  else {
    double v46 = *a2;
  }
  *a2 = v46;
  if (!v45) {
    double v42 = *a3;
  }
  *a3 = v42;
  return result;
}

double *sub_100D0990C(double *result, double *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v3 = 0LL;
      float v4 = result;
      do
      {
        double v6 = *v4;
        double v5 = v4[1];
        float v4 = v2;
        float v7 = v5;
        float v8 = v6;
        if (v7 > v8)
        {
          uint64_t v9 = v3;
          while (1)
          {
            *(double *)((char *)result + v9 + 8) = v6;
            if (!v9) {
              break;
            }
            double v6 = *(double *)((char *)result + v9 - 8);
            float v10 = v6;
            v9 -= 8LL;
            if (v7 <= v10)
            {
              float v11 = (double *)((char *)result + v9 + 8);
              goto LABEL_10;
            }
          }

          float v11 = result;
LABEL_10:
          *float v11 = v5;
        }

        uint64_t v2 = v4 + 1;
        v3 += 8LL;
      }

      while (v4 + 1 != a2);
    }
  }

  return result;
}

uint64_t sub_100D0998C(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  float v4 = *a2;
  double v5 = *a1;
  float v6 = *a1;
  double v7 = *a3;
  float v8 = *a3;
  if (v4 > v6)
  {
    if (v8 > v4)
    {
      *a1 = v7;
      *a3 = v5;
      return 1LL;
    }

    *a1 = v3;
    *a2 = v5;
    float v12 = *a3;
    if (v12 <= v6) {
      return 1LL;
    }
    *a2 = *a3;
    *a3 = v5;
    return 2LL;
  }

  if (v8 > v4)
  {
    *a2 = v7;
    *a3 = v3;
    float v9 = *a2;
    double v10 = *a1;
    float v11 = *a1;
    if (v9 <= v11) {
      return 1LL;
    }
    *a1 = *a2;
    *a2 = v10;
    return 2LL;
  }

  return 0LL;
}

double *sub_100D09A2C(double *a1, double *a2)
{
  double v2 = *a1;
  float v3 = *a1;
  float v4 = *(a2 - 1);
  if (v3 <= v4)
  {
    float v8 = a1 + 1;
    do
    {
      double v5 = v8;
      if (v8 >= a2) {
        break;
      }
      ++v8;
      float v9 = *v5;
    }

    while (v3 <= v9);
  }

  else
  {
    double v5 = a1;
    do
    {
      double v6 = v5[1];
      ++v5;
      float v7 = v6;
    }

    while (v3 <= v7);
  }

  if (v5 < a2)
  {
    do
    {
      double v10 = *--a2;
      float v11 = v10;
    }

    while (v3 > v11);
  }

  if (v5 < a2)
  {
    double v12 = *v5;
    double v13 = *a2;
    do
    {
      *double v5 = v13;
      *a2 = v12;
      do
      {
        double v14 = v5[1];
        ++v5;
        double v12 = v14;
        float v15 = v14;
      }

      while (v3 <= v15);
      do
      {
        double v16 = *--a2;
        double v13 = v16;
        float v17 = v16;
      }

      while (v3 > v17);
    }

    while (v5 < a2);
  }

  if (v5 - 1 != a1) {
    *a1 = *(v5 - 1);
  }
  *(v5 - 1) = v2;
  return v5;
}

double *sub_100D09AF8(double *a1, double *a2)
{
  uint64_t v2 = 0LL;
  double v3 = *a1;
  float v4 = *a1;
  do
  {
    double v5 = a1[v2 + 1];
    float v6 = v5;
    ++v2;
  }

  while (v6 > v4);
  float v7 = &a1[v2];
  float v8 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      double v11 = *--a2;
      float v12 = v11;
    }

    while (v12 <= v4);
  }

  else
  {
    do
    {
      double v9 = *--a2;
      float v10 = v9;
    }

    while (v10 <= v4);
  }

  if (v7 < a2)
  {
    double v13 = *a2;
    double v14 = &a1[v2];
    float v15 = a2;
    do
    {
      *double v14 = v13;
      double *v15 = v5;
      do
      {
        double v16 = v14[1];
        ++v14;
        double v5 = v16;
        float v17 = v16;
      }

      while (v17 > v4);
      do
      {
        double v18 = *--v15;
        double v13 = v18;
        float v19 = v18;
      }

      while (v19 <= v4);
    }

    while (v14 < v15);
    float v8 = v14 - 1;
  }

  if (v8 != a1) {
    *a1 = *v8;
  }
  *float v8 = v3;
  return v8;
}

BOOL sub_100D09BC4(double *a1, double *a2)
{
  uint64_t v2 = 1LL;
  switch(a2 - a1)
  {
    case 0LL:
    case 1LL:
      return v2;
    case 2LL:
      double v3 = *(a2 - 1);
      float v4 = v3;
      double v5 = *a1;
      float v6 = *a1;
      if (v4 > v6)
      {
        *a1 = v3;
        *(a2 - 1) = v5;
      }

      return v2;
    case 3LL:
      double v33 = a1[1];
      float v34 = v33;
      float v35 = *(a2 - 1);
      BOOL v36 = v34 <= v35;
      if (v34 <= v35) {
        uint64_t v37 = *((void *)a2 - 1);
      }
      else {
        uint64_t v37 = *((void *)a1 + 1);
      }
      if (!v36) {
        double v33 = *(a2 - 1);
      }
      *(a2 - 1) = v33;
      *((void *)a1 + 1) = v37;
      double v38 = *(a2 - 1);
      float v39 = v38;
      float v40 = *a1;
      BOOL v41 = v39 <= v40;
      if (v39 <= v40) {
        double v42 = *a1;
      }
      else {
        double v42 = *(a2 - 1);
      }
      if (!v41) {
        double v38 = *a1;
      }
      *(a2 - 1) = v38;
      float v43 = v42;
      float v44 = a1[1];
      BOOL v45 = v43 <= v44;
      if (v43 <= v44) {
        uint64_t v46 = *((void *)a1 + 1);
      }
      else {
        uint64_t v46 = *(void *)a1;
      }
      if (!v45) {
        double v42 = a1[1];
      }
      *(void *)a1 = v46;
      a1[1] = v42;
      return v2;
    case 4LL:
      uint64_t v47 = *(void *)a1;
      double v48 = a1[1];
      float v49 = *a1;
      float v50 = a1[2];
      BOOL v51 = v49 <= v50;
      if (v49 <= v50) {
        uint64_t v52 = *((void *)a1 + 2);
      }
      else {
        uint64_t v52 = *(void *)a1;
      }
      if (!v51) {
        uint64_t v47 = *((void *)a1 + 2);
      }
      *((void *)a1 + 2) = v47;
      *(void *)a1 = v52;
      float v53 = v48;
      float v54 = *(a2 - 1);
      BOOL v55 = v53 <= v54;
      if (v53 <= v54) {
        double v56 = *(a2 - 1);
      }
      else {
        double v56 = v48;
      }
      if (!v55) {
        double v48 = *(a2 - 1);
      }
      *(a2 - 1) = v48;
      float v57 = *a1;
      float v58 = v56;
      BOOL v59 = v57 <= v58;
      if (v57 <= v58) {
        double v60 = v56;
      }
      else {
        double v60 = *a1;
      }
      if (v59) {
        double v56 = *a1;
      }
      *a1 = v60;
      a1[1] = v56;
      double v61 = a1[2];
      float v62 = v61;
      float v63 = *(a2 - 1);
      BOOL v64 = v62 <= v63;
      if (v62 <= v63) {
        double v65 = *(a2 - 1);
      }
      else {
        double v65 = a1[2];
      }
      if (!v64) {
        double v61 = *(a2 - 1);
      }
      *(a2 - 1) = v61;
      double v66 = a1[1];
      float v67 = v66;
      float v68 = v65;
      BOOL v69 = v67 <= v68;
      if (v67 <= v68) {
        double v70 = v65;
      }
      else {
        double v70 = a1[1];
      }
      if (!v69) {
        double v66 = v65;
      }
      a1[1] = v70;
      a1[2] = v66;
      return v2;
    case 5LL:
      sub_100D097C4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1LL;
    default:
      float v7 = a1 + 2;
      double v8 = a1[2];
      double v9 = *a1;
      float v10 = a1[1];
      float v11 = v8;
      BOOL v12 = v10 <= v11;
      if (v10 <= v11) {
        double v13 = a1[2];
      }
      else {
        double v13 = a1[1];
      }
      if (v12) {
        double v8 = a1[1];
      }
      float v14 = v8;
      float v15 = v9;
      BOOL v16 = v14 <= v15;
      if (v14 <= v15) {
        double v17 = *a1;
      }
      else {
        double v17 = v8;
      }
      if (!v16) {
        double v8 = *a1;
      }
      double *v7 = v8;
      float v18 = v17;
      float v19 = v13;
      BOOL v20 = v18 <= v19;
      if (v18 <= v19) {
        double v21 = v13;
      }
      else {
        double v21 = v9;
      }
      if (!v20) {
        double v17 = v13;
      }
      *a1 = v21;
      a1[1] = v17;
      BOOL v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v23 = 0;
      uint64_t v24 = 24LL;
      break;
  }

  while (1)
  {
    double v25 = *v22;
    float v26 = *v22;
    double v27 = *v7;
    float v28 = *v7;
    if (v26 > v28)
    {
      uint64_t v29 = v24;
      while (1)
      {
        *(double *)((char *)a1 + v29) = v27;
        uint64_t v30 = v29 - 8;
        if (v29 == 8) {
          break;
        }
        double v27 = *(double *)((char *)a1 + v29 - 16);
        float v31 = v27;
        v29 -= 8LL;
        if (v26 <= v31)
        {
          BOOL v32 = (double *)((char *)a1 + v30);
          goto LABEL_28;
        }
      }

      BOOL v32 = a1;
LABEL_28:
      *BOOL v32 = v25;
      if (++v23 == 8) {
        return v22 + 1 == a2;
      }
    }

    float v7 = v22;
    v24 += 8LL;
    if (++v22 == a2) {
      return 1LL;
    }
  }

double *sub_100D09E34(double *a1, double *a2, double *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    float v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      BOOL v12 = &a1[v10];
      do
      {
        sub_100D09FD8((uint64_t)a1, a4, v9, v12--);
        --v11;
      }

      while (v11);
    }

    double v13 = v6;
    if (v6 != a3)
    {
      float v14 = v6;
      do
      {
        double v15 = *v14;
        float v16 = *v14;
        float v17 = *a1;
        if (v16 > v17)
        {
          *float v14 = *a1;
          *a1 = v15;
          sub_100D09FD8((uint64_t)a1, a4, v9, a1);
        }

        ++v14;
      }

      while (v14 != a3);
      double v13 = a3;
    }

    if (v8 >= 9)
    {
      uint64_t v18 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v19 = 0LL;
        double v20 = *a1;
        double v21 = a1;
        do
        {
          BOOL v22 = v21;
          v21 += v19 + 1;
          uint64_t v23 = 2 * v19;
          uint64_t v19 = (2 * v19) | 1;
          uint64_t v24 = v23 + 2;
          if (v24 < v18)
          {
            float v25 = *v21;
            float v26 = v21[1];
            if (v25 > v26)
            {
              ++v21;
              uint64_t v19 = v24;
            }
          }

          *BOOL v22 = *v21;
        }

        while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        if (v21 == --v6)
        {
          double *v21 = v20;
        }

        else
        {
          double *v21 = *v6;
          *float v6 = v20;
          sub_100D0A0B0((uint64_t)a1, (uint64_t)(v21 + 1), a4, v21 + 1 - a1);
        }
      }

      while (v18-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t sub_100D09FD8(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (double *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        float v10 = *v8;
        float v11 = v8[1];
        if (v10 > v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }

      double v12 = *v8;
      float v13 = *v8;
      double v14 = *a4;
      float v15 = *a4;
      if (v13 <= v15)
      {
        do
        {
          *a4 = v12;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (double *)(result + 8 * v7);
          uint64_t v17 = v16 + 2;
          if (v17 < a3)
          {
            float v18 = *v8;
            float v19 = v8[1];
            if (v18 > v19)
            {
              ++v8;
              uint64_t v7 = v17;
            }
          }

          double v12 = *v8;
          float v20 = *v8;
        }

        while (v20 <= v15);
        *a4 = v14;
      }
    }
  }

  return result;
}

uint64_t sub_100D0A0B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    int64_t v5 = (double *)(result + 8 * v4);
    double v6 = *v5;
    float v7 = *v5;
    double v9 = *(double *)(a2 - 8);
    uint64_t v8 = (double *)(a2 - 8);
    double v10 = v9;
    float v11 = v9;
    if (v7 > v11)
    {
      do
      {
        *uint64_t v8 = v6;
        uint64_t v8 = v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        int64_t v5 = (double *)(result + 8 * v4);
        double v6 = *v5;
        float v12 = *v5;
      }

      while (v12 > v11);
      *uint64_t v8 = v10;
    }
  }

  return result;
}

uint64_t sub_100D0A108(uint64_t a1)
{
  return a1;
}

void sub_100D0A12C()
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10187F748);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Fence: init globals", (uint8_t *)buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10187F748);
    }
    LOWORD(v45) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: init globals",  &v45,  2);
    BOOL v32 = (char *)v31;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceSettings::initSettingOverrides()", "%s\n", v31);
  }

  sub_1002F0B04(buf);
  int v1 = sub_1002A82BC(*(uint64_t *)&buf[0], "WifiFenceCalculatorMaxFenceRadius", &v44);
  int v2 = v1;
  double v3 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_10;
  }
  unint64_t v4 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    unint64_t v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v2) {
      goto LABEL_16;
    }
  }

  else
  {
LABEL_10:
    if (!v1) {
      goto LABEL_16;
    }
  }

  qword_101990420 = v44;
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10187F748);
  }
  double v6 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "FenceCal: Overriding WifiFenceCalculatorMaxFenceRadius = %5.1lf",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10187F748);
    }
    int v45 = 134217984;
    uint64_t v46 = v44;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "FenceCal: Overriding WifiFenceCalculatorMaxFenceRadius = %5.1lf",  COERCE_DOUBLE(&v45));
    float v34 = (char *)v33;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceSettings::initSettingOverrides()", "%s\n", v33);
  }

void sub_100D0AB88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_100D0ABB4()
{
  return &unk_101990258;
}

void *sub_100D0ABC0()
{
  return &unk_101990408;
}

void *sub_100D0ABCC()
{
  return &unk_101990440;
}

char *sub_100D0ABD8()
{
  return &byte_101990460;
}

void sub_100D0ABE4(id a1)
{
  qword_101934878 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100D0ACB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D0ACCC(uint64_t a1, double **a2)
{
  uint64_t v22 = a1;
  double v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  unint64_t v4 = *a2;
  if (*a2 != a2[1])
  {
    unint64_t v23 = a2[1];
    do
    {
      uint64_t v24 = objc_alloc(&OBJC_CLASS___CMOdometerData);
      double v5 = v4[1];
      double v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  *v4);
      int v7 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[2]);
      int v8 = v3;
      double v9 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[5]);
      double v10 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[7]);
      unint64_t v11 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[8]);
      float v12 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[13]);
      int v13 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[18]);
      int v14 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[19]);
      float v15 = v9;
      double v3 = v8;
      uint64_t v16 = -[CMOdometerData initWithDeltaDistance:startDate:endDate:accuracy:rawSpeed:gpsSpeedAccuracy:timestampGps:deltaGroundAltitude:groundAltitudeUncertainty:originDevice:slope:maxAbsSlope:]( v24,  "initWithDeltaDistance:startDate:endDate:accuracy:rawSpeed:gpsSpeedAccuracy:timestampGps:deltaGroundAltitud e:groundAltitudeUncertainty:originDevice:slope:maxAbsSlope:",  0LL,  v6,  v7,  v15,  v10,  v11,  v5,  0LL,  v12,  2LL,  v13,  v14,  v22);
      -[CMOdometerData setCurrentSpeed:]( v16,  "setCurrentSpeed:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[4]));
      -[CMOdometerData setGpsAltitude:]( v16,  "setGpsAltitude:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[3]));
      -[CMOdometerData setOdometer:]( v16,  "setOdometer:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[6]));
      -[CMOdometerData setGroundAltitude:]( v16,  "setGroundAltitude:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[12]));
      -[CMOdometerData setSmoothedGPSAltitude:]( v16,  "setSmoothedGPSAltitude:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[14]));
      -[CMOdometerData setSmoothedGPSAltitudeUncertainty:]( v16,  "setSmoothedGPSAltitudeUncertainty:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[15]));
      -[CMOdometerData setGpsCourseRadians:]( v16,  "setGpsCourseRadians:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[16]));
      -[CMOdometerData setGpsCourseAccuracy:]( v16,  "setGpsCourseAccuracy:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4[17]));
      -[NSMutableArray addObject:](v3, "addObject:", v16);

      v4 += 24;
    }

    while (v4 != v23);
  }

  if ((unint64_t)-[NSMutableArray count](v3, "count") > 1)
  {
    if (qword_101934630 != -1) {
      dispatch_once(&qword_101934630, &stru_10187F7E8);
    }
    unint64_t v17 = (os_log_s *)qword_101934638;
    if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349570;
      *(void *)&uint8_t buf[4] = -[NSMutableArray count](v3, "count");
      __int16 v34 = 2114;
      id v35 = -[NSMutableArray firstObject](v3, "firstObject");
      __int16 v36 = 2114;
      id v37 = -[NSMutableArray lastObject](v3, "lastObject");
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "CyclingDistance, sent datums, %{public}lu, first, %{public}@, last, %{public}@",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934630 != -1) {
        dispatch_once(&qword_101934630, &stru_10187F7E8);
      }
      uint64_t v18 = qword_101934638;
      int v27 = 134349570;
      id v28 = -[NSMutableArray count](v3, "count");
      __int16 v29 = 2114;
      id v30 = -[NSMutableArray firstObject](v3, "firstObject");
      __int16 v31 = 2114;
      id v32 = -[NSMutableArray lastObject](v3, "lastObject");
      LODWORD(v21) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "CyclingDistance, sent datums, %{public}lu, first, %{public}@, last, %{public}@",  &v27,  v21);
      int v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOdometerSubscription::onCyclingDistanceUpdate(const std::vector<CLOdometerEntry> &)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }
  }

  uint64_t v25 = CMCyclingWorkoutDistanceDataArray;
  int v26 = v3;
  *(void *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL);

  sub_100D0CA34(v22, buf);
}

void *sub_100D0B144(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v7 = sub_100C6AAF0((uint64_t)a1, a2, a3, a4, a5);
  *(_OWORD *)(v7 + 216) = xmmword_10135B978;
  *(_OWORD *)(v7 + 232) = unk_10135B988;
  *(_OWORD *)(v7 + 248) = xmmword_10135B998;
  *(_OWORD *)(v7 + 264) = unk_10135B9A8;
  *(_OWORD *)(v7 + 152) = xmmword_10135B938;
  *(_OWORD *)(v7 + 168) = unk_10135B948;
  *(_OWORD *)(v7 + 184) = xmmword_10135B958;
  *(_OWORD *)(v7 + 200) = unk_10135B968;
  *(_OWORD *)(v7 + 88) = xmmword_10135B8F8;
  *(_OWORD *)(v7 + 104) = unk_10135B908;
  *(_OWORD *)(v7 + 120) = xmmword_10135B918;
  *(void *)(v7 + 48) = 0LL;
  int v8 = (uint64_t *)(v7 + 48);
  *(void *)uint64_t v7 = off_10187F778;
  *(void *)(v7 + 56) = 0LL;
  *(_BYTE *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 136) = unk_10135B928;
  sub_10027EB5C((uint64_t)sub_100D0B33C, (uint64_t)a1, a3, &v18);
  uint64_t v9 = v18;
  uint64_t v18 = 0LL;
  uint64_t v10 = *v8;
  *int v8 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    uint64_t v11 = v18;
    uint64_t v18 = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
  }

  sub_100E18F18((uint64_t)sub_100D0B514, (uint64_t)a1, a3, &v18);
  uint64_t v12 = v18;
  uint64_t v18 = 0LL;
  uint64_t v13 = a1[7];
  a1[7] = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    uint64_t v14 = v18;
    uint64_t v18 = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
  }

  float v15 = -[CLOdometerSubscriptionAdapter initWithOdometerSubscription:]( objc_alloc(&OBJC_CLASS___CLOdometerSubscriptionAdapter),  "initWithOdometerSubscription:",  a1);
  a1[9] = v15;
  -[CLOdometerSubscriptionAdapter setValid:](v15, "setValid:", 1LL);
  id v16 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", @"CLOdometerNotifier");
  a1[10] = v16;
  objc_msgSend(v16, "registerDelegate:inSilo:", a1[9], objc_msgSend(a3, "silo"));
  return a1;
}

void sub_100D0B2F0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *v2;
  uint64_t *v2 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  sub_100C6AB50(v1);
  _Unwind_Resume(a1);
}

void sub_100D0B33C(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187F7C8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLOdometerSubscription::onOdometerUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187F7C8);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      float v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLOdometerSubscription::onOdometerUpdate, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D0C24C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D0B4F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D0B514(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187F7C8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLOdometerSubscription::onNatalimetryUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187F7C8);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      float v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLOdometerSubscription::onNatalimetryUpdate, event:%{public, location:escape_only}s , this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D0C8E0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D0B6CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D0B6F0(uint64_t a1)
{
  *(void *)a1 = off_10187F778;
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (*(_BYTE *)(a1 + 64)) {
    [*(id *)(a1 + 80) unregisterForCyclingWorkoutDistanceUpdates:*(void *)(a1 + 72)];
  }

  *(void *)(a1 + 80) = 0LL;
  [*(id *)(a1 + 72) setValid:0];

  *(void *)(a1 + 72) = 0LL;
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return sub_100C6AB50(a1);
}

void sub_100D0B7B8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D0B6F0(a1);
  operator delete(v1);
}

void *sub_100D0B7CC@<X0>(uint64_t a1@<X8>)
{
  v15[0] = &off_10187F858;
  v15[1] = sub_100D0BAE4;
  uint64_t v15[2] = 0LL;
  __int16 v16 = v15;
  sub_1010DDBC0(v17, "kCLConnectionMessageOdometerGpsAvailability");
  sub_100896FD0((uint64_t)&v18, (uint64_t)v15);
  v13[0] = &off_10187F858;
  v13[1] = sub_100D0BD5C;
  uint64_t v13[2] = 0LL;
  __int16 v14 = v13;
  sub_1010DDBC0(v19, "kCLConnectionMessageStartOdometerUpdate");
  sub_100896FD0((uint64_t)&v20, (uint64_t)v13);
  v11[0] = &off_10187F858;
  v11[1] = sub_100D0BFF4;
  v11[2] = 0LL;
  uint64_t v12 = v11;
  sub_1010DDBC0(v21, "kCLConnectionMessageCyclingWorkoutDistanceUpdate");
  sub_100896FD0((uint64_t)v22, (uint64_t)v11);
  sub_100D0CEEC(a1, (unsigned __int8 *)v17, 3LL);
  for (uint64_t i = 0LL; i != -21; i -= 7LL)
  {
    uint64_t v3 = *(_BYTE **)&v22[i * 8 + 24];
    if (&v22[i * 8] == v3)
    {
      uint64_t v3 = &v22[i * 8];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v21[i + 2]) < 0) {
      operator delete((void *)v21[i]);
    }
  }

  uint64_t v5 = v12;
  if (v12 == v11)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v11;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v12)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  uint64_t v7 = v14;
  if (v14 == v13)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v13;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  else if (v14)
  {
    uint64_t v8 = 5LL;
    goto LABEL_19;
  }

  uint64_t result = v16;
  if (v16 == v15)
  {
    uint64_t v10 = 4LL;
    uint64_t result = v15;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }

  else if (v16)
  {
    uint64_t v10 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }

  return result;
}

void sub_100D0B9D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20, char a21)
{
  for (uint64_t i = 112LL; i != -56; i -= 56LL)
    sub_10026E430((uint64_t)(&a21 + i));
  unint64_t v23 = a12;
  if (a12 == &a9)
  {
    uint64_t v24 = 4LL;
    unint64_t v23 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_8;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  uint64_t v25 = a16;
  if (a16 == &a13)
  {
    uint64_t v26 = 4LL;
    uint64_t v25 = &a13;
  }

  else
  {
    if (!a16) {
      goto LABEL_13;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*(void *)v25 + 8 * v26))();
LABEL_13:
  int v27 = a20;
  if (a20 == &a17)
  {
    uint64_t v28 = 4LL;
    int v27 = &a17;
  }

  else
  {
    if (!a20) {
      goto LABEL_18;
    }
    uint64_t v28 = 5LL;
  }

  (*(void (**)(void))(*(void *)v27 + 8 * v28))();
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_100D0BAE4(uint64_t *a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_100E0DFC0(a1[1]) & 1) != 0)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187F828);
    }
    uint64_t v5 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = a1[3];
      *(_DWORD *)buf = 67109634;
      int v19 = a2;
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      __int16 v22 = 2048;
      unint64_t v23 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "OdometerGpsAvailability subscription changed, %d, %@, %p",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10187F828);
      }
      uint64_t v10 = a1[3];
      v13[0] = 67109634;
      v13[1] = a2;
      __int16 v14 = 2112;
      uint64_t v15 = v10;
      __int16 v16 = 2048;
      unint64_t v17 = a1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "OdometerGpsAvailability subscription changed, %d, %@, %p",  v13,  28);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOdometerSubscription::handleRequestOdometerGpsAvailability(BOOL, const CLNameValuePair &)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    sub_100C6AC8C((uint64_t)a1);
    uint64_t v7 = a1[7];
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = *(void **)(v7 + 16);
    if (a2) {
      [v8 register:v9 forNotification:1 registrationInfo:0];
    }
    else {
      [v8 unregister:v9 forNotification:1];
    }
  }
}

void sub_100D0BD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100D0BD5C(uint64_t a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934630 != -1) {
    dispatch_once(&qword_101934630, &stru_10187F7E8);
  }
  uint64_t v5 = (os_log_s *)qword_101934638;
  if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    uint64_t v20 = v6;
    __int16 v21 = 2048;
    uint64_t v22 = a1;
    __int16 v23 = 1024;
    int v24 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Odometer subscription changed, %@, %p, %d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934630 != -1) {
      dispatch_once(&qword_101934630, &stru_10187F7E8);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    int v13 = 138412802;
    uint64_t v14 = v10;
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    __int16 v17 = 1024;
    int v18 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  0LL,  "Odometer subscription changed, %@, %p, %d",  &v13,  28);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOdometerSubscription::handleRequestOdometerUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  sub_100C6AC8C(a1);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v8 = *(void **)(v7 + 16);
  if (a2)
  {
    [v8 register:v9 forNotification:2 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:4 registrationInfo:0];
  }

  else
  {
    [v8 unregister:v9 forNotification:2];
    [*(id *)(*(void *)(a1 + 48) + 16) unregister:*(void *)(*(void *)(a1 + 48) + 8) forNotification:4];
  }
}

void sub_100D0BFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100D0BFF4(uint64_t a1, int a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934630 != -1) {
    dispatch_once(&qword_101934630, &stru_10187F7E8);
  }
  uint64_t v5 = (os_log_s *)qword_101934638;
  if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    uint64_t v19 = v6;
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Cycling Workout Distance subscription changed, %@, %p, %d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934630 != -1) {
      dispatch_once(&qword_101934630, &stru_10187F7E8);
    }
    uint64_t v9 = *(void *)(a1 + 24);
    int v12 = 138412802;
    uint64_t v13 = v9;
    __int16 v14 = 2048;
    uint64_t v15 = a1;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  0LL,  "Cycling Workout Distance subscription changed, %@, %p, %d",  &v12,  28);
    char v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOdometerSubscription::handleRequestCyclingWorkoutDistanceUpdate(BOOL, const CLNameValuePair &)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  sub_100C6AC8C(a1);
  *(_BYTE *)(a1 + 64) = a2;
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v7 = *(void **)(a1 + 80);
  if (a2) {
    [v7 registerForCyclingWorkoutDistanceUpdates:v8];
  }
  else {
    [v7 unregisterForCyclingWorkoutDistanceUpdates:v8];
  }
}

void sub_100D0C220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100D0C24C(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if (*a3 != 4) {
    return;
  }
  int v5 = *((_DWORD *)a4 + 21);
  BOOL v6 = v5 == 1;
  BOOL v7 = v5 == 2;
  uint64_t v8 = 2LL;
  if (!v7) {
    uint64_t v8 = v6;
  }
  uint64_t v35 = v8;
  uint64_t v9 = a1 + 88;
  double v10 = *(double *)(a1 + 88);
  if (v10 == 0.0) {
    goto LABEL_12;
  }
  if (vabdd_f64(*a4, v10) >= 1800.0)
  {
    if (qword_101934630 != -1) {
      dispatch_once(&qword_101934630, &stru_10187F7E8);
    }
    char v11 = (os_log_s *)qword_101934638;
    if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEBUG))
    {
      double v12 = *a4;
      uint64_t v13 = *(void *)v9;
      *(_DWORD *)buf = 134349312;
      *(double *)&uint8_t buf[4] = v12;
      __int16 v46 = 2050;
      uint64_t v47 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Ignoring cached OdometerEntry due to significant time between entries (%{public}.2f) (%{public}.2f)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934630 != -1) {
        dispatch_once(&qword_101934630, &stru_10187F7E8);
      }
      __int16 v29 = *(CMOdometerData **)a4;
      uint64_t v30 = *(void *)v9;
      int v39 = 134349312;
      float v40 = v29;
      __int16 v41 = 2050;
      uint64_t v42 = v30;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  2LL,  "Ignoring cached OdometerEntry due to significant time between entries (%{public}.2f) (%{public}.2f)",  &v39,  22);
      id v32 = (char *)v31;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOdometerSubscription::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdomet erNotifier_Type::NotificationData &)",  "%s\n",  v31);
      if (v32 != buf) {
        free(v32);
      }
    }

void sub_100D0C838(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100D0C8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100D0C8E0(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  if (*a3 == 1)
  {
    uint64_t v6 = CMOdometerGpsAvailability;
    BOOL v7 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *a4);
    unint64_t v5 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL);
    sub_100D0C98C(a1, &v5);
  }

void sub_100D0C98C(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100D0CA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100D0CA34(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100D0CAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100D0CADC(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D0CB08(id a1)
{
  qword_101934638 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_100D0CB34(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100D0CB60(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

__n128 sub_100D0CB8C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10187F858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100D0CBC8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187F858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100D0CBEC(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t sub_100D0CBF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100D0CC30()
{
}

void sub_100D0CC3C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100D0CCC0(a1, a2, (CLConnectionMessage **)&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100D0CCA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1012310A8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D0CCC0(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  __int128 v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1002A5550((int)v15, DictionaryOfClasses);
  if ((sub_1002A6F64((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    double v10 = (void *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187F8C8);
    }
    char v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      __int128 v19 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10187F8C8);
      }
    }

    double v12 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      __int128 v19 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get value for kCLConnectionMessageSubscribeKey key",  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  buf,  0x12u);
    }
  }

  return sub_1002A5590(v15);
}

void sub_100D0CEA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100D0CEC0(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100D0CEEC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100D0CF64(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100D0CF50(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100D0CF64(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100D0D1E4(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  __int128 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int128 v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100D0D1CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100D0D1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100D0D258(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100D0D240(_Unwind_Exception *a1)
{
}

void *sub_100D0D258(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100D0D2B0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100D0D2CC()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199DD20, (void *)&_mh_execute_header);
}

uint64_t sub_100D0DB78(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    __int128 v4 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    uint64_t v5 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    __int128 v6 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    uint64_t v7 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    unint64_t v8 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    unint64_t v9 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    unint64_t v10 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    uint8x8_t v11 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    unint64_t v12 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    uint64_t v13 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    BOOL v14 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    unint64_t v15 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v20 = v19 + 1;
        if (v19 == -1 || v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0) {
          goto LABEL_12;
        }
        v16 += 7;
        BOOL v22 = v17++ >= 9;
        if (v22)
        {
          unint64_t v18 = 0LL;
          int v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v18 = 0LL;
      }
LABEL_14:
      if (v23 || (v18 & 7) == 4) {
        break;
      }
      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + v4[58]) |= 0x20u;
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 <= 0xFFFFFFFFFFFFFFF7LL && v25 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v59 = v5[59];
          goto LABEL_95;
        case 2u:
          *(_WORD *)(a1 + v4[58]) |= 1u;
          unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 <= 0xFFFFFFFFFFFFFFF7LL && v34 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v59 = v6[60];
          goto LABEL_95;
        case 3u:
          *(_WORD *)(a1 + v4[58]) |= 2u;
          unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 <= 0xFFFFFFFFFFFFFFF7LL && v35 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v59 = v7[61];
          goto LABEL_95;
        case 4u:
          *(_WORD *)(a1 + v4[58]) |= 0x80u;
          unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 <= 0xFFFFFFFFFFFFFFF7LL && v36 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v59 = v8[62];
          goto LABEL_95;
        case 5u:
          *(_WORD *)(a1 + v4[58]) |= 0x40u;
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 <= 0xFFFFFFFFFFFFFFF7LL && v37 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v59 = v9[63];
          goto LABEL_95;
        case 6u:
          *(_WORD *)(a1 + v4[58]) |= 0x10u;
          unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v38 <= 0xFFFFFFFFFFFFFFF7LL && v38 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v59 = v10[64];
          goto LABEL_95;
        case 7u:
          *(_WORD *)(a1 + v4[58]) |= 4u;
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 <= 0xFFFFFFFFFFFFFFF7LL && v39 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v59 = v11[65];
          goto LABEL_95;
        case 8u:
          *(_WORD *)(a1 + v4[58]) |= 8u;
          unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 <= 0xFFFFFFFFFFFFFFF7LL && v40 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v26 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v26 = 0LL;
          }

          uint64_t v59 = v12[66];
LABEL_95:
          *(void *)(a1 + v59) = v26;
          continue;
        case 9u:
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0LL;
          *(_WORD *)(a1 + v4[58]) |= 0x400u;
          while (2)
          {
            uint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v46 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
              v43 |= (unint64_t)(v46 & 0x7F) << v41;
              if (v46 < 0)
              {
                v41 += 7;
                BOOL v22 = v42++ >= 9;
                if (v22)
                {
                  LODWORD(v43) = 0;
                  goto LABEL_69;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v43) = 0;
          }
LABEL_69:
          uint64_t v58 = v13[67];
          goto LABEL_74;
        case 0xAu:
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v43 = 0LL;
          *(_WORD *)(a1 + v4[58]) |= 0x200u;
          while (2)
          {
            uint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v50 = v49 + 1;
            if (v49 == -1 || v50 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              char v51 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50;
              v43 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                v47 += 7;
                BOOL v22 = v48++ >= 9;
                if (v22)
                {
                  LODWORD(v43) = 0;
                  goto LABEL_73;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v43) = 0;
          }
LABEL_73:
          uint64_t v58 = v14[68];
LABEL_74:
          *(_DWORD *)(a1 + v58) = v43;
          continue;
        case 0xBu:
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v54 = 0LL;
          *(_WORD *)(a1 + v4[58]) |= 0x100u;
          break;
        default:
          int v27 = v5;
          uint64_t v28 = v6;
          __int16 v29 = v4;
          uint64_t v30 = v7;
          __int16 v31 = v8;
          uint64_t v32 = a1;
          uint64_t result = PBReaderSkipValueWithTag(a2);
          unint64_t v15 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          a1 = v32;
          unint64_t v9 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          unint64_t v8 = v31;
          unint64_t v10 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          uint64_t v7 = v30;
          uint8x8_t v11 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          __int128 v4 = v29;
          BOOL v14 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          __int128 v6 = v28;
          unint64_t v12 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          uint64_t v5 = v27;
          uint64_t v13 = &OBJC_IVAR___CMPedometerEntry_pedEntry;
          if (!(_DWORD)result) {
            return result;
          }
          continue;
      }

      while (1)
      {
        uint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v56 = v55 + 1;
        if (v55 == -1 || v56 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v57 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
        v54 |= (unint64_t)(v57 & 0x7F) << v52;
        if ((v57 & 0x80) == 0) {
          goto LABEL_76;
        }
        v52 += 7;
        BOOL v22 = v53++ >= 9;
        if (v22)
        {
          uint64_t v54 = 0LL;
          goto LABEL_78;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_76:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v54 = 0LL;
      }
LABEL_78:
      *(void *)(a1 + v15[69]) = v54;
    }

    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100D0F140()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10135BC38;
      v1[3] = unk_10135BC48;
      v1[4] = xmmword_10135BC58;
      v1[0] = xmmword_10135BC18;
      v1[1] = unk_10135BC28;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100D0F214(_Unwind_Exception *a1)
{
}

void sub_100D0F22C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100D0F290()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100D0F304(_Unwind_Exception *a1)
{
}

void sub_100D0F3C0(id a1)
{
  qword_10199DD38 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLDigitalElevationModelSilo");
}

uint64_t sub_100D0F464(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100D1B84C;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199DD48 != -1) {
    dispatch_once(&qword_10199DD48, block);
  }
  return qword_1019A2068;
}

uint64_t sub_100D0F51C(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16LL))(a1 + 104);
  sub_100D19528(v2 + 808);
  *(_OWORD *)(a1 + 704) = xmmword_10135BCC0;
  *(void *)(a1 + 728) = 0LL;
  *(void *)(a1 + 720) = 0LL;
  *(void *)(a1 + 864) = 0xC0C3878000000000LL;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(int64x2_t *)(a1 + 848) = vdupq_n_s64(0xC0C3878000000000LL);
  *(void *)(a1 + 880) = 0LL;
  *(void *)(a1 + 872) = 0LL;
  *(_WORD *)(a1 + 888) = 0;
  *(void *)(a1 + 904) = 0LL;
  *(void *)(a1 + 896) = 0LL;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0LL;
  *(void *)(a1 + 480) = 0LL;
  if (*(char *)(a1 + 575) < 0)
  {
    **(_BYTE **)(a1 + 552) = 0;
    *(void *)(a1 + 560) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 552) = 0;
    *(_BYTE *)(a1 + 575) = 0;
  }

  sub_10038637C(a1 + 120);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_100D0F5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100D0F638(uint64_t a1, uint64_t a2, int *a3, double *a4, int a5)
{
  uint64_t v11 = *(void *)(a1 + 104);
  uint64_t v141 = a1 + 104;
  (*(void (**)(void))(v11 + 16))();
  __int16 v143 = 256;
  unint64_t v12 = (double *)(a2 + 12);
  uint64_t v13 = (double *)(a2 + 4);
  if (!sub_1002954D0(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    unint64_t v34 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      double v35 = *(double *)(a2 + 76);
      double v36 = *(double *)(a2 + 4);
      uint64_t v37 = *(void *)(a2 + 12);
      *(_DWORD *)buf = 134349569;
      double v165 = v35;
      __int16 v166 = 2049;
      double v167 = v36;
      __int16 v168 = 2049;
      *(void *)v169 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "#Error,DEM,invalidInput,timestamp,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_31;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    double v106 = *(double *)(a2 + 76);
    double v107 = *(double *)(a2 + 4);
    uint64_t v108 = *(void *)(a2 + 12);
    int v144 = 134349569;
    double v145 = v106;
    __int16 v146 = 2049;
    double v147 = v107;
    __int16 v148 = 2049;
    *(void *)uint64_t v149 = v108;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,invalidInput,timestamp,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf",  &v144,  32);
    std::string::size_type v87 = (uint8_t *)v109;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v109);
LABEL_125:
    if (v87 != buf) {
      free(v87);
    }
    goto LABEL_31;
  }

  if ((sub_100D1396C(a1) & 1) != 0)
  {
LABEL_31:
    BOOL v28 = 0LL;
    goto LABEL_32;
  }

  double v139 = -1.0;
  double v140 = 0.0;
  if (*(_BYTE *)(a1 + 944))
  {
    double v14 = *(double *)(a1 + 1032);
    unsigned int v15 = *(unsigned __int16 *)(a1 + 1022);
    double v16 = *(double *)(a1 + 1048);
    double v17 = *(double *)(a1 + 1040);
    LOWORD(v5) = *(_WORD *)(a1 + 1020);
    sub_100292950(v14);
    double v19 = v18;
    sub_100292950(v14 + (double)v15 * v16);
    double v21 = v20;
    sub_100292950(*v12);
    double v23 = v22;
    double v24 = v17 + (double)v5 * v16;
    *unint64_t v12 = v22;
    double v25 = *v13;
    if (*v13 >= v17)
    {
      BOOL v26 = v25 >= v24 || v23 < v19;
      if (!v26 && v23 < v21)
      {
        *(_DWORD *)(a1 + 544) = 0;
        goto LABEL_14;
      }
    }

    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    unint64_t v39 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      double v40 = *v13;
      double v41 = *v12;
      *(_DWORD *)buf = 134284801;
      double v165 = v40;
      __int16 v166 = 2049;
      double v167 = v41;
      __int16 v168 = 2049;
      *(double *)v169 = v17;
      *(_WORD *)&v169[8] = 2049;
      *(double *)uint64_t v170 = v24;
      *(_WORD *)&v170[8] = 2049;
      double v171 = v19;
      __int16 v172 = 2049;
      double v173 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "DEM,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{priva te}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v112 = *v13;
      double v113 = *v12;
      int v144 = 134284801;
      double v145 = v112;
      __int16 v146 = 2049;
      double v147 = v113;
      __int16 v148 = 2049;
      *(double *)uint64_t v149 = v17;
      *(_WORD *)&v149[8] = 2049;
      *(double *)uint64_t v150 = v24;
      *(_WORD *)&v150[8] = 2049;
      double v151 = v19;
      __int16 v152 = 2049;
      double v153 = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{priva te}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf",  &v144,  62);
      std::string::size_type v115 = (uint8_t *)v114;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v114);
      if (v115 != buf) {
        free(v115);
      }
    }
  }

  if (!sub_100603F84(a1 + 8, (double *)(a2 + 4), (double *)(a2 + 12)) || *(_BYTE *)(a1 + 605))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    unsigned int v42 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "DEM,tile not available", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v144) = 0;
      LODWORD(v136) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,tile not available",  &v144,  v136);
      BOOL v111 = (uint8_t *)v110;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v110);
      if (v111 != buf) {
        free(v111);
      }
    }

    BOOL v28 = 0LL;
    *(_BYTE *)(a1 + 464) = 0;
    *(void *)(a1 + 472) = 0LL;
    *(void *)(a1 + 480) = 0LL;
    goto LABEL_32;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  uint64_t v43 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "DEM,Need to load tile", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    LOWORD(v144) = 0;
    LODWORD(v136) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,Need to load tile",  &v144,  v136);
    __int128 v117 = (uint8_t *)v116;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v116);
    if (v117 != buf) {
      free(v117);
    }
  }

  LOBYTE(v138) = 0;
  unsigned __int8 v44 = sub_100D15E40(a1, &v138, *v13, *v12);
  if (LOBYTE(v138))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    unint64_t v45 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "DEM,tile download needed", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v144) = 0;
      LODWORD(v136) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,tile download needed",  &v144,  v136);
      int v123 = (uint8_t *)v122;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v122);
      if (v123 != buf) {
        free(v123);
      }
    }

    *(_BYTE *)(a1 + 464) = 1;
    *(_OWORD *)(a1 + 472) = *(_OWORD *)v13;
    goto LABEL_31;
  }

  if ((v44 & 1) == 0)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v85 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "DEM,Tile not loaded yet", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_31;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    LOWORD(v144) = 0;
    LODWORD(v136) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,Tile not loaded yet",  &v144,  v136);
    std::string::size_type v87 = (uint8_t *)v86;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v86);
    goto LABEL_125;
  }

  double v25 = *v13;
  double v23 = *v12;
LABEL_14:
  *(_BYTE *)(a1 + 464) = 0;
  if (!sub_100D13F14(a1 + 912, &v140, &v139, v25, v23)) {
    goto LABEL_31;
  }
  BOOL v28 = 0LL;
  double v29 = v140;
  if (v140 <= 8850.0 && v140 != -9999.0 && v140 >= -450.0)
  {
    double v30 = v139;
    if (v139 < 9999.0)
    {
      *a4 = *(float *)(a1 + 1072);
      if (*(double *)(a2 + 44) > 22.0)
      {
        double v30 = v30 * 2.5;
        double v139 = v30;
      }

      double v137 = v30 * v30;
      double v138 = v29;
      double v31 = v29;
      double v32 = v29;
      if (a5)
      {
        if (*(_BYTE *)(a1 + 576) && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
        {
          int v33 = sub_100D123E4( a1 + 656,  &v138,  &v137,  v29,  v30 * v30,  *(double *)(a2 + 4),  *(double *)(a2 + 12),  *(double *)(a2 + 76));
          double v31 = v138;
          if (v33)
          {
            double v140 = v138;
            double v32 = v138;
          }

          else
          {
            double v32 = v29;
          }
        }

        else
        {
          *(_OWORD *)(a1 + 704) = xmmword_10135BCC0;
          *(void *)(a1 + 728) = 0LL;
          *(void *)(a1 + 720) = 0LL;
          *(void *)(a1 + 864) = 0xC0C3878000000000LL;
          *(_OWORD *)(a1 + 736) = 0u;
          *(_OWORD *)(a1 + 752) = 0u;
          *(_OWORD *)(a1 + 768) = 0u;
          *(_OWORD *)(a1 + 784) = 0u;
          *(_OWORD *)(a1 + 800) = 0u;
          *(_OWORD *)(a1 + 816) = 0u;
          *(_OWORD *)(a1 + 832) = 0u;
          *(int64x2_t *)(a1 + 848) = vdupq_n_s64(0xC0C3878000000000LL);
          *(void *)(a1 + 880) = 0LL;
          *(void *)(a1 + 872) = 0LL;
          *(_WORD *)(a1 + 888) = 0;
          *(void *)(a1 + 904) = 0LL;
          double v31 = v29;
          double v32 = v29;
          *(void *)(a1 + 896) = 0LL;
        }
      }

      double v46 = v32 + 1.3;
      double v140 = v46;
      double v47 = v31 + 1.3;
      double v138 = v31 + 1.3;
      if (*(_BYTE *)(a1 + 577)) {
        int v48 = 4;
      }
      else {
        int v48 = 3;
      }
      *a3 = v48;
      if (*(_BYTE *)(a1 + 888) || *(_BYTE *)(a1 + 889))
      {
        if (v30 < 40.0)
        {
          double v139 = 40.0;
          double v30 = 40.0;
        }

        *a3 = 2;
      }

      *(double *)(a2 + 536) = v46;
      *(double *)(a2 + 544) = v30;
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v49 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        double v50 = *(float *)(a2 + 476);
        int v51 = *(_DWORD *)(a2 + 472);
        *(_DWORD *)buf = 134283777;
        double v165 = v50;
        __int16 v166 = 1026;
        LODWORD(v167) = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "DEM,input location undulation,und,%{private}.3lf,model,%{public}d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        double v118 = *(float *)(a2 + 476);
        int v119 = *(_DWORD *)(a2 + 472);
        int v144 = 134283777;
        double v145 = v118;
        __int16 v146 = 1026;
        LODWORD(v147) = v119;
        LODWORD(v136) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,input location undulation,und,%{private}.3lf,model,%{public}d",  &v144,  v136);
        __int16 v121 = (uint8_t *)v120;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v120);
        if (v121 != buf) {
          free(v121);
        }
      }

      if ((*(void *)(a2 + 36) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && *(double *)(a2 + 36) > 0.0
        && *(_DWORD *)(a2 + 472) == 1)
      {
        double v52 = *(double *)(a2 + 28) + *(float *)(a2 + 476);
        double v53 = *a4;
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        double v54 = v52 - v53;
        uint64_t v55 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
        {
          double v56 = *(float *)(a2 + 476);
          double v57 = *a4;
          uint64_t v58 = *(void *)(a2 + 28);
          *(_DWORD *)buf = 134284289;
          double v165 = v56;
          __int16 v166 = 2049;
          double v167 = v57;
          __int16 v168 = 2049;
          *(void *)v169 = v58;
          *(_WORD *)&v169[8] = 2049;
          *(double *)uint64_t v170 = v54;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "DEM,update undulation,undOld,%{private}.3lf,undNew,%{private}.3lf,altOld,%{private}.3lf,altNew,%{private}.3lf,",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          double v131 = *(float *)(a2 + 476);
          double v132 = *a4;
          uint64_t v133 = *(void *)(a2 + 28);
          int v144 = 134284289;
          double v145 = v131;
          __int16 v146 = 2049;
          double v147 = v132;
          __int16 v148 = 2049;
          *(void *)uint64_t v149 = v133;
          *(_WORD *)&v149[8] = 2049;
          *(double *)uint64_t v150 = v54;
          LODWORD(v136) = 42;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,update undulation,undOld,%{private}.3lf,undNew,%{private}.3lf,altOld,%{private}.3lf,altNew,%{private}.3lf,",  &v144,  v136);
          double v135 = (uint8_t *)v134;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v134);
          if (v135 != buf) {
            free(v135);
          }
        }

        float v59 = *a4;
        *(float *)(a2 + 476) = v59;
        *(_DWORD *)(a2 + 472) = 2;
        *(double *)(a2 + 28) = v54;
      }

      if (*(_BYTE *)(a1 + 648))
      {
        sub_100D16464(a1 + 912, a2, *(double *)(a2 + 4), *(double *)(a2 + 12));
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        double v60 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
        {
          double v61 = *(double *)(a2 + 4);
          double v62 = *(double *)(a2 + 12);
          int v63 = *(_DWORD *)(a2 + 96);
          int v64 = *(_DWORD *)(a2 + 784);
          double v65 = *(float *)(a2 + 788);
          *(_DWORD *)buf = 134284545;
          double v165 = v61;
          __int16 v166 = 2049;
          double v167 = v62;
          __int16 v168 = 1024;
          *(_DWORD *)v169 = v63;
          *(_WORD *)&v169[4] = 1025;
          *(_DWORD *)&v169[6] = v64;
          *(_WORD *)uint64_t v170 = 2049;
          *(double *)&v170[2] = v65;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "DEM,lat,%{private}.8lf,lon,%{private}.8lf,type,%d,numFlatPoints,%{private}d,%{private}.3f",  buf,  0x2Cu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          double v124 = *(double *)(a2 + 4);
          double v125 = *(double *)(a2 + 12);
          int v126 = *(_DWORD *)(a2 + 96);
          int v127 = *(_DWORD *)(a2 + 784);
          double v128 = *(float *)(a2 + 788);
          int v144 = 134284545;
          double v145 = v124;
          __int16 v146 = 2049;
          double v147 = v125;
          __int16 v148 = 1024;
          *(_DWORD *)uint64_t v149 = v126;
          *(_WORD *)&v149[4] = 1025;
          *(_DWORD *)&v149[6] = v127;
          *(_WORD *)uint64_t v150 = 2049;
          *(double *)&v150[2] = v128;
          LODWORD(v136) = 44;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,lat,%{private}.8lf,lon,%{private}.8lf,type,%d,numFlatPoints,%{private}d,%{private}.3f",  &v144,  v136);
          __int16 v130 = (uint8_t *)v129;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v129);
          if (v130 != buf) {
            free(v130);
          }
        }
      }

      BOOL v28 = sub_100D156FC(a1, (double *)a2);
      if (v28)
      {
        if (a5)
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          double v66 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
          {
            double v67 = *(double *)(a2 + 536);
            double v68 = *(double *)(a2 + 544);
            double v69 = *a4;
            uint64_t v70 = *(void *)(a2 + 520);
            uint64_t v71 = *(void *)(a2 + 528);
            uint64_t v72 = *(void *)(a2 + 4);
            uint64_t v73 = *(void *)(a2 + 12);
            int v74 = *(_DWORD *)(a2 + 96);
            *(_DWORD *)buf = 134286081;
            double v165 = v67;
            __int16 v166 = 2050;
            double v167 = v68;
            __int16 v168 = 2049;
            *(double *)v169 = v47;
            *(_WORD *)&v169[8] = 2050;
            *(double *)uint64_t v170 = v137;
            *(_WORD *)&v170[8] = 2049;
            double v171 = v29;
            __int16 v172 = 2050;
            double v173 = v69;
            __int16 v174 = 2049;
            uint64_t v175 = v70;
            __int16 v176 = 2050;
            uint64_t v177 = v71;
            __int16 v178 = 2049;
            uint64_t v179 = v72;
            __int16 v180 = 2049;
            uint64_t v181 = v73;
            __int16 v182 = 1024;
            int v183 = v74;
            _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEBUG,  "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,filterAlt(m),%{private}.2lf,filterAltVariance(m^2),%{pub lic}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slope,%{private}.3lf,maxAbsSlope,%{public}.3 lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d",  buf,  0x6Cu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            double v75 = *(double *)(a2 + 536);
            double v76 = *(double *)(a2 + 544);
            double v77 = *a4;
            uint64_t v78 = *(void *)(a2 + 520);
            uint64_t v79 = *(void *)(a2 + 528);
            uint64_t v80 = *(void *)(a2 + 4);
            uint64_t v81 = *(void *)(a2 + 12);
            int v82 = *(_DWORD *)(a2 + 96);
            int v144 = 134286081;
            double v145 = v75;
            __int16 v146 = 2050;
            double v147 = v76;
            __int16 v148 = 2049;
            *(double *)uint64_t v149 = v47;
            *(_WORD *)&v149[8] = 2050;
            *(double *)uint64_t v150 = v137;
            *(_WORD *)&v150[8] = 2049;
            double v151 = v29;
            __int16 v152 = 2050;
            double v153 = v77;
            __int16 v154 = 2049;
            uint64_t v155 = v78;
            __int16 v156 = 2050;
            uint64_t v157 = v79;
            __int16 v158 = 2049;
            uint64_t v159 = v80;
            __int16 v160 = 2049;
            uint64_t v161 = v81;
            __int16 v162 = 1024;
            int v163 = v82;
            LODWORD(v136) = 108;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,filterAlt(m),%{private}.2lf,filterAltVariance(m^2),%{pub lic}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slope,%{private}.3lf,maxAbsSlope,%{public}.3 lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d",  &v144,  v136);
            uint64_t v84 = (uint8_t *)v83;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v83);
LABEL_119:
            if (v84 != buf) {
              free(v84);
            }
          }
        }

        else
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          uint64_t v88 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
          {
            double v89 = *(double *)(a2 + 536);
            double v90 = *(double *)(a2 + 544);
            double v91 = *a4;
            double v92 = *(double *)(a2 + 520);
            double v93 = *(double *)(a2 + 528);
            uint64_t v94 = *(void *)(a2 + 4);
            uint64_t v95 = *(void *)(a2 + 12);
            int v96 = *(_DWORD *)(a2 + 96);
            *(_DWORD *)buf = 134285569;
            double v165 = v89;
            __int16 v166 = 2050;
            double v167 = v90;
            __int16 v168 = 2049;
            *(double *)v169 = v29;
            *(_WORD *)&v169[8] = 2050;
            *(double *)uint64_t v170 = v91;
            *(_WORD *)&v170[8] = 2049;
            double v171 = v92;
            __int16 v172 = 2050;
            double v173 = v93;
            __int16 v174 = 2049;
            uint64_t v175 = v94;
            __int16 v176 = 2049;
            uint64_t v177 = v95;
            __int16 v178 = 1024;
            LODWORD(v179) = v96;
            _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEBUG,  "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slo pe,%{private}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d",  buf,  0x58u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            double v97 = *(double *)(a2 + 536);
            double v98 = *(double *)(a2 + 544);
            double v99 = *a4;
            double v100 = *(double *)(a2 + 520);
            double v101 = *(double *)(a2 + 528);
            uint64_t v102 = *(void *)(a2 + 4);
            uint64_t v103 = *(void *)(a2 + 12);
            int v104 = *(_DWORD *)(a2 + 96);
            int v144 = 134285569;
            double v145 = v97;
            __int16 v146 = 2050;
            double v147 = v98;
            __int16 v148 = 2049;
            *(double *)uint64_t v149 = v29;
            *(_WORD *)&v149[8] = 2050;
            *(double *)uint64_t v150 = v99;
            *(_WORD *)&v150[8] = 2049;
            double v151 = v100;
            __int16 v152 = 2050;
            double v153 = v101;
            __int16 v154 = 2049;
            uint64_t v155 = v102;
            __int16 v156 = 2049;
            uint64_t v157 = v103;
            __int16 v158 = 1024;
            LODWORD(v159) = v104;
            LODWORD(v136) = 88;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slo pe,%{private}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d",  &v144,  v136);
            uint64_t v84 = (uint8_t *)v105;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)",  "%s\n",  v105);
            goto LABEL_119;
          }
        }
      }
    }
  }

void sub_100D10B94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100D10C24(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = a1 + 104;
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16LL))(a1 + 104);
  *(CFAbsoluteTime *)(a1 + 400) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 408) = a2;
  *(_DWORD *)(a1 + 412) = a3;
  if (a2 > 11804)
  {
    if (a2 > 15651)
    {
      if (a2 > 18199)
      {
        if (a2 <= 19149)
        {
          if (a2 > 19029)
          {
            if (a2 == 19030) {
              goto LABEL_61;
            }
            int v7 = 19090;
            goto LABEL_54;
          }

          if (a2 == 18200) {
            goto LABEL_61;
          }
          int v10 = 18240;
        }

        else
        {
          if (a2 > 515620)
          {
            if (a2 == 515621 || a2 == 515652) {
              goto LABEL_61;
            }
            int v7 = 519150;
            goto LABEL_54;
          }

          if (a2 == 19150) {
            goto LABEL_57;
          }
          int v10 = 90603;
        }

        if (a2 != v10) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
        }
        goto LABEL_57;
      }

      if (a2 <= 15732)
      {
        uint64_t v8 = 1LL << (a2 - 36);
        uint64_t v9 = 0x800000000840101LL;
LABEL_60:
        if ((v8 & v9) == 0) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
        }
        goto LABEL_61;
      }

      if (a2 > 18049)
      {
        if (a2 == 18050) {
          goto LABEL_61;
        }
        int v7 = 18100;
      }

      else
      {
        if (a2 == 15733) {
          goto LABEL_61;
        }
        int v7 = 17150;
      }
    }

    else if (a2 > 15329)
    {
      if ((a2 - 15560) <= 0x3C && ((1LL << (a2 + 56)) & 0x1004000100000001LL) != 0
        || (a2 - 15330) <= 0x1E && ((1 << (a2 + 30)) & 0x40100001) != 0)
      {
        goto LABEL_61;
      }

      int v7 = 15460;
    }

    else if (a2 <= 15054)
    {
      if (a2 == 11805) {
        goto LABEL_57;
      }
      if (a2 == 12150)
      {
LABEL_61:
        (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
        *(_BYTE *)(a1 + 577) = 0;
        (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 24LL))(v6);
        (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
        *(_BYTE *)(a1 + 576) = 0;
        (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 24LL))(v6);
        return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
      }

      int v7 = 15030;
    }

    else
    {
      if ((a2 - 15100) <= 0x32 && ((1LL << (a2 + 4)) & 0x4000000000401LL) != 0
        || (a2 - 15230) <= 0x19 && ((1 << (a2 - 126)) & 0x2100001) != 0)
      {
        goto LABEL_61;
      }

      int v7 = 15055;
    }

void sub_100D1108C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100D110B4(uint64_t a1, char a2)
{
  unint64_t v3 = (_BYTE *)(a1 + 104);
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16LL))(a1 + 104);
  v3[384] = a2;
  return (*(uint64_t (**)(_BYTE *))(*(void *)v3 + 24LL))(v3);
}

uint64_t sub_100D11180(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  uint64_t v11 = (_BYTE *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v47 = a1 + 104;
  (*(void (**)(uint64_t))(v10 + 16))(a1 + 104);
  __int16 v48 = 256;
  if (!v11[384])
  {
    int v12 = sub_100606EB0(a1 + 8);
    BOOL v13 = a5 <= 0 && *(_BYTE *)(a1 + 464) == 0;
    char v14 = v13 ? v12 : 1;
    if ((v14 & 1) != 0)
    {
      if (v12 && a5 <= 0 && vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 584)) > 3600.0)
      {
        sub_100D119C4(a1, (void *)(a2 + 76));
        return (*(uint64_t (**)(_BYTE *))(*(void *)v11 + 24LL))(v11);
      }

      if (*(_BYTE *)(a1 + 464))
      {
        double v15 = *(double *)(a2 + 76);
      }

      else
      {
        if (a5 < 1) {
          return (*(uint64_t (**)(_BYTE *))(*(void *)v11 + 24LL))(v11);
        }
        double v15 = *(double *)(a2 + 76);
      }

      *(double *)(a1 + 592) = v15;
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v16 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 472);
        uint64_t v18 = *(void *)(a1 + 480);
        *(_DWORD *)buf = 134283777;
        uint64_t v54 = v17;
        __int16 v55 = 2049;
        uint64_t v56 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "DEM,requestDownload, Requesting DEM Tile download,lat,%{private}.7lf,lon,%{private}.7lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        uint64_t v30 = *(void *)(a1 + 472);
        uint64_t v31 = *(void *)(a1 + 480);
        int v49 = 134283777;
        uint64_t v50 = v30;
        __int16 v51 = 2049;
        uint64_t v52 = v31;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "DEM,requestDownload, Requesting DEM Tile download,lat,%{private}.7lf,lon,%{private}.7lf",  &v49,  22);
        int v33 = (uint8_t *)v32;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)",  "%s\n",  v32);
        if (v33 != buf) {
          free(v33);
        }
      }

      if (a4)
      {
        else {
          char v19 = a3;
        }
        if ((v19 & 1) == 0)
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          double v20 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "DEM,allowing download request over cell due to poor GNSS signal conditions",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            LOWORD(v49) = 0;
            LODWORD(v41) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "DEM,allowing download request over cell due to poor GNSS signal conditions",  &v49,  v41);
            uint64_t v37 = (uint8_t *)v36;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)",  "%s\n",  v36);
            if (v37 != buf) {
              free(v37);
            }
          }
        }

        if (sub_100D1AE08(a1, a1 + 400))
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          double v21 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
          {
            int v22 = *(_DWORD *)(a1 + 408);
            *(_DWORD *)buf = 67109120;
            LODWORD(v54) = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "DEM,allowing download request over cell due to activity,%d",  buf,  8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            int v38 = *(_DWORD *)(a1 + 408);
            int v49 = 67109120;
            LODWORD(v50) = v38;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "DEM,allowing download request over cell due to activity,%d",  &v49);
            double v40 = (uint8_t *)v39;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)",  "%s\n",  v39);
            if (v40 != buf) {
              free(v40);
            }
          }

          LOBYTE(a4) = 1;
        }

        else
        {
          LOBYTE(a4) = v19 ^ 1;
        }
      }

      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      char v24 = *(_BYTE *)(a1 + 605);
      if (v24) {
        LOBYTE(a4) = 1;
      }
      if ((a5 - 1) >= 2)
      {
        a5 = 0;
      }

      else
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        double v25 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v54) = a5;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "DEM,downloadIfNeeded,numRingsToDownloadOverCellular,%d",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          int v49 = 67109120;
          LODWORD(v50) = a5;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,downloadIfNeeded,numRingsToDownloadOverCellular,%d",  &v49);
          double v35 = (uint8_t *)v34;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)",  "%s\n",  v34);
          if (v35 != buf) {
            free(v35);
          }
        }

        char v24 = 1;
        LOBYTE(a4) = 1;
      }

      double v26 = *(double *)(a1 + 472);
      double v27 = *(double *)(a1 + 480);
      if (!sub_1002954D0(v26, v27) || sub_10029286C(v26, v27))
      {
        double v26 = *(double *)(a2 + 4);
        double v27 = *(double *)(a2 + 12);
      }

      id v28 = objc_msgSend(objc_msgSend(*(id *)(a1 + 368), "vendor"), "proxyForService:", @"CLTilesManager");
      v42[0] = a4;
      v42[1] = v24;
      v42[2] = 0;
      unint64_t v43 = 0xBFF0000000000000LL;
      int v44 = a5;
      CFAbsoluteTime v45 = Current;
      __int16 v46 = 1;
      [v28 requestTileDownloadByType:1 lat:-1 lon:v42 seckey:v26 details:v27];
    }
  }

  return (*(uint64_t (**)(_BYTE *))(*(void *)v11 + 24LL))(v11);
}

void sub_100D118DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_100D119C4(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 463) < 0)
  {
    sub_1010DD48C(__p, *(void **)(a1 + 440), *(void *)(a1 + 448));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 440);
    uint64_t v43 = *(void *)(a1 + 456);
  }

  sub_100C33560(&v41);
  sub_1002F0B04(buf);
  BOOL v4 = sub_1002A8560(*(uint64_t *)buf, "DEMTilesServerUrl", &v41);
  unint64_t v5 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v6 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (v4)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v8 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = &v41;
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v9 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "DEM, server, %{public}s, overridden, 1",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v10 = &v41;
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v10 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v44 = 136446210;
      *(void *)&v44[4] = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM, server, %{public}s, overridden, 1",  v44,  12);
      int v12 = (char *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)",  "%s\n",  v11);
LABEL_93:
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    BOOL v13 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      char v14 = &v41;
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        char v14 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "DEM, server, %{public}s, overridden, 0",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      unint64_t v34 = &v41;
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unint64_t v34 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v44 = 136446210;
      *(void *)&v44[4] = v34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM, server, %{public}s, overridden, 0",  v44,  12);
      int v12 = (char *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)",  "%s\n",  v35);
      goto LABEL_93;
    }
  }

  std::string::append(&v41, "/");
  if (v43 >= 0) {
    double v15 = __p;
  }
  else {
    double v15 = (void **)__p[0];
  }
  if (v43 >= 0) {
    std::string::size_type v16 = HIBYTE(v43);
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string::append(&v41, (const std::string::value_type *)v15, v16);
  uint64_t v17 = (char *)sub_1002F8DDC();
  sub_10030AC8C(v17, (uint64_t)&v40);
  if (v43 >= 0) {
    uint64_t v18 = __p;
  }
  else {
    uint64_t v18 = (void **)__p[0];
  }
  if (v43 >= 0) {
    std::string::size_type v19 = HIBYTE(v43);
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::append(&v40, (const std::string::value_type *)v18, v19);
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  double v20 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    double v21 = &v41;
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v21 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    int v22 = &v40;
    if ((v40.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v22 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&_BYTE buf[14] = v22;
    __int16 v50 = 2050;
    uint64_t v51 = 0x40AC200000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "DEM,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    id v28 = &v41;
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      id v28 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    double v29 = &v40;
    if ((v40.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v44 = 136446722;
    *(void *)&v44[4] = v28;
    __int16 v45 = 2082;
    __int16 v46 = v29;
    __int16 v47 = 2050;
    uint64_t v48 = 0x40AC200000000000LL;
    LODWORD(v38) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf",  v44,  v38);
    uint64_t v31 = (char *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

  *(void *)(a1 + 584) = *a2;
  *(void *)int v44 = 0x404E000000000000LL;
  double v23 = (double *)(a1 + 120);
  if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v24 = &v41;
  }
  else {
    char v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    double v25 = &v40;
  }
  else {
    double v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if (sub_100385874( (uint64_t)v23,  (const std::string::value_type *)v24,  (const std::string::value_type *)v25,  (double *)v44))
  {
    *(void *)buf = sub_100D1B364();
    v39[0] = sub_100D1AE7C();
    if ((sub_100385EC0((uint64_t)v23, (double *)buf, v39) & 1) != 0)
    {
      *(double *)buf = *(double *)a2 + 3600.0 + -0.5;
      sub_1003862CC(v23, (double *)buf);
      goto LABEL_69;
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    double v26 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "#Warning,DEM,could not setUpdateSource AVL file updater",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v39[0]) = 0;
      LODWORD(v38) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "#Warning,DEM,could not setUpdateSource AVL file updater",  v39,  v38);
      uint64_t v37 = (char *)v36;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)",  "%s\n",  v36);
      if (v37 != buf) {
        free(v37);
      }
    }
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  double v27 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "#Warning,DEM,could not setUpdateRate AVl file updater",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    LOWORD(v39[0]) = 0;
    LODWORD(v38) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "#Warning,DEM,could not setUpdateRate AVl file updater",  v39,  v38);
    int v33 = (char *)v32;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)",  "%s\n",  v32);
    if (v33 != buf) {
      free(v33);
    }
  }

void sub_100D122D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D1237C(uint64_t a1, char a2)
{
  unint64_t v3 = (_BYTE *)(a1 + 104);
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16LL))(a1 + 104);
  v3[544] = a2;
  return (*(uint64_t (**)(_BYTE *))(*(void *)v3 + 24LL))(v3);
}

uint64_t sub_100D123E4( uint64_t a1, double *a2, void *a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a6 > 90.0)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v9 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Error,DEM,latitude_degs>90.0", buf, 2u);
    }

    BOOL v10 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v50[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,latitude_degs>90.0",  v50,  2,  v50[0]);
LABEL_47:
      id v28 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, cons t double, double &, double &)",  "%s\n",  v12);
      if (v28 != buf) {
        free(v28);
      }
      return 0LL;
    }

    return result;
  }

  if (a6 >= -90.0)
  {
    if (a4 < -500.0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v15 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Error,DEM,heightDEM<-500", buf, 2u);
      }

      BOOL v16 = sub_1002921D0(115, 0);
      uint64_t result = 0LL;
      if (v16)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        LOWORD(v50[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,heightDEM<-500",  v50,  2,  v50[0]);
        goto LABEL_47;
      }

      return result;
    }

    if (a5 <= 0.0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v26 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#Error,DEM,heightVariance<=0", buf, 2u);
      }

      BOOL v27 = sub_1002921D0(115, 0);
      uint64_t result = 0LL;
      if (v27)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        LOWORD(v50[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,heightVariance<=0",  v50,  2,  v50[0]);
        goto LABEL_47;
      }

      return result;
    }

    __int128 v21 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 128) = v21;
    *(void *)(a1 + 144) = *(void *)(a1 + 184);
    *(double *)(a1 + 168) = a4;
    *(double *)(a1 + 176) = a5;
    *(double *)(a1 + 152) = a6;
    *(double *)(a1 + 160) = a7;
    double v22 = *(double *)(a1 + 192);
    *(double *)(a1 + 184) = a8;
    if (v22 == -9999.0) {
      goto LABEL_56;
    }
    *(double *)(a1 + 208) = v22;
    *(void *)(a1 + 192) = 0xC0C3878000000000LL;
    double v23 = a8 - *(double *)(a1 + 144);
    if (v23 < 0.0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      char v24 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "#Warning,DEM,deltaT<0,DEM height filter internal_reset",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v50[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#Warning,DEM,deltaT<0,DEM height filter internal_reset",  v50,  2,  v50[0]);
LABEL_104:
      uint64_t v48 = (uint8_t *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, cons t double, double &, double &)",  "%s\n",  v25);
      if (v48 == buf)
      {
LABEL_56:
        *(double *)(a1 + 192) = a4;
        *(double *)(a1 + 48) = a5;
        *(double *)(a1 + 56) = a5;
        *(void *)(a1 + 104) = 0LL;
        *(void *)(a1 + 216) = 0LL;
        *(void *)(a1 + 224) = 0LL;
        *(_WORD *)(a1 + 232) = 0;
        *(void *)(a1 + 240) = 0LL;
        *(void *)(a1 + 248) = 0LL;
        *a2 = a4;
LABEL_57:
        *a3 = *(void *)(a1 + 48);
        return 1LL;
      }

uint64_t sub_100D12F54(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 8;
  *(void *)a1 = off_10187F970;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(void *)(a1 + 24) = 0LL;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  sub_1010DDBC0((void *)(a1 + 48), "cldavl.avl");
  *(_BYTE *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  sub_1002E4C3C(a1 + 104, "cldem", 1LL, 1LL);
  sub_100382F80(a1 + 120, a2, (uint64_t)sub_100D134D0, a1);
  *(void *)(a1 + 368) = a2;
  *(void *)(a1 + 376) = 0LL;
  *(_BYTE *)(a1 + 384) = 0;
  id v5 = objc_msgSend(objc_msgSend(a2, "vendor"), "proxyForService:", @"CLWifiService");
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 408) = 0LL;
  *(void *)(a1 + 392) = v5;
  sub_1010DDBC0((void *)(a1 + 416), off_101990570);
  sub_1010DDBC0((void *)(a1 + 440), "cldavl.avl.gz");
  *(_BYTE *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(void *)(a1 + 552) = 0LL;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_DWORD *)(a1 + 600) = 1;
  *(_WORD *)(a1 + 604) = 0;
  sub_100D2D9A4(a1 + 608);
  sub_100D1BD54(a1 + 656);
  *(_DWORD *)(a1 + 912) = -1;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1060) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 920) = 0LL;
  *(void *)(a1 + 936) = 0LL;
  *(void *)(a1 + 928) = 0LL;
  *(_BYTE *)(a1 + 944) = 0;
  sub_100583844((uint64_t)sub_100D136A8, a1, *(void **)(a1 + 368), buf);
  uint64_t v6 = *(void *)buf;
  *(void *)buf = 0LL;
  uint64_t v7 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    uint64_t v8 = *(void *)buf;
    *(void *)buf = 0LL;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
    uint64_t v6 = *(void *)(a1 + 376);
  }

  if (v6) {
    [*(id *)(v6 + 16) register:*(void *)(v6 + 8) forNotification:4 registrationInfo:0];
  }
  sub_100386918(a1 + 120, 1);
  if (!sub_1006050E4(v4))
  {
    *(void *)buf = CFAbsoluteTimeGetCurrent();
    sub_100D119C4(a1, buf);
  }

  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 496) = _Q0;
  *(void *)(a1 + 512) = 0LL;
  *(void *)(a1 + 528) = 0LL;
  *(void *)(a1 + sub_10000AE14(v1 + 520) = 0LL;
  *(_DWORD *)(a1 + 536) = 0;
  sub_1002F0B04(buf);
  char v14 = sub_1002A6F64(*(uint64_t *)buf, "ComputeDemFlatnessMetric", (BOOL *)v31);
  if (LOBYTE(v31[0])) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  *(_BYTE *)(a1 + 648) = v15;
  BOOL v16 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  sub_1002F0B04(buf);
  std::string::size_type v19 = (unsigned __int8 *)(a1 + 605);
  int v20 = sub_1002A6F64(*(uint64_t *)buf, "ForceDownloadDEMTiles", (BOOL *)(a1 + 605));
  int v21 = v20;
  double v22 = v33;
  if (!v33) {
    goto LABEL_21;
  }
  double v23 = (unint64_t *)&v33->__shared_owners_;
  do
    unint64_t v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v21) {
      return a1;
    }
  }

  else
  {
LABEL_21:
    if (!v20) {
      return a1;
    }
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  double v25 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *v19;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "DEM,fForceDownloadDEMTiles, %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    int v28 = *v19;
    v31[0] = 67109120;
    v31[1] = v28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,fForceDownloadDEMTiles, %d",  v31);
    double v30 = (uint8_t *)v29;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLDigitalElevationModel::CLDigitalElevationModel(id<CLIntersiloUniverse>)",  "%s\n",  v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  return a1;
}

void sub_100D133EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = *(void *)(v13 + 376);
  *(void *)(v13 + 376) = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_100383050(v14);
  sub_1002E4CB0(a12);
  sub_100C22484(v12);
  _Unwind_Resume(a1);
}

void sub_100D134D0(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187F9B0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDigitalElevationModel::onAvlFileUpdated",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187F9B0);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      char v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDigitalElevationModel::onAvlFileUpdated, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v9 = 0;
  }

  sub_100D19C80(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D13688( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D136A8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187F9B0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDigitalElevationModel::onManagerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187F9B0);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDigitalElevationModel::onManagerNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D1B898(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D13860( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D13880(uint64_t a1)
{
  *(void *)a1 = off_10187F970;

  *(void *)(a1 + 392) = 0LL;
  sub_100D0F51C(a1);
  uint64_t v2 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_100383050(a1 + 120);
  sub_1002E4CB0(a1 + 104);
  sub_1001B4C40((void *)(a1 + 8));
  return a1;
}

void sub_100D13958(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D13880(a1);
  operator delete(v1);
}

uint64_t sub_100D1396C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 488))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v2 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      int v3 = *(unsigned __int8 *)(a1 + 488);
      *(_DWORD *)buf = 67240192;
      LODWORD(v20) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "DEM,isUseOfDemInappropriate,true,fIsAirborne,%{public}d",  buf,  8u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    int v14 = *(unsigned __int8 *)(a1 + 488);
    *(_DWORD *)__int16 v16 = 67240192;
    *(_DWORD *)&v16[4] = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "DEM,isUseOfDemInappropriate,true,fIsAirborne,%{public}d",  v16,  8,  *(_OWORD *)v16,  *(void *)&v16[16],  v17,  v18);
LABEL_26:
    char v15 = (uint8_t *)v13;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLDigitalElevationModel::isUseOfDemInappropriate() const", "%s\n", v13);
    if (v15 != buf) {
      free(v15);
    }
    return 1LL;
  }

  if (*(double *)(a1 + 496) > 0.0)
  {
    double v5 = sub_101171D4C();
    if (vabdd_f64(v5, *(double *)(a1 + 496)) < 10.0
      && (*(_BYTE *)(a1 + 538) || *(_BYTE *)(a1 + 539) || *(_BYTE *)(a1 + 536) || *(_BYTE *)(a1 + 537)))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v6 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 496);
        uint64_t v8 = *(void *)(a1 + 512);
        uint64_t v9 = *(void *)(a1 + 520);
        *(_DWORD *)buf = 134350081;
        double v20 = v5;
        __int16 v21 = 2050;
        uint64_t v22 = v7;
        __int16 v23 = 1026;
        int v24 = 1;
        __int16 v25 = 2049;
        uint64_t v26 = v8;
        __int16 v27 = 2049;
        uint64_t v28 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "DEM,isUseOfDemInappropriate,true,TBA,currentTime,%{public}.1lf,TBA machContinuousTime,%{public}.1lf,isCloseToO rAtTunnelBridge,%{public}d,lat,%{private}.8lf,lon,%{private}.8lf",  buf,  0x30u);
      }

      if (!sub_1002921D0(115, 2)) {
        return 1LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v10 = *(void *)(a1 + 496);
      uint64_t v11 = *(void *)(a1 + 512);
      uint64_t v12 = *(void *)(a1 + 520);
      *(_DWORD *)__int16 v16 = 134350081;
      *(double *)&v16[4] = v5;
      *(_WORD *)&v16[12] = 2050;
      *(void *)&v16[14] = v10;
      *(_WORD *)&v16[22] = 1026;
      LODWORD(v17) = 1;
      WORD2(v17) = 2049;
      *(void *)((char *)&v17 + 6) = v11;
      HIWORD(v17) = 2049;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "DEM,isUseOfDemInappropriate,true,TBA,currentTime,%{public}.1lf,TBA machContinuousTime,%{public}.1lf,isCloseToOrA tTunnelBridge,%{public}d,lat,%{private}.8lf,lon,%{private}.8lf",  v16,  48,  *(_OWORD *)v16,  *(void *)&v16[16],  v17,  v12);
      goto LABEL_26;
    }
  }

  return 0LL;
}

BOOL sub_100D13CE4(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (!*(_BYTE *)(a1 + 32)) {
    return 0LL;
  }
  if (a2 < -90.0 || a2 > 90.0)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v12 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134283521;
      double v18 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.7lf,out of range",  buf,  0xCu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      int v15 = 134283521;
      double v16 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.7lf,out of range",  &v15,  12);
      int v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLDigitalElevationModel::isLatLonOnCurrentTile(const CLDEMTile &, const double, const double)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
      return 0LL;
    }
  }

  else
  {
    double v7 = *(double *)(a1 + 128);
    if (v7 > a2) {
      return 0LL;
    }
    LOWORD(a5) = *(_WORD *)(a1 + 108);
    sub_100292950(a3);
    double v10 = *(double *)(a1 + 120);
    if (v8 < v10) {
      return 0LL;
    }
    LOWORD(v9) = *(_WORD *)(a1 + 110);
    return v8 <= v10 + *(double *)(a1 + 136) * (double)v9;
  }

  return result;
}

BOOL sub_100D13F14(uint64_t a1, double *a2, double *a3, double a4, double a5)
{
  int v5 = *(unsigned __int8 *)(a1 + 80);
  *a2 = -9999.0;
  *a3 = 9999.0;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v11 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "#Warning,DEM,current tile is not valid",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      *(_WORD *)double v90 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,current tile is not valid",  v90,  2,  *(_OWORD *)v90,  *(void *)&v90[16]);
      goto LABEL_124;
    }

    return result;
  }

  if (*(double *)(a1 + 136) != 0.0)
  {
    if (a4 < -90.0 || a4 > 90.0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v20 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283521;
        double v92 = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,out of range",  buf,  0xCu);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        *(_DWORD *)double v90 = 134283521;
        *(double *)&v90[4] = a4;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,out of range",  v90,  12,  *(_OWORD *)v90,  *(void *)&v90[16]);
        goto LABEL_124;
      }

      return result;
    }

    sub_100292950(a5);
    double v16 = *(double *)(a1 + 128);
    if (v16 > a4)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      __int128 v17 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        double v18 = *(double *)(a1 + 128);
        *(_DWORD *)buf = 134283777;
        double v92 = a4;
        __int16 v93 = 2049;
        double v94 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf",  buf,  0x16u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        uint64_t v19 = *(void *)(a1 + 128);
        *(_DWORD *)double v90 = 134283777;
        *(double *)&v90[4] = a4;
        *(_WORD *)&v90[12] = 2049;
        *(void *)&v90[14] = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf",  v90,  22,  *(_OWORD *)v90,  *(void *)&v90[16]);
        goto LABEL_124;
      }

      return result;
    }

    double v21 = v14;
    double v22 = *(double *)(a1 + 136);
    unsigned int v23 = *(unsigned __int16 *)(a1 + 108);
    double v24 = v16 + v22 * (double)v23;
    if (v24 < a4)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      __int16 v25 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        double v92 = a4;
        __int16 v93 = 2049;
        double v94 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf",  buf,  0x16u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        *(_DWORD *)double v90 = 134283777;
        *(double *)&v90[4] = a4;
        *(_WORD *)&v90[12] = 2049;
        *(double *)&v90[14] = v24;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf",  v90,  22,  *(_OWORD *)v90,  *(void *)&v90[16]);
        goto LABEL_124;
      }

      return result;
    }

    double v26 = *(double *)(a1 + 120);
    if (v14 < v26)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      __int16 v27 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        double v28 = *(double *)(a1 + 120);
        *(_DWORD *)buf = 134283777;
        double v92 = v21;
        __int16 v93 = 2049;
        double v94 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf",  buf,  0x16u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        uint64_t v29 = *(void *)(a1 + 120);
        *(_DWORD *)double v90 = 134283777;
        *(double *)&v90[4] = v21;
        *(_WORD *)&v90[12] = 2049;
        *(void *)&v90[14] = v29;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf",  v90,  22,  *(_OWORD *)v90,  *(void *)&v90[16]);
        goto LABEL_124;
      }

      return result;
    }

    unsigned int v30 = *(unsigned __int16 *)(a1 + 110);
    double v31 = v26 + v22 * (double)v30;
    if (v14 > v31)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v32 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        double v92 = v21;
        __int16 v93 = 2049;
        double v94 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf",  buf,  0x16u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        *(_DWORD *)double v90 = 134283777;
        *(double *)&v90[4] = v21;
        *(_WORD *)&v90[12] = 2049;
        *(double *)&v90[14] = v31;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf",  v90,  22,  *(_OWORD *)v90,  *(void *)&v90[16]);
        goto LABEL_124;
      }

      return result;
    }

    float v33 = *(float *)(a1 + 156);
    float v34 = *(float *)(a1 + 104);
    if (v33 > v34) {
      float v34 = *(float *)(a1 + 156);
    }
    double v35 = v34;
    float v36 = *(float *)(a1 + 148);
    if (v36 == *(float *)(a1 + 144))
    {
      double v37 = v36;
LABEL_67:
      *a2 = v37;
      *a3 = v35;
      return 1LL;
    }

    double v38 = (v21 - v26) / v22;
    int v39 = (int)(floor(v38) + 0.5);
    if (v39 < 0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v53 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        double v54 = *(double *)(a1 + 120);
        *(_DWORD *)buf = 134283777;
        double v92 = v21;
        __int16 v93 = 2049;
        double v94 = v54;
        _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_INFO,  "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf",  buf,  0x16u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        uint64_t v55 = *(void *)(a1 + 120);
        *(_DWORD *)double v90 = 134283777;
        *(double *)&v90[4] = v21;
        *(_WORD *)&v90[12] = 2049;
        *(void *)&v90[14] = v55;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf",  v90,  22,  *(_OWORD *)v90,  *(void *)&v90[16]);
        goto LABEL_124;
      }

      return result;
    }

    double v40 = (a4 - v16) / v22;
    int v41 = (int)(floor(v40) + 0.5);
    if (v41 < 0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v56 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        double v57 = *(double *)(a1 + 128);
        *(_DWORD *)buf = 134283777;
        double v92 = a4;
        __int16 v93 = 2049;
        double v94 = v57;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf",  buf,  0x16u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        uint64_t v58 = *(void *)(a1 + 128);
        *(_DWORD *)double v90 = 134283777;
        *(double *)&v90[4] = a4;
        *(_WORD *)&v90[12] = 2049;
        *(void *)&v90[14] = v58;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf",  v90,  22,  *(_OWORD *)v90,  *(void *)&v90[16]);
        goto LABEL_124;
      }

      return result;
    }

    if (v39 >= v30)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      float v59 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        LOWORD(v60) = *(_WORD *)(a1 + 110);
        double v61 = *(double *)(a1 + 120) + (double)v60 * *(double *)(a1 + 136);
        *(_DWORD *)buf = 134283777;
        double v92 = v21;
        __int16 v93 = 2049;
        double v94 = v61;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_INFO,  "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf",  buf,  0x16u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        LOWORD(v62) = *(_WORD *)(a1 + 110);
        double v63 = *(double *)(a1 + 120) + (double)v62 * *(double *)(a1 + 136);
        *(_DWORD *)double v90 = 134283777;
        *(double *)&v90[4] = v21;
        *(_WORD *)&v90[12] = 2049;
        *(double *)&v90[14] = v63;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf",  v90,  22,  *(_OWORD *)v90,  *(void *)&v90[16]);
        goto LABEL_124;
      }

      return result;
    }

    if (v41 >= v23)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      int v64 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        LOWORD(v65) = *(_WORD *)(a1 + 108);
        double v66 = *(double *)(a1 + 128) + (double)v65 * *(double *)(a1 + 136);
        *(_DWORD *)buf = 134283777;
        double v92 = a4;
        __int16 v93 = 2049;
        double v94 = v66;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf",  buf,  0x16u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        LOWORD(v67) = *(_WORD *)(a1 + 108);
        double v68 = *(double *)(a1 + 128) + (double)v67 * *(double *)(a1 + 136);
        *(_DWORD *)double v90 = 134283777;
        *(double *)&v90[4] = a4;
        *(_WORD *)&v90[12] = 2049;
        *(double *)&v90[14] = v68;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf",  v90,  22,  *(_OWORD *)v90,  *(void *)&v90[16]);
        goto LABEL_124;
      }

      return result;
    }

    uint64_t v42 = (int)(v30 * v41);
    unint64_t v43 = v42 + v39;
    uint64_t v44 = *(void *)(a1 + 24);
    if (v44 && (unint64_t v45 = *(unsigned int *)(a1 + 112), v45 > v43))
    {
      uint64_t v46 = v39 + 1LL;
      unsigned int v47 = *(unsigned __int8 *)(v44 + v43);
      int v48 = v41 + 1;
      BOOL v49 = (_DWORD)v46 == v30 && v48 == v23;
      int v50 = *(unsigned __int8 *)(v44 + v43);
      int v51 = v50;
      int v52 = v50;
      if (v49) {
        goto LABEL_141;
      }
      if ((_DWORD)v46 == v30)
      {
        unint64_t v43 = v39 + (uint64_t)(int)(v48 * v30);
        if (v45 > v43)
        {
          int v50 = *(unsigned __int8 *)(v44 + v43);
          int v51 = v47;
          int v52 = v50;
LABEL_141:
          uint64_t v74 = v47 != v5;
          if (v51 != v5) {
            v74 |= 2uLL;
          }
          if (v52 != v5) {
            v74 |= 4uLL;
          }
          uint64_t v75 = v74 | 8;
          if (v50 == v5) {
            uint64_t v75 = v74;
          }
          char v76 = 1;
          double v77 = 0.0;
          double v78 = 0.0;
          double v79 = 0.0;
          double v80 = 0.0;
          switch(v75)
          {
            case 0LL:
              goto LABEL_182;
            case 1LL:
              goto LABEL_170;
            case 2LL:
              unsigned int v47 = v51;
              goto LABEL_170;
            case 3LL:
              char v76 = 0;
              double v79 = (double)v47;
              goto LABEL_167;
            case 4LL:
              unsigned int v47 = v52;
              goto LABEL_170;
            case 5LL:
              char v76 = 0;
              double v77 = (double)v52;
              goto LABEL_172;
            case 6LL:
              char v76 = 0;
              double v79 = (double)v52;
LABEL_167:
              double v77 = (double)v51;
              goto LABEL_177;
            case 7LL:
              char v76 = 0;
              double v77 = (double)v52;
              double v80 = (double)v47;
              double v78 = (double)v51;
              double v79 = (double)v52;
              goto LABEL_182;
            case 8LL:
              unsigned int v47 = v50;
LABEL_170:
              double v37 = (float)(v36 + (float)((float)(int)v47 * v33));
              goto LABEL_67;
            case 9LL:
              char v76 = 0;
              double v77 = (double)v50;
LABEL_172:
              double v78 = (double)v47;
              goto LABEL_174;
            case 10LL:
              char v76 = 0;
              double v77 = (double)v50;
              double v78 = (double)v51;
LABEL_174:
              double v79 = v77;
              goto LABEL_181;
            case 11LL:
              char v76 = 0;
              double v79 = (double)v47;
              double v77 = (double)v50;
              double v78 = (double)v51;
              goto LABEL_178;
            case 12LL:
              char v76 = 0;
              double v79 = (double)v52;
              double v77 = (double)v50;
LABEL_177:
              double v78 = v77;
LABEL_178:
              double v80 = v79;
              goto LABEL_182;
            case 13LL:
              char v76 = 0;
              double v79 = (double)v52;
              double v77 = (double)v50;
              double v78 = (double)v47;
              goto LABEL_181;
            case 14LL:
              char v76 = 0;
              double v79 = (double)v52;
              double v77 = (double)v50;
              double v78 = (double)v51;
LABEL_181:
              double v80 = v78;
              goto LABEL_182;
            case 15LL:
              char v76 = 0;
              double v79 = (double)v52;
              double v77 = (double)v50;
              double v80 = (double)v47;
              double v78 = (double)v51;
LABEL_182:
              LOBYTE(v15) = *(_BYTE *)(a1 + 80);
              double v83 = (double)v15;
              if (vabdd_f64(v80, v83) < 1.0e-12
                || vabdd_f64(v79, v83) < 1.0e-12
                || vabdd_f64(v78, v83) < 1.0e-12
                || vabdd_f64(v77, v83) < 1.0e-12)
              {
                if (qword_101934880 != -1) {
                  dispatch_once(&qword_101934880, &stru_10187F990);
                }
                uint64_t v84 = (os_log_s *)qword_101934888;
                if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_INFO,  "#Warning,DEM,unexpected noData",  buf,  2u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934880 != -1) {
                    dispatch_once(&qword_101934880, &stru_10187F990);
                  }
                  *(_WORD *)double v90 = 0;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,unexpected noData",  v90,  2,  *(void *)v90);
LABEL_222:
                  double v89 = (uint8_t *)v86;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLDigitalElevationModel::getAltitude(CLDEMTile &, double, double, double &, double &)",  "%s\n",  v86);
                  if (v89 != buf) {
                    free(v89);
                  }
                }

BOOL sub_100D156FC(uint64_t a1, double *a2)
{
  double v4 = *(double *)((char *)a2 + 20);
  if (v4 < 5.0) {
    double v4 = 5.0;
  }
  if (v4 <= 166.0) {
    double v5 = v4;
  }
  else {
    double v5 = 166.0;
  }
  else {
    double v6 = 0.0;
  }
  double v53 = 9999.0;
  double v7 = *(double *)((char *)a2 + 4);
  double v8 = *(double *)((char *)a2 + 12);
  double v51 = v8;
  double v52 = v7;
  double v50 = -9999.0;
  uint64_t v9 = a1 + 912;
  BOOL v10 = sub_100D13F14(a1 + 912, &v50, &v53, v7, v8);
  if (!v10)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    double v32 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      uint64_t v33 = *(void *)((char *)a2 + 4);
      uint64_t v34 = *(void *)((char *)a2 + 12);
      *(_DWORD *)buf = 134284289;
      *(void *)&uint8_t buf[4] = v33;
      *(_WORD *)&_BYTE buf[12] = 2049;
      *(void *)&_BYTE buf[14] = v34;
      *(_WORD *)&_BYTE buf[22] = 2049;
      double v65 = v7;
      __int16 v66 = 2049;
      double v67 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "DEM,populateSlope,fail,lat,%{private}.8lf,lon,%{private}.8lf,testLocationLatDegs,%{private}.8lf,testLocationLonD egs,%{private}.8lf",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v35 = *(double *)((char *)a2 + 4);
      double v36 = *(double *)((char *)a2 + 12);
      int v54 = 134284289;
      double v55 = v35;
      __int16 v56 = 2049;
      double v57 = v36;
      __int16 v58 = 2049;
      double v59 = v7;
      __int16 v60 = 2049;
      double v61 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "DEM,populateSlope,fail,lat,%{private}.8lf,lon,%{private}.8lf,testLocationLatDegs,%{private}.8lf,testLocationLonD egs,%{private}.8lf",  &v54,  42);
      double v38 = (char *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }

    return v10;
  }

  double v11 = v50;
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  uint64_t v12 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    double v13 = *(double *)((char *)a2 + 20);
    uint64_t v14 = *((void *)a2 + 67);
    *(_DWORD *)buf = 134284545;
    *(double *)&uint8_t buf[4] = v7;
    *(_WORD *)&_BYTE buf[12] = 2049;
    *(double *)&_BYTE buf[14] = v8;
    *(_WORD *)&_BYTE buf[22] = 2048;
    double v65 = v13;
    __int16 v66 = 2048;
    double v67 = v11;
    __int16 v68 = 2048;
    uint64_t v69 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "DEM,populateSlope,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%.1lf,centerAltitude,%.1lf,daemonLocation.priv.groundAltitude,%.1lf",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    double v45 = *(double *)((char *)a2 + 20);
    uint64_t v46 = *((void *)a2 + 67);
    int v54 = 134284545;
    double v55 = v7;
    __int16 v56 = 2049;
    double v57 = v8;
    __int16 v58 = 2048;
    double v59 = v45;
    __int16 v60 = 2048;
    double v61 = v11;
    __int16 v62 = 2048;
    uint64_t v63 = v46;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,populateSlope,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%.1lf,centerAltitude,%.1lf,daemonLocation.priv.groundAltitude,%.1lf",  &v54,  52);
    int v48 = (char *)v47;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)",  "%s\n",  v47);
    if (v48 != buf) {
      free(v48);
    }
  }

  unint64_t v15 = 0LL;
  double v16 = (double *)(a1 + 608);
  double v17 = 1.5;
  double v18 = 0.0;
  double v19 = -450.0;
  double v20 = 8850.0;
  while (1)
  {
    sub_100D2E0A8( v16,  &v52,  &v51,  *(double *)((char *)a2 + 4),  *(double *)((char *)a2 + 12),  a2[67],  v6 + (double)v15 * 90.0,  v5);
    if (sub_100D13CE4(v9, v52, v51, v21, v22))
    {
      if (!sub_100D13F14(v9, &v50, &v53, v52, v51))
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        __int16 v25 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = *(void *)((char *)a2 + 4);
          uint64_t v27 = *(void *)((char *)a2 + 12);
          *(_DWORD *)buf = 134284289;
          *(void *)&uint8_t buf[4] = v26;
          *(_WORD *)&_BYTE buf[12] = 2049;
          *(void *)&_BYTE buf[14] = v27;
          *(_WORD *)&_BYTE buf[22] = 2049;
          double v65 = v52;
          __int16 v66 = 2049;
          double v67 = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "DEM,populateSlope,fail,lat,%{private}.6lf,lon,%{private}.6lf,testLatDegs,%{private}.6lf,testLonDegs,%{private}.6lf",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          double v28 = *(double *)((char *)a2 + 4);
          double v29 = *(double *)((char *)a2 + 12);
          int v54 = 134284289;
          double v55 = v28;
          __int16 v56 = 2049;
          double v57 = v29;
          __int16 v58 = 2049;
          double v59 = v52;
          __int16 v60 = 2049;
          double v61 = v51;
          LODWORD(v49) = 42;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,populateSlope,fail,lat,%{private}.6lf,lon,%{private}.6lf,testLatDegs,%{private}.6lf,testLonDegs,%{private}.6lf",  &v54,  v49);
          double v31 = (char *)v30;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)",  "%s\n",  v30);
          if (v31 != buf) {
            free(v31);
          }
        }

        goto LABEL_39;
      }

      double v23 = (v50 - v11) / v5;
      double v24 = fabs(v23);
      if (v24 >= v18) {
        double v18 = v24;
      }
      if (v50 >= v19) {
        double v19 = v50;
      }
      if (v20 >= v50) {
        double v20 = v50;
      }
      if (v17 < v53) {
        double v17 = v53;
      }
      if (v15 == 1)
      {
        a2[65] = -v23;
        goto LABEL_39;
      }

      if (v15 == 3) {
        break;
      }
    }

id sub_100D15E40(uint64_t a1, _BYTE *a2, double a3, double a4)
{
  *a2 = 0;
  HIWORD(v30) = 0;
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  double v8 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    buf[0].st_dev = 134283777;
    *(double *)&buf[0].st_mode = a3;
    WORD2(buf[0].st_ino) = 2049;
    *(double *)((char *)&buf[0].st_ino + 6) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "DEM,loadTile,lat,%{private}.7lf,lon,%{private}.7lf",  (uint8_t *)buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    int v32 = 134283777;
    double v33 = a3;
    __int16 v34 = 2049;
    double v35 = a4;
    LODWORD(v30) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,loadTile,lat,%{private}.7lf,lon,%{private}.7lf",  &v32,  v30,  *(_OWORD *)&__p.__r_.__value_.__l.__data_,  __p.__r_.__value_.__l.__cap_);
    double v22 = (stat *)v21;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLDigitalElevationModel::loadTile(double, double, BOOL &)", "%s\n", v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  id v10 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 368), "vendor"), "proxyForService:", @"CLTilesManager"),  "syncgetTileFilePath:latitude:longitude:isFileAccessible:isTileNotExistingOnServer:",  1,  (char *)&v30 + 7,  (char *)&v30 + 6,  a3,  a4);
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  double v11 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent();
    buf[0].st_dev = 134349056;
    *(double *)&buf[0].st_mode = v12 - Current;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "DEM,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v23 = qword_101934888;
    CFAbsoluteTime v24 = CFAbsoluteTimeGetCurrent();
    int v32 = 134349056;
    double v33 = v24 - Current;
    LODWORD(v30) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "DEM,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf",  &v32,  v30);
    uint64_t v26 = (stat *)v25;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLDigitalElevationModel::loadTile(double, double, BOOL &)", "%s\n", v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  if (!v10) {
    goto LABEL_27;
  }
  sub_1010DDBC0(buf, (char *)[v10 UTF8String]);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[0].st_dev;
  __p.__r_.__value_.__l.__cap_ = *(void *)&buf[0].st_uid;
  if (!HIBYTE(v30))
  {
LABEL_26:
    id v10 = 0LL;
LABEL_27:
    *a2 = 1;
    goto LABEL_28;
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)p_p, buf))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v14 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      unint64_t v15 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      buf[0].st_dev = 136446210;
      *(void *)&buf[0].st_mode = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "#Warning,Unexpected, this tile should be on disk,%{public}s",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      *(double *)&data = COERCE_DOUBLE(&__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        data = (std::string *)__p.__r_.__value_.__l.__data_;
      }
      int v32 = 136446210;
      double v33 = *(double *)&data;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,Unexpected, this tile should be on disk,%{public}s",  &v32,  v30);
      double v29 = (stat *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::loadTile(double, double, BOOL &)",  "%s\n",  v28);
      if (v29 != buf) {
        free(v29);
      }
    }

    goto LABEL_26;
  }

  LOBYTE(buf[0].st_dev) = 0;
  uint64_t v17 = sub_100D1751C(a1 + 912, &__p, (BOOL *)buf);
  id v10 = (id)v17;
  if (LOBYTE(buf[0].st_dev)) {
    char v18 = v17;
  }
  else {
    char v18 = 1;
  }
  if ((v18 & 1) == 0)
  {
    id v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 368), "vendor"), "proxyForService:", @"CLTilesManager");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v20 = &__p;
    }
    else {
      double v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    objc_msgSend( v19,  "syncgetDeleteTileFile:atPath:",  1,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
    *a2 = 1;
  }

void sub_100D16424( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100D16464(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_DWORD *)(a2 + 784) = -2;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v9 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#Warning,DEM,current tile is not valid", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v81) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,current tile is not valid",  &v81,  2);
      goto LABEL_119;
    }

    return result;
  }

  if (*(double *)(a1 + 136) == 0.0)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    double v6 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning,DEM,cellsize == 0", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v81) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,cellsize == 0",  &v81,  2);
LABEL_119:
      double v61 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLDigitalElevationModel::getFlatnessMetric(const CLDEMTile &, const double, const double, GNSS::DaemonLocation &)",  "%s\n",  v8);
      if (v61 != buf) {
        free(v61);
      }
      return 0LL;
    }
  }

  else
  {
    *(_DWORD *)(a2 + 784) = -3;
    if (a3 < -90.0 || a3 > 90.0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      char v18 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283521;
        double v86 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,out of range",  buf,  0xCu);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        int v81 = 134283521;
        double v82 = a3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,out of range",  &v81,  12);
        goto LABEL_119;
      }

      return result;
    }

    sub_100292950(a4);
    double v14 = *(double *)(a1 + 128);
    if (v14 <= a3)
    {
      double v19 = v11;
      *(_DWORD *)(a2 + 784) = -2;
      double v20 = *(double *)(a1 + 136);
      LOWORD(v12) = *(_WORD *)(a1 + 108);
      double v21 = (double)v12;
      double v22 = v14 + v20 * v21;
      if (v22 >= a3)
      {
        double v24 = *(double *)(a1 + 120);
        if (v19 >= v24)
        {
          LOWORD(v21) = *(_WORD *)(a1 + 110);
          double v28 = (double)*(unint64_t *)&v21;
          double v29 = v24 + v20 * v28;
          if (v19 <= v29)
          {
            if (sub_100D13CE4(a1, a3, v19, v28, v13))
            {
              if (*(float *)(a1 + 148) == *(float *)(a1 + 144))
              {
                *(_DWORD *)(a2 + 784) = *(unsigned __int16 *)(a1 + 110) * *(unsigned __int16 *)(a1 + 108);
                *(_DWORD *)(a2 + 788) = 1065353216;
              }

              else
              {
                double v32 = *(double *)(a1 + 136);
                int v33 = (int)(floor((v19 - *(double *)(a1 + 120)) / v32) + 0.5);
                if (v33 < 0)
                {
                  if (qword_101934880 != -1) {
                    dispatch_once(&qword_101934880, &stru_10187F990);
                  }
                  uint64_t v41 = (os_log_s *)qword_101934888;
                  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                  {
                    double v42 = *(double *)(a1 + 120);
                    *(_DWORD *)buf = 134283777;
                    double v86 = v19;
                    __int16 v87 = 2049;
                    double v88 = v42;
                    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf",  buf,  0x16u);
                  }

                  BOOL result = sub_1002921D0(115, 2);
                  if (result)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934880 != -1) {
                      dispatch_once(&qword_101934880, &stru_10187F990);
                    }
                    double v43 = *(double *)(a1 + 120);
                    int v81 = 134283777;
                    double v82 = v19;
                    __int16 v83 = 2049;
                    double v84 = v43;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf",  &v81,  22);
                    goto LABEL_119;
                  }

                  return result;
                }

                double v34 = floor((a3 - *(double *)(a1 + 128)) / v32) + 0.5;
                int v35 = (int)v34;
                if ((int)v34 < 0)
                {
                  if (qword_101934880 != -1) {
                    dispatch_once(&qword_101934880, &stru_10187F990);
                  }
                  uint64_t v44 = (os_log_s *)qword_101934888;
                  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                  {
                    double v45 = *(double *)(a1 + 128);
                    *(_DWORD *)buf = 134283777;
                    double v86 = a3;
                    __int16 v87 = 2049;
                    double v88 = v45;
                    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf",  buf,  0x16u);
                  }

                  BOOL result = sub_1002921D0(115, 2);
                  if (result)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934880 != -1) {
                      dispatch_once(&qword_101934880, &stru_10187F990);
                    }
                    double v46 = *(double *)(a1 + 128);
                    int v81 = 134283777;
                    double v82 = a3;
                    __int16 v83 = 2049;
                    double v84 = v46;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf",  &v81,  22);
                    goto LABEL_119;
                  }

                  return result;
                }

                uint64_t v36 = *(unsigned __int16 *)(a1 + 110);
                if (v33 >= v36)
                {
                  if (qword_101934880 != -1) {
                    dispatch_once(&qword_101934880, &stru_10187F990);
                  }
                  unsigned int v47 = (os_log_s *)qword_101934888;
                  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                  {
                    LOWORD(v48) = *(_WORD *)(a1 + 110);
                    double v49 = *(double *)(a1 + 120) + (double)v48 * *(double *)(a1 + 136);
                    *(_DWORD *)buf = 134283777;
                    double v86 = v19;
                    __int16 v87 = 2049;
                    double v88 = v49;
                    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf",  buf,  0x16u);
                  }

                  BOOL result = sub_1002921D0(115, 2);
                  if (result)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934880 != -1) {
                      dispatch_once(&qword_101934880, &stru_10187F990);
                    }
                    LOWORD(v50) = *(_WORD *)(a1 + 110);
                    double v51 = *(double *)(a1 + 120) + (double)v50 * *(double *)(a1 + 136);
                    int v81 = 134283777;
                    double v82 = v19;
                    __int16 v83 = 2049;
                    double v84 = v51;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf",  &v81,  22);
                    goto LABEL_119;
                  }

                  return result;
                }

                unsigned int v37 = *(unsigned __int16 *)(a1 + 108);
                if (v35 >= v37)
                {
                  if (qword_101934880 != -1) {
                    dispatch_once(&qword_101934880, &stru_10187F990);
                  }
                  double v52 = (os_log_s *)qword_101934888;
                  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                  {
                    LOWORD(v53) = *(_WORD *)(a1 + 108);
                    double v54 = *(double *)(a1 + 128) + (double)v53 * *(double *)(a1 + 136);
                    *(_DWORD *)buf = 134283777;
                    double v86 = a3;
                    __int16 v87 = 2049;
                    double v88 = v54;
                    _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf",  buf,  0x16u);
                  }

                  BOOL result = sub_1002921D0(115, 2);
                  if (result)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934880 != -1) {
                      dispatch_once(&qword_101934880, &stru_10187F990);
                    }
                    LOWORD(v55) = *(_WORD *)(a1 + 108);
                    double v56 = *(double *)(a1 + 128) + (double)v55 * *(double *)(a1 + 136);
                    int v81 = 134283777;
                    double v82 = a3;
                    __int16 v83 = 2049;
                    double v84 = v56;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf",  &v81,  22);
                    goto LABEL_119;
                  }

                  return result;
                }

                uint64_t v38 = v33;
                uint64_t v39 = *(void *)(a1 + 24);
                int v40 = *(unsigned __int8 *)(v39 + v33 + *(unsigned __int16 *)(a1 + 110) * (uint64_t)v35);
                if (v40 == *(unsigned __int8 *)(a1 + 80))
                {
                  *(_DWORD *)(a2 + 784) = -2;
                }

                else
                {
                  unsigned int v80 = v33;
                  int v57 = v33 + 1;
                  if (v40 == *(unsigned __int8 *)(v39 + *(unsigned __int16 *)(a1 + 110) * (uint64_t)v35 + v38 + 1)
                    && (uint64_t v58 = (v35 + 1LL) * v36, v40 == *(unsigned __int8 *)(v39 + v58 + v38))
                    && v40 == *(unsigned __int8 *)(v39 + v58 + v57))
                  {
                    unsigned int v79 = (int)v34;
                    int v59 = v80 - 6;
                    if (v80 >= 6)
                    {
                      int v60 = v80 + 6;
                      if (v80 + 6 >= v36)
                      {
                        int v60 = v36 - 1;
                        int v59 = v36 - 12;
                      }
                    }

                    else
                    {
                      int v59 = 0;
                      int v60 = 11;
                    }

                    int v62 = v79 - 6;
                    if (v79 >= 6)
                    {
                      int v63 = v79 + 6;
                      if (v79 + 6 >= v37)
                      {
                        int v63 = v37 - 1;
                        int v62 = v37 - 12;
                      }
                    }

                    else
                    {
                      int v62 = 0;
                      int v63 = 11;
                    }

                    int v64 = sub_100D1978C(a1, v62, v63, v59, v60, v80, v79, 12);
                    *(_DWORD *)(a2 + 784) = v64;
                    if (v64 >= 143)
                    {
                      int v65 = v80 - 20;
                      if (v80 >= 0x14)
                      {
                        int v66 = v80 + 20;
                        unsigned int v67 = *(unsigned __int16 *)(a1 + 110);
                        if (v80 + 20 >= v67)
                        {
                          int v66 = v67 - 1;
                          int v65 = v67 - 40;
                        }
                      }

                      else
                      {
                        int v65 = 0;
                        int v66 = 39;
                      }

                      int v68 = v79 - 20;
                      if (v79 >= 0x14)
                      {
                        int v69 = v79 + 20;
                        unsigned int v70 = *(unsigned __int16 *)(a1 + 108);
                        if (v79 + 20 >= v70)
                        {
                          int v69 = v70 - 1;
                          int v68 = v70 - 40;
                        }
                      }

                      else
                      {
                        int v68 = 0;
                        int v69 = 39;
                      }

                      int v71 = sub_100D1978C(a1, v68, v69, v65, v66, v80, v79, 40);
                      *(_DWORD *)(a2 + 784) = v71;
                      float v72 = *(float *)(a1 + 148);
                      float v73 = 0.9;
                      float v74 = 1.0;
                      if (v72 >= 5.0) {
                        float v73 = 1.0;
                      }
                      if (*(float *)(a1 + 156) > 1.0)
                      {
                        float v75 = *(float *)(a1 + 144) - v72;
                        if (v75 >= 2000.0) {
                          float v74 = 0.0005;
                        }
                        else {
                          float v74 = (float)(v75 / -2000.0) + 1.0;
                        }
                      }

                      float v78 = 0.25;
                      if (v71 >= 500) {
                        float v78 = (float)((float)v71 / 1600.0) * 0.2 + 0.8;
                      }
                      *(float *)(a2 + 788) = (float)(v73 * v74) * v78;
                    }
                  }

                  else
                  {
                    *(void *)(a2 + 784) = 0x3F80000000000000LL;
                  }
                }
              }
            }

            else
            {
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_10187F990);
              }
              double v31 = (os_log_s *)qword_101934888;
              if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 134283777;
                double v86 = a3;
                __int16 v87 = 2049;
                double v88 = v19;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,longitude,%{private}.9lf,is not in the current DEM tile",  buf,  0x16u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934880 != -1) {
                  dispatch_once(&qword_101934880, &stru_10187F990);
                }
                int v81 = 134283777;
                double v82 = a3;
                __int16 v83 = 2049;
                double v84 = v19;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,longitude,%{private}.9lf,is not in the current DEM tile",  &v81,  22);
                double v77 = (uint8_t *)v76;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLDigitalElevationModel::getFlatnessMetric(const CLDEMTile &, const double, const double, GNSS::DaemonLocation &)",  "%s\n",  v76);
                if (v77 != buf) {
                  free(v77);
                }
              }
            }

            return 1LL;
          }

          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          uint64_t v30 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134283777;
            double v86 = v19;
            __int16 v87 = 2049;
            double v88 = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf",  buf,  0x16u);
          }

          BOOL result = sub_1002921D0(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            int v81 = 134283777;
            double v82 = v19;
            __int16 v83 = 2049;
            double v84 = v29;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf",  &v81,  22);
            goto LABEL_119;
          }
        }

        else
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          __int16 v25 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
          {
            double v26 = *(double *)(a1 + 120);
            *(_DWORD *)buf = 134283777;
            double v86 = v19;
            __int16 v87 = 2049;
            double v88 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf",  buf,  0x16u);
          }

          BOOL result = sub_1002921D0(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            double v27 = *(double *)(a1 + 120);
            int v81 = 134283777;
            double v82 = v19;
            __int16 v83 = 2049;
            double v84 = v27;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf",  &v81,  22);
            goto LABEL_119;
          }
        }
      }

      else
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        uint64_t v23 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134283777;
          double v86 = a3;
          __int16 v87 = 2049;
          double v88 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf",  buf,  0x16u);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          int v81 = 134283777;
          double v82 = a3;
          __int16 v83 = 2049;
          double v84 = v22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf",  &v81,  22);
          goto LABEL_119;
        }
      }
    }

    else
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      unint64_t v15 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        double v16 = *(double *)(a1 + 128);
        *(_DWORD *)buf = 134283777;
        double v86 = a3;
        __int16 v87 = 2049;
        double v88 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf",  buf,  0x16u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        double v17 = *(double *)(a1 + 128);
        int v81 = 134283777;
        double v82 = a3;
        __int16 v83 = 2049;
        double v84 = v17;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf",  &v81,  22);
        goto LABEL_119;
      }
    }
  }

  return result;
}

uint64_t sub_100D1751C(uint64_t a1, const std::string *a2, BOOL *a3)
{
  unint64_t v76 = 0LL;
  double v77 = 0LL;
  HIDWORD(v75) = 0;
  sub_100D19528(a1);
  if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    double v6 = (const char *)a2;
  }
  else {
    double v6 = (const char *)a2->__r_.__value_.__r.__words[0];
  }
  double v7 = fopen(v6, "rb");
  if (v7)
  {
    double v8 = v7;
    uint64_t v9 = ftell(v7);
    if (!sub_100D187CC(v8, a1 + 64, &v76, &v77))
    {
LABEL_12:
      fclose(v8);
LABEL_13:
      sub_100D19528(a1);
      return 0LL;
    }

    if (fseek(v8, 0LL, 2))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      id v10 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Error,DEM,fseek returned non-zero", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        LOWORD(v88.st_dev) = 0;
        LODWORD(v75) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,fseek returned non-zero",  &v88,  v75);
        int v71 = (uint8_t *)v70;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)",  "%s\n",  v70);
        if (v71 != buf) {
          free(v71);
        }
      }

      goto LABEL_12;
    }

    uint64_t v16 = ftell(v8);
    fclose(v8);
    if (*(unsigned __int8 *)(a1 + 91) | *(unsigned __int8 *)(a1 + 90))
    {
      *a3 = 0;
      goto LABEL_13;
    }

    BOOL v17 = *(_BYTE *)(a1 + 78) == 2;
    *a3 = v17;
    if (!v17) {
      goto LABEL_13;
    }
    char v18 = (char *)(v16 - v9);
    uint64_t v19 = *(_DWORD *)(a1 + 112) + *(unsigned __int8 *)(a1 + 79);
    double v20 = v77;
    if (v18 != &v77[v19])
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v24 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "#Error,DEM,Invalid CLDEM tile file - file size does not match headerLength+dataSizeBytes",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_13;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v88.st_dev) = 0;
      LODWORD(v75) = 2;
      double v23 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,Invalid CLDEM tile file - file size does not match headerLength+dataSizeBytes",  &v88,  v75);
      goto LABEL_116;
    }

    if (v19 > 0x400000)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v21 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "#Error,DEM,tile is larger than the allowed maximum",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_13;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v88.st_dev) = 0;
      LODWORD(v75) = 2;
      double v23 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,tile is larger than the allowed maximum",  &v88,  v75);
      goto LABEL_116;
    }

    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v25 = (const char *)a2;
    }
    else {
      __int16 v25 = (const char *)a2->__r_.__value_.__r.__words[0];
    }
    if (sub_100296E50(v25, 3LL))
    {
      if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v26 = (const char *)a2;
      }
      else {
        double v26 = (const char *)a2->__r_.__value_.__r.__words[0];
      }
      int v27 = open(v26, 0);
      *(_DWORD *)a1 = v27;
      if (v27 == -1)
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        double v42 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
        {
          if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
            double v43 = a2;
          }
          else {
            double v43 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          }
          int v44 = *__error();
          *(_DWORD *)buf = 136315394;
          *(void *)double v90 = v43;
          *(_WORD *)&v90[8] = 1024;
          LODWORD(st_size) = v44;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "#Error,DEM,can't open,%s,errno,%d",  buf,  0x12u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_100;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        uint64_t v45 = qword_101934888;
        if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          double v46 = a2;
        }
        else {
          double v46 = (const std::string *)a2->__r_.__value_.__r.__words[0];
        }
        int v47 = *__error();
        v88.st_dev = 136315394;
        *(void *)&v88.st_mode = v46;
        WORD2(v88.st_ino) = 1024;
        *(_DWORD *)((char *)&v88.st_ino + 6) = v47;
        LODWORD(v75) = 18;
        double v41 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v45,  16LL,  "#Error,DEM,can't open,%s,errno,%d",  &v88,  v75);
      }

      else
      {
        if (fstat(v27, &v88) != -1)
        {
          double v28 = mmap(0LL, v88.st_size, 1, 2, *(_DWORD *)a1, 0LL);
          if (v28 == (void *)-1LL)
          {
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            int v59 = (os_log_s *)qword_101934888;
            if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
            {
              int v60 = *__error();
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)double v90 = v60;
              _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "#Error,DEM,mmap,MAP_FAILED,errno,%d",  buf,  8u);
            }

            if (!sub_1002921D0(115, 0)) {
              goto LABEL_13;
            }
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            uint64_t v61 = qword_101934888;
            int v62 = *__error();
            int v78 = 67109120;
            LODWORD(v79) = v62;
            double v23 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v61,  16LL,  "#Error,DEM,mmap,MAP_FAILED,errno,%d",  &v78);
            goto LABEL_116;
          }

          *(void *)(a1 + 8) = v88.st_size;
          *(void *)(a1 + 16) = v28;
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          double v29 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
          {
            if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v30 = a2;
            }
            else {
              uint64_t v30 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            }
            uint64_t v32 = *(void *)(a1 + 8);
            uint64_t v31 = *(void *)(a1 + 16);
            *(_DWORD *)buf = 136316162;
            *(void *)double v90 = v30;
            *(_WORD *)&v90[8] = 2048;
            st_uint64_t size = v88.st_size;
            __int16 v92 = 1024;
            BOOL v93 = (v88.st_mode & 0xF000) == 0x8000;
            __int16 v94 = 2048;
            uint64_t v95 = v31;
            __int16 v96 = 2048;
            uint64_t v97 = v32;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "DEM,mmapDem,%s,size,%lld,regfile,%d,m,%p,size,%lu",  buf,  0x30u);
          }

          if (!sub_1002921D0(115, 2)) {
            goto LABEL_100;
          }
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int v33 = a2;
          }
          else {
            int v33 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          }
          uint64_t v35 = *(void *)(a1 + 8);
          uint64_t v34 = *(void *)(a1 + 16);
          int v78 = 136316162;
          unsigned int v79 = v33;
          __int16 v80 = 2048;
          off_t v81 = v88.st_size;
          __int16 v82 = 1024;
          BOOL v83 = (v88.st_mode & 0xF000) == 0x8000;
          __int16 v84 = 2048;
          uint64_t v85 = v34;
          __int16 v86 = 2048;
          uint64_t v87 = v35;
          LODWORD(v75) = 48;
          double v36 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,mmapDem,%s,size,%lld,regfile,%d,m,%p,size,%lu",  (const char *)&v78,  v75,  v76,  v77);
          uint64_t v38 = v37;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)",  "%s\n",  v36);
          goto LABEL_160;
        }

        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        unint64_t v48 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
        {
          if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
            double v49 = a2;
          }
          else {
            double v49 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          }
          int v50 = *__error();
          *(_DWORD *)buf = 136315394;
          *(void *)double v90 = v49;
          *(_WORD *)&v90[8] = 1024;
          LODWORD(st_size) = v50;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "#Error,DEM,can't stat,%s,errno,%d",  buf,  0x12u);
        }

        if (!sub_1002921D0(115, 0))
        {
LABEL_100:
          uint64_t v51 = *(void *)(a1 + 16);
          if (v51 && (double v52 = *(char **)(a1 + 8), v52 == v18) && v52)
          {
            if ((sub_100D185D8( (uint64_t)&v20[v51],  *(_DWORD *)(a1 + 112) + *(unsigned __int8 *)(a1 + 79),  v76,  (_DWORD *)&v75 + 1) & 1) == 0)
            {
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_10187F990);
              }
              double v56 = (os_log_s *)qword_101934888;
              if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_INFO,  "#Warning,DEM,calculateCLDEM_CRC returned false unexpectedly",  buf,  2u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_13;
              }
              bzero(buf, 0x65CuLL);
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_10187F990);
              }
              LOWORD(v88.st_dev) = 0;
              LODWORD(v75) = 2;
              double v57 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,calculateCLDEM_CRC returned false unexpectedly",  &v88,  v75);
              unint64_t v55 = v58;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)",  "%s\n",  v57);
              goto LABEL_117;
            }

            int v53 = HIDWORD(v75);
            if (HIDWORD(v75) == *(_DWORD *)(a1 + 116))
            {
              if (*(_DWORD *)(a1 + 112)) {
                *(void *)(a1 + 24) = &v20[*(unsigned __int8 *)(a1 + 79) + *(void *)(a1 + 16)];
              }
              uint64_t v11 = 1LL;
              *(_BYTE *)(a1 + 32) = 1;
              std::string::operator=((std::string *)(a1 + 40), a2);
              return v11;
            }

            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            int v63 = (os_log_s *)qword_101934888;
            if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
            {
              int v64 = *(_DWORD *)(a1 + 116);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)double v90 = v53;
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = v64;
              _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "#Error,DEM,Invalid CLDEM,crc fail,calculated,%X,received,%X",  buf,  0xEu);
            }

            if (!sub_1002921D0(115, 0)) {
              goto LABEL_13;
            }
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            int v65 = *(_DWORD *)(a1 + 116);
            v88.st_dev = 67109376;
            *(_DWORD *)&v88.st_mode = v53;
            LOWORD(v88.st_ino) = 1024;
            *(_DWORD *)((char *)&v88.st_ino + 2) = v65;
            double v23 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,Invalid CLDEM,crc fail,calculated,%X,received,%X",  &v88);
          }

          else
          {
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            double v54 = (os_log_s *)qword_101934888;
            if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#Error,mmap failed", buf, 2u);
            }

            if (!sub_1002921D0(115, 0)) {
              goto LABEL_13;
            }
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10187F990);
            }
            LOWORD(v88.st_dev) = 0;
            double v23 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,mmap failed");
          }

uint64_t sub_100D185D8(uint64_t result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  if (result)
  {
    uint64_t v5 = a2 - 4;
    if (a2 - 4 <= a3)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v6 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        unint64_t v15 = a3;
        __int16 v16 = 2050;
        uint64_t v17 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "#Error,DEM,indexCrcInBuffer,%zu,exceeds (bufferSize-4) bytes,%{public}zu",  buf,  0x16u);
      }

      BOOL v7 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (v7)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        int v10 = 134218240;
        unint64_t v11 = a3;
        __int16 v12 = 2050;
        uint64_t v13 = v5;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,indexCrcInBuffer,%zu,exceeds (bufferSize-4) bytes,%{public}zu",  &v10,  22);
        uint64_t v9 = (uint8_t *)v8;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLDigitalElevationModel::calculateCLDEM_CRC(unsigned char *, const size_t, const size_t, unsigned int &)",  "%s\n",  v8);
        if (v9 != buf) {
          free(v9);
        }
        return 0LL;
      }
    }

    else
    {
      *a4 = sub_1009A5E64(result, a2, a3);
      return 1LL;
    }
  }

  return result;
}

BOOL sub_100D187CC(FILE *a1, uint64_t a2, void *a3, void *a4)
{
  if (!a1 || feof(a1)) {
    return 0LL;
  }
  uint64_t v10 = 0LL;
  while (1)
  {
    LOBYTE(__ptr) = 0;
    if (fread(&__ptr, 1uLL, 1uLL, a1) != 1) {
      return 0LL;
    }
    uint64_t v11 = ftell(a1);
LABEL_12:
    BOOL v8 = 0LL;
    return v8;
  }

  uint64_t v12 = v11;
  v143[0] = 67;
  if (fread(&v143[1], 1uLL, 4uLL, a1) != 4) {
    return 0LL;
  }
  *(_DWORD *)a2 = *(_DWORD *)v143;
  int v14 = v143[4];
  *(_BYTE *)(a2 + 4) = v143[4];
  v13.i32[0] = *(_DWORD *)a2;
  if (vmovn_s16((int16x8_t)vmovl_u8(v13)).u32[0] != 1162103875 || v14 != 77)
  {
    if (!fseek(a1, v12, 0)) {
      goto LABEL_12;
    }
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    int v69 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "#Error,DEM,fseek returned non-zero", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    LOWORD(v85) = 0;
    double v71 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,fseek returned non-zero",  &v85,  2);
    goto LABEL_68;
  }

  *a4 = v10;
  if (fread(&v143[5], 1uLL, 9uLL, a1) != 9)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v72 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_ERROR,  "#Error,DEM,Invalid CLDEM tile file - header string",  buf,  2u);
    }

    BOOL v8 = 0LL;
    if (!sub_1002921D0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    LOWORD(v85) = 0;
    double v71 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,Invalid CLDEM tile file - header string",  &v85,  2);
    goto LABEL_68;
  }

  *(void *)a2 = *(void *)v143;
  *(void *)(a2 + 6) = *(void *)&v143[6];
  if (fread(&v144, 1uLL, 1uLL, a1) != 1)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    float v73 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_ERROR,  "#Error,DEM,Invalid CLDEM tile file - version",  buf,  2u);
    }

    BOOL v8 = 0LL;
    if (!sub_1002921D0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    LOWORD(v85) = 0;
    double v71 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,Invalid CLDEM tile file - version",  &v85,  2);
    goto LABEL_68;
  }

  *(_BYTE *)(a2 + 14) = v144;
  if (fread(&v145, 1uLL, 1uLL, a1) != 1)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    int v74 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_ERROR,  "#Error,DEM,Invalid CLDEM tile file - headerLength",  buf,  2u);
    }

    BOOL v8 = 0LL;
    if (!sub_1002921D0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 == -1) {
      goto LABEL_67;
    }
LABEL_89:
    dispatch_once(&qword_101934880, &stru_10187F990);
LABEL_67:
    LOWORD(v85) = 0;
    double v71 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,Invalid CLDEM tile file - headerLength",  &v85,  2);
LABEL_68:
    unint64_t v76 = v70;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)",  "%s\n",  v71);
    goto LABEL_69;
  }

  uint64_t v16 = v145;
  *(_BYTE *)(a2 + 15) = v145;
  size_t v17 = fread(&v146, 1uLL, v16 - 16, a1);
  uint64_t v18 = *(unsigned __int8 *)(a2 + 15);
  if (v17 != v18 - 16)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v75 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_ERROR,  "#Error,DEM,Invalid CLDEM tile file - headerLength",  buf,  2u);
    }

    BOOL v8 = 0LL;
    if (!sub_1002921D0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 == -1) {
      goto LABEL_67;
    }
    goto LABEL_89;
  }

  *(_BYTE *)(a2 + 16) = v146;
  *(_WORD *)(a2 + 17) = v147;
  *(_DWORD *)(a2 + 19) = v148;
  *(_BYTE *)(a2 + 23) = v149;
  *(_DWORD *)(a2 + 24) = v150;
  *(_DWORD *)(a2 + 28) = bswap32(v151);
  *(void *)(a2 + 32) = bswap64(v152);
  *(_DWORD *)(a2 + 40) = bswap32(v153);
  unsigned int v19 = bswap32(v154) >> 16;
  *(_WORD *)(a2 + 44) = v19;
  unsigned int v20 = bswap32(v155) >> 16;
  *(_WORD *)(a2 + 46) = v20;
  unsigned int v21 = bswap32(v156);
  *(_DWORD *)(a2 + 48) = v21;
  if (v21 != v20 * v19)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    double v77 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_INFO,  "#Warning,DEM,header.dataSizeBytes != header.nrows*header.ncols",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    LOWORD(v85) = 0;
    double v78 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,header.dataSizeBytes != header.nrows*header.ncols",  &v85,  2);
    unint64_t v76 = v79;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)",  "%s\n",  v78);
LABEL_69:
    if (v76 != buf) {
      free(v76);
    }
    return 0LL;
  }

  *a3 = 52LL;
  *(_DWORD *)(a2 + 52) = bswap32(v157);
  unint64_t v83 = (unint64_t)vext_s8(*(int8x8_t *)&v158[4], *(int8x8_t *)&v158[4], 4uLL);
  unint64_t __ptr = (unint64_t)vzip1_s32(*(int32x2_t *)v158, *(int32x2_t *)v159);
  unint64_t v22 = bswap64(__ptr);
  *(void *)(a2 + 56) = bswap64(v83);
  *(void *)(a2 + 64) = v22;
  *(void *)(a2 + 72) = bswap64(*(unint64_t *)&v159[4]);
  *(_DWORD *)(a2 + 80) = bswap32(v160);
  *(_DWORD *)(a2 + 84) = bswap32(v161);
  *(_DWORD *)(a2 + 88) = bswap32(v162);
  *(_DWORD *)(a2 + 92) = bswap32(v163);
  *(_DWORD *)(a2 + 96) = bswap32(v164);
  BOOL v8 = (_DWORD)v18 == 100;
  if ((_DWORD)v18 == 100)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    double v23 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *(unsigned __int8 *)(a2 + 14);
      int v25 = *(unsigned __int8 *)(a2 + 15);
      int v26 = *(unsigned __int8 *)(a2 + 16);
      int v27 = *(unsigned __int8 *)(a2 + 17);
      int v28 = *(unsigned __int8 *)(a2 + 18);
      int v29 = *(unsigned __int8 *)(a2 + 26);
      int v30 = *(unsigned __int8 *)(a2 + 27);
      int v31 = *(_DWORD *)(a2 + 28);
      uint64_t v32 = *(void *)(a2 + 32);
      double v33 = *(float *)(a2 + 40);
      int v34 = *(unsigned __int16 *)(a2 + 44);
      int v35 = *(unsigned __int16 *)(a2 + 46);
      int v36 = *(_DWORD *)(a2 + 48);
      int v37 = *(_DWORD *)(a2 + 52);
      uint64_t v38 = *(void *)(a2 + 56);
      uint64_t v39 = *(void *)(a2 + 64);
      uint64_t v40 = *(void *)(a2 + 72);
      double v41 = *(float *)(a2 + 80);
      double v42 = *(float *)(a2 + 84);
      double v43 = *(float *)(a2 + 88);
      double v44 = *(float *)(a2 + 92);
      double v45 = *(float *)(a2 + 96);
      *(_DWORD *)buf = 67114496;
      int v100 = v24;
      __int16 v101 = 1024;
      int v102 = v25;
      __int16 v103 = 1024;
      int v104 = v26;
      __int16 v105 = 1024;
      int v106 = v27;
      __int16 v107 = 1024;
      int v108 = v28;
      __int16 v109 = 1024;
      int v110 = v29;
      __int16 v111 = 1024;
      int v112 = v30;
      __int16 v113 = 1024;
      int v114 = v31;
      __int16 v115 = 2048;
      uint64_t v116 = v32;
      __int16 v117 = 2048;
      double v118 = v33;
      __int16 v119 = 1024;
      int v120 = v34;
      __int16 v121 = 1024;
      int v122 = v35;
      __int16 v123 = 1024;
      int v124 = v36;
      __int16 v125 = 1024;
      int v126 = v37;
      __int16 v127 = 2048;
      uint64_t v128 = v38;
      __int16 v129 = 2048;
      uint64_t v130 = v39;
      __int16 v131 = 2048;
      uint64_t v132 = v40;
      __int16 v133 = 2048;
      double v134 = v41;
      __int16 v135 = 2048;
      double v136 = v42;
      __int16 v137 = 2048;
      double v138 = v43;
      __int16 v139 = 2048;
      double v140 = v44;
      __int16 v141 = 2048;
      double v142 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "DEM,header,vers,%d,headerLen,%d,noDataValue,%d,importance,%d,overlapInPixels,%d,dataElementType,%d,compressionTy pe,%d,expirationAge,%d,timestamp,%.1f,uncertainty_m,%.1f,nrows,%d,ncols,%d,dataSizeBytes,%d,crc,%d,xllcorner,%f, yllcorner,%f,cellsize,%f,maxalt,%f,minalt,%f,medianalt,%f,scaleFactor,%f,meanUndulation,%f",  buf,  0xAEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      __int16 v46 = *(unsigned __int8 *)(a2 + 15);
      int v47 = *(unsigned __int8 *)(a2 + 16);
      int v48 = *(unsigned __int8 *)(a2 + 17);
      int v49 = *(unsigned __int8 *)(a2 + 26);
      int v50 = *(unsigned __int8 *)(a2 + 27);
      int v51 = *(_DWORD *)(a2 + 28);
      uint64_t v52 = *(void *)(a2 + 32);
      double v53 = *(float *)(a2 + 40);
      int v54 = *(unsigned __int16 *)(a2 + 44);
      int v55 = *(unsigned __int16 *)(a2 + 46);
      int v56 = *(_DWORD *)(a2 + 48);
      int v57 = *(_DWORD *)(a2 + 52);
      double v58 = *(double *)(a2 + 56);
      uint64_t v59 = *(void *)(a2 + 64);
      uint64_t v60 = *(void *)(a2 + 72);
      double v61 = *(float *)(a2 + 80);
      double v62 = *(float *)(a2 + 84);
      double v63 = *(float *)(a2 + 88);
      double v64 = *(float *)(a2 + 92);
      double v65 = *(float *)(a2 + 96);
      LOWORD(v86) = 1024;
      HIWORD(v86) = v46;
      LOWORD(v87) = HIWORD(v48);
      HIWORD(v87) = 1024;
      LOWORD(v88) = 1024;
      *(_DWORD *)((char *)&v88 + 2) = v49;
      HIWORD(v88) = 1024;
      *(_DWORD *)double v89 = v50;
      *(_WORD *)&v89[4] = 1024;
      *(_DWORD *)&v89[6] = v51;
      *(_WORD *)&v89[10] = 2048;
      LOWORD(v90) = HIWORD(v55);
      WORD1(v90) = 1024;
      HIDWORD(v90) = v56;
      LOWORD(v91) = 1024;
      *(_DWORD *)((char *)&v91 + 2) = v57;
      HIWORD(v91) = 2048;
      *(_WORD *)__int16 v92 = 2048;
      *(void *)&v92[2] = v59;
      *(_WORD *)&v92[10] = 2048;
      *(void *)&v92[12] = v60;
      *(_WORD *)&v92[20] = 2048;
      *(double *)&v92[22] = v61;
      *(_WORD *)&v92[30] = 2048;
      __int16 v93 = 2048;
      double v94 = v63;
      __int16 v95 = 2048;
      double v96 = v64;
      __int16 v97 = 2048;
      double v98 = v65;
      double v66 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,header,vers,%d,headerLen,%d,noDataValue,%d,importance,%d,overlapInPixels,%d,dataElementType,%d,compres sionType,%d,expirationAge,%d,timestamp,%.1f,uncertainty_m,%.1f,nrows,%d,ncols,%d,dataSizeBytes,%d,crc,%d,x llcorner,%f,yllcorner,%f,cellsize,%f,maxalt,%f,minalt,%f,medianalt,%f,scaleFactor,%f,meanUndulation,%f",  &v85,  174,  v83,  __ptr,  67114496,  v86,  v47,  v87,  v88,  *(double *)v89,  *(_DWORD *)&v89[8],  HIDWORD(v52),  *(void *)&v53 >> 16,  v54,  v90,  v91,  v58,  *(double *)v92,  *(double *)&v92[8],  *(double *)&v92[16],  *(double *)&v92[24],  v62);
      int v68 = v67;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)",  "%s\n",  v66);
      goto LABEL_87;
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    __int16 v80 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_ERROR,  "#Error,DEM,Invalid CLDEM tile file - headerLength",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v85) = 0;
      double v81 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,Invalid CLDEM tile file - headerLength",  &v85,  2);
      int v68 = v82;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)",  "%s\n",  v81);
LABEL_87:
      if (v68 != buf) {
        free(v68);
      }
    }
  }

  return v8;
}

void *sub_100D19528(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)a1 = -1;
  }

  BOOL result = *(void **)(a1 + 16);
  if (result)
  {
    size_t v4 = *(void *)(a1 + 8);
    if (v4) {
      BOOL result = (void *)munmap(result, v4);
    }
  }

  *(void *)(a1 + 160) = 0LL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(char *)(a1 + 63) < 0)
  {
    **(_BYTE **)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 63) = 0;
  }

  return result;
}

void sub_100D195AC(void *a1, uint64_t *a2, int a3, int a4, int a5, _DWORD *a6)
{
  unint64_t v30 = 0LL;
  uint64_t v12 = (char *)sub_10000956C((uint64_t)&v30, 1uLL);
  unint64_t v14 = (unint64_t)&v12[4 * v13];
  *(_DWORD *)uint64_t v12 = a4;
  unint64_t v15 = v12 + 4;
  std::string __p = v12;
  unint64_t v30 = v14;
  int v29 = v12 + 4;
  if ((unint64_t)(v12 + 4) >= v14)
  {
    size_t v17 = (char *)__p;
    uint64_t v18 = (v15 - (_BYTE *)__p) >> 2;
    unint64_t v19 = v18 + 1;
    uint64_t v20 = v14 - (void)__p;
    if (v20 >> 1 > v19) {
      unint64_t v19 = v20 >> 1;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      unint64_t v22 = (char *)sub_10000956C((uint64_t)&v30, v21);
      size_t v17 = (char *)__p;
      unint64_t v15 = v29;
    }

    else
    {
      unint64_t v22 = 0LL;
    }

    double v23 = &v22[4 * v18];
    int v24 = &v22[4 * v21];
    *(_DWORD *)double v23 = a3;
    uint64_t v16 = v23 + 4;
    while (v15 != v17)
    {
      int v25 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *((_DWORD *)v23 - 1) = v25;
      v23 -= 4;
    }

    std::string __p = v23;
    int v29 = v16;
    unint64_t v30 = (unint64_t)v24;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    *((_DWORD *)v12 + 1) = a3;
    uint64_t v16 = v12 + 8;
  }

  int v29 = v16;
  unint64_t v26 = a2[1];
  if (v26 >= a2[2])
  {
    uint64_t v27 = sub_10078CA28(a2, (uint64_t)&__p);
  }

  else
  {
    sub_10078C9D8((uint64_t)a2, (uint64_t)&__p);
    uint64_t v27 = v26 + 24;
  }

  a2[1] = v27;
  *(_DWORD *)(*(void *)(*a1 + 24LL * a3) + 4LL * a4) = a5;
  ++*a6;
  if (__p)
  {
    int v29 = (char *)__p;
    operator delete(__p);
  }

void sub_100D19770( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D1978C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v16 = *(unsigned __int8 *)(*(void *)(a1 + 24) + a6 + *(unsigned __int16 *)(a1 + 110) * a7);
  unsigned int v62 = 0;
  memset(v61, 0, sizeof(v61));
  int v60 = 0;
  unint64_t v17 = a8;
  sub_100963694(&__p, a8, &v60);
  sub_100D19BEC(v61, v17, (uint64_t)&__p);
  if (__p)
  {
    double v58 = __p;
    operator delete(__p);
  }

  if (a3 > a2)
  {
    uint64_t v18 = v61[0];
    uint64_t v19 = a3;
    uint64_t v20 = *(void *)(a1 + 24) + a4 + *(unsigned __int16 *)(a1 + 110) * (uint64_t)a3;
    uint64_t v21 = -(uint64_t)*(unsigned __int16 *)(a1 + 110);
    do
    {
      --v17;
      if (a5 > a4)
      {
        unint64_t v22 = *(_DWORD **)(v18 + 24 * v17);
        double v23 = (unsigned __int8 *)v20;
        uint64_t v24 = (a5 - a4);
        do
        {
          int v25 = *v23++;
          *v22++ = v25;
          --v24;
        }

        while (v24);
      }

      --v19;
      v20 += v21;
    }

    while (v19 > a2);
  }

  std::string __p = 0LL;
  double v58 = 0LL;
  unint64_t v59 = 0LL;
  unint64_t v56 = 0LL;
  unint64_t v26 = sub_10000956C((uint64_t)&v56, 1uLL);
  int v27 = a6 - a4;
  unint64_t v29 = (unint64_t)&v26[v28];
  *unint64_t v26 = v27;
  unint64_t v30 = v26 + 1;
  p_p = v26;
  unint64_t v56 = v29;
  int v55 = v26 + 1;
  int v31 = a7 - a2;
  if ((unint64_t)(v26 + 1) >= v29)
  {
    double v33 = p_p;
    uint64_t v34 = (v30 - (_BYTE *)p_p) >> 2;
    unint64_t v35 = v34 + 1;
    uint64_t v36 = v29 - (void)p_p;
    if (v36 >> 1 > v35) {
      unint64_t v35 = v36 >> 1;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      uint64_t v38 = (char *)sub_10000956C((uint64_t)&v56, v37);
      double v33 = p_p;
      unint64_t v30 = v55;
    }

    else
    {
      uint64_t v38 = 0LL;
    }

    uint64_t v39 = &v38[4 * v34];
    uint64_t v40 = &v38[4 * v37];
    *(_DWORD *)uint64_t v39 = v31;
    uint64_t v32 = v39 + 4;
    while (v30 != v33)
    {
      int v41 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *((_DWORD *)v39 - 1) = v41;
      v39 -= 4;
    }

    p_p = v39;
    int v55 = v32;
    unint64_t v56 = (unint64_t)v40;
    if (v33) {
      operator delete(v33);
    }
  }

  else
  {
    v26[1] = v31;
    uint64_t v32 = v26 + 2;
  }

  int v55 = v32;
  double v42 = v58;
  if ((unint64_t)v58 >= v59)
  {
    double v43 = (void *)sub_10078CA28((uint64_t *)&__p, (uint64_t)&p_p);
  }

  else
  {
    *double v58 = 0LL;
    v42[1] = 0LL;
    v42[2] = 0LL;
    sub_10001B72C(v42, p_p, (uint64_t)v55, (v55 - (_BYTE *)p_p) >> 2);
    double v43 = v42 + 3;
  }

  double v58 = v43;
  *(_DWORD *)(*(void *)(v61[0] + 24LL * v31) + 4LL * v27) = *(unsigned __int8 *)(a1 + 80);
  while (v43 != __p)
  {
    double v45 = v43 - 3;
    double v44 = (int *)*(v43 - 3);
    uint64_t v46 = *v44;
    int v47 = v44[1];
    if (v44)
    {
      *(v43 - 2) = v44;
      operator delete(v44);
    }

    double v58 = v45;
    int v48 = v46 + 1;
    int v49 = v47 + 1;
    if (v47 + 1 < a8 && *(_DWORD *)(*(void *)(v61[0] + 24LL * v49) + 4 * v46) == v16) {
      sub_100D195AC(v61, (uint64_t *)&__p, v49, v46, *(unsigned __int8 *)(a1 + 80), &v62);
    }
    unsigned int v50 = v46 - 1;
    unsigned int v51 = v47 - 1;
    if (v47 >= 1 && *(_DWORD *)(*(void *)(v61[0] + 24LL * v51) + 4 * v46) == v16) {
      sub_100D195AC(v61, (uint64_t *)&__p, v51, v46, *(unsigned __int8 *)(a1 + 80), &v62);
    }
    double v43 = v58;
  }

  uint64_t v52 = v62;
  if (p_p)
  {
    int v55 = p_p;
    operator delete(p_p);
  }

  p_p = &__p;
  sub_100006BC8((void ***)&p_p);
  std::string __p = v61;
  sub_100006BC8((void ***)&__p);
  return v52;
}

void sub_100D19B78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **__p, char **a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }

  std::string __p = &a13;
  sub_100006BC8((void ***)&__p);
  a13 = &a17;
  sub_100006BC8((void ***)&a13);
  _Unwind_Resume(a1);
}

void sub_100D19BEC(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    sub_100D1BDE4(a1, v7, a3);
  }

  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        uint64_t v11 = *(void **)(v9 - 24);
        v9 -= 24LL;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }

        uint64_t v4 = v9;
      }

      while (v9 != v8);
    }

    a1[1] = v8;
  }

uint64_t sub_100D19C80(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1 + 104;
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16LL))(a1 + 104);
  switch(a3)
  {
    case 0:
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      unint64_t v7 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DEM,avl download status,NONE", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "DEM,avl download status,NONE",  __p,  2);
        uint64_t v9 = (char *)v8;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v8);
        goto LABEL_70;
      }

      break;
    case 1:
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      int v27 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "DEM,avl download status,STARTED", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "DEM,avl download status,STARTED",  __p,  2);
        int v49 = (char *)v48;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v48);
        if (v49 != buf) {
          free(v49);
        }
      }

      *(CFAbsoluteTime *)(a1 + 584) = CFAbsoluteTimeGetCurrent();
      break;
    case 2:
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v10 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "DEM,avl download status,COMPLETED",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "DEM,avl download status,COMPLETED",  __p,  2);
        double v45 = (char *)v44;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v44);
        if (v45 != buf) {
          free(v45);
        }
      }

      sub_100386874(a2, (uint64_t)__p);
      *(_DWORD *)(a1 + 600) = 1;
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v11 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = __p;
        if (v72 < 0) {
          uint64_t v12 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "DEM,avl downloaded,%{public}s", buf, 0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        unsigned int v50 = __p;
        if (v72 < 0) {
          unsigned int v50 = (void **)__p[0];
        }
        LODWORD(v70.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
        LODWORD(v65) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,avl downloaded,%{public}s",  &v70,  v65);
        uint64_t v52 = (char *)v51;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v51);
        if (v52 != buf) {
          free(v52);
        }
      }

      if (v72 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      if (!sub_100296E50((const char *)v13, 4LL))
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        unint64_t v14 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
        {
          unint64_t v15 = __p;
          if (v72 < 0) {
            unint64_t v15 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "#Warning,DEM,Cannot set protection class for DEM avl file,%{public}s",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          unint64_t v59 = __p;
          if (v72 < 0) {
            unint64_t v59 = (void **)__p[0];
          }
          LODWORD(v70.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
          LODWORD(v65) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,Cannot set protection class for DEM avl file,%{public}s",  &v70,  v65);
          double v61 = (char *)v60;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v60);
          if (v61 != buf) {
            free(v61);
          }
        }
      }

      int v16 = (char *)sub_1002F8DDC();
      sub_10030AC8C(v16, (uint64_t)&v70);
      if (*(char *)(a1 + 439) < 0)
      {
        sub_1010DD48C(buf, *(void **)(a1 + 416), *(void *)(a1 + 424));
      }

      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 416);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 432);
      }

      if (buf[23] >= 0) {
        unint64_t v30 = buf;
      }
      else {
        unint64_t v30 = *(const std::string::value_type **)buf;
      }
      if (buf[23] >= 0) {
        std::string::size_type v31 = buf[23];
      }
      else {
        std::string::size_type v31 = *(void *)&buf[8];
      }
      std::string::append(&v70, v30, v31);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      *(CFAbsoluteTime *)(a1 + 584) = CFAbsoluteTimeGetCurrent();
      if (v72 >= 0) {
        uint64_t v32 = (char *)__p;
      }
      else {
        uint64_t v32 = (char *)__p[0];
      }
      if ((v70.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v33 = &v70;
      }
      else {
        double v33 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      sub_100293D74(v32, (const char *)v33);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v34 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v35 = __p;
        if (v72 < 0) {
          unint64_t v35 = (void **)__p[0];
        }
        uint64_t v36 = &v70;
        if ((v70.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v36 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = v35;
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "DEM,avl file decompressed,%{public}s,to,%{public}s",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        double v53 = __p;
        if (v72 < 0) {
          double v53 = (void **)__p[0];
        }
        int v54 = &v70;
        if ((v70.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v54 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        int v66 = 136446466;
        int v67 = (std::string *)v53;
        __int16 v68 = 2082;
        int v69 = v54;
        LODWORD(v65) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,avl file decompressed,%{public}s,to,%{public}s",  &v66,  v65);
        unint64_t v56 = (char *)v55;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v55);
        if (v56 != buf) {
          free(v56);
        }
      }

      if ((v70.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v37 = &v70;
      }
      else {
        unint64_t v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if (!sub_100296E50((const char *)v37, 4LL))
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        uint64_t v38 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
        {
          uint64_t v39 = &v70;
          if ((v70.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v39 = (std::string *)v70.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "#Warning,DEM,Cannot set protection class for DEM decompressed avl file,%{public}s",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10187F990);
          }
          unsigned int v62 = &v70;
          if ((v70.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            unsigned int v62 = (std::string *)v70.__r_.__value_.__r.__words[0];
          }
          int v66 = 136446210;
          int v67 = v62;
          LODWORD(v65) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,Cannot set protection class for DEM decompressed avl file,%{public}s",  &v66,  v65);
          double v64 = (char *)v63;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v63);
          if (v64 != buf) {
            free(v64);
          }
        }
      }

      uint64_t v40 = a1 + 8;
      int v41 = sub_100605200(v40);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      double v42 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "DEM,is availability file valid,%{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        int v66 = 67240192;
        LODWORD(v67) = v41;
        LODWORD(v65) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,is availability file valid,%{public}d",  &v66,  v65);
        double v58 = (char *)v57;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v57);
        if (v58 != buf) {
          free(v58);
        }
      }

      sub_100603DE8(v40);
      goto LABEL_114;
    case 3:
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      unint64_t v17 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "#Warning,DEM,avl download status,FAILED",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#Warning,DEM,avl download status,FAILED",  __p,  2);
        int v47 = (char *)v46;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v46);
        if (v47 != buf) {
          free(v47);
        }
      }

      int v18 = *(_DWORD *)(a1 + 600);
      if (v18 < 5) {
        int v19 = v18 + 1;
      }
      else {
        int v19 = v18 + 10;
      }
      *(_DWORD *)(a1 + 600) = v19;
      sub_100386874(a2, (uint64_t)__p);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v20 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = __p;
        if (v72 < 0) {
          uint64_t v21 = (void **)__p[0];
        }
        int v22 = *(_DWORD *)(a1 + 600);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = v21;
        *(_WORD *)&_BYTE buf[12] = 1026;
        *(_DWORD *)&_BYTE buf[14] = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#Warning,DEM,avl download request failed,%{public}s,retryMultiplier,%{public}d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        double v23 = __p;
        if (v72 < 0) {
          double v23 = (void **)__p[0];
        }
        int v24 = *(_DWORD *)(a1 + 600);
        LODWORD(v70.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(v70.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = v24;
        LODWORD(v65) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#Warning,DEM,avl download request failed,%{public}s,retryMultiplier,%{public}d",  &v70,  v65);
        unint64_t v26 = (char *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

void sub_100D1AD48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_1011C52D0((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100D1AE08(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 412)) {
    return 0LL;
  }
  int v2 = *(_DWORD *)(a2 + 8);
  uint64_t result = 1LL;
  if (v2 <= 99)
  {
    BOOL v4 = v2 > 0x29;
    uint64_t v5 = (1LL << v2) & 0x20000000150LL;
    if (!v4 && v5 != 0) {
      return result;
    }
    return 0LL;
  }

  if (v2 > 19149)
  {
    BOOL v7 = v2 == 19150;
    int v8 = 90603;
  }

  else
  {
    BOOL v7 = v2 == 100;
    int v8 = 11805;
  }

  if (!v7 && v2 != v8) {
    return 0LL;
  }
  return result;
}

double sub_100D1AE7C()
{
  double v16 = 0.0;
  sub_1002F0B04(buf);
  int v0 = sub_1002A82BC(*(uint64_t *)&buf[0], "DemAvlFileUpdatePeriodOverWifi", &v16);
  uint64_t v1 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (*((void *)&buf[0] + 1))
  {
    int v2 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
    do
      unint64_t v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v0)
  {
    if (v16 > 0.0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      BOOL v4 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        int v17 = 134349056;
        uint64_t v18 = *(void *)&v16;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf",  &v17,  12);
        uint64_t v12 = (char *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverWifi() const",  "%s\n",  v11);
      }

      return v16;
    }

    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v6 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "#Warning,DEM,given avl update rate over WiFi is invalid,%{public}.1lf,using default value instead",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      int v17 = 134349056;
      uint64_t v18 = *(void *)&v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,given avl update rate over WiFi is invalid,%{public}.1lf,using default value instead",  &v17,  12);
      unint64_t v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverWifi() const",  "%s\n",  v13);
    }
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  BOOL v7 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = 0x40F5180000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf",  (uint8_t *)buf,  0xCu);
  }

  double v5 = 86400.0;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    int v17 = 134349056;
    uint64_t v18 = 0x40F5180000000000LL;
    LODWORD(v15) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf",  &v17,  v15);
    uint64_t v10 = (char *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverWifi() const",  "%s\n",  v9);
  }

  return v5;
}

void sub_100D1B348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

double sub_100D1B364()
{
  double v16 = 0.0;
  sub_1002F0B04(buf);
  int v0 = sub_1002A82BC(*(uint64_t *)&buf[0], "DemAvlFileUpdatePeriodOverCell", &v16);
  uint64_t v1 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (*((void *)&buf[0] + 1))
  {
    int v2 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
    do
      unint64_t v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v0)
  {
    if (v16 > 0.0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      BOOL v4 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10187F990);
        }
        int v17 = 134349056;
        uint64_t v18 = *(void *)&v16;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf",  &v17,  12);
        uint64_t v12 = (char *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverCell() const",  "%s\n",  v11);
      }

      return v16;
    }

    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    uint64_t v6 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "#Warning,DEM,given avl update rate over Cell is invalid,%{public}.1lf,using default value instead",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      int v17 = 134349056;
      uint64_t v18 = *(void *)&v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,DEM,given avl update rate over Cell is invalid,%{public}.1lf,using default value instead",  &v17,  12);
      unint64_t v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverCell() const",  "%s\n",  v13);
    }
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  BOOL v7 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = 0x4122750000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf",  (uint8_t *)buf,  0xCu);
  }

  double v5 = 604800.0;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    int v17 = 134349056;
    uint64_t v18 = 0x4122750000000000LL;
    LODWORD(v15) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf",  &v17,  v15);
    uint64_t v10 = (char *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverCell() const",  "%s\n",  v9);
  }

  return v5;
}

void sub_100D1B830( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100D1B84C(uint64_t a1)
{
  int v2 = operator new(0x438uLL);
  uint64_t result = sub_100D12F54((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A2068 = (uint64_t)v2;
  return result;
}

void sub_100D1B884(_Unwind_Exception *a1)
{
}

uint64_t sub_100D1B898(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 104;
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v26 = a1 + 104;
  (*(void (**)(uint64_t))(v7 + 16))(a1 + 104);
  __int16 v27 = 256;
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  uint64_t v9 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *a3;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Notification,%{public}d", (uint8_t *)buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    int v20 = *a3;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v20;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "Notification,%{public}d",  &__dst,  8);
    int v22 = (std::string *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDigitalElevationModel::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClien tManager_Type::NotificationData &)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  if (*a3 == 4)
  {
    int v11 = *(_DWORD *)(a4 + 188);
    if (v11 == 1)
    {
      if (!*(_BYTE *)(a1 + 384))
      {
        buf[0].__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
        sub_100D119C4(a1, buf);
        *(_BYTE *)(a1 + 384) = 1;
      }
    }

    else if (!v11)
    {
      uint64_t v12 = (char *)sub_1002F8DDC();
      sub_10030AC8C(v12, (uint64_t)buf);
      else {
        std::string __dst = buf[0];
      }
      else {
        std::string __p = *(std::string *)(a1 + 416);
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&__dst, (const std::string::value_type *)p_p, size);
      if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      sub_100296964((const char *)p_dst);
      else {
        std::string __p = buf[0];
      }
      if (*(char *)(a1 + 463) < 0)
      {
        sub_1010DD48C(v23, *(void **)(a1 + 440), *(void *)(a1 + 448));
      }

      else
      {
        *(_OWORD *)double v23 = *(_OWORD *)(a1 + 440);
        uint64_t v24 = *(void *)(a1 + 456);
      }

      if (v24 >= 0) {
        double v16 = v23;
      }
      else {
        double v16 = (void **)v23[0];
      }
      if (v24 >= 0) {
        std::string::size_type v17 = HIBYTE(v24);
      }
      else {
        std::string::size_type v17 = (std::string::size_type)v23[1];
      }
      std::string::append(&__p, (const std::string::value_type *)v16, v17);
      if (SHIBYTE(v24) < 0) {
        operator delete(v23[0]);
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v18 = &__p;
      }
      else {
        uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_100296964((const char *)v18);
      *(_BYTE *)(a1 + 384) = 0;
      sub_10038637C(a1 + 120);
      sub_100606EB8(a1 + 8);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
}

void sub_100D1BC5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
}

void sub_100D1BCFC(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100D1BD28(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100D1BD54(uint64_t a1)
{
  *(void *)a1 = &off_10187F9E0;
  sub_100D2D9A4(a1 + 8);
  *(_OWORD *)(a1 + 48) = xmmword_10135BCC0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0xC0C3878000000000LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(_OWORD *)(a1 + 128) = xmmword_10135BCD0;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(_OWORD *)(a1 + 168) = xmmword_10135BCD0;
  *(_OWORD *)(a1 + 184) = xmmword_10135BCE0;
  *(int64x2_t *)(a1 + 200) = vdupq_n_s64(0xC0C3878000000000LL);
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(_WORD *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 248) = 0LL;
  return a1;
}

void *sub_100D1BDE4(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = (void *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        *uint64_t v9 = 0LL;
        v9[1] = 0LL;
        _DWORD v9[2] = 0LL;
        uint64_t result = sub_10001B72C( v9,  *(const void **)a3,  *(void *)(a3 + 8),  (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v9 += 3;
        v16 -= 24LL;
      }

      while (v16);
      uint64_t v9 = v15;
    }

    a1[1] = (uint64_t)v9;
  }

  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555LL) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v21 = result;
    if (v13) {
      unint64_t v14 = (char *)sub_10000701C((uint64_t)result, v13);
    }
    else {
      unint64_t v14 = 0LL;
    }
    std::string::size_type v17 = v14;
    uint64_t v18 = &v14[24 * v10];
    int v19 = v18;
    int v20 = &v14[24 * v13];
    sub_100D1BF54(&v17, a2, a3);
    sub_10078CB3C(a1, &v17);
    return (void *)sub_100007504((uint64_t)&v17);
  }

  return result;
}

void sub_100D1BF34(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100D1BF54(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  BOOL v4 = (void *)result[2];
  if (a2)
  {
    uint64_t v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      *BOOL v4 = 0LL;
      v4[1] = 0LL;
      _DWORD v4[2] = 0LL;
      uint64_t result = sub_10001B72C( v4,  *(const void **)a3,  *(void *)(a3 + 8),  (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v4 += 3;
      v7 -= 24LL;
    }

    while (v7);
    BOOL v4 = v6;
  }

  _DWORD v3[2] = v4;
  return result;
}

void sub_100D1BFCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_100D1BFD4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100D1C038()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100D1C0AC(_Unwind_Exception *a1)
{
}

BOOL sub_100D1C0C4(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_100D1C0D4(uint64_t a1, uint64_t a2)
{
  return sub_100648A9C(a1 + 240);
}

BOOL sub_100D1C0FC(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1;
}

void *sub_100D1C10C(void *a1)
{
  return sub_100D1DA4C(a1);
}

uint64_t sub_100D1C130(void *a1)
{
  return sub_100648A9C((uint64_t)(a1 + 30));
}

BOOL sub_100D1C154(uint64_t a1, _DWORD *a2)
{
  return *a2 == 2;
}

BOOL sub_100D1C168(uint64_t a1, uint64_t a2)
{
  return *(void *)a2 == *(void *)(a1 + 80) && *(_DWORD *)(a2 + 8) == 1;
}

void *sub_100D1C184(void *a1, uint64_t *a2)
{
  return sub_100D1DA24(a1);
}

BOOL sub_100D1C1A8(uint64_t a1, uint64_t a2)
{
  return *(void *)a2 == *(void *)(a1 + 80) && *(_DWORD *)(a2 + 8) == 2;
}

BOOL sub_100D1C1C8(uint64_t a1, void *a2)
{
  return *a2 != *(void *)(a1 + 80);
}

BOOL sub_100D1C1E0(uint64_t a1, _BYTE *a2)
{
  return *a2 == 0;
}

uint64_t sub_100D1C1F0(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  *(void *)a1 = &unk_10187FA00;
  *(void *)(a1 + 8) = 12LL;
  *(_WORD *)(a1 + 16) = 512;
  *(void *)(a1 + 24) = a2;
  __int128 v5 = a3[8];
  __int128 v6 = a3[9];
  uint64_t v7 = *((void *)a3 + 20);
  __int128 v8 = a3[4];
  __int128 v9 = a3[5];
  __int128 v11 = a3[6];
  __int128 v10 = a3[7];
  __int128 v12 = *a3;
  __int128 v13 = a3[1];
  __int128 v15 = a3[2];
  __int128 v14 = a3[3];
  *(void *)(a1 + 200) = 0LL;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 80) = v14;
  *(void *)(a1 + 192) = v7;
  *(_OWORD *)(a1 + 176) = v6;
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 144) = v10;
  sub_10001A504(a1 + 208, a4);
  v19[0] = &off_10187FB50;
  v19[1] = a1;
  int v20 = v19;
  sub_100648884(a1 + 240, v19);
  uint64_t v16 = v20;
  if (v20 == v19)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = v19;
    goto LABEL_5;
  }

  if (v20)
  {
    uint64_t v17 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }

  *(_BYTE *)(a1 + 296) = 1;
  *(void *)(a1 + 304) = 0LL;
  return a1;
}

void sub_100D1C31C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v17 = a13;
  if (a13 == &a10)
  {
    uint64_t v18 = 4LL;
    uint64_t v17 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*(void *)v17 + 8 * v18))();
LABEL_6:
  int v19 = *(void **)(v13 + 232);
  if (v19 == v15)
  {
    uint64_t v20 = 4LL;
  }

  else
  {
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v20 = 5LL;
    __int128 v15 = *(void **)(v13 + 232);
  }

  (*(void (**)(void *))(*v15 + 8 * v20))(v15);
LABEL_11:
  sub_100D1DF4C(v14, 0LL);
  _Unwind_Resume(a1);
}

uint64_t sub_100D1C3A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  unint64_t v3 = *(void **)(a1 + 288);
  if (v3 == (void *)(a1 + 264))
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = (void *)(a1 + 264);
  }

  else
  {
    if (!v3) {
      goto LABEL_8;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  __int128 v5 = *(void **)(a1 + 240);
  if (v5)
  {
    *(void *)(a1 + 248) = v5;
    operator delete(v5);
  }

  __int128 v6 = *(void **)(a1 + 232);
  if (v6 == (void *)(a1 + 208))
  {
    uint64_t v7 = 4LL;
    __int128 v6 = (void *)(a1 + 208);
    goto LABEL_14;
  }

  if (v6)
  {
    uint64_t v7 = 5LL;
LABEL_14:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  sub_100D1DF4C((uint64_t ***)(a1 + 200), 0LL);
  return a1;
}

void *sub_100D1C45C(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187FB20);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] tearing down controller",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminders] tearing down controller",  v5,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutResumeReminders::Controller::teardown()", "%s\n", v4);
  }

  if (*(void *)(a1 + 200)) {
    sub_100D1DF4C((uint64_t ***)(a1 + 200), 0LL);
  }
  sub_100648A9C(a1 + 240);
  return sub_100D1DF78((void *)a1);
}

double *sub_100D1C614(uint64_t a1)
{
  uint64_t result = *(double **)(a1 + 200);
  if (result)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
    sub_1002D5C8C(result, (uint64_t)v17);
    v16[0] = v17[0];
    *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v17 + 12);
    sub_100CCCC8C(a1, 1, (uint64_t)v16);
    if (v3 != *(unsigned __int8 *)(a1 + 16))
    {
      sub_100D1C90C(a1, v3, &v15);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187FB20);
      }
      uint64_t v4 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        int size = (char)v15.__r_.__value_.__s.__size_;
        std::string::size_type v6 = v15.__r_.__value_.__r.__words[0];
        sub_100D1C90C(a1, *(unsigned __int8 *)(a1 + 16), __p);
        uint64_t v7 = &v15;
        if (size < 0) {
          uint64_t v7 = (std::string *)v6;
        }
        if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v8 = __p;
        }
        else {
          __int128 v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] detection, %s, %s",  (uint8_t *)&buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10187FB20);
        }
        uint64_t v9 = qword_101934688;
        int v10 = (char)v15.__r_.__value_.__s.__size_;
        std::string::size_type v11 = v15.__r_.__value_.__r.__words[0];
        sub_100D1C90C(a1, *(unsigned __int8 *)(a1 + 16), &buf);
        __int128 v12 = &v15;
        if (v10 < 0) {
          __int128 v12 = (std::string *)v11;
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        int v19 = 136315394;
        uint64_t v20 = v12;
        __int16 v21 = 2080;
        int v22 = p_buf;
        __int128 v14 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v9,  0LL,  "[resume reminders] detection, %s, %s",  (const char *)&v19,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::update()",  "%s\n",  (const char *)v14);
        if (v14 != __p) {
          free(v14);
        }
      }
    }

    return (double *)sub_100D1CAD8(a1);
  }

  return result;
}

void sub_100D1C8DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D1C90C(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  if (a2 > 3) {
    __int128 v5 = "unknown";
  }
  else {
    __int128 v5 = (&off_10187FBC0)[(char)a2];
  }
  sub_1010DDBC0(v17, v5);
  std::to_string(&v16, *(void *)(a1 + 80));
  std::operator+<char>(&v13, "[os_activity_scope_state_s state = ", v17);
  std::string::size_type v6 = std::string::append(&v13, ", workout = ");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  if ((v16.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v8 = &v16;
  }
  else {
    __int128 v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if ((v16.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v16.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  int v10 = std::string::append(&v14, (const std::string::value_type *)v8, size);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v12 = std::string::append(&v15, "]");
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_100D1CA5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D1CAD8(uint64_t result)
{
  if (*(void *)(result + 192) != 1LL)
  {
    unint64_t v1 = *(void *)(result + 80);
    uint64_t v2 = *(_DWORD **)(result + 24);
    if (v1 <= 0x18 && ((0xFD7FFFu >> v1) & 1) == 0 && v2[92] == 0 && *(_BYTE *)(result + 16) == 2)
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)v2 + 16LL))(*(void *)v2);
      return sub_10046E868(v6);
    }
  }

  return result;
}

void sub_100D1CB40(uint64_t a1, double a2)
{
  int v15 = 0;
  double v16 = a2;
  sub_100CCCC8C(a1, 2, (uint64_t)&v15);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187FB20);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    int size = (char)v17.__r_.__value_.__s.__size_;
    std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
    sub_100D1C90C(a1, *(unsigned __int8 *)(a1 + 16), __p);
    __int128 v7 = &v17;
    if (size < 0) {
      __int128 v7 = (std::string *)v6;
    }
    if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v8 = __p;
    }
    else {
      __int128 v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] manual pause, prev, %s, current, %s",  (uint8_t *)&buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    uint64_t v9 = qword_101934688;
    int v10 = (char)v17.__r_.__value_.__s.__size_;
    std::string::size_type v11 = v17.__r_.__value_.__r.__words[0];
    sub_100D1C90C(a1, *(unsigned __int8 *)(a1 + 16), &buf);
    __int128 v12 = &v17;
    if (v10 < 0) {
      __int128 v12 = (std::string *)v11;
    }
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v19 = 136315394;
    uint64_t v20 = v12;
    __int16 v21 = 2080;
    int v22 = p_buf;
    std::string v14 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v9,  0LL,  "[resume reminders] manual pause, prev, %s, current, %s",  (const char *)&v19,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::feedManualPause(CFAbsoluteTime)",  "%s\n",  (const char *)v14);
    if (v14 != __p) {
      free(v14);
    }
  }

void sub_100D1CDDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D1CE0C(uint64_t a1, double a2)
{
  int v15 = 1;
  double v16 = a2;
  sub_100CCCC8C(a1, 2, (uint64_t)&v15);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187FB20);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    int size = (char)v17.__r_.__value_.__s.__size_;
    std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
    sub_100D1C90C(a1, *(unsigned __int8 *)(a1 + 16), __p);
    __int128 v7 = &v17;
    if (size < 0) {
      __int128 v7 = (std::string *)v6;
    }
    if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v8 = __p;
    }
    else {
      __int128 v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] manual resume, prev, %s, current, %s",  (uint8_t *)&buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    uint64_t v9 = qword_101934688;
    int v10 = (char)v17.__r_.__value_.__s.__size_;
    std::string::size_type v11 = v17.__r_.__value_.__r.__words[0];
    sub_100D1C90C(a1, *(unsigned __int8 *)(a1 + 16), &buf);
    __int128 v12 = &v17;
    if (v10 < 0) {
      __int128 v12 = (std::string *)v11;
    }
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v19 = 136315394;
    uint64_t v20 = v12;
    __int16 v21 = 2080;
    int v22 = p_buf;
    std::string v14 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v9,  0LL,  "[resume reminders] manual resume, prev, %s, current, %s",  (const char *)&v19,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::feedManualResume(CFAbsoluteTime)",  "%s\n",  (const char *)v14);
    if (v14 != __p) {
      free(v14);
    }
  }

void sub_100D1D0AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D1D0DC(uint64_t a1, double a2)
{
  int v15 = 2;
  double v16 = a2;
  sub_100CCCC8C(a1, 2, (uint64_t)&v15);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187FB20);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    int size = (char)v17.__r_.__value_.__s.__size_;
    std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
    sub_100D1C90C(a1, *(unsigned __int8 *)(a1 + 16), __p);
    __int128 v7 = &v17;
    if (size < 0) {
      __int128 v7 = (std::string *)v6;
    }
    if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v8 = __p;
    }
    else {
      __int128 v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] alert dismissed, prev, %s, current, %s",  (uint8_t *)&buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    uint64_t v9 = qword_101934688;
    int v10 = (char)v17.__r_.__value_.__s.__size_;
    std::string::size_type v11 = v17.__r_.__value_.__r.__words[0];
    sub_100D1C90C(a1, *(unsigned __int8 *)(a1 + 16), &buf);
    __int128 v12 = &v17;
    if (v10 < 0) {
      __int128 v12 = (std::string *)v11;
    }
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v19 = 136315394;
    uint64_t v20 = v12;
    __int16 v21 = 2080;
    int v22 = p_buf;
    std::string v14 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v9,  0LL,  "[resume reminders] alert dismissed, prev, %s, current, %s",  (const char *)&v19,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::feedAlertDismiss(CFAbsoluteTime)",  "%s\n",  (const char *)v14);
    if (v14 != __p) {
      free(v14);
    }
  }

void sub_100D1D37C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D1D3AC(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 296) != a2)
  {
    uint64_t v3 = result;
    *(_BYTE *)(result + 296) = a2;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    uint64_t v4 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v9 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[resume reminder] toggling enablement to %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187FB20);
      }
      v7[0] = 67109120;
      v7[1] = a2;
      std::string::size_type v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminder] toggling enablement to %d",  v7);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutResumeReminders::Controller::toggle(BOOL)", "%s\n", v6);
    }

    if (*(_BYTE *)(v3 + 296))
    {
      if (*(_BYTE *)(v3 + 16) == 1)
      {
        double Current = CFAbsoluteTimeGetCurrent();
        sub_100D1D5A8(v3, Current);
      }
    }

    else
    {
      sub_100D1C45C(v3);
    }

    buf[0] = a2;
    return sub_100CCCC8C(v3, 3, (uint64_t)buf);
  }

  return result;
}

void sub_100D1D5A8(uint64_t a1, double a2)
{
  uint64_t v4 = (uint64_t ***)(a1 + 200);
  if (*(void *)(a1 + 200))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    __int128 v5 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] resetting detector",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187FB20);
      }
      v13[0] = 0;
      std::string::size_type v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminders] resetting detector",  v13,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::bringupDetector(CFAbsoluteTime)",  "%s\n",  v11);
    }

    sub_100D1DF4C(v4, 0LL);
  }

  if (*(void *)(a1 + 192) == 1LL || (uint64_t v6 = *(void *)(a1 + 24), *(_DWORD *)(v6 + 368)))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    __int128 v7 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] workout isn't eligible",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    v13[0] = 0;
    LODWORD(v12) = 2;
    int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminders] workout isn't eligible",  v13,  v12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::bringupDetector(CFAbsoluteTime)",  "%s\n",  v10);
LABEL_29:
    return;
  }

  if (*(_BYTE *)(a1 + 296))
  {
    __int128 v8 = (uint64_t **)operator new(0x30uLL);
    sub_1002D5C1C(v8, v6, *(void *)(a1 + 80), a2);
    sub_100D1DF4C(v4, v8);
    sub_1002D5D8C(*(uint64_t ***)(a1 + 200), 0);
    sub_100D1E130(a1);
    return;
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187FB20);
  }
  int v9 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] reminders aren't enabled",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    v13[0] = 0;
    LODWORD(v12) = 2;
    int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminders] reminders aren't enabled",  v13,  v12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::bringupDetector(CFAbsoluteTime)",  "%s\n",  v10);
    goto LABEL_29;
  }

void sub_100D1DA08(_Unwind_Exception *a1)
{
}

void *sub_100D1DA24(void *result)
{
  uint64_t v1 = result[10];
  if (v1 == 19 || v1 == 4) {
    return (void *)sub_100648CB4((uint64_t)(result + 30), v1, result[11], result[12], result[13]);
  }
  return result;
}

void *sub_100D1DA4C(void *result)
{
  uint64_t v1 = result[10];
  if (v1 == 19 || v1 == 4)
  {
    uint64_t v3 = result + 30;
    sub_1006489B0((uint64_t)(result + 30), v1, result[11], result[12], result[13]);
    return sub_100648D60(v3);
  }

  return result;
}

uint64_t sub_100D1DA98(uint64_t a1, uint64_t *a2)
{
  *(double *)&uint64_t v4 = CFAbsoluteTimeGetCurrent();
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v5 = a2[2];
  void v15[3] = v4;
  v15[0] = v5;
  v15[1] = v4;
  uint64_t v15[2] = 22LL;
  __int128 v6 = *(_OWORD *)(a1 + 176);
  __int128 v26 = *(_OWORD *)(a1 + 160);
  __int128 v27 = v6;
  uint64_t v28 = *(void *)(a1 + 192);
  __int128 v7 = *(_OWORD *)(a1 + 112);
  __int128 v22 = *(_OWORD *)(a1 + 96);
  __int128 v23 = v7;
  __int128 v8 = *(_OWORD *)(a1 + 144);
  __int128 v24 = *(_OWORD *)(a1 + 128);
  __int128 v25 = v8;
  __int128 v9 = *(_OWORD *)(a1 + 48);
  __int128 v18 = *(_OWORD *)(a1 + 32);
  __int128 v19 = v9;
  __int128 v10 = *(_OWORD *)(a1 + 80);
  __int128 v20 = *(_OWORD *)(a1 + 64);
  __int128 v21 = v10;
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)(a1 + 80);
  int v13 = *((_DWORD *)a2 + 2);
  if (*a2 == v12 && v13 == 2)
  {
    if (*((_DWORD *)a2 + 6) == 2) {
      *(void *)&__int128 v21 = 25LL;
    }
  }

  else if (v11 == v12 && v13 == 1)
  {
    __int128 v21 = xmmword_10135BD50;
  }

  else if (v11 != v12)
  {
    __int128 v21 = 0uLL;
  }

  return sub_100D1DCE4(a1, v15);
}

void sub_100D1DBB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(uint64_t ***)(a1 + 200);
  if (v3) {
    sub_1002D5D8C(v3, 1);
  }
}

void sub_100D1DBE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(uint64_t ***)(a1 + 200);
  if (v3) {
    sub_1002D5D8C(v3, 0);
  }
}

uint64_t sub_100D1DC28(uint64_t a1, uint64_t a2)
{
  v8[0] = CFAbsoluteTimeGetCurrent();
  v8[1] = v8[0];
  v8[2] = 22LL;
  v8[3] = v8[0];
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v3 = *(_OWORD *)(a1 + 176);
  __int128 v19 = *(_OWORD *)(a1 + 160);
  __int128 v20 = v3;
  uint64_t v21 = *(void *)(a1 + 192);
  __int128 v4 = *(_OWORD *)(a1 + 112);
  __int128 v15 = *(_OWORD *)(a1 + 96);
  __int128 v16 = v4;
  __int128 v5 = *(_OWORD *)(a1 + 144);
  __int128 v17 = *(_OWORD *)(a1 + 128);
  __int128 v18 = v5;
  __int128 v6 = *(_OWORD *)(a1 + 48);
  __int128 v11 = *(_OWORD *)(a1 + 32);
  __int128 v12 = v6;
  __int128 v13 = *(_OWORD *)(a1 + 64);
  __int128 v14 = 0uLL;
  return sub_100D1DCE4(a1, v8);
}

uint64_t sub_100D1DCE4(uint64_t result, uint64_t *a2)
{
  if (*(void *)(result + 232))
  {
    uint64_t v3 = result;
    uint64_t result = _os_feature_enabled_impl("Workout", "ResumeReminder");
    if ((_DWORD)result)
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187FB20);
      }
      __int128 v4 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = a2[14];
        uint64_t v6 = *a2;
        uint64_t v7 = a2[2];
        uint64_t v8 = a2[3];
        *(_DWORD *)std::string buf = 134218752;
        uint64_t v25 = v7;
        __int16 v26 = 2048;
        uint64_t v27 = v5;
        __int16 v28 = 2048;
        uint64_t v29 = v6;
        __int16 v30 = 2048;
        uint64_t v31 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] notifying event %zu, workout, %zu, detectionTime, %f, currentTime, %f",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10187FB20);
        }
        uint64_t v10 = a2[14];
        uint64_t v11 = *a2;
        uint64_t v12 = a2[2];
        uint64_t v13 = a2[3];
        int v16 = 134218752;
        uint64_t v17 = v12;
        __int16 v18 = 2048;
        uint64_t v19 = v10;
        __int16 v20 = 2048;
        uint64_t v21 = v11;
        __int16 v22 = 2048;
        uint64_t v23 = v13;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminders] notifying event %zu, workout, %zu, detectionTime, %f, currentTime, %f",  (size_t)&v16,  42);
        __int128 v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::notifyEvent(const CLMotionStateMediator_Type::WorkoutEvent &) const",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }

      uint64_t v9 = *(void *)(v3 + 232);
      if (!v9) {
        sub_100008BDC();
      }
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48LL))(v9, a2);
    }
  }

  return result;
}

void *sub_100D1DF1C(void *a1)
{
  uint64_t v3 = a1[25];
  uint64_t v2 = (uint64_t ***)(a1 + 25);
  if (v3) {
    sub_100D1DF4C(v2, 0LL);
  }
  return sub_100D1DF78(a1);
}

void sub_100D1DF4C(uint64_t ***a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    __int128 v4 = sub_1002D5C88(v3);
    operator delete(v4);
  }

void *sub_100D1DF78(void *result)
{
  if (result[38])
  {
    uint64_t v1 = result;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    uint64_t v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] releasing power assertion",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187FB20);
      }
      v4[0] = 0;
      uint64_t v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminders] releasing power assertion",  v4,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::releasePowerAssertion()",  "%s\n",  v3);
    }

    sub_100AD5D38(v1[38]);
    uint64_t result = (void *)v1[38];
    v1[38] = 0LL;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100D1E130(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 296) || *(void *)(a1 + 192) == 1LL || *(_DWORD *)(*(void *)(a1 + 24) + 368LL))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    uint64_t v2 = qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_DEFAULT,  "[resume reminder] destroying power assertion because it shouldn't be running",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187FB20);
      }
      v10[0] = 0;
      uint64_t v6 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminder] destroying power assertion because it shouldn't be running",  v10,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::takePowerAsertion()",  "%s\n",  (const char *)v6);
    }

    sub_100D1DF78((void *)a1);
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187FB20);
    }
    uint64_t v3 = qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] taking power assertion",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187FB20);
      }
      v10[0] = 0;
      uint64_t v7 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminders] taking power assertion",  v10,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Controller::takePowerAsertion()",  "%s\n",  (const char *)v7);
    }

    __int128 v4 = *(int **)(a1 + 304);
    if (!v4)
    {
      __int128 v4 = (int *)operator new(0x30uLL);
      sub_100AD558C((uint64_t)v4, (uint64_t)"WorkoutResumeController", a1, 0.0);
      uint64_t v5 = *(void *)(a1 + 304);
      *(void *)(a1 + 304) = v4;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
        __int128 v4 = *(int **)(a1 + 304);
      }
    }

    sub_1010DDBC0(__p, "Running Resume Controller");
    if (v4[2] <= 0)
    {
      if (SHIBYTE(v9) < 0)
      {
        sub_1010DD48C(buf, __p[0], (unint64_t)__p[1]);
      }

      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)__p;
        uint64_t v12 = v9;
      }

      sub_100AD5668((uint64_t)v4, (uint64_t *)buf);
      if (SHIBYTE(v12) < 0) {
        operator delete(*(void **)buf);
      }
    }

    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100D1E4C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D1E510(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100D1E544(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187FB50;
  result[1] = v3;
  return result;
}

uint64_t sub_100D1E578(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187FB50;
  a2[1] = v2;
  return result;
}

uint64_t sub_100D1E594(uint64_t a1, uint64_t *a2)
{
  return sub_100D1DCE4(*(void *)(a1 + 8), a2);
}

uint64_t sub_100D1E59C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100D1E5D8()
{
}

void *sub_100D1E5E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  sub_100D1EF20(v8, a4);
  sub_100D1E7B0(a1, (uint64_t)v8);
  if (v10)
  {
    uint64_t v5 = v9;
    if (v9 == v8)
    {
      uint64_t v6 = 4LL;
      uint64_t v5 = v8;
      goto LABEL_6;
    }

    if (v9)
    {
      uint64_t v6 = 5LL;
LABEL_6:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }

  return a1;
}

void sub_100D1E698( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15)
{
  if (a15)
  {
    int v16 = a14;
    if (a14 == &a11)
    {
      uint64_t v17 = 4LL;
      int v16 = &a11;
    }

    else
    {
      if (!a14) {
        goto LABEL_7;
      }
      uint64_t v17 = 5LL;
    }

    (*(void (**)(void))(*(void *)v16 + 8 * v17))();
  }

void *sub_100D1E6F0(void *a1, uint64_t a2, uint64_t a3)
{
  v7[0] = 0;
  char v9 = 0;
  sub_100D1E5E4(a1, a2, a3, (uint64_t)v7);
  if (v9)
  {
    __int128 v4 = v8;
    if (v8 == v7)
    {
      uint64_t v5 = 4LL;
      __int128 v4 = v7;
      goto LABEL_6;
    }

    if (v8)
    {
      uint64_t v5 = 5LL;
LABEL_6:
      (*(void (**)(void))(*v4 + 8 * v5))();
    }
  }

  return a1;
}

void sub_100D1E78C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13) {
    sub_10126BD90(&a9);
  }
  _Unwind_Resume(exception_object);
}

void **sub_100D1E7B0(void *a1, uint64_t a2)
{
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsMaintenanceInterval", 0x8000100u, kCFAllocatorNull);
  int v5 = sub_1002A77CC(buf, (uint64_t)v4, &v58);
  CFRelease(v4);
  uint64_t v6 = v58;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (*((void *)&buf + 1))
  {
    uint64_t v8 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v5) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 86400LL;
  }
  sub_1000ECE84(v45, v10);
  sub_1000ECE98(v44, (uint64_t)XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  sub_1000ECE54((uint64_t)v43, 0);
  sub_1000ECE6C((uint64_t)v42, 1);
  sub_100D1F01C(&v46, v45[0], v45[1], v44[0], v44[1], v43[0], v43[1], v11, v42[0], v42[1]);
  uint64_t v12 = *a1;
  sub_100D1EF20(v49, a2);
  *(void *)&__int128 v58 = v12;
  *((void *)&v58 + 1) = a1;
  uint64_t v13 = v59;
  sub_100D1EF20(v59, (uint64_t)v49);
  if (!v51)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10187FBE0);
    }
    __int128 v15 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "MicroLocationMaintenance";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Registering for XPC Activity %s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10187FBE0);
      }
      *(_DWORD *)unsigned int v62 = 136315138;
      *(void *)&v62[4] = "MicroLocationMaintenance";
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Registering for XPC Activity %s",  v62);
      int v41 = (char *)v40;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void (anonymous namespace)::registerActivity(const XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgrou ndActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration>> &, std::optional<ObserverRegistrationFunct ion>, RunActivity) [WorkT = CLMicroLocationMaintenance, RunActivity = (lambda at /Library/Caches/com.apple.xbs/S ources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:100:15)]",  "%s\n",  v40);
    }

    int v16 = operator new(0x18uLL);
    sub_1010DDBC0(__p, "MicroLocationMaintenance");
    __int128 buf = v58;
    uint64_t v17 = v55;
    sub_100D1EF20(v55, (uint64_t)v59);
    double v53 = 0LL;
    __int16 v18 = (char *)operator new(0x40uLL);
    *(void *)__int16 v18 = &off_10187FC10;
    *(_OWORD *)(v18 + 8) = buf;
    v18[24] = 0;
    v18[56] = 0;
    if (v57)
    {
      sub_100D1F3B8((uint64_t)(v18 + 24), (uint64_t)v55);
      v18[56] = 1;
    }

    double v53 = v18;
    sub_1000ED408((uint64_t)v16, (__int128 *)__p, &v46, (uint64_t)v52);
    unint64_t v19 = a1[4];
    __int16 v20 = (void *)a1[3];
    if ((unint64_t)v20 >= v19)
    {
      __int16 v22 = (void *)a1[2];
      uint64_t v23 = v20 - v22;
      unint64_t v24 = v19 - (void)v22;
      unint64_t v25 = (uint64_t)(v19 - (void)v22) >> 2;
      if (v25 <= v23 + 1) {
        unint64_t v25 = v23 + 1;
      }
      if (v24 >= 0x7FFFFFFFFFFFFFF8LL) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      double v64 = a1 + 4;
      if (v26)
      {
        uint64_t v27 = (char *)sub_1000071BC((uint64_t)(a1 + 4), v26);
        __int16 v22 = (void *)a1[2];
        __int16 v20 = (void *)a1[3];
      }

      else
      {
        uint64_t v27 = 0LL;
      }

      __int16 v28 = &v27[8 * v23];
      uint64_t v29 = &v27[8 * v26];
      double v63 = v29;
      *(void *)__int16 v28 = v16;
      *(void *)&v62[16] = v28 + 8;
      if (v20 == v22)
      {
        uint64_t v21 = v28 + 8;
      }

      else
      {
        do
        {
          uint64_t v30 = *--v20;
          *__int16 v20 = 0LL;
          *((void *)v28 - 1) = v30;
          v28 -= 8;
        }

        while (v20 != v22);
        uint64_t v21 = *(void **)&v62[16];
        uint64_t v29 = v63;
      }

      __int128 v31 = *((_OWORD *)a1 + 1);
      a1[2] = v28;
      a1[3] = v21;
      *(_OWORD *)&v62[8] = v31;
      uint64_t v32 = (char *)a1[4];
      a1[4] = v29;
      double v63 = v32;
      *(void *)unsigned int v62 = v31;
      sub_100D1F0C8((uint64_t)v62);
    }

    else
    {
      *__int16 v20 = v16;
      uint64_t v21 = v20 + 1;
    }

    a1[3] = v21;
    double v33 = v53;
    if (v53 == v52)
    {
      uint64_t v34 = 4LL;
      double v33 = v52;
    }

    else
    {
      if (!v53) {
        goto LABEL_41;
      }
      uint64_t v34 = 5LL;
    }

    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_41:
    if (v57)
    {
      if (v56 == v55)
      {
        uint64_t v35 = 4LL;
        goto LABEL_46;
      }

      if (v56)
      {
        uint64_t v35 = 5LL;
        uint64_t v17 = v56;
LABEL_46:
        (*(void (**)(void *))(*v17 + 8 * v35))(v17);
      }
    }

    if ((v48 & 0x80000000) == 0) {
      goto LABEL_50;
    }
    __int128 v14 = __p[0];
    goto LABEL_49;
  }

  sub_1010DDBC0(&buf, "MicroLocationMaintenance");
  if (!v50) {
    sub_100008BDC();
  }
  (*(void (**)(_BYTE *, __int128 *, void **))(*(void *)v50 + 48LL))(v50, &buf, &v46);
  if ((v55[7] & 0x80000000) != 0)
  {
    __int128 v14 = (void *)buf;
LABEL_49:
    operator delete(v14);
  }

void sub_100D1ED5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, char a27, uint64_t a28, uint64_t a29, char *a30, char a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48)
{
  if (*(_BYTE *)(v49 - 136))
  {
    char v51 = *(void **)(v49 - 144);
    if (v51 == v48)
    {
      uint64_t v52 = 4LL;
    }

    else
    {
      if (!v51) {
        goto LABEL_7;
      }
      uint64_t v52 = 5LL;
      char v48 = *(void **)(v49 - 144);
    }

    (*(void (**)(void *))(*v48 + 8 * v52))(v48);
  }

uint64_t sub_100D1EEE8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_100D1EF7C(&v3);
  return a1;
}

_BYTE *sub_100D1EF20(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    sub_10001A504((uint64_t)a1, a2);
    a1[32] = 1;
  }

  return a1;
}

void sub_100D1EF60(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 32)) {
    sub_10126BDC4((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D1EF7C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const char **)**a1;
  if (v2)
  {
    CFStringRef v4 = (const char **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_100D1EFF0(--v4, 0LL);
      while (v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100D1EFF0(const char **a1, const char *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    CFStringRef v4 = (char *)sub_1000ED450(v3);
    operator delete(v4);
  }

xpc_object_t *sub_100D1F01C( xpc_object_t *a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v16[0] = a2;
  v16[1] = a3;
  v15[0] = a4;
  v15[1] = a5;
  v14[0] = a6;
  v14[1] = a7;
  v13[0] = a9;
  v13[1] = a10;
  xpc_object_t v11 = xpc_dictionary_create(0LL, 0LL, 0LL);
  *a1 = v11;
  sub_1000ECE34((uint64_t)v16, v11);
  sub_1000ECE44(v15, *a1);
  sub_1000ECE20((uint64_t)v14, *a1);
  sub_1000ECE20((uint64_t)v13, *a1);
  return a1;
}

void sub_100D1F09C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100D1F0C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_100D1EFF0((const char **)(i - 8), 0LL);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100D1F118(uint64_t a1)
{
  *(void *)a1 = &off_10187FC10;
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2 == (void *)(a1 + 24))
    {
      uint64_t v3 = 4LL;
      uint64_t v2 = (void *)(a1 + 24);
      goto LABEL_6;
    }

    if (v2)
    {
      uint64_t v3 = 5LL;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }

  return a1;
}

void sub_100D1F17C(void *__p)
{
  *std::string __p = &off_10187FC10;
  if (*((_BYTE *)__p + 56))
  {
    uint64_t v2 = (void *)__p[6];
    if (v2 == __p + 3)
    {
      uint64_t v3 = 4LL;
      uint64_t v2 = __p + 3;
      goto LABEL_6;
    }

    if (v2)
    {
      uint64_t v3 = 5LL;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }

  operator delete(__p);
}

char *sub_100D1F1E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &off_10187FC10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_100D1EF20(v2 + 24, a1 + 24);
  return v2;
}

void sub_100D1F22C(_Unwind_Exception *a1)
{
}

_BYTE *sub_100D1F240(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187FC10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_100D1EF20((_BYTE *)(a2 + 24), a1 + 24);
}

uint64_t sub_100D1F264(uint64_t result)
{
  if (*(_BYTE *)(result + 56))
  {
    uint64_t v1 = result + 24;
    uint64_t result = *(void *)(result + 48);
    if (result == v1)
    {
      uint64_t v2 = 4LL;
      uint64_t result = v1;
      return (*(uint64_t (**)(void))(*(void *)result + 8 * v2))();
    }

    if (result)
    {
      uint64_t v2 = 5LL;
      return (*(uint64_t (**)(void))(*(void *)result + 8 * v2))();
    }
  }

  return result;
}

void sub_100D1F2A0(void *__p)
{
  if (*((_BYTE *)__p + 56))
  {
    uint64_t v2 = (void *)__p[6];
    if (v2 == __p + 3)
    {
      uint64_t v3 = 4LL;
      uint64_t v2 = __p + 3;
      goto LABEL_6;
    }

    if (v2)
    {
      uint64_t v3 = 5LL;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }

  operator delete(__p);
}

id sub_100D1F2F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  CFStringRef v4 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768LL;
  v7[2] = sub_100D1F41C;
  v7[3] = &unk_10187FC80;
  uint64_t v5 = *(void *)(a1 + 16);
  _DWORD v7[4] = *(void *)(a1 + 8);
  v7[5] = v3;
  void v7[6] = v5;
  return [v4 async:v7];
}

uint64_t sub_100D1F370(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100D1F3AC()
{
}

uint64_t sub_100D1F3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100D1F41C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  sub_1000560A8(&v3, *(void *)(*(void *)(a1 + 48) + 8LL));
  sub_100D1F4AC((uint64_t)v2, v1, (uint64_t)&v3);
  sub_100D1F81C((uint64_t)v2);
  v2[0] = (void **)&v4;
  sub_10005771C(v2);
}

void sub_100D1F478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 8);
  sub_10005771C(&a10);
  _Unwind_Resume(a1);
}

__n128 sub_100D1F494(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

uint64_t sub_100D1F4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 8) = 0;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10187FBE0);
  }
  uint64_t v5 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 68289282;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    v22[0] = "MicroLocationMaintenance";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Activity runner: starting activty, Activity:%{public, location:escape_only}s}",  (uint8_t *)&v17,  0x1Cu);
  }

  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v7 = (uint64_t *)sub_100056FA8(a3);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7 != v9)
  {
    while (1)
    {
      if (sub_1000ED638((xpc_activity_t *)a1))
      {
        *(_WORD *)(a1 + 8) = 1;
        return a1;
      }

      v23[0] = &off_10187FCC0;
      v23[1] = a1;
      unint64_t v24 = v23;
      uint64_t v10 = *(void *)(v8 + 24);
      if (!v10) {
        sub_100008BDC();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v10 + 48LL))(v10, v23);
      xpc_object_t v11 = v24;
      if (v24 == v23) {
        break;
      }
      if (v24)
      {
        uint64_t v12 = 5LL;
LABEL_12:
        (*(void (**)(void))(*v11 + 8 * v12))();
      }

      v8 += 32LL;
      if (v8 == v9) {
        goto LABEL_14;
      }
    }

    xpc_object_t v11 = v23;
    uint64_t v12 = 4LL;
    goto LABEL_12;
  }

void sub_100D1F72C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  int v18 = a17;
  if (a17 == &a14)
  {
    uint64_t v19 = 4LL;
    int v18 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*(void *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_100D1F774(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10187FCC0;
  result[1] = v3;
  return result;
}

uint64_t sub_100D1F7AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10187FCC0;
  a2[1] = v2;
  return result;
}

BOOL sub_100D1F7CC(uint64_t a1)
{
  return sub_1000ED638(*(xpc_activity_t **)(a1 + 8));
}

uint64_t sub_100D1F7D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100D1F810()
{
}

uint64_t sub_100D1F81C(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 == 2)
  {
LABEL_15:
    sub_1000ED640((xpc_activity_t *)a1);
    return a1;
  }

  if (v2 == 1)
  {
    sub_1000ED648((xpc_activity_t *)a1);
    return a1;
  }

  if (!*(_WORD *)(a1 + 8))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10187FBE0);
    }
    uint64_t v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Activity runner: Activity didn't complete before the runner was destroyed. Most likely this means there was an exception during the activity. Please check the logs.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10187FBE0);
      }
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Activity runner: Activity didn't complete before the runner was destroyed. Most likely this means there was an exception during the activity. Please check the logs.",  &v10,  2);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocat ionMaintenance>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroL ocationMaintenance]",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FD30);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 136315650;
      int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.h";
      __int16 v18 = 1024;
      int v19 = 92;
      __int16 v20 = 2080;
      __int16 v21 = "false";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FD30);
      }
      int v10 = 136315650;
      xpc_object_t v11 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.h";
      __int16 v12 = 1024;
      int v13 = 92;
      __int16 v14 = 2080;
      int v15 = "false";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assert Failed, %s, %d, %s",  (const char *)&v10,  28);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocat ionMaintenance>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroL ocationMaintenance]",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    sub_1002920DC();
    goto LABEL_15;
  }

  return a1;
}

void sub_100D1FB80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100D1FB8C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100D1FBB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

BOOL sub_100D1FBC4(uint64_t a1, const char *a2)
{
  if (a2[23] >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  if (!sub_100292D28(v4))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    xpc_object_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      if (a2[23] >= 0) {
        __int16 v12 = a2;
      }
      else {
        __int16 v12 = *(const char **)a2;
      }
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v29 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "The handsfree whitelist file %s does not exist.",  buf,  0xCu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    if (a2[23] >= 0) {
      int v13 = a2;
    }
    else {
      int v13 = *(const char **)a2;
    }
    int v26 = 136315138;
    uint64_t v27 = v13;
    double v14 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "The handsfree whitelist file %s does not exist.",  (const char *)&v26);
    int v16 = v15;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLBTHandsfreeWhitelist::load(const std::string &)", "%s\n", v14);
LABEL_54:
    if (v16 != buf) {
      free(v16);
    }
    return 0LL;
  }

  if (a2[23] >= 0) {
    uint64_t v5 = (uint64_t *)a2;
  }
  else {
    uint64_t v5 = *(uint64_t **)a2;
  }
  std::chrono::steady_clock::time_point v6 = +[NSDictionary dictionaryWithContentsOfFile:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfFile:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
  if (v6)
  {
    uint64_t v7 = v6;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    uint64_t v8 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      if (a2[23] >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(const char **)a2;
      }
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v29 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Loaded handsfree whitelist file from file %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      if (a2[23] >= 0) {
        __int16 v20 = a2;
      }
      else {
        __int16 v20 = *(const char **)a2;
      }
      int v26 = 136315138;
      uint64_t v27 = v20;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Loaded handsfree whitelist file from file %s",  (const char *)&v26);
      __int16 v22 = (uint8_t *)v21;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLBTHandsfreeWhitelist::load(const std::string &)", "%s\n", v21);
      if (v22 != buf) {
        free(v22);
      }
    }

    return sub_100D200B8(a1, v7);
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  int v17 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    if (a2[23] >= 0) {
      __int16 v18 = a2;
    }
    else {
      __int16 v18 = *(const char **)a2;
    }
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v29 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "The handsfree whitelist file %{public}s is malformed.",  buf,  0xCu);
  }

  BOOL v19 = sub_1002921D0(115, 0);
  BOOL result = 0LL;
  if (v19)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    if (a2[23] >= 0) {
      uint64_t v23 = a2;
    }
    else {
      uint64_t v23 = *(const char **)a2;
    }
    int v26 = 136446210;
    uint64_t v27 = v23;
    double v24 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "The handsfree whitelist file %{public}s is malformed.",  &v26,  12);
    int v16 = v25;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLBTHandsfreeWhitelist::load(const std::string &)", "%s\n", v24);
    goto LABEL_54;
  }

  return result;
}

BOOL sub_100D200B8(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0LL;
  }
  id v4 = [a2 objectForKey:@"version"];
  if (v4) {
    signed int v5 = [v4 intValue];
  }
  else {
    signed int v5 = 1;
  }
  if (*(_DWORD *)(a1 + 80) < v5)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    std::chrono::steady_clock::time_point v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v7;
      __int16 v61 = 1024;
      signed int v62 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Handsfree whitelist current version,%d,new version,%d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      int v31 = *(_DWORD *)(a1 + 80);
      LODWORD(__str.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(__str.__r_.__value_.__r.__words[0]) = v31;
      LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Handsfree whitelist current version,%d,new version,%d",  &__str,  14);
      double v33 = (uint8_t *)v32;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLBTHandsfreeWhitelist::load(NSDictionary *)", "%s\n", v32);
      if (v33 != buf) {
        free(v33);
      }
    }

    *(_DWORD *)(a1 + 80) = v5;
    uint64_t v34 = (uint64_t **)(a1 + 8);
    sub_100008390(a1 + 8, *(void **)(a1 + 16));
    *(void *)(a1 + 8) = a1 + 16;
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    uint64_t v8 = (uint64_t **)(a1 + 56);
    sub_100D2AE38(a1 + 56, *(void **)(a1 + 64));
    *(void *)(a1 + 56) = a1 + 64;
    *(void *)(a1 + 64) = 0LL;
    uint64_t v9 = *(char **)(a1 + 40);
    *(void *)(a1 + 72) = 0LL;
    uint64_t v40 = (uint64_t **)(a1 + 32);
    sub_1000229D4(a1 + 32, v9);
    *(void *)(a1 + 32) = a1 + 40;
    *(void *)(a1 + 40) = 0LL;
    *(void *)(a1 + 48) = 0LL;
    if (*(_DWORD *)(a1 + 80) == 1) {
      id obj = [a2 allKeys];
    }
    else {
      id obj = [a2 objectForKey:@"addresses"];
    }
    if (*(_DWORD *)(a1 + 80) == 1) {
      id v37 = 0LL;
    }
    else {
      id v37 = [a2 objectForKey:@"filters"];
    }
    id v36 = [a2 objectForKey:@"btNames"];
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    id v39 = [obj countByEnumeratingWithState:&v51 objects:v59 count:16];
    if (v39)
    {
      uint64_t v38 = *(void *)v52;
      do
      {
        uint64_t v16 = 0LL;
        do
        {
          if (*(void *)v52 != v38)
          {
            uint64_t v17 = v16;
            objc_enumerationMutation(obj);
            uint64_t v16 = v17;
          }

          uint64_t v41 = v16;
          uint64_t v18 = *(void *)(*((void *)&v51 + 1) + 8 * v16);
          if (-[NSScanner scanHexInt:]( +[NSScanner scannerWithString:](&OBJC_CLASS___NSScanner, "scannerWithString:", v18),  "scanHexInt:",  &v50))
          {
            v50 &= 0xFFFFFFu;
            if (v37)
            {
              id v19 = [v37 objectForKey:v18];
              __int16 v20 = v19;
              if (v19)
              {
                __int128 v48 = 0u;
                __int128 v49 = 0u;
                __int128 v46 = 0u;
                __int128 v47 = 0u;
                id v21 = [v19 countByEnumeratingWithState:&v46 objects:v58 count:16];
                if (v21)
                {
                  uint64_t v22 = *(void *)v47;
                  do
                  {
                    for (uint64_t i = 0LL; i != v21; uint64_t i = (char *)i + 1)
                    {
                      if (*(void *)v47 != v22) {
                        objc_enumerationMutation(v20);
                      }
                      double v24 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)i);
                      id v25 = [v20 objectForKey:v24];
                      sub_1010DDBC0(buf, (char *)[v24 UTF8String]);
                      sub_1010DDBC0(&__str, (char *)[v25 UTF8String]);
                      int v55 = (uint8_t *)&v50;
                      int v26 = sub_100D2B884(v8, &v50, (uint64_t)&unk_1012CF090, (_DWORD **)&v55);
                      int v55 = buf;
                      uint64_t v27 = sub_100D2B950(v26 + 5, (const void **)buf, (uint64_t)&unk_1012CF090, (__int128 **)&v55);
                      std::string::operator=((std::string *)(v27 + 7), &__str);
                      if (v63 < 0) {
                        operator delete(*(void **)buf);
                      }
                    }

                    id v21 = [v20 countByEnumeratingWithState:&v46 objects:v58 count:16];
                  }

                  while (v21);
                }
              }
            }

            sub_100D2BA8C(v34, &v50, &v50);
          }

          uint64_t v16 = v41 + 1;
        }

        while ((id)(v41 + 1) != v39);
        id v39 = [obj countByEnumeratingWithState:&v51 objects:v59 count:16];
      }

      while (v39);
    }

    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    id v28 = [v36 countByEnumeratingWithState:&v42 objects:v56 count:16];
    if (v28)
    {
      uint64_t v29 = *(void *)v43;
      do
      {
        for (j = 0LL; j != v28; j = (char *)j + 1)
        {
          if (*(void *)v43 != v29) {
            objc_enumerationMutation(v36);
          }
          sub_1010DDBC0(buf, (char *)[*(id *)(*((void *)&v42 + 1) + 8 * (void)j) UTF8String]);
          sub_1003F9748(v40, (const void **)buf, (uint64_t)buf);
          if (v63 < 0) {
            operator delete(*(void **)buf);
          }
        }

        id v28 = [v36 countByEnumeratingWithState:&v42 objects:v56 count:16];
      }

      while (v28);
    }

    return 1LL;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  int v10 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    signed int v11 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v61 = 1024;
    signed int v62 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Will not load older handsfree whitelist version %d than the current version %d",  buf,  0xEu);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    int v13 = *(_DWORD *)(a1 + 80);
    LODWORD(__str.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v5;
    LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Will not load older handsfree whitelist version %d than the current version %d",  &__str,  14);
    int v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLBTHandsfreeWhitelist::load(NSDictionary *)", "%s\n", v14);
    if (v15 != buf) {
      free(v15);
    }
    return 0LL;
  }

  return result;
}

void sub_100D207CC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100D2080C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  unsigned int v5 = sub_1008F09B0((const char *)(a2 + 8));
  if (v5)
  {
    unsigned int v6 = v5;
    uint64_t v8 = a1 + 16;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v9 = a1 + 16;
    do
    {
      unsigned int v10 = *(_DWORD *)(v7 + 28);
      BOOL v11 = v10 >= v5;
      if (v10 >= v5) {
        __int16 v12 = (uint64_t *)v7;
      }
      else {
        __int16 v12 = (uint64_t *)(v7 + 8);
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      uint64_t v7 = *v12;
    }

    while (*v12);
    if (v9 == v8 || *(_DWORD *)(v9 + 28) > v5) {
LABEL_13:
    }
      uint64_t v9 = a1 + 16;
    int v13 = sub_100D20DBC(a1, v5, a2 + 32);
    unsigned int v14 = sub_100D20F9C(a1, a2 + 32);
    unsigned int v15 = v14;
    int v16 = *(_DWORD *)(a2 + 84);
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (v16 == 22)
    {
      uint64_t v19 = v13 ^ 1u;
    }

    else if (v16 == 17)
    {
      int v18 = v13 ^ 1;
      if (v9 == v8) {
        int v18 = 0;
      }
      uint64_t v19 = v18 | v14;
    }

    else
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      uint64_t v22 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "#Warning Unexpected device type in handsfree check.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_10187FF58);
        }
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#Warning Unexpected device type in handsfree check.",  &v35,  2);
        double v33 = (uint8_t *)v32;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLBTHandsfreeWhitelist::isHandsfree(const CLBTDeviceEntry &) const",  "%s\n",  v32);
        if (v33 != buf) {
          free(v33);
        }
        uint64_t v19 = 0LL;
        p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
      }

      else
      {
        uint64_t v19 = 0LL;
      }
    }

    uint64_t v23 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v24 = *(void *)(a2 + 8);
      }
      *(_DWORD *)__int128 buf = 136316418;
      uint64_t v48 = v24;
      __int16 v49 = 1026;
      unsigned int v50 = v6;
      __int16 v51 = 1026;
      BOOL v52 = v9 != v8;
      __int16 v53 = 1026;
      int v54 = v13;
      __int16 v55 = 1026;
      unsigned int v56 = v15;
      __int16 v57 = 1026;
      int v58 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#fmc BT device,address,%s,oui,%{public}d,on whitelist,%{public}d,on denylist,%{public}d,isNameWhitelisted,%{publ ic}d,ishandsfree,%{public}d",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      else {
        uint64_t v26 = *(void *)(a2 + 8);
      }
      int v35 = 136316418;
      uint64_t v36 = v26;
      __int16 v37 = 1026;
      unsigned int v38 = v6;
      __int16 v39 = 1026;
      BOOL v40 = v9 != v8;
      __int16 v41 = 1026;
      int v42 = v13;
      __int16 v43 = 1026;
      unsigned int v44 = v15;
      __int16 v45 = 1026;
      int v46 = v19;
      LODWORD(v34) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc BT device,address,%s,oui,%{public}d,on whitelist,%{public}d,on denylist,%{public}d,isNameWhitelisted,%{publ ic}d,ishandsfree,%{public}d",  &v35,  v34);
      id v28 = (uint8_t *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLBTHandsfreeWhitelist::isHandsfree(const CLBTDeviceEntry &) const",  "%s\n",  v27);
      if (v28 != buf) {
        free(v28);
      }
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    __int16 v20 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v21 = *(void *)(a2 + 8);
      }
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v48 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#Warning Input BT MAC address %s is malformed.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      else {
        uint64_t v29 = *(void *)(a2 + 8);
      }
      int v35 = 136315138;
      uint64_t v36 = v29;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning Input BT MAC address %s is malformed.",  (const char *)&v35);
      int v31 = (uint8_t *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLBTHandsfreeWhitelist::isHandsfree(const CLBTDeviceEntry &) const",  "%s\n",  v30);
      if (v31 != buf) {
        free(v31);
      }
    }

    return 0LL;
  }

  return v19;
}

uint64_t sub_100D20DBC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  uint64_t v7 = v3;
  do
  {
    unsigned int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unsigned int v10 = (uint64_t *)v4;
    }
    else {
      unsigned int v10 = (uint64_t *)(v4 + 8);
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3 || *(_DWORD *)(v7 + 32) > a2) {
    return 0LL;
  }
  sub_100D2BB44(&v31, (const void ***)(v7 + 40));
  sub_1010DDBC0(__p, "Name");
  int v13 = (void **)sub_10008E8D0((uint64_t)&v31, (const void **)__p);
  if ((v20[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  if (&v32 == v13)
  {
    uint64_t v11 = 0LL;
  }

  else
  {
    sub_100BFA368(&v29, (uint64_t)(v13 + 7), 0);
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    char v23 = 0;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    char v26 = 0;
    char v27 = 0;
    uint64_t v28 = 0LL;
    *(_OWORD *)std::string __p = 0u;
    memset(v20, 0, sizeof(v20));
    uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) == 0LL) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = *(void *)a3;
    }
    if ((v14 & 0x80u) != 0LL) {
      uint64_t v14 = *(void *)(a3 + 8);
    }
    uint64_t v11 = sub_100BFFCB0(v15, v15 + v14, (uint64_t)__p, (uint64_t)&v29, 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    int v16 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    std::locale::~locale(&v29);
  }

  sub_1009EB4CC((uint64_t)&v31, v32);
  return v11;
}

void sub_100D20F3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10000AE14(v14 - 64);
  std::locale::~locale((std::locale *)(v14 - 104));
  sub_1009EB4CC(v14 - 40, *(void **)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_100D20F9C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a2;
    uint64_t v35 = *(void *)(a2 + 16);
  }

  if (v35 >= 0) {
    uint64_t v3 = __dst;
  }
  else {
    uint64_t v3 = (void **)__dst[0];
  }
  if (v35 >= 0) {
    uint64_t v4 = (char *)HIBYTE(v35);
  }
  else {
    uint64_t v4 = (char *)__dst[1];
  }
  for (; v4; --v4)
  {
    *(_BYTE *)uint64_t v3 = __toupper(*(char *)v3);
    uint64_t v3 = (void **)((char *)v3 + 1);
  }

  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 == (void *)(a1 + 40))
  {
    char v6 = 0;
  }

  else
  {
    char v6 = 0;
    do
    {
      if (*((char *)v5 + 55) < 0)
      {
        sub_1010DD48C(v32, (void *)v5[4], v5[5]);
      }

      else
      {
        *(_OWORD *)uint64_t v32 = *((_OWORD *)v5 + 2);
        uint64_t v33 = v5[6];
      }

      std::operator+<char>(__p, "\\b", v32);
      uint64_t v7 = std::string::append(__p, "\\b");
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      *(void *)&v37[0] = v7->__r_.__value_.__l.__cap_;
      __int128 v36 = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      sub_100BFA368(&v30, (uint64_t)&v36, 0);
      if (SBYTE7(v37[0]) < 0) {
        operator delete((void *)v36);
      }
      uint64_t v22 = 0LL;
      uint64_t v23 = 0LL;
      char v24 = 0;
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
      char v27 = 0;
      char v28 = 0;
      uint64_t v29 = 0LL;
      memset(__p, 0, 41);
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
      char v40 = 0;
      uint64_t v41 = 0LL;
      uint64_t v42 = 0LL;
      char v43 = 0;
      char v44 = 0;
      uint64_t v45 = 0LL;
      __int128 v36 = 0u;
      v37[0] = 0u;
      BOOL v9 = (void *)HIBYTE(v35);
      if (v35 >= 0) {
        unsigned int v10 = __dst;
      }
      else {
        unsigned int v10 = (void **)__dst[0];
      }
      if (v35 < 0) {
        BOOL v9 = __dst[1];
      }
      *(_OWORD *)((char *)v37 + 9) = 0uLL;
      char v11 = sub_101123F54((uint64_t)&v30, (uint64_t)v10, (uint64_t)v9 + (void)v10, (uint64_t)&v36, 0);
      __int16 v12 = (void *)HIBYTE(v35);
      if (v35 >= 0) {
        int v13 = __dst;
      }
      else {
        int v13 = (void **)__dst[0];
      }
      if (v35 < 0) {
        __int16 v12 = __dst[1];
      }
      sub_10112412C((uint64_t)__p, (uint64_t)v13, (uint64_t)v12 + (void)v13, (uint64_t *)&v36, 0);
      if ((void)v36)
      {
        *((void *)&v36 + 1) = v36;
        operator delete((void *)v36);
      }

      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }

      uint64_t v14 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          unint64_t v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }

      std::locale::~locale(&v30);
      if (SHIBYTE(v33) < 0) {
        operator delete(v32[0]);
      }
      uint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          unint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          unint64_t v18 = (void *)v5[2];
          BOOL v19 = *v18 == (void)v5;
          uint64_t v5 = v18;
        }

        while (!v19);
      }

      v6 |= v11;
      uint64_t v5 = v18;
    }

    while (v18 != (void *)(a1 + 40));
  }

  if (SHIBYTE(v35) < 0) {
    operator delete(__dst[0]);
  }
  return v6 & 1;
}

void sub_100D21274( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, std::locale a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, void *__p, uint64_t a42, int a43, __int16 a44, char a45, char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D213BC(id a1)
{
  qword_10199DD50 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLVehicleConnectionNotifierSilo");
}

uint64_t sub_100D21470(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100D21C44;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199DD60 != -1) {
    dispatch_once(&qword_10199DD60, block);
  }
  return qword_1019A2070;
}

void sub_100D216E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D21730(uint64_t a1, char a2)
{
  int v4 = a2 & 3;
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_10187FF58);
  }
  uint64_t v5 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    char v6 = "answered";
    if ((~a2 & 3) == 0) {
      char v6 = "timeout";
    }
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v32 = v6;
    __int16 v33 = 1024;
    int v34 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#fmc IsVehicleConnectedDialog dismissed with state (%s), %u",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    unint64_t v16 = "answered";
    if ((~a2 & 3) == 0) {
      unint64_t v16 = "timeout";
    }
    int v27 = 136315394;
    char v28 = v16;
    __int16 v29 = 1024;
    int v30 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc IsVehicleConnectedDialog dismissed with state (%s), %u",  (const char *)&v27,  18);
    unint64_t v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::onConfirmationPopupDialogCb(CFOptionFlags)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  if ((v4 - 1) >= 2)
  {
    if (v4) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*(char *)(a1 + 895) < 0)
    {
      sub_1010DD48C(__dst, *(void **)(a1 + 872), *(void *)(a1 + 880));
    }

    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 872);
      uint64_t v23 = *(void *)(a1 + 888);
    }

    p_p = &__p;
    if (*(char *)(a1 + 919) < 0)
    {
      p_p = (__int128 *)sub_1010DD48C(&__p, *(void **)(a1 + 896), *(void *)(a1 + 904));
    }

    else
    {
      __int128 __p = *(_OWORD *)(a1 + 896);
      uint64_t v25 = *(void *)(a1 + 912);
    }

    int v26 = *(_DWORD *)(a1 + 920);
    sub_100D277F0((uint64_t)p_p, (std::string::size_type)__dst, (a2 & 3) == 1LL);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__dst[0]);
    }
  }

  __int128 v8 = objc_autoreleasePoolPush();
  BOOL v9 = (void *)(a1 + 872);
  unsigned int v10 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9);
  if ((a2 & 3) == 1LL) {
    char v11 = &__kCFBooleanTrue;
  }
  else {
    char v11 = &__kCFBooleanFalse;
  }
  [*(id *)(a1 + 928) setObject:v11 forKeyedSubscript:v10];
  uint64_t v12 = sub_1002F8DDC();
  sub_1002AB3DC(v12);
  uint64_t v13 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v13 + 944LL))(v13);
  objc_autoreleasePoolPop(v8);
LABEL_27:
  CFRelease(*(CFTypeRef *)(a1 + 936));
  *(void *)(a1 + 936) = 0LL;
  sub_100D27D40((int64x2_t *)(a1 + 824));
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_10187FF58);
  }
  uint64_t v14 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *(const char **)(a1 + 864);
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v32 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "#fmc fToBePromptedBTDevices.size(), %lu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    BOOL v19 = *(const char **)(a1 + 864);
    int v27 = 134217984;
    char v28 = v19;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  2LL,  "#fmc fToBePromptedBTDevices.size(), %lu",  &v27);
    uint64_t v21 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::onConfirmationPopupDialogCb(CFOptionFlags)",  "%s\n",  v20);
    if (v21 != buf) {
      free(v21);
    }
  }

void sub_100D21BC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D21C44(uint64_t a1)
{
  int v2 = operator new(0xA10uLL);
  uint64_t result = sub_100D21C90((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A2070 = (uint64_t)v2;
  return result;
}

void sub_100D21C7C(_Unwind_Exception *a1)
{
}

uint64_t sub_100D21C90(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100D22DD0(a1, "CLVehicleConnectionNotifier", a2);
  *(void *)(v3 + 128) = 0LL;
  *(void *)uint64_t v3 = off_10187FD90;
  *(void *)(v3 + 120) = v3 + 128;
  *(void *)&double v4 = v3 + 120;
  *(void *)(v3 + 112) = 0LL;
  *(void *)(v3 + 144) = off_10187FFA8;
  *(void *)&double v5 = v3 + 144;
  *(void *)(v3 + 160) = 0LL;
  *(void *)(v3 + 152) = v3 + 160;
  *(void *)(v3 + 184) = 0LL;
  *(void *)(v3 + 136) = 0LL;
  *(void *)(v3 + 168) = 0LL;
  *(void *)(v3 + 176) = v3 + 184;
  *(void *)(v3 + 208) = 0LL;
  *(void *)(v3 + 192) = 0LL;
  *(void *)(v3 + 200) = v3 + 208;
  *(_DWORD *)(v3 + 224) = -1;
  char v6 = (std::string *)(v3 + 232);
  *(void *)(v3 + 216) = 0LL;
  sub_1010DDBC0((void *)(v3 + 232), "https://configuration.apple.com/configurations/internetservices/bt/bcwv.plist");
  sub_100382F80(a1 + 256, *(void **)(a1 + 32), (uint64_t)sub_100D22E6C, a1);
  *(void *)(a1 + 504) = 0x4122750000000000LL;
  uint64_t v7 = (std::string::size_type *)(a1 + 512);
  sub_1010DDBC0((void *)(a1 + 512), "https://configuration.apple.com/configurations/internetservices/bt/bcw.plist.gz");
  sub_100382F80(a1 + 536, *(void **)(a1 + 32), (uint64_t)sub_100D22E6C, a1);
  *(void *)(a1 + 784) = 0x4072C00000000000LL;
  sub_1004F2598();
  int v8 = sub_1004F8A40();
  if (v8)
  {
    sub_1004F2598();
    LOBYTE(v8) = sub_1004F7000();
  }

  *(_BYTE *)(a1 + 792) = v8;
  *(_BYTE *)(a1 + 793) = 0;
  *(void *)(a1 + 800) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 808) = [*(id *)(a1 + 40) newTimer];
  *(_BYTE *)(a1 + 816) = 1;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_BYTE *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 948) = -1;
  *(void *)(a1 + 952) = -1LL;
  *(_BYTE *)(a1 + 960) = 0;
  bzero((void *)(a1 + 968), 0x318uLL);
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 976) = _Q0;
  *(void *)(a1 + 1760) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 2560) = 0u;
  if (*(void *)(a1 + 40))
  {
    double v80 = v5;
    double v81 = v4;
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    uint64_t v14 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "CLVehicleConnectionNotifier is being constructed",  (uint8_t *)&buf,  2u);
    }

    uint64_t v15 = a1 + 2560;
    uint64_t v82 = a1 + 256;
    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      *(_WORD *)double v94 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "CLVehicleConnectionNotifier is being constructed",  v94,  2,  *(void *)&v5,  *(void *)&v81);
      __int16 v61 = (std::string *)v60;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)",  "%s\n",  v60);
      if (v61 != &buf) {
        free(v61);
      }
    }

    bzero((void *)(a1 + 992), 0x300uLL);
    sub_1008F15C8((uint64_t)sub_100D23044, a1, *(void **)(a1 + 32), &buf);
    std::string::size_type v16 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v17 = *(void *)v15;
    *(void *)uint64_t v15 = v16;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
      std::string::size_type v18 = buf.__r_.__value_.__r.__words[0];
      buf.__r_.__value_.__r.__words[0] = 0LL;
      if (v18) {
        (*(void (**)(std::string::size_type))(*(void *)v18 + 8LL))(v18);
      }
    }

    [*(id *)(*(void *)v15 + 16) register:*(void *)(*(void *)v15 + 8) forNotification:10 registrationInfo:0];
    [*(id *)(*(void *)v15 + 16) register:*(void *)(*(void *)v15 + 8) forNotification:5 registrationInfo:0];
    [*(id *)(*(void *)v15 + 16) register:*(void *)(*(void *)v15 + 8) forNotification:11 registrationInfo:0];
    [*(id *)(*(void *)v15 + 16) register:*(void *)(*(void *)v15 + 8) forNotification:0 registrationInfo:0];
    sub_10036B3B4((uint64_t)sub_100D2321C, a1, *(void **)(a1 + 32), &buf);
    std::string::size_type v19 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v20 = *(void *)(a1 + 2568);
    *(void *)(a1 + 2568) = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
      std::string::size_type v21 = buf.__r_.__value_.__r.__words[0];
      buf.__r_.__value_.__r.__words[0] = 0LL;
      if (v21) {
        (*(void (**)(std::string::size_type))(*(void *)v21 + 8LL))(v21);
      }
    }

    uint64_t v22 = objc_autoreleasePoolPush();
    uint64_t v23 = sub_1002F8DDC();
    if (sub_1002AA610(v23, @"LastVehicleConnectionV2", (CFTypeRef *)&buf.__r_.__value_.__l.__data_))
    {
      char v24 = (void *)buf.__r_.__value_.__r.__words[0];
      if ((unint64_t)[buf.__r_.__value_.__l.__data_ count] >= 2)
      {
        objc_msgSend(objc_msgSend(v24, "objectAtIndexedSubscript:", 0), "doubleValue");
        *(void *)(a1 + 976) = v25;
        objc_msgSend(objc_msgSend(v24, "objectAtIndexedSubscript:", 1), "doubleValue");
        *(void *)(a1 + 984) = v26;
      }

      if ((unint64_t)[v24 count] >= 3) {
        strncpy( (char *)(a1 + 992),  (const char *)objc_msgSend(objc_msgSend(v24, "objectAtIndexedSubscript:", 2), "UTF8String"),  0x100uLL);
      }
      if ((unint64_t)[v24 count] >= 4) {
        strncpy( (char *)(a1 + 1248),  (const char *)objc_msgSend(objc_msgSend(v24, "objectAtIndexedSubscript:", 3), "UTF8String"),  0x100uLL);
      }
      if ((unint64_t)[v24 count] >= 5) {
        strncpy( (char *)(a1 + 1504),  (const char *)objc_msgSend(objc_msgSend(v24, "objectAtIndexedSubscript:", 4), "UTF8String"),  0x100uLL);
      }
      if ((unint64_t)[v24 count] >= 6)
      {
        objc_msgSend(objc_msgSend(v24, "objectAtIndexedSubscript:", 5), "doubleValue");
        *(double *)(a1 + 1760) = v27;
      }
    }

    uint64_t v28 = sub_1002F8DDC();
    if (sub_1002AA610(v28, @"LastVehicleConnection", (CFTypeRef *)v94))
    {
      uint64_t v29 = sub_1002F8DDC();
      sub_1002A66DC(v29);
    }

    objc_autoreleasePoolPop(v22);
    int v30 = NSClassFromString(@"CLStarkManager");
    if (v30)
    {
      id v31 = objc_alloc_init(v30);
      *(void *)(a1 + 112) = v31;
      sub_100D23448((_DWORD *)a1, (int)[v31 isConnected], 0, 0, 0);
      v88[0] = _NSConcreteStackBlock;
      v88[1] = 3221225472LL;
      v88[2] = sub_100D23674;
      v88[3] = &unk_10187FE60;
      v88[4] = a1;
      [*(id *)(a1 + 112) setConnectionUpdateHandler:v88];
    }

    *(void *)(a1 + 1768) = 0xBFF0000000000000LL;
    *(void *)(a1 + 1776) = 0xBFF0000000000000LL;
    bzero((void *)(a1 + 1784), 0x300uLL);
    *(void *)(a1 + 2552) = 0xBFF0000000000000LL;
    uint64_t v32 = sub_1006E27E8();
    sub_100413284(v32, &v86);
    sub_1002A8560(v86, "HandsfreeWhitelistDownloadUrl", (std::string *)(a1 + 512));
    sub_1002A8560(v86, "HandsfreeWhitelistVersionDownloadUrl", v6);
    __int16 v33 = (uint64_t *)(a1 + 784);
    sub_1002A82BC(v86, "HandsfreeWhitelistDownloadInterval", (void *)(a1 + 784));
    int v34 = (uint64_t *)(a1 + 504);
    sub_1002A82BC(v86, "HandsfreeWhitelistVersionDownloadInterval", (void *)(a1 + 504));
    sub_1002A6F64(v86, "AllowBTHeadsetDevices", (BOOL *)(a1 + 944));
    BOOL v85 = 0;
    sub_1002A6F64(v86, "DisableBTVehicleConfirmation", &v85);
    *(_BYTE *)(a1 + 792) &= !v85;
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    uint64_t v35 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEBUG))
    {
      int v36 = *(unsigned __int8 *)(a1 + 792);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v85;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "disableBTVehicleConfirmation, %d, fEnableBTVehicleConfirmation, %d",  (uint8_t *)&buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      int v62 = *(unsigned __int8 *)(a1 + 792);
      *(_DWORD *)double v94 = 67109376;
      *(_DWORD *)&v94[4] = v85;
      *(_WORD *)&v94[8] = 1024;
      *(_DWORD *)&v94[10] = v62;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  2LL,  "disableBTVehicleConfirmation, %d, fEnableBTVehicleConfirmation, %d",  v94,  14);
      double v64 = (std::string *)v63;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)",  "%s\n",  v63);
      if (v64 != &buf) {
        free(v64);
      }
    }

    sub_1002A6F64(v86, "IgnorePromptedAddresses", (BOOL *)(a1 + 793));
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    __int16 v37 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v38 = a1 + 512;
      std::string::size_type v39 = (std::string::size_type)v6;
      uint64_t v40 = *v33;
      uint64_t v41 = *v34;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v38;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v39;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      uint64_t v99 = v40;
      __int16 v100 = 2048;
      uint64_t v101 = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "HandsfreeWhitelistDownloadUrl,%s,HandsfreeWhitelistVersionDownloadUrl,%s,HandsfreeWhitelistDownloadInterval,%lf, HandsfreeWhitelistVersionDownloadInterval,%lf",  (uint8_t *)&buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      uint64_t v65 = a1 + 512;
      int v66 = v6;
      uint64_t v67 = *v33;
      uint64_t v68 = *v34;
      *(_DWORD *)double v94 = 136315906;
      *(void *)&v94[4] = v65;
      *(_WORD *)&v94[12] = 2080;
      *(void *)&v94[14] = v66;
      *(_WORD *)&v94[22] = 2048;
      uint64_t v95 = v67;
      __int16 v96 = 2048;
      uint64_t v97 = v68;
      LODWORD(v79) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "HandsfreeWhitelistDownloadUrl,%s,HandsfreeWhitelistVersionDownloadUrl,%s,HandsfreeWhitelistDownloadInterval,%lf, HandsfreeWhitelistVersionDownloadInterval,%lf",  v94,  v79,  v80,  v81);
      std::string v70 = (std::string *)v69;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)",  "%s\n",  v69);
      if (v70 != &buf) {
        free(v70);
      }
    }

    sub_100309D64(0, &buf);
    uint64_t v42 = std::string::append(&buf, "bluetooth-carkit-whitelist-version.plist");
    __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    *(void *)&v94[16] = v42->__r_.__value_.__l.__cap_;
    *(_OWORD *)double v94 = v43;
    v42->__r_.__value_.__l.__size_ = 0LL;
    v42->__r_.__value_.__l.__cap_ = 0LL;
    v42->__r_.__value_.__r.__words[0] = 0LL;
    char v44 = (const std::string::value_type *)v6;
    if (v94[23] >= 0) {
      uint64_t v45 = v94;
    }
    else {
      uint64_t v45 = *(const std::string::value_type **)v94;
    }
    if (!sub_100385874(v82, v44, v45, &dbl_10135C4E8)
      || (sub_100385EC0(v82, (double *)(a1 + 504), (double *)(a1 + 504)) & 1) == 0)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      int v46 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        std::string::size_type v47 = (std::string::size_type)v6;
        uint64_t v48 = v94;
        if (v94[23] < 0) {
          uint64_t v48 = *(_BYTE **)v94;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v47;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v48;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_FAULT,  "could not setup handsfree whitelist version file download from,%{public}s,to,%{public}s",  (uint8_t *)&buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10187FF38);
        }
        double v71 = v6;
        char v72 = v94;
        if (v94[23] < 0) {
          char v72 = *(_BYTE **)v94;
        }
        *(_DWORD *)__int128 __p = 136446466;
        *(void *)&__p[4] = v71;
        *(_WORD *)&_BYTE __p[12] = 2082;
        *(void *)&__p[14] = v72;
        LODWORD(v79) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not setup handsfree whitelist version file download from,%{public}s,to,%{public}s",  __p,  v79);
        int v74 = (std::string *)v73;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)",  "%s\n",  v73);
        if (v74 != &buf) {
          free(v74);
        }
      }
    }

    sub_100D27430(&buf);
    __int16 v49 = std::string::append(&buf, ".gz");
    __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = v49->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 __p = v50;
    v49->__r_.__value_.__l.__size_ = 0LL;
    v49->__r_.__value_.__l.__cap_ = 0LL;
    v49->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v51 = (const std::string::value_type *)(a1 + 512);
    if (__p[23] >= 0) {
      BOOL v52 = __p;
    }
    else {
      BOOL v52 = *(const std::string::value_type **)__p;
    }
    if (!sub_100385874(a1 + 536, v51, v52, &dbl_10135C4E8))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      __int16 v53 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        std::string::size_type v54 = a1 + 512;
        __int16 v55 = __p;
        if (__p[23] < 0) {
          __int16 v55 = *(_BYTE **)__p;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v54;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v55;
        _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_FAULT,  "could not setup handsfree whitelist file download from,%{public}s,to,%{public}s",  (uint8_t *)&buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10187FF38);
        }
        uint64_t v75 = a1 + 512;
        unint64_t v76 = __p;
        if (__p[23] < 0) {
          unint64_t v76 = *(_BYTE **)__p;
        }
        int v89 = 136446466;
        uint64_t v90 = v75;
        __int16 v91 = 2082;
        __int16 v92 = v76;
        LODWORD(v79) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not setup handsfree whitelist file download from,%{public}s,to,%{public}s",  &v89,  v79);
        double v78 = (std::string *)v77;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)",  "%s\n",  v77);
        if (v78 != &buf) {
          free(v78);
        }
      }
    }

    v84[0] = _NSConcreteStackBlock;
    v84[1] = 3221225472LL;
    _DWORD v84[2] = sub_100D2389C;
    v84[3] = &unk_10181D3D0;
    v84[4] = a1;
    [*(id *)(a1 + 800) setHandler:v84];
    v83[0] = _NSConcreteStackBlock;
    v83[1] = 3221225472LL;
    v83[2] = sub_100D24118;
    v83[3] = &unk_10181D3D0;
    v83[4] = a1;
    [*(id *)(a1 + 808) setHandler:v83];
    [*(id *)(a1 + 808) setNextFireDelay:60.0];
    sub_100D244B8(a1);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((v94[23] & 0x80000000) != 0) {
      operator delete(*(void **)v94);
    }
    unsigned int v56 = v87;
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        unint64_t v58 = __ldaxr(p_shared_owners);
      while (__stlxr(v58 - 1, p_shared_owners));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }

  return a1;
}

void sub_100D22C2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10000AE14((uint64_t)&a26);
  uint64_t v64 = *(void *)(v58 + 2568);
  *(void *)(v58 + 2568) = 0LL;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8LL))(v64);
  }
  uint64_t v65 = *v59;
  *unint64_t v59 = 0LL;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8LL))(v65);
  }
  sub_1000A56E8(v58 + 872);
  sub_100D2BCB0(v62);
  sub_100383050(a13);
  sub_100383050(a14);
  sub_100D2ADE8(a11);
  sub_1008F2FAC(a12, *(void **)(v58 + 128));
  sub_100D24A80(v58);
  _Unwind_Resume(a1);
}

void sub_100D22DC0()
{
}

uint64_t sub_100D22DD0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10187FFF8;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100D22E50(_Unwind_Exception *exception_object)
{
}

void sub_100D22E6C(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187FF78);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    char v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187FF78);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated, event:%{public, locat ion:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v9 = 0;
  }

  sub_100D262B4(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D23024( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D23044(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187FF78);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVehicleConnectionNotifier::onBluetoothNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187FF78);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVehicleConnectionNotifier::onBluetoothNotification, event:%{public, location:esca pe_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D2880C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D231FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D2321C(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187FF78);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLVehicleConnectionNotifier::onMotionStateNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187FF78);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLVehicleConnectionNotifier::onMotionStateNotification, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D28FD0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D233D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D233F4(uint64_t a1)
{
  uint64_t result = sub_1004F97F4();
  if ((result & 0x80000000) != 0)
  {
    *(_BYTE *)(a1 + 960) = 1;
    [*(id *)(*(void *)(a1 + 2568) + 16) register:*(void *)(*(void *)(a1 + 2568) + 8) forNotification:2 registrationInfo:0];
    return (uint64_t)sub_100D25478((id)a1);
  }

  return result;
}

void sub_100D23448(_DWORD *a1, int a2, void *a3, void *a4, void *a5)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  unsigned int v10 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    int v11 = a1[238];
    int v12 = a1[239];
    *(_DWORD *)std::string buf = 67109632;
    int v23 = a2;
    __int16 v24 = 1024;
    int v25 = v11;
    __int16 v26 = 1024;
    int v27 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    int v13 = a1[238];
    int v14 = a1[239];
    __int16 v18 = 1024;
    int v19 = v13;
    __int16 v20 = 1024;
    int v21 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d",  &v17,  20,  67109632);
    __int16 v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::setCarKitConnectionStatus(ConnectionStatus, NSString *, NSString *, NSString *)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  if (a1[237] != a2)
  {
    a1[237] = a2;
    sub_100D24EEC((uint64_t)a1, a2, a1[238], a3, a4, a5);
  }

id sub_100D23674(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(void **)(v5 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100D236D4;
  v8[3] = &unk_1018400C0;
  char v9 = a2;
  uint64_t v8[4] = a3;
  v8[5] = a4;
  void v8[6] = a5;
  v8[7] = v5;
  return [v6 async:v8];
}

void sub_100D236D4(uint64_t a1)
{
  int v2 = *(_DWORD **)(a1 + 56);
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_10187FF58);
  }
  uint64_t v3 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)std::string buf = 67240192;
    int v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#fmc CarKit connection status, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    int v5 = *(unsigned __int8 *)(a1 + 64);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc CarKit connection status, %{public}d",  v8,  8);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_100D23448(v2, *(unsigned __int8 *)(a1 + 64), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

void sub_100D2389C(uint64_t a1)
{
}

void sub_100D238A4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 792))
  {
    if (*(void *)(a1 + 936))
    {
      [*(id *)(a1 + 800) setNextFireDelay:5.0];
    }

    else if (*(void *)(a1 + 864))
    {
      unint64_t v2 = *(void *)(*(void *)(a1 + 832) + 8 * (*(void *)(a1 + 856) / 0x49uLL))
         + 56 * (*(void *)(a1 + 856) % 0x49uLL);
      uint64_t v3 = (std::string::size_type *)(a1 + 872);
      std::string::operator=((std::string *)(a1 + 872), (const std::string *)v2);
      int v4 = (const std::string::value_type *)(a1 + 896);
      std::string::operator=((std::string *)(a1 + 896), (const std::string *)(v2 + 24));
      *(_DWORD *)(a1 + 920) = *(_DWORD *)(v2 + 48);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      int v5 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v6 = a1 + 872;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#fmc Ask user to confirm BT device %s",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_10187FF58);
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc Ask user to confirm BT device %s",  (const char *)&__p);
        int v30 = (std::string *)v29;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::showConfirmationDialogIfNeeded()",  "%s\n",  v29);
        if (v30 != buf) {
          free(v30);
        }
      }

      memset(&__p, 0, sizeof(__p));
      switch(*(_DWORD *)(a1 + 920))
      {
        case 0x10:
          sub_1010DDBC0(buf, "headset");
          break;
        case 0x13:
          sub_1010DDBC0(buf, "speaker");
          break;
        case 0x14:
          sub_1010DDBC0(buf, "headphone");
          break;
        default:
          sub_1010DDBC0(buf, "vehicle");
          break;
      }

      std::string __p = buf[0];
      sub_1010DDBC0(&v37, "Is BT device ");
      uint64_t v7 = std::string::append(&v37, v4);
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      sub_1010DDBC0(v35, " a ");
      if ((v36 & 0x80u) == 0) {
        char v9 = v35;
      }
      else {
        char v9 = (void **)v35[0];
      }
      if ((v36 & 0x80u) == 0) {
        std::string::size_type v10 = v36;
      }
      else {
        std::string::size_type v10 = (std::string::size_type)v35[1];
      }
      int v11 = std::string::append(&v38, (const std::string::value_type *)v9, v10);
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v15 = std::string::append(&v41, (const std::string::value_type *)p_p, size);
      __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0LL;
      v15->__r_.__value_.__l.__cap_ = 0LL;
      v15->__r_.__value_.__r.__words[0] = 0LL;
      sub_1010DDBC0( v33,  "?\n \n With your answer, we collect the accessory name and device type to improve Bluetooth accessory detection. \n \n");
      if ((v34 & 0x80u) == 0) {
        int v17 = v33;
      }
      else {
        int v17 = (void **)v33[0];
      }
      if ((v34 & 0x80u) == 0) {
        std::string::size_type v18 = v34;
      }
      else {
        std::string::size_type v18 = (std::string::size_type)v33[1];
      }
      int v19 = std::string::append(buf, (const std::string::value_type *)v17, v18);
      __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      int64_t cap = v19->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string::size_type v39 = v20;
      v19->__r_.__value_.__l.__size_ = 0LL;
      v19->__r_.__value_.__l.__cap_ = 0LL;
      v19->__r_.__value_.__r.__words[0] = 0LL;
      Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, kCFUserNotificationAlertHeaderKey, @"Apple Internal Data Collection");
      if (cap >= 0) {
        uint64_t v22 = v39;
      }
      else {
        uint64_t v22 = (void **)v39[0];
      }
      CFStringRef v23 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, (const char *)v22, 0x8000100u, kCFAllocatorNull);
      CFDictionaryAddValue(Mutable, kCFUserNotificationAlertMessageKey, v23);
      CFDictionaryAddValue(Mutable, kCFUserNotificationDefaultButtonTitleKey, @"Cancel");
      CFDictionaryAddValue(Mutable, kCFUserNotificationAlternateButtonTitleKey, @"Yes");
      CFDictionaryAddValue(Mutable, kCFUserNotificationOtherButtonTitleKey, @"No");
      __int16 v24 = CFUserNotificationCreate(kCFAllocatorDefault, 20.0, 2uLL, (SInt32 *)&v38, Mutable);
      int v25 = v24;
      if (!LODWORD(v38.__r_.__value_.__l.__data_))
      {
        if (v24)
        {
          CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource( kCFAllocatorDefault,  v24,  (CFUserNotificationCallBack)sub_100D275A8,  0LL);
          *(void *)(a1 + 936) = RunLoopSource;
          if (RunLoopSource)
          {
            sub_100D2752C(a1, v25);
            int v27 = (__CFRunLoop *)sub_10029228C();
            CFRunLoopAddSource(v27, *(CFRunLoopSourceRef *)(a1 + 936), kCFRunLoopCommonModes);
          }
        }
      }

      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      uint64_t v28 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v38.__r_.__value_.__l.__data_;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "#fmc In vehicle confirmation dialog shown. %d",  (uint8_t *)buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_10187FF58);
        }
        LODWORD(v41.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v41.__r_.__value_.__r.__words[0]) = v38.__r_.__value_.__l.__data_;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc In vehicle confirmation dialog shown. %d",  &v41);
        uint64_t v32 = (std::string *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::showConfirmationDialogIfNeeded()",  "%s\n",  v31);
        if (v32 != buf) {
          free(v32);
        }
      }

      if (v25) {
        CFRelease(v25);
      }
      CFRelease(v23);
      CFRelease(Mutable);
      if (SHIBYTE(cap) < 0) {
        operator delete(v39[0]);
      }
    }
  }

void sub_100D2401C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D24118(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  unint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Timed out waiting to attach to BTServer", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Timed out waiting to attach to BTServer",  v5,  2);
    int v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_100D242B0(v1);
}

void sub_100D242B0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 816))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    unint64_t v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(_DWORD *)(a1 + 948);
      int v4 = *(_DWORD *)(a1 + 952);
      *(_DWORD *)std::string buf = 67109376;
      int v14 = v3;
      __int16 v15 = 1024;
      int v16 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "BT is initializing,fCarKitConnectionStatus,%d,fHandsfreeConnectionStatus,%d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      int v6 = *(_DWORD *)(a1 + 948);
      int v7 = *(_DWORD *)(a1 + 952);
      v10[0] = 67109376;
      v10[1] = v6;
      __int16 v11 = 1024;
      int v12 = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "BT is initializing,fCarKitConnectionStatus,%d,fHandsfreeConnectionStatus,%d",  v10,  14);
      char v9 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleConnectionNotifier::BTInitialized()", "%s\n", v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    *(_BYTE *)(a1 + 816) = 0;
    int v5 = *(_DWORD *)(a1 + 952);
    if (v5 == -1)
    {
      int v5 = 0;
      *(_DWORD *)(a1 + 952) = 0;
    }

    sub_100D24EEC(a1, *(_DWORD *)(a1 + 948), v5, 0LL, 0LL, 0LL);
  }

uint64_t sub_100D244B8(uint64_t a1)
{
  v34[0] = 0LL;
  v34[1] = 0LL;
  uint64_t v32 = off_10187FFA8;
  __int16 v33 = (unsigned int *)v34;
  uint64_t v35 = v36;
  v36[0] = 0LL;
  v38[0] = 0LL;
  v38[1] = 0LL;
  v36[1] = 0LL;
  std::string v37 = v38;
  int v39 = -1;
  sub_100D26190(__p);
  sub_100D1FBC4((uint64_t)&v32, (const char *)__p);
  v26[0] = 0LL;
  v26[1] = 0LL;
  __int16 v24 = off_10187FFA8;
  int v25 = (unsigned int *)v26;
  int v27 = v28;
  v28[0] = 0LL;
  v30[0] = 0LL;
  v30[1] = 0LL;
  v28[1] = 0LL;
  uint64_t v29 = v30;
  int v31 = -1;
  sub_100309D64(0, __p);
  unint64_t v2 = std::string::append(__p, "bluetooth-carkit-whitelist.plist");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type cap = v2->__r_.__value_.__l.__cap_;
  __int128 v41 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_100D1FBC4((uint64_t)&v24, (const char *)&v41);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v41);
  }
  int v4 = v39;
  int v5 = v31;
  int v6 = (uint64_t (***)())(a1 + 144);
  if (v39 >= v31)
  {
    if (v6 != &v32)
    {
      sub_100D2AE84((uint64_t **)(a1 + 152), v33, (unsigned int *)v34);
      sub_1005180EC((uint64_t **)(a1 + 176), v35, v36);
      sub_100D2B0DC((uint64_t **)(a1 + 200), v37, v38);
      int v4 = v39;
    }

    *(_DWORD *)(a1 + 224) = v4;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    int v12 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(_DWORD *)(a1 + 224);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Use framework's handsfree whitelist, version = %d",  (uint8_t *)__p,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      int v22 = *(_DWORD *)(a1 + 224);
      LODWORD(v41) = 67109120;
      DWORD1(v41) = v22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Use framework's handsfree whitelist, version = %d",  &v41);
      __int16 v11 = (std::string *)v23;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleConnectionNotifier::loadHandsfreeWhitelist()", "%s\n", v23);
      goto LABEL_38;
    }
  }

  else
  {
    if (v6 != &v24)
    {
      sub_100D2AE84((uint64_t **)(a1 + 152), v25, (unsigned int *)v26);
      sub_1005180EC((uint64_t **)(a1 + 176), v27, v28);
      sub_100D2B0DC((uint64_t **)(a1 + 200), v29, v30);
      int v5 = v31;
    }

    *(_DWORD *)(a1 + 224) = v5;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    int v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 224);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Use cached handsfree whitelist, version = %d",  (uint8_t *)__p,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      int v9 = *(_DWORD *)(a1 + 224);
      LODWORD(v41) = 67109120;
      DWORD1(v41) = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Use cached handsfree whitelist, version = %d",  &v41);
      __int16 v11 = (std::string *)v10;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleConnectionNotifier::loadHandsfreeWhitelist()", "%s\n", v10);
LABEL_38:
      if (v11 != __p) {
        free(v11);
      }
    }
  }

  uint64_t v14 = sub_1002F8DDC();
  if (sub_1002A6F20( v14,  (uint64_t)@"InVehiclePromptedAddress",  (CFTypeRef *)&__p[0].__r_.__value_.__l.__data_))
  {
    CFTypeID v15 = CFGetTypeID(__p[0].__r_.__value_.__l.__data_);
    if (v15 == CFDictionaryGetTypeID())
    {
      uint64_t v16 = sub_1002F8DDC();
      sub_1002A66DC(v16);
      uint64_t v17 = sub_1002F8DDC();
      (*(void (**)(uint64_t))(*(void *)v17 + 944LL))(v17);
    }
  }

  uint64_t v18 = sub_1002F8DDC();
  if (sub_1002A6F20( v18,  (uint64_t)@"InVehicleRepromptedAddress",  (CFTypeRef *)&__p[0].__r_.__value_.__l.__data_)
    && (CFTypeID v19 = CFGetTypeID(__p[0].__r_.__value_.__l.__data_), v19 == CFDictionaryGetTypeID()))
  {
    __int128 v20 = __p[0].__r_.__value_.__l.__data_;
  }

  else
  {
    __int128 v20 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }

  *(void *)(a1 + 928) = v20;
  sub_100D2ADE8((uint64_t)&v24);
  return sub_100D2ADE8((uint64_t)&v32);
}

void sub_100D24A04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
}

uint64_t sub_100D24A80(uint64_t a1)
{
  *(void *)a1 = off_10187FFF8;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100D24AF4(uint64_t a1)
{
  *(void *)a1 = off_10187FD90;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  unint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLVehicleConnectionNotifier is shutting down",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CLVehicleConnectionNotifier is shutting down",  v8,  2);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLVehicleConnectionNotifier::~CLVehicleConnectionNotifier()",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  [*(id *)(a1 + 112) setConnectionUpdateHandler:0];

  [*(id *)(a1 + 808) invalidate];
  *(void *)(a1 + 808) = 0LL;
  [*(id *)(a1 + 968) invalidate];

  *(void *)(a1 + 968) = 0LL;
  (*(void (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  uint64_t v3 = *(void *)(a1 + 2568);
  *(void *)(a1 + 2568) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2560);
  *(void *)(a1 + 2560) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100D2BCB0((void *)(a1 + 824));
  sub_100383050(a1 + 536);
  sub_100383050(a1 + 256);
  sub_100D2ADE8(a1 + 144);
  sub_1008F2FAC(a1 + 120, *(void **)(a1 + 128));
  sub_100D24A80(a1);
  return a1;
}

void sub_100D24D94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100D24DA4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D24AF4(a1);
  operator delete(v1);
}

void *sub_100D24DB8@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_100D24E30(double *a1)
{
  if (a1[221] > 0.0)
  {
    unint64_t v2 = a1 + 221;
    memcpy(__dst, a1 + 122, sizeof(__dst));
    int v4 = 0;
    (*(void (**)(double *, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v4,  __dst,  1LL,  0xFFFFFFFFLL,  0LL);
    memcpy(v2, __dst, 0x318uLL);
  }

  return 1LL;
}

uint64_t sub_100D24EE4()
{
  return 1LL;
}

void sub_100D24EEC(uint64_t a1, int a2, int a3, void *a4, void *a5, void *a6)
{
  if (sub_100D28034((_DWORD *)a1, a2, a3))
  {
    int v10 = *(_DWORD *)(a1 + 956);
    BOOL v11 = *(double *)(a1 + 976) > 0.0;
    if ((v10 == 1) != v11) {
      sub_100D28264(a1, v10 == 1, a4, a5, a6);
    }
  }

void sub_100D24F78(uint64_t a1)
{
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_10187FF58);
  }
  unint64_t v2 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#fmc Posting notification upon vehicle exit",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc Posting notification upon vehicle exit",  &v17,  2);
    int v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVehicleConnectionNotifier::postVehicleExitNotification()", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, kCMVehicleExitNotification, 0LL, 0LL, 0);
  *(CFAbsoluteTime *)(a1 + 1760) = CFAbsoluteTimeGetCurrent();
  sub_100D25358(v4, (double *)(a1 + 976));
  memcpy(buf, (const void *)(a1 + 976), 0x318uLL);
  int v17 = 0;
  (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v17,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
  memcpy((void *)(a1 + 1768), buf, 0x318uLL);
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_10187FF58);
  }
  int v5 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 976);
    uint64_t v7 = *(void *)(a1 + 984);
    uint64_t v8 = *(void *)(a1 + 1760);
    *(_DWORD *)std::string buf = 134218496;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&_BYTE buf[14] = v7;
    *(_WORD *)&_BYTE buf[22] = 2048;
    *(void *)&_BYTE buf[24] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#fmc startTime,%f,endTime,%f,exitTime,%f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    uint64_t v11 = *(void *)(a1 + 976);
    uint64_t v12 = *(void *)(a1 + 984);
    uint64_t v13 = *(void *)(a1 + 1760);
    int v17 = 134218496;
    uint64_t v18 = v11;
    __int16 v19 = 2048;
    uint64_t v20 = v12;
    __int16 v21 = 2048;
    uint64_t v22 = v13;
    LODWORD(v16) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc startTime,%f,endTime,%f,exitTime,%f",  COERCE_DOUBLE(&v17),  v16);
    CFTypeID v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::postVehicleExitNotification()",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

void sub_100D25308(uint64_t a1)
{
  if ((sub_1004F97F4() & 0x80000000) != 0)
  {
    *(_BYTE *)(a1 + 960) = 0;
    [*(id *)(*(void *)(a1 + 2568) + 16) unregister:*(void *)(*(void *)(a1 + 2568) + 8) forNotification:2];
    [*(id *)(a1 + 968) invalidate];

    *(void *)(a1 + 968) = 0LL;
  }

void sub_100D25358(uint64_t a1, double *a2)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  uint64_t v4 = +[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 6LL);
  -[NSMutableArray setObject:atIndexedSubscript:]( v4,  "setObject:atIndexedSubscript:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *a2),  0LL);
  -[NSMutableArray setObject:atIndexedSubscript:]( v4,  "setObject:atIndexedSubscript:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a2[1]),  1LL);
  -[NSMutableArray setObject:atIndexedSubscript:]( v4,  "setObject:atIndexedSubscript:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2 + 2),  2LL);
  -[NSMutableArray setObject:atIndexedSubscript:]( v4,  "setObject:atIndexedSubscript:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2 + 34),  3LL);
  -[NSMutableArray setObject:atIndexedSubscript:]( v4,  "setObject:atIndexedSubscript:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2 + 66),  4LL);
  -[NSMutableArray setObject:atIndexedSubscript:]( v4,  "setObject:atIndexedSubscript:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a2[98]),  5LL);
  uint64_t v5 = sub_1002F8DDC();
  sub_1002AB3DC(v5);
  uint64_t v6 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v6 + 944LL))(v6);
  objc_autoreleasePoolPop(v3);
}

id sub_100D25478(id result)
{
  if (*((_BYTE *)result + 960))
  {
    uint64_t v1 = (id *)result;
    uint64_t result = (id)+[CMActivityAlarmLocal activityAlarmAvailable]( &OBJC_CLASS___CMActivityAlarmLocal,  "activityAlarmAvailable");
    if ((_DWORD)result)
    {
      unint64_t v2 = objc_alloc(&OBJC_CLASS___CMActivityAlarmLocal);
      id v3 = [v1[5] queue];
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472LL;
      _DWORD v4[2] = sub_100D287F8;
      v4[3] = &unk_10182FA08;
      v4[4] = v1;
      uint64_t result = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:]( v2,  "initWithTrigger:duration:onQueue:withHandler:",  13LL,  v3,  v4,  1.0);
      v1[121] = result;
    }
  }

  return result;
}

void sub_100D25514(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  *(_BYTE *)(a1 + 816) = 0;
  if (a3 != -1)
  {
    if (*(char *)(a2 + 31) < 0)
    {
      sub_1010DD48C(__dst, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }

    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)(a2 + 8);
      uint64_t v34 = *(void *)(a2 + 24);
    }

    if (!sub_1004DAD38(a1 + 120, (const void **)__dst))
    {
      sub_1008F2EA8((uint64_t)&v22, a2);
      int v8 = *(_DWORD *)(a2 + 84);
      LODWORD(v31) = 0;
      DWORD1(v31) = v8;
      BYTE8(v31) = 0;
      uint64_t v32 = 0x7FEFFFFFFFFFFFFFLL;
      uint64_t v35 = __dst;
      int v9 = sub_100D2BDEC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_1012CF090, (__int128 **)&v35);
      v9[7] = (uint64_t)v22;
      int v10 = (void **)(v9 + 8);
      v9[10] = v24;
      *(_OWORD *)int v10 = v23;
      HIBYTE(v24) = 0;
      LOBYTE(v23) = 0;
      uint64_t v11 = (void **)(v9 + 11);
      char v12 = 0;
      v9[13] = v26;
      *(_OWORD *)uint64_t v11 = __p;
      HIBYTE(v26) = 0;
      LOBYTE(__p) = 0;
      uint64_t v13 = (void **)(v9 + 14);
      if (*((char *)v9 + 135) < 0)
      {
        operator delete(*v13);
        char v12 = HIBYTE(v26);
      }

      v9[16] = v28;
      *(_OWORD *)uint64_t v13 = v27;
      HIBYTE(v28) = 0;
      LOBYTE(v27) = 0;
      *(_OWORD *)(v9 + 17) = v29;
      *((_BYTE *)v9 + 152) = v30;
      v9[22] = v32;
      *((_OWORD *)v9 + 10) = v31;
      if (v12 < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete((void *)v23);
      }
    }

    uint64_t v22 = __dst;
    int v14 = *((_DWORD *)sub_100D2BDEC( (uint64_t **)(a1 + 120),  (const void **)__dst,  (uint64_t)&unk_1012CF090,  (__int128 **)&v22)
          + 40);
    int v15 = *a4;
    if (*a4 == 11)
    {
      uint64_t v22 = __dst;
      int v17 = sub_100D2BDEC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_1012CF090, (__int128 **)&v22);
      int v18 = 0;
    }

    else
    {
      uint64_t v22 = __dst;
      if (v15 == 10)
      {
        int v16 = *((_DWORD *)sub_100D2BDEC( (uint64_t **)(a1 + 120),  (const void **)__dst,  (uint64_t)&unk_1012CF090,  (__int128 **)&v22)
              + 40);
        uint64_t v22 = __dst;
        int v17 = sub_100D2BDEC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_1012CF090, (__int128 **)&v22);
        int v18 = v16 | a3;
      }

      else
      {
        int v19 = *((_DWORD *)sub_100D2BDEC( (uint64_t **)(a1 + 120),  (const void **)__dst,  (uint64_t)&unk_1012CF090,  (__int128 **)&v22)
              + 40);
        uint64_t v22 = __dst;
        int v17 = sub_100D2BDEC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_1012CF090, (__int128 **)&v22);
        int v18 = v19 & ~a3;
      }
    }

    *((_DWORD *)v17 + 40) = v18;
    if (v14)
    {
      uint64_t v22 = __dst;
      if (*((_DWORD *)sub_100D2BDEC( (uint64_t **)(a1 + 120),  (const void **)__dst,  (uint64_t)&unk_1012CF090,  (__int128 **)&v22)
           + 40))
        goto LABEL_27;
      uint64_t v22 = __dst;
      uint64_t v20 = sub_100D2BDEC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_1012CF090, (__int128 **)&v22);
      CFAbsoluteTime Current = 1.79769313e308;
    }

    else
    {
      uint64_t v22 = __dst;
      if (!*((_DWORD *)sub_100D2BDEC( (uint64_t **)(a1 + 120),  (const void **)__dst,  (uint64_t)&unk_1012CF090,  (__int128 **)&v22)
            + 40))
        goto LABEL_27;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v22 = __dst;
      uint64_t v20 = sub_100D2BDEC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_1012CF090, (__int128 **)&v22);
    }

    *((CFAbsoluteTime *)v20 + 22) = Current;
LABEL_27:
    sub_100D258EC(a1);
    if (SHIBYTE(v34) < 0) {
      operator delete(__dst[0]);
    }
  }

void sub_100D258B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100D258EC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 816))
  {
    memset(&__p, 0, sizeof(__p));
    int v2 = sub_100D259B8(a1, (void *)(a1 + 120), &__p);
    if (*(_DWORD *)(a1 + 952) != v2)
    {
      *(_DWORD *)(a1 + 952) = v2;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_100D24EEC( a1,  *(_DWORD *)(a1 + 948),  v2,  0LL,  0LL,  +[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", p_p, 4LL));
    }
  }

void sub_100D2599C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D259B8(uint64_t a1, void *a2, std::string *a3)
{
  id v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v6 = 0LL;
    double v7 = 1.79769313e308;
    while (1)
    {
      int v8 = v4 + 4;
      if (*((_DWORD *)v4 + 40))
      {
        double v9 = *((double *)v4 + 22);
        if (v9 != 1.79769313e308)
        {
          int v10 = *((_DWORD *)v4 + 41);
          BOOL v11 = v10 == 22 || v10 == 17;
          if (v11)
          {
            if (sub_100D25CD0(a1, (uint64_t)(v4 + 4)))
            {
              double v9 = *((double *)v4 + 22);
LABEL_32:
              uint64_t v6 = 1LL;
              *((_BYTE *)v4 + 168) = 1;
              if (v9 < v7)
              {
                std::string::operator=(a3, (const std::string *)(v4 + 4));
                double v7 = v9;
              }

              goto LABEL_18;
            }
          }

          else if (v10 == 16 && *(_BYTE *)(a1 + 944) != 0)
          {
            goto LABEL_32;
          }
        }
      }

      *((_BYTE *)v4 + 168) = 0;
LABEL_18:
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      uint64_t v13 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
      {
        int v14 = v4 + 4;
        int v15 = sub_1008F09B0((const char *)v4 + 32);
        int v16 = *((_DWORD *)v4 + 40);
        int v17 = *((_DWORD *)v4 + 41);
        *(_DWORD *)std::string buf = 136315906;
        int v39 = v14;
        __int16 v40 = 1026;
        int v41 = v15;
        __int16 v42 = 1026;
        int v43 = v16;
        __int16 v44 = 1026;
        int v45 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "#fmc address,%s,oui,%{public}d,mask,0x%{public}x,type,%{public}d",  buf,  0x1Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_10187FF58);
        }
        uint64_t v20 = qword_1019344F8;
        __int16 v21 = v4 + 4;
        int v22 = sub_1008F09B0((const char *)v4 + 32);
        int v23 = *((_DWORD *)v4 + 40);
        int v24 = *((_DWORD *)v4 + 41);
        int v30 = 136315906;
        __int128 v31 = v21;
        __int16 v32 = 1026;
        int v33 = v22;
        __int16 v34 = 1026;
        int v35 = v23;
        __int16 v36 = 1026;
        int v37 = v24;
        LODWORD(v28) = 30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  1LL,  "#fmc address,%s,oui,%{public}d,mask,0x%{public}x,type,%{public}d",  &v30,  v28);
        uint64_t v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLVehicleConnectionNotifier::ConnectionStatus CLVehicleConnectionNotifier::updateHandsfreeConnectionState(std: :map<std::string, CLBTDeviceEntry> &, std::string &)",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      int v18 = (void *)v4[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          int v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          int v19 = (void *)v4[2];
          BOOL v11 = *v19 == (void)v4;
          uint64_t v4 = v19;
        }

        while (!v11);
      }

      uint64_t v4 = v19;
      if (v19 == v3) {
        return v6;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100D25CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10008E8D0(a1 + 120, (const void **)a2);
  if (a1 + 128 != v4) {
    return sub_100D2080C(a1 + 144, v4 + 56);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  uint64_t v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    else {
      double v7 = *(const void **)a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    int v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Cannot find the corresponding device entry for BT address %s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    else {
      int v8 = *(const void **)a2;
    }
    int v11 = 136315138;
    char v12 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Cannot find the corresponding device entry for BT address %s",  (const char *)&v11);
    int v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLVehicleConnectionNotifier::isHandsfreeDevice(const std::string &) const",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  return 0LL;
}

BOOL sub_100D25EF0(uint64_t a1, const char *a2)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  char v12 = off_10187FFA8;
  uint64_t v13 = (unsigned int *)v14;
  int v15 = v16;
  v16[0] = 0LL;
  v18[0] = 0LL;
  v18[1] = 0LL;
  v16[1] = 0LL;
  int v17 = v18;
  int v19 = -1;
  BOOL v3 = sub_100D1FBC4((uint64_t)&v12, a2);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 224);
    int v5 = v19;
    if (v4 < v19)
    {
      if ((uint64_t (***)())(a1 + 144) != &v12)
      {
        sub_100D2AE84((uint64_t **)(a1 + 152), v13, (unsigned int *)v14);
        sub_1005180EC((uint64_t **)(a1 + 176), v15, v16);
        sub_100D2B0DC((uint64_t **)(a1 + 200), v17, v18);
        int v5 = v19;
      }

      *(_DWORD *)(a1 + 224) = v5;
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      uint64_t v6 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *(_DWORD *)(a1 + 224);
        *(_DWORD *)std::string buf = 67109376;
        int v24 = v4;
        __int16 v25 = 1024;
        int v26 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Use cache handsfree whitelist, old version = %d, new version = %d",  buf,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10187FF38);
        }
        int v9 = *(_DWORD *)(a1 + 224);
        v20[0] = 67109376;
        v20[1] = v4;
        __int16 v21 = 1024;
        int v22 = v9;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Use cache handsfree whitelist, old version = %d, new version = %d",  v20,  14);
        int v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLVehicleConnectionNotifier::loadHandsfreeWhitelist(const std::string &)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }
    }

    sub_100D258EC(a1);
  }

  sub_100D2ADE8((uint64_t)&v12);
  return v3;
}

void sub_100D26174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100D26190(std::string *a1@<X8>)
{
  int v2 = std::string::append(&v7, off_101939D58);
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v8.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  int v4 = std::string::append(&v8, "/");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v9, "bluetooth-carkit-whitelist.plist");
  *a1 = *v6;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100D26268( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D262B4(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  uint64_t v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100386874(a2, (uint64_t)__p);
    std::string v7 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Handsfree whitelist,%s,update,%d",  (uint8_t *)&buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    uint64_t v75 = qword_101934A78;
    sub_100386874(a2, (uint64_t)&buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v92.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
    WORD2(v92.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v92.__r_.__value_.__r.__words[1] + 6) = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v75,  2LL,  "Handsfree whitelist,%s,update,%d",  (const char *)&v92,  18);
    double v78 = v77;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  (const char *)v78);
    if (v78 != __p) {
      free(v78);
    }
  }

  if (a3 != 2) {
    return;
  }
  sub_100386874(a2, (uint64_t)&buf);
  sub_100309D64(0, __p);
  std::string v8 = std::string::append(__p, "bluetooth-carkit-whitelist-version.plist");
  std::string v92 = *v8;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  unsigned __int8 size = buf.__r_.__value_.__s.__size_;
  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v10 = buf.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v10 = buf.__r_.__value_.__l.__size_;
  }
  std::string::size_type v11 = v92.__r_.__value_.__s.__size_;
  int v12 = (char)v92.__r_.__value_.__s.__size_;
  if ((v92.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v11 = v92.__r_.__value_.__l.__size_;
  }
  if (v10 == v11)
  {
    if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v13 = &v92;
    }
    else {
      uint64_t v13 = (std::string *)v92.__r_.__value_.__r.__words[0];
    }
    if ((char)buf.__r_.__value_.__s.__size_ < 0)
    {
      BOOL v22 = memcmp(buf.__r_.__value_.__l.__data_, v13, buf.__r_.__value_.__l.__size_) == 0;
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_31;
      }
    }

    else if (buf.__r_.__value_.__s.__size_)
    {
      uint64_t v14 = buf.__r_.__value_.__s.__size_ - 1LL;
      int v15 = &buf;
      do
      {
        int v17 = v15->__r_.__value_.__s.__data_[0];
        int v15 = (std::string *)((char *)v15 + 1);
        int v16 = v17;
        int v19 = v13->__r_.__value_.__s.__data_[0];
        uint64_t v13 = (std::string *)((char *)v13 + 1);
        int v18 = v19;
        BOOL v20 = v14-- != 0;
        char v21 = v20;
        BOOL v22 = v16 == v18;
      }

      while (v16 == v18 && (v21 & 1) != 0);
      if (((char)v92.__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
LABEL_31:
        if ((size & 0x80) == 0) {
          goto LABEL_32;
        }
        goto LABEL_41;
      }
    }

    else
    {
      BOOL v22 = 1;
    }
  }

  else
  {
    BOOL v22 = 0;
  }

  operator delete(v92.__r_.__value_.__l.__data_);
  if ((buf.__r_.__value_.__s.__size_ & 0x80) == 0)
  {
LABEL_32:
    if (v22) {
      goto LABEL_33;
    }
    goto LABEL_42;
  }

void sub_100D2738C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D27430(std::string *a1@<X8>)
{
  int v2 = std::string::append(&v5, "Download_");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  int v4 = std::string::append(&v6, "bluetooth-carkit-whitelist.plist");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100D274D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D27504(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100D2752C(uint64_t a1, const void *a2)
{
  std::string v6 = a2;
  id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLVehicleConnectionNotifier");
  CFRetain(a2);
  id v4 = v3;
  std::string v7 = (unint64_t *)&v6;
  uint64_t result = sub_100595AA4( (uint64_t **)&qword_10199DD68,  (unint64_t *)&v6,  (uint64_t)&unk_1012CF090,  (uint64_t **)&v7);
  result[5] = (uint64_t)v4;
  return result;
}

void sub_100D275A8(const void *a1, uint64_t a2)
{
  uint64_t v4 = qword_10199DD70;
  if (!qword_10199DD70) {
    goto LABEL_12;
  }
  std::string v5 = &qword_10199DD70;
  do
  {
    unint64_t v6 = *(void *)(v4 + 32);
    BOOL v7 = v6 >= (unint64_t)a1;
    else {
      std::string v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      std::string v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 != &qword_10199DD70 && v5[4] <= (unint64_t)a1)
  {
    std::string::size_type v10 = (void *)v5[5];
    [v10 deliverAndReleaseNotification:a1 withFlags:a2];

    CFRelease((CFTypeRef)v5[4]);
    sub_1000087E8((uint64_t **)&qword_10199DD68, v5);
    operator delete(v5);
  }

  else
  {
LABEL_12:
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    std::string v9 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "CFUserNotification event delivery for unknown notification",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "CFUserNotification event delivery for unknown notification",  v13,  2);
      int v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void thunkDeliverCFUserNotification(CFUserNotificationRef, CFOptionFlags)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

void sub_100D277F0(uint64_t a1, std::string::size_type a2, char a3)
{
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_10187FF58);
  }
  std::string v5 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v6 = a2;
    int v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)std::string buf = 136315394;
    int v33 = (std::string *)v6;
    __int16 v34 = 1024;
    int v35 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#fmc logBTConnection, deviceAddr, %s, deviceType, %u",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    std::string::size_type v12 = a2;
    int v13 = *(_DWORD *)(a2 + 48);
    LODWORD(v31.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = v12;
    WORD2(v31.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc logBTConnection, deviceAddr, %s, deviceType, %u",  (const char *)&v31,  18);
    int v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::logBTConnection(CLBTDialogDeviceInfo, BOOL) const",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  if ((a3 & 1) != 0 || (unsigned int v8 = *(_DWORD *)(a2 + 48), v8 <= 0x16) && ((1 << v8) & 0x5B0000) != 0)
  {
    std::string::basic_string(&v31, (const std::string *)a2, 0LL, 8uLL, (std::allocator<char> *)buf);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768LL;
    v19[2] = sub_100D27DB4;
    void v19[3] = &unk_10187FE80;
    else {
      std::string v20 = v31;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1010DD48C(&v21, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      __int128 v21 = *(_OWORD *)a2;
      uint64_t v22 = *(void *)(a2 + 16);
    }

    if (*(char *)(a2 + 47) < 0)
    {
      sub_1010DD48C(&__p, *(void **)(a2 + 24), *(void *)(a2 + 32));
    }

    else
    {
      __int128 __p = *(_OWORD *)(a2 + 24);
      uint64_t v24 = *(void *)(a2 + 40);
    }

    int v25 = *(_DWORD *)(a2 + 48);
    char v26 = a3;
    int v9 = off_101990698((uint64_t)@"212", (uint64_t)@"VehicleConnection_NOT_A_CRASH", 0LL, 0LL, (uint64_t)v19);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    std::string::size_type v10 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v11 = &v31;
      if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v11 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      int v33 = v11;
      __int16 v34 = 1024;
      int v35 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#fmc logBTConnection, btOUI, %s,success,%u",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      int v16 = &v31;
      if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      int v27 = 136315394;
      std::string::size_type v28 = v16;
      __int16 v29 = 1024;
      int v30 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc logBTConnection, btOUI, %s,success,%u",  (const char *)&v27,  18);
      int v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::logBTConnection(CLBTDialogDeviceInfo, BOOL) const",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    if (SHIBYTE(v24) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)v21);
    }
  }

void sub_100D27CD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100D27D40(int64x2_t *a1)
{
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1012CE4D0);
  return sub_10079E85C((uint64_t)a1, 1);
}

id sub_100D27DB4(uint64_t a1, void *a2)
{
  int v7 = @"btOUI";
  uint64_t v4 = (void *)(a1 + 32);
  v10[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4);
  unsigned int v8 = @"btDeviceName";
  std::string v5 = (void *)(a1 + 80);
  v10[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5);
  _DWORD v10[2] = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  *(unsigned int *)(a1 + 104),  v7,  v8,  @"btDeviceType");
  int v9 = @"isCorrectlyAdvertised";
  v10[3] = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  *(unsigned __int8 *)(a1 + 112));
  return objc_msgSend( a2,  "writeData:",  +[NSJSONSerialization dataWithJSONObject:options:error:]( NSJSONSerialization,  "dataWithJSONObject:options:error:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  &v7,  4),  0,  0));
}

_BYTE *sub_100D27EF0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }

  if (*(char *)(a2 + 79) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }

  uint64_t result = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    uint64_t result = sub_1010DD48C(result, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)uint64_t result = v7;
  }

  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return result;
}

void sub_100D27FAC(_Unwind_Exception *exception_object)
{
}

void sub_100D27FE0(uint64_t a1)
{
}

uint64_t sub_100D28034(_DWORD *a1, int a2, int a3)
{
  int v4 = 1;
  if (a2 != 1 && a3 != 1)
  {
    uint64_t result = 0LL;
    if (a3 | a2) {
      return result;
    }
    int v4 = 0;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  std::string::size_type v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    int v7 = a1[237];
    int v8 = a1[238];
    int v9 = a1[239];
    *(_DWORD *)std::string buf = 67109888;
    int v20 = v7;
    __int16 v21 = 1024;
    int v22 = v8;
    __int16 v23 = 1024;
    int v24 = v9;
    __int16 v25 = 1024;
    int v26 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d,new VehicleConnectionStatus,%d",  buf,  0x1Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    int v10 = a1[238];
    int v11 = a1[239];
    LOWORD(v15) = 1024;
    HIWORD(v15) = v10;
    int v16 = v11;
    __int16 v17 = 1024;
    int v18 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d,new VehicleConnectionStatus,%d",  &v14,  26,  67109888,  v15);
    int v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLVehicleConnectionNotifier::setVehicleConnectionStatus(ConnectionStatus, ConnectionStatus)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  if (a1[239] == v4) {
    return 0LL;
  }
  a1[239] = v4;
  return 1LL;
}

void sub_100D28264(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  if (a2)
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    int v9 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#fmc Posting notification upon vehicle connect",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      v17[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc Posting notification upon vehicle connect",  v17,  2);
      int v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::postStatus(BOOL, NSString *, NSString *, NSString *)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, kCMVehicleConnectedNotification, 0LL, 0LL, 0);
    sub_100D285B4(a1, 1, a3, a4, a5);
    sub_100D25308(a1);
  }

  else
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    int v11 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#fmc Posting notification upon vehicle disconnect",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      v17[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc Posting notification upon vehicle disconnect",  v17,  2);
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::postStatus(BOOL, NSString *, NSString *, NSString *)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    std::string::size_type v12 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(v12, kCMVehicleDisconnectedNotification, 0LL, 0LL, 0);
    sub_100D285B4(a1, 0, a3, a4, a5);
    sub_100D233F4(a1);
  }

void *sub_100D285B4(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *(double *)(a1 + 976) = Current;
    *(void *)(a1 + 984) = 0xBFF0000000000000LL;
    *(void *)(a1 + 1760) = 0xBFF0000000000000LL;
    if (a3 && (int v10 = (char *)[a3 UTF8String]) != 0)
    {
      int v10 = strncpy((char *)(a1 + 992), (const char *)[a3 UTF8String], 0x100uLL);
      if (!a4) {
        goto LABEL_11;
      }
    }

    else
    {
      *(_OWORD *)(a1 + 1232) = 0u;
      *(_OWORD *)(a1 + 1216) = 0u;
      *(_OWORD *)(a1 + 1200) = 0u;
      *(_OWORD *)(a1 + 1184) = 0u;
      *(_OWORD *)(a1 + 1168) = 0u;
      *(_OWORD *)(a1 + 1152) = 0u;
      *(_OWORD *)(a1 + 1136) = 0u;
      *(_OWORD *)(a1 + 1120) = 0u;
      *(_OWORD *)(a1 + 1104) = 0u;
      *(_OWORD *)(a1 + 1088) = 0u;
      *(_OWORD *)(a1 + 1072) = 0u;
      *(_OWORD *)(a1 + 1056) = 0u;
      *(_OWORD *)(a1 + 1040) = 0u;
      *(_OWORD *)(a1 + 1008) = 0u;
      *(_OWORD *)(a1 + 1024) = 0u;
      *(_OWORD *)(a1 + 992) = 0u;
      if (!a4) {
        goto LABEL_11;
      }
    }

    int v10 = (char *)[a4 UTF8String];
    if (v10)
    {
      int v10 = strncpy((char *)(a1 + 1248), (const char *)[a4 UTF8String], 0x100uLL);
      if (!a5) {
        goto LABEL_14;
      }
LABEL_12:
      int v10 = (char *)[a5 UTF8String];
      if (v10)
      {
        int v10 = strncpy((char *)(a1 + 1504), (const char *)[a5 UTF8String], 0x100uLL);
        goto LABEL_15;
      }

void sub_100D287F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 960)) {
    sub_100D24F78(v1);
  }
}

void sub_100D2880C(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  __int128 v5 = a3;
  if (*a3)
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    int v7 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *v5;
      BOOL v9 = *v5 == 10;
      BOOL v11 = *v5 == 5 || v8 == 11;
      int v13 = a4 + 16;
      std::string::size_type v12 = (unsigned __int8 *)*((void *)a4 + 2);
      int v14 = v5;
      int v15 = a4;
      uint64_t v16 = a1;
      int v17 = *((_DWORD *)v13 + 19);
      int v18 = v13[88];
      int v55 = *((_DWORD *)v13 + 25);
      if ((v13[23] & 0x80u) == 0) {
        std::string::size_type v12 = v13;
      }
      std::string::size_type v54 = v12;
      int v19 = sub_1008F09B0((const char *)v13);
      int v20 = *((_DWORD *)v13 + 26);
      *(_DWORD *)std::string buf = 67242242;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&_BYTE buf[14] = 1024;
      LODWORD(__p[0]) = v11;
      WORD2(__p[0]) = 1026;
      *(_DWORD *)((char *)__p + 6) = v17;
      a1 = v16;
      a4 = v15;
      __int128 v5 = v14;
      WORD1(__p[1]) = 1024;
      HIDWORD(__p[1]) = v18;
      LOWORD(v77) = 1026;
      *(_DWORD *)((char *)&v77 + 2) = v55;
      WORD3(v77) = 2080;
      *((void *)&v77 + 1) = v54;
      *(_WORD *)double v78 = 1026;
      *(_DWORD *)&v78[2] = v19;
      __int16 v79 = 1024;
      int v80 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#fmc Received BT notification, %{public}d. Connect,%d,Disconnect,%d,DeviceType,%{public}d,isAppleAudio,%d,Servic es,0x%{public}x,Address,%s,Oui,%{public}d,BTResult,%d",  buf,  0x3Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      uint64_t v56 = qword_1019344F8;
      int v38 = *v5;
      BOOL v39 = *v5 == 10;
      BOOL v41 = *v5 == 5 || v38 == 11;
      int v42 = *((_DWORD *)a4 + 23);
      int v43 = a4[104];
      int v44 = *((_DWORD *)a4 + 29);
      if ((a4[39] & 0x80u) == 0) {
        int v45 = a4 + 16;
      }
      else {
        int v45 = (unsigned __int8 *)*((void *)a4 + 2);
      }
      int v46 = sub_1008F09B0((const char *)a4 + 16);
      int v47 = *((_DWORD *)a4 + 30);
      int v57 = 67242242;
      int v58 = v38;
      __int16 v59 = 1024;
      BOOL v60 = v39;
      __int16 v61 = 1024;
      BOOL v62 = v41;
      __int16 v63 = 1026;
      int v64 = v42;
      __int16 v65 = 1024;
      int v66 = v43;
      __int16 v67 = 1026;
      int v68 = v44;
      __int16 v69 = 2080;
      std::string v70 = v45;
      __int16 v71 = 1026;
      int v72 = v46;
      __int16 v73 = 1024;
      int v74 = v47;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v56,  0LL,  "#fmc Received BT notification, %{public}d. Connect,%d,Disconnect,%d,DeviceType,%{public}d,isAppleAudio,%d,Servic es,0x%{public}x,Address,%s,Oui,%{public}d,BTResult,%d",  &v57,  60);
      __int16 v49 = (uint8_t *)v48;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::onBluetoothNotification(int, const CLBluetoothService_Type::Notification &, co nst CLBluetoothService_Type::NotificationData &)",  "%s\n",  v48);
      if (v49 != buf) {
        free(v49);
      }
    }

    if (!*((_DWORD *)a4 + 30) && *v5 <= 0xB && ((1 << *v5) & 0xC20) != 0)
    {
      if (*(_BYTE *)(a1 + 792))
      {
        if (!a4[104])
        {
          unsigned int v21 = *((_DWORD *)a4 + 23);
          if (v21 <= 0x14 && ((1 << v21) & 0x1B0000) != 0)
          {
            uint64_t v22 = (a4[39] & 0x80u) == 0 ? (uint64_t)(a4 + 16) : *((void *)a4 + 2);
            if (!objc_msgSend( *(id *)(a1 + 928),  "objectForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22))
              || *(_BYTE *)(a1 + 793))
            {
              *(_OWORD *)__int128 __p = 0u;
              __int128 v77 = 0u;
              *(_OWORD *)std::string buf = 0u;
              std::string::operator=((std::string *)buf, (const std::string *)(a4 + 16));
              std::string::operator=((std::string *)&__p[1], (const std::string *)(a4 + 40));
              *(_DWORD *)double v78 = *((_DWORD *)a4 + 23);
              uint64_t v23 = *(void *)(a1 + 832);
              unint64_t v24 = *(void *)(a1 + 856);
              __int16 v25 = (unsigned __int8 **)(v23 + 8 * (v24 / 0x49));
              if (*(void *)(a1 + 840) == v23)
              {
                int v26 = 0LL;
                __int16 v29 = 0LL;
                std::string::size_type v28 = (unsigned __int8 **)(v23
              }

              else
              {
                int v26 = (unsigned __int8 *)(*(void *)(v23 + 8 * (v24 / 0x49)) + 56 * (v24 % 0x49));
                unint64_t v27 = *(void *)(a1 + 864) + v24;
                std::string::size_type v28 = (unsigned __int8 **)(v23 + 8 * (v27 / 0x49));
                __int16 v29 = &(*v28)[56 * (v27 % 0x49)];
              }

              sub_100D2CD18(v25, v26, v28, v29, buf);
              uint64_t v34 = *(void *)(a1 + 832);
              if (*(void *)(a1 + 840) == v34)
              {
                unint64_t v36 = 0LL;
              }

              else
              {
                unint64_t v35 = *(void *)(a1 + 864) + *(void *)(a1 + 856);
                unint64_t v36 = *(void *)(v34 + 8 * (v35 / 0x49)) + 56 * (v35 % 0x49);
              }

              if (v36 == v33) {
                sub_100D28F08((void *)(a1 + 824), (__int128 *)buf);
              }
              sub_100D238A4(a1);
              if (SHIBYTE(v77) < 0) {
                operator delete(__p[1]);
              }
              if (SHIBYTE(__p[0]) < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
        }
      }

      int v37 = *((_DWORD *)a4 + 23);
      if (v37 == 17
        || v37 == 22
        || v37 == 16 && *(_BYTE *)(a1 + 944)
        || a1 + 128 != sub_10008E8D0(a1 + 120, (const void **)a4 + 2))
      {
        sub_100D25514(a1, (uint64_t)(a4 + 8), *((_DWORD *)a4 + 29), v5);
      }
    }
  }

  else
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187FF58);
    }
    int v30 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = *v5;
      int v32 = *a4;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v31;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#fmc Received BT notification, %{public}d. Ready,%{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187FF58);
      }
      int v50 = *v5;
      int v51 = *a4;
      int v57 = 67240448;
      int v58 = v50;
      __int16 v59 = 1026;
      BOOL v60 = v51;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#fmc Received BT notification, %{public}d. Ready,%{public}d",  &v57,  14);
      __int16 v53 = (uint8_t *)v52;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::onBluetoothNotification(int, const CLBluetoothService_Type::Notification &, co nst CLBluetoothService_Type::NotificationData &)",  "%s\n",  v52);
      if (v53 != buf) {
        free(v53);
      }
    }

    if (*a4)
    {
      [*(id *)(a1 + 808) invalidate];

      *(void *)(a1 + 808) = 0LL;
      sub_100D242B0(a1);
    }
  }

void sub_100D28EE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

_BYTE *sub_100D28F08(void *a1, __int128 *a2)
{
  int v4 = a1 + 5;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 73 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0LL;
  }
  if (v7 == a1[5] + a1[4])
  {
    sub_100D2CEC0(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }

  if (v6 == v5)
  {
    BOOL v9 = 0LL;
  }

  else
  {
    unint64_t v8 = a1[5] + a1[4];
    BOOL v9 = (void *)(*(void *)(v5 + 8 * (v8 / 0x49)) + 56 * (v8 % 0x49));
  }

  uint64_t result = sub_100D2D1D4((int)v4, v9, a2);
  ++*v4;
  return result;
}

void sub_100D28FD0(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  if (*a3 == 2 && CLMotionActivity::isTypePedestrian(*a4))
  {
    if (*(_BYTE *)(a1 + 960)) {
      sub_100D24F78(a1);
    }
  }

uint64_t sub_100D2901C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101880148;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    std::string::size_type v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100D290F0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLVehicleConnectionNotifier");
  sub_100D2901C((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  *unint64_t v8 = off_10187FEC0;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100D2918C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_100D291B8(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        BOOL v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187FF78);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        BOOL v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        unsigned int v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10187FF78);
        }
        std::string::size_type v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        int v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::Noti ficationData>::removeClient(int) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, Notificatio nData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100D2942C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_1019906A0);
}

uint64_t sub_100D29440(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)int v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          unint64_t v24 = (uint64_t *)v18;
        }
        else {
          unint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int16 v29 = (uint64_t *)v25;
        }
        else {
          __int16 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)std::string buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        bzero(buf, 0x318uLL);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          unint64_t v36 = sub_100D2D2CC(buf);
          sub_100D2C3A0((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_1019906A1;
        HIDWORD(v40) = v17;
        *(void *)std::string buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)std::string buf = (char *)&v40 + 4;
        int v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)std::string buf = (char *)&v40 + 4;
        uint64_t v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)std::string buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187FF78);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187FF78);
    }
    int v37 = (void *)(a1 + 8);
    *(_DWORD *)int v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    BOOL v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::Notifica tionData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLVe hicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationDat a, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_100D298A4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v5;
    }
    else {
      BOOL v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187FF78);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187FF78);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      unint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::Notifi cationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLVehicleConnectionNotifier_Type::N otification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100D29B24(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10187FF78);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                int v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10187FF78);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                uint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Ty pe::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVehi cleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::Notif icationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100D29EAC(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(const void **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  memcpy(__dst, v11, 0x318uLL);
  return 1LL;
}

uint64_t sub_100D29F1C(uint64_t a1, int *a2, const void *a3)
{
  int v6 = operator new(0x330uLL);
  _DWORD v6[2] = 0LL;
  *int v6 = off_1018800D8;
  v6[1] = 0LL;
  memcpy(v6 + 3, a3, 0x318uLL);
  *(void *)&__int128 v13 = v6 + 3;
  *((void *)&v13 + 1) = v6;
  int v12 = *a2;
  uint64_t v14 = &v12;
  uint64_t v7 = sub_10023347C((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_1012CF090, &v14);
  sub_10005F550((uint64_t)(v7 + 8), &v13);
  int v8 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    BOOL v9 = (unint64_t *)(*((void *)&v13 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return 1LL;
}

void sub_100D2A004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100D2A018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v9,  a3,  a4,  0LL);
}

void sub_100D2A0B4(uint64_t a1, unsigned int *a2, const void *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    unint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187FF78);
    }
    int v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      int v68 = v12;
      __int16 v69 = 2050;
      std::string v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    uint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)__int16 v71 = &v71[8];
      memset(&v71[8], 0, 24);
      int v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = operator new(0x330uLL);
      void v27[2] = 0LL;
      *__int16 v27 = off_1018800D8;
      v27[1] = 0LL;
      memcpy(v27 + 3, a3, 0x318uLL);
      *(void *)std::string buf = v27 + 3;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        __int16 v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_100D2BF44(a3);
    if (a5 == -1)
    {
      sub_100D2BFCC((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          int v37 = (uint64_t *)v33;
        }
        else {
          int v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          int v43 = (unint64_t *)v38;
        }
        else {
          int v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        __int16 v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10187FF78);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            int v46 = v71;
          }
          else {
            int v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_10187FF78);
          }
          __int16 v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            __int16 v49 = __p;
          }
          else {
            __int16 v49 = (void **)__p[0];
          }
          *(_DWORD *)__int16 v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          int v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::No tificationData>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNo tifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      __int16 v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      std::string::size_type v52 = v40 + 3;
      __int16 v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      uint64_t v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          __int16 v59 = v53;
        }
        else {
          __int16 v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          uint64_t v56 = v53;
        }
        __int16 v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_100D2C3A0((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_100D2A6F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100D2A744(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187FF78);
    }
    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      int v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187FF78);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::Notifi cationData>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187FF78);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187FF78);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::Notifi cationData>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    unint64_t v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      int v11 = (void *)(a1 + 8);
      do
      {
        int v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_10187FF78);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10187FF78);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type ::NotificationData>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, Not ificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, Registr ationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                int v12 = v18;
              }

              while (!v19);
            }

            int v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            unint64_t v10 = v26;
          }

          while (!v19);
        }

        unint64_t v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100D2ACF0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D2D26C(a1);
  operator delete(v1);
}

id sub_100D2AD04(uint64_t a1, int a2, void *a3)
{
  id result = sub_100D2C4CC(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100D2AD50(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100D2AD7C(id a1)
{
  qword_1019344F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_100D2ADA8(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D2ADD4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D2ADE8(a1);
  operator delete(v1);
}

uint64_t sub_100D2ADE8(uint64_t a1)
{
  *(void *)a1 = off_10187FFA8;
  sub_100D2AE38(a1 + 56, *(void **)(a1 + 64));
  sub_1000229D4(a1 + 32, *(char **)(a1 + 40));
  sub_100008390(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_100D2AE38(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100D2AE38(a1, *a2);
    sub_100D2AE38(a1, a2[1]);
    sub_1009EB4CC((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }

uint64_t **sub_100D2AE84(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    _BYTE *result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    uint64_t v14 = result;
    int v15 = v8;
    int v16 = v8;
    if (v8)
    {
      int v15 = sub_100115560((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_100D2AFE4(v5, (uint64_t)v8);
          int v8 = v15;
          int v16 = v15;
          if (v15) {
            int v15 = sub_100115560((uint64_t)v15);
          }
          unint64_t v10 = (unsigned int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = *(unsigned int **)v10;
            }

            while (v10);
          }

          else
          {
            do
            {
              a2 = (unsigned int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v11);
          }

          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }

        while (a2 != a3);
      }
    }

    id result = (uint64_t **)sub_1001155B4((uint64_t)&v14);
  }

  if (a2 != a3)
  {
    do
    {
      id result = (uint64_t **)sub_100D2B050(v5, a2 + 7);
      int v12 = (unsigned int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          __int128 v13 = v12;
          int v12 = *(unsigned int **)v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          __int128 v13 = (unsigned int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }

        while (!v11);
      }

      a2 = v13;
    }

    while (v13 != a3);
  }

  return result;
}

void sub_100D2AFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100D2AFE4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }

      uint64_t v4 = (uint64_t *)v4[1];
    }

    while (v4);
    uint64_t v5 = v3 + 1;
  }

  else
  {
    uint64_t v5 = a1 + 1;
  }

uint64_t *sub_100D2B050(uint64_t **a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x20uLL);
  unsigned int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  int v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        int v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }

      uint64_t v7 = (uint64_t *)v7[1];
    }

    while (v7);
    int v8 = v6 + 1;
  }

  else
  {
    int v8 = a1 + 1;
  }

uint64_t **sub_100D2B0DC(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    _BYTE *result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    uint64_t v14 = result;
    int v15 = v8;
    int v16 = v8;
    if (v8)
    {
      int v15 = sub_100115560((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            sub_100D2B2C4((uint64_t **)v8 + 5, (__int128 *)v9[5], (__int128 *)v9 + 3);
            int v8 = v16;
          }

          sub_100D2B258(v5, (uint64_t)v8);
          int v8 = v15;
          int v16 = v15;
          if (v15) {
            int v15 = sub_100115560((uint64_t)v15);
          }
          unint64_t v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (uint64_t *)*v10;
            }

            while (v10);
          }

          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v11);
          }

          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }

        while (a2 != a3);
      }
    }

    id result = (uint64_t **)sub_100D2B620((uint64_t)&v14);
  }

  if (a2 != a3)
  {
    do
    {
      id result = (uint64_t **)sub_100D2B674((uint64_t)v5, (uint64_t)(a2 + 4));
      int v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          __int128 v13 = v12;
          int v12 = (uint64_t *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          __int128 v13 = (uint64_t *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }

        while (!v11);
      }

      a2 = v13;
    }

    while (v13 != a3);
  }

  return result;
}

void sub_100D2B244(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100D2B258(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        unsigned int v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }

      uint64_t v4 = (uint64_t *)v4[1];
    }

    while (v4);
    unsigned int v5 = v3 + 1;
  }

  else
  {
    unsigned int v5 = a1 + 1;
  }

uint64_t **sub_100D2B2C4(uint64_t **result, __int128 *a2, __int128 *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    _BYTE *result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    int v15 = result;
    int v16 = v8;
    int v17 = (const void **)v8;
    if (v8)
    {
      int v16 = sub_100115560((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          unint64_t v10 = (uint64_t **)sub_1000C3B68((uint64_t)v5, &v18, v17 + 4);
          sub_1000085FC(v5, v18, v10, (uint64_t *)v17);
          int v17 = (const void **)v16;
          if (v16) {
            int v16 = sub_100115560((uint64_t)v16);
          }
          BOOL v11 = (__int128 *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              BOOL v11 = *(__int128 **)v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              a2 = (__int128 *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v12);
          }

          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }

        while (!v12);
      }
    }

    id result = (uint64_t **)sub_100D2B450((uint64_t)&v15);
  }

  if (a2 != a3)
  {
    do
    {
      id result = (uint64_t **)sub_100D2B4A4(v5, a2 + 2);
      __int128 v13 = (__int128 *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          __int128 v13 = *(__int128 **)v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          uint64_t v14 = (__int128 *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }

        while (!v12);
      }

      a2 = v14;
    }

    while (v14 != a3);
  }

  return result;
}

void sub_100D2B43C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100D2B450(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_1009EB4CC(*(void *)a1, v2);
  }

  return a1;
}

uint64_t *sub_100D2B4A4(uint64_t **a1, __int128 *a2)
{
  uint64_t v3 = (uint64_t **)sub_1000C3B68((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_1000085FC(a1, v6, v3, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0LL;
  sub_1009EB84C((uint64_t)v7, 0LL);
  return v4;
}

void sub_100D2B50C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char *sub_100D2B524@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  id result = sub_100D2B58C(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D2B574(_Unwind_Exception *a1)
{
}

char *sub_100D2B58C(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }

  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1010DD48C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }

  return __dst;
}

void sub_100D2B604(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100D2B620(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_100D2AE38(*(void *)a1, v2);
  }

  return a1;
}

uint64_t *sub_100D2B674(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 8);
  __int128 v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        __int128 v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }

      __int128 v4 = (uint64_t *)v4[1];
    }

    while (v4);
    uint64_t v5 = v3 + 1;
  }

  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }

uint64_t *sub_100D2B6F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  id result = sub_100D2BB44((uint64_t *)v6 + 5, (const void ***)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D2B760(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_100D2B77C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100D2B77C(uint64_t a1, void **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_1009EB4CC((uint64_t)(a2 + 5), a2[6]);
  }

  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t sub_100D2B7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_10199DD80 != -1) {
    dispatch_once(&qword_10199DD80, &stru_10187FFC8);
  }
  off_101990698 = (uint64_t (*)())dlsym((void *)qword_10199DD88, "OSAWriteLogForSubmission");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))off_101990698)(a1, a2, a3, a4, a5);
}

void sub_100D2B85C(id a1)
{
  qword_10199DD88 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport",  2);
}

uint64_t **sub_100D2B884(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  __int128 v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        __int128 v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      __int128 v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 7) = 0LL;
    *((void *)v11 + 6) = 0LL;
    *((void *)v11 + 5) = v11 + 12;
    sub_1000085FC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t *sub_100D2B950(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  __int128 v6 = (uint64_t **)sub_1000227E8((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    sub_100D2B9F8((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_1009EB84C((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_100D2B9F8@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  id result = v6 + 4;
  unsigned int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    id result = sub_1010DD48C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)id result = v9;
  }

  v6[7] = 0LL;
  v6[8] = 0LL;
  v6[9] = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D2BA74(_Unwind_Exception *a1)
{
}

uint64_t **sub_100D2BA8C(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  __int128 v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        __int128 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        __int128 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000085FC(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }

  return v8;
}

uint64_t *sub_100D2BB44(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100D2BB98(a1, *a2, a2 + 1);
  return a1;
}

void sub_100D2BB80(_Unwind_Exception *a1)
{
}

uint64_t *sub_100D2BB98(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    __int128 v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    __int128 v6 = result + 1;
    do
    {
      id result = sub_100D2BC1C(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      unsigned int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = (const void ***)v7;
          unsigned int v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unsigned int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          __int128 v4 = (const void **)v8;
        }

        while (!v9);
      }

      __int128 v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_100D2BC1C(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  __int128 v6 = sub_1003F9A10(a1, a2, &v12, &v11, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    sub_100D2B524((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, (uint64_t)v12, v8, v10[0]);
    unsigned int v7 = v10[0];
    v10[0] = 0LL;
    sub_1009EB84C((uint64_t)v10, 0LL);
  }

  return v7;
}

uint64_t sub_100D2BCB0(void *a1)
{
  int v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  __int128 v4 = (void **)a1[2];
  if (v4 == v3)
  {
    __int128 v4 = (void **)a1[1];
  }

  else
  {
    unint64_t v5 = a1[4];
    __int128 v6 = &v3[v5 / 0x49];
    uint64_t v7 = (uint64_t)*v6 + 56 * (v5 % 0x49);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if (v7 != v8)
    {
      do
      {
        sub_1000AA690((uint64_t)v2, v7);
        v7 += 56LL;
        if (v7 - (void)*v6 == 4088)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }

      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      __int128 v4 = (void **)a1[2];
    }
  }

  void *v2 = 0LL;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      __int128 v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8LL);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }

    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 36LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 73LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    __int128 v13 = *v3++;
    operator delete(v13);
  }

  return sub_1000EA11C((uint64_t)a1);
}

uint64_t *sub_100D2BDEC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  __int128 v6 = (uint64_t **)sub_1000227E8((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_100D2BE94((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_1008F3E60((uint64_t)v10, 0LL);
  }

  return v7;
}

double sub_100D2BE94@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = (char *)operator new(0xB8uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_1010DD48C(v7, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v7 = v9;
  }

  double result = 0.0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D2BF2C(_Unwind_Exception *a1)
{
}

CLCppContainer *sub_100D2BF44(const void *a1)
{
  int v2 = operator new(0x318uLL);
  memcpy(v2, a1, 0x318uLL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_100D2C4BC;
  v4[3] = &unk_10181D3D0;
  v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  792LL);
}

void sub_100D2BFCC(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int128 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int128 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        int v51 = v9;
        id v13 = sub_100D2C4CC(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v50 = v19;
              sub_100D2C3A0(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int16 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              int v51 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              int v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10187FF78);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10187FF78);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                __int16 v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::Noti ficationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLVeh icleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::Noti ficationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_100D2C3A0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100D2C4CC(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v14 = (int *)(*(void *)a2 + 32LL);
    uint64_t v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    double result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_100D2C47C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018800D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D2C490(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018800D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100D2C4BC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_100D2C4CC(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100D2C544(a1);
  }
  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_100D2C8CC(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100D2C544(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100D2CC78((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880118);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x800000010135C8E1LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880118);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880118);
    }
    __int128 v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x800000010135C8E1LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880118);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleConnectionNotifier_Type::NotificationDa ta, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100D2C8CC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880118);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135C8E1LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880118);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880118);
    }
    __int128 v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135C8E1LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880118);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleConnectionNotifier_Type::NotificationDa ta, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100D2CC78(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D4520))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)792) {
      sub_10126BF7C();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_100D2CCEC(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

unsigned __int8 **sub_100D2CD18( unsigned __int8 **a1, unsigned __int8 *a2, unsigned __int8 **a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      while (!sub_1004C22B0(v7, a5))
      {
        v7 += 56;
        if (v7 == a4)
        {
          uint64_t v7 = a4;
          break;
        }
      }
    }

    if (!v8) {
      return 0LL;
    }
    uint64_t v9 = v8;
    if (*v8 + 4088 == v7) {
      return v8 + 1;
    }
  }

  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = (uint64_t)(*a1 + 4088);
    while (!sub_1004C22B0(v7, a5))
    {
      v7 += 56;
    }

    if (v7 == (unsigned __int8 *)v10)
    {
LABEL_21:
      unint64_t v14 = (uint64_t *)(v8 + 1);
      if (v8 + 1 == v9)
      {
        unint64_t v15 = *v9;
        if (*v9 == a4)
        {
          int v16 = *v9;
        }

        else
        {
          while (!sub_1004C22B0(v15, a5))
          {
            v15 += 56;
            if (v15 == a4)
            {
              unint64_t v15 = a4;
              break;
            }
          }

          int v16 = v15;
          unint64_t v15 = *v9;
        }

        if (v15 + 4088 == v16) {
          return v8 + 2;
        }
      }

      else
      {
        uint64_t v11 = 0LL;
        uint64_t v12 = v8++;
        uint64_t v13 = *v14;
        while (!sub_1004C22B0((unsigned __int8 *)(v13 + v11), a5))
        {
          v11 += 56LL;
          if (v11 == 4088) {
            goto LABEL_21;
          }
        }

        uint64_t v9 = v8;
      }
    }

    else
    {
      uint64_t v9 = v8;
      if (v7 == *v8 + 4088) {
        return v8 + 1;
      }
    }
  }

  return v9;
}

void sub_100D2CEC0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    __int128 v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100D2D188( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_BYTE *sub_100D2D1D4(int a1, void *__dst, __int128 *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)std::string __dst = v5;
  }

  double result = __dst + 3;
  if (*((char *)a3 + 47) < 0)
  {
    double result = sub_1010DD48C(result, *((void **)a3 + 3), *((void *)a3 + 4));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a3 + 24);
    __dst[5] = *((void *)a3 + 5);
    *(_OWORD *)double result = v7;
  }

  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
  return result;
}

void sub_100D2D250(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100D2D26C(uint64_t a1)
{
  *(void *)a1 = off_101880148;
  unint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_100D2D2CC(const void *a1)
{
  unint64_t v2 = operator new(0x318uLL);
  memcpy(v2, a1, 0x318uLL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_100D2D354;
  v4[3] = &unk_10181D3D0;
  v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  792LL);
}

void sub_100D2D354(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_100D2D364()
{
  qword_10199DD78 = 0LL;
  qword_10199DD70 = 0LL;
  qword_10199DD68 = (uint64_t)&qword_10199DD70;
  return __cxa_atexit((void (*)(void *))sub_100D27504, &qword_10199DD68, (void *)&_mh_execute_header);
}

void *sub_100D2D390(void *result)
{
  _BYTE *result = &off_101880170;
  return result;
}

unsigned __int8 *sub_100D2D3A8()
{
  unsigned __int8 v1 = 1;
  return sub_1012049AC(v2, "ShouldWriteTimeInDaylightToHealthKit", &v1, 0);
}

double sub_100D2D3E0(double a1, double a2)
{
  if (a1 < 0.0) {
    a1 = a1 + 360.0;
  }
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  double result = a2 - a1;
  if (result > 180.0) {
    return result + -360.0;
  }
  if (result < -180.0) {
    return result + 360.0;
  }
  return result;
}

double sub_100D2D43C(double a1, double a2, double a3, double a4)
{
  double v4 = a3;
  double result = 0.0;
  if (a3 > 90.0 || a1 < -90.0 || a1 > 90.0 || a3 < -90.0) {
    return result;
  }
  double v7 = a4 + 360.0;
  if (a4 >= 0.0) {
    double v7 = a4;
  }
  double v8 = a2 + 360.0;
  if (a2 >= 0.0) {
    double v8 = a2;
  }
  double v9 = v8 - v7;
  if (v9 <= 180.0)
  {
    if (v9 < -180.0) {
      double v9 = v9 + 360.0;
    }
  }

  else
  {
    double v9 = v9 + -360.0;
  }

  if (fabs(a1 + v4) >= 0.0001)
  {
    double v42 = a2;
    double v43 = a4;
LABEL_18:
    double v11 = v9;
    goto LABEL_19;
  }

  double v10 = fabs(a1);
  if (v10 < 0.0001 && 180.0 - fabs(v9) < 0.0001) {
    return 20037508.3;
  }
  BOOL v41 = fabs(v10 + -90.0) < 0.0001;
  if (v41) {
    double v11 = 0.0;
  }
  else {
    double v11 = v9;
  }
  double v42 = a2;
  double v43 = a4;
  if (!v41 && 180.0 - fabs(v9) >= 0.0001) {
    goto LABEL_18;
  }
  if (a1 <= v4) {
    double v4 = v4 + -0.0001;
  }
  else {
    a1 = a1 + -0.0001;
  }
LABEL_19:
  double v12 = v11 * 0.0174532925;
  double v44 = a1;
  double v13 = tan(a1 * 0.0174532925);
  double v14 = tan(v4 * 0.0174532925);
  double v15 = v13 * 0.996647189;
  double v16 = v14 * 0.996647189;
  double v17 = atan(v15);
  double v18 = atan(v16);
  __double2 v19 = __sincos_stret(v17);
  __double2 v20 = __sincos_stret(v18);
  unsigned int v21 = 0;
  double v22 = v19.__cosval * v20.__cosval;
  double v23 = v12;
  while (1)
  {
    __double2 v24 = __sincos_stret(v23);
    double v25 = sqrt( (-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)
          * (-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)
          + v20.__cosval * v24.__sinval * (v20.__cosval * v24.__sinval));
    if (v25 < 2.22044605e-15) {
      break;
    }
    double v26 = v22 * v24.__cosval + v19.__sinval * v20.__sinval;
    double v27 = fabs(v26);
    if (fabs(v25) > 1.0 || v27 > 1.0) {
      break;
    }
    double v29 = atan2(v25, v26);
    double v30 = v22 * v24.__sinval / v25;
    if (v30 > 1.0) {
      break;
    }
    double v31 = 1.0 - v30 * v30;
    if (fabs(v31) >= 2.22044605e-15)
    {
      double v32 = v26 - (v19.__sinval + v19.__sinval) * v20.__sinval / v31;
      double v33 = v31 * 0.000209550667 * ((v31 * -3.0 + 4.0) * 0.00335281066 + 4.0);
    }

    else
    {
      double v32 = -1.0;
      double v33 = 0.0;
    }

    double v34 = v30 * ((1.0 - v33) * 0.00335281066);
    double v35 = v32 * v32 * 2.0 + -1.0;
    double v36 = v12 + v34 * (v29 + v25 * v33 * (v32 + v26 * v33 * v35));
    if (vabdd_f64(v36, v23) > 0.000000001)
    {
      double v23 = v36;
      if (v21++ < 0x31) {
        continue;
      }
    }

    double v38 = v31 * 2.72331606e11 / 4.04083e13;
    double v39 = v38 * 0.0000610351562 * (v38 * (v38 * (v38 * -175.0 + 320.0) + -768.0) + 4096.0) + 1.0;
    double v40 = v38 * 0.0009765625 * (v38 * (v38 * (v38 * -47.0 + 74.0) + -128.0) + 256.0);
    return v39
         * 6356752.31
         * (v29 - v25 * v40 * (v32 + v40 * 0.25 * ((v32 * v32 * 4.0 + -3.0) * (v32 * (v40 / 6.0) * 3.0) + v26 * v35)));
  }

  return sub_100D2D880(v44, v42, v4, v43);
}

double sub_100D2D880(double a1, double a2, double a3, double a4)
{
  double v5 = 360.0;
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  if (a4 < 0.0) {
    a4 = a4 + 360.0;
  }
  double v6 = a4 - a2;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0) {
      goto LABEL_9;
    }
  }

  else
  {
    double v5 = -360.0;
  }

  double v6 = v6 + v5;
LABEL_9:
  double v7 = a1 * 0.0174532925;
  double v8 = v6 * 0.0174532925;
  double v9 = sin((a3 - a1) * 0.0174532925 * 0.5);
  double v10 = v9 * v9;
  __double2 v11 = __sincos_stret(v7);
  double v12 = v11.__cosval * cos(a3 * 0.0174532925);
  double v13 = sin(v8 * 0.5);
  double v14 = v10 + v12 * (v13 * v13);
  double v15 = 1.0 - v14;
  if (v14 < 0.0) {
    double v14 = 0.0;
  }
  if (v15 < 0.0) {
    double v15 = 0.0;
  }
  double v16 = atan2(sqrt(v14), sqrt(v15));
  return (fabs(v11.__sinval) * -21000.0 + 6378160.0) * (v16 + v16);
}

double sub_100D2D9A4(uint64_t a1)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  double result = 6335439.33;
  *(_OWORD *)a1 = xmmword_10135C9B0;
  *(void *)(a1 + 32) = 0x3FF0000000000000LL;
  return result;
}

BOOL sub_100D2D9C0(double a1, double a2, double a3, double a4)
{
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  if (a4 < 0.0) {
    a4 = a4 + 360.0;
  }
  double v4 = a4 - a2;
  if (v4 <= 180.0)
  {
    if (v4 < -180.0) {
      double v4 = v4 + 360.0;
    }
  }

  else
  {
    double v4 = v4 + -360.0;
  }

  unsigned int v5 = (int)v4;
  int v6 = (int)a3 - (int)a1;
  if (v6 < 0) {
    int v6 = (int)a1 - (int)a3;
  }
  return v6 > 2 || v5 > 2;
}

BOOL sub_100D2DA44( double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10 = vabdd_f64(a5, a8);
  if (v10 <= 2.0)
  {
    double v21 = a1[3];
    if (v21 == 0.0 || vabdd_f64(a5, v21) > 0.005)
    {
      double v22 = (a5 + a8) * 0.5;
      a1[2] = v22 * 0.0174532925;
      a1[3] = v22;
      __double2 v23 = __sincos_stret(v22 * 0.0174532925);
      double v24 = v23.__sinval * -0.00669437999 * v23.__sinval + 1.0;
      double v25 = sqrt(v24);
      *a1 = 6335439.33 / (v24 * v25);
      a1[1] = 6378137.0 / v25;
      a1[4] = v23.__cosval;
    }

    double v26 = 360.0;
    double v27 = a6 + 360.0;
    if (a6 >= 0.0) {
      double v27 = a6;
    }
    double v28 = a9 + 360.0;
    if (a9 >= 0.0) {
      double v28 = a9;
    }
    double v29 = v28 - v27;
    if (v29 <= 180.0)
    {
      if (v29 >= -180.0)
      {
LABEL_13:
        *a2 = (a8 - a5) * 0.0174532925 * (*a1 + a7);
        *a3 = v29 * 0.0174532925 * ((a1[1] + a7) * a1[4]);
        *a4 = a10 - a7;
        return v10 <= 2.0;
      }
    }

    else
    {
      double v26 = -360.0;
    }

    double v29 = v29 + v26;
    goto LABEL_13;
  }

  return v10 <= 2.0;
}

double sub_100D2DBDC(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  double v14 = 0.0;
  double v15 = 0.0;
  if (sub_100D2D9C0(a2, a3, a4, a5) || !sub_100D2DA44(a1, &v15, &v14, &v13, a2, a3, a6, a4, a5, a6)) {
    return sub_100D2D43C(a2, a3, a4, a5);
  }
  else {
    return sqrt(v14 * v14 + v15 * v15);
  }
}

void sub_100D2DCA4(double *a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a2 + 36);
  double v7 = *(double *)(a3 + 36);
  if (v6 <= 0.0 || v7 <= 0.0)
  {
    if (v6 <= 0.0)
    {
      double v9 = 0.0;
      if (v7 <= 0.0) {
        goto LABEL_29;
      }
      double v8 = *(double *)(a3 + 28);
    }

    else
    {
      double v8 = *(double *)(a2 + 28);
    }
  }

  else
  {
    double v8 = (*(double *)(a2 + 28) + *(double *)(a3 + 28)) * 0.5;
  }

  double v9 = -450.0;
  if (v8 >= -450.0)
  {
    double v9 = 1000000.0;
    if (v8 <= 1000000.0)
    {
      double v9 = v8;
      goto LABEL_29;
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018801B8);
    }
    double v12 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134218240;
      unint64_t v19 = 0x412E848000000000LL;
      __int16 v20 = 2048;
      double v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018801B8);
      }
      __double2 v11 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max");
      goto LABEL_26;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018801B8);
    }
    double v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134218240;
      unint64_t v19 = 0xC07C200000000000LL;
      __int16 v20 = 2048;
      double v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018801B8);
      }
      __double2 v11 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min");
LABEL_26:
      double v13 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLDistanceCalc::calculateDistance(const CLDaemonLocation &, const CLDaemonLocation &)",  "%s\n",  v11);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

double sub_100D2E080(double *a1, uint64_t a2, double a3, double a4)
{
  else {
    double v4 = *(double *)(a2 + 28);
  }
  return sub_100D2DBDC(a1, *(double *)(a2 + 4), *(double *)(a2 + 12), a3, a4, v4);
}

BOOL sub_100D2E0A8( double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8)
{
  BOOL result = 0LL;
  if (a7 >= 0.0 && a8 <= 50000.0)
  {
    double v15 = fabs(a8);
    __double2 v16 = __sincos_stret((dbl_10135C9C0[a8 < 0.0] + a7) * 0.0174532925);
    return sub_100D2E16C(a1, a2, a3, &v17, a4, a5, a6, v15 * v16.__cosval, v15 * v16.__sinval, 0.0);
  }

  return result;
}

BOOL sub_100D2E16C( double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v11 = sqrt(a9 * a9 + a8 * a8);
  if (v11 <= 70000.0)
  {
    if (vabdd_f64(a5, a1[3]) <= 0.005)
    {
      double v25 = *a1;
      double cosval = a1[4];
    }

    else
    {
      a1[2] = a5 * 0.0174532925;
      a1[3] = a5;
      __double2 v22 = __sincos_stret(a5 * 0.0174532925);
      double cosval = v22.__cosval;
      double v23 = v22.__sinval * -0.00669437999 * v22.__sinval + 1.0;
      double v24 = sqrt(v23);
      double v25 = 6335439.33 / (v23 * v24);
      *a1 = v25;
      a1[1] = 6378137.0 / v24;
      a1[4] = v22.__cosval;
    }

    double v26 = v25 + a7;
    double v27 = 0.0;
    double v28 = a8 / v26;
    if (fabs(cosval) >= 0.0001) {
      double v27 = a9 / (cosval * (a1[1] + a7));
    }
    *a2 = a5 + v28 * 57.2957795;
    *a3 = a6 + v27 * 57.2957795;
    *a4 = a7 + a10;
    double v29 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v29;
      *a3 = *a3 + 180.0;
      double v29 = *a2;
    }

    if (v29 >= -90.0)
    {
      double v30 = *a3;
    }

    else
    {
      *a2 = -180.0 - v29;
      double v30 = *a3 + 180.0;
      *a3 = v30;
    }

    if (v30 > -180.0)
    {
      if (v30 <= 180.0) {
        return v11 <= 70000.0;
      }
    }

    else
    {
      double v30 = v30 + 360.0;
    }

    if (v30 > 180.0) {
      double v30 = v30 + -360.0;
    }
    *a3 = v30;
  }

  return v11 <= 70000.0;
}

double sub_100D2E36C( double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v17 = 0.0;
  double v18 = 0.0;
  sub_100D2DA44(a1, &v18, &v17, &v16, a4, a5, a6, a8, a9, a6);
  double v12 = sqrt(v17 * v17 + v18 * v18);
  double v13 = atan2(v17, v18);
  __double2 v14 = __sincos_stret(v13 + a7 * -0.0174532925);
  *a3 = v12 * v14.__cosval;
  double result = v12 * v14.__sinval;
  *a2 = v12 * v14.__sinval;
  return result;
}

void sub_100D2E3F8( double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v18 = a1[3];
  if (v18 == 0.0 || vabdd_f64(a4, v18) > 0.005)
  {
    a1[2] = a4 * 0.0174532925;
    a1[3] = a4;
    __double2 v19 = __sincos_stret(a4 * 0.0174532925);
    double v20 = v19.__sinval * -0.00669437999 * v19.__sinval + 1.0;
    double v21 = sqrt(v20);
    *a1 = 6335439.33 / (v20 * v21);
    a1[1] = 6378137.0 / v21;
    a1[4] = v19.__cosval;
  }

  *a2 = a4;
  *a3 = a5;
  if (a4 < 90.0 && a4 > -90.0 && a7 > 0.0 && a8 > 0.0 && a9 >= 0.0)
  {
    double v22 = a7 * a8;
    __double2 v23 = __sincos_stret(a9 * 0.0174532925);
    double v24 = a5 * 0.0174532925 + v22 * v23.__sinval / ((a1[1] + a6) * a1[4]);
    *a2 = (a4 * 0.0174532925 + v22 * v23.__cosval / (*a1 + a6)) * 57.2957795;
    double v25 = v24 * 57.2957795;
    *a3 = v25;
    double v26 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v26;
      double v25 = *a3 + 180.0;
      *a3 = v25;
      double v26 = *a2;
    }

    if (v26 < -90.0)
    {
      *a2 = -180.0 - v26;
      double v25 = *a3 + 180.0;
      *a3 = v25;
    }

    if (v25 > -180.0)
    {
      if (v25 <= 180.0) {
        return;
      }
    }

    else
    {
      double v25 = v25 + 360.0;
    }

    if (v25 > 180.0) {
      double v25 = v25 + -360.0;
    }
    *a3 = v25;
  }

uint64_t sub_100D2E600(double *a1, double *a2, double *a3, double a4, double a5)
{
  double v10 = -450.0;
  if (a5 >= -450.0)
  {
    double v10 = 1000000.0;
    if (a5 <= 1000000.0)
    {
      double v10 = a5;
      goto LABEL_22;
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018801B8);
    }
    double v13 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134218240;
      double v29 = 1000000.0;
      __int16 v30 = 2048;
      double v31 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018801B8);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max");
      goto LABEL_19;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018801B8);
    }
    double v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134218240;
      double v29 = -450.0;
      __int16 v30 = 2048;
      double v31 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018801B8);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min");
LABEL_19:
      __double2 v14 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDistanceCalc::calc_dNdE(double, double, double &, double &)",  "%s\n",  v12);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

double sub_100D2EB48( double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v14 = 360.0;
  if (a5 < 0.0) {
    a5 = a5 + 360.0;
  }
  if (a8 < 0.0) {
    a8 = a8 + 360.0;
  }
  double v15 = a8 - a5;
  if (v15 > 180.0)
  {
    double v14 = -360.0;
LABEL_8:
    double v15 = v15 + v14;
    goto LABEL_9;
  }

  if (v15 < -180.0) {
    goto LABEL_8;
  }
LABEL_9:
  double v16 = (a7 - a4) * 0.0174532925;
  double v17 = (a6 + a9) * 0.5;
  double v18 = v15 * 0.0174532925;
  __double2 v19 = __sincos_stret((a4 + a7) * 0.0174532925 * 0.5);
  double v20 = sqrt(v19.__sinval * -0.00669437999 * v19.__sinval + 1.0);
  *a1 = v16 * (v17 + 6335439.33 / (v20 * (v20 * v20)));
  *a2 = v19.__cosval * (v17 + 6378137.0 / v20) * v18;
  double result = a9 - a6;
  *a3 = a9 - a6;
  return result;
}

double sub_100D2EC78(double a1, double a2, double a3, double a4)
{
  if (sub_100D2D9C0(a1, a2, a3, a4)) {
    return sub_100D2D43C(a1, a2, a3, a4);
  }
  sub_100D2EB48(&v11, &v10, &v9, a1, a2, 0.0, a3, a4, 0.0);
  return sqrt(v10 * v10 + v11 * v11);
}

double sub_100D2ED14(double *a1, double a2, double a3, double a4, double a5)
{
  if (vabdd_f64(a2, a4) >= 0.00000001 || vabdd_f64(a3, a5) >= 0.00000001)
  {
    *(void *)std::string buf = 0LL;
    v13[0] = 0.0;
    BOOL v10 = sub_100D2DA44(a1, (double *)buf, v13, &v12, a2, a3, 0.0, a4, a5, 0.0);
    double result = -1.0;
    if (v10)
    {
      double v11 = atan2(v13[0], *(double *)buf);
      if (v11 < 0.0) {
        double v11 = v11 + 6.28318531;
      }
      return v11 * 57.2957795;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018801B8);
    }
    unsigned int v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning, same coordinates input", buf, 2u);
    }

    BOOL v6 = sub_1002921D0(115, 2);
    double result = -1.0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018801B8);
      }
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning, same coordinates input",  v13,  2);
      double v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLDistanceCalc::calculateAzimuth(double, double, double, double)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
      return -1.0;
    }
  }

  return result;
}

void sub_100D2EF1C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100D2EFEC(id a1)
{
  qword_10199DDA8 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLMotionSyncStoreSilo");
}

uint64_t sub_100D2F0A0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100D2FEE8;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199DDB8 != -1) {
    dispatch_once(&qword_10199DDB8, block);
  }
  return qword_1019A2078;
}

uint64_t sub_100D2F3A8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100D2F570(a1, "CLMotionSyncStore", a2);
  *(void *)uint64_t v3 = off_101880208;
  *(_BYTE *)(v3 + 109) = 0;
  *(void *)(v3 + 112) = 0LL;
  double v4 = (id *)(v3 + 112);
  *(void *)(v3 + 120) = 0LL;
  sub_100ACD980((uint64_t)sub_100D2F60C, a1, *(void **)(v3 + 32), &v15);
  uint64_t v5 = v15;
  uint64_t v15 = 0LL;
  uint64_t v6 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    uint64_t v7 = v15;
    uint64_t v15 = 0LL;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  [*(id *)(*(void *)(a1 + 120) + 16) register:*(void *)(*(void *)(a1 + 120) + 8) forNotification:0 registrationInfo:0];
  BOOL v17 = 0;
  uint64_t v8 = sub_1006E27E8();
  sub_100413284(v8, &v15);
  sub_1002A6F64(v15, "DebugMotionSync", &v17);
  double v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v17)
  {
    id v12 = [*(id *)(a1 + 40) newTimer];
    *(void *)(a1 + 112) = v12;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100D2F7E4;
    v14[3] = &unk_10181D3D0;
    v14[4] = a1;
    [v12 setHandler:v14];
    [*v4 setNextFireDelay:2.56 interval:2.56];
  }

  return a1;
}

void sub_100D2F528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v8 = *(void *)(v6 + 120);
  *(void *)(v6 + 120) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  sub_100D2FE0C(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_100D2F570(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1018803B8;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100D2F5F0(_Unwind_Exception *exception_object)
{
}

void sub_100D2F60C(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101880348);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionSyncStore::onDataProtectionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880348);
    }
    double v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionSyncStore::onDataProtectionNotification, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D30004((_BYTE *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D2F7C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D2F7E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(v1 + 32), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"),  "refreshMetrics");
  uint64_t v2 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v2 + 936LL))(v2);
  id v3 = objc_msgSend(objc_msgSend(*(id *)(v1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier");
  uint64_t v19 = 0LL;
  uint64_t v4 = sub_1002F8DDC();
  if (sub_1002A6E78( v4,  (const char *)[@"RawSpeedToKValueTable" UTF8String],  (CFTypeRef *)&v19,  0xFFFFFFFFLL))
  {
    id v5 = sub_100D2FBBC(v19);
    id v6 = [v3 syncgetCopyRawSpeedToKValueBins];
    if (([v6 isEqualToArray:v5] & 1) == 0)
    {
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_101880388);
      }
      uint64_t v7 = (os_log_s *)qword_101934608;
      if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Forcing a raw speed to kValue bins update.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934600 != -1) {
          dispatch_once(&qword_101934600, &stru_101880388);
        }
        LOWORD(v18) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Forcing a raw speed to kValue bins update.",  &v18,  2);
        int v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStore::CLMotionSyncStore(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      [v3 setRawSpeedToKValueBins:v5];
    }
  }

  uint64_t v18 = 0LL;
  uint64_t v8 = sub_1002F8DDC();
  if (sub_1002A6E78( v8,  (const char *)[@"StepCadenceToStrideLengthTable" UTF8String],  (CFTypeRef *)&v18,  0xFFFFFFFFLL))
  {
    id v9 = sub_100D2FBBC(v18);
    id v10 = [v3 syncgetCopyStepCadenceToStrideLengthBins];
    if (([v10 isEqualToArray:v9] & 1) == 0)
    {
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_101880388);
      }
      char v11 = (os_log_s *)qword_101934608;
      if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Forcing a step cadence to stride length bins update.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934600 != -1) {
          dispatch_once(&qword_101934600, &stru_101880388);
        }
        v17[0] = 0;
        LODWORD(v16) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Forcing a step cadence to stride length bins update.",  v17,  v16);
        uint64_t v15 = (uint8_t *)v14;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStore::CLMotionSyncStore(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }

      [v3 setStepCadenceToStrideLengthBins:v9];
    }
  }
}

id sub_100D2FBBC(uint64_t a1)
{
  uint64_t v1 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  a1,  0LL);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CMPedometerBin);
  id v3 =  -[NSKeyedUnarchiver decodeObjectOfClasses:forKey:]( v1,  "decodeObjectOfClasses:forKey:",  +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v2,  objc_opt_class(&OBJC_CLASS___NSArray),  0LL),  NSKeyedArchiveRootObjectKey);
  -[NSKeyedUnarchiver finishDecoding](v1, "finishDecoding");

  return v3;
}

void sub_100D2FCA8(_Unwind_Exception *a1)
{
}

uint64_t sub_100D2FE0C(uint64_t a1)
{
  *(void *)a1 = off_1018803B8;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100D2FE80(uint64_t a1)
{
  *(void *)a1 = off_101880208;

  (*(void (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  uint64_t v2 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return sub_100D2FE0C(a1);
}

uint64_t sub_100D2FEE8(uint64_t a1)
{
  if (sub_1001B9A1C())
  {
    uint64_t v2 = operator new(0xD0uLL);
    uint64_t result = sub_1006742D4((uint64_t)v2, *(void **)(a1 + 32));
  }

  else
  {
    sub_1004F2598();
    uint64_t result = sub_1004F7000();
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v2 = operator new(0xE0uLL);
    uint64_t result = sub_1008E381C((uint64_t)v2, *(void **)(a1 + 32));
  }

  qword_1019A2078 = (uint64_t)v2;
  return result;
}

void sub_100D2FF50(_Unwind_Exception *a1)
{
}

uint64_t sub_100D2FF68(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

void *sub_100D2FF74@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_100D2FFEC()
{
  return 1LL;
}

uint64_t sub_100D2FFF4()
{
  return 1LL;
}

uint64_t sub_100D2FFFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 109);
}

void sub_100D30004(_BYTE *a1, uint64_t a2, int *a3, int *a4)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_101880388);
  }
  uint64_t v7 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    int v9 = *a4;
    *(_DWORD *)std::string buf = 67109376;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Received CLDataProtectionManager_Type %d, data availability %d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_101880388);
    }
    int v10 = *a3;
    int v11 = *a4;
    v14[0] = 67109376;
    v14[1] = v10;
    __int16 v15 = 1024;
    int v16 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Received CLDataProtectionManager_Type %d, data availability %d",  v14,  14);
    int v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStore::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, cons t CLDataProtectionManager_Type::NotificationData &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  if (!*a3)
  {
    if (*a4 == 1)
    {
      a1[109] = 1;
      (*(void (**)(_BYTE *))(*(void *)a1 + 264LL))(a1);
    }

    else
    {
      a1[109] = 0;
    }
  }

uint64_t sub_100D30214@<X0>(void *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_10000CF44(&v53, (uint64_t)"CalibrationVersion,", 19LL);
  if ([a1 objectForKeyedSubscript:@"CalibrationVersion"]) {
    uint64_t v5 = (uint64_t)objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", @"CalibrationVersion"), "intValue");
  }
  else {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  id v6 = (void *)std::ostream::operator<<(v4, v5);
  sub_10000CF44(v6, (uint64_t)",", 1LL);
  uint64_t v7 = sub_10000CF44(&v53, (uint64_t)"CalibrationUDID,", 16LL);
  sub_100D30800(a1, __p);
  if ((v51 & 0x80u) == 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  if ((v51 & 0x80u) == 0) {
    uint64_t v9 = v51;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  int v10 = sub_10000CF44(v7, (uint64_t)v8, v9);
  sub_10000CF44(v10, (uint64_t)",", 1LL);
  int v11 = sub_10000CF44(&v53, (uint64_t)"CalibrationTimestamp,", 21LL);
  uint64_t v12 = *v11;
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v11 + *(void *)(v12 - 24) + 16) = 2LL;
  if ([a1 objectForKeyedSubscript:@"CalibrationTimestamp"]) {
    objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", @"CalibrationTimestamp"), "doubleValue");
  }
  else {
    double v13 = 0.0;
  }
  __int16 v14 = (void *)std::ostream::operator<<(v13);
  sub_10000CF44(v14, (uint64_t)",", 1LL);
  __int16 v15 = sub_10000CF44(&v53, (uint64_t)"CMNatalimeterSetUserPal,", 24LL);
  uint64_t v16 = CMNatalimeterSetUserPal;
  if ([a1 objectForKeyedSubscript:CMNatalimeterSetUserPal]) {
    BOOL v17 = (const char *)objc_msgSend( objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v16), "stringValue"),  "UTF8String");
  }
  else {
    BOOL v17 = "na";
  }
  size_t v18 = strlen(v17);
  __int16 v19 = sub_10000CF44(v15, (uint64_t)v17, v18);
  sub_10000CF44(v19, (uint64_t)",", 1LL);
  int v20 = sub_10000CF44(&v53, (uint64_t)"CMNatalimeterSetUserVo2max,", 27LL);
  uint64_t v21 = CMNatalimeterSetUserVo2max;
  if ([a1 objectForKeyedSubscript:CMNatalimeterSetUserVo2max]) {
    double v22 = (const char *)objc_msgSend( objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v21), "stringValue"),  "UTF8String");
  }
  else {
    double v22 = "na";
  }
  size_t v23 = strlen(v22);
  double v24 = sub_10000CF44(v20, (uint64_t)v22, v23);
  sub_10000CF44(v24, (uint64_t)",", 1LL);
  double v25 = sub_10000CF44(&v53, (uint64_t)"CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold,", 52LL);
  uint64_t v26 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  if ([a1 objectForKeyedSubscript:CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold]) {
    double v27 = (const char *)objc_msgSend( objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v26), "stringValue"),  "UTF8String");
  }
  else {
    double v27 = "na";
  }
  size_t v28 = strlen(v27);
  double v29 = sub_10000CF44(v25, (uint64_t)v27, v28);
  sub_10000CF44(v29, (uint64_t)",", 1LL);
  __int16 v30 = sub_10000CF44(&v53, (uint64_t)"RawSpeedToKValueTable,", 22LL);
  id v31 = [a1 objectForKeyedSubscript:@"RawSpeedToKValueTable"];
  if (v31) {
    double v32 = "avail";
  }
  else {
    double v32 = "na";
  }
  if (v31) {
    uint64_t v33 = 5LL;
  }
  else {
    uint64_t v33 = 2LL;
  }
  double v34 = sub_10000CF44(v30, (uint64_t)v32, v33);
  sub_10000CF44(v34, (uint64_t)",", 1LL);
  double v35 = sub_10000CF44(&v53, (uint64_t)"StepCadenceToStrideLengthTable,", 31LL);
  id v36 = [a1 objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"];
  if (v36) {
    int v37 = "avail";
  }
  else {
    int v37 = "na";
  }
  if (v36) {
    uint64_t v38 = 5LL;
  }
  else {
    uint64_t v38 = 2LL;
  }
  double v39 = sub_10000CF44(v35, (uint64_t)v37, v38);
  sub_10000CF44(v39, (uint64_t)",", 1LL);
  double v40 = sub_10000CF44(&v53, (uint64_t)"CalibrationResetRequested,", 26LL);
  if ([a1 objectForKeyedSubscript:@"CalibrationResetRequested"]) {
    BOOL v41 = (const char *)objc_msgSend( objc_msgSend( objc_msgSend(a1, "objectForKeyedSubscript:", @"CalibrationResetRequested"),  "stringValue"),  "UTF8String");
  }
  else {
    BOOL v41 = "na";
  }
  size_t v42 = strlen(v41);
  double v43 = sub_10000CF44(v40, (uint64_t)v41, v42);
  sub_10000CF44(v43, (uint64_t)",", 1LL);
  double v44 = sub_10000CF44(&v53, (uint64_t)"HasSavedInitialMotionCalsToDisk,", 32LL);
  if ([a1 objectForKeyedSubscript:@"HasSavedInitialMotionCalsToDisk"]) {
    uint64_t v45 = (const char *)objc_msgSend( objc_msgSend( objc_msgSend(a1, "objectForKeyedSubscript:", @"HasSavedInitialMotionCalsToDisk"),  "stringValue"),  "UTF8String");
  }
  else {
    uint64_t v45 = "na";
  }
  size_t v46 = strlen(v45);
  uint64_t v47 = sub_10000CF44(v44, (uint64_t)v45, v46);
  sub_10000CF44(v47, (uint64_t)",", 1LL);
  sub_10000CF44(&v53, (uint64_t)")", 1LL);
  std::stringbuf::str(a2, &v54);
  *(void *)((char *)v52
  uint64_t v53 = v48;
  std::streambuf::~streambuf(&v54);
  return std::ios::~ios(&v55);
}

void sub_100D30780( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_100D307B4(void *a1)
{
  if ([a1 objectForKeyedSubscript:@"CalibrationVersion"]) {
    return (uint64_t)objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", @"CalibrationVersion"), "intValue");
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void *sub_100D30800@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if ([a1 objectForKeyedSubscript:@"CalibrationUDID"]) {
    uint64_t v4 = (char *)objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", @"CalibrationUDID"), "UTF8String");
  }
  else {
    uint64_t v4 = "unset";
  }
  return sub_1010DDBC0(a2, v4);
}

double sub_100D30858(void *a1)
{
  if (![a1 objectForKeyedSubscript:@"CalibrationTimestamp"]) {
    return 0.0;
  }
  objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", @"CalibrationTimestamp"), "doubleValue");
  return result;
}

id sub_100D308A4(void *a1, uint64_t a2)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_101880388);
  }
  uint64_t v4 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Setting the current Motion Cals version to, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_101880388);
    }
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "Setting the current Motion Cals version to, %d",  v8);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLMotionSyncStore::setCurrentVersion(NSMutableDictionary *, int)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2),  @"CalibrationVersion");
}

id sub_100D30A74(void *a1)
{
  id result = [a1 objectForKeyedSubscript:@"CalibrationResetRequested"];
  if (result) {
    return objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", @"CalibrationResetRequested"), "BOOLValue");
  }
  return result;
}

uint64_t sub_100D30ABC(int a1, int a2)
{
  BOOL v3 = a1 == 2 && a2 > 1;
  return a1 > 2 || v3;
}

BOOL sub_100D30AD8(void *a1)
{
  return ![a1 objectForKeyedSubscript:@"CalibrationUDID"]
      || [a1 objectForKeyedSubscript:@"HasSavedInitialMotionCalsToDisk"] != 0;
}

id sub_100D30B24(void *a1)
{
  if ([a1 objectForKeyedSubscript:@"HasSavedInitialMotionCalsToDisk"]) {
    [a1 removeObjectForKey:@"HasSavedInitialMotionCalsToDisk"];
  }
  if ([a1 objectForKeyedSubscript:@"CalibrationResetRequested"]) {
    [a1 removeObjectForKey:@"CalibrationResetRequested"];
  }
  id result = [a1 objectForKeyedSubscript:@"StrideCalibrationDataBins"];
  if (result)
  {
    objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[CMPedometerTable convertToCMPedometerBins:]( CMPedometerTableRawSpeedToKValue,  "convertToCMPedometerBins:",  objc_msgSend(a1, "objectForKeyedSubscript:", @"StrideCalibrationDataBins")),  @"RawSpeedToKValueTable");
    return [a1 removeObjectForKey:@"StrideCalibrationDataBins"];
  }

  return result;
}

uint64_t sub_100D30BF4(void *a1, void *a2)
{
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  v28[0] = CMNatalimeterSetUserPal;
  v28[1] = CMNatalimeterSetUserVo2max;
  void v28[2] = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  uint64_t v4 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v28, 3LL, 0LL);
  id v5 = -[NSArray countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v23,  v27,  16LL);
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v24;
LABEL_3:
    uint64_t v8 = 0LL;
    while (1)
    {
      if (*(void *)v24 != v7) {
        objc_enumerationMutation(v4);
      }
      uint64_t v9 = *(void *)(*((void *)&v23 + 1) + 8 * v8);
      unint64_t v10 = (unint64_t)[a1 objectForKeyedSubscript:v9];
      unint64_t v11 = (unint64_t)[a2 objectForKeyedSubscript:v9];
      if (!v10 && v11 != 0) {
        return 0LL;
      }
      double v13 = (void *)v11;
      if (v10 && v11 == 0) {
        return 0LL;
      }
      if (v10 | v11)
      {
        [(id)v10 floatValue];
        float v16 = v15;
        [v13 floatValue];
        if (vabds_f32(v16, v17) >= 0.000001) {
          return 0LL;
        }
      }

      if (v6 == (id)++v8)
      {
        id v6 = -[NSArray countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v23,  v27,  16LL);
        if (v6) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  unint64_t v18 = (unint64_t)[a1 objectForKeyedSubscript:@"RawSpeedToKValueTable"];
  unint64_t v19 = (unint64_t)[a2 objectForKeyedSubscript:@"RawSpeedToKValueTable"];
  if (!v18 && v19 || v18 && !v19) {
    return 0LL;
  }
  if (!(v18 | v19) || (uint64_t result = (uint64_t)[(id)v18 isEqualToArray:v19], (_DWORD)result))
  {
    unint64_t v21 = (unint64_t)[a1 objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"];
    unint64_t v22 = (unint64_t)[a2 objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"];
    if (!v21 && v22 || v21 && !v22) {
      return 0LL;
    }
    if (v21 | v22) {
      return (uint64_t)[(id)v21 isEqualToArray:v22];
    }
    else {
      return 1LL;
    }
  }

  return result;
}

void sub_100D30E3C(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D30E68(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100D30E94(id a1)
{
  qword_101934608 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionSync");
}

uint64_t sub_100D30EC0()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199DD90, (void *)&_mh_execute_header);
}

void sub_100D30FA8(id a1)
{
  qword_10199DDC0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLLocationAwarenessProviderSilo");
}

uint64_t sub_100D3105C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100D318E0;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199DDD0 != -1) {
    dispatch_once(&qword_10199DDD0, block);
  }
  return qword_10199DDD8;
}

void sub_100D311BC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLLocationAwarenessProvider");
  sub_100D31284((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  *uint64_t v8 = off_1018804B8;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100D31258( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100D31284(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101880660;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100D3159C(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 152) != a2)
  {
    *(_BYTE *)(a1 + 152) = a2;
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    BOOL v3 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 152);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 1026;
      int v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Awareness Settled state changed, isSettled:%{public}hhd}",  (uint8_t *)v5,  0x18u);
    }

    sub_100D3224C(a1);
  }

uint64_t sub_100D3169C(BOOL *a1, uint64_t a2)
{
  int v4 = sub_1002A82BC(a2, "SettledLatencyBudget", a1);
  int v5 = sub_1002A82BC(a2, "UnsettledLatencyBudget", a1 + 24);
  int v6 = sub_1002A82BC(a2, "SettledRetryRate", a1 + 8);
  int v7 = sub_1002A82BC(a2, "UnsettledRetryRate", a1 + 32);
  int v8 = sub_1002A6F64(a2, "SettledQueryALS", a1 + 16);
  return sub_1002A6F64(a2, "UnsettledQueryALS", a1 + 40) | v8 | v7 | v6 | v5 | v4;
}

BOOL sub_100D3178C(double *a1, void *a2)
{
  double v4 = *a1;
  double v5 = a1[1];
  int v6 = *((unsigned __int8 *)a1 + 16);
  double v8 = a1[3];
  double v7 = a1[4];
  int v9 = *((unsigned __int8 *)a1 + 40);
  [a2 doubleForKey:@"SettledLatencyBudget" defaultValue:*a1];
  *(void *)a1 = v10;
  [a2 doubleForKey:@"UnsettledLatencyBudget" defaultValue:a1[3]];
  *((void *)a1 + 3) = v11;
  [a2 doubleForKey:@"SettledRetryRate" defaultValue:a1[1]];
  *((void *)a1 + 1) = v12;
  [a2 doubleForKey:@"UnsettledRetryRate" defaultValue:a1[4]];
  *((void *)a1 + 4) = v13;
  if (*((_BYTE *)a1 + 16)) {
    double v14 = 1.0;
  }
  else {
    double v14 = 0.0;
  }
  [a2 doubleForKey:@"SettledQueryALS" defaultValue:v14];
  *((_BYTE *)a1 + 16) = v15 != 0.0;
  if (*((_BYTE *)a1 + 40)) {
    double v16 = 1.0;
  }
  else {
    double v16 = 0.0;
  }
  [a2 doubleForKey:@"UnsettledQueryALS" defaultValue:v16];
  int v18 = v17 != 0.0;
  *((_BYTE *)a1 + 40) = v18;
  return *a1 != v4 || a1[1] != v5 || *((unsigned __int8 *)a1 + 16) != v6 || a1[3] != v8 || a1[4] != v7 || v9 != v18;
}

uint64_t sub_100D318E0(uint64_t a1)
{
  uint64_t v2 = operator new(0x150uLL);
  uint64_t result = sub_100D3192C((uint64_t)v2, *(void **)(a1 + 32));
  qword_10199DDD8 = (uint64_t)v2;
  return result;
}

void sub_100D31918(_Unwind_Exception *a1)
{
}

uint64_t sub_100D3192C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100D31DD4(a1, "Awareness", a2);
  *(void *)uint64_t v3 = off_1018804E0;
  *(int64x2_t *)(v3 + 112) = vdupq_n_s64(0x405E000000000000uLL);
  double v4 = (void *)(v3 + 112);
  *(int64x2_t *)(v3 + 128) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_BYTE *)(v3 + 144) = 0;
  *(_WORD *)(v3 + 152) = 0;
  *(int64x2_t *)(v3 + 160) = vdupq_n_s64(0xFFF0000000000000LL);
  *(_OWORD *)(v3 + 176) = xmmword_10135CA40;
  sub_1010DDBC0(&__p, "Awareness");
  sub_1006B5FBC(a1 + 192, &__p, sub_100D31E70, a1, *(void *)(a1 + 40), 1LL, 1.79769313e308, 1.79769313e308, 0.9);
  if (v27 < 0) {
    operator delete(__p);
  }
  *(_WORD *)(a1 + 248) = sub_1002958AC() == 1;
  *(void *)(a1 + 296) = 0LL;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_WORD *)(a1 + 288) = 0;
  *(void *)(a1 + 304) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  *(_DWORD *)(a1 + 312) = 48;
  *(void *)(a1 + 320) =  objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:forClient:",  @"CLWifiLocationProvider",  @"CLLocationAwarenessProvider");
  *(void *)(a1 + 328) =  objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:forClient:",  @"CLRoutineMonitor",  @"CLLocationAwarenessProvider");
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  __n128 v24[2] = sub_100D32030;
  v24[3] = &unk_10181D3D0;
  v24[4] = a1;
  [*(id *)(a1 + 304) setHandler:v24];
  sub_10034FF34((uint64_t)sub_100D32488, a1, *(void **)(a1 + 32), &__p);
  double v5 = __p;
  __int128 __p = 0LL;
  uint64_t v6 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    double v7 = __p;
    __int128 __p = 0LL;
    if (v7) {
      (*(void (**)(void *))(*(void *)v7 + 8LL))(v7);
    }
  }

  [*(id *)(*(void *)(a1 + 256) + 16) register:*(void *)(*(void *)(a1 + 256) + 8) forNotification:1 registrationInfo:0];
  sub_1004EEF6C((uint64_t)sub_100D32660, a1, *(void **)(a1 + 32), &__p);
  double v8 = __p;
  __int128 __p = 0LL;
  uint64_t v9 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    uint64_t v10 = __p;
    __int128 __p = 0LL;
    if (v10) {
      (*(void (**)(void *))(*(void *)v10 + 8LL))(v10);
    }
  }

  sub_1004EEF6C((uint64_t)nullsub_1121, 0LL, *(void **)(a1 + 32), &__p);
  uint64_t v11 = __p;
  __int128 __p = 0LL;
  uint64_t v12 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    uint64_t v13 = __p;
    __int128 __p = 0LL;
    if (v13) {
      (*(void (**)(void *))(*(void *)v13 + 8LL))(v13);
    }
  }

  sub_100583844((uint64_t)sub_100D3283C, a1, *(void **)(a1 + 32), &__p);
  double v14 = __p;
  __int128 __p = 0LL;
  uint64_t v15 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    double v16 = __p;
    __int128 __p = 0LL;
    if (v16) {
      (*(void (**)(void *))(*(void *)v16 + 8LL))(v16);
    }
  }

  [*(id *)(*(void *)(a1 + 280) + 16) register:*(void *)(*(void *)(a1 + 280) + 8) forNotification:4 registrationInfo:0];
  sub_1002F0B04(&__p);
  sub_1002A82BC((uint64_t)__p, "AwarenessMinimumTimerChange", v4);
  double v17 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  sub_1002F0B04(&__p);
  sub_1002A82BC((uint64_t)__p, "AwarenessEarlyFireSlop", (void *)(a1 + 120));
  int v20 = v26;
  if (v26)
  {
    unint64_t v21 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  return a1;
}

void sub_100D31CE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v23 = v19[37];
  v19[37] = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  uint64_t v24 = v19[35];
  v19[35] = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  uint64_t v25 = v19[34];
  v19[34] = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  uint64_t v26 = v19[33];
  v19[33] = 0LL;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  uint64_t v27 = *v21;
  uint64_t *v21 = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  sub_1006B6010(v20);
  sub_100D32A14((uint64_t)v19);
  _Unwind_Resume(a1);
}

uint64_t sub_100D31DD4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101880688;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100D31E54(_Unwind_Exception *exception_object)
{
}

void sub_100D31E70(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101880610);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLLocationAwarenessProvider::onWakeTimer",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880610);
    }
    double v4 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLLocationAwarenessProvider::onWakeTimer, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v6 = 0;
  }

  sub_100D341AC(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D32010( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D32030(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101880630);
  }
  uint64_t v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    double v5 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Awareness Active location request has timed out}",  (uint8_t *)v3,  0x12u);
  }

  sub_100D32118(v1);
  sub_100D3224C(v1);
}

double sub_100D32118(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 289))
  {
    *(_BYTE *)(a1 + 289) = 0;
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    uint64_t v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 296);
      v6[0] = 68289282;
      v6[1] = 0;
      __int16 v7 = 2082;
      int v8 = "";
      __int16 v9 = 2050;
      uint64_t v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#Awareness stopping active location request and releasing power assertion, powerAsser tion:%{public}p}",  (uint8_t *)v6,  0x1Cu);
    }

    [*(id *)(*(void *)(a1 + 272) + 16) unregister:*(void *)(*(void *)(a1 + 272) + 8) forNotification:1];
    [*(id *)(a1 + 304) setNextFireDelay:1.79769313e308];
    uint64_t v4 = *(void *)(a1 + 296);
    *(void *)(a1 + 296) = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    double result = *(double *)(a1 + 184);
    *(double *)(a1 + 168) = result;
  }

  return result;
}

void sub_100D3224C(uint64_t a1)
{
  *(_OWORD *)(a1 + 128) = *(_OWORD *)v12;
  *(_BYTE *)(a1 + 144) = v12[16];
  *(CFAbsoluteTime *)(a1 + 184) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)uint64_t v12 = 0;
  if (sub_100247620(a1, (int *)v12, 1LL) && *(_BYTE *)(a1 + 248))
  {
    uint64_t v2 = (double *)(a1 + 128);
    *(_BYTE *)(a1 + 288) = 1;
    if (*(_BYTE *)(a1 + 144)) {
      uint64_t v3 = 3LL;
    }
    else {
      uint64_t v3 = 4LL;
    }
    sub_100D33C6C((_DWORD *)a1, v3);
    sub_100D33CCC(a1, 1);
    if (*(_BYTE *)(a1 + 249))
    {
      double v4 = *v2;
    }

    else
    {
      double *v2 = INFINITY;
      double v4 = INFINITY;
    }

    double v8 = *(double *)(a1 + 184) + *(double *)(a1 + 120);
    if (vabdd_f64(v8, *(double *)(a1 + 160)) < v4)
    {
      sub_100D32118(a1);
      double v9 = *(double *)(a1 + 128);
      double v10 = INFINITY;
      if (v9 != INFINITY)
      {
        double v11 = *(double *)(a1 + 160);
LABEL_22:
        double v10 = v9 + v11;
        goto LABEL_23;
      }

      goto LABEL_23;
    }

    if (vabdd_f64(v8, *(double *)(a1 + 168)) < *(double *)(a1 + 136))
    {
      sub_100D32118(a1);
      double v9 = *(double *)(a1 + 168);
      double v10 = -INFINITY;
      if (v9 != -INFINITY)
      {
        double v11 = *(double *)(a1 + 136);
        goto LABEL_22;
      }

void sub_100D32488(uint64_t a1, int *a2, _BYTE *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101880610);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLLocationAwarenessProvider::onWifiNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880610);
    }
    double v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLLocationAwarenessProvider::onWifiNotification, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D348DC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D32640( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D32660(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101880610);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLLocationAwarenessProvider::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880610);
    }
    double v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLLocationAwarenessProvider::onLocationNotification, event:%{public, location:escap e_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D343B8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D32818( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D3283C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101880610);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLLocationAwarenessProvider::onClientManagerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880610);
    }
    double v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLLocationAwarenessProvider::onClientManagerNotification, event:%{public, location: escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100D3466C((_BYTE *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D329F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D32A14(uint64_t a1)
{
  *(void *)a1 = off_101880688;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100D32A88(uint64_t a1)
{
  *(void *)a1 = off_1018804E0;

  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 328) = 0LL;
  [*(id *)(a1 + 304) invalidate];

  uint64_t v2 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0LL;
  *(void *)(a1 + 304) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  sub_1006B6010(a1 + 192);
  return sub_100D32A14(a1);
}

void sub_100D32B64(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D32A88(a1);
  operator delete(v1);
}

id sub_100D32B78(uint64_t a1)
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101880630);
  }
  uint64_t v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 2050;
    uint64_t v8 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#Awareness shutting down provider, self:%{public}p}",  (uint8_t *)v4,  0x1Cu);
  }

  id result = [*(id *)(a1 + 304) invalidate];
  *(_BYTE *)(a1 + 108) = 1;
  return result;
}

uint64_t sub_100D32C78(uint64_t a1)
{
  *(int64x2_t *)(a1 + 160) = vdupq_n_s64(0xFFF0000000000000LL);
  if (*(_DWORD *)(a1 + 312) != 48)
  {
    objc_msgSend( *(id *)(*(void *)(a1 + 264) + 16),  "unregister:forNotification:",  *(void *)(*(void *)(a1 + 264) + 8));
    *(_DWORD *)(a1 + 312) = 48;
  }

  sub_100D33CCC(a1, 0);
  sub_100D33D60((double *)a1, INFINITY);
  int v3 = 0;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120LL))(a1, &v3);
}

BOOL sub_100D32D00(uint64_t a1, int a2, int *a3, double *a4)
{
  int v19 = a2;
  if (*a4 >= a4[3]) {
    double v4 = a4[3];
  }
  else {
    double v4 = *a4;
  }
  if (v4 <= 0.0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    double v10 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2050;
      double v24 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#Awareness Attempting to set a non-positive latency budget, budget:%{public}f}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
    }

    uint64_t v11 = qword_101934988;
    BOOL result = os_signpost_enabled((os_log_t)qword_101934988);
    if (result)
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2050;
      double v24 = v4;
      uint64_t v12 = "#Awareness Attempting to set a non-positive latency budget";
      int v13 = "{msg%{public}.0s:#Awareness Attempting to set a non-positive latency budget, budget:%{public}f}";
      __int16 v14 = (os_log_s *)v11;
LABEL_25:
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v12,  v13,  buf,  0x1Cu);
      return 0LL;
    }
  }

  else
  {
    if ((sub_100D330A0(a1, a2, a3, (__int128 *)a4) & 1) != 0)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
      __int16 v7 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        *(void *)std::string buf = &v19;
        double v8 = COERCE_DOUBLE( objc_msgSend( objc_msgSend( sub_10023311C((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[8],  "description"),  "UTF8String"));
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v21 = 2082;
        unint64_t v22 = "";
        __int16 v23 = 2082;
        double v24 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#Awareness New registration, client:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      sub_100D3224C(a1);
      return 1LL;
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    __int16 v15 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(void *)&double v16 = *a3;
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2050;
      double v24 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#Awareness failed to register, notification:%{public, location:CLLocationProvider_T ype::Notification}lld}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
    }

    uint64_t v17 = qword_101934988;
    BOOL result = os_signpost_enabled((os_log_t)qword_101934988);
    if (result)
    {
      *(void *)&double v18 = *a3;
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2050;
      double v24 = v18;
      uint64_t v12 = "#Awareness failed to register";
      int v13 = "{msg%{public}.0s:#Awareness failed to register, notification:%{public, location:CLLocationProvid"
            "er_Type::Notification}lld}";
      __int16 v14 = (os_log_s *)v17;
      goto LABEL_25;
    }
  }

  return result;
}

uint64_t sub_100D330A0(uint64_t a1, int a2, int *a3, __int128 *a4)
{
  int v51 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v52 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v50 = v26;
        uint64_t v36 = *(void *)(v26 + 56);
        *(void *)std::string buf = &v51;
        int v37 = sub_100D361E8((uint64_t **)(v26 + 40), &v51, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        __int128 v38 = *a4;
        __int128 v39 = a4[1];
        *(_OWORD *)(v37 + 9) = a4[2];
        *(_OWORD *)(v37 + 7) = v39;
        *(_OWORD *)(v37 + 5) = v38;
        *(_DWORD *)std::string buf = 0xFFFF;
        uint64_t v56 = 0LL;
        *(void *)&uint8_t buf[4] = 0LL;
        __int128 v57 = xmmword_1012E0070;
        __asm { FMOV            V0.2D, #-1.0 }

        __int128 v58 = _Q0;
        __int128 v59 = _Q0;
        __int128 v60 = _Q0;
        uint64_t v63 = 0LL;
        uint64_t v64 = 0LL;
        unint64_t v62 = 0xBFF0000000000000LL;
        int v61 = 0;
        int v65 = 0;
        unint64_t v66 = 0xBFF0000000000000LL;
        int v67 = 0x7FFFFFFF;
        uint64_t v69 = 0LL;
        uint64_t v70 = 0LL;
        uint64_t v68 = 0LL;
        char v71 = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          uint64_t v45 = sub_100D36064(buf);
          sub_100D3610C((_BYTE *)a1, (uint64_t)v52, (uint64_t)&v50, v45);
        }

        if (v36) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v50 = a1 + 64;
        char v30 = byte_101990828;
        HIDWORD(v49) = v17;
        *(void *)std::string buf = (char *)&v49 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v49 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v49) = *a3;
        *(void *)std::string buf = (char *)&v49 + 4;
        id v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v49 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        HIDWORD(v49) = *a3;
        *(void *)std::string buf = (char *)&v49 + 4;
        double v32 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v49 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)std::string buf = &v51;
        uint64_t v33 = sub_100D361E8(v32 + 5, &v51, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        __int128 v34 = *a4;
        __int128 v35 = a4[1];
        *(_OWORD *)(v33 + 9) = a4[2];
        *(_OWORD *)(v33 + 7) = v35;
        *(_OWORD *)(v33 + 5) = v34;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v52 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101880610);
  }
  __int16 v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    __int16 v15 = (void *)(a1 + 8);
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    LOWORD(v56) = 1026;
    *(_DWORD *)((char *)&v56 + 2) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880610);
    }
    size_t v46 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t v52 = 136446466;
    *(void *)&v52[4] = v46;
    __int16 v53 = 1026;
    int v54 = a2;
    LODWORD(v49) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v52,
      v49);
    uint64_t v48 = (char *)v47;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::Notifica tionData, char, CLLocationAwarenessProvider_Type::RegInfo>::registerForNotification(int, const Notification_T &, c onst RegistrationInfo_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwar enessProvider_Type::RegInfo]",  "%s\n",  v47);
    if (v48 != buf) {
      free(v48);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_100D3356C(uint64_t a1, int a2, int *a3)
{
  int v13 = a2;
  BOOL v5 = sub_100D337D8((char *)a1, a2, a3);
  if (v5)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    uint64_t v6 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      *(void *)std::string buf = &v13;
      id v7 = objc_msgSend( objc_msgSend( sub_10023311C((uint64_t **)(a1 + 80), &v13, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[8],  "description"),  "UTF8String");
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2082;
      unint64_t v18 = (unint64_t)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#Awareness Removed registration, client:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    sub_100D3224C(a1);
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    double v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      unint64_t v9 = *a3;
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2050;
      unint64_t v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#Awareness failed to unregister, notification:%{public, location:CLLocationProvider _Type::Notification}lld}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
    }

    uint64_t v10 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      unint64_t v11 = *a3;
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2050;
      unint64_t v18 = v11;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Awareness failed to unregister",  "{msg%{public}.0s:#Awareness failed to unregister, notification:%{public, location:CLLocationProvider _Type::Notification}lld}",  buf,  0x1Cu);
    }
  }

  return v5;
}

BOOL sub_100D337D8(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      double v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          unint64_t v11 = (uint64_t *)v6;
        }
        else {
          unint64_t v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          double v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        __int16 v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          BOOL v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              uint64_t v19 = (char **)v13;
            }
            else {
              uint64_t v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              BOOL v16 = v13;
            }
            int v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                uint64_t v25 = (uint64_t *)v20;
              }
              else {
                uint64_t v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1002475A8((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101880610);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                int v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101880610);
                }
                double v29 = a1 + 8;
                if (a1[31] < 0) {
                  double v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  id v31 = buf;
                }
                else {
                  id v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                double v40 = v29;
                __int16 v41 = 2082;
                size_t v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                uint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Ty pe::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, Notificatio nData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationI nfo_T = CLLocationAwarenessProvider_Type::RegInfo]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100D33B60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(int64x2_t *)a2 = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_BYTE *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(result + 64);
  if (v2)
  {
    uint64_t v3 = result + 64;
    do
    {
      int v4 = *(_DWORD *)(v2 + 32);
      BOOL v5 = v4 < 0;
      if (v4 >= 0) {
        uint64_t v6 = (uint64_t *)v2;
      }
      else {
        uint64_t v6 = (uint64_t *)(v2 + 8);
      }
      if (!v5) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v6;
    }

    while (*v6);
    if (v3 != result + 64 && *(int *)(v3 + 32) <= 0)
    {
      id v7 = *(void **)(v3 + 40);
      double v8 = (void *)(v3 + 48);
      if (v7 != v8)
      {
        BOOL v9 = 0;
        int v10 = *(unsigned __int8 *)(result + 152);
        double v11 = INFINITY;
        double v12 = INFINITY;
        do
        {
          int v13 = (double *)(v7 + 5);
          if (v10) {
            uint64_t v14 = 5LL;
          }
          else {
            uint64_t v14 = 8LL;
          }
          if (!v10) {
            int v13 = (double *)(v7 + 8);
          }
          *(double *)a2 = v11;
          if (v13[1] < v12) {
            double v12 = v13[1];
          }
          *(double *)(a2 + 8) = v12;
          BOOL v9 = v9 || *((_BYTE *)v13 + 16) != 0;
          *(_BYTE *)(a2 + 16) = v9;
          int v15 = (void *)v7[1];
          if (v15)
          {
            do
            {
              BOOL v16 = v15;
              int v15 = (void *)*v15;
            }

            while (v15);
          }

          else
          {
            do
            {
              BOOL v16 = (void *)v7[2];
              BOOL v17 = *v16 == (void)v7;
              id v7 = v16;
            }

            while (!v17);
          }

          id v7 = v16;
        }

        while (v16 != v8);
      }
    }
  }

  return result;
}

_DWORD *sub_100D33C6C(_DWORD *result, uint64_t a2)
{
  int v2 = result[78];
  if (v2 != (_DWORD)a2)
  {
    int v4 = result;
    if (v2 != 48) {
      uint64_t result = objc_msgSend( *(id *)(*((void *)result + 33) + 16),  "unregister:forNotification:",  *(void *)(*((void *)result + 33) + 8));
    }
    if ((_DWORD)a2 != 48) {
      uint64_t result = [*(id *)(*((void *)v4 + 33) + 16) register:*(void *)(*((void *)v4 + 33) + 8) forNotification:a2 registrationInfo:0];
    }
    v4[78] = a2;
  }

  return result;
}

uint64_t sub_100D33CCC(uint64_t a1, int a2)
{
  uint64_t result = sub_1004F76B8();
  if ((result & 1) == 0 && *(unsigned __int8 *)(a1 + 153) != a2)
  {
    *(_BYTE *)(a1 + 153) = a2;
    BOOL v5 = *(void **)(a1 + 328);
    if (a2)
    {
      [v5 startMonitoringScenarioTriggerOfType:1 forClient:CLISP_ME_TOKEN];
      return (uint64_t)[*(id *)(a1 + 328) startMonitoringScenarioTriggerOfType:2 forClient:CLISP_ME_TOKEN];
    }

    else
    {
      [v5 stopMonitoringScenarioTriggerOfType:1 forClient:CLISP_ME_TOKEN];
      uint64_t result = (uint64_t)[*(id *)(a1 + 328) stopMonitoringScenarioTriggerOfType:2 forClient:CLISP_ME_TOKEN];
      *(_BYTE *)(a1 + 152) = 0;
    }
  }

  return result;
}

void sub_100D33D60(double *a1, double a2)
{
  if (a2 == INFINITY)
  {
    if (a1[22] != INFINITY)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
      int v4 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 68289026;
        int v8 = 0;
        __int16 v9 = 2082;
        int v10 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Awareness Disabling wakes}",  (uint8_t *)&v7,  0x12u);
      }

      a1[22] = INFINITY;
      sub_1006B6294((uint64_t)(a1 + 24));
    }
  }

  else if (a1[23] >= a2)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    BOOL v5 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2050;
      double v12 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#Awareness Wake time is in the past, wakeTime_s:%{public}.09f}",  (uint8_t *)&v7,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
    }

    uint64_t v6 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2050;
      double v12 = a2;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Awareness Wake time is in the past",  "{msg%{public}.0s:#Awareness Wake time is in the past, wakeTime_s:%{public}.09f}",  (uint8_t *)&v7,  0x1Cu);
    }
  }

  else if (vabdd_f64(a1[22], a2) >= a1[14])
  {
    sub_1006B6014((uint64_t)(a1 + 24), a2);
    a1[22] = a2;
  }

void sub_100D33FE0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 289))
  {
    *(_BYTE *)(a1 + 289) = 1;
    [*(id *)(*(void *)(a1 + 272) + 16) register:*(void *)(*(void *)(a1 + 272) + 8) forNotification:1 registrationInfo:0];
    [*(id *)(a1 + 304) setNextFireDelay:10.0];
    int v2 = operator new(0x30uLL);
    sub_100AD558C((uint64_t)v2, (uint64_t)"CLLocationAwarenessProvider", a1, 15.0);
    sub_1010DDBC0(__p, "Active location session has begun");
    sub_100AD5668((uint64_t)v2, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v3 = *(void *)(a1 + 296);
    *(void *)(a1 + 296) = v2;
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    int v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 296);
      *(_DWORD *)std::string buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#Awareness starting active location request and taking power assertion, powerAssertio n:%{public}p}",  buf,  0x1Cu);
    }

    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

void sub_100D34168( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  _Unwind_Resume(a1);
}

void sub_100D341AC(uint64_t a1)
{
  int v5 = 0;
  if (sub_100247620(a1, &v5, 1LL))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    int v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      int v8 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#Awareness Awakened}",  (uint8_t *)&v5,  0x12u);
    }

    sub_100D3224C(a1);
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    uint64_t v3 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      int v8 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#Awareness #warning Awakened with no clients}",  (uint8_t *)&v5,  0x12u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
    }

    int v4 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      int v8 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Awareness #warning Awakened with no clients",  "{msg%{public}.0s:#Awareness #warning Awakened with no clients}",  (uint8_t *)&v5,  0x12u);
    }
  }

void sub_100D343B8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == *(_DWORD *)(a1 + 312))
  {
    *(_DWORD *)std::string buf = 0;
    if (sub_100247620(a1, (int *)buf, 1LL))
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
      int v6 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Awareness Received location}",  buf,  0x12u);
      }

      *(void *)(a1 + 160) = *(void *)(a4 + 76);
      sub_100D3224C(a1);
      __int128 v7 = *(_OWORD *)(a4 + 112);
      __int128 v21 = *(_OWORD *)(a4 + 96);
      __int128 v22 = v7;
      v23[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)(a4 + 140);
      __int128 v8 = *(_OWORD *)(a4 + 48);
      __int128 v17 = *(_OWORD *)(a4 + 32);
      __int128 v18 = v8;
      __int128 v9 = *(_OWORD *)(a4 + 80);
      __int128 v19 = *(_OWORD *)(a4 + 64);
      __int128 v20 = v9;
      __int128 v10 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)std::string buf = *(_OWORD *)a4;
      *(_OWORD *)&uint8_t buf[16] = v10;
      int v15 = 0;
      (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v15,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
      uint64_t v14 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Awareness #warning Received location without clients}",  buf,  0x12u);
      }

      if (*(_DWORD *)(a1 + 312) != 48)
      {
        objc_msgSend( *(id *)(*(void *)(a1 + 264) + 16),  "unregister:forNotification:",  *(void *)(*(void *)(a1 + 264) + 8));
        *(_DWORD *)(a1 + 312) = 48;
      }
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    __int16 v12 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *a3;
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Awareness #warning Unexpected notification, notification:%{public, location:CLLoca tionProvider_Type::Notification}lld}",  buf,  0x1Cu);
    }
  }

void sub_100D3466C(_BYTE *a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    a1[248] = *(_DWORD *)(a4 + 188) == 1;
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    int v5 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = a1[248];
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 1026;
      int v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Awareness New big switch state, enabled:%{public}d}",  (uint8_t *)&v12,  0x18u);
    }

    if (!a1[248])
    {
      int v12 = 0;
      (*(void (**)(_BYTE *, int *))(*(void *)a1 + 120LL))(a1, &v12);
    }

    sub_100D3224C((uint64_t)a1);
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    __int128 v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      int v9 = *a3;
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 1026;
      int v17 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#Awareness Unexpected client manager notification, notification:%{public}d}",  (uint8_t *)&v12,  0x18u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
    }

    __int128 v10 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      int v11 = *a3;
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 1026;
      int v17 = v11;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Awareness Unexpected client manager notification",  "{msg%{public}.0s:#Awareness Unexpected client manager notification, notification:%{public}d}",  (uint8_t *)&v12,  0x18u);
    }
  }

void sub_100D348DC(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4)
{
  if (*a3 == 1)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    int v6 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *a4;
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1026;
      int v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Awareness Wifi power state changed, powered:%{public}hhd}",  (uint8_t *)&v13,  0x18u);
    }

    *(_BYTE *)(a1 + 249) = *a4;
    sub_100D3224C(a1);
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880630);
    }
    int v9 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      int v10 = *a3;
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1026;
      int v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#Awareness Unexpected wifi notification, notification:%{public}d}",  (uint8_t *)&v13,  0x18u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
    }

    int v11 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      int v12 = *a3;
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1026;
      int v18 = v12;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Awareness Unexpected wifi notification",  "{msg%{public}.0s:#Awareness Unexpected wifi notification, notification:%{public}d}",  (uint8_t *)&v13,  0x18u);
    }
  }

void sub_100D34B20(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880610);
      }
      int v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        __int128 v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101880610);
        }
        int v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        __int16 v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        int v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::Noti ficationData, char, CLLocationAwarenessProvider_Type::RegInfo>::removeClient(int) [Notification_T = CLLocation AwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100D34D94(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_100D36D88(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96LL))(a1, a2, &v10, v7);
  }

  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88LL))(a1, a2, &v9);
  }

uint64_t sub_100D34E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101990830);
}

BOOL sub_100D34E28(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        __int128 v21 = (uint64_t *)v15;
      }
      else {
        __int128 v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880610);
    }
    int v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880610);
      }
      __int16 v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      BOOL v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::Notifi cationData, char, CLLocationAwarenessProvider_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Not ification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_T ype::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100D350A8(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      int v10 = (uint64_t *)v4;
    }
    else {
      int v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(_OWORD **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  __int128 v12 = v11[1];
  *a3 = *v11;
  a3[1] = v12;
  __int128 v13 = v11[2];
  __int128 v14 = v11[3];
  __int128 v15 = v11[5];
  a3[4] = v11[4];
  a3[5] = v15;
  a3[2] = v13;
  a3[3] = v14;
  __int128 v16 = v11[6];
  __int128 v17 = v11[7];
  __int128 v18 = v11[8];
  *(_OWORD *)((char *)a3 + 140) = *(_OWORD *)((char *)v11 + 140);
  a3[7] = v17;
  a3[8] = v18;
  a3[6] = v16;
  return 1LL;
}

uint64_t sub_100D35130(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0xB8uLL);
  __int128 v7 = a3[7];
  *(_OWORD *)(v6 + 120) = a3[6];
  *(_OWORD *)(v6 + 136) = v7;
  *(_OWORD *)(v6 + 152) = a3[8];
  *(_OWORD *)(v6 + 164) = *(_OWORD *)((char *)a3 + 140);
  __int128 v8 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *(_OWORD *)(v6 + 72) = v8;
  __int128 v9 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v9;
  __int128 v10 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *((void *)v6 + 2) = 0LL;
  *(void *)int v6 = off_101880788;
  *((void *)v6 + 1) = 0LL;
  *(_OWORD *)(v6 + 40) = v10;
  *(void *)&__int128 v17 = v6 + 24;
  *((void *)&v17 + 1) = v6;
  int v16 = *a2;
  __int128 v18 = &v16;
  int v11 = sub_10023347C((uint64_t **)(a1 + 56), &v16, (uint64_t)&unk_1012CF090, &v18);
  sub_10005F550((uint64_t)(v11 + 8), &v17);
  __int128 v12 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1))
  {
    __int128 v13 = (unint64_t *)(*((void *)&v17 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  return 1LL;
}

void sub_100D3523C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100D35250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v10 = 0xFFFF;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  __int128 v13 = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v14 = _Q0;
  __int128 v15 = _Q0;
  __int128 v16 = _Q0;
  int v17 = 0;
  uint64_t v20 = 0LL;
  unint64_t v18 = 0xBFF0000000000000LL;
  uint64_t v19 = 0LL;
  int v21 = 0;
  unint64_t v22 = 0xBFF0000000000000LL;
  int v23 = 0x7FFFFFFF;
  uint64_t v26 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  char v27 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  &v10,  a3,  a4,  0LL);
}

void sub_100D352E0(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    int v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880610);
    }
    uint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v71 = 2082;
      int v72 = v12;
      __int16 v73 = 2050;
      int v74 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    __int128 v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)uint64_t v75 = &v75[8];
      memset(&v75[8], 0, 24);
      unint64_t v76 = 0LL;
      sub_100D36B70((uint64_t)buf, a2, (uint64_t)v75);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v74;
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      uint64_t v24 = v76;
      if (v76)
      {
        uint64_t v25 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v75, *(void **)&v75[8]);
    }

    if (a4)
    {
      char v27 = (char *)operator new(0xB8uLL);
      __int128 v28 = a3[7];
      *(_OWORD *)(v27 + 120) = a3[6];
      *(_OWORD *)(v27 + 136) = v28;
      *(_OWORD *)(v27 + 152) = a3[8];
      *(_OWORD *)(v27 + 164) = *(_OWORD *)((char *)a3 + 140);
      __int128 v29 = a3[3];
      *(_OWORD *)(v27 + 56) = a3[2];
      *(_OWORD *)(v27 + 72) = v29;
      __int128 v30 = a3[5];
      *(_OWORD *)(v27 + 88) = a3[4];
      *(_OWORD *)(v27 + 104) = v30;
      __int128 v31 = a3[1];
      *(_OWORD *)(v27 + 24) = *a3;
      *((void *)v27 + 2) = 0LL;
      *(void *)char v27 = off_101880788;
      *((void *)v27 + 1) = 0LL;
      *(_OWORD *)(v27 + 40) = v31;
      *(void *)std::string buf = v27 + 24;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v32 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v33 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int128 v35 = sub_100D366F4(a3);
    if (a5 == -1)
    {
      sub_100D3679C((void *)a1, (int *)a2, v35);
    }

    else
    {
      uint64_t v36 = a1 + 88;
      uint64_t v37 = *(void *)(a1 + 88);
      if (!v37) {
        goto LABEL_48;
      }
      uint64_t v38 = a1 + 88;
      do
      {
        int v39 = *(_DWORD *)(v37 + 32);
        BOOL v40 = v39 < a5;
        if (v39 >= a5) {
          __int16 v41 = (uint64_t *)v37;
        }
        else {
          __int16 v41 = (uint64_t *)(v37 + 8);
        }
        if (!v40) {
          uint64_t v38 = v37;
        }
        uint64_t v37 = *v41;
      }

      while (*v41);
      if (v38 == v36 || *(_DWORD *)(v38 + 32) > a5) {
LABEL_48:
      }
        uint64_t v38 = a1 + 88;
      uint64_t v68 = v38;
      unint64_t v42 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v43 = *a2;
      char v44 = (__n128 *)(a1 + 64);
      do
      {
        int v45 = *(_DWORD *)(v42 + 32);
        BOOL v46 = v45 < v43;
        if (v45 >= v43) {
          uint64_t v47 = (unint64_t *)v42;
        }
        else {
          uint64_t v47 = (unint64_t *)(v42 + 8);
        }
        if (!v46) {
          char v44 = (__n128 *)v42;
        }
        unint64_t v42 = *v47;
      }

      while (*v47);
      if (v44 == v15 || v43 < (signed __int32)v44[2].n128_u32[0])
      {
LABEL_59:
        int v67 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101880610);
        }
        uint64_t v48 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v49 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v75, a1, a2);
          if (v75[23] >= 0) {
            uint64_t v50 = v75;
          }
          else {
            uint64_t v50 = *(_BYTE **)v75;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v49;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v50;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v75[23] & 0x80000000) != 0) {
            operator delete(*(void **)v75);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101880610);
          }
          int v51 = (void *)(a1 + 8);
          uint64_t v52 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v66 >= 0) {
            __int16 v53 = __p;
          }
          else {
            __int16 v53 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v75 = 136315650;
          *(void *)&v75[4] = v51;
          *(_WORD *)&v75[12] = 1024;
          *(_DWORD *)&v75[14] = a5;
          *(_WORD *)&v75[18] = 2080;
          *(void *)&v75[20] = v53;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v52,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v75,
            28,
            v64);
          uint64_t v55 = v54;
          if (v66 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::No tificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLLocationAwarenessProvider_Type::Notific ation, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, R egistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]",  "%s\n",  v55);
          if (v55 != buf) {
            free(v55);
          }
        }

        goto LABEL_83;
      }

      int v67 = v44;
      if (v38 == v36) {
        goto LABEL_60;
      }
      uint64_t v58 = v44[3].n128_i64[0];
      uint64_t v56 = v44 + 3;
      __int128 v57 = (__n128 *)v58;
      if (!v58) {
        goto LABEL_60;
      }
      int v59 = *(_DWORD *)(v38 + 32);
      __int128 v60 = v56;
      do
      {
        int v61 = v57[2].n128_i32[0];
        BOOL v62 = v61 < v59;
        if (v61 >= v59) {
          uint64_t v63 = v57;
        }
        else {
          uint64_t v63 = (__n128 *)&v57->n128_i8[8];
        }
        if (!v62) {
          __int128 v60 = v57;
        }
        __int128 v57 = (__n128 *)v63->n128_u64[0];
      }

      while (v63->n128_u64[0]);
      sub_100D3610C((_BYTE *)a1, (uint64_t)&v68, (uint64_t)&v67, v35);
    }

void sub_100D35954( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100D359A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880610);
    }
    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880610);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::Notifi cationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationAwarenes sProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, Notificat ionInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880610);
    }
    __int128 v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880610);
      }
      char v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      __int128 v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::Notifi cationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationAwarenes sProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, Notificat ionInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    int v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      uint64_t v11 = (void *)(a1 + 8);
      do
      {
        uint64_t v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101880610);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              __int128 v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::string buf = 136315650;
              uint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101880610);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              uint64_t v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type ::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CL LocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::Not ificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                uint64_t v12 = v18;
              }

              while (!v19);
            }

            uint64_t v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        uint64_t v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            uint64_t v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            int v10 = v26;
          }

          while (!v19);
        }

        int v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100D35F4C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D36004(a1);
  operator delete(v1);
}

id sub_100D35F60(uint64_t a1, int a2, void *a3)
{
  id result = sub_100D362D0(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100D35FAC(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D35FD8(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100D36004(uint64_t a1)
{
  *(void *)a1 = off_101880660;
  int v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_100D36064(_OWORD *a1)
{
  int v2 = operator new(0x9CuLL);
  __int128 v3 = a1[7];
  v2[6] = a1[6];
  v2[7] = v3;
  v2[8] = a1[8];
  *(_OWORD *)((char *)v2 + 140) = *(_OWORD *)((char *)a1 + 140);
  __int128 v4 = a1[3];
  v2[2] = a1[2];
  unsigned __int8 v2[3] = v4;
  __int128 v5 = a1[5];
  v2[4] = a1[4];
  v2[5] = v5;
  __int128 v6 = a1[1];
  _OWORD *v2 = *a1;
  v2[1] = v6;
  __int128 v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472LL;
  int v10 = sub_100D362C0;
  uint64_t v11 = &unk_10181D3D0;
  uint64_t v12 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

_BYTE *sub_100D3610C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    __int128 v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100D362D0(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    uint64_t v11 = (uint64_t **)(*(void *)a3 + 40LL);
    __int128 v14 = (int *)(*(void *)a2 + 32LL);
    uint64_t v12 = sub_100D361E8(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 5);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

uint64_t **sub_100D361E8(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  __int128 v7 = a1 + 1;
  __int128 v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        __int128 v6 = *v9;
        __int128 v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      __int128 v6 = v9[1];
      if (!v6)
      {
        __int128 v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    id v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    int64x2_t v12 = vdupq_n_s64(0x7FF0000000000000uLL);
    *(int64x2_t *)(v11 + 40) = v12;
    *((int64x2_t *)v11 + 4) = v12;
    sub_1000085FC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_100D362C0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_100D362D0(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100D3631C(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100D3631C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880758);
    }
    __int128 v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135CB6CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880758);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880758);
    }
    __int128 v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135CB6CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880758);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  __int128 v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLLocationAwarenessProvider_Type::NotificationDa ta, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_100D366C8(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

CLCppContainer *sub_100D366F4(_OWORD *a1)
{
  id v2 = operator new(0x9CuLL);
  __int128 v3 = a1[7];
  v2[6] = a1[6];
  v2[7] = v3;
  v2[8] = a1[8];
  *(_OWORD *)((char *)v2 + 140) = *(_OWORD *)((char *)a1 + 140);
  __int128 v4 = a1[3];
  v2[2] = a1[2];
  unsigned __int8 v2[3] = v4;
  __int128 v5 = a1[5];
  v2[4] = a1[4];
  v2[5] = v5;
  __int128 v6 = a1[1];
  _OWORD *v2 = *a1;
  v2[1] = v6;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472LL;
  id v10 = sub_100D36D78;
  __int16 v11 = &unk_10181D3D0;
  uint64_t v12 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100D3679C(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    __int128 v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        int v51 = v9;
        id v13 = sub_100D362D0(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        unint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v50 = v19;
              sub_100D3610C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int128 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int128 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              int v51 = v29;
              uint64_t v34 = v29[6];
              unint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                __int128 v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    __int128 v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      unint64_t v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      unint64_t v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      unint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      unint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      unint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      __int128 v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              uint64_t v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101880610);
              }
              uint64_t v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                uint64_t v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)std::string buf = 136446466;
                __int128 v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101880610);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 8);
                int v52 = 136446466;
                __int16 v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::Noti ficationData, char, CLLocationAwarenessProvider_Type::RegInfo>::invokeClientsWithData(const Notificati on_T &, CLCppContainer *) [Notification_T = CLLocationAwarenessProvider_Type::Notification, Notificati onData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, Registration Info_T = CLLocationAwarenessProvider_Type::RegInfo]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

uint64_t sub_100D36B70(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  sub_100D36BCC(a1 + 8, a3);
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(void *)(a1 + 40) = v5;
  if (v5)
  {
    __int128 v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t sub_100D36BCC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_100D36C20((_OWORD *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100D36C08(_Unwind_Exception *a1)
{
}

_OWORD *sub_100D36C20(_OWORD *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    __int128 v6 = (uint64_t *)result + 1;
    do
    {
      id result = sub_100D36CA4(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      unint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          unint64_t v7 = *(int **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          int v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

_OWORD *sub_100D36CA4(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  __int128 v6 = sub_1000EBE2C(a1, a2, &v12, &v11, a3);
  unint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x58uLL);
    __int128 v9 = *(_OWORD *)(a4 + 16);
    v7[2] = *(_OWORD *)a4;
    v7[3] = v9;
    _DWORD v7[4] = *(_OWORD *)(a4 + 32);
    *((void *)v7 + 10) = *(void *)(a4 + 48);
    sub_1000085FC(a1, (uint64_t)v12, v8, (uint64_t *)v7);
  }

  return v7;
}

void sub_100D36D38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101880788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D36D4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101880788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100D36D78(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_100D36D88(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100D36DD4(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100D36DD4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880758);
    }
    __int128 v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135CC0DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880758);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880758);
    }
    __int128 v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135CC0DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880758);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  unint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLLocationAwarenessProvider_Type::RegInfo, Callb ack = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_100D37180()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100D3721C(_Unwind_Exception *a1)
{
}

void sub_100D37234()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100D372C0(_Unwind_Exception *a1)
{
}

void sub_100D37850( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D37B3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_100D37B84(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768LL;
  _DWORD v3[2] = sub_100D385D0;
  v3[3] = &unk_1018807E8;
  sub_100272138((uint64_t)v4, a1);
  id v1 = [v3 copy];
  sub_1002722AC((uint64_t)v4);
  return v1;
}

void sub_100D37C00(_Unwind_Exception *a1)
{
}

void sub_100D37DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_1002722AC((uint64_t)va);
  sub_1002722AC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100D38560( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100D385A4(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100D385D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100272138(a2, a1 + 32);
}

uint64_t sub_100D385DC(uint64_t a1, uint64_t a2)
{
  return sub_100272138(a1 + 32, a2 + 32);
}

uint64_t sub_100D385E8(uint64_t a1)
{
  return sub_1002722AC(a1 + 32);
}

void sub_100D38694(id a1)
{
  qword_10199DDE0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CMHealthColdStorageCompanionSyncServiceSilo");
}

void sub_100D38748(id a1)
{
}

void sub_100D38FB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void **a21, uint64_t a22, uint64_t a23)
{
  for (uint64_t i = 48LL; i != -16; i -= 16LL)
    sub_10000AE14((uint64_t)&a23 + i);
  _Unwind_Resume(a1);
}

id sub_100D39050(uint64_t a1)
{
  id result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    id v2 = result;
    [result sendAnalytics];
    return [v2 resetAnalytics];
  }

  return result;
}

void sub_100D393F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_100D39408(uint64_t a1)
{
  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101880878);
  }
  id v2 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregating HRRecovery db records", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101880878);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Aggregating HRRecovery db records",  v10,  2);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CMHealthColdStorageCompanionSyncService setUpAggregationOnTimer]_block_invoke",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100274854(*(void *)(*(void *)(a1 + 32) + 24LL));
  sub_100274DC8(*(void *)(*(void *)(a1 + 32) + 48LL));
  sub_10027533C(*(void *)(*(void *)(a1 + 32) + 72LL));
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101880898);
  }
  uint64_t v3 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Aggregating ElevationGrade db records", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101880898);
    }
    v10[0] = 0;
    LODWORD(v9) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "Aggregating ElevationGrade db records",  v10,  v9);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CMHealthColdStorageCompanionSyncService setUpAggregationOnTimer]_block_invoke",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  return sub_100392094(*(void *)(*(void *)(a1 + 32) + 120LL));
}

uint64_t sub_100D3AEA8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100D3B018(id a1)
{
  qword_1019347B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_100D3B044(id a1)
{
  qword_101934778 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_100D3B070(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100D3B140(id a1)
{
  qword_10199DE18 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLFitnessMachineNotifierSilo");
}

uint64_t sub_100D3B1F4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100D3BAA0;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199DE38 != -1) {
    dispatch_once(&qword_10199DE38, block);
  }
  return qword_1019A2080;
}

__n128 sub_100D3B3D8(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 112) != 1.79769313e308 && *(double *)(a2 + 120) != 1.79769313e308)
  {
    *(void *)&__int128 v21 = sub_1008D82E0(a2);
    *((void *)&v21 + 1) = v4;
    sub_1008D82F8((uint64_t *)(a1 + 304), (double *)&v21);
    *(void *)(a2 + 112) = v5;
  }

  if (*(double *)(a2 + 64) != 1.79769313e308 && *(double *)(a2 + 72) != 1.79769313e308)
  {
    *(void *)&__int128 v21 = sub_1008D82E8(a2);
    *((void *)&v21 + 1) = v6;
    sub_1008D83D8(a1 + 304, (double *)&v21);
    *(void *)(a2 + 64) = v7;
  }

  if (*(double *)(a2 + 88) != 1.79769313e308 && *(double *)(a2 + 96) != 1.79769313e308)
  {
    *(void *)&__int128 v21 = sub_1008D82F0(a2);
    *((void *)&v21 + 1) = v8;
    sub_1008D83E0(a1 + 304, (double *)&v21);
    *(void *)(a2 + 88) = v9;
  }

  __int128 v10 = *(_OWORD *)(a2 + 144);
  __int128 v29 = *(_OWORD *)(a2 + 128);
  __int128 v30 = v10;
  uint64_t v31 = *(void *)(a2 + 160);
  __int128 v11 = *(_OWORD *)(a2 + 80);
  __int128 v25 = *(_OWORD *)(a2 + 64);
  __int128 v26 = v11;
  __int128 v12 = *(_OWORD *)(a2 + 112);
  __int128 v27 = *(_OWORD *)(a2 + 96);
  __int128 v28 = v12;
  __int128 v13 = *(_OWORD *)(a2 + 16);
  __int128 v21 = *(_OWORD *)a2;
  __int128 v22 = v13;
  __n128 v14 = *(__n128 *)(a2 + 48);
  __int128 v23 = *(_OWORD *)(a2 + 32);
  __n128 v24 = v14;
  sub_100D3BC98((uint64_t)&v21, a1 + 112);
  if (BYTE4(v31))
  {
    int v20 = 0;
    (*(void (**)(uint64_t, int *, __int128 *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v20,  &v21,  0LL,  0xFFFFFFFFLL,  0LL);
  }

  __int128 v15 = v30;
  *(_OWORD *)(a1 + 240) = v29;
  *(_OWORD *)(a1 + 256) = v15;
  *(void *)(a1 + 272) = v31;
  __int128 v16 = v26;
  *(_OWORD *)(a1 + 176) = v25;
  *(_OWORD *)(a1 + 192) = v16;
  __int128 v17 = v28;
  *(_OWORD *)(a1 + 208) = v27;
  *(_OWORD *)(a1 + 224) = v17;
  __int128 v18 = v22;
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = v18;
  __n128 result = v24;
  *(_OWORD *)(a1 + 144) = v23;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

void sub_100D3B5B8(id a1)
{
  if (sub_1004F7000())
  {
    sub_1004F2598();
  }

uint64_t sub_100D3B5EC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100D3B730(a1, "CLFitnessMachineNotifier", a2);
  *(void *)uint64_t v3 = off_101880908;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  sub_100DE9750((void *)(v3 + 288), 0);
  *(void *)(a1 + 304) = a1 + 304;
  *(void *)(a1 + 312) = a1 + 304;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 328) = a1 + 328;
  *(void *)(a1 + 336) = a1 + 328;
  *(void *)(a1 + 344) = 0LL;
  *(void *)(a1 + 352) = a1 + 352;
  *(void *)(a1 + 360) = a1 + 352;
  *(void *)(a1 + 368) = 0LL;
  sub_100468458((uint64_t)sub_100D3B7CC, a1, *(void **)(a1 + 32), &v8);
  uint64_t v4 = v8;
  uint64_t v8 = 0LL;
  uint64_t v5 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v6 = v8;
    uint64_t v8 = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  [*(id *)(*(void *)(a1 + 280) + 16) register:*(void *)(*(void *)(a1 + 280) + 8) forNotification:2 registrationInfo:0];
  return a1;
}

void sub_100D3B6E8(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 280);
  *(void *)(v1 + 280) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  sub_100D3BA2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3B730(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101880A90;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100D3B7B0(_Unwind_Exception *exception_object)
{
}

void sub_100D3B7CC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101880A60);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFitnessMachineNotifier::onMotionStateMediatorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880A60);
    }
    uint64_t v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int128 v15 = "";
      __int16 v16 = 2082;
      __int128 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFitnessMachineNotifier::onMotionStateMediatorNotification, event:%{public, locati on:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  if (*a2 == 2 && !*(void *)(a3 + 16))
  {
    *(void *)(a4 + 244) = 0LL;
    uint64_t v9 = a4 + 244;
    *(_OWORD *)(v9 - 68) = 0u;
    *(_OWORD *)(v9 - 84) = 0u;
    *(_OWORD *)(v9 - 100) = 0u;
    *(_OWORD *)(v9 - 116) = 0u;
    *(_OWORD *)(v9 - 132) = 0u;
    *(void *)(v9 - 48) = 0LL;
    *(void *)(v9 - 40) = 0LL;
    *(void *)(v9 - 24) = 0LL;
    *(void *)(v9 - 16) = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(void *)(v9 + 16) = 0LL;
    *(void *)(v9 + 24) = 0x200000000LL;
    *(_BYTE *)(v9 + 32) = 1;
    *(_BYTE *)(v9 + 35) = 0;
    *(_WORD *)(v9 + 33) = 0;
    *(_DWORD *)(v9 - 52) = -1;
    *(_DWORD *)(v9 - 32) = 0;
    *(_DWORD *)(v9 - 28) = -1;
    *(_DWORD *)(v9 - 8) = 0;
    *(_DWORD *)(v9 - 4) = -1;
  }

  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D3B9D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100D3B9F4(void *a1)
{
  return a1;
}

uint64_t sub_100D3BA2C(uint64_t a1)
{
  *(void *)a1 = off_101880A90;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100D3BAA0(uint64_t a1)
{
  uint64_t v2 = operator new(0x178uLL);
  uint64_t result = sub_100D3B5EC((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A2080 = (uint64_t)v2;
  return result;
}

void sub_100D3BAD8(_Unwind_Exception *a1)
{
}

uint64_t sub_100D3BAEC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100D3BB60;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199DE48 != -1) {
    dispatch_once(&qword_10199DE48, block);
  }
  return byte_10199DE40;
}

id sub_100D3BB60(uint64_t a1)
{
  id result = objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "isServiceEnabled:",  @"CLFitnessMachineNotifier");
  byte_10199DE40 = (char)result;
  return result;
}

uint64_t sub_100D3BB8C(uint64_t a1)
{
  *(void *)a1 = off_101880908;
  *(_BYTE *)(a1 + 108) = 1;
  uint64_t v2 = (void *)(a1 + 304);
  sub_1001B4C40((void *)(a1 + 352));
  sub_1001B4C40((void *)(a1 + 328));
  sub_1001B4C40(v2);
  sub_10000AE14(a1 + 288);
  uint64_t v3 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return sub_100D3BA2C(a1);
}

void sub_100D3BC00(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D3BB8C(a1);
  operator delete(v1);
}

uint64_t sub_100D3BC14(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

void *sub_100D3BC20@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_100D3BC98(uint64_t result, uint64_t a2)
{
  if (*(double *)(result + 72) == 1.79769313e308)
  {
    *(void *)(result + 72) = *(void *)(a2 + 72);
    *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 80);
  }

  if (*(double *)(result + 96) == 1.79769313e308)
  {
    *(void *)(result + 96) = *(void *)(a2 + 96);
    *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
  }

  if (*(double *)(result + 120) == 1.79769313e308)
  {
    *(void *)(result + 120) = *(void *)(a2 + 120);
    *(_DWORD *)(result + 128) = *(_DWORD *)(a2 + 128);
  }

  double v2 = *(double *)a2;
  double v3 = *(double *)(result + 8);
  *(double *)id result = v2;
  double v5 = *(double *)(result + 88);
  if (v5 == 1.79769313e308) {
    double v5 = *(double *)(a2 + 88);
  }
  *(double *)(result + 88) = v5;
  double v6 = *(double *)(result + 112);
  if (v6 == 1.79769313e308) {
    double v6 = *(double *)(a2 + 112);
  }
  *(double *)(result + 112) = v6;
  double v7 = *(double *)(result + 64);
  if (v7 == 1.79769313e308) {
    double v7 = *(double *)(a2 + 64);
  }
  *(double *)(result + 64) = v7;
  double v8 = *(double *)(a2 + 8);
  if (v3 >= v8 && v3 != 1.79769313e308) {
    double v8 = v3;
  }
  *(double *)(result + 8) = v8;
  double v10 = *(double *)(a2 + 16);
  double v11 = *(double *)(result + 16);
  double v12 = *(double *)(result + 24);
  if (v11 >= v10 && v11 != 1.79769313e308) {
    double v10 = *(double *)(result + 16);
  }
  *(double *)(result + 16) = v10;
  double v14 = *(double *)(a2 + 24);
  if (v12 >= v14 && v12 != 1.79769313e308) {
    double v14 = v12;
  }
  *(double *)(result + 24) = v14;
  double v16 = *(double *)(result + 32);
  *(double *)(result + 32) = v16;
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(result + 40);
  uint64_t v20 = *(void *)(result + 48);
  if (v19 >= v18 && v19 != 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v18 = *(void *)(result + 40);
  }
  *(void *)(result + 40) = v18;
  uint64_t v22 = *(void *)(a2 + 48);
  if (v20 >= v22 && v20 != 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v22 = v20;
  }
  *(void *)(result + 48) = v22;
  uint64_t v24 = *(void *)(result + 56);
  if (v24 < *(void *)(a2 + 56) || v24 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v24 = *(void *)(a2 + 56);
  }
  *(void *)(result + 56) = v24;
  *(_BYTE *)(result + 164) = 1;
  return result;
}

void sub_100D3BE3C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  double v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLFitnessMachineNotifier");
  sub_100D3BF04((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  *double v8 = off_1018809E8;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100D3BED8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3BF04(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101880BE0;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    double v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100D3BFD8(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880A60);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        double v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        __int128 v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101880A60);
        }
        double v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        __int128 v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::Notificati onData>::removeClient(int) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100D3C24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101990A40);
}

uint64_t sub_100D3C260(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)int v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int128 v29 = (uint64_t *)v25;
        }
        else {
          __int128 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)&buf[0] = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        uint64_t v47 = 0LL;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          uint64_t v36 = sub_100D3E690((uint64_t)buf);
          sub_100D3E060((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_101990A41;
        HIDWORD(v40) = v17;
        *(void *)&buf[0] = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)&buf[0] = (char *)&v40 + 4;
        uint64_t v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)&buf[0] = (char *)&v40 + 4;
        uint64_t v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)&buf[0] = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101880A60);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880A60);
    }
    int v37 = (void *)(a1 + 8);
    *(_DWORD *)int v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    int v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationDa ta>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFitnessM achineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, Notificat ionInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    return 0LL;
  }

  return result;
}

BOOL sub_100D3C6DC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880A60);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880A60);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::Notification Data>::clientRegistered(int, const Notification_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notificati on, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100D3C95C(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101880A60);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                int v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101880A60);
                }
                __int128 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int128 v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                uint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::No tificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFitnessMac hineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100D3CCE4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(__int128 **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  __int128 v12 = *v11;
  __int128 v13 = v11[2];
  *(_OWORD *)(a3 + 16) = v11[1];
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)a3 = v12;
  __int128 v14 = v11[3];
  __int128 v15 = v11[4];
  __int128 v16 = v11[6];
  *(_OWORD *)(a3 + 80) = v11[5];
  *(_OWORD *)(a3 + 96) = v16;
  *(_OWORD *)(a3 + 48) = v14;
  *(_OWORD *)(a3 + 64) = v15;
  __int128 v17 = v11[7];
  __int128 v18 = v11[8];
  __int128 v19 = v11[9];
  *(void *)(a3 + 160) = *((void *)v11 + 20);
  *(_OWORD *)(a3 + 128) = v18;
  *(_OWORD *)(a3 + 144) = v19;
  *(_OWORD *)(a3 + 112) = v17;
  return 1LL;
}

uint64_t sub_100D3CD74(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0xC0uLL);
  __int128 v7 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 136) = *(_OWORD *)(a3 + 112);
  __int128 v8 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 152) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 168) = v8;
  __int128 v9 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a3 + 48);
  __int128 v10 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 104) = v10;
  *(_OWORD *)(v6 + 120) = v7;
  __int128 v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 40) = v11;
  *((void *)v6 + 2) = 0LL;
  *(void *)int v6 = off_101880B70;
  *((void *)v6 + 1) = 0LL;
  *((void *)v6 + 23) = *(void *)(a3 + 160);
  *(_OWORD *)(v6 + 56) = v9;
  *(void *)&__int128 v18 = v6 + 24;
  *((void *)&v18 + 1) = v6;
  int v17 = *a2;
  __int128 v19 = &v17;
  __int128 v12 = sub_10023347C((uint64_t **)(a1 + 56), &v17, (uint64_t)&unk_1012CF090, &v19);
  sub_10005F550((uint64_t)(v12 + 8), &v18);
  __int128 v13 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1))
  {
    __int128 v14 = (unint64_t *)(*((void *)&v18 + 1) + 8LL);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  return 1LL;
}

void sub_100D3CE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100D3CE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0LL;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v5,  a3,  a4,  0LL);
}

void sub_100D3CEE8(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    __int128 v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880A60);
    }
    __int128 v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&_OWORD buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v72 = 2082;
      __int16 v73 = v12;
      __int16 v74 = 2050;
      uint64_t v75 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    unint64_t v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)unint64_t v76 = &v76[8];
      memset(&v76[8], 0, 24);
      __int128 v77 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v76);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v75;
      if (v75)
      {
        p_shared_owners = (unint64_t *)&v75->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v77;
      if (v77)
      {
        int v25 = (unint64_t *)&v77->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v76, *(void **)&v76[8]);
    }

    if (a4)
    {
      __int16 v27 = (char *)operator new(0xC0uLL);
      __int128 v28 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(v27 + 136) = *(_OWORD *)(a3 + 112);
      __int128 v29 = *(_OWORD *)(a3 + 144);
      *(_OWORD *)(v27 + 152) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(v27 + 168) = v29;
      __int128 v30 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v27 + 72) = *(_OWORD *)(a3 + 48);
      __int128 v31 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v27 + 88) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v27 + 104) = v31;
      *(_OWORD *)(v27 + 120) = v28;
      __int128 v32 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v27 + 24) = *(_OWORD *)a3;
      *(_OWORD *)(v27 + 40) = v32;
      *((void *)v27 + 2) = 0LL;
      *(void *)__int16 v27 = off_101880B70;
      *((void *)v27 + 1) = 0LL;
      *((void *)v27 + 23) = *(void *)(a3 + 160);
      *(_OWORD *)(v27 + 56) = v30;
      *(void *)std::string buf = v27 + 24;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      uint64_t v33 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v34 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v36 = sub_100D3DBE4(a3);
    if (a5 == -1)
    {
      sub_100D3DC8C((void *)a1, (int *)a2, v36);
    }

    else
    {
      uint64_t v37 = a1 + 88;
      uint64_t v38 = *(void *)(a1 + 88);
      if (!v38) {
        goto LABEL_48;
      }
      uint64_t v39 = a1 + 88;
      do
      {
        int v40 = *(_DWORD *)(v38 + 32);
        BOOL v41 = v40 < a5;
        if (v40 >= a5) {
          int v42 = (uint64_t *)v38;
        }
        else {
          int v42 = (uint64_t *)(v38 + 8);
        }
        if (!v41) {
          uint64_t v39 = v38;
        }
        uint64_t v38 = *v42;
      }

      while (*v42);
      if (v39 == v37 || *(_DWORD *)(v39 + 32) > a5) {
LABEL_48:
      }
        uint64_t v39 = a1 + 88;
      uint64_t v69 = v39;
      unint64_t v43 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v44 = *a2;
      int v45 = (__n128 *)(a1 + 64);
      do
      {
        int v46 = *(_DWORD *)(v43 + 32);
        BOOL v47 = v46 < v44;
        if (v46 >= v44) {
          uint64_t v48 = (unint64_t *)v43;
        }
        else {
          uint64_t v48 = (unint64_t *)(v43 + 8);
        }
        if (!v47) {
          int v45 = (__n128 *)v43;
        }
        unint64_t v43 = *v48;
      }

      while (*v48);
      if (v45 == v15 || v44 < (signed __int32)v45[2].n128_u32[0])
      {
LABEL_59:
        uint64_t v68 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101880A60);
        }
        uint64_t v49 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v50 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v76, a1, a2);
          if (v76[23] >= 0) {
            int v51 = v76;
          }
          else {
            int v51 = *(_BYTE **)v76;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v50;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v76[23] & 0x80000000) != 0) {
            operator delete(*(void **)v76);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101880A60);
          }
          int v52 = (void *)(a1 + 8);
          uint64_t v53 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v67 >= 0) {
            __int16 v54 = __p;
          }
          else {
            __int16 v54 = (void **)__p[0];
          }
          *(_DWORD *)unint64_t v76 = 136315650;
          *(void *)&v76[4] = v52;
          *(_WORD *)&v76[12] = 1024;
          *(_DWORD *)&v76[14] = a5;
          *(_WORD *)&v76[18] = 2080;
          *(void *)&v76[20] = v54;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v53,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v76,
            28,
            v65);
          uint64_t v56 = v55;
          if (v67 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::Notifica tionData>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notif ication_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type: :NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v56);
          if (v56 != buf) {
            free(v56);
          }
        }

        goto LABEL_83;
      }

      uint64_t v68 = v45;
      if (v39 == v37) {
        goto LABEL_60;
      }
      uint64_t v59 = v45[3].n128_i64[0];
      __int128 v57 = v45 + 3;
      __int16 v58 = (__n128 *)v59;
      if (!v59) {
        goto LABEL_60;
      }
      int v60 = *(_DWORD *)(v39 + 32);
      int v61 = v57;
      do
      {
        int v62 = v58[1].n128_i32[3];
        BOOL v63 = v62 < v60;
        if (v62 >= v60) {
          uint64_t v64 = v58;
        }
        else {
          uint64_t v64 = (__n128 *)&v58->n128_i8[8];
        }
        if (!v63) {
          int v61 = v58;
        }
        __int16 v58 = (__n128 *)v64->n128_u64[0];
      }

      while (v64->n128_u64[0]);
      sub_100D3E060((_BYTE *)a1, (uint64_t)&v69, (uint64_t)&v68, v36);
    }

void sub_100D3D560( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100D3D5AC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880A60);
    }
    double v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880A60);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::Notification Data>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitne ssMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101880A60);
    }
    __int128 v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880A60);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      __int128 v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::Notification Data>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitne ssMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    __int128 v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      __int128 v11 = (void *)(a1 + 8);
      do
      {
        __int128 v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101880A60);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              __int128 v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::string buf = 136315650;
              uint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101880A60);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::Noti ficationData>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, Notification Data_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                __int128 v12 = v18;
              }

              while (!v19);
            }

            __int128 v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            __int128 v10 = v26;
          }

          while (!v19);
        }

        __int128 v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100D3DB58(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D3E630(a1);
  operator delete(v1);
}

id sub_100D3DB6C(uint64_t a1, int a2, void *a3)
{
  id result = sub_100D3E18C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100D3DBB8(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

CLCppContainer *sub_100D3DBE4(uint64_t a1)
{
  double v2 = operator new(0xA8uLL);
  __int128 v3 = *(_OWORD *)(a1 + 144);
  v2[8] = *(_OWORD *)(a1 + 128);
  v2[9] = v3;
  *((void *)v2 + 20) = *(void *)(a1 + 160);
  __int128 v4 = *(_OWORD *)(a1 + 80);
  v2[4] = *(_OWORD *)(a1 + 64);
  v2[5] = v4;
  __int128 v5 = *(_OWORD *)(a1 + 112);
  v2[6] = *(_OWORD *)(a1 + 96);
  v2[7] = v5;
  __int128 v6 = *(_OWORD *)(a1 + 16);
  _OWORD *v2 = *(_OWORD *)a1;
  v2[1] = v6;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  v2[2] = *(_OWORD *)(a1 + 32);
  unsigned __int8 v2[3] = v7;
  uint64_t v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472LL;
  __int128 v11 = sub_100D3E17C;
  __int128 v12 = &unk_10181D3D0;
  __int128 v13 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100D3DC8C(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    __int128 v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          __int128 v12 = (uint64_t *)v4;
        }
        else {
          __int128 v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        int v51 = v9;
        id v13 = sub_100D3E18C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        __int128 v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v50 = v19;
              sub_100D3E060(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int128 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int128 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              int v51 = v29;
              uint64_t v34 = v29[6];
              __int128 v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                unint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    uint64_t v39 = (uint64_t *)v36;
                  }
                  else {
                    uint64_t v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    unint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      __int128 v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  unint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      __int128 v14 = v43;
                      unint64_t v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      __int128 v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      unint64_t v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              uint64_t v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101880A60);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                __int128 v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101880A60);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::Notificati onData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFitnessMa chineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData , NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_100D3E060(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    __int128 v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100D3E18C(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    __int128 v14 = (int *)(*(void *)a2 + 32LL);
    __int128 v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_100D3E13C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101880B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D3E150(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101880B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100D3E17C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_100D3E18C(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100D3E204(a1);
  }
  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_100D3E3BC(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100D3E204(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100D3E590((uint64_t)&v8, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880BB0);
    }
    uint64_t v3 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    *(_DWORD *)std::string buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0LL;
    __int16 v13 = 2080;
    unint64_t v14 = 0x800000010135CD99LL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880BB0);
    }
    uint64_t v7 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT)) {
      return 0LL;
    }
    *(_DWORD *)std::string buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0LL;
    __int16 v13 = 2080;
    unint64_t v14 = 0x800000010135CD99LL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }

  _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has cha nged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
  return 0LL;
}

id sub_100D3E3BC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880BB0);
    }
    uint64_t v3 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x800000010135CD99LL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101880BB0);
    }
    uint64_t v7 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x800000010135CD99LL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }

  _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has cha nged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  (uint8_t *)&v8,  0x20u);
  return 0LL;
}

id sub_100D3E590(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D4550))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)168) {
      sub_10126C690();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_100D3E604(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100D3E630(uint64_t a1)
{
  *(void *)a1 = off_101880BE0;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_100D3E690(uint64_t a1)
{
  id v2 = operator new(0xA8uLL);
  __int128 v3 = *(_OWORD *)(a1 + 144);
  v2[8] = *(_OWORD *)(a1 + 128);
  v2[9] = v3;
  *((void *)v2 + 20) = *(void *)(a1 + 160);
  __int128 v4 = *(_OWORD *)(a1 + 80);
  v2[4] = *(_OWORD *)(a1 + 64);
  v2[5] = v4;
  __int128 v5 = *(_OWORD *)(a1 + 112);
  v2[6] = *(_OWORD *)(a1 + 96);
  v2[7] = v5;
  __int128 v6 = *(_OWORD *)(a1 + 16);
  _OWORD *v2 = *(_OWORD *)a1;
  v2[1] = v6;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  v2[2] = *(_OWORD *)(a1 + 32);
  unsigned __int8 v2[3] = v7;
  id v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472LL;
  uint64_t v11 = sub_100D3E738;
  __int16 v12 = &unk_10181D3D0;
  unint64_t v13 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100D3E738(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_100D3E748()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199DE00, (void *)&_mh_execute_header);
}

uint64_t sub_100D3E78C(uint64_t a1)
{
  *(void *)a1 = off_101880C08;
  *(void *)(a1 + 8) = 0xBFF0000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 31) = 0;
  *(void *)(a1 + 48) = 0xBFF0000000000000LL;
  sub_100D2D9A4(a1 + 56);
  unsigned int v2 = 5489;
  *(_DWORD *)(a1 + 96) = 5489;
  uint64_t v3 = 1LL;
  for (uint64_t i = 25LL; i != 648; ++i)
  {
    int v5 = 1812433253 * (v2 ^ (v2 >> 30));
    unsigned int v2 = v5 + v3;
    *(_DWORD *)(a1 + 4 * i) = i + v5 - 24;
    ++v3;
  }

  unsigned int v6 = 0;
  *(void *)(a1 + 2632) = 0LL;
  *(void *)(a1 + 2624) = 0LL;
  *(void *)(a1 + 2592) = 0LL;
  *(void *)(a1 + 2608) = 0LL;
  *(void *)(a1 + 2600) = 0LL;
  *(void *)(a1 + 2616) = a1 + 2624;
  *(void *)(a1 + 2640) = 0xBFF0000000000000LL;
  uint64_t v7 = 1LL;
  uint64_t v8 = 25LL;
  *(_DWORD *)(a1 + 96) = 0;
  do
  {
    int v9 = 1812433253 * (v6 ^ (v6 >> 30));
    unsigned int v6 = v9 + v7;
    *(_DWORD *)(a1 + 4 * v8) = v8 + v9 - 24;
    ++v7;
    ++v8;
  }

  while (v8 != 648);
  *(void *)(a1 + 2592) = 0LL;
  sub_100B7E8E4();
  return a1;
}

void sub_100D3E890(_Unwind_Exception *a1)
{
}

uint64_t sub_100D3E8B8(uint64_t a1)
{
  *(void *)a1 = off_101880C08;
  if (!*(_BYTE *)(a1 + 33))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    uint64_t v2 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLMM,CLGCZ,destroy geocodec malloc zone,~CLGeoMapFeatureAccessGeometry()",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101880CB0);
      }
      v10[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  0LL,  "CLMM,CLGCZ,destroy geocodec malloc zone,~CLGeoMapFeatureAccessGeometry()",  v10,  2);
      int v9 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual CLMapGeometry::~CLMapGeometry()", "%s\n", v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      sub_100D3FF40(v3);
    }
    __int128 v4 = *(void **)(a1 + 2600);
    if (v4) {
      [v4 clearAllTiles];
    }
    int v5 = *(void **)(a1 + 2608);
    if (v5)
    {

      *(void *)(a1 + 2608) = 0LL;
    }

    unsigned int v6 = *(void **)(a1 + 2600);
    if (v6)
    {

      *(void *)(a1 + 2600) = 0LL;
    }
  }

  sub_100D405A8(a1 + 2616, *(char **)(a1 + 2624));
  sub_10000AE14(a1 + 16);
  return a1;
}

void sub_100D3EAAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

id sub_100D3EAB8(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    sub_100D3FF40(v4);
  }
  id result = *(id *)(a1 + 2600);
  switch(a2)
  {
    case 0:
      id result = [result clearRoadTiles];
      break;
    case 1:
      id result = [result clearBuildingTiles];
      break;
    case 2:
      id result = _[result clearTransitTiles];
      break;
    case 3:
      id result = _[result clearRunningTrackTiles];
      break;
    case 4:
      id result = [result clearAllTiles];
      break;
    default:
      return result;
  }

  return result;
}

double sub_100D3EB54(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  else {
    std::string __p = *(std::string *)(v4 + 48);
  }
  std::string::operator=((std::string *)(a1 + 128), &__p);
  uint64_t v5 = *a2;
  *(void *)(a1 + 112) = *(void *)*a2;
  *(void *)(a1 + 120) = *(void *)(v5 + 20);
  *(_OWORD *)(a1 + 152) = *((_OWORD *)a2 + 2);
  double result = *((float *)a2 + 6);
  *(double *)(a1 + 168) = result;
  return result;
}

void sub_100D3EBEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D3EC08(uint64_t a1)
{
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101880CB0);
  }
  uint64_t v2 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 36);
    int v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)std::string buf = 67240448;
    int v13 = v3;
    __int16 v14 = 1026;
    int v15 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLMM,MapsAPICallCount,%{public}d,MapsAPIQueryContinuousFailCount,%{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    int v5 = *(_DWORD *)(a1 + 36);
    int v6 = *(_DWORD *)(a1 + 40);
    v9[0] = 67240448;
    v9[1] = v5;
    __int16 v10 = 1026;
    int v11 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,MapsAPICallCount,%{public}d,MapsAPIQueryContinuousFailCount,%{public}d",  v9,  14);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMapGeometry::logMapsAPICallCount() const", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

BOOL sub_100D3EDD0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 33) && (uint64_t v2 = *(void *)(a1 + 16)) != 0) {
    int v3 = (int *)(v2 + 124);
  }
  else {
    int v3 = (int *)(a1 + 40);
  }
  int v4 = *v3;
  double v5 = *(double *)(a1 + 48);
  if (v5 < 0.0)
  {
    double v5 = sub_101171D4C();
    *(double *)(a1 + 48) = v5;
  }

  double v6 = vabdd_f64(v5, sub_101171D4C());
  if (v6 < 60.0)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    int v18 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
      int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
      BOOL v21 = "road";
      *(_DWORD *)std::string buf = 67240962;
      int v37 = v19;
      __int16 v38 = 2082;
      if (v20) {
        BOOL v21 = "building";
      }
      uint64_t v39 = v21;
      __int16 v40 = 1026;
      int v41 = v4;
      __int16 v42 = 2050;
      double v43 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "CLMM,shouldBackOffFromNetworkAccess,1,geometryType,%{public}d,type,%{public}s,failCount,%{public}d,timeSinceLast Fail,%{public}.1lf",  buf,  0x22u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101880CB0);
      }
      uint64_t v22 = qword_1019348B8;
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
      int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
      int v25 = "road";
      int v28 = 67240962;
      int v29 = v23;
      __int16 v30 = 2082;
      if (v24) {
        int v25 = "building";
      }
      BOOL v31 = v25;
      __int16 v32 = 1026;
      int v33 = v4;
      __int16 v34 = 2050;
      double v35 = v6;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  2LL,  "CLMM,shouldBackOffFromNetworkAccess,1,geometryType,%{public}d,type,%{public}s,failCount,%{public}d,timeSinceLast Fail,%{public}.1lf",  &v28,  34);
      uint64_t v27 = (uint8_t *)v26;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "%s\n", v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    return 1LL;
  }

  else
  {
LABEL_9:
    *(void *)(a1 + 48) = 0xBFF0000000000000LL;
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    uint64_t v7 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
      __int16 v10 = "road";
      *(_DWORD *)std::string buf = 67240706;
      int v37 = v8;
      if (v9) {
        __int16 v10 = "building";
      }
      __int16 v38 = 2082;
      uint64_t v39 = v10;
      __int16 v40 = 1026;
      int v41 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "CLMM,shouldBackOffFromNetworkAccess,0,geometryType,%{public}d,type,%{public}s,failCount,%{public}d",  buf,  0x18u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101880CB0);
      }
      uint64_t v12 = qword_1019348B8;
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
      int v15 = "road";
      int v28 = 67240706;
      int v29 = v13;
      if (v14) {
        int v15 = "building";
      }
      __int16 v30 = 2082;
      BOOL v31 = v15;
      __int16 v32 = 1026;
      int v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  2LL,  "CLMM,shouldBackOffFromNetworkAccess,0,geometryType,%{public}d,type,%{public}s,failCount,%{public}d",  &v28,  24);
      uint64_t v17 = (uint8_t *)v16;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "%s\n", v16);
      if (v17 != buf) {
        free(v17);
      }
      return 0LL;
    }
  }

  return result;
}

void *sub_100D3F2A8(void *result, int a2)
{
  uint64_t v2 = (uint64_t)result;
  if (*((_BYTE *)result + 33))
  {
    uint64_t v3 = result[2];
    if (v3) {
      *(_BYTE *)(v3 + 192) = a2;
    }
  }

  else
  {
    BOOL result = (void *)result[325];
    if (result)
    {
      if (a2)
      {
        BOOL v4 = !sub_100D3EDD0(v2);
        BOOL result = *(void **)(v2 + 2600);
      }

      else
      {
        BOOL v4 = 0LL;
      }

      return [result setAllowNetworkTileLoad:v4];
    }
  }

  return result;
}

uint64_t sub_100D3F30C(uint64_t a1, double a2, CLLocationDegrees a3, CLLocationDegrees a4)
{
  if (!*(_BYTE *)(a1 + 33)) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0LL;
  }
  if (*(_BYTE *)(v5 + 192))
  {
    BOOL v9 = sub_100D3EDD0(a1);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v9) {
      *(_BYTE *)(v5 + 192) = 0;
    }
  }

  return sub_1009751F0(v5, 0, 0, 1LL, a2, a3, a4, *(double *)(v5 + 176));
}

BOOL sub_100D3F3A8(uint64_t a1, uint64_t a2, double **a3, char a4, double *a5, int a6)
{
  if (!a6) {
    return 0LL;
  }
  uint64_t v10 = 8LL * a6;
  double v11 = 0.0;
  do
  {
    double v12 = *a5++;
    double v11 = v11 + v12;
    v10 -= 8LL;
  }

  while (v10);
  int v14 = *a3;
  int v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }

  double v17 = v11 / (double)a6;
  if (!v14)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    BOOL v21 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)buf, 2u);
    }

    double v19 = 0.0;
    if (!sub_1002921D0(115, 0)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    LOWORD(v83[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM, NULL road",  v83,  2);
    int v23 = (std::string *)v22;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [C oordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]",  "%s\n",  v22);
    goto LABEL_106;
  }

  uint64_t v18 = (*((void *)v14 + 18) - *((void *)v14 + 17)) >> 4;
  if ((int)v18 <= 0)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    int v24 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateProjections,CoordinateCount is 0",  (uint8_t *)buf,  2u);
    }

    double v19 = 0.0;
    if (!sub_1002921D0(115, 2)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    LOWORD(v83[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateProjections,CoordinateCount is 0",  v83,  2);
    int v23 = (std::string *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [C oordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]",  "%s\n",  v25);
    goto LABEL_106;
  }

  double v19 = 0.0;
  if ((_DWORD)v18 == 1)
  {
    char v20 = 1;
    goto LABEL_39;
  }

  sub_1001AC068(v14);
  uint64_t v26 = (uint64_t)(*((void *)v14 + 21) - *((void *)v14 + 20)) >> 3;
  if (v26 != (_DWORD)v18 - 1)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    __int16 v34 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateProjections,inconsistent array size",  (uint8_t *)buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    LOWORD(v83[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateProjections,inconsistent array size",  v83,  2);
    int v23 = (std::string *)v80;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [C oordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]",  "%s\n",  v80);
    goto LABEL_106;
  }

  sub_1001AC068(v14);
  uint64_t v27 = (double *)(a1 + 56);
  if (v17 < 0.000001)
  {
    int v28 = (double *)*((void *)v14 + 17);
    double v30 = *v28;
    double v29 = v28[1];
    double v31 = v28[2];
    double v32 = v28[3];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v82 = 0LL;
    v83[0] = 0.0;
    sub_100D2DA44(v27, (double *)buf, v83, (double *)&v82, v30, v29, 0.0, v31, v32, 0.0);
LABEL_30:
    double v33 = atan2(v83[0], *(double *)&buf[0].__r_.__value_.__l.__data_);
    if (v33 < 0.0) {
      double v33 = v33 + 6.28318531;
    }
    double v19 = v33 * 57.2957795;
LABEL_86:
    char v20 = 1;
    if (!v13) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }

  if (v17 >= 0.999999)
  {
    uint64_t v53 = *((void *)v14 + 17) + 16 * v26;
    double v30 = *(double *)v53;
    double v29 = *(double *)(v53 + 8);
    double v54 = sub_1004DD7AC(v27, *(double *)(v53 - 16), *(double *)(v53 - 8), *(double *)v53, v29);
LABEL_85:
    double v19 = v54;
    goto LABEL_86;
  }

  int v45 = (double *)*((void *)v14 + 20);
  int v46 = (double *)*((void *)v14 + 21);
  if (v45 == v46)
  {
LABEL_76:
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    int v51 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateProjections,Could not interpolate to intended projection",  (uint8_t *)buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    LOWORD(v83[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateProjections,Could not interpolate to intended projection",  v83,  2);
    int v23 = (std::string *)v52;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [C oordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]",  "%s\n",  v52);
    goto LABEL_106;
  }

  double v47 = 0.0;
  int v48 = 2;
  uint64_t v49 = 24LL;
  while (1)
  {
    double v50 = *v45 / v14[5];
    if (vabdd_f64(v17, v47 + v50) < 0.000001) {
      break;
    }
    if (v47 + v50 > v17)
    {
      char v66 = (double *)(*((void *)v14 + 17) + v49);
      double v68 = *(v66 - 3);
      double v67 = *(v66 - 2);
      double v69 = *(v66 - 1);
      double v70 = sub_100D2D3E0(v67, *v66);
      double v71 = (v17 - v47) / v50;
      sub_100292950(v67 + v70 * v71);
      double v29 = v72;
      __int16 v73 = (double *)(*((void *)v14 + 17) + v49);
      double v74 = *(v73 - 3);
      double v75 = *(v73 - 2);
      double v76 = *(v73 - 1);
      double v77 = *v73;
      buf[0].__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v82 = 0LL;
      v83[0] = 0.0;
      sub_100D2DA44(v27, (double *)buf, v83, (double *)&v82, v74, v75, 0.0, v76, v77, 0.0);
      double v30 = v68 + (v69 - v68) * v71;
      goto LABEL_30;
    }

    ++v45;
    v49 += 16LL;
    ++v48;
    double v47 = v47 + v50;
    if (v45 == v46) {
      goto LABEL_76;
    }
  }

  if (v48 < (int)v18)
  {
    int v55 = (double *)(*((void *)v14 + 17) + v49);
    double v30 = *(v55 - 1);
    double v29 = *v55;
    double v56 = *(v55 - 3);
    double v57 = *(v55 - 2);
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v82 = 0LL;
    v83[0] = 0.0;
    sub_100D2DA44(v27, (double *)buf, v83, (double *)&v82, v56, v57, 0.0, v30, v29, 0.0);
    double v58 = v83[0];
    double v59 = *(double *)&buf[0].__r_.__value_.__l.__data_;
    uint64_t v60 = *((void *)v14 + 17) + v49;
    double v61 = *(double *)(v60 + 8);
    double v62 = *(double *)(v60 + 16);
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v82 = 0LL;
    v83[0] = 0.0;
    sub_100D2DA44(v27, (double *)buf, v83, (double *)&v82, v30, v29, 0.0, v61, v62, 0.0);
    double v63 = atan2(v58, v59);
    if (v63 < 0.0) {
      double v63 = v63 + 6.28318531;
    }
    double v64 = v63 * 57.2957795;
    double v65 = atan2(v83[0], *(double *)&buf[0].__r_.__value_.__l.__data_);
    if (v65 < 0.0) {
      double v65 = v65 + 6.28318531;
    }
    sub_1002928C4(v64, v65 * 57.2957795);
    goto LABEL_85;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101880CB0);
  }
  double v78 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_ERROR,  "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount",  (uint8_t *)buf,  2u);
  }

  double v19 = 0.0;
  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    LOWORD(v83[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount",  v83,  2);
    int v23 = (std::string *)v79;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [C oordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]",  "%s\n",  v79);
LABEL_106:
    if (v23 != buf) {
      free(v23);
    }
  }

void sub_100D3FF0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D3FF40(uint64_t a1)
{
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 256) = 0LL;
  sub_100D4063C(a1 + 264, *(void **)(a1 + 272));
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 264) = a1 + 272;
  sub_100D405A8(a1 + 288, *(char **)(a1 + 296));
  *(void *)(a1 + 296) = 0LL;
  *(void *)(a1 + 304) = 0LL;
  *(void *)(a1 + 288) = a1 + 296;
  *(void *)(a1 + 320) = 0LL;
  uint64_t v3 = *(void *)(a1 + 328);
  for (uint64_t result = *(void *)(a1 + 336); result != v3; uint64_t result = sub_10000AE14(result - 16))
    ;
  *(void *)(a1 + 336) = v3;
  return result;
}

uint64_t sub_100D3FFD0(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(uint64_t, double, double, double))(*(void *)a1 + 40LL))( a1,  *(double *)(a2 + 56),  *(double *)(a2 + 64),  a3);
}

void sub_100D3FFE4(uint64_t a1, double a2, double a3, double a4)
{
  if (!*(_BYTE *)(a1 + 33))
  {
    uint64_t v5 = *(void **)(a1 + 2600);
    if (v5)
    {
      if ([v5 allowNetworkTileLoad])
      {
        ++*(_DWORD *)(a1 + 36);
        _objc_msgSend(*(id *)(a1 + 2600), "preloadRoadTilesNear:radius:completionHandler:", &stru_101880C80, a2, a3, a4);
      }
    }

    else
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101880CB0);
      }
      BOOL v9 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "CLMM,provideCacheHint,fGEOMapFeatureAccess is unexpectedly nil",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101880CB0);
        }
        v12[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,provideCacheHint,fGEOMapFeatureAccess is unexpectedly nil",  v12,  2);
        double v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLMapGeometry::provideCacheHint(double, double, double)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }
    }
  }

void sub_100D401F8(id a1, NSError *a2)
{
  if (a2)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    uint64_t v3 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134349571;
      NSInteger v14 = -[NSError code](a2, "code");
      __int16 v15 = 2114;
      unint64_t v16 = -[NSError domain](a2, "domain");
      __int16 v17 = 2113;
      uint64_t v18 = -[NSError localizedDescription](a2, "localizedDescription");
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "CLMM,Warning,provideCacheHint reported error:%{public}lld (%{public}@) %{private}@",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101880CB0);
      }
      uint64_t v4 = qword_1019348B8;
      int v7 = 134349571;
      NSInteger v8 = -[NSError code](a2, "code");
      __int16 v9 = 2114;
      uint64_t v10 = -[NSError domain](a2, "domain");
      __int16 v11 = 2113;
      double v12 = -[NSError localizedDescription](a2, "localizedDescription");
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  2LL,  "CLMM,Warning,provideCacheHint reported error:%{public}lld (%{public}@) %{private}@",  &v7,  32);
      double v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMapGeometry::provideCacheHint(double, double, double)_block_invoke",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

uint64_t sub_100D40420()
{
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101880CB0);
  }
  unsigned __int8 v0 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_ERROR,  "Base function called for moveOnRouteRoads",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "Base function called for moveOnRouteRoads",  v4,  2);
    uint64_t v3 = (uint8_t *)v2;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLMapGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::Distance QueryResultList &, double, int &) const",  "%s\n",  v2);
    if (v3 != buf) {
      free(v3);
    }
  }

  return 0LL;
}

void sub_100D405A8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100D405A8(a1, *(void *)a2);
    sub_100D405A8(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 80);
    sub_10004CC28(&v4);
    uint64_t v4 = (void **)(a2 + 56);
    sub_10004CC28(&v4);
    operator delete(a2);
  }

void sub_100D40610(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100D4063C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100D4063C(a1, *a2);
    sub_100D4063C(a1, a2[1]);
    sub_10000AE14((uint64_t)(a2 + 6));
    operator delete(a2);
  }

uint64_t sub_100D40684(uint64_t a1)
{
  if (*(void *)(a1 + 88))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    uint64_t v2 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLGCZ,destroy geocodec malloc zone,~CLGeoMapGeometry()",  buf,  2u);
    }

    uint64_t v3 = sub_1002921D0(115, 2);
    if ((_DWORD)v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101880CB0);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  0LL,  "CLGCZ,destroy geocodec malloc zone,~CLGeoMapGeometry()",  v9,  2);
      NSInteger v8 = (uint8_t *)v7;
      uint64_t v3 = sub_10029211C("Generic", 1LL, 0, 2LL, "CLGeoMapGeometry::~CLGeoMapGeometry()", "%s\n", v7);
      if (v8 != buf) {
        free(v8);
      }
    }

    GEOResetGeoCodecsAllocator(v3);

    *(void *)(a1 + 88) = 0LL;
  }

  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {

    *(void *)(a1 + 96) = 0LL;
  }

  uint64_t v5 = *(void **)(a1 + 104);
  if (v5)
  {

    *(void *)(a1 + 104) = 0LL;
  }

  sub_1002E4CB0(a1);
  return a1;
}

void sub_100D40868(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

double sub_100D40874(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 512) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 704) = xmmword_10135CE60;
  *(_OWORD *)(a1 + 720) = unk_10135CE70;
  *(_OWORD *)(a1 + 736) = xmmword_10135CE80;
  *(_OWORD *)(a1 + 748) = *(__int128 *)((char *)&xmmword_10135CE80 + 12);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 552) = 0xFFF0000000000000LL;
  *(void *)(a1 + 600) = 0xFFF0000000000000LL;
  *(int64x2_t *)(a1 + 608) = vdupq_n_s64(0xFFF0000000000000LL);
  *(void *)(a1 + 624) = 0xFFF0000000000000LL;
  *(void *)(a1 + 560) = 0x3F747AE147AE147BLL;
  *(void *)(a1 + 328) = 0LL;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 0;
  *(void *)(a1 + 528) = 0LL;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 568) = xmmword_10135CEA0;
  *(_OWORD *)(a1 + 584) = unk_10135CEB0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 695) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  return result;
}

void *sub_100D40980(double *a1, uint64_t a2)
{
  float64_t v69 = 0.0;
  double v70 = 0.0;
  double v4 = *(double *)(a2 + 24);
  if (v4 <= 0.0)
  {
    double v4 = a1[30];
    if (v4 <= 0.0)
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      uint64_t v5 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "[RunningSpeedKF] feedStepCountEntry - firstStepTime & previous step count unset. Assuming 1 epoch prior",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101880CD0);
        }
        LOWORD(v71) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "[RunningSpeedKF] feedStepCountEntry - firstStepTime & previous step count unset. Assuming 1 epoch prior",  &v71,  2);
        double v57 = (uint8_t *)v56;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)",  "%s\n",  v56);
        if (v57 != buf) {
          free(v57);
        }
      }

      double v4 = *(double *)(a2 + 16) + -2.56;
    }
  }

  double v6 = *(double *)(a2 + 232);
  double v7 = *(double *)(a2 + 48);
  double v65 = v6 - v4;
  double v66 = *(double *)(a2 + 256);
  if (v7 <= 0.0) {
    double v8 = a1[66];
  }
  else {
    double v8 = *(double *)(a2 + 280) / v7;
  }
  double v63 = *(double *)(a2 + 232);
  double v64 = vabdd_f64(a1[64], v4);
  int v68 = 0;
  char v67 = 0;
  BOOL v9 = v7 <= 0.0;
  if (v66 <= 0.0) {
    BOOL v9 = 1;
  }
  int v10 = v65 <= 0.0 || v9;
  if (v10 == 1)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    __int16 v11 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218496;
      *(double *)double v78 = v7;
      *(_WORD *)&v78[8] = 2048;
      *(double *)&_BYTE v78[10] = v66;
      *(_WORD *)&v78[18] = 2048;
      *(double *)&v78[20] = v65;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[RunningSpeedKF] feedStepCountEntry - zero deltaPedDist (%.2f), deltaCalPedDist (%.2f) and/or deltaTime (%.2f)",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      int v71 = 134218496;
      double v72 = v7;
      __int16 v73 = 2048;
      double v74 = v66;
      __int16 v75 = 2048;
      double v76 = v65;
      LODWORD(v61) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "[RunningSpeedKF] feedStepCountEntry - zero deltaPedDist (%.2f), deltaCalPedDist (%.2f) and/or deltaTime (%.2f)",  COERCE_DOUBLE(&v71),  v61,  v62);
      uint64_t v53 = (uint8_t *)v52;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)",  "%s\n",  v52);
      if (v53 != buf) {
        free(v53);
      }
    }

    BOOL v12 = 0;
    goto LABEL_37;
  }

  if (!*(_BYTE *)(*(void *)a1 + 80LL))
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    NSInteger v14 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      int v15 = *(unsigned __int8 *)(*(void *)a1 + 80LL);
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)double v78 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "[RunningSpeedKF] feedStepCountEntry - odometerSpeed is unavailable (isActive=%{public}d)",  buf,  8u);
    }

    double v13 = 2.96714;
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      int v58 = *(unsigned __int8 *)(*(void *)a1 + 80LL);
      int v71 = 67240192;
      LODWORD(v72) = v58;
      LODWORD(v61) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "[RunningSpeedKF] feedStepCountEntry - odometerSpeed is unavailable (isActive=%{public}d)",  &v71,  *(void *)&v61);
      uint64_t v60 = (uint8_t *)v59;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)",  "%s\n",  v59);
      if (v60 != buf) {
        free(v60);
      }
    }

    goto LABEL_33;
  }

  double v13 = 2.96714;
  if (!sub_100D414A4(a1, &v68, &v67, v6) || !sub_100D417E8((void **)a1, &v69, v4, v63))
  {
LABEL_33:
    BOOL v12 = 0;
    goto LABEL_34;
  }

  sub_100D42080((uint64_t)a1, &v69, v68, v66);
  BOOL v12 = a1[71] < 100.0;
  double v13 = dbl_10135CE40[a1[71] < 100.0];
LABEL_34:
  double v16 = 0.148357;
  if (v64 < 8.25) {
    double v16 = v13;
  }
  a1[74] = v16;
LABEL_37:
  a1[69] = a1[69] + a1[70];
  double v17 = sub_100D42294(a1);
  double v18 = sub_100D428EC(a1);
  if (*(_BYTE *)(a2 + 248))
  {
    if (v8 > 0.0)
    {
      if (*(_BYTE *)(a2 + 288))
      {
        double v20 = v18;
        if (vabdd_f64(v8, a1[66]) > 0.001 && vabdd_f64(v18, v17) > 0.1)
        {
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101880CD0);
          }
          BOOL v21 = (os_log_s *)qword_101934518;
          if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = *((void *)a1 + 66);
            int v23 = *(unsigned __int8 *)(a2 + 288);
            *(_DWORD *)std::string buf = 68290306;
            *(_DWORD *)double v78 = 0;
            *(_WORD *)&v78[4] = 2082;
            *(void *)&_BYTE v78[6] = "";
            *(_WORD *)&v78[14] = 2050;
            *(double *)&v78[16] = v8;
            *(_WORD *)&v78[24] = 2050;
            *(void *)&v78[26] = v22;
            __int16 v79 = 1026;
            int v80 = v23;
            __int16 v81 = 1026;
            int v82 = (int)v17;
            __int16 v83 = 1026;
            int v84 = (int)v20;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:[RunningSpeedKF] Reset fDistanceBuffer, currentkValue:%{public}f, previ ouskValue:%{public}f, energyIsCalibrated:%{public}u, biasFactor:%{public}d, biasFactorInst antaneous:%{public}d}",  buf,  0x38u);
          }

          int v24 = (void **)*((void *)a1 + 80);
          uint64_t v25 = *((void *)a1 + 81);
          a1[84] = 0.0;
          unint64_t v26 = v25 - (void)v24;
          if (v26 >= 0x11)
          {
            do
            {
              operator delete(*v24);
              int v24 = (void **)(*((void *)a1 + 80) + 8LL);
              *((void *)a1 + 80) = v24;
              unint64_t v26 = *((void *)a1 + 81) - (void)v24;
            }

            while (v26 > 0x10);
          }

          double v17 = 0.0;
          if (v26 >> 3 == 1)
          {
            uint64_t v27 = 85LL;
          }

          else
          {
            if (v26 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v27 = 170LL;
          }

          *((void *)a1 + 83) = v27;
        }
      }
    }
  }

BOOL sub_100D414A4(void *a1, _DWORD *a2, _BYTE *a3, double a4)
{
  *a2 = 0;
  if (((*(uint64_t (**)(void, char *))(*(void *)*a1 + 24LL))(*a1, v16) & 1) == 0)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    double v8 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v23 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "[RunningSpeedKF] No recent odometer value (%{public}.2f)",  buf,  0xCu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    int v20 = 134349056;
    double v21 = a4;
    double v9 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "[RunningSpeedKF] No recent odometer value (%{public}.2f)",  &v20,  12);
    __int16 v11 = v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLPedometer::RunningSpeedKF::getOdometerProperties(CFAbsoluteTime, CLOdometerQuality::Quality &, BOOL &) const",  "%s\n",  v9);
LABEL_21:
    if (v11 != buf) {
      free(v11);
    }
    return 0LL;
  }

  *a3 = v19;
  *a2 = v18;
  if (v17 > 0.0) {
    return 1LL;
  }
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101880CD0);
  }
  BOOL v12 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v23 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] invalid odometer value: %.2f",  buf,  0xCu);
  }

  BOOL v13 = sub_1002921D0(115, 0);
  BOOL result = 0LL;
  if (v13)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    int v20 = 134217984;
    double v21 = v17;
    double v14 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] invalid odometer value: %.2f",  COERCE_DOUBLE(&v20));
    __int16 v11 = v15;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPedometer::RunningSpeedKF::getOdometerProperties(CFAbsoluteTime, CLOdometerQuality::Quality &, BOOL &) const",  "%s\n",  v14);
    goto LABEL_21;
  }

  return result;
}

BOOL sub_100D417E8(void **a1, double *a2, double a3, double a4)
{
  *a2 = 0.0;
  a2[1] = 0.0;
  if (a3 > a4)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    double v6 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134349312;
      double v48 = a3;
      __int16 v49 = 2050;
      double v50 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] calculateDeltaOdometer - time rollback! t1,%{public}f,t2,%{public}f",  buf,  0x16u);
    }

    BOOL v7 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      int v35 = 134349312;
      double v36 = a3;
      __int16 v37 = 2050;
      double v38 = a4;
      double v10 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] calculateDeltaOdometer - time rollback! t1,%{public}f,t2,%{public}f",  &v35,  22);
LABEL_20:
      BOOL v13 = v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPedometer::RunningSpeedKF::calculateDeltaOdometer(CFAbsoluteTime, CFAbsoluteTime, DeltaOdometerResult &) const",  "%s\n",  v10);
LABEL_21:
      if (v13 != buf) {
        free(v13);
      }
      return 0LL;
    }

    return result;
  }

  if (a3 == a4)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    __int16 v11 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v48 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] calculateDeltaOdometer - time did not advance! t=%{public}f",  buf,  0xCu);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      int v35 = 134349056;
      double v36 = a3;
      double v10 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] calculateDeltaOdometer - time did not advance! t=%{public}f",  &v35,  12);
      goto LABEL_20;
    }

    return result;
  }

  double v33 = 0.0;
  double v34 = 0.0;
  double v31 = 0.0;
  double v32 = 0.0;
  BOOL v16 = sub_100D432F8(a1, &v34, &v32, a3);
  if (!v16 || !sub_100D432F8(a1, &v33, &v31, a4))
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    uint64_t v25 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134349312;
      double v48 = a3;
      __int16 v49 = 2050;
      double v50 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[RunningSpeedKF] calculateDeltaOdometer - #warning: failed to interpolate odometer between (startTime, %{public} f, endTime, %{public}f)",  buf,  0x16u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    int v35 = 134349312;
    double v36 = a3;
    __int16 v37 = 2050;
    double v38 = a4;
    double v24 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "[RunningSpeedKF] calculateDeltaOdometer - #warning: failed to interpolate odometer between (startTime, %{pub lic}f, endTime, %{public}f)",  &v35,  22);
LABEL_61:
    BOOL v13 = v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLPedometer::RunningSpeedKF::calculateDeltaOdometer(CFAbsoluteTime, CFAbsoluteTime, DeltaOdometerResult &) const",  "%s\n",  v24);
    goto LABEL_21;
  }

  double v18 = v33;
  double v17 = v34;
  double v19 = v33 - v34;
  double v21 = v31;
  double v20 = v32;
  if (v33 - v34 >= 0.0 && v31 - v32 >= 0.0)
  {
    if (v31 - v32 != 0.0)
    {
      if (v19 == 0.0)
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101880CD0);
        }
        int v28 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 134349569;
          double v48 = a3;
          __int16 v49 = 2050;
          double v50 = a4;
          __int16 v51 = 2049;
          double v52 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "[RunningSpeedKF] calculateDeltaOdometer - No change in odometer distance (startTime=%{public}.2f, endTime=%{ public}.2f, outDist=%{private}.2f)",  buf,  0x20u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101880CD0);
          }
          int v35 = 134349569;
          double v36 = a3;
          __int16 v37 = 2050;
          double v38 = a4;
          __int16 v39 = 2049;
          double v40 = v17;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "[RunningSpeedKF] calculateDeltaOdometer - No change in odometer distance (startTime=%{public}.2f, endTime=%{ public}.2f, outDist=%{private}.2f)",  &v35,  32);
          int v30 = (uint8_t *)v29;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLPedometer::RunningSpeedKF::calculateDeltaOdometer(CFAbsoluteTime, CFAbsoluteTime, DeltaOdometerResult &) const",  "%s\n",  v29);
          if (v30 != buf) {
            free(v30);
          }
        }
      }

      *a2 = v19;
      a2[1] = v21 - v20;
      return 1LL;
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    uint64_t v22 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134349568;
      double v48 = a3;
      __int16 v49 = 2050;
      double v50 = a4;
      __int16 v51 = 2050;
      double v52 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "[RunningSpeedKF] calculateDeltaOdometer - #warning: No change in time (startTime=%{public}.2f, endTime=%{public} .2f, outTime=%{public}.2f)",  buf,  0x20u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    int v35 = 134349568;
    double v36 = a3;
    __int16 v37 = 2050;
    double v38 = a4;
    __int16 v39 = 2050;
    double v40 = v20;
    double v24 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "[RunningSpeedKF] calculateDeltaOdometer - #warning: No change in time (startTime=%{public}.2f, endTime=%{pub lic}.2f, outTime=%{public}.2f)",  &v35,  32);
    goto LABEL_61;
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101880CD0);
  }
  unint64_t v26 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134350336;
    double v48 = a3;
    __int16 v49 = 2050;
    double v50 = a4;
    __int16 v51 = 2048;
    double v52 = v17;
    __int16 v53 = 2048;
    double v54 = v18;
    __int16 v55 = 2050;
    double v56 = v20;
    __int16 v57 = 2050;
    double v58 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] calculateDeltaOdometer - negative interpolation error startTime,%{public}.2f,endTime,%{public}.2f ,dist1,%f,dist2,%f,outTime1,%{public}f,outTime2,%{public}f",  buf,  0x3Eu);
  }

  BOOL v27 = sub_1002921D0(115, 0);
  BOOL result = 0LL;
  if (v27)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    int v35 = 134350336;
    double v36 = a3;
    __int16 v37 = 2050;
    double v38 = a4;
    __int16 v39 = 2048;
    double v40 = v17;
    __int16 v41 = 2048;
    double v42 = v18;
    __int16 v43 = 2050;
    double v44 = v20;
    __int16 v45 = 2050;
    double v46 = v21;
    double v10 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] calculateDeltaOdometer - negative interpolation error startTime,%{public}.2f,endTime,%{publ ic}.2f,dist1,%f,dist2,%f,outTime1,%{public}f,outTime2,%{public}f",  &v35,  62);
    goto LABEL_20;
  }

  return result;
}

void sub_100D42080(uint64_t a1, double *a2, int a3, double a4)
{
  if (a3)
  {
    if (a3 == 3)
    {
      uint64_t v7 = 0x3FEF1FE21D96E9BCLL;
    }

    else if (a3 == 2)
    {
      uint64_t v7 = 0x3FE4BFEC13B9F128LL;
    }

    else
    {
      uint64_t v7 = 0x3FC4BFEC13B9F128LL;
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    double v8 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[RunningSpeedKF] updateOdoMeasurementNoise - #warning unexpected kUnknown odometer quality",  buf,  2u);
    }

    BOOL v9 = sub_1002921D0(115, 2);
    uint64_t v7 = 0x4059400000000000LL;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "[RunningSpeedKF] updateOdoMeasurementNoise - #warning unexpected kUnknown odometer quality",  v13,  2);
      __int16 v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPedometer::RunningSpeedKF::updateOdoMeasurementNoise(const DeltaOdometerResult &, double, CLOdometerQuality::Quality)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
      uint64_t v7 = 0x4059400000000000LL;
    }
  }

  if (*a2 > a4 * 1.75 || *a2 < a4 * 0.25) {
    uint64_t v7 = 0x4059400000000000LL;
  }
  *(void *)(a1 + 568) = v7;
}

double sub_100D42294(void *a1)
{
  unint64_t v1 = a1[84];
  if (v1)
  {
    double v3 = (double)v1;
    unint64_t v4 = a1[83];
    unint64_t v5 = v1 + v4 - 1;
    uint64_t v6 = a1[80];
    uint64_t v7 = *(void *)(v6 + 8 * (v5 / 0xAA));
    unint64_t v8 = v5 % 0xAA;
    uint64_t v9 = *(void *)(v6 + 8 * (v4 / 0xAA));
    unint64_t v10 = v4 % 0xAA;
    double v11 = *(double *)(v7 + 24 * v8) - *(double *)(v9 + 24 * v10) + 2.56;
    if (v3 * 2.56 / v11 >= 0.5)
    {
      uint64_t v18 = v7 + 24 * v8;
      uint64_t v19 = v9 + 24 * v10;
      double v20 = *(double *)(v18 + 8) - *(double *)(v19 + 8);
      double v21 = *(double *)(v18 + 16) - *(double *)(v19 + 16);
      if (v21 <= 0.0 || v20 <= 0.0)
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101880CD0);
        }
        uint64_t v22 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 134218240;
          double v35 = v20;
          __int16 v36 = 2048;
          double v37 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] calcBiasFactor - invalid (ped, ref) buffer distance: %.2f, %.2f",  buf,  0x16u);
        }

        double v13 = 0.0;
        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101880CD0);
          }
          int v30 = 134218240;
          double v31 = v20;
          __int16 v32 = 2048;
          double v33 = v21;
          LODWORD(v29) = 22;
          double v23 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] calcBiasFactor - invalid (ped, ref) buffer distance: %.2f, %.2f",  COERCE_DOUBLE(&v30),  v29);
          double v17 = v24;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "double CLPedometer::RunningSpeedKF::calcBiasFactor() const",  "%s\n",  v23);
          goto LABEL_20;
        }
      }

      else
      {
        if (v21 > 20.0 && v20 > 0.0) {
          return v21 / v20;
        }
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101880CD0);
        }
        uint64_t v25 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
        {
          unint64_t v26 = a1[84] + a1[83] - 1LL;
          double v27 = *(double *)(*(void *)(a1[80] + 8 * (v26 / 0xAA)) + 24 * (v26 % 0xAA));
          *(_DWORD *)std::string buf = 134218496;
          double v35 = v27;
          __int16 v36 = 2048;
          double v37 = v20;
          __int16 v38 = 2048;
          double v39 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "[RunningSpeedKF] calcBiasFactor - insufficient distance (latest time, ped, odo): %.2f, %.2f, %.2f",  buf,  0x20u);
        }

        double v13 = 0.0;
        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101880CD0);
          }
          double v15 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "[RunningSpeedKF] calcBiasFactor - insufficient distance (latest time, ped, odo): %.2f, %.2f, %.2f");
          goto LABEL_19;
        }
      }
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      BOOL v12 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134218240;
        double v35 = v3;
        __int16 v36 = 2048;
        double v37 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[RunningSpeedKF] calcBiasFactor - fDistanceBuffer has too many gaps (buffer size, buffer duration): %.2f, %.2f",  buf,  0x16u);
      }

      double v13 = 0.0;
      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101880CD0);
        }
        double v15 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "[RunningSpeedKF] calcBiasFactor - fDistanceBuffer has too many gaps (buffer size, buffer duration): %.2f, %.2f");
LABEL_19:
        double v17 = v14;
        sub_10029211C("Generic", 1LL, 0, 2LL, "double CLPedometer::RunningSpeedKF::calcBiasFactor() const", "%s\n", v15);
LABEL_20:
        if (v17 != buf) {
          free(v17);
        }
      }
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    BOOL v16 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "[RunningSpeedKF] calcBiasFactor - empty distance buffer",  buf,  2u);
    }

    double v13 = 0.0;
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      double v15 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "[RunningSpeedKF] calcBiasFactor - empty distance buffer");
      goto LABEL_19;
    }
  }

  return v13;
}

double sub_100D428EC(void *a1)
{
  unint64_t v1 = a1[84];
  double result = 0.0;
  if ((int)v1 >= 2)
  {
    unint64_t v3 = (v1 - 2);
    if (v1 <= v3) {
      sub_10000C918("deque");
    }
    uint64_t v4 = a1[80];
    uint64_t v5 = a1[83];
    unint64_t v6 = v1 + v5 - 1;
    uint64_t v7 = *(void *)(v4 + 8 * (v6 / 0xAA));
    unint64_t v8 = v6 % 0xAA;
    unint64_t v9 = v5 + v3;
    uint64_t v10 = *(void *)(v4 + 8 * (v9 / 0xAA));
    double v11 = *(double *)(v7 + 24 * v8 + 8) - *(double *)(v10 + 24 * (v9 % 0xAA) + 8);
    if (v11 > 0.0) {
      return (*(double *)(v7 + 24 * v8 + 16) - *(double *)(v10 + 24 * (v9 % 0xAA) + 16)) / v11;
    }
  }

  return result;
}

double sub_100D429A0(void *a1, double a2, float64x2_t a3, float64_t a4)
{
  uint64_t v4 = a1[84];
  a3.f64[1] = a4;
  if (v4) {
    a3 = vaddq_f64( *(float64x2_t *)(*(void *)(a1[80] + 8 * ((v4 + a1[83] - 1) / 0xAAuLL))
  }
                          + 24 * ((v4 + a1[83] - 1) % 0xAAuLL)
                          + 8),
           a3);
  double v6 = a2;
  float64x2_t v7 = a3;
  *(void *)&double result = sub_100D43D94(a1 + 79, (__n128 *)&v6).n128_u64[0];
  return result;
}

void sub_100D42A14(uint64_t a1, int a2, double a3, double a4)
{
  double v8 = *(double *)(a1 + 592);
  double v9 = *(double *)(a1 + 568);
  if (*(_BYTE *)(a1 + 536)) {
    double v10 = *(double *)(a1 + 552);
  }
  else {
    double v10 = (v8 + v9) * 0.25;
  }
  if (*(_BYTE *)(a1 + 536)) {
    double v11 = *(double *)(a1 + 544);
  }
  else {
    double v11 = (a3 + a4) * 0.5;
  }
  double v12 = sub_100D43B98(v10, a1, (double *)(a1 + 568));
  double v13 = a4 - v11;
  *(double *)(a1 + 544) = v11 + v14 * (a4 - v11) + 0.0 + v12 * (a3 - v11);
  double v15 = v10 * (1.0 - (v12 + v14 + 0.0));
  *(double *)(a1 + 552) = v15;
  *(double *)(a1 + 600) = v12;
  *(double *)(a1 + 608) = v14;
  double v16 = -(a3 - v11);
  if (a3 - v11 >= 0.0) {
    double v16 = a3 - v11;
  }
  double v17 = v16 / (v9 + v15);
  *(double *)(a1 + 616) = v17;
  double v18 = -v13;
  if (v13 >= 0.0) {
    double v18 = a4 - v11;
  }
  double v19 = v18 / (v8 + v15);
  *(double *)(a1 + 624) = v19;
  if (a2 == 1)
  {
    if (v17 >= v19) {
      double v17 = v19;
    }
    if (v17 > 2.0) {
      goto LABEL_15;
    }
LABEL_17:
    uint64_t v20 = 0x3F747AE147AE147BLL;
    goto LABEL_18;
  }

  if (v19 <= 2.0) {
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v20 = 0x4024000000000000LL;
LABEL_18:
  *(void *)(a1 + 560) = v20;
  *(_BYTE *)(a1 + 536) = 1;
}

uint64_t sub_100D42B50(uint64_t result, double a2)
{
  double v2 = *(double *)(result + 544);
  double v3 = *(double *)(result + 552);
  double v4 = *(double *)(result + 592);
  if (!*(_BYTE *)(result + 536))
  {
    double v3 = *(double *)(result + 592);
    double v2 = a2;
  }

  double v5 = v3 / (v4 + v3);
  double v6 = a2 - v2;
  *(double *)(result + 544) = v2 + v5 * v6;
  double v7 = v3 * (1.0 - v5);
  *(double *)(result + 552) = v7;
  *(void *)(result + 600) = 0LL;
  *(double *)(result + 608) = v5;
  *(void *)(result + 616) = 0xFFF0000000000000LL;
  if (v6 < 0.0) {
    double v6 = -v6;
  }
  double v8 = v6 / (v4 + v7);
  *(double *)(result + 624) = v8;
  BOOL v9 = v8 <= 2.0;
  double v10 = 0.005;
  if (!v9) {
    double v10 = 10.0;
  }
  *(double *)(result + 560) = v10;
  *(_BYTE *)(result + 536) = 1;
  return result;
}

void sub_100D42BE0(void *a1, double a2)
{
  uint64_t v2 = a1[84];
  if (v2)
  {
    uint64_t v5 = (uint64_t)(a1 + 79);
    uint64_t v6 = a1[80];
    unint64_t v7 = a1[83];
    double v8 = a2 - *(double *)(*(void *)(v6 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
    if (v8 <= 111.846818)
    {
LABEL_6:
            i > 150.0 && v2 != 0;
            double i = *(double *)(*(void *)(a1[80] + 8 * ((v2 + v7 - 1) / 0xAA)) + 24 * ((v2 + v7 - 1) % 0xAA) + 16)
              - *(double *)(*(void *)(a1[80] + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA) + 16))
      {
        a1[84] = v2 - 1;
        a1[83] = v7 + 1;
        sub_100211164(v5, 1);
        uint64_t v2 = a1[84];
        unint64_t v7 = a1[83];
      }

      if (v8 <= 0.0 || i <= 0.0)
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101880CD0);
        }
        double v13 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 134218240;
          double v22 = v8;
          __int16 v23 = 2048;
          double v24 = i;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] trimDistanceBuffer - invalid buffer timeDiff or odoDistDiff: %.2f, %.2f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101880CD0);
          }
          int v17 = 134218240;
          double v18 = v8;
          __int16 v19 = 2048;
          double v20 = i;
          LODWORD(v16) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] trimDistanceBuffer - invalid buffer timeDiff or odoDistDiff: %.2f, %.2f",  COERCE_DOUBLE(&v17),  v16);
          double v15 = (uint8_t *)v14;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLPedometer::RunningSpeedKF::trimDistanceBuffer(CFAbsoluteTime)",  "%s\n",  v14);
          if (v15 != buf) {
            free(v15);
          }
        }
      }
    }

    else
    {
      while (1)
      {
        uint64_t v9 = a1[84];
        if (!v9) {
          break;
        }
        a1[84] = v9 - 1;
        a1[83] = v7 + 1;
        sub_100211164(v5, 1);
        uint64_t v6 = a1[80];
        unint64_t v7 = a1[83];
        double v8 = a2 - *(double *)(*(void *)(v6 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
        if (v8 <= 111.846818)
        {
          uint64_t v2 = a1[84];
          if (!v2) {
            return;
          }
          goto LABEL_6;
        }
      }
    }
  }

uint64_t sub_100D42F4C(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(_BYTE *)a2) {
    return 0LL;
  }
  double v3 = *(double *)(a2 + 8);
  if (v3 >= 0.0 && v3 <= 13.0) {
    return a3 ^ 1u;
  }
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101880CD0);
  }
  uint64_t v5 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] Running speed out of range %.2f",  buf,  0xCu);
  }

  BOOL v6 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    int v10 = 134217984;
    double v11 = v3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] Running speed out of range %.2f",  COERCE_DOUBLE(&v10));
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPedometer::RunningSpeedKF::isRunningSpeedValid(const KalmanParams &, BOOL) const",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
    return 0LL;
  }

  return result;
}

void sub_100D4311C(uint64_t a1, __int128 *a2)
{
  double v4 = *(double *)(a1 + 344);
  if (v4 <= 0.0)
  {
    BOOL v11 = 0;
    if (*((_BYTE *)a2 + 16) == 3 && *((_BYTE *)a2 + 17) == 4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  BOOL v5 = sub_100AF8F04(1.0 / v4, *(float *)(a1 + 712));
  int v6 = *((unsigned __int8 *)a2 + 16);
  int v7 = *((unsigned __int8 *)a2 + 17);
  BOOL v9 = v6 == 3 && v7 == 4;
  if (!v5)
  {
    BOOL v10 = (v7 & 0xFE) == 2;
    BOOL v11 = (v6 & 0xFE) == 2 && v10;
    if (v9) {
      goto LABEL_24;
    }
LABEL_23:
    if (!v11) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  BOOL v11 = 0;
  if (!v9) {
    goto LABEL_23;
  }
LABEL_24:
  *(void *)(a1 + 512) = *(void *)a2;
  __int128 v14 = *a2;
  *(_DWORD *)(a1 + 695) = *(_DWORD *)((char *)a2 + 15);
  *(_OWORD *)(a1 + 680) = v14;
LABEL_25:
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101880CD0);
  }
  double v15 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)a2;
    uint64_t v17 = *((void *)a2 + 1);
    int v18 = *((unsigned __int8 *)a2 + 16);
    int v19 = *((unsigned __int8 *)a2 + 17);
    int v20 = *((unsigned __int8 *)a2 + 18);
    v21[0] = 68290306;
    v21[1] = 0;
    __int16 v22 = 2082;
    __int16 v23 = "";
    __int16 v24 = 2050;
    uint64_t v25 = v16;
    __int16 v26 = 2050;
    uint64_t v27 = v17;
    __int16 v28 = 1026;
    int v29 = v18;
    __int16 v30 = 1026;
    int v31 = v19;
    __int16 v32 = 1026;
    int v33 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:[RunningSpeedKF] feedWakeGesture, receivedTime:%{public}.2f, timestampPossible :%{public}llu, state:%{public}d, gestureType:%{public}d, hostPowerState:%{public}d}",  (uint8_t *)v21,  0x38u);
  }

__n128 sub_100D432D8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 748) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 720) = v3;
  *(_OWORD *)(a1 + 736) = v4;
  *(__n128 *)(a1 + 704) = result;
  return result;
}

BOOL sub_100D432F8(void **a1, double *a2, double *a3, double a4)
{
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  if (!sub_1007B8264(*a1, (uint64_t)&v64, &v62, a4))
  {
    uint64_t v17 = *((void *)&v65 + 1);
    if (*((void *)&v65 + 1) != *((void *)&v63 + 1))
    {
      if (*(void *)v65 == *((void *)&v65 + 1))
      {
        uint64_t v42 = *(void *)(v65 - 8);
        int v18 = (double *)(v42 + 3888);
        uint64_t v17 = v42 + 4032;
      }

      else
      {
        int v18 = (double *)(*((void *)&v65 + 1) - 144LL);
      }

      *a2 = *v18;
      *a3 = *(double *)(v17 - 192);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      __int16 v43 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
      {
        double v44 = *a2;
        double v45 = *a3;
        *(_DWORD *)std::string buf = 134349568;
        double v73 = a4;
        __int16 v74 = 2048;
        double v75 = v44;
        __int16 v76 = 2048;
        double v77 = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "[RunningSpeedKF] interpolateOdometry - Unable to find odometer entry after %{public}.2f. Nearest=(%.2f, %.2f)",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101880CD0);
        }
        double v58 = *a2;
        double v59 = *a3;
        int v66 = 134349568;
        double v67 = a4;
        __int16 v68 = 2048;
        double v69 = v58;
        __int16 v70 = 2048;
        double v71 = v59;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "[RunningSpeedKF] interpolateOdometry - Unable to find odometer entry after %{public}.2f. Nearest=(%.2f, %.2f)",  &v66,  32);
        double v61 = (uint8_t *)v60;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLPedometer::RunningSpeedKF::interpolateOdometry(CFAbsoluteTime, double &, CFAbsoluteTime &) const",  "%s\n",  v60);
        if (v61 != buf) {
          free(v61);
        }
      }

      return 1LL;
    }

double sub_100D43B98(double a1, uint64_t a2, double *a3)
{
  double v4 = a3[2];
  double v3 = a3[3];
  double v5 = *a3 * v3 + a1 * (*a3 + v3 + v4 * -2.0) - v4 * v4;
  if (v5 == 0.0)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    int v6 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] kalmanGain - determinant is zero, logical error?",  buf,  2u);
    }

    double v7 = 0.0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      v12[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] kalmanGain - determinant is zero, logical error?",  v12,  2);
      unint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "RunningSpeedKF::Measurement CLPedometer::RunningSpeedKF::kalmanGain(double, const RunningSpeedKF::MeasurementNoise &) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  else
  {
    v8.f64[0] = v3 + a1;
    v8.f64[1] = -(v4 + a1);
    return vaddvq_f64(vmulq_n_f64(v8, 1.0 / v5)) * a1;
  }

  return v7;
}

__n128 sub_100D43D94(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100D43E6C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  float64x2_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *float64x2_t v8 = result;
  ++a1[5];
  return result;
}

void sub_100D43E40(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100D43E6C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    float64x2_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)float64x2_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      float64x2_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        float64x2_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100D44134( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100D44180@<X0>(int a1@<W0>, void *a2@<X1>, uint64_t **a3@<X8>)
{
  id v6 = [a2 count];
  int v21 = 0;
  unint64_t v7 = (uint64_t *)operator new(0x18uLL);
  __n128 result = sub_100963694(v7, (unint64_t)v6, &v21);
  *a3 = v7;
  uint64_t v9 = v7[1];
  if (*v7 == v9) {
    return result;
  }
  double v10 = 0.0;
  if (a1 < 1)
  {
    int v12 = a1;
    if (!a1) {
      return result;
    }
    goto LABEL_12;
  }

  unint64_t v11 = v9 - *v7;
  int v12 = a1;
  if ((int)(v11 >> 2) >= 1)
  {
    unint64_t v13 = (v11 >> 2);
    int v12 = a1;
    do
    {
      __n128 result = objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", (v13 - 1)), "duration");
      if (v14 == 1.0)
      {
        *(_DWORD *)(*v7 + 4LL * (v13 - 1)) = 1;
        --v12;
      }

      double v10 = v10 + v14;
      if (v12 < 1) {
        break;
      }
    }

    while (v13-- > 1);
  }

  if (v12)
  {
LABEL_12:
    uint64_t v16 = *v7;
    uint64_t v17 = v7[1];
    if (v17 != *v7)
    {
      unint64_t v18 = 0LL;
      double v19 = v10 - (double)(a1 - v12);
      do
      {
        if (!*(_DWORD *)(v16 + 4 * v18))
        {
          __n128 result = objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", v18), "duration");
          uint64_t v16 = *v7;
          uint64_t v17 = v7[1];
          *(_DWORD *)(*v7 + 4 * v18) = (int)(v20 / v19 * (double)v12);
        }

        ++v18;
      }

      while (v18 < (v17 - v16) >> 2);
    }
  }

  return result;
}

void sub_100D442E4(_Unwind_Exception *a1)
{
}

uint64_t sub_100D4437C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_100D54F8C(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = off_101880D00;
  *(void *)(v8 + 184) = 0LL;
  *(CLLocationCoordinate2D *)(v8 + 208) = kCLLocationCoordinate2DInvalid;
  *(_BYTE *)(v8 + 224) = 0;
  uint64_t v9 = (void *)(v8 + 264);
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(void *)(v8 + 296) = 0LL;
  double v10 = (void **)operator new(0x18uLL);
  *double v10 = 0LL;
  v10[1] = 0LL;
  _DWORD v10[2] = 0LL;
  uint64_t v11 = a1 + 144;
  *(void *)std::string buf = 0LL;
  sub_100D45388((void ***)(a1 + 144), v10);
  sub_100D45388((void ***)buf, 0LL);
  *(_DWORD *)(a1 + 192) = objc_msgSend( objc_msgSend( a4,  "objectForKey:",  @"kCLConnectionMessageTranscriptFetchSampleCountKey"),  "intValue");
  objc_msgSend(objc_msgSend(a4, "objectForKey:", @"kCLConnectionMessageTranscriptFetchRadiusKey"), "doubleValue");
  *(void *)(a1 + 200) = v12;
  id v13 = [a4 objectForKey:@"kCLConnectionMessageLocationUpdaterStartDateKey"];
  id v14 = [a4 objectForKey:@"kCLConnectionMessageLocationUpdaterEndDateKey"];
  if (v13 && v14) {
    uint64_t v15 = -[NSDateInterval initWithStartDate:endDate:]( objc_alloc(&OBJC_CLASS___NSDateInterval),  "initWithStartDate:endDate:",  v13,  v14);
  }
  else {
    uint64_t v15 = -[NSDateInterval initWithStartDate:endDate:]( objc_alloc(&OBJC_CLASS___NSDateInterval),  "initWithStartDate:endDate:",  +[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", -259200.0),  +[NSDate now](&OBJC_CLASS___NSDate, "now"));
  }
  *(void *)(a1 + 232) = v15;
  if ([a4 objectForKey:@"kCLConnectionMessageTranscriptFetchCenterLatitudeKey"]
    && [a4 objectForKey:@"kCLConnectionMessageTranscriptFetchCenterLongitudeKey"])
  {
    *(_BYTE *)(a1 + 224) = 1;
    objc_msgSend( objc_msgSend(a4, "objectForKeyedSubscript:", @"kCLConnectionMessageTranscriptFetchCenterLatitudeKey"),  "doubleValue");
    *(void *)(a1 + 208) = v16;
    objc_msgSend( objc_msgSend(a4, "objectForKeyedSubscript:", @"kCLConnectionMessageTranscriptFetchCenterLongitudeKey"),  "doubleValue");
    *(void *)(a1 + 216) = v17;
    *uint64_t v9 = -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:]( objc_alloc(&OBJC_CLASS___CLLocation),  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:",  +[NSDate now](&OBJC_CLASS___NSDate, "now"),  *(double *)(a1 + 208),  *(double *)(a1 + 216),  -1.0,  *(double *)(a1 + 200),  -1.0);
  }

  *(_OWORD *)(a1 + 248) = xmmword_10135CEC0;
  unint64_t v18 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonLocationUpdaterHistorical(ctor) #luHistorical",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v18, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101880DE0);
  }
  double v19 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a1 + 16);
    int v21 = *(_DWORD *)(a1 + 192);
    uint64_t v22 = *(void *)(a1 + 232);
    int v23 = *(unsigned __int8 *)(a1 + 224);
    uint64_t v24 = *(void *)(a1 + 200);
    uint64_t v25 = *(void *)(a1 + 208);
    uint64_t v26 = *(void *)(a1 + 216);
    *(_DWORD *)std::string buf = 68291330;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v84 = 2082;
    *(void *)&_DWORD v84[2] = "";
    __int16 v85 = 2082;
    uint64_t v86 = "activity";
    __int16 v87 = 2114;
    uint64_t v88 = v20;
    __int16 v89 = 2050;
    uint64_t v90 = a1;
    __int16 v91 = 1026;
    int v92 = v21;
    __int16 v93 = 2050;
    uint64_t v94 = v24;
    __int16 v95 = 2114;
    uint64_t v96 = v22;
    __int16 v97 = 1026;
    int v98 = v23;
    __int16 v99 = 2050;
    uint64_t v100 = v25;
    __int16 v101 = 2050;
    uint64_t v102 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLDaemonLocationUpdaterHistorical(ctor) #luHistorical, event:%{public, location:escap e_only}s, ClientKeyPath:%{public, location:escape_only}@, this:%{public}p, SampleCount:%{public}d, Radius:%{public}f, DateInterval:%{public, location:escape_only}@, CenterSpecified:%{public}hhd,  Center.lat:%{public}f, Center.lon:%{public}f}",  buf,  0x64u);
  }

  uint64_t v27 = *(void *)(a1 + 24);
  v79[0] = _NSConcreteStackBlock;
  v79[1] = 3221225472LL;
  v79[2] = sub_100D44F10;
  v79[3] = &unk_101836E00;
  v79[4] = a1;
  sub_100558E24(v27, (uint64_t)v79);
  if (sub_100D55504(a1))
  {
    id v28 = [a4 objectForKeyedSubscript:@"kCLConnectionMessageLocationUpdaterEntitlementDictKey"];
    *(void *)(a1 + 184) = v28;
  }

  else
  {
    v81[0] = @"com.apple.developer.corelocation.wilderness-safety";
    sub_1010DDBC0(buf, "com.apple.developer.corelocation.wilderness-safety");
    uint64_t v29 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_100D5721C(a1, (uint64_t)buf));
    v81[1] = @"com.apple.locationd.transcript-session";
    v82[0] = v29;
    sub_1010DDBC0(&__p, "com.apple.locationd.transcript-session");
    v82[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_100D5721C(a1, (uint64_t)&__p));
    *(void *)(a1 + 184) =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v82,  v81,  2LL);
    if (v78 < 0) {
      operator delete(__p);
    }
    if (SBYTE3(v86) < 0) {
      operator delete(*(void **)buf);
    }
    id v28 = *(id *)(a1 + 184);
  }

  if ((objc_msgSend( objc_msgSend( v28,  "objectForKeyedSubscript:",  @"com.apple.developer.corelocation.wilderness-safety"),  "BOOLValue") & 1) == 0 && (objc_msgSend( objc_msgSend( *(id *)(a1 + 184),  "objectForKeyedSubscript:",  @"com.apple.locationd.transcript-session"),  "BOOLValue") & 1) == 0)
  {
    goto LABEL_53;
  }

  __int128 v30 = *(uint64_t **)v11;
  if (*(void *)(*(void *)v11 + 8LL) == **(void **)v11)
  {
    if (!*(void *)(a1 + 288))
    {
      double v57 = objc_alloc_init(&OBJC_CLASS___CLDaemonLocationUpdaterHistoricalAdapter);
      std::string __p = v57;
      -[CLDaemonLocationUpdaterHistoricalAdapter setUpdater:](v57, "setUpdater:", a1);
      *(void *)(a1 + 288) = v57;
      sub_100D46624(&__p, buf);
      double v59 = *(void **)buf;
      uint64_t v58 = *(void *)v84;
      if (*(void *)v84)
      {
        uint64_t v60 = (unint64_t *)(*(void *)v84 + 16LL);
        do
          unint64_t v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }

      __int128 v62 = *(std::__shared_weak_count **)(a1 + 280);
      *(void *)(a1 + 272) = v59;
      *(void *)(a1 + 280) = v58;
      if (v62) {
        std::__shared_weak_count::__release_weak(v62);
      }
      id v63 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLRoutineMonitor");
      *(void *)(a1 + 296) = v63;
      objc_msgSend(v63, "registerDelegate:inSilo:", __p, objc_msgSend(*(id *)(a1 + 32), "silo"));
      __int128 v64 = *(std::__shared_weak_count **)v84;
      v71[0] = *(void *)buf;
      v71[1] = *(void *)v84;
      if (*(void *)v84)
      {
        __int128 v65 = (unint64_t *)(*(void *)v84 + 8LL);
        do
          unint64_t v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }

      sub_100D453C8(a1, 0LL, v71);
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          unint64_t v68 = __ldaxr(p_shared_owners);
        while (__stlxr(v68 - 1, p_shared_owners));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }

      __int128 v54 = *(std::__shared_weak_count **)v84;
      if (!*(void *)v84) {
        goto LABEL_90;
      }
      double v69 = (unint64_t *)(*(void *)v84 + 8LL);
      do
        unint64_t v56 = __ldaxr(v69);
      while (__stlxr(v56 - 1, v69));
LABEL_88:
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }

      goto LABEL_90;
    }

    uint64_t v43 = *(void *)(a1 + 280);
    if (!v43 || *(void *)(v43 + 8) == -1LL)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880E00);
      }
      double v44 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v84 = 2082;
        *(void *)&_DWORD v84[2] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#luHistorical DRC is still alive but the session is nil; DRC should be invalidated very soon though}",
          buf,
          0x12u);
      }
    }

    if (*(void *)(a1 + 296)) {
      goto LABEL_90;
    }
    sub_10126C800();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemon LocationUpdaterHistorical.mm",  236,  "CLDaemonLocationUpdaterHistorical");
    __break(1u);
LABEL_53:
    sub_100D465CC("kCLConnectionMessageHistoricalLocationsFinished", &__p);
    __int16 v74 = __p;
    double v75 = v77;
    if (v77)
    {
      uint64_t v45 = (unint64_t *)&v77->__shared_owners_;
      do
        unint64_t v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }

    sub_100D55D8C(a1, (uint64_t)&v74, 0LL, 1, 0.0);
    uint64_t v47 = v75;
    if (v75)
    {
      uint64_t v48 = (unint64_t *)&v75->__shared_owners_;
      do
        unint64_t v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880E00);
    }
    uint64_t v50 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
    {
      double v51 = *(const char **)(a1 + 16);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v84 = 2082;
      *(void *)&_DWORD v84[2] = "";
      __int16 v85 = 2114;
      uint64_t v86 = v51;
      __int16 v87 = 2050;
      uint64_t v88 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#luHistorical #warning client is not entitled for historical updates, client:%{publ ic, location:escape_only}@, this:%{public}p}",  buf,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880E00);
      }
    }

    uint64_t v52 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      double v53 = *(const char **)(a1 + 16);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v84 = 2082;
      *(void *)&_DWORD v84[2] = "";
      __int16 v85 = 2114;
      uint64_t v86 = v53;
      __int16 v87 = 2050;
      uint64_t v88 = a1;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v52,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#luHistorical #warning client is not entitled for historical updates",  "{msg%{public}.0s:#luHistorical #warning client is not entitled for historical updates, client:%{publ ic, location:escape_only}@, this:%{public}p}",  buf,  0x26u);
    }

    __int128 v54 = v77;
    if (!v77) {
      goto LABEL_90;
    }
    __int128 v55 = (unint64_t *)&v77->__shared_owners_;
    do
      unint64_t v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    goto LABEL_88;
  }

  __int128 v31 = operator new(0x18uLL);
  *__int128 v31 = 0LL;
  v31[1] = 0LL;
  v31[2] = 0LL;
  std::string __p = v30;
  *(void *)uint64_t v11 = v31;
  uint64_t v32 = *v30;
  if (*v30 != v30[1])
  {
    do
    {
      unint64_t v33 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)v32);
      int v34 = *((char *)v33 + 23);
      if (v34 < 0)
      {
        if (v33[1] == 39LL)
        {
          unint64_t v33 = (void *)*v33;
LABEL_28:
          if (!memcmp(v33, "kCLConnectionMessageHistoricalLocations", 0x27uLL))
          {
            double v35 = *(std::__shared_weak_count **)(v32 + 8);
            double v72 = *(CLConnectionMessage **)v32;
            double v73 = v35;
            if (v35)
            {
              uint64_t v36 = (unint64_t *)&v35->__shared_owners_;
              do
                unint64_t v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
            }

            sub_100D55D8C(a1, (uint64_t)&v72, 0LL, 0, 1.0);
            __int16 v38 = v73;
            if (v73)
            {
              uint64_t v39 = (unint64_t *)&v73->__shared_owners_;
              do
                unint64_t v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }
        }
      }

      else if (v34 == 39)
      {
        goto LABEL_28;
      }

      v32 += 16LL;
    }

    while (v32 != *((void *)__p + 1));
  }

  __int16 v41 = (void **)operator new(0x18uLL);
  *__int16 v41 = 0LL;
  v41[1] = 0LL;
  v41[2] = 0LL;
  sub_100D45388((void ***)(a1 + 144), v41);
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101880E00);
  }
  uint64_t v42 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v84 = 2082;
    *(void *)&_DWORD v84[2] = "";
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical finish sending pended messages}",  buf,  0x12u);
  }

  sub_100D45388((void ***)&__p, 0LL);
LABEL_90:
  os_activity_scope_leave(&state);
  return a1;
}

void sub_100D44E1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, os_activity_scope_state_s state, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  uint64_t v42 = *(std::__shared_weak_count **)(v40 + 280);
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  sub_100D555B4(v40);
  _Unwind_Resume(a1);
}

uint64_t sub_100D44F10(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = (uint64_t)[*(id *)(v3 + 16) isEqual:sub_100019240((uint64_t)a2)];
  if (!(_DWORD)result) {
    return result;
  }
  if (*((_DWORD *)v5 + 48) != *(_DWORD *)(v3 + 192)) {
    return 0LL;
  }
  id v6 = v5;
  if (*((double *)v5 + 26) != *(double *)(v3 + 208)
    || *((double *)v5 + 27) != *(double *)(v3 + 216)
    || *((double *)v5 + 25) != *(double *)(v3 + 200))
  {
    return 0LL;
  }

  uint64_t result = (uint64_t)[*((id *)v5 + 29) isEqualToDateInterval:*(void *)(v3 + 232)];
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t v7 = v6[35];
  if (v7 && *(void *)(v7 + 8) != -1LL || *(void *)v6[18] != *(void *)(v6[18] + 8LL))
  {
    uint64_t v8 = *(void *)(v3 + 288);
    *(void *)(v3 + 288) = v6[36];
    v6[36] = v8;
    uint64_t v9 = *(void *)(v3 + 272);
    *(void *)(v3 + 272) = v6[34];
    v6[34] = v9;
    uint64_t v10 = *(void *)(v3 + 280);
    *(void *)(v3 + 280) = v6[35];
    v6[35] = v10;
    uint64_t v11 = *(void *)(v3 + 296);
    *(void *)(v3 + 296) = v6[37];
    v6[37] = v11;
    uint64_t v12 = *(void *)(v3 + 144);
    *(void *)(v3 + 144) = v6[18];
    v6[18] = v12;
    [*(id *)(v3 + 288) setUpdater:v3];
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880E00);
    }
    id v13 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24LL))(a2);
      uint64_t v15 = *(void *)(v3 + 16);
      uint64_t v16 = *(void *)(v3 + 280);
      BOOL v17 = !v16 || *(void *)(v16 + 8) == -1LL;
      uint64_t v20 = (*(void *)(*(void *)(v3 + 144) + 8LL) - **(void **)(v3 + 144)) >> 4;
      int v21 = *(void **)(v3 + 288);
      int v32 = 68290818;
      int v33 = 0;
      __int16 v34 = 2082;
      double v35 = "";
      __int16 v36 = 1026;
      int v37 = v14;
      __int16 v38 = 2114;
      uint64_t v39 = v15;
      __int16 v40 = 1026;
      BOOL v41 = v17;
      __int16 v42 = 1026;
      int v43 = v20;
      __int16 v44 = 2050;
      uint64_t v45 = v21;
      __int16 v46 = 2050;
      id v47 = [v21 updater];
      __int16 v48 = 2050;
      uint64_t v49 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical #dic consumeMatchingButterfly, dicType:%{public}d, ClientKeyPath: %{public, location:escape_only}@, IsSessionExpired:%{public}hhd, fPendingMessagesSize:%{public}d, fAda pter:%{public}p, updater:%{public}p, this:%{public}p}",  (uint8_t *)&v32,  0x4Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880E00);
      }
    }

    uint64_t v22 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      int v23 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24LL))(a2);
      uint64_t v24 = *(void *)(v3 + 16);
      uint64_t v25 = *(void *)(v3 + 280);
      if (v25) {
        BOOL v26 = *(void *)(v25 + 8) == -1LL;
      }
      else {
        BOOL v26 = 1;
      }
      uint64_t v27 = *(uint64_t **)(v3 + 144);
      uint64_t v29 = *v27;
      uint64_t v28 = v27[1];
      __int128 v30 = *(void **)(v3 + 288);
      id v31 = [v30 updater];
      int v32 = 68290818;
      int v33 = 0;
      __int16 v34 = 2082;
      double v35 = "";
      __int16 v36 = 1026;
      int v37 = v23;
      __int16 v38 = 2114;
      uint64_t v39 = v24;
      __int16 v40 = 1026;
      BOOL v41 = v26;
      __int16 v42 = 1026;
      int v43 = (unint64_t)(v28 - v29) >> 4;
      __int16 v44 = 2050;
      uint64_t v45 = v30;
      __int16 v46 = 2050;
      id v47 = v31;
      __int16 v48 = 2050;
      uint64_t v49 = v3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#luHistorical #dic consumeMatchingButterfly",  "{msg%{public}.0s:#luHistorical #dic consumeMatchingButterfly, dicType:%{public}d, ClientKeyPath: %{public, location:escape_only}@, IsSessionExpired:%{public}hhd, fPendingMessagesSize:%{public}d, fAda pter:%{public}p, updater:%{public}p, this:%{public}p}",  (uint8_t *)&v32,  0x4Cu);
    }

    return 1LL;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101880E00);
  }
  unint64_t v18 = (os_log_s *)qword_101934988;
  BOOL v19 = os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v19)
  {
    int v32 = 68289026;
    int v33 = 0;
    __int16 v34 = 2082;
    double v35 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical #dic not matching butterfly with dead session and empty pending queue}",  (uint8_t *)&v32,  0x12u);
    return 0LL;
  }

  return result;
}

void sub_100D45388(void ***a1, void **a2)
{
  unint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_10004CC28(&v3);
    operator delete(v2);
  }

void sub_100D453C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 <= 0)
  {
    *(_DWORD *)(a1 + 192) = 3;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101880DE0);
    }
    id v6 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 16);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v77 = 2082;
      *(void *)&v77[2] = "";
      *(_WORD *)&v77[10] = 2114;
      *(void *)&v77[12] = v9;
      __int16 v78 = 2050;
      uint64_t v79 = a1;
      uint64_t v8 = "{msg%{public}.0s:#luHistorical sampleCount is clamping to MIN sample count, ClientKeyPath:%{publi"
           "c, location:escape_only}@, self:%{public}p}";
      goto LABEL_11;
    }
  }

  else if (v5 >= 0xBB9)
  {
    *(_DWORD *)(a1 + 192) = 3000;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101880DE0);
    }
    id v6 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 16);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v77 = 2082;
      *(void *)&v77[2] = "";
      *(_WORD *)&v77[10] = 2114;
      *(void *)&v77[12] = v7;
      __int16 v78 = 2050;
      uint64_t v79 = a1;
      uint64_t v8 = "{msg%{public}.0s:#luHistorical sampleCount is clamping to MAX sample count, ClientKeyPath:%{publi"
           "c, location:escape_only}@, self:%{public}p}";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0x26u);
    }
  }

  if (!*(_BYTE *)(a1 + 224))
  {
LABEL_17:
    uint64_t v70 = 0LL;
    double v71 = &v70;
    uint64_t v72 = 0x3052000000LL;
    double v73 = sub_100D461A8;
    __int16 v74 = sub_100D461B8;
    uint64_t v75 = 0LL;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v12 = *(void **)(a1 + 232);
    id v13 = *(void **)(a1 + 184);
    v69[0] = _NSConcreteStackBlock;
    v69[1] = 3221225472LL;
    v69[2] = sub_100D461C4;
    void v69[3] = &unk_101880D78;
    v69[4] = &v70;
    sub_100561FF0(v10, v11, v12, v13, a2, (uint64_t)v69);
    if ([(id)v71[5] count])
    {
      sub_100D44180(*(_DWORD *)(a1 + 192), (void *)v71[5], (uint64_t **)&__p);
      unint64_t v14 = 0LL;
      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      uint64_t v16 = &OBJC_METACLASS___CLPrivacyManager.vtable;
      while ((unint64_t)[(id)v71[5] count] > v14)
      {
        id v17 = [(id)v71[5] objectAtIndexedSubscript:v14];
        unint64_t v18 = p_vtable[304];
        if (v17)
        {
          uint64_t v19 = *(int *)(*(void *)__p + 4 * v14);
          uint64_t v20 = (os_log_s *)v16[305];
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = *(void *)(a1 + 16);
            id v22 = [*(id *)(a1 + 232) startDate];
            id v23 = [*(id *)(a1 + 232) endDate];
            id v24 = [v17 startDate];
            id v25 = [v17 endDate];
            uint64_t v26 = *(void *)(a1 + 264);
            *(_DWORD *)std::string buf = 68290818;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)double v77 = 2082;
            *(void *)&v77[2] = "";
            *(_WORD *)&v77[10] = 2114;
            *(void *)&v77[12] = v21;
            __int16 v78 = 2050;
            uint64_t v79 = a1;
            __int16 v80 = 2114;
            id v81 = v22;
            __int16 v82 = 2114;
            id v83 = v23;
            __int16 v84 = 2114;
            id v85 = v24;
            __int16 v86 = 2114;
            id v87 = v25;
            __int16 v88 = 2114;
            uint64_t v89 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical fetching location from CoreRoutine, ClientKeyPath:%{public, loc ation:escape_only}@, self:%{public}p, ReceiverDateStartDate:%{public, location:escape_only}@, ReceiverDateEndDate:%{public, location:escape_only}@, AllowedDateStartDate:%{public, location:esca pe_only}@, AllowedDateEndDate:%{public, location:escape_only}@, boundedBoxLocation:%{public, locat ion:escape_only}@}",  buf,  0x58u);
            p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
            uint64_t v16 = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
          }

          id v27 =  [[RTStoredLocationEnumerationOptions alloc] initWithDateInterval:v17 horizontalAccuracy:v19 batchSize:*(void *)(a1 + 264) boundingBoxLocation:14 type:1 downsampleRequired:*(double *)(a1 + 248) smooth ingErrorThreshold:*(double *)(a1 + 256)];
          [v27 setSmoothingRequired:1];
          id v28 = *(id *)(a1 + 288);
          uint64_t v29 = *(void **)(a1 + 296);
          v64[0] = _NSConcreteStackBlock;
          v64[1] = 3321888768LL;
          v64[2] = sub_100D461D4;
          v64[3] = &unk_101880D98;
          id v30 = v28;
          uint64_t v31 = *a3;
          int v32 = (std::__shared_weak_count *)a3[1];
          *(void *)std::string buf = v30;
          *(void *)double v77 = v31;
          *(void *)&v77[8] = v32;
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              unint64_t v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
          }

          id v65 = 0LL;
          id v65 = v30;
          uint64_t v66 = v31;
          double v67 = v32;
          if (v32)
          {
            double v35 = (unint64_t *)&v32->__shared_owners_;
            do
              unint64_t v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }

          [v29 enumerateStoredLocationsWithOptions:v27 withReply:v64];
          if (v32)
          {
            int v37 = (unint64_t *)&v32->__shared_owners_;
            do
              unint64_t v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }

          uint64_t v39 = v67;
          if (v67)
          {
            __int16 v40 = (unint64_t *)&v67->__shared_owners_;
            do
              unint64_t v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
        }

        else
        {
          __int16 v42 = (os_log_s *)v16[305];
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v43 = *(void *)(a1 + 16);
            id v44 = [0 startDate];
            id v45 = [0 endDate];
            id v46 = [*(id *)(a1 + 232) startDate];
            id v47 = [*(id *)(a1 + 232) endDate];
            *(_DWORD *)std::string buf = 68290562;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)double v77 = 2082;
            *(void *)&v77[2] = "";
            *(_WORD *)&v77[10] = 2114;
            *(void *)&v77[12] = v43;
            __int16 v78 = 2050;
            uint64_t v79 = a1;
            __int16 v80 = 2114;
            id v81 = v44;
            __int16 v82 = 2114;
            id v83 = v45;
            __int16 v84 = 2114;
            id v85 = v46;
            __int16 v86 = 2114;
            id v87 = v47;
            _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical dateInterval not valid for historical locations, skipping, Client KeyPath:%{public, location:escape_only}@, self:%{public}p, SkippingDateStartDate:%{public, l ocation:escape_only}@, SkippingDateEndDate:%{public, location:escape_only}@, ReceiverDateStartDate :%{public, location:escape_only}@, ReceiverDateEndDate:%{public, location:escape_only}@}",  buf,  0x4Eu);
            p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
            uint64_t v16 = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
          }
        }

        ++v14;
      }

      __int16 v48 = (void **)__p;
      std::string __p = 0LL;
      if (v48) {
        sub_100223734((int)&__p, v48);
      }
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880E00);
      }
      unint64_t v56 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v57 = *(void *)(a1 + 16);
        id v58 = [*(id *)(a1 + 232) startDate];
        id v59 = [*(id *)(a1 + 232) endDate];
        *(_DWORD *)std::string buf = 68290050;
        *(_WORD *)double v77 = 2082;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(void *)&v77[2] = "";
        *(_WORD *)&v77[10] = 2114;
        *(void *)&v77[12] = v57;
        __int16 v78 = 2050;
        uint64_t v79 = a1;
        __int16 v80 = 2114;
        id v81 = v58;
        __int16 v82 = 2114;
        id v83 = v59;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical no allowed historical dateIntervals found., ClientKeyPath:%{public, location:escape_only}@, self:%{public}p, ReceiverDateStartDate:%{public, location:escape_only}@, ReceiverDateEndDate:%{public, location:escape_only}@}",  buf,  0x3Au);
      }
    }

    _Block_object_dispose(&v70, 8);
    return;
  }

  if ((sub_100D568A0(*(double *)(a1 + 208), *(double *)(a1 + 216)) & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 224)
      || !sub_100D568A0(*(double *)(a1 + 208), *(double *)(a1 + 216))
      || *(double *)(a1 + 200) > 0.0)
    {
      goto LABEL_17;
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880E00);
    }
    uint64_t v60 = qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v61 = *(void *)(a1 + 16);
      __int128 v62 = *(void **)(a1 + 200);
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v77 = 2082;
      *(void *)&v77[2] = "";
      *(_WORD *)&v77[10] = 2114;
      *(void *)&v77[12] = v61;
      __int16 v78 = 2050;
      uint64_t v79 = a1;
      __int16 v80 = 2050;
      id v81 = v62;
      double v53 = "{msg%{public}.0s:#luHistorical radius cannot be zero or less when center is specified, ClientKeyPa"
            "th:%{public, location:escape_only}@, self:%{public}p, Radius:%{public}f}";
      __int128 v54 = (os_log_s *)v60;
      uint32_t v55 = 48;
      goto LABEL_53;
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880E00);
    }
    uint64_t v49 = qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v50 = *(void *)(a1 + 16);
      double v51 = *(void **)(a1 + 208);
      uint64_t v52 = *(void **)(a1 + 216);
      *(_DWORD *)std::string buf = 68290050;
      *(_WORD *)double v77 = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&v77[2] = "";
      *(_WORD *)&v77[10] = 2114;
      *(void *)&v77[12] = v50;
      __int16 v78 = 2050;
      uint64_t v79 = a1;
      __int16 v80 = 2050;
      id v81 = v51;
      __int16 v82 = 2050;
      id v83 = v52;
      double v53 = "{msg%{public}.0s:#luHistorical specified Center is not valid, ClientKeyPath:%{public, location:e"
            "scape_only}@, self:%{public}p, Center.lat:%{public}f, Center.lon:%{public}f}";
      __int128 v54 = (os_log_s *)v49;
      uint32_t v55 = 58;
LABEL_53:
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, v53, buf, v55);
    }
  }

void sub_100D45C8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

uint64_t sub_100D45D30(uint64_t a1)
{
  *(void *)a1 = off_101880D00;
  sub_100D56EF4(a1, 2);
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (v2)
  {
    if (v2->__shared_owners_ != -1)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      unint64_t v4 = *(id **)(a1 + 272);

      *unint64_t v4 = 0LL;
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 296) = 0LL;
  [*(id *)(a1 + 288) invalidate];

  *(void *)(a1 + 288) = 0LL;
  *(void *)(a1 + 264) = 0LL;

  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 280);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return sub_100D555B4(a1);
}

void sub_100D45E2C(uint64_t a1)
{
  unint64_t v1 = (void *)sub_100D45D30(a1);
  operator delete(v1);
}

void sub_100D45E40(uint64_t a1, CLConnectionMessage **a2)
{
  unint64_t v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44LL) {
      goto LABEL_7;
    }
    unint64_t v4 = (void *)*v4;
  }

  else if (v5 != 44)
  {
    goto LABEL_7;
  }

  if (!memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
  {
    *(_BYTE *)(a1 + 48) = 1;
    return;
  }

BOOL sub_100D45FB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 280);
  return !v1 || *(void *)(v1 + 8) == -1LL || *(_BYTE *)(a1 + 48) != 0;
}

uint64_t sub_100D45FDC()
{
  return 2LL;
}

NSDictionary *sub_100D45FE4(uint64_t a1)
{
  if (![*(id *)(a1 + 184) objectForKeyedSubscript:@"com.apple.developer.corelocation.wilderness-safety"]) {
    sub_10126C970();
  }
  if (![*(id *)(a1 + 184) objectForKeyedSubscript:@"com.apple.locationd.transcript-session"]) {
    sub_10126CAE8();
  }
  v6[0] = @"kCLConnectionMessageTranscriptFetchSampleCountKey";
  v7[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 192));
  v6[1] = @"kCLConnectionMessageTranscriptFetchRadiusKey";
  v7[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 200));
  _DWORD v6[2] = @"kCLConnectionMessageLocationUpdaterStartDateKey";
  v7[2] = [*(id *)(a1 + 232) startDate];
  void v6[3] = @"kCLConnectionMessageLocationUpdaterEndDateKey";
  v7[3] = [*(id *)(a1 + 232) endDate];
  v6[4] = @"kCLConnectionMessageTranscriptFetchCenterLatitudeKey";
  _DWORD v7[4] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 208));
  v6[5] = @"kCLConnectionMessageTranscriptFetchCenterLongitudeKey";
  v7[5] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 216));
  v6[6] = @"kCLConnectionMessageLocationUpdaterEntitlementDictKey";
  v4[0] = @"com.apple.developer.corelocation.wilderness-safety";
  unint64_t v2 = +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  objc_msgSend( objc_msgSend( *(id *)(a1 + 184),  "objectForKeyedSubscript:",  @"com.apple.developer.corelocation.wilderness-safety"),  "BOOLValue"));
  v4[1] = @"com.apple.locationd.transcript-session";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  objc_msgSend( objc_msgSend( *(id *)(a1 + 184),  "objectForKeyedSubscript:",  @"com.apple.locationd.transcript-session"),  "BOOLValue"));
  void v7[6] = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  2LL);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  7LL);
}

void sub_100D461A8(uint64_t a1, uint64_t a2)
{
}

void sub_100D461B8(uint64_t a1)
{
}

uint64_t sub_100D461C4(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 4sub_1008F3E60(v1, 0LL) = a2;
  return result;
}

void sub_100D461D4(uint64_t a1, void *a2, void *a3, int a4)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101880DE0);
  }
  uint64_t v8 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *((void *)[*(id *)(a1 + 32) updater] + 2);
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = [*(id *)(a1 + 32) updater];
    *(_DWORD *)std::string buf = 68290562;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v25 = 2082;
    *(void *)&v25[2] = "";
    __int16 v26 = 2114;
    uint64_t v27 = v9;
    __int16 v28 = 2050;
    uint64_t v29 = v10;
    __int16 v30 = 2050;
    id v31 = v11;
    __int16 v32 = 1026;
    unsigned int v33 = [a2 count];
    __int16 v34 = 2082;
    id v35 = objc_msgSend(objc_msgSend(a3, "description"), "UTF8String");
    __int16 v36 = 1026;
    int v37 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical received update from CoreRoutine, ClientKeyPath:%{public, location:esca pe_only}@, session:%{public}p, updater:%{public}p, locationCount:%{public}d, Error:%{publi c, location:escape_only}s, enumerationCompleted:%{public}hhd}",  buf,  0x46u);
  }

  if ([a2 count])
  {
    id v23 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
    [v23 setObject:a2 forKeyedSubscript:@"Locations"];
    sub_1004004F4("kCLConnectionMessageHistoricalLocations", &v23, buf);
    id v12 = [*(id *)(a1 + 32) updater];
    uint64_t v21 = *(void *)buf;
    id v22 = *(std::__shared_weak_count **)v25;
    if (*(void *)v25)
    {
      __int16 v13 = (unint64_t *)(*(void *)v25 + 8LL);
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }

    sub_100D55D8C((uint64_t)v12, (uint64_t)&v21, 0LL, 1, 0.0);
    __int16 v15 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    unint64_t v18 = *(std::__shared_weak_count **)v25;
    if (*(void *)v25)
    {
      uint64_t v19 = (unint64_t *)(*(void *)v25 + 8LL);
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

void sub_100D46434( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }

  if (a14)
  {
    unint64_t v17 = (unint64_t *)&a14->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }

  _Unwind_Resume(exception_object);
}

id sub_100D464C0(void *a1, uint64_t a2)
{
  a1[4] = 0LL;
  id result = *(id *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  a1[4] = result;
  a1[5] = v6;
  a1[6] = v5;
  if (v5)
  {
    uint64_t v7 = (unint64_t *)(v5 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  return result;
}

void sub_100D46510(uint64_t a1)
{
}

id *sub_100D46540(id *a1)
{
  return a1;
}

void sub_100D46574(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100D465A0(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_100D465CC@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x70uLL);
  id result = sub_100AE33EC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100D46610(_Unwind_Exception *a1)
{
}

void *sub_100D46624@<X0>(void **a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x20uLL);
  id result = sub_100D4667C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100D46668(_Unwind_Exception *a1)
{
}

void *sub_100D4667C(void *a1, void **a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101880E30;
  sub_100D46710(a1 + 3, *a2);
  return a1;
}

void sub_100D466B8(_Unwind_Exception *a1)
{
}

void sub_100D466CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101880E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D466E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101880E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

id *sub_100D46704(uint64_t a1)
{
  return sub_100D46804((id *)(a1 + 24));
}

uint64_t *sub_100D46710(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)a2;
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101880E00);
  }
  uint64_t v3 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a1;
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    unint64_t v8 = "";
    __int16 v9 = 2050;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#luHistorical  LocationUpdaterHistoricalSession(), adapter:%{public}p}",  (uint8_t *)v6,  0x1Cu);
  }

  return a1;
}

id *sub_100D46804(id *a1)
{
  if ([*a1 updater])
  {
    sub_100D465CC("kCLConnectionMessageHistoricalLocationsFinished", &v18);
    id v2 = [*a1 updater];
    uint64_t v16 = v18;
    unint64_t v17 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }

    sub_100D55D8C((uint64_t)v2, (uint64_t)&v16, 0LL, 1, 0.0);
    uint64_t v5 = v17;
    if (v17)
    {
      uint64_t v6 = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880E00);
    }
    unint64_t v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = objc_msgSend(*a1, "updater", v16);
      *(_DWORD *)std::string buf = 68289282;
      int v21 = 0;
      __int16 v22 = 2082;
      id v23 = "";
      __int16 v24 = 2050;
      id v25 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical fetch and sending finished, updater:%{public}p}",  buf,  0x1Cu);
    }

    uint64_t v10 = v19;
    if (v19)
    {
      id v11 = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    goto LABEL_23;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101880E00);
  }
  __int16 v13 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    int v21 = 0;
    __int16 v22 = 2082;
    id v23 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical historical session has been invalidated}",  buf,  0x12u);
LABEL_23:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101880E00);
    }
  }

  unint64_t v14 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    int v21 = 0;
    __int16 v22 = 2082;
    id v23 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#luHistorical LocationUpdaterHistoricalSession deallocating}",  buf,  0x12u);
  }

  *a1 = 0LL;
  return a1;
}

void sub_100D46AD8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100D46AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!v12[0]) {
    return a2;
  }
  uint64_t v5 = sub_1005186D4(2LL, a2);
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101880EB8);
  }
  uint64_t v6 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a3 + 120);
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v20 = v7;
    __int16 v21 = 1026;
    int v22 = a2;
    __int16 v23 = 1026;
    int v24 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Overriding youth type for elevation credit, beginTime, %f, before, %{public}d, after, %{public}d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101880EB8);
    }
    uint64_t v8 = *(void *)(a3 + 120);
    int v13 = 134218496;
    uint64_t v14 = v8;
    __int16 v15 = 1026;
    int v16 = a2;
    __int16 v17 = 1026;
    int v18 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "Overriding youth type for elevation credit, beginTime, %f, before, %{public}d, after, %{public}d",  &v13,  24);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMotionActivity::TypeYouth CLFitnessYouthElevationCreditOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  return v5;
}

void sub_100D46CF8(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100D46D24(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v4 = (void *)sub_100D46E14(a1, "CLPredictedWalkDistanceBoutRecorderDb", a2, a3, 1, 2.56);
  *unint64_t v4 = off_101880EE8;
  v4[9] = off_101880FB0;
  v4[53] = off_101881000;
  sub_100B14CF0(v4 + 54, 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 448), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 464), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 480), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 496), 0LL, 0LL);
  *(_OWORD *)(a1 + 512) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  *(void *)(a1 + 160) = -[CLPredictedWalkDistanceCloudKitDelegate initWithPredictedWalkDistanceBoutRecorderDb:]( objc_alloc(&OBJC_CLASS___CLPredictedWalkDistanceCloudKitDelegate),  "initWithPredictedWalkDistanceBoutRecorderDb:",  a1);
  return a1;
}

void sub_100D46E00(_Unwind_Exception *a1)
{
}

uint64_t sub_100D46E14(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  *unint64_t v12 = &off_101826EF8;
  *(void *)a1 = off_101881118;
  *(void *)(a1 + 72) = off_1018811C0;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_101881118;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 232) = 0LL;
  int v13 = (void *)(a1 + 232);
  *(void *)(a1 + 72) = off_1018811C0;
  *(void *)(a1 + 240) = 0LL;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 256) = 0LL;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0LL;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 344) = 12000;
  *(void *)(a1 + 352) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 360));
  *(void *)(a1 + 360) = &off_101826EF8;
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v30 = a1 + 112;
  (*(void (**)(void))(v14 + 16))();
  __int16 v32 = 256;
  if (a3)
  {
    *int v13 = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v30 + 24LL))(v30);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v29 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = sub_1006E27E8();
  sub_100413284(v15, buf);
  int v16 = (int *)(a1 + 344);
  char v17 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 344));
  int v18 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  if ((v17 & 1) == 0) {
    *int v16 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101881200);
  }
  __int16 v21 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *v16;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101881200);
    }
    int v25 = *v16;
    v33[0] = 67109120;
    v33[1] = v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v33);
    uint64_t v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecord erDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLPre dictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  int v23 = HIBYTE(v32);
  *int v13 = 0xBFF0000000000000LL;
  if (v23)
  {
    if ((_BYTE)v32)
    {
      pthread_mutex_unlock(v31);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100D471E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[44] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_1005A8CF4(v26);
  sub_100D8A88C(a12);
  void *v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100D4728C()
{
}

void *sub_100D47294(void *a1)
{
  a1[9] = off_1018811C0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_101881118;
  a1[44] = off_101826EC8;
  sub_1001B9C98(a1 + 45);
  sub_1005A8CF4(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100D47310(void *a1)
{
  *a1 = off_101880EE8;
  a1[9] = off_101880FB0;
  a1[53] = off_101881000;
  sub_100D4736C((uint64_t)a1, 0LL, 0LL);
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {

    a1[20] = 0LL;
  }

  return sub_100D47294(a1);
}

void sub_100D4736C(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0LL) == (a3 != 0LL))
  {

    *(void *)(a1 + sub_10000AE14(v1 + 520) = a2;
    uint64_t v6 = *(const void **)(a1 + 512);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 512) = _Block_copy(a3);
    }
  }

  else
  {
    uint64_t v7 = sub_10126CC60();
    sub_100D473E0(v7);
  }

void *sub_100D473E4(uint64_t a1)
{
  return sub_100D47310((void *)(a1 - 72));
}

void *sub_100D473EC(uint64_t a1)
{
  return sub_100D47310((void *)(a1 - 424));
}

void sub_100D473F4(void *a1)
{
  uint64_t v1 = sub_100D47310(a1);
  operator delete(v1);
}

void sub_100D47408(uint64_t a1)
{
  uint64_t v1 = sub_100D47310((void *)(a1 - 72));
  operator delete(v1);
}

void sub_100D47420(uint64_t a1)
{
  uint64_t v1 = sub_100D47310((void *)(a1 - 424));
  operator delete(v1);
}

uint64_t sub_100D47438(uint64_t a1)
{
  uint64_t v3 = (sqlite3_stmt *)sub_100019240(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }

  uint64_t v6 = v8;
  uint64_t v8 = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100D474C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D474F0(uint64_t a1)
{
  return sub_100D47438(a1 - 72);
}

uint64_t sub_100D474F8(uint64_t a1, void **a2, int a3, int a4, int a5, double a6, double a7)
{
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v13 = a1 + 112;
  uint64_t v15 = v13 - 40;
  uint64_t v108 = v13;
  (*(void (**)(void))(v14 + 16))();
  __int16 v110 = 256;
  if ((sub_100D8A92C(v15) & 1) != 0)
  {
    int v98 = 0;
    uint64_t v106 = 0LL;
    int v107 = 0;
    uint64_t v99 = 0LL;
    uint64_t v100 = 0LL;
    int v101 = 0;
    uint64_t v103 = 0LL;
    uint64_t v104 = 0LL;
    uint64_t v102 = 0LL;
    int v105 = 0;
    if (a3)
    {
      if (a5) {
        sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime BETWEEN ? and ? ORDER BY startTime ASC LIMIT ?",  buf);
      }
      else {
        sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime > ? and endTime < ? ORDER BY startTime ASC LIMIT ?",  buf);
      }
      uint64_t v18 = *(void *)buf;
      uint64_t v97 = *(void *)buf;
      if (a7 >= a6)
      {
        uint64_t v19 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
        if (sub_1003B7480(v19, 1, a6))
        {
          unint64_t v20 = (sqlite3_stmt *)sub_100019240(v18);
          if (sub_1003B7480(v20, 2, a7))
          {
            __int16 v21 = (sqlite3_stmt *)sub_100019240(v18);
            if (sub_1003C28BC(v21, 3, a4))
            {
              uint64_t v94 = (uint64_t)(a2 + 2);
              while (!sub_100D47E48(&v97, (uint64_t)&v98))
              {
                int v22 = v98;
                uint64_t v24 = v99;
                uint64_t v23 = v100;
                int v25 = v101;
                uint64_t v27 = v102;
                uint64_t v26 = v103;
                int v29 = v104;
                int v28 = HIDWORD(v104);
                int v30 = v105;
                uint64_t v31 = v106;
                int v32 = v107;
                unsigned int v33 = (char *)a2[1];
                __int16 v34 = (char *)a2[2];
                if (v33 >= v34)
                {
                  unint64_t v36 = 0xEEEEEEEEEEEEEEEFLL * ((v33 - (_BYTE *)*a2) >> 3);
                  unint64_t v37 = v36 + 1;
                  if (v36 + 1 > 0x222222222222222LL) {
                    sub_100007008();
                  }
                  unint64_t v38 = 0xEEEEEEEEEEEEEEEFLL * ((v34 - (_BYTE *)*a2) >> 3);
                  if (2 * v38 > v37) {
                    unint64_t v37 = 2 * v38;
                  }
                  if (v38 >= 0x111111111111111LL) {
                    unint64_t v39 = 0x222222222222222LL;
                  }
                  else {
                    unint64_t v39 = v37;
                  }
                  if (v39) {
                    __int16 v40 = (char *)sub_1000BAE04(v94, v39);
                  }
                  else {
                    __int16 v40 = 0LL;
                  }
                  unint64_t v41 = &v40[120 * v36];
                  *(_DWORD *)unint64_t v41 = v22;
                  *((void *)v41 + 1) = v24;
                  *((void *)v41 + 2) = v23;
                  *((_DWORD *)v41 + 6) = v25;
                  *((void *)v41 + 4) = v27;
                  *((void *)v41 + 5) = v26;
                  *((_DWORD *)v41 + 12) = v29;
                  *((_DWORD *)v41 + 13) = v28;
                  *((_DWORD *)v41 + 14) = v30;
                  *((void *)v41 + 8) = v31;
                  *((_DWORD *)v41 + 18) = v32;
                  *(_OWORD *)(v41 + 76) = 0u;
                  *(_OWORD *)(v41 + 92) = 0u;
                  *(_OWORD *)(v41 + 104) = 0u;
                  uint64_t v43 = (char *)*a2;
                  __int16 v42 = (char *)a2[1];
                  id v44 = v41;
                  if (v42 != *a2)
                  {
                    do
                    {
                      __int128 v45 = *(_OWORD *)(v42 - 120);
                      __int128 v46 = *(_OWORD *)(v42 - 104);
                      __int128 v47 = *(_OWORD *)(v42 - 88);
                      *(_OWORD *)(v44 - 72) = *(_OWORD *)(v42 - 72);
                      *(_OWORD *)(v44 - 88) = v47;
                      *(_OWORD *)(v44 - 104) = v46;
                      *(_OWORD *)(v44 - 120) = v45;
                      __int128 v48 = *(_OWORD *)(v42 - 56);
                      __int128 v49 = *(_OWORD *)(v42 - 40);
                      __int128 v50 = *(_OWORD *)(v42 - 24);
                      *((void *)v44 - 1) = *((void *)v42 - 1);
                      *(_OWORD *)(v44 - 24) = v50;
                      *(_OWORD *)(v44 - 40) = v49;
                      *(_OWORD *)(v44 - 56) = v48;
                      v44 -= 120;
                      v42 -= 120;
                    }

                    while (v42 != v43);
                    __int16 v42 = (char *)*a2;
                  }

                  id v35 = v41 + 120;
                  *a2 = v44;
                  a2[1] = v41 + 120;
                  a2[2] = &v40[120 * v39];
                  if (v42) {
                    operator delete(v42);
                  }
                }

                else
                {
                  *(_DWORD *)unsigned int v33 = v98;
                  *((void *)v33 + 1) = v24;
                  *((void *)v33 + 2) = v23;
                  *((_DWORD *)v33 + 6) = v25;
                  *((void *)v33 + 4) = v27;
                  *((void *)v33 + 5) = v26;
                  *((_DWORD *)v33 + 12) = v29;
                  *((_DWORD *)v33 + 13) = v28;
                  *((_DWORD *)v33 + 14) = v30;
                  *((void *)v33 + 8) = v31;
                  *((_DWORD *)v33 + 18) = v32;
                  *(_OWORD *)(v33 + 76) = 0u;
                  *(_OWORD *)(v33 + 92) = 0u;
                  id v35 = v33 + 120;
                  *(_OWORD *)(v33 + 104) = 0u;
                }

                a2[1] = v35;
              }
            }
          }
        }
      }
    }

    else
    {
      if (a5) {
        sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime BETWEEN ? and ? AND boutType != ? ORDER BY startTime ASC LIMIT ?",  buf);
      }
      else {
        sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime > ? and endTime < ? AND boutType != ? ORDER BY st artTime ASC LIMIT ?",  buf);
      }
      uint64_t v18 = *(void *)buf;
      uint64_t v97 = *(void *)buf;
      if (a7 >= a6)
      {
        double v51 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
        if (sub_1003B7480(v51, 1, a6))
        {
          uint64_t v52 = (sqlite3_stmt *)sub_100019240(v18);
          if (sub_1003B7480(v52, 2, a7))
          {
            double v53 = (sqlite3_stmt *)sub_100019240(v18);
            if (sub_1003C28BC(v53, 3, 2))
            {
              __int128 v54 = (sqlite3_stmt *)sub_100019240(v18);
              if (sub_1003C28BC(v54, 4, a4))
              {
                uint64_t v94 = (uint64_t)(a2 + 2);
                while (!sub_100D47E48(&v97, (uint64_t)&v98))
                {
                  int v55 = v98;
                  uint64_t v57 = v99;
                  uint64_t v56 = v100;
                  int v58 = v101;
                  uint64_t v60 = v102;
                  uint64_t v59 = v103;
                  int v62 = v104;
                  int v61 = HIDWORD(v104);
                  int v63 = v105;
                  uint64_t v64 = v106;
                  int v65 = v107;
                  uint64_t v66 = (char *)a2[1];
                  double v67 = (char *)a2[2];
                  if (v66 >= v67)
                  {
                    unint64_t v69 = 0xEEEEEEEEEEEEEEEFLL * ((v66 - (_BYTE *)*a2) >> 3);
                    unint64_t v70 = v69 + 1;
                    if (v69 + 1 > 0x222222222222222LL) {
                      sub_100007008();
                    }
                    unint64_t v71 = 0xEEEEEEEEEEEEEEEFLL * ((v67 - (_BYTE *)*a2) >> 3);
                    if (2 * v71 > v70) {
                      unint64_t v70 = 2 * v71;
                    }
                    if (v71 >= 0x111111111111111LL) {
                      unint64_t v72 = 0x222222222222222LL;
                    }
                    else {
                      unint64_t v72 = v70;
                    }
                    if (v72) {
                      double v73 = (char *)sub_1000BAE04(v94, v72);
                    }
                    else {
                      double v73 = 0LL;
                    }
                    __int16 v74 = &v73[120 * v69];
                    *(_DWORD *)__int16 v74 = v55;
                    *((void *)v74 + 1) = v57;
                    *((void *)v74 + 2) = v56;
                    *((_DWORD *)v74 + 6) = v58;
                    *((void *)v74 + 4) = v60;
                    *((void *)v74 + 5) = v59;
                    *((_DWORD *)v74 + 12) = v62;
                    *((_DWORD *)v74 + 13) = v61;
                    *((_DWORD *)v74 + 14) = v63;
                    *((void *)v74 + 8) = v64;
                    *((_DWORD *)v74 + 18) = v65;
                    *(_OWORD *)(v74 + 76) = 0u;
                    *(_OWORD *)(v74 + 92) = 0u;
                    *(_OWORD *)(v74 + 104) = 0u;
                    __int16 v76 = (char *)*a2;
                    uint64_t v75 = (char *)a2[1];
                    double v77 = v74;
                    if (v75 != *a2)
                    {
                      do
                      {
                        __int128 v78 = *(_OWORD *)(v75 - 120);
                        __int128 v79 = *(_OWORD *)(v75 - 104);
                        __int128 v80 = *(_OWORD *)(v75 - 88);
                        *(_OWORD *)(v77 - 72) = *(_OWORD *)(v75 - 72);
                        *(_OWORD *)(v77 - 88) = v80;
                        *(_OWORD *)(v77 - 104) = v79;
                        *(_OWORD *)(v77 - 120) = v78;
                        __int128 v81 = *(_OWORD *)(v75 - 56);
                        __int128 v82 = *(_OWORD *)(v75 - 40);
                        __int128 v83 = *(_OWORD *)(v75 - 24);
                        *((void *)v77 - 1) = *((void *)v75 - 1);
                        *(_OWORD *)(v77 - 24) = v83;
                        *(_OWORD *)(v77 - 40) = v82;
                        *(_OWORD *)(v77 - 56) = v81;
                        v77 -= 120;
                        v75 -= 120;
                      }

                      while (v75 != v76);
                      uint64_t v75 = (char *)*a2;
                    }

                    unint64_t v68 = v74 + 120;
                    *a2 = v77;
                    a2[1] = v74 + 120;
                    a2[2] = &v73[120 * v72];
                    if (v75) {
                      operator delete(v75);
                    }
                  }

                  else
                  {
                    *(_DWORD *)uint64_t v66 = v98;
                    *((void *)v66 + 1) = v57;
                    *((void *)v66 + 2) = v56;
                    *((_DWORD *)v66 + 6) = v58;
                    *((void *)v66 + 4) = v60;
                    *((void *)v66 + 5) = v59;
                    *((_DWORD *)v66 + 12) = v62;
                    *((_DWORD *)v66 + 13) = v61;
                    *((_DWORD *)v66 + 14) = v63;
                    *((void *)v66 + 8) = v64;
                    *((_DWORD *)v66 + 18) = v65;
                    *(_OWORD *)(v66 + 76) = 0u;
                    *(_OWORD *)(v66 + 92) = 0u;
                    unint64_t v68 = v66 + 120;
                    *(_OWORD *)(v66 + 104) = 0u;
                  }

                  a2[1] = v68;
                }
              }
            }
          }
        }
      }
    }

    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_1018810C8);
    }
    __int16 v84 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v85 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
      *(_DWORD *)std::string buf = 134219008;
      *(void *)&uint8_t buf[4] = v85;
      __int16 v122 = 2048;
      double v123 = a6;
      __int16 v124 = 2048;
      double v125 = a7;
      __int16 v126 = 1024;
      int v127 = a3;
      __int16 v128 = 1024;
      int v129 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "Retrieved %lu records between %.3f and %.3f, includeWatchStepBouts, %d, with limit %d",  buf,  0x2Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018810C8);
      }
      unint64_t v89 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
      int v111 = 134219008;
      unint64_t v112 = v89;
      __int16 v113 = 2048;
      double v114 = a6;
      __int16 v115 = 2048;
      double v116 = a7;
      __int16 v117 = 1024;
      int v118 = a3;
      __int16 v119 = 1024;
      int v120 = a4;
      LODWORD(v92) = 44;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  2LL,  "Retrieved %lu records between %.3f and %.3f, includeWatchStepBouts, %d, with limit %d",  &v111,  v92,  v93,  v94,  v95);
      __int16 v91 = (char *)v90;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLPredictedWalkDistanceBoutRecorderDb::queryBoutDataInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry> &, BOOL, int, BOOL) const",  "%s\n",  v90);
      if (v91 != buf) {
        free(v91);
      }
    }

    uint64_t v97 = 0LL;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
      uint64_t v17 = 100LL;
      if (!HIBYTE(v110)) {
        return v17;
      }
    }

    else
    {
      uint64_t v17 = 100LL;
    }
  }

  else
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_1018810C8);
    }
    int v16 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "CLPredictedWalkDistanceBoutRecorderDb - DB, not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018810C8);
      }
      LOWORD(v98) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  1LL,  "CLPredictedWalkDistanceBoutRecorderDb - DB, not accessible",  &v98,  2);
      __int16 v88 = (char *)v87;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLPredictedWalkDistanceBoutRecorderDb::queryBoutDataInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry> &, BOOL, int, BOOL) const",  "%s\n",  v87);
      if (v88 != buf) {
        free(v88);
      }
    }

    uint64_t v17 = 109LL;
  }

  if ((_BYTE)v110) {
    pthread_mutex_unlock(v109);
  }
  else {
    (*(void (**)(uint64_t))(*(void *)v108 + 24LL))(v108);
  }
  return v17;
}

void sub_100D47DE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  sub_1011C52D0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100D47E48(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  sub_100D48E98(a1, a2);
  return 0LL;
}

uint64_t sub_100D47EA4(uint64_t a1, void **a2, int a3, int a4, int a5, double a6, double a7)
{
  return sub_100D474F8(a1 - 424, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100D47EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v20 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v21 = 256;
  if (*(double *)(*(void *)(a2 + 8) - 16LL) != 1.79769313e308)
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_1018810C8);
    }
    uint64_t v13 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "CLPredictedWalkDistanceBoutRecorderDb - Failed to expire records.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018810C8);
      }
      __int16 v19 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  17LL,  "CLPredictedWalkDistanceBoutRecorderDb - Failed to expire records.",  &v19,  2);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual long CLPredictedWalkDistanceBoutRecorderDb::aggregateRecords(const CLAggregationRules &)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    goto LABEL_10;
  }

  if (!sub_100D8A92C(a1 + 72))
  {
LABEL_10:
    uint64_t v12 = -1LL;
    goto LABEL_17;
  }

  sub_1003C0454(*(void *)(a1 + 80));
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM PredictedWalkDistanceBoutHistory WHERE endTime < ?", buf);
  uint64_t v7 = *(void *)buf;
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sub_1003B7480(v8, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
  {
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = (sqlite3_stmt *)sub_100019240(v7);
    sub_1003BB2BC(v9, v10);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
    *(_DWORD *)(a1 + 132) = v11;
    uint64_t v12 = v11;
  }

  else
  {
    uint64_t v12 = -1LL;
  }

  sub_1003C05BC(*(void *)(a1 + 80));
  uint64_t v14 = *(void *)(a1 + 80);
  else {
    uint64_t v15 = *(void *)(v14 + 88);
  }
  sub_1003C1EC0(v14, v15);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
LABEL_17:
  (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  return v12;
}

void sub_100D4815C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100D481A8(uint64_t a1, uint64_t a2)
{
  return sub_100D47EAC(a1 - 72, a2);
}

void *sub_100D481B0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "PredictedWalkDistanceBoutHistory");
}

void *sub_100D481C0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "PredictedWalkDistanceBoutHistory");
}

uint64_t sub_100D481D0(void *a1, uint64_t a2)
{
  return sub_1001B3964(a1, a2, 0LL);
}

uint64_t sub_100D481D8(uint64_t a1, uint64_t a2)
{
  return sub_1001B3964((void *)(a1 - 424), a2, 0LL);
}

BOOL sub_100D481E4(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  int v17 = 0;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v21 = 0LL;
  int v24 = 0;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  uint64_t v28 = 0LL;
  int v7 = sub_1001BA11C(a1, a2, (uint64_t)&v17);
  if (!v7)
  {
    do
    {
      uint64_t v16 = 0LL;
      uint64_t v8 = -[CLSerializablePredictedWalkDistanceBout initWithPredictedWalkDistanceBout:]( objc_alloc(&OBJC_CLASS___CLSerializablePredictedWalkDistanceBout),  "initWithPredictedWalkDistanceBout:",  &v17);
      uint64_t v9 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v8,  1LL,  &v16);
      if (v16)
      {
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_1018810C8);
        }
        uint64_t v10 = (os_log_s *)qword_1019346C8;
        if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 138412290;
          uint64_t v32 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Unable to serialize bout data: %@",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346C0 != -1) {
            dispatch_once(&qword_1019346C0, &stru_1018810C8);
          }
          int v29 = 138412290;
          uint64_t v30 = v16;
          LODWORD(v15) = 12;
          int v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  16LL,  "Unable to serialize bout data: %@",  &v29,  v15);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPredictedWalkDistanceBoutRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArr ay<NSData *> **)",  "%s\n",  v11);
        }
      }

      else
      {
        -[NSMutableArray addObject:](v6, "addObject:", v9);
      }

      int v12 = sub_1001BA11C(a1, a2, (uint64_t)&v17);
    }

    while (!v12);
    int v7 = v12;
  }

  uint64_t v14 = (NSArray *)-[NSMutableArray count](v6, "count");
  if (v14) {
    uint64_t v14 = +[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v6);
  }
  *a3 = v14;

  return v7 == 1;
}

BOOL sub_100D484AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0LL;
  id v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___CLSerializablePredictedWalkDistanceBout),  a2,  &v9);
  uint64_t v5 = v9;
  if (v9)
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_1018810C8);
    }
    uint64_t v6 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to deserialize bout data: %@", buf, 0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018810C8);
      }
      int v10 = 138412290;
      uint64_t v11 = v9;
      int v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  16LL,  "Unable to deserialize bout data: %@",  &v10,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPredictedWalkDistanceBoutRecorderDb::dataBlobToEntry(NSData *, CLPredictedWalkDistanceBoutEntry &)",  "%s\n",  v7);
    }
  }

  else
  {
    [v4 getPredictedWalkDistanceBout:a3];
  }

  return v5 == 0;
}

void sub_100D486A4(uint64_t a1)
{
  if (sub_1003C1048(*(void *)(a1 + 80)))
  {
    sub_1003B59A0( *(void *)(a1 + 80),  "PredictedWalkDistanceBoutHistory",  (const char **)&qword_10199DE50,  (const std::string::value_type **)&qword_10199E090,  0);
    *(void *)(a1 + 432) = sub_1003BF158( *(void *)(a1 + 80),  "INSERT INTO PredictedWalkDistanceBoutHistory (startTime, endTime, stepCount, distance, act iveTime, elevationAscended, elevationDescended, stepCountGPS, distanceGPS, boutType) VALUE S (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 440) = v2;
    *(void *)(a1 + 448) = sub_1003BF158( *(void *)(a1 + 80),  "UPDATE PredictedWalkDistanceBoutHistory SET startTime = ?, endTime = ?, stepCount = ?, dis tance = ?, activeTime = ?, elevationAscended = ?, elevationDescended = ?, stepCountGPS = ? , distanceGPS = ?, boutType = ? WHERE id = ?");
    *(void *)(a1 + 456) = v3;
    *(void *)(a1 + 464) = sub_1003BF158( *(void *)(a1 + 80),  "DELETE FROM PredictedWalkDistanceBoutHistory WHERE id = ?");
    *(void *)(a1 + 472) = v4;
    *(void *)(a1 + 480) = sub_1003BF158( *(void *)(a1 + 80),  "SELECT * FROM PredictedWalkDistanceBoutHistory ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 488) = v5;
    *(void *)(a1 + 496) = sub_1003BF158(*(void *)(a1 + 80), "SELECT COUNT(*) FROM PredictedWalkDistanceBoutHistory");
    *(void *)(a1 + 504) = v6;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  }

  else
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_1018810C8);
    }
    int v7 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "CLPredictedWalkDistanceBoutRecorderDb: Device is locked and we are unable to open the database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018810C8);
      }
      v10[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  2LL,  "CLPredictedWalkDistanceBoutRecorderDb: Device is locked and we are unable to open the database",  v10,  2);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLPredictedWalkDistanceBoutRecorderDb::prepareSQLStatements()",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

uint64_t sub_100D488D8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 432), &v36);
    if (v36)
    {
      uint64_t v5 = (sqlite3_stmt *)sub_100019240(v36);
      if (sub_1003B7480(v5, 1, *(double *)(a2 + 8)))
      {
        uint64_t v6 = (sqlite3_stmt *)sub_100019240(v36);
        if (sub_1003B7480(v6, 2, *(double *)(a2 + 16)))
        {
          int v7 = (sqlite3_stmt *)sub_100019240(v36);
          if (sub_1003C2AF0(v7, 3, *(_DWORD *)(a2 + 24)))
          {
            uint64_t v8 = (sqlite3_stmt *)sub_100019240(v36);
            if (sub_1003B7480(v8, 4, *(double *)(a2 + 32)))
            {
              uint64_t v9 = (sqlite3_stmt *)sub_100019240(v36);
              if (sub_1003B7480(v9, 5, *(double *)(a2 + 40)))
              {
                int v10 = (sqlite3_stmt *)sub_100019240(v36);
                if (sub_1003C2AF0(v10, 6, *(_DWORD *)(a2 + 48)))
                {
                  uint64_t v11 = (sqlite3_stmt *)sub_100019240(v36);
                  if (sub_1003C2AF0(v11, 7, *(_DWORD *)(a2 + 52)))
                  {
                    int v12 = (sqlite3_stmt *)sub_100019240(v36);
                    if (sub_1003C2AF0(v12, 8, *(_DWORD *)(a2 + 56)))
                    {
                      uint64_t v13 = (sqlite3_stmt *)sub_100019240(v36);
                      if (sub_1003B7480(v13, 9, *(double *)(a2 + 64)))
                      {
                        uint64_t v14 = (sqlite3_stmt *)sub_100019240(v36);
                        if (sub_1003C28BC(v14, 10, *(_DWORD *)(a2 + 72)))
                        {
                          uint64_t v15 = *(void *)(a1 + 80);
                          uint64_t v16 = (sqlite3_stmt *)sub_100019240(v36);
                          sub_1003BB2BC(v15, v16);
                          ++*(_DWORD *)(a1 + 132);
                          if (*(void *)(a1 + 520))
                          {
                            if (*(void *)(a1 + 512))
                            {
                              __int128 v17 = *(_OWORD *)(a2 + 84);
                              __int128 v41 = *(_OWORD *)(a2 + 68);
                              __int128 v42 = v17;
                              __int128 v43 = *(_OWORD *)(a2 + 100);
                              int v44 = *(_DWORD *)(a2 + 116);
                              __int128 v18 = *(_OWORD *)(a2 + 20);
                              *(_OWORD *)std::string buf = *(_OWORD *)(a2 + 4);
                              __int128 v38 = v18;
                              __int128 v19 = *(_OWORD *)(a2 + 52);
                              __int128 v39 = *(_OWORD *)(a2 + 36);
                              __int128 v40 = v19;
                              int v20 = sub_1003C1068(*(void *)(a1 + 80));
                              v25[1] = 3221225472LL;
                              __int128 v31 = v41;
                              __int128 v32 = v42;
                              __int128 v33 = v43;
                              __int128 v27 = *(_OWORD *)buf;
                              __int128 v28 = v38;
                              __int128 v29 = v39;
                              uint64_t v21 = *(void **)(a1 + 520);
                              v25[0] = _NSConcreteStackBlock;
                              v25[2] = sub_100D48CA8;
                              void v25[3] = &unk_101881028;
                              v25[4] = a1;
                              int v26 = v20;
                              int v34 = v44;
                              __int128 v30 = v40;
                              [v21 async:v25];
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    else
    {
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_1018810C8);
      }
      uint64_t v22 = (os_log_s *)qword_1019346C8;
      if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "PredictedWalkDistanceBoutRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_1018810C8);
        }
        __int16 v35 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  17LL,  "PredictedWalkDistanceBoutRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement",  &v35,  2);
        int v24 = (uint8_t *)v23;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLPredictedWalkDistanceBoutRecorderDb::insertRecordUL(const CLPredictedWalkDistanceBoutEntry &, BOOL)",  "%s\n",  v23);
        if (v24 != buf) {
          free(v24);
        }
      }
    }

    uint64_t result = v36;
    uint64_t v36 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100D48C74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  if (a32) {
    (*(void (**)(uint64_t))(*(void *)a32 + 8LL))(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D48CA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 512LL);
  __int128 v2 = *(_OWORD *)(a1 + 120);
  v6[4] = *(_OWORD *)(a1 + 104);
  v6[5] = v2;
  v6[6] = *(_OWORD *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  __int128 v3 = *(_OWORD *)(a1 + 56);
  __int128 v4 = *(_OWORD *)(a1 + 88);
  _DWORD v6[2] = *(_OWORD *)(a1 + 72);
  void v6[3] = v4;
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v6);
}

uint64_t sub_100D48D0C(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t v13 = 0LL;
  int v14 = 0;
  __int128 v8 = 0uLL;
  int v9 = 0;
  uint64_t v11 = 0LL;
  __int128 v10 = 0uLL;
  int v12 = 0;
  uint64_t v4 = sub_100D47E48(&v15, (uint64_t)&v7);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)a2 = v7;
    *(_OWORD *)(a2 + 8) = v8;
    *(_DWORD *)(a2 + 24) = v9;
    *(_OWORD *)(a2 + 32) = v10;
    *(void *)(a2 + 48) = v11;
    *(_DWORD *)(a2 + 56) = v12;
    *(void *)(a2 + 64) = v13;
    *(_DWORD *)(a2 + 72) = v14;
  }

  uint64_t v5 = v15;
  uint64_t v15 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v4;
}

void sub_100D48DE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_100D48E08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = 0;
  double v11 = 0.0;
  int v12 = 0;
  __int128 v6 = 0uLL;
  int v7 = 0;
  uint64_t v9 = 0LL;
  __int128 v8 = 0uLL;
  int v10 = 0;
  sub_100D48E98(a2, (uint64_t)&v5);
  *(_DWORD *)a3 = v5;
  *(_OWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 24) = v7;
  *(_OWORD *)(a3 + 32) = v8;
  *(void *)(a3 + 48) = v9;
  *(_DWORD *)(a3 + 56) = v10;
  double result = v11;
  *(double *)(a3 + 64) = v11;
  *(_DWORD *)(a3 + 72) = v12;
  return result;
}

uint64_t sub_100D48E98(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  int v5 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  __int128 v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  int v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v7, 3);
  __int128 v8 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  uint64_t v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  int v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 48) = sqlite3_column_int(v10, 6);
  double v11 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 52) = sqlite3_column_int(v11, 7);
  int v12 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v12, 8);
  uint64_t v13 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v13, 9);
  int v14 = (sqlite3_stmt *)sub_100019240(*a1);
  uint64_t result = sqlite3_column_int(v14, 10);
  *(_DWORD *)(a2 + 72) = result;
  return result;
}

uint64_t sub_100D48F94(uint64_t a1, void **a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v44[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v45 = 256;
  if ((sub_100D8A92C(v6) & 1) != 0)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from PredictedWalkDistanceBoutHistory ORDER BY startTime ASC", buf);
    uint64_t v41 = v5;
    uint64_t v42 = a1;
    uint64_t v43 = *(void *)buf;
    v44[0] = *(void *)buf;
    sub_1003C0454(*(void *)(a1 + 80));
    *(_DWORD *)std::string buf = 0;
    uint64_t v54 = 0LL;
    int v55 = 0;
    uint64_t v47 = 0LL;
    uint64_t v48 = 0LL;
    int v49 = 0;
    uint64_t v51 = 0LL;
    uint64_t v52 = 0LL;
    uint64_t v50 = 0LL;
    int v53 = 0;
    while (!sub_100D47E48(v44, (uint64_t)buf))
    {
      int v7 = *(_DWORD *)buf;
      uint64_t v9 = v47;
      uint64_t v8 = v48;
      int v10 = v49;
      uint64_t v12 = v50;
      uint64_t v11 = v51;
      int v13 = v52;
      int v14 = HIDWORD(v52);
      int v15 = v53;
      uint64_t v16 = v54;
      int v17 = v55;
      __int128 v18 = (char *)a2[1];
      __int128 v19 = (char *)a2[2];
      if (v18 >= v19)
      {
        unint64_t v21 = 0xEEEEEEEEEEEEEEEFLL * ((v18 - (_BYTE *)*a2) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0x222222222222222LL) {
          sub_100007008();
        }
        unint64_t v23 = 0xEEEEEEEEEEEEEEEFLL * ((v19 - (_BYTE *)*a2) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x111111111111111LL) {
          unint64_t v24 = 0x222222222222222LL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          __int128 v25 = (char *)sub_1000BAE04((uint64_t)(a2 + 2), v24);
        }
        else {
          __int128 v25 = 0LL;
        }
        int v26 = &v25[120 * v21];
        *(_DWORD *)int v26 = v7;
        *((void *)v26 + 1) = v9;
        *((void *)v26 + 2) = v8;
        *((_DWORD *)v26 + 6) = v10;
        *((void *)v26 + 4) = v12;
        *((void *)v26 + 5) = v11;
        *((_DWORD *)v26 + 12) = v13;
        *((_DWORD *)v26 + 13) = v14;
        *((_DWORD *)v26 + 14) = v15;
        *((void *)v26 + 8) = v16;
        *((_DWORD *)v26 + 18) = v17;
        *(_OWORD *)(v26 + 76) = 0u;
        *(_OWORD *)(v26 + 92) = 0u;
        *(_OWORD *)(v26 + 104) = 0u;
        __int128 v28 = (char *)*a2;
        __int128 v27 = (char *)a2[1];
        __int128 v29 = v26;
        if (v27 != *a2)
        {
          do
          {
            __int128 v30 = *(_OWORD *)(v27 - 120);
            __int128 v31 = *(_OWORD *)(v27 - 104);
            __int128 v32 = *(_OWORD *)(v27 - 88);
            *(_OWORD *)(v29 - 72) = *(_OWORD *)(v27 - 72);
            *(_OWORD *)(v29 - 88) = v32;
            *(_OWORD *)(v29 - 104) = v31;
            *(_OWORD *)(v29 - 120) = v30;
            __int128 v33 = *(_OWORD *)(v27 - 56);
            __int128 v34 = *(_OWORD *)(v27 - 40);
            __int128 v35 = *(_OWORD *)(v27 - 24);
            *((void *)v29 - 1) = *((void *)v27 - 1);
            *(_OWORD *)(v29 - 24) = v35;
            *(_OWORD *)(v29 - 40) = v34;
            *(_OWORD *)(v29 - 56) = v33;
            v29 -= 120;
            v27 -= 120;
          }

          while (v27 != v28);
          __int128 v27 = (char *)*a2;
        }

        int v20 = v26 + 120;
        *a2 = v29;
        a2[1] = v26 + 120;
        a2[2] = &v25[120 * v24];
        if (v27) {
          operator delete(v27);
        }
      }

      else
      {
        *(_DWORD *)__int128 v18 = *(_DWORD *)buf;
        *((void *)v18 + 1) = v9;
        *((void *)v18 + 2) = v8;
        *((_DWORD *)v18 + 6) = v10;
        *((void *)v18 + 4) = v12;
        *((void *)v18 + 5) = v11;
        *((_DWORD *)v18 + 12) = v13;
        *((_DWORD *)v18 + 13) = v14;
        *((_DWORD *)v18 + 14) = v15;
        *((void *)v18 + 8) = v16;
        *((_DWORD *)v18 + 18) = v17;
        *(_OWORD *)(v18 + 76) = 0u;
        *(_OWORD *)(v18 + 92) = 0u;
        int v20 = v18 + 120;
        *(_OWORD *)(v18 + 104) = 0u;
      }

      a2[1] = v20;
    }

    sub_1003C05BC(*(void *)(v42 + 80));
    uint64_t v5 = v41;
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
    }
    uint64_t v37 = 100LL;
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_1018810E8);
    }
    uint64_t v36 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "PredictedWalkDistanceBoutHistory not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018810E8);
      }
      LOWORD(v44[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "PredictedWalkDistanceBoutHistory not accessible",  v44,  2);
      __int128 v40 = (uint8_t *)v39;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLPredictedWalkDistanceBoutRecorderDb::queryBoutAllRecords(std::vector<CLPredictedWalkDistanceBo utEntry> &) const",  "%s\n",  v39);
      if (v40 != buf) {
        free(v40);
      }
    }

    uint64_t v37 = 109LL;
  }

  (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  return v37;
}

void sub_100D493C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100D49418(uint64_t a1, void **a2)
{
  return sub_100D48F94(a1 - 424, a2);
}

uint64_t sub_100D49420(uint64_t *a1, char **a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v56);
  if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    if (HIBYTE(v57)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10126CDE8(v4);
LABEL_44:
    sub_100007008();
  }

  __int16 v45 = v56[1];
  operator delete(v56[0]);
  if (!v45) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v56);
    uint64_t v6 = sub_10000CF44(&v57, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v47) & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    if ((SBYTE7(v47) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v47);
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if (SBYTE7(v47) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v58);
    if ((SBYTE7(v47) & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    sub_1003C0D54(v10, v11, &v54);
    uint64_t v12 = v54;
    uint64_t v54 = 0LL;
    uint64_t v55 = v12;
    if (SBYTE7(v47) < 0) {
      operator delete(__p[0]);
    }
    sub_1003C0454(a1[10]);
    LODWORD(__p[0]) = 0;
    __p[1] = 0LL;
    *(void *)&__int128 v47 = 0LL;
    DWORD2(v47) = 0;
    *(void *)&__int128 v49 = 0LL;
    __int128 v48 = 0uLL;
    DWORD2(v49) = 0;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    uint64_t v53 = 0LL;
    while (!sub_1001BA11C((uint64_t)a1, &v55, (uint64_t)__p))
    {
      unint64_t v13 = (unint64_t)a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if (v13 >= v14)
      {
        unint64_t v22 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v13 - (void)*a2) >> 3);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0x222222222222222LL) {
          goto LABEL_44;
        }
        unint64_t v24 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v14 - (void)*a2) >> 3);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x111111111111111LL) {
          unint64_t v25 = 0x222222222222222LL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25) {
          int v26 = (char *)sub_1000BAE04((uint64_t)(a2 + 2), v25);
        }
        else {
          int v26 = 0LL;
        }
        __int128 v27 = &v26[120 * v22];
        __int128 v28 = *(_OWORD *)__p;
        __int128 v29 = v47;
        __int128 v30 = v49;
        *((_OWORD *)v27 + 2) = v48;
        *((_OWORD *)v27 + 3) = v30;
        *(_OWORD *)__int128 v27 = v28;
        *((_OWORD *)v27 + 1) = v29;
        __int128 v31 = v50;
        __int128 v32 = v51;
        __int128 v33 = v52;
        *((void *)v27 + 14) = v53;
        *((_OWORD *)v27 + 5) = v32;
        *((_OWORD *)v27 + 6) = v33;
        *((_OWORD *)v27 + 4) = v31;
        __int128 v35 = *a2;
        __int128 v34 = a2[1];
        uint64_t v36 = v27;
        if (v34 != *a2)
        {
          do
          {
            __int128 v37 = *(_OWORD *)(v34 - 120);
            __int128 v38 = *(_OWORD *)(v34 - 104);
            __int128 v39 = *(_OWORD *)(v34 - 88);
            *(_OWORD *)(v36 - 72) = *(_OWORD *)(v34 - 72);
            *(_OWORD *)(v36 - 88) = v39;
            *(_OWORD *)(v36 - 104) = v38;
            *(_OWORD *)(v36 - 120) = v37;
            __int128 v40 = *(_OWORD *)(v34 - 56);
            __int128 v41 = *(_OWORD *)(v34 - 40);
            __int128 v42 = *(_OWORD *)(v34 - 24);
            *((void *)v36 - 1) = *((void *)v34 - 1);
            *(_OWORD *)(v36 - 24) = v42;
            *(_OWORD *)(v36 - 40) = v41;
            *(_OWORD *)(v36 - 56) = v40;
            v36 -= 120;
            v34 -= 120;
          }

          while (v34 != v35);
          __int128 v34 = *a2;
        }

        unint64_t v21 = v27 + 120;
        *a2 = v36;
        a2[1] = v27 + 120;
        a2[2] = &v26[120 * v25];
        if (v34) {
          operator delete(v34);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)__p;
        __int128 v16 = v47;
        __int128 v17 = v49;
        *(_OWORD *)(v13 + 32) = v48;
        *(_OWORD *)(v13 + 48) = v17;
        *(_OWORD *)unint64_t v13 = v15;
        *(_OWORD *)(v13 + 16) = v16;
        __int128 v18 = v50;
        __int128 v19 = v51;
        __int128 v20 = v52;
        *(void *)(v13 + 112) = v53;
        *(_OWORD *)(v13 + 80) = v19;
        *(_OWORD *)(v13 + 96) = v20;
        *(_OWORD *)(v13 + 64) = v18;
        unint64_t v21 = (char *)(v13 + 120);
      }

      a2[1] = v21;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v43 = v55;
    uint64_t v55 = 0LL;
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
    }
    *(void **)((char *)v56
    uint64_t v57 = v44;
    std::streambuf::~streambuf(&v58);
    return std::ios::~ios(&v59);
  }

  return result;
}

void sub_100D497A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }
  sub_1011F8850((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_100D4980C(void *a1, void **a2, double a3, double a4)
{
  uint64_t v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v62);
  if ((SHIBYTE(v63) & 0x80000000) == 0)
  {
    if (HIBYTE(v63)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_10126CF54(v10);
    goto LABEL_41;
  }

  uint64_t v4 = (std::stringbuf *)v62[1];
  operator delete(v62[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v62);
  uint64_t v11 = sub_10000CF44(&v63, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if ((SBYTE7(v53) & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((SBYTE7(v53) & 0x80u) == 0) {
    uint64_t v13 = BYTE7(v53);
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  unint64_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if (SBYTE7(v53) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1[10];
  uint64_t v4 = &v64;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v64);
  if ((SBYTE7(v53) & 0x80u) == 0) {
    __int128 v16 = (char *)__p;
  }
  else {
    __int128 v16 = (char *)__p[0];
  }
  sub_1003C0D54(v15, v16, &v60);
  uint64_t v5 = v60;
  uint64_t v60 = 0LL;
  uint64_t v61 = v5;
  if (SBYTE7(v53) < 0) {
    operator delete(__p[0]);
  }
  __int128 v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    __int128 v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      LODWORD(__p[0]) = 0;
      __p[1] = 0LL;
      *(void *)&__int128 v53 = 0LL;
      DWORD2(v53) = 0;
      *(void *)&__int128 v55 = 0LL;
      __int128 v54 = 0uLL;
      DWORD2(v55) = 0;
      __int128 v56 = 0u;
      __int128 v57 = 0u;
      __int128 v58 = 0u;
      uint64_t v59 = 0LL;
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v61, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        __int128 v20 = (char *)a2[1];
        unint64_t v21 = (char *)a2[2];
        if (v20 >= v21)
        {
          unint64_t v29 = 0xEEEEEEEEEEEEEEEFLL * ((v20 - (_BYTE *)*a2) >> 3);
          unint64_t v30 = v29 + 1;
          if (v29 + 1 > 0x222222222222222LL) {
            sub_100007008();
          }
          unint64_t v31 = 0xEEEEEEEEEEEEEEEFLL * ((v21 - (_BYTE *)*a2) >> 3);
          if (2 * v31 > v30) {
            unint64_t v30 = 2 * v31;
          }
          if (v31 >= 0x111111111111111LL) {
            unint64_t v32 = 0x222222222222222LL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32) {
            __int128 v33 = (char *)sub_1000BAE04((uint64_t)(a2 + 2), v32);
          }
          else {
            __int128 v33 = 0LL;
          }
          __int128 v34 = &v33[120 * v29];
          __int128 v35 = *(_OWORD *)__p;
          __int128 v36 = v53;
          __int128 v37 = v55;
          *((_OWORD *)v34 + 2) = v54;
          *((_OWORD *)v34 + 3) = v37;
          *(_OWORD *)__int128 v34 = v35;
          *((_OWORD *)v34 + 1) = v36;
          __int128 v38 = v56;
          __int128 v39 = v57;
          __int128 v40 = v58;
          *((void *)v34 + 14) = v59;
          *((_OWORD *)v34 + 5) = v39;
          *((_OWORD *)v34 + 6) = v40;
          *((_OWORD *)v34 + 4) = v38;
          __int128 v42 = (char *)*a2;
          __int128 v41 = (char *)a2[1];
          uint64_t v43 = v34;
          if (v41 != *a2)
          {
            do
            {
              __int128 v44 = *(_OWORD *)(v41 - 120);
              __int128 v45 = *(_OWORD *)(v41 - 104);
              __int128 v46 = *(_OWORD *)(v41 - 88);
              *(_OWORD *)(v43 - 72) = *(_OWORD *)(v41 - 72);
              *(_OWORD *)(v43 - 88) = v46;
              *(_OWORD *)(v43 - 104) = v45;
              *(_OWORD *)(v43 - 120) = v44;
              __int128 v47 = *(_OWORD *)(v41 - 56);
              __int128 v48 = *(_OWORD *)(v41 - 40);
              __int128 v49 = *(_OWORD *)(v41 - 24);
              *((void *)v43 - 1) = *((void *)v41 - 1);
              *(_OWORD *)(v43 - 24) = v49;
              *(_OWORD *)(v43 - 40) = v48;
              *(_OWORD *)(v43 - 56) = v47;
              v43 -= 120;
              v41 -= 120;
            }

            while (v41 != v42);
            __int128 v41 = (char *)*a2;
          }

          __int128 v28 = v34 + 120;
          *a2 = v43;
          a2[1] = v34 + 120;
          a2[2] = &v33[120 * v32];
          if (v41) {
            operator delete(v41);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)__p;
          __int128 v23 = v53;
          __int128 v24 = v55;
          *((_OWORD *)v20 + 2) = v54;
          *((_OWORD *)v20 + 3) = v24;
          *(_OWORD *)__int128 v20 = v22;
          *((_OWORD *)v20 + 1) = v23;
          __int128 v25 = v56;
          __int128 v26 = v57;
          __int128 v27 = v58;
          *((void *)v20 + 14) = v59;
          *((_OWORD *)v20 + 5) = v26;
          *((_OWORD *)v20 + 6) = v27;
          *((_OWORD *)v20 + 4) = v25;
          __int128 v28 = v20 + 120;
        }

        a2[1] = v28;
      }

      uint64_t v5 = v61;
      goto LABEL_43;
    }
  }

void sub_100D49BD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_100D49C3C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101881200);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101881200);
      }
      int v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)std::string buf = 134349056;
        *(void *)__int128 v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101881200);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>: :setDatabaseAccessible() [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101881200);
    }
    uint64_t v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    __int128 v16 = (void *)(v14 + 8 * (v13 / 0x22));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 120 * (v13 % 0x22);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x22)) + 120 * (v22 % 0x22);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018810E8);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018810E8);
        }
        LOWORD(v41) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        __int128 v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>: :setDatabaseAccessible() [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 120LL;
      if (v17 - *v16 == 4080)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101881200);
    }
    __int128 v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101881200);
      }
    }

    __int128 v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v21 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  __int128 v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      __int128 v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 17LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 34LL;
  }

  *(void *)(a1 + 208) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100D4A368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_100D4A39C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3 = *a3;
  __int128 v4 = a3[1];
  __int128 v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)a3[4];
  __int128 v7 = a3[5];
  __int128 v8 = a3[6];
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(__n128 *)(a2 + 64) = result;
  return result;
}

id *sub_100D4A3C8(uint64_t a1, __int128 *a2, char a3)
{
  v49[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v49[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v49);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  int v37 = 0;
  double v38 = 0.0;
  uint64_t v39 = 0LL;
  int v40 = 0;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v41 = 0LL;
  int v44 = 0;
  __int128 v47 = 0u;
  uint64_t v48 = 0LL;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  int v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 104LL))(a1, &v37);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101881200);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101881200);
        }
        LOWORD(v50) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v50,  2);
        __int128 v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>: :sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLAct ivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *((double *)a2 + 1);
    double v8 = v38;
    double v9 = v7 - v38;
    if (v7 - v38 < 0.0) {
      double v9 = -(v7 - v38);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101881200);
      }
      uint64_t v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)std::string buf = 134349312;
        double v55 = v38;
        __int16 v56 = 2050;
        uint64_t v57 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101881200);
        }
        uint64_t v28 = *((void *)a2 + 1);
        int v50 = 134349312;
        double v51 = v38;
        __int16 v52 = 2050;
        uint64_t v53 = v28;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v50,  22);
        unint64_t v30 = (uint8_t *)v29;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>: :sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLAct ivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v29);
        if (v30 != buf) {
          free(v30);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *((double *)a2 + 1);
      double v8 = v38;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101881200);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)std::string buf = 134217984;
          double v55 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_101881200);
          }
          double v31 = *((double *)a2 + 1);
          int v50 = 134217984;
          double v51 = v31;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v50));
          __int128 v33 = (uint8_t *)v32;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy >::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = C LActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v32);
          if (v33 != buf) {
            free(v33);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v36 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_101881200);
        double v18 = v36;
      }

      double v19 = v17 - v18;
      __int128 v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v55 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101881200);
        }
        int v50 = 134217984;
        double v51 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v50));
        uint64_t v35 = (uint8_t *)v34;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>: :sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLAct ivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v34);
        if (v35 != buf) {
          free(v35);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, int *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, &v37, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100D4AB5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, id a27)
{
}

uint64_t sub_100D4AB88(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    __int128 v20 = (_Unwind_Exception *)sub_10126D0C0(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  double v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100D4ADE8(void *a1, double a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10126D22C(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100D4B020(uint64_t a1)
{
  return sub_100D49C3C(a1 - 72);
}

void sub_100D4B028(id a1)
{
  qword_1019346C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_100D4B054(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100D4B080(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10126D398(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  __int128 v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100D4B2A8(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100D4B2D4()
{
  qword_10199DE50 = (uint64_t)"id";
  dword_10199DE58 = 1;
  word_10199DE5C = 257;
  byte_10199DE60 = 0;
  byte_10199DE78 = 0;
  qword_10199DE80 = (uint64_t)"startTime";
  dword_10199DE88 = 2;
  word_10199DE8C = 0;
  byte_10199DE90 = 0;
  byte_10199DEA8 = 0;
  qword_10199DEB0 = (uint64_t)"endTime";
  dword_10199DEB8 = 2;
  word_10199DEBC = 0;
  byte_10199DEC0 = 0;
  byte_10199DED8 = 0;
  qword_10199DEE0 = (uint64_t)"stepCount";
  dword_10199DEE8 = 1;
  word_10199DEEC = 0;
  byte_10199DEF0 = 0;
  byte_10199DF08 = 0;
  qword_10199DF10 = (uint64_t)"distance";
  dword_10199DF18 = 2;
  word_10199DF1C = 0;
  byte_10199DF20 = 0;
  byte_10199DF38 = 0;
  qword_10199DF40 = (uint64_t)"activeTime";
  dword_10199DF48 = 2;
  word_10199DF4C = 0;
  byte_10199DF50 = 0;
  byte_10199DF68 = 0;
  qword_10199DF70 = (uint64_t)"elevationAscended";
  dword_10199DF78 = 1;
  word_10199DF7C = 0;
  byte_10199DF80 = 0;
  byte_10199DF98 = 0;
  qword_10199DFA0 = (uint64_t)"elevationDescended";
  dword_10199DFA8 = 1;
  word_10199DFAC = 0;
  byte_10199DFB0 = 0;
  byte_10199DFC8 = 0;
  qword_10199DFD0 = (uint64_t)"stepCountGPS";
  dword_10199DFD8 = 1;
  word_10199DFDC = 0;
  byte_10199DFE0 = 0;
  byte_10199DFF8 = 0;
  qword_10199E000 = (uint64_t)"distanceGPS";
  dword_10199E008 = 2;
  word_10199E00C = 0;
  byte_10199E010 = 0;
  byte_10199E028 = 0;
  qword_10199E030 = (uint64_t)"boutType";
  dword_10199E038 = 1;
  word_10199E03C = 0;
  byte_10199E040 = 0;
  byte_10199E058 = 0;
  qword_10199E060 = 0LL;
  dword_10199E068 = 5;
  word_10199E06C = 0;
  byte_10199E070 = 0;
  byte_10199E088 = 0;
  qword_10199E090 = (uint64_t)"startTime";
  *(void *)algn_10199E098 = 0LL;
}

uint64_t sub_100D4B444(uint64_t a1, void *a2, __int128 *a3)
{
  *(void *)a1 = off_101881230;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    __int128 v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  double v7 = (_BYTE *)(a1 + 24);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(v7, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v8 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *(_OWORD *)double v7 = v8;
  }

  *(void *)(a1 + 48) = 0x600000006LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 80) = _Q0;
  *(_WORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 114) = 1;
  return a1;
}

void sub_100D4B4E8(_Unwind_Exception *a1)
{
}

uint64_t sub_100D4B4FC(uint64_t a1)
{
  *(void *)a1 = off_101881230;
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

  sub_10000AE14(a1 + 8);
  return a1;
}

void sub_100D4B558(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7 == 6)
    {
      __int128 v8 = *(int **)a2;
      if (**(_DWORD **)a2 == 1886218611 && *(_WORD *)(*(void *)a2 + 4LL) == 25964) {
        goto LABEL_42;
      }
      int v10 = *v8;
      int v11 = *((unsigned __int16 *)v8 + 2);
      if (v10 == 1919902579 && v11 == 25701) {
        goto LABEL_49;
      }
      uint64_t v7 = *(void *)(a2 + 8);
    }

    if (v7 != 8) {
      goto LABEL_33;
    }
    unint64_t v6 = *(int **)a2;
    goto LABEL_17;
  }

  if (*(_BYTE *)(a2 + 23) == 6)
  {
    if (*(_DWORD *)a2 != 1886218611 || *(_WORD *)(a2 + 4) != 25964)
    {
      if (*(_DWORD *)a2 != 1919902579 || *(_WORD *)(a2 + 4) != 25701) {
        goto LABEL_33;
      }
LABEL_49:
      uint64_t v35 = operator new(0x360uLL);
      uint64_t v36 = (uint64_t)v35;
      uint64_t v37 = a1[1];
      uint64_t v45 = *a1;
      __int128 v46 = (std::__shared_weak_count *)v37;
      if (v37)
      {
        double v38 = (unint64_t *)(v37 + 8);
        do
          unint64_t v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }

      sub_100D4FF74((uint64_t)v35, &v45, (__int128 *)a2);
      sub_100D4BA5C(a3, v36);
      uint64_t v18 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          unint64_t v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        goto LABEL_39;
      }

      return;
    }

void sub_100D4B824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100D4B898(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 112) = a2;
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  return result;
}

uint64_t sub_100D4B8B4(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 113) = a2;
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)result + 32LL))(result, a2 ^ 1u);
  }
  return result;
}

__n128 sub_100D4B8D4(__n128 *a1, uint64_t a2)
{
  a1[3].n128_u64[0] = *(void *)a2;
  if (&a1[3] != (__n128 *)a2) {
    sub_1005F6B84( &a1[3].n128_i8[8],  *(char **)(a2 + 8),  *(void *)(a2 + 16),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  __n128 result = *(__n128 *)(a2 + 32);
  a1[5] = result;
  return result;
}

BOOL sub_100D4B930(uint64_t a1, double a2)
{
  uint64_t v2 = (_DWORD *)(a1 + 48);
  return !sub_100ECF4A4(a1 + 48, a2, 6.0) && *v2 == 1;
}

double sub_100D4B970(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 108);
  double result = *(double *)(a1 + 100);
  *(double *)(a2 + 40) = result;
  *(void *)(a1 + 104) = 0LL;
  *(_DWORD *)(a1 + 100) = 0;
  return result;
}

uint64_t sub_100D4B98C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 96) = a2;
  return result;
}

void sub_100D4B994(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

void *sub_100D4B99C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_101881300;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100D4B9E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D4BA04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100D4BA1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *sub_100D4BA5C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_101881378;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100D4BAA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D4BAC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100D4BADC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *sub_100D4BB1C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_1018813F0;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100D4BB64(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D4BB84(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100D4BB9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_100D4C07C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100D4C094(uint64_t a1, uint64_t a2)
{
}

void sub_100D4C0A4(uint64_t a1)
{
}

uint64_t sub_100D4C0B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 4sub_1008F3E60(v1, 0LL) = a3;
  return result;
}

uint64_t sub_100D4C128(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_100D54F8C(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = off_101881468;
  *(void *)(v8 + 184) = 0LL;
  *(_WORD *)(v8 + 196) = 0;
  uint64_t v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonServiceSession(ctor) #clss",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018814F0);
  }
  int v10 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    *(_DWORD *)std::string buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    uint64_t v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2114;
    uint64_t v23 = v11;
    __int16 v24 = 2050;
    uint64_t v25 = a1;
    __int16 v26 = 2114;
    unint64_t v27 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLDaemonServiceSession(ctor) #clss, event:%{public, location:escape_only}s, ClientK eyPath:%{public, location:escape_only}@, this:%{public}p, Config:%{public, location:escape_only}@}",  buf,  0x3Au);
  }

  *(_DWORD *)(a1 + 192) = objc_msgSend( objc_msgSend(a4, "objectForKey:", @"SessionType"),  "integerValue");
  uint64_t v12 = *(void *)(a1 + 24);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  _DWORD v14[2] = sub_100D4C32C;
  v14[3] = &unk_101836E00;
  v14[4] = a1;
  sub_100558E24(v12, (uint64_t)v14);
  *(_BYTE *)(a1 + 197) = sub_100D55504(a1);
  sub_100D4C580(a1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_100D4C300( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_100D4C32C(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = (uint64_t)[*(id *)(v3 + 16) isEqual:sub_100019240((uint64_t)a2)];
  if ((_DWORD)result)
  {
    uint64_t v6 = *(void *)(v3 + 184);
    *(void *)(v3 + 184) = v5[23];
    v5[23] = v6;
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101881510);
    }
    uint64_t v7 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24LL))(a2);
      uint64_t v9 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 1026;
      int v18 = v8;
      __int16 v19 = 2114;
      uint64_t v20 = v9;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#clss consumeMatchingButterfly, dicType:%{public}d, ClientKeyPath:%{public, loc ation:escape_only}@, this:%{public}p}",  (uint8_t *)&v13,  0x2Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101881510);
      }
    }

    int v10 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      int v11 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24LL))(a2);
      uint64_t v12 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 1026;
      int v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#clss consumeMatchingButterfly",  "{msg%{public}.0s:#clss consumeMatchingButterfly, dicType:%{public}d, ClientKeyPath:%{public, loc ation:escape_only}@, this:%{public}p}",  (uint8_t *)&v13,  0x2Cu);
    }

    return 1LL;
  }

  return result;
}

void sub_100D4C580(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 184);
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 192) != 2
      || *(_BYTE *)(a1 + 197)
      || ([*(id *)(a1 + 40) inUseLevelIsAtLeast:5] & 1) != 0
      || [*(id *)(a1 + 40) isAuthorizedForServiceType:19])
    {
      int v4 = *(unsigned __int8 *)(a1 + 80);
      __int128 v5 = operator new(0x20uLL);
      sub_100D4D364((uint64_t)v5, *(void **)(a1 + 16), *(_DWORD *)(a1 + 192), v4 == 0, *(void *)(a1 + 24));
      sub_100D4D2DC(v2, (uint64_t)v5);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101881510);
      }
      uint64_t v6 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        int v8 = *(_DWORD *)(a1 + 192);
        *(_DWORD *)std::string buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v33 = 2082;
        __int128 v34 = "";
        __int16 v35 = 2114;
        uint64_t v36 = v7;
        __int16 v37 = 2050;
        uint64_t v38 = a1;
        __int16 v39 = 1026;
        BOOL v40 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#clss ServiceSessionAssertion created, ClientKeyPath:%{public, location:escape_on ly}@, this:%{public}p, SessionType:%{public}d}",  buf,  0x2Cu);
      }
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101881510);
      }
      __int16 v21 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(a1 + 16);
        int v23 = *(_DWORD *)(a1 + 192);
        unsigned int v24 = [*(id *)(a1 + 40) inUseLevel];
        unsigned int v25 = [*(id *)(a1 + 40) isAuthorizedForServiceType:19];
        *(_DWORD *)std::string buf = 68290306;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v33 = 2082;
        __int128 v34 = "";
        __int16 v35 = 2114;
        uint64_t v36 = v22;
        __int16 v37 = 2050;
        uint64_t v38 = a1;
        __int16 v39 = 1026;
        BOOL v40 = v23;
        __int16 v41 = 1026;
        BOOL v42 = v24;
        __int16 v43 = 1026;
        unsigned int v44 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#clss can't create ServiceSessionAssertion, ClientKeyPath:%{public, location:esca pe_only}@, this:%{public}p, SessionType:%{public}d, InUseLevel:%{public}d, ServiceSession:%{public}hhd}",  buf,  0x38u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101881510);
        }
      }

      __int16 v26 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        uint64_t v27 = *(void *)(a1 + 16);
        int v28 = *(_DWORD *)(a1 + 192);
        unsigned int v29 = [*(id *)(a1 + 40) inUseLevel];
        unsigned int v30 = [*(id *)(a1 + 40) isAuthorizedForServiceType:19];
        *(_DWORD *)std::string buf = 68290306;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v33 = 2082;
        __int128 v34 = "";
        __int16 v35 = 2114;
        uint64_t v36 = v27;
        __int16 v37 = 2050;
        uint64_t v38 = a1;
        __int16 v39 = 1026;
        BOOL v40 = v28;
        __int16 v41 = 1026;
        BOOL v42 = v29;
        __int16 v43 = 1026;
        unsigned int v44 = v30;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v26,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#clss can't create ServiceSessionAssertion",  "{msg%{public}.0s:#clss can't create ServiceSessionAssertion, ClientKeyPath:%{public, location:esca pe_only}@, this:%{public}p, SessionType:%{public}d, InUseLevel:%{public}d, ServiceSession:%{public}hhd}",  buf,  0x38u);
      }
    }
  }

  uint64_t v9 = *v2;
  if ((v3 != 0) != (*v2 != 0))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018814F0);
    }
    int v10 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 16);
      *(_DWORD *)std::string buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v33 = 2082;
      __int128 v34 = "";
      __int16 v35 = 2114;
      uint64_t v36 = v11;
      __int16 v37 = 2050;
      uint64_t v38 = a1;
      __int16 v39 = 1026;
      BOOL v40 = v3 != 0;
      __int16 v41 = 1026;
      BOOL v42 = v9 != 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#clss active state changed. persist for #dic rehydration, ClientKeyPath:%{public, l ocation:escape_only}@, this:%{public}p, wasActive:%{public}hhd, isActive:%{public}hhd}",  buf,  0x32u);
    }

    sub_1010DDBC0( buf,  (char *)-[NSString UTF8String]( +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%p", a1),  "UTF8String"));
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    __int16 v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
    sub_1005450B8(v12, v13, (uint64_t *)buf, v14, v15, 1);
    if (SBYTE3(v36) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v9 = *v2;
  }

  sub_100D57E58((id *)a1);
  int v16 = *(_DWORD *)(a1 + 192);
  BOOL v17 = [*(id *)(a1 + 40) registrationResult] != 1
     && [*(id *)(a1 + 40) registrationResult] != 8;
  unsigned int v18 = [*(id *)(a1 + 40) transientAwareRegistrationResult];
  if (v16 == 2)
  {
    unsigned int v19 = v18;
    if (!sub_100D55504(a1)
      && !v17
      && !((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1) & 1 | (v19 == 0)))
    {
      if (sub_1004FD634())
      {
        *(_BYTE *)(a1 + 196) = 1;
        if (!sub_100D57238(a1, 7))
        {
          id v20 = [*(id *)(a1 + 32) silo];
          v31[0] = _NSConcreteStackBlock;
          v31[1] = 3221225472LL;
          v31[2] = sub_100D4D1E0;
          v31[3] = &unk_10181D3D0;
          _DWORD v31[4] = a1;
          [v20 async:v31];
        }
      }
    }
  }

  sub_100D57F8C(a1);
}

void sub_100D4CB60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_100D4CB94(void *a1)
{
  *a1 = off_101881468;
  sub_100D56EF4((uint64_t)a1, 6);
  sub_100D4D2DC(a1 + 23, 0LL);
  return sub_100D555B4((uint64_t)a1);
}

void sub_100D4CBDC(void *a1)
{
  uint64_t v1 = (void *)sub_100D4CB94(a1);
  operator delete(v1);
}

void sub_100D4CBF0(uint64_t a1, CLConnectionMessage **a2)
{
  int v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44LL) {
      goto LABEL_7;
    }
    int v4 = (void *)*v4;
  }

  else if (v5 != 44)
  {
    goto LABEL_7;
  }

  if (!memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
  {
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 1;
    return;
  }

uint64_t sub_100D4CE34()
{
  return 6LL;
}

uint64_t sub_100D4CE3C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 192);
  uint64_t v2 = 3LL;
  if (!v1) {
    uint64_t v2 = 4099LL;
  }
  if (v1 == 2) {
    return v2 | 0x400;
  }
  else {
    return v2;
  }
}

void sub_100D4CE74(uint64_t a1)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018814F0);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#clss authContext has changed, ClientKeyPath:%{public, location:escape_only}@, this :%{public}p}",  (uint8_t *)&v6,  0x26u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018814F0);
    }
  }

  int v4 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#clss authContext has changed",  "{msg%{public}.0s:#clss authContext has changed, ClientKeyPath:%{public, location:escape_only}@, this :%{public}p}",  (uint8_t *)&v6,  0x26u);
  }

  sub_100D4C580(a1);
}

uint64_t sub_100D4D020(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

NSDictionary *sub_100D4D028(uint64_t a1)
{
  v3[0] = @"SessionType";
  v4[0] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 192));
  v3[1] = @"SDKAtLeast2024";
  v4[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  _DWORD v3[2] = @"SessionActive";
  void v4[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(void *)(a1 + 184) != 0LL);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL);
}

BOOL sub_100D4D0F0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 192) - 1) < 2;
}

uint64_t sub_100D4D104(uint64_t a1)
{
  else {
    return 4096LL;
  }
}

uint64_t sub_100D4D150(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196);
}

BOOL sub_100D4D158(uint64_t a1)
{
  return ([*(id *)(a1 + 40) diagnosticMask] & 0x400) != 0
      || *(_DWORD *)(a1 + 192) == 2
      && ([*(id *)(a1 + 40) transientAwareRegistrationResult] == 1
       && [*(id *)(a1 + 40) registrationResult] == 4
       || [*(id *)(a1 + 40) registrationResult] == 2
       || [*(id *)(a1 + 40) registrationResult] == 1 && !sub_1004FD634());
}

void sub_100D4D1E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  sub_1010DDBC0(__p, "");
  sub_1005857F0((uint64_t)v5, 7, v2, 0LL, (__int128 *)__p);
  sub_100D575DC(v1, v5, 0LL);
  sub_1005858A0((uint64_t)v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100D4D258( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100D4D284(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100D4D2B0(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100D4D2DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    char v4 = (void *)sub_100D4D308(v3);
    operator delete(v4);
  }

uint64_t sub_100D4D308(uint64_t a1)
{
  sub_100566538( *(void *)(a1 + 16),  *(void **)a1,  *(_DWORD *)(a1 + 8) == 0,  *(_DWORD *)(a1 + 8) == 1,  *(_DWORD *)(a1 + 8) == 2,  *(unsigned __int8 *)(a1 + 24),  0);

  return a1;
}

uint64_t sub_100D4D364(uint64_t a1, void *a2, int a3, int a4, uint64_t a5)
{
  *(_BYTE *)(a1 + 24) = 0;
  id v9 = a2;
  *(void *)a1 = v9;
  *(void *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = a3;
  *(_BYTE *)(a1 + 24) = a4;
  sub_100566538(a5, v9, a3 == 0, a3 == 1, a3 == 2, a4, 1);
  return a1;
}

void sub_100D4D3DC(uint64_t a1)
{
  *(void *)(a1 + 29) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v2 = (void *)(a1 + 72);
  sub_100D4ED30(a1 + 64, *(void **)(a1 + 72));
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = 0LL;
  void *v2 = 0LL;
}

double sub_100D4D420(uint64_t a1)
{
  *(void *)(a1 + 29) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 80) = 0LL;
  return result;
}

uint64_t sub_100D4D440(uint64_t a1)
{
  *(void *)(a1 + 29) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v2 = (void *)(a1 + 72);
  sub_100D4ED30(a1 + 64, *(void **)(a1 + 72));
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = 0LL;
  void *v2 = 0LL;
  return a1;
}

void sub_100D4D488(uint64_t a1, float32x2_t *a2, double a3, int32x4_t a4)
{
  float v20 = *(float *)&a3;
  *(float *)a4.i32 = *(float *)(a1 + 4) + (float)(*(float *)&a3 * *(float *)&a3);
  *(float *)a1 = *(float *)a1 + *(float *)&a3;
  *(_DWORD *)(a1 + 4) = a4.i32[0];
  float32x2_t v6 = *a2;
  *(float32x2_t *)a4.i8 = vadd_f32(*a2, *(float32x2_t *)(a1 + 8));
  *(void *)(a1 + _Block_object_dispose(va, 8) = a4.i64[0];
  a4.i32[0] = a2[1].i32[0];
  *(float *)(a1 + 16) = *(float *)a4.i32 + *(float *)(a1 + 16);
  double v7 = COERCE_DOUBLE(vmla_n_f32(*(float32x2_t *)(a1 + 20), v6, *(float *)&a3));
  *(double *)(a1 + 20) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(float *)a4.i32 = *(float *)&v7 + (float)(*(float *)&a3 * *(float *)a4.i32);
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = a4.i32[0];
  ++*(_DWORD *)(a1 + 32);
  sub_100D4D62C(a1, a3, a4, v7, *(double *)&v6);
  signed int v8 = llroundf(v20);
  int v22 = v8;
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v10 = a1 + 72;
  uint64_t v9 = v11;
  if (!v11) {
    goto LABEL_11;
  }
  uint64_t v12 = v10;
  do
  {
    signed int v13 = *(_DWORD *)(v9 + 32);
    BOOL v14 = v13 < v8;
    if (v13 >= v8) {
      int v15 = (uint64_t *)v9;
    }
    else {
      int v15 = (uint64_t *)(v9 + 8);
    }
    if (!v14) {
      uint64_t v12 = v9;
    }
    uint64_t v9 = *v15;
  }

  while (*v15);
  if (v12 != v10 && *(_DWORD *)(v12 + 32) <= v8)
  {
    uint64_t v19 = (void *)(v12 + 40);
    if (*(void *)(v12 + 80) == 10LL)
    {
      ++*(void *)(v12 + 72);
      *(void *)(v12 + 80) = 9LL;
      sub_100D4F050(v12 + 40, 1);
    }

    sub_100D4D6CC(v19, (uint64_t *)a2);
  }

  else
  {
LABEL_11:
    __int16 v16 = (uint64_t **)(v10 - 8);
    memset(v21, 0, sizeof(v21));
    int v23 = &v22;
    BOOL v17 = sub_100D4ED78(v16, &v22, (uint64_t)&unk_1012CF090, &v23);
    sub_100D4EF40(v17 + 5, (uint64_t)v21);
    sub_100D4EEAC(v21);
    *(void *)&v21[0] = &v22;
    __int16 v18 = sub_100D4ED78(v16, &v22, (uint64_t)&unk_1012CF090, (_DWORD **)v21);
    sub_100D4D6CC(v18 + 5, (uint64_t *)a2);
  }

void sub_100D4D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100D4D62C(uint64_t result, double a2, int32x4_t a3, double a4, double a5)
{
  *(float *)a3.i32 = (float)*(int *)(result + 32);
  LODWORD(a5) = *(_DWORD *)result;
  float v5 = *(float *)(result + 4);
  *(float *)&a4 = (float)(*(float *)a3.i32 * v5) - (float)(*(float *)&a5 * *(float *)&a5);
  if (fabsf(*(float *)&a4) <= 0.000001)
  {
    char v12 = 0;
  }

  else
  {
    *(float *)&a5 = -*(float *)&a5;
    *(float *)&a4 = 1.0 / *(float *)&a4;
    float32x4_t v6 = *(float32x4_t *)(result + 8);
    int32x4_t v7 = a3;
    v7.i32[1] = *(_DWORD *)(result + 4);
    float32x4_t v8 = (float32x4_t)vzip1q_s32(v7, v7);
    v8.f32[2] = (float)*(int *)(result + 32);
    int8x16_t v9 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL);
    float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)v6, v9, 0xCuLL);
    float32x2_t v11 = *(float32x2_t *)(result + 24);
    *(float32x2_t *)&v10.i32[1] = v11;
    *(float32x4_t *)(result + 40) = vmulq_n_f32(vmlaq_f32(vmulq_n_f32(v6, *(float *)&a5), v10, v8), *(float *)&a4);
    *(float32x2_t *)(result + 56) = vmul_f32( (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a4, 0),  vmla_n_f32( vmul_f32(v11, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a5, 0)),  (float32x2_t)vext_s8(*(int8x8_t *)v6.f32, *(int8x8_t *)v9.i8, 4uLL),  v5));
    char v12 = 1;
  }

  *(_BYTE *)(result + 36) = v12;
  return result;
}

void sub_100D4D6CC(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100D4F24C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + _Block_object_dispose(va, 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

BOOL sub_100D4D788(uint64_t a1, _DWORD *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    *a2 = 1;
    a2[8] = *(_DWORD *)(a1 + 40);
    a2[9] = *(_DWORD *)(a1 + 44);
    a2[10] = *(_DWORD *)(a1 + 48);
    a2[11] = *(_DWORD *)(a1 + 52);
    a2[12] = *(_DWORD *)(a1 + 56);
    a2[13] = *(_DWORD *)(a1 + 60);
  }

  return v2 != 0;
}

void sub_100D4D7D4(uint64_t a1)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_101881550);
  }
  int v2 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Begin.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101881550);
    }
    LOWORD(v77) = 0;
    __int16 v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Begin.",  &v77,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
  }

  if (*(int *)(a1 + 32) < 2 || !*(_BYTE *)(a1 + 36))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101881550);
    }
    signed int v13 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Too few points.  End.", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101881550);
    }
    LOWORD(v77) = 0;
    LODWORD(v70) = 2;
    BOOL v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Too few points.  End.",  &v77,  *(void *)&v70);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v14);
LABEL_68:
    if (v14 != buf) {
      free(v14);
    }
    return;
  }

  *(float *)&double v3 = sub_100D4E20C(a1, &v76, &v75, &v74);
  if (*(void *)(a1 + 80))
  {
    unint64_t v7 = *(void **)(a1 + 64);
    uint64_t v8 = a1 + 72;
    unint64_t v9 = v7[9];
    uint64_t v10 = v7[6];
    float32x2_t v11 = (void *)(v10 + 8 * (v9 / 0x155));
    if (v7[7] == v10) {
      unint64_t v12 = 0LL;
    }
    else {
      unint64_t v12 = *v11 + 12 * (v9 % 0x155);
    }
    *(void *)&__int128 v71 = *(void *)(a1 + 64);
    *((void *)&v71 + 1) = a1 + 72;
    *(void *)&__int128 v72 = v11;
    *((void *)&v72 + 1) = v12;
  }

  else
  {
    uint64_t v8 = a1 + 72;
    __int128 v72 = 0uLL;
    *(void *)&__int128 v71 = a1 + 72;
    *((void *)&v71 + 1) = a1 + 72;
    unint64_t v7 = (void *)(a1 + 72);
  }

  std::stringbuf::string_type __p = 0LL;
  uint64_t v15 = a1 + 72;
  if (v7 == (void *)(a1 + 72)) {
    goto LABEL_28;
  }
  do
  {
    do
    {
      sub_1011F88D8(&v71);
      float v49 = *v48;
      float v50 = *(float *)(a1 + 40);
      float v51 = *(float *)(a1 + 52);
      sub_1011F88D8(&v71);
      float v53 = *(float *)(v52 + 4);
      float v54 = *(float *)(a1 + 44);
      float v55 = *(float *)(a1 + 56);
      sub_1011F88D8(&v71);
      float v57 = *(float *)(v56 + 8);
      HIDWORD(v70) = *(_DWORD *)(a1 + 48);
      float v58 = *(float *)(a1 + 60);
      sub_1011F88D8(&v71);
      if (fabsf((float)(v51 + (float)(v49 * v50)) - v53) <= (float)(v76 * 3.5)
        && fabsf((float)(v55 + (float)(v49 * v54)) - v57) <= (float)(v75 * 3.5)
        && fabsf((float)(v58 + (float)(v49 * *((float *)&v70 + 1))) - *(float *)(v59 + 12)) <= (float)(v74 * 3.5))
      {
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_101881550);
        }
        uint64_t v19 = (os_log_s *)off_101934598;
        if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
        {
          sub_1011F88D8(&v71);
          float v21 = *v20;
          sub_1011F88D8(&v71);
          float v23 = *(float *)(v22 + 4);
          sub_1011F88D8(&v71);
          float v25 = *(float *)(v24 + 8);
          sub_1011F88D8(&v71);
          double v27 = *(float *)(v26 + 12);
          *(_DWORD *)std::string buf = 134218752;
          *(double *)&uint8_t buf[4] = v21;
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(double *)&_BYTE buf[14] = v23;
          *(_WORD *)&_BYTE buf[22] = 2048;
          *(double *)&_BYTE buf[24] = v25;
          LOWORD(v86[0]) = 2048;
          *(void **)((char *)v86 + 2) = *(void **)&v27;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,0",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_101881550);
          }
          uint64_t v38 = off_101934598;
          sub_1011F88D8(&v71);
          float v40 = *v39;
          sub_1011F88D8(&v71);
          float v42 = *(float *)(v41 + 4);
          sub_1011F88D8(&v71);
          float v44 = *(float *)(v43 + 8);
          sub_1011F88D8(&v71);
          double v46 = *(float *)(v45 + 12);
          int v77 = 134218752;
          double v78 = v40;
          __int16 v79 = 2048;
          double v80 = v42;
          __int16 v81 = 2048;
          double v82 = v44;
          __int16 v83 = 2048;
          double v84 = v46;
          LODWORD(v70) = 42;
          uint64_t v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v38,  1LL,  "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,0",  COERCE_DOUBLE(&v77),  v70,  *(double *)&v71,  *((double *)&v71 + 1));
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v47);
          if (v47 != buf) {
            free(v47);
          }
        }

        sub_1011F892C(&v71);
      }

      else
      {
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_101881550);
        }
        uint64_t v60 = (os_log_s *)off_101934598;
        if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
        {
          sub_1011F88D8(&v71);
          float v62 = *v61;
          sub_1011F88D8(&v71);
          float v64 = *(float *)(v63 + 4);
          sub_1011F88D8(&v71);
          float v66 = *(float *)(v65 + 8);
          sub_1011F88D8(&v71);
          double v68 = *(float *)(v67 + 12);
          *(_DWORD *)std::string buf = 134218752;
          *(double *)&uint8_t buf[4] = v62;
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(double *)&_BYTE buf[14] = v64;
          *(_WORD *)&_BYTE buf[22] = 2048;
          *(double *)&_BYTE buf[24] = v66;
          LOWORD(v86[0]) = 2048;
          *(void **)((char *)v86 + 2) = *(void **)&v68;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_INFO,  "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,1",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_101881550);
          }
          int v28 = off_101934598;
          sub_1011F88D8(&v71);
          float v30 = *v29;
          sub_1011F88D8(&v71);
          float v32 = *(float *)(v31 + 4);
          sub_1011F88D8(&v71);
          float v34 = *(float *)(v33 + 8);
          sub_1011F88D8(&v71);
          double v36 = *(float *)(v35 + 12);
          int v77 = 134218752;
          double v78 = v30;
          __int16 v79 = 2048;
          double v80 = v32;
          __int16 v81 = 2048;
          double v82 = v34;
          __int16 v83 = 2048;
          double v84 = v36;
          LODWORD(v70) = 42;
          __int16 v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  1LL,  "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,1",  COERCE_DOUBLE(&v77),  v70,  *(double *)&v71,  *((double *)&v71 + 1));
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v37);
          if (v37 != buf) {
            free(v37);
          }
        }

        sub_100D4E4D0(a1, (uint64_t)&v71, buf);
        __int128 v71 = *(_OWORD *)buf;
        double v3 = *(double *)&buf[16];
        __int128 v72 = *(_OWORD *)&buf[16];
        unint64_t v69 = __p;
        std::stringbuf::string_type __p = 0LL;
        if (v69) {
          operator delete(v69);
        }
        if (v86[0]) {
          operator delete(v86[0]);
        }
      }
    }

    while ((void)v71 != v15);
    uint64_t v8 = *((void *)&v71 + 1);
LABEL_28:
    ;
  }

  while (v8 != v15);
  BOOL v17 = __p;
  std::stringbuf::string_type __p = 0LL;
  if (v17) {
    operator delete(v17);
  }
  sub_100D4E64C(a1, v3, v4, v5, v6);
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_101881550);
  }
  __int16 v18 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "End.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101881550);
    }
    LOWORD(v77) = 0;
    LODWORD(v70) = 2;
    BOOL v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "End.",  &v77,  *(void *)&v70);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v14);
    goto LABEL_68;
  }

void sub_100D4E1C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_100D4E20C(uint64_t a1, float *a2, float *a3, float *a4)
{
  if (*(void *)(a1 + 80))
  {
    uint64_t v8 = *(void **)(a1 + 64);
    unint64_t v9 = v8[9];
    uint64_t v10 = v8[6];
    float32x2_t v11 = (void *)(v10 + 8 * (v9 / 0x155));
    if (v8[7] == v10) {
      unint64_t v12 = 0LL;
    }
    else {
      unint64_t v12 = *v11 + 12 * (v9 % 0x155);
    }
    uint64_t v47 = *(void *)(a1 + 64);
    uint64_t v48 = a1 + 72;
    float v49 = v11;
    unint64_t v50 = v12;
  }

  else
  {
    float v49 = 0LL;
    unint64_t v50 = 0LL;
    uint64_t v47 = a1 + 72;
    uint64_t v48 = a1 + 72;
  }

  std::stringbuf::string_type __p = 0LL;
  uint64_t v13 = a1 + 72;
  float v14 = 0.0;
  float v15 = 0.0;
  float v16 = 0.0;
  float v17 = 0.0;
  float v18 = 0.0;
  float v19 = 0.0;
  while (v47 != v13 || v48 != v13)
  {
    sub_1011F88D8(&v47);
    float v22 = *v21;
    float v23 = *(float *)(a1 + 40);
    float v46 = *(float *)(a1 + 52);
    sub_1011F88D8(&v47);
    float v40 = v23;
    float v41 = v19;
    float v42 = v18;
    float v43 = v17;
    float v24 = v16;
    float v44 = v15;
    float v45 = v14;
    float v26 = *(float *)(v25 + 4);
    float v27 = *(float *)(a1 + 44);
    float v28 = *(float *)(a1 + 56);
    sub_1011F88D8(&v47);
    float v30 = *(float *)(v29 + 8);
    float v31 = *(float *)(a1 + 48);
    float v32 = *(float *)(a1 + 60);
    sub_1011F88D8(&v47);
    float v33 = (float)(v46 + (float)(v22 * v40)) - v26;
    float v34 = (float)(v28 + (float)(v22 * v27)) - v30;
    float v36 = (float)(v32 + (float)(v22 * v31)) - *(float *)(v35 + 12);
    float v19 = v41 + v33;
    float v16 = v24 + (float)(v33 * v33);
    float v18 = v42 + v34;
    float v15 = v44 + (float)(v34 * v34);
    float v17 = v43 + v36;
    float v14 = v45 + (float)(v36 * v36);
    sub_1011F892C(&v47);
  }

  __int16 v37 = __p;
  std::stringbuf::string_type __p = 0LL;
  if (v37) {
    operator delete(v37);
  }
  int v38 = *(_DWORD *)(a1 + 32) - 1;
  *a2 = sqrtf((float)(v16 - (float)(v19 * v19)) / (float)v38);
  *a3 = sqrtf((float)(v15 - (float)(v18 * v18)) / (float)v38);
  float result = sqrtf((float)(v14 - (float)(v17 * v17)) / (float)v38);
  *a4 = result;
  return result;
}

void sub_100D4E410( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D4E43C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(void *)(result + 80))
  {
    int v2 = *(void **)(result + 64);
    unint64_t v3 = v2[9];
    uint64_t v4 = v2[6];
    double v5 = (void *)(v4 + 8 * (v3 / 0x155));
    if (v2[7] == v4) {
      unint64_t v6 = 0LL;
    }
    else {
      unint64_t v6 = *v5 + 12 * (v3 % 0x155);
    }
    *a2 = v2;
    a2[1] = result + 72;
    a2[2] = v5;
    a2[3] = v6;
  }

  else
  {
    a2[2] = 0LL;
    a2[3] = 0LL;
    *a2 = result + 72;
    a2[1] = result + 72;
  }

  a2[4] = 0LL;
  return result;
}

uint64_t sub_100D4E4BC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  a2[2] = 0LL;
  a2[3] = 0LL;
  *a2 = result + 72;
  a2[1] = result + 72;
  a2[4] = 0LL;
  return result;
}

void sub_100D4E4D0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v7 = (void *)sub_100D4E7C4((int64x2_t *)(*(void *)a2 + 40LL), *(void **)(a2 + 16), *(char **)(a2 + 24));
  unint64_t v8 = v6;
  unint64_t v9 = *(void **)a2;
  uint64_t v10 = *(void *)(*(void *)a2 + 48LL);
  if (*(void *)(*(void *)a2 + 56LL) == v10)
  {
    unint64_t v12 = 0LL;
  }

  else
  {
    unint64_t v11 = v9[10] + v9[9];
    unint64_t v12 = *(void *)(v10 + 8 * (v11 / 0x155)) + 12 * (v11 % 0x155);
  }

  if (v12 == v6)
  {
    float v14 = (void *)v9[1];
    if (v14)
    {
      do
      {
        float v15 = v14;
        float v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      float v16 = *(void **)a2;
      do
      {
        float v15 = (void *)v16[2];
        BOOL v17 = *v15 == (void)v16;
        float v16 = v15;
      }

      while (!v17);
    }

    if (!v9[10])
    {
      sub_1000087E8((uint64_t **)(a1 + 64), *(uint64_t **)a2);
      sub_100D4EEAC(v9 + 5);
      operator delete(v9);
    }

    uint64_t v13 = *(void **)(a2 + 8);
    if (v15 != v13)
    {
      unint64_t v18 = v15[9];
      uint64_t v19 = v15[6];
      unint64_t v7 = (void *)(v19 + 8 * (v18 / 0x155));
      if (v15[7] == v19) {
        unint64_t v8 = 0LL;
      }
      else {
        unint64_t v8 = *v7 + 12 * (v18 % 0x155);
      }
    }

    *a3 = v15;
  }

  else
  {
    uint64_t v13 = *(void **)(a2 + 8);
    *a3 = v9;
  }

  a3[1] = v13;
  a3[2] = v7;
  a3[3] = v8;
  a3[4] = 0LL;
}

uint64_t sub_100D4E64C(uint64_t a1, double a2, int32x4_t a3, double a4, double a5)
{
  *(_DWORD *)(a1 + 32) = 0;
  double v6 = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a1 + 80))
  {
    unint64_t v7 = *(void **)(a1 + 64);
    unint64_t v8 = v7[9];
    uint64_t v9 = v7[6];
    uint64_t v10 = (void *)(v9 + 8 * (v8 / 0x155));
    if (v7[7] == v9) {
      unint64_t v11 = 0LL;
    }
    else {
      unint64_t v11 = *v10 + 12 * (v8 % 0x155);
    }
    uint64_t v22 = *(void *)(a1 + 64);
    uint64_t v23 = a1 + 72;
    float v24 = v10;
    unint64_t v25 = v11;
  }

  else
  {
    float v24 = 0LL;
    unint64_t v25 = 0LL;
    uint64_t v22 = a1 + 72;
    uint64_t v23 = a1 + 72;
  }

  std::stringbuf::string_type __p = 0LL;
  uint64_t v12 = a1 + 72;
  while (v22 != v12 || v23 != v12)
  {
    sub_1011F88D8(&v22);
    float v21 = *v14;
    sub_1011F88D8(&v22);
    float v16 = *(float *)(v15 + 12);
    float v17 = *(float *)(a1 + 4) + (float)(v21 * v21);
    float32x2_t v18 = *(float32x2_t *)(v15 + 4);
    *(float *)a1 = v21 + *(float *)a1;
    *(float *)(a1 + 4) = v17;
    *(float32x2_t *)(a1 + _Block_object_dispose(va, 8) = vadd_f32(v18, *(float32x2_t *)(a1 + 8));
    *(float *)(a1 + 16) = v16 + *(float *)(a1 + 16);
    *(float32x2_t *)(a1 + 20) = vmla_n_f32(*(float32x2_t *)(a1 + 20), v18, v21);
    *(float *)(a1 + 2_Block_object_dispose(va, 8) = *(float *)(a1 + 28) + (float)(v21 * v16);
    ++*(_DWORD *)(a1 + 32);
    sub_1011F892C(&v22);
  }

  uint64_t v19 = __p;
  std::stringbuf::string_type __p = 0LL;
  if (v19) {
    operator delete(v19);
  }
  return sub_100D4D62C(a1, v6, a3, a4, a5);
}

void sub_100D4E7A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100D4E7C4(int64x2_t *a1, void *a2, char *a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  double v6 = (char **)(v5 + 8 * (v4 / 0x155));
  if (a1[1].i64[0] == v5) {
    unint64_t v7 = 0LL;
  }
  else {
    unint64_t v7 = &(*v6)[12 * (v4 % 0x155)];
  }
  if (a3 == v7) {
    unint64_t v8 = 0LL;
  }
  else {
    unint64_t v8 = 341 * ((char **)a2 - v6)
  }
  v33[0].n128_u64[0] = v5 + 8 * (v4 / 0x155);
  v33[0].n128_u64[1] = (unint64_t)v7;
  sub_100D4F560(v33, v8);
  uint64_t v9 = a1[2].i64[1];
  int64_t v10 = v33[0].n128_u64[1] - *(void *)v33[0].n128_u64[0];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 2);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -11)
    {
      unint64_t v25 = 339 - v11;
      uint64_t v26 = ((339 - v11) * (unsigned __int128)0x8060180601806019LL) >> 64;
      unint64_t v27 = (v26 + ((v25 - v26) >> 1)) >> 8;
      float32x2_t v18 = (void *)(v33[0].n128_u64[0] - 8 * v27);
      uint64_t v19 = (char *)(*v18 + 12 * (341 * v27 - v25) + 4080);
    }

    else
    {
      unint64_t v15 = v11 + 1;
      uint64_t v16 = ((v11 + 1) * (unsigned __int128)0x8060180601806019LL) >> 64;
      unint64_t v17 = (v16 + ((v15 - v16) >> 1)) >> 8;
      float32x2_t v18 = (void *)(v33[0].n128_u64[0] + 8 * v17);
      uint64_t v19 = (char *)(*v18 + 12 * (v15 - 341 * v17));
    }

    sub_100D4F61C(v6, v7, (char **)v33[0].n128_u64[0], (char *)v33[0].n128_u64[1], v18, v19, v33);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1012CE4D0);
    sub_100D4F050((uint64_t)a1, 1);
  }

  else
  {
    if (v10 < -11)
    {
      unint64_t v20 = 339 - v11;
      uint64_t v13 = (void *)(v33[0].n128_u64[0] - 8 * (v20 / 0x155));
      float v14 = (_BYTE *)(*v13 + 12 * (341 * (v20 / 0x155) - v20) + 4080);
    }

    else
    {
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (void *)(v33[0].n128_u64[0] + 8 * (v12 / 0x155));
      float v14 = (_BYTE *)(*v13 + 12 * (v12 % 0x155));
    }

    unint64_t v21 = a1[2].i64[0] + v9;
    uint64_t v22 = a1->i64[1];
    uint64_t v23 = (_BYTE **)(v22 + 8 * (v21 / 0x155));
    if (a1[1].i64[0] == v22) {
      float v24 = 0LL;
    }
    else {
      float v24 = &(*v23)[12 * (v21 % 0x155)];
    }
    sub_100D4F7C8(v13, v14, v23, v24, (uint64_t)v33);
    --a1[2].i64[1];
    sub_100D4F0AC(a1, 1);
  }

  unint64_t v28 = a1[2].u64[0];
  uint64_t v29 = a1->i64[1];
  float v30 = (void *)(v29 + 8 * (v28 / 0x155));
  if (a1[1].i64[0] == v29) {
    unint64_t v31 = 0LL;
  }
  else {
    unint64_t v31 = *v30 + 12 * (v28 % 0x155);
  }
  v33[0].n128_u64[0] = (unint64_t)v30;
  v33[0].n128_u64[1] = v31;
  sub_100D4F560(v33, v8);
  return v33[0].n128_u64[0];
}

uint64_t sub_100D4EB00(uint64_t a1, float32x2_t *a2, double a3)
{
  a2[1].i32[0] = 0;
  *a2 = 0LL;
  if (*(void *)(a1 + 80))
  {
    uint64_t v5 = *(void **)(a1 + 64);
    unint64_t v6 = v5[9];
    uint64_t v7 = v5[6];
    unint64_t v8 = (void *)(v7 + 8 * (v6 / 0x155));
    unint64_t v9 = v5[7] == v7 ? 0LL : *v8 + 12 * (v6 % 0x155);
    uint64_t v30 = *(void *)(a1 + 64);
    uint64_t v31 = a1 + 72;
    float v32 = v8;
    unint64_t v33 = v9;
  }

  else
  {
    float v32 = 0LL;
    unint64_t v33 = 0LL;
    uint64_t v30 = a1 + 72;
    uint64_t v31 = a1 + 72;
  }

  int v10 = 0;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v11 = a1 + 72;
  while (v30 != v11 || v31 != v11)
  {
    sub_1011F88D8(&v30);
    float v14 = *v13;
    float v15 = *(float *)(a1 + 40);
    float v16 = *(float *)(a1 + 52);
    sub_1011F88D8(&v30);
    float v18 = *(float *)(v17 + 4);
    float v29 = *(float *)(a1 + 44);
    float v19 = *(float *)(a1 + 56);
    sub_1011F88D8(&v30);
    float v21 = *(float *)(v20 + 8);
    float v22 = *(float *)(a1 + 48);
    float v23 = *(float *)(a1 + 60);
    sub_1011F88D8(&v30);
    float v25 = (float)(v23 + (float)(v14 * v22)) - *(float *)(v24 + 12);
    float32_t v26 = a2->f32[1]
        + (float)((float)((float)(v19 + (float)(v14 * v29)) - v21) * (float)((float)(v19 + (float)(v14 * v29)) - v21));
    a2->f32[0] = a2->f32[0]
    a2->f32[1] = v26;
    a2[1].f32[0] = a2[1].f32[0] + (float)(v25 * v25);
    --v10;
    sub_1011F892C(&v30);
  }

  unint64_t v27 = __p;
  std::stringbuf::string_type __p = 0LL;
  if (v27) {
    operator delete(v27);
  }
  if (!v10) {
    return 0LL;
  }
  *(float *)&a3 = (float)-v10;
  *a2 = vdiv_f32(*a2, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  a2[1].f32[0] = a2[1].f32[0] / *(float *)&a3;
  return 1LL;
}

void sub_100D4ECD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D4ED04(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_100D4ED30(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100D4ED30(a1, *a2);
    sub_100D4ED30(a1, a2[1]);
    sub_100D4EEAC(a2 + 5);
    operator delete(a2);
  }

uint64_t **sub_100D4ED78(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  unint64_t v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v11 >= v10) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    unint64_t v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + _Block_object_dispose(va, 8) = **a4;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    char v15 = 1;
    sub_1000085FC(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0LL;
    sub_100D4EE68((uint64_t)v14, 0LL);
    return (uint64_t **)v12;
  }

  return v9;
}

void sub_100D4EE68(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100D4EEAC(v2 + 5);
    }
    operator delete(v2);
  }

uint64_t sub_100D4EEAC(void *a1)
{
  int v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 170LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 341LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

uint64_t sub_100D4EF40(void *a1, uint64_t a2)
{
  unint64_t v4 = (void **)a1[1];
  uint64_t v5 = a1[2];
  a1[5] = 0LL;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = a1[2];
      unint64_t v4 = (void **)(a1[1] + 8LL);
      a1[1] = v4;
      unint64_t v6 = v7 - (void)v4;
    }

    while (v6 > 0x10);
  }

  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 170LL;
    goto LABEL_7;
  }

  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 341LL;
LABEL_7:
    a1[4] = v8;
  }

  sub_100D4EFE0(a1);
  uint64_t result = sub_100D4F1E0((uint64_t)a1, a2);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100D4EFE0(void *a1)
{
  if (a1[5])
  {
    sub_100D4F050((uint64_t)a1, 0);
    sub_100D4F0AC(a1, 0);
  }

  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = a1[2] - 8LL;
    }

    a1[4] = 0LL;
  }

  sub_100D4F120((uint64_t)a1);
}

uint64_t sub_100D4F050(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x155) {
    a2 = 1;
  }
  if (v2 < 0x2AA) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 341LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_100D4F0AC(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 341 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x155) {
    a2 = 1;
  }
  if (v5 < 0x2AA) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void sub_100D4F120(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 24;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(void *)a1) >> 3)
  {
    if (v5 == v4)
    {
      int v10 = 0LL;
      int v7 = 0LL;
    }

    else
    {
      int v7 = (char *)sub_1000071BC(v2, v6);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      int v10 = &v7[8 * v9];
      uint64_t v11 = v5 - v8;
      if (v5 != v8)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 8 * (v11 >> 3);
        do
        {
          *(void *)&v7[v12] = *(void *)(v8 + v12);
          v12 += 8LL;
        }

        while (v13 != v12);
        uint64_t v5 = *(void *)(a1 + 8);
        uint64_t v14 = *(void *)(a1 + 16);
        goto LABEL_9;
      }
    }

    uint64_t v14 = v5;
LABEL_9:
    uint64_t v15 = v14 - v5;
    float v16 = *(void **)a1;
    *(void *)a1 = v7;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
    *(void *)(a1 + 16) = &v7[v15];
    *(void *)(a1 + 24) = v10;
    if (v16) {
      operator delete(v16);
    }
  }

uint64_t sub_100D4F1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  sub_100D4F120(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_100D4F24C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000071BC(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100D4F514( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100D4F560(void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555LL * ((uint64_t)(result[1] - *(void *)*result) >> 2);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 340 - v3;
      unint64_t v6 = &v2[-(v5 / 0x155)];
      void *result = v6;
      unint64_t v4 = *v6 + 12 * (341 * (v5 / 0x155) - v5) + 4080;
    }

    else
    {
      void *result = &v2[v3 / 0x155];
      unint64_t v4 = v2[v3 / 0x155] + 12 * (v3 % 0x155);
    }

    result[1] = v4;
  }

  return result;
}

__n128 sub_100D4F61C@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    float v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100D4F6E8(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 4092;
    }

    uint64_t v18 = *a1 + 4092;
    float v19 = a2;
  }

  sub_100D4F6E8(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100D4F6E8@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 2);
      v11 -= 12 * v12;
      a4 -= 12 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 12 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4092);
    }

    if ((char *)(*v6 + 4092LL) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100D4F7C8(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (_BYTE *)(*a1 + 4092LL); ; uint64_t i = v12 + 4092)
    {
      sub_100D4F858(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + _Block_object_dispose(va, 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_100D4F858(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100D4F858@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  unint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }

  else
  {
    uint64_t v9 = a3;
    unint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4092) >> 2);
      unint64_t v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 2)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 2);
      if (v12) {
        double result = memmove(__dst, v7, 12 * v12);
      }
      v7 += 12 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      std::string __dst = v14;
    }

    __dst += 12 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void *sub_100D4F940(void *a1, uint64_t *a2, __int128 *a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v11 = *a2;
  unint64_t v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  sub_100D4B444((uint64_t)a1, &v11, a3);
  int v7 = v12;
  if (v12)
  {
    uint64_t v8 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  *a1 = &off_101881580;
  return a1;
}

void sub_100D4F9D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100D4F9F8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D4B4FC(a1);
  operator delete(v1);
}

uint64_t sub_100D4FA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v19 = v5;
  int64_t v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t, uint64_t, double))(*(void *)v5 + 48LL))(v5, a2, 450.0);
  uint64_t v16 = (uint64_t)&v16;
  uint64_t v17 = &v16;
  uint64_t v18 = 0LL;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void, double))(*(void *)v5 + 64LL))( v5,  &v16,  a2,  0LL,  30.0);
  if ((v8 & 1) != 0)
  {
    unint64_t v9 = v17;
    if (v17 == &v16) {
      goto LABEL_18;
    }
    double v10 = *(double *)(a2 + 104);
    uint64_t v11 = &v16;
    do
    {
      if (v10 == -1.0) {
        goto LABEL_12;
      }
      double v12 = vabdd_f64(v10, *((float *)v9 + 10));
      if (v12 > 180.0) {
        double v12 = 360.0 - v12;
      }
      if (v12 <= 15.0)
      {
LABEL_12:
      }

      unint64_t v9 = (uint64_t *)v9[1];
    }

    while (v9 != &v16);
    if (v11 == &v16)
    {
LABEL_18:
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a2 + 56);
      *(void *)(a2 + 16_Block_object_dispose(va, 8) = *(void *)(a2 + 104);
      ++*(_DWORD *)(a1 + 104);
    }

    else
    {
      sub_100D3EB54(a2, v11 + 2);
      *(_DWORD *)(a2 + 176) = *((_DWORD *)v11 + 8);
      unint64_t v4 = v20;
    }
  }

  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
    ++*(_DWORD *)(a1 + 108);
  }

  sub_100890314(&v16);
  if (v4)
  {
    uint64_t v13 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return v8;
}

void sub_100D4FBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_100890314((uint64_t *)va);
  sub_10000AE14((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D4FC0C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4 = a2[1];
  uint64_t v22 = *a2;
  uint64_t v23 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  sub_100D4F940((void *)a1, &v22, a3);
  unint64_t v7 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)a1 = off_101881658;
  __asm { FMOV            V1.2D, #-1.0 }

  __int128 v21 = _Q1;
  *(_OWORD *)(a1 + 136) = _Q1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(void *)(a1 + 392) = 0LL;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = 0u;
  *(_WORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 40_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 467) = 0u;
  *(_OWORD *)(a1 + 48_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + sub_10000AE14(v1 + 520) = 0u;
  *(_OWORD *)(a1 + 334) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 544) = 0xBFF0000000000000LL;
  *(void *)(a1 + 536) = 0LL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_BYTE *)(a1 + 56_Block_object_dispose(va, 8) = 1;
  *(void *)(a1 + 592) = 0LL;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 600) = 0;
  sub_100D2D9A4(a1 + 608);
  *(_DWORD *)(a1 + 64_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(void *)(a1 + 656) = 0LL;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 680) = 0xBFF0000000000000LL;
  *(void *)(a1 + 68_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = v21;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 760) = 0;
  *(void *)(a1 + 76_Block_object_dispose(va, 8) = 0LL;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 80_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_BYTE *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_WORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 84_Block_object_dispose(va, 8) = 0u;
  *(_BYTE *)(a1 + 600) = sub_1004F6D00();
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101881720);
  }
  __int128 v15 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *(unsigned __int8 *)(a1 + 600);
    *(_DWORD *)std::string buf = 67240192;
    int v26 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "CLMM,skipRMSECheckForScalingEntryThresholds,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101881720);
    }
    int v18 = *(unsigned __int8 *)(a1 + 600);
    v24[0] = 67240192;
    v24[1] = v18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,skipRMSECheckForScalingEntryThresholds,%{public}d",  v24,  8);
    int64_t v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLScoredMapMatcher::CLScoredMapMatcher(CLMapGeometryPtr, const std::string &)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  return a1;
}

void sub_100D4FF34(_Unwind_Exception *a1)
{
}

uint64_t sub_100D4FF78(uint64_t a1)
{
  *(void *)a1 = off_101881658;
  sub_10000AE14(a1 + 552);
  return sub_100D4F9F0(a1);
}

void sub_100D4FFC0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D4FF78(a1);
  operator delete(v1);
}

void sub_100D4FFD4(uint64_t a1)
{
  *(_BYTE *)(a1 + 56_Block_object_dispose(va, 8) = 1;
  *(_DWORD *)(a1 + 64_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(void *)(a1 + 576) = 0LL;
  *(void *)(a1 + 592) = 0LL;
  *(void *)(a1 + 584) = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v7 = _Q0;
  *(void *)uint64_t v8 = 0xBFF0000000000000LL;
  v10[15] = 0LL;
  LODWORD(v10[16]) = 0;
  memset(&v10[10], 0, 34);
  memset(&v10[17], 0, 75);
  memset(&v10[27], 0, 56);
  memset(&v8[8], 0, 80);
  memset(v10, 0, 78);
  __int128 v9 = 0u;
  v10[34] = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v8[64];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v8[48];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v8[32];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v8[16];
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)&v8[80]);
  memcpy((void *)(a1 + 272), v10, 0x118uLL);
  *(void *)(a1 + 592) = 0LL;
  *(_OWORD *)(a1 + 736) = v7;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 64_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(void *)(a1 + 800) = 0LL;
  *(void *)(a1 + 792) = 0LL;
  *(_BYTE *)(a1 + 80_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(void *)(a1 + 832) = 0LL;
  *(void *)(a1 + 824) = 0LL;
  *(_BYTE *)(a1 + 840) = 0;
  if (SHIBYTE(v9) < 0) {
    operator delete(*(void **)&v8[80]);
  }
}

void sub_100D5013C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D50158(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 229);
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(unsigned __int8 *)(result + 816) != v2 || *(double *)(result + 832) == 0.0)
  {
    *(void *)(result + 832) = v3;
    *(_BYTE *)(result + 816) = v2;
  }

  *(void *)(result + 824) = v3;
  return result;
}

uint64_t sub_100D50188(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 840))
  {
    *a2 = 0x4066800000000000LL;
    return 1LL;
  }

  if (*(_BYTE *)(a1 + 776))
  {
    if (!*(_BYTE *)(a1 + 808) || (double v5 = *(double *)(a1 + 792), v5 > 15.0) && v5 > *(double *)(a1 + 800) * 0.5)
    {
      *a2 = 0x4066800000000000LL;
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101881720);
        }
        unint64_t v6 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          int v7 = *(unsigned __int8 *)(a1 + 776);
          uint64_t v8 = *(void *)(a1 + 792);
          uint64_t v9 = *(void *)(a1 + 800);
          uint64_t v10 = *a2;
          *(_DWORD *)std::string buf = 67240960;
          int v25 = v7;
          __int16 v26 = 2050;
          uint64_t v27 = v8;
          __int16 v28 = 2050;
          uint64_t v29 = v9;
          __int16 v30 = 2050;
          uint64_t v31 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "CLMM,holdCourseEngaged,%{public}d,fabsCourseDiffWithPriorSnap,%{public}.1lf,rawCourseUnc,%{public}.1lf,newCo urseUnc,%{public}.1f",  buf,  0x26u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881720);
          }
          int v11 = *(unsigned __int8 *)(a1 + 776);
          uint64_t v12 = *(void *)(a1 + 792);
          uint64_t v13 = *(void *)(a1 + 800);
          uint64_t v14 = *a2;
          v17[0] = 67240960;
          v17[1] = v11;
          __int16 v18 = 2050;
          uint64_t v19 = v12;
          __int16 v20 = 2050;
          uint64_t v21 = v13;
          __int16 v22 = 2050;
          uint64_t v23 = v14;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,holdCourseEngaged,%{public}d,fabsCourseDiffWithPriorSnap,%{public}.1lf,rawCourseUnc,%{public}.1lf,newCo urseUnc,%{public}.1f",  v17,  38);
          int v16 = (uint8_t *)v15;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::shouldOverrideCourseUnc(double &)",  "%s\n",  v15);
          if (v16 != buf) {
            free(v16);
          }
        }
      }

      return 1LL;
    }
  }

  return 0LL;
}

void sub_100D503F4(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 104);
  if (v3 < 0.0) {
    goto LABEL_2;
  }
  double v4 = *(double *)(a1 + 224);
  double v5 = fmod(v3 - v4, 360.0);
  if (v5 < 0.0) {
    double v5 = v5 + 360.0;
  }
  if (v5 > 180.0) {
    double v5 = v5 + -360.0;
  }
  double v6 = fabs(v5);
  if (*(_BYTE *)(a1 + 752))
  {
    if (v6 >= 8.0) {
      return;
    }
LABEL_2:
    *(_BYTE *)(a1 + 752) = 0;
    return;
  }

  if (v6 > 14.0) {
    *(_BYTE *)(a1 + 752) = 1;
  }
}

double sub_100D504C0(double a1)
{
  double v1 = fmod(a1, 360.0);
  if (v1 < 0.0) {
    double v1 = v1 + 360.0;
  }
  if (v1 > 180.0) {
    double v1 = v1 + -360.0;
  }
  return fabs(v1);
}

uint64_t sub_100D50514(uint64_t result, double a2, double a3)
{
  *(double *)(result + 84_Block_object_dispose(va, 8) = a2;
  *(double *)(result + 856) = a3;
  return result;
}

void sub_100D50520(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a2 + 8);
  double v5 = *(double *)(a1 + 128);
  double v6 = (double *)(a1 + 608);
  double v7 = sub_100D2DBDC( (double *)(a1 + 608),  *(double *)(a1 + 176),  *(double *)(a1 + 184),  *(double *)(a2 + 56),  *(double *)(a2 + 64),  *(double *)(a2 + 72));
  *(_BYTE *)(a1 + 840) = 0;
  double v8 = *(double *)(a2 + 192);
  if (v8 > 179.0) {
    *(_BYTE *)(a1 + 840) = 1;
  }
  double v9 = *(double *)(a2 + 104);
  if (v8 > 0.0 || v9 < 0.0)
  {
    double v10 = *(double *)(a2 + 192);
  }

  else
  {
    double v10 = sub_10029756C(*(double *)(a2 + 96));
    *(double *)(a2 + 192) = v10;
    double v9 = *(double *)(a2 + 104);
  }

  double v11 = vabdd_f64(v4, v5);
  if (v9 < 0.0 && v10 > 0.0 && *(double *)(a2 + 96) < 0.001 && v11 < 2.2)
  {
    double v12 = *(double *)(a1 + 224);
    if (v12 >= 0.0)
    {
      double v13 = *(double *)(a1 + 312);
      if (v13 > 0.0 && v13 < 90.0)
      {
        *(double *)(a2 + 104) = v12;
        double v9 = v12;
      }
    }
  }

  if (v9 >= 0.0 && *(_BYTE *)(a1 + 840))
  {
    if (*(_BYTE *)(a1 + 652))
    {
      double v9 = *(double *)(a1 + 424);
      *(double *)(a2 + 104) = v9;
      double v10 = 29.9;
    }

    else if (v11 >= 2.2 {
           || (double v9 = *(double *)(a1 + 224), v9 < 0.0)
    }
           || (double v14 = *(double *)(a1 + 312), v14 <= 0.0)
           || v14 >= 90.0)
    {
      *(void *)(a2 + 104) = 0xBFF0000000000000LL;
      double v10 = -1.0;
      double v9 = -1.0;
    }

    else
    {
      *(double *)(a2 + 104) = v9;
      if (v14 >= 29.9) {
        double v10 = v14;
      }
      else {
        double v10 = 29.9;
      }
    }

    *(double *)(a2 + 192) = v10;
    *(double *)(a1 + 84_Block_object_dispose(va, 8) = v9;
    *(double *)(a1 + 856) = v10;
  }

  double v15 = *(double *)(a2 + 96);
  double v16 = 12.0;
  if (v10 < 12.0 && (v10 > 0.0 ? (_NF = v15 < 2.0) : (_NF = 0), _NF)
    || ((double v16 = 6.5, v10 > 0.0) ? (v18 = v10 < 6.5) : (v18 = 0), v18))
  {
    *(double *)(a2 + 192) = v16;
    double v10 = v16;
  }

  double v19 = v4 - v5;
  if (v9 >= 0.0 && v10 > 0.0 && v10 < 30.0)
  {
    double v22 = *(double *)(a1 + 224);
    if (v22 >= 0.0 && v19 != 0.0)
    {
      double v23 = fmod(v9 - v22, 360.0);
      if (v23 < 0.0) {
        double v23 = v23 + 360.0;
      }
      if (v23 > 180.0) {
        double v23 = v23 + -360.0;
      }
      if (fabs(v23 / v19) > 45.0)
      {
        *(void *)(a2 + 192) = 0x403E000000000000LL;
        double v10 = 30.0;
      }
    }
  }

  float v20 = v7;
  if (!*(_BYTE *)(a1 + 776))
  {
    if (*(_BYTE *)(a1 + 384))
    {
      if (v19 != 0.0 && v11 < 1.4 && v9 >= 0.0 && v15 < 5.0 && v20 < 5.0)
      {
        double v24 = *(double *)(a1 + 224);
        if (v24 >= 0.0)
        {
          double v25 = *(double *)(a1 + 312);
          if (v25 > 0.0 && v25 <= 29.9)
          {
            double v26 = fmod(v9 - v24, 360.0);
            if (v26 < 0.0) {
              double v26 = v26 + 360.0;
            }
            if (v26 > 180.0) {
              double v26 = v26 + -360.0;
            }
            double v27 = fabs(v26 / v19);
            if (v27 > 135.0)
            {
              if (*(_BYTE *)(a1 + 96))
              {
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_101881720);
                }
                __int16 v28 = (os_log_s *)qword_1019348B8;
                if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v29 = *(void *)(a2 + 8);
                  uint64_t v30 = *(void *)(a1 + 224);
                  uint64_t v32 = *(void *)(a2 + 96);
                  uint64_t v31 = *(void *)(a2 + 104);
                  *(_DWORD *)std::string buf = 134350080;
                  *(void *)&uint8_t buf[4] = v29;
                  *(_WORD *)&_BYTE buf[12] = 2050;
                  *(void *)&_BYTE buf[14] = v31;
                  *(_WORD *)&_BYTE buf[22] = 2050;
                  *(void *)&_BYTE buf[24] = v30;
                  __int16 v130 = 2050;
                  uint64_t v131 = v32;
                  __int16 v132 = 2050;
                  double v133 = v27;
                  _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,high course rate,course,%{public}.1lf,priorCourse,%{public}.1lf,speed,%{public}.1 lf,fabsCourseRate,%{public}.1lf",  buf,  0x34u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1019348B0 != -1) {
                    dispatch_once(&qword_1019348B0, &stru_101881720);
                  }
                  uint64_t v112 = *(void *)(a2 + 8);
                  uint64_t v113 = *(void *)(a1 + 224);
                  uint64_t v115 = *(void *)(a2 + 96);
                  uint64_t v114 = *(void *)(a2 + 104);
                  *(_DWORD *)int v120 = 134350080;
                  *(void *)&v120[4] = v112;
                  *(_WORD *)&v120[12] = 2050;
                  *(void *)&v120[14] = v114;
                  *(_WORD *)&v120[22] = 2050;
                  *(void *)&v120[24] = v113;
                  __int16 v121 = 2050;
                  uint64_t v122 = v115;
                  __int16 v123 = 2050;
                  double v124 = v27;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,high course rate,course,%{public}.1lf,priorCourse,%{public}.1lf,speed,%{public}.1 lf,fabsCourseRate,%{public}.1lf",  v120,  52);
                  __int16 v117 = (char *)v116;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)",  "%s\n",  v116);
                  if (v117 != buf) {
                    free(v117);
                  }
                }
              }

              double v9 = *(double *)(a1 + 224);
              *(double *)(a2 + 104) = v9;
              double v10 = *(double *)(a1 + 312);
              *(double *)(a2 + 192) = v10;
              *(double *)(a1 + 84_Block_object_dispose(va, 8) = v9;
              *(double *)(a1 + 856) = v10;
            }
          }
        }
      }
    }
  }

  if (v9 >= 0.0)
  {
    double v21 = *(double *)(a2 + 96);
    if (v10 <= 0.0 || v10 >= 20.0 || v21 <= 5.0)
    {
      double v33 = *(double *)(a1 + 736);
      if (v33 >= 0.0)
      {
        double v34 = fmod(v9 - v33, 360.0);
        if (v34 < 0.0) {
          double v34 = v34 + 360.0;
        }
        if (v34 > 180.0) {
          double v34 = v34 + -360.0;
        }
        if (fabs(v34) < 30.0 && v21 < 5.0)
        {
          double v39 = *(double *)(a1 + 744);
          if (v39 < v10) {
            *(double *)(a2 + 192) = v39;
          }
        }

        else
        {
          __asm { FMOV            V0.2D, #-1.0 }

          *(_OWORD *)(a1 + 736) = _Q0;
        }
      }
    }

    else
    {
      *(double *)(a1 + 736) = v9;
      *(double *)(a1 + 744) = v10;
    }
  }

  sub_100D503F4(a1, a2);
  if (!*(_BYTE *)(a1 + 652) || v11 > 4.9)
  {
    *(_WORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 780) = 0;
    *(_BYTE *)(a1 + 784) = 0;
    *(void *)(a1 + 800) = 0LL;
    *(void *)(a1 + 792) = 0LL;
    *(_BYTE *)(a1 + 80_Block_object_dispose(va, 8) = 0;
    return;
  }

  float v41 = sub_100D51878(v40, *(_DWORD *)(a1 + 780), *(unsigned __int8 *)(a1 + 777));
  if (v41 >= 11.1000001) {
    float v42 = v41;
  }
  else {
    float v42 = 11.1;
  }
  *(void *)std::string buf = 0LL;
  uint64_t v119 = 0LL;
  *(void *)int v120 = 0LL;
  sub_100D2DA44( v6,  (double *)v120,  (double *)buf,  (double *)&v119,  *(double *)(a1 + 408),  *(double *)(a1 + 416),  *(double *)(a2 + 72),  *(double *)(a2 + 56),  *(double *)(a2 + 64),  *(double *)(a2 + 72));
  double v43 = *(double *)(a1 + 424);
  float v44 = *(double *)v120 * *(double *)v120 + *(double *)buf * *(double *)buf;
  float v45 = sqrtf(v44);
  float v46 = *(double *)buf;
  float v47 = *(double *)v120;
  float v48 = atan2f(v46, v47);
  float v49 = v43 * -0.0174532925;
  float v50 = sinf(v48 + v49) * v45;
  float v51 = fabsf(v50);
  float v52 = (float)(v42 * 0.5) + 7.5;
  if (*(_BYTE *)(a1 + 777) && v51 < v52) {
    goto LABEL_106;
  }
  int v53 = *(_DWORD *)(a1 + 760);
  if (v53 == 1)
  {
    BOOL v54 = v50 <= (float)-v52;
    float v52 = 7.5;
  }

  else
  {
    if (v53 != 2) {
      goto LABEL_105;
    }
    BOOL v54 = v50 <= -7.5;
  }

  if (!v54 && v50 < v52) {
    goto LABEL_106;
  }
LABEL_105:
  if (v51 < (float)((float)(v42 * 0.5) * 0.5))
  {
LABEL_106:
    int v56 = 1;
    goto LABEL_107;
  }

  int v56 = 0;
LABEL_107:
  double v57 = *(double *)(a2 + 104);
  double v58 = 0.0;
  if (v57 >= 0.0)
  {
    double v59 = fmod(v57 - v43, 360.0);
    if (v59 < 0.0) {
      double v59 = v59 + 360.0;
    }
    if (v59 > 180.0) {
      double v59 = v59 + -360.0;
    }
    double v58 = fabs(v59);
  }

  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101881720);
    }
    uint64_t v60 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v61 = *(void *)(a2 + 192);
      uint64_t v62 = *(void *)(a1 + 424);
      uint64_t v64 = *(void *)(a2 + 96);
      uint64_t v63 = *(void *)(a2 + 104);
      *(_DWORD *)std::string buf = 134350592;
      *(void *)&uint8_t buf[4] = v63;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&_BYTE buf[14] = v61;
      *(_WORD *)&_BYTE buf[22] = 2050;
      *(void *)&_BYTE buf[24] = v62;
      __int16 v130 = 2050;
      uint64_t v131 = v64;
      __int16 v132 = 2050;
      double v133 = v50;
      __int16 v134 = 1026;
      int v135 = v56;
      __int16 v136 = 2050;
      double v137 = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "CLMM,course,%{public}.1lf,courseUnc,%{public}.1lf,lastSnapCourse,%{public}.1lf,speed,%{public}.1lf,acrossTrack,% {public}.1f,onRoad,%{public}d,widthUsed,%{public}.1lf",  buf,  0x44u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881720);
      }
      uint64_t v91 = *(void *)(a2 + 192);
      uint64_t v92 = *(void *)(a1 + 424);
      uint64_t v94 = *(void *)(a2 + 96);
      uint64_t v93 = *(void *)(a2 + 104);
      *(_DWORD *)int v120 = 134350592;
      *(void *)&v120[4] = v93;
      *(_WORD *)&v120[12] = 2050;
      *(void *)&v120[14] = v91;
      *(_WORD *)&v120[22] = 2050;
      *(void *)&v120[24] = v92;
      __int16 v121 = 2050;
      uint64_t v122 = v94;
      __int16 v123 = 2050;
      double v124 = v50;
      __int16 v125 = 1026;
      int v126 = v56;
      __int16 v127 = 2050;
      double v128 = v42;
      LODWORD(v11_Block_object_dispose(va, 8) = 68;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,course,%{public}.1lf,courseUnc,%{public}.1lf,lastSnapCourse,%{public}.1lf,speed,%{public}.1lf,acrossTrack,% {public}.1f,onRoad,%{public}d,widthUsed,%{public}.1lf",  v120,  v118);
      uint64_t v96 = (char *)v95;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v95);
      if (v96 != buf) {
        free(v96);
      }
    }
  }

  if (*(_BYTE *)(a2 + 228))
  {
    int v65 = 1;
  }

  else
  {
    double v66 = *(double *)(a2 + 96);
    int v65 = v66 >= 0.0 && v66 < 0.35;
  }

  int v67 = sub_1004F84C0();
  double v68 = *(double *)(a2 + 96);
  if (v67 && *(double *)(a2 + 184) > 0.0 && v68 >= 0.0 && v65 && v68 < 0.002)
  {
    BOOL v70 = v11 >= 1.1 || *(_BYTE *)(a2 + 228) != 0;
    int v65 = v20 <= 0.7 || v70;
  }

  if (v11 >= 3.0) {
    int v71 = (v58 > 135.0) & ~v65;
  }
  else {
    int v71 = 0;
  }
  if (v58 > 30.0) {
    int v72 = v56;
  }
  else {
    int v72 = 0;
  }
  if (v72 != 1
    || (v71 & 1) != 0
    || *(_BYTE *)(a2 + 229)
    || *(_BYTE *)(a1 + 816)
    || (double v73 = *(double *)(a1 + 824) - *(double *)(a1 + 832), v73 < 0.0)
    || v73 >= 30.0)
  {
    if (*(_BYTE *)(a1 + 776))
    {
      if (v68 > 3.0 || ((v56 | v65) ^ 1 | v71) == 1)
      {
        *(_WORD *)(a1 + 776) = 0;
        *(_DWORD *)(a1 + 780) = 0;
        *(_BYTE *)(a1 + 784) = 0;
        *(void *)(a1 + 800) = 0LL;
        *(void *)(a1 + 792) = 0LL;
        int v76 = 1;
        *(_BYTE *)(a1 + 80_Block_object_dispose(va, 8) = 0;
        goto LABEL_166;
      }
    }

    else
    {
      int v76 = 1;
      if (!v56 || v68 >= 1.5 && v20 >= 1.5)
      {
LABEL_166:
        else {
          int v77 = 0;
        }
        if (v77 == 1)
        {
          *(_BYTE *)(a1 + 776) = 1;
        }

        else
        {
          if (!*(_BYTE *)(a2 + 228)) {
            int v76 = 0;
          }
          if (v76 == 1)
          {
            double v78 = *(double *)(a2 + 96);
            if (v78 < 0.0 || v78 < 0.35)
            {
              if (*(_BYTE *)(a1 + 384))
              {
                if (v11 < 2.2 && v58 > 30.0)
                {
                  *(_BYTE *)(a1 + 776) = 1;
                  if (*(_BYTE *)(a1 + 96))
                  {
                    if (qword_1019348B0 != -1) {
                      dispatch_once(&qword_1019348B0, &stru_101881720);
                    }
                    __int16 v79 = (os_log_s *)qword_1019348B8;
                    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)std::string buf = 134349056;
                      *(double *)&uint8_t buf[4] = v58;
                      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEBUG,  "CLMM,holdCourse,engaged,large course diff when static,fabsCourseDiffWithPriorSnap,%{public}.1lf",  buf,  0xCu);
                    }

                    if (sub_1002921D0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1019348B0 != -1) {
                        dispatch_once(&qword_1019348B0, &stru_101881720);
                      }
                      *(_DWORD *)int v120 = 134349056;
                      *(double *)&v120[4] = v58;
                      LODWORD(v11_Block_object_dispose(va, 8) = 12;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,holdCourse,engaged,large course diff when static,fabsCourseDiffWithPriorSnap,%{public}.1lf",  v120,  v118);
                      __int16 v109 = (char *)v108;
                      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)",  "%s\n",  v108);
                      if (v109 != buf) {
                        free(v109);
                      }
                    }
                  }
                }
              }
            }
          }
        }

        if (sub_1004F84C0())
        {
          if (!*(_BYTE *)(a1 + 776) && v11 < 1.1 && *(double *)(a2 + 184) > 0.0)
          {
            double v80 = *(double *)(a2 + 96);
            if (v80 >= 0.0 && v80 < 5.0 && v20 < 5.0)
            {
              char v81 = *(double *)(a2 + 104) < 0.0 ? 1 : v71;
              if ((v81 & 1) == 0 && v58 >= 135.0)
              {
                if (*(_BYTE *)(a1 + 96))
                {
                  if (qword_1019348B0 != -1) {
                    dispatch_once(&qword_1019348B0, &stru_101881720);
                  }
                  double v82 = (os_log_s *)qword_1019348B8;
                  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)std::string buf = 134349056;
                    *(double *)&uint8_t buf[4] = v58;
                    _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEBUG,  "CLMM,holdCourse,engaged,large course diff at slow speed within one second,fabsCourseDiffWithPriorS nap,%{public}.1lf",  buf,  0xCu);
                  }

                  if (sub_1002921D0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1019348B0 != -1) {
                      dispatch_once(&qword_1019348B0, &stru_101881720);
                    }
                    *(_DWORD *)int v120 = 134349056;
                    *(double *)&v120[4] = v58;
                    LODWORD(v11_Block_object_dispose(va, 8) = 12;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,holdCourse,engaged,large course diff at slow speed within one second,fabsCourseDiffWithPriorS nap,%{public}.1lf",  v120,  v118);
                    int v111 = (char *)v110;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)",  "%s\n",  v110);
                    if (v111 != buf) {
                      free(v111);
                    }
                  }
                }

                uint64_t v83 = *(void *)(a1 + 224);
                *(void *)(a2 + 104) = v83;
                uint64_t v84 = *(void *)(a1 + 312);
                *(void *)(a2 + 192) = v84;
                *(void *)(a1 + 84_Block_object_dispose(va, 8) = v83;
                *(void *)(a1 + 856) = v84;
              }
            }
          }
        }

        goto LABEL_204;
      }

      *(_BYTE *)(a1 + 776) = 1;
    }

    int v76 = 0;
    goto LABEL_166;
  }

  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101881720);
    }
    float v74 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      double v75 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)std::string buf = 134349056;
      *(double *)&uint8_t buf[4] = v75;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "CLMM,detected course swing after a recent dismount,intervalSinceDismount,%{public}.1lf",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881720);
      }
      double v105 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)int v120 = 134349056;
      *(double *)&v120[4] = v105;
      LODWORD(v11_Block_object_dispose(va, 8) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,detected course swing after a recent dismount,intervalSinceDismount,%{public}.1lf",  v120,  v118);
      int v107 = (char *)v106;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v106);
      if (v107 != buf) {
        free(v107);
      }
    }
  }

  *(_BYTE *)(a1 + 776) = 1;
LABEL_204:
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101881720);
    }
    unint64_t v85 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      int v86 = *(unsigned __int8 *)(a1 + 776);
      uint64_t v87 = *(void *)(a2 + 96);
      *(_DWORD *)std::string buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v86;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&_OWORD buf[10] = v87;
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "CLMM,holdCourse,engaged,%{public}d,speed,%{public}.1lf,distance,%{public}.1lf",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881720);
      }
      int v97 = *(unsigned __int8 *)(a1 + 776);
      uint64_t v98 = *(void *)(a2 + 96);
      *(_DWORD *)int v120 = 67240704;
      *(_DWORD *)&v120[4] = v97;
      *(_WORD *)&v120[8] = 2050;
      *(void *)&v120[10] = v98;
      *(_WORD *)&v120[18] = 2050;
      *(double *)&v120[20] = v20;
      LODWORD(v11_Block_object_dispose(va, 8) = 28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,holdCourse,engaged,%{public}d,speed,%{public}.1lf,distance,%{public}.1lf",  v120,  v118);
      uint64_t v100 = (char *)v99;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v99);
      if (v100 != buf) {
        free(v100);
      }
    }
  }

  if (*(_BYTE *)(a1 + 776))
  {
    *(_BYTE *)(a1 + 80_Block_object_dispose(va, 8) = *(double *)(a2 + 104) >= 0.0;
    *(double *)(a1 + 792) = v58;
    *(void *)(a1 + 800) = *(void *)(a2 + 192);
    *(void *)(a2 + 104) = *(void *)(a1 + 424);
    *(void *)(a2 + 192) = 0x403DE66666666666LL;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881720);
      }
      __int16 v88 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v89 = *(void *)(a2 + 104);
        uint64_t v90 = *(void *)(a2 + 192);
        *(_DWORD *)std::string buf = 134349568;
        *(void *)&uint8_t buf[4] = v89;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&_BYTE buf[14] = v90;
        *(_WORD *)&_BYTE buf[22] = 2050;
        *(double *)&_BYTE buf[24] = v58;
        _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEBUG,  "CLMM,holdCourse,using prior snap,course,%{public}.1lf,courseUnc,%{public}.1lf,fabsCourseDiff,%{public}.1lf",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101881720);
        }
        uint64_t v101 = *(void *)(a2 + 104);
        uint64_t v102 = *(void *)(a2 + 192);
        *(_DWORD *)int v120 = 134349568;
        *(void *)&v120[4] = v101;
        *(_WORD *)&v120[12] = 2050;
        *(void *)&v120[14] = v102;
        *(_WORD *)&v120[22] = 2050;
        *(double *)&v120[24] = v58;
        LODWORD(v11_Block_object_dispose(va, 8) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,holdCourse,using prior snap,course,%{public}.1lf,courseUnc,%{public}.1lf,fabsCourseDiff,%{public}.1lf",  v120,  v118);
        uint64_t v104 = (char *)v103;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v103);
        if (v104 != buf) {
          free(v104);
        }
      }
    }
  }

float sub_100D51878(uint64_t a1, unsigned int a2, int a3)
{
  float result = 1.0;
  if ((a2 & 0xFFFFFFFE) != 8)
  {
    float result = 7.4;
    if (a3) {
      float result = 5.55;
    }
    if (a2 <= 7)
    {
      double v4 = (float *)&unk_10135D488;
      if (a3) {
        double v4 = (float *)&unk_10135D468;
      }
      return v4[a2];
    }
  }

  return result;
}

void sub_100D518C8(uint64_t a1, uint64_t a2)
{
}

void sub_100D518D8( uint64_t a1, double *a2, double *a3, double *a4, double *a5, float *a6, double *a7, double *a8, char a9)
{
  double v17 = *a3;
  double v18 = *a2;
  if (*a3 != 0.0 || v18 != 0.0)
  {
    if ((a9 & 1) != 0) {
      float v20 = 80.0;
    }
    else {
      float v20 = sub_100D51878(a1, *(_DWORD *)(*(void *)a6 + 20LL), *(unsigned __int8 *)(*(void *)a6 + 16LL));
    }
    double v21 = a6[6];
    float v22 = v17 * v17 + v18 * v18;
    float v23 = sqrtf(v22);
    float v24 = v18;
    float v25 = v17;
    float v26 = atan2f(v24, v25);
    float v27 = v21 * 0.0174532925;
    __float2 v28 = __sincosf_stret(v26 - v27);
    float v29 = v23 * v28.__cosval;
    float v30 = v23 * v28.__sinval;
    if (!*(_BYTE *)(a1 + 753)) {
      goto LABEL_25;
    }
    float v31 = v20 * 0.5;
    float v32 = fabsf(v30);
    if (*(_BYTE *)(*(void *)a6 + 16LL))
    {
      if (v32 < v31) {
        goto LABEL_10;
      }
      float v37 = -v31;
      if (v30 < 0.0) {
        float v37 = v20 * 0.5;
      }
      goto LABEL_23;
    }

    double v35 = *(double *)(a1 + 768);
    if (v35 == 0.0 || vabdd_f64(a7[1], v35) > 120.0)
    {
      int v36 = sub_100E288AC(a7[7], a7[8]);
      *(_DWORD *)(a1 + 760) = v36;
      *(double *)(a1 + 76_Block_object_dispose(va, 8) = a7[1];
      if (v36) {
        goto LABEL_17;
      }
    }

    else
    {
      int v36 = *(_DWORD *)(a1 + 760);
      if (v36)
      {
LABEL_17:
        if (v36 != 2 || v30 <= 0.0)
        {
          if (v30 >= 0.0) {
            goto LABEL_24;
          }
          if (v32 >= v31)
          {
            *a8 = v31;
            float v30 = v31 + v30;
            goto LABEL_24;
          }

          double v34 = v32;
          goto LABEL_13;
        }

        if (v30 >= v31)
        {
          *a8 = (float)-v31;
          float v30 = v30 - v31;
          goto LABEL_24;
        }

        float v33 = -v32;
LABEL_12:
        double v34 = v33;
LABEL_13:
        *a8 = v34;
        float v30 = 0.0;
LABEL_24:
        float v38 = sqrtf((float)(v29 * v29) + (float)(v30 * v30));
        float v39 = atan2f(v30, v29);
        __float2 v40 = __sincosf_stret(v39 + v27);
        *a3 = (float)(v38 * v40.__cosval);
        *a2 = (float)(v38 * v40.__sinval);
LABEL_25:
        *a4 = v29;
        double v19 = v30;
        goto LABEL_26;
      }
    }

    float v37 = v20 * 0.25;
    if (v32 < (float)(v20 * 0.25))
    {
LABEL_10:
      float v33 = -v32;
      if (v30 < 0.0) {
        float v33 = v32;
      }
      goto LABEL_12;
    }

    if (v30 >= 0.0) {
      float v37 = -v37;
    }
LABEL_23:
    *a8 = v37;
    float v30 = v30 + v37;
    goto LABEL_24;
  }

  *a4 = 0.0;
  double v19 = 0.0;
LABEL_26:
  *a5 = v19;
}

BOOL sub_100D51B34(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v103 = 0;
  double v6 = *(double *)(a2 + 232);
  double v7 = fabs(*(double *)(a2 + 240));
  double v101 = fabs(*(double *)(a1 + 360));
  double v102 = v7;
  int v8 = (int)v6;
  if (v7 >= 25.0 && a3 == 0)
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
LABEL_9:
        int v10 = 0;
        int v11 = -1;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        break;
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      case 11:
      case 12:
LABEL_10:
        int v12 = 2;
        goto LABEL_12;
      case 13:
      case 14:
      case 15:
      case 16:
LABEL_7:
        int v12 = 3;
        goto LABEL_12;
      case 17:
      case 18:
      case 19:
      case 20:
LABEL_8:
        int v12 = 4;
        goto LABEL_12;
      default:
LABEL_11:
        int v12 = 10;
LABEL_12:
        int v10 = 1;
        unsigned __int8 v103 = 1;
        int v11 = v12;
        break;
    }
  }

  else
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_9;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        break;
      case 13:
        goto LABEL_12;
      case 14:
        goto LABEL_10;
      case 15:
      case 16:
        goto LABEL_7;
      case 17:
      case 18:
      case 19:
      case 20:
        goto LABEL_8;
      default:
        goto LABEL_11;
    }
  }

  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101881720);
    }
    double v13 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&_OWORD buf[10] = v14 + v11;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "CLMM,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881720);
      }
      int v73 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)uint64_t v104 = 67240448;
      *(_DWORD *)&v104[4] = v73;
      *(_WORD *)&v104[8] = 1026;
      *(_DWORD *)&v104[10] = v73 + v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d",  v104,  14);
      double v75 = (char *)v74;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)",  "%s\n",  v74);
      if (v75 != buf) {
        free(v75);
      }
    }
  }

  *(_DWORD *)(a1 + 64_Block_object_dispose(va, 8) = (*(_DWORD *)(a1 + 648) + v11) & ~((*(_DWORD *)(a1 + 648) + v11) >> 31);
  __int16 v100 = 0;
  sub_100F1F5D0(a2, (BOOL *)&v100 + 1, &v100);
  if (HIBYTE(v100))
  {
    if ((_BYTE)v100)
    {
      double v15 = *(double *)(a2 + 96);
      if (v15 > 0.0 || !*(_BYTE *)(a2 + 228))
      {
        if (a3)
        {
          if (v7 <= 67.5) {
            goto LABEL_52;
          }
          else {
            int v17 = 6;
          }
          goto LABEL_45;
        }

        if (v15 > 8.33333333 || *(double *)(a2 + 192) < 20.0)
        {
          if (v7 > 67.5)
          {
            int v17 = 18;
LABEL_45:
            unsigned __int8 v103 = 1;
            if (*(_BYTE *)(a1 + 96))
            {
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_101881720);
              }
              double v18 = (os_log_s *)qword_1019348B8;
              if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
              {
                int v19 = *(_DWORD *)(a1 + 648);
                *(_DWORD *)std::string buf = 67240448;
                *(_DWORD *)&uint8_t buf[4] = v19;
                *(_WORD *)&uint8_t buf[8] = 1026;
                *(_DWORD *)&_OWORD buf[10] = v19 + v17;
                _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d",  buf,  0xEu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_101881720);
                }
                int v84 = *(_DWORD *)(a1 + 648);
                *(_DWORD *)uint64_t v104 = 67240448;
                *(_DWORD *)&v104[4] = v84;
                *(_WORD *)&v104[8] = 1026;
                *(_DWORD *)&v104[10] = v84 + v17;
                LODWORD(v94) = 14;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d",  v104,  v94);
                int v86 = (char *)v85;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)",  "%s\n",  v85);
                if (v86 != buf) {
                  free(v86);
                }
              }
            }

            *(_DWORD *)(a1 + 648) += v17;
            int v10 = 1;
            goto LABEL_52;
          }

          if (v7 > 45.0)
          {
LABEL_40:
            int v17 = 6;
            goto LABEL_45;
          }

          if (v7 > 30.0)
          {
LABEL_42:
            int v17 = 2;
            goto LABEL_45;
          }

          if (v7 > 20.0)
          {
LABEL_44:
            int v17 = 1;
            goto LABEL_45;
          }
        }

        if (v7 <= 67.5)
        {
          if (v7 <= 45.0)
          {
            if (v7 <= 30.0) {
              goto LABEL_52;
            }
            goto LABEL_44;
          }

          goto LABEL_42;
        }

        goto LABEL_40;
      }
    }
  }

BOOL sub_100D53194( uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, _BYTE *a6, _BYTE *a7, double *a8, double *a9, double *a10, unsigned __int8 *a11)
{
  BOOL result = 0LL;
  double v13 = *(double *)(a2 + 232);
  if (v13 >= 3.0) {
    return 0LL;
  }
  BOOL result = 0LL;
  double v14 = *(double *)(a1 + 352);
  if (v14 >= 3.0) {
    return result;
  }
  BOOL result = 0LL;
  BOOL result = 0LL;
  if (*a6 && *a7 && *(double *)(a2 + 192) < 20.0)
  {
    if (*a9 < 40.0)
    {
      float v15 = *(float *)(a2 + 180);
      float v16 = 2.5;
      goto LABEL_21;
    }

    return 0LL;
  }

  float v15 = *(float *)(a2 + 180);
  float v16 = 3.0;
LABEL_21:
  if (v15 > v16) {
    return 1LL;
  }
  BOOL result = 0LL;
  if (v13 < 1.0 && v14 < 1.0) {
    return v15 > 1.1 || v15 == 0.0;
  }
  return result;
}

double sub_100D53308(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, void *a5, void *a6)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0x3FF0000000000000LL;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  int v15 = 0;
  sub_100D53428(a1, a2, a3, a4, &v18, &v17, &v16, (uint64_t)v10, 0);
  double result = *(double *)v10;
  uint64_t v9 = v11;
  *a5 = v10[0];
  *a6 = v9;
  return result;
}

void sub_100D53370(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5)
{
}

double sub_100D533A0( uint64_t a1, uint64_t a2, uint64_t a3, double *a4, void *a5, void *a6, double *a7, double *a8, void *a9, double *a10, char a11)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0x3FF0000000000000LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  int v20 = 0;
  sub_100D53428(a1, a2, a3, a4, a7, a8, a10, (uint64_t)v15, a11);
  uint64_t v13 = v16;
  *a5 = v15[0];
  *a6 = v13;
  double result = *((double *)&v19 + 1);
  *a9 = *((void *)&v19 + 1);
  return result;
}

void sub_100D53428( uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, uint64_t a8, char a9)
{
  char v16 = a9;
  *(void *)a8 = 0LL;
  *(void *)(a8 + 16) = 0LL;
  uint64_t v17 = (double *)(a8 + 40);
  __int128 v18 = (double *)(a8 + 32);
  sub_100D2DA44( (double *)(a1 + 608),  (double *)(a8 + 40),  (double *)(a8 + 32),  (double *)(a8 + 48),  *(double *)(a3 + 32),  *(double *)(a3 + 40),  a4[9],  a4[7],  a4[8],  a4[9]);
  if (!*(void *)a3)
  {
    float v23 = a7;
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101881720);
    }
    __int128 v19 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning CLMM, NULL road", buf, 2u);
    }

    a7 = v23;
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881720);
      }
      v25[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  0LL,  "#Warning CLMM, NULL road",  v25,  2);
      float v22 = (uint8_t *)v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLScoredMapMatcher::calculateScoreAndVarFactor(CLMapDataUtil::CovarInvDet &, const struct CLMapGeometry::Di stanceQueryResult &, const CLMapCrumb &, double &, double &, double &, CLMapDataUtil::MapMatcherScore &, BOOL)",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
      a7 = v23;
      char v16 = a9;
    }
  }

  sub_100D518D8(a1, v18, v17, a5, a6, (float *)a3, a4, a7, v16);
  if (*(_BYTE *)(a2 + 40))
  {
    double v20 = fmod(a4[13] - *(float *)(a3 + 24), 360.0);
    if (v20 < 0.0) {
      double v20 = v20 + 360.0;
    }
    if (v20 > 180.0) {
      double v20 = v20 + -360.0;
    }
    *(double *)(a8 + 56) = fabs(v20);
  }

  sub_1003094FC(a2, a8);
}

uint64_t sub_100D5370C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  double v5 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v57 = v4;
  uint64_t v58 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  int v8 = *(unsigned __int8 *)(a2 + 229);
  uint64_t v9 = *(void *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 816) != v8 || *(double *)(a1 + 832) == 0.0)
  {
    *(void *)(a1 + 832) = v9;
    *(_BYTE *)(a1 + 816) = v8;
  }

  *(void *)(a1 + 824) = v9;
  ++*(_DWORD *)(a1 + 100);
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)v4 + 48LL))(v4, a2, 450.0);
  uint64_t v54 = (uint64_t)&v54;
  int v55 = &v54;
  uint64_t v56 = 0LL;
  uint64_t v50 = (void *)(a1 + 552);
  if (*(void *)(a1 + 552))
  {
    double v10 = *(double *)(a2 + 8) - *(double *)(a1 + 592);
    if (v10 <= 5.0
      && ((*(uint64_t (**)(uint64_t, uint64_t *, void *, void, uint64_t, double, double))(*(void *)v4 + 72LL))( v4,  &v54,  v50,  *(unsigned __int8 *)(a1 + 568),  1LL,  *(double *)(a1 + 576),  v10 * ((*(double *)(a2 + 96) + *(double *)(a1 + 584)) * 0.5)) & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
      uint64_t v16 = 0LL;
      ++*(_DWORD *)(a1 + 108);
      goto LABEL_81;
    }
  }

  sub_100D50520(a1, a2);
  uint64_t v49 = a1 + 656;
  sub_100308AAC(a1 + 656, a2, *(unsigned __int8 *)(a1 + 752));
  v11.n128_u64[0] = *(void *)(a2 + 80);
  double v12 = *(double *)(a2 + 200);
  if (v12 > 0.0)
  {
    double v13 = *(double *)(a2 + 208);
    if (v13 > 0.0) {
      v11.n128_f64[0] = sqrt(v13 / 2.45 * (v13 / 2.45) + v12 / 2.45 * (v12 / 2.45));
    }
  }

  double v14 = v11.n128_f64[0] * 4.0;
  v11.n128_u64[0] = 0x4052C00000000000LL;
  if (v14 >= 75.0)
  {
    v11.n128_f64[0] = v14;
    if (v14 > 249.9999) {
      v11.n128_u64[0] = 0x406F3FFF2E48E8A7LL;
    }
  }

  uint64_t v51 = (uint64_t)&v51;
  uint64_t v52 = &v51;
  uint64_t v53 = 0LL;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, __n128))(*(void *)v4 + 64LL))( v4,  &v51,  a2,  1LL,  v11);
  uint64_t v16 = v15;
  if ((v15 & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_80;
  }

  uint64_t v48 = a2;
  uint64_t v17 = v52;
  if (v52 == &v51)
  {
LABEL_79:
    *(_OWORD *)(v48 + 152) = *(_OWORD *)(v48 + 56);
    *(void *)(v48 + 16_Block_object_dispose(va, 8) = *(void *)(v48 + 104);
    sub_1000F0D38(v50);
    ++*(_DWORD *)(a1 + 104);
    goto LABEL_80;
  }

  unsigned int v47 = v15;
  char v18 = 0;
  int v19 = 0;
  char v20 = 0;
  int v21 = 0;
  double v22 = 0.0;
  double v23 = 0.0;
  double v24 = 0.0;
  float v25 = &v51;
  do
  {
    if (*(_BYTE *)(v17[2] + 17)) {
      goto LABEL_65;
    }
    double v59 = 0.0;
    uint64_t v60 = 0LL;
    uint64_t v61 = 0LL;
    uint64_t v62 = 0x3FF0000000000000LL;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    int v65 = 0;
    sub_100D53428(a1, v49, (uint64_t)(v17 + 2), (double *)v48, v68, (double *)&v67, (double *)&v66, (uint64_t)&v59, 0);
    double v26 = (void *)*v50;
    if (!*v50)
    {
      int v30 = 1;
      double v31 = v59;
      goto LABEL_34;
    }

    uint64_t v27 = *(void *)v17[2];
    if (*v26 == v27) {
      goto LABEL_31;
    }
    double v28 = v55;
    if (v55 == &v54) {
      goto LABEL_29;
    }
    char v29 = 0;
    do
    {
      double v28 = (uint64_t *)v28[1];
    }

    while (v28 != &v54);
    if ((v29 & 1) != 0)
    {
LABEL_31:
      int v30 = 1;
      double v31 = v59;
      if (!*((_BYTE *)v17 + 37)) {
LABEL_32:
      }
        double v31 = v31 / 10.0;
    }

    else
    {
LABEL_29:
      int v30 = 0;
      double v31 = v59 / 500.0;
      if (!*((_BYTE *)v17 + 37)) {
        goto LABEL_32;
      }
    }

void sub_100D53C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_100890314((uint64_t *)va);
  sub_100D53CE4((uint64_t *)va1);
  sub_10000AE14((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_100D53CB8(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100D53CE4(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    double v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + _Block_object_dispose(va, 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + _Block_object_dispose(va, 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        double v5 = (uint64_t *)v3[1];
        sub_10000AE14((uint64_t)(v3 + 4));
        operator delete(v3);
        double v3 = v5;
      }

      while (v5 != a1);
    }
  }

float *sub_100D53D54(uint64_t a1, uint64_t a2)
{
  float v4 = sub_100D54EB8(a1);
  float v6 = v5;
  float v8 = v7;
  unint64_t v9 = 0LL;
  uint64_t v10 = (unsigned __int16 *)(a1 + 28);
  uint64_t v11 = (unsigned __int16 *)(a1 + 1076);
  double v12 = (unsigned __int16 *)(a1 + 2124);
  do
  {
    float v13 = *(float *)sub_100208A44(v10, v9);
    float v14 = (float)(v6 * *(float *)sub_100208A44(v11, v9)) + (float)(v13 * v4);
    double result = (float *)sub_100208A44(v12, v9);
    uint64_t v16 = *(unsigned __int16 *)(a2 + 18);
    unint64_t v17 = *(unsigned int *)(a2 + 20);
    uint64_t v18 = *(unsigned __int16 *)(a2 + 16);
    if (v18 + v16 >= v17) {
      uint64_t v19 = *(unsigned int *)(a2 + 20);
    }
    else {
      uint64_t v19 = 0LL;
    }
    *(float *)(a2 + 24 + 4 * (v18 + v16 - v19)) = v14 + (float)(*result * v8);
    if (v17 <= v16)
    {
      if (v18 + 1 < v17) {
        LOWORD(v17) = 0;
      }
      *(_WORD *)(a2 + 16) = v18 + 1 - v17;
    }

    else
    {
      *(_WORD *)(a2 + 1_Block_object_dispose(va, 8) = v16 + 1;
    }

    *(_BYTE *)a2 = 1;
    ++v9;
  }

  while (v9 != 256);
  return result;
}

float sub_100D53E58(uint64_t a1, int a2, int a3)
{
  unint64_t v5 = *(unsigned __int16 *)(a1 + 18);
  __chkstk_darwin(a1);
  float v8 = (char *)&v12 - v7;
  if (v5)
  {
    unint64_t v9 = 0LL;
    uint64_t v10 = (unsigned __int16 *)(v6 + 16);
    do
    {
      *(_DWORD *)&v8[4 * v9] = *(_DWORD *)sub_100208A44(v10, v9);
      ++v9;
    }

    while (v5 != v9);
  }

  sub_100749128(v8, 4uLL, v5, (uint64_t (*)(char *, char *))sub_100D54F78);
  return *(float *)&v8[4 * (((int)v5 - 1) * a2 / 100) + 4 * a3];
}

float sub_100D53F50(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 18);
  if (*(_WORD *)(a1 + 18))
  {
    unint64_t v4 = 0LL;
    unint64_t v5 = (unsigned __int16 *)(a1 + 16);
    float v6 = 0.0;
    do
      float v6 = v6 + vabds_f32(*(float *)sub_100208A44(v5, v4++), a2);
    while (v2 != v4);
  }

  else
  {
    float v6 = 0.0;
  }

  return v6 / (float)v2;
}

void sub_100D53FC4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float v6 = sub_1009AF760(*(_DWORD *)(a1 + 8), 0x80uLL, 0.39);
  int v7 = sub_1009AF58C(v6);
  float v8 = sub_1009AF760(*(_DWORD *)(a1 + 8), 0x80uLL, 4.29);
  int v9 = sub_1009AF58C(v8);
  LOBYTE(v21) = 1;
  v23[0] = 0x10000000000LL;
  int v22 = 1031798784;
  sub_100D54298((unsigned __int16 *)a1, (float *)&v18, (uint64_t)&v21);
  sub_100FBFFEC((uint64_t)v19, v20, (unsigned __int16 *)v23);
  float v17 = sub_1009AF7AC(v7, v9, (uint64_t)v20);
  *(float *)a3 = v17;
  if (a2) {
    *(float *)(a3 + 24) = sub_100D53E58((uint64_t)&v21, 90, 0);
  }
  uint64_t v21 = 0x10000000000LL;
  sub_100D54350((unsigned __int16 *)a1, (float *)&v18, (unsigned __int16 *)&v21);
  sub_100FBFFEC((uint64_t)v19, v20, (unsigned __int16 *)&v21);
  *(float *)v10.i32 = sub_1009AF7AC(v7, v9, (uint64_t)v20);
  int32x2_t v16 = v10;
  *(_DWORD *)(a3 + 4) = v10.i32[0];
  uint64_t v21 = 0x10000000000LL;
  sub_100D544C4((unsigned __int16 *)a1, (float *)&v18, (unsigned __int16 *)&v21);
  sub_100FBFFEC((uint64_t)v19, v20, (unsigned __int16 *)&v21);
  v11.f32[0] = sub_1009AF7AC(v7, v9, (uint64_t)v20);
  *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = v11.i32[0];
  v11.f32[1] = v17;
  *(int8x8_t *)(a3 + 12) = vand_s8( (int8x8_t)vdiv_f32((float32x2_t)vdup_lane_s32(v16, 0), v11),  (int8x8_t)vcgtz_f32(v11));
  sub_100FBFFEC((uint64_t)v19, &v21, (unsigned __int16 *)(a1 + 28));
  float v12 = sub_1009AF760(*(_DWORD *)(a1 + 8), 0x80uLL, 0.4);
  int v13 = sub_1009AF58C(v12);
  float v14 = sub_1009AF760(*(_DWORD *)(a1 + 8), 0x80uLL, 50.0);
  int v15 = sub_1009AF58C(v14);
  *(float *)(a3 + 20) = sub_1009AF7AC(v13, v15, (uint64_t)&v21);
}

float sub_100D54208(uint64_t a1, float32x2_t *a2)
{
  unint64_t v3 = 0LL;
  v9.i32[0] = sub_100D54EB8(a1);
  v9.i32[1] = v4;
  float v10 = v5;
  float v6 = 0.0;
  do
  {
    *(float *)v7.i32 = sub_1002B8AF0((uint64_t)&v9, v3);
    float v6 = v6 + (float)((float)(*(float *)v7.i32 * 0.25) * (float)(*(float *)v7.i32 * 0.25));
    ++v3;
  }

  while (v3 != 3);
  *(float *)v7.i32 = sqrtf(v6) * 4.0;
  *a2 = vdiv_f32(v9, (float32x2_t)vdup_lane_s32(v7, 0));
  *(float *)v7.i32 = v10 / *(float *)v7.i32;
  a2[1].i32[0] = v7.i32[0];
  return *(float *)v7.i32;
}

void sub_100D54298(unsigned __int16 *a1, float *a2, uint64_t a3)
{
  unint64_t v6 = 0LL;
  uint64_t v7 = a3 + 24;
  do
  {
    float v8 = sub_100D54F1C(a1, v6);
    float v11 = (float)((float)(v9 * a2[2]) + (float)(v10 * a2[1])) + (float)(v8 * *a2);
    uint64_t v12 = *(unsigned __int16 *)(a3 + 18);
    unint64_t v13 = *(unsigned int *)(a3 + 20);
    uint64_t v14 = *(unsigned __int16 *)(a3 + 16);
    if (v14 + v12 >= v13) {
      uint64_t v15 = *(unsigned int *)(a3 + 20);
    }
    else {
      uint64_t v15 = 0LL;
    }
    *(float *)(v7 + 4 * (v14 + v12 - v15)) = v11;
    if (v13 <= v12)
    {
      if (v14 + 1 < v13) {
        LOWORD(v13) = 0;
      }
      *(_WORD *)(a3 + 16) = v14 + 1 - v13;
    }

    else
    {
      *(_WORD *)(a3 + 1_Block_object_dispose(va, 8) = v12 + 1;
    }

    *(_BYTE *)a3 = 1;
    ++v6;
  }

  while (v6 != 256);
}

float *sub_100D54350(unsigned __int16 *a1, float *a2, unsigned __int16 *a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_10199E0B0);
  if ((v5 & 1) == 0)
  {
    uint64_t v27 = a2;
    int v28 = __cxa_guard_acquire(&qword_10199E0B0);
    a2 = v27;
    if (v28)
    {
      qword_10199E0A0 = 1065353216LL;
      dword_10199E0A8 = 0;
      __cxa_guard_release(&qword_10199E0B0);
      a2 = v27;
    }
  }

  unint64_t v6 = 0LL;
  float v8 = a2[1];
  float v7 = a2[2];
  float v9 = (float)(v8 * *(float *)&dword_10199E0A8) - (float)(v7 * *((float *)&qword_10199E0A0 + 1));
  float v10 = (float)(v7 * *(float *)&qword_10199E0A0) - (float)(*a2 * *(float *)&dword_10199E0A8);
  float v11 = (float)(*a2 * *((float *)&qword_10199E0A0 + 1)) - (float)(v8 * *(float *)&qword_10199E0A0);
  float v12 = (float)(v10 * v7) - (float)(v11 * v8);
  float v13 = (float)(v11 * *a2) - (float)(v9 * v7);
  float v14 = (float)(v9 * v8) - (float)(v10 * *a2);
  float v29 = v12;
  float v30 = v13;
  float v31 = v14;
  float v15 = 0.0;
  do
  {
    float v16 = sub_1002B8AF0((uint64_t)&v29, v6);
    float v15 = v15 + (float)((float)(v16 * 0.25) * (float)(v16 * 0.25));
    ++v6;
  }

  while (v6 != 3);
  unint64_t v17 = 0LL;
  float v18 = sqrtf(v15) * 4.0;
  float v19 = v29 / v18;
  float v20 = v30 / v18;
  float v21 = v31 / v18;
  do
  {
    float v22 = sub_100D54F1C(a1, v17);
    float v25 = (float)((float)(v21 * v23) + (float)(v24 * v20)) + (float)(v22 * v19);
    double result = (float *)sub_100208A44(a3, v17);
    float *result = v25;
    ++v17;
  }

  while (v17 != 256);
  return result;
}

float *sub_100D544C4(unsigned __int16 *a1, float *a2, unsigned __int16 *a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_10199E0C8);
  if ((v5 & 1) == 0)
  {
    float v23 = a2;
    int v24 = __cxa_guard_acquire(&qword_10199E0C8);
    a2 = v23;
    if (v24)
    {
      qword_10199E0B8 = 1065353216LL;
      dword_10199E0C0 = 0;
      __cxa_guard_release(&qword_10199E0C8);
      a2 = v23;
    }
  }

  unint64_t v6 = 0LL;
  float v8 = a2[1];
  float v7 = a2[2];
  float v9 = (float)(v7 * *(float *)&qword_10199E0B8) - (float)(*a2 * *(float *)&dword_10199E0C0);
  float v10 = (float)(*a2 * *((float *)&qword_10199E0B8 + 1)) - (float)(v8 * *(float *)&qword_10199E0B8);
  float v25 = (float)(v8 * *(float *)&dword_10199E0C0) - (float)(v7 * *((float *)&qword_10199E0B8 + 1));
  float v26 = v9;
  float v27 = v10;
  float v11 = 0.0;
  do
  {
    float v12 = sub_1002B8AF0((uint64_t)&v25, v6);
    float v11 = v11 + (float)((float)(v12 * 0.25) * (float)(v12 * 0.25));
    ++v6;
  }

  while (v6 != 3);
  unint64_t v13 = 0LL;
  float v14 = sqrtf(v11) * 4.0;
  float v15 = v25 / v14;
  float v16 = v26 / v14;
  float v17 = v27 / v14;
  do
  {
    float v18 = sub_100D54F1C(a1, v13);
    float v21 = (float)((float)(v17 * v19) + (float)(v20 * v16)) + (float)(v18 * v15);
    double result = (float *)sub_100208A44(a3, v13);
    float *result = v21;
    ++v13;
  }

  while (v13 != 256);
  return result;
}

double sub_100D54620(unsigned __int16 *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  v13[0] = 1;
  uint64_t v15 = 0x10000000000LL;
  int v14 = 1031798784;
  sub_100D53D54((uint64_t)a1, (uint64_t)v13);
  sub_100D54718((uint64_t)v13, a1, (uint64_t)&v10);
  __int128 v8 = v11;
  *a2 = v10;
  a2[1] = v8;
  a2[2] = *(_OWORD *)v12;
  *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)&v12[12];
  sub_100D54AC4((uint64_t)v13, (uint64_t)&v10);
  *(_OWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = v11;
  sub_100D54B88(a1, (uint64_t)&v10);
  double result = *(double *)&v10;
  *(_OWORD *)a3 = v10;
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

void sub_100D54718(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 44) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = -1;
  *(_DWORD *)(a3 + 16) = -1;
  float v6 = sub_100D54D78((uint64_t)a2);
  float v8 = v7;
  float v10 = v9;
  *(float *)a3 = sqrtf((float)(v9 * v9) + (float)((float)(v6 * v6) + (float)(v7 * v7)));
  sub_100FBFFE8(v46);
  sub_100FBFFEC((uint64_t)v46, v50, a2 + 14);
  sub_100FBFFEC((uint64_t)v46, v49, a2 + 538);
  sub_100FBFFEC((uint64_t)v46, v48, a2 + 1062);
  for (uint64_t i = 0LL; i != 128; i += 4LL)
    *(float32x4_t *)&v47[i] = vsqrtq_f32( vaddq_f32( vaddq_f32( vmulq_f32(*(float32x4_t *)&v50[i], *(float32x4_t *)&v50[i]),  vmulq_f32(*(float32x4_t *)&v49[i], *(float32x4_t *)&v49[i])),  vmulq_f32(*(float32x4_t *)&v48[i], *(float32x4_t *)&v48[i])));
  uint64_t v12 = 0LL;
  BOOL v13 = v8 <= v10 || v8 <= v6;
  int v14 = (float *)v48;
  if (!v13) {
    int v14 = (float *)v49;
  }
  if (v6 > v10 && v6 > v8) {
    int v14 = v50;
  }
  float v16 = 0.0;
  do
  {
    float v17 = v14[v12];
    if (v17 > v16)
    {
      *(float *)(a3 + 2_Block_object_dispose(va, 8) = v17;
      *(float *)(a3 + 32) = (float)(int)v12;
      float v16 = v17;
    }

    ++v12;
  }

  while (v12 != 128);
  uint64_t v18 = 0LL;
  float v19 = 0.0;
  int v20 = -1;
  float v21 = 0.0;
  do
  {
    float v22 = v47[v18];
    if (v22 > v21)
    {
      *(float *)(a3 + 4) = v22;
      *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = v18;
      int v20 = v18;
      float v21 = v22;
    }

    float v19 = v19 + v22;
    ++v18;
  }

  while (v18 != 128);
  float v23 = v19 * 0.0078125;
  *(float *)(a3 + 24) = v23;
  if (v23 != 0.0)
  {
    float v24 = v21 / v23;
    float v25 = v23 + v21;
    if (v24 > 2.0 && v25 > 0.125)
    {
      *(float *)(a3 + 12) = v21;
      *(_DWORD *)(a3 + 16) = v20;
    }
  }

  float v27 = 0.0;
  for (uint64_t j = 2LL; j != 15; ++j)
    float v27 = v27 + v47[j];
  *(float *)(a3 + 52) = v27;
  float v29 = 0.0;
  for (uint64_t k = 46LL; k != 128; ++k)
    float v29 = v29 + v47[k];
  float v31 = 0.0;
  *(float *)(a3 + 56) = (float)((float)(v47[0] + 0.0) + v47[1]) / v29;
  for (uint64_t m = 46LL; m != 128; ++m)
    float v31 = v31 + v47[m];
  uint64_t v33 = 0LL;
  *(float *)(a3 + 20) = v31;
  float v34 = 0.0;
  do
  {
    float v35 = v50[v33];
    if (v35 > v34)
    {
      *(float *)(a3 + 4_Block_object_dispose(va, 8) = v35;
      float v34 = v35;
    }

    float v36 = *(float *)&v49[v33];
    if (v36 > v34)
    {
      *(float *)(a3 + 4_Block_object_dispose(va, 8) = v36;
      float v34 = v36;
    }

    float v37 = *(float *)&v48[v33];
    if (v37 > v34)
    {
      *(float *)(a3 + 4_Block_object_dispose(va, 8) = v37;
      float v34 = v37;
    }

    ++v33;
  }

  while (v33 != 128);
  v50[0] = 0.0;
  sub_100FBFFEC((uint64_t)v46, v50, (unsigned __int16 *)(a1 + 16));
  uint64_t v38 = 0LL;
  float v39 = 0.0;
  do
  {
    float v40 = v50[v38];
    if (v40 > v34)
    {
      *(float *)(a3 + 4_Block_object_dispose(va, 8) = v40;
      float v34 = v40;
    }

    if (v40 > v39)
    {
      *(float *)(a3 + 40) = (float)(int)v38;
      *(float *)(a3 + 44) = v40;
      float v39 = v40;
    }

    ++v38;
  }

  while (v38 != 128);
  uint64_t v41 = 0LL;
  float v42 = 0.0;
  do
    float v42 = v42 + v50[v41++];
  while (v41 != 128);
  uint64_t v43 = 0LL;
  float v44 = 0.0;
  do
  {
    float v45 = v50[v43];
    if (v45 != 0.0) {
      float v44 = v44 - (float)(logf(v45 / v42) * (float)(v45 / v42));
    }
    ++v43;
  }

  while (v43 != 128);
  *(float *)(a3 + 36) = v44;
}

void sub_100D54AC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = sub_100D53E58(a1, 10, 0);
  float v4 = sub_100D53E58(a1, 50, 0);
  *(float *)(a2 + _Block_object_dispose(va, 8) = v4;
  if (*(_BYTE *)a1)
  {
    sub_100208C68(a1);
    float v5 = *(float *)(a1 + 4);
    if (*(_BYTE *)a1) {
      sub_100208C68(a1);
    }
  }

  else
  {
    float v5 = *(float *)(a1 + 4);
  }

  float v6 = sqrtf(*(float *)(a1 + 8)) / v5;
  if (v5 == 0.0) {
    float v6 = 1000.0;
  }
  *(float *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)a2 = sub_100D54DE0(a1, v4);
  *(float *)(a2 + 16) = sub_100D53F50(a1, v4);
}

void sub_100D54B88(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0LL;
  float v5 = a1 + 14;
  float v6 = a1 + 538;
  float v7 = a1 + 1062;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  do
  {
    __int128 v11 = (float *)sub_100208A44(v5, v4);
    float v8 = v8 + (float)(*v11 * *v11);
    uint64_t v12 = (float *)sub_100208A44(v6, v4);
    float v9 = v9 + (float)(*v12 * *v12);
    BOOL v13 = (float *)sub_100208A44(v7, v4);
    float v10 = v10 + (float)(*v13 * *v13);
    ++v4;
  }

  while (v4 != 256);
  if (v8 <= v9 || v8 <= v10)
  {
    if (v9 <= v8 || v9 <= v10) {
      uint64_t v16 = (uint64_t)(a1 + 1054);
    }
    else {
      uint64_t v16 = (uint64_t)(a1 + 530);
    }
  }

  else
  {
    uint64_t v16 = (uint64_t)(a1 + 6);
  }

  *(float *)a2 = sub_100D53E58(v16, 25, 0);
  float v17 = sub_100D53E58(v16, 90, 0);
  if (v9 <= v10) {
    float v18 = v10;
  }
  else {
    float v18 = v9;
  }
  if (v8 > v18) {
    float v18 = v8;
  }
  *(float *)(a2 + 4) = v17;
  *(float *)(a2 + _Block_object_dispose(va, 8) = v18;
  sub_100FBFFE8(v27);
  sub_100FBFFEC((uint64_t)v27, v28, (unsigned __int16 *)(v16 + 16));
  uint64_t v19 = 0LL;
  *(_DWORD *)(a2 + 12) = 0;
  float v20 = 0.0;
  do
  {
    float v21 = v28[v19];
    if (v21 > v20)
    {
      *(float *)(a2 + 12) = (float)(int)v19;
      float v20 = v21;
    }

    ++v19;
  }

  while (v19 != 128);
  uint64_t v22 = 0LL;
  float v23 = 0.0;
  do
    float v23 = v23 + v28[v22++];
  while (v22 != 128);
  uint64_t v24 = 0LL;
  float v25 = 0.0;
  do
  {
    float v26 = v28[v24];
    if (v26 != 0.0) {
      float v25 = v25 - (float)(logf(v26 / v23) * (float)(v26 / v23));
    }
    ++v24;
  }

  while (v24 != 128);
  *(float *)(a2 + 16) = v25;
}

float sub_100D54D78(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v2 = a1 + 12;
  if (v3) {
    sub_100208C68(v2);
  }
  float v4 = *(float *)(a1 + 20);
  if (*(_BYTE *)(a1 + 1060)) {
    sub_100208C68(a1 + 1060);
  }
  if (*(_BYTE *)(a1 + 2108)) {
    sub_100208C68(a1 + 2108);
  }
  return sqrtf(v4);
}

float sub_100D54DE0(uint64_t a1, float a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a1 + 18);
  float v3 = 0.0;
  if (v2 >= 2)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = (v2 - 1);
    float v7 = (unsigned __int16 *)(a1 + 16);
    do
    {
      if (*(float *)sub_100208A44(v7, v5) > a2 && *(float *)sub_100208A44(v7, v5 + 1) <= a2)
      {
        float v3 = v3 + 1.0;
        ++v5;
      }

      else
      {
        float v8 = (float *)sub_100208A44(v7, v5++);
      }
    }

    while (v5 != v6);
  }

  return v3;
}

float sub_100D54EB8(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v2 = a1 + 12;
  if (v3) {
    sub_100208C68(v2);
  }
  float v4 = *(float *)(a1 + 16);
  if (*(_BYTE *)(a1 + 1060)) {
    sub_100208C68(a1 + 1060);
  }
  if (*(_BYTE *)(a1 + 2108)) {
    sub_100208C68(a1 + 2108);
  }
  return v4;
}

float sub_100D54F1C(unsigned __int16 *a1, unint64_t a2)
{
  float v4 = *(float *)sub_100208A44(a1 + 14, a2);
  sub_100208A44(a1 + 538, a2);
  sub_100208A44(a1 + 1062, a2);
  return v4;
}

BOOL sub_100D54F78(float *a1, float *a2)
{
  return *a1 > *a2;
}

uint64_t sub_100D54F8C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101881750;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  id v11 = a2;
  *(void *)(a1 + 56) = off_10182F180;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 40) = 0LL;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  uint64_t v12 = operator new(0x20uLL);
  v12[1] = 0LL;
  _BYTE v12[2] = 0LL;
  *uint64_t v12 = off_10182F1B8;
  *(void *)(a1 + 72) = v12;
  *((_DWORD *)v12 + 6) = 31337;
  *(void *)(a1 + 64) = v12 + 3;
  *(_BYTE *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  uint64_t v13 = mach_continuous_time();
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = a3;
  *(_BYTE *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = -1LL;
  *(_BYTE *)(a1 + 160) = 0;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  int v14 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonIdentifiableClient(ctor)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v14, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018817D0);
  }
  uint64_t v15 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 16);
    *(_DWORD *)std::string buf = 68289794;
    int v30 = 0;
    __int16 v31 = 2082;
    BOOL v32 = "";
    __int16 v33 = 2082;
    float v34 = "activity";
    __int16 v35 = 2114;
    uint64_t v36 = v16;
    __int16 v37 = 2050;
    uint64_t v38 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLDaemonIdentifiableClient(ctor), event:%{public, location:escape_only}s, ClientKey Path:%{public, location:escape_only}@, this:%{public}p}",  buf,  0x30u);
  }

  *(_BYTE *)(a1 + 80) = objc_msgSend( objc_msgSend(a4, "objectForKey:", @"SDKAtLeast2024"),  "BOOLValue");
  sub_100544758(*(id **)(a1 + 24), *(void *)(a1 + 16));
  float v17 = sub_100544790(*(void *)(a1 + 24), *(void *)(a1 + 16), &xmmword_101339630);
  *(void *)(a1 + 40) = v17;
  float v18 = v17;
  id v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  *(void *)(a1 + 176) = v19;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  void v27[2] = sub_100D553E0;
  v27[3] = &unk_10181D3D0;
  v27[4] = a1;
  [v19 setHandler:v27];
  uint64_t v20 = *(void *)(a1 + 128);
  if (v20)
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    void v26[2] = sub_100D55514;
    v26[3] = &unk_10182B3E0;
    v26[4] = a1;
    CLConnection::setDefaultMessageHandler(v20, v26);
    CLConnection::start(*(CLConnection **)(a1 + 128));
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018817D0);
    }
    float v21 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(const char **)(a1 + 16);
      *(_DWORD *)std::string buf = 68289538;
      int v30 = 0;
      __int16 v31 = 2082;
      BOOL v32 = "";
      __int16 v33 = 2114;
      float v34 = v22;
      __int16 v35 = 2050;
      uint64_t v36 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLDaemonIdentifiableClient(ctor) #dic butterfly is created, ClientKeyPath:%{public, location:escape_only}@, this:%{public}p}",  buf,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
    }

    float v23 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      uint64_t v24 = *(const char **)(a1 + 16);
      *(_DWORD *)std::string buf = 68289538;
      int v30 = 0;
      __int16 v31 = 2082;
      BOOL v32 = "";
      __int16 v33 = 2114;
      float v34 = v24;
      __int16 v35 = 2050;
      uint64_t v36 = a1;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLDaemonIdentifiableClient(ctor) #dic butterfly is created",  "{msg%{public}.0s:CLDaemonIdentifiableClient(ctor) #dic butterfly is created, ClientKeyPath:%{public, location:escape_only}@, this:%{public}p}",  buf,  0x26u);
    }
  }

  sub_100566538(*(void *)(a1 + 24), *(void **)(a1 + 16), 0, 0, 0, *(_BYTE *)(a1 + 80) == 0, 1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_100D553B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
}

void sub_100D553E0(uint64_t a1)
{
}

void sub_100D553E8(uint64_t a1)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018817D0);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    v5[0] = 68289538;
    v5[1] = 0;
    __int16 v6 = 2082;
    float v7 = "";
    __int16 v8 = 2114;
    uint64_t v9 = v3;
    __int16 v10 = 2050;
    uint64_t v11 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#dic procesAssertion timer fired, ClientKeyPath:%{public, location:escape_only}@, t his:%{public}p}",  (uint8_t *)v5,  0x26u);
  }

  [*(id *)(a1 + 176) setNextFireDelay:1.79769313e308];
  float v4 = *(void **)(a1 + 168);
  if (v4)
  {
    [v4 invalidate];

    *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  }

BOOL sub_100D55504(uint64_t a1)
{
  return *(void *)(a1 + 128) == 0LL;
}

void sub_100D55514(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  __int16 v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16LL))(v2, &v9);
  __int16 v6 = v10;
  if (v10)
  {
    float v7 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_100D555A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100D555B4(uint64_t a1)
{
  *(void *)a1 = off_101881750;
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018817D0);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:~CLDaemonIdentifiableClient(dtor), ClientKeyPath:%{public, location:escape_only}@,  this:%{public}p}",  (uint8_t *)v7,  0x26u);
  }

  sub_100566538(*(void *)(a1 + 24), *(void **)(a1 + 16), 0, 0, 0, *(_BYTE *)(a1 + 80) == 0, 0);
  float v4 = *(void **)(a1 + 176);
  if (v4)
  {
    [v4 invalidate];

    *(void *)(a1 + 176) = 0LL;
  }

  unint64_t v5 = *(void **)(a1 + 168);
  if (v5)
  {
    [v5 invalidate];

    *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  }

  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_100D45388((void ***)(a1 + 144), 0LL);
  sub_1002B729C((void *)(a1 + 56));
  return a1;
}

void sub_100D55738(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100D55748(uint64_t a1)
{
  double v1 = (void *)sub_100D555B4(a1);
  operator delete(v1);
}

NSMutableDictionary *sub_100D5575C(CLConnection **a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  (*((uint64_t (**)(CLConnection **))*a1 + 5))(a1));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  -[CLConnection clientKey](a1[2], "clientKey"),  @"ClientKeyPath");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", a1[5]),  @"AuthContext");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (*((uint64_t (**)(CLConnection **))*a1 + 3))(a1)),  @"Type");
  uint64_t v3 = (*((uint64_t (**)(CLConnection **))*a1 + 5))(a1);
  if (v3) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v3,  @"RehydrationPayload");
  }
  float v4 = a1[16];
  if (v4)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", CLConnection::getRemotePid(v4)),  @"PID");
    CLConnection::getAuditToken(a1[16]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  -[CLClientKeyPath clientKey](sub_10055FF18(&v6), "clientKey"),  @"NaturalConnectedIdentity");
  }

  return v2;
}

void sub_100D558A8(id *a1, void *a2)
{
  unsigned __int8 v4 = [a1[5] isEqual:a2];
  id v5 = a2;

  a1[5] = a2;
  if ((v4 & 1) == 0) {
    (*((void (**)(id *))*a1 + 7))(a1);
  }
}

void sub_100D55910(uint64_t a1)
{
  *(_BYTE *)(a1 + 160) = 0;
}

void sub_100D55940(uint64_t a1, double a2)
{
  id v4 = [*(id *)(a1 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768LL;
  _DWORD v7[2] = sub_100D55A24;
  v7[3] = &unk_101860EC8;
  _DWORD v7[4] = a1;
  v7[5] = v9;
  __int16 v8 = v10;
  if (v10)
  {
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr((unint64_t *)p_shared_weak_owners);
    while (__stxr(v6 + 1, (unint64_t *)p_shared_weak_owners));
  }

  [v4 afterInterval:v7 async:a2];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_100D559F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  float v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D55A24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    if (*(void *)(v1 + 8) != -1LL) {
      sub_100559024(*(void *)(*(void *)(a1 + 32) + 24LL), *(void *)(a1 + 32));
    }
  }

id sub_100D55A48(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 168))
  {
    else {
      unint64_t v6 = (uint64_t *)*a2;
    }
    int v28 = +[RBSDomainAttribute attributeWithDomain:name:]( &OBJC_CLASS___RBSDomainAttribute,  "attributeWithDomain:name:",  @"com.apple.locationd",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
    float v7 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v28, 1LL);
    id v8 = objc_alloc(&OBJC_CLASS___RBSAssertion);
    else {
      uint64_t v9 = (uint64_t *)*a3;
    }
    id v10 = objc_msgSend( v8,  "initWithExplanation:target:attributes:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9),  +[RBSTarget targetWithPid:]( RBSTarget,  "targetWithPid:",  CLConnection::getRemotePid(*(CLConnection **)(a1 + 128))),  v7);
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = v10;
    uint64_t v17 = 0LL;
    if ([v10 acquireWithError:&v17])
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
      uint64_t v11 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 16);
        *(_DWORD *)std::string buf = 68289538;
        int v19 = 0;
        __int16 v20 = 2082;
        float v21 = "";
        __int16 v22 = 2114;
        uint64_t v23 = v12;
        __int16 v24 = 2050;
        uint64_t v25 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dic processAssertion acquired, ClientKeyPath:%{public, location:escape_only}@,  this:%{public}p}",  buf,  0x26u);
      }
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018817F0);
      }
      uint64_t v13 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        uint64_t v14 = *(void *)(a1 + 16);
        *(_DWORD *)std::string buf = 68289794;
        int v19 = 0;
        __int16 v20 = 2082;
        float v21 = "";
        __int16 v22 = 2114;
        uint64_t v23 = v14;
        __int16 v24 = 2050;
        uint64_t v25 = a1;
        __int16 v26 = 2114;
        uint64_t v27 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#dic couldn't initialize process assertion, ClientKeyPath:%{public, location:esca pe_only}@, this:%{public}p, error:%{public, location:escape_only}@}",  buf,  0x30u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018817F0);
        }
      }

      uint64_t v15 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        uint64_t v16 = *(void *)(a1 + 16);
        *(_DWORD *)std::string buf = 68289794;
        int v19 = 0;
        __int16 v20 = 2082;
        float v21 = "";
        __int16 v22 = 2114;
        uint64_t v23 = v16;
        __int16 v24 = 2050;
        uint64_t v25 = a1;
        __int16 v26 = 2114;
        uint64_t v27 = v17;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dic couldn't initialize process assertion",  "{msg%{public}.0s:#dic couldn't initialize process assertion, ClientKeyPath:%{public, location:esca pe_only}@, this:%{public}p, error:%{public, location:escape_only}@}",  buf,  0x30u);
      }
    }
  }

  return [*(id *)(a1 + 176) setNextFireDelay:10.0];
}

void sub_100D55D8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  id v10 = (const std::string *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  if (!std::string::compare(v10, "kCLConnectionMessageDiagnostics"))
  {
    uint64_t v14 = (uint64_t *)(a1 + 128);
    if (*(void *)(a1 + 128))
    {
      goto LABEL_13;
    }

void sub_100D56504( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

void sub_100D56550(void *a1)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018817D0);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[2];
    BOOL v4 = a1[16] == 0LL;
    int v13 = 68289794;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2114;
    uint64_t v18 = v3;
    __int16 v19 = 2050;
    os_log_type_t v20 = a1;
    __int16 v21 = 1026;
    BOOL v22 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dic handleDisconnection, ClientKeyPath:%{public, location:escape_only}@, this: %{public}p, isDisconnected:%{public}hhd}",  (uint8_t *)&v13,  0x2Cu);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018817D0);
    }
  }

  id v5 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v6 = a1[2];
    BOOL v7 = a1[16] == 0LL;
    int v13 = 68289794;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2114;
    uint64_t v18 = v6;
    __int16 v19 = 2050;
    os_log_type_t v20 = a1;
    __int16 v21 = 1026;
    BOOL v22 = v7;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dic handleDisconnection",  "{msg%{public}.0s:#dic handleDisconnection, ClientKeyPath:%{public, location:escape_only}@, this: %{public}p, isDisconnected:%{public}hhd}",  (uint8_t *)&v13,  0x2Cu);
  }

  id v8 = (CLConnection *)a1[16];
  if (v8)
  {
    CLConnection::deferredDelete(v8);
    a1[16] = 0LL;
    a1[14] = mach_continuous_time();
  }

  if ((*(unsigned int (**)(void *))(*a1 + 64LL))(a1))
  {
    sub_100D55940((uint64_t)a1, 0.0);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018817D0);
    }
    uint64_t v9 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[2];
      int v13 = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2114;
      uint64_t v18 = v10;
      __int16 v19 = 2050;
      os_log_type_t v20 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dic handleDisconnection - destruction deferred - becoming a butterfly, ClientKeyPath :%{public, location:escape_only}@, this:%{public}p}",  (uint8_t *)&v13,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
    }

    uint64_t v11 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      uint64_t v12 = a1[2];
      int v13 = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2114;
      uint64_t v18 = v12;
      __int16 v19 = 2050;
      os_log_type_t v20 = a1;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dic handleDisconnection - destruction deferred - becoming a butterfly",  "{msg%{public}.0s:#dic handleDisconnection - destruction deferred - becoming a butterfly, ClientKeyPath :%{public, location:escape_only}@, this:%{public}p}",  (uint8_t *)&v13,  0x26u);
    }
  }

uint64_t sub_100D56894(uint64_t result)
{
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = 1;
  return result;
}

uint64_t sub_100D568A0(double a1, double a2)
{
  uint64_t result = 0LL;
  if (a2 >= -180.0 && a1 <= 90.0 && a1 >= -90.0 && a2 <= 180.0)
  {
    BOOL v3 = fabs(a1) >= 0.0000001;
    return fabs(a2) >= 0.0000001 || v3;
  }

  return result;
}

void sub_100D56908(uint64_t a1)
{
  *(void *)(a1 + 120) = mach_continuous_time();
  sub_1002B68E8(a1 + 56, &v7);
  id v2 = [*(id *)(a1 + 32) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768LL;
  _DWORD v5[2] = sub_100D569F0;
  v5[3] = &unk_101860EC8;
  v5[4] = a1;
  v5[5] = v7;
  uint64_t v6 = v8;
  if (v8)
  {
    p_shared_weak_owners = &v8->__shared_weak_owners_;
    do
      unint64_t v4 = __ldxr((unint64_t *)p_shared_weak_owners);
    while (__stxr(v4 + 1, (unint64_t *)p_shared_weak_owners));
  }

  [v2 afterInterval:v5 async:5.0];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_100D569C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D569F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100D56A58;
  void v3[3] = &unk_10181D3D0;
  void v3[4] = v1;
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    if (*(void *)(v2 + 8) != -1LL) {
      sub_100D56A58((uint64_t)v3);
    }
  }

void sub_100D56A58(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = mach_continuous_time();
  uint64_t v3 = v1[15];
  if (v3)
  {
    BOOL v4 = v2 >= v3;
    unint64_t v5 = v2 - v3;
    if (v4)
    {
      double v16 = sub_101171C7C(v5);
      if (v16 >= 3.0)
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_1018817D0);
        }
        __int16 v21 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = v1[2];
          int v23 = 68289538;
          int v24 = 0;
          __int16 v25 = 2082;
          __int16 v26 = "";
          __int16 v27 = 2114;
          uint64_t v28 = v22;
          __int16 v29 = 2050;
          double v30 = *(double *)&v1;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dic retirement completed, ClientKeyPath:%{public, location:escape_only}@, th is:%{public}p}",  (uint8_t *)&v23,  0x26u);
        }

        sub_100559024(v1[3], (unint64_t)v1);
      }

      else
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_1018817D0);
        }
        __int16 v17 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
        {
          uint64_t v18 = v1[2];
          int v23 = 68289794;
          int v24 = 0;
          __int16 v25 = 2082;
          __int16 v26 = "";
          __int16 v27 = 2114;
          uint64_t v28 = v18;
          __int16 v29 = 2050;
          double v30 = v16;
          __int16 v31 = 2050;
          BOOL v32 = v1;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#dic retirement tickstamp is too early, skip retirement, ClientKeyPath:%{public , location:escape_only}@, timeDifferenceInSeconds:%{public}.6f, this:%{public}p}",  (uint8_t *)&v23,  0x30u);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_1018817D0);
          }
        }

        uint64_t v19 = qword_101934978;
        if (os_signpost_enabled((os_log_t)qword_101934978))
        {
          uint64_t v20 = v1[2];
          int v23 = 68289794;
          int v24 = 0;
          __int16 v25 = 2082;
          __int16 v26 = "";
          __int16 v27 = 2114;
          uint64_t v28 = v20;
          __int16 v29 = 2050;
          double v30 = v16;
          __int16 v31 = 2050;
          BOOL v32 = v1;
          uint64_t v10 = "#dic retirement tickstamp is too early, skip retirement";
          uint64_t v11 = "{msg%{public}.0s:#dic retirement tickstamp is too early, skip retirement, ClientKeyPath:%{pu"
                "blic, location:escape_only}@, timeDifferenceInSeconds:%{public}.6f, this:%{public}p}";
          uint64_t v12 = (os_log_s *)v19;
          uint32_t v13 = 48;
          goto LABEL_22;
        }
      }
    }

    else
    {
      v1[15] = 0LL;
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
      uint64_t v6 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        uint64_t v7 = v1[2];
        int v23 = 68289538;
        int v24 = 0;
        __int16 v25 = 2082;
        __int16 v26 = "";
        __int16 v27 = 2114;
        uint64_t v28 = v7;
        __int16 v29 = 2050;
        double v30 = *(double *)&v1;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#dic #error retirement tickstamp should not be greater than 'now', ClientKeyPath: %{public, location:escape_only}@, this:%{public}p}",  (uint8_t *)&v23,  0x26u);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_1018817D0);
        }
      }

      uint64_t v8 = qword_101934978;
      if (os_signpost_enabled((os_log_t)qword_101934978))
      {
        uint64_t v9 = v1[2];
        int v23 = 68289538;
        int v24 = 0;
        __int16 v25 = 2082;
        __int16 v26 = "";
        __int16 v27 = 2114;
        uint64_t v28 = v9;
        __int16 v29 = 2050;
        double v30 = *(double *)&v1;
        uint64_t v10 = "#dic #error retirement tickstamp should not be greater than 'now'";
        uint64_t v11 = "{msg%{public}.0s:#dic #error retirement tickstamp should not be greater than 'now', ClientKeyPat"
              "h:%{public, location:escape_only}@, this:%{public}p}";
        uint64_t v12 = (os_log_s *)v8;
        uint32_t v13 = 38;
LABEL_22:
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v10,  v11,  (uint8_t *)&v23,  v13);
      }
    }
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018817D0);
    }
    int v14 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = v1[2];
      int v23 = 68289538;
      int v24 = 0;
      __int16 v25 = 2082;
      __int16 v26 = "";
      __int16 v27 = 2114;
      uint64_t v28 = v15;
      __int16 v29 = 2050;
      double v30 = *(double *)&v1;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#dic abandoning retirement because client has already stopped running, ClientKeyPath :%{public, location:escape_only}@, this:%{public}p}",  (uint8_t *)&v23,  0x26u);
    }
  }

uint64_t sub_100D56EEC(uint64_t result)
{
  *(void *)(result + 120) = 0LL;
  return result;
}

uint64_t sub_100D56EF4(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100D56F50;
  void v3[3] = &unk_1018486F8;
  void v3[4] = a1;
  int v4 = a2;
  return AnalyticsSendEventLazy(@"com.apple.locationd.daemonidentifiableclient-lifecycle", v3);
}

NSDictionary *sub_100D56F50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = mach_continuous_time();
  unint64_t v4 = *(void *)(v2 + 96);
  double v5 = -1.0;
  double v6 = -1.0;
  if (v3 >= v4) {
    double v6 = sub_101171C7C(v3 - v4);
  }
  unint64_t v7 = *(void *)(v2 + 112);
  if (v3 >= v7)
  {
    double v5 = sub_101171C7C(v3 - v7);
    unint64_t v7 = *(void *)(v2 + 112);
    if (!v7)
    {
      double v12 = -1.0;
      goto LABEL_12;
    }
  }

  unint64_t v8 = *(void *)(v2 + 104);
  if (v8 <= v7)
  {
    unint64_t v14 = *(void *)(v2 + 8);
    double v12 = -1.0;
    unint64_t v13 = v14 - v7;
    if (v14 > v7)
    {
      double v9 = -1.0;
      goto LABEL_10;
    }

uint64_t sub_100D5721C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  if (!v2) {
    sub_10126D504();
  }
  return CLConnection::isEntitled(v2, a2);
}

uint64_t sub_100D57238(uint64_t a1, int a2)
{
  uint64_t v4 = 7LL;
  if (a2 == 7) {
    uint64_t v4 = 1031LL;
  }
  if (a2 == 9) {
    uint64_t v5 = 2055LL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = (unint64_t)[*(id *)(a1 + 40) diagnosticMask] & v5;
  if (sub_1001B9A1C())
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018817D0);
    }
    unint64_t v7 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 16);
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = v8;
      __int16 v23 = 2050;
      uint64_t v24 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#dic failureReason sharing mode enabled, ClientKeyPath:%{public, location:escape_on ly}@, this:%{public}p}",  (uint8_t *)&v17,  0x26u);
    }

    v6 |= 4uLL;
  }

  if ((sub_100546D94(*(void *)(a1 + 24), *(void *)(a1 + 16)) & 1) != 0
    || [*(id *)(a1 + 16) isAuthLimited])
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018817D0);
    }
    double v9 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 16);
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = v10;
      __int16 v23 = 2050;
      uint64_t v24 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Warning #dic #AutoPrompt System services may not request authorization, ClientKeyPath :%{public, location:escape_only}@, this:%{public}p}",  (uint8_t *)&v17,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
    }

    unint64_t v11 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      uint64_t v12 = *(void *)(a1 + 16);
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = v12;
      __int16 v23 = 2050;
      uint64_t v24 = a1;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Warning #dic #AutoPrompt System services may not request authorization",  "{msg%{public}.0s:Warning #dic #AutoPrompt System services may not request authorization, ClientKeyPath :%{public, location:escape_only}@, this:%{public}p}",  (uint8_t *)&v17,  0x26u);
    }

    v6 |= 1uLL;
  }

  else {
    uint64_t v13 = v6 | 0x10;
  }
  if (sub_10057D1EC(*(void *)(a1 + 24)) && !sub_10053C998(*(void **)(a1 + 16)))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018817D0);
    }
    unint64_t v14 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = v15;
      __int16 v23 = 2050;
      uint64_t v24 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dic #AuthPrompt Authorization request ignored, at lock-screen, ClientKeyPath:%{pub lic, location:escape_only}@, this:%{public}p}",  (uint8_t *)&v17,  0x26u);
    }

    v13 |= 4uLL;
  }

  if (a2 == 7
    && [*(id *)(a1 + 40) registrationResult] == 4
    && [*(id *)(a1 + 40) transientAwareRegistrationResult] == 1)
  {
    return v13 | 4;
  }

  return v13;
}

void sub_100D575DC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if ((_os_feature_enabled_impl("CoreLocation", "CLAutoPrompt") & 1) != 0)
  {
    if (sub_10054668C(*(void *)(a1 + 24)))
    {
      double v6 = sub_10057D1E0(*(void *)(a1 + 24));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "currentLatchedAbsoluteTimestamp");
      double v8 = v7 - v6;
      if (v8 < 900.0)
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_1018817D0);
        }
        uint64_t v9 = qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          sub_10054669C(*(void *)(a1 + 24));
          unint64_t v10 = sub_10054669C(*(void *)(a1 + 24));
          id v11 = sub_1005466B4(*(void *)(a1 + 24));
          unint64_t v12 = *(void *)(a1 + 16);
          *(_DWORD *)std::string buf = 68290306;
          int v39 = 0;
          __int16 v40 = 2082;
          double v41 = "";
          __int16 v42 = 2050;
          unint64_t v43 = v10;
          __int16 v44 = 2114;
          id v45 = v11;
          __int16 v46 = 2114;
          unint64_t v47 = v12;
          __int16 v48 = 2050;
          uint64_t v49 = a1;
          __int16 v50 = 2050;
          *(void *)&double v51 = (uint64_t)v8;
          uint64_t v13 = "{msg%{public}.0s:#dic #AutoPrompt ignored inflight request found, existingRequestType:%{publ"
                "ic, location:CLClientManager_Type::AuthorizationRequestType}lld, existingClientKey:%{public, locatio"
                "n:escape_only}@, ClientKeyPath:%{public, location:escape_only}@, this:%{public}p, Inflight"
                "RequestSquattingDurationSeconds:%{public}ld}";
          unint64_t v14 = (os_log_s *)v9;
          uint32_t v15 = 68;
LABEL_30:
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
          return;
        }

        return;
      }

      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
      __int16 v19 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
      {
        unint64_t v20 = *(void *)(a1 + 16);
        id v21 = sub_1005466B4(*(void *)(a1 + 24));
        sub_10054669C(*(void *)(a1 + 24));
        unsigned int v22 = sub_10054669C(*(void *)(a1 + 24));
        *(_DWORD *)std::string buf = 68290306;
        int v39 = 0;
        __int16 v40 = 2082;
        double v41 = "";
        __int16 v42 = 2114;
        unint64_t v43 = v20;
        __int16 v44 = 2050;
        id v45 = (id)a1;
        __int16 v46 = 2114;
        unint64_t v47 = (unint64_t)v21;
        __int16 v48 = 2050;
        uint64_t v49 = v22;
        __int16 v50 = 2050;
        double v51 = v8 / 60.0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#dic #AutoPrompt Inflight auth-request squatting for more than 15 mins. TearingDown, ClientKeyPath:%{public, location:escape_only}@, this:%{public}p, squattingClient:%{public, loc ation:escape_only}@, squattingRequestType:%{public, location:CLClientManager_Type::AuthorizationRequestTyp e}lld, InflightRequestSquattingDurationMinutes:%{public}.2f}",  buf,  0x44u);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_1018817D0);
        }
      }

      __int16 v23 = (os_log_s *)qword_101934978;
      if (os_signpost_enabled((os_log_t)qword_101934978))
      {
        unint64_t v24 = *(void *)(a1 + 16);
        id v25 = sub_1005466B4(*(void *)(a1 + 24));
        sub_10054669C(*(void *)(a1 + 24));
        unsigned int v26 = sub_10054669C(*(void *)(a1 + 24));
        *(_DWORD *)std::string buf = 68290306;
        int v39 = 0;
        __int16 v40 = 2082;
        double v41 = "";
        __int16 v42 = 2114;
        unint64_t v43 = v24;
        __int16 v44 = 2050;
        id v45 = (id)a1;
        __int16 v46 = 2114;
        unint64_t v47 = (unint64_t)v25;
        __int16 v48 = 2050;
        uint64_t v49 = v26;
        __int16 v50 = 2050;
        double v51 = v8 / 60.0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dic #AutoPrompt Inflight auth-request squatting for more than 15 mins. TearingDown",  "{msg%{public}.0s:#dic #AutoPrompt Inflight auth-request squatting for more than 15 mins. TearingDown, ClientKeyPath:%{public, location:escape_only}@, this:%{public}p, squattingClient:%{public, loc ation:escape_only}@, squattingRequestType:%{public, location:CLClientManager_Type::AuthorizationRequestTyp e}lld, InflightRequestSquattingDurationMinutes:%{public}.2f}",  buf,  0x44u);
      }

      sub_100579358(*(void *)(a1 + 24), 1, 0LL);
    }

    if (*a2 == 7)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018817F0);
      }
      __int16 v27 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v28 = *(void *)(a1 + 16);
        *(_DWORD *)std::string buf = 68289538;
        int v39 = 0;
        __int16 v40 = 2082;
        double v41 = "";
        __int16 v42 = 2114;
        unint64_t v43 = v28;
        __int16 v44 = 2050;
        id v45 = (id)a1;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#AutoPrompt AuthorizationUpgradeAvailable updated, Client:%{public, location:esca pe_only}@, self:%{public}p}",  buf,  0x26u);
      }

      sub_10057D734(*(void *)(a1 + 24), *(void *)(a1 + 16));
    }

    __int16 v29 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  a3);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"isAutoPrompting");
    __int16 v31 = *(void **)(a1 + 16);
    uint64_t v30 = *(void *)(a1 + 24);
    id v32 = [v31 bundleId];
    sub_1005859E4((uint64_t)v37, (uint64_t)a2);
    sub_10054878C(v30, (uint64_t)v31, v32, (uint64_t)v37, (uint64_t)v29);
    sub_1005858A0((uint64_t)v37);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018817F0);
    }
    uint64_t v33 = qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v34 = *(void **)(a1 + 16);
      id v35 = objc_msgSend(objc_msgSend(v34, "bundleId"), "UTF8String");
      uint64_t v36 = *a2;
      *(_DWORD *)std::string buf = 68290050;
      int v39 = 0;
      __int16 v40 = 2082;
      double v41 = "";
      __int16 v42 = 2114;
      unint64_t v43 = (unint64_t)v34;
      __int16 v44 = 2050;
      id v45 = (id)a1;
      __int16 v46 = 2082;
      unint64_t v47 = (unint64_t)v35;
      __int16 v48 = 2050;
      uint64_t v49 = v36;
      uint64_t v13 = "{msg%{public}.0s:#AutoPrompt posted, Client:%{public, location:escape_only}@, self:%{publi"
            "c}p, CKP.BundleId:%{public, location:escape_only}s, type:%{public, location:CLClientManager_Type::"
            "AuthorizationRequestType}lld}";
      unint64_t v14 = (os_log_s *)v33;
      uint32_t v15 = 58;
      goto LABEL_30;
    }

    return;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018817F0);
  }
  uint64_t v16 = qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v17 = *(void *)(a1 + 16);
    unint64_t v18 = *a2;
    *(_DWORD *)std::string buf = 68289794;
    int v39 = 0;
    __int16 v40 = 2082;
    double v41 = "";
    __int16 v42 = 2114;
    unint64_t v43 = v17;
    __int16 v44 = 2050;
    id v45 = (id)a1;
    __int16 v46 = 2050;
    unint64_t v47 = v18;
    uint64_t v13 = "{msg%{public}.0s:#dic #AutoPrompt AutoPrompt disabled, Client:%{public, location:escape_only}@, "
          "this:%{public}p, type:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
    unint64_t v14 = (os_log_s *)v16;
    uint32_t v15 = 48;
    goto LABEL_30;
  }

void sub_100D57BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100D57C18(uint64_t a1)
{
  if (!*(void *)(a1 + 128)) {
    return 0LL;
  }
  if (([*(id *)(a1 + 40) isAuthorizedForServiceType:20] & 1) != 0
    || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1), (_DWORD)result))
  {
    if ((_os_feature_enabled_impl("CoreLocation", "CLAutoPrompt") & 1) != 0) {
      return 1LL;
    }
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018817F0);
    }
    uint64_t v3 = (os_log_s *)qword_101934988;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      double v8 = "";
      __int16 v9 = 2114;
      uint64_t v10 = v5;
      __int16 v11 = 2050;
      uint64_t v12 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dic WhenInUse #AutoPrompt FF disabled, Client:%{public, location:escape_only}@,  this:%{public}p}",  (uint8_t *)v6,  0x26u);
      return 0LL;
    }
  }

  return result;
}

void sub_100D57D74(uint64_t a1)
{
  *(_BYTE *)(a1 + 136) = 1;
  if (!sub_100D57238(a1, 2))
  {
    if (objc_msgSend( sub_100552424(*(void *)(a1 + 24), *(void *)(a1 + 16)),  "BOOLForKey:defaultValue:",  @"DefaultAccuracyReduced",  0)) {
      int v2 = 1;
    }
    else {
      int v2 = 2;
    }
    uint64_t v3 = *(void *)(a1 + 16);
    sub_1010DDBC0(__p, "");
    sub_1005857F0((uint64_t)v6, v2, v3, 0LL, (__int128 *)__p);
    sub_100D575DC(a1, v6, 0LL);
    sub_1005858A0((uint64_t)v6);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100D57E2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id *sub_100D57E58(id *result)
{
  if (*((_BYTE *)result + 136))
  {
    uint64_t v1 = result;
    uint64_t result = (id *)[result[5] transientAwareRegistrationResult];
    if ((_DWORD)result != 4) {
      *((_BYTE *)v1 + 136) = 0;
    }
  }

  return result;
}

uint64_t sub_100D57E90(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 40) diagnosticMask];
  if (*(_BYTE *)(a1 + 136)) {
    v2 |= sub_100D57238(a1, 2) | 0x2000;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1) | *(void *)(a1 + 88) | v2;
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1) & v3;
}

void sub_100D57F8C(uint64_t a1)
{
  uint64_t v2 = sub_100D57E90(a1);
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018817F0);
  }
  uint64_t v3 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)unint64_t v17 = 2082;
    *(void *)&_DWORD v17[2] = "";
    __int16 v18 = 2114;
    uint64_t v19 = v4;
    __int16 v20 = 2050;
    uint64_t v21 = a1;
    __int16 v22 = 1026;
    int v23 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dic sending diagnostic mask, ClientKeyPath:%{public, location:escape_only}@, self :%{public}p, DiagnosticMask:%{public}d}",  buf,  0x2Cu);
  }

  id v15 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend( v15,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v2),  @"kCLConnectionMessageDiagnosticsKey");
  sub_100D58210("kCLConnectionMessageDiagnostics", &v15, buf);
  uint64_t v13 = *(void *)buf;
  unint64_t v14 = *(std::__shared_weak_count **)v17;
  if (*(void *)v17)
  {
    char v5 = (unint64_t *)(*(void *)v17 + 8LL);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  sub_100D55D8C(a1, (uint64_t)&v13, 0LL, 1, 0.0);
  __int16 v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = *(std::__shared_weak_count **)v17;
  if (*(void *)v17)
  {
    __int16 v11 = (unint64_t *)(*(void *)v17 + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

void sub_100D58194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_100D581B8(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100D581E4(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_100D58210@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x70uLL);
  uint64_t result = sub_100215340(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100D5825C(_Unwind_Exception *a1)
{
}

uint64_t sub_100D58270(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uuid_clear((unsigned __int8 *)(a1 + 17));
  *(_BYTE *)(a1 + 16) = 0;
  return a1;
}

void sub_100D582D4(_Unwind_Exception *a1)
{
}

void sub_100D582F0(uint64_t a1)
{
  *(_BYTE *)(a1 + 16) = 0;
}

id *sub_100D5831C@<X0>(id *result@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v4 = *(void *)(a2 + 80);
  if (v4) {
    BOOL v5 = v4 == 26;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    __int16 v7 = result;
    double v8 = (const unsigned __int8 *)(a2 + 8);
    uint64_t result = (id *)uuid_is_null((const unsigned __int8 *)(a2 + 8));
    if (!(_DWORD)result)
    {
      if (uuid_compare(v8, (const unsigned __int8 *)v7 + 17))
      {
        *((_BYTE *)v7 + 16) = 0;
        uuid_copy((unsigned __int8 *)v7 + 17, v8);
      }

      unint64_t v9 = (unint64_t)v7[10];
      if (v9 >= 0x41)
      {
        v7[9] = (char *)v7[9] + 1;
        v7[10] = (id)(v9 - 1);
        sub_100D593A8((uint64_t)(v7 + 5), 1);
      }

      sub_100D587D0(v7 + 5, (__int128 *)a2);
      uint64_t result = (id *)sub_100D8A92C((char *)*v7 + 72);
      if ((_DWORD)result)
      {
        sub_100222B94(v46, (uint64_t)"CLVO2MaxInputStore::add", 0);
        sub_100D58894((uint64_t *)*v7, v7 + 5);
        uint64_t v10 = (void **)v7[6];
        __int16 v11 = v7[7];
        v7[10] = 0LL;
        unint64_t v12 = v11 - (_BYTE *)v10;
        if (v12 >= 0x11)
        {
          do
          {
            operator delete(*v10);
            uint64_t v13 = v7[7];
            uint64_t v10 = (void **)((char *)v7[6] + 8);
            void v7[6] = v10;
            unint64_t v12 = v13 - (_BYTE *)v10;
          }

          while (v12 > 0x10);
        }

        if (v12 >> 3 == 1)
        {
          uint64_t v14 = 18LL;
        }

        else
        {
          if (v12 >> 3 != 2)
          {
LABEL_18:
            if (*((_BYTE *)v7 + 16))
            {
              *(void *)&__int128 v50 = 0xFFEFFFFFFFFFFFFFLL;
              *(void *)&__int128 v51 = 0xFFEFFFFFFFFFFFFFLL;
              int v15 = sub_1006EBBAC((uint64_t)*v7, buf);
              unint64_t v16 = (unint64_t)a3[2];
              unint64_t v17 = a3[1];
              if ((unint64_t)v17 >= v16)
              {
                unint64_t v24 = *a3;
                uint64_t v25 = 0x6DB6DB6DB6DB6DB7LL * ((v17 - *a3) >> 4);
                unint64_t v26 = v25 + 1;
                unint64_t v27 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v16 - (void)v24) >> 4);
                if (2 * v27 > v26) {
                  unint64_t v26 = 2 * v27;
                }
                if (v27 >= 0x124924924924924LL) {
                  unint64_t v28 = 0x249249249249249LL;
                }
                else {
                  unint64_t v28 = v26;
                }
                if (v28)
                {
                  __int16 v29 = (char *)sub_10005057C((uint64_t)(a3 + 2), v28);
                  unint64_t v24 = *a3;
                  unint64_t v17 = a3[1];
                }

                else
                {
                  __int16 v29 = 0LL;
                }

                uint64_t v30 = &v29[112 * v25];
                __int16 v31 = &v29[112 * v28];
                __int128 v32 = *(_OWORD *)buf;
                __int128 v33 = v50;
                *((_OWORD *)v30 + 1) = v49;
                *((_OWORD *)v30 + 2) = v33;
                *(_OWORD *)uint64_t v30 = v32;
                __int128 v34 = v51;
                __int128 v35 = v52;
                __int128 v36 = v54;
                *((_OWORD *)v30 + 5) = v53;
                *((_OWORD *)v30 + 6) = v36;
                *((_OWORD *)v30 + 3) = v34;
                *((_OWORD *)v30 + 4) = v35;
                int v23 = v30 + 112;
                if (v17 == v24)
                {
                  __int16 v42 = v30;
                }

                else
                {
                  do
                  {
                    __int128 v37 = *((_OWORD *)v17 - 7);
                    __int128 v38 = *((_OWORD *)v17 - 5);
                    *((_OWORD *)v30 - 6) = *((_OWORD *)v17 - 6);
                    *((_OWORD *)v30 - 5) = v38;
                    *((_OWORD *)v30 - 7) = v37;
                    __int128 v39 = *((_OWORD *)v17 - 4);
                    __int128 v40 = *((_OWORD *)v17 - 3);
                    __int128 v41 = *((_OWORD *)v17 - 2);
                    __int16 v42 = v30 - 112;
                    *(_OWORD *)(v30 - 23) = *(_OWORD *)(v17 - 23);
                    *((_OWORD *)v30 - 3) = v40;
                    *((_OWORD *)v30 - 2) = v41;
                    *((_OWORD *)v30 - 4) = v39;
                    v17 -= 112;
                    v30 -= 112;
                  }

                  while (v17 != v24);
                }

                *a3 = v42;
                a3[1] = v23;
                a3[2] = v31;
                if (v24) {
                  operator delete(v24);
                }
              }

              else
              {
                __int128 v18 = *(_OWORD *)buf;
                __int128 v19 = v50;
                *((_OWORD *)v17 + 1) = v49;
                *((_OWORD *)v17 + 2) = v19;
                *(_OWORD *)unint64_t v17 = v18;
                __int128 v20 = v51;
                __int128 v21 = v52;
                __int128 v22 = v54;
                *((_OWORD *)v17 + 5) = v53;
                *((_OWORD *)v17 + 6) = v22;
                *((_OWORD *)v17 + 3) = v20;
                *((_OWORD *)v17 + 4) = v21;
                int v23 = v17 + 112;
              }

              a3[1] = v23;
            }

            else
            {
              int v15 = sub_1006E882C((uint64_t)*v7, (const unsigned __int8 *)v7 + 17, (uint64_t)a3);
              *((_BYTE *)v7 + 16) = v15 == 100;
            }

            if (v15 != 100)
            {
              if (qword_1019344D0 != -1) {
                dispatch_once(&qword_1019344D0, &stru_101881810);
              }
              unint64_t v43 = (os_log_s *)qword_1019344D8;
              if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)std::string buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_FAULT,  "failed to write VO2MaxInput entry, error %d",  buf,  8u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019344D0 != -1) {
                  dispatch_once(&qword_1019344D0, &stru_101881810);
                }
                v47[0] = 67109120;
                v47[1] = v15;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  17LL,  "failed to write VO2MaxInput entry, error %d",  v47);
                id v45 = (uint8_t *)v44;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::vector<VO2MaxInput> CLVO2MaxInputStore::add(const VO2MaxInput &)",  "%s\n",  v44);
                if (v45 != buf) {
                  free(v45);
                }
              }
            }

            return sub_1001BA1BC(v46);
          }

          uint64_t v14 = 36LL;
        }

        v7[9] = (id)v14;
        goto LABEL_18;
      }
    }
  }

  return result;
}

void sub_100D58794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  BOOL v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + _Block_object_dispose(va, 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

__n128 sub_100D587D0(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 36 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100D59404(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x24)) + 112 * (v7 % 0x24);
  __int128 v9 = *a2;
  __int128 v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v9;
  __n128 result = (__n128)a2[3];
  __int128 v12 = a2[4];
  __int128 v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(__n128 *)(v8 + 4_Block_object_dispose(va, 8) = result;
  *(_OWORD *)(v8 + 64) = v12;
  ++a1[5];
  return result;
}

uint64_t sub_100D58894(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_1003C0454(a1[10]);
    uint64_t v5 = a2[1];
    if (a2[2] != v5)
    {
      unint64_t v6 = a2[4];
      uint64_t v7 = a2[5];
      unint64_t v8 = (void *)(v5 + 8 * (v6 / 0x24));
      unint64_t v9 = *v8 + 112 * (v6 % 0x24);
      unint64_t v10 = *(void *)(v5 + 8 * ((v7 + v6) / 0x24)) + 112 * ((v7 + v6) % 0x24);
      while (v9 != v10)
      {
        (*(void (**)(uint64_t *, unint64_t, void))(*a1 + 120))(a1, v9, 0LL);
        v9 += 112LL;
        if (v9 - *v8 == 4032)
        {
          unint64_t v11 = v8[1];
          ++v8;
          unint64_t v9 = v11;
        }
      }
    }

    return sub_1003C05BC(a1[10]);
  }

  return result;
}

void sub_100D58978(unsigned __int8 *uu@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  if (!uuid_is_null(uu))
  {
    int v6 = sub_1006E882C(*a2, uu, (uint64_t)a3);
    if (v6 != 100)
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101881810);
      }
      uint64_t v7 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v11 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to get VO2MaxInput entries for session, error %d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101881810);
        }
        v9[0] = 67109120;
        v9[1] = v6;
        unint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "Failed to get VO2MaxInput entries for session, error %d",  v9);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::vector<VO2MaxInput> CLVO2MaxInputStore::getBySessionId(unsigned char *)",  "%s\n",  v8);
      }
    }
  }

void sub_100D58B58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100D58B7C(void *a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_10199E0E8);
  if ((v1 & 1) == 0)
  {
    uint64_t v3 = a1;
    int v4 = __cxa_guard_acquire(&qword_10199E0E8);
    a1 = v3;
    if (v4)
    {
      uint64_t v6 = 0LL;
      __int128 v5 = xmmword_10135D4D0;
      sub_100D58C88(qword_10199E0D0, &v5, 1uLL);
      __cxa_atexit((void (*)(void *))sub_100D58D10, qword_10199E0D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10199E0E8);
      a1 = v3;
    }
  }

  return (*(uint64_t (**)(void, void *))(*(void *)*a1 + 32LL))(*a1, qword_10199E0D0);
}

void sub_100D58C68(_Unwind_Exception *a1)
{
}

void *sub_100D58C88(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    sub_100006E1C(a1, a3);
    uint64_t v6 = 3 * a3;
    uint64_t v7 = 24 * a3;
    unint64_t v8 = (char *)a1[1];
    memmove(v8, a2, v7 - 7);
    a1[1] = &v8[8 * v6];
  }

  return a1;
}

void sub_100D58CF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100D58D10(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_100D58D40(uint64_t a1)
{
  return sub_100D8BAC8((void *)(*(void *)a1 + 72LL));
}

BOOL sub_100D58D4C(uint64_t *a1, const unsigned __int8 *a2)
{
  return (int)sub_1006EC6C8(*a1, a2) > 0;
}

BOOL sub_100D58D6C(uint64_t *a1, const unsigned __int8 *a2, void *a3)
{
  uint64_t v6 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a2);
  objc_msgSend(a3, "setSessionId:", -[NSUUID UUIDString](v6, "UUIDString"));

  std::stringbuf::string_type __p = 0LL;
  __int128 v13 = 0LL;
  uint64_t v14 = 0LL;
  id v7 = (id)sub_1006EC300(*a1, a2, (char **)&__p);
  int v8 = (int)v7;
  unint64_t v9 = (char *)__p;
  if ((_DWORD)v7 != 109)
  {
    unint64_t v10 = v13;
    if (__p != v13)
    {
      do
      {
        id v7 = objc_msgSend(a3, "addInputs:", sub_100D58E5C((uint64_t)v7, (uint64_t)v9));
        v9 += 112;
      }

      while (v9 != v10);
      unint64_t v9 = (char *)__p;
    }
  }

  if (v9)
  {
    __int128 v13 = v9;
    operator delete(v9);
  }

  return v8 != 109;
}

void sub_100D58E3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CLCKVO2MaxCalorimetryInput *sub_100D58E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___CLCKVO2MaxCalorimetryInput);
  -[CLCKVO2MaxCalorimetryInput setStartTime:](v3, "setStartTime:", *(double *)(a2 + 32));
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  -[CLCKVO2MaxCalorimetryInput setMets:](v3, "setMets:", v4);
  -[CLCKVO2MaxCalorimetryInput setMetSource:](v3, "setMetSource:", *(unsigned int *)(a2 + 76));
  LODWORD(v5) = *(_DWORD *)(a2 + 40);
  -[CLCKVO2MaxCalorimetryInput setHr:](v3, "setHr:", v5);
  LODWORD(v6) = *(_DWORD *)(a2 + 44);
  -[CLCKVO2MaxCalorimetryInput setHrConfidence:](v3, "setHrConfidence:", v6);
  -[CLCKVO2MaxCalorimetryInput setHrTime:](v3, "setHrTime:", *(double *)(a2 + 48));
  -[CLCKVO2MaxCalorimetryInput setGrade:](v3, "setGrade:", *(double *)(a2 + 64));
  -[CLCKVO2MaxCalorimetryInput setGradeType:](v3, "setGradeType:", *(unsigned int *)(a2 + 56));
  -[CLCKVO2MaxCalorimetryInput setHasGPS:](v3, "setHasGPS:", *(unsigned __int8 *)(a2 + 72));
  -[CLCKVO2MaxCalorimetryInput setHasStrideCal:](v3, "setHasStrideCal:", *(unsigned __int8 *)(a2 + 73));
  -[CLCKVO2MaxCalorimetryInput setWorkoutType:](v3, "setWorkoutType:", *(unsigned int *)(a2 + 80));
  -[CLCKVO2MaxCalorimetryInput setCadence:](v3, "setCadence:", *(double *)(a2 + 88));
  -[CLCKVO2MaxCalorimetryInput setPace:](v3, "setPace:", *(double *)(a2 + 96));
  -[CLCKVO2MaxCalorimetryInput setIsStroller:](v3, "setIsStroller:", *(unsigned __int8 *)(a2 + 104));
  return v3;
}

uint64_t sub_100D58F34(uint64_t *a1, void *a2, void *a3)
{
  double v6 = -[NSUUID initWithUUIDString:]( [NSUUID alloc],  "initWithUUIDString:",  [a2 sessionId]);
  -[NSUUID getUUIDBytes:](v6, "getUUIDBytes:", v13);

  std::stringbuf::string_type __p = 0LL;
  int v11 = 0LL;
  uint64_t v12 = 0LL;
  sub_100D5902C(v7, a2, &__p);
  uint64_t v8 = sub_1006EC7F0(*a1, v13, a3, &__p);
  if (__p)
  {
    int v11 = __p;
    operator delete(__p);
  }

  return v8;
}

void sub_100D59008( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D5902C(uint64_t a1, void *a2, void **a3)
{
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  id obj = [a2 inputs];
  id result = [obj countByEnumeratingWithState:&v50 objects:v54 count:16];
  id v5 = result;
  if (result)
  {
    uint64_t v49 = *(void *)v51;
    do
    {
      double v6 = 0LL;
      do
      {
        if (*(void *)v51 != v49) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)v6);
        [v7 startTime];
        uint64_t v9 = v8;
        [v7 mets];
        int v11 = v10;
        unsigned int v12 = [v7 metSource];
        [v7 hr];
        int v14 = v13;
        [v7 hrConfidence];
        int v16 = v15;
        [v7 hrTime];
        uint64_t v18 = v17;
        [v7 grade];
        uint64_t v20 = v19;
        unsigned int v21 = [v7 gradeType];
        unsigned __int8 v22 = [v7 hasGPS];
        unsigned __int8 v23 = [v7 hasStrideCal];
        signed int v24 = [v7 workoutType];
        [v7 cadence];
        uint64_t v26 = v25;
        [v7 pace];
        uint64_t v28 = v27;
        unsigned __int8 v29 = [v7 isStroller];
        unsigned __int8 v30 = v29;
        __int16 v31 = (char *)a3[1];
        __int128 v32 = (char *)a3[2];
        if (v31 >= v32)
        {
          uint64_t v34 = 0x6DB6DB6DB6DB6DB7LL * ((v31 - (_BYTE *)*a3) >> 4);
          unint64_t v35 = v34 + 1;
          unint64_t v36 = 0x6DB6DB6DB6DB6DB7LL * ((v32 - (_BYTE *)*a3) >> 4);
          if (2 * v36 > v35) {
            unint64_t v35 = 2 * v36;
          }
          if (v36 >= 0x124924924924924LL) {
            unint64_t v37 = 0x249249249249249LL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37) {
            __int128 v38 = (char *)sub_10005057C((uint64_t)(a3 + 2), v37);
          }
          else {
            __int128 v38 = 0LL;
          }
          __int128 v39 = &v38[112 * v34];
          *((_DWORD *)v39 + 6) = v11;
          *((void *)v39 + 4) = v9;
          *((_DWORD *)v39 + 10) = v14;
          *((_DWORD *)v39 + 11) = v16;
          *((void *)v39 + 6) = v18;
          *((_DWORD *)v39 + 14) = v21;
          *((void *)v39 + _Block_object_dispose(va, 8) = v20;
          v39[72] = v22;
          v39[73] = v23;
          *((_DWORD *)v39 + 19) = v12;
          *((void *)v39 + 10) = v24;
          *((void *)v39 + 11) = v26;
          *((void *)v39 + 12) = v28;
          v39[104] = v30;
          __int128 v41 = (char *)*a3;
          __int128 v40 = (char *)a3[1];
          __int16 v42 = v39;
          if (v40 != *a3)
          {
            do
            {
              __int128 v43 = *((_OWORD *)v40 - 7);
              __int128 v44 = *((_OWORD *)v40 - 5);
              *((_OWORD *)v42 - 6) = *((_OWORD *)v40 - 6);
              *((_OWORD *)v42 - 5) = v44;
              *((_OWORD *)v42 - 7) = v43;
              __int128 v45 = *((_OWORD *)v40 - 4);
              __int128 v46 = *((_OWORD *)v40 - 3);
              __int128 v47 = *((_OWORD *)v40 - 2);
              *(_OWORD *)(v42 - 23) = *(_OWORD *)(v40 - 23);
              *((_OWORD *)v42 - 3) = v46;
              *((_OWORD *)v42 - 2) = v47;
              *((_OWORD *)v42 - 4) = v45;
              v42 -= 112;
              v40 -= 112;
            }

            while (v40 != v41);
            __int128 v40 = (char *)*a3;
          }

          __int128 v33 = v39 + 112;
          *a3 = v42;
          a3[1] = v39 + 112;
          a3[2] = &v38[112 * v37];
          if (v40) {
            operator delete(v40);
          }
        }

        else
        {
          *((_DWORD *)v31 + 6) = v11;
          *((void *)v31 + 4) = v9;
          *((_DWORD *)v31 + 10) = v14;
          *((_DWORD *)v31 + 11) = v16;
          *((void *)v31 + 6) = v18;
          *((_DWORD *)v31 + 14) = v21;
          *((void *)v31 + _Block_object_dispose(va, 8) = v20;
          v31[72] = v22;
          v31[73] = v23;
          *((_DWORD *)v31 + 19) = v12;
          *((void *)v31 + 10) = v24;
          *((void *)v31 + 11) = v26;
          *((void *)v31 + 12) = v28;
          __int128 v33 = v31 + 112;
          v31[104] = v29;
        }

        a3[1] = v33;
        double v6 = (char *)v6 + 1;
      }

      while (v6 != v5);
      id result = [obj countByEnumeratingWithState:&v50 objects:v54 count:16];
      id v5 = result;
    }

    while (result);
  }

  return result;
}

void sub_100D5937C(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100D593A8(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x24) {
    a2 = 1;
  }
  if (v2 < 0x48) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 36LL;
  }

  return v4 ^ 1u;
}

void sub_100D59404(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x24;
  unint64_t v4 = v2 - 36;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      __int128 v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100D596CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100D59718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  double v6 = operator new(0x58uLL);
  uint64_t result = sub_100D59774((uint64_t)v6, a2, a1);
  *a3 = v6;
  return result;
}

void sub_100D59760(_Unwind_Exception *a1)
{
}

uint64_t sub_100D59774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_101881840;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0x40D5180000000000LL;
  unint64_t v4 = (double *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v5 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  sub_1002F0B04(buf);
  sub_1002A82BC(*(uint64_t *)buf, "CleanupInterval", v4);
  double v6 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  sub_100583844((uint64_t)sub_100D59D18, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v9 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    uint64_t v11 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
  }

  [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:4 registrationInfo:0];
  memset(&v32, 0, sizeof(v32));
  std::string::operator=(&v32, (const std::string *)&qword_10199E108);
  [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:0 registrationInfo:sub_10120E548((uint64_t)&v32)];
  [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:6 registrationInfo:sub_10120E548((uint64_t)&v32)];
  sub_100ACD980((uint64_t)sub_100D59F00, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v12 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    uint64_t v14 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
  }

  [*(id *)(*(void *)(a1 + 64) + 16) register:*(void *)(*(void *)(a1 + 64) + 8) forNotification:0 registrationInfo:0];
  sub_100C6E054((uint64_t)sub_100D5A0E8, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v15 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v16 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    uint64_t v17 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
  }

  [*(id *)(*(void *)(a1 + 72) + 16) register:*(void *)(*(void *)(a1 + 72) + 8) forNotification:5 registrationInfo:0];
  sub_1003CC884((uint64_t)sub_100D5A2D0, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v18 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v19 = *v5;
  *uint64_t v5 = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    uint64_t v20 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    }
  }

  [*(id *)(*v5 + 16) register:*(void *)(*v5 + 8) forNotification:6 registrationInfo:0];
  sub_10043AC3C((uint64_t)sub_100D5A4B8, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v21 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v22 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v21;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
    uint64_t v23 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    }
  }

  [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:5 registrationInfo:0];
  id v24 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "newTimer");
  *(void *)(a1 + 24) = v24;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_100D5A6A0;
  v31[3] = &unk_10181D3D0;
  _DWORD v31[4] = a1;
  [v24 setHandler:v31];
  unint64_t v25 = *(void **)(a1 + 24);
  if (v25)
  {
    [v25 setNextFireDelay:*v4 interval:*v4];
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018818C0);
    }
    uint64_t v26 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "TileMgr, cell, Timer allocation failure, #CloneMe",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018818C0);
      }
      v30[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "TileMgr, cell, Timer allocation failure, #CloneMe",  v30,  2);
      unsigned __int8 v29 = (uint8_t *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCellTilesManagerExternal::CLCellTilesManagerExternal(CLCellTilesManager *, id<CLIntersiloUniverse>)",  "%s\n",  v28);
      if (v29 != buf) {
        free(v29);
      }
    }
  }

  return a1;
}

void sub_100D59C34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  uint64_t v27 = v24[9];
  v24[9] = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  uint64_t v28 = v24[8];
  _WORD v24[8] = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  uint64_t v29 = v24[7];
  v24[7] = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }
  uint64_t v30 = v24[6];
  v24[6] = 0LL;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }
  uint64_t v31 = *v25;
  uint64_t *v25 = 0LL;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D59D18(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018818A0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCellTilesManager::onClientNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018818A0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCellTilesManager::onClientNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100DC3974(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D59EE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D59F00(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018818A0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCellTilesManager::onDataProtectionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018818A0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCellTilesManager::onDataProtectionNotification, event:%{public, location:escape_o nly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100DC1C38(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D5A0C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D5A0E8(uint64_t a1, int *a2, char *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018818A0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCellTilesManager::onCompanionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018818A0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCellTilesManager::onCompanionNotification, event:%{public, location:escape_only}s , this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100DC4200(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D5A2B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D5A2D0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018818A0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCellTilesManager::onStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018818A0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCellTilesManager::onStatusNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100DC363C(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D5A498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D5A4B8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018818A0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLCellTilesManager::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018818A0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLCellTilesManager::onLocationNotification, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100DC2D88(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D5A680( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D5A6A0(uint64_t a1)
{
  return sub_100DC4A14(*(void *)(*(void *)(a1 + 32) + 8LL));
}

uint64_t sub_100D5A6AC(uint64_t a1)
{
  *(void *)a1 = off_101881840;
  [*(id *)(a1 + 24) invalidate];

  *(void *)(a1 + 24) = 0LL;
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {

    *(void *)(a1 + 80) = 0LL;
  }

  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  return a1;
}

void sub_100D5A77C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D5A6AC(a1);
  operator delete(v1);
}

uint64_t sub_100D5A794()
{
  return sub_1001B9A1C();
}

uint64_t sub_100D5A7A8()
{
  return sub_1004F64FC() & 1;
}

id sub_100D5A7C4(void *a1)
{
  unint64_t v2 = (CLTileDownloadSchedulingClient *)a1[10];
  if (!v2)
  {
    uint64_t v3 = objc_alloc(&OBJC_CLASS___CLTileDownloadSchedulingClient);
    uint64_t v4 = a1[1];
    if (v4) {
      uint64_t v5 = v4 + 112;
    }
    else {
      uint64_t v5 = 0LL;
    }
    unint64_t v2 = -[CLTileDownloadSchedulingClient initWithUniverse:andDelegate:](v3, "initWithUniverse:andDelegate:", a1[2], v5);
    a1[10] = v2;
  }

  return (id)-[CLTileDownloadSchedulingClient scheduleTileDownloadIfNecessary](v2, "scheduleTileDownloadIfNecessary");
}

id sub_100D5A80C(uint64_t a1)
{
  id v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", @"CLClientManager");
  if (byte_10199E11F >= 0) {
    unint64_t v2 = &qword_10199E108;
  }
  else {
    unint64_t v2 = (uint64_t *)qword_10199E108;
  }
  return objc_msgSend( v1,  "resetNotificationConsumedForIdentifier:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

void sub_100D5A868(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D5A894(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100D5A8C0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100D5A924()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100D5A998(_Unwind_Exception *a1)
{
}

void sub_100D5A9B0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10135D508;
      v1[3] = unk_10135D518;
      v1[4] = xmmword_10135D528;
      v1[0] = xmmword_10135D4E8;
      v1[1] = unk_10135D4F8;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100D5AA84(_Unwind_Exception *a1)
{
}

uint64_t sub_100D5AA9C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10199E108, (void *)&_mh_execute_header);
}

uint64_t sub_100D5AB18(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4 = a2[1];
  uint64_t v29 = *a2;
  uint64_t v30 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  sub_100D4FC0C(a1, &v29, a3);
  uint64_t v7 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  *(void *)a1 = off_1018818F0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = a1 + 912;
  *(void *)(a1 + 920) = a1 + 912;
  *(void *)(a1 + 1000) = 0LL;
  *(void *)(a1 + 992) = 0LL;
  *(_OWORD *)(a1 + 92_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 976) = 0LL;
  sub_100D728B0(a1 + 1008);
  uint64_t v28 = v10;
  sub_100D728B0(a1 + 1848);
  uint64_t v27 = v11;
  *(_BYTE *)(a1 + 268_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 272_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_WORD *)(a1 + 2732) = 1;
  *(_DWORD *)(a1 + 2736) = 0;
  *(_BYTE *)(a1 + 2792) = 0;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(void *)(a1 + 2800) = 0LL;
  *(_DWORD *)(a1 + 2824) = 0;
  *(_OWORD *)(a1 + 280_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(a1 + 2872) = 0;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_BYTE *)(a1 + 284_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_WORD *)(a1 + 2876) = 1;
  *(_DWORD *)(a1 + 2880) = 0;
  *(void *)(a1 + 2952) = 0LL;
  *(void *)(a1 + 2944) = 0LL;
  *(void *)(a1 + 2960) = 0LL;
  *(_OWORD *)(a1 + 288_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_BYTE *)(a1 + 2936) = 0;
  *(void *)(a1 + 296_Block_object_dispose(va, 8) = 0xFFFFFFFFLL;
  *(void *)(a1 + 2976) = off_10184DB98;
  *(void *)(a1 + 2984) = 30LL;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 300_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 3024) = 0u;
  *(void *)(a1 + 3040) = 0LL;
  *(void *)(a1 + 304_Block_object_dispose(va, 8) = a1 + 3048;
  *(void *)(a1 + 3056) = a1 + 3048;
  *(void *)(a1 + 3064) = 0LL;
  *(void *)(a1 + 3072) = a1 + 3072;
  *(void *)(a1 + 3080) = a1 + 3072;
  *(void *)(a1 + 308_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 3096) = a1 + 3096;
  *(void *)(a1 + 3104) = a1 + 3096;
  *(void *)(a1 + 3112) = 0LL;
  *(void *)(a1 + 3120) = a1 + 3120;
  *(void *)(a1 + 312_Block_object_dispose(va, 8) = a1 + 3120;
  *(void *)(a1 + 3144) = 0LL;
  *(void *)(a1 + 3136) = 0LL;
  *(void *)(a1 + 3152) = 0LL;
  *(void *)(a1 + 3160) = 0xBFF0000000000000LL;
  sub_100D729A0(a1 + 3184);
  *(_BYTE *)(a1 + 3720) = 0;
  *(_BYTE *)(a1 + 3832) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 3840) = _Q0;
  *(void *)(a1 + 3856) = 0LL;
  *(void *)(a1 + 3872) = 0LL;
  *(void *)(a1 + 3864) = 0LL;
  *(void *)(a1 + 3880) = 0xBFF0000000000000LL;
  *(void *)(a1 + 388_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(void *)(a1 + 3904) = 0LL;
  *(void *)(a1 + 3896) = 0LL;
  *(_DWORD *)(a1 + 3912) = 0;
  *(_WORD *)(a1 + 3916) = 1;
  *(_DWORD *)(a1 + 3920) = 0;
  *(void *)(a1 + 3984) = 0LL;
  *(void *)(a1 + 4000) = 0LL;
  *(void *)(a1 + 3992) = 0LL;
  *(_BYTE *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 392_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 400_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 4016) = _Q0;
  *(void *)(a1 + 4032) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 4040) = 0;
  *(_OWORD *)(a1 + 404_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4080) = 0u;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(void *)(a1 + 4112) = 0LL;
  *(void *)(a1 + 4120) = 0xBFF0000000000000LL;
  *(void *)(a1 + 412_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  if (sub_1004F6D00())
  {
    *(_BYTE *)(a1 + 316_Block_object_dispose(va, 8) = 0;
LABEL_12:
    double v18 = 30.0;
    goto LABEL_14;
  }

  int v17 = sub_1004F84C0();
  *(_BYTE *)(a1 + 316_Block_object_dispose(va, 8) = v17 ^ 1;
  if (((v17 ^ 1) & 1) == 0) {
    goto LABEL_12;
  }
  double v18 = 70.0;
LABEL_14:
  *(double *)(a1 + 3176) = v18;
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_1018819B8);
  }
  uint64_t v19 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    int v20 = *(unsigned __int8 *)(a1 + 3168);
    uint64_t v21 = *(void *)(a1 + 3176);
    *(_DWORD *)std::string buf = 67240448;
    int v35 = v20;
    __int16 v36 = 2050;
    uint64_t v37 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "CLMM,Constructor,fUseSpeedCheckForDOT,%{public}d,fMaxDistanceForTIntersectionForDOT,%{public}.1lf",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    int v23 = *(unsigned __int8 *)(a1 + 3168);
    uint64_t v24 = *(void *)(a1 + 3176);
    v31[0] = 67240448;
    v31[1] = v23;
    __int16 v32 = 2050;
    uint64_t v33 = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Constructor,fUseSpeedCheckForDOT,%{public}d,fMaxDistanceForTIntersectionForDOT,%{public}.1lf",  v31,  18,  a1 + 3048,  v27,  v28,  a1 + 912,  v29);
    uint64_t v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLParticleMapMatcher::CLParticleMapMatcher(CLMapGeometryPtr, const std::string &)",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  srandom(0);
  bzero((void *)(a1 + 3728), 0x68uLL);
  return a1;
}

void sub_100D5AF8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void **a21)
{
  a21 = (void **)(v21 + 4096);
  sub_100D73A50(&a21);
  a21 = (void **)(v21 + 4072);
  sub_100D73A50(&a21);
  a21 = (void **)(v21 + 4048);
  sub_100D739E0(&a21);
  sub_100D5B0C0(v22);
  sub_100890314(v27);
  sub_100890314(v26);
  sub_100890314(v25);
  sub_100890314(a11);
  *(void *)(v21 + 2976) = off_10184DB98;
  sub_10046E180((void *)(v21 + 3000));
  sub_100D5B0F8(v24);
  sub_100D5B130(v23);
  sub_100D5B168(a12);
  sub_100D5B168(a13);
  sub_100D73928(v21 + 984, *(void **)(v21 + 992));
  uint64_t v29 = *(void **)(v21 + 960);
  if (v29)
  {
    *(void *)(v21 + 96_Block_object_dispose(va, 8) = v29;
    operator delete(v29);
  }

  uint64_t v30 = *(void **)(v21 + 936);
  if (v30)
  {
    *(void *)(v21 + 944) = v30;
    operator delete(v30);
  }

  sub_1001B4C40(a14);
  a21 = (void **)(v21 + 888);
  sub_100D73874(&a21);
  a21 = (void **)(v21 + 864);
  sub_100D73874(&a21);
  sub_100D4FF78(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_100D5B0C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }

  sub_10000AE14(a1 + 64);
  return a1;
}

uint64_t sub_100D5B0F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }

  sub_10000AE14(a1 + 8);
  return a1;
}

uint64_t sub_100D5B130(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }

  sub_10000AE14(a1 + 24);
  return a1;
}

uint64_t sub_100D5B168(uint64_t a1)
{
  uint64_t v2 = a1 + 672;
  uint64_t v3 = *(void **)(a1 + 760);
  if (v3)
  {
    *(void *)(a1 + 76_Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  sub_10000AE14(v2);
  sub_10000AE14(a1 + 648);
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }

  sub_10000AE14(a1 + 8);
  return a1;
}

uint64_t sub_100D5B1D8(uint64_t a1)
{
  *(void *)a1 = off_1018818F0;
  uint64_t v12 = (void **)(a1 + 4096);
  sub_100D73A50(&v12);
  uint64_t v12 = (void **)(a1 + 4072);
  sub_100D73A50(&v12);
  uint64_t v12 = (void **)(a1 + 4048);
  sub_100D739E0(&v12);
  uint64_t v2 = *(void **)(a1 + 3984);
  if (v2)
  {
    *(void *)(a1 + 3992) = v2;
    operator delete(v2);
  }

  sub_10000AE14(a1 + 3896);
  sub_100890314((uint64_t *)(a1 + 3120));
  sub_100890314((uint64_t *)(a1 + 3096));
  sub_100890314((uint64_t *)(a1 + 3072));
  sub_100890314((uint64_t *)(a1 + 3048));
  *(void *)(a1 + 2976) = off_10184DB98;
  sub_10046E180((void *)(a1 + 3000));
  uint64_t v3 = *(void **)(a1 + 2944);
  if (v3)
  {
    *(void *)(a1 + 2952) = v3;
    operator delete(v3);
  }

  sub_10000AE14(a1 + 2856);
  uint64_t v4 = *(void **)(a1 + 2800);
  if (v4)
  {
    *(void *)(a1 + 280_Block_object_dispose(va, 8) = v4;
    operator delete(v4);
  }

  sub_10000AE14(a1 + 2712);
  uint64_t v5 = *(void **)(a1 + 2608);
  if (v5)
  {
    *(void *)(a1 + 2616) = v5;
    operator delete(v5);
  }

  sub_10000AE14(a1 + 2520);
  sub_10000AE14(a1 + 2496);
  unint64_t v6 = *(void **)(a1 + 1944);
  if (v6)
  {
    *(void *)(a1 + 1952) = v6;
    operator delete(v6);
  }

  sub_10000AE14(a1 + 1856);
  uint64_t v7 = *(void **)(a1 + 1768);
  if (v7)
  {
    *(void *)(a1 + 1776) = v7;
    operator delete(v7);
  }

  sub_10000AE14(a1 + 1680);
  sub_10000AE14(a1 + 1656);
  unint64_t v8 = *(void **)(a1 + 1104);
  if (v8)
  {
    *(void *)(a1 + 1112) = v8;
    operator delete(v8);
  }

  sub_10000AE14(a1 + 1016);
  sub_100D73928(a1 + 984, *(void **)(a1 + 992));
  unint64_t v9 = *(void **)(a1 + 960);
  if (v9)
  {
    *(void *)(a1 + 96_Block_object_dispose(va, 8) = v9;
    operator delete(v9);
  }

  uint64_t v10 = *(void **)(a1 + 936);
  if (v10)
  {
    *(void *)(a1 + 944) = v10;
    operator delete(v10);
  }

  sub_1001B4C40((void *)(a1 + 912));
  uint64_t v12 = (void **)(a1 + 888);
  sub_100D73874(&v12);
  uint64_t v12 = (void **)(a1 + 864);
  sub_100D73874(&v12);
  return sub_100D4FF78(a1);
}

void sub_100D5B3C0(uint64_t a1)
{
  id v1 = (void *)sub_100D5B1D8(a1);
  operator delete(v1);
}

uint64_t sub_100D5B3D4(uint64_t a1, uint64_t a2, int *a3, double a4)
{
  int v20 = 0LL;
  uint64_t v21 = 0LL;
  LODWORD(v22) = 0;
  WORD2(v22) = 1;
  DWORD2(v22) = 0;
  uint64_t v24 = 0LL;
  __int128 v23 = 0uLL;
  sub_1000F2F30(&v20, (uint64_t *)a2);
  BYTE4(v22) = *(_BYTE *)(a2 + 20);
  uint64_t v24 = *(void *)(a2 + 48);
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  v17[0] = (uint64_t)v17;
  v17[1] = (uint64_t)v17;
  _DWORD v17[2] = 0LL;
  v16[0] = (__n128 *)v16;
  v16[1] = (__n128 *)v16;
  void v16[2] = 0LL;
  *a3 = 0;
  unsigned int v8 = sub_100D5B53C(a1, &v20, a3, v17, v16, &v19, &v18, a4);
  if (*a3 > 1) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0LL;
  }
  if ((v9 & 1) != 0)
  {
    sub_1000F2F30((void *)a2, (uint64_t *)&v20);
    __int128 v10 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v10;
    *(void *)(a2 + 4_Block_object_dispose(va, 8) = v24;
    uint64_t v11 = v18;
    *(void *)(a2 + 32) = v19;
    *(void *)(a2 + 40) = v11;
    *(_DWORD *)(a2 + 24) = -1082130432;
  }

  sub_100890314((uint64_t *)v16);
  sub_100890314(v17);
  uint64_t v12 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  return v9;
}

void sub_100D5B518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_100890314((uint64_t *)va);
  sub_100890314((uint64_t *)va1);
  sub_10000AE14((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_100D5B53C( uint64_t a1, uint64_t **a2, int *a3, uint64_t *a4, __n128 **a5, void *a6, void *a7, double a8)
{
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v67 = *(void *)(a1 + 8);
  double v68 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  int v15 = 0;
  *a6 = 0LL;
  *a7 = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v41 = _Q0;
  while (1)
  {
    sub_100890314(a4);
    *a3 = 0;
    double v66 = 0.0;
    v42[0] = 0LL;
    v42[1] = 0LL;
    __int128 v43 = v41;
    uint64_t v44 = 0LL;
    uint64_t v45 = 0LL;
    unint64_t v46 = 0xBFF0000000000000LL;
    char v58 = 0LL;
    int v59 = 0;
    memset(&v56[32], 0, 32);
    __int16 v57 = 0;
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    memset(v63, 0, 27);
    memset(&v63[32], 0, 48);
    __int128 v55 = 0u;
    memset(v56, 0, 30);
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    uint64_t v64 = 0LL;
    unint64_t v65 = 0xBFF0000000000000LL;
    if (((*(uint64_t (**)(uint64_t, void *, uint64_t *, void, uint64_t, uint64_t **, void, double *, double, double))(*(void *)v67 + 80LL))( v67,  v42,  a4,  0LL,  1LL,  a2,  *((unsigned __int8 *)a2 + 20),  &v66,  *((double *)a2 + 6),  a8) & 1) == 0)
    {
      char v22 = 0;
      char v40 = 0;
      goto LABEL_23;
    }

    double v21 = v66;
    if (v66 == -1.0)
    {
      char v22 = 0;
LABEL_22:
      char v40 = 1;
      goto LABEL_23;
    }

    uint64_t v23 = a4[1];
    int v24 = *a3;
    if ((uint64_t *)v23 == a4)
    {
      uint64_t v25 = 0LL;
      uint64_t v28 = a4;
    }

    else
    {
      uint64_t v25 = 0LL;
      uint64_t v26 = **a2;
      int v27 = *((unsigned __int8 *)a2 + 20);
      uint64_t v28 = a4;
      do
      {
        if (**(void **)(v23 + 16) == v26 && *(unsigned __int8 *)(v23 + 32) != v27)
        {
          uint64_t v28 = (uint64_t *)v23;
        }

        else
        {
          *a3 = ++v24;
          uint64_t v25 = v23;
        }

        uint64_t v23 = *(void *)(v23 + 8);
      }

      while ((uint64_t *)v23 != a4);
    }

    a8 = a8 - v21;
    if (v24 >= 2)
    {
      if (v28 != a4)
      {
        uint64_t v29 = *v28;
        *(void *)(v29 + _Block_object_dispose(va, 8) = v28[1];
        *(void *)v28[1] = v29;
        --a4[2];
        sub_10000AE14((uint64_t)(v28 + 2));
        operator delete(v28);
      }

      char v22 = 0;
      uint64_t v30 = *((void *)&v53 + 1);
      *a6 = v53;
      *a7 = v30;
      a2[6] = v58;
      goto LABEL_22;
    }

    if (v24 == 1)
    {
      sub_1000F2F30(a2, (uint64_t *)(v25 + 16));
      *((_BYTE *)a2 + 20) = *(_BYTE *)(v25 + 32);
      a2[6] = *(uint64_t **)(v25 + 40);
      *a3 = 0;
      uint64_t v31 = (__n128 *)a4[1];
      if (v31 == (__n128 *)a4)
      {
        char v22 = 1;
      }

      else
      {
        do
        {
          uint64_t v31 = (__n128 *)v31->n128_u64[1];
          char v22 = 1;
        }

        while (v31 != (__n128 *)a4);
      }
    }

    else
    {
      sub_100890314(a4);
      char v22 = 0;
      char v40 = 1;
    }

void sub_100D5B8A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_10000AE14(v38 - 120);
  _Unwind_Resume(a1);
}

double sub_100D5B8C8(uint64_t a1, double a2)
{
  if (!*(_BYTE *)(a1 + 1008)) {
    return -1.0;
  }
  int v17 = 0LL;
  uint64_t v18 = 0LL;
  int v19 = 0;
  __int16 v20 = 1;
  int v21 = 0;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v22 = 0LL;
  sub_1000F2F30(&v17, (uint64_t *)(a1 + 1016));
  LOBYTE(v20) = *(_BYTE *)(a1 + 1036);
  uint64_t v24 = *(void *)(a1 + 1064);
  v14[0] = (uint64_t)v14;
  v14[1] = (uint64_t)v14;
  void v14[2] = 0LL;
  v13[0] = (__n128 *)v13;
  v13[1] = (__n128 *)v13;
  double v13[2] = 0LL;
  int v12 = 0;
  int v4 = sub_100D5B53C(a1, &v17, &v12, v14, v13, &v16, &v15, a2);
  double v5 = -1.0;
  if (v4)
  {
    double v7 = v15;
    double v6 = v16;
    if (!sub_10029286C(v16, v15)) {
      double v5 = sub_100D2DBDC( (double *)(a1 + 608),  *(double *)(a1 + 1280),  *(double *)(a1 + 1288),  v6,  v7,  *(double *)(a1 + 1200));
    }
  }

  sub_100890314((uint64_t *)v13);
  sub_100890314(v14);
  unsigned int v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v5;
}

void sub_100D5BA10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_100890314((uint64_t *)va);
  sub_100890314((uint64_t *)va1);
  sub_10000AE14((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_100D5BA34(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4)
{
  double v16 = 0LL;
  int v17 = 0LL;
  int v18 = 0;
  __int16 v19 = 1;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v21 = 0LL;
  sub_1000F2F30(&v16, (uint64_t *)(a1 + 1856));
  LOBYTE(v19) = *(_BYTE *)(a1 + 1876);
  uint64_t v23 = *(void *)(a1 + 1904);
  sub_100890314(a2);
  sub_100890314(a3);
  int v13 = 0;
  uint64_t v8 = sub_100D5B53C(a1, &v16, &v13, a2, (__n128 **)a3, &v15, &v14, a4);
  uint64_t v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return v8;
}

void sub_100D5BB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100D5BB38(uint64_t a1, uint64_t *a2, char a3, double a4, double a5, double a6)
{
  uint64_t v11 = a2[1];
  uint64_t v51 = *a2;
  __int128 v52 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  sub_100BDA324((uint64_t)&v53, (uint64_t)&v51, a3);
  uint64_t v14 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  int v17 = (int *)sub_100D73AC4(a1 + 984, (uint64_t)&v53);
  int v18 = v17;
  if ((int *)(a1 + 992) == v17)
  {
    sub_100D72AA8((uint64_t)&v36);
    sub_1000F2F30(&v36, a2);
    double v46 = a5;
    double v47 = a6;
    double v48 = a4;
    int v38 = 1;
    __int128 v55 = v53;
    uint64_t v56 = v54;
    sub_100D72D34((uint64_t)&v57, (uint64_t)&v36);
    sub_100D73B3C((uint64_t **)(a1 + 984), (uint64_t)&v55, &v55);
    if (v67 < 0) {
      operator delete(__p);
    }
    if (v65 < 0) {
      operator delete(v64);
    }
    if (v63 < 0) {
      operator delete(v62);
    }
    if (v60)
    {
      __int128 v61 = v60;
      operator delete(v60);
    }

    uint64_t v21 = v59;
    if (v59)
    {
      uint64_t v22 = (unint64_t *)&v59->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    uint64_t v24 = v58;
    if (v58)
    {
      uint64_t v25 = (unint64_t *)&v58->__shared_owners_;
      do
        unint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (v50 < 0) {
      operator delete(v49);
    }
    if (v45 < 0) {
      operator delete(v44);
    }
    if (v43 < 0) {
      operator delete(v42);
    }
    if (v40)
    {
      __int128 v41 = v40;
      operator delete(v40);
    }

    int v27 = v39;
    if (v39)
    {
      uint64_t v28 = (unint64_t *)&v39->__shared_owners_;
      do
        unint64_t v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }

    uint64_t v30 = v37;
    if (v37)
    {
      uint64_t v31 = (unint64_t *)&v37->__shared_owners_;
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }

  else if (v17[18] > 95)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v33 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v55) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected out of bounds array access attempt",  (uint8_t *)&v55,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v55, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      LOWORD(v36) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v55,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected out of bounds array access attempt",  &v36,  2);
      unint64_t v35 = (char *)v34;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLParticleMapMatcher::updateCandidate(const CLMapRoadPtr &, BOOL, double, double, double)",  "%s\n",  v34);
    }
  }

  else
  {
    sub_1000F2F30((void *)v17 + 7, a2);
    uint64_t v19 = v18[18];
    int v20 = (double *)&v18[2 * v19 + 14];
    v20[134] = a5;
    v20[230] = a6;
    v20[326] = a4;
    v18[18] = v19 + 1;
  }

void sub_100D5BFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100D5C008(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }

  sub_10000AE14(a1 + 48);
  sub_10000AE14(a1 + 24);
  return a1;
}

uint64_t sub_100D5C080(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }

  sub_10000AE14(a1 + 24);
  return sub_10000AE14(a1);
}

uint64_t sub_100D5C0EC(uint64_t a1)
{
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864)) {
    return 1LL;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v2 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,Assessing candidates", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      *(_WORD *)double v171 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Assessing candidates",  v171,  2);
      double v142 = (uint8_t *)v141;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v141);
      if (v142 != buf) {
        free(v142);
      }
    }
  }

  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v161 = *(void *)(a1 + 8);
  unsigned int v162 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  unint64_t v148 = *(void *)(a1 + 1000);
  uint64_t v6 = *(void **)(a1 + 984);
  int v150 = (int *)(a1 + 992);
  if (v6 != (void *)(a1 + 992))
  {
    while (1)
    {
      uint64_t v7 = v6[7];
      *((_BYTE *)v6 + 200) = 0;
      *((_BYTE *)v6 + 192) = 0;
      if (!v7) {
        break;
      }
      if (*(_BYTE *)(v7 + 17)) {
        *(_BYTE *)(a1 + 1844) = 1;
      }
      __int128 v8 = *(_OWORD *)(a1 + 1128);
      __int128 v9 = *(_OWORD *)(a1 + 1144);
      __int128 v10 = *(_OWORD *)(a1 + 1160);
      *(_OWORD *)(v6 + 627) = *(_OWORD *)(a1 + 1176);
      *(_OWORD *)(v6 + 625) = v10;
      *(_OWORD *)(v6 + 623) = v9;
      *(_OWORD *)(v6 + 621) = v8;
      __int128 v11 = *(_OWORD *)(a1 + 1192);
      __int128 v12 = *(_OWORD *)(a1 + 1208);
      __int128 v13 = *(_OWORD *)(a1 + 1224);
      *(_OWORD *)(v6 + 635) = *(_OWORD *)(a1 + 1240);
      *(_OWORD *)(v6 + 633) = v13;
      *(_OWORD *)(v6 + 631) = v12;
      *(_OWORD *)(v6 + 629) = v11;
      std::string::operator=((std::string *)(v6 + 637), (const std::string *)(a1 + 1256));
      memcpy(v6 + 640, (const void *)(a1 + 1280), 0x118uLL);
      if (!sub_100D3F3A8( v161,  (uint64_t)(v6 + 621),  (double **)v6 + 7,  *((_BYTE *)v6 + 48),  (double *)v6 + 333,  *((_DWORD *)v6 + 18)))
      {
        if (!*(_BYTE *)(a1 + 96)) {
          goto LABEL_218;
        }
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        __int16 v136 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateOnRoad returned false, determining mean road position",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_218;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        *(_WORD *)double v171 = 0;
        LODWORD(v144) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateOnRoad returned false, determining mean road position",  v171,  v144);
        int v135 = (uint8_t *)v143;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v143);
LABEL_233:
        if (v135 != buf) {
          free(v135);
        }
LABEL_218:
        uint64_t v39 = 0LL;
        ++*(_DWORD *)(a1 + 104);
        goto LABEL_219;
      }

      uint64_t v14 = (double *)(v6 + 677);
      *(_OWORD *)(v6 + 677) = xmmword_1012E0180;
      if (*((int *)v6 + 18) < 1)
      {
        int v16 = 0;
      }

      else
      {
        uint64_t v15 = 0LL;
        int v16 = 0;
        do
        {
          if (sub_100D2DBDC( (double *)(a1 + 608),  *((double *)v6 + 640),  *((double *)v6 + 641),  *(double *)&v6[v15 + 141],  *(double *)&v6[v15 + 237],  *(double *)(a1 + 1200)) <= 40.0)
          {
            int v17 = (double *)&v6[v15];
            double v18 = v17[333];
            if (v18 > *((double *)v6 + 678))
            {
              *((double *)v6 + 67_Block_object_dispose(va, 8) = v18;
              double v18 = v17[333];
            }

            ++v16;
            if (v18 < *v14) {
              *uint64_t v14 = v18;
            }
          }

          ++v15;
        }

        while (v15 < *((int *)v6 + 18));
      }

      *((_DWORD *)v6 + 19) = v16;
      uint64_t v19 = *(void *)(a1 + 872);
      uint64_t v20 = *(void *)(a1 + 864);
      if (v20 != v19)
      {
        double v21 = 0.0;
        do
        {
          sub_100D5DAC4((uint64_t *)v20, (uint64_t)buf);
          if (sub_100BDA328((uint64_t)buf, (uint64_t)(v6 + 4)) && *(double *)(v20 + 56) > v21)
          {
            uint64_t v19 = v20;
            double v21 = *(double *)(v20 + 56);
          }

          v20 += 112LL;
        }

        while (v20 != *(void *)(a1 + 872));
        if (v20 != v19)
        {
          sub_1000F2F30(v6 + 10, (uint64_t *)v19);
          uint64_t v22 = *(void *)(v19 + 48);
          __int128 v23 = *(_OWORD *)(v19 + 32);
          *((_OWORD *)v6 + 6) = *(_OWORD *)(v19 + 16);
          *((_OWORD *)v6 + 7) = v23;
          v6[16] = v22;
          __int128 v24 = *(_OWORD *)(v19 + 56);
          *(_OWORD *)((char *)v6 + 145) = *(_OWORD *)(v19 + 65);
          *(_OWORD *)(v6 + 17) = v24;
          if (v6 + 10 != (void *)v19) {
            sub_100BDD0F8( (char *)v6 + 168,  *(char **)(v19 + 88),  *(void *)(v19 + 96),  0x8E38E38E38E38E39LL * ((uint64_t)(*(void *)(v19 + 96) - *(void *)(v19 + 88)) >> 3));
          }
        }
      }

      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        uint64_t v25 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = *(void *)(a1 + 1136);
          uint64_t v27 = v6[4];
          int v28 = *((unsigned __int8 *)v6 + 48);
          int v29 = *((_DWORD *)v6 + 19);
          *(_DWORD *)std::string buf = 134349825;
          uint64_t v176 = v26;
          __int16 v177 = 2049;
          uint64_t v178 = v27;
          __int16 v179 = 1026;
          int v180 = v28;
          __int16 v181 = 1026;
          int v182 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "CLMM,Time,%{public}.1lf,candidate,roadID,%{private}llu,fwd,%{public}d,countAroundMean,%{public}d",  buf,  0x22u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          uint64_t v33 = *(void *)(a1 + 1136);
          uint64_t v34 = v6[4];
          int v35 = *((unsigned __int8 *)v6 + 48);
          int v36 = *((_DWORD *)v6 + 19);
          *(_DWORD *)double v171 = 134349825;
          *(void *)&v171[4] = v33;
          *(_WORD *)&v171[12] = 2049;
          *(void *)&v171[14] = v34;
          *(_WORD *)&v171[22] = 1026;
          *(_DWORD *)&v171[24] = v35;
          *(_WORD *)&v171[28] = 1026;
          *(_DWORD *)&v171[30] = v36;
          LODWORD(v144) = 34;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Time,%{public}.1lf,candidate,roadID,%{private}llu,fwd,%{public}d,countAroundMean,%{public}d",  v171,  v144);
          int v38 = (uint8_t *)v37;
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v37);
          if (v38 != buf) {
            free(v38);
          }
        }
      }

      uint64_t v30 = (int *)v6[1];
      if (v30)
      {
        do
        {
          uint64_t v31 = v30;
          uint64_t v30 = *(int **)v30;
        }

        while (v30);
      }

      else
      {
        do
        {
          uint64_t v31 = (int *)v6[2];
          _ZF = *(void *)v31 == (void)v6;
          uint64_t v6 = v31;
        }

        while (!_ZF);
      }

      uint64_t v6 = v31;
      if (v31 == v150) {
        goto LABEL_53;
      }
    }

    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    double v133 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_ERROR, "CLMM,NULL road, bad candidate", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_218;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    *(_WORD *)double v171 = 0;
    LODWORD(v144) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,NULL road, bad candidate",  v171,  v144);
    int v135 = (uint8_t *)v134;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v134);
    goto LABEL_233;
  }

void sub_100D5DA1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_100D5DAC4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = (std::__shared_weak_count *)a1[1];
  uint64_t v10 = *a1;
  __int128 v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  sub_100BDA324(a2, (uint64_t)&v10, *((_BYTE *)a1 + 20));
  uint64_t v7 = v11;
  if (v11)
  {
    __int128 v8 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

void sub_100D5DB50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100D5DB64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v6;
  if (a1 != a2) {
    sub_100BDD0F8( (char *)(a1 + 88),  *(char **)(a2 + 88),  *(void *)(a2 + 96),  0x8E38E38E38E38E39LL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3));
  }
  return a1;
}

uint64_t sub_100D5DBDC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v246 = *(void *)(a1 + 8);
  uint64_t v247 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  double v5 = *(double *)(a1 + 2064);
  double v6 = 0.0;
  if (v5 >= 0.0)
  {
    else {
      double v6 = 0.0;
    }
  }

  double v7 = *(double *)(a1 + 1224);
  if (v7 >= 0.0)
  {
    double v8 = *(double *)(a1 + 1640);
    if (v5 >= 0.0 && v8 < 2.2) {
      double v7 = (v5 + v7) * 0.5;
    }
    *(double *)(a1 + 1792) = v7;
  }

  else
  {
    *(void *)(a1 + 1792) = 0LL;
    double v8 = *(double *)(a1 + 1640);
    double v7 = 0.0;
  }

  double v10 = v7 * v8;
  if (*(double *)(a1 + 2048) > 0.0 && v8 < 2.2)
  {
    double v12 = sub_100D2DBDC( (double *)(a1 + 608),  *(double *)(a1 + 1184),  *(double *)(a1 + 1192),  *(double *)(a1 + 2024),  *(double *)(a1 + 2032),  *(double *)(a1 + 1200));
    if (v12 > 300.0)
    {
      if (!*(_BYTE *)(a1 + 96)) {
        goto LABEL_84;
      }
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      uint64_t v26 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = *(void *)(a1 + 1640);
        *(_DWORD *)std::string buf = 134349312;
        *(double *)&uint8_t buf[4] = v12;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&_BYTE buf[14] = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "CLMM, Position jump(m),%{public}.1lf,dT(s),%{public}.1lf",  buf,  0x16u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_84;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      uint64_t v28 = *(void *)(a1 + 1640);
      LODWORD(v248[0]) = 134349312;
      *(double *)((char *)v248 + 4) = v12;
      WORD2(v248[1]) = 2050;
      *(void *)((char *)&v248[1] + 6) = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM, Position jump(m),%{public}.1lf,dT(s),%{public}.1lf",  v248,  22);
      uint64_t v30 = (char *)v29;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v29);
LABEL_417:
      if (v30 != buf) {
        free(v30);
      }
      goto LABEL_84;
    }

    *(double *)(a1 + 1800) = v10;
    if (*(double *)(a1 + 1792) <= 0.0 || v12 < 0.0 || *(_BYTE *)(a1 + 1356))
    {
      if (v12 >= 0.0 && !*(_BYTE *)(a1 + 1356)) {
        *(double *)(a1 + 1800) = v12;
      }
    }

    else
    {
      *(double *)(a1 + 1800) = (v10 + v12) * 0.5;
    }
  }

  else
  {
    *(double *)(a1 + 1800) = v10;
    double v12 = -1.0;
  }

  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    __int128 v13 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)(a1 + 1136);
      uint64_t v15 = *(void *)(a1 + 1800);
      *(_DWORD *)std::string buf = 134349824;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&_BYTE buf[14] = v15;
      *(_WORD *)&_BYTE buf[22] = 2050;
      *(double *)&_BYTE buf[24] = v10;
      LOWORD(v255[0]) = 2050;
      *(double *)((char *)v255 + 2) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,predictionAndUpdate,distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      uint64_t v213 = *(void *)(a1 + 1136);
      uint64_t v214 = *(void *)(a1 + 1800);
      LODWORD(v248[0]) = 134349824;
      *(void *)((char *)v248 + 4) = v213;
      WORD2(v248[1]) = 2050;
      *(void *)((char *)&v248[1] + 6) = v214;
      HIWORD(v248[2]) = 2050;
      *(double *)&v248[3] = v10;
      LOWORD(v248[4]) = 2050;
      *(double *)((char *)&v248[4] + 2) = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,predictionAndUpdate,distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf",  v248,  42);
      uint64_t v216 = (char *)v215;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v215);
      if (v216 != buf) {
        free(v216);
      }
    }
  }

  *(void *)(a1 + 160_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  uint64_t v16 = *(void *)(a1 + 872);
  uint64_t v17 = *(void *)(a1 + 864);
  uint64_t v18 = v16 - v17;
  if (v16 == v17)
  {
LABEL_360:
    uint64_t v44 = 1LL;
    goto LABEL_361;
  }

  double v19 = *(double *)(a1 + 1800);
  double v20 = *(double *)(a1 + 1640);
  double v21 = v20 * v20;
  if (*(_BYTE *)(a1 + 1356) && v20 > 4.9)
  {
    double v22 = 24.01;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      __int128 v23 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134349312;
        *(double *)&uint8_t buf[4] = v21;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&_BYTE buf[14] = 0x4038028F5C28F5C4LL;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "CLMM,dT2 limited,from,%{public}.1lf,to,%{public}.1lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        LODWORD(v248[0]) = 134349312;
        *(double *)((char *)v248 + 4) = v21;
        WORD2(v248[1]) = 2050;
        *(void *)((char *)&v248[1] + 6) = 0x4038028F5C28F5C4LL;
        LODWORD(v227) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,dT2 limited,from,%{public}.1lf,to,%{public}.1lf",  v248,  v227);
        uint64_t v25 = (char *)v24;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v24);
        if (v25 != buf) {
          free(v25);
        }
      }
    }
  }

  else
  {
    double v22 = v20 * v20;
  }

  double v31 = v22 * ((v6 * v6 + *(double *)(a1 + 1312) * *(double *)(a1 + 1312)) * 0.25);
  *(double *)(a1 + 180_Block_object_dispose(va, 8) = v31;
  double v32 = *(double *)(a1 + 1792);
  double v33 = v22 * 3.0;
  if (v32 >= 8.05555556) {
    double v33 = v22;
  }
  *(double *)(a1 + 1816) = v33;
  double v34 = v22 * (v32 * v32 * 0.25);
  *(double *)(a1 + 1824) = v34;
  *(double *)(a1 + 1832) = sqrt(v31 + v33 + v34);
  double v35 = *(double *)(a1 + 1640);
  if (v35 <= 0.0 || (v35 > 4.9 ? (BOOL v36 = *(_BYTE *)(a1 + 1356) == 0) : (BOOL v36 = 0), v36 || v35 > 75.0))
  {
    if (!*(_BYTE *)(a1 + 96)) {
      goto LABEL_84;
    }
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v42 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *(void *)(a1 + 1640);
      *(_DWORD *)std::string buf = 134349568;
      *(void *)&uint8_t buf[4] = v43;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&_BYTE buf[14] = 0x401399999999999ALL;
      *(_WORD *)&_BYTE buf[22] = 2050;
      *(void *)&_BYTE buf[24] = 0x4052C00000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "#Warning CLMM,unexpected,dT,%{public}.1lf,minMoreThan,0,threshold1,%{public}.1lf,threshold2,%{public}.1lf",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_84;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v217 = *(void *)(a1 + 1640);
    LODWORD(v248[0]) = 134349568;
    *(void *)((char *)v248 + 4) = v217;
    WORD2(v248[1]) = 2050;
    *(void *)((char *)&v248[1] + 6) = 0x401399999999999ALL;
    HIWORD(v248[2]) = 2050;
    v248[3] = 0x4052C00000000000LL;
    LODWORD(v227) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "#Warning CLMM,unexpected,dT,%{public}.1lf,minMoreThan,0,threshold1,%{public}.1lf,threshold2,%{public}.1lf",  v248,  v227);
    uint64_t v30 = (char *)v218;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v218);
    goto LABEL_417;
  }

  uint64_t v242 = (uint64_t *)(a1 + 864);
  if (*(_BYTE *)(a1 + 2688))
  {
    double v37 = sub_100D2DBDC( (double *)(a1 + 608),  *(double *)(a1 + 2120),  *(double *)(a1 + 2128),  *(double *)(a1 + 2744),  *(double *)(a1 + 2752),  *(double *)(a1 + 1200));
    int v38 = *(_DWORD *)(a1 + 2824);
    int v39 = 4 * v38;
    if (v38 >= 1)
    {
      if (v39 <= 1) {
        int v40 = 1;
      }
      else {
        int v40 = 4 * v38;
      }
      unint64_t v41 = *(void *)(a1 + 872);
      do
      {
        if (v41 >= *(void *)(a1 + 880))
        {
          unint64_t v41 = sub_100D73E7C(v242, a1 + 2712);
        }

        else
        {
          sub_100D73FA0(a1 + 880, v41, a1 + 2712);
          v41 += 112LL;
          *(void *)(a1 + 872) = v41;
        }

        *(void *)(a1 + 872) = v41;
        --v40;
      }

      while (v40);
    }
  }

  else
  {
    int v39 = 0;
    double v37 = 0.0;
  }

  uint64_t v232 = v18;
  int v234 = v39;
  if (*(_BYTE *)(a1 + 2232))
  {
    uint64_t v45 = a1 + 3048;
    uint64_t v46 = a1 + 3096;
    uint64_t v47 = *(void *)(a1 + 3104);
    if (v47 == v46)
    {
      int v48 = 0;
    }

    else
    {
      int v48 = 0;
      do
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&_BYTE buf[24] = 0;
        v259 = 0LL;
        uint64_t v260 = 0LL;
        std::stringbuf::string_type __p = 0LL;
        memset(v255, 0, sizeof(v255));
        __int128 v256 = 0u;
        char v257 = 0;
        sub_1000F2F30(buf, (uint64_t *)(v47 + 16));
        *(void *)&v255[1] = *(void *)(v47 + 40);
        buf[20] = *(_BYTE *)(v47 + 32);
        v48 += 6;
        unint64_t v49 = *(void *)(a1 + 872);
        int v50 = 6;
        do
        {
          if (v49 >= *(void *)(a1 + 880))
          {
            unint64_t v49 = sub_100D73E7C(v242, (uint64_t)buf);
          }

          else
          {
            sub_100D73FA0(a1 + 880, v49, (uint64_t)buf);
            v49 += 112LL;
            *(void *)(a1 + 872) = v49;
          }

          *(void *)(a1 + 872) = v49;
          --v50;
        }

        while (v50);
        if (__p)
        {
          v259 = __p;
          operator delete(__p);
        }

        uint64_t v51 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          uint64_t v52 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }

        uint64_t v47 = *(void *)(v47 + 8);
      }

      while (v47 != v46);
    }

    uint64_t v55 = *(void *)(a1 + 3056);
    int v240 = v48;
    if (v55 != v45)
    {
      int v240 = v48;
      do
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&_BYTE buf[24] = 0;
        v259 = 0LL;
        uint64_t v260 = 0LL;
        std::stringbuf::string_type __p = 0LL;
        memset(v255, 0, sizeof(v255));
        __int128 v256 = 0u;
        char v257 = 0;
        sub_1000F2F30(buf, (uint64_t *)(v55 + 16));
        *(void *)&v255[1] = *(void *)(v55 + 40);
        buf[20] = *(_BYTE *)(v55 + 32);
        v240 += 6;
        unint64_t v56 = *(void *)(a1 + 872);
        int v57 = 6;
        do
        {
          if (v56 >= *(void *)(a1 + 880))
          {
            unint64_t v56 = sub_100D73E7C(v242, (uint64_t)buf);
          }

          else
          {
            sub_100D73FA0(a1 + 880, v56, (uint64_t)buf);
            v56 += 112LL;
            *(void *)(a1 + 872) = v56;
          }

          *(void *)(a1 + 872) = v56;
          --v57;
        }

        while (v57);
        if (__p)
        {
          v259 = __p;
          operator delete(__p);
        }

        char v58 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          int v59 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }

        uint64_t v55 = *(void *)(v55 + 8);
      }

      while (v55 != v45);
    }

    int v54 = v48 + v234 + v240;
    if (*(_BYTE *)(a1 + 2232))
    {
      unint64_t v61 = *(void *)(a1 + 872);
      int v62 = 12;
      do
      {
        if (v61 >= *(void *)(a1 + 880))
        {
          unint64_t v61 = sub_100D73E7C(v242, a1 + 1856);
        }

        else
        {
          sub_100D73FA0(a1 + 880, v61, a1 + 1856);
          v61 += 112LL;
          *(void *)(a1 + 872) = v61;
        }

        *(void *)(a1 + 872) = v61;
        --v62;
      }

      while (v62);
      v54 += 12;
      int v229 = 12;
    }

    else
    {
      int v229 = 0;
    }
  }

  else
  {
    int v240 = 0;
    int v229 = 0;
    int v54 = v39;
  }

  int v239 = v54;
  if (!*(_BYTE *)(a1 + 114)
    || sub_100ECF4A4(a1 + 48, *(double *)(a1 + 1152), 6.0)
    || (uint64_t v63 = *(void *)(a1 + 4048), v236 = *(void *)(a1 + 4056), v63 == v236))
  {
    int v238 = 0;
  }

  else
  {
    int v238 = 0;
    do
    {
      uint64_t v64 = *(void *)(v63 + 8);
      *(void *)v252 = *(void *)v63;
      *(void *)&v252[8] = v64;
      if (v64)
      {
        char v65 = (unint64_t *)(v64 + 8);
        do
          unint64_t v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }

      __int128 v67 = *(_OWORD *)(v63 + 16);
      __int128 v68 = *(_OWORD *)(v63 + 32);
      *(void *)&v253[16] = *(void *)(v63 + 48);
      *(_OWORD *)&v252[16] = v67;
      *(_OWORD *)v253 = v68;
      v238 += 2;
      v239 += 2;
      char v69 = 1;
      do
      {
        char v70 = v69;
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&_BYTE buf[24] = 0;
        v259 = 0LL;
        uint64_t v260 = 0LL;
        std::stringbuf::string_type __p = 0LL;
        memset(v255, 0, sizeof(v255));
        __int128 v256 = 0u;
        char v257 = 0;
        sub_1000F2F30(buf, (uint64_t *)v252);
        *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&v252[16];
        v255[0] = *(_OWORD *)v253;
        *(void *)&v255[1] = *(void *)&v253[16];
        unint64_t v71 = *(void *)(a1 + 872);
        if (v71 >= *(void *)(a1 + 880))
        {
          uint64_t v72 = sub_100D73E7C(v242, (uint64_t)buf);
        }

        else
        {
          sub_100D73FA0(a1 + 880, *(void *)(a1 + 872), (uint64_t)buf);
          uint64_t v72 = v71 + 112;
          *(void *)(a1 + 872) = v71 + 112;
        }

        *(void *)(a1 + 872) = v72;
        if (__p)
        {
          v259 = __p;
          operator delete(__p);
        }

        uint64_t v73 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          float v74 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }

        char v69 = 0;
      }

      while ((v70 & 1) != 0);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      uint64_t v76 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v77 = *(void *)(a1 + 1136);
        uint64_t v78 = **(void **)v252;
        *(_DWORD *)std::string buf = 134350337;
        *(void *)&uint8_t buf[4] = v77;
        *(_WORD *)&_BYTE buf[12] = 2049;
        *(void *)&_BYTE buf[14] = *(void *)v253;
        *(_WORD *)&_BYTE buf[22] = 2049;
        *(void *)&_BYTE buf[24] = *(void *)&v253[8];
        LOWORD(v255[0]) = 2050;
        *(double *)((char *)v255 + 2) = *(float *)&v252[24];
        WORD5(v255[0]) = 2049;
        *(void *)((char *)v255 + 12) = v78;
        WORD2(v255[1]) = 1026;
        *(_DWORD *)((char *)&v255[1] + 6) = v252[20];
        _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,routeHint,add particle,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{pr ivate}lld,fwd,%{public}d",  buf,  0x3Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        uint64_t v82 = *(void *)(a1 + 1136);
        uint64_t v83 = **(void **)v252;
        LODWORD(v248[0]) = 134350337;
        *(void *)((char *)v248 + 4) = v82;
        WORD2(v248[1]) = 2049;
        *(void *)((char *)&v248[1] + 6) = *(void *)v253;
        HIWORD(v248[2]) = 2049;
        v248[3] = *(void *)&v253[8];
        LOWORD(v248[4]) = 2050;
        *(double *)((char *)&v248[4] + 2) = *(float *)&v252[24];
        WORD1(v248[5]) = 2049;
        *(void *)((char *)&v248[5] + 4) = v83;
        WORD2(v248[6]) = 1026;
        *(_DWORD *)((char *)&v248[6] + 6) = v252[20];
        LODWORD(v227) = 58;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,routeHint,add particle,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{pr ivate}lld,fwd,%{public}d",  v248,  v227);
        unint64_t v85 = (char *)v84;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v84);
        if (v85 != buf) {
          free(v85);
        }
      }

      __int128 v79 = *(std::__shared_weak_count **)&v252[8];
      if (*(void *)&v252[8])
      {
        __int128 v80 = (unint64_t *)(*(void *)&v252[8] + 8LL);
        do
          unint64_t v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }

      v63 += 56LL;
    }

    while (v63 != v236);
  }

  if (*(_BYTE *)(a1 + 2684))
  {
    uint64_t v243 = (uint64_t)&v243;
    v244 = &v243;
    uint64_t v245 = 0LL;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, double))(*(void *)v246 + 64LL))(v246, &v243, 40.0) & 1) == 0
      && *(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      int v86 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEBUG,  "CLMM,railway search,roadsWithinDistance returned false",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        LOWORD(v248[0]) = 0;
        LODWORD(v227) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,railway search,roadsWithinDistance returned false",  v248,  v227);
        v225 = (char *)v224;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v224);
        if (v225 != buf) {
          free(v225);
        }
      }
    }

    if (!v245 || (unint64_t v87 = v244, v244 == &v243))
    {
      int v88 = 0;
    }

    else
    {
      int v88 = 0;
      do
      {
        __int128 v89 = (uint64_t **)(v87 + 2);
        if (*(_BYTE *)(v87[2] + 17))
        {
          memset(v248, 0, 20);
          WORD2(v248[2]) = 1;
          LODWORD(v248[3]) = 0;
          uint64_t v250 = 0LL;
          uint64_t v251 = 0LL;
          uint64_t v249 = 0LL;
          memset(&v248[4], 0, 49);
          sub_1000F2F30(v248, v87 + 2);
          __int128 v90 = *((_OWORD *)v87 + 2);
          __int128 v91 = *((_OWORD *)v87 + 3);
          v248[6] = v87[8];
          *(_OWORD *)&v248[2] = v90;
          *(_OWORD *)&v248[4] = v91;
          unint64_t v92 = *(void *)(a1 + 872);
          if (v92 >= *(void *)(a1 + 880))
          {
            unint64_t v93 = sub_100D73E7C(v242, (uint64_t)v248);
          }

          else
          {
            sub_100D73FA0(a1 + 880, *(void *)(a1 + 872), (uint64_t)v248);
            unint64_t v93 = v92 + 112;
            *(void *)(a1 + 872) = v93;
          }

          *(void *)(a1 + 872) = v93;
          if (v93 >= *(void *)(a1 + 880))
          {
            uint64_t v94 = sub_100D73E7C(v242, (uint64_t)v248);
          }

          else
          {
            sub_100D73FA0(a1 + 880, v93, (uint64_t)v248);
            uint64_t v94 = v93 + 112;
            *(void *)(a1 + 872) = v93 + 112;
          }

          *(void *)(a1 + 872) = v94;
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_1018819B8);
            }
            uint64_t v95 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v96 = *(void *)(a1 + 1136);
              uint64_t v97 = **v89;
              *(_DWORD *)std::string buf = 134350081;
              *(void *)&uint8_t buf[4] = v96;
              *(_WORD *)&_BYTE buf[12] = 2049;
              *(void *)&_BYTE buf[14] = v248[4];
              *(_WORD *)&_BYTE buf[22] = 2049;
              *(void *)&_BYTE buf[24] = v248[5];
              LOWORD(v255[0]) = 2050;
              *(double *)((char *)v255 + 2) = *(float *)&v248[3];
              WORD5(v255[0]) = 2049;
              *(void *)((char *)v255 + 12) = v97;
              _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEBUG,  "CLMM,railwayParticle,timestamp,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.3lf, rseg,%{private}lld",  buf,  0x34u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              uint64_t v101 = *(void *)(a1 + 1136);
              uint64_t v102 = **v89;
              *(_DWORD *)v252 = 134350081;
              *(void *)&v252[4] = v101;
              *(_WORD *)&v252[12] = 2049;
              *(void *)&v252[14] = v248[4];
              *(_WORD *)&v252[22] = 2049;
              *(void *)&v252[24] = v248[5];
              *(_WORD *)v253 = 2050;
              *(double *)&v253[2] = *(float *)&v248[3];
              *(_WORD *)&v253[10] = 2049;
              *(void *)&v253[12] = v102;
              LODWORD(v227) = 52;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,railwayParticle,timestamp,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.3lf, rseg,%{private}lld",  v252,  v227);
              uint64_t v104 = (char *)v103;
              sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v103);
              if (v104 != buf) {
                free(v104);
              }
            }
          }

          if (v249)
          {
            uint64_t v250 = v249;
            operator delete(v249);
          }

          double v98 = (std::__shared_weak_count *)v248[1];
          if (v248[1])
          {
            int v99 = (unint64_t *)(v248[1] + 8LL);
            do
              unint64_t v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }

          v88 += 2;
        }

        unint64_t v87 = (uint64_t *)v87[1];
      }

      while (v87 != &v243);
    }

    sub_100890314(&v243);
  }

  else
  {
    int v88 = 0;
  }

  int v105 = v239;
  if (*(_BYTE *)(a1 + 2512) && *(_BYTE *)(a1 + 2233))
  {
    unint64_t v106 = *(void *)(a1 + 872);
    int v107 = 4;
    do
    {
      if (v106 >= *(void *)(a1 + 880))
      {
        unint64_t v106 = sub_100D73E7C(v242, a1 + 2520);
      }

      else
      {
        sub_100D73FA0(a1 + 880, v106, a1 + 2520);
        v106 += 112LL;
        *(void *)(a1 + 872) = v106;
      }

      *(void *)(a1 + 872) = v106;
      --v107;
    }

    while (v107);
    int v105 = v239 + 4;
    int v108 = 4;
  }

  else
  {
    int v108 = 0;
  }

  uint64_t v237 = 0x6DB6DB6DB6DB6DB7LL * (v232 >> 4);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v109 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      int v110 = -1227133513 * ((*(void *)(a1 + 872) - *(void *)(a1 + 864)) >> 4);
      *(_DWORD *)std::string buf = 67242240;
      *(_DWORD *)&uint8_t buf[4] = v110;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&_OWORD buf[10] = -1227133513 * (v232 >> 4);
      *(_WORD *)&_BYTE buf[14] = 1026;
      *(_DWORD *)&uint8_t buf[16] = v105;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&_BYTE buf[22] = v234;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&_BYTE buf[28] = 0;
      LOWORD(v255[0]) = 1026;
      *(_DWORD *)((char *)v255 + 2) = v240;
      WORD3(v255[0]) = 1026;
      DWORD2(v255[0]) = v229;
      WORD6(v255[0]) = 1026;
      *(_DWORD *)((char *)v255 + 14) = v108;
      WORD1(v255[1]) = 1026;
      DWORD1(v255[1]) = v238;
      _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEBUG,  "CLMM,prediction,NrParticles,%{public}d,NrStandard,%{public}d,NrNew,%{public}d,NrPriorIntersectionParticles,%{pub lic}d,NrNewAlternateCandidateNoiseParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPri or,%{public}d,NrNewAmbiguous,%{public}d,NrNewRouteParticles,%{public}d",  buf,  0x38u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      int v219 = -1227133513 * ((*(void *)(a1 + 872) - *(void *)(a1 + 864)) >> 4);
      LODWORD(v248[0]) = 67242240;
      HIDWORD(v248[0]) = v219;
      LOWORD(v248[1]) = 1026;
      *(_DWORD *)((char *)&v248[1] + 2) = -1227133513 * (v232 >> 4);
      HIWORD(v248[1]) = 1026;
      LODWORD(v248[2]) = v105;
      WORD2(v248[2]) = 1026;
      *(_DWORD *)((char *)&v248[2] + 6) = v234;
      WORD1(v248[3]) = 1026;
      HIDWORD(v248[3]) = 0;
      LOWORD(v248[4]) = 1026;
      *(_DWORD *)((char *)&v248[4] + 2) = v240;
      HIWORD(v248[4]) = 1026;
      LODWORD(v248[5]) = v229;
      WORD2(v248[5]) = 1026;
      *(_DWORD *)((char *)&v248[5] + 6) = v108;
      WORD1(v248[6]) = 1026;
      HIDWORD(v248[6]) = v238;
      LODWORD(v227) = 56;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,prediction,NrParticles,%{public}d,NrStandard,%{public}d,NrNew,%{public}d,NrPriorIntersectionParticles,%{pub lic}d,NrNewAlternateCandidateNoiseParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPri or,%{public}d,NrNewAmbiguous,%{public}d,NrNewRouteParticles,%{public}d",  v248,  v227);
      unint64_t v221 = (char *)v220;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v220);
      if (v221 != buf) {
        free(v221);
      }
    }
  }

  uint64_t v111 = *(void *)(a1 + 864);
  if (v111 == *(void *)(a1 + 872))
  {
    double v115 = 0.0;
LABEL_318:
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      uint64_t v175 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349056;
        *(double *)&uint8_t buf[4] = v115;
        _os_log_impl( (void *)&_mh_execute_header,  v175,  OS_LOG_TYPE_ERROR,  "CLMM,totalScore<=0,%{public}.1lf",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        LODWORD(v248[0]) = 134349056;
        *(double *)((char *)v248 + 4) = v115;
        LODWORD(v227) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,totalScore<=0,%{public}.1lf",  v248,  v227);
        uint64_t v223 = (char *)v222;
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v222);
        if (v223 != buf) {
          free(v223);
        }
      }
    }

    uint64_t v176 = *(void *)(a1 + 872);
    uint64_t v177 = *(void *)(a1 + 864);
    while (v176 != v177)
    {
      v176 -= 112LL;
      sub_100D738F8(a1 + 880, v176);
    }

    uint64_t v44 = 0LL;
    *(void *)(a1 + 872) = v177;
    goto LABEL_85;
  }

  int v112 = 0;
  int v231 = v234 - 1227133513 * (v232 >> 4);
  int v230 = v240 + v231;
  int v113 = v238 + v240 + v231 + v229;
  if (v113 <= v88 + v113) {
    v113 += v88;
  }
  int v228 = v113;
  uint64_t v241 = a1 + 912;
  double v233 = v19;
  if (v19 + v37 + 0.0 <= 0.0) {
    double v114 = 0.1;
  }
  else {
    double v114 = v19 + v37 + 0.0;
  }
  double v115 = 0.0;
  uint64_t v116 = (double *)(a1 + 1128);
  double v235 = v114;
  while (1)
  {
    if (v112 >= (int)v237)
    {
      if (v112 >= v231)
      {
        if (v112 >= v230)
        {
          if (v112 >= v230 + v229)
          {
            if (v112 >= v228)
            {
              if (byte_101990A48)
              {
                byte_101990A48 = 0;
                float v168 = *(float *)&dword_101990A4C;
              }

              else
              {
                do
                {
                  float v169 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                  float v170 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                  float v171 = (float)(v170 * v170) + (float)(v169 * v169);
                }

                while (v171 >= 1.0);
                float v168 = 0.0;
                if (v171 != 0.0)
                {
                  float v172 = sqrtf((float)(logf((float)(v170 * v170) + (float)(v169 * v169)) * -2.0) / v171);
                  *(float *)&dword_101990A4C = v170 * v172;
                  byte_101990A48 = 1;
                  float v168 = v169 * v172;
                }
              }

              double v114 = v235;
              if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v246 + 88LL))( v246,  v111,  v241,  v233 + *(double *)(a1 + 1832) * v168) & 1) == 0)
              {
                if (!*(_BYTE *)(a1 + 96)) {
                  goto LABEL_409;
                }
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_1018819B8);
                }
                v212 = (os_log_s *)qword_1019348B8;
                if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)std::string buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v212,  OS_LOG_TYPE_DEBUG,  "CLMM,moveOnRoad returned false,alternate ambiguous particles",  buf,  2u);
                }

                if (!sub_1002921D0(115, 2))
                {
LABEL_409:
                  uint64_t v44 = 0LL;
                  ++*(_DWORD *)(a1 + 108);
                  goto LABEL_361;
                }

                bzero(buf, 0x65CuLL);
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_1018819B8);
                }
                LOWORD(v248[0]) = 0;
                LODWORD(v227) = 2;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,moveOnRoad returned false,alternate ambiguous particles",  v248,  v227);
                uint64_t v207 = (char *)v226;
                sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v226);
LABEL_435:
                if (v207 != buf) {
                  free(v207);
                }
                goto LABEL_409;
              }
            }
          }

          else
          {
            if (byte_101990A48)
            {
              byte_101990A48 = 0;
              float v136 = *(float *)&dword_101990A4C;
            }

            else
            {
              do
              {
                float v137 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                float v138 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                float v139 = (float)(v138 * v138) + (float)(v137 * v137);
              }

              while (v139 >= 1.0);
              float v136 = 0.0;
              if (v139 != 0.0)
              {
                float v140 = sqrtf((float)(logf((float)(v138 * v138) + (float)(v137 * v137)) * -2.0) / v139);
                *(float *)&dword_101990A4C = v138 * v140;
                byte_101990A48 = 1;
                float v136 = v137 * v140;
              }
            }

            double v114 = v235;
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v246 + 88LL))( v246,  v111,  v241,  *(double *)(a1 + 1832) * v136 + 0.0) & 1) == 0)
            {
              if (!*(_BYTE *)(a1 + 96)) {
                goto LABEL_409;
              }
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              unint64_t v210 = (os_log_s *)qword_1019348B8;
              if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v210,  OS_LOG_TYPE_DEBUG,  "CLMM,moveOnRoad returned false,prior snap particles",  buf,  2u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_409;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              LOWORD(v248[0]) = 0;
              LODWORD(v227) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,moveOnRoad returned false,prior snap particles",  v248,  v227);
              uint64_t v207 = (char *)v211;
              sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v211);
              goto LABEL_435;
            }
          }
        }

        else if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v246 + 88LL))( v246,  v111,  v241,  (double)((v112 - v231) % 6 + 1) * 3.5 + 0.0) & 1) == 0)
        {
          if (!*(_BYTE *)(a1 + 96)) {
            goto LABEL_409;
          }
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          v208 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v208,  OS_LOG_TYPE_DEBUG,  "CLMM,moveOnRoad returned false,fwd intersection particles",  buf,  2u);
          }

          if (!sub_1002921D0(115, 2)) {
            goto LABEL_409;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          LOWORD(v248[0]) = 0;
          LODWORD(v227) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,moveOnRoad returned false,fwd intersection particles",  v248,  v227);
          uint64_t v207 = (char *)v209;
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v209);
          goto LABEL_435;
        }
      }

      else
      {
        uint64_t v125 = *(void *)(v111 + 8);
        v248[0] = *(void *)v111;
        v248[1] = v125;
        if (v125)
        {
          uint64_t v126 = (unint64_t *)(v125 + 8);
          do
            unint64_t v127 = __ldxr(v126);
          while (__stxr(v127 + 1, v126));
        }

        __int128 v128 = *(_OWORD *)(v111 + 16);
        __int128 v129 = *(_OWORD *)(v111 + 32);
        v248[6] = *(void *)(v111 + 48);
        *(_OWORD *)&v248[2] = v128;
        *(_OWORD *)&v248[4] = v129;
        __int128 v130 = *(_OWORD *)(v111 + 65);
        *(_OWORD *)&v248[7] = *(_OWORD *)(v111 + 56);
        *(_OWORD *)((char *)&v248[8] + 1) = v130;
        uint64_t v250 = 0LL;
        uint64_t v251 = 0LL;
        uint64_t v249 = 0LL;
        sub_100BDD080( &v249,  *(const void **)(v111 + 88),  *(void *)(v111 + 96),  0x8E38E38E38E38E39LL * ((uint64_t)(*(void *)(v111 + 96) - *(void *)(v111 + 88)) >> 3));
        int v131 = 4;
        while (1)
        {
          char v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v246 + 88LL))( v246,  v111,  v241,  v114);
          if ((v132 & 1) == 0) {
            break;
          }
          if (**(void **)v111 == *(void *)v248[0] && *(unsigned __int8 *)(v111 + 20) != BYTE4(v248[2]))
          {
            sub_1000F2F30((void *)v111, v248);
            __int128 v133 = *(_OWORD *)&v248[2];
            __int128 v134 = *(_OWORD *)&v248[4];
            *(void *)(v111 + 4_Block_object_dispose(va, 8) = v248[6];
            *(_OWORD *)(v111 + 16) = v133;
            *(_OWORD *)(v111 + 32) = v134;
            __int128 v135 = *(_OWORD *)&v248[7];
            *(_OWORD *)(v111 + 65) = *(_OWORD *)((char *)&v248[8] + 1);
            *(_OWORD *)(v111 + 56) = v135;
            if ((void *)v111 != v248) {
              sub_100BDD0F8( (char *)(v111 + 88),  (char *)v249,  (uint64_t)v250,  0x8E38E38E38E38E39LL * ((v250 - (_BYTE *)v249) >> 3));
            }
            if (--v131) {
              continue;
            }
          }

          goto LABEL_275;
        }

        if (*(_BYTE *)(a1 + 96))
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          __int16 v141 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v141,  OS_LOG_TYPE_DEBUG,  "CLMM,moveOnRoad returned false,prior intersection particles",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_1018819B8);
            }
            *(_WORD *)v252 = 0;
            LODWORD(v227) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,moveOnRoad returned false,prior intersection particles",  v252,  v227);
            __int16 v174 = (char *)v173;
            sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v173);
            if (v174 != buf) {
              free(v174);
            }
            double v114 = v235;
          }
        }

        ++*(_DWORD *)(a1 + 108);
LABEL_275:
        if (v249)
        {
          uint64_t v250 = v249;
          operator delete(v249);
        }

        double v142 = (std::__shared_weak_count *)v248[1];
        uint64_t v116 = (double *)(a1 + 1128);
        if (v248[1])
        {
          __int16 v143 = (unint64_t *)(v248[1] + 8LL);
          do
            unint64_t v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }

        if ((v132 & 1) == 0)
        {
          uint64_t v44 = 0LL;
          goto LABEL_361;
        }
      }
    }

    else
    {
      if (byte_101990A48)
      {
        byte_101990A48 = 0;
        float v117 = *(float *)&dword_101990A4C;
      }

      else
      {
        do
        {
          float v118 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v119 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v120 = (float)(v119 * v119) + (float)(v118 * v118);
        }

        while (v120 >= 1.0);
        float v117 = 0.0;
        if (v120 != 0.0)
        {
          float v121 = sqrtf((float)(logf((float)(v119 * v119) + (float)(v118 * v118)) * -2.0) / v120);
          *(float *)&dword_101990A4C = v119 * v121;
          byte_101990A48 = 1;
          float v117 = v118 * v121;
        }
      }

      double v122 = *(double *)(a1 + 1832);
      double v123 = v122 * v117;
      if ((-1171354717 * v112) <= 0x1745D174 && v122 < 8.0)
      {
        double v123 = fabs(v123) / v122 * 8.0;
        double v114 = v235;
      }

      else
      {
        double v114 = v235;
      }

      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v246 + 88LL))( v246,  v111,  v241,  v233 + v123) & 1) == 0)
      {
        if (!*(_BYTE *)(a1 + 96)) {
          goto LABEL_409;
        }
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        v205 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v205,  OS_LOG_TYPE_DEBUG,  "CLMM,moveOnRoad returned false,standard particles",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_409;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        LOWORD(v248[0]) = 0;
        LODWORD(v227) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,moveOnRoad returned false,standard particles",  v248,  v227);
        uint64_t v207 = (char *)v206;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v206);
        goto LABEL_435;
      }
    }

    if (!*(void *)v111) {
      break;
    }
    if (*(double *)(v111 + 32) == 0.0 && *(double *)(v111 + 40) == 0.0)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      unint64_t v203 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v203,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected particle with snapLat == snapLon == 0",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        LOWORD(v248[0]) = 0;
        LODWORD(v227) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected particle with snapLat == snapLon == 0",  v248,  v227);
        uint64_t v30 = (char *)v204;
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v204);
        goto LABEL_417;
      }

      goto LABEL_84;
    }

    *(void *)(v111 + 56) = 0LL;
    *(void *)(v111 + 64) = 0LL;
    *(void *)(v111 + 72) = 0LL;
    unsigned __int8 v145 = (char **)(v111 + 88);
    *(void *)(v111 + 96) = *(void *)(v111 + 88);
    memset(buf, 0, 24);
    *(void *)&_BYTE buf[24] = 0x3FF0000000000000LL;
    memset(v255, 0, sizeof(v255));
    LODWORD(v256) = 0;
    sub_100D53370(a1, a1 + 656, v111, v116, (uint64_t)buf);
    unint64_t v146 = *(void *)(v111 + 104);
    uint64_t v147 = *(void *)&buf[16];
    *(void *)(v111 + 56) = *(void *)buf;
    *(void *)(v111 + 72) = v147;
    LODWORD(v256) = 1;
    *(void *)&_BYTE buf[24] = 0x3FF0000000000000LL;
    unint64_t v148 = *(void *)(v111 + 96);
    if (v148 >= v146)
    {
      unint64_t v153 = 0x8E38E38E38E38E39LL * ((uint64_t)(v148 - (void)*v145) >> 3);
      unint64_t v154 = v153 + 1;
      if (v153 + 1 > 0x38E38E38E38E38ELL) {
        sub_100007008();
      }
      unint64_t v155 = 0x8E38E38E38E38E39LL * ((uint64_t)(v146 - (void)*v145) >> 3);
      if (2 * v155 > v154) {
        unint64_t v154 = 2 * v155;
      }
      if (v155 >= 0x1C71C71C71C71C7LL) {
        unint64_t v156 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v156 = v154;
      }
      if (v156) {
        uint64_t v157 = (char *)sub_100046304(v111 + 104, v156);
      }
      else {
        uint64_t v157 = 0LL;
      }
      __int16 v158 = &v157[72 * v153];
      *(_OWORD *)__int16 v158 = *(_OWORD *)buf;
      __int128 v159 = *(_OWORD *)&buf[16];
      __int128 v160 = v255[0];
      __int128 v161 = v255[1];
      *((void *)v158 + _Block_object_dispose(va, 8) = v256;
      *((_OWORD *)v158 + 2) = v160;
      *((_OWORD *)v158 + 3) = v161;
      *((_OWORD *)v158 + 1) = v159;
      int v163 = *(char **)(v111 + 88);
      unsigned int v162 = *(char **)(v111 + 96);
      uint64_t v164 = v158;
      if (v162 != v163)
      {
        do
        {
          *(_OWORD *)(v164 - 72) = *(_OWORD *)(v162 - 72);
          __int128 v165 = *(_OWORD *)(v162 - 56);
          __int128 v166 = *(_OWORD *)(v162 - 40);
          __int128 v167 = *(_OWORD *)(v162 - 24);
          *((_DWORD *)v164 - 2) = *((_DWORD *)v162 - 2);
          *(_OWORD *)(v164 - 24) = v167;
          *(_OWORD *)(v164 - 40) = v166;
          *(_OWORD *)(v164 - 56) = v165;
          v164 -= 72;
          v162 -= 72;
        }

        while (v162 != v163);
        unsigned int v162 = *v145;
      }

      unint64_t v152 = v158 + 72;
      *(void *)(v111 + 8_Block_object_dispose(va, 8) = v164;
      *(void *)(v111 + 96) = v158 + 72;
      *(void *)(v111 + 104) = &v157[72 * v156];
      if (v162) {
        operator delete(v162);
      }
    }

    else
    {
      *(_OWORD *)unint64_t v148 = *(_OWORD *)buf;
      __int128 v149 = *(_OWORD *)&buf[16];
      __int128 v150 = v255[0];
      __int128 v151 = v255[1];
      *(void *)(v148 + 64) = v256;
      *(_OWORD *)(v148 + 32) = v150;
      *(_OWORD *)(v148 + 4_Block_object_dispose(va, 8) = v151;
      *(_OWORD *)(v148 + 16) = v149;
      unint64_t v152 = (char *)(v148 + 72);
    }

    ++v112;
    *(void *)(v111 + 96) = v152;
    double v115 = v115 + *(double *)(v111 + 56);
    v111 += 112LL;
    if (v111 == *(void *)(a1 + 872))
    {
      if (v115 <= 0.0) {
        goto LABEL_318;
      }
      uint64_t v180 = *v242;
      if (*v242 != v111)
      {
        __int16 v181 = (void **)(a1 + 936);
        int v182 = (void *)(a1 + 952);
        int v183 = *(float **)(a1 + 944);
        double v184 = 0.0;
        do
        {
          uint64_t v185 = v180;
          double v186 = *(double *)(v180 + 56) / v115;
          *(double *)(v180 + 64) = v186;
          double v184 = v184 + v186;
          float v187 = v184;
          if ((unint64_t)v183 >= *v182)
          {
            uint64_t v189 = (float *)*v181;
            uint64_t v190 = ((char *)v183 - (_BYTE *)*v181) >> 2;
            unint64_t v191 = v190 + 1;
            uint64_t v192 = *v182 - (void)v189;
            if (v192 >> 1 > v191) {
              unint64_t v191 = v192 >> 1;
            }
            else {
              unint64_t v193 = v191;
            }
            if (v193)
            {
              uint64_t v194 = (char *)sub_10000956C(a1 + 952, v193);
              int v183 = *(float **)(a1 + 944);
              uint64_t v189 = *(float **)(a1 + 936);
            }

            else
            {
              uint64_t v194 = 0LL;
            }

            v195 = (float *)&v194[4 * v190];
            float *v195 = v187;
            v188 = v195 + 1;
            while (v183 != v189)
            {
              int v196 = *((_DWORD *)v183-- - 1);
              *((_DWORD *)v195-- - 1) = v196;
            }

            *(void *)(a1 + 936) = v195;
            *(void *)(a1 + 944) = v188;
            *(void *)(a1 + 952) = &v194[4 * v193];
            if (v189) {
              operator delete(v189);
            }
          }

          else
          {
            float *v183 = v187;
            v188 = v183 + 1;
          }

          *(void *)(a1 + 944) = v188;
          uint64_t v180 = v185 + 112;
          int v183 = v188;
        }

        while (v185 + 112 != *(void *)(a1 + 872));
        if (v180 != *v242)
        {
          uint64_t v197 = *v242 - 112;
          double v198 = 0.0;
          do
          {
            double v198 = v198 + *(double *)(v197 + 176) * *(double *)(v197 + 176);
            v197 += 112LL;
          }

          while (v197 != v185);
          if (v198 > 0.0) {
            *(double *)(a1 + 160_Block_object_dispose(va, 8) = 1.0 / v198;
          }
        }
      }

      goto LABEL_360;
    }
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_1018819B8);
  }
  uint64_t v178 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_ERROR, "CLMM,NULL road", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    LOWORD(v248[0]) = 0;
    LODWORD(v227) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,NULL road",  v248,  v227);
    uint64_t v30 = (char *)v179;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v179);
    goto LABEL_417;
  }

void sub_100D60760( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_100D608C8(uint64_t a1)
{
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 1000) = 0LL;
  *(void *)(a1 + 992) = 0LL;
  uint64_t v2 = *(void *)(a1 + 872);
  uint64_t v3 = *(void *)(a1 + 864);
  uint64_t v4 = v2 - v3;
  if (v2 == v3) {
    return 1LL;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    double v5 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,resample", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      LOWORD(v43) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,resample",  &v43,  2);
      double v37 = (uint8_t *)v36;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::resample()", "%s\n", v36);
      if (v37 != buf) {
        free(v37);
      }
    }
  }

  if (*(double *)(a1 + 1224) == 0.0 || *(_BYTE *)(a1 + 1356))
  {
    int v6 = 5;
    unsigned int v7 = 48;
  }

  else
  {
    int v6 = 10;
    unsigned int v7 = 96;
  }

  uint64_t v43 = 0LL;
  unint64_t v44 = 0LL;
  unint64_t v8 = v7;
  v45[0] = 0LL;
  sub_100D60EF0(&v43, v7);
  *(_DWORD *)std::string buf = 0;
  sub_100963694(&__p, 0x6DB6DB6DB6DB6DB7LL * (v4 >> 4), buf);
  if (*(_BYTE *)(a1 + 2232) && *(_BYTE *)(a1 + 2489) && *(void *)(a1 + 1856))
  {
    int v9 = v6;
    do
    {
      unint64_t v10 = v44;
      if (v44 >= v45[0])
      {
        uint64_t v11 = sub_100D73E7C(&v43, a1 + 1856);
      }

      else
      {
        sub_100D73FA0((uint64_t)v45, v44, a1 + 1856);
        uint64_t v11 = v10 + 112;
      }

      unint64_t v44 = v11;
      sub_100D5BB38( a1,  (uint64_t *)(a1 + 1856),  *(_BYTE *)(a1 + 1876),  *(double *)(a1 + 1904),  *(double *)(a1 + 1888),  *(double *)(a1 + 1896));
      --v9;
    }

    while (v9);
  }

  else
  {
    int v6 = 0;
  }

  int v12 = 0;
  do
  {
    uint64_t v13 = random();
    uint64_t v14 = *(float **)(a1 + 936);
    uint64_t v15 = *(float **)(a1 + 944);
    if (v15 != v14)
    {
      unint64_t v16 = v15 - v14;
      uint64_t v15 = *(float **)(a1 + 936);
      do
      {
        unint64_t v17 = v16 >> 1;
        uint64_t v18 = &v15[v16 >> 1];
        float v20 = *v18;
        double v19 = v18 + 1;
        v16 += ~(v16 >> 1);
        else {
          unint64_t v16 = v17;
        }
      }

      while (v16);
    }

    ++*(_DWORD *)((char *)__p + (((char *)v15 - (char *)v14) << 30 >> 30));
    ++v12;
  }

  while (v12 != (_DWORD)v8 - v6);
  uint64_t v21 = *(void *)(a1 + 864);
  unint64_t v22 = *(void *)(a1 + 872);
  if (v21 == v22)
  {
    unint64_t v22 = *(void *)(a1 + 864);
  }

  else
  {
    unint64_t v23 = 0LL;
    __int128 v24 = __p;
    do
    {
      if (v23 >= (v42 - v24) >> 2) {
        break;
      }
      if (*(int *)&v24[4 * v23] >= 1)
      {
        int v25 = 0;
        do
        {
          unint64_t v26 = v44;
          if (v44 >= v45[0])
          {
            uint64_t v27 = sub_100D73E7C(&v43, v21);
          }

          else
          {
            sub_100D73FA0((uint64_t)v45, v44, v21);
            uint64_t v27 = v26 + 112;
          }

          unint64_t v44 = v27;
          sub_100D5BB38( a1,  (uint64_t *)v21,  *(_BYTE *)(v21 + 20),  *(double *)(v21 + 48),  *(double *)(v21 + 32),  *(double *)(v21 + 40));
          ++v25;
          __int128 v24 = __p;
        }

        while (v25 < *((_DWORD *)__p + v23));
        unint64_t v22 = *(void *)(a1 + 872);
      }

      v21 += 112LL;
      ++v23;
    }

    while (v21 != v22);
  }

  unint64_t v29 = v44;
  unint64_t v30 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v44 - v43) >> 4);
  BOOL v31 = v30 > v8;
  BOOL v28 = v30 <= v8;
  if (v31)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      double v34 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected number of particles after resampling,%{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        v46[0] = 67240192;
        v46[1] = v30;
        LODWORD(v40) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected number of particles after resampling,%{public}d",  v46,  v40);
        int v39 = (uint8_t *)v38;
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::resample()", "%s\n", v38);
        if (v39 != buf) {
          free(v39);
        }
      }
    }
  }

  else
  {
    uint64_t v32 = *(void *)(a1 + 864);
    *(void *)(a1 + 864) = v43;
    *(void *)(a1 + 872) = v29;
    uint64_t v43 = v32;
    unint64_t v44 = v22;
    uint64_t v33 = *(void *)(a1 + 880);
    *(void *)(a1 + 880) = v45[0];
    v45[0] = v33;
  }

  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }

  *(void *)std::string buf = &v43;
  sub_100D73874((void ***)buf);
  return v28;
}

void sub_100D60E90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char *a21)
{
  if (__p) {
    operator delete(__p);
  }
  a21 = &a15;
  sub_100D73874((void ***)&a21);
  _Unwind_Resume(a1);
}

void **sub_100D60EF0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7LL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      sub_100007008();
    }
    uint64_t v5 = a1[1] - *a1;
    _DWORD v7[4] = result;
    v7[0] = sub_10005057C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 112 * v6;
    sub_100D74040(a1, v7);
    return sub_100D74204(v7);
  }

  return result;
}

void sub_100D60F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100D60FAC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 1656);
  if (*(void *)(a1 + 1656)) {
    sub_1000F0D38((void *)(a1 + 1656));
  }
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864)) {
    return 1LL;
  }
  uint64_t v248 = v2;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v3 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,extractSolution", (uint8_t *)&buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      __int16 v257 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,extractSolution",  &v257,  2);
      uint64_t v177 = (std::string *)v176;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v176);
      if (v177 != &buf) {
        free(v177);
      }
    }
  }

  LOBYTE(v257) = 0;
  uint64_t v4 = (double **)(a1 + 984);
  __int128 v258 = 0u;
  uint64_t v5 = (double *)(a1 + 992);
  int v259 = 0;
  __int16 v260 = 1;
  int v261 = 0;
  __int128 v262 = 0u;
  __int128 v263 = 0u;
  __int128 v264 = 0u;
  char v265 = 0;
  __int128 v266 = 0u;
  __int128 v267 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }

  __int128 v269 = _Q1;
  __int128 v270 = 0u;
  uint64_t v268 = 0LL;
  unint64_t v271 = 0xBFF0000000000000LL;
  uint64_t v283 = 0LL;
  int v284 = 0;
  __int16 v282 = 0;
  memset(&v281[32], 0, 32);
  __int128 v285 = 0u;
  __int128 v286 = 0u;
  __int128 v287 = 0u;
  memset(v288, 0, 27);
  memset(&v288[32], 0, 48);
  __int128 v272 = 0u;
  __int128 v273 = 0u;
  __int128 v274 = 0u;
  __int128 v275 = 0u;
  __int128 v276 = 0u;
  __int128 v277 = 0u;
  __int128 v278 = 0u;
  __int128 v279 = 0u;
  __int128 v280 = 0u;
  memset(v281, 0, 30);
  unint64_t v290 = 0xBFF0000000000000LL;
  uint64_t v289 = 0LL;
  char v291 = 0;
  __int128 v299 = 0u;
  int v300 = 0;
  __int128 v292 = 0u;
  __int128 v293 = 0u;
  __int128 v294 = 0u;
  __int128 v295 = 0u;
  memset(v296, 0, sizeof(v296));
  __int128 v297 = 0u;
  char v298 = 0;
  __int16 v301 = 1;
  int v302 = 0;
  char v306 = 0;
  __int128 v304 = 0u;
  __int128 v305 = 0u;
  __int128 v303 = 0u;
  memset(v310, 0, sizeof(v310));
  __int128 v309 = 0u;
  __int128 v308 = 0u;
  *(void *)&_Q1 = *(void *)(a1 + 1224);
  __int128 __p = 0u;
  unint64_t v10 = *v4;
  if (*v4 == v5) {
    goto LABEL_45;
  }
  int v11 = 0;
  uint64_t v249 = (double *)(a1 + 1128);
  uint64_t v12 = a1 + 992;
  do
  {
    if (!*((void *)v10 + 7))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      BOOL v28 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "CLMM,NULL road, bad candidate",  (uint8_t *)&buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_58;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      v314[0] = 0;
      LODWORD(v245) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,NULL road, bad candidate",  v314,  v245);
      uint64_t v27 = (std::string *)v178;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v178);
LABEL_446:
      if (v27 != &buf) {
        free(v27);
      }
      goto LABEL_58;
    }

    if (*((_BYTE *)v10 + 200)) {
      uint64_t v13 = 216LL;
    }
    else {
      uint64_t v13 = 76LL;
    }
    int v14 = *(_DWORD *)((char *)v10 + v13);
    if (v14 > v11)
    {
      uint64_t v12 = (uint64_t)v10;
      int v11 = v14;
    }

    uint64_t v15 = (double *)*((void *)v10 + 1);
    if (v15)
    {
      do
      {
        unint64_t v16 = v15;
        uint64_t v15 = *(double **)v15;
      }

      while (v15);
    }

    else
    {
      do
      {
        unint64_t v16 = (double *)*((void *)v10 + 2);
        _ZF = *(void *)v16 == (void)v10;
        unint64_t v10 = v16;
      }

      while (!_ZF);
    }

    unint64_t v10 = v16;
  }

  while (v16 != v5);
  if (v11 <= 0)
  {
LABEL_45:
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    int v25 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected bestCount<=0",  (uint8_t *)&buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_58;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    v314[0] = 0;
    LODWORD(v245) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected bestCount<=0",  v314,  v245);
    uint64_t v27 = (std::string *)v26;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v26);
    goto LABEL_446;
  }

  if ((double *)v12 == v5)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    int v39 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected no best candidate found",  (uint8_t *)&buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_58;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    v314[0] = 0;
    LODWORD(v245) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected no best candidate found",  v314,  v245);
    uint64_t v27 = (std::string *)v40;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v40);
    goto LABEL_446;
  }

  *(_WORD *)(a1 + 1649) = 0;
  if (!*(_BYTE *)(v12 + 200) || !*(_BYTE *)(v12 + 192) || *(_DWORD *)(v12 + 212) <= *(_DWORD *)(v12 + 208)) {
    goto LABEL_148;
  }
  unint64_t v17 = (double *)sub_100D73AC4(a1 + 984, v12 + 224);
  uint64_t v18 = v17;
  if (v5 == v17)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    unint64_t v41 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected. There should be an outgoing road",  (uint8_t *)&buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_58;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    v314[0] = 0;
    LODWORD(v245) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected. There should be an outgoing road",  v314,  v245);
    uint64_t v27 = (std::string *)v42;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v42);
    goto LABEL_446;
  }

  memset(v319, 0, 20);
  *(_WORD *)&v319[20] = 1;
  LODWORD(v321) = 0;
  uint64_t v323 = 0LL;
  __int128 v322 = 0uLL;
  sub_1000F2F30(v319, (uint64_t *)v17 + 7);
  if (!*(void *)v319)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v43 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected NULL outgoing road candidate",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      v314[0] = 0;
      LODWORD(v245) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected NULL outgoing road candidate",  v314,  v245);
      unint64_t v23 = (std::string *)v203;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", v203);
LABEL_481:
      if (v23 != &buf) {
        free(v23);
      }
    }

void sub_100D6474C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100D6487C(uint64_t a1)
{
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    unint64_t v17 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 1136);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v64 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,roadWithAdustment,number of particles are 0",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v19 = *(void *)(a1 + 1136);
    int v57 = 134349056;
    uint64_t v58 = v19;
    double v21 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,roadWithAdustment,number of particles are 0",  &v57,  12);
LABEL_41:
    int v25 = v20;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "%s\n", v21);
LABEL_42:
    if (v25 != buf) {
      free(v25);
    }
    return;
  }

  *(void *)(a1 + 144_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 1440) = 0LL;
  if (!*(_BYTE *)(a1 + 1008))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    unint64_t v22 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = *(void *)(a1 + 1136);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v64 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v24 = *(void *)(a1 + 1136);
    int v57 = 134349056;
    uint64_t v58 = v24;
    double v21 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9",  &v57,  12);
    goto LABEL_41;
  }

  if (!*(void *)(a1 + 1016))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    unint64_t v26 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(a1 + 1136);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v64 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,roadWithAdustment,road is nullptr",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      uint64_t v28 = *(void *)(a1 + 1136);
      int v57 = 134349056;
      uint64_t v58 = v28;
      double v29 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,roadWithAdustment,road is nullptr",  &v57,  12);
      int v25 = v30;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "%s\n", v29);
      goto LABEL_42;
    }

    return;
  }

  uint64_t v55 = 0LL;
  double v56 = 0.0;
  sub_100D2E36C( (double *)(a1 + 608),  &v56,  (double *)&v55,  *(double *)(a1 + 1416),  *(double *)(a1 + 1424),  *(double *)(a1 + 1200),  *(double *)(a1 + 1432),  *(double *)(a1 + 1184),  *(double *)(a1 + 1192));
  uint64_t v2 = *(void *)(a1 + 1016);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(int *)(v2 + 20);
  if ((_DWORD)v3 == 9 || ((v4 = *(_DWORD *)(v2 + 72), v4 != 255) ? (BOOL v5 = v4 == 6) : (BOOL v5 = 1), v5))
  {
    BOOL v6 = *(_BYTE *)(v2 + 16) == 0;
    unsigned int v7 = dbl_10135D5D0;
LABEL_12:
    double v8 = v7[v6];
    goto LABEL_13;
  }

  double v8 = *(double *)(v2 + 96);
  if (v8 < 0.000001)
  {
    int v39 = *(unsigned __int8 *)(v2 + 16);
    if ((v3 & 0xFFFFFFFE) == 8)
    {
      BOOL v6 = v39 == 0;
      unsigned int v7 = dbl_1012E00F0;
      goto LABEL_12;
    }

    if (v39)
    {
      if (v3 < 8)
      {
        double v45 = (double *)&unk_10135D5F8;
LABEL_90:
        double v8 = v45[v3];
        goto LABEL_13;
      }

      double v8 = 5.55000019;
    }

    else
    {
      if (v3 < 8)
      {
        double v45 = (double *)&unk_10135D638;
        goto LABEL_90;
      }

      double v8 = 7.4000001;
    }
  }

void sub_100D65250(uint64_t a1)
{
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864) || !*(_BYTE *)(a1 + 1392)) {
    return;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v2 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,performPartialMatching", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,performPartialMatching",  v23,  2);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLParticleMapMatcher::performPartialMatching()", "%s\n", v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

  double v3 = *(double *)(a1 + 1280);
  double v4 = *(double *)(a1 + 1288);
  if (*(_BYTE *)(a1 + 1490) && *(_DWORD *)(a1 + 1528) == 1)
  {
    *(double *)(a1 + 1456) = v3;
    *(double *)(a1 + 1464) = v4;
    *(_DWORD *)(a1 + 2972) = 0;
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    BOOL v5 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "CLMM,skipping partial match as solution is inside tunnel",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      LOWORD(v23[0]) = 0;
      LODWORD(v22) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,skipping partial match as solution is inside tunnel",  v23,  v22);
      unsigned int v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLParticleMapMatcher::performPartialMatching()", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    return;
  }

  double v8 = *(double *)(a1 + 1600);
  double v9 = *(double *)(a1 + 1360);
  if (v8 >= 0.0 && v8 < 25.0)
  {
    int v12 = *(_DWORD *)(a1 + 2972);
    if (v9 > 10.0)
    {
LABEL_33:
      int v11 = v12 + 2;
      goto LABEL_38;
    }

uint64_t sub_100D65818(uint64_t a1, double *a2, double *a3, _BYTE *a4)
{
  *a4 = 1;
  uint64_t v9 = *(void *)(a1 + 8);
  double v8 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v72 = v9;
  double v73 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  uint64_t v69 = (uint64_t)&v69;
  double v70 = &v69;
  uint64_t v71 = 0LL;
  __int128 v12 = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 1192);
  __int128 v63 = v12;
  __int128 v13 = *(_OWORD *)(a1 + 1240);
  __int128 v64 = *(_OWORD *)(a1 + 1224);
  __int128 v65 = v13;
  __int128 v14 = *(_OWORD *)(a1 + 1144);
  v61[0] = *(_OWORD *)(a1 + 1128);
  v61[1] = v14;
  __int128 v15 = *(_OWORD *)(a1 + 1176);
  uint64_t v61[2] = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)int v62 = v15;
  if (*(char *)(a1 + 1279) < 0)
  {
    sub_1010DD48C(&v66, *(void **)(a1 + 1256), *(void *)(a1 + 1264));
  }

  else
  {
    __int128 v66 = *(_OWORD *)(a1 + 1256);
    uint64_t v67 = *(void *)(a1 + 1272);
  }

  memcpy(v68, (const void *)(a1 + 1280), sizeof(v68));
  *(_OWORD *)&v62[8] = *(_OWORD *)&v68[17];
  *((void *)&v64 + 1) = v68[19];
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _OWORD *, uint64_t, double))(*(void *)v9 + 64LL))( v9,  &v69,  v61,  1LL,  *a2) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      double v41 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "CLMM,roadsWithinDistance returned false",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        LOWORD(__s1[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,roadsWithinDistance returned false",  __s1,  2);
        uint64_t v51 = (uint8_t *)v50;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)",  "%s\n",  v50);
        if (v51 != buf) {
          free(v51);
        }
      }
    }

    char v42 = 0;
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_87;
  }

  if (!v71)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      double v43 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected roadsWithinDistance returned empty list",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        LOWORD(__s1[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected roadsWithinDistance returned empty list",  __s1,  2);
        uint64_t v55 = (uint8_t *)v54;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)",  "%s\n",  v54);
        if (v55 != buf) {
          free(v55);
        }
      }
    }

    char v42 = 0;
    goto LABEL_87;
  }

  int v16 = v70;
  if (v70 == &v69)
  {
LABEL_77:
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      double v44 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "CLMM,Unexpected roadsWithinDistance returned only railways",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        LOWORD(__s1[0]) = 0;
        LODWORD(v56) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  1LL,  "CLMM,Unexpected roadsWithinDistance returned only railways",  __s1,  v56);
        uint64_t v53 = (uint8_t *)v52;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)",  "%s\n",  v52);
        if (v53 != buf) {
          free(v53);
        }
      }
    }

    char v45 = 0;
    int v38 = 1;
    goto LABEL_86;
  }

  char v17 = 1;
  do
  {
    uint64_t v18 = v16[2];
    if (*(_BYTE *)(v18 + 17)) {
      goto LABEL_54;
    }
    int v19 = (std::__shared_weak_count *)v16[3];
    *(void *)std::string buf = v16[2];
    __int128 v75 = v19;
    if (v19)
    {
      double v20 = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    __int128 v22 = *((_OWORD *)v16 + 3);
    __int128 v76 = *((_OWORD *)v16 + 2);
    __int128 v77 = v22;
    uint64_t v78 = v16[8];
    uint64_t v23 = *(void *)(a1 + 1016);
    if (*(void *)v23 == *(void *)v18) {
      goto LABEL_46;
    }
    if (*(char *)(v23 + 71) < 0)
    {
      sub_1010DD48C(__s1, *(void **)(v23 + 48), *(void *)(v23 + 56));
    }

    else
    {
      *(_OWORD *)__s1 = *(_OWORD *)(v23 + 48);
      uint64_t v60 = *(void *)(v23 + 64);
    }

    if (*(char *)(v18 + 71) < 0)
    {
      sub_1010DD48C(__p, *(void **)(v18 + 48), *(void *)(v18 + 56));
    }

    else
    {
      *(_OWORD *)__int128 __p = *(_OWORD *)(v18 + 48);
      uint64_t v58 = *(void *)(v18 + 64);
    }

    char v24 = HIBYTE(v60);
    if (v60 >= 0) {
      double v25 = (void *)HIBYTE(v60);
    }
    else {
      double v25 = __s1[1];
    }
    __int16 v26 = (void *)HIBYTE(v58);
    int v27 = SHIBYTE(v58);
    if (v58 < 0) {
      __int16 v26 = __p[1];
    }
    if (v25 != v26)
    {
      BOOL v37 = 0;
      if ((SHIBYTE(v58) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_57;
    }

    if (v58 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if (SHIBYTE(v60) < 0)
    {
      BOOL v37 = memcmp(__s1[0], v28, (size_t)__s1[1]) == 0;
      goto LABEL_43;
    }

    if (HIBYTE(v60))
    {
      uint64_t v29 = HIBYTE(v60) - 1LL;
      __int16 v30 = __s1;
      do
      {
        int v32 = *(unsigned __int8 *)v30;
        __int16 v30 = (void **)((char *)v30 + 1);
        int v31 = v32;
        int v34 = *(unsigned __int8 *)v28;
        uint64_t v28 = (void **)((char *)v28 + 1);
        int v33 = v34;
        BOOL v36 = v29-- != 0;
        BOOL v37 = v31 == v33;
      }

      while (v31 == v33 && v36);
LABEL_43:
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_57;
    }

    BOOL v37 = 1;
    if ((SHIBYTE(v58) & 0x80000000) == 0)
    {
LABEL_44:
      if ((v24 & 0x80) == 0) {
        goto LABEL_45;
      }
      goto LABEL_58;
    }

void sub_100D65FE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_100890314((uint64_t *)&STACK[0x208]);
  sub_10000AE14((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_100D66054(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 872);
  uint64_t v3 = *(void *)(a1 + 864);
  if (v2 != v3 && *(_BYTE *)(a1 + 652)) {
    return 1LL;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    BOOL v5 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,prepareSeeding", (uint8_t *)&buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      LOWORD(v113) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,prepareSeeding",  &v113,  2);
      __int128 v91 = (char *)v90;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v90);
    }
  }

  unsigned int v7 = *(_DWORD **)(a1 + 8);
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v111 = v7;
  int v112 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  uint64_t v98 = (double *)(a1 + 1128);
  double v10 = sub_100F1F594((double *)(a1 + 1128)) * 4.0;
  double v11 = 75.0;
  if (v10 >= 75.0)
  {
    double v11 = v10;
    if (v10 > 249.9999) {
      double v11 = 249.9999;
    }
  }

  if (v2 == v3 || !*(_BYTE *)(a1 + 1008))
  {
LABEL_39:
    double v20 = 249.9999 * 5.0;
    if (v11 <= 249.9999 * 5.0)
    {
      double v20 = v11;
    }

    else
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      unint64_t v21 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected maxDistance,%{public}.1lf",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        LODWORD(v113) = 134349056;
        *(double *)((char *)&v113 + 4) = v11;
        LODWORD(v95) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected maxDistance,%{public}.1lf",  &v113,  v95);
        uint64_t v23 = (char *)v22;
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v22);
      }
    }

    v7[9] = 0;
    uint64_t v108 = (uint64_t)&v108;
    uint64_t v109 = &v108;
    uint64_t v110 = 0LL;
    if (((*(uint64_t (**)(_DWORD *, uint64_t *, double *, uint64_t, double))(*(void *)v7 + 64LL))( v7,  &v108,  v98,  1LL,  v20) & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        char v45 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "CLMM,roadsWithinDistance returned false",  (uint8_t *)&buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          LOWORD(v113) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,roadsWithinDistance returned false",  &v113,  v95);
          __int128 v93 = (char *)v92;
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v92);
        }
      }

      uint64_t v4 = 0LL;
      ++*(_DWORD *)(a1 + 108);
LABEL_188:
      sub_100890314(&v108);
      if (!v6) {
        return v4;
      }
      goto LABEL_189;
    }

    if (!v110)
    {
      uint64_t v4 = 0LL;
      ++*(_DWORD *)(a1 + 104);
      goto LABEL_188;
    }

    uint64_t v97 = (uint64_t *)(a1 + 888);
    uint64_t v24 = *(void *)(a1 + 896);
    uint64_t v25 = *(void *)(a1 + 888);
    while (v24 != v25)
    {
      v24 -= 112LL;
      sub_100D738F8(a1 + 904, v24);
    }

    *(void *)(a1 + 896) = v25;
    sub_100D60EF0(v97, 0x60uLL);
    *(void *)(a1 + 96_Block_object_dispose(va, 8) = *(void *)(a1 + 960);
    sub_100139A60((void **)(a1 + 960), 0x60uLL);
    __int128 v96 = (void **)(a1 + 960);
    __int128 v113 = 0uLL;
    LODWORD(v114) = 0;
    WORD2(v114) = 1;
    DWORD2(v114) = 0;
    unint64_t v118 = 0LL;
    uint64_t v119 = 0LL;
    float v117 = 0LL;
    __int128 v115 = 0u;
    memset(v116, 0, sizeof(v116));
    __int16 v26 = v109;
    if (v109 != &v108)
    {
      double v27 = 0.0;
      double v28 = 0.0;
      double v29 = 0.0;
      while (1)
      {
        if (*(_BYTE *)(v26[2] + 17) && *(_BYTE *)(a1 + 96))
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          __int16 v30 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "CLMM,including railway",  (uint8_t *)&buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_1018819B8);
            }
            LOWORD(__s1[0]) = 0;
            LODWORD(v95) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,including railway",  __s1,  v95);
            char v42 = (char *)v41;
            sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v41);
          }
        }

        __s1[0] = 0LL;
        __s1[1] = 0LL;
        LODWORD(v102) = 0;
        WORD2(v102) = 1;
        DWORD2(v102) = 0;
        double v106 = 0LL;
        uint64_t v107 = 0LL;
        __int128 __p = 0LL;
        __int128 v103 = 0u;
        memset(v104, 0, 33);
        sub_1000F2F30(__s1, v26 + 2);
        __int128 v31 = *((_OWORD *)v26 + 2);
        __int128 v32 = *((_OWORD *)v26 + 3);
        v104[0] = v26[8];
        __int128 v102 = v31;
        __int128 v103 = v32;
        int v33 = __s1[0];
        if (__s1[0])
        {
          sub_100D53308(a1, a1 + 656, (uint64_t)(v26 + 2), v98, &v104[1], &v104[3]);
          if (*(double *)&v104[1] <= v29)
          {
            double v34 = v29;
          }

          else
          {
            sub_1000F2F30(&v113, (uint64_t *)__s1);
            __int128 v114 = v102;
            __int128 v115 = v103;
            *(void *)uint64_t v116 = v104[0];
            *(_OWORD *)&v116[8] = *(_OWORD *)&v104[1];
            *(_OWORD *)&v116[17] = *(_OWORD *)((char *)&v104[2] + 1);
            sub_100BDD0F8( (char *)&v117,  (char *)__p,  (uint64_t)v106,  0x8E38E38E38E38E39LL * ((v106 - (_BYTE *)__p) >> 3));
            double v34 = *(double *)&v104[1];
            double v28 = v29;
          }

          unint64_t v36 = *(void *)(a1 + 896);
          if (v36 >= *(void *)(a1 + 904))
          {
            uint64_t v37 = sub_100D73E7C(v97, (uint64_t)__s1);
          }

          else
          {
            sub_100D73FA0(a1 + 904, *(void *)(a1 + 896), (uint64_t)__s1);
            uint64_t v37 = v36 + 112;
            *(void *)(a1 + 896) = v36 + 112;
          }

          *(void *)(a1 + 896) = v37;
          double v27 = v27 + *(double *)&v104[1];
          double v29 = v34;
        }

        else
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          uint64_t v35 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected NULL road",  (uint8_t *)&buf,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_1018819B8);
            }
            LOWORD(__dst[0]) = 0;
            LODWORD(v95) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected NULL road",  __dst,  v95);
            double v44 = (char *)v43;
            sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v43);
          }

          ++*(_DWORD *)(a1 + 104);
        }

        if (__p)
        {
          double v106 = __p;
          operator delete(__p);
        }

        int v38 = (std::__shared_weak_count *)__s1[1];
        if (__s1[1])
        {
          int v39 = (unint64_t *)((char *)__s1[1] + 8);
          do
            unint64_t v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }

        if (!v33) {
          break;
        }
        __int16 v26 = (uint64_t *)v26[1];
        if (v26 == &v108) {
          goto LABEL_105;
        }
      }

      uint64_t v4 = 0LL;
      goto LABEL_180;
    }

    double v27 = 0.0;
LABEL_105:
    uint64_t v46 = *(void *)(a1 + 888);
    if (v46 == *(void *)(a1 + 896))
    {
      uint64_t v4 = 0LL;
      ++*(_DWORD *)(a1 + 104);
    }

    else
    {
      uint64_t v47 = (void *)(a1 + 976);
      unint64_t v48 = *(float **)(a1 + 968);
      double v49 = 0.0;
      do
      {
        double v50 = *(double *)(v46 + 56) / v27;
        *(double *)(v46 + 64) = v50;
        double v49 = v49 + v50;
        float v51 = v49;
        if ((unint64_t)v48 >= *v47)
        {
          uint64_t v53 = (float *)*v96;
          uint64_t v54 = ((char *)v48 - (_BYTE *)*v96) >> 2;
          unint64_t v55 = v54 + 1;
          uint64_t v56 = *v47 - (void)v53;
          if (v56 >> 1 > v55) {
            unint64_t v55 = v56 >> 1;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            uint64_t v58 = (char *)sub_10000956C(a1 + 976, v57);
            unint64_t v48 = *(float **)(a1 + 968);
            uint64_t v53 = *(float **)(a1 + 960);
          }

          else
          {
            uint64_t v58 = 0LL;
          }

          __int16 v59 = (float *)&v58[4 * v54];
          *__int16 v59 = v51;
          uint64_t v52 = v59 + 1;
          while (v48 != v53)
          {
            int v60 = *((_DWORD *)v48-- - 1);
            *((_DWORD *)v59-- - 1) = v60;
          }

          *(void *)(a1 + 960) = v59;
          *(void *)(a1 + 96_Block_object_dispose(va, 8) = v52;
          *(void *)(a1 + 976) = &v58[4 * v57];
          if (v53) {
            operator delete(v53);
          }
        }

        else
        {
          *unint64_t v48 = v51;
          uint64_t v52 = v48 + 1;
        }

        *(void *)(a1 + 96_Block_object_dispose(va, 8) = v52;
        v46 += 112LL;
        unint64_t v48 = v52;
      }

      while (v46 != *(void *)(a1 + 896));
      *(void *)(a1 + 1624) = 0LL;
      if (v2 != v3)
      {
        BOOL v61 = v109;
        if (v109 == &v108)
        {
          *(void *)(a1 + 1632) = 0LL;
          goto LABEL_179;
        }

        while (1)
        {
          __int128 buf = 0uLL;
          LODWORD(v121) = 0;
          WORD2(v121) = 1;
          DWORD2(v121) = 0;
          double v127 = 0LL;
          uint64_t v128 = 0LL;
          double v126 = 0LL;
          __int128 v122 = 0u;
          __int128 v123 = 0u;
          __int128 v124 = 0u;
          char v125 = 0;
          sub_1000F2F30(&buf, v61 + 2);
          __int128 v63 = *((_OWORD *)v61 + 2);
          __int128 v64 = *((_OWORD *)v61 + 3);
          *(void *)&__int128 v123 = v61[8];
          __int128 v121 = v63;
          __int128 v122 = v64;
          uint64_t v65 = *(void *)(a1 + 1016);
          if ((void)buf == v65) {
            goto LABEL_160;
          }
          if (*(char *)(buf + 71) < 0)
          {
            sub_1010DD48C(__s1, *(void **)(buf + 48), *(void *)(buf + 56));
            uint64_t v65 = *(void *)(a1 + 1016);
          }

          else
          {
            *(_OWORD *)__s1 = *(_OWORD *)(buf + 48);
            *(void *)&__int128 v102 = *(void *)(buf + 64);
          }

          if (*(char *)(v65 + 71) < 0)
          {
            sub_1010DD48C(__dst, *(void **)(v65 + 48), *(void *)(v65 + 56));
          }

          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)(v65 + 48);
            uint64_t v100 = *(void *)(v65 + 64);
          }

          char v66 = BYTE7(v102);
          if ((SBYTE7(v102) & 0x80u) == 0) {
            uint64_t v67 = (void *)BYTE7(v102);
          }
          else {
            uint64_t v67 = __s1[1];
          }
          __int128 v68 = (void *)HIBYTE(v100);
          int v69 = SHIBYTE(v100);
          if (v100 < 0) {
            __int128 v68 = __dst[1];
          }
          if (v67 == v68)
          {
            if (v100 >= 0) {
              int v62 = __dst;
            }
            else {
              int v62 = (void **)__dst[0];
            }
            if (SBYTE7(v102) < 0)
            {
              BOOL v78 = memcmp(__s1[0], v62, (size_t)__s1[1]) == 0;
              if ((v69 & 0x80000000) == 0) {
                goto LABEL_151;
              }
            }

            else if (BYTE7(v102))
            {
              uint64_t v70 = BYTE7(v102) - 1LL;
              uint64_t v71 = __s1;
              do
              {
                int v73 = *(unsigned __int8 *)v71;
                uint64_t v71 = (void **)((char *)v71 + 1);
                int v72 = v73;
                int v75 = *(unsigned __int8 *)v62;
                int v62 = (void **)((char *)v62 + 1);
                int v74 = v75;
                BOOL v77 = v70-- != 0;
                BOOL v78 = v72 == v74;
              }

              while (v72 == v74 && v77);
              if ((SHIBYTE(v100) & 0x80000000) == 0)
              {
LABEL_151:
                if ((v66 & 0x80) == 0) {
                  goto LABEL_152;
                }
                goto LABEL_156;
              }
            }

            else
            {
              BOOL v78 = 1;
              if ((SHIBYTE(v100) & 0x80000000) == 0) {
                goto LABEL_151;
              }
            }
          }

          else
          {
            BOOL v78 = 0;
            if ((SHIBYTE(v100) & 0x80000000) == 0) {
              goto LABEL_151;
            }
          }

          operator delete(__dst[0]);
          if ((BYTE7(v102) & 0x80) == 0)
          {
LABEL_152:
            if (!v78) {
              goto LABEL_157;
            }
            goto LABEL_160;
          }

void sub_100D671A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, char a46, uint64_t a47, char a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

uint64_t sub_100D67250(uint64_t a1, _BYTE *a2)
{
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864))
  {
    uint64_t result = 1LL;
    *a2 = 1;
    return result;
  }

  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v4 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLMM,assessMatchAndNeedForReseed",  (uint8_t *)buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      LOWORD(v39.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,assessMatchAndNeedForReseed",  &v39,  2);
      double v29 = (std::string *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)",  "%s\n",  v28);
      if (v29 != buf) {
        free(v29);
      }
    }
  }

  *(void *)(a1 + 1360) = *(void *)(a1 + 1088);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a1 + 1576);
  float v5 = *(double *)(a1 + 1632);
  *(float *)(a1 + 130_Block_object_dispose(va, 8) = v5;
  *(void *)(a1 + 136_Block_object_dispose(va, 8) = *(void *)(a1 + 1592);
  uint64_t v6 = *(void *)(a1 + 1016);
  *(_BYTE *)(a1 + 1489) = *(_BYTE *)(v6 + 19);
  *(_BYTE *)(a1 + 1490) = *(_BYTE *)(v6 + 18);
  if (*(_BYTE *)(a1 + 1649)) {
    BOOL v7 = *(_BYTE *)(a1 + 1650) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  BOOL v9 = sub_100D51B34(a1, a1 + 1128, v7);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    double v10 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      sub_100F204B0(a1 + 1128, buf);
      double v11 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? buf : (std::string *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v39.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "CLMM,postEvaluateMatch,%{private}s",  (uint8_t *)&v39,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      uint64_t v30 = qword_1019348B8;
      sub_100F204B0(a1 + 1128, &v39);
      if ((v39.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v31 = &v39;
      }
      else {
        __int128 v31 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      int v40 = 136380675;
      double v41 = v31;
      LODWORD(v3_Block_object_dispose(va, 8) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v30,  2LL,  "CLMM,postEvaluateMatch,%{private}s",  &v40,  v38);
      int v33 = v32;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)",  "%s\n",  (const char *)v33);
      if (v33 != buf) {
        free(v33);
      }
    }
  }

  *(_BYTE *)(a1 + 1392) = v9;
  if (*(_BYTE *)(a1 + 841)) {
    BOOL v12 = v9;
  }
  else {
    BOOL v12 = 0;
  }
  *(_BYTE *)(a1 + 147_Block_object_dispose(va, 8) = v12;
  if (!*(_BYTE *)(a1 + 1488)) {
    sub_100BDC888( a1 + 3832,  a1 + 1016,  v9,  *(double *)(a1 + 1136),  *(double *)(a1 + 1208),  *(double *)(a1 + 1200),  *(double *)(a1 + 1216));
  }
  sub_100BDC988(a1 + 3184, (__int128 *)(a1 + 1128));
  BOOL v13 = sub_100BDCBC8((uint64_t *)(a1 + 3184), *(unsigned __int8 *)(a1 + 96));
  if (!v13)
  {
    if (v9)
    {
      *(_DWORD *)(a1 + 296_Block_object_dispose(va, 8) = 0;
      *(_OWORD *)(a1 + 2832) = 0u;
      return !v13;
    }

    *(_DWORD *)(a1 + 140_Block_object_dispose(va, 8) = 0;
    *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
    *(void *)(a1 + 1296) = *(void *)(a1 + 1232);
    if (*(double *)(a1 + 1088) > 70.0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        __int128 v14 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v15 = *(void *)(a1 + 1088);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v15;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000LL;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "CLMM,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf",  (uint8_t *)buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          std::string::size_type v34 = *(void *)(a1 + 1088);
          LODWORD(v39.__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = v34;
          WORD2(v39.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000LL;
          LODWORD(v3_Block_object_dispose(va, 8) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf",  &v39,  v38);
          unint64_t v36 = (std::string *)v35;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)",  "%s\n",  v35);
          if (v36 != buf) {
            free(v36);
          }
        }
      }

      *a2 = 1;
    }

    unsigned int v16 = *(_DWORD *)(a1 + 2968);
    if ((v16 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 296_Block_object_dispose(va, 8) = v16 + 1, v16 < 0x1E))
    {
      if (*(double *)(a1 + 1088) <= 50.0
        || *(double *)(a1 + 1928) <= 50.0
        || (double v18 = *(double *)(a1 + 1608), v18 < 0.0)
        || (double v24 = *(double *)(a1 + 2448), v24 >= 2.5)
        || v18 >= 2.5
        || v24 < 0.0)
      {
        *(double *)(a1 + 2832) = *(double *)(a1 + 1800) + *(double *)(a1 + 2832);
        double v19 = sub_100D2DBDC( (double *)(a1 + 608),  *(double *)(a1 + 2120),  *(double *)(a1 + 2128),  *(double *)(a1 + 1280),  *(double *)(a1 + 1288),  *(double *)(a1 + 1200))
            + *(double *)(a1 + 2840);
        *(double *)(a1 + 2840) = v19;
        double v20 = *(double *)(a1 + 2832);
        if (v20 > 80.0 && v20 / v19 > 5.0)
        {
          *a2 = 1;
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_1018819B8);
            }
            unint64_t v21 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "CLMM,Reseeding due to stuck at dead-end while observations move away",  (uint8_t *)buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              LOWORD(v39.__r_.__value_.__l.__data_) = 0;
              LODWORD(v3_Block_object_dispose(va, 8) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Reseeding due to stuck at dead-end while observations move away",  &v39,  v38);
              uint64_t v23 = (std::string *)v22;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)",  "%s\n",  v22);
              if (v23 != buf) {
                free(v23);
              }
            }
          }
        }

        return !v13;
      }

      if (!*(_BYTE *)(a1 + 96)) {
        goto LABEL_47;
      }
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      uint64_t v25 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "CLMM,Reseeding due to Neff",  (uint8_t *)buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      LOWORD(v39.__r_.__value_.__l.__data_) = 0;
      LODWORD(v3_Block_object_dispose(va, 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Reseeding due to Neff",  &v39,  v38);
      double v27 = (std::string *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)",  "%s\n",  v26);
    }

    else
    {
      if (!*(_BYTE *)(a1 + 96)) {
        goto LABEL_47;
      }
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      double v17 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        buf[0].__r_.__value_.__r.__words[0] = 0x1E04020100LL;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLMM,Reseeding due to badMatchCount,max,%{public}d",  (uint8_t *)buf,  8u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      v39.__r_.__value_.__r.__words[0] = 0x1E04020100LL;
      LODWORD(v3_Block_object_dispose(va, 8) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Reseeding due to badMatchCount,max,%{public}d",  &v39,  v38);
      double v27 = (std::string *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)",  "%s\n",  v37);
    }

    if (v27 != buf) {
      free(v27);
    }
LABEL_47:
    *a2 = 1;
    return !v13;
  }

  *(_BYTE *)(a1 + 1392) = 0;
  *(_BYTE *)(a1 + 147_Block_object_dispose(va, 8) = 0;
  return !v13;
}

BOOL sub_100D67D0C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v2 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,reseed", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      LOWORD(v45) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,reseed",  &v45,  2);
      std::string v39 = (uint8_t *)v38;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::reseed()", "%s\n", v38);
      if (v39 != buf) {
        free(v39);
      }
    }
  }

  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  id v46[2] = *(void *)(a1 + 8);
  v46[3] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  sub_100D683E0(a1);
  if (*(void *)(a1 + 888) == *(void *)(a1 + 896) && (sub_100D66054(a1) & 1) == 0)
  {
    BOOL v31 = 0LL;
    if (!v3) {
      return v31;
    }
    goto LABEL_58;
  }

  __int128 v45 = 0uLL;
  v46[0] = 0LL;
  sub_100D60EF0((uint64_t *)&v45, 0x60uLL);
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 896) - *(void *)(a1 + 888)) >> 4);
  *(_DWORD *)__int128 buf = 0;
  sub_100963694(&__p, v6, buf);
  sub_100D73928(a1 + 984, *(void **)(a1 + 992));
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 1000) = 0LL;
  *(void *)(a1 + 992) = 0LL;
  uint64_t v7 = *(void *)(a1 + 896);
  uint64_t v8 = *(void *)(a1 + 888);
  if ((int)(-1227133513 * ((unint64_t)(v7 - v8) >> 4)) <= 95 && v8 != v7)
  {
    uint64_t v7 = *(void *)(a1 + 888);
    do
    {
      uint64_t v10 = *((void *)&v45 + 1);
      if (*((void *)&v45 + 1) >= v46[0])
      {
        uint64_t v11 = sub_100D73E7C((uint64_t *)&v45, v7);
      }

      else
      {
        sub_100D73FA0((uint64_t)v46, *((uint64_t *)&v45 + 1), v7);
        uint64_t v11 = v10 + 112;
      }

      *((void *)&v45 + 1) = v11;
      sub_100D5BB38( a1,  (uint64_t *)v7,  *(_BYTE *)(v7 + 20),  *(double *)(v7 + 48),  *(double *)(v7 + 32),  *(double *)(v7 + 40));
      v7 += 112LL;
    }

    while (v7 != *(void *)(a1 + 896));
  }

  uint64_t v12 = *((void *)&v45 + 1);
  uint64_t v13 = v45;
  if (*((void *)&v45 + 1) - (void)v45 != 10752LL)
  {
    unint64_t v14 = 0LL;
    do
    {
      uint64_t v15 = random();
      unsigned int v16 = *(float **)(a1 + 960);
      double v17 = *(float **)(a1 + 968);
      if (v17 == v16)
      {
        double v19 = *(float **)(a1 + 968);
      }

      else
      {
        unint64_t v18 = v17 - v16;
        double v19 = *(float **)(a1 + 960);
        do
        {
          unint64_t v20 = v18 >> 1;
          unint64_t v21 = &v19[v18 >> 1];
          float v23 = *v21;
          __int128 v22 = v21 + 1;
          v18 += ~(v18 >> 1);
          else {
            unint64_t v18 = v20;
          }
        }

        while (v18);
      }

      if (v17 != v19) {
        ++*(_DWORD *)((char *)__p + (((char *)v19 - (char *)v16) << 30 >> 30));
      }
      ++v14;
      uint64_t v12 = *((void *)&v45 + 1);
      uint64_t v13 = v45;
    }

    while (96 - 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)&v45 + 1) - v45) >> 4) > v14);
    uint64_t v7 = *(void *)(a1 + 896);
  }

  uint64_t v24 = *(void *)(a1 + 888);
  if (v24 != v7)
  {
    unint64_t v25 = 0LL;
    __int16 v26 = __p;
    do
    {
      if (v25 >= (v44 - v26) >> 2) {
        break;
      }
      if (*(int *)&v26[4 * v25] >= 1)
      {
        int v27 = 0;
        do
        {
          uint64_t v28 = *((void *)&v45 + 1);
          if (*((void *)&v45 + 1) >= v46[0])
          {
            uint64_t v29 = sub_100D73E7C((uint64_t *)&v45, v24);
          }

          else
          {
            sub_100D73FA0((uint64_t)v46, *((uint64_t *)&v45 + 1), v24);
            uint64_t v29 = v28 + 112;
          }

          *((void *)&v45 + 1) = v29;
          sub_100D5BB38( a1,  (uint64_t *)v24,  *(_BYTE *)(v24 + 20),  *(double *)(v24 + 48),  *(double *)(v24 + 32),  *(double *)(v24 + 40));
          ++v27;
          __int16 v26 = __p;
        }

        while (v27 < *((_DWORD *)__p + v25));
        uint64_t v7 = *(void *)(a1 + 896);
      }

      v24 += 112LL;
      ++v25;
    }

    while (v24 != v7);
    uint64_t v12 = *((void *)&v45 + 1);
    uint64_t v13 = v45;
  }

  unint64_t v30 = 0x6DB6DB6DB6DB6DB7LL * ((v12 - v13) >> 4);
  BOOL v31 = v30 < 0x61;
  if (v30 >= 0x61)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    std::string::size_type v34 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected number of particles after resampling,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      v47[0] = 67240192;
      v47[1] = v30;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected number of particles after resampling,%{public}d",  v47,  v42);
      double v41 = (uint8_t *)v40;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLParticleMapMatcher::reseed()", "%s\n", v40);
      if (v41 != buf) {
        free(v41);
      }
    }

    ++*(_DWORD *)(a1 + 104);
  }

  else
  {
    __int128 v32 = *(_OWORD *)(a1 + 864);
    *(void *)(a1 + 864) = v13;
    *(void *)(a1 + 872) = v12;
    __int128 v45 = v32;
    uint64_t v33 = *(void *)(a1 + 880);
    *(void *)(a1 + 880) = v46[0];
    v46[0] = v33;
  }

  if (__p)
  {
    double v44 = __p;
    operator delete(__p);
  }

  *(void *)__int128 buf = &v45;
  sub_100D73874((void ***)buf);
  if (v3)
  {
LABEL_58:
    uint64_t v35 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  return v31;
}

void sub_100D68368( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char *a23)
{
  if (__p) {
    operator delete(__p);
  }
  a23 = &a15;
  sub_100D73874((void ***)&a23);
  sub_10000AE14((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_100D683E0(uint64_t a1)
{
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_1018819B8);
  }
  uint64_t v2 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 1136);
    uint64_t v4 = *(void *)(a1 + 1184);
    uint64_t v5 = *(void *)(a1 + 1192);
    *(_DWORD *)__int128 buf = 134349569;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&_BYTE buf[12] = 2049;
    *(void *)&_BYTE buf[14] = v4;
    *(_WORD *)&_BYTE buf[22] = 2049;
    *(void *)&__int128 v28 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,filterResetForReseed,LL,%{private}.7lf,%{private}.7lf",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    uint64_t v14 = *(void *)(a1 + 1136);
    uint64_t v15 = *(void *)(a1 + 1184);
    uint64_t v16 = *(void *)(a1 + 1192);
    int v19 = 134349569;
    *(void *)unint64_t v20 = v14;
    *(_WORD *)&v20[8] = 2049;
    *(void *)&v20[10] = v15;
    *(_WORD *)&v20[18] = 2049;
    *(void *)&__int128 v21 = v16;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,filterResetForReseed,LL,%{private}.7lf,%{private}.7lf",  &v19,  32);
    unint64_t v18 = (char *)v17;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLParticleMapMatcher::resetForReseed()", "%s\n", v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  sub_100D4FFD4(a1);
  *(_DWORD *)(a1 + 296_Block_object_dispose(va, 8) = -1;
  uint64_t v6 = *(void *)(a1 + 872);
  uint64_t v7 = *(void *)(a1 + 864);
  while (v6 != v7)
  {
    v6 -= 112LL;
    sub_100D738F8(a1 + 880, v6);
  }

  *(void *)(a1 + 872) = v7;
  sub_100D73928(a1 + 984, *(void **)(a1 + 992));
  *(void *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_BYTE *)(a1 + 100_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  sub_1001B4C40((void *)(a1 + 912));
  buf[0] = 0;
  *(_OWORD *)&uint8_t buf[8] = 0u;
  __int128 v28 = 0u;
  LODWORD(v29) = 0;
  WORD2(v29) = 1;
  DWORD2(v29) = 0;
  __int128 v30 = 0u;
  memset(v31, 0, 33);
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  __int128 v32 = 0LL;
  int v35 = 0;
  *(void *)(a1 + 2704) = 0LL;
  *(_OWORD *)(a1 + 268_Block_object_dispose(va, 8) = *(_OWORD *)buf;
  sub_1000F2F30((void *)(a1 + 2712), (uint64_t *)&v28);
  *(_OWORD *)(a1 + 272_Block_object_dispose(va, 8) = v29;
  *(_OWORD *)(a1 + 2744) = v30;
  *(void *)(a1 + 2760) = v31[0];
  *(_OWORD *)(a1 + 276_Block_object_dispose(va, 8) = *(_OWORD *)&v31[1];
  *(_OWORD *)(a1 + 2777) = *(_OWORD *)((char *)&v31[2] + 1);
  if ((_BYTE *)(a1 + 2688) != buf) {
    sub_100BDD0F8((char *)(a1 + 2800), (char *)v32, (uint64_t)v33, 0x8E38E38E38E38E39LL * ((v33 - (_BYTE *)v32) >> 3));
  }
  *(_DWORD *)(a1 + 2824) = v35;
  *(_DWORD *)(a1 + 2972) = 0;
  LOBYTE(v19) = 0;
  *(void *)&v20[4] = 0LL;
  *(void *)&_BYTE v20[12] = 0LL;
  LODWORD(v21) = 0;
  WORD2(v21) = 1;
  DWORD2(v21) = 0;
  unint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  __int128 __p = 0LL;
  __int128 v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_BYTE *)(a1 + 284_Block_object_dispose(va, 8) = 0;
  sub_1000F2F30((void *)(a1 + 2856), (uint64_t *)&v20[4]);
  *(_OWORD *)(a1 + 2872) = v21;
  *(_OWORD *)(a1 + 288_Block_object_dispose(va, 8) = v22;
  *(void *)(a1 + 2904) = *(void *)v23;
  *(_OWORD *)(a1 + 2912) = *(_OWORD *)&v23[8];
  *(_OWORD *)(a1 + 2921) = *(_OWORD *)&v23[17];
  sub_100D68864(a1 + 3832);
  *(_DWORD *)(a1 + 4040) = 0;
  if (__p)
  {
    unint64_t v25 = __p;
    operator delete(__p);
  }

  uint64_t v8 = *(std::__shared_weak_count **)&v20[12];
  if (*(void *)&v20[12])
  {
    BOOL v9 = (unint64_t *)(*(void *)&v20[12] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }

  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1))
  {
    uint64_t v12 = (unint64_t *)(*((void *)&v28 + 1) + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100D68838( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100D68864(uint64_t a1)
{
  v14[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)&_WORD v14[8] = _Q0;
  __int128 v16 = 0uLL;
  uint64_t v15 = 0LL;
  __int128 v17 = _Q0;
  uint64_t v18 = 0LL;
  int v19 = 0LL;
  LODWORD(v20) = 0;
  WORD2(v20) = 1;
  DWORD2(v20) = 0;
  __int128 __p = 0LL;
  uint64_t v24 = 0LL;
  __int128 v21 = 0u;
  memset(v22, 0, sizeof(v22));
  uint64_t v25 = 0LL;
  unint64_t v26 = 0xBFF0000000000000LL;
  __int128 v7 = *(_OWORD *)v14;
  __int128 v8 = *(unint64_t *)&v14[16];
  __int128 v9 = v17;
  *(_OWORD *)(a1 + 32) = 0uLL;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v9;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  sub_1000F2F30((void *)(a1 + 64), &v18);
  __int128 v10 = v21;
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = v10;
  *(void *)(a1 + 112) = *(void *)v22;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v22[8];
  *(_OWORD *)(a1 + 129) = *(_OWORD *)&v22[17];
  if (v14 != (_BYTE *)a1) {
    sub_100BDD0F8((char *)(a1 + 152), (char *)__p, (uint64_t)v24, 0x8E38E38E38E38E39LL * ((v24 - (_BYTE *)__p) >> 3));
  }
  *(void *)(a1 + 176) = v26;
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }

  uint64_t v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }